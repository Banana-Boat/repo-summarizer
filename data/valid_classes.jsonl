{"index": 12376, "repo": "spring-messaging-6.0.11", "code": "public class SimpleBrokerMessageHandler extends AbstractBrokerMessageHandler {\n\t// Return the configured header initializer.\n\tMessageHeaderInitializer getHeaderInitializer();\n\t// The configured value for the heart-beat settings.\n\tlong[] getHeartbeatValue();\n\tSubscriptionRegistry getSubscriptionRegistry();\n\t// Return the configured TaskScheduler.\n\torg.springframework.scheduling.TaskScheduler getTaskScheduler();\n\tprotected void handleMessageInternal(Message<?> message);\n}", "des": "A \"simple\" message broker that recognizes the message types defined in SimpMessageType, keeps track of subscriptions with the help of a SubscriptionRegistry, and sends messages to subscribers."}
{"index": 12377, "repo": "spring-messaging-6.0.11", "code": "public class SimpleBrokerRegistration extends AbstractBrokerRegistration {\n\tprotected SimpleBrokerMessageHandler getMessageHandler(SubscribableChannel brokerChannel);\n\t// Configure the value for the heartbeat settings.\n\tSimpleBrokerRegistration setHeartbeatValue(long[] heartbeat);\n\t// Configure the name of a header that a subscription message can have for the purpose of filtering messages matched to the subscription.\n\tvoid setSelectorHeaderName(String selectorHeaderName);\n}", "des": "Registration class for configuring a SimpleBrokerMessageHandler."}
{"index": 12378, "repo": "spring-messaging-6.0.11", "code": "public class SimpleMessageConverter extends Object implements MessageConverter {\n\t// Convert the payload of a Message from a serialized form to a typed Object of the specified target class.\n\tObject fromMessage(Message<?> message, Class<?> targetClass);\n\t// Create a Message whose payload is the result of converting the given payload Object to serialized form.\n\tMessage<?> toMessage(Object payload, MessageHeaders headers);\n}", "des": "A simple converter that simply unwraps the message payload as long as it matches the expected target class."}
{"index": 12379, "repo": "spring-messaging-6.0.11", "code": "public abstract class SimpLogging extends Object {\n\t// Wrap the given primary logger with a composite logger that delegates to either the primary or to the shared fallback logger \"org.springframework.web.HttpLogging\", if the primary is not enabled.\n\tstatic org.apache.commons.logging.Log forLog(org.apache.commons.logging.Log primaryLogger);\n}", "des": "Holds the shared logger named \"org.springframework.web.SimpLogging\" to use for STOMP over WebSocket messaging when logging for \"org.springframework.messaging.simp\" is off but logging for \"org.springframework.web\" is on."}
{"index": 12380, "repo": "spring-messaging-6.0.11", "code": "public class SimpMessageHeaderAccessor extends NativeMessageHeaderAccessor {\n\t// Create an instance with SimpMessageType MESSAGE.\n\tstatic SimpMessageHeaderAccessor create();\n\t// Create an instance with the given SimpMessageType.\n\tstatic SimpMessageHeaderAccessor create(SimpMessageType messageType);\n\t// Build a 'nested' accessor for the given message.\n\tprotected MessageHeaderAccessor createAccessor(Message<?> message);\n\tString getDestination();\n\tstatic String getDestination(Map<String,Object> headers);\n}", "des": "A base class for working with message headers in simple messaging protocols that support basic messaging patterns."}
{"index": 12381, "repo": "spring-messaging-6.0.11", "code": "public class SimpMessageMappingInfo extends Object implements MessageCondition<SimpMessageMappingInfo> {\n\t// Define the rules for combining this condition with another.\n\tSimpMessageMappingInfo combine(SimpMessageMappingInfo other);\n\t// Compare this condition to another in the context of a specific message.\n\tint compareTo(SimpMessageMappingInfo other, Message<?> message);\n\tboolean equals(Object obj);\n\tDestinationPatternsMessageCondition getDestinationConditions();\n}", "des": "MessageCondition for SImple Messaging Protocols."}
{"index": 12382, "repo": "spring-messaging-6.0.11", "code": "public interface SimpMessageSendingOperations extends MessageSendingOperations<String> {\n\t// Send a message to the given user.\n\tvoid convertAndSendToUser(String user, String destination, Object payload);\n\t// Send a message to the given user.\n\tvoid convertAndSendToUser(String user, String destination, Object payload, Map<String,Object> headers);\n}", "des": "A specialization of MessageSendingOperations with methods for use with the Spring Framework support for Simple Messaging Protocols (like STOMP)."}
{"index": 12383, "repo": "spring-messaging-6.0.11", "code": "public enum SimpMessageType extends Enum<SimpMessageType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SimpMessageType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SimpMessageType[] values();\n}", "des": "A generic representation of different kinds of messages found in simple messaging protocols like STOMP."}
{"index": 12384, "repo": "spring-messaging-6.0.11", "code": "public class SimpMessageTypeMessageCondition extends AbstractMessageCondition<SimpMessageTypeMessageCondition> {\n\t// Define the rules for combining this condition with another.\n\tSimpMessageTypeMessageCondition combine(SimpMessageTypeMessageCondition other);\n\t// Compare this condition to another in the context of a specific message.\n\tint compareTo(SimpMessageTypeMessageCondition other, Message<?> message);\n}", "des": "MessageCondition that matches by the message type obtained via SimpMessageHeaderAccessor.getMessageType(Map)."}
{"index": 12385, "repo": "spring-messaging-6.0.11", "code": "public class SimpMessagingTemplate extends AbstractMessageSendingTemplate<String> implements SimpMessageSendingOperations {\n\t// Send a message to the given user.\n\tvoid convertAndSendToUser(String user, String destination, Object payload);\n\t// Send a message to the given user.\n\tvoid convertAndSendToUser(String user, String destination, Object payload, Map<String,Object> headers);\n}", "des": "An implementation of SimpMessageSendingOperations."}
{"index": 12386, "repo": "spring-messaging-6.0.11", "code": "public interface SimpSession {\n\t// Return the session id.\n\tString getId();\n\t// Return the subscriptions for this session.\n\tSet<SimpSubscription> getSubscriptions();\n\t// Return the user associated with the session.\n\tSimpUser getUser();\n}", "des": "Represents a session of connected user."}
{"index": 12387, "repo": "spring-messaging-6.0.11", "code": "public interface SimpSubscription {\n\t// Return the subscription's destination.\n\tString getDestination();\n\t// Return the id associated of the subscription.\n\tString getId();\n\t// Return the session of the subscription.\n\tSimpSession getSession();\n}", "des": "Represents a subscription within a user session."}
{"index": 12388, "repo": "spring-messaging-6.0.11", "code": "public interface SimpUser {\n\t// The unique user name.\n\tString getName();\n\t// Return the user associated with the session, if available.\n\tPrincipal getPrincipal();\n\t// Look up the session for the given id.\n\tSimpSession getSession(String sessionId);\n\t// Return the sessions for the user.\n\tSet<SimpSession> getSessions();\n\t// Whether the user has any sessions.\n\tboolean hasSessions();\n}", "des": "Represents a connected user."}
{"index": 12389, "repo": "spring-messaging-6.0.11", "code": "public interface SimpUserRegistry {\n\t// Find subscriptions with the given matcher.\n\tSet<SimpSubscription> findSubscriptions(SimpSubscriptionMatcher matcher);\n\t// Get the user for the given name.\n\tSimpUser getUser(String userName);\n\t// Return the count of all connected users.\n\tint getUserCount();\n\t// Return a snapshot of all connected users.\n\tSet<SimpUser> getUsers();\n}", "des": "A registry of currently connected users."}
{"index": 12390, "repo": "spring-messaging-6.0.11", "code": "public interface SmartMessageConverter extends MessageConverter {\n\t// A variant of MessageConverter.fromMessage(Message, Class) which takes an extra conversion context as an argument, allowing to take e.g.\n\tObject fromMessage(Message<?> message, Class<?> targetClass, Object conversionHint);\n}", "des": "An extended MessageConverter SPI with conversion hint support."}
{"index": 12391, "repo": "spring-messaging-6.0.11", "code": "public class StompBrokerRelayMessageHandler extends AbstractBrokerMessageHandler {\n\t// Return the configured login to use for connections to the STOMP broker on behalf of connected clients.\n\tString getClientLogin();\n\t// Return the configured passcode to use for connections to the STOMP broker on behalf of connected clients.\n\tString getClientPasscode();\n\t// Return the current count of TCP connection to the broker.\n\tint getConnectionCount();\n}", "des": "A MessageHandler that handles messages by forwarding them to a STOMP broker."}
{"index": 12392, "repo": "spring-messaging-6.0.11", "code": "public static interface StompBrokerRelayMessageHandler.Stats {\n\t// The number of CONNECT frames processed.\n\tint getTotalConnect();\n\t// The number of CONNECTED frames processed.\n\tint getTotalConnected();\n\t// The number of DISCONNECT frames processed.\n\tint getTotalDisconnect();\n\t// The number of connection handlers.\n\tint getTotalHandlers();\n}", "des": "Contract for access to session counters."}
{"index": 12393, "repo": "spring-messaging-6.0.11", "code": "public class StompBrokerRelayRegistration extends AbstractBrokerRegistration {\n\tprotected StompBrokerRelayMessageHandler getMessageHandler(SubscribableChannel brokerChannel);\n\tprotected String getUserDestinationBroadcast();\n\tprotected String getUserRegistryBroadcast();\n\t// Configure whether the StompBrokerRelayMessageHandler should start automatically when the Spring ApplicationContext is refreshed.\n\tStompBrokerRelayRegistration setAutoStartup(boolean autoStartup);\n}", "des": "Registration class for configuring a StompBrokerRelayMessageHandler."}
{"index": 12394, "repo": "spring-messaging-6.0.11", "code": "public abstract class StompClientSupport extends Object {\n\t// Factory method for create and configure a new session.\n\tprotected ConnectionHandlingStompSession createSession(StompHeaders connectHeaders, StompSessionHandler handler);\n\t// Return the configured default heart-beat value (never null).\n\tlong[] getDefaultHeartbeat();\n\t// Return the configured MessageConverter.\n\tMessageConverter getMessageConverter();\n\t// Return the configured receipt time limit.\n\tlong getReceiptTimeLimit();\n}", "des": "Base class for STOMP client implementations."}
{"index": 12395, "repo": "spring-messaging-6.0.11", "code": "public enum StompCommand extends Enum<StompCommand> {\n\tSimpMessageType getMessageType();\n\tboolean isBodyAllowed();\n\tboolean requiresContentLength();\n\tboolean requiresDestination();\n\tboolean requiresSubscriptionId();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic StompCommand valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic StompCommand[] values();\n}", "des": "Represents a STOMP command."}
{"index": 12396, "repo": "spring-messaging-6.0.11", "code": "public class StompDecoder extends Object {\n\t// Decodes one or more STOMP frames from the given ByteBuffer into a list of Messages.\n\tList<Message<byte[]>> decode(ByteBuffer byteBuffer);\n\t// Decodes one or more STOMP frames from the given buffer and returns a list of Messages.\n\tList<Message<byte[]>> decode(ByteBuffer byteBuffer, org.springframework.util.MultiValueMap<String,String> partialMessageHeaders);\n}", "des": "Decodes one or more STOMP frames contained in a ByteBuffer."}
{"index": 12397, "repo": "spring-messaging-6.0.11", "code": "public class StompEncoder extends Object {\n\t// Encodes the given payload and headers into a byte[].\n\tbyte[] encode(Map<String,Object> headers, byte[] payload);\n\t// Encodes the given STOMP message into a byte[].\n\tbyte[] encode(Message<byte[]> message);\n}", "des": "An encoder for STOMP frames."}
{"index": 12398, "repo": "spring-messaging-6.0.11", "code": "public interface StompFrameHandler {\n\t// Invoked before handleFrame(StompHeaders, Object) to determine the type of Object the payload should be converted to.\n\tType getPayloadType(StompHeaders headers);\n\t// Handle a STOMP frame with the payload converted to the target type returned from getPayloadType(StompHeaders).\n\tvoid handleFrame(StompHeaders headers, Object payload);\n}", "des": "Contract to handle a STOMP frame."}
{"index": 12399, "repo": "spring-messaging-6.0.11", "code": "public class StompHeaderAccessor extends SimpMessageHeaderAccessor {\n\t// Create an instance for the given STOMP command.\n\tstatic StompHeaderAccessor create(StompCommand command);\n\t// Create an instance for the given STOMP command and headers.\n\tstatic StompHeaderAccessor create(StompCommand command, Map<String,List<String>> headers);\n\t// Build a 'nested' accessor for the given message.\n\tprotected MessageHeaderAccessor createAccessor(Message<?> message);\n}", "des": "A MessageHeaderAccessor to use when creating a Message from a decoded STOMP frame, or when encoding a Message to a STOMP frame."}
{"index": 12400, "repo": "spring-messaging-6.0.11", "code": "public interface StompSession {\n\t// Send an acknowledgement whether a message was consumed or not resulting in an ACK or NACK frame respectively.\n\tStompSession.Receiptable acknowledge(String messageId, boolean consumed);\n\t// An overloaded version of acknowledge(String, boolean) with full StompHeaders instead of just a messageId.\n\tStompSession.Receiptable acknowledge(StompHeaders headers, boolean consumed);\n\t// Disconnect the session by sending a DISCONNECT frame.\n\tvoid disconnect();\n}", "des": "Represents a STOMP session with operations to send messages, create subscriptions and receive messages on those subscriptions."}
{"index": 12401, "repo": "spring-messaging-6.0.11", "code": "public static interface StompSession.Receiptable {\n\t// Task to invoke when a receipt is not received in the configured time.\n\tvoid addReceiptLostTask(Runnable task);\n\t// Task to invoke when a receipt is received.\n\tvoid addReceiptTask(Runnable task);\n\t// Variant of addReceiptTask(Runnable) with a Consumer of the headers from the RECEIPT frame.\n\tvoid addReceiptTask(Consumer<StompHeaders> task);\n}", "des": "A handle to use to track receipts."}
{"index": 12402, "repo": "spring-messaging-6.0.11", "code": "public static interface StompSession.Subscription extends StompSession.Receiptable {\n\t// Return the headers used on the SUBSCRIBE frame.\n\tStompHeaders getSubscriptionHeaders();\n\t// Return the id for the subscription.\n\tString getSubscriptionId();\n\t// Remove the subscription by sending an UNSUBSCRIBE frame.\n\tvoid unsubscribe();\n\t// Alternative to unsubscribe() with additional custom headers to send to the server.\n\tvoid unsubscribe(StompHeaders headers);\n}", "des": "A handle to use to unsubscribe or to track a receipt."}
{"index": 12403, "repo": "spring-messaging-6.0.11", "code": "public interface StompSessionHandler extends StompFrameHandler {\n\t// Invoked when the session is ready to use, i.e.\n\tvoid afterConnected(StompSession session, StompHeaders connectedHeaders);\n\t// Handle any exception arising while processing a STOMP frame such as a failure to convert the payload or an unhandled exception in the application StompFrameHandler.\n\tvoid handleException(StompSession session, StompCommand command, StompHeaders headers, byte[] payload, Throwable exception);\n}", "des": "A contract for client STOMP session lifecycle events including a callback when the session is established and notifications of transport or message handling failures."}
{"index": 12404, "repo": "spring-messaging-6.0.11", "code": "public abstract class StompSessionHandlerAdapter extends Object implements StompSessionHandler {\n\t// This implementation is empty.\n\tvoid afterConnected(StompSession session, StompHeaders connectedHeaders);\n\t// This implementation returns String as the expected payload type for STOMP ERROR frames.\n\tType getPayloadType(StompHeaders headers);\n\t// This implementation is empty.\n\tvoid handleException(StompSession session, StompCommand command, StompHeaders headers, byte[] payload, Throwable exception);\n}", "des": "Abstract adapter class for StompSessionHandler with mostly empty implementation methods except for StompSessionHandlerAdapter.getPayloadType(org.springframework.messaging.simp.stomp.StompHeaders) which returns String as the default Object type expected for STOMP ERROR frame payloads."}
{"index": 12405, "repo": "spring-messaging-6.0.11", "code": "public interface StompTcpConnectionHandler<P> extends TcpConnectionHandler<P> {\n\t// Return the headers that will be sent in the STOMP CONNECT frame.\n\tStompHeaderAccessor getConnectHeaders();\n\t// Return the sessionId associated with the STOMP connection.\n\tString getSessionId();\n}", "des": "A TcpConnectionHandler for use with STOMP connections, exposing further information about the connection."}
{"index": 12406, "repo": "spring-messaging-6.0.11", "code": "public class StompTcpMessageCodec extends Object implements TcpMessageCodec<byte[]> {\n\t// Decode the input ByteBuffer into one or more Messages.\n\tList<Message<byte[]>> decode(ByteBuffer nioBuffer);\n\t// Encode the given Message to the output ByteBuffer.\n\tByteBuffer encode(Message<byte[]> message);\n}", "des": "TcpMessageCodec for STOMP, delegating to StompDecoder and StompEncoder."}
{"index": 12407, "repo": "spring-messaging-6.0.11", "code": "public class StringMessageConverter extends AbstractMessageConverter {\n\t// Convert the message payload from serialized form to an Object.\n\tprotected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint);\n\t// Convert the payload object to serialized form.\n\tprotected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint);\n\t// Whether the given class is supported by this converter.\n\tprotected boolean supports(Class<?> clazz);\n}", "des": "A MessageConverter that supports MIME type \"text/plain\" with the payload converted to and from a String."}
{"index": 12408, "repo": "spring-messaging-6.0.11", "code": "public interface SubscribableChannel extends MessageChannel {\n\t// Register a message handler.\n\tboolean subscribe(MessageHandler handler);\n\t// Un-register a message handler.\n\tboolean unsubscribe(MessageHandler handler);\n}", "des": "A MessageChannel that maintains a registry of subscribers and invokes them to handle messages sent through this channel."}
{"index": 12409, "repo": "spring-messaging-6.0.11", "code": "public class SubscriptionMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler {\n\t// Return the configured header initializer.\n\tMessageHeaderInitializer getHeaderInitializer();\n\t// Handle the given return value.\n\tvoid handleReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType, Message<?> message);\n}", "des": "HandlerMethodReturnValueHandler for replying directly to a subscription."}
{"index": 12410, "repo": "spring-messaging-6.0.11", "code": "public interface SubscriptionRegistry {\n\t// Find all subscriptions that should receive the given message.\n\torg.springframework.util.MultiValueMap<String,String> findSubscriptions(Message<?> message);\n\t// Register a subscription represented by the given message.\n\tvoid registerSubscription(Message<?> subscribeMessage);\n\t// Remove all subscriptions associated with the given sessionId.\n\tvoid unregisterAllSubscriptions(String sessionId);\n}", "des": "A registry of subscription by session that allows looking up subscriptions."}
{"index": 12411, "repo": "spring-messaging-6.0.11", "code": "public interface SyncHandlerMethodArgumentResolver extends HandlerMethodArgumentResolver {\n\t// Resolves a method parameter into an argument value from a given message.\n\tdefault reactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message);\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter parameter, Message<?> message);\n}", "des": "An extension of HandlerMethodArgumentResolver for implementations that are synchronous in nature and do not block to resolve values."}
{"index": 12412, "repo": "spring-messaging-6.0.11", "code": "public class TaskExecutorRegistration extends Object {\n\t// Set the core pool size of the ThreadPoolExecutor.\n\tTaskExecutorRegistration corePoolSize(int corePoolSize);\n\tprotected org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor getTaskExecutor();\n\t// Set the time limit for which threads may remain idle before being terminated.\n\tTaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds);\n}", "des": "A registration class for customizing the properties of ThreadPoolTaskExecutor."}
{"index": 12413, "repo": "spring-messaging-6.0.11", "code": "public interface TcpConnection<P> extends Closeable {\n\t// Close the connection.\n\tvoid close();\n\t// Register a task to invoke after a period of read inactivity.\n\tvoid onReadInactivity(Runnable runnable, long duration);\n\t// Register a task to invoke after a period of write inactivity.\n\tvoid onWriteInactivity(Runnable runnable, long duration);\n\t// Deprecated. as of 6.0, in favor of sendAsync(Message)\n\tdefault org.springframework.util.concurrent.ListenableFuture<Void> send(Message<P> message);\n}", "des": "A contract for sending messages and managing a TCP connection."}
{"index": 12414, "repo": "spring-messaging-6.0.11", "code": "public interface TcpConnectionHandler<P> {\n\t// Invoked after a connection is successfully established.\n\tvoid afterConnected(TcpConnection<P> connection);\n\t// Invoked on failure to connect.\n\tvoid afterConnectFailure(Throwable ex);\n\t// Invoked after the connection is closed.\n\tvoid afterConnectionClosed();\n\t// Handle a failure on the connection.\n\tvoid handleFailure(Throwable ex);\n\t// Handle a message received from the remote host.\n\tvoid handleMessage(Message<P> message);\n}", "des": "A contract for managing lifecycle events for a TCP connection including the handling of incoming messages."}
{"index": 12415, "repo": "spring-messaging-6.0.11", "code": "public interface TcpMessageCodec<P> {\n\t// Decode the input ByteBuffer into one or more Messages.\n\tList<Message<P>> decode(ByteBuffer buffer);\n\t// Encode the given Message to the output ByteBuffer.\n\tByteBuffer encode(Message<P> message);\n}", "des": "Contract to encode and decode a Message to and from a ByteBuffer allowing a higher-level protocol (e.g."}
{"index": 12416, "repo": "spring-messaging-6.0.11", "code": "public interface TcpOperations<P> {\n\t// Deprecated. as of 6.0, in favor of connectAsync(TcpConnectionHandler)\n\tdefault org.springframework.util.concurrent.ListenableFuture<Void> connect(TcpConnectionHandler<P> connectionHandler);\n\t// Deprecated. as of 6.0, in favor of connectAsync(TcpConnectionHandler, ReconnectStrategy)\n\tdefault org.springframework.util.concurrent.ListenableFuture<Void> connect(TcpConnectionHandler<P> connectionHandler, ReconnectStrategy reconnectStrategy);\n}", "des": "A contract for establishing TCP connections."}
{"index": 12417, "repo": "spring-messaging-6.0.11", "code": "public class UserDestinationMessageHandler extends Object implements MessageHandler, org.springframework.context.SmartLifecycle {\n\t// Return the configured destination for unresolved messages.\n\tString getBroadcastDestination();\n\t// Return the messaging template used to send resolved messages to the broker channel.\n\tMessageSendingOperations<String> getBrokerMessagingTemplate();\n\t// Return the configured header initializer.\n\tMessageHeaderInitializer getHeaderInitializer();\n}", "des": "MessageHandler with support for \"user\" destinations."}
{"index": 12418, "repo": "spring-messaging-6.0.11", "code": "public class UserDestinationResult extends Object {\n\t// The \"user\" destination from the source message.\n\tString getSourceDestination();\n\t// The user destination in the form expected when a client subscribes, e.g.\n\tString getSubscribeDestination();\n\t// The target destinations that the source destination was translated to, one per active user session, e.g.\n\tSet<String> getTargetDestinations();\n\t// The user for this user destination.\n\tString getUser();\n}", "des": "Contains the result from parsing a \"user\" destination from a source message and translating it to target destinations (one per active user session)."}
{"index": 12419, "repo": "spring-messaging-6.0.11", "code": "public class UserRegistryMessageHandler extends Object implements MessageHandler, org.springframework.context.ApplicationListener<BrokerAvailabilityEvent> {\n\t// Return the configured destination for broadcasting UserRegistry information.\n\tString getBroadcastDestination();\n\t// Return the configured registry expiration period.\n\tlong getRegistryExpirationPeriod();\n\t// Handle the given message.\n\tvoid handleMessage(Message<?> message);\n\tvoid onApplicationEvent(BrokerAvailabilityEvent event);\n}", "des": "MessageHandler that handles user registry broadcasts from other application servers and periodically broadcasts the content of the local user registry."}
{"index": 12420, "repo": "spring-boot-loader-3.1.1", "code": "public interface Archive extends Iterable<Archive.Entry>, AutoCloseable {\n\t// Closes the Archive, releasing any open resources.\n\tdefault void close();\n\t// Returns the manifest of the archive.\n\tManifest getManifest();\n\t// Returns nested Archives for entries that match the specified filters.\n\tIterator<Archive> getNestedArchives(Archive.EntryFilter searchFilter, Archive.EntryFilter includeFilter);\n\t// Returns a URL that can be used to load the archive.\n\tURL getUrl();\n}", "des": "An archive that can be launched by the Launcher."}
{"index": 12421, "repo": "spring-boot-loader-3.1.1", "code": "public static interface Archive.Entry {\n\t// Returns the name of the entry.\n\tString getName();\n\t// Returns true if the entry represents a directory.\n\tboolean isDirectory();\n}", "des": "Represents a single entry in the archive."}
{"index": 12422, "repo": "spring-boot-loader-3.1.1", "code": "public abstract class ExecutableArchiveLauncher extends Launcher {\n\t// Create a classloader for the specified archives.\n\tprotected ClassLoader createClassLoader(Iterator<Archive> archives);\n\t// Return the root archive.\n\tprotected final Archive getArchive();\n\t// Return the path prefix for entries in the archive.\n\tprotected String getArchiveEntryPathPrefix();\n\t// Returns the archives that will be used to construct the class path.\n\tprotected Iterator<Archive> getClassPathArchivesIterator();\n}", "des": "Base class for executable archive Launchers."}
{"index": 12423, "repo": "spring-boot-loader-3.1.1", "code": "public class ExplodedArchive extends Object implements Archive {\n\t// Returns the manifest of the archive.\n\tManifest getManifest();\n\tprotected Archive getNestedArchive(Archive.Entry entry);\n\t// Returns nested Archives for entries that match the specified filters.\n\tIterator<Archive> getNestedArchives(Archive.EntryFilter searchFilter, Archive.EntryFilter includeFilter);\n\t// Returns a URL that can be used to load the archive.\n\tURL getUrl();\n}", "des": "Archive implementation backed by an exploded archive directory."}
{"index": 12424, "repo": "spring-boot-loader-3.1.1", "code": "public class JarFileArchive extends Object implements Archive {\n\t// Closes the Archive, releasing any open resources.\n\tvoid close();\n\t// Returns the manifest of the archive.\n\tManifest getManifest();\n\tprotected Archive getNestedArchive(Archive.Entry entry);\n\t// Returns nested Archives for entries that match the specified filters.\n\tIterator<Archive> getNestedArchives(Archive.EntryFilter searchFilter, Archive.EntryFilter includeFilter);\n\t// Returns a URL that can be used to load the archive.\n\tURL getUrl();\n}", "des": "Archive implementation backed by a JarFile."}
{"index": 12425, "repo": "spring-boot-loader-3.1.1", "code": "public class JarLauncher extends ExecutableArchiveLauncher {\n\t// Return the path prefix for entries in the archive.\n\tprotected String getArchiveEntryPathPrefix();\n\t// Determine if the specified entry is a nested item that should be added to the classpath.\n\tprotected boolean isNestedArchive(Archive.Entry entry);\n\t// Return if post-processing needs to be applied to the archives.\n\tprotected boolean isPostProcessingClassPathArchives();\n\tstatic void main(String[] args);\n}", "des": "Launcher for JAR based archives."}
{"index": 12426, "repo": "spring-boot-loader-3.1.1", "code": "public interface JarMode {\n\t// Returns if this accepts and can run the given mode.\n\tboolean accepts(String mode);\n\t// Run the jar in the given mode.\n\tvoid run(String mode, String[] args);\n}", "des": "Interface registered in spring.factories to provides extended 'jarmode' support."}
{"index": 12427, "repo": "spring-boot-loader-3.1.1", "code": "public abstract class Launcher extends Object {\n\tprotected final Archive createArchive();\n\t// Create a classloader for the specified URLs.\n\tprotected ClassLoader createClassLoader(URL[] urls);\n\t// Create a classloader for the specified archives.\n\tprotected ClassLoader createClassLoader(Iterator<Archive> archives);\n\t// Create the MainMethodRunner used to launch the application.\n\tprotected MainMethodRunner createMainMethodRunner(String mainClass, String[] args, ClassLoader classLoader);\n}", "des": "Base class for launchers that can start an application with a fully configured classpath backed by one or more Archives."}
{"index": 12428, "repo": "spring-boot-loader-3.1.1", "code": "public class PropertiesLauncher extends Launcher {\n\t// Create a classloader for the specified archives.\n\tprotected ClassLoader createClassLoader(Iterator<Archive> archives);\n\tprotected String[] getArgs(String... args);\n\t// Returns the archives that will be used to construct the class path.\n\tprotected Iterator<Archive> getClassPathArchivesIterator();\n\tprotected File getHomeDirectory();\n\t// Returns the main class that should be launched.\n\tprotected String getMainClass();\n\tstatic void main(String[] args);\n}", "des": "Launcher for archives with user-configured classpath and main class through a properties file."}
{"index": 12429, "repo": "spring-boot-loader-3.1.1", "code": "public interface RandomAccessData {\n\t// Returns an InputStream that can be used to read the underlying data.\n\tInputStream getInputStream();\n\t// Returns the size of the data.\n\tlong getSize();\n\t// Returns a new RandomAccessData for a specific subsection of this data.\n\tRandomAccessData getSubsection(long offset, long length);\n\t// Reads all the data and returns it as a byte array.\n\tbyte[] read();\n\t// Reads the length bytes of data starting at the given offset.\n\tbyte[] read(long offset, long length);\n}", "des": "Interface that provides read-only random access to some underlying data."}
{"index": 12430, "repo": "spring-boot-loader-3.1.1", "code": "public class RandomAccessDataFile extends Object implements RandomAccessData {\n\tvoid close();\n\t// Returns the underlying File.\n\tFile getFile();\n\t// Returns an InputStream that can be used to read the underlying data.\n\tInputStream getInputStream();\n\t// Returns the size of the data.\n\tlong getSize();\n\t// Returns a new RandomAccessData for a specific subsection of this data.\n\tRandomAccessData getSubsection(long offset, long length);\n\t// Reads all the data and returns it as a byte array.\n\tbyte[] read();\n}", "des": "RandomAccessData implementation backed by a RandomAccessFile."}
{"index": 12431, "repo": "spring-boot-loader-3.1.1", "code": "public abstract class SystemPropertyUtils extends Object {\n\tstatic String getProperty(String key);\n\tstatic String getProperty(String key, String defaultValue);\n\t// Search the System properties and environment variables for a value with the provided key.\n\tstatic String getProperty(String key, String defaultValue, String text);\n\t// Resolve ${...} placeholders in the given text, replacing them with corresponding system property values.\n\tstatic String resolvePlaceholders(String text);\n}", "des": "Helper class for resolving placeholders in texts."}
{"index": 12432, "repo": "spring-boot-loader-3.1.1", "code": "public class WarLauncher extends ExecutableArchiveLauncher {\n\t// Return the path prefix for entries in the archive.\n\tprotected String getArchiveEntryPathPrefix();\n\t// Determine if the specified entry is a nested item that should be added to the classpath.\n\tboolean isNestedArchive(Archive.Entry entry);\n\t// Return if post-processing needs to be applied to the archives.\n\tprotected boolean isPostProcessingClassPathArchives();\n\tstatic void main(String[] args);\n}", "des": "Launcher for WAR based archives."}
{"index": 12433, "repo": "spring-ws-security-4.0.5", "code": "public abstract class AbstractCallbackHandler extends Object implements CallbackHandler {\n\t// Iterates over the given callbacks, and calls handleInternal for each of them.\n\tfinal void handle(Callback[] callbacks);\n\t// Template method that should be implemented by subclasses.\n\tprotected abstract void handleInternal(Callback callback);\n}", "des": "Abstract implementation of a CallbackHandler."}
{"index": 12434, "repo": "spring-ws-security-4.0.5", "code": "public abstract class AbstractWsPasswordCallbackHandler extends AbstractCallbackHandler {\n\t// Invoked when a CleanupCallback is passed to AbstractCallbackHandler.handle(Callback[]).\n\tprotected void handleCleanup(CleanupCallback callback);\n\t// Invoked when the callback has a WSPasswordCallback.CUSTOM_TOKEN usage.\n\tprotected void handleCustomToken(org.apache.wss4j.common.ext.WSPasswordCallback callback);\n}", "des": "Abstract base class for CallbackHandler implementations that handle WSPasswordCallback callbacks."}
{"index": 12435, "repo": "spring-ws-security-4.0.5", "code": "public class CryptoFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.apache.wss4j.common.crypto.Crypto>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\torg.apache.wss4j.common.crypto.Crypto getObject();\n\tClass<org.apache.wss4j.common.crypto.Crypto> getObjectType();\n\tboolean isSingleton();\n\t// Sets the configuration of the Crypto.\n\tvoid setConfiguration(Properties properties);\n}", "des": "Spring factory bean for a WSS4J Crypto."}
{"index": 12436, "repo": "spring-ws-security-4.0.5", "code": "public class DaoX509AuthoritiesPopulator extends Object implements X509AuthoritiesPopulator, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware {\n\tvoid afterPropertiesSet();\n\t// Obtains the granted authorities for the specified user.\n\torg.springframework.security.core.userdetails.UserDetails getUserDetails(X509Certificate clientCert);\n\tvoid setMessageSource(org.springframework.context.MessageSource messageSource);\n}", "des": "Populates the X509 authorities via an UserDetailsService."}
{"index": 12437, "repo": "spring-ws-security-4.0.5", "code": "public class KeyManagersFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<KeyManager[]>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tKeyManager[] getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\t// Sets the algorithm of the KeyManager to use.\n\tvoid setAlgorithm(String algorithm);\n\t// Sets the source of key material.\n\tvoid setKeyStore(KeyStore keyStore);\n}", "des": "Spring factory bean for an array of KeyManagers."}
{"index": 12438, "repo": "spring-ws-security-4.0.5", "code": "public class KeyStoreCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Invoked when the callback has a WSPasswordCallback.DECRYPT usage.\n\tprotected void handleDecrypt(org.apache.wss4j.common.ext.WSPasswordCallback callback);\n\t// Invoked when the callback has a WSPasswordCallback.SECRET_KEY usage.\n\tprotected void handleSecretKey(org.apache.wss4j.common.ext.WSPasswordCallback callback);\n}", "des": "Callback handler that uses Java Security KeyStores to handle cryptographic callbacks."}
{"index": 12439, "repo": "spring-ws-security-4.0.5", "code": "public class KeyStoreFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<KeyStore>, org.springframework.beans.factory.InitializingBean {\n\tfinal void afterPropertiesSet();\n\tKeyStore getObject();\n\tClass<KeyStore> getObjectType();\n\tboolean isSingleton();\n\t// Sets the location of the key store to use.\n\tvoid setLocation(org.springframework.core.io.Resource location);\n\t// Sets the password to use for integrity checking.\n\tvoid setPassword(String password);\n}", "des": "Spring factory bean for a KeyStore."}
{"index": 12440, "repo": "spring-ws-security-4.0.5", "code": "public abstract class KeyStoreUtils extends Object {\n\t// Loads the key store indicated by system properties.\n\tstatic KeyStore loadDefaultKeyStore();\n\t// Loads a default trust store.\n\tstatic KeyStore loadDefaultTrustStore();\n}", "des": "Generic utility methods for dealing with KeyStore objects."}
{"index": 12441, "repo": "spring-ws-security-4.0.5", "code": "public class SimplePasswordValidationCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Invoked when the callback has a WSPasswordCallback.USERNAME_TOKEN usage.\n\tvoid handleUsernameToken(org.apache.wss4j.common.ext.WSPasswordCallback callback);\n\t// Sets the users to validate against.\n\tvoid setUsers(Properties users);\n\tvoid setUsersMap(Map<String,String> users);\n}", "des": "Simple callback handler that validates passwords against a in-memory Properties object."}
{"index": 12442, "repo": "spring-ws-security-4.0.5", "code": "public class SpringSecurityPasswordValidationCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Invoked when a CleanupCallback is passed to AbstractCallbackHandler.handle(Callback[]).\n\tprotected void handleCleanup(CleanupCallback callback);\n}", "des": "Callback handler that validates a plain text or digest password using an Spring Security UserDetailsService."}
{"index": 12443, "repo": "spring-ws-security-4.0.5", "code": "public class TrustManagersFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<TrustManager[]>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tTrustManager[] getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\t// Sets the algorithm of the TrustManager to use.\n\tvoid setAlgorithm(String algorithm);\n\t// Sets the source of certificate authorities and related trust material.\n\tvoid setKeyStore(KeyStore keyStore);\n}", "des": "Spring factory bean for an array of TrustManagers."}
{"index": 12444, "repo": "spring-ws-security-4.0.5", "code": "public class Wss4jSecurityInterceptor extends AbstractWsSecurityInterceptor implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Checks whether the received headers match the configured validation actions.\n\tprotected void checkResults(List<org.apache.wss4j.dom.engine.WSSecurityEngineResult> results, List<Integer> validationActions);\n\tprotected void cleanUp();\n\tboolean getRemoveSecurityHeader();\n}", "des": "A WS-Security endpoint interceptor based on Apache's WSS4J."}
{"index": 12445, "repo": "spring-ws-security-4.0.5", "code": "public abstract class WsSecurityFaultException extends WsSecurityException {\n\t// Returns the fault actor for the exception.\n\tString getFaultActor();\n\t// Returns the fault code for the exception.\n\tQName getFaultCode();\n\t// Returns the fault string for the exception.\n\tString getFaultString();\n}", "des": "Exception indicating that a WS-Security executions should result in a SOAP Fault."}
{"index": 12446, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractAnnotationConfigDispatcherServletInitializer extends AbstractDispatcherServletInitializer {\n\tprotected org.springframework.web.context.WebApplicationContext createRootApplicationContext();\n\t// Create a servlet application context to be provided to the DispatcherServlet.\n\tprotected org.springframework.web.context.WebApplicationContext createServletApplicationContext();\n}", "des": "WebApplicationInitializer to register a DispatcherServlet and use Java-based Spring configuration."}
{"index": 12447, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractAtomFeedView extends AbstractFeedView<com.rometools.rome.feed.atom.Feed> {\n\t// Invokes buildFeedEntries(Map, HttpServletRequest, HttpServletResponse) to get a list of feed entries.\n\tprotected final void buildFeedEntries(Map<String,Object> model, com.rometools.rome.feed.atom.Feed feed, HttpServletRequest request, HttpServletResponse response);\n}", "des": "Abstract superclass for Atom Feed views, using the ROME package."}
{"index": 12448, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractCachingViewResolver extends org.springframework.web.context.support.WebApplicationObjectSupport implements ViewResolver {\n\t// Clear the entire view cache, removing all cached view objects.\n\tvoid clearCache();\n\t// Create the actual View object.\n\tprotected View createView(String viewName, Locale locale);\n\t// Return filter function that determines if view should be cached.\n\tAbstractCachingViewResolver.CacheFilter getCacheFilter();\n}", "des": "Convenient base class for ViewResolver implementations."}
{"index": 12449, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractCheckedElementTag extends AbstractHtmlInputElementTag {\n\t// Return a unique ID for the bound name within the current PageContext.\n\tprotected String autogenerateId();\n\t// Return the type of the HTML input element to generate: \"checkbox\" or \"radio\".\n\tprotected abstract String getInputType();\n\t// Flags \"type\" as an illegal dynamic attribute.\n\tprotected boolean isValidDynamicAttribute(String localName, Object value);\n}", "des": "Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering an HTML 'input' element with a 'type' of 'checkbox' or 'radio'."}
{"index": 12450, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractController extends WebContentGenerator implements Controller {\n\t// Process the request and return a ModelAndView object which the DispatcherServlet will render.\n\tModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response);\n\t// Template method.\n\tprotected abstract ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response);\n}", "des": "Convenient superclass for controller implementations, using the Template Method design pattern."}
{"index": 12451, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractDataBoundFormElementTag extends AbstractFormTag implements EditorAwareTag {\n\t// Autogenerate the 'id' attribute value for this tag.\n\tprotected String autogenerateId();\n\t// Get a display String for the given value, converted by a PropertyEditor that the BindStatus may have registered for the value's Class.\n\tprotected String convertToDisplayString(Object value);\n\t// Disposes of the BindStatus instance.\n\tvoid doFinally();\n}", "des": "Base tag for all data-binding aware JSP form tags."}
{"index": 12452, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractDetectingUrlHandlerMapping extends AbstractUrlHandlerMapping {\n\t// Register all handlers found in the current ApplicationContext.\n\tprotected void detectHandlers();\n\t// Determine the URLs for the given handler bean.\n\tprotected abstract String[] determineUrlsForHandler(String beanName);\n\t// Calls the detectHandlers() method in addition to the superclass's initialization.\n\tvoid initApplicationContext();\n}", "des": "Abstract implementation of the HandlerMapping interface, detecting URL mappings for handler beans through introspection of all defined beans in the application context."}
{"index": 12453, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractDispatcherServletInitializer extends org.springframework.web.context.AbstractContextLoaderInitializer {\n\t// Create a DispatcherServlet (or other kind of FrameworkServlet-derived dispatcher) with the specified WebApplicationContext.\n\tprotected FrameworkServlet createDispatcherServlet(org.springframework.web.context.WebApplicationContext servletAppContext);\n}", "des": "Base class for WebApplicationInitializer implementations that register a DispatcherServlet in the servlet context."}
{"index": 12454, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractFeedView<T extends com.rometools.rome.feed.WireFeed> extends AbstractView {\n\t// Subclasses must implement this method to build feed entries, given the model.\n\tprotected abstract void buildFeedEntries(Map<String,Object> model, T feed, HttpServletRequest request, HttpServletResponse response);\n\t// Populate the feed metadata (title, link, description, etc.).\n\tprotected void buildFeedMetadata(Map<String,Object> model, T feed, HttpServletRequest request);\n}", "des": "Abstract base class for Atom and RSS Feed views, using the ROME package."}
{"index": 12455, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractFlashMapManager extends Object implements FlashMapManager {\n\t// Obtain a mutex for modifying the FlashMap List as handled by retrieveFlashMaps(jakarta.servlet.http.HttpServletRequest) and updateFlashMaps(java.util.List<org.springframework.web.servlet.FlashMap>, jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse),\n\tprotected Object getFlashMapsMutex(HttpServletRequest request);\n}", "des": "A base class for FlashMapManager implementations."}
{"index": 12456, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractFormTag extends HtmlEscapingAwareTag {\n\t// Create the TagWriter which all output will be written to.\n\tprotected TagWriter createTagWriter();\n\t// Provide a simple template method that calls createTagWriter() and passes the created TagWriter to the writeTagContent(TagWriter) method.\n\tprotected final int doStartTagInternal();\n\t// Evaluate the supplied value for the supplied attribute name.\n\tprotected Object evaluate(String attributeName, Object value);\n}", "des": "Base class for all JSP form tags."}
{"index": 12457, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractHandlerExceptionResolver extends Object implements HandlerExceptionResolver, org.springframework.core.Ordered {\n\t// Build a log message for the given exception, occurred during processing the given request.\n\tprotected String buildLogMessage(Exception ex, HttpServletRequest request);\n}", "des": "Abstract base class for HandlerExceptionResolver implementations."}
{"index": 12458, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractHandlerMapping extends org.springframework.web.context.support.WebApplicationObjectSupport implements HandlerMapping, org.springframework.core.Ordered, org.springframework.beans.factory.BeanNameAware {\n\t// Adapt the given interceptor object to HandlerInterceptor.\n\tprotected HandlerInterceptor adaptInterceptor(Object interceptor);\n}", "des": "Abstract base class for HandlerMapping implementations."}
{"index": 12459, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractHandlerMethodAdapter extends WebContentGenerator implements HandlerAdapter, org.springframework.core.Ordered {\n\t// This implementation expects the handler to be an HandlerMethod.\n\tfinal long getLastModified(HttpServletRequest request, Object handler);\n\t// Deprecated. as of 5.3.9 along with LastModified.\n\tprotected abstract long getLastModifiedInternal(HttpServletRequest request, org.springframework.web.method.HandlerMethod handlerMethod);\n\tint getOrder();\n}", "des": "Abstract base class for HandlerAdapter implementations that support handlers of type HandlerMethod."}
{"index": 12460, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractHandlerMethodExceptionResolver extends AbstractHandlerExceptionResolver {\n\t// Actually resolve the given exception that got thrown during handler execution, returning a ModelAndView that represents a specific error page if appropriate.\n\tprotected final ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);\n}", "des": "Abstract base class for HandlerExceptionResolver implementations that support handling exceptions from handlers of type HandlerMethod."}
{"index": 12461, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean {\n\t// Detects handler methods at initialization.\n\tvoid afterPropertiesSet();\n\t// Create the HandlerMethod instance.\n\tprotected org.springframework.web.method.HandlerMethod createHandlerMethod(Object handler, Method method);\n\t// Look for handler methods in the specified handler bean.\n\tprotected void detectHandlerMethods(Object handler);\n}", "des": "Abstract base class for HandlerMapping implementations that define a mapping between a request and a HandlerMethod."}
{"index": 12462, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractHtmlElementBodyTag extends AbstractHtmlElementTag implements BodyTag {\n\t// If rendering, flush any buffered BodyContent or, if no BodyContent is supplied, render the default content.\n\tint doEndTag();\n\t// Clean up any attributes and stored resources.\n\tvoid doFinally();\n\tvoid doInitBody();\n}", "des": "Convenient superclass for many html tags that render content using the databinding features of the AbstractHtmlElementTag."}
{"index": 12463, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractHtmlElementTag extends AbstractDataBoundFormElementTag implements DynamicAttributes {\n\t// Get the value of the 'class' attribute.\n\tprotected String getCssClass();\n\t// The CSS class to use when the field bound to a particular tag has errors.\n\tprotected String getCssErrorClass();\n\t// Get the value of the 'style' attribute.\n\tprotected String getCssStyle();\n\t// Get the value of the 'dir' attribute.\n\tprotected String getDir();\n}", "des": "Base class for databinding-aware JSP tags that render HTML element."}
{"index": 12464, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractHtmlInputElementTag extends AbstractHtmlElementTag {\n\t// Get the value of the 'accesskey' attribute.\n\tprotected String getAccesskey();\n\t// Get the value of the 'onblur' attribute.\n\tprotected String getOnblur();\n\t// Get the value of the 'onchange' attribute.\n\tprotected String getOnchange();\n\t// Get the value of the 'onfocus' attribute.\n\tprotected String getOnfocus();\n\t// Get the value of the 'disabled' attribute.\n\tprotected boolean isDisabled();\n}", "des": "Base class for databinding-aware JSP tags that render HTML form input element."}
{"index": 12465, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractJackson2View extends AbstractView {\n\t// Filter and optionally wrap the model in MappingJacksonValue container.\n\tprotected Object filterAndWrapModel(Map<String,Object> model, HttpServletRequest request);\n\t// Filter out undesired attributes from the given model.\n\tprotected abstract Object filterModel(Map<String,Object> model);\n\t// Return the JsonEncoding for this view.\n\tfinal JsonEncoding getEncoding();\n}", "des": "Abstract base class for Jackson based and content type independent AbstractView implementations."}
{"index": 12466, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractLocaleContextResolver extends AbstractLocaleResolver implements LocaleContextResolver {\n\t// Get the default TimeZone that this resolver is supposed to fall back to, if any.\n\tTimeZone getDefaultTimeZone();\n\t// Set a default TimeZone that this resolver will return if no other time zone is found.\n\tvoid setDefaultTimeZone(TimeZone defaultTimeZone);\n}", "des": "Abstract base class for LocaleContextResolver implementations."}
{"index": 12467, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractLocaleResolver extends Object implements LocaleResolver {\n\t// Get the default Locale that this resolver is supposed to fall back to, if any.\n\tprotected Locale getDefaultLocale();\n\t// Set a default Locale that this resolver will return if no other locale is found.\n\tvoid setDefaultLocale(Locale defaultLocale);\n}", "des": "Abstract base class for LocaleResolver implementations."}
{"index": 12468, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractMessageConverterMethodArgumentResolver extends Object implements org.springframework.web.method.support.HandlerMethodArgumentResolver {\n\t// Adapt the given argument against the method parameter, if necessary.\n\tprotected Object adaptArgumentIfNecessary(Object arg, org.springframework.core.MethodParameter parameter);\n}", "des": "A base class for resolving method argument values by reading from the body of a request with HttpMessageConverters."}
{"index": 12469, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractMessageConverterMethodProcessor extends AbstractMessageConverterMethodArgumentResolver implements org.springframework.web.method.support.HandlerMethodReturnValueHandler {\n\t// Creates a new HttpOutputMessage from the given NativeWebRequest.\n\tprotected org.springframework.http.server.ServletServerHttpResponse createOutputMessage(org.springframework.web.context.request.NativeWebRequest webRequest);\n}", "des": "Extends AbstractMessageConverterMethodArgumentResolver with the ability to handle method return values by writing to the response with HttpMessageConverters."}
{"index": 12470, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractMultiCheckedElementTag extends AbstractCheckedElementTag {\n\t// Return the delimiter to be used between each 'input type=\"radio\"' tag.\n\tString getDelimiter();\n\t// Get the HTML element used to enclose 'input type=\"checkbox/radio\"' tag.\n\tString getElement();\n\t// Get the value to be displayed as part of the 'input type=\"checkbox/radio\"' tag.\n\tprotected String getItemLabel();\n}", "des": "Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering multiple HTML 'input' elements with a 'type' of 'checkbox' or 'radio'."}
{"index": 12471, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractPdfStamperView extends AbstractUrlBasedView {\n\t// Return whether this view generates download content (typically binary content like PDF or Excel files).\n\tprotected boolean generatesDownloadContent();\n\t// Subclasses must implement this method to merge the PDF form with the given model data.\n\tprotected abstract void mergePdfDocument(Map<String,Object> model, com.lowagie.text.pdf.PdfStamper stamper, HttpServletRequest request, HttpServletResponse response);\n}", "des": "Abstract superclass for PDF views that operate on an existing document with an AcroForm."}
{"index": 12472, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractPdfView extends AbstractView {\n\t// Subclasses must implement this method to build an iText PDF document, given the model.\n\tprotected abstract void buildPdfDocument(Map<String,Object> model, com.lowagie.text.Document document, com.lowagie.text.pdf.PdfWriter writer, HttpServletRequest request, HttpServletResponse response);\n}", "des": "Abstract superclass for PDF views."}
{"index": 12473, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> extends Object implements RequestCondition<T> {\n\tboolean equals(Object other);\n\t// Return the discrete items a request condition is composed of.\n\tprotected abstract Collection<?> getContent();\n\t// The notation to use when printing discrete items of content.\n\tprotected abstract String getToStringInfix();\n\t// Indicates whether this condition is empty, i.e.\n\tboolean isEmpty();\n}", "des": "A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString()."}
{"index": 12474, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractRssFeedView extends AbstractFeedView<com.rometools.rome.feed.rss.Channel> {\n\t// Invokes buildFeedItems(Map, HttpServletRequest, HttpServletResponse) to get a list of feed items.\n\tprotected final void buildFeedEntries(Map<String,Object> model, com.rometools.rome.feed.rss.Channel channel, HttpServletRequest request, HttpServletResponse response);\n}", "des": "Abstract superclass for RSS Feed views, using the ROME package."}
{"index": 12475, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractSingleCheckedElementTag extends AbstractCheckedElementTag {\n\t// Get the value of the 'label' attribute.\n\tprotected Object getLabel();\n\t// Get the value of the 'value' attribute.\n\tprotected Object getValue();\n\t// Set the value of the 'label' attribute.\n\tvoid setLabel(Object label);\n\t// Set the value of the 'value' attribute.\n\tvoid setValue(Object value);\n\t// Renders the 'input(radio)' element with the configured value.\n\tprotected int writeTagContent(TagWriter tagWriter);\n}", "des": "Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering a single HTML 'input' element with a 'type' of 'checkbox' or 'radio'."}
{"index": 12476, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractTemplateView extends AbstractUrlBasedView {\n\t// Apply this view's content type as specified in the \"contentType\" bean property to the given response.\n\tprotected void applyContentType(HttpServletResponse response);\n\t// Subclasses must implement this method to actually render the view.\n\tprotected final void renderMergedOutputModel(Map<String,Object> model, HttpServletRequest request, HttpServletResponse response);\n}", "des": "Adapter base class for template-based view technologies such as FreeMarker, with the ability to use request and session attributes in their model and the option to expose helper objects for Spring's FreeMarker macro library."}
{"index": 12477, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractTemplateViewResolver extends UrlBasedViewResolver {\n\t// Creates a new View instance of the specified view class and configures it.\n\tprotected AbstractUrlBasedView buildView(String viewName);\n\t// Return the required type of view for this resolver.\n\tprotected Class<?> requiredViewClass();\n}", "des": "Abstract base class for template view resolvers, in particular for FreeMarker views."}
{"index": 12478, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractUrlBasedView extends AbstractView implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Check whether the underlying resource that the configured URL points to actually exists.\n\tboolean checkResource(Locale locale);\n\t// Return the URL of the resource that this view wraps.\n\tString getUrl();\n\t// Return whether the 'url' property is required.\n\tprotected boolean isUrlRequired();\n}", "des": "Abstract base class for URL-based views."}
{"index": 12479, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping implements MatchableHandlerMapping {\n\t// Build a handler object for the given raw handler, exposing the actual handler, the HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, as well as the HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE before executing the handler.\n\tprotected Object buildPathExposingHandler(Object rawHandler, String bestMatchingPattern, String pathWithinMapping, Map<String,String> uriTemplateVariables);\n}", "des": "Abstract base class for URL-mapped HandlerMapping implementations."}
{"index": 12480, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractUrlViewController extends AbstractController {\n\t// Return the UrlPathHelper to use for the resolution of lookup paths.\n\tprotected org.springframework.web.util.UrlPathHelper getUrlPathHelper();\n\t// Return the name of the view to render for this request, based on the given lookup path.\n\tprotected abstract String getViewNameForRequest(HttpServletRequest request);\n}", "des": "Abstract base class for Controllers that return a view name based on the request URL."}
{"index": 12481, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractVersionStrategy extends Object implements VersionStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String requestPath, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\tVersionPathStrategy getVersionPathStrategy();\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "Abstract base class for VersionStrategy implementations."}
{"index": 12482, "repo": "spring-webmvc-6.0.11", "code": "protected static class AbstractVersionStrategy.FileNameVersionPathStrategy extends Object implements VersionPathStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String requestPath, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "File name-based VersionPathStrategy, e.g."}
{"index": 12483, "repo": "spring-webmvc-6.0.11", "code": "protected static class AbstractVersionStrategy.PrefixVersionPathStrategy extends Object implements VersionPathStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String path, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "A prefix-based VersionPathStrategy, e.g."}
{"index": 12484, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractView extends org.springframework.web.context.support.WebApplicationObjectSupport implements View, org.springframework.beans.factory.BeanNameAware {\n\t// Add static data to this view, exposed in each view.\n\tvoid addStaticAttribute(String name, Object value);\n}", "des": "Abstract base class for View implementations."}
{"index": 12485, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractXlsView extends AbstractView {\n\t// Application-provided subclasses must implement this method to populate the Excel workbook document, given the model.\n\tprotected abstract void buildExcelDocument(Map<String,Object> model, org.apache.poi.ss.usermodel.Workbook workbook, HttpServletRequest request, HttpServletResponse response);\n}", "des": "Convenient superclass for Excel document views in traditional XLS format."}
{"index": 12486, "repo": "spring-webmvc-6.0.11", "code": "public abstract class AbstractXlsxStreamingView extends AbstractXlsxView {\n\t// This implementation creates a SXSSFWorkbook for streaming the XLSX format.\n\tprotected org.apache.poi.xssf.streaming.SXSSFWorkbook createWorkbook(Map<String,Object> model, HttpServletRequest request);\n\t// This implementation disposes of the SXSSFWorkbook when done with rendering.\n\tprotected void renderWorkbook(org.apache.poi.ss.usermodel.Workbook workbook, HttpServletResponse response);\n}", "des": "Convenient superclass for Excel document views in the Office 2007 XLSX format, using POI's streaming variant."}
{"index": 12487, "repo": "spring-webmvc-6.0.11", "code": "public class AcceptHeaderLocaleResolver extends AbstractLocaleResolver {\n\t// Get the configured list of supported locales.\n\tList<Locale> getSupportedLocales();\n\t// Resolve the current locale via the given request.\n\tLocale resolveLocale(HttpServletRequest request);\n\t// Set the current locale to the given one.\n\tvoid setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale);\n}", "des": "LocaleResolver implementation that looks for a match between locales in the Accept-Language header and a list of configured supported locales."}
{"index": 12488, "repo": "spring-webmvc-6.0.11", "code": "public interface AsyncServerResponse extends ServerResponse {\n\t// Blocks indefinitely until the future response is obtained.\n\tServerResponse block();\n\t// Create a AsyncServerResponse with the given asynchronous response.\n\tstatic AsyncServerResponse create(Object asyncResponse);\n\t// Create a (built) response with the given asynchronous response.\n\tstatic AsyncServerResponse create(Object asyncResponse, Duration timeout);\n}", "des": "Asynchronous subtype of ServerResponse that exposes the future response."}
{"index": 12489, "repo": "spring-webmvc-6.0.11", "code": "public class BeanNameViewResolver extends org.springframework.web.context.support.WebApplicationObjectSupport implements ViewResolver, org.springframework.core.Ordered {\n\tint getOrder();\n\t// Resolve the given view by name.\n\tView resolveViewName(String viewName, Locale locale);\n\t// Specify the order value for this ViewResolver bean.\n\tvoid setOrder(int order);\n}", "des": "A simple implementation of ViewResolver that interprets a view name as a bean name in the current application context, i.e."}
{"index": 12490, "repo": "spring-webmvc-6.0.11", "code": "public class BindErrorsTag extends HtmlEscapingAwareTag {\n\tint doEndTag();\n\tvoid doFinally();\n\t// Called by doStartTag to perform the actual work.\n\tprotected final int doStartTagInternal();\n\t// Retrieve the Errors instance that this tag is currently bound to.\n\tfinal org.springframework.validation.Errors getErrors();\n\t// Return the name of the bean that this tag checks.\n\tString getName();\n\t// Set the name of the bean that this tag should check.\n\tvoid setName(String name);\n}", "des": "This <hasBindErrors> tag provides an Errors instance in case of bind errors."}
{"index": 12491, "repo": "spring-webmvc-6.0.11", "code": "public class BindStatus extends Object {\n\t// Find a PropertyEditor for the given value class, associated with the property that this bound status is currently bound to.\n\tPropertyEditor findEditor(Class<?> valueClass);\n\t// Return the actual value of the field, i.e.\n\tObject getActualValue();\n\t// Return a suitable display value for the field, i.e.\n\tString getDisplayValue();\n\t// Return the PropertyEditor for the property that this bind status is currently bound to.\n\tPropertyEditor getEditor();\n}", "des": "Simple adapter to expose the bind status of a field or object."}
{"index": 12492, "repo": "spring-webmvc-6.0.11", "code": "public class BindTag extends HtmlEscapingAwareTag implements EditorAwareTag {\n\tint doEndTag();\n\tvoid doFinally();\n\t// Called by doStartTag to perform the actual work.\n\tprotected final int doStartTagInternal();\n\t// Retrieve the PropertyEditor for the property that this tag is currently bound to.\n\tfinal PropertyEditor getEditor();\n\t// Retrieve the Errors instance that this tag is currently bound to.\n\tfinal org.springframework.validation.Errors getErrors();\n}", "des": "The <bind> tag supports evaluation of binding errors for a certain bean or bean property."}
{"index": 12493, "repo": "spring-webmvc-6.0.11", "code": "public class ButtonTag extends AbstractHtmlElementTag {\n\t// Closes the 'button' block tag.\n\tint doEndTag();\n\t// Return the default value.\n\tprotected String getDefaultValue();\n\t// Set the value of the 'name' attribute.\n\tString getName();\n\t// Get the value of the 'type' attribute.\n\tprotected String getType();\n\t// Get the value of the 'value' attribute.\n\tString getValue();\n\t// Get the value of the 'disabled' attribute.\n\tboolean isDisabled();\n}", "des": "The <button> tag renders a form field label in an HTML 'button' tag."}
{"index": 12494, "repo": "spring-webmvc-6.0.11", "code": "public class CachingResourceResolver extends AbstractResourceResolver {\n\tprotected String computeKey(HttpServletRequest request, String requestPath);\n\t// Return the configured Cache.\n\torg.springframework.cache.Cache getCache();\n\t// Return a read-only list with the supported content codings.\n\tList<String> getContentCodings();\n}", "des": "A ResourceResolver that resolves resources from a Cache or otherwise delegates to the resolver chain and saves the result in the cache."}
{"index": 12495, "repo": "spring-webmvc-6.0.11", "code": "public class CachingResourceTransformer extends Object implements ResourceTransformer {\n\t// Return the configured Cache.\n\torg.springframework.cache.Cache getCache();\n\t// Transform the given resource.\n\torg.springframework.core.io.Resource transform(HttpServletRequest request, org.springframework.core.io.Resource resource, ResourceTransformerChain transformerChain);\n}", "des": "A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, and otherwise delegates to the resolver chain and saves the result in the cache."}
{"index": 12496, "repo": "spring-webmvc-6.0.11", "code": "public class CheckboxesTag extends AbstractMultiCheckedElementTag {\n\t// Return the type of the HTML input element to generate: \"checkbox\" or \"radio\".\n\tprotected String getInputType();\n\t// Renders the 'input type=\"radio\"' element with the configured AbstractMultiCheckedElementTag.setItems(Object) values.\n\tprotected int writeTagContent(TagWriter tagWriter);\n}", "des": "The <checkboxes> tag renders multiple HTML 'input' tags with type 'checkbox'."}
{"index": 12497, "repo": "spring-webmvc-6.0.11", "code": "public class CheckboxTag extends AbstractSingleCheckedElementTag {\n\t// Return the type of the HTML input element to generate: \"checkbox\" or \"radio\".\n\tprotected String getInputType();\n\t// Renders the 'input(radio)' element with the configured value.\n\tprotected int writeTagContent(TagWriter tagWriter);\n\t// Write the details for the given primary tag: i.e.\n\tprotected void writeTagDetails(TagWriter tagWriter);\n}", "des": "The <checkbox> tag renders an HTML 'input' tag with type 'checkbox'."}
{"index": 12498, "repo": "spring-webmvc-6.0.11", "code": "public class CompositeRequestCondition extends AbstractRequestCondition<CompositeRequestCondition> {\n\t// If one instance is empty, return the other.\n\tCompositeRequestCondition combine(CompositeRequestCondition other);\n\t// If one instance is empty, the other \"wins\".\n\tint compareTo(CompositeRequestCondition other, HttpServletRequest request);\n\t// Return the underlying conditions (possibly empty but never null).\n\tList<RequestCondition<?>> getConditions();\n}", "des": "Implements the RequestCondition contract by delegating to multiple RequestCondition types and using a logical conjunction (' && ') to ensure all conditions match a given request."}
{"index": 12499, "repo": "spring-webmvc-6.0.11", "code": "public final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition> {\n\t// Returns the \"other\" instance if it has any expressions; returns \"this\" instance otherwise.\n\tConsumesRequestCondition combine(ConsumesRequestCondition other);\n}", "des": "A logical disjunction (' || ') request condition to match a request's 'Content-Type' header to a list of media type expressions."}
{"index": 12500, "repo": "spring-webmvc-6.0.11", "code": "public class ContentNegotiatingViewResolver extends org.springframework.web.context.support.WebApplicationObjectSupport implements ViewResolver, org.springframework.core.Ordered, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Return the ContentNegotiationManager to use to determine requested media types.\n\torg.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager();\n\tList<View> getDefaultViews();\n}", "des": "Implementation of ViewResolver that resolves a view based on the request file name or Accept header."}
{"index": 12501, "repo": "spring-webmvc-6.0.11", "code": "public class ContentNegotiationConfigurer extends Object {\n\t// Build a ContentNegotiationManager based on this configurer's settings.\n\tprotected org.springframework.web.accept.ContentNegotiationManager buildContentNegotiationManager();\n\t// Set the default content type(s) to use when no content type is requested in order of priority.\n\tContentNegotiationConfigurer defaultContentType(org.springframework.http.MediaType... defaultContentTypes);\n}", "des": "Creates a ContentNegotiationManager and configures it with one or more ContentNegotiationStrategy instances."}
{"index": 12502, "repo": "spring-webmvc-6.0.11", "code": "public class CookieLocaleResolver extends AbstractLocaleContextResolver {\n\t// Deprecated. as of 6.0, in favor of setDefaultLocaleFunction(Function)\n\tprotected Locale determineDefaultLocale(HttpServletRequest request);\n\t// Deprecated. as of 6.0, in favor of setDefaultTimeZoneFunction(Function)\n\tprotected TimeZone determineDefaultTimeZone(HttpServletRequest request);\n}", "des": "LocaleResolver implementation that uses a cookie sent back to the user in case of a custom setting, with a fallback to the configured default locale, the request's Accept-Language header, or the default locale for the server."}
{"index": 12503, "repo": "spring-webmvc-6.0.11", "code": "public class CorsRegistration extends Object {\n\t// Whether the browser should send credentials, such as cookies along with cross domain requests, to the annotated endpoint.\n\tCorsRegistration allowCredentials(boolean allowCredentials);\n\t// Set the list of headers that a pre-flight request can list as allowed for use during an actual request.\n\tCorsRegistration allowedHeaders(String... headers);\n\t// Set the HTTP methods to allow, e.g.\n\tCorsRegistration allowedMethods(String... methods);\n}", "des": "Assists with the creation of a CorsConfiguration instance for a given URL path pattern."}
{"index": 12504, "repo": "spring-webmvc-6.0.11", "code": "public class CorsRegistry extends Object {\n\t// Enable cross-origin request handling for the specified path pattern.\n\tCorsRegistration addMapping(String pathPattern);\n\t// Return the registered CorsConfiguration objects, keyed by path pattern.\n\tprotected Map<String,org.springframework.web.cors.CorsConfiguration> getCorsConfigurations();\n}", "des": "Assists with the registration of global, URL pattern based CorsConfiguration mappings."}
{"index": 12505, "repo": "spring-webmvc-6.0.11", "code": "public class DefaultHandlerExceptionResolver extends AbstractHandlerExceptionResolver {\n\t// Actually resolve the given exception that got thrown during handler execution, returning a ModelAndView that represents a specific error page if appropriate.\n\tprotected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);\n}", "des": "The default implementation of the HandlerExceptionResolver interface, resolving standard Spring MVC exceptions and translating them to corresponding HTTP status codes."}
{"index": 12506, "repo": "spring-webmvc-6.0.11", "code": "public class DefaultRequestToViewNameTranslator extends Object implements RequestToViewNameTranslator {\n\t// Translates the request URI of the incoming HttpServletRequest into the view name based on the configured parameters.\n\tString getViewName(HttpServletRequest request);\n\t// Set the prefix to prepend to generated view names.\n\tvoid setPrefix(String prefix);\n\t// Set the value that will replace '/' as the separator in the view name.\n\tvoid setSeparator(String separator);\n}", "des": "RequestToViewNameTranslator that simply transforms the URI of the incoming request into a view name."}
{"index": 12507, "repo": "spring-webmvc-6.0.11", "code": "public class DefaultServletHandlerConfigurer extends Object {\n\t// Return a handler mapping instance ordered at Ordered.LOWEST_PRECEDENCE containing the DefaultServletHttpRequestHandler instance mapped to \"/**\"; or null if default servlet handling was not enabled.\n\tprotected SimpleUrlHandlerMapping buildHandlerMapping();\n\t// Enable forwarding to the \"default\" Servlet.\n\tvoid enable();\n\t// Enable forwarding to the \"default\" Servlet identified by the given name.\n\tvoid enable(String defaultServletName);\n}", "des": "Configures a request handler for serving static resources by forwarding the request to the Servlet container's \"default\" Servlet."}
{"index": 12508, "repo": "spring-webmvc-6.0.11", "code": "public class DefaultServletHttpRequestHandler extends Object implements org.springframework.web.HttpRequestHandler, org.springframework.web.context.ServletContextAware {\n\tvoid handleRequest(HttpServletRequest request, HttpServletResponse response);\n\t// Set the name of the default Servlet to be forwarded to for static resource requests.\n\tvoid setDefaultServletName(String defaultServletName);\n}", "des": "An HttpRequestHandler for serving static files using the Servlet container's \"default\" Servlet."}
{"index": 12509, "repo": "spring-webmvc-6.0.11", "code": "@Configuration(proxyBeanMethods=false) public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\n\t// Add custom HandlerMethodArgumentResolvers to use in addition to the ones registered by default.\n\tprotected void addArgumentResolvers(List<org.springframework.web.method.support.HandlerMethodArgumentResolver> argumentResolvers);\n\t// Override this method to configure cross-origin requests processing.\n\tprotected void addCorsMappings(CorsRegistry registry);\n}", "des": "A subclass of WebMvcConfigurationSupport that detects and delegates to all beans of type WebMvcConfigurer allowing them to customize the configuration provided by WebMvcConfigurationSupport."}
{"index": 12510, "repo": "spring-webmvc-6.0.11", "code": "public class DispatcherServlet extends FrameworkServlet {\n\t// Build a LocaleContext for the given request, exposing the request's primary locale as current locale.\n\tprotected org.springframework.context.i18n.LocaleContext buildLocaleContext(HttpServletRequest request);\n\t// Convert the request into a multipart request, and make multipart resolver available.\n\tprotected HttpServletRequest checkMultipart(HttpServletRequest request);\n}", "des": "Central dispatcher for HTTP request handlers/controllers, e.g."}
{"index": 12511, "repo": "spring-webmvc-6.0.11", "code": "public class EncodedResourceResolver extends AbstractResourceResolver {\n\t// Return a read-only list with the supported content codings.\n\tList<String> getContentCodings();\n\t// Return a read-only map with coding-to-extension mappings.\n\tMap<String,String> getExtensions();\n\t// Java config friendly alternative to setExtensions(Map).\n\tvoid registerExtension(String coding, String extension);\n}", "des": "Resolver that delegates to the chain, and if a resource is found, it then attempts to find an encoded (e.g."}
{"index": 12512, "repo": "spring-webmvc-6.0.11", "code": "public interface EntityResponse<T> extends ServerResponse {\n\t// Return the entity that makes up this response.\n\tT entity();\n\t// Create a builder with the given object.\n\tstatic <T> EntityResponse.Builder<T> fromObject(T t);\n\t// Create a builder with the given object and type reference.\n\tstatic <T> EntityResponse.Builder<T> fromObject(T t, org.springframework.core.ParameterizedTypeReference<T> entityType);\n}", "des": "Entity-specific subtype of ServerResponse that exposes entity data."}
{"index": 12513, "repo": "spring-webmvc-6.0.11", "code": "public static interface EntityResponse.Builder<T> {\n\t// Set the set of allowed HTTP methods, as specified by the Allow header.\n\tEntityResponse.Builder<T> allow(Set<org.springframework.http.HttpMethod> allowedMethods);\n\t// Set the set of allowed HTTP methods, as specified by the Allow header.\n\tEntityResponse.Builder<T> allow(org.springframework.http.HttpMethod... allowedMethods);\n\t// Build the response.\n\tEntityResponse<T> build();\n}", "des": "Defines a builder for EntityResponse."}
{"index": 12514, "repo": "spring-webmvc-6.0.11", "code": "public class ErrorsTag extends AbstractHtmlElementBodyTag implements BodyTag {\n\t// Get the value for the HTML 'id' attribute.\n\tprotected String autogenerateId();\n\t// Exposes any bind status error messages under this key in the PageContext.PAGE_SCOPE.\n\tprotected void exposeAttributes();\n\t// Return the delimiter to be used between error messages.\n\tString getDelimiter();\n\t// Get the HTML element must be used to render the error messages.\n\tString getElement();\n}", "des": "The <errors> tag renders field errors in an HTML 'span' tag."}
{"index": 12515, "repo": "spring-webmvc-6.0.11", "code": "public class EscapeBodyTag extends HtmlEscapingAwareTag implements BodyTag {\n\tint doAfterBody();\n\tvoid doInitBody();\n\t// Called by doStartTag to perform the actual work.\n\tprotected int doStartTagInternal();\n\t// Read the unescaped body content from the page.\n\tprotected String readBodyContent();\n\tvoid setBodyContent(BodyContent bodyContent);\n\t// Set JavaScript escaping for this tag, as boolean value.\n\tvoid setJavaScriptEscape(boolean javaScriptEscape);\n}", "des": "The <escapeBody> tag is used to escape its enclosed body content, applying HTML escaping and/or JavaScript escaping."}
{"index": 12516, "repo": "spring-webmvc-6.0.11", "code": "public class EvalTag extends HtmlEscapingAwareTag {\n\tint doEndTag();\n\t// Called by doStartTag to perform the actual work.\n\tint doStartTagInternal();\n\t// Set the expression to evaluate.\n\tvoid setExpression(String expression);\n\t// Set JavaScript escaping for this tag, as boolean value.\n\tvoid setJavaScriptEscape(boolean javaScriptEscape);\n\t// Set the scope to export the evaluation result to.\n\tvoid setScope(String scope);\n}", "des": "The <eval> tag evaluates a Spring expression (SpEL) and either prints the result or assigns it to a variable."}
{"index": 12517, "repo": "spring-webmvc-6.0.11", "code": "public class FixedLocaleResolver extends AbstractLocaleContextResolver {\n\t// Default implementation of LocaleResolver.resolveLocale(HttpServletRequest) that delegates to LocaleContextResolver.resolveLocaleContext(HttpServletRequest), falling back to ServletRequest.getLocale() if necessary.\n\tLocale resolveLocale(HttpServletRequest request);\n\t// Resolve the current locale context via the given request.\n\torg.springframework.context.i18n.LocaleContext resolveLocaleContext(HttpServletRequest request);\n}", "des": "LocaleResolver implementation that always returns a fixed default locale and optionally time zone."}
{"index": 12518, "repo": "spring-webmvc-6.0.11", "code": "public final class FlashMap extends HashMap<String,Object> implements Comparable<FlashMap> {\n\t// Provide a request parameter identifying the request for this FlashMap.\n\tFlashMap addTargetRequestParam(String name, String value);\n\t// Provide request parameters identifying the request for this FlashMap.\n\tFlashMap addTargetRequestParams(org.springframework.util.MultiValueMap<String,String> params);\n}", "des": "A FlashMap provides a way for one request to store attributes intended for use in another."}
{"index": 12519, "repo": "spring-webmvc-6.0.11", "code": "public interface FlashMapManager {\n\t// Find a FlashMap saved by a previous request that matches to the current request, remove it from underlying storage, and also remove other expired FlashMap instances.\n\tFlashMap retrieveAndUpdate(HttpServletRequest request, HttpServletResponse response);\n\t// Save the given FlashMap, in some underlying storage and set the start of its expiration period.\n\tvoid saveOutputFlashMap(FlashMap flashMap, HttpServletRequest request, HttpServletResponse response);\n}", "des": "A strategy interface for retrieving and saving FlashMap instances."}
{"index": 12520, "repo": "spring-webmvc-6.0.11", "code": "public class FormTag extends AbstractHtmlElementTag {\n\t// Autogenerated IDs correspond to the form object name.\n\tprotected String autogenerateId();\n\t// Closes the 'form' block tag and removes the form object name from the PageContext.\n\tint doEndTag();\n\t// Clears the stored TagWriter.\n\tvoid doFinally();\n\t// Get the value of the 'acceptCharset' attribute.\n\tprotected String getAcceptCharset();\n\t// Get the value of the 'action' attribute.\n\tprotected String getAction();\n}", "des": "The <form> tag renders an HTML 'form' tag and exposes a binding path to inner tags for binding."}
{"index": 12521, "repo": "spring-webmvc-6.0.11", "code": "public abstract class FrameworkServlet extends HttpServletBean implements org.springframework.context.ApplicationContextAware {\n\t// Delegate the WebApplicationContext before it is refreshed to any ApplicationContextInitializer instances specified by the \"contextInitializerClasses\" servlet init-param.\n\tprotected void applyInitializers(org.springframework.context.ConfigurableApplicationContext wac);\n}", "des": "Base servlet for Spring's web framework."}
{"index": 12522, "repo": "spring-webmvc-6.0.11", "code": "public class FreeMarkerConfigurer extends org.springframework.ui.freemarker.FreeMarkerConfigurationFactory implements FreeMarkerConfig, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware {\n\t// Initialize FreeMarkerConfigurationFactory's Configuration if not overridden by a preconfigured FreeMarker Configuration.\n\tvoid afterPropertiesSet();\n\t// Return the Configuration object wrapped by this bean.\n\tfreemarker.template.Configuration getConfiguration();\n}", "des": "JavaBean to configure FreeMarker for web usage, via the \"configLocation\" and/or \"freemarkerSettings\" and/or \"templateLoaderPath\" properties."}
{"index": 12523, "repo": "spring-webmvc-6.0.11", "code": "public class FreeMarkerView extends AbstractTemplateView {\n\t// Autodetect a FreeMarkerConfig object via the ApplicationContext.\n\tprotected FreeMarkerConfig autodetectConfiguration();\n\t// Build a FreeMarker template model for the given model Map.\n\tprotected freemarker.template.SimpleHash buildTemplateModel(Map<String,Object> model, HttpServletRequest request, HttpServletResponse response);\n\t// Check that the FreeMarker template used for this view exists and is valid.\n\tboolean checkResource(Locale locale);\n}", "des": "View using the FreeMarker template engine."}
{"index": 12524, "repo": "spring-webmvc-6.0.11", "code": "public class FreeMarkerViewResolver extends AbstractTemplateViewResolver {\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Requires FreeMarkerView.\n\tprotected Class<?> requiredViewClass();\n}", "des": "Convenience subclass of UrlBasedViewResolver that supports FreeMarkerView (i.e."}
{"index": 12525, "repo": "spring-webmvc-6.0.11", "code": "public class GroovyMarkupView extends AbstractTemplateView {\n\t// Autodetect a MarkupTemplateEngine via the ApplicationContext.\n\tprotected groovy.text.markup.MarkupTemplateEngine autodetectMarkupTemplateEngine();\n\t// Check whether the underlying resource that the configured URL points to actually exists.\n\tboolean checkResource(Locale locale);\n\t// Return a template compiled by the configured Groovy Markup template engine for the given view URL.\n\tprotected groovy.text.Template getTemplate(String viewUrl);\n}", "des": "An AbstractTemplateView subclass based on Groovy XML/XHTML markup templates."}
{"index": 12526, "repo": "spring-webmvc-6.0.11", "code": "public class GroovyMarkupViewResolver extends AbstractTemplateViewResolver {\n\t// This resolver supports i18n, so cache keys should contain the locale.\n\tprotected Object getCacheKey(String viewName, Locale locale);\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Return the required type of view for this resolver.\n\tprotected Class<?> requiredViewClass();\n}", "des": "Convenience subclass of AbstractTemplateViewResolver that supports GroovyMarkupView (i.e."}
{"index": 12527, "repo": "spring-webmvc-6.0.11", "code": "public interface HandlerAdapter {\n\t// Deprecated. as of 5.3.9 along with LastModified.\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\t// Use the given handler to handle this request.\n\tModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler);\n\t// Given a handler instance, return whether this HandlerAdapter can support it.\n\tboolean supports(Object handler);\n}", "des": "MVC framework SPI, allowing parameterization of the core MVC workflow."}
{"index": 12528, "repo": "spring-webmvc-6.0.11", "code": "public class HandlerExceptionResolverComposite extends Object implements HandlerExceptionResolver, org.springframework.core.Ordered {\n\t// Return the list of exception resolvers to delegate to.\n\tList<HandlerExceptionResolver> getExceptionResolvers();\n\tint getOrder();\n\t// Resolve the exception by iterating over the list of configured exception resolvers.\n\tModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);\n}", "des": "A HandlerExceptionResolver that delegates to a list of other HandlerExceptionResolvers."}
{"index": 12529, "repo": "spring-webmvc-6.0.11", "code": "public class HandlerExecutionChain extends Object {\n\t// Add the given interceptor at the specified index of this chain.\n\tvoid addInterceptor(int index, HandlerInterceptor interceptor);\n\t// Add the given interceptor to the end of this chain.\n\tvoid addInterceptor(HandlerInterceptor interceptor);\n\t// Add the given interceptors to the end of this chain.\n\tvoid addInterceptors(HandlerInterceptor... interceptors);\n\t// Return the handler object to execute.\n\tObject getHandler();\n}", "des": "Handler execution chain, consisting of handler object and any handler interceptors."}
{"index": 12530, "repo": "spring-webmvc-6.0.11", "code": "@FunctionalInterface public interface HandlerFilterFunction<T extends ServerResponse,R extends ServerResponse> {\n\t// Return a composed filter function that first applies this filter, and then applies the after filter.\n\tdefault HandlerFilterFunction<T,R> andThen(HandlerFilterFunction<T,T> after);\n\t// Apply this filter to the given handler function, resulting in a filtered handler function.\n\tdefault HandlerFunction<R> apply(HandlerFunction<T> handler);\n}", "des": "Represents a function that filters a handler function."}
{"index": 12531, "repo": "spring-webmvc-6.0.11", "code": "public class HandlerFunctionAdapter extends Object implements HandlerAdapter, org.springframework.core.Ordered {\n\t// Same contract as for HttpServlet's getLastModified method.\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\tint getOrder();\n\t// Use the given handler to handle this request.\n\tModelAndView handle(HttpServletRequest servletRequest, HttpServletResponse servletResponse, Object handler);\n}", "des": "HandlerAdapter implementation that supports HandlerFunctions."}
{"index": 12532, "repo": "spring-webmvc-6.0.11", "code": "public interface HandlerInterceptor {\n\t// Callback after completion of request processing, that is, after rendering the view.\n\tdefault void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);\n\t// Interception point after successful execution of a handler.\n\tdefault void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView);\n}", "des": "Workflow interface that allows for customized handler execution chains."}
{"index": 12533, "repo": "spring-webmvc-6.0.11", "code": "public interface HandlerMapping {\n\t// Return a handler and any interceptors for this request.\n\tHandlerExecutionChain getHandler(HttpServletRequest request);\n\t// Whether this HandlerMapping instance has been enabled to use parsed PathPatterns in which case the DispatcherServlet automatically parses the RequestPath to make it available for access in HandlerMappings, HandlerInterceptors, and other components.\n\tdefault boolean usesPathPatterns();\n}", "des": "Interface to be implemented by objects that define a mapping between requests and handler objects."}
{"index": 12534, "repo": "spring-webmvc-6.0.11", "code": "public class HandlerMappingIntrospector extends Object implements org.springframework.web.cors.CorsConfigurationSource, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\torg.springframework.web.cors.CorsConfiguration getCorsConfiguration(HttpServletRequest request);\n\t// Return the configured or detected HandlerMappings.\n\tList<HandlerMapping> getHandlerMappings();\n}", "des": "Helper class to get information from the HandlerMapping that would serve a specific request."}
{"index": 12535, "repo": "spring-webmvc-6.0.11", "code": "public final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition> {\n\t// Returns a new instance with the union of the header expressions from \"this\" and the \"other\" instance.\n\tHeadersRequestCondition combine(HeadersRequestCondition other);\n\t// Compare to another condition based on header expressions.\n\tint compareTo(HeadersRequestCondition other, HttpServletRequest request);\n}", "des": "A logical conjunction (' && ') request condition that matches a request against a set of header expressions with syntax defined in RequestMapping.headers()."}
{"index": 12536, "repo": "spring-webmvc-6.0.11", "code": "public class HiddenInputTag extends AbstractHtmlElementTag {\n\t// Get the value of the 'disabled' attribute.\n\tboolean isDisabled();\n\t// Flags \"type\" as an illegal dynamic attribute.\n\tprotected boolean isValidDynamicAttribute(String localName, Object value);\n\t// Set the value of the 'disabled' attribute.\n\tvoid setDisabled(boolean disabled);\n\t// Writes the HTML 'input' tag to the supplied TagWriter including the databound value.\n\tprotected int writeTagContent(TagWriter tagWriter);\n}", "des": "The <hidden> tag renders an HTML 'input' tag with type 'hidden' using the bound value."}
{"index": 12537, "repo": "spring-webmvc-6.0.11", "code": "public class HtmlEscapeTag extends RequestContextAwareTag {\n\t// Called by doStartTag to perform the actual work.\n\tprotected int doStartTagInternal();\n\t// Set the default value for HTML escaping, to be put into the current PageContext.\n\tvoid setDefaultHtmlEscape(boolean defaultHtmlEscape);\n}", "des": "The <htmlEscape> tag sets default HTML escape value for the current page."}
{"index": 12538, "repo": "spring-webmvc-6.0.11", "code": "public abstract class HtmlEscapingAwareTag extends RequestContextAwareTag {\n\t// HTML-encodes the given String, only if the \"htmlEscape\" setting is enabled.\n\tprotected String htmlEscape(String content);\n\t// Return the applicable default HTML escape setting for this tag.\n\tprotected boolean isDefaultHtmlEscape();\n\t// Return the HTML escaping setting for this tag, or the default setting if not overridden.\n\tprotected boolean isHtmlEscape();\n}", "des": "Superclass for tags that output content that might get HTML-escaped."}
{"index": 12539, "repo": "spring-webmvc-6.0.11", "code": "public class HttpRequestHandlerAdapter extends Object implements HandlerAdapter {\n\t// Same contract as for HttpServlet's getLastModified method.\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\t// Use the given handler to handle this request.\n\tModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler);\n\t// Given a handler instance, return whether this HandlerAdapter can support it.\n\tboolean supports(Object handler);\n}", "des": "Adapter to use the plain HttpRequestHandler interface with the generic DispatcherServlet."}
{"index": 12540, "repo": "spring-webmvc-6.0.11", "code": "public abstract class HttpServletBean extends HttpServlet implements org.springframework.core.env.EnvironmentCapable, org.springframework.context.EnvironmentAware {\n\t// Subclasses can invoke this method to specify that this property (which must match a JavaBean property they expose) is mandatory, and must be supplied as a config parameter.\n\tprotected final void addRequiredProperty(String property);\n}", "des": "Simple extension of HttpServlet which treats its config parameters (init-param entries within the servlet tag in web.xml) as bean properties."}
{"index": 12541, "repo": "spring-webmvc-6.0.11", "code": "public class InputTag extends AbstractHtmlInputElementTag {\n\t// Get the value of the 'alt' attribute.\n\tprotected String getAlt();\n\t// Get the value of the 'autocomplete' attribute.\n\tprotected String getAutocomplete();\n\t// Get the value of the 'maxlength' attribute.\n\tprotected String getMaxlength();\n\t// Get the value of the 'onselect' attribute.\n\tprotected String getOnselect();\n\t// Get the value of the 'size' attribute.\n\tprotected String getSize();\n}", "des": "The <input> tag renders an HTML 'input' tag with type 'text' using the bound value."}
{"index": 12542, "repo": "spring-webmvc-6.0.11", "code": "public class InterceptorRegistration extends Object {\n\t// Add patterns for URLs the interceptor should be included in.\n\tInterceptorRegistration addPathPatterns(String... patterns);\n\t// List-based variant of addPathPatterns(String...).\n\tInterceptorRegistration addPathPatterns(List<String> patterns);\n\t// Add patterns for URLs the interceptor should be excluded from.\n\tInterceptorRegistration excludePathPatterns(String... patterns);\n}", "des": "Assists with the creation of a MappedInterceptor."}
{"index": 12543, "repo": "spring-webmvc-6.0.11", "code": "public class InterceptorRegistry extends Object {\n\t// Adds the provided HandlerInterceptor.\n\tInterceptorRegistration addInterceptor(HandlerInterceptor interceptor);\n\t// Adds the provided WebRequestInterceptor.\n\tInterceptorRegistration addWebRequestInterceptor(org.springframework.web.context.request.WebRequestInterceptor interceptor);\n\t// Return all registered interceptors.\n\tprotected List<Object> getInterceptors();\n}", "des": "Helps with configuring a list of mapped interceptors."}
{"index": 12544, "repo": "spring-webmvc-6.0.11", "code": "public class InternalResourceView extends AbstractUrlBasedView {\n\t// Expose helpers unique to each rendering operation.\n\tprotected void exposeHelpers(HttpServletRequest request);\n\t// Obtain the RequestDispatcher to use for the forward/include.\n\tprotected RequestDispatcher getRequestDispatcher(HttpServletRequest request, String path);\n\t// An ApplicationContext is not strictly required for InternalResourceView.\n\tprotected boolean isContextRequired();\n}", "des": "Wrapper for a JSP or other resource within the same web application."}
{"index": 12545, "repo": "spring-webmvc-6.0.11", "code": "public class InternalResourceViewResolver extends UrlBasedViewResolver {\n\t// Creates a new View instance of the specified view class and configures it.\n\tprotected AbstractUrlBasedView buildView(String viewName);\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Return the required type of view for this resolver.\n\tprotected Class<?> requiredViewClass();\n}", "des": "Convenient subclass of UrlBasedViewResolver that supports InternalResourceView (i.e."}
{"index": 12546, "repo": "spring-webmvc-6.0.11", "code": "public class JsonViewRequestBodyAdvice extends RequestBodyAdviceAdapter {\n\t// The default implementation returns the InputMessage that was passed in.\n\torg.springframework.http.HttpInputMessage beforeBodyRead(org.springframework.http.HttpInputMessage inputMessage, org.springframework.core.MethodParameter methodParameter, Type targetType, Class<? extends org.springframework.http.converter.HttpMessageConverter<?>> selectedConverterType);\n}", "des": "A RequestBodyAdvice implementation that adds support for Jackson's @JsonView annotation declared on a Spring MVC @HttpEntity or @RequestBody method parameter."}
{"index": 12547, "repo": "spring-webmvc-6.0.11", "code": "public class JsonViewResponseBodyAdvice extends AbstractMappingJacksonResponseBodyAdvice {\n\t// Invoked only if the converter type is MappingJackson2HttpMessageConverter.\n\tprotected void beforeBodyWriteInternal(org.springframework.http.converter.json.MappingJacksonValue bodyContainer, org.springframework.http.MediaType contentType, org.springframework.core.MethodParameter returnType, org.springframework.http.server.ServerHttpRequest request, org.springframework.http.server.ServerHttpResponse response);\n}", "des": "A ResponseBodyAdvice implementation that adds support for Jackson's @JsonView annotation declared on a Spring MVC @RequestMapping or @ExceptionHandler method."}
{"index": 12548, "repo": "spring-webmvc-6.0.11", "code": "public class JspAwareRequestContext extends RequestContext {\n\t// This implementation checks for a JSTL locale attribute in page, request, session or application scope; if not found, returns the HttpServletRequest.getLocale().\n\tprotected Locale getFallbackLocale();\n\t// This implementation checks for a JSTL time zone attribute in page, request, session or application scope; if not found, returns null.\n\tprotected TimeZone getFallbackTimeZone();\n}", "des": "JSP-aware (and JSTL-aware) subclass of RequestContext, allowing for population of the context from a jakarta.servlet.jsp.PageContext."}
{"index": 12549, "repo": "spring-webmvc-6.0.11", "code": "public abstract class JstlUtils extends Object {\n\t// Exposes JSTL-specific request attributes specifying locale and resource bundle for JSTL's formatting and message tags, using Spring's locale and MessageSource.\n\tstatic void exposeLocalizationContext(HttpServletRequest request, org.springframework.context.MessageSource messageSource);\n}", "des": "Helper class for preparing JSTL views, in particular for exposing a JSTL localization context."}
{"index": 12550, "repo": "spring-webmvc-6.0.11", "code": "public class JstlView extends InternalResourceView {\n\t// Exposes a JSTL LocalizationContext for Spring's locale and MessageSource.\n\tprotected void exposeHelpers(HttpServletRequest request);\n\t// Wraps the MessageSource with a JSTL-aware MessageSource that is aware of JSTL's jakarta.servlet.jsp.jstl.fmt.localizationContext context-param.\n\tprotected void initServletContext(ServletContext servletContext);\n}", "des": "Specialization of InternalResourceView for JSTL pages, i.e."}
{"index": 12551, "repo": "spring-webmvc-6.0.11", "code": "public class LabelTag extends AbstractHtmlElementTag {\n\t// Autogenerate the 'for' attribute value for this tag.\n\tprotected String autogenerateFor();\n\t// Close the 'label' tag.\n\tint doEndTag();\n\t// Disposes of the TagWriter instance.\n\tvoid doFinally();\n\t// Get the value of the 'id' attribute.\n\tprotected String getFor();\n\t// Overrides #getName() to always return null, because the 'name' attribute is not supported by the 'label' tag.\n\tprotected String getName();\n}", "des": "The <label> tag renders a form field label in an HTML 'label' tag."}
{"index": 12552, "repo": "spring-webmvc-6.0.11", "code": "public class LocaleChangeInterceptor extends Object implements HandlerInterceptor {\n\t// Return the configured HTTP methods.\n\tString[] getHttpMethods();\n\t// Return the name of the parameter that contains a locale specification in a locale change request.\n\tString getParamName();\n\t// Return whether to ignore an invalid value for the locale parameter.\n\tboolean isIgnoreInvalidLocale();\n\t// Parse the given locale value as coming from a request parameter.\n\tprotected Locale parseLocaleValue(String localeValue);\n}", "des": "Interceptor that allows for changing the current locale on every request, via a configurable request parameter (default parameter name: \"locale\")."}
{"index": 12553, "repo": "spring-webmvc-6.0.11", "code": "public interface LocaleContextResolver extends LocaleResolver {\n\t// Default implementation of LocaleResolver.resolveLocale(HttpServletRequest) that delegates to resolveLocaleContext(HttpServletRequest), falling back to ServletRequest.getLocale() if necessary.\n\tdefault Locale resolveLocale(HttpServletRequest request);\n\t// Resolve the current locale context via the given request.\n\torg.springframework.context.i18n.LocaleContext resolveLocaleContext(HttpServletRequest request);\n}", "des": "Extension of LocaleResolver that adds support for a rich locale context (potentially including locale and time zone information)."}
{"index": 12554, "repo": "spring-webmvc-6.0.11", "code": "public interface LocaleResolver {\n\t// Resolve the current locale via the given request.\n\tLocale resolveLocale(HttpServletRequest request);\n\t// Set the current locale to the given one.\n\tvoid setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale);\n}", "des": "Interface for web-based locale resolution strategies that allows for both locale resolution via the request and locale modification via request and response."}
{"index": 12555, "repo": "spring-webmvc-6.0.11", "code": "public final class MappedInterceptor extends Object implements HandlerInterceptor {\n\t// Callback after completion of request processing, that is, after rendering the view.\n\tvoid afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);\n\t// The target HandlerInterceptor to invoke in case of a match.\n\tHandlerInterceptor getInterceptor();\n\t// The configured PathMatcher.\n\torg.springframework.util.PathMatcher getPathMatcher();\n}", "des": "Wraps a HandlerInterceptor and uses URL patterns to determine whether it applies to a given request."}
{"index": 12556, "repo": "spring-webmvc-6.0.11", "code": "public class MappingJackson2JsonView extends AbstractJackson2View {\n\t// Filter out undesired attributes from the given model.\n\tprotected Object filterModel(Map<String,Object> model);\n\t// Return the attributes in the model that should be rendered by this view.\n\tfinal Set<String> getModelKeys();\n}", "des": "Spring MVC View that renders JSON content by serializing the model for the current request using Jackson 2's ObjectMapper."}
{"index": 12557, "repo": "spring-webmvc-6.0.11", "code": "public class MappingJackson2XmlView extends AbstractJackson2View {\n\t// Filter out undesired attributes from the given model.\n\tprotected Object filterModel(Map<String,Object> model);\n\t// Set the attribute in the model that should be rendered by this view.\n\tvoid setModelKey(String modelKey);\n}", "des": "Spring MVC View that renders XML content by serializing the model for the current request using Jackson 2's XmlMapper."}
{"index": 12558, "repo": "spring-webmvc-6.0.11", "code": "public class MarshallingView extends AbstractView {\n\tprotected void initApplicationContext();\n\t// Check whether the given value from the current view's model is eligible for marshalling through the configured Marshaller.\n\tprotected boolean isEligibleForMarshalling(String modelKey, Object value);\n\t// Locate the object to be marshalled.\n\tprotected Object locateToBeMarshalled(Map<String,Object> model);\n}", "des": "Spring-MVC View that allows for response context to be rendered as the result of marshalling by a Marshaller."}
{"index": 12559, "repo": "spring-webmvc-6.0.11", "code": "public interface MatchableHandlerMapping extends HandlerMapping {\n\t// Return the parser of this HandlerMapping, if configured in which case pre-parsed patterns are used.\n\tdefault org.springframework.web.util.pattern.PathPatternParser getPatternParser();\n\t// Determine whether the request matches the given pattern.\n\tRequestMatchResult match(HttpServletRequest request, String pattern);\n}", "des": "Additional interface that a HandlerMapping can implement to expose a request matching API aligned with its internal request matching configuration and implementation."}
{"index": 12560, "repo": "spring-webmvc-6.0.11", "code": "public class MessageTag extends HtmlEscapingAwareTag implements ArgumentAware {\n\t// Callback hook for nested spring:argument tags to pass their value to the parent tag.\n\tvoid addArgument(Object argument);\n\t// Resolves the message, escapes it if demanded, and writes it to the page (or exposes it as variable).\n\tint doEndTag();\n\t// Called by doStartTag to perform the actual work.\n\tprotected final int doStartTagInternal();\n}", "des": "The <message> tag looks up a message in the scope of this page."}
{"index": 12561, "repo": "spring-webmvc-6.0.11", "code": "public class ModelAndView extends Object {\n\t// Add all attributes contained in the provided Map to the model.\n\tModelAndView addAllObjects(Map<String,?> modelMap);\n\t// Add an attribute to the model using parameter name generation.\n\tModelAndView addObject(Object attributeValue);\n\t// Add an attribute to the model.\n\tModelAndView addObject(String attributeName, Object attributeValue);\n\t// Clear the state of this ModelAndView object.\n\tvoid clear();\n\t// Return the model map.\n\tMap<String,Object> getModel();\n}", "des": "Holder for both Model and View in the web MVC framework."}
{"index": 12562, "repo": "spring-webmvc-6.0.11", "code": "public class ModelAndViewMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler {\n\t// Return the configured redirect patterns, if any.\n\tString[] getRedirectPatterns();\n\tvoid handleReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType, org.springframework.web.method.support.ModelAndViewContainer mavContainer, org.springframework.web.context.request.NativeWebRequest webRequest);\n}", "des": "Handles return values of type ModelAndView copying view and model information to the ModelAndViewContainer."}
{"index": 12563, "repo": "spring-webmvc-6.0.11", "code": "public abstract class MvcNamespaceUtils extends Object {\n\t// Find the ContentNegotiationManager bean created by or registered with the annotation-driven element.\n\tstatic Object getContentNegotiationManager(org.springframework.beans.factory.xml.ParserContext context);\n}", "des": "Convenience methods for use in MVC namespace BeanDefinitionParsers."}
{"index": 12564, "repo": "spring-webmvc-6.0.11", "code": "public class MvcUriComponentsBuilder extends Object {\n\t// Return a \"mock\" controller instance.\n\tstatic <T> T controller(Class<T> controllerType);\n\t// Create a UriComponentsBuilder from the mapping of a controller class and current request information including Servlet mapping.\n\tstatic org.springframework.web.util.UriComponentsBuilder fromController(Class<?> controllerType);\n}", "des": "Creates instances of UriComponentsBuilder by pointing to @RequestMapping methods on Spring MVC controllers."}
{"index": 12565, "repo": "spring-webmvc-6.0.11", "code": "public static interface MvcUriComponentsBuilder.MethodInvocationInfo {\n\t// Return the argument values.\n\tObject[] getArgumentValues();\n\t// Return the controller method.\n\tMethod getControllerMethod();\n\t// Return the controller types.\n\tClass<?> getControllerType();\n}", "des": "Method invocation information."}
{"index": 12566, "repo": "spring-webmvc-6.0.11", "code": "public class NestedPathTag extends TagSupport implements TryCatchFinally {\n\tvoid doCatch(Throwable throwable);\n\t// Reset any previous nestedPath value.\n\tint doEndTag();\n\tvoid doFinally();\n\tint doStartTag();\n\t// Return the path that this tag applies to.\n\tString getPath();\n\t// Set the path that this tag should apply.\n\tvoid setPath(String path);\n}", "des": "The <nestedPath> tag supports and assists with nested beans or bean properties in the model."}
{"index": 12567, "repo": "spring-webmvc-6.0.11", "code": "public class NoHandlerFoundException extends ServletException implements org.springframework.web.ErrorResponse {\n\torg.springframework.http.ProblemDetail getBody();\n\t// Return headers to use for the response.\n\torg.springframework.http.HttpHeaders getHeaders();\n\tString getHttpMethod();\n\t// Return the headers of the request.\n\torg.springframework.http.HttpHeaders getRequestHeaders();\n\tString getRequestURL();\n\torg.springframework.http.HttpStatusCode getStatusCode();\n}", "des": "By default, when the DispatcherServlet can't find a handler for a request it sends a 404 response."}
{"index": 12568, "repo": "spring-webmvc-6.0.11", "code": "public class OptionsTag extends AbstractHtmlElementTag {\n\t// Get the BindStatus for this tag.\n\tprotected BindStatus getBindStatus();\n\t// Get the name of the property mapped to the label (inner text) of the 'option' tag.\n\tprotected String getItemLabel();\n\t// Get the Collection, Map or array of objects used to generate the inner 'option' tags.\n\tprotected Object getItems();\n\t// Return the name of the property mapped to the 'value' attribute of the 'option' tag.\n\tprotected String getItemValue();\n}", "des": "The <options> tag renders a list of HTML 'option' tags."}
{"index": 12569, "repo": "spring-webmvc-6.0.11", "code": "public class OptionTag extends AbstractHtmlElementBodyTag implements BodyTag {\n\t// Autogenerate the 'id' attribute value for this tag.\n\tprotected String autogenerateId();\n\t// Called during AbstractHtmlElementBodyTag.writeTagContent(org.springframework.web.servlet.tags.form.TagWriter) allowing subclasses to add any attributes to the PageContext as needed.\n\tprotected void exposeAttributes();\n\t// Get the BindStatus for this tag.\n\tprotected BindStatus getBindStatus();\n}", "des": "The <option> tag renders a single HTML 'option'."}
{"index": 12570, "repo": "spring-webmvc-6.0.11", "code": "public class Param extends Object {\n\t// Return the raw parameter name.\n\tString getName();\n\t// Return the raw parameter value.\n\tString getValue();\n\t// Set the raw name of the parameter.\n\tvoid setName(String name);\n\t// Set the raw value of the parameter.\n\tvoid setValue(String value);\n}", "des": "Bean used to pass name-value pair parameters from a ParamTag to a ParamAware tag."}
{"index": 12571, "repo": "spring-webmvc-6.0.11", "code": "public class ParameterizableViewController extends AbstractController {\n\t// Return the configured HTTP status code or null.\n\torg.springframework.http.HttpStatusCode getStatusCode();\n\t// Return the View object, or null if we are using a view name to be resolved by the DispatcherServlet via a ViewResolver.\n\tView getView();\n\t// Return the name of the view to delegate to, or null if using a View instance.\n\tString getViewName();\n}", "des": "Trivial controller that always returns a pre-configured view and optionally sets the response status code."}
{"index": 12572, "repo": "spring-webmvc-6.0.11", "code": "public final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition> {\n\t// Returns a new instance with the union of the param expressions from \"this\" and the \"other\" instance.\n\tParamsRequestCondition combine(ParamsRequestCondition other);\n\t// Compare to another condition based on parameter expressions.\n\tint compareTo(ParamsRequestCondition other, HttpServletRequest request);\n}", "des": "A logical conjunction (' && ') request condition that matches a request against a set parameter expressions with syntax defined in RequestMapping.params()."}
{"index": 12573, "repo": "spring-webmvc-6.0.11", "code": "public class ParamTag extends BodyTagSupport {\n\tint doEndTag();\n\tvoid release();\n\t// Set the name of the parameter (required).\n\tvoid setName(String name);\n\t// Set the value of the parameter (optional).\n\tvoid setValue(String value);\n}", "des": "The <param> tag collects name-value parameters and passes them to a ParamAware ancestor in the tag hierarchy."}
{"index": 12574, "repo": "spring-webmvc-6.0.11", "code": "public class PasswordInputTag extends InputTag {\n\t// Return 'password' causing the rendered HTML 'input' element to have a 'type' of 'password'.\n\tprotected String getType();\n\t// Is the password value to be rendered?\n\tboolean isShowPassword();\n\t// Flags \"type\" as an illegal dynamic attribute.\n\tprotected boolean isValidDynamicAttribute(String localName, Object value);\n\t// Is the password value to be rendered?\n\tvoid setShowPassword(boolean showPassword);\n}", "des": "The <password> tag renders an HTML 'input' tag with type 'password' using the bound value."}
{"index": 12575, "repo": "spring-webmvc-6.0.11", "code": "public class PathMatchConfigurer extends Object {\n\t// Configure a path prefix to apply to matching controller methods.\n\tPathMatchConfigurer addPathPrefix(String prefix, Predicate<Class<?>> predicate);\n\torg.springframework.util.PathMatcher getPathMatcher();\n\t// Return the configured PathMatcher or a default, shared instance otherwise.\n\tprotected org.springframework.util.PathMatcher getPathMatcherOrDefault();\n\tprotected Map<String,Predicate<Class<?>>> getPathPrefixes();\n}", "des": "Configure path matching options."}
{"index": 12576, "repo": "spring-webmvc-6.0.11", "code": "public final class PathPatternsRequestCondition extends AbstractRequestCondition<PathPatternsRequestCondition> {\n\t// Combine the patterns of the current and of the other instances as follows: If only one instance has patterns, use those.\n\tPathPatternsRequestCondition combine(PathPatternsRequestCondition other);\n\t// Compare the two conditions based on the URL patterns they contain.\n\tint compareTo(PathPatternsRequestCondition other, HttpServletRequest request);\n}", "des": "A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns."}
{"index": 12577, "repo": "spring-webmvc-6.0.11", "code": "public class PathResourceResolver extends AbstractResourceResolver {\n\t// Perform additional checks on a resolved resource beyond checking whether the resource exists and is readable.\n\tprotected boolean checkResource(org.springframework.core.io.Resource resource, org.springframework.core.io.Resource location);\n\torg.springframework.core.io.Resource[] getAllowedLocations();\n\t// Return charsets associated with static resource locations.\n\tMap<org.springframework.core.io.Resource,Charset> getLocationCharsets();\n}", "des": "A simple ResourceResolver that tries to find a resource under the given locations matching to the request path."}
{"index": 12578, "repo": "spring-webmvc-6.0.11", "code": "public class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition> {\n\t// Combine the patterns of the current and of the other instances as follows: If only one instance has patterns, use those.\n\tPatternsRequestCondition combine(PatternsRequestCondition other);\n\t// Compare the two conditions based on the URL patterns they contain.\n\tint compareTo(PatternsRequestCondition other, HttpServletRequest request);\n}", "des": "A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns."}
{"index": 12579, "repo": "spring-webmvc-6.0.11", "code": "public final class ProducesRequestCondition extends AbstractRequestCondition<ProducesRequestCondition> {\n\t// Use this to clear MEDIA_TYPES_ATTRIBUTE that contains the parsed, requested media types.\n\tstatic void clearMediaTypesAttribute(HttpServletRequest request);\n\t// Returns the \"other\" instance if it has any expressions; returns \"this\" instance otherwise.\n\tProducesRequestCondition combine(ProducesRequestCondition other);\n}", "des": "A logical disjunction (' || ') request condition to match a request's 'Accept' header to a list of media type expressions."}
{"index": 12580, "repo": "spring-webmvc-6.0.11", "code": "public class RadioButtonTag extends AbstractSingleCheckedElementTag {\n\t// Return the type of the HTML input element to generate: \"checkbox\" or \"radio\".\n\tprotected String getInputType();\n\t// Write the details for the given primary tag: i.e.\n\tprotected void writeTagDetails(TagWriter tagWriter);\n}", "des": "The <radiobutton> tag renders an HTML 'input' tag with type 'radio'."}
{"index": 12581, "repo": "spring-webmvc-6.0.11", "code": "public interface RedirectAttributes extends org.springframework.ui.Model {\n\tRedirectAttributes addAllAttributes(Collection<?> attributeValues);\n\tRedirectAttributes addAttribute(Object attributeValue);\n\tRedirectAttributes addAttribute(String attributeName, Object attributeValue);\n\t// Add the given flash storage using a generated name.\n\tRedirectAttributes addFlashAttribute(Object attributeValue);\n}", "des": "A specialization of the Model interface that controllers can use to select attributes for a redirect scenario."}
{"index": 12582, "repo": "spring-webmvc-6.0.11", "code": "public class RedirectView extends AbstractUrlBasedView implements SmartView {\n\t// Append the query string of the current request to the target redirect URL.\n\tprotected void appendCurrentQueryParams(StringBuilder targetUrl, HttpServletRequest request);\n\t// Append query properties to the redirect URL.\n\tprotected void appendQueryProperties(StringBuilder targetUrl, Map<String,Object> model, String encodingScheme);\n}", "des": "View that redirects to an absolute, context relative, or current request relative URL."}
{"index": 12583, "repo": "spring-webmvc-6.0.11", "code": "public class RedirectViewControllerRegistration extends Object {\n\tprotected String getUrlPath();\n\tprotected ParameterizableViewController getViewController();\n\tprotected void setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\t// Whether to interpret a given redirect URL that starts with a slash (\"/\") as relative to the current ServletContext, i.e.\n\tRedirectViewControllerRegistration setContextRelative(boolean contextRelative);\n}", "des": "Assist with the registration of a single redirect view controller."}
{"index": 12584, "repo": "spring-webmvc-6.0.11", "code": "public class RenderingContext extends Object {\n\t// Return the application context.\n\torg.springframework.context.ApplicationContext getApplicationContext();\n\t// Return the locale of the rendered template.\n\tLocale getLocale();\n\t// Return a function that takes a template path as input and returns the template content as a String.\n\tFunction<String,String> getTemplateLoader();\n\t// Return the URL of the rendered template.\n\tString getUrl();\n}", "des": "Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side."}
{"index": 12585, "repo": "spring-webmvc-6.0.11", "code": "public interface RenderingResponse extends ServerResponse {\n\t// Create a builder with the given template name.\n\tstatic RenderingResponse.Builder create(String name);\n\t// Create a builder with the template name, status code, headers and model of the given response.\n\tstatic RenderingResponse.Builder from(RenderingResponse other);\n\t// Return the unmodifiable model map.\n\tMap<String,Object> model();\n\t// Return the name of the template to be rendered.\n\tString name();\n}", "des": "Rendering-specific subtype of ServerResponse that exposes model and template data."}
{"index": 12586, "repo": "spring-webmvc-6.0.11", "code": "public static interface RenderingResponse.Builder {\n\t// Build the response.\n\tRenderingResponse build();\n\t// Add the given cookie to the response.\n\tRenderingResponse.Builder cookie(Cookie cookie);\n\t// Manipulate this response's cookies with the given consumer.\n\tRenderingResponse.Builder cookies(Consumer<org.springframework.util.MultiValueMap<String,Cookie>> cookiesConsumer);\n\t// Add the given header value(s) under the given name.\n\tRenderingResponse.Builder header(String headerName, String... headerValues);\n}", "des": "Defines a builder for RenderingResponse."}
{"index": 12587, "repo": "spring-webmvc-6.0.11", "code": "public interface RequestBodyAdvice {\n\t// Invoked third (and last) after the request body is converted to an Object.\n\tObject afterBodyRead(Object body, org.springframework.http.HttpInputMessage inputMessage, org.springframework.core.MethodParameter parameter, Type targetType, Class<? extends org.springframework.http.converter.HttpMessageConverter<?>> converterType);\n}", "des": "Allows customizing the request before its body is read and converted into an Object and also allows for processing of the resulting Object before it is passed into a controller method as an @RequestBody or an HttpEntity method argument."}
{"index": 12588, "repo": "spring-webmvc-6.0.11", "code": "public abstract class RequestBodyAdviceAdapter extends Object implements RequestBodyAdvice {\n\t// The default implementation returns the body that was passed in.\n\tObject afterBodyRead(Object body, org.springframework.http.HttpInputMessage inputMessage, org.springframework.core.MethodParameter parameter, Type targetType, Class<? extends org.springframework.http.converter.HttpMessageConverter<?>> converterType);\n}", "des": "A convenient starting point for implementing RequestBodyAdvice with default method implementations."}
{"index": 12589, "repo": "spring-webmvc-6.0.11", "code": "public interface RequestCondition<T> {\n\t// Combine this condition with another such as conditions from a type-level and method-level @RequestMapping annotation.\n\tT combine(T other);\n\t// Compare this condition to another condition in the context of a specific request.\n\tint compareTo(T other, HttpServletRequest request);\n\t// Check if the condition matches the request returning a potentially new instance created for the current request.\n\tT getMatchingCondition(HttpServletRequest request);\n}", "des": "Contract for request mapping conditions."}
{"index": 12590, "repo": "spring-webmvc-6.0.11", "code": "public final class RequestConditionHolder extends AbstractRequestCondition<RequestConditionHolder> {\n\t// Combine the request conditions held by the two RequestConditionHolder instances after making sure the conditions are of the same type.\n\tRequestConditionHolder combine(RequestConditionHolder other);\n}", "des": "A holder for a RequestCondition useful when the type of the request condition is not known ahead of time, e.g."}
{"index": 12591, "repo": "spring-webmvc-6.0.11", "code": "public class RequestContext extends Object {\n\t// Change the current locale to the specified one, storing the new locale through the configured LocaleResolver.\n\tvoid changeLocale(Locale locale);\n\t// Change the current locale to the specified locale and time zone context, storing the new locale context through the configured LocaleResolver.\n\tvoid changeLocale(Locale locale, TimeZone timeZone);\n\t// Deprecated. as of 6.0, with no direct replacement\n\tvoid changeTheme(String themeName);\n}", "des": "Context holder for request-specific state, like current web application context, current locale, current theme, and potential binding errors."}
{"index": 12592, "repo": "spring-webmvc-6.0.11", "code": "public abstract class RequestContextAwareTag extends TagSupport implements TryCatchFinally {\n\tvoid doCatch(Throwable throwable);\n\tvoid doFinally();\n\t// Create and expose the current RequestContext.\n\tfinal int doStartTag();\n\t// Called by doStartTag to perform the actual work.\n\tprotected abstract int doStartTagInternal();\n\t// Return the current RequestContext.\n\tprotected final RequestContext getRequestContext();\n}", "des": "Superclass for all tags that require a RequestContext."}
{"index": 12593, "repo": "spring-webmvc-6.0.11", "code": "public abstract class RequestContextUtils extends Object {\n\t// Look for the WebApplicationContext associated with the DispatcherServlet that has initiated request processing, and for the global context if none was found associated with the current request.\n\tstatic org.springframework.web.context.WebApplicationContext findWebApplicationContext(HttpServletRequest request);\n}", "des": "Utility class for easy access to request-specific state which has been set by the DispatcherServlet."}
{"index": 12594, "repo": "spring-webmvc-6.0.11", "code": "public interface RequestDataValueProcessor {\n\t// Invoked after all form fields have been rendered.\n\tMap<String,String> getExtraHiddenFields(HttpServletRequest request);\n\t// Invoked when a new form action is rendered.\n\tString processAction(HttpServletRequest request, String action, String httpMethod);\n\t// Invoked when a form field value is rendered.\n\tString processFormFieldValue(HttpServletRequest request, String name, String value, String type);\n}", "des": "A contract for inspecting and potentially modifying request data values such as URL query parameters or form field values before they are rendered by a view or before a redirect."}
{"index": 12595, "repo": "spring-webmvc-6.0.11", "code": "public class RequestMappingHandlerAdapter extends AbstractHandlerMethodAdapter implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Template method to create a new InitBinderDataBinderFactory instance.\n\tprotected org.springframework.web.method.annotation.InitBinderDataBinderFactory createDataBinderFactory(List<org.springframework.web.method.support.InvocableHandlerMethod> binderMethods);\n}", "des": "Extension of AbstractHandlerMethodAdapter that supports @RequestMapping annotated HandlerMethods."}
{"index": 12596, "repo": "spring-webmvc-6.0.11", "code": "public class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping implements MatchableHandlerMapping, org.springframework.context.EmbeddedValueResolverAware {\n\t// Detects handler methods at initialization.\n\tvoid afterPropertiesSet();\n}", "des": "Creates RequestMappingInfo instances from type and method-level @RequestMapping annotations in @Controller classes."}
{"index": 12597, "repo": "spring-webmvc-6.0.11", "code": "public final class RequestMappingInfo extends Object implements RequestCondition<RequestMappingInfo> {\n\t// Create a new instance based on the current one, also adding the given custom condition.\n\tRequestMappingInfo addCustomCondition(RequestCondition<?> customCondition);\n\t// Combine \"this\" request mapping info (i.e.\n\tRequestMappingInfo combine(RequestMappingInfo other);\n\t// Compares \"this\" info (i.e.\n\tint compareTo(RequestMappingInfo other, HttpServletRequest request);\n\tboolean equals(Object other);\n}", "des": "Request mapping information."}
{"index": 12598, "repo": "spring-webmvc-6.0.11", "code": "public static interface RequestMappingInfo.Builder {\n\t// Build the RequestMappingInfo.\n\tRequestMappingInfo build();\n\t// Set the consumes conditions.\n\tRequestMappingInfo.Builder consumes(String... consumes);\n\t// Set a custom condition to use.\n\tRequestMappingInfo.Builder customCondition(RequestCondition<?> condition);\n\t// Set the header conditions.\n\tRequestMappingInfo.Builder headers(String... headers);\n\t// Set the mapping name.\n\tRequestMappingInfo.Builder mappingName(String name);\n}", "des": "Defines a builder for creating a RequestMappingInfo."}
{"index": 12599, "repo": "spring-webmvc-6.0.11", "code": "public static class RequestMappingInfo.BuilderConfiguration extends Object {\n\t// Return the ContentNegotiationManager to use for the ProducesRequestCondition, if any.\n\torg.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager();\n\t// Deprecated. as of 5.2.4.\n\tList<String> getFileExtensions();\n\t// Return a custom PathMatcher to use for the PatternsRequestCondition, if any.\n\torg.springframework.util.PathMatcher getPathMatcher();\n}", "des": "Container for configuration options used for request mapping purposes."}
{"index": 12600, "repo": "spring-webmvc-6.0.11", "code": "public abstract class RequestMappingInfoHandlerMapping extends AbstractHandlerMethodMapping<RequestMappingInfo> {\n\t// Return the request mapping paths that are not patterns.\n\tprotected Set<String> getDirectPaths(RequestMappingInfo info);\n\t// Look up a handler method for the given request.\n\tprotected org.springframework.web.method.HandlerMethod getHandlerInternal(HttpServletRequest request);\n}", "des": "Abstract base class for classes for which RequestMappingInfo defines the mapping between a request and a handler method."}
{"index": 12601, "repo": "spring-webmvc-6.0.11", "code": "public final class RequestMethodsRequestCondition extends AbstractRequestCondition<RequestMethodsRequestCondition> {\n\t// Returns a new instance with a union of the HTTP request methods from \"this\" and the \"other\" instance.\n\tRequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);\n}", "des": "A logical disjunction (' || ') request condition that matches a request against a set of RequestMethods."}
{"index": 12602, "repo": "spring-webmvc-6.0.11", "code": "@FunctionalInterface public interface RequestPredicate {\n\t// Accept the given visitor.\n\tdefault void accept(RequestPredicates.Visitor visitor);\n\t// Return a composed request predicate that tests against both this predicate AND the other predicate.\n\tdefault RequestPredicate and(RequestPredicate other);\n\t// Return a predicate that represents the logical negation of this predicate.\n\tdefault RequestPredicate negate();\n}", "des": "Represents a function that evaluates on a given ServerRequest."}
{"index": 12603, "repo": "spring-webmvc-6.0.11", "code": "public abstract class RequestPredicates extends Object {\n\t// Return a RequestPredicate that tests if the request's accept header is compatible with any of the given media types.\n\tstatic RequestPredicate accept(org.springframework.http.MediaType... mediaTypes);\n\t// Return a RequestPredicate that always matches.\n\tstatic RequestPredicate all();\n}", "des": "Implementations of RequestPredicate that implement various useful request matching operations, such as matching based on path, HTTP method, etc."}
{"index": 12604, "repo": "spring-webmvc-6.0.11", "code": "public static interface RequestPredicates.Visitor {\n\t// Receive \"middle\" notification of a logical AND predicate.\n\tvoid and();\n\t// Receive last notification of a logical AND predicate.\n\tvoid endAnd();\n\t// Receive last notification of a negated predicate.\n\tvoid endNegate();\n\t// Receive last notification of a logical OR predicate.\n\tvoid endOr();\n\t// Receive notification of an HTTP header predicate.\n\tvoid header(String name, String value);\n}", "des": "Receives notifications from the logical structure of request predicates."}
{"index": 12605, "repo": "spring-webmvc-6.0.11", "code": "public class ResourceChainRegistration extends Object {\n\t// Add a resource resolver to the chain.\n\tResourceChainRegistration addResolver(ResourceResolver resolver);\n\t// Add a resource transformer to the chain.\n\tResourceChainRegistration addTransformer(ResourceTransformer transformer);\n\tprotected List<ResourceResolver> getResourceResolvers();\n\tprotected List<ResourceTransformer> getResourceTransformers();\n}", "des": "Assists with the registration of resource resolvers and transformers."}
{"index": 12606, "repo": "spring-webmvc-6.0.11", "code": "public class ResourceHandlerRegistration extends Object {\n\t// Add one or more resource locations from which to serve static content.\n\tResourceHandlerRegistration addResourceLocations(String... locations);\n\t// Configure locations to serve static resources from based on pre-resolved Resource references.\n\tResourceHandlerRegistration addResourceLocations(org.springframework.core.io.Resource... locations);\n\t// Return the URL path patterns for the resource handler.\n\tprotected String[] getPathPatterns();\n}", "des": "Encapsulates information required to create a resource handler."}
{"index": 12607, "repo": "spring-webmvc-6.0.11", "code": "public class ResourceHandlerRegistry extends Object {\n\t// Add a resource handler to serve static resources.\n\tResourceHandlerRegistration addResourceHandler(String... pathPatterns);\n\t// Return a handler mapping with the mapped resource handlers; or null in case of no registrations.\n\tprotected AbstractHandlerMapping getHandlerMapping();\n\t// Whether a resource handler has already been registered for the given path pattern.\n\tboolean hasMappingForPattern(String pathPattern);\n}", "des": "Stores registrations of resource handlers for serving static resources such as images, css files and others through Spring MVC including setting cache headers optimized for efficient loading in a web browser."}
{"index": 12608, "repo": "spring-webmvc-6.0.11", "code": "public class ResourceHttpRequestHandler extends WebContentGenerator implements org.springframework.web.HttpRequestHandler, org.springframework.context.EmbeddedValueResolverAware, org.springframework.beans.factory.InitializingBean, org.springframework.web.cors.CorsConfigurationSource {\n\tvoid afterPropertiesSet();\n\t// Deprecated. as of 5.2.4\n\torg.springframework.web.accept.ContentNegotiationManager getContentNegotiationManager();\n}", "des": "HttpRequestHandler that serves static resources in an optimized way according to the guidelines of Page Speed, YSlow, etc."}
{"index": 12609, "repo": "spring-webmvc-6.0.11", "code": "public interface ResourceResolver {\n\t// Resolve the supplied request and request path to a Resource that exists under one of the given resource locations.\n\torg.springframework.core.io.Resource resolveResource(HttpServletRequest request, String requestPath, List<? extends org.springframework.core.io.Resource> locations, ResourceResolverChain chain);\n}", "des": "A strategy for resolving a request to a server-side resource."}
{"index": 12610, "repo": "spring-webmvc-6.0.11", "code": "public interface ResourceResolverChain {\n\t// Resolve the supplied request and request path to a Resource that exists under one of the given resource locations.\n\torg.springframework.core.io.Resource resolveResource(HttpServletRequest request, String requestPath, List<? extends org.springframework.core.io.Resource> locations);\n}", "des": "A contract for invoking a chain of ResourceResolvers where each resolver is given a reference to the chain allowing it to delegate when necessary."}
{"index": 12611, "repo": "spring-webmvc-6.0.11", "code": "public interface ResourceTransformerChain {\n\t// Return the ResourceResolverChain that was used to resolve the Resource being transformed.\n\tResourceResolverChain getResolverChain();\n\t// Transform the given resource.\n\torg.springframework.core.io.Resource transform(HttpServletRequest request, org.springframework.core.io.Resource resource);\n}", "des": "A contract for invoking a chain of ResourceTransformers where each resolver is given a reference to the chain allowing it to delegate when necessary."}
{"index": 12612, "repo": "spring-webmvc-6.0.11", "code": "public abstract class ResourceTransformerSupport extends Object implements ResourceTransformer {\n\t// Return the configured ResourceUrlProvider.\n\tResourceUrlProvider getResourceUrlProvider();\n\t// A transformer can use this method when a resource being transformed contains links to other resources.\n\tprotected String resolveUrlPath(String resourcePath, HttpServletRequest request, org.springframework.core.io.Resource resource, ResourceTransformerChain transformerChain);\n}", "des": "A base class for a ResourceTransformer with an optional helper method for resolving public links within a transformed resource."}
{"index": 12613, "repo": "spring-webmvc-6.0.11", "code": "public interface ResponseBodyAdvice<T> {\n\t// Invoked after an HttpMessageConverter is selected and just before its write method is invoked.\n\tT beforeBodyWrite(T body, org.springframework.core.MethodParameter returnType, org.springframework.http.MediaType selectedContentType, Class<? extends org.springframework.http.converter.HttpMessageConverter<?>> selectedConverterType, org.springframework.http.server.ServerHttpRequest request, org.springframework.http.server.ServerHttpResponse response);\n}", "des": "Allows customizing the response after the execution of an @ResponseBody or a ResponseEntity controller method but before the body is written with an HttpMessageConverter."}
{"index": 12614, "repo": "spring-webmvc-6.0.11", "code": "public class ResponseBodyEmitter extends Object {\n\t// Complete request processing by performing a dispatch into the servlet container, where Spring MVC is invoked once more, and completes the request processing lifecycle.\n\tvoid complete();\n\t// Complete request processing with an error.\n\tvoid completeWithError(Throwable ex);\n}", "des": "A controller method return value type for asynchronous request processing where one or more objects are written to the response."}
{"index": 12615, "repo": "spring-webmvc-6.0.11", "code": "public class ResponseStatusExceptionResolver extends AbstractHandlerExceptionResolver implements org.springframework.context.MessageSourceAware {\n\t// Apply the resolved status code and reason to the response.\n\tprotected ModelAndView applyStatusAndReason(int statusCode, String reason, HttpServletResponse response);\n}", "des": "A HandlerExceptionResolver that uses the @ResponseStatus annotation to map exceptions to HTTP status codes."}
{"index": 12616, "repo": "spring-webmvc-6.0.11", "code": "@FunctionalInterface public interface RouterFunction<T extends ServerResponse> {\n\t// Accept the given visitor.\n\tdefault void accept(RouterFunctions.Visitor visitor);\n\t// Return a composed routing function that first invokes this function, and then invokes the other function (of the same response type T) if this route had no result.\n\tdefault RouterFunction<T> and(RouterFunction<T> other);\n}", "des": "Represents a function that routes to a handler function."}
{"index": 12617, "repo": "spring-webmvc-6.0.11", "code": "public class RouterFunctionMapping extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Look up a handler for the given request, returning null if no specific one is found.\n\tprotected Object getHandlerInternal(HttpServletRequest servletRequest);\n\t// Return the configured RouterFunction.\n\tRouterFunction<?> getRouterFunction();\n}", "des": "HandlerMapping implementation that supports RouterFunctions."}
{"index": 12618, "repo": "spring-webmvc-6.0.11", "code": "public abstract class RouterFunctions extends Object {\n\t// Changes the PathPatternParser on the given router function.\n\tstatic <T extends ServerResponse>RouterFunction<T> changeParser(RouterFunction<T> routerFunction, org.springframework.web.util.pattern.PathPatternParser parser);\n\t// Route to the given router function if the given request predicate applies.\n\tstatic <T extends ServerResponse>RouterFunction<T> nest(RequestPredicate predicate, RouterFunction<T> routerFunction);\n}", "des": "Central entry point to Spring's functional web framework. Exposes routing functionality, such as to create a RouterFunction using a discoverable builder-style API, to create a RouterFunction given a RequestPredicate and HandlerFunction, and to do further subrouting on an existing routing function."}
{"index": 12619, "repo": "spring-webmvc-6.0.11", "code": "public static interface RouterFunctions.Builder {\n\t// Adds the given route to this builder.\n\tRouterFunctions.Builder add(RouterFunction<ServerResponse> routerFunction);\n\t// Filter the response object for all routes created by this builder with the given response processing function.\n\tRouterFunctions.Builder after(BiFunction<ServerRequest,ServerResponse,ServerResponse> responseProcessor);\n}", "des": "Represents a discoverable builder for router functions."}
{"index": 12620, "repo": "spring-webmvc-6.0.11", "code": "public static interface RouterFunctions.Visitor {\n\t// Receive notification of a router function with attributes.\n\tvoid attributes(Map<String,Object> attributes);\n\t// Receive notification of the end of a nested router function.\n\tvoid endNested(RequestPredicate predicate);\n\t// Receive notification of a resource router function.\n\tvoid resources(Function<ServerRequest,Optional<org.springframework.core.io.Resource>> lookupFunction);\n}", "des": "Receives notifications from the logical structure of router functions."}
{"index": 12621, "repo": "spring-webmvc-6.0.11", "code": "public interface ScriptTemplateConfig {\n\t// Return the charset used to read script and template files.\n\tCharset getCharset();\n\t// Return the content type to use for the response.\n\tString getContentType();\n\t// Return the ScriptEngine to use by the views.\n\tScriptEngine getEngine();\n\t// Return the engine name that will be used to instantiate the ScriptEngine.\n\tString getEngineName();\n\t// Return the engine supplier that will be used to instantiate the ScriptEngine.\n\tSupplier<ScriptEngine> getEngineSupplier();\n}", "des": "Interface to be implemented by objects that configure and manage a JSR-223 ScriptEngine for automatic lookup in a web environment."}
{"index": 12622, "repo": "spring-webmvc-6.0.11", "code": "public class ScriptTemplateConfigurer extends Object implements ScriptTemplateConfig {\n\t// Return the charset used to read script and template files.\n\tCharset getCharset();\n\t// Return the content type to use for the response.\n\tString getContentType();\n\t// Return the ScriptEngine to use by the views.\n\tScriptEngine getEngine();\n\t// Return the engine name that will be used to instantiate the ScriptEngine.\n\tString getEngineName();\n}", "des": "An implementation of Spring MVC's ScriptTemplateConfig for creating a ScriptEngine for use in a web application."}
{"index": 12623, "repo": "spring-webmvc-6.0.11", "code": "public class ScriptTemplateViewResolver extends UrlBasedViewResolver {\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Return the required type of view for this resolver.\n\tprotected Class<?> requiredViewClass();\n}", "des": "Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it."}
{"index": 12624, "repo": "spring-webmvc-6.0.11", "code": "public class SelectTag extends AbstractHtmlInputElementTag {\n\t// Closes any block tag that might have been opened when using nested options.\n\tint doEndTag();\n\t// Clears the TagWriter that might have been left over when using nested options.\n\tvoid doFinally();\n\t// Get the value of the 'itemLabel' attribute.\n\tprotected String getItemLabel();\n\t// Get the value of the 'items' attribute.\n\tprotected Object getItems();\n\t// Get the value of the 'itemValue' attribute.\n\tprotected String getItemValue();\n}", "des": "The <select> tag renders an HTML 'select' element."}
{"index": 12625, "repo": "spring-webmvc-6.0.11", "code": "public interface ServerRequest {\n\t// Get the request attribute value if present.\n\tdefault Optional<Object> attribute(String name);\n\t// Get a mutable map of request attributes.\n\tMap<String,Object> attributes();\n\t// Extract the body as an object of the given type.\n\t<T> T body(Class<T> bodyType);\n\t// Extract the body as an object of the given type.\n\t<T> T body(org.springframework.core.ParameterizedTypeReference<T> bodyType);\n}", "des": "Represents a server-side HTTP request, as handled by a HandlerFunction."}
{"index": 12626, "repo": "spring-webmvc-6.0.11", "code": "public static interface ServerRequest.Builder {\n\t// Add an attribute with the given name and value.\n\tServerRequest.Builder attribute(String name, Object value);\n\t// Manipulate this request's attributes with the given consumer.\n\tServerRequest.Builder attributes(Consumer<Map<String,Object>> attributesConsumer);\n\t// Set the body of the request.\n\tServerRequest.Builder body(byte[] body);\n\t// Set the body of the request to the UTF-8 encoded bytes of the given string.\n\tServerRequest.Builder body(String body);\n}", "des": "Defines a builder for a request."}
{"index": 12627, "repo": "spring-webmvc-6.0.11", "code": "public static interface ServerRequest.Headers {\n\t// Get the list of acceptable media types, as specified by the Accept header.\n\tList<org.springframework.http.MediaType> accept();\n\t// Get the list of acceptable charsets, as specified by the Accept-Charset header.\n\tList<Charset> acceptCharset();\n\t// Get the list of acceptable languages, as specified by the Accept-Language header.\n\tList<Locale.LanguageRange> acceptLanguage();\n}", "des": "Represents the headers of the HTTP request."}
{"index": 12628, "repo": "spring-webmvc-6.0.11", "code": "public interface ServerResponse {\n\t// Create a builder with a 202 Accepted status.\n\tstatic ServerResponse.BodyBuilder accepted();\n\t// Create a (built) response with the given asynchronous response.\n\tstatic ServerResponse async(Object asyncResponse);\n\t// Create a (built) response with the given asynchronous response.\n\tstatic ServerResponse async(Object asyncResponse, Duration timeout);\n\t// Create a builder with a 400 Bad Request status.\n\tstatic ServerResponse.BodyBuilder badRequest();\n}", "des": "Represents a typed server-side HTTP response, as returned by a handler function or filter function."}
{"index": 12629, "repo": "spring-webmvc-6.0.11", "code": "public static interface ServerResponse.BodyBuilder extends ServerResponse.HeadersBuilder<ServerResponse.BodyBuilder> {\n\t// Set the body of the response to the given Object and return it.\n\tServerResponse body(Object body);\n\t// Set the body of the response to the given Object and return it.\n\t<T> ServerResponse body(T body, org.springframework.core.ParameterizedTypeReference<T> bodyType);\n}", "des": "Defines a builder that adds a body to the response."}
{"index": 12630, "repo": "spring-webmvc-6.0.11", "code": "public static interface ServerResponse.HeadersBuilder<B extends ServerResponse.HeadersBuilder<B>> {\n\t// Set the set of allowed HTTP methods, as specified by the Allow header.\n\tB allow(Set<org.springframework.http.HttpMethod> allowedMethods);\n\t// Set the set of allowed HTTP methods, as specified by the Allow header.\n\tB allow(org.springframework.http.HttpMethod... allowedMethods);\n\t// Build the response entity with no body.\n\tServerResponse build();\n}", "des": "Defines a builder that adds headers to the response."}
{"index": 12631, "repo": "spring-webmvc-6.0.11", "code": "public static interface ServerResponse.SseBuilder {\n\t// Add an SSE comment.\n\tServerResponse.SseBuilder comment(String comment);\n\t// Completes the event stream.\n\tvoid complete();\n\t// Add an SSE \"data\" line for the given object and sends the built server-sent event to the client.\n\tvoid data(Object object);\n\t// Completes the event stream with the given error.\n\tvoid error(Throwable t);\n\t// Add an SSE \"event\" line.\n\tServerResponse.SseBuilder event(String eventName);\n}", "des": "Defines a builder for a body that sends server-sent events."}
{"index": 12632, "repo": "spring-webmvc-6.0.11", "code": "public class ServletForwardingController extends AbstractController implements org.springframework.beans.factory.BeanNameAware {\n\t// Template method.\n\tprotected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response);\n\tvoid setBeanName(String name);\n\t// Set the name of the servlet to forward to, i.e.\n\tvoid setServletName(String servletName);\n}", "des": "Spring Controller implementation that forwards to a named servlet, i.e."}
{"index": 12633, "repo": "spring-webmvc-6.0.11", "code": "public class ServletInvocableHandlerMethod extends org.springframework.web.method.support.InvocableHandlerMethod {\n\t// Invoke the method and handle the return value through one of the configured HandlerMethodReturnValueHandlers.\n\tvoid invokeAndHandle(org.springframework.web.context.request.ServletWebRequest webRequest, org.springframework.web.method.support.ModelAndViewContainer mavContainer, Object... providedArgs);\n}", "des": "Extends InvocableHandlerMethod with the ability to handle return values through a registered HandlerMethodReturnValueHandler and also supports setting the response status based on a method-level @ResponseStatus annotation."}
{"index": 12634, "repo": "spring-webmvc-6.0.11", "code": "public class ServletModelAttributeMethodProcessor extends org.springframework.web.method.annotation.ModelAttributeMethodProcessor {\n\t// This implementation downcasts WebDataBinder to ServletRequestDataBinder before binding.\n\tprotected void bindRequestParameters(org.springframework.web.bind.WebDataBinder binder, org.springframework.web.context.request.NativeWebRequest request);\n}", "des": "A Servlet-specific ModelAttributeMethodProcessor that applies data binding through a WebDataBinder of type ServletRequestDataBinder."}
{"index": 12635, "repo": "spring-webmvc-6.0.11", "code": "public class ServletUriComponentsBuilder extends org.springframework.web.util.UriComponentsBuilder {\n\tServletUriComponentsBuilder cloneBuilder();\n\t// Prepare a builder from the host, port, scheme, and context path of the given HttpServletRequest.\n\tstatic ServletUriComponentsBuilder fromContextPath(HttpServletRequest request);\n\t// Same as fromContextPath(HttpServletRequest) except the request is obtained through RequestContextHolder.\n\tstatic ServletUriComponentsBuilder fromCurrentContextPath();\n}", "des": "UriComponentsBuilder with additional static factory methods to create links based on the current HttpServletRequest."}
{"index": 12636, "repo": "spring-webmvc-6.0.11", "code": "public class ServletWrappingController extends AbstractController implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\t// Initialize the wrapped Servlet instance.\n\tvoid afterPropertiesSet();\n\t// Destroy the wrapped Servlet instance.\n\tvoid destroy();\n\t// Invoke the wrapped Servlet instance.\n\tprotected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response);\n}", "des": "Spring Controller implementation that wraps a servlet instance which it manages internally."}
{"index": 12637, "repo": "spring-webmvc-6.0.11", "code": "public class SessionFlashMapManager extends AbstractFlashMapManager {\n\t// Exposes the best available session mutex.\n\tprotected Object getFlashMapsMutex(HttpServletRequest request);\n\t// Retrieves saved FlashMap instances from the HTTP session, if any.\n\tprotected List<FlashMap> retrieveFlashMaps(HttpServletRequest request);\n\t// Saves the given FlashMap instances in the HTTP session.\n\tprotected void updateFlashMaps(List<FlashMap> flashMaps, HttpServletRequest request, HttpServletResponse response);\n}", "des": "Store and retrieve FlashMap instances to and from the HTTP session."}
{"index": 12638, "repo": "spring-webmvc-6.0.11", "code": "public class SessionLocaleResolver extends AbstractLocaleContextResolver {\n\t// Deprecated. as of 6.0, in favor of setDefaultLocaleFunction(Function)\n\tprotected Locale determineDefaultLocale(HttpServletRequest request);\n\t// Deprecated. as of 6.0, in favor of setDefaultTimeZoneFunction(Function)\n\tprotected TimeZone determineDefaultTimeZone(HttpServletRequest request);\n}", "des": "LocaleResolver implementation that uses a locale attribute in the user's session in case of a custom setting, with a fallback to the configured default locale, the request's Accept-Language header, or the default locale for the server."}
{"index": 12639, "repo": "spring-webmvc-6.0.11", "code": "public class SimpleControllerHandlerAdapter extends Object implements HandlerAdapter {\n\t// Same contract as for HttpServlet's getLastModified method.\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\t// Use the given handler to handle this request.\n\tModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler);\n\t// Given a handler instance, return whether this HandlerAdapter can support it.\n\tboolean supports(Object handler);\n}", "des": "Adapter to use the plain Controller workflow interface with the generic DispatcherServlet."}
{"index": 12640, "repo": "spring-webmvc-6.0.11", "code": "public class SimpleMappingExceptionResolver extends AbstractHandlerExceptionResolver {\n\t// An alternative to setStatusCodes(Properties) for use with Java-based configuration.\n\tvoid addStatusCode(String viewName, int statusCode);\n\t// Apply the specified HTTP status code to the given response, if possible (that is, if not executing within an include request).\n\tprotected void applyStatusCodeIfPossible(HttpServletRequest request, HttpServletResponse response, int statusCode);\n}", "des": "HandlerExceptionResolver implementation that allows for mapping exception class names to view names, either for a set of given handlers or for all handlers in the DispatcherServlet."}
{"index": 12641, "repo": "spring-webmvc-6.0.11", "code": "public class SimpleServletHandlerAdapter extends Object implements HandlerAdapter {\n\t// Same contract as for HttpServlet's getLastModified method.\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\t// Use the given handler to handle this request.\n\tModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler);\n\t// Given a handler instance, return whether this HandlerAdapter can support it.\n\tboolean supports(Object handler);\n}", "des": "Adapter to use the Servlet interface with the generic DispatcherServlet."}
{"index": 12642, "repo": "spring-webmvc-6.0.11", "code": "public class SimpleUrlHandlerMapping extends AbstractUrlHandlerMapping {\n\t// Allow Map access to the URL path mappings, with the option to add or override specific entries.\n\tMap<String,?> getUrlMap();\n\t// Calls the registerHandlers(java.util.Map<java.lang.String, java.lang.Object>) method in addition to the superclass's initialization.\n\tvoid initApplicationContext();\n\t// Register all handlers specified in the URL map for the corresponding paths.\n\tprotected void registerHandlers(Map<String,Object> urlMap);\n}", "des": "Implementation of the HandlerMapping interface that maps from URLs to request handler beans."}
{"index": 12643, "repo": "spring-webmvc-6.0.11", "code": "public class SseEmitter extends ResponseBodyEmitter {\n\tstatic SseEmitter.SseEventBuilder event();\n\t// Invoked after the response is updated with the status code and headers, if the ResponseBodyEmitter is wrapped in a ResponseEntity, but before the response is committed, i.e.\n\tprotected void extendResponse(org.springframework.http.server.ServerHttpResponse outputMessage);\n\t// Send the object formatted as a single SSE \"data\" line.\n\tvoid send(Object object);\n}", "des": "A specialization of ResponseBodyEmitter for sending Server-Sent Events."}
{"index": 12644, "repo": "spring-webmvc-6.0.11", "code": "public static interface SseEmitter.SseEventBuilder {\n\t// Return one or more Object-MediaType pairs to write via SseEmitter.send(Object, MediaType).\n\tSet<ResponseBodyEmitter.DataWithMediaType> build();\n\t// Add an SSE \"comment\" line.\n\tSseEmitter.SseEventBuilder comment(String comment);\n\t// Add an SSE \"data\" line.\n\tSseEmitter.SseEventBuilder data(Object object);\n\t// Add an SSE \"data\" line.\n\tSseEmitter.SseEventBuilder data(Object object, org.springframework.http.MediaType mediaType);\n}", "des": "A builder for an SSE event."}
{"index": 12645, "repo": "spring-webmvc-6.0.11", "code": "public class TagWriter extends Object {\n\t// Close the current opening tag (if necessary) and appends the supplied value as inner text.\n\tvoid appendValue(String value);\n\t// Close the current tag.\n\tvoid endTag();\n\t// Close the current tag, allowing to enforce a full closing tag.\n\tvoid endTag(boolean enforceClosingTag);\n\t// Indicate that the currently open tag should be closed and marked as a block level element.\n\tvoid forceBlock();\n\t// Start a new tag with the supplied name.\n\tvoid startTag(String tagName);\n}", "des": "Utility class for writing HTML content to a Writer instance."}
{"index": 12646, "repo": "spring-webmvc-6.0.11", "code": "public class TextareaTag extends AbstractHtmlInputElementTag {\n\t// Get the value of the 'cols' attribute.\n\tprotected String getCols();\n\t// Get the value of the 'onselect' attribute.\n\tprotected String getOnselect();\n\t// Get the value of the 'rows' attribute.\n\tprotected String getRows();\n\t// Set the value of the 'cols' attribute.\n\tvoid setCols(String cols);\n\t// Set the value of the 'onselect' attribute.\n\tvoid setOnselect(String onselect);\n}", "des": "The <textarea> tag renders an HTML 'textarea'."}
{"index": 12647, "repo": "spring-webmvc-6.0.11", "code": "public class TransformTag extends HtmlEscapingAwareTag {\n\t// Called by doStartTag to perform the actual work.\n\tprotected final int doStartTagInternal();\n\t// Set the scope to export the variable to.\n\tvoid setScope(String scope);\n\t// Set the value to transform, using the appropriate PropertyEditor from the enclosing BindTag.\n\tvoid setValue(Object value);\n\t// Set PageContext attribute name under which to expose a variable that contains the result of the transformation.\n\tvoid setVar(String var);\n}", "des": "The <transform> tag provides transformation for reference data values from controllers and other objects inside a spring:bind tag (or a data-bound form element tag from Spring's form tag library)."}
{"index": 12648, "repo": "spring-webmvc-6.0.11", "code": "public class UrlBasedViewResolver extends AbstractCachingViewResolver implements org.springframework.core.Ordered {\n\t// Apply the containing ApplicationContext's lifecycle methods to the given View instance, if such a context is available.\n\tprotected View applyLifecycleMethods(String viewName, AbstractUrlBasedView view);\n\t// Creates a new View instance of the specified view class and configures it.\n\tprotected AbstractUrlBasedView buildView(String viewName);\n}", "des": "Simple implementation of the ViewResolver interface, allowing for direct resolution of symbolic view names to URLs, without explicit mapping definitions."}
{"index": 12649, "repo": "spring-webmvc-6.0.11", "code": "public class UrlBasedViewResolverRegistration extends Object {\n\t// Set static attributes to be added to the model of every request for all views resolved by this view resolver.\n\tUrlBasedViewResolverRegistration attributes(Map<String,?> attributes);\n\t// Enable or disable caching.\n\tUrlBasedViewResolverRegistration cache(boolean cache);\n\t// Specify the maximum number of entries for the view cache.\n\tUrlBasedViewResolverRegistration cacheLimit(int cacheLimit);\n\tprotected UrlBasedViewResolver getViewResolver();\n}", "des": "Assist with configuring a UrlBasedViewResolver."}
{"index": 12650, "repo": "spring-webmvc-6.0.11", "code": "public class UrlFilenameViewController extends AbstractUrlViewController {\n\t// Extract a URL path from the given request, suitable for view name extraction.\n\tprotected String extractOperableUrl(HttpServletRequest request);\n\t// Extract the URL filename from the given request URI.\n\tprotected String extractViewNameFromUrlPath(String uri);\n\t// Return the prefix to prepend to the request URL filename.\n\tprotected String getPrefix();\n}", "des": "Simple Controller implementation that transforms the virtual path of a URL into a view name and returns that view."}
{"index": 12651, "repo": "spring-webmvc-6.0.11", "code": "public class UrlTag extends HtmlEscapingAwareTag implements ParamAware {\n\t// Callback hook for nested spring:param tags to pass their value to the parent tag.\n\tvoid addParam(Param param);\n\t// Build the query string from available parameters that have not already been applied as template params.\n\tprotected String createQueryString(List<Param> params, Set<String> usedParams, boolean includeQueryStringDelimiter);\n\tint doEndTag();\n\t// Called by doStartTag to perform the actual work.\n\tint doStartTagInternal();\n}", "des": "The <url> tag creates URLs."}
{"index": 12652, "repo": "spring-webmvc-6.0.11", "code": "public class UserRoleAuthorizationInterceptor extends Object implements HandlerInterceptor {\n\t// Handle a request that is not authorized according to this interceptor.\n\tprotected void handleNotAuthorized(HttpServletRequest request, HttpServletResponse response, Object handler);\n\t// Interception point before the execution of a handler.\n\tfinal boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler);\n}", "des": "Interceptor that checks the authorization of the current user via the user's roles, as evaluated by HttpServletRequest's isUserInRole method."}
{"index": 12653, "repo": "spring-webmvc-6.0.11", "code": "public interface VersionPathStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String requestPath, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "A strategy for extracting and embedding a resource version in its URL path."}
{"index": 12654, "repo": "spring-webmvc-6.0.11", "code": "public class VersionResourceResolver extends AbstractResourceResolver {\n\t// Insert a content-based version in resource URLs that match the given path patterns.\n\tVersionResourceResolver addContentVersionStrategy(String... pathPatterns);\n\t// Insert a fixed, prefix-based version in resource URLs that match the given path patterns, for example: \"{version}/js/main.js\".\n\tVersionResourceResolver addFixedVersionStrategy(String version, String... pathPatterns);\n}", "des": "Resolves request paths containing a version string that can be used as part of an HTTP caching strategy in which a resource is cached with a date in the distant future (e.g."}
{"index": 12655, "repo": "spring-webmvc-6.0.11", "code": "public interface View {\n\t// Return the content type of the view, if predetermined.\n\tdefault String getContentType();\n\t// Render the view given the specified model.\n\tvoid render(Map<String,?> model, HttpServletRequest request, HttpServletResponse response);\n}", "des": "MVC View for a web interaction."}
{"index": 12656, "repo": "spring-webmvc-6.0.11", "code": "public class ViewControllerRegistration extends Object {\n\tprotected String getUrlPath();\n\tprotected ParameterizableViewController getViewController();\n\tprotected void setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\t// Set the status code to set on the response.\n\tViewControllerRegistration setStatusCode(org.springframework.http.HttpStatusCode statusCode);\n\t// Set the view name to return.\n\tvoid setViewName(String viewName);\n}", "des": "Assist with the registration of a single view controller."}
{"index": 12657, "repo": "spring-webmvc-6.0.11", "code": "public class ViewControllerRegistry extends Object {\n\t// Map a view controller to the given URL path or pattern in order to redirect to another URL.\n\tRedirectViewControllerRegistration addRedirectViewController(String urlPath, String redirectUrl);\n\t// Map a simple controller to the given URL path (or pattern) in order to set the response status to the given code without rendering a body.\n\tvoid addStatusController(String urlPath, org.springframework.http.HttpStatusCode statusCode);\n}", "des": "Assists with the registration of simple automated controllers pre-configured with status code and/or a view."}
{"index": 12658, "repo": "spring-webmvc-6.0.11", "code": "public class ViewNameMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler {\n\t// The configured redirect patterns, if any.\n\tString[] getRedirectPatterns();\n\tvoid handleReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType, org.springframework.web.method.support.ModelAndViewContainer mavContainer, org.springframework.web.context.request.NativeWebRequest webRequest);\n}", "des": "Handles return values of types void and String interpreting them as view name reference."}
{"index": 12659, "repo": "spring-webmvc-6.0.11", "code": "public class ViewResolverComposite extends Object implements ViewResolver, org.springframework.core.Ordered, org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationContextAware, org.springframework.web.context.ServletContextAware {\n\tvoid afterPropertiesSet();\n\tint getOrder();\n\t// Return the list of view viewResolvers to delegate to.\n\tList<ViewResolver> getViewResolvers();\n\t// Resolve the given view by name.\n\tView resolveViewName(String viewName, Locale locale);\n}", "des": "A ViewResolver that delegates to others."}
{"index": 12660, "repo": "spring-webmvc-6.0.11", "code": "public class ViewResolverRegistry extends Object {\n\t// Register a bean name view resolver that interprets view names as the names of View beans.\n\tvoid beanName();\n\t// Enable use of a ContentNegotiatingViewResolver to front all other configured view resolvers and select among all selected Views based on media types requested by the client (e.g.\n\tvoid enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews);\n}", "des": "Assist with the configuration of a chain of ViewResolver instances."}
{"index": 12661, "repo": "spring-webmvc-6.0.11", "code": "public abstract class WebContentGenerator extends org.springframework.web.context.support.WebApplicationObjectSupport {\n\t// Set the HTTP Cache-Control header according to the given settings.\n\tprotected final void applyCacheControl(HttpServletResponse response, org.springframework.http.CacheControl cacheControl);\n\t// Apply the given cache seconds and generate corresponding HTTP headers, i.e.\n\tprotected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds);\n}", "des": "Convenient superclass for any kind of web content generator, like AbstractController and WebContentInterceptor."}
{"index": 12662, "repo": "spring-webmvc-6.0.11", "code": "public class WebContentInterceptor extends WebContentGenerator implements HandlerInterceptor {\n\t// Map specific URL paths to a specific CacheControl.\n\tvoid addCacheMapping(org.springframework.http.CacheControl cacheControl, String... paths);\n\t// This implementation is empty.\n\tvoid afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);\n}", "des": "Handler interceptor that checks the request for supported methods and a required session and prepares the response by applying the configured cache settings."}
{"index": 12663, "repo": "spring-webmvc-6.0.11", "code": "public class WebMvcConfigurationSupport extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.web.context.ServletContextAware {\n\t// Add custom HandlerMethodArgumentResolvers to use in addition to the ones registered by default.\n\tprotected void addArgumentResolvers(List<org.springframework.web.method.support.HandlerMethodArgumentResolver> argumentResolvers);\n}", "des": "This is the main class providing the configuration behind the MVC Java config."}
{"index": 12664, "repo": "spring-webmvc-6.0.11", "code": "public interface WebMvcConfigurer {\n\t// Add resolvers to support custom controller method argument types.\n\tdefault void addArgumentResolvers(List<org.springframework.web.method.support.HandlerMethodArgumentResolver> resolvers);\n\t// Configure \"global\" cross-origin request processing.\n\tdefault void addCorsMappings(CorsRegistry registry);\n\t// Add Converters and Formatters in addition to the ones registered by default.\n\tdefault void addFormatters(org.springframework.format.FormatterRegistry registry);\n}", "des": "Defines callback methods to customize the Java-based configuration for Spring MVC enabled via @EnableWebMvc."}
{"index": 12665, "repo": "spring-webmvc-6.0.11", "code": "public class WebRequestHandlerInterceptorAdapter extends Object implements AsyncHandlerInterceptor {\n\t// Callback after completion of request processing, that is, after rendering the view.\n\tvoid afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);\n}", "des": "Adapter that implements the Servlet HandlerInterceptor interface and wraps an underlying WebRequestInterceptor."}
{"index": 12666, "repo": "spring-webmvc-6.0.11", "code": "public class XsltView extends AbstractUrlBasedView {\n\t// Configure the indentation settings for the supplied Transformer.\n\tprotected final void configureIndentation(Transformer transformer);\n\t// Configure the supplied HttpServletResponse.\n\tprotected void configureResponse(Map<String,Object> model, HttpServletResponse response, Transformer transformer);\n}", "des": "XSLT-driven View that allows for response context to be rendered as the result of an XSLT transformation."}
{"index": 12667, "repo": "spring-webmvc-6.0.11", "code": "public class XsltViewResolver extends UrlBasedViewResolver {\n\t// Creates a new View instance of the specified view class and configures it.\n\tprotected AbstractUrlBasedView buildView(String viewName);\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Return the required type of view for this resolver.\n\tprotected Class<?> requiredViewClass();\n\t// Turn on/off the caching of the XSLT templates.\n\tvoid setCacheTemplates(boolean cacheTemplates);\n}", "des": "ViewResolver implementation that resolves instances of XsltView by translating the supplied view name into the URL of the XSLT stylesheet."}
{"index": 12668, "repo": "spring-cloud-config-client-4.0.3", "code": "public static enum ConfigClientProperties.MultipleUriStrategy extends Enum<ConfigClientProperties.MultipleUriStrategy> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic ConfigClientProperties.MultipleUriStrategy valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic ConfigClientProperties.MultipleUriStrategy[] values();\n}", "des": "Enumerates possible strategies to use when multiple URLs are provided and an error occurs."}
{"index": 12669, "repo": "spring-cloud-config-client-4.0.3", "code": "public class Environment extends Object {\n\tvoid add(PropertySource propertySource);\n\tvoid addAll(List<PropertySource> propertySources);\n\tvoid addFirst(PropertySource propertySource);\n\t// Utility method for denormalizing names and labels.\n\tstatic String denormalize(String s);\n\tString getLabel();\n\tString getName();\n\tString[] getProfiles();\n\tList<PropertySource> getPropertySources();\n\tString getState();\n\tString getVersion();\n}", "des": "Simple plain text serializable encapsulation of a list of property sources."}
{"index": 12670, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractFileNameVersionStrategy extends Object implements VersionStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String requestPath, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "Abstract base class for filename suffix based VersionStrategy implementations, e.g."}
{"index": 12671, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractHandlerMapping extends org.springframework.context.support.ApplicationObjectSupport implements HandlerMapping, org.springframework.core.Ordered, org.springframework.beans.factory.BeanNameAware {\n\tprotected String formatMappingName();\n\t// Retrieve the CORS configuration for the given handler.\n\tprotected org.springframework.web.cors.CorsConfiguration getCorsConfiguration(Object handler, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Abstract base class for HandlerMapping implementations."}
{"index": 12672, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean {\n\t// Detects handler methods at initialization.\n\tvoid afterPropertiesSet();\n\t// Create the HandlerMethod instance.\n\tprotected org.springframework.web.method.HandlerMethod createHandlerMethod(Object handler, Method method);\n\t// Look for handler methods in a handler.\n\tprotected void detectHandlerMethods(Object handler);\n}", "des": "Abstract base class for HandlerMapping implementations that define a mapping between a request and a HandlerMethod."}
{"index": 12673, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractListenerWebSocketSession<T> extends AbstractWebSocketSession<T> implements Subscriber<Void> {\n\t// Whether the underlying WebSocket API has flow control and can suspend and resume the receiving of messages.\n\tprotected abstract boolean canSuspendReceiving();\n\t// Provides access to the CloseStatus with which the session is closed either locally or remotely, or completes empty if the session ended without a status.\n\treactor.core.publisher.Mono<CloseStatus> closeStatus();\n}", "des": "Base class for WebSocketSession implementations that bridge between event-listener WebSocket APIs (e.g."}
{"index": 12674, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractMessageReaderArgumentResolver extends HandlerMethodArgumentResolverSupport {\n\t// Return the configured message converters.\n\tList<org.springframework.http.codec.HttpMessageReader<?>> getMessageReaders();\n}", "des": "Abstract base class for argument resolvers that resolve method arguments by reading the request body with an HttpMessageReader."}
{"index": 12675, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractMessageWriterResultHandler extends HandlerResultHandlerSupport {\n\t// Return the configured message converters.\n\tList<org.springframework.http.codec.HttpMessageWriter<?>> getMessageWriters();\n}", "des": "Abstract base class for result handlers that handle return values by writing to the response with HttpMessageWriter."}
{"index": 12676, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractNamedValueArgumentResolver extends HandlerMethodArgumentResolverSupport {\n\t// Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected abstract AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter);\n}", "des": "Abstract base class for resolving method arguments from a named value."}
{"index": 12677, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractNamedValueSyncArgumentResolver extends AbstractNamedValueArgumentResolver implements SyncHandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "An extension of AbstractNamedValueArgumentResolver for named value resolvers that are synchronous and yet non-blocking."}
{"index": 12678, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractPrefixVersionStrategy extends Object implements VersionStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String path, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "Abstract base class for VersionStrategy implementations that insert a prefix into the URL path, e.g."}
{"index": 12679, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> extends Object implements RequestCondition<T> {\n\tboolean equals(Object other);\n\t// Return the discrete items a request condition is composed of.\n\tprotected abstract Collection<?> getContent();\n\t// The notation to use when printing discrete items of content.\n\tprotected abstract String getToStringInfix();\n\t// Indicates whether this condition is empty, i.e.\n\tboolean isEmpty();\n}", "des": "A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString()."}
{"index": 12680, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractUrlBasedView extends AbstractView implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Check whether the resource for the configured URL actually exists.\n\tabstract boolean checkResourceExists(Locale locale);\n\t// Return the URL of the resource that this view wraps.\n\tString getUrl();\n\t// Set the URL of the resource that this view wraps.\n\tvoid setUrl(String url);\n}", "des": "Abstract base class for URL-based views."}
{"index": 12681, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping {\n\t// Look up a handler for the given request, returning an empty Mono if no specific one is found.\n\treactor.core.publisher.Mono<Object> getHandlerInternal(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Abstract base class for URL-mapped HandlerMapping implementations."}
{"index": 12682, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractView extends Object implements View, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware {\n\t// Create a RequestContext to expose under the specified attribute name.\n\tprotected RequestContext createRequestContext(org.springframework.web.server.ServerWebExchange exchange, Map<String,Object> model);\n\tprotected String formatViewName();\n\torg.springframework.context.ApplicationContext getApplicationContext();\n}", "des": "Base class for View implementations."}
{"index": 12683, "repo": "spring-webflux-6.0.11", "code": "public abstract class AbstractWebSocketSession<T> extends Object implements WebSocketSession {\n\t// Factory method to create a binary WebSocketMessage using the WebSocketSession.bufferFactory() for the session.\n\tWebSocketMessage binaryMessage(Function<org.springframework.core.io.buffer.DataBufferFactory,org.springframework.core.io.buffer.DataBuffer> payloadFactory);\n\t// Return a DataBuffer Factory to create message payloads.\n\torg.springframework.core.io.buffer.DataBufferFactory bufferFactory();\n}", "des": "Convenient base class for WebSocketSession implementations that holds common fields and exposes accessors."}
{"index": 12684, "repo": "spring-webflux-6.0.11", "code": "public class BindingContext extends Object {\n\t// Create a WebExchangeDataBinder to apply data binding and validation with on the target, command object.\n\torg.springframework.web.bind.support.WebExchangeDataBinder createDataBinder(org.springframework.web.server.ServerWebExchange exchange, Object target, String name);\n}", "des": "Context to assist with binding request data onto Objects and provide access to a shared Model with controller-specific attributes."}
{"index": 12685, "repo": "spring-webflux-6.0.11", "code": "public class BindStatus extends Object {\n\t// Find a PropertyEditor for the given value class, associated with the property that this bound status is currently bound to.\n\tPropertyEditor findEditor(Class<?> valueClass);\n\t// Return the actual value of the field, i.e.\n\tObject getActualValue();\n\t// Return a suitable display value for the field, i.e.\n\tString getDisplayValue();\n\t// Return the PropertyEditor for the property that this bind status is currently bound to.\n\tPropertyEditor getEditor();\n}", "des": "Simple adapter to expose the bind status of a field or object."}
{"index": 12686, "repo": "spring-webflux-6.0.11", "code": "public static interface BodyExtractor.Context {\n\t// Return the map of hints to use to customize body extraction.\n\tMap<String,Object> hints();\n\t// Return the HttpMessageReaders to be used for body extraction.\n\tList<org.springframework.http.codec.HttpMessageReader<?>> messageReaders();\n\t// Optionally return the ServerHttpResponse, if present.\n\tOptional<org.springframework.http.server.reactive.ServerHttpResponse> serverResponse();\n}", "des": "Defines the context used during the extraction."}
{"index": 12687, "repo": "spring-webflux-6.0.11", "code": "public abstract class BodyExtractors extends Object {\n\t// Extractor that returns the raw DataBuffers.\n\tstatic BodyExtractor<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>,org.springframework.http.ReactiveHttpInputMessage> toDataBuffers();\n\t// Extractor to decode the input content into Flux<T>.\n\tstatic <T> BodyExtractor<reactor.core.publisher.Flux<T>,org.springframework.http.ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);\n}", "des": "Static factory methods for BodyExtractor implementations."}
{"index": 12688, "repo": "spring-webflux-6.0.11", "code": "public static interface BodyInserter.Context {\n\t// Return the map of hints to use for response body conversion.\n\tMap<String,Object> hints();\n\t// Return the HttpMessageWriters to be used for response body conversion.\n\tList<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters();\n\t// Optionally return the ServerHttpRequest, if present.\n\tOptional<org.springframework.http.server.reactive.ServerHttpRequest> serverRequest();\n}", "des": "Defines the context used during the insertion."}
{"index": 12689, "repo": "spring-webflux-6.0.11", "code": "public abstract class BodyInserters extends Object {\n\t// Inserter that does not write.\n\tstatic <T> BodyInserter<T,org.springframework.http.ReactiveHttpOutputMessage> empty();\n\t// Inserter to write the given Publisher<DataBuffer> to the body.\n\tstatic <T extends Publisher<org.springframework.core.io.buffer.DataBuffer>>BodyInserter<T,org.springframework.http.ReactiveHttpOutputMessage> fromDataBuffers(T publisher);\n}", "des": "Static factory methods for BodyInserter implementations."}
{"index": 12690, "repo": "spring-webflux-6.0.11", "code": "public static interface BodyInserters.FormInserter<T> extends BodyInserter<org.springframework.util.MultiValueMap<String,T>,org.springframework.http.client.reactive.ClientHttpRequest> {\n\t// Adds the specified key-value pair to the form.\n\tBodyInserters.FormInserter<T> with(String key, T value);\n\t// Adds the specified values to the form.\n\tBodyInserters.FormInserter<T> with(org.springframework.util.MultiValueMap<String,T> values);\n}", "des": "Extension of BodyInserter that allows for adding form data or multipart form data."}
{"index": 12691, "repo": "spring-webflux-6.0.11", "code": "public static interface BodyInserters.MultipartInserter extends BodyInserters.FormInserter<Object> {\n\t// Add an asynchronous part with Publisher-based content.\n\t<T, P extends Publisher<T>>BodyInserters.MultipartInserter withPublisher(String name, P publisher, Class<T> elementClass);\n}", "des": "Extension of BodyInserters.FormInserter that allows for adding asynchronous parts."}
{"index": 12692, "repo": "spring-webflux-6.0.11", "code": "public class CachingResourceResolver extends AbstractResourceResolver {\n\tprotected String computeKey(org.springframework.web.server.ServerWebExchange exchange, String requestPath);\n\t// Return the configured Cache.\n\torg.springframework.cache.Cache getCache();\n\t// Return a read-only list with the supported content codings.\n\tList<String> getContentCodings();\n}", "des": "A ResourceResolver that resolves resources from a Cache or otherwise delegates to the resolver chain and caches the result."}
{"index": 12693, "repo": "spring-webflux-6.0.11", "code": "public class CachingResourceTransformer extends Object implements ResourceTransformer {\n\t// Return the configured Cache.\n\torg.springframework.cache.Cache getCache();\n\t// Transform the given resource.\n\treactor.core.publisher.Mono<org.springframework.core.io.Resource> transform(org.springframework.web.server.ServerWebExchange exchange, org.springframework.core.io.Resource resource, ResourceTransformerChain transformerChain);\n}", "des": "A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, or otherwise delegates to the resolver chain and caches the result."}
{"index": 12694, "repo": "spring-webflux-6.0.11", "code": "public enum ClientHttpObservationDocumentation extends Enum<ClientHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClientHttpObservationDocumentation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClientHttpObservationDocumentation[] values();\n}", "des": "Documented KeyValues for the HTTP client observations."}
{"index": 12695, "repo": "spring-webflux-6.0.11", "code": "public interface ClientRequest {\n\t// Return the request attribute value if present.\n\tdefault Optional<Object> attribute(String name);\n\t// Return the attributes of this request.\n\tMap<String,Object> attributes();\n\t// Return the body inserter of this request.\n\tBodyInserter<?,? super org.springframework.http.client.reactive.ClientHttpRequest> body();\n\t// Return the cookies of this request.\n\torg.springframework.util.MultiValueMap<String,String> cookies();\n}", "des": "Represents a typed, immutable, client-side HTTP request, as executed by the ExchangeFunction."}
{"index": 12696, "repo": "spring-webflux-6.0.11", "code": "public static interface ClientRequest.Builder {\n\t// Set the attribute with the given name to the given value.\n\tClientRequest.Builder attribute(String name, Object value);\n\t// Manipulate the request attributes with the given consumer.\n\tClientRequest.Builder attributes(Consumer<Map<String,Object>> attributesConsumer);\n\t// Set the body of the request to the given BodyInserter.\n\tClientRequest.Builder body(BodyInserter<?,? super org.springframework.http.client.reactive.ClientHttpRequest> inserter);\n}", "des": "Defines a builder for a request."}
{"index": 12697, "repo": "spring-webflux-6.0.11", "code": "public class ClientRequestObservationContext extends io.micrometer.observation.transport.RequestReplySenderContext<ClientRequest.Builder,ClientResponse> {\n\t// Return the immutable client request.\n\tClientRequest getRequest();\n\t// Return the URI template used for the current client exchange, null if none was used.\n\tString getUriTemplate();\n\t// Whether the client aborted the current HTTP exchange before receiving any response.\n\tboolean isAborted();\n}", "des": "Context that holds information for metadata collection during the HTTP client exchange observations."}
{"index": 12698, "repo": "spring-webflux-6.0.11", "code": "public interface ClientResponse {\n\t// Extract the body with the given BodyExtractor.\n\t<T> T body(BodyExtractor<T,? super org.springframework.http.client.reactive.ClientHttpResponse> extractor);\n\t// Extract the body to a Flux.\n\t<T> reactor.core.publisher.Flux<T> bodyToFlux(Class<? extends T> elementClass);\n\t// Extract the body to a Flux.\n\t<T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.core.ParameterizedTypeReference<T> elementTypeRef);\n}", "des": "Represents an HTTP response, as returned by WebClient and also ExchangeFunction."}
{"index": 12699, "repo": "spring-webflux-6.0.11", "code": "public static interface ClientResponse.Builder {\n\t// Set the body of the response to the UTF-8 encoded bytes of the given string.\n\tClientResponse.Builder body(String body);\n\t// Transform the response body, if set in the builder.\n\tClientResponse.Builder body(Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>,reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>> transformer);\n}", "des": "Defines a builder for a response."}
{"index": 12700, "repo": "spring-webflux-6.0.11", "code": "public static interface ClientResponse.Headers {\n\t// Return the headers as an HttpHeaders instance.\n\torg.springframework.http.HttpHeaders asHttpHeaders();\n\t// Return the length of the body in bytes, as specified by the Content-Length header.\n\tOptionalLong contentLength();\n\t// Return the media type of the body, as specified by the Content-Type header.\n\tOptional<org.springframework.http.MediaType> contentType();\n}", "des": "Represents the headers of the HTTP response."}
{"index": 12701, "repo": "spring-webflux-6.0.11", "code": "public class ClientResponseWrapper extends Object implements ClientResponse {\n\t// Extract the body with the given BodyExtractor.\n\t<T> T body(BodyExtractor<T,? super org.springframework.http.client.reactive.ClientHttpResponse> extractor);\n\t// Extract the body to a Flux.\n\t<T> reactor.core.publisher.Flux<T> bodyToFlux(Class<? extends T> elementClass);\n\t// Extract the body to a Flux.\n\t<T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.core.ParameterizedTypeReference<T> elementTypeRef);\n}", "des": "Implementation of the ClientResponse interface that can be subclassed to adapt the request in a exchange filter function."}
{"index": 12702, "repo": "spring-webflux-6.0.11", "code": "public static class ClientResponseWrapper.HeadersWrapper extends Object implements ClientResponse.Headers {\n\t// Return the headers as an HttpHeaders instance.\n\torg.springframework.http.HttpHeaders asHttpHeaders();\n\t// Return the length of the body in bytes, as specified by the Content-Length header.\n\tOptionalLong contentLength();\n\t// Return the media type of the body, as specified by the Content-Type header.\n\tOptional<org.springframework.http.MediaType> contentType();\n}", "des": "Implementation of the Headers interface that can be subclassed to adapt the headers in a exchange filter function."}
{"index": 12703, "repo": "spring-webflux-6.0.11", "code": "public final class CloseStatus extends Object {\n\t// Return a constant for the given code, or create a new instance if the code does not match or there is a reason.\n\tstatic CloseStatus create(int code, String reason);\n\tboolean equals(Object other);\n\t// Deprecated. as of 5.3 in favor of comparing codes directly\n\tboolean equalsCode(CloseStatus other);\n\t// Return the status code.\n\tint getCode();\n\t// Return the reason, or null if none.\n\tString getReason();\n}", "des": "Representation of WebSocket \"close\" status codes and reasons."}
{"index": 12704, "repo": "spring-webflux-6.0.11", "code": "public class CompositeRequestCondition extends AbstractRequestCondition<CompositeRequestCondition> {\n\t// If one instance is empty, return the other.\n\tCompositeRequestCondition combine(CompositeRequestCondition other);\n\t// If one instance is empty, the other \"wins\".\n\tint compareTo(CompositeRequestCondition other, org.springframework.web.server.ServerWebExchange exchange);\n\t// Return the underlying conditions, possibly empty but never null.\n\tList<RequestCondition<?>> getConditions();\n}", "des": "Implements the RequestCondition contract by delegating to multiple RequestCondition types and using a logical conjunction (' && ') to ensure all conditions match a given request."}
{"index": 12705, "repo": "spring-webflux-6.0.11", "code": "public final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition> {\n\t// Returns the \"other\" instance if it has any expressions; returns \"this\" instance otherwise.\n\tConsumesRequestCondition combine(ConsumesRequestCondition other);\n}", "des": "A logical disjunction (' || ') request condition to match a request's 'Content-Type' header to a list of media type expressions."}
{"index": 12706, "repo": "spring-webflux-6.0.11", "code": "public final class ContextWebSocketHandler extends Object implements WebSocketHandler {\n\t// Return the given handler, decorated to insert the given context, or the same handler instance when the context is empty.\n\tstatic WebSocketHandler decorate(WebSocketHandler handler, reactor.util.context.ContextView contextView);\n\t// Return the list of sub-protocols supported by this handler.\n\tList<String> getSubProtocols();\n}", "des": "WebSocketHandler decorator that enriches the context of the target handler."}
{"index": 12707, "repo": "spring-webflux-6.0.11", "code": "public class ContinuationHandlerMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "No-op resolver for method arguments of type Continuation."}
{"index": 12708, "repo": "spring-webflux-6.0.11", "code": "public class CookieValueMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver {\n\t// Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolve method arguments annotated with @CookieValue."}
{"index": 12709, "repo": "spring-webflux-6.0.11", "code": "public class CorsRegistration extends Object {\n\t// Whether the browser should send credentials, such as cookies along with cross domain requests, to the annotated endpoint.\n\tCorsRegistration allowCredentials(boolean allowCredentials);\n\t// Set the list of headers that a pre-flight request can list as allowed for use during an actual request.\n\tCorsRegistration allowedHeaders(String... headers);\n\t// Set the HTTP methods to allow, e.g.\n\tCorsRegistration allowedMethods(String... methods);\n}", "des": "Assists with the creation of a CorsConfiguration instance for a given URL path pattern."}
{"index": 12710, "repo": "spring-webflux-6.0.11", "code": "public class CorsRegistry extends Object {\n\t// Enable cross-origin request handling for the specified path pattern.\n\tCorsRegistration addMapping(String pathPattern);\n\t// Return the registered CorsConfiguration objects, keyed by path pattern.\n\tprotected Map<String,org.springframework.web.cors.CorsConfiguration> getCorsConfigurations();\n}", "des": "Assists with the registration of global, URL pattern based CorsConfiguration mappings."}
{"index": 12711, "repo": "spring-webflux-6.0.11", "code": "@Configuration(proxyBeanMethods=false) public class DelegatingWebFluxConfiguration extends WebFluxConfigurationSupport {\n\t// Override this method to configure cross-origin requests processing.\n\tprotected void addCorsMappings(CorsRegistry registry);\n\t// Override this method to add custom Converter and/or Formatter delegates to the common FormattingConversionService.\n\tprotected void addFormatters(org.springframework.format.FormatterRegistry registry);\n}", "des": "A subclass of WebFluxConfigurationSupport that detects and delegates to all beans of type WebFluxConfigurer allowing them to customize the configuration provided by WebFluxConfigurationSupport."}
{"index": 12712, "repo": "spring-webflux-6.0.11", "code": "public class EncodedResourceResolver extends AbstractResourceResolver {\n\t// Return a read-only list with the supported content codings.\n\tList<String> getContentCodings();\n\t// Return a read-only map with coding-to-extension mappings.\n\tMap<String,String> getExtensions();\n\t// Java config friendly alternative to setExtensions(Map).\n\tvoid registerExtension(String coding, String extension);\n}", "des": "Resolver that delegates to the chain, and if a resource is found, it then attempts to find an encoded (e.g."}
{"index": 12713, "repo": "spring-webflux-6.0.11", "code": "public interface EntityResponse<T> extends ServerResponse {\n\t// Return the entity that makes up this response.\n\tT entity();\n\t// Create a builder with the given object.\n\tstatic <T> EntityResponse.Builder<T> fromObject(T body);\n\t// Create a builder with the given producer.\n\tstatic <T> EntityResponse.Builder<T> fromProducer(T producer, Class<?> elementClass);\n}", "des": "Entity-specific subtype of ServerResponse that exposes entity data."}
{"index": 12714, "repo": "spring-webflux-6.0.11", "code": "public static interface EntityResponse.Builder<T> {\n\t// Set the set of allowed HTTP methods, as specified by the Allow header.\n\tEntityResponse.Builder<T> allow(Set<org.springframework.http.HttpMethod> allowedMethods);\n\t// Set the set of allowed HTTP methods, as specified by the Allow header.\n\tEntityResponse.Builder<T> allow(org.springframework.http.HttpMethod... allowedMethods);\n\t// Build the response.\n\treactor.core.publisher.Mono<EntityResponse<T>> build();\n}", "des": "Defines a builder for EntityResponse."}
{"index": 12715, "repo": "spring-webflux-6.0.11", "code": "public class ErrorsMethodArgumentResolver extends HandlerMethodArgumentResolverSupport {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolve Errors or BindingResult method arguments."}
{"index": 12716, "repo": "spring-webflux-6.0.11", "code": "@FunctionalInterface public interface ExchangeFilterFunction {\n\t// Return a composed filter function that first applies this filter and then applies the given afterFilter.\n\tdefault ExchangeFilterFunction andThen(ExchangeFilterFunction afterFilter);\n\t// Apply this filter to the given ExchangeFunction, resulting in a filtered exchange function.\n\tdefault ExchangeFunction apply(ExchangeFunction exchange);\n}", "des": "Represents a function that filters an exchange function."}
{"index": 12717, "repo": "spring-webflux-6.0.11", "code": "public abstract class ExchangeFilterFunctions extends Object {\n\t// Deprecated. as of Spring 5.1 in favor of using HttpHeaders.setBasicAuth(String, String) while building the request.\n\tstatic ExchangeFilterFunction basicAuthentication();\n\t// Return a filter that applies HTTP Basic Authentication to the request headers via HttpHeaders.setBasicAuth(String) and HttpHeaders.encodeBasicAuth(String, String, Charset).\n\tstatic ExchangeFilterFunction basicAuthentication(String username, String password);\n}", "des": "Static factory methods providing access to built-in implementations of ExchangeFilterFunction for basic authentication, error handling, etc."}
{"index": 12718, "repo": "spring-webflux-6.0.11", "code": "@FunctionalInterface public interface ExchangeFunction {\n\t// Exchange the given request for a ClientResponse promise.\n\treactor.core.publisher.Mono<ClientResponse> exchange(ClientRequest request);\n\t// Filter the exchange function with the given ExchangeFilterFunction, resulting in a filtered ExchangeFunction.\n\tdefault ExchangeFunction filter(ExchangeFilterFunction filter);\n}", "des": "Represents a function that exchanges a request for a (delayed) ClientResponse."}
{"index": 12719, "repo": "spring-webflux-6.0.11", "code": "public abstract class ExchangeFunctions extends Object {\n\t// Create an ExchangeFunction with the given ClientHttpConnector.\n\tstatic ExchangeFunction create(org.springframework.http.client.reactive.ClientHttpConnector connector);\n\t// Create an ExchangeFunction with the given ClientHttpConnector and ExchangeStrategies.\n\tstatic ExchangeFunction create(org.springframework.http.client.reactive.ClientHttpConnector connector, ExchangeStrategies strategies);\n}", "des": "Static factory methods to create an ExchangeFunction."}
{"index": 12720, "repo": "spring-webflux-6.0.11", "code": "public interface ExchangeStrategies {\n\t// Return a builder pre-configured with default configuration to start.\n\tstatic ExchangeStrategies.Builder builder();\n\t// Return a builder with empty configuration to start.\n\tstatic ExchangeStrategies.Builder empty();\n\t// Return HttpMessageReaders to read and decode the response body with.\n\tList<org.springframework.http.codec.HttpMessageReader<?>> messageReaders();\n}", "des": "Provides strategies for use in an ExchangeFunction."}
{"index": 12721, "repo": "spring-webflux-6.0.11", "code": "public static interface ExchangeStrategies.Builder {\n\t// Builds the ExchangeStrategies.\n\tExchangeStrategies build();\n\t// Customize the list of client-side HTTP message readers and writers.\n\tExchangeStrategies.Builder codecs(Consumer<org.springframework.http.codec.ClientCodecConfigurer> consumer);\n}", "des": "A mutable builder for an ExchangeStrategies."}
{"index": 12722, "repo": "spring-webflux-6.0.11", "code": "public class ExpressionValueMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver {\n\t// Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method arguments annotated with @Value."}
{"index": 12723, "repo": "spring-webflux-6.0.11", "code": "public class FixedContentTypeResolver extends Object implements RequestedContentTypeResolver {\n\t// Return the configured list of media types.\n\tList<org.springframework.http.MediaType> getContentTypes();\n\t// Resolve the given request to a list of requested media types.\n\tList<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Resolver that always resolves to a fixed list of media types."}
{"index": 12724, "repo": "spring-webflux-6.0.11", "code": "public class FreeMarkerConfigurer extends org.springframework.ui.freemarker.FreeMarkerConfigurationFactory implements FreeMarkerConfig, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware {\n\t// Initialize FreeMarkerConfigurationFactory's Configuration if not overridden by a pre-configured FreeMarker Configuration.\n\tvoid afterPropertiesSet();\n\t// Return the Configuration object wrapped by this bean.\n\tfreemarker.template.Configuration getConfiguration();\n}", "des": "Configures FreeMarker for web usage via the \"configLocation\" and/or \"freemarkerSettings\" and/or \"templateLoaderPath\" properties."}
{"index": 12725, "repo": "spring-webflux-6.0.11", "code": "public class FreeMarkerView extends AbstractUrlBasedView {\n\tvoid afterPropertiesSet();\n\t// Autodetect a FreeMarkerConfig object in the ApplicationContext.\n\tprotected FreeMarkerConfig autodetectConfiguration();\n\t// Check that the FreeMarker template used for this view exists and is valid.\n\tboolean checkResourceExists(Locale locale);\n\t// Get the FreeMarker Configuration used by this view.\n\tprotected freemarker.template.Configuration getConfiguration();\n}", "des": "A View implementation that uses the FreeMarker template engine."}
{"index": 12726, "repo": "spring-webflux-6.0.11", "code": "public class FreeMarkerViewResolver extends UrlBasedViewResolver {\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Requires FreeMarkerView.\n\tprotected Class<?> requiredViewClass();\n}", "des": "A ViewResolver for resolving FreeMarkerView instances, i.e."}
{"index": 12727, "repo": "spring-webflux-6.0.11", "code": "public interface HandlerAdapter {\n\t// Handle the request with the given handler, previously checked via supports(Object).\n\treactor.core.publisher.Mono<HandlerResult> handle(org.springframework.web.server.ServerWebExchange exchange, Object handler);\n\t// Whether this HandlerAdapter supports the given handler.\n\tboolean supports(Object handler);\n}", "des": "Contract to abstract the details of invoking a handler of a given type."}
{"index": 12728, "repo": "spring-webflux-6.0.11", "code": "@FunctionalInterface public interface HandlerFilterFunction<T extends ServerResponse,R extends ServerResponse> {\n\t// Return a composed filter function that first applies this filter, and then applies the after filter.\n\tdefault HandlerFilterFunction<T,R> andThen(HandlerFilterFunction<T,T> after);\n\t// Apply this filter to the given handler function, resulting in a filtered handler function.\n\tdefault HandlerFunction<R> apply(HandlerFunction<T> handler);\n}", "des": "Represents a function that filters a handler function."}
{"index": 12729, "repo": "spring-webflux-6.0.11", "code": "public class HandlerFunctionAdapter extends Object implements HandlerAdapter {\n\t// Handle the request with the given handler, previously checked via HandlerAdapter.supports(Object).\n\treactor.core.publisher.Mono<HandlerResult> handle(org.springframework.web.server.ServerWebExchange exchange, Object handler);\n\t// Whether this HandlerAdapter supports the given handler.\n\tboolean supports(Object handler);\n}", "des": "HandlerAdapter implementation that supports HandlerFunctions."}
{"index": 12730, "repo": "spring-webflux-6.0.11", "code": "public interface HandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Strategy to resolve the argument value for a method parameter in the context of the current HTTP request."}
{"index": 12731, "repo": "spring-webflux-6.0.11", "code": "public class HandlerResult extends Object {\n\t// Deprecated, for removal: This API element is subject to removal in a future version. without a replacement; for internal invocation only, not used as of 6.0\n\treactor.core.publisher.Mono<HandlerResult> applyExceptionHandler(Throwable failure);\n\t// Return the BindingContext used for request handling.\n\tBindingContext getBindingContext();\n\t// Return the configured exception handler.\n\tDispatchExceptionHandler getExceptionHandler();\n}", "des": "Represent the result of the invocation of a handler or a handler method."}
{"index": 12732, "repo": "spring-webflux-6.0.11", "code": "public interface HandlerResultHandler {\n\t// Process the given result modifying response headers and/or writing data to the response.\n\treactor.core.publisher.Mono<Void> handleResult(org.springframework.web.server.ServerWebExchange exchange, HandlerResult result);\n\t// Whether this handler supports the given HandlerResult.\n\tboolean supports(HandlerResult result);\n}", "des": "Process the HandlerResult, usually returned by a HandlerAdapter."}
{"index": 12733, "repo": "spring-webflux-6.0.11", "code": "public abstract class HandlerResultHandlerSupport extends Object implements org.springframework.core.Ordered {\n\t// Get a ReactiveAdapter for the top-level return value type.\n\tprotected org.springframework.core.ReactiveAdapter getAdapter(HandlerResult result);\n\t// Return the configured ReactiveAdapterRegistry.\n\torg.springframework.core.ReactiveAdapterRegistry getAdapterRegistry();\n\t// Return the configured RequestedContentTypeResolver.\n\tRequestedContentTypeResolver getContentTypeResolver();\n}", "des": "Base class for HandlerResultHandler with support for content negotiation and access to a ReactiveAdapter registry."}
{"index": 12734, "repo": "spring-webflux-6.0.11", "code": "public interface HandlerStrategies {\n\t// Return a mutable builder for a HandlerStrategies with default initialization.\n\tstatic HandlerStrategies.Builder builder();\n\t// Return a mutable, empty builder for a HandlerStrategies.\n\tstatic HandlerStrategies.Builder empty();\n\t// Return the WebExceptionHandlers to be used for handling exceptions.\n\tList<org.springframework.web.server.WebExceptionHandler> exceptionHandlers();\n}", "des": "Defines the strategies to be used for processing HandlerFunctions."}
{"index": 12735, "repo": "spring-webflux-6.0.11", "code": "public static interface HandlerStrategies.Builder {\n\t// Builds the HandlerStrategies.\n\tHandlerStrategies build();\n\t// Customize the list of server-side HTTP message readers and writers.\n\tHandlerStrategies.Builder codecs(Consumer<org.springframework.http.codec.ServerCodecConfigurer> consumer);\n\t// Add the given exception handler to this builder.\n\tHandlerStrategies.Builder exceptionHandler(org.springframework.web.server.WebExceptionHandler exceptionHandler);\n}", "des": "A mutable builder for a HandlerStrategies."}
{"index": 12736, "repo": "spring-webflux-6.0.11", "code": "public class HandshakeInfo extends Object {\n\t// Attributes extracted from the handshake request to add to the session.\n\tMap<String,Object> getAttributes();\n\t// For a server session this returns the server request cookies from the handshake request.\n\torg.springframework.util.MultiValueMap<String,org.springframework.http.HttpCookie> getCookies();\n}", "des": "Simple container of information related to the handshake request that started the WebSocketSession session."}
{"index": 12737, "repo": "spring-webflux-6.0.11", "code": "public class HandshakeWebSocketService extends Object implements WebSocketService, org.springframework.context.Lifecycle {\n\tprotected void doStart();\n\tprotected void doStop();\n\t// Return the configured predicate for initialization WebSocket session attributes from WebSession attributes.\n\tPredicate<String> getSessionAttributePredicate();\n\t// Return the RequestUpgradeStrategy for WebSocket requests.\n\tRequestUpgradeStrategy getUpgradeStrategy();\n}", "des": "WebSocketService implementation that handles a WebSocket HTTP handshake request by delegating to a RequestUpgradeStrategy which is either auto-detected (no-arg constructor) from the classpath but can also be explicitly configured."}
{"index": 12738, "repo": "spring-webflux-6.0.11", "code": "public final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition> {\n\t// Returns a new instance with the union of the header expressions from \"this\" and the \"other\" instance.\n\tHeadersRequestCondition combine(HeadersRequestCondition other);\n\t// Compare to another condition based on header expressions.\n\tint compareTo(HeadersRequestCondition other, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "A logical conjunction (' && ') request condition that matches a request against a set of header expressions with syntax defined in RequestMapping.headers()."}
{"index": 12739, "repo": "spring-webflux-6.0.11", "code": "public class HttpEntityMethodArgumentResolver extends AbstractMessageReaderArgumentResolver {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method arguments of type HttpEntity or RequestEntity by reading the body of the request through a compatible HttpMessageReader."}
{"index": 12740, "repo": "spring-webflux-6.0.11", "code": "public class HttpMessageWriterView extends Object implements View {\n\t// Return the configured message writer.\n\torg.springframework.http.codec.HttpMessageWriter<?> getMessageWriter();\n\t// Return the configured model keys.\n\tfinal Set<String> getModelKeys();\n\t// Return the list of media types this View supports, or an empty list.\n\tList<org.springframework.http.MediaType> getSupportedMediaTypes();\n}", "des": "View that writes model attribute(s) with an HttpMessageWriter."}
{"index": 12741, "repo": "spring-webflux-6.0.11", "code": "public class InvocableHandlerMethod extends org.springframework.web.method.HandlerMethod {\n\t// Return the configured parameter name discoverer.\n\torg.springframework.core.ParameterNameDiscoverer getParameterNameDiscoverer();\n\t// Return the configured argument resolvers.\n\tList<HandlerMethodArgumentResolver> getResolvers();\n}", "des": "Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver."}
{"index": 12742, "repo": "spring-webflux-6.0.11", "code": "public class JettyWebSocketSession extends AbstractListenerWebSocketSession<org.eclipse.jetty.websocket.api.Session> {\n\t// Whether the underlying WebSocket API has flow control and can suspend and resume the receiving of messages.\n\tprotected boolean canSuspendReceiving();\n\t// Close the WebSocket session with the given status.\n\treactor.core.publisher.Mono<Void> close(CloseStatus status);\n\t// Whether the underlying connection is open.\n\tboolean isOpen();\n}", "des": "Spring WebSocketSession implementation that adapts to a Jetty WebSocket Session."}
{"index": 12743, "repo": "spring-webflux-6.0.11", "code": "public class MatrixVariableMapMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Resolves arguments of type Map annotated with @MatrixVariable where the annotation does not specify a name."}
{"index": 12744, "repo": "spring-webflux-6.0.11", "code": "public class MatrixVariableMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver {\n\t// Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves arguments annotated with @MatrixVariable."}
{"index": 12745, "repo": "spring-webflux-6.0.11", "code": "public class ModelAttributeMethodArgumentResolver extends HandlerMethodArgumentResolverSupport {\n\t// Extension point to bind the request to the target object.\n\tprotected reactor.core.publisher.Mono<Void> bindRequestParameters(org.springframework.web.bind.support.WebExchangeDataBinder binder, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Resolve @ModelAttribute annotated method arguments."}
{"index": 12746, "repo": "spring-webflux-6.0.11", "code": "public class ModelMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter parameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter param);\n}", "des": "Resolver for a controller method argument of type Model that can also be resolved as a Map."}
{"index": 12747, "repo": "spring-webflux-6.0.11", "code": "public class ParameterContentTypeResolver extends Object implements RequestedContentTypeResolver {\n\tString getParameterName();\n\t// Resolve the given request to a list of requested media types.\n\tList<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.server.ServerWebExchange exchange);\n\t// Set the name of the parameter to use to determine requested media types.\n\tvoid setParameterName(String parameterName);\n}", "des": "Resolver that checks a query parameter and uses it to look up a matching MediaType."}
{"index": 12748, "repo": "spring-webflux-6.0.11", "code": "public final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition> {\n\t// Returns a new instance with the union of the param expressions from \"this\" and the \"other\" instance.\n\tParamsRequestCondition combine(ParamsRequestCondition other);\n\t// Compare to another condition based on parameter expressions.\n\tint compareTo(ParamsRequestCondition other, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "A logical conjunction (' && ') request condition that matches a request against a set parameter expressions with syntax defined in RequestMapping.params()."}
{"index": 12749, "repo": "spring-webflux-6.0.11", "code": "public class PathMatchConfigurer extends Object {\n\t// Configure a path prefix to apply to matching controller methods.\n\tPathMatchConfigurer addPathPrefix(String prefix, Predicate<Class<?>> predicate);\n\tprotected Map<String,Predicate<Class<?>>> getPathPrefixes();\n\tprotected Boolean isUseCaseSensitiveMatch();\n\t// Deprecated.\n\tprotected Boolean isUseTrailingSlashMatch();\n\t// Whether to match to URLs irrespective of their case.\n\tPathMatchConfigurer setUseCaseSensitiveMatch(Boolean caseSensitiveMatch);\n}", "des": "Assist with configuring HandlerMapping's with path matching options."}
{"index": 12750, "repo": "spring-webflux-6.0.11", "code": "public class PathResourceResolver extends AbstractResourceResolver {\n\t// Perform additional checks on a resolved resource beyond checking whether the resource exists and is readable.\n\tprotected boolean checkResource(org.springframework.core.io.Resource resource, org.springframework.core.io.Resource location);\n\torg.springframework.core.io.Resource[] getAllowedLocations();\n}", "des": "A simple ResourceResolver that tries to find a resource under the given locations matching to the request path."}
{"index": 12751, "repo": "spring-webflux-6.0.11", "code": "public class PathVariableMapMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter methodParameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Resolver for Map method arguments annotated with @PathVariable where the annotation does not specify a path variable name."}
{"index": 12752, "repo": "spring-webflux-6.0.11", "code": "public class PathVariableMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver {\n\t// Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method arguments annotated with @PathVariable."}
{"index": 12753, "repo": "spring-webflux-6.0.11", "code": "public final class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition> {\n\t// Combine the patterns of the current and of the other instances as follows: If only one instance has patterns, use those.\n\tPatternsRequestCondition combine(PatternsRequestCondition other);\n\t// Compare the two conditions based on the URL patterns they contain.\n\tint compareTo(PatternsRequestCondition other, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns."}
{"index": 12754, "repo": "spring-webflux-6.0.11", "code": "public class PrincipalMethodArgumentResolver extends HandlerMethodArgumentResolverSupport {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method argument value of type Principal."}
{"index": 12755, "repo": "spring-webflux-6.0.11", "code": "public final class ProducesRequestCondition extends AbstractRequestCondition<ProducesRequestCondition> {\n\t// Use this to clear MEDIA_TYPES_ATTRIBUTE that contains the parsed, requested media types.\n\tstatic void clearMediaTypesAttribute(org.springframework.web.server.ServerWebExchange exchange);\n\t// Returns the \"other\" instance if it has any expressions; returns \"this\" instance otherwise.\n\tProducesRequestCondition combine(ProducesRequestCondition other);\n}", "des": "A logical disjunction (' || ') request condition to match a request's 'Accept' header to a list of media type expressions."}
{"index": 12756, "repo": "spring-webflux-6.0.11", "code": "public class ReactorNetty2RequestUpgradeStrategy extends Object implements RequestUpgradeStrategy {\n\t// Build an instance of WebsocketServerSpec that reflects the current configuration.\n\treactor.netty5.http.server.WebsocketServerSpec getWebsocketServerSpec();\n}", "des": "A WebSocket RequestUpgradeStrategy for Reactor Netty for Netty 5."}
{"index": 12757, "repo": "spring-webflux-6.0.11", "code": "public class ReactorNetty2WebSocketClient extends Object implements WebSocketClient {\n\t// A variant of WebSocketClient.execute(URI, WebSocketHandler) with custom headers.\n\treactor.core.publisher.Mono<Void> execute(URI url, org.springframework.http.HttpHeaders requestHeaders, WebSocketHandler handler);\n\t// Execute a handshake request to the given url and handle the resulting WebSocket session with the given handler.\n\treactor.core.publisher.Mono<Void> execute(URI url, WebSocketHandler handler);\n}", "des": "WebSocketClient implementation for use with Reactor Netty for Netty 5."}
{"index": 12758, "repo": "spring-webflux-6.0.11", "code": "public class ReactorNetty2WebSocketSession extends Netty5WebSocketSessionSupport<ReactorNetty2WebSocketSession.WebSocketConnection> {\n\t// Close the WebSocket session with the given status.\n\treactor.core.publisher.Mono<Void> close(CloseStatus status);\n\t// Provides access to the CloseStatus with which the session is closed either locally or remotely, or completes empty if the session ended without a status.\n\treactor.core.publisher.Mono<CloseStatus> closeStatus();\n}", "des": "WebSocketSession implementation for use with the Reactor Netty's (Netty 5) NettyInbound and NettyOutbound."}
{"index": 12759, "repo": "spring-webflux-6.0.11", "code": "public class ReactorNettyRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy {\n\t// Deprecated. as of 5.2.6 in favor of getWebsocketServerSpec()\n\tboolean getHandlePing();\n\t// Deprecated. as of 5.2.6 in favor of getWebsocketServerSpec()\n\tint getMaxFramePayloadLength();\n\t// Build an instance of WebsocketServerSpec that reflects the current configuration.\n\treactor.netty.http.server.WebsocketServerSpec getWebsocketServerSpec();\n}", "des": "A WebSocket RequestUpgradeStrategy for Reactor Netty."}
{"index": 12760, "repo": "spring-webflux-6.0.11", "code": "public class ReactorNettyWebSocketClient extends Object implements WebSocketClient {\n\t// A variant of WebSocketClient.execute(URI, WebSocketHandler) with custom headers.\n\treactor.core.publisher.Mono<Void> execute(URI url, org.springframework.http.HttpHeaders requestHeaders, WebSocketHandler handler);\n\t// Execute a handshake request to the given url and handle the resulting WebSocket session with the given handler.\n\treactor.core.publisher.Mono<Void> execute(URI url, WebSocketHandler handler);\n}", "des": "WebSocketClient implementation for use with Reactor Netty."}
{"index": 12761, "repo": "spring-webflux-6.0.11", "code": "public class ReactorNettyWebSocketSession extends NettyWebSocketSessionSupport<ReactorNettyWebSocketSession.WebSocketConnection> {\n\t// Close the WebSocket session with the given status.\n\treactor.core.publisher.Mono<Void> close(CloseStatus status);\n\t// Provides access to the CloseStatus with which the session is closed either locally or remotely, or completes empty if the session ended without a status.\n\treactor.core.publisher.Mono<CloseStatus> closeStatus();\n}", "des": "WebSocketSession implementation for use with the Reactor Netty's NettyInbound and NettyOutbound."}
{"index": 12762, "repo": "spring-webflux-6.0.11", "code": "public class RedirectView extends AbstractUrlBasedView {\n\t// Append the query of the current request to the target redirect URL.\n\tprotected StringBuilder appendCurrentRequestQuery(String targetUrl, org.springframework.http.server.reactive.ServerHttpRequest request);\n\t// Check whether the resource for the configured URL actually exists.\n\tboolean checkResourceExists(Locale locale);\n}", "des": "View that redirects to an absolute or context relative URL."}
{"index": 12763, "repo": "spring-webflux-6.0.11", "code": "public interface Rendering {\n\t// Return headers to add to the response.\n\torg.springframework.http.HttpHeaders headers();\n\t// Return attributes to add to the model.\n\tMap<String,Object> modelAttributes();\n\t// Create a new builder for a redirect through a RedirectView.\n\tstatic Rendering.RedirectBuilder redirectTo(String url);\n\t// Return the HTTP status to set the response to.\n\torg.springframework.http.HttpStatusCode status();\n\t// Return the selected String view name or View object.\n\tObject view();\n}", "des": "Public API for HTML rendering."}
{"index": 12764, "repo": "spring-webflux-6.0.11", "code": "public static interface Rendering.Builder<B extends Rendering.Builder<B>> {\n\t// Build the Rendering instance.\n\tRendering build();\n\t// Specify a header to add to the response.\n\tB header(String headerName, String... headerValues);\n\t// Specify headers to add to the response.\n\tB headers(org.springframework.http.HttpHeaders headers);\n\t// Add the given attributes to the model.\n\tB model(Map<String,?> map);\n\t// Add an attribute to the model using a generated name.\n\tB modelAttribute(Object value);\n}", "des": "Defines a builder for Rendering."}
{"index": 12765, "repo": "spring-webflux-6.0.11", "code": "public static interface Rendering.RedirectBuilder extends Rendering.Builder<Rendering.RedirectBuilder> {\n\t// Whether to the provided redirect URL should be prepended with the application context path (if any).\n\tRendering.RedirectBuilder contextRelative(boolean contextRelative);\n\t// Whether to append the query string of the current URL to the target redirect URL or not.\n\tRendering.RedirectBuilder propagateQuery(boolean propagate);\n}", "des": "Extends Rendering.Builder with extra options for redirect scenarios."}
{"index": 12766, "repo": "spring-webflux-6.0.11", "code": "public class RenderingContext extends Object {\n\t// Return the application context.\n\torg.springframework.context.ApplicationContext getApplicationContext();\n\t// Return the locale of the rendered template.\n\tLocale getLocale();\n\t// Return a function that takes a template path as input and returns the template content as a String.\n\tFunction<String,String> getTemplateLoader();\n\t// Return the URL of the rendered template.\n\tString getUrl();\n}", "des": "Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side."}
{"index": 12767, "repo": "spring-webflux-6.0.11", "code": "public interface RenderingResponse extends ServerResponse {\n\t// Create a builder with the given template name.\n\tstatic RenderingResponse.Builder create(String name);\n\t// Create a builder with the template name, status code, headers and model of the given response.\n\tstatic RenderingResponse.Builder from(RenderingResponse other);\n\t// Return the unmodifiable model map.\n\tMap<String,Object> model();\n\t// Return the name of the template to be rendered.\n\tString name();\n}", "des": "Rendering-specific subtype of ServerResponse that exposes model and template data."}
{"index": 12768, "repo": "spring-webflux-6.0.11", "code": "public static interface RenderingResponse.Builder {\n\t// Build the response.\n\treactor.core.publisher.Mono<RenderingResponse> build();\n\t// Add the given cookie to the response.\n\tRenderingResponse.Builder cookie(org.springframework.http.ResponseCookie cookie);\n\t// Manipulate this response's cookies with the given consumer.\n\tRenderingResponse.Builder cookies(Consumer<org.springframework.util.MultiValueMap<String,org.springframework.http.ResponseCookie>> cookiesConsumer);\n}", "des": "Defines a builder for RenderingResponse."}
{"index": 12769, "repo": "spring-webflux-6.0.11", "code": "public class RequestAttributeMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver {\n\t// Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method arguments annotated with an @RequestAttribute."}
{"index": 12770, "repo": "spring-webflux-6.0.11", "code": "public class RequestBodyMethodArgumentResolver extends AbstractMessageReaderArgumentResolver {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter param, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method arguments annotated with @RequestBody by reading the body of the request through a compatible HttpMessageReader."}
{"index": 12771, "repo": "spring-webflux-6.0.11", "code": "public interface RequestCondition<T> {\n\t// Combine this condition with another such as conditions from a type-level and method-level @RequestMapping annotation.\n\tT combine(T other);\n\t// Compare this condition to another condition in the context of a specific request.\n\tint compareTo(T other, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Contract for request mapping conditions."}
{"index": 12772, "repo": "spring-webflux-6.0.11", "code": "public final class RequestConditionHolder extends AbstractRequestCondition<RequestConditionHolder> {\n\t// Combine the request conditions held by the two RequestConditionHolder instances after making sure the conditions are of the same type.\n\tRequestConditionHolder combine(RequestConditionHolder other);\n}", "des": "A holder for a RequestCondition useful when the type of the request condition is not known ahead of time, e.g."}
{"index": 12773, "repo": "spring-webflux-6.0.11", "code": "public class RequestContext extends Object {\n\t// Change the current locale to the specified one.\n\tvoid changeLocale(Locale locale);\n\t// Change the current locale to the specified locale and time zone context.\n\tvoid changeLocale(Locale locale, TimeZone timeZone);\n\t// Create a BindStatus for the given bind object using the \"defaultHtmlEscape\" setting.\n\tBindStatus getBindStatus(String path);\n}", "des": "Context holder for request-specific state, like the MessageSource to use, current locale, binding errors, etc."}
{"index": 12774, "repo": "spring-webflux-6.0.11", "code": "public interface RequestDataValueProcessor {\n\t// Invoked after all form fields have been rendered.\n\tMap<String,String> getExtraHiddenFields(org.springframework.web.server.ServerWebExchange exchange);\n\t// Invoked when a new form action is rendered.\n\tString processAction(org.springframework.web.server.ServerWebExchange exchange, String action, String httpMethod);\n}", "des": "A contract for inspecting and potentially modifying request data values such as URL query parameters or form field values before they are rendered by a view or before a redirect."}
{"index": 12775, "repo": "spring-webflux-6.0.11", "code": "public class RequestedContentTypeResolverBuilder extends Object {\n\t// Build a RequestedContentTypeResolver that delegates to the list of resolvers configured through this builder.\n\tRequestedContentTypeResolver build();\n\t// Add resolver that returns a fixed set of media types.\n\tvoid fixedResolver(org.springframework.http.MediaType... mediaTypes);\n\t// Add resolver to get the requested content type from the \"Accept\" header.\n\tvoid headerResolver();\n}", "des": "Builder for a composite RequestedContentTypeResolver that delegates to other resolvers each implementing a different strategy to determine the requested content type -- e.g."}
{"index": 12776, "repo": "spring-webflux-6.0.11", "code": "public static class RequestedContentTypeResolverBuilder.ParameterResolverConfigurer extends Object {\n\t// Configure a mapping between a lookup key (extracted from a query parameter value) and a corresponding MediaType.\n\tRequestedContentTypeResolverBuilder.ParameterResolverConfigurer mediaType(String key, org.springframework.http.MediaType mediaType);\n}", "des": "Helper to create and configure ParameterContentTypeResolver."}
{"index": 12777, "repo": "spring-webflux-6.0.11", "code": "public class RequestHeaderMapMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter methodParameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Resolves Map method arguments annotated with @RequestHeader."}
{"index": 12778, "repo": "spring-webflux-6.0.11", "code": "public class RequestHeaderMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver {\n\t// Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method arguments annotated with @RequestHeader except for Map arguments."}
{"index": 12779, "repo": "spring-webflux-6.0.11", "code": "public class RequestMappingHandlerAdapter extends Object implements HandlerAdapter, DispatchExceptionHandler, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Return the configured resolvers for controller method arguments.\n\tArgumentResolverConfigurer getArgumentResolverConfigurer();\n\t// Return the configurer for HTTP message readers.\n\tList<org.springframework.http.codec.HttpMessageReader<?>> getMessageReaders();\n}", "des": "Supports the invocation of @RequestMapping handler methods."}
{"index": 12780, "repo": "spring-webflux-6.0.11", "code": "public class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping implements org.springframework.context.EmbeddedValueResolverAware {\n\t// Detects handler methods at initialization.\n\tvoid afterPropertiesSet();\n}", "des": "An extension of RequestMappingInfoHandlerMapping that creates RequestMappingInfo instances from class-level and method-level @RequestMapping annotations."}
{"index": 12781, "repo": "spring-webflux-6.0.11", "code": "public final class RequestMappingInfo extends Object implements RequestCondition<RequestMappingInfo> {\n\t// Combines \"this\" request mapping info (i.e.\n\tRequestMappingInfo combine(RequestMappingInfo other);\n\t// Compares \"this\" info (i.e.\n\tint compareTo(RequestMappingInfo other, org.springframework.web.server.ServerWebExchange exchange);\n\tboolean equals(Object other);\n}", "des": "Request mapping information."}
{"index": 12782, "repo": "spring-webflux-6.0.11", "code": "public static interface RequestMappingInfo.Builder {\n\t// Build the RequestMappingInfo.\n\tRequestMappingInfo build();\n\t// Set the consumes conditions.\n\tRequestMappingInfo.Builder consumes(String... consumes);\n\t// Set a custom condition to use.\n\tRequestMappingInfo.Builder customCondition(RequestCondition<?> condition);\n\t// Set the header conditions.\n\tRequestMappingInfo.Builder headers(String... headers);\n\t// Set the mapping name.\n\tRequestMappingInfo.Builder mappingName(String name);\n}", "des": "Defines a builder for creating a RequestMappingInfo."}
{"index": 12783, "repo": "spring-webflux-6.0.11", "code": "public abstract class RequestMappingInfoHandlerMapping extends AbstractHandlerMethodMapping<RequestMappingInfo> {\n\t// Return the request mapping paths that are not patterns.\n\tprotected Set<String> getDirectPaths(RequestMappingInfo info);\n\t// Look up a handler method for the given request.\n\treactor.core.publisher.Mono<org.springframework.web.method.HandlerMethod> getHandlerInternal(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Abstract base class for classes for which RequestMappingInfo defines the mapping between a request and a handler method."}
{"index": 12784, "repo": "spring-webflux-6.0.11", "code": "public final class RequestMethodsRequestCondition extends AbstractRequestCondition<RequestMethodsRequestCondition> {\n\t// Returns a new instance with a union of the HTTP request methods from \"this\" and the \"other\" instance.\n\tRequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);\n}", "des": "A logical disjunction (' || ') request condition that matches a request against a set of RequestMethods."}
{"index": 12785, "repo": "spring-webflux-6.0.11", "code": "public class RequestParamMapMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter methodParameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Resolver for Map method arguments annotated with @RequestParam where the annotation does not specify a request parameter name."}
{"index": 12786, "repo": "spring-webflux-6.0.11", "code": "public class RequestParamMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver {\n\t// Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolver for method arguments annotated with @RequestParam from URI query string parameters."}
{"index": 12787, "repo": "spring-webflux-6.0.11", "code": "@FunctionalInterface public interface RequestPredicate {\n\t// Accept the given visitor.\n\tdefault void accept(RequestPredicates.Visitor visitor);\n\t// Return a composed request predicate that tests against both this predicate AND the other predicate.\n\tdefault RequestPredicate and(RequestPredicate other);\n\t// Return a predicate that represents the logical negation of this predicate.\n\tdefault RequestPredicate negate();\n}", "des": "Represents a function that evaluates on a given ServerRequest."}
{"index": 12788, "repo": "spring-webflux-6.0.11", "code": "public abstract class RequestPredicates extends Object {\n\t// Return a RequestPredicate that tests if the request's accept header is compatible with any of the given media types.\n\tstatic RequestPredicate accept(org.springframework.http.MediaType... mediaTypes);\n\t// Return a RequestPredicate that always matches.\n\tstatic RequestPredicate all();\n}", "des": "Implementations of RequestPredicate that implement various useful request matching operations, such as matching based on path, HTTP method, etc."}
{"index": 12789, "repo": "spring-webflux-6.0.11", "code": "public static interface RequestPredicates.Visitor {\n\t// Receive \"middle\" notification of a logical AND predicate.\n\tvoid and();\n\t// Receive last notification of a logical AND predicate.\n\tvoid endAnd();\n\t// Receive last notification of a negated predicate.\n\tvoid endNegate();\n\t// Receive last notification of a logical OR predicate.\n\tvoid endOr();\n\t// Receive notification of an HTTP header predicate.\n\tvoid header(String name, String value);\n}", "des": "Receives notifications from the logical structure of request predicates."}
{"index": 12790, "repo": "spring-webflux-6.0.11", "code": "public class ResourceChainRegistration extends Object {\n\t// Add a resource resolver to the chain.\n\tResourceChainRegistration addResolver(ResourceResolver resolver);\n\t// Add a resource transformer to the chain.\n\tResourceChainRegistration addTransformer(ResourceTransformer transformer);\n\tprotected List<ResourceResolver> getResourceResolvers();\n\tprotected List<ResourceTransformer> getResourceTransformers();\n}", "des": "Assists with the registration of resource resolvers and transformers."}
{"index": 12791, "repo": "spring-webflux-6.0.11", "code": "public class ResourceHandlerRegistration extends Object {\n\t// Add one or more resource locations from which to serve static content.\n\tResourceHandlerRegistration addResourceLocations(String... resourceLocations);\n\t// Returns the URL path patterns for the resource handler.\n\tprotected String[] getPathPatterns();\n\t// Returns a ResourceWebHandler instance.\n\tprotected ResourceWebHandler getRequestHandler();\n}", "des": "Assist with creating and configuring a static resources handler."}
{"index": 12792, "repo": "spring-webflux-6.0.11", "code": "public class ResourceHandlerRegistry extends Object {\n\t// Add a resource handler for serving static resources based on the specified URL path patterns.\n\tResourceHandlerRegistration addResourceHandler(String... patterns);\n\t// Return a handler mapping with the mapped resource handlers; or null in case of no registrations.\n\tprotected AbstractUrlHandlerMapping getHandlerMapping();\n}", "des": "Stores registrations of resource handlers for serving static resources such as images, css files and others through Spring WebFlux including setting cache headers optimized for efficient loading in a web browser."}
{"index": 12793, "repo": "spring-webflux-6.0.11", "code": "public interface ResourceResolver {\n\t// Resolve the supplied request and request path to a Resource that exists under one of the given resource locations.\n\treactor.core.publisher.Mono<org.springframework.core.io.Resource> resolveResource(org.springframework.web.server.ServerWebExchange exchange, String requestPath, List<? extends org.springframework.core.io.Resource> locations, ResourceResolverChain chain);\n}", "des": "A strategy for resolving a request to a server-side resource."}
{"index": 12794, "repo": "spring-webflux-6.0.11", "code": "public interface ResourceResolverChain {\n\t// Resolve the supplied request and request path to a Resource that exists under one of the given resource locations.\n\treactor.core.publisher.Mono<org.springframework.core.io.Resource> resolveResource(org.springframework.web.server.ServerWebExchange exchange, String requestPath, List<? extends org.springframework.core.io.Resource> locations);\n}", "des": "A contract for invoking a chain of ResourceResolvers where each resolver is given a reference to the chain allowing it to delegate when necessary."}
{"index": 12795, "repo": "spring-webflux-6.0.11", "code": "public interface ResourceTransformerChain {\n\t// Return the ResourceResolverChain that was used to resolve the Resource being transformed.\n\tResourceResolverChain getResolverChain();\n\t// Transform the given resource.\n\treactor.core.publisher.Mono<org.springframework.core.io.Resource> transform(org.springframework.web.server.ServerWebExchange exchange, org.springframework.core.io.Resource resource);\n}", "des": "A contract for invoking a chain of ResourceTransformers where each resolver is given a reference to the chain allowing it to delegate when necessary."}
{"index": 12796, "repo": "spring-webflux-6.0.11", "code": "public abstract class ResourceTransformerSupport extends Object implements ResourceTransformer {\n\t// Return the configured ResourceUrlProvider.\n\tResourceUrlProvider getResourceUrlProvider();\n}", "des": "A base class for a ResourceTransformer with an optional helper method for resolving public links within a transformed resource."}
{"index": 12797, "repo": "spring-webflux-6.0.11", "code": "public class ResourceUrlProvider extends Object implements org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.context.ApplicationContextAware {\n\t// Get the public resource URL for the given URI string.\n\tfinal reactor.core.publisher.Mono<String> getForUriString(String uriString, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "A central component to use to obtain the public URL path that clients should use to access a static resource."}
{"index": 12798, "repo": "spring-webflux-6.0.11", "code": "public class ResourceWebHandler extends Object implements org.springframework.web.server.WebHandler, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Return the CacheControl instance to build the Cache-Control HTTP response header.\n\torg.springframework.http.CacheControl getCacheControl();\n\t// Return the List of Resource paths to use as sources for serving static resources.\n\tList<org.springframework.core.io.Resource> getLocations();\n}", "des": "HttpRequestHandler that serves static resources in an optimized way according to the guidelines of Page Speed, YSlow, etc."}
{"index": 12799, "repo": "spring-webflux-6.0.11", "code": "public class ResponseBodyResultHandler extends AbstractMessageWriterResultHandler implements HandlerResultHandler {\n\t// Process the given result modifying response headers and/or writing data to the response.\n\treactor.core.publisher.Mono<Void> handleResult(org.springframework.web.server.ServerWebExchange exchange, HandlerResult result);\n\t// Whether this handler supports the given HandlerResult.\n\tboolean supports(HandlerResult result);\n}", "des": "HandlerResultHandler that handles return values from methods annotated with @ResponseBody writing to the body of the request or response with an HttpMessageWriter."}
{"index": 12800, "repo": "spring-webflux-6.0.11", "code": "public class ResponseEntityResultHandler extends AbstractMessageWriterResultHandler implements HandlerResultHandler {\n\t// Process the given result modifying response headers and/or writing data to the response.\n\treactor.core.publisher.Mono<Void> handleResult(org.springframework.web.server.ServerWebExchange exchange, HandlerResult result);\n\t// Whether this handler supports the given HandlerResult.\n\tboolean supports(HandlerResult result);\n}", "des": "Handles return values of type HttpEntity, ResponseEntity, HttpHeaders, ErrorResponse, and ProblemDetail."}
{"index": 12801, "repo": "spring-webflux-6.0.11", "code": "@FunctionalInterface public interface RouterFunction<T extends ServerResponse> {\n\t// Accept the given visitor.\n\tdefault void accept(RouterFunctions.Visitor visitor);\n\t// Return a composed routing function that first invokes this function, and then invokes the other function (of the same response type T) if this route had no result.\n\tdefault RouterFunction<T> and(RouterFunction<T> other);\n}", "des": "Represents a function that routes to a handler function."}
{"index": 12802, "repo": "spring-webflux-6.0.11", "code": "public class RouterFunctionMapping extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Look up a handler for the given request, returning an empty Mono if no specific one is found.\n\tprotected reactor.core.publisher.Mono<?> getHandlerInternal(org.springframework.web.server.ServerWebExchange exchange);\n\t// Return the configured RouterFunction.\n\tRouterFunction<?> getRouterFunction();\n}", "des": "HandlerMapping implementation that supports RouterFunctions."}
{"index": 12803, "repo": "spring-webflux-6.0.11", "code": "public abstract class RouterFunctions extends Object {\n\t// Changes the PathPatternParser on the given router function.\n\tstatic <T extends ServerResponse>RouterFunction<T> changeParser(RouterFunction<T> routerFunction, org.springframework.web.util.pattern.PathPatternParser parser);\n\t// Route to the given router function if the given request predicate applies.\n\tstatic <T extends ServerResponse>RouterFunction<T> nest(RequestPredicate predicate, RouterFunction<T> routerFunction);\n}", "des": "Central entry point to Spring's functional web framework. Exposes routing functionality, such as to create a RouterFunction using a discoverable builder-style API, to create a RouterFunction given a RequestPredicate and HandlerFunction, and to do further subrouting on an existing routing function."}
{"index": 12804, "repo": "spring-webflux-6.0.11", "code": "public static interface RouterFunctions.Builder {\n\t// Adds the given route to this builder.\n\tRouterFunctions.Builder add(RouterFunction<ServerResponse> routerFunction);\n\t// Filter the response object for all routes created by this builder with the given response processing function.\n\tRouterFunctions.Builder after(BiFunction<ServerRequest,ServerResponse,ServerResponse> responseProcessor);\n}", "des": "Represents a discoverable builder for router functions."}
{"index": 12805, "repo": "spring-webflux-6.0.11", "code": "public static interface RouterFunctions.Visitor {\n\t// Receive notification of a router function with attributes.\n\tvoid attributes(Map<String,Object> attributes);\n\t// Receive notification of the end of a nested router function.\n\tvoid endNested(RequestPredicate predicate);\n\t// Receive notification of a resource router function.\n\tvoid resources(Function<ServerRequest,reactor.core.publisher.Mono<org.springframework.core.io.Resource>> lookupFunction);\n}", "des": "Receives notifications from the logical structure of router functions."}
{"index": 12806, "repo": "spring-webflux-6.0.11", "code": "public interface ScriptTemplateConfig {\n\t// Return the charset used to read script and template files.\n\tCharset getCharset();\n\t// Return the ScriptEngine to use by the views.\n\tScriptEngine getEngine();\n\t// Return the engine name that will be used to instantiate the ScriptEngine.\n\tString getEngineName();\n\t// Return the engine supplier that will be used to instantiate the ScriptEngine.\n\tSupplier<ScriptEngine> getEngineSupplier();\n\t// Return the render function name (optional).\n\tString getRenderFunction();\n}", "des": "Interface to be implemented by objects that configure and manage a JSR-223 ScriptEngine for automatic lookup in a web environment."}
{"index": 12807, "repo": "spring-webflux-6.0.11", "code": "public class ScriptTemplateConfigurer extends Object implements ScriptTemplateConfig {\n\t// Return the charset used to read script and template files.\n\tCharset getCharset();\n\t// Return the ScriptEngine to use by the views.\n\tScriptEngine getEngine();\n\t// Return the engine name that will be used to instantiate the ScriptEngine.\n\tString getEngineName();\n\t// Return the engine supplier that will be used to instantiate the ScriptEngine.\n\tSupplier<ScriptEngine> getEngineSupplier();\n}", "des": "An implementation of the Spring WebFlux ScriptTemplateConfig for creating a ScriptEngine for use in a web application."}
{"index": 12808, "repo": "spring-webflux-6.0.11", "code": "public class ScriptTemplateView extends AbstractUrlBasedView {\n\tprotected ScriptTemplateConfig autodetectViewConfig();\n\t// Check whether the resource for the configured URL actually exists.\n\tboolean checkResourceExists(Locale locale);\n\tprotected ScriptEngine createEngineFromName(String engineName);\n\tprotected ScriptEngine getEngine();\n\tprotected org.springframework.core.io.Resource getResource(String location);\n\tprotected String getTemplate(String path);\n\tprotected void loadScripts(ScriptEngine engine);\n}", "des": "An AbstractUrlBasedView subclass designed to run any template library based on a JSR-223 script engine."}
{"index": 12809, "repo": "spring-webflux-6.0.11", "code": "public class ScriptTemplateViewResolver extends UrlBasedViewResolver {\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Return the required type of view for this resolver.\n\tprotected Class<?> requiredViewClass();\n}", "des": "Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it."}
{"index": 12810, "repo": "spring-webflux-6.0.11", "code": "public interface ServerRequest {\n\t// Get the request attribute value if present.\n\tdefault Optional<Object> attribute(String name);\n\t// Get a mutable map of request attributes.\n\tMap<String,Object> attributes();\n\t// Extract the body with the given BodyExtractor.\n\t<T> T body(BodyExtractor<T,? super org.springframework.http.server.reactive.ServerHttpRequest> extractor);\n}", "des": "Represents a server-side HTTP request, as handled by a HandlerFunction."}
{"index": 12811, "repo": "spring-webflux-6.0.11", "code": "public static interface ServerRequest.Builder {\n\t// Add an attribute with the given name and value.\n\tServerRequest.Builder attribute(String name, Object value);\n\t// Manipulate this request's attributes with the given consumer.\n\tServerRequest.Builder attributes(Consumer<Map<String,Object>> attributesConsumer);\n\t// Set the body of the request to the UTF-8 encoded bytes of the given string.\n\tServerRequest.Builder body(String body);\n}", "des": "Defines a builder for a request."}
{"index": 12812, "repo": "spring-webflux-6.0.11", "code": "public static interface ServerRequest.Headers {\n\t// Get the list of acceptable media types, as specified by the Accept header.\n\tList<org.springframework.http.MediaType> accept();\n\t// Get the list of acceptable charsets, as specified by the Accept-Charset header.\n\tList<Charset> acceptCharset();\n\t// Get the list of acceptable languages, as specified by the Accept-Language header.\n\tList<Locale.LanguageRange> acceptLanguage();\n}", "des": "Represents the headers of the HTTP request."}
{"index": 12813, "repo": "spring-webflux-6.0.11", "code": "public class ServerRequestWrapper extends Object implements ServerRequest {\n\t// Get the request attribute value if present.\n\tOptional<Object> attribute(String name);\n\t// Get a mutable map of request attributes.\n\tMap<String,Object> attributes();\n\t// Extract the body with the given BodyExtractor.\n\t<T> T body(BodyExtractor<T,? super org.springframework.http.server.reactive.ServerHttpRequest> extractor);\n}", "des": "Implementation of the ServerRequest interface that can be subclassed to adapt the request in a handler filter function."}
{"index": 12814, "repo": "spring-webflux-6.0.11", "code": "public static class ServerRequestWrapper.HeadersWrapper extends Object implements ServerRequest.Headers {\n\t// Get the list of acceptable media types, as specified by the Accept header.\n\tList<org.springframework.http.MediaType> accept();\n\t// Get the list of acceptable charsets, as specified by the Accept-Charset header.\n\tList<Charset> acceptCharset();\n\t// Get the list of acceptable languages, as specified by the Accept-Language header.\n\tList<Locale.LanguageRange> acceptLanguage();\n}", "des": "Implementation of the Headers interface that can be subclassed to adapt the headers in a handler filter function."}
{"index": 12815, "repo": "spring-webflux-6.0.11", "code": "public interface ServerResponse {\n\t// Create a builder with an 202 Accepted status.\n\tstatic ServerResponse.BodyBuilder accepted();\n\t// Create a builder with a 400 Bad Request status.\n\tstatic ServerResponse.BodyBuilder badRequest();\n\t// Return the cookies of this response.\n\torg.springframework.util.MultiValueMap<String,org.springframework.http.ResponseCookie> cookies();\n}", "des": "Represents a typed server-side HTTP response, as returned by a handler function or filter function."}
{"index": 12816, "repo": "spring-webflux-6.0.11", "code": "public static interface ServerResponse.BodyBuilder extends ServerResponse.HeadersBuilder<ServerResponse.BodyBuilder> {\n\t// Variant of body(Publisher, Class) that allows using any producer that can be resolved to Publisher via ReactiveAdapterRegistry.\n\treactor.core.publisher.Mono<ServerResponse> body(Object producer, Class<?> elementClass);\n}", "des": "Defines a builder that adds a body to the response."}
{"index": 12817, "repo": "spring-webflux-6.0.11", "code": "public static interface ServerResponse.Context {\n\t// Return the HttpMessageWriters to be used for response body conversion.\n\tList<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters();\n\t// Return the ViewResolvers to be used for view name resolution.\n\tList<ViewResolver> viewResolvers();\n}", "des": "Defines the context used during the ServerResponse.writeTo(ServerWebExchange, Context)."}
{"index": 12818, "repo": "spring-webflux-6.0.11", "code": "public static interface ServerResponse.HeadersBuilder<B extends ServerResponse.HeadersBuilder<B>> {\n\t// Set the set of allowed HTTP methods, as specified by the Allow header.\n\tB allow(Set<org.springframework.http.HttpMethod> allowedMethods);\n\t// Set the set of allowed HTTP methods, as specified by the Allow header.\n\tB allow(org.springframework.http.HttpMethod... allowedMethods);\n\t// Build the response entity with no body.\n\treactor.core.publisher.Mono<ServerResponse> build();\n}", "des": "Defines a builder that adds headers to the response."}
{"index": 12819, "repo": "spring-webflux-6.0.11", "code": "public class ServerResponseResultHandler extends Object implements HandlerResultHandler, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered {\n\tvoid afterPropertiesSet();\n\tint getOrder();\n\t// Process the given result modifying response headers and/or writing data to the response.\n\treactor.core.publisher.Mono<Void> handleResult(org.springframework.web.server.ServerWebExchange exchange, HandlerResult result);\n}", "des": "HandlerResultHandler implementation that supports ServerResponses."}
{"index": 12820, "repo": "spring-webflux-6.0.11", "code": "public class ServerWebExchangeMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter methodParameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Resolves ServerWebExchange-related method argument values of the following types: ServerWebExchange ServerHttpRequest ServerHttpResponse HttpMethod Locale TimeZone ZoneId UriBuilder or UriComponentsBuilder -- for building URL's relative to the current request"}
{"index": 12821, "repo": "spring-webflux-6.0.11", "code": "public class SessionAttributeMethodArgumentResolver extends AbstractNamedValueArgumentResolver {\n\t// Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method arguments annotated with an @SessionAttribute."}
{"index": 12822, "repo": "spring-webflux-6.0.11", "code": "public class SessionStatusMethodArgumentResolver extends Object implements SyncHandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolver for a SessionStatus argument obtaining it from the BindingContext."}
{"index": 12823, "repo": "spring-webflux-6.0.11", "code": "public class SimpleHandlerAdapter extends Object implements HandlerAdapter {\n\t// Handle the request with the given handler, previously checked via HandlerAdapter.supports(Object).\n\treactor.core.publisher.Mono<HandlerResult> handle(org.springframework.web.server.ServerWebExchange exchange, Object handler);\n\t// Whether this HandlerAdapter supports the given handler.\n\tboolean supports(Object handler);\n}", "des": "HandlerAdapter that allows using the plain WebHandler contract with the generic DispatcherHandler."}
{"index": 12824, "repo": "spring-webflux-6.0.11", "code": "public class SimpleUrlHandlerMapping extends AbstractUrlHandlerMapping {\n\t// Allow Map access to the URL path mappings, with the option to add or override specific entries.\n\tMap<String,?> getUrlMap();\n\t// Calls the registerHandlers(java.util.Map<java.lang.String, java.lang.Object>) method in addition to the superclass's initialization.\n\tvoid initApplicationContext();\n\t// Register all handlers specified in the URL map for the corresponding paths.\n\tprotected void registerHandlers(Map<String,Object> urlMap);\n}", "des": "Implementation of the HandlerMapping interface to map from URLs to request handler beans."}
{"index": 12825, "repo": "spring-webflux-6.0.11", "code": "public class StandardWebSocketSession extends AbstractListenerWebSocketSession<Session> {\n\t// Whether the underlying WebSocket API has flow control and can suspend and resume the receiving of messages.\n\tprotected boolean canSuspendReceiving();\n\t// Close the WebSocket session with the given status.\n\treactor.core.publisher.Mono<Void> close(CloseStatus status);\n\t// Whether the underlying connection is open.\n\tboolean isOpen();\n}", "des": "Spring WebSocketSession adapter for a standard Java (JSR 356) Session."}
{"index": 12826, "repo": "spring-webflux-6.0.11", "code": "public class StandardWebSocketUpgradeStrategy extends Object implements RequestUpgradeStrategy {\n\tLong getAsyncSendTimeout();\n\tprotected ServerContainer getContainer(HttpServletRequest request);\n\tInteger getMaxBinaryMessageBufferSize();\n\tLong getMaxSessionIdleTimeout();\n\tInteger getMaxTextMessageBufferSize();\n\t// Exposes the underlying config option on WebSocketContainer.setAsyncSendTimeout(long).\n\tvoid setAsyncSendTimeout(Long timeoutInMillis);\n}", "des": "A WebSocket RequestUpgradeStrategy for the Jakarta WebSocket API 2.1+."}
{"index": 12827, "repo": "spring-webflux-6.0.11", "code": "public interface SyncHandlerMethodArgumentResolver extends HandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter.\n\tdefault reactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "An extension of HandlerMethodArgumentResolver for implementations that are synchronous in nature and do not block to resolve values."}
{"index": 12828, "repo": "spring-webflux-6.0.11", "code": "public class SyncInvocableHandlerMethod extends org.springframework.web.method.HandlerMethod {\n\t// Return the configured parameter name discoverer.\n\torg.springframework.core.ParameterNameDiscoverer getParameterNameDiscoverer();\n\t// Return the configured argument resolvers.\n\tList<SyncHandlerMethodArgumentResolver> getResolvers();\n}", "des": "Extension of HandlerMethod that invokes the underlying method via InvocableHandlerMethod but uses sync argument resolvers only and thus can return directly a HandlerResult with no async wrappers."}
{"index": 12829, "repo": "spring-webflux-6.0.11", "code": "public class TomcatWebSocketSession extends StandardWebSocketSession {\n\t// Whether the underlying WebSocket API has flow control and can suspend and resume the receiving of messages.\n\tprotected boolean canSuspendReceiving();\n\t// Resume receiving new message(s) after demand is generated by the downstream Subscriber.\n\tprotected void resumeReceiving();\n\t// Suspend receiving until received message(s) are processed and more demand is generated by the downstream Subscriber.\n\tprotected void suspendReceiving();\n}", "des": "Spring WebSocketSession adapter for Tomcat's Session."}
{"index": 12830, "repo": "spring-webflux-6.0.11", "code": "public class UndertowWebSocketClient extends Object implements WebSocketClient {\n\t// Create a WebSocketClient.ConnectionBuilder for the given URI.\n\tprotected io.undertow.websockets.client.WebSocketClient.ConnectionBuilder createConnectionBuilder(URI url);\n\t// A variant of WebSocketClient.execute(URI, WebSocketHandler) with custom headers.\n\treactor.core.publisher.Mono<Void> execute(URI url, org.springframework.http.HttpHeaders headers, WebSocketHandler handler);\n}", "des": "Undertow based implementation of WebSocketClient."}
{"index": 12831, "repo": "spring-webflux-6.0.11", "code": "public class UndertowWebSocketSession extends AbstractListenerWebSocketSession<io.undertow.websockets.core.WebSocketChannel> {\n\t// Whether the underlying WebSocket API has flow control and can suspend and resume the receiving of messages.\n\tprotected boolean canSuspendReceiving();\n\t// Close the WebSocket session with the given status.\n\treactor.core.publisher.Mono<Void> close(CloseStatus status);\n\t// Whether the underlying connection is open.\n\tboolean isOpen();\n}", "des": "Spring WebSocketSession implementation that adapts to an Undertow WebSocketChannel."}
{"index": 12832, "repo": "spring-webflux-6.0.11", "code": "public class UnsupportedMediaTypeException extends org.springframework.core.NestedRuntimeException {\n\t// Return the body type in the context of which this exception was generated.\n\torg.springframework.core.ResolvableType getBodyType();\n\t// Return the request Content-Type header if it was parsed successfully, or null otherwise.\n\torg.springframework.http.MediaType getContentType();\n}", "des": "Exception thrown to indicate that a Content-Type is not supported."}
{"index": 12833, "repo": "spring-webflux-6.0.11", "code": "public class UrlBasedViewResolver extends ViewResolverSupport implements ViewResolver, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Apply the containing ApplicationContext's lifecycle methods to the given View instance, if such a context is available.\n\tprotected View applyLifecycleMethods(String viewName, AbstractUrlBasedView view);\n}", "des": "A ViewResolver that allows direct resolution of symbolic view names to URLs without explicit mapping definitions."}
{"index": 12834, "repo": "spring-webflux-6.0.11", "code": "public class UrlBasedViewResolverRegistration extends Object {\n\tprotected UrlBasedViewResolver getViewResolver();\n\t// Set the prefix that gets prepended to view names when building a URL.\n\tUrlBasedViewResolverRegistration prefix(String prefix);\n\t// Set the suffix that gets appended to view names when building a URL.\n\tUrlBasedViewResolverRegistration suffix(String suffix);\n\t// Set the view class that should be used to create views.\n\tUrlBasedViewResolverRegistration viewClass(Class<?> viewClass);\n}", "des": "Assist with configuring properties of a UrlBasedViewResolver."}
{"index": 12835, "repo": "spring-webflux-6.0.11", "code": "public class VersionResourceResolver extends AbstractResourceResolver {\n\t// Insert a content-based version in resource URLs that match the given path patterns.\n\tVersionResourceResolver addContentVersionStrategy(String... pathPatterns);\n\t// Insert a fixed, prefix-based version in resource URLs that match the given path patterns, for example: \"{version}/js/main.js\".\n\tVersionResourceResolver addFixedVersionStrategy(String version, String... pathPatterns);\n}", "des": "Resolves request paths containing a version string that can be used as part of an HTTP caching strategy in which a resource is cached with a date in the distant future (e.g."}
{"index": 12836, "repo": "spring-webflux-6.0.11", "code": "public interface VersionStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String requestPath, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Determine the version for the given resource.\n\treactor.core.publisher.Mono<String> getResourceVersion(org.springframework.core.io.Resource resource);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "A strategy to determine the version of a static resource and to apply and/or extract it from the URL path."}
{"index": 12837, "repo": "spring-webflux-6.0.11", "code": "public interface View {\n\t// Return the list of media types this View supports, or an empty list.\n\tdefault List<org.springframework.http.MediaType> getSupportedMediaTypes();\n\t// Whether this View does render by performing a redirect.\n\tdefault boolean isRedirectView();\n\t// Render the view based on the given HandlerResult.\n\treactor.core.publisher.Mono<Void> render(Map<String,?> model, org.springframework.http.MediaType contentType, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Contract to render HandlerResult to the HTTP response."}
{"index": 12838, "repo": "spring-webflux-6.0.11", "code": "public class ViewResolutionResultHandler extends HandlerResultHandlerSupport implements HandlerResultHandler, org.springframework.core.Ordered {\n\t// Return the configured default View's.\n\tList<View> getDefaultViews();\n\t// Return a read-only list of view resolvers.\n\tList<ViewResolver> getViewResolvers();\n}", "des": "HandlerResultHandler that encapsulates the view resolution algorithm supporting the following return types: Void or no value -- default view name String -- view name unless @ModelAttribute-annotated View -- View to render with Model -- attributes to add to the model Map -- attributes to add to the model Rendering -- use case driven API for view resolution @ModelAttribute -- attribute for the model Non-simple value -- attribute for the model"}
{"index": 12839, "repo": "spring-webflux-6.0.11", "code": "public class ViewResolverRegistry extends Object {\n\t// Set default views associated with any view name and selected based on the best match for the requested content type.\n\tvoid defaultViews(View... defaultViews);\n\t// Register a FreeMarkerViewResolver with a \".ftl\" suffix.\n\tUrlBasedViewResolverRegistration freeMarker();\n\tprotected List<View> getDefaultViews();\n\tprotected int getOrder();\n\tprotected List<ViewResolver> getViewResolvers();\n}", "des": "Assist with the configuration of a chain of ViewResolver's supporting different template mechanisms."}
{"index": 12840, "repo": "spring-webflux-6.0.11", "code": "public abstract class ViewResolverSupport extends Object implements org.springframework.core.Ordered {\n\t// Return the default charset, used when the content type does not contain one.\n\tCharset getDefaultCharset();\n\tint getOrder();\n\t// Return the configured media types supported by this view.\n\tList<org.springframework.http.MediaType> getSupportedMediaTypes();\n\t// Set the default charset for this view, used when the content type does not contain one.\n\tvoid setDefaultCharset(Charset defaultCharset);\n}", "des": "Base class for ViewResolver implementations with shared properties."}
{"index": 12841, "repo": "spring-webflux-6.0.11", "code": "public interface WebClient {\n\t// Obtain a WebClient builder.\n\tstatic WebClient.Builder builder();\n\t// Create a new WebClient with Reactor Netty by default.\n\tstatic WebClient create();\n\t// Variant of create() that accepts a default base URL.\n\tstatic WebClient create(String baseUrl);\n\t// Start building an HTTP DELETE request.\n\tWebClient.RequestHeadersUriSpec<?> delete();\n\t// Start building an HTTP GET request.\n\tWebClient.RequestHeadersUriSpec<?> get();\n}", "des": "Non-blocking, reactive client to perform HTTP requests, exposing a fluent, reactive API over underlying HTTP client libraries such as Reactor Netty."}
{"index": 12842, "repo": "spring-webflux-6.0.11", "code": "public static interface WebClient.Builder {\n\t// Apply the given Consumer to this builder instance.\n\tWebClient.Builder apply(Consumer<WebClient.Builder> builderConsumer);\n\t// Configure a base URL for requests.\n\tWebClient.Builder baseUrl(String baseUrl);\n\t// Build the WebClient instance.\n\tWebClient build();\n\t// Configure the ClientHttpConnector to use.\n\tWebClient.Builder clientConnector(org.springframework.http.client.reactive.ClientHttpConnector connector);\n}", "des": "A mutable builder for creating a WebClient."}
{"index": 12843, "repo": "spring-webflux-6.0.11", "code": "public static interface WebClient.RequestBodySpec extends WebClient.RequestHeadersSpec<WebClient.RequestBodySpec> {\n\t// Variant of body(Publisher, Class) that allows using any producer that can be resolved to Publisher via ReactiveAdapterRegistry.\n\tWebClient.RequestHeadersSpec<?> body(Object producer, Class<?> elementClass);\n}", "des": "Contract for specifying request headers and body leading up to the exchange."}
{"index": 12844, "repo": "spring-webflux-6.0.11", "code": "public static interface WebClient.RequestHeadersSpec<S extends WebClient.RequestHeadersSpec<S>> {\n\t// Set the list of acceptable media types, as specified by the Accept header.\n\tS accept(org.springframework.http.MediaType... acceptableMediaTypes);\n\t// Set the list of acceptable charsets, as specified by the Accept-Charset header.\n\tS acceptCharset(Charset... acceptableCharsets);\n\t// Set the attribute with the given name to the given value.\n\tS attribute(String name, Object value);\n}", "des": "Contract for specifying request headers leading up to the exchange."}
{"index": 12845, "repo": "spring-webflux-6.0.11", "code": "public static interface WebClient.ResponseSpec {\n\t// Decode the body to a Flux with elements of the given type.\n\t<T> reactor.core.publisher.Flux<T> bodyToFlux(Class<T> elementClass);\n\t// Variant of bodyToMono(Class) with a ParameterizedTypeReference.\n\t<T> reactor.core.publisher.Flux<T> bodyToFlux(org.springframework.core.ParameterizedTypeReference<T> elementTypeRef);\n\t// Decode the body to the given target type.\n\t<T> reactor.core.publisher.Mono<T> bodyToMono(Class<T> elementClass);\n}", "des": "Contract for specifying response operations following the exchange."}
{"index": 12846, "repo": "spring-webflux-6.0.11", "code": "public static interface WebClient.UriSpec<S extends WebClient.RequestHeadersSpec<?>> {\n\t// Specify the URI for the request using a URI template and URI variables.\n\tS uri(String uri, Object... uriVariables);\n\t// Specify the URI starting with a URI template and finishing off with a UriBuilder created from the template.\n\tS uri(String uri, Function<org.springframework.web.util.UriBuilder,URI> uriFunction);\n}", "des": "Contract for specifying the URI for a request."}
{"index": 12847, "repo": "spring-webflux-6.0.11", "code": "public class WebClientRequestException extends WebClientException {\n\t// Return the HTTP request headers.\n\torg.springframework.http.HttpHeaders getHeaders();\n\t// Return the HTTP request method.\n\torg.springframework.http.HttpMethod getMethod();\n\t// Return the request URI.\n\tURI getUri();\n}", "des": "Exceptions that contain actual HTTP request data."}
{"index": 12848, "repo": "spring-webflux-6.0.11", "code": "public class WebClientResponseException extends WebClientException {\n\t// Create WebClientResponseException or an HTTP status specific subclass.\n\tstatic WebClientResponseException create(int statusCode, String statusText, org.springframework.http.HttpHeaders headers, byte[] body, Charset charset);\n}", "des": "Exceptions that contain actual HTTP response data."}
{"index": 12849, "repo": "spring-webflux-6.0.11", "code": "public class WebFluxConfigurationSupport extends Object implements org.springframework.context.ApplicationContextAware {\n\t// Override this method to configure cross-origin requests processing.\n\tprotected void addCorsMappings(CorsRegistry registry);\n\t// Override this method to add custom Converter and/or Formatter delegates to the common FormattingConversionService.\n\tprotected void addFormatters(org.springframework.format.FormatterRegistry registry);\n}", "des": "The main class for Spring WebFlux configuration."}
{"index": 12850, "repo": "spring-webflux-6.0.11", "code": "public interface WebFluxConfigurer {\n\t// Configure \"global\" cross-origin request processing.\n\tdefault void addCorsMappings(CorsRegistry registry);\n\t// Add custom Converters and Formatters for performing type conversion and formatting of annotated controller method arguments.\n\tdefault void addFormatters(org.springframework.format.FormatterRegistry registry);\n\t// Add resource handlers for serving static resources.\n\tdefault void addResourceHandlers(ResourceHandlerRegistry registry);\n}", "des": "Defines callback methods to customize the configuration for WebFlux applications enabled via @EnableWebFlux."}
{"index": 12851, "repo": "spring-webflux-6.0.11", "code": "public class WebFluxConfigurerComposite extends Object implements WebFluxConfigurer {\n\t// Configure \"global\" cross-origin request processing.\n\tvoid addCorsMappings(CorsRegistry registry);\n\t// Add custom Converters and Formatters for performing type conversion and formatting of annotated controller method arguments.\n\tvoid addFormatters(org.springframework.format.FormatterRegistry registry);\n\t// Add resource handlers for serving static resources.\n\tvoid addResourceHandlers(ResourceHandlerRegistry registry);\n}", "des": "A WebFluxConfigurer that delegates to one or more others."}
{"index": 12852, "repo": "spring-webflux-6.0.11", "code": "public class WebSessionMethodArgumentResolver extends HandlerMethodArgumentResolverSupport {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method argument value of type WebSession."}
{"index": 12853, "repo": "spring-webflux-6.0.11", "code": "public interface WebSocketClient {\n\t// A variant of execute(URI, WebSocketHandler) with custom headers.\n\treactor.core.publisher.Mono<Void> execute(URI url, org.springframework.http.HttpHeaders headers, WebSocketHandler handler);\n\t// Execute a handshake request to the given url and handle the resulting WebSocket session with the given handler.\n\treactor.core.publisher.Mono<Void> execute(URI url, WebSocketHandler handler);\n}", "des": "Contract for reactive-style handling of a WebSocket session."}
{"index": 12854, "repo": "spring-webflux-6.0.11", "code": "public interface WebSocketHandler {\n\t// Return the list of sub-protocols supported by this handler.\n\tdefault List<String> getSubProtocols();\n\t// Invoked when a new WebSocket connection is established, and allows handling of the session.\n\treactor.core.publisher.Mono<Void> handle(WebSocketSession session);\n}", "des": "Handler for a WebSocket session."}
{"index": 12855, "repo": "spring-webflux-6.0.11", "code": "@ImportRuntimeHints(org.springframework.web.reactive.socket.server.support.HandshakeWebSocketServiceRuntimeHints.class) public class WebSocketHandlerAdapter extends Object implements HandlerAdapter, org.springframework.core.Ordered {\n\t// Return the configured order for this instance.\n\tint getOrder();\n\t// Return the configured WebSocketService to handle requests.\n\tWebSocketService getWebSocketService();\n}", "des": "HandlerAdapter that allows DispatcherHandler to support handlers of type WebSocketHandler with such handlers mapped to URL patterns via SimpleUrlHandlerMapping."}
{"index": 12856, "repo": "spring-webflux-6.0.11", "code": "public class WebSocketMessage extends Object {\n\tboolean equals(Object other);\n\t// Return the message from the API of the underlying WebSocket library.\n\t<T> T getNativeMessage();\n\t// Return the message payload.\n\torg.springframework.core.io.buffer.DataBuffer getPayload();\n\t// A variant of getPayloadAsText(Charset) that uses UTF-8 for decoding the raw content to text.\n\tString getPayloadAsText();\n}", "des": "Representation of a WebSocket message."}
{"index": 12857, "repo": "spring-webflux-6.0.11", "code": "public static enum WebSocketMessage.Type extends Enum<WebSocketMessage.Type> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic WebSocketMessage.Type valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic WebSocketMessage.Type[] values();\n}", "des": "WebSocket message types."}
{"index": 12858, "repo": "spring-webflux-6.0.11", "code": "public interface WebSocketSession {\n\t// Factory method to create a binary WebSocketMessage using the bufferFactory() for the session.\n\tWebSocketMessage binaryMessage(Function<org.springframework.core.io.buffer.DataBufferFactory,org.springframework.core.io.buffer.DataBuffer> payloadFactory);\n\t// Return a DataBuffer Factory to create message payloads.\n\torg.springframework.core.io.buffer.DataBufferFactory bufferFactory();\n}", "des": "Represents a WebSocket session."}
{"index": 12859, "repo": "spring-retry-2.0.2", "code": "public class AnnotationMethodResolver extends Object implements MethodResolver {\n\t// Find a single Method on the given Class that contains the annotation type for which this resolver is searching.\n\tMethod findMethod(Class<?> clazz);\n\t// Find a single Method on the Class of the given candidate object that contains the annotation type for which this resolver is searching.\n\tMethod findMethod(Object candidate);\n}", "des": "MethodResolver implementation that finds a single Method on the given Class that contains the specified annotation type."}
{"index": 12860, "repo": "spring-retry-2.0.2", "code": "public interface BackOffPolicy {\n\t// Back off/pause in an implementation-specific fashion.\n\tvoid backOff(BackOffContext backOffContext);\n\t// Start a new block of back off operations.\n\tBackOffContext start(RetryContext context);\n}", "des": "Strategy interface to control back off between attempts in a single retry operation."}
{"index": 12861, "repo": "spring-retry-2.0.2", "code": "public class BackOffPolicyBuilder extends Object {\n\t// Builds the BackOffPolicy with the given parameters.\n\tBackOffPolicy build();\n\t// A canonical backoff period.\n\tBackOffPolicyBuilder delay(long delay);\n\t// Set a supplier for the delay.\n\tBackOffPolicyBuilder delaySupplier(Supplier<Long> delaySupplier);\n\t// The maximum wait in milliseconds between retries.\n\tBackOffPolicyBuilder maxDelay(long maxDelay);\n}", "des": "Fluent API for creating a BackOffPolicy based on given attributes."}
{"index": 12862, "repo": "spring-retry-2.0.2", "code": "public class BackToBackPatternClassifier<C,T> extends Object implements Classifier<C,T> {\n\t// Classify the input and map to a String, then take that and put it into a pattern matcher to match to an output value.\n\tT classify(C classifiable);\n\t// A convenience method for creating a pattern matching classifier for the matcher component.\n\tvoid setMatcherMap(Map<String,T> map);\n\t// A convenience method of creating a router classifier based on a plain old Java Object.\n\tvoid setRouterDelegate(Object delegate);\n}", "des": "A special purpose Classifier with easy configuration options for mapping from one arbitrary type of object to another via a pattern matcher."}
{"index": 12863, "repo": "spring-retry-2.0.2", "code": "public class BinaryExceptionClassifierRetryPolicy extends Object implements RetryPolicy {\n\tboolean canRetry(RetryContext context);\n\tvoid close(RetryContext status);\n\tBinaryExceptionClassifier getExceptionClassifier();\n\t// Acquire resources needed for the retry operation.\n\tRetryContext open(RetryContext parent);\n\t// Called once per retry attempt, after the callback fails.\n\tvoid registerThrowable(RetryContext context, Throwable throwable);\n}", "des": "A policy, that is based on BinaryExceptionClassifier."}
{"index": 12864, "repo": "spring-retry-2.0.2", "code": "public class ClassifierAdapter<C,T> extends Object implements Classifier<C,T> {\n\t// Classify the given object and return an object of a different type, possibly an enumerated type.\n\tT classify(C classifiable);\n\t// Search for the Classifier annotation on a method in the supplied delegate and use that to create a Classifier from the parameter type to the return type.\n\tfinal void setDelegate(Object delegate);\n\tvoid setDelegate(Classifier<C,T> delegate);\n}", "des": "Wrapper for an object to adapt it to the Classifier interface."}
{"index": 12865, "repo": "spring-retry-2.0.2", "code": "public class CompositeRetryPolicy extends Object implements RetryPolicy {\n\t// Delegate to the policies that were in operation when the context was created.\n\tboolean canRetry(RetryContext context);\n\t// Delegate to the policies that were in operation when the context was created.\n\tvoid close(RetryContext context);\n\t// Creates a new context that copies the existing policies and keeps a list of the contexts from each one.\n\tRetryContext open(RetryContext parent);\n}", "des": "A RetryPolicy that composes a list of other policies and delegates calls to them in order."}
{"index": 12866, "repo": "spring-retry-2.0.2", "code": "public class ExceptionClassifierRetryPolicy extends Object implements RetryPolicy {\n\t// Delegate to the policy currently activated in the context.\n\tboolean canRetry(RetryContext context);\n\t// Delegate to the policy currently activated in the context.\n\tvoid close(RetryContext context);\n\t// Create an active context that proxies a retry policy by choosing a target from the policy map.\n\tRetryContext open(RetryContext parent);\n}", "des": "A RetryPolicy that dynamically adapts to one of a set of injected policies according to the value of the latest exception."}
{"index": 12867, "repo": "spring-retry-2.0.2", "code": "public class ExponentialBackOffPolicy extends Object implements SleepingBackOffPolicy<ExponentialBackOffPolicy> {\n\t// Pause for the current backoff interval.\n\tvoid backOff(BackOffContext backOffContext);\n\tprotected void cloneValues(ExponentialBackOffPolicy target);\n\t// The initial period to sleep on the first backoff.\n\tlong getInitialInterval();\n\tprotected Supplier<Long> getInitialIntervalSupplier();\n\t// The maximum interval to sleep for.\n\tlong getMaxInterval();\n}", "des": "Implementation of BackOffPolicy that increases the back off period for each retry attempt in a given set up to a limit."}
{"index": 12868, "repo": "spring-retry-2.0.2", "code": "public class ExpressionRetryPolicy extends SimpleRetryPolicy implements org.springframework.beans.factory.BeanFactoryAware {\n\t// Test for retryable operation based on the status.\n\tboolean canRetry(RetryContext context);\n\t// Check if the expression is a template\n\tstatic boolean isTemplate(String expression);\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tExpressionRetryPolicy withBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}", "des": "Subclass of SimpleRetryPolicy that delegates to super.canRetry() and, if true, further evaluates an expression against the last thrown exception."}
{"index": 12869, "repo": "spring-retry-2.0.2", "code": "public class FixedBackOffPolicy extends StatelessBackOffPolicy implements SleepingBackOffPolicy<FixedBackOffPolicy> {\n\t// Set a supplier for the back off period in milliseconds.\n\tvoid backOffPeriodSupplier(Supplier<Long> backOffPeriodSupplier);\n\t// Pause for the setBackOffPeriod(long).\n\tprotected void doBackOff();\n\t// The backoff period in milliseconds.\n\tlong getBackOffPeriod();\n\t// Set the back off period in milliseconds.\n\tvoid setBackOffPeriod(long backOffPeriod);\n}", "des": "Implementation of BackOffPolicy that pauses for a fixed period of time before continuing."}
{"index": 12870, "repo": "spring-retry-2.0.2", "code": "public class MaxAttemptsRetryPolicy extends Object implements RetryPolicy {\n\t// Test for retryable operation based on the status.\n\tboolean canRetry(RetryContext context);\n\tvoid close(RetryContext status);\n\t// The maximum number of attempts before failure.\n\tint getMaxAttempts();\n\t// Get a status object that can be used to track the current operation according to this policy.\n\tRetryContext open(RetryContext parent);\n}", "des": "Simple retry policy that is aware only about attempt count and retries a fixed number of times."}
{"index": 12871, "repo": "spring-retry-2.0.2", "code": "public class MethodInvocationRetryListenerSupport extends Object implements RetryListener {\n\t// Called after the final attempt (successful or not).\n\t<T, E extends Throwable>void close(RetryContext context, RetryCallback<T,E> callback, Throwable throwable);\n\t// Called after the final attempt (successful or not).\n\tprotected <T, E extends Throwable>void doClose(RetryContext context, MethodInvocationRetryCallback<T,E> callback, Throwable throwable);\n}", "des": "Empty method implementation of RetryListener with focus on the AOP reflective method invocations providing convenience retry listener type-safe (with a `MethodInvocationRetryCallback` callback parameter) specific methods."}
{"index": 12872, "repo": "spring-retry-2.0.2", "code": "public class MethodInvokerUtils extends Object {\n\t// Create MethodInvoker for the method with the provided annotation on the provided object.\n\tstatic MethodInvoker getMethodInvokerByAnnotation(Class<? extends Annotation> annotationType, Object target);\n\t// Create a MethodInvoker from the delegate based on the annotationType.\n\tstatic MethodInvoker getMethodInvokerByAnnotation(Class<? extends Annotation> annotationType, Object target, Class<?>... expectedParamTypes);\n}", "des": "Utility methods to create MethodInvoker instances."}
{"index": 12873, "repo": "spring-retry-2.0.2", "code": "public interface MethodResolver {\n\t// Find a single Method on the given Class that matches this resolver's criteria.\n\tMethod findMethod(Class<?> clazz);\n\t// Find a single Method on the provided Object that matches this resolver's criteria.\n\tMethod findMethod(Object candidate);\n}", "des": "Strategy interface for detecting a single Method on a Class."}
{"index": 12874, "repo": "spring-retry-2.0.2", "code": "public class NeverRetryPolicy extends Object implements RetryPolicy {\n\t// Returns false after the first exception.\n\tboolean canRetry(RetryContext context);\n\t// Do nothing.\n\tvoid close(RetryContext context);\n\t// Return a context that can respond to early termination requests, but does nothing else.\n\tRetryContext open(RetryContext parent);\n\t// Make the throwable available for downstream use through the context.\n\tvoid registerThrowable(RetryContext context, Throwable throwable);\n}", "des": "A RetryPolicy that allows the first attempt but never permits a retry."}
{"index": 12875, "repo": "spring-retry-2.0.2", "code": "public class PatternMatchingClassifier<T> extends Object implements Classifier<String,T> {\n\t// Classify the input by matching it against the patterns provided in setPatternMap(Map).\n\tT classify(String classifiable);\n\t// A map from pattern to value\n\tvoid setPatternMap(Map<String,T> values);\n}", "des": "A Classifier that maps from String patterns with wildcards to a set of values of a given type."}
{"index": 12876, "repo": "spring-retry-2.0.2", "code": "public interface RetryContext extends org.springframework.core.AttributeAccessor {\n\t// Accessor for the exception object that caused the current retry.\n\tThrowable getLastThrowable();\n\t// Accessor for the parent context if retry blocks are nested.\n\tRetryContext getParent();\n\t// Counts the number of retry attempts.\n\tint getRetryCount();\n\t// Public accessor for the exhausted flag setExhaustedOnly().\n\tboolean isExhaustedOnly();\n}", "des": "Low-level access to ongoing retry operation."}
{"index": 12877, "repo": "spring-retry-2.0.2", "code": "public abstract class RetryInterceptorBuilder<T extends org.aopalliance.intercept.MethodInterceptor> extends Object {\n\t// Apply the backoff options.\n\tRetryInterceptorBuilder<T> backOffOptions(long initialInterval, double multiplier, long maxInterval);\n\t// Apply the back off policy.\n\tRetryInterceptorBuilder<T> backOffPolicy(BackOffPolicy policy);\n\tabstract T build();\n}", "des": "Simplified facade to make it easier and simpler to build a StatefulRetryOperationsInterceptor or (stateless) RetryOperationsInterceptor by providing a fluent interface to defining the behavior on error."}
{"index": 12878, "repo": "spring-retry-2.0.2", "code": "public interface RetryListener {\n\t// Called after the final attempt (successful or not).\n\tdefault <T, E extends Throwable>void close(RetryContext context, RetryCallback<T,E> callback, Throwable throwable);\n\t// Called after every unsuccessful attempt at a retry.\n\tdefault <T, E extends Throwable>void onError(RetryContext context, RetryCallback<T,E> callback, Throwable throwable);\n}", "des": "Interface for listener that can be used to add behaviour to a retry."}
{"index": 12879, "repo": "spring-retry-2.0.2", "code": "public interface RetryOperations {\n\t// Execute the supplied RetryCallback with the configured retry semantics.\n\t<T, E extends Throwable>T execute(RetryCallback<T,E> retryCallback);\n\t// Execute the supplied RetryCallback with a fallback on exhausted retry to the RecoveryCallback.\n\t<T, E extends Throwable>T execute(RetryCallback<T,E> retryCallback, RecoveryCallback<T> recoveryCallback);\n}", "des": "Defines the basic set of operations implemented by RetryOperations to execute operations with configurable retry behaviour."}
{"index": 12880, "repo": "spring-retry-2.0.2", "code": "public interface RetryPolicy extends Serializable {\n\tboolean canRetry(RetryContext context);\n\tvoid close(RetryContext context);\n\t// Acquire resources needed for the retry operation.\n\tRetryContext open(RetryContext parent);\n\t// Called once per retry attempt, after the callback fails.\n\tvoid registerThrowable(RetryContext context, Throwable throwable);\n}", "des": "A RetryPolicy is responsible for allocating and managing resources needed by RetryOperations."}
{"index": 12881, "repo": "spring-retry-2.0.2", "code": "public class RetrySimulator extends Object {\n\t// Execute the simulator for a give # of iterations.\n\tRetrySimulation executeSimulation(int numSimulations);\n\t// Execute a single simulation\n\tList<Long> executeSingleSimulation();\n}", "des": "A RetrySimulator is a tool for exercising retry + backoff operations."}
{"index": 12882, "repo": "spring-retry-2.0.2", "code": "public interface RetryState {\n\t// Key representing the state for a retry attempt.\n\tObject getKey();\n\t// Indicate whether a cache lookup can be avoided.\n\tboolean isForceRefresh();\n\t// Check whether this exception requires a rollback.\n\tboolean rollbackFor(Throwable exception);\n}", "des": "Stateful retry is characterised by having to recognise the items that are being processed, so this interface is used primarily to provide a cache key in between failed attempts."}
{"index": 12883, "repo": "spring-retry-2.0.2", "code": "public interface RetryStatistics {\n\t// Get the number of times a block failed to complete successfully, even after retry.\n\tint getAbortCount();\n\tint getCompleteCount();\n\t// Get the number of errors detected, whether or not they resulted in a retry.\n\tint getErrorCount();\n\t// Get an identifier for the retry block for reporting purposes.\n\tString getName();\n\t// Get the number of times a recovery callback was applied.\n\tint getRecoveryCount();\n}", "des": "Interface for statistics reporting of retry attempts."}
{"index": 12884, "repo": "spring-retry-2.0.2", "code": "public final class RetrySynchronizationManager extends Object {\n\t// Clear the current context at the end of a batch - should only be used by RetryOperations implementations.\n\tstatic RetryContext clear();\n\t// Public accessor for the locally enclosing RetryContext.\n\tstatic RetryContext getContext();\n\t// Method for registering a context - should only be used by RetryOperations implementations to ensure that getContext() always returns the correct value.\n\tstatic RetryContext register(RetryContext context);\n}", "des": "Global variable support for retry clients."}
{"index": 12885, "repo": "spring-retry-2.0.2", "code": "public class RetryTemplate extends Object implements RetryOperations {\n\t// Main entry point to configure RetryTemplate using fluent API.\n\tstatic RetryTemplateBuilder builder();\n\t// Decide whether to proceed with the ongoing retry attempt.\n\tprotected boolean canRetry(RetryPolicy retryPolicy, RetryContext context);\n}", "des": "Template class that simplifies the execution of operations with retry semantics."}
{"index": 12886, "repo": "spring-retry-2.0.2", "code": "public class RetryTemplateBuilder extends Object {\n\t// Build a new RetryTemplate.\n\tRetryTemplate build();\n\t// Use the provided BackOffPolicy.\n\tRetryTemplateBuilder customBackoff(BackOffPolicy backOffPolicy);\n\t// Use the provided RetryPolicy.\n\tRetryTemplateBuilder customPolicy(RetryPolicy policy);\n\t// Use an exponential backoff policy.\n\tRetryTemplateBuilder exponentialBackoff(long initialInterval, double multiplier, long maxInterval);\n}", "des": "Builder that provides a fluent API to configure new instances of RetryTemplate."}
{"index": 12887, "repo": "spring-retry-2.0.2", "code": "public class SimpleRetryPolicy extends Object implements RetryPolicy {\n\t// Test for retryable operation based on the status.\n\tboolean canRetry(RetryContext context);\n\tvoid close(RetryContext status);\n\t// The maximum number of attempts before failure.\n\tint getMaxAttempts();\n\t// Set a supplier for the number of attempts before retries are exhausted.\n\tvoid maxAttemptsSupplier(Supplier<Integer> maxAttemptsSupplier);\n}", "des": "Simple retry policy that retries a fixed number of times for a set of named exceptions (and subclasses)."}
{"index": 12888, "repo": "spring-retry-2.0.2", "code": "public class StatefulRetryOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor {\n\t// Wrap the method invocation in a stateful retry with the policy and other helpers provided.\n\tObject invoke(org.aopalliance.intercept.MethodInvocation invocation);\n\tvoid setKeyGenerator(MethodArgumentsKeyGenerator keyGenerator);\n\tvoid setLabel(String label);\n}", "des": "A MethodInterceptor that can be used to automatically retry calls to a method on a service if it fails."}
{"index": 12889, "repo": "spring-retry-2.0.2", "code": "public abstract class StatelessBackOffPolicy extends Object implements BackOffPolicy {\n\t// Delegates directly to the doBackOff() method without passing on the BackOffContext argument which is not needed for stateless implementations.\n\tfinal void backOff(BackOffContext backOffContext);\n\t// Sub-classes should implement this method to perform the actual back off.\n\tprotected abstract void doBackOff();\n\t// Returns 'null'.\n\tBackOffContext start(RetryContext status);\n}", "des": "Simple base class for BackOffPolicy implementations that maintain no state across invocations."}
{"index": 12890, "repo": "spring-retry-2.0.2", "code": "public class SubclassClassifier<T,C> extends Object implements Classifier<T,C> {\n\t// The keys is the type and this will be mapped along with all subclasses to the corresponding value.\n\tvoid add(Class<? extends T> type, C target);\n\t// Return the value from the type map whose key is the class of the given Throwable, or its nearest ancestor if a subclass.\n\tC classify(T classifiable);\n\tprotected Map<Class<? extends T>,C> getClassified();\n}", "des": "A Classifier for a parameterised object type based on a map."}
{"index": 12891, "repo": "spring-retry-2.0.2", "code": "public class TimeoutRetryPolicy extends Object implements RetryPolicy {\n\t// Only permits a retry if the timeout has not expired.\n\tboolean canRetry(RetryContext context);\n\tvoid close(RetryContext context);\n\t// The value of the timeout.\n\tlong getTimeout();\n\t// Acquire resources needed for the retry operation.\n\tRetryContext open(RetryContext parent);\n\t// Called once per retry attempt, after the callback fails.\n\tvoid registerThrowable(RetryContext context, Throwable throwable);\n}", "des": "A RetryPolicy that allows a retry only if it hasn't timed out."}
{"index": 12892, "repo": "spring-retry-2.0.2", "code": "public class UniformRandomBackOffPolicy extends StatelessBackOffPolicy implements SleepingBackOffPolicy<UniformRandomBackOffPolicy> {\n\t// Pause for the setMinBackOffPeriod(long).\n\tprotected void doBackOff();\n\t// The maximum backoff period in milliseconds.\n\tlong getMaxBackOffPeriod();\n\t// The minimum backoff period in milliseconds.\n\tlong getMinBackOffPeriod();\n\t// Set a supplier for the maximum back off period in milliseconds.\n\tvoid maxBackOffPeriodSupplier(Supplier<Long> backOffPeriodSupplier);\n}", "des": "Implementation of BackOffPolicy that pauses for a random period of time before continuing."}
{"index": 12893, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "@DisableCachingByDefault(because=\"Cacheability can only be determined by a concrete implementation\") public abstract class AbstractAot extends JavaExec {\n\t// The artifact ID of the application that is to be processed ahead-of-time.\n\tfinal Property<String> getArtifactId();\n\t// The directory to which AOT-generated classes should be written.\n\tfinal DirectoryProperty getClassesOutput();\n\t// The group ID of the application that is to be processed ahead-of-time.\n\tfinal Property<String> getGroupId();\n}", "des": "Specialization of JavaExec to be used as a base class for tasks that perform ahead-of-time processing."}
{"index": 12894, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "public interface BootArchive extends Task {\n\t// Adds files to the classpath to include in the archive.\n\tvoid classpath(Object... classpath);\n\t// Returns the classpath that will be included in the archive.\n\tFileCollection getClasspath();\n\t// Returns the LaunchScriptConfiguration that will control the script that is prepended to the archive.\n\tLaunchScriptConfiguration getLaunchScript();\n\t// Returns the fully-qualified name of the application's main class.\n\tProperty<String> getMainClass();\n}", "des": "A Spring Boot \"fat\" archive task."}
{"index": 12895, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "@DisableCachingByDefault public abstract class BootBuildImage extends DefaultTask {\n\t// Customizes the CacheSpec for the build cache using the given action.\n\tvoid buildCache(Action<CacheSpec> action);\n\t// Configures the Docker connection using the given action.\n\tvoid docker(Action<DockerSpec> action);\n\t// Returns the directory that contains application content in the image.\n\tabstract Property<String> getApplicationDirectory();\n}", "des": "A Task for bundling an application into an OCI image using a buildpack."}
{"index": 12896, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BootJar extends Jar implements BootArchive {\n\t// Calls the given action to add content to the BOOT-INF directory of the jar.\n\tCopySpec bootInf(Action<CopySpec> action);\n\t// Adds files to the classpath to include in the archive.\n\tvoid classpath(Object... classpath);\n\tvoid copy();\n\tprotected org.gradle.api.internal.file.copy.CopyAction createCopyAction();\n}", "des": "A custom Jar task that produces a Spring Boot executable jar."}
{"index": 12897, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "@DisableCachingByDefault(because=\"Application should always run\") public abstract class BootRun extends JavaExec {\n\tvoid exec();\n\t// Returns the property for whether the JVM's launch should be optimized.\n\tabstract Property<Boolean> getOptimizedLaunch();\n\t// Adds the source directories of the given sourceSet's resources to the start of the classpath in place of the output's resources directory.\n\tvoid sourceResources(SourceSet sourceSet);\n}", "des": "Custom JavaExec task for running a Spring Boot application."}
{"index": 12898, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BootWar extends War implements BootArchive {\n\tvoid copy();\n\tprotected org.gradle.api.internal.file.copy.CopyAction createCopyAction();\n\t// Returns the LaunchScriptConfiguration that will control the script that is prepended to the archive.\n\tLaunchScriptConfiguration getLaunchScript();\n\t// Returns the spec that describes the layers in a layered jar.\n\tLayeredSpec getLayered();\n}", "des": "A custom War task that produces a Spring Boot executable war."}
{"index": 12899, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BuildInfo extends DefaultTask {\n\t// Generates the build-info.properties file in the configured destination.\n\tvoid generateBuildProperties();\n\t// Returns the directory to which the build-info.properties file will be written.\n\tabstract DirectoryProperty getDestinationDir();\n\t// Returns the names of the properties to exclude from the output.\n\tabstract SetProperty<String> getExcludes();\n}", "des": "Task for generating a build-info.properties file from a Project."}
{"index": 12900, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "public abstract class BuildInfoProperties extends Object implements Serializable {\n\t// Returns the additional properties that will be included.\n\tabstract MapProperty<String,Object> getAdditional();\n\t// Returns the build.artifact property.\n\tabstract Property<String> getArtifact();\n\t// Returns the build.group property.\n\tabstract Property<String> getGroup();\n\t// Returns the build.name property.\n\tabstract Property<String> getName();\n\t// Returns the build.time property.\n\tabstract Property<String> getTime();\n}", "des": "The properties that are written into the build-info.properties file."}
{"index": 12901, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "public abstract class DockerSpec extends Object {\n\t// Customizes the DockerSpec.DockerRegistrySpec that configures authentication to the builder registry.\n\tvoid builderRegistry(Action<DockerSpec.DockerRegistrySpec> action);\n\tabstract Property<Boolean> getBindHostToBuilder();\n\t// Returns the DockerSpec.DockerRegistrySpec that configures authentication to the builder registry.\n\tDockerSpec.DockerRegistrySpec getBuilderRegistry();\n\tabstract Property<String> getCertPath();\n\tabstract Property<String> getHost();\n}", "des": "Encapsulates Docker configuration options."}
{"index": 12902, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "public abstract static class DockerSpec.DockerRegistrySpec extends Object {\n\t// Returns the email address associated with the Docker registry username.\n\tabstract Property<String> getEmail();\n\t// Returns the password to use when authenticating to the Docker registry.\n\tabstract Property<String> getPassword();\n\t// Returns the identity token to use when authenticating to the Docker registry.\n\tabstract Property<String> getToken();\n\t// Returns the Docker registry URL.\n\tabstract Property<String> getUrl();\n}", "des": "Encapsulates Docker registry authentication configuration options."}
{"index": 12903, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "public class LaunchScriptConfiguration extends Object implements Serializable {\n\t// Returns the properties that are applied to the launch script when it's being including in the executable archive.\n\tMap<String,String> getProperties();\n\t// Returns the script File that will be included in the executable archive.\n\tFile getScript();\n\t// Sets the properties that are applied to the launch script when it's being including in the executable archive.\n\tvoid properties(Map<String,String> properties);\n}", "des": "Encapsulates the configuration of the launch script for an executable jar or war."}
{"index": 12904, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "public abstract class LayeredSpec extends Object {\n\t// Customizes the LayeredSpec.ApplicationSpec using the given action.\n\tvoid application(Action<LayeredSpec.ApplicationSpec> action);\n\t// Customizes the LayeredSpec.DependenciesSpec using the given action.\n\tvoid dependencies(Action<LayeredSpec.DependenciesSpec> action);\n\t// Returns the LayeredSpec.ApplicationSpec that controls the layers to which application classes and resources belong.\n\tLayeredSpec.ApplicationSpec getApplication();\n}", "des": "Encapsulates the configuration for a layered archive."}
{"index": 12905, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "public static class LayeredSpec.DependenciesIntoLayerSpec extends LayeredSpec.IntoLayerSpec {\n\t// Configures the layer to exclude project dependencies.\n\tvoid excludeProjectDependencies();\n\t// Configures the layer to include project dependencies.\n\tvoid includeProjectDependencies();\n}", "des": "Spec that controls the dependencies that should be part of a particular layer."}
{"index": 12906, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "public static class LayeredSpec.IntoLayerSpec extends Object implements Serializable {\n\t// Adds patterns that control the content that is excluded from the layer.\n\tvoid exclude(String... patterns);\n\t// Adds patterns that control the content that is included in the layer.\n\tvoid include(String... patterns);\n}", "des": "Spec that controls the content that should be part of a particular layer."}
{"index": 12907, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "@CacheableTask public class ProcessTestAot extends AbstractAot {\n\tvoid exec();\n\t// Returns the classpath roots that should be scanned for test classes to process.\n\tfinal FileCollection getClasspathRoots();\n\t// Sets the classpath roots that should be scanned for test classes to process.\n\tvoid setClasspathRoots(FileCollection classpathRoots);\n}", "des": "Custom JavaExec task for ahead-of-time processing of a Spring Boot application's tests."}
{"index": 12908, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "@DisableCachingByDefault(because=\"Not worth caching\") public class ResolveMainClassName extends DefaultTask {\n\t// Returns the classpath that the task will examine when resolving the main class name.\n\tFileCollection getClasspath();\n\t// Returns the property for the explicitly configured main class name that should be used in favor of resolving the main class name from the classpath.\n\tProperty<String> getConfiguredMainClassName();\n}", "des": "Task for resolving the name of the application's main class."}
{"index": 12909, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "public class SpringBootExtension extends Object {\n\t// Creates a new BuildInfo task named bootBuildInfo and configures the Java plugin's classes task to depend upon it.\n\tvoid buildInfo();\n\t// Creates a new BuildInfo task named bootBuildInfo and configures the Java plugin's classes task to depend upon it.\n\tvoid buildInfo(Action<BuildInfo> configurer);\n\t// Returns the fully-qualified name of the application's main class.\n\tProperty<String> getMainClass();\n}", "des": "Entry point to Spring Boot's Gradle DSL."}
{"index": 12910, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "public enum ZipCompression extends Enum<ZipCompression> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ZipCompression valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ZipCompression[] values();\n}", "des": "An enumeration of supported compression options for an entry in a ZIP archive."}
{"index": 12911, "repo": "spring-context-support-6.0.11", "code": "public abstract class AbstractFallbackJCacheOperationSource extends Object implements JCacheOperationSource {\n\t// Should only public methods be allowed to have caching semantics?\n\tprotected boolean allowPublicMethodsOnly();\n\t// Subclasses need to implement this to return the caching operation for the given method, if any.\n\tprotected abstract JCacheOperation<?> findCacheOperation(Method method, Class<?> targetType);\n}", "des": "Abstract implementation of JCacheOperationSource that caches attributes for methods and implements a fallback policy: 1."}
{"index": 12912, "repo": "spring-context-support-6.0.11", "code": "public abstract class AbstractTransactionSupportingCacheManager extends org.springframework.cache.support.AbstractCacheManager {\n\tprotected org.springframework.cache.Cache decorateCache(org.springframework.cache.Cache cache);\n\t// Return whether this CacheManager has been configured to be transaction-aware.\n\tboolean isTransactionAware();\n\t// Set whether this CacheManager should expose transaction-aware Cache objects.\n\tvoid setTransactionAware(boolean transactionAware);\n}", "des": "Base class for CacheManager implementations that want to support built-in awareness of Spring-managed transactions."}
{"index": 12913, "repo": "spring-context-support-6.0.11", "code": "public class AdaptableJobFactory extends Object implements JobFactory {\n\t// Adapt the given job object to the Quartz Job interface.\n\tprotected Job adaptJob(Object jobObject);\n\t// Create an instance of the specified job class.\n\tprotected Object createJobInstance(TriggerFiredBundle bundle);\n\tJob newJob(TriggerFiredBundle bundle, Scheduler scheduler);\n}", "des": "JobFactory implementation that supports Runnable objects as well as standard Quartz Job instances."}
{"index": 12914, "repo": "spring-context-support-6.0.11", "code": "public class BeanFactoryJCacheOperationSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor {\n\torg.springframework.aop.Pointcut getPointcut();\n\t// Set the cache operation attribute source which is used to find cache attributes.\n\tvoid setCacheOperationSource(JCacheOperationSource cacheOperationSource);\n\t// Set the ClassFilter to use for this pointcut.\n\tvoid setClassFilter(org.springframework.aop.ClassFilter classFilter);\n}", "des": "Advisor driven by a JCacheOperationSource, used to include a cache advice bean for methods that are cacheable."}
{"index": 12915, "repo": "spring-context-support-6.0.11", "code": "public class CaffeineCacheManager extends Object implements org.springframework.cache.CacheManager {\n\t// Adapt the given new native Caffeine Cache instance to Spring's Cache abstraction for the specified cache name.\n\tprotected org.springframework.cache.Cache adaptCaffeineCache(String name, com.github.benmanes.caffeine.cache.Cache<Object,Object> cache);\n}", "des": "CacheManager implementation that lazily builds CaffeineCache instances for each CaffeineCacheManager.getCache(java.lang.String) request."}
{"index": 12916, "repo": "spring-context-support-6.0.11", "code": "public class ConfigurableMimeFileTypeMap extends FileTypeMap implements org.springframework.beans.factory.InitializingBean {\n\t// Creates the final merged mapping set.\n\tvoid afterPropertiesSet();\n\t// Compile a FileTypeMap from the mappings in the given mapping file and the given mapping entries.\n\tprotected FileTypeMap createFileTypeMap(org.springframework.core.io.Resource mappingLocation, String[] mappings);\n\t// Delegates to the underlying FileTypeMap.\n\tString getContentType(File file);\n}", "des": "Spring-configurable FileTypeMap implementation that will read MIME type to file extension mappings from a standard JavaMail MIME type mapping file, using a standard MimetypesFileTypeMap underneath."}
{"index": 12917, "repo": "spring-context-support-6.0.11", "code": "public class CronTriggerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<CronTrigger>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Return the trigger's JobDataMap.\n\tJobDataMap getJobDataMap();\n\tCronTrigger getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tvoid setBeanName(String beanName);\n}", "des": "A Spring FactoryBean for creating a Quartz CronTrigger instance, supporting bean-style usage for trigger configuration."}
{"index": 12918, "repo": "spring-context-support-6.0.11", "code": "public class DefaultJCacheOperationSource extends AnnotationJCacheOperationSource implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.SmartInitializingSingleton {\n\tvoid afterSingletonsInstantiated();\n\t// Locate or create an instance of the specified cache strategy type.\n\tprotected <T> T getBean(Class<T> type);\n\t// Return the specified cache manager to use, if any.\n\torg.springframework.cache.CacheManager getCacheManager();\n}", "des": "The default JCacheOperationSource implementation delegating default operations to configurable services with sensible defaults when not present."}
{"index": 12919, "repo": "spring-context-support-6.0.11", "code": "public class DelegatingJob extends Object implements Job {\n\t// Delegates execution to the underlying Runnable.\n\tvoid execute(JobExecutionContext context);\n\t// Return the wrapped Runnable implementation.\n\tfinal Runnable getDelegate();\n}", "des": "Simple Quartz Job adapter that delegates to a given Runnable instance."}
{"index": 12920, "repo": "spring-context-support-6.0.11", "code": "public class FreeMarkerConfigurationFactory extends Object {\n\t// Prepare the FreeMarker Configuration and return it.\n\tfreemarker.template.Configuration createConfiguration();\n\t// Return a TemplateLoader based on the given TemplateLoader list.\n\tprotected freemarker.cache.TemplateLoader getAggregateTemplateLoader(List<freemarker.cache.TemplateLoader> templateLoaders);\n}", "des": "Factory that configures a FreeMarker Configuration."}
{"index": 12921, "repo": "spring-context-support-6.0.11", "code": "public interface JavaMailSender extends MailSender {\n\t// Create a new JavaMail MimeMessage for the underlying JavaMail Session of this sender.\n\tMimeMessage createMimeMessage();\n\t// Create a new JavaMail MimeMessage for the underlying JavaMail Session of this sender, using the given input stream as the message source.\n\tMimeMessage createMimeMessage(InputStream contentStream);\n\t// Send the given JavaMail MIME message.\n\tvoid send(MimeMessage mimeMessage);\n}", "des": "Extended MailSender interface for JavaMail, supporting MIME messages both as direct arguments and through preparation callbacks."}
{"index": 12922, "repo": "spring-context-support-6.0.11", "code": "public class JavaMailSenderImpl extends Object implements JavaMailSender {\n\t// Obtain and connect a Transport from the underlying JavaMail Session, passing in the specified host, port, username, and password.\n\tprotected Transport connectTransport();\n\t// This implementation creates a SmartMimeMessage, holding the specified default encoding and default FileTypeMap.\n\tMimeMessage createMimeMessage();\n}", "des": "Production implementation of the JavaMailSender interface, supporting both JavaMail MimeMessages and Spring SimpleMailMessages."}
{"index": 12923, "repo": "spring-context-support-6.0.11", "code": "public class JCacheAspectSupport extends org.springframework.cache.interceptor.AbstractCacheInvoker implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected Object execute(org.springframework.cache.interceptor.CacheOperationInvoker invoker, Object target, Method method, Object[] args);\n\t// Return the CacheOperationSource for this cache aspect.\n\tJCacheOperationSource getCacheOperationSource();\n}", "des": "Base class for JSR-107 caching aspects, such as the JCacheInterceptor or an AspectJ aspect."}
{"index": 12924, "repo": "spring-context-support-6.0.11", "code": "public class JCacheCacheManager extends AbstractTransactionSupportingCacheManager {\n\tvoid afterPropertiesSet();\n\t// Return the backing JCache javax.cache.CacheManager.\n\tjavax.cache.CacheManager getCacheManager();\n\tprotected org.springframework.cache.Cache getMissingCache(String name);\n\t// Return whether this cache manager accepts and converts null values for all of its caches.\n\tboolean isAllowNullValues();\n\tprotected Collection<org.springframework.cache.Cache> loadCaches();\n}", "des": "CacheManager implementation backed by a JCache javax.cache.CacheManager."}
{"index": 12925, "repo": "spring-context-support-6.0.11", "code": "public interface JCacheOperation<A extends Annotation> extends org.springframework.cache.interceptor.BasicOperation, javax.cache.annotation.CacheMethodDetails<A> {\n\t// Return the CacheInvocationParameter instances based on the specified method arguments.\n\tjavax.cache.annotation.CacheInvocationParameter[] getAllParameters(Object... values);\n\t// Return the CacheResolver instance to use to resolve the cache to use for this operation.\n\torg.springframework.cache.interceptor.CacheResolver getCacheResolver();\n}", "des": "Model the base of JSR-107 cache operation through an interface contract."}
{"index": 12926, "repo": "spring-context-support-6.0.11", "code": "public interface MailSender {\n\t// Send the given simple mail message.\n\tvoid send(SimpleMailMessage simpleMessage);\n\t// Send the given array of simple mail messages in batch.\n\tvoid send(SimpleMailMessage... simpleMessages);\n}", "des": "This interface defines a strategy for sending simple mails."}
{"index": 12927, "repo": "spring-context-support-6.0.11", "code": "public class MailSendException extends MailException {\n\t// Return a Map with the failed messages as keys, and the thrown exceptions as values.\n\tfinal Map<Object,Exception> getFailedMessages();\n\tString getMessage();\n\t// Return an array with thrown message exceptions.\n\tfinal Exception[] getMessageExceptions();\n\tvoid printStackTrace(PrintStream ps);\n\tvoid printStackTrace(PrintWriter pw);\n}", "des": "Exception thrown when a mail sending error is encountered."}
{"index": 12928, "repo": "spring-context-support-6.0.11", "code": "public static class MethodInvokingJobDetailFactoryBean.MethodInvokingJob extends QuartzJobBean {\n\t// Invoke the method via the MethodInvoker.\n\tprotected void executeInternal(JobExecutionContext context);\n\t// Set the MethodInvoker to use.\n\tvoid setMethodInvoker(org.springframework.util.MethodInvoker methodInvoker);\n}", "des": "Quartz Job implementation that invokes a specified method."}
{"index": 12929, "repo": "spring-context-support-6.0.11", "code": "public class MimeMailMessage extends Object implements MailMessage {\n\t// Return the JavaMail MimeMessage that this MimeMailMessage is based on.\n\tfinal MimeMessage getMimeMessage();\n\t// Return the MimeMessageHelper that this MimeMailMessage is based on.\n\tfinal MimeMessageHelper getMimeMessageHelper();\n\tvoid setBcc(String bcc);\n\tvoid setBcc(String... bcc);\n\tvoid setCc(String cc);\n\tvoid setCc(String... cc);\n\tvoid setFrom(String from);\n\tvoid setReplyTo(String replyTo);\n\tvoid setSentDate(Date sentDate);\n}", "des": "Implementation of the MailMessage interface for a JavaMail MIME message, to let message population code interact with a simple message or a MIME message through a common interface."}
{"index": 12930, "repo": "spring-context-support-6.0.11", "code": "public class MimeMessageHelper extends Object {\n\t// Add an attachment to the MimeMessage, taking the content from a jakarta.activation.DataSource.\n\tvoid addAttachment(String attachmentFilename, DataSource dataSource);\n\t// Add an attachment to the MimeMessage, taking the content from a java.io.File.\n\tvoid addAttachment(String attachmentFilename, File file);\n}", "des": "Helper class for populating a MimeMessage."}
{"index": 12931, "repo": "spring-context-support-6.0.11", "code": "public abstract class QuartzJobBean extends Object implements Job {\n\t// This implementation applies the passed-in job data map as bean property values, and delegates to executeInternal afterwards.\n\tfinal void execute(JobExecutionContext context);\n\t// Execute the actual job.\n\tprotected abstract void executeInternal(JobExecutionContext context);\n}", "des": "Simple implementation of the Quartz Job interface, applying the passed-in JobDataMap and also the SchedulerContext as bean property values."}
{"index": 12932, "repo": "spring-context-support-6.0.11", "code": "public abstract class SchedulerAccessor extends Object implements org.springframework.context.ResourceLoaderAware {\n\t// Template method that determines the Scheduler to operate on.\n\tprotected abstract Scheduler getScheduler();\n\t// Register jobs and triggers (within a transaction, if possible).\n\tprotected void registerJobsAndTriggers();\n\t// Register all specified listeners with the Scheduler.\n\tprotected void registerListeners();\n}", "des": "Common base class for accessing a Quartz Scheduler, i.e."}
{"index": 12933, "repo": "spring-context-support-6.0.11", "code": "public class SchedulerAccessorBean extends SchedulerAccessor implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected Scheduler findDefaultScheduler();\n\tprotected Scheduler findScheduler(String schedulerName);\n\t// Return the Quartz Scheduler instance that this accessor operates on.\n\tScheduler getScheduler();\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}", "des": "Spring bean-style class for accessing a Quartz Scheduler, i.e."}
{"index": 12934, "repo": "spring-context-support-6.0.11", "code": "public class SimpleThreadPoolTaskExecutor extends SimpleThreadPool implements org.springframework.core.task.AsyncListenableTaskExecutor, org.springframework.scheduling.SchedulingTaskExecutor, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\tvoid afterPropertiesSet();\n\tvoid destroy();\n\tvoid execute(Runnable task);\n\t// Deprecated.\n\tvoid execute(Runnable task, long startTimeout);\n}", "des": "Subclass of Quartz's SimpleThreadPool that implements Spring's TaskExecutor interface and listens to Spring lifecycle callbacks."}
{"index": 12935, "repo": "spring-context-support-6.0.11", "code": "public class SimpleTriggerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<SimpleTrigger>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Return the trigger's JobDataMap.\n\tJobDataMap getJobDataMap();\n\tSimpleTrigger getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tvoid setBeanName(String beanName);\n}", "des": "A Spring FactoryBean for creating a Quartz SimpleTrigger instance, supporting bean-style usage for trigger configuration."}
{"index": 12936, "repo": "spring-context-support-6.0.11", "code": "public class SpringBeanJobFactory extends AdaptableJobFactory implements org.springframework.context.ApplicationContextAware, SchedulerContextAware {\n\t// Create the job instance, populating it with property values taken from the scheduler context, job data map and trigger data map.\n\tprotected Object createJobInstance(TriggerFiredBundle bundle);\n\t// Return whether the given job object is eligible for having its bean properties populated.\n\tprotected boolean isEligibleForPropertyPopulation(Object jobObject);\n}", "des": "Subclass of AdaptableJobFactory that also supports Spring-style dependency injection on bean properties."}
{"index": 12937, "repo": "spring-security-messaging-6.1.2", "code": "public class AuthenticationPrincipalArgumentResolver extends Object implements org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver {\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, org.springframework.messaging.Message<?> message);\n\t// Sets the ReactiveAdapterRegistry to be used.\n\tvoid setAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry adapterRegistry);\n}", "des": "Allows resolving the Authentication.getPrincipal() using the AuthenticationPrincipal annotation."}
{"index": 12938, "repo": "spring-security-messaging-6.1.2", "code": "public final class AuthorizationChannelInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor {\n\torg.springframework.messaging.Message<?> preSend(org.springframework.messaging.Message<?> message, org.springframework.messaging.MessageChannel channel);\n\t// Use this AuthorizationEventPublisher to publish the AuthorizationManager result.\n\tvoid setAuthorizationEventPublisher(org.springframework.security.authorization.AuthorizationEventPublisher eventPublisher);\n}", "des": "Authorizes Message resources using the provided AuthorizationManager"}
{"index": 12939, "repo": "spring-security-messaging-6.1.2", "code": "public class CurrentSecurityContextArgumentResolver extends Object implements org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver {\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, org.springframework.messaging.Message<?> message);\n\t// Sets the ReactiveAdapterRegistry to be used.\n\tvoid setAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry adapterRegistry);\n}", "des": "Allows resolving the Authentication.getPrincipal() using the CurrentSecurityContext annotation."}
{"index": 12940, "repo": "spring-security-messaging-6.1.2", "code": "public final class MessageAuthorizationContext<T> extends Object {\n\t// Returns the HttpServletRequest.\n\torg.springframework.messaging.Message<T> getMessage();\n\t// Returns the extracted variable values where the key is the variable name and the value is the variable value.\n\tMap<String,String> getVariables();\n}", "des": "An Message authorization context."}
{"index": 12941, "repo": "spring-security-messaging-6.1.2", "code": "public static final class MessageMatcherDelegatingAuthorizationManager.Builder extends Object {\n\t// Maps any Message to a security expression.\n\tMessageMatcherDelegatingAuthorizationManager.Builder.Constraint anyMessage();\n\torg.springframework.security.authorization.AuthorizationManager<org.springframework.messaging.Message<?>> build();\n}", "des": "A builder for MessageMatcherDelegatingAuthorizationManager."}
{"index": 12942, "repo": "spring-security-messaging-6.1.2", "code": "public final class SimpDestinationMessageMatcher extends Object implements MessageMatcher<Object> {\n\t// Creates a new instance with the specified pattern, SimpMessageType.MESSAGE, and PathMatcher.\n\tstatic SimpDestinationMessageMatcher createMessageMatcher(String pattern, org.springframework.util.PathMatcher matcher);\n}", "des": "MessageMatcher which compares a pre-defined pattern against the destination of a Message."}
{"index": 12943, "repo": "spring-security-web-6.1.2", "code": "public abstract class AbstractAuthenticationProcessingFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware {\n\tvoid afterPropertiesSet();\n\t// Performs actual authentication.\n\tabstract org.springframework.security.core.Authentication attemptAuthentication(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Abstract processor of browser-based HTTP-based authentication requests."}
{"index": 12944, "repo": "spring-security-web-6.1.2", "code": "public abstract class AbstractAuthenticationTargetUrlRequestHandler extends Object {\n\t// Builds the target URL according to the logic defined in the main class Javadoc.\n\tprotected String determineTargetUrl(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Base class containing the logic used by strategies which handle redirection to a URL and are passed an Authentication object as part of the contract."}
{"index": 12945, "repo": "spring-security-web-6.1.2", "code": "public abstract class AbstractPreAuthenticatedProcessingFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware {\n\t// Check whether all required properties have been set.\n\tvoid afterPropertiesSet();\n}", "des": "Base class for processing filters that handle pre-authenticated authentication requests, where it is assumed that the principal has already been authenticated by an external system."}
{"index": 12946, "repo": "spring-security-web-6.1.2", "code": "public abstract class AbstractSecurityWebApplicationInitializer extends Object implements org.springframework.web.WebApplicationInitializer {\n\t// Invoked after the springSecurityFilterChain is added.\n\tprotected void afterSpringSecurityFilterChain(jakarta.servlet.ServletContext servletContext);\n}", "des": "Registers the DelegatingFilterProxy to use the springSecurityFilterChain before any other registered Filter."}
{"index": 12947, "repo": "spring-security-web-6.1.2", "code": "public abstract class AbstractSessionFixationProtectionStrategy extends Object implements SessionAuthenticationStrategy, org.springframework.context.ApplicationEventPublisherAware {\n\t// Called when a user is newly authenticated.\n\tvoid onAuthentication(org.springframework.security.core.Authentication authentication, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "A base class for performing session fixation protection."}
{"index": 12948, "repo": "spring-security-web-6.1.2", "code": "public class AccessDeniedHandlerImpl extends Object implements AccessDeniedHandler {\n\t// Handles an access denied failure.\n\tvoid handle(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.access.AccessDeniedException accessDeniedException);\n\t// The error page to use.\n\tvoid setErrorPage(String errorPage);\n}", "des": "Base implementation of AccessDeniedHandler."}
{"index": 12949, "repo": "spring-security-web-6.1.2", "code": "public final class AndRequestMatcher extends Object implements RequestMatcher {\n\t// Returns a RequestMatcher.MatchResult for this HttpServletRequest.\n\tRequestMatcher.MatchResult matcher(jakarta.servlet.http.HttpServletRequest request);\n\t// Decides whether the rule implemented by the strategy matches the supplied request.\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "RequestMatcher that will return true if all of the passed in RequestMatcher instances match."}
{"index": 12950, "repo": "spring-security-web-6.1.2", "code": "public final class AntPathRequestMatcher extends Object implements RequestMatcher, RequestVariablesExtractor {\n\t// Creates a matcher with the specific pattern which will match all HTTP methods in a case-sensitive manner.\n\tstatic AntPathRequestMatcher antMatcher(String pattern);\n\t// Creates a matcher that will match all request with the supplied HTTP method in a case-sensitive manner.\n\tstatic AntPathRequestMatcher antMatcher(org.springframework.http.HttpMethod method);\n}", "des": "Matcher which compares a pre-defined ant-style pattern against the URL ( servletPath + pathInfo) of an HttpServletRequest."}
{"index": 12951, "repo": "spring-security-web-6.1.2", "code": "public class AuthenticationEntryPointFailureHandler extends Object implements AuthenticationFailureHandler {\n\t// Called when an authentication attempt fails.\n\tvoid onAuthenticationFailure(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.AuthenticationException exception);\n}", "des": "Adapts a AuthenticationEntryPoint into a AuthenticationFailureHandler"}
{"index": 12952, "repo": "spring-security-web-6.1.2", "code": "public interface AuthenticationSuccessHandler {\n\t// Called when a user has been successfully authenticated.\n\tdefault void onAuthenticationSuccess(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain chain, org.springframework.security.core.Authentication authentication);\n}", "des": "Strategy used to handle a successful user authentication."}
{"index": 12953, "repo": "spring-security-web-6.1.2", "code": "public class AuthorizationFilter extends org.springframework.web.filter.GenericFilterBean {\n\tvoid doFilter(jakarta.servlet.ServletRequest servletRequest, jakarta.servlet.ServletResponse servletResponse, jakarta.servlet.FilterChain chain);\n\t// Gets the AuthorizationManager used by this filter\n\torg.springframework.security.authorization.AuthorizationManager<jakarta.servlet.http.HttpServletRequest> getAuthorizationManager();\n\tboolean isObserveOncePerRequest();\n}", "des": "An authorization filter that restricts access to the URL using AuthorizationManager."}
{"index": 12954, "repo": "spring-security-web-6.1.2", "code": "public final class AuthorizationManagerWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware {\n\t// Determines whether the user represented by the supplied Authentication object is allowed to invoke the supplied URI, with the given .\n\tboolean isAllowed(String contextPath, String uri, String method, org.springframework.security.core.Authentication authentication);\n}", "des": "An implementation of WebInvocationPrivilegeEvaluator which delegates the checks to an instance of AuthorizationManager"}
{"index": 12955, "repo": "spring-security-web-6.1.2", "code": "public interface ChannelDecisionManager {\n\t// Decided whether the presented FilterInvocation provides the appropriate level of channel security based on the requested list of ConfigAttributes.\n\tvoid decide(FilterInvocation invocation, Collection<org.springframework.security.access.ConfigAttribute> config);\n\t// Indicates whether this ChannelDecisionManager is able to process the passed ConfigAttribute.\n\tboolean supports(org.springframework.security.access.ConfigAttribute attribute);\n}", "des": "Decides whether a web channel provides sufficient security."}
{"index": 12956, "repo": "spring-security-web-6.1.2", "code": "public interface ChannelProcessor {\n\t// Decided whether the presented FilterInvocation provides the appropriate level of channel security based on the requested list of ConfigAttributes.\n\tvoid decide(FilterInvocation invocation, Collection<org.springframework.security.access.ConfigAttribute> config);\n\t// Indicates whether this ChannelProcessor is able to process the passed ConfigAttribute.\n\tboolean supports(org.springframework.security.access.ConfigAttribute attribute);\n}", "des": "Decides whether a web channel meets a specific security condition."}
{"index": 12957, "repo": "spring-security-web-6.1.2", "code": "public static enum ClearSiteDataHeaderWriter.Directive extends Enum<ClearSiteDataHeaderWriter.Directive> {\n\tString getHeaderValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClearSiteDataHeaderWriter.Directive valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClearSiteDataHeaderWriter.Directive[] values();\n}", "des": "Represents the directive values expected by the ClearSiteDataHeaderWriter."}
{"index": 12958, "repo": "spring-security-web-6.1.2", "code": "public static enum ClearSiteDataServerHttpHeadersWriter.Directive extends Enum<ClearSiteDataServerHttpHeadersWriter.Directive> {\n\tString getHeaderValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClearSiteDataServerHttpHeadersWriter.Directive valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClearSiteDataServerHttpHeadersWriter.Directive[] values();\n}", "des": "Represents the directive values expected by the ClearSiteDataServerHttpHeadersWriter"}
{"index": 12959, "repo": "spring-security-web-6.1.2", "code": "public class ConcurrentSessionControlAuthenticationStrategy extends Object implements org.springframework.context.MessageSourceAware, SessionAuthenticationStrategy {\n\t// Allows subclasses to customise behaviour when too many sessions are detected.\n\tprotected void allowableSessionsExceeded(List<org.springframework.security.core.session.SessionInformation> sessions, int allowableSessions, org.springframework.security.core.session.SessionRegistry registry);\n}", "des": "Strategy which handles concurrent session-control."}
{"index": 12960, "repo": "spring-security-web-6.1.2", "code": "public final class ContentSecurityPolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the security policy directive(s) to be used in the response header.\n\tvoid setPolicyDirectives(String policyDirectives);\n\t// If true, includes the Content-Security-Policy-Report-Only header in the response, otherwise, defaults to the Content-Security-Policy header.\n\tvoid setReportOnly(boolean reportOnly);\n}", "des": "Provides support for Content Security Policy (CSP) Level 2."}
{"index": 12961, "repo": "spring-security-web-6.1.2", "code": "public final class ContentSecurityPolicyServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Set the policy directive(s) to be used in the response header.\n\tvoid setPolicyDirectives(String policyDirectives);\n\t// Set whether to include the Content-Security-Policy-Report-Only header in the response.\n\tvoid setReportOnly(boolean reportOnly);\n}", "des": "Writes the Contet-Security-Policy response header with configured policy directives."}
{"index": 12962, "repo": "spring-security-web-6.1.2", "code": "public final class CookieCsrfTokenRepository extends Object implements CsrfTokenRepository {\n\t// Generates a CsrfToken\n\tCsrfToken generateToken(jakarta.servlet.http.HttpServletRequest request);\n\t// Get the path that the CSRF cookie will be set to.\n\tString getCookiePath();\n\t// Loads the expected CsrfToken from the HttpServletRequest\n\tCsrfToken loadToken(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "A CsrfTokenRepository that persists the CSRF token in a cookie named \"XSRF-TOKEN\" and reads from the header \"X-XSRF-TOKEN\" following the conventions of AngularJS."}
{"index": 12963, "repo": "spring-security-web-6.1.2", "code": "public class CookieRequestCache extends Object implements RequestCache {\n\t// Returns a wrapper around the saved request, if it matches the current request.\n\tjakarta.servlet.http.HttpServletRequest getMatchingRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\t// Returns the saved request, leaving it cached.\n\tSavedRequest getRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "An Implementation of RequestCache which saves the original request URI in a cookie."}
{"index": 12964, "repo": "spring-security-web-6.1.2", "code": "public final class CookieServerCsrfTokenRepository extends Object implements ServerCsrfTokenRepository {\n\t// Generates a CsrfToken\n\treactor.core.publisher.Mono<CsrfToken> generateToken(org.springframework.web.server.ServerWebExchange exchange);\n\t// Loads the expected CsrfToken from the ServerWebExchange\n\treactor.core.publisher.Mono<CsrfToken> loadToken(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "A ServerCsrfTokenRepository that persists the CSRF token in a cookie named \"XSRF-TOKEN\" and reads from the header \"X-XSRF-TOKEN\" following the conventions of AngularJS."}
{"index": 12965, "repo": "spring-security-web-6.1.2", "code": "public class CookieServerRequestCache extends Object implements ServerRequestCache {\n\t// Get the URI that can be redirected to trigger the saved request to be used\n\treactor.core.publisher.Mono<URI> getRedirectUri(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "An implementation of ServerRequestCache that saves the requested URI in a cookie."}
{"index": 12966, "repo": "spring-security-web-6.1.2", "code": "public final class CrossOriginEmbedderPolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the CrossOriginEmbedderPolicyHeaderWriter.CrossOriginEmbedderPolicy value to be used in the Cross-Origin-Embedder-Policy header\n\tvoid setPolicy(CrossOriginEmbedderPolicyHeaderWriter.CrossOriginEmbedderPolicy embedderPolicy);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Inserts Cross-Origin-Embedder-Policy header."}
{"index": 12967, "repo": "spring-security-web-6.1.2", "code": "public final class CrossOriginEmbedderPolicyServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Sets the CrossOriginEmbedderPolicyServerHttpHeadersWriter.CrossOriginEmbedderPolicy value to be used in the Cross-Origin-Embedder-Policy header\n\tvoid setPolicy(CrossOriginEmbedderPolicyServerHttpHeadersWriter.CrossOriginEmbedderPolicy embedderPolicy);\n}", "des": "Inserts Cross-Origin-Embedder-Policy headers."}
{"index": 12968, "repo": "spring-security-web-6.1.2", "code": "public final class CrossOriginOpenerPolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the CrossOriginOpenerPolicyHeaderWriter.CrossOriginOpenerPolicy value to be used in the Cross-Origin-Opener-Policy header\n\tvoid setPolicy(CrossOriginOpenerPolicyHeaderWriter.CrossOriginOpenerPolicy openerPolicy);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Inserts the Cross-Origin-Opener-Policy header"}
{"index": 12969, "repo": "spring-security-web-6.1.2", "code": "public final class CrossOriginOpenerPolicyServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Sets the CrossOriginOpenerPolicyServerHttpHeadersWriter.CrossOriginOpenerPolicy value to be used in the Cross-Origin-Opener-Policy header\n\tvoid setPolicy(CrossOriginOpenerPolicyServerHttpHeadersWriter.CrossOriginOpenerPolicy openerPolicy);\n}", "des": "Inserts Cross-Origin-Opener-Policy header."}
{"index": 12970, "repo": "spring-security-web-6.1.2", "code": "public final class CrossOriginResourcePolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the CrossOriginResourcePolicyHeaderWriter.CrossOriginResourcePolicy value to be used in the Cross-Origin-Resource-Policy header\n\tvoid setPolicy(CrossOriginResourcePolicyHeaderWriter.CrossOriginResourcePolicy resourcePolicy);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Inserts Cross-Origin-Resource-Policy header"}
{"index": 12971, "repo": "spring-security-web-6.1.2", "code": "public final class CrossOriginResourcePolicyServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Sets the CrossOriginResourcePolicyServerHttpHeadersWriter.CrossOriginResourcePolicy value to be used in the Cross-Origin-Embedder-Policy header\n\tvoid setPolicy(CrossOriginResourcePolicyServerHttpHeadersWriter.CrossOriginResourcePolicy resourcePolicy);\n}", "des": "Inserts Cross-Origin-Resource-Policy headers."}
{"index": 12972, "repo": "spring-security-web-6.1.2", "code": "public final class CsrfAuthenticationStrategy extends Object implements SessionAuthenticationStrategy {\n\t// Performs Http session-related functionality when a new authentication occurs.\n\tvoid onAuthentication(org.springframework.security.core.Authentication authentication, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "CsrfAuthenticationStrategy is in charge of removing the CsrfToken upon authenticating."}
{"index": 12973, "repo": "spring-security-web-6.1.2", "code": "public final class CsrfFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\tprotected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain);\n\t// Specifies a AccessDeniedHandler that should be used when CSRF protection fails.\n\tvoid setAccessDeniedHandler(AccessDeniedHandler accessDeniedHandler);\n}", "des": "Applies CSRF protection using a synchronizer token pattern."}
{"index": 12974, "repo": "spring-security-web-6.1.2", "code": "public interface CsrfToken extends Serializable {\n\t// Gets the HTTP header that the CSRF is populated on the response and can be placed on requests instead of the parameter.\n\tString getHeaderName();\n\t// Gets the HTTP parameter name that should contain the token.\n\tString getParameterName();\n\t// Gets the token value.\n\tString getToken();\n}", "des": "Provides the information about an expected CSRF token."}
{"index": 12975, "repo": "spring-security-web-6.1.2", "code": "public interface CsrfTokenRepository {\n\t// Generates a CsrfToken\n\tCsrfToken generateToken(jakarta.servlet.http.HttpServletRequest request);\n\t// Defers loading the CsrfToken using the HttpServletRequest and HttpServletResponse until it is needed by the application.\n\tdefault DeferredCsrfToken loadDeferredToken(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "An API to allow changing the method in which the expected CsrfToken is associated to the HttpServletRequest."}
{"index": 12976, "repo": "spring-security-web-6.1.2", "code": "public class CsrfTokenRequestAttributeHandler extends Object implements CsrfTokenRequestHandler {\n\t// Handles a request using a CsrfToken.\n\tvoid handle(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, Supplier<CsrfToken> deferredCsrfToken);\n\t// The CsrfToken is available as a request attribute named CsrfToken.class.getName().\n\tfinal void setCsrfRequestAttributeName(String csrfRequestAttributeName);\n}", "des": "An implementation of the CsrfTokenRequestHandler interface that is capable of making the CsrfToken available as a request attribute and resolving the token value as either a header or parameter value of the request."}
{"index": 12977, "repo": "spring-security-web-6.1.2", "code": "@FunctionalInterface public interface CsrfTokenRequestHandler extends CsrfTokenRequestResolver {\n\t// Handles a request using a CsrfToken.\n\tvoid handle(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, Supplier<CsrfToken> csrfToken);\n\t// Returns the token value resolved from the provided HttpServletRequest and CsrfToken or null if not available.\n\tdefault String resolveCsrfTokenValue(jakarta.servlet.http.HttpServletRequest request, CsrfToken csrfToken);\n}", "des": "A callback interface that is used to make the CsrfToken created by the CsrfTokenRepository available as a request attribute."}
{"index": 12978, "repo": "spring-security-web-6.1.2", "code": "public final class DefaultCsrfToken extends Object implements CsrfToken {\n\t// Gets the HTTP header that the CSRF is populated on the response and can be placed on requests instead of the parameter.\n\tString getHeaderName();\n\t// Gets the HTTP parameter name that should contain the token.\n\tString getParameterName();\n\t// Gets the token value.\n\tString getToken();\n}", "des": "A CSRF token that is used to protect against CSRF attacks."}
{"index": 12979, "repo": "spring-security-web-6.1.2", "code": "public final class DefaultCsrfToken extends Object implements CsrfToken {\n\tboolean equals(Object obj);\n\t// Gets the HTTP header that the CSRF is populated on the response and can be placed on requests instead of the parameter.\n\tString getHeaderName();\n\t// Gets the HTTP parameter name that should contain the token.\n\tString getParameterName();\n\t// Gets the token value.\n\tString getToken();\n}", "des": "A CSRF token that is used to protect against CSRF attacks."}
{"index": 12980, "repo": "spring-security-web-6.1.2", "code": "public class DefaultHttpFirewall extends Object implements HttpFirewall {\n\t// Provides the request object which will be passed through the filter chain.\n\tFirewalledRequest getFirewalledRequest(jakarta.servlet.http.HttpServletRequest request);\n\t// Provides the response which will be passed through the filter chain.\n\tjakarta.servlet.http.HttpServletResponse getFirewalledResponse(jakarta.servlet.http.HttpServletResponse response);\n}", "des": "User's should consider using StrictHttpFirewall because rather than trying to sanitize a malicious URL it rejects the malicious URL providing better security guarantees."}
{"index": 12981, "repo": "spring-security-web-6.1.2", "code": "public class DefaultRedirectStrategy extends Object implements RedirectStrategy {\n\tprotected String calculateRedirectUrl(String contextPath, String url);\n\t// Returns true, if the redirection URL should be calculated minus the protocol and context path (defaults to false).\n\tprotected boolean isContextRelative();\n\t// Redirects the response to the supplied URL.\n\tvoid sendRedirect(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, String url);\n}", "des": "Simple implementation of RedirectStrategy which is the default used throughout the framework."}
{"index": 12982, "repo": "spring-security-web-6.1.2", "code": "public class DefaultServerRedirectStrategy extends Object implements ServerRedirectStrategy {\n\t// Performs a redirect based upon the provided ServerWebExchange and URI\n\treactor.core.publisher.Mono<Void> sendRedirect(org.springframework.web.server.ServerWebExchange exchange, URI location);\n\t// Sets if the location is relative to the context.\n\tvoid setContextRelative(boolean contextRelative);\n\t// The HttpStatus to use for the redirect.\n\tvoid setHttpStatus(org.springframework.http.HttpStatus httpStatus);\n}", "des": "The default ServerRedirectStrategy to use."}
{"index": 12983, "repo": "spring-security-web-6.1.2", "code": "public interface DeferredCsrfToken {\n\t// Gets the CsrfToken\n\tCsrfToken get();\n\t// Returns true if get() refers to a generated CsrfToken or false if it already existed.\n\tboolean isGenerated();\n}", "des": "An interface that allows delayed access to a CsrfToken that may be generated."}
{"index": 12984, "repo": "spring-security-web-6.1.2", "code": "public class DelegatingAuthenticationEntryPoint extends Object implements AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Commences an authentication scheme.\n\tvoid commence(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.AuthenticationException authException);\n}", "des": "An AuthenticationEntryPoint which selects a concrete AuthenticationEntryPoint based on a RequestMatcher evaluation."}
{"index": 12985, "repo": "spring-security-web-6.1.2", "code": "public class DelegatingServerAuthenticationEntryPoint extends Object implements ServerAuthenticationEntryPoint {\n\t// Initiates the authentication flow\n\treactor.core.publisher.Mono<Void> commence(org.springframework.web.server.ServerWebExchange exchange, org.springframework.security.core.AuthenticationException ex);\n\t// EntryPoint which is used when no RequestMatcher returned true\n\tvoid setDefaultEntryPoint(ServerAuthenticationEntryPoint defaultEntryPoint);\n}", "des": "A ServerAuthenticationEntryPoint which delegates to multiple ServerAuthenticationEntryPoint based on a ServerWebExchangeMatcher"}
{"index": 12986, "repo": "spring-security-web-6.1.2", "code": "public class ELRequestMatcher extends Object implements RequestMatcher {\n\t// Subclasses can override this methode if they want to use a different EL root context\n\torg.springframework.expression.EvaluationContext createELContext(jakarta.servlet.http.HttpServletRequest request);\n\t// Decides whether the rule implemented by the strategy matches the supplied request.\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "A RequestMatcher implementation which uses a SpEL expression"}
{"index": 12987, "repo": "spring-security-web-6.1.2", "code": "public class Enumerator<T> extends Object implements Enumeration<T> {\n\t// Tests if this enumeration contains more elements.\n\tboolean hasMoreElements();\n\t// Returns the next element of this enumeration if this enumeration has at least one more element to provide.\n\tT nextElement();\n}", "des": "Adapter that wraps an Enumeration around a Java 2 collection Iterator."}
{"index": 12988, "repo": "spring-security-web-6.1.2", "code": "public class ExceptionMappingAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {\n\t// Performs the redirect or forward to the defaultFailureUrl if set, otherwise returns a 401 error code.\n\tvoid onAuthenticationFailure(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.AuthenticationException exception);\n}", "des": "Uses the internal map of exceptions types to URLs to determine the destination on authentication failure."}
{"index": 12989, "repo": "spring-security-web-6.1.2", "code": "public final class FastHttpDateFormat extends Object {\n\t// Formats a specified date to HTTP format.\n\tstatic String formatDate(long value, DateFormat threadLocalformat);\n\t// Gets the current date in HTTP format.\n\tstatic String getCurrentDate();\n\t// Tries to parse the given date as an HTTP date.\n\tstatic long parseDate(String value, DateFormat[] threadLocalformats);\n}", "des": "Utility class to generate HTTP dates."}
{"index": 12990, "repo": "spring-security-web-6.1.2", "code": "public final class FeaturePolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Set the security policy directive(s) to be used in the response header.\n\tvoid setPolicyDirectives(String policyDirectives);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Provides support for Feature Policy."}
{"index": 12991, "repo": "spring-security-web-6.1.2", "code": "public final class FeaturePolicyServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Set the policy directive(s) to be used in the response header.\n\tvoid setPolicyDirectives(String policyDirectives);\n\t// Write the headers to the response.\n\treactor.core.publisher.Mono<Void> writeHttpHeaders(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Writes the Feature-Policy response header with configured policy directives."}
{"index": 12992, "repo": "spring-security-web-6.1.2", "code": "public class FilterChainProxy extends org.springframework.web.filter.GenericFilterBean {\n\tvoid afterPropertiesSet();\n\tvoid doFilter(jakarta.servlet.ServletRequest request, jakarta.servlet.ServletResponse response, jakarta.servlet.FilterChain chain);\n\tList<SecurityFilterChain> getFilterChains();\n\t// Convenience method, mainly for testing.\n\tList<jakarta.servlet.Filter> getFilters(String url);\n}", "des": "Delegates Filter requests to a list of Spring-managed filter beans."}
{"index": 12993, "repo": "spring-security-web-6.1.2", "code": "public static interface FilterChainProxy.FilterChainDecorator {\n\t// Provide a new FilterChain that accounts for needed security considerations when there are no security filters.\n\tdefault jakarta.servlet.FilterChain decorate(jakarta.servlet.FilterChain original);\n\t// Provide a new FilterChain that accounts for the provided filters as well as teh original filter chain.\n\tjakarta.servlet.FilterChain decorate(jakarta.servlet.FilterChain original, List<jakarta.servlet.Filter> filters);\n}", "des": "A strategy for decorating the provided filter chain with one that accounts for the SecurityFilterChain for a given request."}
{"index": 12994, "repo": "spring-security-web-6.1.2", "code": "public static final class FilterChainProxy.VirtualFilterChainDecorator extends Object implements FilterChainProxy.FilterChainDecorator {\n\t// Provide a new FilterChain that accounts for needed security considerations when there are no security filters.\n\tjakarta.servlet.FilterChain decorate(jakarta.servlet.FilterChain original);\n}", "des": "A FilterChainProxy.FilterChainDecorator that uses the FilterChainProxy.VirtualFilterChain"}
{"index": 12995, "repo": "spring-security-web-6.1.2", "code": "public class FilterInvocation extends Object {\n\tjakarta.servlet.FilterChain getChain();\n\t// Indicates the URL that the user agent used for this request.\n\tString getFullRequestUrl();\n\tjakarta.servlet.http.HttpServletRequest getHttpRequest();\n\tjakarta.servlet.http.HttpServletResponse getHttpResponse();\n\tjakarta.servlet.http.HttpServletRequest getRequest();\n\t// Obtains the web application-specific fragment of the URL.\n\tString getRequestUrl();\n\tjakarta.servlet.http.HttpServletResponse getResponse();\n}", "des": "Holds objects associated with a HTTP filter."}
{"index": 12996, "repo": "spring-security-web-6.1.2", "code": "public final class Header extends Object {\n\tboolean equals(Object obj);\n\t// Gets the name of the header.\n\tString getName();\n\t// Gets the values of the header.\n\tList<String> getValues();\n}", "des": "Represents a Header to be added to the HttpServletResponse"}
{"index": 12997, "repo": "spring-security-web-6.1.2", "code": "public final class HstsHeaderWriter extends Object implements HeaderWriter {\n\t// If true, subdomains should be considered HSTS Hosts too.\n\tvoid setIncludeSubDomains(boolean includeSubDomains);\n\t// Sets the value (in seconds) for the max-age directive of the Strict-Transport-Security header.\n\tvoid setMaxAgeInSeconds(long maxAgeInSeconds);\n\t// If true, preload will be included in HSTS Header.\n\tvoid setPreload(boolean preload);\n}", "des": "Provides support for HTTP Strict Transport Security (HSTS)."}
{"index": 12998, "repo": "spring-security-web-6.1.2", "code": "public class HttpBasicServerAuthenticationEntryPoint extends Object implements ServerAuthenticationEntryPoint {\n\t// Initiates the authentication flow\n\treactor.core.publisher.Mono<Void> commence(org.springframework.web.server.ServerWebExchange exchange, org.springframework.security.core.AuthenticationException ex);\n\t// Sets the realm to be used\n\tvoid setRealm(String realm);\n}", "des": "Prompts a user for HTTP Basic authentication."}
{"index": 12999, "repo": "spring-security-web-6.1.2", "code": "public interface HttpFirewall {\n\t// Provides the request object which will be passed through the filter chain.\n\tFirewalledRequest getFirewalledRequest(jakarta.servlet.http.HttpServletRequest request);\n\t// Provides the response which will be passed through the filter chain.\n\tjakarta.servlet.http.HttpServletResponse getFirewalledResponse(jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Interface which can be used to reject potentially dangerous requests and/or wrap them to control their behaviour."}
{"index": 13000, "repo": "spring-security-web-6.1.2", "code": "public final class HttpSessionCsrfTokenRepository extends Object implements CsrfTokenRepository {\n\t// Generates a CsrfToken\n\tCsrfToken generateToken(jakarta.servlet.http.HttpServletRequest request);\n\t// Loads the expected CsrfToken from the HttpServletRequest\n\tCsrfToken loadToken(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "A CsrfTokenRepository that stores the CsrfToken in the HttpSession."}
{"index": 13001, "repo": "spring-security-web-6.1.2", "code": "public class HttpSessionEventPublisher extends Object implements jakarta.servlet.http.HttpSessionListener, jakarta.servlet.http.HttpSessionIdListener {\n\t// Handles the HttpSessionEvent by publishing a HttpSessionCreatedEvent to the application appContext.\n\tvoid sessionCreated(jakarta.servlet.http.HttpSessionEvent event);\n\t// Handles the HttpSessionEvent by publishing a HttpSessionDestroyedEvent to the application appContext.\n\tvoid sessionDestroyed(jakarta.servlet.http.HttpSessionEvent event);\n}", "des": "Declared in web.xml as"}
{"index": 13002, "repo": "spring-security-web-6.1.2", "code": "public class HttpSessionRequestCache extends Object implements RequestCache {\n\t// Returns a wrapper around the saved request, if it matches the current request.\n\tjakarta.servlet.http.HttpServletRequest getMatchingRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\t// Returns the saved request, leaving it cached.\n\tSavedRequest getRequest(jakarta.servlet.http.HttpServletRequest currentRequest, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "RequestCache which stores the SavedRequest in the HttpSession."}
{"index": 13003, "repo": "spring-security-web-6.1.2", "code": "public class HttpSessionSecurityContextRepository extends Object implements SecurityContextRepository {\n\t// Allows the repository to be queried as to whether it contains a security context for the current request.\n\tboolean containsContext(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "A SecurityContextRepository implementation which stores the security context in the HttpSession between requests."}
{"index": 13004, "repo": "spring-security-web-6.1.2", "code": "public final class HttpsRedirectWebFilter extends Object implements org.springframework.web.server.WebFilter {\n\treactor.core.publisher.Mono<Void> filter(org.springframework.web.server.ServerWebExchange exchange, org.springframework.web.server.WebFilterChain chain);\n\t// Use this PortMapper for mapping custom ports\n\tvoid setPortMapper(PortMapper portMapper);\n}", "des": "Redirects any non-HTTPS request to its HTTPS equivalent."}
{"index": 13005, "repo": "spring-security-web-6.1.2", "code": "public class J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource extends Object implements org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails>, org.springframework.beans.factory.InitializingBean {\n\t// Check that all required properties have been set.\n\tvoid afterPropertiesSet();\n}", "des": "Implementation of AuthenticationDetailsSource which converts the user's J2EE roles (as obtained by calling HttpServletRequest.isUserInRole(String)) into GrantedAuthoritys and stores these in the authentication details object."}
{"index": 13006, "repo": "spring-security-web-6.1.2", "code": "public class J2eePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter {\n\t// For J2EE container-based authentication there is no generic way to retrieve the credentials, as such this method returns a fixed dummy value.\n\tprotected Object getPreAuthenticatedCredentials(jakarta.servlet.http.HttpServletRequest httpRequest);\n\t// Return the J2EE user name.\n\tprotected Object getPreAuthenticatedPrincipal(jakarta.servlet.http.HttpServletRequest httpRequest);\n}", "des": "This AbstractPreAuthenticatedProcessingFilter implementation is based on the J2EE container-based authentication mechanism."}
{"index": 13007, "repo": "spring-security-web-6.1.2", "code": "public class JaasApiIntegrationFilter extends org.springframework.web.filter.GenericFilterBean {\n\t// Attempts to obtain and run as a JAAS Subject using obtainSubject(ServletRequest).\n\tfinal void doFilter(jakarta.servlet.ServletRequest request, jakarta.servlet.ServletResponse response, jakarta.servlet.FilterChain chain);\n\t// Obtains the Subject to run as or null if no Subject is available.\n\tprotected Subject obtainSubject(jakarta.servlet.ServletRequest request);\n}", "des": "A Filter which attempts to obtain a JAAS Subject and continue the FilterChain running as that Subject."}
{"index": 13008, "repo": "spring-security-web-6.1.2", "code": "public class JdbcTokenRepositoryImpl extends org.springframework.jdbc.core.support.JdbcDaoSupport implements PersistentTokenRepository {\n\tvoid createNewToken(PersistentRememberMeToken token);\n\t// Loads the token data for the supplied series identifier.\n\tPersistentRememberMeToken getTokenForSeries(String seriesId);\n\tprotected void initDao();\n\tvoid removeUserTokens(String username);\n\t// Intended for convenience in debugging.\n\tvoid setCreateTableOnStartup(boolean createTableOnStartup);\n}", "des": "JDBC based persistent login token repository implementation."}
{"index": 13009, "repo": "spring-security-web-6.1.2", "code": "public class LogoutWebFilter extends Object implements org.springframework.web.server.WebFilter {\n\treactor.core.publisher.Mono<Void> filter(org.springframework.web.server.ServerWebExchange exchange, org.springframework.web.server.WebFilterChain chain);\n\t// Sets the ServerLogoutHandler.\n\tvoid setLogoutHandler(ServerLogoutHandler logoutHandler);\n\t// Sets the ServerLogoutSuccessHandler.\n\tvoid setLogoutSuccessHandler(ServerLogoutSuccessHandler logoutSuccessHandler);\n}", "des": "If the request matches, logs an authenticated user out by delegating to a ServerLogoutHandler."}
{"index": 13010, "repo": "spring-security-web-6.1.2", "code": "public class MatcherSecurityWebFilterChain extends Object implements SecurityWebFilterChain {\n\t// The WebFilter to use\n\treactor.core.publisher.Flux<org.springframework.web.server.WebFilter> getWebFilters();\n\t// Determines if this SecurityWebFilterChain matches the provided ServerWebExchange\n\treactor.core.publisher.Mono<Boolean> matches(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "A SecurityWebFilterChain that leverages a ServerWebExchangeMatcher to determine which WebFilter to execute."}
{"index": 13011, "repo": "spring-security-web-6.1.2", "code": "public final class MediaTypeRequestMatcher extends Object implements RequestMatcher {\n\t// Decides whether the rule implemented by the strategy matches the supplied request.\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request);\n\t// Set the MediaType to ignore from the ContentNegotiationStrategy.\n\tvoid setIgnoredMediaTypes(Set<org.springframework.http.MediaType> ignoredMediaTypes);\n}", "des": "Allows matching HttpServletRequest based upon the MediaType's resolved from a ContentNegotiationStrategy."}
{"index": 13012, "repo": "spring-security-web-6.1.2", "code": "public class MediaTypeServerWebExchangeMatcher extends Object implements ServerWebExchangeMatcher {\n\t// Determines if a request matches or not\n\treactor.core.publisher.Mono<ServerWebExchangeMatcher.MatchResult> matches(org.springframework.web.server.ServerWebExchange exchange);\n\t// Set the MediaType to ignore from the ContentNegotiationStrategy.\n\tvoid setIgnoredMediaTypes(Set<org.springframework.http.MediaType> ignoredMediaTypes);\n}", "des": "Matches based upon the accept headers."}
{"index": 13013, "repo": "spring-security-web-6.1.2", "code": "public class MvcRequestMatcher extends Object implements RequestMatcher, RequestVariablesExtractor {\n\tboolean equals(Object o);\n\t// Deprecated.\n\tMap<String,String> extractUriTemplateVariables(jakarta.servlet.http.HttpServletRequest request);\n\tprotected final String getServletPath();\n}", "des": "A RequestMatcher that uses Spring MVC's HandlerMappingIntrospector to match the path and extract variables."}
{"index": 13014, "repo": "spring-security-web-6.1.2", "code": "public static final class MvcRequestMatcher.Builder extends Object {\n\t// Creates an MvcRequestMatcher that uses the provided pattern to match\n\tMvcRequestMatcher pattern(String pattern);\n\t// Creates an MvcRequestMatcher that uses the provided pattern and HTTP method to match\n\tMvcRequestMatcher pattern(org.springframework.http.HttpMethod method, String pattern);\n\t// Sets the servlet path to be used by the MvcRequestMatcher generated by this builder\n\tMvcRequestMatcher.Builder servletPath(String servletPath);\n}", "des": "A builder for MvcRequestMatcher"}
{"index": 13015, "repo": "spring-security-web-6.1.2", "code": "public final class NoOpServerRequestCache extends Object implements ServerRequestCache {\n\tstatic NoOpServerRequestCache getInstance();\n\t// Get the URI that can be redirected to trigger the saved request to be used\n\treactor.core.publisher.Mono<URI> getRedirectUri(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "An implementation of ServerRequestCache that does nothing."}
{"index": 13016, "repo": "spring-security-web-6.1.2", "code": "public final class NoOpServerSecurityContextRepository extends Object implements ServerSecurityContextRepository {\n\tstatic NoOpServerSecurityContextRepository getInstance();\n\t// Loads the SecurityContext associated with the ServerWebExchange\n\treactor.core.publisher.Mono<org.springframework.security.core.context.SecurityContext> load(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "A do nothing implementation of ServerSecurityContextRepository."}
{"index": 13017, "repo": "spring-security-web-6.1.2", "code": "public class NullRememberMeServices extends Object implements RememberMeServices {\n\t// This method will be called whenever the SecurityContextHolder does not contain an Authentication object and Spring Security wishes to provide an implementation with an opportunity to authenticate the request using remember-me capabilities.\n\torg.springframework.security.core.Authentication autoLogin(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Implementation of NullRememberMeServices that does nothing."}
{"index": 13018, "repo": "spring-security-web-6.1.2", "code": "public class NullRequestCache extends Object implements RequestCache {\n\t// Returns a wrapper around the saved request, if it matches the current request.\n\tjakarta.servlet.http.HttpServletRequest getMatchingRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\t// Returns the saved request, leaving it cached.\n\tSavedRequest getRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Null implementation of RequestCache."}
{"index": 13019, "repo": "spring-security-web-6.1.2", "code": "public final class ObservationFilterChainDecorator extends Object implements FilterChainProxy.FilterChainDecorator {\n\t// Provide a new FilterChain that accounts for needed security considerations when there are no security filters.\n\tjakarta.servlet.FilterChain decorate(jakarta.servlet.FilterChain original);\n}", "des": "A FilterChainProxy.FilterChainDecorator that wraps the chain in before and after observations"}
{"index": 13020, "repo": "spring-security-web-6.1.2", "code": "public final class ObservationWebFilterChainDecorator extends Object implements WebFilterChainProxy.WebFilterChainDecorator {\n\t// Provide a new FilterChain that accounts for needed security considerations when there are no security filters.\n\torg.springframework.web.server.WebFilterChain decorate(org.springframework.web.server.WebFilterChain original);\n}", "des": "A WebFilterChainProxy.WebFilterChainDecorator that wraps the chain in before and after observations"}
{"index": 13021, "repo": "spring-security-web-6.1.2", "code": "public abstract class OnCommittedResponseWrapper extends jakarta.servlet.http.HttpServletResponseWrapper {\n\tvoid addHeader(String name, String value);\n\t// Invoke this method to disable invoking onResponseCommitted() when the HttpServletResponse is committed.\n\tprotected void disableOnResponseCommitted();\n\t// Makes sure onResponseCommitted() is invoked before calling the superclass flushBuffer()\n\tvoid flushBuffer();\n}", "des": "Base class for response wrappers which encapsulate the logic for handling an event when the HttpServletResponse is committed."}
{"index": 13022, "repo": "spring-security-web-6.1.2", "code": "public final class OrRequestMatcher extends Object implements RequestMatcher {\n\t// Returns a RequestMatcher.MatchResult for this HttpServletRequest.\n\tRequestMatcher.MatchResult matcher(jakarta.servlet.http.HttpServletRequest request);\n\t// Decides whether the rule implemented by the strategy matches the supplied request.\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "RequestMatcher that will return true if any of the passed in RequestMatcher instances match."}
{"index": 13023, "repo": "spring-security-web-6.1.2", "code": "public final class PermissionsPolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the policy to be used in the response header.\n\tvoid setPolicy(String policy);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Provides support for Permisisons Policy."}
{"index": 13024, "repo": "spring-security-web-6.1.2", "code": "public final class PermissionsPolicyServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Set the policy to be used in the response header.\n\tvoid setPolicy(String policy);\n\t// Write the headers to the response.\n\treactor.core.publisher.Mono<Void> writeHttpHeaders(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Writes the Permissions-Policy response header with configured policy directives."}
{"index": 13025, "repo": "spring-security-web-6.1.2", "code": "public class PersistentTokenBasedRememberMeServices extends AbstractRememberMeServices {\n\tprotected String generateSeriesData();\n\tprotected String generateTokenData();\n\t// Implementation of LogoutHandler.\n\tvoid logout(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.Authentication authentication);\n}", "des": "RememberMeServices implementation based on Barry Jaspan's Improved Persistent Login Cookie Best Practice."}
{"index": 13026, "repo": "spring-security-web-6.1.2", "code": "public interface PortMapper {\n\t// Locates the HTTP port associated with the specified HTTPS port.\n\tInteger lookupHttpPort(Integer httpsPort);\n\t// Locates the HTTPS port associated with the specified HTTP port.\n\tInteger lookupHttpsPort(Integer httpPort);\n}", "des": "PortMapper implementations provide callers with information about which HTTP ports are associated with which HTTPS ports on the system, and vice versa."}
{"index": 13027, "repo": "spring-security-web-6.1.2", "code": "public class PortMapperImpl extends Object implements PortMapper {\n\t// Returns the translated (Integer -> Integer) version of the original port mapping specified via setHttpsPortMapping()\n\tMap<Integer,Integer> getTranslatedPortMappings();\n\t// Locates the HTTP port associated with the specified HTTPS port.\n\tInteger lookupHttpPort(Integer httpsPort);\n\t// Locates the HTTPS port associated with the specified HTTP port.\n\tInteger lookupHttpsPort(Integer httpPort);\n}", "des": "Concrete implementation of PortMapper that obtains HTTP:HTTPS pairs from the application context."}
{"index": 13028, "repo": "spring-security-web-6.1.2", "code": "public class PreAuthenticatedAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered {\n\t// Check whether all required properties have been set.\n\tvoid afterPropertiesSet();\n\t// Authenticate the given PreAuthenticatedAuthenticationToken.\n\torg.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication authentication);\n}", "des": "Processes a pre-authenticated authentication request."}
{"index": 13029, "repo": "spring-security-web-6.1.2", "code": "public class PreAuthenticatedAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Get the credentials\n\tObject getCredentials();\n\t// Get the principal\n\tObject getPrincipal();\n}", "des": "Authentication implementation for pre-authenticated authentication."}
{"index": 13030, "repo": "spring-security-web-6.1.2", "code": "public class PreAuthenticatedGrantedAuthoritiesUserDetailsService extends Object implements org.springframework.security.core.userdetails.AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken> {\n\t// Creates the final UserDetails object.\n\tprotected org.springframework.security.core.userdetails.UserDetails createUserDetails(org.springframework.security.core.Authentication token, Collection<? extends org.springframework.security.core.GrantedAuthority> authorities);\n}", "des": "This AuthenticationUserDetailsService implementation creates a UserDetails object based solely on the information contained in the given PreAuthenticatedAuthenticationToken."}
{"index": 13031, "repo": "spring-security-web-6.1.2", "code": "public class RedirectServerAuthenticationEntryPoint extends Object implements ServerAuthenticationEntryPoint {\n\t// Initiates the authentication flow\n\treactor.core.publisher.Mono<Void> commence(org.springframework.web.server.ServerWebExchange exchange, org.springframework.security.core.AuthenticationException ex);\n\t// Sets the RedirectStrategy to use.\n\tvoid setRedirectStrategy(ServerRedirectStrategy redirectStrategy);\n}", "des": "Performs a redirect to a specified location."}
{"index": 13032, "repo": "spring-security-web-6.1.2", "code": "public class RedirectServerAuthenticationFailureHandler extends Object implements ServerAuthenticationFailureHandler {\n\t// Invoked when authentication attempt fails\n\treactor.core.publisher.Mono<Void> onAuthenticationFailure(WebFilterExchange webFilterExchange, org.springframework.security.core.AuthenticationException exception);\n\t// Sets the RedirectStrategy to use.\n\tvoid setRedirectStrategy(ServerRedirectStrategy redirectStrategy);\n}", "des": "Performs a redirect to a specified location."}
{"index": 13033, "repo": "spring-security-web-6.1.2", "code": "public class RedirectServerAuthenticationSuccessHandler extends Object implements ServerAuthenticationSuccessHandler {\n\t// Invoked when the application authenticates successfully\n\treactor.core.publisher.Mono<Void> onAuthenticationSuccess(WebFilterExchange webFilterExchange, org.springframework.security.core.Authentication authentication);\n\t// Where the user is redirected to upon authentication success\n\tvoid setLocation(URI location);\n}", "des": "Performs a redirect on authentication success."}
{"index": 13034, "repo": "spring-security-web-6.1.2", "code": "public class RedirectServerLogoutSuccessHandler extends Object implements ServerLogoutSuccessHandler {\n\t// Invoked after log out was successful\n\treactor.core.publisher.Mono<Void> onLogoutSuccess(WebFilterExchange exchange, org.springframework.security.core.Authentication authentication);\n\t// The URL to redirect to after successfully logging out.\n\tvoid setLogoutSuccessUrl(URI logoutSuccessUrl);\n}", "des": "Performs a redirect on log out success."}
{"index": 13035, "repo": "spring-security-web-6.1.2", "code": "public class ReferrerPolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the policy to be used in the response header.\n\tvoid setPolicy(ReferrerPolicyHeaderWriter.ReferrerPolicy policy);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Provides support for Referrer Policy."}
{"index": 13036, "repo": "spring-security-web-6.1.2", "code": "public final class ReferrerPolicyServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Set the policy to be used in the response header.\n\tvoid setPolicy(ReferrerPolicyServerHttpHeadersWriter.ReferrerPolicy policy);\n\t// Write the headers to the response.\n\treactor.core.publisher.Mono<Void> writeHttpHeaders(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Writes the Referrer-Policy response header."}
{"index": 13037, "repo": "spring-security-web-6.1.2", "code": "public final class RegexRequestMatcher extends Object implements RequestMatcher {\n\t// Performs the match of the request URL (servletPath + pathInfo + queryString ) against the compiled pattern.\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request);\n\t// Creates a case-sensitive Pattern instance to match against the request.\n\tstatic RegexRequestMatcher regexMatcher(String pattern);\n}", "des": "Uses a regular expression to decide whether a supplied the URL of a supplied HttpServletRequest."}
{"index": 13038, "repo": "spring-security-web-6.1.2", "code": "public interface RememberMeServices {\n\t// This method will be called whenever the SecurityContextHolder does not contain an Authentication object and Spring Security wishes to provide an implementation with an opportunity to authenticate the request using remember-me capabilities.\n\torg.springframework.security.core.Authentication autoLogin(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Implement by a class that is capable of providing a remember-me service."}
{"index": 13039, "repo": "spring-security-web-6.1.2", "code": "public class RequestAttributeAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter {\n\t// Credentials aren't usually applicable, but if a credentialsEnvironmentVariable is set, this will be read and used as the credentials value.\n\tprotected Object getPreAuthenticatedCredentials(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "A simple pre-authenticated filter which obtains the username from request attributes, for use with SSO systems such as Stanford WebAuth or Shibboleth."}
{"index": 13040, "repo": "spring-security-web-6.1.2", "code": "public final class RequestAttributeSecurityContextRepository extends Object implements SecurityContextRepository {\n\t// Allows the repository to be queried as to whether it contains a security context for the current request.\n\tboolean containsContext(jakarta.servlet.http.HttpServletRequest request);\n\t// Obtains the security context for the supplied request.\n\torg.springframework.security.core.context.SecurityContext loadContext(HttpRequestResponseHolder requestResponseHolder);\n}", "des": "Stores the SecurityContext on a ServletRequest.setAttribute(String, Object) so that it can be restored when different dispatch types occur."}
{"index": 13041, "repo": "spring-security-web-6.1.2", "code": "public final class RequestAuthorizationContext extends Object {\n\t// Returns the HttpServletRequest.\n\tjakarta.servlet.http.HttpServletRequest getRequest();\n\t// Returns the extracted variable values where the key is the variable name and the value is the variable value.\n\tMap<String,String> getVariables();\n}", "des": "An HttpServletRequest authorization context."}
{"index": 13042, "repo": "spring-security-web-6.1.2", "code": "public interface RequestCache {\n\t// Returns a wrapper around the saved request, if it matches the current request.\n\tjakarta.servlet.http.HttpServletRequest getMatchingRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\t// Returns the saved request, leaving it cached.\n\tSavedRequest getRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Implements \"saved request\" logic, allowing a single request to be retrieved and restarted after redirecting to an authentication mechanism."}
{"index": 13043, "repo": "spring-security-web-6.1.2", "code": "public class RequestHeaderAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter {\n\t// Credentials aren't usually applicable, but if a credentialsRequestHeader is set, this will be read and used as the credentials value.\n\tprotected Object getPreAuthenticatedCredentials(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "A simple pre-authenticated filter which obtains the username from a request header, for use with systems such as CA Siteminder."}
{"index": 13044, "repo": "spring-security-web-6.1.2", "code": "public interface RequestMatcher {\n\t// Returns a MatchResult for this RequestMatcher The default implementation returns Collections.emptyMap() when RequestMatcher.MatchResult.getVariables() is invoked.\n\tdefault RequestMatcher.MatchResult matcher(jakarta.servlet.http.HttpServletRequest request);\n\t// Decides whether the rule implemented by the strategy matches the supplied request.\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "Simple strategy to match an HttpServletRequest."}
{"index": 13045, "repo": "spring-security-web-6.1.2", "code": "public static class RequestMatcher.MatchResult extends Object {\n\t// Returns the extracted variable values where the key is the variable name and the value is the variable value\n\tMap<String,String> getVariables();\n\tboolean isMatch();\n\t// Creates an instance of RequestMatcher.MatchResult that is a match with no variables\n\tstatic RequestMatcher.MatchResult match();\n}", "des": "The result of matching against an HttpServletRequest Contains the status, true or false, of the match and if present, any variables extracted from the match"}
{"index": 13046, "repo": "spring-security-web-6.1.2", "code": "public final class RequestMatcherDelegatingAuthenticationManagerResolver extends Object implements org.springframework.security.authentication.AuthenticationManagerResolver<jakarta.servlet.http.HttpServletRequest> {\n\t// Creates a builder for RequestMatcherDelegatingAuthorizationManager.\n\tstatic RequestMatcherDelegatingAuthenticationManagerResolver.Builder builder();\n\torg.springframework.security.authentication.AuthenticationManager resolve(jakarta.servlet.http.HttpServletRequest context);\n}", "des": "An AuthenticationManagerResolver that returns a AuthenticationManager instances based upon the type of HttpServletRequest passed into RequestMatcherDelegatingAuthenticationManagerResolver.resolve(HttpServletRequest)."}
{"index": 13047, "repo": "spring-security-web-6.1.2", "code": "public static final class RequestMatcherDelegatingAuthenticationManagerResolver.Builder extends Object {\n\t// Maps a RequestMatcher to an AuthorizationManager.\n\tRequestMatcherDelegatingAuthenticationManagerResolver.Builder add(RequestMatcher matcher, org.springframework.security.authentication.AuthenticationManager manager);\n\t// Creates a RequestMatcherDelegatingAuthenticationManagerResolver instance.\n\tRequestMatcherDelegatingAuthenticationManagerResolver build();\n}", "des": "A builder for RequestMatcherDelegatingAuthenticationManagerResolver."}
{"index": 13048, "repo": "spring-security-web-6.1.2", "code": "public final class RequestMatcherDelegatingAuthorizationManager extends Object implements org.springframework.security.authorization.AuthorizationManager<jakarta.servlet.http.HttpServletRequest> {\n\t// Creates a builder for RequestMatcherDelegatingAuthorizationManager.\n\tstatic RequestMatcherDelegatingAuthorizationManager.Builder builder();\n}", "des": "An AuthorizationManager which delegates to a specific AuthorizationManager based on a RequestMatcher evaluation."}
{"index": 13049, "repo": "spring-security-web-6.1.2", "code": "public static final class RequestMatcherDelegatingAuthorizationManager.Builder extends Object {\n\t// Maps a RequestMatcher to an AuthorizationManager.\n\tRequestMatcherDelegatingAuthorizationManager.Builder add(RequestMatcher matcher, org.springframework.security.authorization.AuthorizationManager<RequestAuthorizationContext> manager);\n\t// Creates a RequestMatcherDelegatingAuthorizationManager instance.\n\tRequestMatcherDelegatingAuthorizationManager build();\n}", "des": "A builder for RequestMatcherDelegatingAuthorizationManager."}
{"index": 13050, "repo": "spring-security-web-6.1.2", "code": "public final class RequestMatcherDelegatingWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware {\n\t// Determines whether the user represented by the supplied Authentication object is allowed to invoke the supplied URI.\n\tboolean isAllowed(String contextPath, String uri, String method, org.springframework.security.core.Authentication authentication);\n}", "des": "A WebInvocationPrivilegeEvaluator which delegates to a list of WebInvocationPrivilegeEvaluator based on a RequestMatcher evaluation"}
{"index": 13051, "repo": "spring-security-web-6.1.2", "code": "public final class RequestMatchers extends Object {\n\t// Creates a RequestMatcher that matches if all the given RequestMatchers match, if matchers are empty then the returned matcher always matches.\n\tstatic RequestMatcher allOf(RequestMatcher... matchers);\n\t// Creates a RequestMatcher that matches if at least one of the given RequestMatchers matches, if matchers are empty then the returned matcher never matches.\n\tstatic RequestMatcher anyOf(RequestMatcher... matchers);\n}", "des": "A factory class to create RequestMatcher instances."}
{"index": 13052, "repo": "spring-security-web-6.1.2", "code": "public class SavedCookie extends Object implements Serializable {\n\t// Deprecated, for removal: This API element is subject to removal in a future version.\n\tString getComment();\n\tjakarta.servlet.http.Cookie getCookie();\n\tString getDomain();\n\tint getMaxAge();\n\tString getName();\n\tString getPath();\n\tString getValue();\n\t// Deprecated, for removal: This API element is subject to removal in a future version.\n\tint getVersion();\n\tboolean isSecure();\n}", "des": "Stores off the values of a cookie in a serializable holder"}
{"index": 13053, "repo": "spring-security-web-6.1.2", "code": "public class SecurityContextHolderAwareRequestFilter extends org.springframework.web.filter.GenericFilterBean {\n\tvoid afterPropertiesSet();\n\tvoid doFilter(jakarta.servlet.ServletRequest req, jakarta.servlet.ServletResponse res, jakarta.servlet.FilterChain chain);\n\t// Sets the AuthenticationEntryPoint used when integrating HttpServletRequest with Servlet 3 APIs.\n\tvoid setAuthenticationEntryPoint(AuthenticationEntryPoint authenticationEntryPoint);\n}", "des": "A Filter which populates the ServletRequest with a request wrapper which implements the servlet API security methods."}
{"index": 13054, "repo": "spring-security-web-6.1.2", "code": "public class SecurityContextHolderAwareRequestWrapper extends jakarta.servlet.http.HttpServletRequestWrapper {\n\t// Returns the principal's name, as obtained from the SecurityContextHolder.\n\tString getRemoteUser();\n\t// Returns the Authentication (which is a subclass of Principal), or null if unavailable.\n\tPrincipal getUserPrincipal();\n\t// Simple searches for an exactly matching GrantedAuthority.getAuthority().\n\tboolean isUserInRole(String role);\n}", "des": "A Spring Security-aware HttpServletRequestWrapper, which uses the SecurityContext-defined Authentication object to implement the servlet API security methods: SecurityContextHolderAwareRequestWrapper.getUserPrincipal() SecurityContextHolderAwareRequestWrapper.isUserInRole(String) HttpServletRequestWrapper.getRemoteUser()."}
{"index": 13055, "repo": "spring-security-web-6.1.2", "code": "public class SecurityContextLogoutHandler extends Object implements LogoutHandler {\n\tboolean isInvalidateHttpSession();\n\t// Requires the request to be passed in.\n\tvoid logout(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.Authentication authentication);\n\t// If true, removes the Authentication from the SecurityContext to prevent issues with concurrent requests.\n\tvoid setClearAuthentication(boolean clearAuthentication);\n}", "des": "Performs a logout by modifying the SecurityContextHolder."}
{"index": 13056, "repo": "spring-security-web-6.1.2", "code": "public interface SecurityContextRepository {\n\t// Allows the repository to be queried as to whether it contains a security context for the current request.\n\tboolean containsContext(jakarta.servlet.http.HttpServletRequest request);\n\t// Deprecated. Use loadDeferredContext(HttpServletRequest) instead.\n\torg.springframework.security.core.context.SecurityContext loadContext(HttpRequestResponseHolder requestResponseHolder);\n}", "des": "Strategy used for persisting a SecurityContext between requests."}
{"index": 13057, "repo": "spring-security-web-6.1.2", "code": "public class SecurityContextServerLogoutHandler extends Object implements ServerLogoutHandler {\n\t// Invoked when log out is requested\n\treactor.core.publisher.Mono<Void> logout(WebFilterExchange exchange, org.springframework.security.core.Authentication authentication);\n\t// Sets the ServerSecurityContextRepository that should be used for logging out.\n\tvoid setSecurityContextRepository(ServerSecurityContextRepository securityContextRepository);\n}", "des": "A ServerLogoutHandler which removes the SecurityContext using the provided ServerSecurityContextRepository"}
{"index": 13058, "repo": "spring-security-web-6.1.2", "code": "public interface SecurityWebFilterChain {\n\t// The WebFilter to use\n\treactor.core.publisher.Flux<org.springframework.web.server.WebFilter> getWebFilters();\n\t// Determines if this SecurityWebFilterChain matches the provided ServerWebExchange\n\treactor.core.publisher.Mono<Boolean> matches(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Defines a filter chain which is capable of being matched against a ServerWebExchange in order to decide whether it applies to that request."}
{"index": 13059, "repo": "spring-security-web-6.1.2", "code": "public class ServerAuthenticationEntryPointFailureHandler extends Object implements ServerAuthenticationFailureHandler {\n\t// Invoked when authentication attempt fails\n\treactor.core.publisher.Mono<Void> onAuthenticationFailure(WebFilterExchange webFilterExchange, org.springframework.security.core.AuthenticationException exception);\n\t// Set whether to rethrow AuthenticationServiceExceptions (defaults to true)\n\tvoid setRethrowAuthenticationServiceException(boolean rethrowAuthenticationServiceException);\n}", "des": "Adapts a ServerAuthenticationEntryPoint into a ServerAuthenticationFailureHandler"}
{"index": 13060, "repo": "spring-security-web-6.1.2", "code": "public interface ServerCsrfTokenRepository {\n\t// Generates a CsrfToken\n\treactor.core.publisher.Mono<CsrfToken> generateToken(org.springframework.web.server.ServerWebExchange exchange);\n\t// Loads the expected CsrfToken from the ServerWebExchange\n\treactor.core.publisher.Mono<CsrfToken> loadToken(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "An API to allow changing the method in which the expected CsrfToken is associated to the ServerWebExchange."}
{"index": 13061, "repo": "spring-security-web-6.1.2", "code": "public class ServerCsrfTokenRequestAttributeHandler extends Object implements ServerCsrfTokenRequestHandler {\n\t// Handles a request using a CsrfToken.\n\tvoid handle(org.springframework.web.server.ServerWebExchange exchange, reactor.core.publisher.Mono<CsrfToken> csrfToken);\n}", "des": "An implementation of the ServerCsrfTokenRequestHandler interface that is capable of making the CsrfToken available as an exchange attribute and resolving the token value as either a form data value or header of the request."}
{"index": 13062, "repo": "spring-security-web-6.1.2", "code": "@FunctionalInterface public interface ServerCsrfTokenRequestHandler extends ServerCsrfTokenRequestResolver {\n\t// Handles a request using a CsrfToken.\n\tvoid handle(org.springframework.web.server.ServerWebExchange exchange, reactor.core.publisher.Mono<CsrfToken> csrfToken);\n}", "des": "A callback interface that is used to make the CsrfToken created by the ServerCsrfTokenRepository available as an exchange attribute."}
{"index": 13063, "repo": "spring-security-web-6.1.2", "code": "public interface ServerRequestCache {\n\t// Get the URI that can be redirected to trigger the saved request to be used\n\treactor.core.publisher.Mono<URI> getRedirectUri(org.springframework.web.server.ServerWebExchange exchange);\n\t// If the provided ServerWebExchange matches the saved ServerHttpRequest gets the saved ServerHttpRequest\n\treactor.core.publisher.Mono<org.springframework.http.server.reactive.ServerHttpRequest> removeMatchingRequest(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Saves a ServerHttpRequest so it can be \"replayed\" later."}
{"index": 13064, "repo": "spring-security-web-6.1.2", "code": "public interface ServerSecurityContextRepository {\n\t// Loads the SecurityContext associated with the ServerWebExchange\n\treactor.core.publisher.Mono<org.springframework.security.core.context.SecurityContext> load(org.springframework.web.server.ServerWebExchange exchange);\n\t// Saves the SecurityContext\n\treactor.core.publisher.Mono<Void> save(org.springframework.web.server.ServerWebExchange exchange, org.springframework.security.core.context.SecurityContext context);\n}", "des": "Strategy used for persisting a SecurityContext between requests."}
{"index": 13065, "repo": "spring-security-web-6.1.2", "code": "public static final class ServerWebExchangeDelegatingReactiveAuthenticationManagerResolver.Builder extends Object {\n\t// Maps a ServerWebExchangeMatcher to an ReactiveAuthenticationManager.\n\tServerWebExchangeDelegatingReactiveAuthenticationManagerResolver.Builder add(ServerWebExchangeMatcher matcher, org.springframework.security.authentication.ReactiveAuthenticationManager manager);\n}", "des": "A builder for RequestMatcherDelegatingAuthenticationManagerResolver."}
{"index": 13066, "repo": "spring-security-web-6.1.2", "code": "public static class ServerWebExchangeMatcher.MatchResult extends Object {\n\t// Gets potential variables and their values\n\tMap<String,Object> getVariables();\n\tboolean isMatch();\n\t// Creates an instance of ServerWebExchangeMatcher.MatchResult that is a match with no variables\n\tstatic reactor.core.publisher.Mono<ServerWebExchangeMatcher.MatchResult> match();\n}", "des": "The result of matching"}
{"index": 13067, "repo": "spring-security-web-6.1.2", "code": "public abstract class ServerWebExchangeMatchers extends Object {\n\t// Matches any exchange\n\tstatic ServerWebExchangeMatcher anyExchange();\n\t// Creates a matcher that will match on any of the provided matchers\n\tstatic ServerWebExchangeMatcher matchers(ServerWebExchangeMatcher... matchers);\n\t// Creates a matcher that matches on any of the provided patterns.\n\tstatic ServerWebExchangeMatcher pathMatchers(String... patterns);\n}", "des": "Provides factory methods for creating common ServerWebExchangeMatcher"}
{"index": 13068, "repo": "spring-security-web-6.1.2", "code": "public class SessionFixationProtectionEvent extends org.springframework.security.authentication.event.AbstractAuthenticationEvent {\n\t// Getter for the session ID after it was changed.\n\tString getNewSessionId();\n\t// Getter for the session ID before it was changed.\n\tString getOldSessionId();\n}", "des": "Indicates a session ID was changed for the purposes of session fixation protection."}
{"index": 13069, "repo": "spring-security-web-6.1.2", "code": "public class SessionFixationProtectionStrategy extends AbstractSessionFixationProtectionStrategy {\n\t// Called to extract the existing attributes from the session, prior to invalidating it.\n\tprotected Map<String,Object> extractAttributes(jakarta.servlet.http.HttpSession session);\n\t// Defines whether attributes should be migrated to a new session or not.\n\tvoid setMigrateSessionAttributes(boolean migrateSessionAttributes);\n}", "des": "Uses HttpServletRequest.invalidate() to protect against session fixation attacks."}
{"index": 13070, "repo": "spring-security-web-6.1.2", "code": "public class SimpleUrlAuthenticationSuccessHandler extends AbstractAuthenticationTargetUrlRequestHandler implements AuthenticationSuccessHandler {\n\t// Removes temporary authentication-related data which may have been stored in the session during the authentication process.\n\tprotected final void clearAuthenticationAttributes(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "AuthenticationSuccessHandler which can be configured with a default URL which users should be sent to upon successful authentication."}
{"index": 13071, "repo": "spring-security-web-6.1.2", "code": "public class StrictHttpFirewall extends Object implements HttpFirewall {\n\t// Provides the existing decoded url blocklist which can add/remove entries from\n\tSet<String> getDecodedUrlBlacklist();\n\t// Provides the existing decoded url blocklist which can add/remove entries from\n\tSet<String> getDecodedUrlBlocklist();\n\t// Deprecated. Use getEncodedUrlBlocklist() instead\n\tSet<String> getEncodedUrlBlacklist();\n}", "des": "A strict implementation of HttpFirewall that rejects any suspicious requests with a RequestRejectedException."}
{"index": 13072, "repo": "spring-security-web-6.1.2", "code": "public final class StrictTransportSecurityServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Sets if subdomains should be included.\n\tvoid setIncludeSubDomains(boolean includeSubDomains);\n\t// Sets the max age of the header.\n\tvoid setMaxAge(Duration maxAge);\n\t// Sets if preload should be included.\n\tvoid setPreload(boolean preload);\n}", "des": "Writes the Strict-Transport-Security if the request is secure."}
{"index": 13073, "repo": "spring-security-web-6.1.2", "code": "public class SubjectDnX509PrincipalExtractor extends Object implements X509PrincipalExtractor, org.springframework.context.MessageSourceAware {\n\t// Returns the principal (usually a String) for the given certificate.\n\tObject extractPrincipal(X509Certificate clientCert);\n\tvoid setMessageSource(org.springframework.context.MessageSource messageSource);\n\t// Sets the regular expression which will by used to extract the user name from the certificate's Subject DN.\n\tvoid setSubjectDnRegex(String subjectDnRegex);\n}", "des": "Obtains the principal from a certificate using a regular expression match against the Subject (as returned by a call to X509Certificate.getSubjectDN())."}
{"index": 13074, "repo": "spring-security-web-6.1.2", "code": "public class SwitchUserFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware {\n\tvoid afterPropertiesSet();\n\t// Attempt to exit from an already switched user.\n\tprotected org.springframework.security.core.Authentication attemptExitUser(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "Switch User processing filter responsible for user context switching."}
{"index": 13075, "repo": "spring-security-web-6.1.2", "code": "public class SwitchUserWebFilter extends Object implements org.springframework.web.server.WebFilter {\n\t// Attempt to exit from an already switched user.\n\tprotected reactor.core.publisher.Mono<org.springframework.security.core.Authentication> exitSwitchUser(WebFilterExchange webFilterExchange);\n\treactor.core.publisher.Mono<Void> filter(org.springframework.web.server.ServerWebExchange exchange, org.springframework.web.server.WebFilterChain chain);\n}", "des": "Switch User processing filter responsible for user context switching."}
{"index": 13076, "repo": "spring-security-web-6.1.2", "code": "public class ThrowableAnalyzer extends Object {\n\t// Determines the cause chain of the provided Throwable.\n\tfinal Throwable[] determineCauseChain(Throwable throwable);\n\t// Returns the first throwable from the passed in array that is assignable to the provided type.\n\tfinal Throwable getFirstThrowableOfType(Class<? extends Throwable> throwableType, Throwable[] chain);\n\t// Initializes associations between Throwables and ThrowableCauseExtractors.\n\tprotected void initExtractorMap();\n}", "des": "Handler for analyzing Throwable instances."}
{"index": 13077, "repo": "spring-security-web-6.1.2", "code": "public class TokenBasedRememberMeServices extends AbstractRememberMeServices {\n\t// Calculates the validity period in seconds for a newly generated remember-me login.\n\tprotected int calculateLoginLifetime(jakarta.servlet.http.HttpServletRequest request, org.springframework.security.core.Authentication authentication);\n\tprotected boolean isTokenExpired(long tokenExpiryTime);\n}", "des": "Identifies previously remembered users by a Base-64 encoded cookie."}
{"index": 13078, "repo": "spring-security-web-6.1.2", "code": "public final class UrlUtils extends Object {\n\tstatic String buildFullRequestUrl(jakarta.servlet.http.HttpServletRequest r);\n\t// Obtains the full URL the client used to make the request.\n\tstatic String buildFullRequestUrl(String scheme, String serverName, int serverPort, String requestURI, String queryString);\n\t// Obtains the web application-specific fragment of the request URL.\n\tstatic String buildRequestUrl(jakarta.servlet.http.HttpServletRequest r);\n}", "des": "Provides static methods for composing URLs."}
{"index": 13079, "repo": "spring-security-web-6.1.2", "code": "public class UsernamePasswordAuthenticationFilter extends AbstractAuthenticationProcessingFilter {\n\t// Performs actual authentication.\n\torg.springframework.security.core.Authentication attemptAuthentication(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\tfinal String getPasswordParameter();\n\tfinal String getUsernameParameter();\n}", "des": "Processes an authentication form submission."}
{"index": 13080, "repo": "spring-security-web-6.1.2", "code": "public class WebAuthenticationDetails extends Object implements Serializable {\n\tboolean equals(Object o);\n\t// Indicates the TCP/IP address the authentication request was received from.\n\tString getRemoteAddress();\n\t// Indicates the HttpSession id the authentication request was received from.\n\tString getSessionId();\n}", "des": "A holder of selected HTTP details related to a web authentication request."}
{"index": 13081, "repo": "spring-security-web-6.1.2", "code": "public final class WebExpressionAuthorizationManager extends Object implements org.springframework.security.authorization.AuthorizationManager<RequestAuthorizationContext> {\n\t// Determines the access by evaluating the provided expression.\n\torg.springframework.security.authorization.AuthorizationDecision check(Supplier<org.springframework.security.core.Authentication> authentication, RequestAuthorizationContext context);\n}", "des": "An expression-based AuthorizationManager that determines the access by evaluating the provided expression."}
{"index": 13082, "repo": "spring-security-web-6.1.2", "code": "public static class WebFilterChainProxy.DefaultWebFilterChainDecorator extends Object implements WebFilterChainProxy.WebFilterChainDecorator {\n\t// Provide a new FilterChain that accounts for needed security considerations when there are no security filters.\n\torg.springframework.web.server.WebFilterChain decorate(org.springframework.web.server.WebFilterChain original);\n}", "des": "A WebFilterChainProxy.WebFilterChainDecorator that uses the DefaultWebFilterChain"}
{"index": 13083, "repo": "spring-security-web-6.1.2", "code": "public static interface WebFilterChainProxy.WebFilterChainDecorator {\n\t// Provide a new FilterChain that accounts for needed security considerations when there are no security filters.\n\tdefault org.springframework.web.server.WebFilterChain decorate(org.springframework.web.server.WebFilterChain original);\n}", "des": "A strategy for decorating the provided filter chain with one that accounts for the SecurityFilterChain for a given request."}
{"index": 13084, "repo": "spring-security-web-6.1.2", "code": "public class WebFilterExchange extends Object {\n\t// The filter chain\n\torg.springframework.web.server.WebFilterChain getChain();\n\t// Get the exchange\n\torg.springframework.web.server.ServerWebExchange getExchange();\n}", "des": "A composite of the ServerWebExchange and the WebFilterChain."}
{"index": 13085, "repo": "spring-security-web-6.1.2", "code": "public interface WebInvocationPrivilegeEvaluator {\n\t// Determines whether the user represented by the supplied Authentication object is allowed to invoke the supplied URI, with the given .\n\tboolean isAllowed(String contextPath, String uri, String method, org.springframework.security.core.Authentication authentication);\n}", "des": "Allows users to determine whether they have privileges for a given web URI."}
{"index": 13086, "repo": "spring-security-web-6.1.2", "code": "public class WebSessionServerCsrfTokenRepository extends Object implements ServerCsrfTokenRepository {\n\t// Generates a CsrfToken\n\treactor.core.publisher.Mono<CsrfToken> generateToken(org.springframework.web.server.ServerWebExchange exchange);\n\t// Loads the expected CsrfToken from the ServerWebExchange\n\treactor.core.publisher.Mono<CsrfToken> loadToken(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "A ServerCsrfTokenRepository that stores the CsrfToken in the HttpSession."}
{"index": 13087, "repo": "spring-security-web-6.1.2", "code": "public class WebSessionServerRequestCache extends Object implements ServerRequestCache {\n\t// Get the URI that can be redirected to trigger the saved request to be used\n\treactor.core.publisher.Mono<URI> getRedirectUri(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "An implementation of ServerRequestCache that saves the ServerHttpRequest in the WebSession."}
{"index": 13088, "repo": "spring-security-web-6.1.2", "code": "public class WebSessionServerSecurityContextRepository extends Object implements ServerSecurityContextRepository {\n\t// Loads the SecurityContext associated with the ServerWebExchange\n\treactor.core.publisher.Mono<org.springframework.security.core.context.SecurityContext> load(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Stores the SecurityContext in the WebSession."}
{"index": 13089, "repo": "spring-security-web-6.1.2", "code": "public class WebSpherePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter {\n\t// For J2EE container-based authentication there is no generic way to retrieve the credentials, as such this method returns a fixed dummy value.\n\tprotected Object getPreAuthenticatedCredentials(jakarta.servlet.http.HttpServletRequest httpRequest);\n\t// Return the WebSphere user name.\n\tprotected Object getPreAuthenticatedPrincipal(jakarta.servlet.http.HttpServletRequest httpRequest);\n}", "des": "This AbstractPreAuthenticatedProcessingFilter implementation is based on WebSphere authentication."}
{"index": 13090, "repo": "spring-security-web-6.1.2", "code": "public static enum XFrameOptionsHeaderWriter.XFrameOptionsMode extends Enum<XFrameOptionsHeaderWriter.XFrameOptionsMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic XFrameOptionsHeaderWriter.XFrameOptionsMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic XFrameOptionsHeaderWriter.XFrameOptionsMode[] values();\n}", "des": "The possible values for the X-Frame-Options header."}
{"index": 13091, "repo": "spring-security-web-6.1.2", "code": "public class XFrameOptionsServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Sets the X-Frame-Options mode.\n\tvoid setMode(XFrameOptionsServerHttpHeadersWriter.Mode mode);\n\t// Write the headers to the response.\n\treactor.core.publisher.Mono<Void> writeHttpHeaders(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "ServerHttpHeadersWriter implementation for the X-Frame-Options headers."}
{"index": 13092, "repo": "spring-security-web-6.1.2", "code": "public static enum XFrameOptionsServerHttpHeadersWriter.Mode extends Enum<XFrameOptionsServerHttpHeadersWriter.Mode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic XFrameOptionsServerHttpHeadersWriter.Mode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic XFrameOptionsServerHttpHeadersWriter.Mode[] values();\n}", "des": "The X-Frame-Options values."}
{"index": 13093, "repo": "spring-security-web-6.1.2", "code": "public final class XorCsrfTokenRequestAttributeHandler extends CsrfTokenRequestAttributeHandler {\n\t// Handles a request using a CsrfToken.\n\tvoid handle(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, Supplier<CsrfToken> deferredCsrfToken);\n\t// Returns the token value resolved from the provided HttpServletRequest and CsrfToken or null if not available.\n\tString resolveCsrfTokenValue(jakarta.servlet.http.HttpServletRequest request, CsrfToken csrfToken);\n}", "des": "An implementation of the CsrfTokenRequestHandler interface that is capable of masking the value of the CsrfToken on each request and resolving the raw token value from the masked value as either a header or parameter value of the request."}
{"index": 13094, "repo": "spring-security-web-6.1.2", "code": "public final class XorServerCsrfTokenRequestAttributeHandler extends ServerCsrfTokenRequestAttributeHandler {\n\t// Handles a request using a CsrfToken.\n\tvoid handle(org.springframework.web.server.ServerWebExchange exchange, reactor.core.publisher.Mono<CsrfToken> csrfToken);\n}", "des": "An implementation of the ServerCsrfTokenRequestAttributeHandler and ServerCsrfTokenRequestResolver interfaces that is capable of masking the value of the CsrfToken on each request and resolving the raw token value from the masked value as either a form data value or header of the request."}
{"index": 13095, "repo": "spring-security-web-6.1.2", "code": "public final class XXssProtectionHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the value of the X-XSS-PROTECTION header.\n\tvoid setHeaderValue(XXssProtectionHeaderWriter.HeaderValue headerValue);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Renders the X-XSS-Protection header."}
{"index": 13096, "repo": "spring-security-web-6.1.2", "code": "public static enum XXssProtectionHeaderWriter.HeaderValue extends Enum<XXssProtectionHeaderWriter.HeaderValue> {\n\tstatic XXssProtectionHeaderWriter.HeaderValue from(String headerValue);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic XXssProtectionHeaderWriter.HeaderValue valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic XXssProtectionHeaderWriter.HeaderValue[] values();\n}", "des": "The value of the x-xss-protection header."}
{"index": 13097, "repo": "spring-security-web-6.1.2", "code": "public class XXssProtectionServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Sets the value of the X-XSS-PROTECTION header.\n\tvoid setHeaderValue(XXssProtectionServerHttpHeadersWriter.HeaderValue headerValue);\n\t// Write the headers to the response.\n\treactor.core.publisher.Mono<Void> writeHttpHeaders(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Add the x-xss-protection header."}
{"index": 13098, "repo": "spring-security-web-6.1.2", "code": "public static enum XXssProtectionServerHttpHeadersWriter.HeaderValue extends Enum<XXssProtectionServerHttpHeadersWriter.HeaderValue> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic XXssProtectionServerHttpHeadersWriter.HeaderValue valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic XXssProtectionServerHttpHeadersWriter.HeaderValue[] values();\n}", "des": "The value of the x-xss-protection header."}
{"index": 13099, "repo": "spring-cloud-stream-4.0.0", "code": "public class AbstractBindableProxyFactory extends Object implements Bindable {\n\t// Binds all the inputs associated with this instance.\n\tCollection<Binding<Object>> createAndBindInputs(BindingService bindingService);\n\t// Binds all the outputs associated with this instance.\n\tCollection<Binding<Object>> createAndBindOutputs(BindingService bindingService);\n\tprotected BindingTargetFactory getBindingTargetFactory(Class<?> bindingTargetType);\n\t// Enumerates all the input binding names.\n\tSet<String> getInputs();\n}", "des": "Base class for bindable proxy factories."}
{"index": 13100, "repo": "spring-cloud-stream-4.0.0", "code": "public abstract class AbstractBinder<T,C extends ConsumerProperties,P extends ProducerProperties> extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, Binder<T,C,P> {\n\tfinal void afterPropertiesSet();\n\t// For binder implementations that support a prefix, apply the prefix to the name.\n\tstatic String applyPrefix(String prefix, String name);\n}", "des": "Base class for Binder implementations."}
{"index": 13101, "repo": "spring-cloud-stream-4.0.0", "code": "public abstract class AbstractBindingTargetFactory<T> extends Object implements BindingTargetFactory {\n\t// Checks whether a specific binding target type can be created by this factory.\n\tfinal boolean canCreate(Class<?> clazz);\n\t// Create an input binding target that will be bound via a corresponding Binder.\n\tabstract T createInput(String name);\n\t// Create an output binding target that will be bound via a corresponding Binder.\n\tabstract T createOutput(String name);\n}", "des": "A BindingTargetFactory implementation that restricts the type of binding target to a specified class and its supertypes."}
{"index": 13102, "repo": "spring-cloud-stream-4.0.0", "code": "public interface Bindable {\n\t// Binds all the inputs associated with this instance.\n\tdefault Collection<Binding<Object>> createAndBindInputs(BindingService adapter);\n\t// Binds all the outputs associated with this instance.\n\tdefault Collection<Binding<Object>> createAndBindOutputs(BindingService adapter);\n\t// Enumerates all the input binding names.\n\tdefault Set<String> getInputs();\n\t// Enumerates all the output binding names.\n\tdefault Set<String> getOutputs();\n}", "des": "Marker interface for instances that can bind/unbind groups of inputs and outputs."}
{"index": 13103, "repo": "spring-cloud-stream-4.0.0", "code": "public interface Binder<T,C extends ConsumerProperties,P extends ProducerProperties> {\n\t// Bind the target component as a message consumer to the logical entity identified by the name.\n\tBinding<T> bindConsumer(String name, String group, T inboundBindTarget, C consumerProperties);\n\t// Bind the target component as a message producer to the logical entity identified by the name.\n\tBinding<T> bindProducer(String name, T outboundBindTarget, P producerProperties);\n}", "des": "A strategy interface used to bind an app interface to a logical name."}
{"index": 13104, "repo": "spring-cloud-stream-4.0.0", "code": "public interface Binding<T> extends org.springframework.integration.core.Pausable {\n\t// Returns the name of the target for this binding (i.e., channel name).\n\tdefault String getBindingName();\n\tdefault Map<String,Object> getExtendedInfo();\n\t// Returns the name of the destination for this binding.\n\tdefault String getName();\n\t// Returns boolean flag representing this binding's type.\n\tdefault boolean isInput();\n\t// Will always return false unless overriden.\n\tdefault boolean isPaused();\n}", "des": "Represents a binding between an input or output and an adapter endpoint that connects via a Binder."}
{"index": 13105, "repo": "spring-cloud-stream-4.0.0", "code": "public class BindingsLifecycleController extends Object {\n\t// General purpose method to change the state of the provided binding.\n\tvoid changeState(String bindingName, BindingsLifecycleController.State state);\n\t// Convenience method to pause the binding with provided `bindingName`.\n\tvoid pause(String bindingName);\n\t// Queries the individual state of a binding.\n\tBinding<?> queryState(String name);\n\t// Queries the List of states for all available bindings.\n\tList<Map<?,?>> queryStates();\n}", "des": "Lifecycle controller for the bindings."}
{"index": 13106, "repo": "spring-cloud-stream-4.0.0", "code": "public static enum BindingsLifecycleController.State extends Enum<BindingsLifecycleController.State> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic BindingsLifecycleController.State valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic BindingsLifecycleController.State[] values();\n}", "des": "Binding states."}
{"index": 13107, "repo": "spring-cloud-stream-4.0.0", "code": "public interface BindingTargetFactory {\n\t// Checks whether a specific binding target type can be created by this factory.\n\tboolean canCreate(Class<?> clazz);\n\t// Create an input binding target that will be bound via a corresponding Binder.\n\tObject createInput(String name);\n\t// Create an output binding target that will be bound via a corresponding Binder.\n\tObject createOutput(String name);\n}", "des": "Defines methods to create/configure the binding targets defined by org.springframework.cloud.stream.annotation.EnableBinding."}
{"index": 13108, "repo": "spring-cloud-stream-4.0.0", "code": "public class CompositeMessageChannelConfigurer extends Object implements MessageChannelAndSourceConfigurer {\n\t// Configure the given input message channel.\n\tvoid configureInputChannel(org.springframework.messaging.MessageChannel messageChannel, String channelName);\n\t// Configure the given output message channel.\n\tvoid configureOutputChannel(org.springframework.messaging.MessageChannel messageChannel, String channelName);\n}", "des": "MessageChannelConfigurer that composes all the message channel configurers."}
{"index": 13109, "repo": "spring-cloud-stream-4.0.0", "code": "public class DefaultBinding<T> extends Object implements Binding<T> {\n\t// Listener method that executes after unbinding.\n\tprotected void afterUnbind();\n\t// Returns the name of the target for this binding (i.e., channel name).\n\tString getBindingName();\n\tString getGroup();\n\t// Returns the name of the destination for this binding.\n\tString getName();\n\tString getState();\n\tboolean isPausable();\n\t// Will always return false unless overriden.\n\tboolean isPaused();\n\tboolean isRunning();\n}", "des": "Default implementation for a Binding."}
{"index": 13110, "repo": "spring-cloud-stream-4.0.0", "code": "public final class DynamicDestinationsBindable extends Object implements Bindable {\n\tvoid addOutputBinding(String name, Binding<?> binding);\n\t// Enumerates all the output binding names.\n\tSet<String> getOutputs();\n\t// Unbinds all the outputs associated with this instance.\n\tvoid unbindOutputs(BindingService adapter);\n}", "des": "A Bindable that stores the dynamic destination names and handles their unbinding."}
{"index": 13111, "repo": "spring-cloud-stream-4.0.0", "code": "public abstract class EmbeddedHeaderUtils extends Object {\n\tstatic String decodeExceptionMessage(org.springframework.messaging.Message<?> requestMessage);\n\t// Return a new message where some of the original headers of original have been embedded into the new message payload.\n\tstatic byte[] embedHeaders(MessageValues original, String... headers);\n}", "des": "Encodes requested headers into payload with format 0xff, n(1), [ [lenHdr(1), hdr, lenValue(4), value] ... ]."}
{"index": 13112, "repo": "spring-cloud-stream-4.0.0", "code": "public interface ExtendedBindingProperties<C,P> {\n\tdefault Map<String,? extends Object> getBindings();\n\t// Extended binding properties can define a default prefix to place all the extended common producer and consumer properties.\n\tString getDefaultsPrefix();\n\tC getExtendedConsumerProperties(String channelName);\n\tP getExtendedProducerProperties(String channelName);\n}", "des": "Properties that extend the common binding properties for a particular binder implementation."}
{"index": 13113, "repo": "spring-cloud-stream-4.0.0", "code": "public final class GenericsUtils extends Object {\n\t// Return the generic type of PollableSource to determine if it is appropriate for the binder.\n\tstatic boolean checkCompatiblePollableBinder(Binder binderInstance, Class<?> bindingTargetType);\n\t// For a specific class that implements or extends a parameterized type, return the parameter of that interface at a given position.\n\tstatic Class<?> getParameterType(Class<?> evaluatedClass, Class<?> interfaceClass, int position);\n}", "des": "Internal utilities for handling generics."}
{"index": 13114, "repo": "spring-cloud-stream-4.0.0", "code": "public interface MessageChannelConfigurer {\n\t// Configure the given input message channel.\n\tvoid configureInputChannel(org.springframework.messaging.MessageChannel messageChannel, String channelName);\n\t// Configure the given output message channel.\n\tvoid configureOutputChannel(org.springframework.messaging.MessageChannel messageChannel, String channelName);\n}", "des": "Interface to be implemented by the classes that configure the Bindable message channels."}
{"index": 13115, "repo": "spring-cloud-stream-4.0.0", "code": "public class MessageConverterConfigurer extends Object implements MessageChannelAndSourceConfigurer, org.springframework.beans.factory.BeanFactoryAware {\n\t// Configure the given input message channel.\n\tvoid configureInputChannel(org.springframework.messaging.MessageChannel messageChannel, String channelName);\n\t// Configure the given output message channel.\n\tvoid configureOutputChannel(org.springframework.messaging.MessageChannel messageChannel, String channelName);\n}", "des": "A MessageChannelConfigurer that sets data types and message converters based on BindingProperties.contentType."}
{"index": 13116, "repo": "spring-cloud-stream-4.0.0", "code": "public abstract class MessageConverterUtils extends Object {\n\t// Get the java Object type for the MimeType X_JAVA_OBJECT.\n\tstatic Class<?> getJavaTypeForJavaObjectContentType(org.springframework.util.MimeType contentType);\n\tstatic org.springframework.util.MimeType getMimeType(String contentTypeString);\n\t// Build the conventional MimeType for a java object.\n\tstatic org.springframework.util.MimeType javaObjectMimeType(Class<?> clazz);\n}", "des": "Message conversion utility methods."}
{"index": 13117, "repo": "spring-cloud-stream-4.0.0", "code": "public class MessageSourceBindingTargetFactory extends AbstractBindingTargetFactory<PollableMessageSource> {\n\t// Create an input binding target that will be bound via a corresponding Binder.\n\tPollableMessageSource createInput(String name);\n\t// Create an output binding target that will be bound via a corresponding Binder.\n\tPollableMessageSource createOutput(String name);\n}", "des": "An implementation of BindingTargetFactory for creating DefaultPollableMessageSources."}
{"index": 13118, "repo": "spring-cloud-stream-4.0.0", "code": "public class PartitionHandler extends Object {\n\t// Determine the partition to which to send this message.\n\tint determinePartition(org.springframework.messaging.Message<?> message);\n\t// Set the actual partition count (if different to the configured count).\n\tvoid setPartitionCount(int partitionCount);\n}", "des": "Utility class to determine if a binding is configured for partitioning (based on the binder properties provided in the constructor) and what partition a message should be delivered to."}
{"index": 13119, "repo": "spring-cloud-stream-4.0.0", "code": "@FunctionalInterface public interface PollableSource<H> {\n\t// Poll the consumer.\n\tboolean poll(H handler);\n\t// Poll the consumer and convert the payload to the type.\n\tdefault boolean poll(H handler, org.springframework.core.ParameterizedTypeReference<?> type);\n}", "des": "A mechanism to poll a consumer."}
{"index": 13120, "repo": "spring-cloud-stream-4.0.0", "code": "public interface ProducerDestination {\n\t// Provides the destination name.\n\tString getName();\n\t// Provides the destination name for a given partition.\n\tString getNameForPartition(int partition);\n}", "des": "Represents a ProducerDestination that provides the information about the destination that is physically provisioned through ProvisioningProvider.provisionProducerDestination(String, ProducerProperties)."}
{"index": 13121, "repo": "spring-cloud-stream-4.0.0", "code": "public interface ProvisioningProvider<C extends ConsumerProperties,P extends ProducerProperties> {\n\t// Creates the middleware destination on the physical broker for the consumer to consume data.\n\tConsumerDestination provisionConsumerDestination(String name, String group, C properties);\n\t// Creates middleware destination on the physical broker for the producer to send data.\n\tProducerDestination provisionProducerDestination(String name, P properties);\n}", "des": "Provisioning SPI that allows the users to provision destinations such as queues and topics."}
{"index": 13122, "repo": "spring-cloud-stream-4.0.0", "code": "public final class StreamBridge extends Object implements StreamOperations, org.springframework.beans.factory.SmartInitializingSingleton {\n\tvoid afterSingletonsInstantiated();\n\t// Sends 'data' to an output binding specified by 'bindingName' argument while using default content type to deal with output type conversion (if necessary).\n\tboolean send(String bindingName, Object data);\n}", "des": "A class which allows user to send data to an output binding."}
{"index": 13123, "repo": "spring-cloud-stream-4.0.0", "code": "public interface StreamOperations {\n\t// Sends 'data' to an output binding specified by 'bindingName' argument while using default content type to deal with output type conversion (if necessary).\n\tboolean send(String bindingName, Object data);\n}", "des": "Basic contract for StreamBridge operations."}
{"index": 13124, "repo": "spring-cloud-stream-4.0.0", "code": "public class SubscribableChannelBindingTargetFactory extends AbstractBindingTargetFactory<org.springframework.messaging.SubscribableChannel> {\n\t// Create an input binding target that will be bound via a corresponding Binder.\n\torg.springframework.messaging.SubscribableChannel createInput(String name);\n\t// Create an output binding target that will be bound via a corresponding Binder.\n\torg.springframework.messaging.SubscribableChannel createOutput(String name);\n}", "des": "An implementation of BindingTargetFactory for creating SubscribableChannels."}
{"index": 13125, "repo": "spring-cloud-consul-core-4.0.2", "code": "public enum SerfStatusEnum extends Enum<SerfStatusEnum> {\n\tint getCode();\n\t// Returns the enum constant of this type with the specified name.\n\tstatic SerfStatusEnum valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic SerfStatusEnum[] values();\n}", "des": "Gossip pool (serf) statuses."}
{"index": 13126, "repo": "spring-data-commons-3.1.2", "code": "public class AbstractAggregateRoot<A extends AbstractAggregateRoot<A>> extends Object {\n\t// Adds the given event to the aggregate for later publication when calling a Spring Data repository's save-method.\n\tprotected final A andEvent(Object event);\n\t// Adds all events contained in the given aggregate to the current one.\n\tprotected final A andEventsFrom(A aggregate);\n\t// Clears all domain events currently held.\n\tprotected void clearDomainEvents();\n}", "des": "Convenience base class for aggregate roots that exposes a AbstractAggregateRoot.registerEvent(Object) to capture domain events and expose them via AbstractAggregateRoot.domainEvents()."}
{"index": 13127, "repo": "spring-data-commons-3.1.2", "code": "public abstract class AbstractEntityInformation<T,ID> extends Object implements EntityInformation<T,ID> {\n\t// Returns the actual domain class type.\n\tClass<T> getJavaType();\n\t// Returns whether the given entity is considered to be new.\n\tboolean isNew(T entity);\n}", "des": "Base class for implementations of EntityInformation."}
{"index": 13128, "repo": "spring-data-commons-3.1.2", "code": "public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?,P>,P extends PersistentProperty<P>> extends Object implements MappingContext<E,P>, ApplicationEventPublisherAware, ApplicationContextAware, InitializingBean {\n\t// Adds the given type to the MappingContext.\n\tprotected Optional<E> addPersistentEntity(Class<?> type);\n\t// Adds the given TypeInformation to the MappingContext.\n\tprotected Optional<E> addPersistentEntity(TypeInformation<?> typeInformation);\n}", "des": "Base class to build mapping metadata and thus create instances of PersistentEntity and PersistentProperty."}
{"index": 13129, "repo": "spring-data-commons-3.1.2", "code": "public abstract class AbstractPageRequest extends Object implements Pageable, Serializable {\n\tboolean equals(Object obj);\n\t// Returns the Pageable requesting the first page.\n\tabstract Pageable first();\n\t// Returns the offset to be taken according to the underlying page and page size.\n\tlong getOffset();\n\t// Returns the page to be returned.\n\tint getPageNumber();\n\t// Returns the number of items to be returned.\n\tint getPageSize();\n}", "des": "Abstract Java Bean implementation of Pageable."}
{"index": 13130, "repo": "spring-data-commons-3.1.2", "code": "public abstract class AbstractPersistentProperty<P extends PersistentProperty<P>> extends Object implements PersistentProperty<P> {\n\tprotected abstract Association<P> createAssociation();\n\tboolean equals(Object obj);\n\t// Returns the actual type of the property.\n\tClass<?> getActualType();\n\tprotected TypeInformation<?> getActualTypeInformation();\n\tAssociation<P> getAssociation();\n\t// Return the type the property refers to in case it's an association, i.e.\n\tClass<?> getAssociationTargetType();\n}", "des": "Simple implementation of PersistentProperty."}
{"index": 13131, "repo": "spring-data-commons-3.1.2", "code": "public abstract class AbstractQueryCreator<T,S> extends Object {\n\t// Creates a new criteria object from the given part and and-concatenates it to the given base criteria.\n\tprotected abstract S and(Part part, S base, Iterator<Object> iterator);\n\t// Actually creates the query object applying the given criteria object and Sort definition.\n\tprotected abstract T complete(S criteria, Sort sort);\n}", "des": "Base class for query creators that create criteria based queries from a PartTree."}
{"index": 13132, "repo": "spring-data-commons-3.1.2", "code": "public abstract class AbstractRepositoryMetadata extends Object implements RepositoryMetadata {\n\t// Returns the set of types the repository shall be discoverable for when trying to look up a repository by domain type.\n\tSet<Class<?>> getAlternativeDomainTypes();\n\t// Returns CrudMethods meta information for the repository.\n\tCrudMethods getCrudMethods();\n\t// Creates a new RepositoryMetadata for the given repository interface.\n\tstatic RepositoryMetadata getMetadata(Class<?> repositoryInterface);\n}", "des": "Base class for RepositoryMetadata implementations."}
{"index": 13133, "repo": "spring-data-commons-3.1.2", "code": "public class AccessOptions extends Object {\n\t// Returns the default AccessOptions.GetOptions rejecting intermediate null values when accessing property paths.\n\tstatic AccessOptions.GetOptions defaultGetOptions();\n\t// Returns the default AccessOptions.SetOptions rejecting setting values when finding an intermediate property value to be null.\n\tstatic AccessOptions.SetOptions defaultSetOptions();\n}", "des": "Access options when using PersistentPropertyPathAccessor to get and set properties."}
{"index": 13134, "repo": "spring-data-commons-3.1.2", "code": "public static class AccessOptions.GetOptions extends Object {\n\tAccessOptions.GetOptions.GetNulls getNullValues();\n\t// Registers a Function to handle Collection values for the given property.\n\tAccessOptions.GetOptions registerCollectionHandler(PersistentProperty<?> property, Function<? super Collection<?>,Object> handler);\n}", "des": "Access options for getting values for property paths."}
{"index": 13135, "repo": "spring-data-commons-3.1.2", "code": "public static enum AccessOptions.GetOptions.GetNulls extends Enum<AccessOptions.GetOptions.GetNulls> {\n\tAccessOptions.SetOptions.SetNulls toNullHandling();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AccessOptions.GetOptions.GetNulls valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AccessOptions.GetOptions.GetNulls[] values();\n}", "des": "How to handle null values during a PersistentPropertyPath traversal."}
{"index": 13136, "repo": "spring-data-commons-3.1.2", "code": "public static class AccessOptions.SetOptions extends Object {\n\tAccessOptions.SetOptions.SetNulls getNullHandling();\n\t// Returns whether the given property is supposed to be propagated, i.e. if values for it are supposed to be set at all.\n\tboolean propagate(PersistentProperty<?> property);\n\t// Returns a new AccessOptions that will cause paths that contain null values to be skipped when setting a property.\n\tAccessOptions.SetOptions rejectNulls();\n}", "des": "Access options for setting values for property paths."}
{"index": 13137, "repo": "spring-data-commons-3.1.2", "code": "public static enum AccessOptions.SetOptions.Propagation extends Enum<AccessOptions.SetOptions.Propagation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AccessOptions.SetOptions.Propagation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AccessOptions.SetOptions.Propagation[] values();\n}", "des": "How to propagate setting values that cross collection and map properties."}
{"index": 13138, "repo": "spring-data-commons-3.1.2", "code": "public static enum AccessOptions.SetOptions.SetNulls extends Enum<AccessOptions.SetOptions.SetNulls> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AccessOptions.SetOptions.SetNulls valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AccessOptions.SetOptions.SetNulls[] values();\n}", "des": "How to handle intermediate null values when setting"}
{"index": 13139, "repo": "spring-data-commons-3.1.2", "code": "public final class Accessor extends Object {\n\t// Returns the name of the property this accessor handles.\n\tString getPropertyName();\n\t// Returns whether the accessor is a getter.\n\tboolean isGetter();\n\t// Returns whether the accessor is a setter.\n\tboolean isSetter();\n}", "des": "Helper value to abstract an accessor."}
{"index": 13140, "repo": "spring-data-commons-3.1.2", "code": "public final class Alias extends Object {\n\t// Returns an empty Alias instance.\n\tstatic Alias empty();\n\tboolean equals(Object o);\n\tObject getValue();\n\t// Returns whether the the current alias is present and has the same value as the given Alias.\n\tboolean hasSamePresentValueAs(Alias other);\n\t// Checks whether this Alias contains the value that.\n\tboolean hasValue(Object that);\n\tboolean isPresent();\n}", "des": "A container object which may or may not contain a type alias value."}
{"index": 13141, "repo": "spring-data-commons-3.1.2", "code": "public class AnnotationAuditingConfiguration extends Object implements AuditingConfiguration {\n\t// Returns the bean name of the AuditorAware instance to be used..\n\tString getAuditorAwareRef();\n\t// Returns the bean name of the DateTimeProvider to be used.\n\tString getDateTimeProviderRef();\n\t// Returns whether the entity shall be marked as modified on creation.\n\tboolean isModifyOnCreate();\n\t// Returns whether the creation and modification dates shall be set.\n\tboolean isSetDates();\n}", "des": "Default implementation for AuditingConfiguration."}
{"index": 13142, "repo": "spring-data-commons-3.1.2", "code": "public abstract class AnnotationBasedPersistentProperty<P extends PersistentProperty<P>> extends AbstractPersistentProperty<P> {\n\t// Returns the annotation found for the current AnnotationBasedPersistentProperty.\n\t<A extends Annotation>A findAnnotation(Class<A> annotationType);\n\t// Looks up the annotation of the given type on the property and the owning type if no annotation can be found on it.\n\t<A extends Annotation>A findPropertyOrOwnerAnnotation(Class<A> annotationType);\n}", "des": "Special PersistentProperty that takes annotations at a property into account."}
{"index": 13143, "repo": "spring-data-commons-3.1.2", "code": "public class AnnotationDetectionFieldCallback extends Object implements ReflectionUtils.FieldCallback {\n\tvoid doWith(Field field);\n\t// Returns the detected field.\n\tField getField();\n\t// Returns the field that was detected.\n\tField getRequiredField();\n\t// Returns the type of the field or throws an IllegalArgumentException if no field could be found.\n\tClass<?> getRequiredType();\n\t// Returns the type of the field.\n\tClass<?> getType();\n}", "des": "A ReflectionUtils.FieldCallback that will inspect each field for a given annotation."}
{"index": 13144, "repo": "spring-data-commons-3.1.2", "code": "public class AnnotationDetectionMethodCallback<A extends Annotation> extends Object implements ReflectionUtils.MethodCallback {\n\tvoid doWith(Method method);\n\tA getAnnotation();\n\tMethod getMethod();\n\t// Returns the method with the configured annotation.\n\tMethod getRequiredMethod();\n\t// Returns whether an annotation was found.\n\tboolean hasFoundAnnotation();\n\t// Invokes the method using reflection.\n\t<T> T invoke(Object target, Object... args);\n}", "des": "ReflectionUtils.MethodCallback to find annotations of a given type."}
{"index": 13145, "repo": "spring-data-commons-3.1.2", "code": "public class AnnotationRepositoryConfigurationSource extends RepositoryConfigurationSourceSupport {\n\t// Returns the value for the String attribute with the given name.\n\tOptional<String> getAttribute(String name);\n\t// Returns the value for the attribute with the given name and type.\n\t<T> Optional<T> getAttribute(String name, Class<T> type);\n\t// Returns the AnnotationAttributes of the annotation configured.\n\tAnnotationAttributes getAttributes();\n}", "des": "Annotation based RepositoryConfigurationSource."}
{"index": 13146, "repo": "spring-data-commons-3.1.2", "code": "public class AnnotationRepositoryMetadata extends AbstractRepositoryMetadata {\n\t// Returns the TypeInformationof the domain type the repository is declared to manage.\n\tTypeInformation<?> getDomainTypeInformation();\n\tSet<RepositoryFragment<?>> getFragments();\n\t// Returns the TypeInformation of the id type of the repository.\n\tTypeInformation<?> getIdTypeInformation();\n}", "des": "RepositoryMetadata implementation inspecting the given repository interface for a RepositoryDefinition annotation."}
{"index": 13147, "repo": "spring-data-commons-3.1.2", "code": "public class AnnotationRevisionMetadata<N extends Number & Comparable<N>> extends Object implements RevisionMetadata<N> {\n\t// Returns the underlying revision metadata which might provider more detailed implementation specific information.\n\t<T> T getDelegate();\n\t// Returns the timestamp of the revision.\n\tOptional<Instant> getRevisionInstant();\n\t// Returns the revision number of the revision.\n\tOptional<N> getRevisionNumber();\n}", "des": "A RevisionMetadata implementation that inspects the given object for fields with the configured annotations and returns the field's values on calls to AnnotationRevisionMetadata.getRevisionInstant(), AnnotationRevisionMetadata.getRevisionInstant() and AnnotationRevisionMetadata.getRevisionNumber()."}
{"index": 13148, "repo": "spring-data-commons-3.1.2", "code": "public interface AotContext {\n\t// Create an AotContext backed by the given BeanFactory.\n\tstatic AotContext from(BeanFactory beanFactory);\n\t// Returns a reference to the ConfigurableListableBeanFactory backing this AotContext.\n\tConfigurableListableBeanFactory getBeanFactory();\n\t// Returns the ClassLoader used by this AotContext to resolve types.\n\tdefault ClassLoader getClassLoader();\n}", "des": "The context in which the AOT processing happens."}
{"index": 13149, "repo": "spring-data-commons-3.1.2", "code": "public static interface AotContext.IntrospectedBeanDefinition {\n\t// Gets the BeanDefinition for the given, required named bean.\n\tBeanDefinition getBeanDefinition();\n\t// Gets the RootBeanDefinition for the given, required bean name.\n\tRootBeanDefinition getRootBeanDefinition();\n\t// Determines whether a bean identified by the given, required name is a FactoryBean.\n\tboolean isFactoryBean();\n\t// Determines whether a bean definition identified by the given, required name is present.\n\tboolean isPresent();\n}", "des": "Interface defining introspection methods for bean definitions."}
{"index": 13150, "repo": "spring-data-commons-3.1.2", "code": "public static interface AotContext.TypeIntrospector {\n\t// Return a List containing bean names that implement this type.\n\tList<String> getBeanNames();\n\t// Determines whether the associated bean factory contains at least one bean of this type.\n\tboolean hasBean();\n\t// Determines whether the type is declared on the application classpath and performs the given, required action if present.\n\tdefault void ifTypePresent(Consumer<Class<?>> action);\n}", "des": "Type-based introspector to resolve Class from a type name and to introspect the bean factory for presence of beans."}
{"index": 13151, "repo": "spring-data-commons-3.1.2", "code": "public interface Auditable<U,ID,T extends TemporalAccessor> extends Persistable<ID> {\n\t// Returns the user who created this entity.\n\tOptional<U> getCreatedBy();\n\t// Returns the creation date of the entity.\n\tOptional<T> getCreatedDate();\n\t// Returns the user who modified the entity lastly.\n\tOptional<U> getLastModifiedBy();\n\t// Returns the date of the last modification.\n\tOptional<T> getLastModifiedDate();\n\t// Sets the user who created this entity.\n\tvoid setCreatedBy(U createdBy);\n}", "des": "Interface for auditable entities."}
{"index": 13152, "repo": "spring-data-commons-3.1.2", "code": "public interface AuditableBeanWrapper<T> {\n\t// Returns the underlying bean that potentially has been modified by the setter methods exposed.\n\tT getBean();\n\t// Returns the date of the last modification date of the backing bean.\n\tOptional<TemporalAccessor> getLastModifiedDate();\n\t// Set the creator of the object.\n\tObject setCreatedBy(Object value);\n\t// Set the date the object was created.\n\tTemporalAccessor setCreatedDate(TemporalAccessor value);\n}", "des": "Interface to abstract the ways setting the auditing information can be implemented."}
{"index": 13153, "repo": "spring-data-commons-3.1.2", "code": "public abstract class AuditingBeanDefinitionRegistrarSupport extends Object implements ImportBeanDefinitionRegistrar {\n\t// Configures the given BeanDefinitionBuilder with the default attributes from the given AuditingConfiguration.\n\tprotected BeanDefinitionBuilder configureDefaultAuditHandlerAttributes(AuditingConfiguration configuration, BeanDefinitionBuilder builder);\n\t// Return the annotation type to lookup configuration values from.\n\tprotected abstract Class<? extends Annotation> getAnnotation();\n}", "des": "A ImportBeanDefinitionRegistrar that serves as a base class for store specific implementations for configuring audit support."}
{"index": 13154, "repo": "spring-data-commons-3.1.2", "code": "public interface AuditingConfiguration {\n\t// Returns the bean name of the AuditorAware instance to be used..\n\tString getAuditorAwareRef();\n\t// Returns the bean name of the DateTimeProvider to be used.\n\tString getDateTimeProviderRef();\n\t// Returns whether the entity shall be marked as modified on creation.\n\tboolean isModifyOnCreate();\n\t// Returns whether the creation and modification dates shall be set.\n\tboolean isSetDates();\n}", "des": "Configuration information for auditing."}
{"index": 13155, "repo": "spring-data-commons-3.1.2", "code": "public class AuditingHandler extends AuditingHandlerSupport implements InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Factory method that creates a new AuditingHandler for the given MappingContext.\n\tstatic AuditingHandler from(MappingContext<?,?> mappingContext);\n\t// Marks the given object as created.\n\t<T> T markCreated(T source);\n\t// Marks the given object as modified.\n\t<T> T markModified(T source);\n}", "des": "Auditing handler to mark entity objects created and modified."}
{"index": 13156, "repo": "spring-data-commons-3.1.2", "code": "public abstract class AuditingHandlerSupport extends Object {\n\t// Returns whether the given source is considered to be auditable in the first place.\n\tprotected final boolean isAuditable(Object source);\n\t// Setter do determine if Auditable.setCreatedDate(TemporalAccessor)} and Auditable.setLastModifiedDate(TemporalAccessor) shall be filled with the current Java time.\n\tvoid setDateTimeForNow(boolean dateTimeForNow);\n}", "des": "Support class to implement auditing handlers."}
{"index": 13157, "repo": "spring-data-commons-3.1.2", "code": "public class BasicPersistentEntity<T,P extends PersistentProperty<P>> extends Object implements MutablePersistentEntity<T,P> {\n\t// Adds an Association to the entity.\n\tvoid addAssociation(Association<P> association);\n\t// Adds a PersistentProperty to the entity.\n\tvoid addPersistentProperty(P property);\n\t// Applies the given AssociationHandler to all Association contained in this PersistentEntity.\n\tvoid doWithAssociations(AssociationHandler<P> handler);\n}", "des": "Simple value object to capture information of PersistentEntitys."}
{"index": 13158, "repo": "spring-data-commons-3.1.2", "code": "public class BeanComponentDefinitionBuilder extends Object {\n\t// Creates a BeanComponentDefinition from the given BeanDefinitionBuilder.\n\tBeanComponentDefinition getComponent(BeanDefinitionBuilder builder);\n\t// Creates a BeanComponentDefinition from the given BeanDefinitionBuilder using the given name.\n\tBeanComponentDefinition getComponent(BeanDefinitionBuilder builder, String name);\n}", "des": "Helper to create BeanComponentDefinition more easily."}
{"index": 13159, "repo": "spring-data-commons-3.1.2", "code": "public enum BeanWrapperPropertyAccessorFactory extends Enum<BeanWrapperPropertyAccessorFactory> implements PersistentPropertyAccessorFactory {\n\t// Returns a PersistentPropertyAccessor for a given PersistentEntity and bean.\n\t<T> PersistentPropertyAccessor<T> getPropertyAccessor(PersistentEntity<?,?> entity, T bean);\n\t// Returns whether given PersistentEntity is supported by this PersistentPropertyAccessorFactory.\n\tboolean isSupported(PersistentEntity<?,?> entity);\n}", "des": "PersistentPropertyAccessorFactory that uses a BeanWrapper."}
{"index": 13160, "repo": "spring-data-commons-3.1.2", "code": "public enum BootstrapMode extends Enum<BootstrapMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BootstrapMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BootstrapMode[] values();\n}", "des": "Enumeration to define in which way repositories are bootstrapped."}
{"index": 13161, "repo": "spring-data-commons-3.1.2", "code": "public class Box extends Object implements Shape {\n\tboolean equals(Object obj);\n\t// Returns the first Point making up the Box.\n\tPoint getFirst();\n\t// Returns the second Point making up the Box.\n\tPoint getSecond();\n}", "des": "Represents a geospatial box value"}
{"index": 13162, "repo": "spring-data-commons-3.1.2", "code": "public class CamelCaseSplittingFieldNamingStrategy extends Object implements FieldNamingStrategy {\n\t// Returns the field name to be used for the given PersistentProperty.\n\tString getFieldName(PersistentProperty<?> property);\n\t// Callback to prepare the uncapitalized part obtained from the split up of the camel case source.\n\tprotected String preparePart(String part);\n}", "des": "Configurable FieldNamingStrategy that splits up camel-case property names and reconcatenates them using a configured delimiter."}
{"index": 13163, "repo": "spring-data-commons-3.1.2", "code": "public abstract class CdiRepositoryBean<T> extends Object implements jakarta.enterprise.inject.spi.Bean<T>, jakarta.enterprise.inject.spi.PassivationCapable {\n\t// Applies the configuration from CdiRepositoryConfiguration to RepositoryFactorySupport by looking up the actual configuration.\n\tprotected void applyConfiguration(RepositoryFactorySupport repositoryFactory);\n}", "des": "Base class for Bean wrappers."}
{"index": 13164, "repo": "spring-data-commons-3.1.2", "code": "public interface CdiRepositoryConfiguration {\n\t// Return the QueryMethodEvaluationContextProvider to use.\n\tdefault Optional<QueryMethodEvaluationContextProvider> getEvaluationContextProvider();\n\t// Return the NamedQueries to use.\n\tdefault Optional<NamedQueries> getNamedQueries();\n\t// Returns the list of QueryCreationListener to be used during repository proxy creation.\n\tdefault List<QueryCreationListener<?>> getQueryCreationListeners();\n}", "des": "Interface containing the configurable options for the Spring Data repository subsystem using CDI."}
{"index": 13165, "repo": "spring-data-commons-3.1.2", "code": "public abstract class CdiRepositoryExtensionSupport extends Object implements jakarta.enterprise.inject.spi.Extension {\n\tprotected CustomRepositoryImplementationDetector getCustomImplementationDetector();\n\tprotected CdiRepositoryContext getRepositoryContext();\n\t// Provides access to all repository types as well as their qualifiers.\n\tprotected Iterable<Map.Entry<Class<?>,Set<Annotation>>> getRepositoryTypes();\n}", "des": "Base class for Extension implementations that create instances for Spring Data repositories."}
{"index": 13166, "repo": "spring-data-commons-3.1.2", "code": "public interface ChangeSetPersister<K> {\n\t// Return id\n\tK getPersistentId(ChangeSetBacked entity, ChangeSet cs);\n\t// TODO how to tell when not found?\n\tvoid getPersistentState(Class<? extends ChangeSetBacked> entityClass, K key, ChangeSet changeSet);\n\t// Return key\n\tK persistState(ChangeSetBacked entity, ChangeSet cs);\n}", "des": "Interface to be implemented by classes that can synchronize between data stores and ChangeSets."}
{"index": 13167, "repo": "spring-data-commons-3.1.2", "code": "public class Circle extends Object implements Shape {\n\tboolean equals(Object o);\n\t// Returns the center of the Circle.\n\tPoint getCenter();\n\t// Returns the radius of the Circle.\n\tDistance getRadius();\n}", "des": "Represents a geospatial circle value"}
{"index": 13168, "repo": "spring-data-commons-3.1.2", "code": "public class ClassGeneratingPropertyAccessorFactory extends Object implements PersistentPropertyAccessorFactory {\n\t// Returns a PersistentPropertyAccessor for a given PersistentEntity and bean.\n\t<T> PersistentPropertyAccessor<T> getPropertyAccessor(PersistentEntity<?,?> entity, T bean);\n\t// Checks whether an accessor class can be generated.\n\tboolean isSupported(PersistentEntity<?,?> entity);\n}", "des": "A factory that can generate byte code to speed-up dynamic property access."}
{"index": 13169, "repo": "spring-data-commons-3.1.2", "code": "public abstract class ClassUtils extends Object {\n\t// Asserts the given Method's return type to be one of the given types.\n\tstatic void assertReturnTypeAssignable(Method method, Class<?>... types);\n\t// Deprecated. Use getNumberOfOccurrences(Method, Class).\n\tstatic int getNumberOfOccurences(Method method, Class<?> type);\n\t// Returns the number of occurrences for the given parameter type in the given Method.\n\tstatic int getNumberOfOccurrences(Method method, Class<?> parameterType);\n}", "des": "Utility class to work with classes."}
{"index": 13170, "repo": "spring-data-commons-3.1.2", "code": "public interface CloseableIterator<T> extends Iterator<T>, Closeable {\n\tvoid close();\n\t// Create a Spliterator over the elements provided by this Iterator.\n\tdefault Spliterator<T> spliterator();\n\t// Return a sequential Stream with this Iterator as its source.\n\tdefault Stream<T> stream();\n}", "des": "A CloseableIterator serves as a bridging data structure for the underlying data store specific results that can be wrapped in a Java 8 java.util.stream.Stream."}
{"index": 13171, "repo": "spring-data-commons-3.1.2", "code": "public class ConfigurableTypeInformationMapper extends Object implements TypeInformationMapper {\n\t// Returns the alias to be used for the given TypeInformation.\n\tAlias createAliasFor(TypeInformation<?> type);\n\t// Returns the actual TypeInformation to be used for the given alias.\n\tTypeInformation<?> resolveTypeFrom(Alias alias);\n}", "des": "TypeInformationMapper implementation that can be either set up using a MappingContext or manually set up Map of String aliases to types."}
{"index": 13172, "repo": "spring-data-commons-3.1.2", "code": "public interface ConfigurationUtils {\n\t// Returns the bean class name of the given BeanDefinition.\n\tstatic String getRequiredBeanClassName(BeanDefinition beanDefinition);\n\t// Returns the ClassLoader used by the given XmlReaderContext.\n\tstatic ClassLoader getRequiredClassLoader(XmlReaderContext context);\n\t// Returns the ClassLoader used by the given ResourceLoader.\n\tstatic ClassLoader getRequiredClassLoader(ResourceLoader resourceLoader);\n}", "des": "Helper class to centralize common functionality that needs to be used in various places of the configuration implementation."}
{"index": 13173, "repo": "spring-data-commons-3.1.2", "code": "public interface ConverterBuilder {\n\t// Returns all GenericConverter instances to be registered for the current ConverterBuilder.\n\tSet<GenericConverter> getConverters();\n\t// Creates a new ConverterBuilder.ReadingConverterBuilder to produce a converter to read values of the given source (the store type) into the given target (the domain type).\n\tstatic <S, T> ConverterBuilder.ReadingConverterBuilder<S,T> reading(Class<S> source, Class<T> target, Function<? super S,? extends T> function);\n}", "des": "API to easily set up GenericConverter instances using Java 8 lambdas, mostly in bidirectional fashion for easy registration as custom type converters of the Spring Data mapping subsystem."}
{"index": 13174, "repo": "spring-data-commons-3.1.2", "code": "public class ConvertingPropertyAccessor<T> extends Object {\n\t// Returns the underlying bean.\n\tT getBean();\n\t// Returns the value of the given PersistentProperty of the underlying bean instance.\n\tObject getProperty(PersistentProperty<?> property);\n\t// Returns the value of the given PersistentProperty converted to the given type.\n\t<S> S getProperty(PersistentProperty<?> property, Class<S> targetType);\n}", "des": "PersistentPropertyAccessor that potentially converts the value handed to ConvertingPropertyAccessor.setProperty(PersistentProperty, Object) to the type of the PersistentProperty using a ConversionService."}
{"index": 13175, "repo": "spring-data-commons-3.1.2", "code": "public interface CrudMethods {\n\t// Returns the delete method of the repository.\n\tOptional<Method> getDeleteMethod();\n\t// Returns the find all method of the repository.\n\tOptional<Method> getFindAllMethod();\n\t// Returns the find one method of the repository.\n\tOptional<Method> getFindOneMethod();\n\t// Returns the method to be used for saving entities.\n\tOptional<Method> getSaveMethod();\n\t// Returns whether the repository exposes a delete method.\n\tboolean hasDelete();\n}", "des": "Meta-information about the CRUD methods of a repository."}
{"index": 13176, "repo": "spring-data-commons-3.1.2", "code": "@NoRepositoryBean public interface CrudRepository<T,ID> extends Repository<T,ID> {\n\t// Returns the number of entities available.\n\tlong count();\n\t// Deletes a given entity.\n\tvoid delete(T entity);\n\t// Deletes all entities managed by the repository.\n\tvoid deleteAll();\n\t// Deletes the given entities.\n\tvoid deleteAll(Iterable<? extends T> entities);\n\t// Deletes all instances of the type T with the given IDs.\n\tvoid deleteAllById(Iterable<? extends ID> ids);\n}", "des": "Interface for generic CRUD operations on a repository for a specific type."}
{"index": 13177, "repo": "spring-data-commons-3.1.2", "code": "public enum CurrentDateTimeProvider extends Enum<CurrentDateTimeProvider> implements DateTimeProvider {\n\t// Returns the current time to be used as modification or creation date.\n\tOptional<TemporalAccessor> getNow();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CurrentDateTimeProvider valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CurrentDateTimeProvider[] values();\n}", "des": "Default DateTimeProvider simply creating new LocalDateTime instances for each method call."}
{"index": 13178, "repo": "spring-data-commons-3.1.2", "code": "public interface CustomCollectionRegistrar {\n\t// Return all types that are considered valid return types for methods using pagination.\n\tdefault Collection<Class<?>> getAllowedPaginationReturnTypes();\n\t// Returns all types that are supposed to be considered collections.\n\tCollection<Class<?>> getCollectionTypes();\n\t// Returns all types that are supposed to be considered maps.\n\tCollection<Class<?>> getMapTypes();\n}", "des": "An SPI to register custom collection types."}
{"index": 13179, "repo": "spring-data-commons-3.1.2", "code": "public class CustomCollections extends Object {\n\t// Returns all custom collection and map types.\n\tstatic Set<Class<?>> getCustomTypes();\n\t// Returns the map base type for the given type, i.e. the one that's considered the logical map interface (Map for HashMap etc.).\n\tstatic Class<?> getMapBaseType(Class<?> type);\n\t// Returns all types that are allowed pagination return types.\n\tstatic Set<Class<?>> getPaginationReturnTypes();\n}", "des": "Central API to expose information about custom collections present for Spring Data."}
{"index": 13180, "repo": "spring-data-commons-3.1.2", "code": "public class CustomConversions extends Object {\n\t// Returns the target type to convert to in case we have a custom conversion registered to convert the given source type into a store native one.\n\tOptional<Class<?>> getCustomWriteTarget(Class<?> sourceType);\n\t// Returns the target type we can read an inject of the given source type to.\n\tOptional<Class<?>> getCustomWriteTarget(Class<?> sourceType, Class<?> requestedTargetType);\n}", "des": "Value object to capture custom conversion."}
{"index": 13181, "repo": "spring-data-commons-3.1.2", "code": "public static class CustomConversions.StoreConversions extends Object {\n\tboolean equals(Object o);\n\t// Returns CustomConversions.ConverterRegistrations for the given converter.\n\tStreamable<org.springframework.data.convert.CustomConversions.ConverterRegistration> getRegistrationsFor(Object converter);\n}", "des": "Value type to capture store-specific extensions to the CustomConversions."}
{"index": 13182, "repo": "spring-data-commons-3.1.2", "code": "public class CustomMetric extends Object implements Metric {\n\t// Returns the scientific abbreviation of the unit the Metric is in.\n\tString getAbbreviation();\n\t// Returns the multiplier to calculate metrics values from a base scale.\n\tdouble getMultiplier();\n}", "des": "Value object to create custom Metrics on the fly."}
{"index": 13183, "repo": "spring-data-commons-3.1.2", "code": "public class DefaultCrudMethods extends Object implements CrudMethods {\n\t// Returns the delete method of the repository.\n\tOptional<Method> getDeleteMethod();\n\t// Returns the find all method of the repository.\n\tOptional<Method> getFindAllMethod();\n\t// Returns the find one method of the repository.\n\tOptional<Method> getFindOneMethod();\n\t// Returns the method to be used for saving entities.\n\tOptional<Method> getSaveMethod();\n\t// Returns whether the repository exposes a delete method.\n\tboolean hasDelete();\n}", "des": "Default implementation to discover CRUD methods based on the given RepositoryMetadata."}
{"index": 13184, "repo": "spring-data-commons-3.1.2", "code": "public class DefaultRepositoryConfiguration<T extends RepositoryConfigurationSource> extends Object implements RepositoryConfiguration<T> {\n\t// Returns the base packages that the repository was scanned under.\n\tStreamable<String> getBasePackages();\n\tString getBeanId();\n\tRepositoryConfigurationSource getConfigSource();\n\t// Returns the RepositoryConfigurationSource that backs the RepositoryConfiguration.\n\tT getConfigurationSource();\n}", "des": "Default implementation of RepositoryConfiguration."}
{"index": 13185, "repo": "spring-data-commons-3.1.2", "code": "public class DefaultRepositoryMetadata extends AbstractRepositoryMetadata {\n\t// Returns the TypeInformationof the domain type the repository is declared to manage.\n\tTypeInformation<?> getDomainTypeInformation();\n\tSet<RepositoryFragment<?>> getFragments();\n\t// Returns the TypeInformation of the id type of the repository.\n\tTypeInformation<?> getIdTypeInformation();\n}", "des": "Default implementation of RepositoryMetadata."}
{"index": 13186, "repo": "spring-data-commons-3.1.2", "code": "public class DefaultTypeMapper<S> extends Object implements TypeMapper<S>, BeanClassLoaderAware {\n\t// Returns the alias to be used for the given TypeInformation.\n\tprotected final Alias getAliasFor(TypeInformation<?> info);\n\t// Returns the type fallback TypeInformation in case none could be extracted from the given source.\n\tprotected TypeInformation<?> getFallbackTypeFor(S source);\n\t// Reads the TypeInformation from the given source.\n\tTypeInformation<?> readType(S source);\n}", "des": "Default implementation of TypeMapper."}
{"index": 13187, "repo": "spring-data-commons-3.1.2", "code": "public class DelegatingEntityInformation<T,ID> extends Object implements EntityInformation<T,ID> {\n\t// Returns the id of the given entity or null if none can be obtained.\n\tID getId(T entity);\n\t// Returns the type of the id of the entity.\n\tClass<ID> getIdType();\n\t// Returns the actual domain class type.\n\tClass<T> getJavaType();\n\t// Returns whether the given entity is considered to be new.\n\tboolean isNew(T entity);\n}", "des": "Useful base class to implement custom EntityInformations and delegate execution of standard methods from EntityInformation to a special implementation."}
{"index": 13188, "repo": "spring-data-commons-3.1.2", "code": "public final class Distance extends Object implements Serializable, Comparable<Distance> {\n\t// Adds the given distance to the current one.\n\tDistance add(Distance other);\n\t// Adds the given Distance to the current one and forces the result to be in a given Metric.\n\tDistance add(Distance other, Metric metric);\n\t// Creates a new Range by creating minimum and maximum Distance from the given values.\n\tstatic Range<Distance> between(double minValue, Metric minMetric, double maxValue, Metric maxMetric);\n}", "des": "Value object to represent distances in a given metric."}
{"index": 13189, "repo": "spring-data-commons-3.1.2", "code": "public enum DistanceFormatter extends Enum<DistanceFormatter> implements Converter<String,Distance>, Formatter<Distance> {\n\tfinal Distance convert(String source);\n\tDistance parse(String text, Locale locale);\n\tString print(Distance distance, Locale locale);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DistanceFormatter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DistanceFormatter[] values();\n}", "des": "Converter to create Distance instances from String representations."}
{"index": 13190, "repo": "spring-data-commons-3.1.2", "code": "public interface EntityCallbacks {\n\t// Add the given callback using generic type argument detection for identification of supported types.\n\tvoid addEntityCallback(EntityCallback<?> callback);\n\t// Invoke matching entity callbacks with given arguments.\n\t<T> T callback(Class<? extends EntityCallback> callbackType, T entity, Object... args);\n\t// Obtain a new EntityCallbacks instance.\n\tstatic EntityCallbacks create();\n}", "des": "Interface to be implemented by objects that can manage a number of EntityCallback objects and invoke these with a specific entity."}
{"index": 13191, "repo": "spring-data-commons-3.1.2", "code": "public interface EntityConverter<E extends PersistentEntity<?,P>,P extends PersistentProperty<P>,T,S> extends EntityReader<T,S>, EntityWriter<T,S> {\n\t// Returns the underlying ConversionService used by the converter.\n\tConversionService getConversionService();\n\t// Returns the underlying MappingContext used by the converter.\n\tMappingContext<? extends E,P> getMappingContext();\n}", "des": "Combined EntityReader and EntityWriter and add the ability to access a MappingContext and ConversionService."}
{"index": 13192, "repo": "spring-data-commons-3.1.2", "code": "public interface EntityInformation<T,ID> extends EntityMetadata<T> {\n\t// Returns the id of the given entity or null if none can be obtained.\n\tID getId(T entity);\n\t// Returns the type of the id of the entity.\n\tClass<ID> getIdType();\n\t// Returns the identifier of the given entity.\n\tdefault ID getRequiredId(T entity);\n\t// Returns whether the given entity is considered to be new.\n\tboolean isNew(T entity);\n}", "des": "Extension of EntityMetadata to add functionality to query information of entity instances."}
{"index": 13193, "repo": "spring-data-commons-3.1.2", "code": "public class EntityProjection<M,D> extends Object implements Streamable<EntityProjection.PropertyProjection<?,?>> {\n\t// Return a EntityProjection for a property identified by name.\n\tEntityProjection<?,?> findProperty(String name);\n\t// Performs the given action for each element of the Streamable recursively until all elements of the graph have been processed or the action throws an Exception.\n\tvoid forEachRecursive(Consumer<? super EntityProjection.PropertyProjection<?,?>> action);\n}", "des": "Descriptor for a top-level mapped type representing a view onto a domain type structure."}
{"index": 13194, "repo": "spring-data-commons-3.1.2", "code": "public static class EntityProjection.ContainerPropertyProjection<M,D> extends EntityProjection.PropertyProjection<M,D> {\n\t// Create a non-projecting variant of a mapped type.\n\tstatic <M, D> EntityProjection.ContainerPropertyProjection<M,D> nonProjecting(PropertyPath propertyPath, TypeInformation<M> mappedType, TypeInformation<D> domainType);\n}", "des": "Descriptor for a property-level type along its potential projection that is held within a Collection-like or Map-like container."}
{"index": 13195, "repo": "spring-data-commons-3.1.2", "code": "public static enum EntityProjection.ProjectionType extends Enum<EntityProjection.ProjectionType> {\n\t// Obtain the EntityProjection.ProjectionType from a given ProjectionInformation.\n\tstatic EntityProjection.ProjectionType from(ProjectionInformation information);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic EntityProjection.ProjectionType valueOf(String name);\n}", "des": "Projection type."}
{"index": 13196, "repo": "spring-data-commons-3.1.2", "code": "public static class EntityProjection.PropertyProjection<M,D> extends EntityProjection<M,D> {\n\tPropertyPath getPropertyPath();\n\t// Create a non-projecting variant of a mapped type.\n\tstatic <M, D> EntityProjection.PropertyProjection<M,D> nonProjecting(PropertyPath propertyPath, TypeInformation<M> mappedType, TypeInformation<D> domainType);\n}", "des": "Descriptor for a property-level type along its potential projection."}
{"index": 13197, "repo": "spring-data-commons-3.1.2", "code": "public class EntityProjectionIntrospector extends Object {\n\t// Create a new EntityProjectionIntrospector given ProjectionFactory, EntityProjectionIntrospector.ProjectionPredicate and MappingContext.\n\tstatic EntityProjectionIntrospector create(ProjectionFactory projectionFactory, EntityProjectionIntrospector.ProjectionPredicate projectionPredicate, MappingContext<?,?> mappingContext);\n}", "des": "This class is introspects the returned type in the context of a domain type for all reachable properties (w/o cycles) to determine which property paths are subject to projection."}
{"index": 13198, "repo": "spring-data-commons-3.1.2", "code": "public static interface EntityProjectionIntrospector.ProjectionPredicate {\n\t// Return a composed predicate that represents a short-circuiting logical AND of this predicate and another.\n\tdefault EntityProjectionIntrospector.ProjectionPredicate and(EntityProjectionIntrospector.ProjectionPredicate other);\n\t// Return a predicate that represents the logical negation of this predicate.\n\tdefault EntityProjectionIntrospector.ProjectionPredicate negate();\n}", "des": "Represents a predicate (boolean-valued function) of a target type and its underlying type."}
{"index": 13199, "repo": "spring-data-commons-3.1.2", "code": "public interface EvaluationContextExtension extends ExtensionIdAware {\n\t// Return the functions exposed by the extension.\n\tdefault Map<String,Function> getFunctions();\n\t// Return the properties exposed by the extension.\n\tdefault Map<String,Object> getProperties();\n\t// Return the root object to be exposed by the extension.\n\tdefault Object getRootObject();\n}", "des": "SPI to allow adding a set of properties and function definitions accessible via the root of an EvaluationContext provided by an ExtensionAwareQueryMethodEvaluationContextProvider."}
{"index": 13200, "repo": "spring-data-commons-3.1.2", "code": "@FunctionalInterface public interface EvaluationContextProvider {\n\t// Return a EvaluationContext built using the given parameter values.\n\tEvaluationContext getEvaluationContext(Object rootObject);\n\t// Return a tailored EvaluationContext built using the given parameter values and considering expression dependencies.\n\tdefault EvaluationContext getEvaluationContext(Object rootObject, ExpressionDependencies dependencies);\n}", "des": "Provides a way to access a centrally defined potentially shared StandardEvaluationContext."}
{"index": 13201, "repo": "spring-data-commons-3.1.2", "code": "public interface Example<T> {\n\t// Get the ExampleMatcher used.\n\tExampleMatcher getMatcher();\n\t// Get the example used.\n\tT getProbe();\n\t// Get the actual type for the probe used.\n\tdefault Class<T> getProbeType();\n\t// Create a new Example including all non-null properties by default.\n\tstatic <T> Example<T> of(T probe);\n\t// Create a new Example using the given ExampleMatcher.\n\tstatic <T> Example<T> of(T probe, ExampleMatcher matcher);\n}", "des": "Support for query by example (QBE)."}
{"index": 13202, "repo": "spring-data-commons-3.1.2", "code": "public interface ExampleMatcher {\n\t// Get defined ExampleMatcher.StringMatcher.\n\tExampleMatcher.StringMatcher getDefaultStringMatcher();\n\tSet<String> getIgnoredPaths();\n\t// Get the match mode of the ExampleMatcher.\n\tExampleMatcher.MatchMode getMatchMode();\n\t// Get defined null handling.\n\tExampleMatcher.NullHandler getNullHandler();\n\tExampleMatcher.PropertySpecifiers getPropertySpecifiers();\n\t// Returns whether all of the predicates of the Example are supposed to match.\n\tdefault boolean isAllMatching();\n}", "des": "Specification for property path matching to use in query by example (QBE)."}
{"index": 13203, "repo": "spring-data-commons-3.1.2", "code": "public static class ExampleMatcher.GenericPropertyMatcher extends Object {\n\tprotected boolean canEqual(Object other);\n\t// Sets ignores case to false.\n\tExampleMatcher.GenericPropertyMatcher caseSensitive();\n\t// Sets string matcher to ExampleMatcher.StringMatcher.CONTAINING.\n\tExampleMatcher.GenericPropertyMatcher contains();\n\t// Sets string matcher to ExampleMatcher.StringMatcher.ENDING.\n\tExampleMatcher.GenericPropertyMatcher endsWith();\n\tboolean equals(Object o);\n}", "des": "A generic property matcher that specifies string matching and case sensitivity."}
{"index": 13204, "repo": "spring-data-commons-3.1.2", "code": "public static class ExampleMatcher.GenericPropertyMatchers extends Object {\n\t// Creates a ExampleMatcher.GenericPropertyMatcher that matches string case-sensitive.\n\tstatic ExampleMatcher.GenericPropertyMatcher caseSensitive();\n\t// Creates a ExampleMatcher.GenericPropertyMatcher that matches string using ExampleMatcher.StringMatcher.CONTAINING.\n\tstatic ExampleMatcher.GenericPropertyMatcher contains();\n}", "des": "Predefined property matchers to create a ExampleMatcher.GenericPropertyMatcher."}
{"index": 13205, "repo": "spring-data-commons-3.1.2", "code": "public static enum ExampleMatcher.MatchMode extends Enum<ExampleMatcher.MatchMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ExampleMatcher.MatchMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ExampleMatcher.MatchMode[] values();\n}", "des": "The match modes to expose so that clients can find about how to concatenate the predicates."}
{"index": 13206, "repo": "spring-data-commons-3.1.2", "code": "public static enum ExampleMatcher.NullHandler extends Enum<ExampleMatcher.NullHandler> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ExampleMatcher.NullHandler valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ExampleMatcher.NullHandler[] values();\n}", "des": "Null handling for creating criterion out of an Example."}
{"index": 13207, "repo": "spring-data-commons-3.1.2", "code": "public static class ExampleMatcher.PropertySpecifier extends Object {\n\tprotected boolean canEqual(Object other);\n\tboolean equals(Object o);\n\tBoolean getIgnoreCase();\n\t// Get the properties Dot-Path.\n\tString getPath();\n\t// Get the property transformer to be applied.\n\tExampleMatcher.PropertyValueTransformer getPropertyValueTransformer();\n\t// Get the ExampleMatcher.StringMatcher.\n\tExampleMatcher.StringMatcher getStringMatcher();\n}", "des": "Define specific property handling for a Dot-Path."}
{"index": 13208, "repo": "spring-data-commons-3.1.2", "code": "public static enum ExampleMatcher.StringMatcher extends Enum<ExampleMatcher.StringMatcher> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ExampleMatcher.StringMatcher valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ExampleMatcher.StringMatcher[] values();\n}", "des": "Match modes for treatment of String values."}
{"index": 13209, "repo": "spring-data-commons-3.1.2", "code": "public class ExampleMatcherAccessor extends Object {\n\t// Get defined ExampleMatcher.StringMatcher.\n\tExampleMatcher.StringMatcher getDefaultStringMatcher();\n\t// Get defined null handling.\n\tExampleMatcher.NullHandler getNullHandler();\n\t// Get the ExampleMatcher.PropertySpecifier for given path.\n\tExampleMatcher.PropertySpecifier getPropertySpecifier(String path);\n}", "des": "Accessor for the ExampleMatcher to use in modules that support query by example (QBE) querying."}
{"index": 13210, "repo": "spring-data-commons-3.1.2", "code": "public class ExpressionDependencies extends Object implements Streamable<ExpressionDependencies.ExpressionDependency> {\n\t// Discover all expression dependencies that are referenced in the expression root.\n\tstatic ExpressionDependencies discover(Expression expression);\n\t// Discover all expression dependencies that are referenced in the expression root.\n\tstatic ExpressionDependencies discover(SpelNode root, boolean topLevelOnly);\n\tboolean equals(Object o);\n}", "des": "Value object capturing dependencies to a method or property/field that is referenced from a SpEL expression."}
{"index": 13211, "repo": "spring-data-commons-3.1.2", "code": "public static class ExpressionDependencies.ExpressionDependency extends Object {\n\tboolean equals(Object o);\n\t// Create a new ExpressionDependencies.ExpressionDependency for a method.\n\tstatic ExpressionDependencies.ExpressionDependency forMethod(String methodName);\n\t// Create a new ExpressionDependencies.ExpressionDependency for a property or field.\n\tstatic ExpressionDependencies.ExpressionDependency forPropertyOrField(String fieldOrPropertyName);\n\tString getSymbol();\n\tboolean isMethod();\n}", "des": "Value object to describe a dependency to a method or property/field that is referenced from a SpEL expression."}
{"index": 13212, "repo": "spring-data-commons-3.1.2", "code": "public class ExtensionAwareEvaluationContextProvider extends Object implements EvaluationContextProvider {\n\t// Return a EvaluationContext built using the given parameter values.\n\tStandardEvaluationContext getEvaluationContext(Object rootObject);\n\t// Return a tailored EvaluationContext built using the given parameter values and considering expression dependencies.\n\tStandardEvaluationContext getEvaluationContext(Object rootObject, ExpressionDependencies dependencies);\n}", "des": "An EvaluationContextProvider that assembles an EvaluationContext from a list of EvaluationContextExtension instances."}
{"index": 13213, "repo": "spring-data-commons-3.1.2", "code": "public class ExtensionAwareQueryMethodEvaluationContextProvider extends Object implements QueryMethodEvaluationContextProvider {\n\t// Returns an EvaluationContext built using the given Parameters and parameter values.\n\t<T extends Parameters<?, ?>>EvaluationContext getEvaluationContext(T parameters, Object[] parameterValues);\n}", "des": "An QueryMethodEvaluationContextProvider that assembles an EvaluationContext from a list of EvaluationContextExtension instances."}
{"index": 13214, "repo": "spring-data-commons-3.1.2", "code": "public final class FactoryMethod<T,P extends PersistentProperty<P>> extends Object {\n\t// Returns the underlying Constructor.\n\tMethod getFactoryMethod();\n\t// Returns the Parameters of the executable.\n\tList<Parameter<Object,P>> getParameters();\n\t// Returns whether the given PersistentProperty is referenced in a creator argument of the PersistentEntity backing this InstanceCreatorMetadataSupport.\n\tboolean isCreatorParameter(PersistentProperty<?> property);\n}", "des": "Value object to encapsulate the factory method to be used when mapping persistent data to objects."}
{"index": 13215, "repo": "spring-data-commons-3.1.2", "code": "public interface FluentQuery<T> {\n\t// Define the target type the result should be mapped to.\n\t<R> FluentQuery<R> as(Class<R> resultType);\n\t// Define the query limit.\n\tdefault FluentQuery<T> limit(int limit);\n\t// Define which properties or property paths to include in the query.\n\tdefault FluentQuery<T> project(String... properties);\n\t// Define which properties or property paths to include in the query.\n\tFluentQuery<T> project(Collection<String> properties);\n}", "des": "Fluent interface to define and run a query along with projection and sorting and."}
{"index": 13216, "repo": "spring-data-commons-3.1.2", "code": "public static interface FluentQuery.FetchableFluentQuery<T> extends FluentQuery<T> {\n\t// Get all matching elements.\n\tList<T> all();\n\t// Define the target type the result should be mapped to.\n\t<R> FluentQuery.FetchableFluentQuery<R> as(Class<R> resultType);\n\t// Get the number of matching elements.\n\tlong count();\n\t// Check for the presence of matching elements.\n\tboolean exists();\n\t// Get the first or no result.\n\tdefault Optional<T> first();\n\t// Get the first or no result.\n\tT firstValue();\n}", "des": "Fetchable extension FluentQuery allowing to materialize results from the underlying query."}
{"index": 13217, "repo": "spring-data-commons-3.1.2", "code": "public static interface FluentQuery.ReactiveFluentQuery<T> extends FluentQuery<T> {\n\t// Get all matching elements.\n\treactor.core.publisher.Flux<T> all();\n\t// Define the target type the result should be mapped to.\n\t<R> FluentQuery.ReactiveFluentQuery<R> as(Class<R> resultType);\n\t// Get the number of matching elements.\n\treactor.core.publisher.Mono<Long> count();\n\t// Check for the presence of matching elements.\n\treactor.core.publisher.Mono<Boolean> exists();\n}", "des": "Reactive extension FluentQuery allowing to materialize results from the underlying query."}
{"index": 13218, "repo": "spring-data-commons-3.1.2", "code": "public class Function extends Object {\n\t// Returns the type declaring the Function.\n\tClass<?> getDeclaringClass();\n\t// Returns the name of the function.\n\tString getName();\n\t// Returns the number of parameters required by the underlying method.\n\tint getParameterCount();\n\t// Invokes the function with the given arguments.\n\tObject invoke(Object[] arguments);\n\t// Checks whether this Function has the same signature as another Function.\n\tboolean isSignatureEqual(Function other);\n}", "des": "Value object to represent a function."}
{"index": 13219, "repo": "spring-data-commons-3.1.2", "code": "public class GeoPage<T> extends PageImpl<GeoResult<T>> {\n\tboolean equals(Object obj);\n\tDistance getAverageDistance();\n\t// Returns the page content as List.\n\tList<GeoResult<T>> getContent();\n\t// Applies the given Function to the content of the Chunk.\n\tprotected <U> List<U> getConvertedContent(Function<? super GeoResult<T>,? extends U> converter);\n\t// Returns the number of the current Slice.\n\tint getNumber();\n\t// Returns the number of elements currently on this Slice.\n\tint getNumberOfElements();\n}", "des": "Custom Page to carry the average distance retrieved from the GeoResults the GeoPage is set up from."}
{"index": 13220, "repo": "spring-data-commons-3.1.2", "code": "public class GeoResults<T> extends Object implements Iterable<GeoResult<T>>, Serializable {\n\tboolean equals(Object o);\n\t// Returns the average distance of all GeoResults in this list.\n\tDistance getAverageDistance();\n\t// Returns the actual content of the GeoResults.\n\tList<GeoResult<T>> getContent();\n\tIterator<GeoResult<T>> iterator();\n}", "des": "Value object to capture GeoResults as well as the average distance they have."}
{"index": 13221, "repo": "spring-data-commons-3.1.2", "code": "public interface IdentifierAccessor {\n\t// Returns the value of the identifier.\n\tObject getIdentifier();\n\t// Returns the identifier of the underlying instance.\n\tdefault Object getRequiredIdentifier();\n}", "des": "Interface for a component allowing the access of identifier values."}
{"index": 13222, "repo": "spring-data-commons-3.1.2", "code": "public interface ImplementationDetectionConfiguration {\n\t// Returns the final lookup configuration for the given fully-qualified fragment interface name.\n\tdefault ImplementationLookupConfiguration forFragment(String fragmentInterfaceName);\n\t// Returns the final lookup configuration for the given RepositoryConfiguration.\n\tdefault ImplementationLookupConfiguration forRepositoryConfiguration(RepositoryConfiguration<?> config);\n}", "des": "Expresses configuration to be used to detect implementation classes for repositories and repository fragments."}
{"index": 13223, "repo": "spring-data-commons-3.1.2", "code": "public interface ImplementationLookupConfiguration extends ImplementationDetectionConfiguration {\n\t// Returns the bean name of the implementation to be looked up.\n\tString getImplementationBeanName();\n\t// Returns the simple name of the class to be looked up.\n\tString getImplementationClassName();\n\t// Returns whether the bean name created for the given bean definition results in the one required.\n\tboolean hasMatchingBeanName(BeanDefinition definition);\n}", "des": "Configuration that's used to lookup an implementation type for a repository or fragment interface."}
{"index": 13224, "repo": "spring-data-commons-3.1.2", "code": "public interface InstanceCreatorMetadata<P extends PersistentProperty<P>> {\n\tdefault int getParameterCount();\n\tList<Parameter<Object,P>> getParameters();\n\tdefault boolean hasParameters();\n\t// Check whether the given PersistentProperty is being used as creator parameter.\n\tboolean isCreatorParameter(PersistentProperty<?> property);\n}", "des": "Metadata describing a mechanism to create instances of persistent types."}
{"index": 13225, "repo": "spring-data-commons-3.1.2", "code": "public class InstantiationAwarePropertyAccessor<T> extends Object implements PersistentPropertyAccessor<T> {\n\t// Returns the underlying bean.\n\tT getBean();\n\t// Returns the value of the given PersistentProperty of the underlying bean instance.\n\tObject getProperty(PersistentProperty<?> property);\n\t// Sets the given PersistentProperty to the given value.\n\tvoid setProperty(PersistentProperty<?> property, Object value);\n}", "des": "A PersistentPropertyAccessor that will use an entity's PersistenceCreator to create a new instance of it to apply a new value for a given PersistentProperty."}
{"index": 13226, "repo": "spring-data-commons-3.1.2", "code": "public class InstantiationAwarePropertyAccessorFactory extends Object implements PersistentPropertyAccessorFactory {\n\t// Returns a PersistentPropertyAccessor for a given PersistentEntity and bean.\n\t<T> PersistentPropertyAccessor<T> getPropertyAccessor(PersistentEntity<?,?> entity, T bean);\n\t// Returns whether given PersistentEntity is supported by this PersistentPropertyAccessorFactory.\n\tboolean isSupported(PersistentEntity<?,?> entity);\n}", "des": "Delegating PersistentPropertyAccessorFactory decorating the PersistentPropertyAccessors created with an InstantiationAwarePropertyAccessor to allow the handling of purely immutable types."}
{"index": 13227, "repo": "spring-data-commons-3.1.2", "code": "public class InvalidPersistentPropertyPath extends MappingException {\n\t// Returns the part of the source path until which the source property path could be resolved.\n\tString getResolvedPath();\n\t// Returns the source property path.\n\tString getSource();\n\t// Returns the type the source property path was attempted to be resolved on.\n\tTypeInformation<?> getType();\n\t// Returns the segment of the source property path that could not be resolved.\n\tString getUnresolvableSegment();\n}", "des": "Exception to indicate a source path couldn't be resolved into a PersistentPropertyPath completely."}
{"index": 13228, "repo": "spring-data-commons-3.1.2", "code": "public class IsNewAwareAuditingHandler extends AuditingHandler {\n\t// Factory method that creates a new IsNewAwareAuditingHandler for the given MappingContext.\n\tstatic IsNewAwareAuditingHandler from(MappingContext<?,?> mappingContext);\n\t// Marks the given object created or modified based on PersistentEntity.isNew(Object).\n\tObject markAudited(Object object);\n}", "des": "AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic IsNewAwareAuditingHandler.markAudited(Object) method that will route calls to AuditingHandler.markCreated(Object) or AuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory."}
{"index": 13229, "repo": "spring-data-commons-3.1.2", "code": "public class Jackson2ResourceReader extends Object implements ResourceReader {\n\t// Reads a single or Collection of target objects from the given Resource.\n\tObject readFrom(Resource resource, ClassLoader classLoader);\n\t// Configures the JSON document's key to lookup the type to instantiate the object.\n\tvoid setTypeKey(String typeKey);\n}", "des": "A ResourceReader using Jackson to read JSON into objects."}
{"index": 13230, "repo": "spring-data-commons-3.1.2", "code": "public class JsonProjectingMethodInterceptorFactory extends Object implements MethodInterceptorFactory {\n\t// Returns the MethodInterceptor to be used for the given source object and target type.\n\tMethodInterceptor createMethodInterceptor(Object source, Class<?> targetType);\n\t// Returns whether the current factory is supposed to be used to create a MethodInterceptor for proxy of the given target type.\n\tboolean supports(Object source, Class<?> targetType);\n}", "des": "MethodInterceptorFactory to create a MethodInterceptor that will"}
{"index": 13231, "repo": "spring-data-commons-3.1.2", "code": "public final class KeysetScrollPosition extends Object implements ScrollPosition {\n\t// Returns a KeysetScrollPosition based on the same keyset and scrolling backward.\n\tKeysetScrollPosition backward();\n\tboolean equals(Object o);\n\t// Returns a KeysetScrollPosition based on the same keyset and scrolling forward.\n\tKeysetScrollPosition forward();\n\tScrollPosition.Direction getDirection();\n\tMap<String,Object> getKeys();\n\t// Returns whether the current scroll position is the initial one.\n\tboolean isInitial();\n}", "des": "A ScrollPosition based on the last seen key set."}
{"index": 13232, "repo": "spring-data-commons-3.1.2", "code": "public class KotlinDefaultMask extends Object {\n\t// Callback method to notify IntConsumer for each defaulting mask.\n\tvoid forEach(IntConsumer maskCallback);\n\t// Creates defaulting mask(s) used to invoke Kotlin default methods that conditionally apply parameter values.\n\tstatic KotlinDefaultMask from(kotlin.reflect.KFunction<?> function, Predicate<kotlin.reflect.KParameter> isPresent);\n\tint[] getDefaulting();\n}", "des": "Value object representing defaulting masks used for Kotlin methods applying parameter defaulting."}
{"index": 13233, "repo": "spring-data-commons-3.1.2", "code": "public final class KotlinReflectionUtils extends Object {\n\t// Returns a KFunction instance corresponding to the given Java Method instance, or null if this method cannot be represented by a Kotlin function.\n\tstatic kotlin.reflect.KFunction<?> findKotlinFunction(Method method);\n\t// Returns the return type of a Kotlin Method.\n\tstatic Class<?> getReturnType(Method method);\n\t// Return true if the specified class is a Kotlin data class.\n\tstatic boolean isDataClass(Class<?> type);\n}", "des": "Reflection utility methods specific to Kotlin reflection."}
{"index": 13234, "repo": "spring-data-commons-3.1.2", "code": "public class Lazy<T> extends Object implements Supplier<T> {\n\t// Creates a pre-resolved empty Lazy.\n\tstatic <T> Lazy<T> empty();\n\tboolean equals(Object o);\n\t// Creates a new Lazy with the given Function lazily applied to the current one.\n\t<S> Lazy<S> flatMap(Function<? super T,Lazy<? extends S>> function);\n\t// Returns the value created by the configured Supplier.\n\tT get();\n\t// Returns the value of the lazy evaluation.\n\tT getNullable();\n}", "des": "Simple value type to delay the creation of an object using a Supplier returning the produced object for subsequent lookups."}
{"index": 13235, "repo": "spring-data-commons-3.1.2", "code": "@NoRepositoryBean public interface ListCrudRepository<T,ID> extends CrudRepository<T,ID> {\n\t// Returns all instances of the type.\n\tList<T> findAll();\n\t// Returns all instances of the type T with the given IDs.\n\tList<T> findAllById(Iterable<ID> ids);\n\t// Saves all given entities.\n\t<S extends T>List<S> saveAll(Iterable<S> entities);\n}", "des": "Interface for generic CRUD operations on a repository for a specific type."}
{"index": 13236, "repo": "spring-data-commons-3.1.2", "code": "public interface ListQueryByExampleExecutor<T> extends QueryByExampleExecutor<T> {\n\t// Returns all entities matching the given Example.\n\t<S extends T>List<S> findAll(Example<S> example);\n\t// Returns all entities matching the given Example applying the given Sort.\n\t<S extends T>List<S> findAll(Example<S> example, Sort sort);\n}", "des": "Interface to allow execution of Query by Example Example instances."}
{"index": 13237, "repo": "spring-data-commons-3.1.2", "code": "public interface ListQuerydslPredicateExecutor<T> extends QuerydslPredicateExecutor<T> {\n\t// Returns all entities ordered by the given OrderSpecifiers.\n\tList<T> findAll(com.querydsl.core.types.OrderSpecifier<?>... orders);\n\t// Returns all entities matching the given Predicate.\n\tList<T> findAll(com.querydsl.core.types.Predicate predicate);\n}", "des": "Interface to allow execution of QueryDsl Predicate instances."}
{"index": 13238, "repo": "spring-data-commons-3.1.2", "code": "@FunctionalInterface public interface ManagedTypes {\n\t// Factory method used to construct a new instance of ManagedTypes containing no types.\n\tstatic ManagedTypes empty();\n\t// Applies the given action to each of the types contained in this ManagedTypes instance.\n\tvoid forEach(Consumer<Class<?>> action);\n\t// Factory method used to construct ManagedTypes from the given array of types.\n\tstatic ManagedTypes from(Class<?>... types);\n}", "des": "Types managed by a Spring Data implementation."}
{"index": 13239, "repo": "spring-data-commons-3.1.2", "code": "public class ManagedTypesBeanRegistrationAotProcessor extends Object implements BeanRegistrationAotProcessor {\n\t// Hook to provide a customized flavor of BeanRegistrationAotContribution.\n\tprotected BeanRegistrationAotContribution contribute(AotContext aotContext, ManagedTypes managedTypes, RegisteredBean registeredBean);\n\t// Hook to contribute configuration for a given type.\n\tprotected void contributeType(ResolvableType type, GenerationContext generationContext);\n\tString getModuleIdentifier();\n}", "des": "BeanRegistrationAotProcessor handling module ManagedTypes instances."}
{"index": 13240, "repo": "spring-data-commons-3.1.2", "code": "public interface MappingContext<E extends PersistentEntity<?,P>,P extends PersistentProperty<P>> {\n\t// Returns all PersistentPropertyPaths pointing to properties on the given type that match the given Predicate.\n\t<T> PersistentPropertyPaths<T,P> findPersistentPropertyPaths(Class<T> type, Predicate<? super P> predicate);\n\t// Returns the TypeInformations for all PersistentEntitys in the MappingContext.\n\tCollection<TypeInformation<?>> getManagedTypes();\n}", "des": "This interface defines the overall context including all known PersistentEntity instances and methods to obtain instances on demand. it is used internally to establish associations between entities and also at runtime to obtain entities by name."}
{"index": 13241, "repo": "spring-data-commons-3.1.2", "code": "public class MappingContextEvent<E extends PersistentEntity<?,P>,P extends PersistentProperty<P>> extends ApplicationEvent {\n\t// Returns the PersistentEntity the event was created for.\n\tE getPersistentEntity();\n\t// Returns whether the MappingContextEvent was triggered by the given MappingContext.\n\tboolean wasEmittedBy(MappingContext<?,?> context);\n}", "des": "Base implementation of an ApplicationEvent refering to a PersistentEntity."}
{"index": 13242, "repo": "spring-data-commons-3.1.2", "code": "public class MappingContextTypeInformationMapper extends Object implements TypeInformationMapper {\n\t// Returns the alias to be used for the given TypeInformation.\n\tAlias createAliasFor(TypeInformation<?> type);\n\t// Returns the actual TypeInformation to be used for the given alias.\n\tTypeInformation<?> resolveTypeFrom(Alias alias);\n}", "des": "TypeInformationMapper implementation that can be either set up using a MappingContext or manually set up Map of String aliases to types."}
{"index": 13243, "repo": "spring-data-commons-3.1.2", "code": "public class MappingInstantiationException extends RuntimeException {\n\t// Deprecated. since 3.0, use getEntityCreator() instead.\n\tOptional<Constructor<?>> getConstructor();\n\t// The constructor arguments used to invoke the constructor.\n\tList<Object> getConstructorArguments();\n\t// The entity creator used during the instantiation attempt.\n\tOptional<InstanceCreatorMetadata<?>> getEntityCreator();\n\t// Returns the type of the entity that was attempted to instantiate.\n\tOptional<Class<?>> getEntityType();\n}", "des": "Exception being thrown in case an entity could not be instantiated in the process of a to-object-mapping."}
{"index": 13244, "repo": "spring-data-commons-3.1.2", "code": "public interface MethodInterceptorFactory {\n\t// Returns the MethodInterceptor to be used for the given source object and target type.\n\tMethodInterceptor createMethodInterceptor(Object source, Class<?> targetType);\n\t// Returns whether the current factory is supposed to be used to create a MethodInterceptor for proxy of the given target type.\n\tboolean supports(Object source, Class<?> targetType);\n}", "des": "SPI to create MethodInterceptor instances based on the given source object and the target type to produce."}
{"index": 13245, "repo": "spring-data-commons-3.1.2", "code": "@FunctionalInterface public interface MethodLookup {\n\t// Returns a composed MethodLookup that represents a concatenation of this predicate and another.\n\tdefault MethodLookup and(MethodLookup other);\n\t// Return an ordered List of MethodLookup.MethodPredicate.\n\tList<MethodLookup.MethodPredicate> getLookups();\n}", "des": "Strategy interface providing predicates to resolve a method called on a composite to its implementation method."}
{"index": 13246, "repo": "spring-data-commons-3.1.2", "code": "public interface Metric extends Serializable {\n\t// Returns the scientific abbreviation of the unit the Metric is in.\n\tString getAbbreviation();\n\t// Returns the multiplier to calculate metrics values from a base scale.\n\tdouble getMultiplier();\n}", "des": "Interface for Metrics that can be applied to a base scale."}
{"index": 13247, "repo": "spring-data-commons-3.1.2", "code": "public enum Metrics extends Enum<Metrics> implements Metric {\n\t// Returns the scientific abbreviation of the unit the Metric is in.\n\tString getAbbreviation();\n\t// Returns the multiplier to calculate metrics values from a base scale.\n\tdouble getMultiplier();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Metrics valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Metrics[] values();\n}", "des": "Commonly used Metrics."}
{"index": 13248, "repo": "spring-data-commons-3.1.2", "code": "public interface MutablePersistentEntity<T,P extends PersistentProperty<P>> extends PersistentEntity<T,P> {\n\t// Adds an Association to the entity.\n\tvoid addAssociation(Association<P> association);\n\t// Adds a PersistentProperty to the entity.\n\tvoid addPersistentProperty(P property);\n\t// Sets the EvaluationContextProvider to be used by the entity.\n\tvoid setEvaluationContextProvider(EvaluationContextProvider provider);\n}", "des": "Interface capturing mutator methods for PersistentEntitys."}
{"index": 13249, "repo": "spring-data-commons-3.1.2", "code": "public interface NamedQueries {\n\t// Returns the named query with the given name.\n\tString getQuery(String queryName);\n\t// Returns whether the map contains a named query for the given name.\n\tboolean hasQuery(String queryName);\n}", "des": "Abstraction of a map of NamedQueries that can be looked up by their names."}
{"index": 13250, "repo": "spring-data-commons-3.1.2", "code": "public class NamedQueriesBeanDefinitionBuilder extends Object {\n\t// Builds a new BeanDefinition from the given source.\n\tBeanDefinition build(Object source);\n\t// Sets the (comma-separated) locations to load the properties files from to back the NamedQueries instance.\n\tvoid setLocations(String locations);\n}", "des": "Builder to create a BeanDefinition for a NamedQueries instance using properties."}
{"index": 13251, "repo": "spring-data-commons-3.1.2", "code": "public abstract class NullableUtils extends Object {\n\t// Determine whether a MethodParameter is explicitly annotated to be considered nullable.\n\tstatic boolean isExplicitNullable(MethodParameter methodParameter);\n\t// Determine whether ElementType in the scope of type requires non-null values.\n\tstatic boolean isNonNull(Class<?> type, ElementType elementType);\n}", "des": "Utility methods to introspect nullability rules declared in packages, classes and methods."}
{"index": 13252, "repo": "spring-data-commons-3.1.2", "code": "public class NullableWrapper extends Object {\n\t// Returns the backing value.\n\tObject getValue();\n\t// Returns the type of the contained value.\n\tClass<?> getValueType();\n}", "des": "Simple value object to wrap a nullable delegate."}
{"index": 13253, "repo": "spring-data-commons-3.1.2", "code": "public abstract class NullableWrapperConverters extends Object {\n\tstatic boolean isSingleValue(Class<?> type);\n\t// Registers converters for wrapper types found on the classpath.\n\tstatic void registerConvertersIn(ConverterRegistry registry);\n\t// Returns whether the given type is a supported wrapper type.\n\tstatic boolean supports(Class<?> type);\n\t// Returns whether the given wrapper type supports unwrapping.\n\tstatic boolean supportsUnwrapping(Class<?> type);\n}", "des": "Converters to wrap and unwrap nullable wrapper types potentially being available on the classpath."}
{"index": 13254, "repo": "spring-data-commons-3.1.2", "code": "public final class OffsetScrollPosition extends Object implements ScrollPosition {\n\t// Returns a new OffsetScrollPosition that has been advanced by the given value.\n\tOffsetScrollPosition advanceBy(long delta);\n\tboolean equals(Object o);\n\t// The zero or positive offset.\n\tlong getOffset();\n\t// Returns whether the current scroll position is the initial one.\n\tboolean isInitial();\n\t// Returns the position function to calculate.\n\tstatic IntFunction<OffsetScrollPosition> positionFunction(long startOffset);\n}", "des": "A ScrollPosition based on the offsets within query results."}
{"index": 13255, "repo": "spring-data-commons-3.1.2", "code": "public interface Optionals {\n\t// Invokes the given Suppliers for Optional results one by one and returns the first non-empty one.\n\tstatic <T> Optional<T> firstNonEmpty(Iterable<Supplier<Optional<T>>> suppliers);\n\t// Applies the given function to the elements of the source and returns the first non-empty result.\n\tstatic <S, T> Optional<T> firstNonEmpty(Iterable<S> source, Function<S,Optional<T>> function);\n}", "des": "Utility methods to work with Optionals."}
{"index": 13256, "repo": "spring-data-commons-3.1.2", "code": "public interface Page<T> extends Slice<T> {\n\t// Creates a new empty Page.\n\tstatic <T> Page<T> empty();\n\t// Creates a new empty Page for the given Pageable.\n\tstatic <T> Page<T> empty(Pageable pageable);\n\t// Returns the total amount of elements.\n\tlong getTotalElements();\n\t// Returns the number of total pages.\n\tint getTotalPages();\n\t// Returns a new Page with the content of the current one mapped by the given Function.\n\t<U> Page<U> map(Function<? super T,? extends U> converter);\n}", "des": "A page is a sublist of a list of objects."}
{"index": 13257, "repo": "spring-data-commons-3.1.2", "code": "public interface Pageable {\n\t// Returns the Pageable requesting the first page.\n\tPageable first();\n\t// Returns the offset to be taken according to the underlying page and page size.\n\tlong getOffset();\n\t// Returns the page to be returned.\n\tint getPageNumber();\n\t// Returns the number of items to be returned.\n\tint getPageSize();\n\t// Returns the sorting parameters.\n\tSort getSort();\n\t// Returns the current Sort or the given one if the current one is unsorted.\n\tdefault Sort getSortOr(Sort sort);\n}", "des": "Abstract interface for pagination information."}
{"index": 13258, "repo": "spring-data-commons-3.1.2", "code": "public abstract class PageableHandlerMethodArgumentResolverSupport extends Object {\n\t// Retrieves the maximum page size to be accepted.\n\tprotected int getMaxPageSize();\n\tprotected Pageable getPageable(MethodParameter methodParameter, String pageString, String pageSizeString);\n\t// Retrieves the parameter name to be used to find the page number in the request.\n\tprotected String getPageParameterName();\n}", "des": "Base class providing methods for handler method argument resolvers to create paging information from web requests and thus allows injecting Pageable instances into controller methods."}
{"index": 13259, "repo": "spring-data-commons-3.1.2", "code": "public class PageImpl<T> extends Object implements Page<T> {\n\tboolean equals(Object obj);\n\t// Returns the page content as List.\n\tList<T> getContent();\n\t// Applies the given Function to the content of the Chunk.\n\tprotected <U> List<U> getConvertedContent(Function<? super T,? extends U> converter);\n\t// Returns the number of the current Slice.\n\tint getNumber();\n\t// Returns the number of elements currently on this Slice.\n\tint getNumberOfElements();\n}", "des": "Basic Page implementation."}
{"index": 13260, "repo": "spring-data-commons-3.1.2", "code": "public class PageRequest extends AbstractPageRequest {\n\tboolean equals(Object obj);\n\t// Returns the Pageable requesting the first page.\n\tPageRequest first();\n\t// Returns the sorting parameters.\n\tSort getSort();\n\t// Returns the Pageable requesting the next Page.\n\tPageRequest next();\n\t// Creates a new unsorted PageRequest.\n\tstatic PageRequest of(int page, int size);\n\t// Creates a new PageRequest with sort parameters applied.\n\tstatic PageRequest of(int page, int size, Sort sort);\n}", "des": "Basic Java Bean implementation of Pageable."}
{"index": 13261, "repo": "spring-data-commons-3.1.2", "code": "@NoRepositoryBean public interface PagingAndSortingRepository<T,ID> extends Repository<T,ID> {\n\t// Returns a Page of entities meeting the paging restriction provided in the Pageable object.\n\tPage<T> findAll(Pageable pageable);\n\t// Returns all entities sorted by the given options.\n\tIterable<T> findAll(Sort sort);\n}", "des": "Repository fragment to provide methods to retrieve entities using the pagination and sorting abstraction."}
{"index": 13262, "repo": "spring-data-commons-3.1.2", "code": "public final class Pair<S,T> extends Object {\n\tboolean equals(Object o);\n\t// Returns the first element of the Pair.\n\tS getFirst();\n\t// Returns the second element of the Pair.\n\tT getSecond();\n\t// Creates a new Pair for the given elements.\n\tstatic <S, T> Pair<S,T> of(S first, T second);\n\t// A collector to create a Map from a Stream of Pairs.\n\tstatic <S, T> Collector<Pair<S,T>,?,Map<S,T>> toMap();\n}", "des": "A tuple of things."}
{"index": 13263, "repo": "spring-data-commons-3.1.2", "code": "public class Parameter<T,P extends PersistentProperty<P>> extends Object {\n\tboolean equals(Object o);\n\t// Merged annotations that this parameter is annotated with.\n\tMergedAnnotations getAnnotations();\n\t// Returns the name of the parameter.\n\tString getName();\n\t// Returns the raw resolved type of the parameter.\n\tClass<T> getRawType();\n\t// Returns the key to be used when looking up a source data structure to populate the actual parameter value.\n\tString getSpelExpression();\n}", "des": "Value object to represent constructor parameters."}
{"index": 13264, "repo": "spring-data-commons-3.1.2", "code": "public class Parameter extends Object {\n\t// Returns the position index the parameter is bound to in the context of its surrounding Parameters.\n\tint getIndex();\n\t// Returns the name of the parameter (through Param annotation).\n\tOptional<String> getName();\n\t// Returns the placeholder to be used for the parameter.\n\tString getPlaceholder();\n\t// Returns the type of the Parameter.\n\tClass<?> getType();\n\t// Returns whether the Parameter is to be bound to a query.\n\tboolean isBindable();\n}", "des": "Class to abstract a single parameter of a query method."}
{"index": 13265, "repo": "spring-data-commons-3.1.2", "code": "public interface ParameterAccessor extends Iterable<Object> {\n\t// Returns the dynamic projection type to be used when executing the query or null if none is defined.\n\tClass<?> findDynamicProjection();\n\t// Returns the bindable value with the given index.\n\tObject getBindableValue(int index);\n\t// Returns the Pageable of the parameters, if available.\n\tPageable getPageable();\n\t// Returns the ScrollPosition of the parameters, if available.\n\tScrollPosition getScrollPosition();\n}", "des": "Interface to access method parameters."}
{"index": 13266, "repo": "spring-data-commons-3.1.2", "code": "public abstract class Parameters<S extends Parameters<S,T>,T extends Parameter> extends Object implements Streamable<T> {\n\tprotected abstract S createFrom(List<T> parameters);\n\t// Deprecated, for removal: This API element is subject to removal in a future version. since 3.1, in your extension, call Parameters(Method, Function) instead.\n\tprotected T createParameter(MethodParameter parameter);\n\t// Returns a bindable parameter with the given index.\n\tT getBindableParameter(int bindableIndex);\n}", "des": "Abstracts method parameters that have to be bound to query parameters or applied to the query independently."}
{"index": 13267, "repo": "spring-data-commons-3.1.2", "code": "public class ParametersParameterAccessor extends Object implements ParameterAccessor {\n\t// Returns the dynamic projection type if available, null otherwise.\n\tClass<?> findDynamicProjection();\n\t// Returns the bindable value with the given index.\n\tObject getBindableValue(int index);\n\t// Returns the Pageable of the parameters, if available.\n\tPageable getPageable();\n\t// Returns the Parameters instance backing the accessor.\n\tParameters<?,?> getParameters();\n}", "des": "ParameterAccessor implementation using a Parameters instance to find special parameters."}
{"index": 13268, "repo": "spring-data-commons-3.1.2", "code": "public class ParameterTypes extends Object {\n\t// Returns whether the parameter types are valid for the given Method.\n\tboolean areValidFor(Method method);\n\tboolean equals(Object o);\n\t// Returns whether the current parameter types match the given Method's parameters exactly, i.e. they're equal, not only assignable.\n\tboolean exactlyMatchParametersOf(Method method);\n\tprotected Optional<ParameterTypes> getParent();\n\tprotected final Optional<ParameterTypes> getParent(TypeDescriptor tail);\n}", "des": "Abstraction over a list of parameter value types."}
{"index": 13269, "repo": "spring-data-commons-3.1.2", "code": "public abstract class ParsingUtils extends Object {\n\t// Returns a BeanDefinition for an ObjectFactoryCreatingFactoryBean pointing to the bean with the given name.\n\tstatic AbstractBeanDefinition getObjectFactoryBeanDefinition(String targetBeanName, Object source);\n\t// Returns the AbstractBeanDefinition built by the given builder with the given extracted source applied.\n\tstatic AbstractBeanDefinition getSourceBeanDefinition(BeanDefinitionBuilder builder, Object source);\n}", "des": "Utility methods for BeanDefinitionParser implementations."}
{"index": 13270, "repo": "spring-data-commons-3.1.2", "code": "public abstract class ParsingUtils extends Object {\n\t// Reconcatenates the given camel-case source String using the given delimiter.\n\tstatic String reconcatenateCamelCase(String source, String delimiter);\n\t// Splits up the given camel-case String.\n\tstatic List<String> splitCamelCase(String source);\n\t// Splits up the given camel-case String and returns the parts in lower case.\n\tstatic List<String> splitCamelCaseToLower(String source);\n}", "des": "Utility methods for String parsing."}
{"index": 13271, "repo": "spring-data-commons-3.1.2", "code": "public class Part extends Object {\n\tboolean equals(Object o);\n\t// Returns how many method parameters are bound by this part.\n\tint getNumberOfArguments();\n\tPropertyPath getProperty();\n\tPart.Type getType();\n\t// Returns whether the PropertyPath referenced should be matched ignoring case.\n\tPart.IgnoreCaseType shouldIgnoreCase();\n}", "des": "A single part of a method name that has to be transformed into a query part."}
{"index": 13272, "repo": "spring-data-commons-3.1.2", "code": "public static enum Part.IgnoreCaseType extends Enum<Part.IgnoreCaseType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Part.IgnoreCaseType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Part.IgnoreCaseType[] values();\n}", "des": "The various types of ignore case that are supported."}
{"index": 13273, "repo": "spring-data-commons-3.1.2", "code": "public static enum Part.Type extends Enum<Part.Type> {\n\t// Callback method to extract the actual propertyPath to be bound from the given part.\n\tString extractProperty(String part);\n\t// Returns the Part.Type of the Part for the given raw propertyPath.\n\tstatic Part.Type fromProperty(String rawProperty);\n\t// Returns all keywords supported by the current Part.Type.\n\tCollection<String> getKeywords();\n\t// Returns the number of arguments the propertyPath binds.\n\tint getNumberOfArguments();\n}", "des": "The type of a method name part."}
{"index": 13274, "repo": "spring-data-commons-3.1.2", "code": "public class PartTree extends Object implements Streamable<PartTree.OrPart> {\n\t// Return the number of maximal results to return or null if not restricted.\n\tInteger getMaxResults();\n\t// Returns an Iterable of all parts contained in the PartTree.\n\tStreamable<Part> getParts();\n\t// Returns all Parts of the PartTree of the given Part.Type.\n\tStreamable<Part> getParts(Part.Type type);\n\t// Returns the Sort specification parsed from the source.\n\tSort getSort();\n}", "des": "Class to parse a String into a tree or PartTree.OrParts consisting of simple Part instances in turn."}
{"index": 13275, "repo": "spring-data-commons-3.1.2", "code": "public interface Persistable<ID> {\n\t// Returns the id of the entity.\n\tID getId();\n\t// Returns if the Persistable is new or was persisted already.\n\tboolean isNew();\n}", "des": "Simple interface for entities."}
{"index": 13276, "repo": "spring-data-commons-3.1.2", "code": "public enum PersistableIsNewStrategy extends Enum<PersistableIsNewStrategy> implements IsNewStrategy {\n\t// Returns whether the given entity is new, i.e. has never been persisted before or not.\n\tboolean isNew(Object entity);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PersistableIsNewStrategy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PersistableIsNewStrategy[] values();\n}", "des": "IsNewStrategy that invokes Persistable.isNew() on the given object."}
{"index": 13277, "repo": "spring-data-commons-3.1.2", "code": "public class PersistentEntities extends Object implements Streamable<PersistentEntity<?,? extends PersistentProperty<?>>> {\n\t// Returns the PersistentEntity the given PersistentProperty refers to in case it's an association.\n\tPersistentEntity<?,?> getEntityUltimatelyReferredToBy(PersistentProperty<?> property);\n\t// Returns all TypeInformation exposed by the registered MappingContexts.\n\tStreamable<TypeInformation<?>> getManagedTypes();\n}", "des": "Value object to access PersistentEntity instances managed by MappingContexts."}
{"index": 13278, "repo": "spring-data-commons-3.1.2", "code": "public interface PersistentEntity<T,P extends PersistentProperty<P>> extends Iterable<P> {\n\t// Applies the given PropertyHandler to both all PersistentPropertys as well as all inverse properties of all Associations.\n\tdefault void doWithAll(PropertyHandler<P> handler);\n\t// Applies the given AssociationHandler to all Association contained in this PersistentEntity.\n\tvoid doWithAssociations(AssociationHandler<P> handler);\n}", "des": "Represents a persistent entity."}
{"index": 13279, "repo": "spring-data-commons-3.1.2", "code": "public class PersistentEntityInformation<T,ID> extends Object implements EntityInformation<T,ID> {\n\t// Returns the id of the given entity or null if none can be obtained.\n\tID getId(T entity);\n\t// Returns the type of the id of the entity.\n\tClass<ID> getIdType();\n\t// Returns the actual domain class type.\n\tClass<T> getJavaType();\n\t// Returns whether the given entity is considered to be new.\n\tboolean isNew(T entity);\n}", "des": "EntityInformation implementation that uses a PersistentEntity to obtain id type information and uses a IdentifierAccessor to access the property value if requested."}
{"index": 13280, "repo": "spring-data-commons-3.1.2", "code": "public interface PersistentPropertyAccessor<T> {\n\t// Returns the underlying bean.\n\tT getBean();\n\t// Returns the value of the given PersistentProperty of the underlying bean instance.\n\tObject getProperty(PersistentProperty<?> property);\n\t// Sets the given PersistentProperty to the given value.\n\tvoid setProperty(PersistentProperty<?> property, Object value);\n}", "des": "Domain service to allow accessing and setting PersistentPropertys of an entity."}
{"index": 13281, "repo": "spring-data-commons-3.1.2", "code": "public interface PersistentPropertyAccessorFactory {\n\t// Returns a PersistentPropertyAccessor for a given PersistentEntity and bean.\n\t<T> PersistentPropertyAccessor<T> getPropertyAccessor(PersistentEntity<?,?> entity, T bean);\n\t// Returns whether given PersistentEntity is supported by this PersistentPropertyAccessorFactory.\n\tboolean isSupported(PersistentEntity<?,?> entity);\n}", "des": "Factory to create PersistentPropertyAccessor for a given PersistentEntity and bean instance."}
{"index": 13282, "repo": "spring-data-commons-3.1.2", "code": "public interface PersistentPropertyPath<P extends PersistentProperty<P>> extends Streamable<P> {\n\t// Returns the first property in the PersistentPropertyPath.\n\tP getBaseProperty();\n\t// Returns the sub-path of the current one as if it was based on the given base path.\n\tPersistentPropertyPath<P> getExtensionForBaseOf(PersistentPropertyPath<P> base);\n\t// Returns the last property in the PersistentPropertyPath.\n\tP getLeafProperty();\n\t// Returns the length of the PersistentPropertyPath.\n\tint getLength();\n}", "des": "Abstraction of a path of PersistentPropertys."}
{"index": 13283, "repo": "spring-data-commons-3.1.2", "code": "public interface PersistentPropertyPathAccessor<T> extends PersistentPropertyAccessor<T> {\n\t// Return the value pointed to by the given PersistentPropertyPath.\n\tObject getProperty(PersistentPropertyPath<? extends PersistentProperty<?>> path);\n\t// Return the value pointed to by the given PersistentPropertyPath.\n\tObject getProperty(PersistentPropertyPath<? extends PersistentProperty<?>> path, AccessOptions.GetOptions options);\n}", "des": "Extension of PersistentPropertyAccessor that is also able to obtain and set values for PersistentPropertyPaths."}
{"index": 13284, "repo": "spring-data-commons-3.1.2", "code": "public interface PersistentPropertyPaths<T,P extends PersistentProperty<P>> extends Streamable<PersistentPropertyPath<P>> {\n\t// Returns whether the given path is contained in the current PersistentPropertyPaths.\n\tboolean contains(String path);\n\t// Returns whether the given PropertyPath is contained in the current PersistentPropertyPaths.\n\tboolean contains(PropertyPath path);\n}", "des": "A wrapper for a collection of PersistentPropertyPaths."}
{"index": 13285, "repo": "spring-data-commons-3.1.2", "code": "public class Point extends Object implements Serializable {\n\tboolean equals(Object obj);\n\t// Returns the x-coordinate of the Point.\n\tdouble getX();\n\t// Returns the y-coordinate of the Point.\n\tdouble getY();\n}", "des": "Represents a geospatial point value."}
{"index": 13286, "repo": "spring-data-commons-3.1.2", "code": "public enum PointFormatter extends Enum<PointFormatter> implements Converter<String,Point>, Formatter<Point> {\n\tPoint convert(String source);\n\tPoint parse(String text, Locale locale);\n\tString print(Point point, Locale locale);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PointFormatter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PointFormatter[] values();\n}", "des": "Converter to parse two comma-separated doubles into a Point."}
{"index": 13287, "repo": "spring-data-commons-3.1.2", "code": "public interface Predicates {\n\t// Whether to not consider a Constructor.\n\tstatic boolean isExcluded(Constructor<?> candidate);\n\t// A Predicate that yields always false.\n\tstatic <T> Predicate<T> isFalse();\n\t// Whether to consider a Constructor.\n\tstatic boolean isIncluded(Constructor<?> candidate);\n\t// A Predicate that yields always true.\n\tstatic <T> Predicate<T> isTrue();\n\t// Returns a Predicate that represents the logical negation of predicate.\n\tstatic <T> Predicate<T> negate(Predicate<T> predicate);\n}", "des": "Utility methods to work with Predicates."}
{"index": 13288, "repo": "spring-data-commons-3.1.2", "code": "public final class PreferredConstructor<T,P extends PersistentProperty<P>> extends Object {\n\t// Returns the underlying Constructor.\n\tConstructor<T> getConstructor();\n\t// Returns the Parameters of the executable.\n\tList<Parameter<Object,P>> getParameters();\n\t// Deprecated. since 3.0, use InstanceCreatorMetadata.isCreatorParameter(PersistentProperty) instead.\n\tboolean isConstructorParameter(PersistentProperty<?> property);\n}", "des": "Value object to encapsulate the constructor to be used when mapping persistent data to objects."}
{"index": 13289, "repo": "spring-data-commons-3.1.2", "code": "public interface PreferredConstructorDiscoverer {\n\t// Discovers the PreferredConstructor for the given type.\n\tstatic <T, P extends PersistentProperty<P>>PreferredConstructor<T,P> discover(Class<T> type);\n\t// Discovers the PreferredConstructorDiscoverer for the given PersistentEntity.\n\tstatic <T, P extends PersistentProperty<P>>PreferredConstructor<T,P> discover(PersistentEntity<T,P> entity);\n}", "des": "Helper class to find a PreferredConstructor."}
{"index": 13290, "repo": "spring-data-commons-3.1.2", "code": "public static enum PreferredConstructorDiscoverer.Discoverers extends Enum<PreferredConstructorDiscoverer.Discoverers> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PreferredConstructorDiscoverer.Discoverers valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PreferredConstructorDiscoverer.Discoverers[] values();\n}", "des": "Helper class to find a PreferredConstructor."}
{"index": 13291, "repo": "spring-data-commons-3.1.2", "code": "public interface ProjectionFactory {\n\t// Creates a projection to the given type for the given nullable source.\n\tdefault <T> T createNullableProjection(Class<T> projectionType, Object source);\n\t// Creates a projection instance for the given type.\n\t<T> T createProjection(Class<T> projectionType);\n\t// Creates a projection of the given type for the given source object.\n\t<T> T createProjection(Class<T> projectionType, Object source);\n}", "des": "A factory to create projecting instances for other objects usually used to allow easy creation of representation projections to define which properties of a domain objects shall be exported in which way."}
{"index": 13292, "repo": "spring-data-commons-3.1.2", "code": "public interface ProjectionInformation {\n\t// Returns the properties that will be consumed by the projection type.\n\tList<PropertyDescriptor> getInputProperties();\n\t// Returns the projection type.\n\tClass<?> getType();\n\t// Returns whether supplying values for the properties returned via getInputProperties() is sufficient to create a working proxy instance.\n\tboolean isClosed();\n}", "des": "Information about a projection type."}
{"index": 13293, "repo": "spring-data-commons-3.1.2", "code": "public class PropertiesBasedNamedQueries extends Object implements NamedQueries {\n\t// Returns the named query with the given name.\n\tString getQuery(String queryName);\n\t// Returns whether the map contains a named query for the given name.\n\tboolean hasQuery(String queryName);\n}", "des": "NamedQueries implementation backed by a Properties instance."}
{"index": 13294, "repo": "spring-data-commons-3.1.2", "code": "public class Property extends Object {\n\tboolean equals(Object obj);\n\t// Returns the field of the property if available and if its first (only) parameter matches the type of the property.\n\tOptional<Field> getField();\n\t// Returns the getter of the property if available and if it matches the type of the property.\n\tOptional<Method> getGetter();\n\t// Returns the name of the property.\n\tString getName();\n}", "des": "Value object to abstract the concept of a property backed by a Field and / or a PropertyDescriptor."}
{"index": 13295, "repo": "spring-data-commons-3.1.2", "code": "public enum PropertyNameFieldNamingStrategy extends Enum<PropertyNameFieldNamingStrategy> implements FieldNamingStrategy {\n\t// Returns the field name to be used for the given PersistentProperty.\n\tString getFieldName(PersistentProperty<?> property);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PropertyNameFieldNamingStrategy valueOf(String name);\n}", "des": "FieldNamingStrategy simply using the PersistentProperty's name."}
{"index": 13296, "repo": "spring-data-commons-3.1.2", "code": "public class PropertyPath extends Object implements Streamable<PropertyPath> {\n\tboolean equals(Object o);\n\t// Extracts the PropertyPath chain from the given source String and type.\n\tstatic PropertyPath from(String source, Class<?> type);\n\t// Extracts the PropertyPath chain from the given source String and TypeInformation.\n\tstatic PropertyPath from(String source, TypeInformation<?> type);\n\t// Returns the leaf property of the PropertyPath.\n\tPropertyPath getLeafProperty();\n}", "des": "Abstraction of a PropertyPath of a domain class."}
{"index": 13297, "repo": "spring-data-commons-3.1.2", "code": "public class PropertyReferenceException extends RuntimeException {\n\t// Returns the PropertyPath which could be resolved so far.\n\tPropertyPath getBaseProperty();\n\tString getMessage();\n\t// Returns the name of the property not found.\n\tString getPropertyName();\n\t// Returns the type the property could not be found on.\n\tTypeInformation<?> getType();\n}", "des": "Exception being thrown when creating PropertyPath instances."}
{"index": 13298, "repo": "spring-data-commons-3.1.2", "code": "public interface PropertyValueConversions {\n\t// Get the converter registered for the given property.\n\t<DV, SV, P extends PersistentProperty<P>, VCC extends ValueConversionContext<P>>PropertyValueConverter<DV,SV,VCC> getValueConverter(P property);\n\t// Check if a converter is registered for the given property.\n\tboolean hasValueConverter(PersistentProperty<?> property);\n}", "des": "PropertyValueConversions provides access to converters that may only be applied to a specific property."}
{"index": 13299, "repo": "spring-data-commons-3.1.2", "code": "public class PropertyValueConversionService extends Object {\n\t// Return true if a PropertyValueConverter is registered for the PersistentProperty.\n\tboolean hasConverter(PersistentProperty<?> property);\n\t// Convert a value from its store-native representation into its domain-specific type.\n\t<P extends PersistentProperty<P>, VCC extends ValueConversionContext<P>>Object read(Object value, P property, VCC context);\n}", "des": "Conversion service based on CustomConversions used to convert domain and store values using property-specific converters."}
{"index": 13300, "repo": "spring-data-commons-3.1.2", "code": "public interface PropertyValueConverter<DV,SV,C extends ValueConversionContext<? extends PersistentProperty<?>>> {\n\t// Convert the given store specific value into it's domain value representation.\n\tDV read(SV value, C context);\n\t// Convert the given null value from the store into its domain value representation.\n\tdefault DV readNull(C context);\n\t// Convert the given domain-specific value into it's native store representation.\n\tSV write(DV value, C context);\n}", "des": "PropertyValueConverter provides a symmetric way of converting certain properties from domain to store-specific values."}
{"index": 13301, "repo": "spring-data-commons-3.1.2", "code": "public static class PropertyValueConverter.FunctionPropertyValueConverter<DV,SV,P extends PersistentProperty<P>> extends Object implements PropertyValueConverter<DV,SV,ValueConversionContext<P>> {\n\t// Convert the given store specific value into it's domain value representation.\n\tDV read(SV value, ValueConversionContext<P> context);\n\t// Convert the given null value from the store into its domain value representation.\n\tDV readNull(ValueConversionContext<P> context);\n}", "des": "A PropertyValueConverter that delegates conversion to the given BiFunctions."}
{"index": 13302, "repo": "spring-data-commons-3.1.2", "code": "public static enum PropertyValueConverter.ObjectToObjectPropertyValueConverter extends Enum<PropertyValueConverter.ObjectToObjectPropertyValueConverter> implements PropertyValueConverter {\n\t// Convert the given store specific value into it's domain value representation.\n\tObject read(Object value, ValueConversionContext context);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PropertyValueConverter.ObjectToObjectPropertyValueConverter valueOf(String name);\n}", "des": "No-op PropertyValueConverter implementation."}
{"index": 13303, "repo": "spring-data-commons-3.1.2", "code": "public interface PropertyValueConverterFactory {\n\t// Obtain a PropertyValueConverterFactory capable of looking up/creating the PropertyValueConverter via the given BeanFactory.\n\tstatic PropertyValueConverterFactory beanFactoryAware(BeanFactory beanFactory);\n\t// Obtain a PropertyValueConverterFactory that will cache PropertyValueConverter instances per PersistentProperty.\n\tstatic PropertyValueConverterFactory caching(PropertyValueConverterFactory factory);\n}", "des": "A factory providing value converters."}
{"index": 13304, "repo": "spring-data-commons-3.1.2", "code": "public class PropertyValueConverterRegistrar<P extends PersistentProperty<P>> extends Object {\n\t// Obtain the SimplePropertyValueConverterRegistry.\n\tValueConverterRegistry<P> buildRegistry();\n\t// Register the given converter for the given type and property identified by its name.\n\tPropertyValueConverterRegistrar<P> registerConverter(Class<?> type, String path, PropertyValueConverter<?,?,? extends ValueConversionContext<?>> converter);\n}", "des": "Configuration class used to register a PropertyValueConverter with a SimplePropertyValueConverterRegistry that can be used in PropertyValueConversions."}
{"index": 13305, "repo": "spring-data-commons-3.1.2", "code": "public abstract class ProxyUtils extends Object {\n\t// Returns the user class for the given type.\n\tstatic Class<?> getUserClass(Class<?> type);\n\t// Returns the user class for the given source object.\n\tstatic Class<?> getUserClass(Object source);\n}", "des": "Proxy type detection utilities, extensible via ProxyUtils.ProxyDetector registered via Spring factories."}
{"index": 13306, "repo": "spring-data-commons-3.1.2", "code": "public class QPageRequest extends AbstractPageRequest {\n\t// Returns the Pageable requesting the first page.\n\tPageable first();\n\t// Returns the sorting parameters.\n\tSort getSort();\n\t// Returns the Pageable requesting the next Page.\n\tPageable next();\n\t// Creates a new QPageRequest.\n\tstatic QPageRequest of(int page, int size);\n\t// Creates a new QPageRequest with the given OrderSpecifiers applied.\n\tstatic QPageRequest of(int page, int size, com.querydsl.core.types.OrderSpecifier<?>... orderSpecifiers);\n}", "des": "Basic Java Bean implementation of Pageable with support for QueryDSL."}
{"index": 13307, "repo": "spring-data-commons-3.1.2", "code": "public class QSort extends Sort implements Serializable {\n\t// Returns a new QSort consisting of the OrderSpecifiers of the current QSort combined with the given ones.\n\tQSort and(com.querydsl.core.types.OrderSpecifier<?>... orderSpecifiers);\n\t// Returns a new QSort consisting of the OrderSpecifiers of the current QSort combined with the given ones.\n\tQSort and(List<com.querydsl.core.types.OrderSpecifier<?>> orderSpecifiers);\n}", "des": "Sort option for queries that wraps a Querydsl OrderSpecifier."}
{"index": 13308, "repo": "spring-data-commons-3.1.2", "code": "public interface QueryByExampleExecutor<T> {\n\t// Returns the number of instances matching the given Example.\n\t<S extends T>long count(Example<S> example);\n\t// Checks whether the data store contains elements that match the given Example.\n\t<S extends T>boolean exists(Example<S> example);\n\t// Returns all entities matching the given Example.\n\t<S extends T>Iterable<S> findAll(Example<S> example);\n}", "des": "Interface to allow execution of Query by Example Example instances."}
{"index": 13309, "repo": "spring-data-commons-3.1.2", "code": "public final class QueryCreationException extends RepositoryCreationException {\n\t// Creates a new QueryCreationException for the given QueryMethod and Throwable as cause.\n\tstatic QueryCreationException create(String message, Throwable cause, Class<?> repositoryInterface, Method method);\n\t// Creates a new QueryCreationException.\n\tstatic QueryCreationException create(QueryMethod method, String message);\n}", "des": "Exception to be thrown if a query cannot be created from a Method."}
{"index": 13310, "repo": "spring-data-commons-3.1.2", "code": "public class QuerydslBindings extends Object {\n\t// Returns a new QuerydslBindings.TypeBinder for the given type.\n\tfinal <T> QuerydslBindings.TypeBinder<T> bind(Class<T> type);\n\t// Returns an QuerydslBindings.AliasingPathBinder for the given Path to define bindings for them.\n\tfinal <T extends com.querydsl.core.types.Path<S>, S>QuerydslBindings.AliasingPathBinder<T,S> bind(T path);\n}", "des": "QuerydslBindings allows definition of path specific bindings."}
{"index": 13311, "repo": "spring-data-commons-3.1.2", "code": "public class QuerydslBindingsFactory extends Object implements ApplicationContextAware {\n\t// Creates the QuerydslBindings to be used using for the given domain type.\n\tQuerydslBindings createBindingsFor(TypeInformation<?> domainType);\n\t// Creates the QuerydslBindings to be used using for the given domain type and a pre-defined QuerydslBinderCustomizer.\n\tQuerydslBindings createBindingsFor(TypeInformation<?> domainType, Class<? extends QuerydslBinderCustomizer<?>> customizer);\n}", "des": "Factory to create QuerydslBindings using an EntityPathResolver."}
{"index": 13312, "repo": "spring-data-commons-3.1.2", "code": "public class QuerydslPredicateBuilder extends Object {\n\t// Creates a Querydsl Predicate for the given values, QuerydslBindings on the given TypeInformation.\n\tcom.querydsl.core.types.Predicate getPredicate(TypeInformation<?> type, MultiValueMap<String,?> values, QuerydslBindings bindings);\n\t// Returns whether the given Predicate represents an empty predicate instance.\n\tstatic boolean isEmpty(com.querydsl.core.types.Predicate predicate);\n}", "des": "Builder assembling Predicate out of PropertyValues."}
{"index": 13313, "repo": "spring-data-commons-3.1.2", "code": "public interface QuerydslPredicateExecutor<T> {\n\t// Returns the number of instances matching the given Predicate.\n\tlong count(com.querydsl.core.types.Predicate predicate);\n\t// Checks whether the data store contains elements that match the given Predicate.\n\tboolean exists(com.querydsl.core.types.Predicate predicate);\n\t// Returns all entities ordered by the given OrderSpecifiers.\n\tIterable<T> findAll(com.querydsl.core.types.OrderSpecifier<?>... orders);\n}", "des": "Interface to allow execution of QueryDsl Predicate instances."}
{"index": 13314, "repo": "spring-data-commons-3.1.2", "code": "public class QuerydslRepositoryInvokerAdapter extends Object implements RepositoryInvoker {\n\t// Returns whether the repository has a method to delete objects.\n\tboolean hasDeleteMethod();\n\t// Returns whether the repository has a method to find all objects.\n\tboolean hasFindAllMethod();\n\t// Returns whether the repository has a method to find a single object.\n\tboolean hasFindOneMethod();\n\t// Returns whether the repository has a method to save objects.\n\tboolean hasSaveMethod();\n}", "des": "RepositoryInvoker that is aware of a QuerydslPredicateExecutor and Predicate to be executed for all flavors of findAll(…)."}
{"index": 13315, "repo": "spring-data-commons-3.1.2", "code": "public abstract class QueryExecutionConverters extends Object {\n\t// Returns the types that are supported on paginating query methods.\n\tstatic Set<Class<?>> getAllowedPageableTypes();\n\t// Returns the QueryExecutionConverters.ExecutionAdapter to be used for the given return type.\n\tstatic QueryExecutionConverters.ExecutionAdapter getExecutionAdapter(Class<?> returnType);\n\tstatic boolean isSingleValue(Class<?> type);\n}", "des": "Converters to potentially wrap the execution of a repository method into a variety of wrapper types potentially being available on the classpath."}
{"index": 13316, "repo": "spring-data-commons-3.1.2", "code": "public class QueryMethod extends Object {\n\t// Deprecated, for removal: This API element is subject to removal in a future version. since 3.1, call or override createParameters(Method, TypeInformation) instead.\n\tprotected Parameters<?,?> createParameters(Method method);\n\t// Creates a Parameters instance.\n\tprotected Parameters<?,?> createParameters(Method method, TypeInformation<?> domainType);\n\t// Returns the domain class the query method is targeted at.\n\tprotected Class<?> getDomainClass();\n}", "des": "Abstraction of a method that is designated to execute a finder query."}
{"index": 13317, "repo": "spring-data-commons-3.1.2", "code": "public interface QueryMethodEvaluationContextProvider {\n\t// Returns an EvaluationContext built using the given Parameters and parameter values.\n\t<T extends Parameters<?, ?>>EvaluationContext getEvaluationContext(T parameters, Object[] parameterValues);\n\t// Returns an EvaluationContext built using the given Parameters and parameter values.\n\t<T extends Parameters<?, ?>>EvaluationContext getEvaluationContext(T parameters, Object[] parameterValues, ExpressionDependencies dependencies);\n}", "des": "Provides a way to access a centrally defined potentially shared EvaluationContext."}
{"index": 13318, "repo": "spring-data-commons-3.1.2", "code": "public class QueryMethodParameterConversionException extends RuntimeException {\n\t// Returns the MethodParameter we tried to convert the source value for.\n\tMethodParameter getParameter();\n\t// Returns the source value that we failed converting.\n\tObject getSource();\n}", "des": "Exception to represent a failed attempt to convert a source value into a query method parameter."}
{"index": 13319, "repo": "spring-data-commons-3.1.2", "code": "public final class Range<T> extends Object {\n\t// Creates a new Range with inclusive bounds for both values.\n\tstatic <T> Range<T> closed(T from, T to);\n\t// Returns whether the Range contains the given value.\n\tboolean contains(Comparable<T> value);\n\t// Returns whether the Range contains the given value.\n\tboolean contains(T value, Comparator<T> comparator);\n\tboolean equals(Object o);\n\t// Create a Range.RangeBuilder given the lower Range.Bound.\n\tstatic <T> Range.RangeBuilder<T> from(Range.Bound<T> lower);\n}", "des": "Simple value object to work with ranges and boundaries."}
{"index": 13320, "repo": "spring-data-commons-3.1.2", "code": "public static final class Range.Bound<T> extends Object {\n\tboolean equals(Object o);\n\t// Creates a boundary excluding value.\n\tstatic Range.Bound<Double> exclusive(double value);\n\t// Creates a boundary excluding value.\n\tstatic Range.Bound<Float> exclusive(float value);\n\t// Creates a boundary excluding value.\n\tstatic Range.Bound<Integer> exclusive(int value);\n\t// Creates a boundary excluding value.\n\tstatic Range.Bound<Long> exclusive(long value);\n}", "des": "Value object representing a boundary."}
{"index": 13321, "repo": "spring-data-commons-3.1.2", "code": "public class ReactiveAuditingHandler extends AuditingHandlerSupport {\n\t// Factory method that creates a new ReactiveAuditingHandler for the given MappingContext.\n\tstatic ReactiveAuditingHandler from(MappingContext<?,?> mappingContext);\n\t// Marks the given object as created.\n\t<T> reactor.core.publisher.Mono<T> markCreated(T source);\n\t// Marks the given object as modified.\n\t<T> reactor.core.publisher.Mono<T> markModified(T source);\n}", "des": "Auditing handler to mark entity objects created and modified."}
{"index": 13322, "repo": "spring-data-commons-3.1.2", "code": "@NoRepositoryBean public interface ReactiveCrudRepository<T,ID> extends Repository<T,ID> {\n\t// Returns the number of entities available.\n\treactor.core.publisher.Mono<Long> count();\n\t// Deletes a given entity.\n\treactor.core.publisher.Mono<Void> delete(T entity);\n\t// Deletes all entities managed by the repository.\n\treactor.core.publisher.Mono<Void> deleteAll();\n\t// Deletes the given entities.\n\treactor.core.publisher.Mono<Void> deleteAll(Iterable<? extends T> entities);\n}", "des": "Interface for generic CRUD operations on a repository for a specific type."}
{"index": 13323, "repo": "spring-data-commons-3.1.2", "code": "public interface ReactiveEntityCallbacks {\n\t// Add the given callback using generic type argument detection for identification of supported types.\n\tvoid addEntityCallback(EntityCallback<?> callback);\n\t// On subscribe invoke the matching entity callbacks with given arguments.\n\t<T> reactor.core.publisher.Mono<T> callback(Class<? extends EntityCallback> callbackType, T entity, Object... args);\n\t// Obtain a new ReactiveEntityCallbacks instance.\n\tstatic ReactiveEntityCallbacks create();\n}", "des": "Interface to be implemented by objects that can manage a number of EntityCallback objects and invoke these with a specific entity."}
{"index": 13324, "repo": "spring-data-commons-3.1.2", "code": "public interface ReactiveEvaluationContextProvider extends EvaluationContextProvider {\n\t// Return a EvaluationContext built using the given parameter values.\n\treactor.core.publisher.Mono<? extends EvaluationContext> getEvaluationContextLater(Object rootObject);\n}", "des": "Provides a way to access a centrally defined potentially shared EvaluationContext."}
{"index": 13325, "repo": "spring-data-commons-3.1.2", "code": "public class ReactiveExtensionAwareEvaluationContextProvider extends Object implements ReactiveEvaluationContextProvider {\n\t// Return a EvaluationContext built using the given parameter values.\n\tEvaluationContext getEvaluationContext(Object rootObject);\n\t// Return a tailored EvaluationContext built using the given parameter values and considering expression dependencies.\n\tEvaluationContext getEvaluationContext(Object rootObject, ExpressionDependencies dependencies);\n}", "des": "A reactive EvaluationContextProvider that assembles an EvaluationContext from a list of ReactiveEvaluationContextExtension and EvaluationContextExtension instances."}
{"index": 13326, "repo": "spring-data-commons-3.1.2", "code": "public class ReactiveExtensionAwareQueryMethodEvaluationContextProvider extends Object implements ReactiveQueryMethodEvaluationContextProvider {\n\t// Returns an EvaluationContext built using the given Parameters and parameter values.\n\t<T extends Parameters<?, ?>>EvaluationContext getEvaluationContext(T parameters, Object[] parameterValues);\n}", "des": "An reactive QueryMethodEvaluationContextProvider that assembles an EvaluationContext from a list of EvaluationContextExtension and ReactiveEvaluationContextExtension."}
{"index": 13327, "repo": "spring-data-commons-3.1.2", "code": "public class ReactiveIsNewAwareAuditingHandler extends ReactiveAuditingHandler {\n\t// Factory method that creates a new ReactiveIsNewAwareAuditingHandler for the given MappingContext.\n\tstatic ReactiveIsNewAwareAuditingHandler from(MappingContext<?,?> mappingContext);\n\t// Marks the given object created or modified based on PersistentEntity.isNew(Object).\n\treactor.core.publisher.Mono<Object> markAudited(Object object);\n}", "des": "AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic ReactiveIsNewAwareAuditingHandler.markAudited(Object) method that will route calls to ReactiveAuditingHandler.markCreated(Object) or ReactiveAuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory."}
{"index": 13328, "repo": "spring-data-commons-3.1.2", "code": "public interface ReactiveQueryByExampleExecutor<T> {\n\t// Returns the number of instances matching the given Example.\n\t<S extends T>reactor.core.publisher.Mono<Long> count(Example<S> example);\n\t// Checks whether the data store contains elements that match the given Example.\n\t<S extends T>reactor.core.publisher.Mono<Boolean> exists(Example<S> example);\n\t// Returns all entities matching the given Example.\n\t<S extends T>reactor.core.publisher.Flux<S> findAll(Example<S> example);\n}", "des": "Interface to allow execution of Query by Example Example instances using a reactive infrastructure."}
{"index": 13329, "repo": "spring-data-commons-3.1.2", "code": "public interface ReactiveQuerydslPredicateExecutor<T> {\n\t// Returns a Mono emitting the number of instances matching the given Predicate.\n\treactor.core.publisher.Mono<Long> count(com.querydsl.core.types.Predicate predicate);\n\t// Checks whether the data store contains elements that match the given Predicate.\n\treactor.core.publisher.Mono<Boolean> exists(com.querydsl.core.types.Predicate predicate);\n}", "des": "Interface to issue queries using Querydsl Predicate instances."}
{"index": 13330, "repo": "spring-data-commons-3.1.2", "code": "public interface ReactiveQueryMethodEvaluationContextProvider extends QueryMethodEvaluationContextProvider {\n\t// Return a EvaluationContext built using the given Parameters and parameter values.\n\t<T extends Parameters<?, ?>>reactor.core.publisher.Mono<EvaluationContext> getEvaluationContextLater(T parameters, Object[] parameterValues);\n}", "des": "Provides a way to access a centrally defined potentially shared EvaluationContext by considering ReactiveEvaluationContextExtension."}
{"index": 13331, "repo": "spring-data-commons-3.1.2", "code": "public abstract class ReactiveWrapperConverters extends Object {\n\t// Return true if objects of sourceType can be converted to the targetType.\n\tstatic boolean canConvert(Class<?> sourceType, Class<?> targetType);\n\t// Maps elements of a reactive element stream to other elements.\n\tstatic <T> T map(Object reactiveObject, Function<Object,Object> converter);\n\t// Returns whether the given type is supported for wrapper type conversion.\n\tstatic boolean supports(Class<?> type);\n}", "des": "Conversion support for reactive wrapper types."}
{"index": 13332, "repo": "spring-data-commons-3.1.2", "code": "public abstract class ReactiveWrappers extends Object {\n\t// Returns true if reactive support is available.\n\tstatic boolean isAvailable();\n\t// Returns true if the ReactiveWrappers.ReactiveLibrary is available.\n\tstatic boolean isAvailable(ReactiveWrappers.ReactiveLibrary reactiveLibrary);\n\t// Returns true if type is a reactive wrapper type supporting multiple values (0..N elements).\n\tstatic boolean isMultiValueType(Class<?> type);\n}", "des": "Utility class to expose details about reactive wrapper types."}
{"index": 13333, "repo": "spring-data-commons-3.1.2", "code": "public static enum ReactiveWrappers.ReactiveLibrary extends Enum<ReactiveWrappers.ReactiveLibrary> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ReactiveWrappers.ReactiveLibrary valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ReactiveWrappers.ReactiveLibrary[] values();\n}", "des": "Enumeration of supported reactive libraries."}
{"index": 13334, "repo": "spring-data-commons-3.1.2", "code": "public final class ReflectionUtils extends Object {\n\t// Creates an instance of the class with the given fully qualified name or returns the given default instance if the class cannot be loaded or instantiated.\n\tstatic <T> T createInstanceIfPresent(String classname, T defaultInstance);\n\t// Finds a constructor on the given type that matches the given constructor arguments.\n\tstatic Optional<Constructor<?>> findConstructor(Class<?> type, Object... constructorArguments);\n}", "des": "Spring Data specific reflection utility methods and classes."}
{"index": 13335, "repo": "spring-data-commons-3.1.2", "code": "public class Repositories extends Object implements Iterable<Class<?>> {\n\t// Returns the EntityInformation for the given domain class.\n\t<T, S> EntityInformation<T,S> getEntityInformationFor(Class<?> domainClass);\n\t// Returns the PersistentEntity for the given domain class.\n\tPersistentEntity<?,?> getPersistentEntity(Class<?> domainClass);\n\t// Returns the QueryMethods contained in the repository managing the given domain class.\n\tList<QueryMethod> getQueryMethodsFor(Class<?> domainClass);\n}", "des": "Wrapper class to access repository instances obtained from a ListableBeanFactory."}
{"index": 13336, "repo": "spring-data-commons-3.1.2", "code": "public abstract class RepositoryBeanDefinitionRegistrarSupport extends Object implements ImportBeanDefinitionRegistrar, ResourceLoaderAware, EnvironmentAware {\n\t// Return the annotation to obtain configuration information from.\n\tprotected abstract Class<? extends Annotation> getAnnotation();\n\t// Returns the RepositoryConfigurationExtension for store specific callbacks and BeanDefinition post-processing.\n\tprotected abstract RepositoryConfigurationExtension getExtension();\n}", "des": "Base class to implement ImportBeanDefinitionRegistrars to enable repository"}
{"index": 13337, "repo": "spring-data-commons-3.1.2", "code": "public class RepositoryComposition extends Object {\n\t// Create a new RepositoryComposition retaining current configuration and append RepositoryComposition.RepositoryFragments to the new composition.\n\tRepositoryComposition append(RepositoryComposition.RepositoryFragments fragments);\n\t// Create a new RepositoryComposition retaining current configuration and append RepositoryFragment to the new composition.\n\tRepositoryComposition append(RepositoryFragment<?> fragment);\n}", "des": "Composite implementation to back repository method implementations."}
{"index": 13338, "repo": "spring-data-commons-3.1.2", "code": "public static class RepositoryComposition.RepositoryFragments extends Object implements Streamable<RepositoryFragment<?>> {\n\t// Create new RepositoryComposition.RepositoryFragments from the current content appending RepositoryComposition.RepositoryFragments.\n\tRepositoryComposition.RepositoryFragments append(RepositoryComposition.RepositoryFragments fragments);\n}", "des": "Value object representing an ordered list of fragments."}
{"index": 13339, "repo": "spring-data-commons-3.1.2", "code": "public interface RepositoryConfiguration<T extends RepositoryConfigurationSource> {\n\t// Returns the base packages that the repository was scanned under.\n\tStreamable<String> getBasePackages();\n\t// Returns the RepositoryConfigurationSource that backs the RepositoryConfiguration.\n\tT getConfigurationSource();\n\t// Returns the TypeFilters to be used to exclude packages from repository scanning.\n\tStreamable<TypeFilter> getExcludeFilters();\n}", "des": "Configuration information for a single repository instance."}
{"index": 13340, "repo": "spring-data-commons-3.1.2", "code": "public interface RepositoryConfigurationExtension {\n\t// Returns the default location of the Spring Data named queries.\n\tString getDefaultNamedQueryLocation();\n\t// A String uniquely identifying the module within all Spring Data modules.\n\tdefault String getModuleIdentifier();\n\t// Returns the descriptive name of the module.\n\tString getModuleName();\n}", "des": "SPI to implement store specific extension to the repository bean definition registration process."}
{"index": 13341, "repo": "spring-data-commons-3.1.2", "code": "public abstract class RepositoryConfigurationExtensionSupport extends Object implements RepositoryConfigurationExtension {\n\t// Returns the ClassLoader to load repository interfaces for configuration inspection.\n\tprotected ClassLoader getConfigurationInspectionClassLoader(ResourceLoader loader);\n\t// Returns the default location of the Spring Data named queries.\n\tString getDefaultNamedQueryLocation();\n}", "des": "Base implementation of RepositoryConfigurationExtension to ease the implementation of the interface."}
{"index": 13342, "repo": "spring-data-commons-3.1.2", "code": "public interface RepositoryConfigurationSource {\n\t// Returns a name for the beanDefinition.\n\tString generateBeanName(BeanDefinition beanDefinition);\n\t// Returns the value for the String attribute with the given name.\n\tOptional<String> getAttribute(String name);\n\t// Returns the value for the attribute with the given name and type.\n\t<T> Optional<T> getAttribute(String name, Class<T> type);\n\t// Returns the base packages the repository interfaces shall be found under.\n\tStreamable<String> getBasePackages();\n}", "des": "Interface containing the configurable options for the Spring Data repository subsystem."}
{"index": 13343, "repo": "spring-data-commons-3.1.2", "code": "public abstract class RepositoryConfigurationSourceSupport extends Object implements RepositoryConfigurationSource {\n\t// Returns a name for the beanDefinition.\n\tString generateBeanName(BeanDefinition beanDefinition);\n\t// Returns the source BeanDefinitions of the repository interfaces to create repository instances for.\n\tStreamable<BeanDefinition> getCandidates(ResourceLoader loader);\n}", "des": "Base class to implement RepositoryConfigurationSources."}
{"index": 13344, "repo": "spring-data-commons-3.1.2", "code": "public abstract class RepositoryFactoryBeanSupport<T extends Repository<S,ID>,S,ID> extends Object implements InitializingBean, RepositoryFactoryInformation<S,ID>, FactoryBean<T>, BeanClassLoaderAware, BeanFactoryAware, ApplicationEventPublisherAware {\n\t// Register a RepositoryFactoryCustomizer to customize the repository factor before creating the repository.\n\tvoid addRepositoryFactoryCustomizer(RepositoryFactoryCustomizer customizer);\n\tvoid afterPropertiesSet();\n}", "des": "Adapter for Springs FactoryBean interface to allow easy setup of repository factories via Spring configuration."}
{"index": 13345, "repo": "spring-data-commons-3.1.2", "code": "public interface RepositoryFactoryInformation<T,ID> {\n\t// Returns EntityInformation the repository factory is using.\n\tEntityInformation<T,ID> getEntityInformation();\n\t// Returns the PersistentEntity managed by the underlying repository.\n\tPersistentEntity<?,?> getPersistentEntity();\n\t// Returns all QueryMethods declared for that repository.\n\tList<QueryMethod> getQueryMethods();\n}", "des": "Interface for components that can provide meta-information about a repository factory, the backing EntityInformation and RepositoryInformation as well as the QueryMethods exposed by the repository."}
{"index": 13346, "repo": "spring-data-commons-3.1.2", "code": "public abstract class RepositoryFactorySupport extends Object implements BeanClassLoaderAware, BeanFactoryAware {\n\t// Adds a RepositoryMethodInvocationListener to the factory to plug in functionality triggered right after running query methods and fragment methods.\n\tvoid addInvocationListener(RepositoryMethodInvocationListener listener);\n}", "des": "Factory bean to create instances of a given repository interface."}
{"index": 13347, "repo": "spring-data-commons-3.1.2", "code": "public interface RepositoryFragment<T> {\n\tdefault Optional<T> getImplementation();\n\tClass<?> getSignatureContributor();\n\t// Attempt to find the Method by name and exact parameters.\n\tdefault boolean hasMethod(Method method);\n\t// Create an implemented RepositoryFragment from a interfaceClass backed by the implementation object.\n\tstatic <T> RepositoryFragment<T> implemented(Class<T> interfaceClass, T implementation);\n}", "des": "Value object representing a repository fragment."}
{"index": 13348, "repo": "spring-data-commons-3.1.2", "code": "public interface RepositoryInformation extends RepositoryMetadata {\n\t// Returns all methods considered to be query methods.\n\tStreamable<Method> getQueryMethods();\n\t// Returns the base class to be used to create the proxy backing instance.\n\tClass<?> getRepositoryBaseClass();\n\t// Returns the target class method that is backing the given method.\n\tMethod getTargetClassMethod(Method method);\n}", "des": "Additional repository specific information"}
{"index": 13349, "repo": "spring-data-commons-3.1.2", "code": "public abstract class RepositoryInformationSupport extends Object implements RepositoryInformation {\n\t// Returns the set of types the repository shall be discoverable for when trying to look up a repository by domain type.\n\tSet<Class<?>> getAlternativeDomainTypes();\n\t// Returns CrudMethods meta information for the repository.\n\tCrudMethods getCrudMethods();\n\t// Returns the raw domain class the repository is declared for.\n\tClass<?> getDomainType();\n}", "des": "Common base class for RepositoryInformation that delays resolution of RepositoryMetadata and the repository base to the latest possible time."}
{"index": 13350, "repo": "spring-data-commons-3.1.2", "code": "public interface RepositoryInvocationInformation {\n\t// Returns whether the repository has a method to delete objects.\n\tboolean hasDeleteMethod();\n\t// Returns whether the repository has a method to find all objects.\n\tboolean hasFindAllMethod();\n\t// Returns whether the repository has a method to find a single object.\n\tboolean hasFindOneMethod();\n\t// Returns whether the repository has a method to save objects.\n\tboolean hasSaveMethod();\n}", "des": "Meta-information about the methods a repository exposes."}
{"index": 13351, "repo": "spring-data-commons-3.1.2", "code": "public interface RepositoryInvoker extends RepositoryInvocationInformation {\n\t// Invokes the method equivalent to CrudRepository.deleteById(Object).\n\tvoid invokeDeleteById(Object id);\n}", "des": "API to invoke (CRUD) methods on Spring Data repository instances independently of the base interface they expose."}
{"index": 13352, "repo": "spring-data-commons-3.1.2", "code": "public interface RepositoryMetadata {\n\t// Returns the set of types the repository shall be discoverable for when trying to look up a repository by domain type.\n\tSet<Class<?>> getAlternativeDomainTypes();\n\t// Returns CrudMethods meta information for the repository.\n\tCrudMethods getCrudMethods();\n\t// Returns the raw domain class the repository is declared for.\n\tdefault Class<?> getDomainType();\n}", "des": "Metadata for repository interfaces."}
{"index": 13353, "repo": "spring-data-commons-3.1.2", "code": "public interface RepositoryQuery {\n\t// Executes the RepositoryQuery with the given parameters.\n\tObject execute(Object[] parameters);\n\t// Returns the related QueryMethod.\n\tQueryMethod getQueryMethod();\n}", "des": "Interface for a query abstraction."}
{"index": 13354, "repo": "spring-data-commons-3.1.2", "code": "public class ResourceReaderRepositoryPopulator extends Object implements RepositoryPopulator, ApplicationEventPublisherAware {\n\t// Populates the given Repositories.\n\tvoid populate(Repositories repositories);\n\tvoid setApplicationEventPublisher(ApplicationEventPublisher publisher);\n\t// Configures the location of the Resources to be used to initialize the repositories.\n\tvoid setResourceLocation(String location);\n}", "des": "A RepositoryPopulator using a ResourceReader to read objects from the configured Resources."}
{"index": 13355, "repo": "spring-data-commons-3.1.2", "code": "public class ResultProcessor extends Object {\n\t// Returns the ReturnedType.\n\tReturnedType getReturnedType();\n\t// Post-processes the given query result.\n\t<T> T processResult(Object source);\n\t// Post-processes the given query result using the given preparing Converter to potentially prepare collection elements.\n\t<T> T processResult(Object source, Converter<Object,Object> preparingConverter);\n}", "des": "A ResultProcessor to expose metadata about query result element projection and eventually post processing raw query results into projections and data transfer objects."}
{"index": 13356, "repo": "spring-data-commons-3.1.2", "code": "public abstract class ReturnedType extends Object {\n\t// Returns the entity type.\n\tfinal Class<?> getDomainType();\n\t// Returns the properties required to be used to populate the result.\n\tabstract List<String> getInputProperties();\n\t// Returns the type of the individual objects to return.\n\tabstract Class<?> getReturnedType();\n\t// Returns the type that the query execution is supposed to pass to the underlying infrastructure.\n\tabstract Class<?> getTypeToRead();\n}", "des": "A representation of the type returned by a QueryMethod."}
{"index": 13357, "repo": "spring-data-commons-3.1.2", "code": "public final class Revision<N extends Number & Comparable<N>,T> extends Object implements Comparable<Revision<N,?>> {\n\tint compareTo(Revision<N,?> that);\n\tboolean equals(Object o);\n\tT getEntity();\n\tRevisionMetadata<N> getMetadata();\n\t// Returns the timestamp of the revision, immediately failing on absence.\n\tInstant getRequiredRevisionInstant();\n\t// Returns the revision number of the revision, immediately failing on absence.\n\tN getRequiredRevisionNumber();\n}", "des": "Wrapper to contain RevisionMetadata as well as the revisioned entity."}
{"index": 13358, "repo": "spring-data-commons-3.1.2", "code": "public interface RevisionMetadata<N extends Number & Comparable<N>> {\n\t// Returns the underlying revision metadata which might provider more detailed implementation specific information.\n\t<T> T getDelegate();\n\t// Returns the time stamp of the revision, immediately failing on absence.\n\tdefault Instant getRequiredRevisionInstant();\n\t// Returns the revision number of the revision, immediately failing on absence.\n\tdefault N getRequiredRevisionNumber();\n}", "des": "Metadata about a revision."}
{"index": 13359, "repo": "spring-data-commons-3.1.2", "code": "public static enum RevisionMetadata.RevisionType extends Enum<RevisionMetadata.RevisionType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RevisionMetadata.RevisionType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RevisionMetadata.RevisionType[] values();\n}", "des": "The type of a Revision."}
{"index": 13360, "repo": "spring-data-commons-3.1.2", "code": "@NoRepositoryBean public interface RevisionRepository<T,ID,N extends Number & Comparable<N>> extends Repository<T,ID> {\n\t// Returns the revision of the entity it was last changed in.\n\tOptional<Revision<N,T>> findLastChangeRevision(ID id);\n\t// Returns the entity with the given ID in the given revision number.\n\tOptional<Revision<N,T>> findRevision(ID id, N revisionNumber);\n\t// Returns all Revisions of an entity with the given id.\n\tRevisions<N,T> findRevisions(ID id);\n}", "des": "A repository which can access entities held in a variety of Revisions."}
{"index": 13361, "repo": "spring-data-commons-3.1.2", "code": "public class Revisions<N extends Number & Comparable<N>,T> extends Object implements Streamable<Revision<N,T>> {\n\t// Returns the content of the Revisions instance.\n\tList<Revision<N,T>> getContent();\n\t// Returns the latest revision of the revisions backing the wrapper independently of the order.\n\tRevision<N,T> getLatestRevision();\n\tIterator<Revision<N,T>> iterator();\n\t// Creates a new empty Revisions instance.\n\tstatic <N extends Number & Comparable<N>, T>Revisions<N,T> none();\n}", "des": "Simple wrapper class for a List of Revisions allowing to canonically access the latest revision."}
{"index": 13362, "repo": "spring-data-commons-3.1.2", "code": "public class RevisionSort extends Sort {\n\t// Creates a RevisionSort with ascending order for the revision number property, i.e. more recent revisions will come last.\n\tstatic RevisionSort asc();\n\t// Creates a RevisionSort with descending order for the revision number property, i.e. more recent revisions will come first.\n\tstatic RevisionSort desc();\n\t// Returns in which direction to sort revisions for the given Sort instance.\n\tstatic Sort.Direction getRevisionDirection(Sort sort);\n}", "des": "A dedicated Sort implementation that allows the definition of the ordering of revisions independently of the property name the revision number is held in."}
{"index": 13363, "repo": "spring-data-commons-3.1.2", "code": "@NoRepositoryBean public interface RxJava3CrudRepository<T,ID> extends Repository<T,ID> {\n\t// Returns the number of entities available.\n\tio.reactivex.rxjava3.core.Single<Long> count();\n\t// Deletes a given entity.\n\tio.reactivex.rxjava3.core.Completable delete(T entity);\n\t// Deletes all entities managed by the repository.\n\tio.reactivex.rxjava3.core.Completable deleteAll();\n}", "des": "Interface for generic CRUD operations on a repository for a specific type."}
{"index": 13364, "repo": "spring-data-commons-3.1.2", "code": "public interface ScrollPosition {\n\t// Creates a new ScrollPosition from a key set scrolling backward.\n\tstatic KeysetScrollPosition backward(Map<String,?> keys);\n\t// Creates a new ScrollPosition from a key set scrolling forward.\n\tstatic KeysetScrollPosition forward(Map<String,?> keys);\n\t// Returns whether the current scroll position is the initial one.\n\tboolean isInitial();\n\t// Creates a new initial ScrollPosition to start scrolling using keyset-queries.\n\tstatic KeysetScrollPosition keyset();\n}", "des": "Interface to specify a position within a total query result."}
{"index": 13365, "repo": "spring-data-commons-3.1.2", "code": "public static enum ScrollPosition.Direction extends Enum<ScrollPosition.Direction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ScrollPosition.Direction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ScrollPosition.Direction[] values();\n}", "des": "Keyset scrolling direction."}
{"index": 13366, "repo": "spring-data-commons-3.1.2", "code": "public class SimplePropertyValueConversions extends Object implements PropertyValueConversions, InitializingBean {\n\t// Initializes this SimplePropertyValueConversions instance.\n\tvoid afterPropertiesSet();\n\t// Returns the configured PropertyValueConverterFactory responsible for creating the actual PropertyValueConverter.\n\tPropertyValueConverterFactory getConverterFactory();\n}", "des": "PropertyValueConversions implementation allowing a PropertyValueConverterFactory creating converters to be chosen."}
{"index": 13367, "repo": "spring-data-commons-3.1.2", "code": "public class SimplePropertyValueConverterRegistry<P extends PersistentProperty<P>> extends Object implements ValueConverterRegistry<P> {\n\t// Check if a converter is registered for the given type, path combination.\n\tboolean containsConverterFor(Class<?> type, String path);\n\t// Obtain the PropertyValueConverter registered for the given type, path combination or null if none defined.\n\t<S, T> PropertyValueConverter<S,T,? extends ValueConversionContext<P>> getConverter(Class<?> type, String path);\n}", "des": "A registry of property specific value convertes that may be used to convert only specific properties/values of an object."}
{"index": 13368, "repo": "spring-data-commons-3.1.2", "code": "public class SimpleTypeInformationMapper extends Object implements TypeInformationMapper, BeanClassLoaderAware {\n\t// Turn the given type information into the String representation that shall be stored.\n\tAlias createAliasFor(TypeInformation<?> type);\n\t// Returns the TypeInformation that shall be used when the given String value is found as type hint.\n\tTypeInformation<?> resolveTypeFrom(Alias alias);\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n}", "des": "Basic TypeInformationMapper implementation that interprets the alias handles as fully qualified class name and tries to load a class with the given name to build TypeInformation."}
{"index": 13369, "repo": "spring-data-commons-3.1.2", "code": "public interface Slice<T> extends Streamable<T> {\n\t// Returns the page content as List.\n\tList<T> getContent();\n\t// Returns the number of the current Slice.\n\tint getNumber();\n\t// Returns the number of elements currently on this Slice.\n\tint getNumberOfElements();\n\t// Returns the Pageable that's been used to request the current Slice.\n\tdefault Pageable getPageable();\n\t// Returns the size of the Slice.\n\tint getSize();\n\t// Returns the sorting parameters for the Slice.\n\tSort getSort();\n}", "des": "A slice of data that indicates whether there's a next or previous slice available."}
{"index": 13370, "repo": "spring-data-commons-3.1.2", "code": "public class SliceImpl<T> extends Object {\n\tboolean equals(Object obj);\n\t// Returns the page content as List.\n\tList<T> getContent();\n\t// Applies the given Function to the content of the Chunk.\n\tprotected <U> List<U> getConvertedContent(Function<? super T,? extends U> converter);\n\t// Returns the number of the current Slice.\n\tint getNumber();\n\t// Returns the number of elements currently on this Slice.\n\tint getNumberOfElements();\n}", "des": "Default implementation of Slice."}
{"index": 13371, "repo": "spring-data-commons-3.1.2", "code": "public class Sort extends Object implements Streamable<Sort.Order>, Serializable {\n\t// Returns a new Sort consisting of the Sort.Orders of the current Sort combined with the given ones.\n\tSort and(Sort sort);\n\t// Returns a new Sort with the current setup but ascending order direction.\n\tSort ascending();\n\t// Creates a new Sort for the given properties.\n\tstatic Sort by(String... properties);\n\t// Creates a new Sort for the given Sort.Orders.\n\tstatic Sort by(List<Sort.Order> orders);\n}", "des": "Sort option for queries."}
{"index": 13372, "repo": "spring-data-commons-3.1.2", "code": "public static enum Sort.Direction extends Enum<Sort.Direction> {\n\t// Returns the Sort.Direction enum for the given String or null if it cannot be parsed into an enum value.\n\tstatic Optional<Sort.Direction> fromOptionalString(String value);\n\t// Returns the Sort.Direction enum for the given String value.\n\tstatic Sort.Direction fromString(String value);\n\t// Returns whether the direction is ascending.\n\tboolean isAscending();\n\t// Returns whether the direction is descending.\n\tboolean isDescending();\n}", "des": "Enumeration for sort directions."}
{"index": 13373, "repo": "spring-data-commons-3.1.2", "code": "public static enum Sort.NullHandling extends Enum<Sort.NullHandling> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Sort.NullHandling valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Sort.NullHandling[] values();\n}", "des": "Enumeration for null handling hints that can be used in Sort.Order expressions."}
{"index": 13374, "repo": "spring-data-commons-3.1.2", "code": "public static class Sort.Order extends Object implements Serializable {\n\t// Creates a new Sort.Order instance.\n\tstatic Sort.Order asc(String property);\n\t// Creates a new Sort.Order instance.\n\tstatic Sort.Order by(String property);\n\t// Creates a new Sort.Order instance.\n\tstatic Sort.Order desc(String property);\n\tboolean equals(Object obj);\n\t// Returns the order the property shall be sorted for.\n\tSort.Direction getDirection();\n}", "des": "PropertyPath implements the pairing of an Sort.Direction and a property."}
{"index": 13375, "repo": "spring-data-commons-3.1.2", "code": "public static class Sort.TypedSort<T> extends Sort {\n\t// Returns a new Sort with the current setup but ascending order direction.\n\tSort ascending();\n\t<S> Sort.TypedSort<S> by(Function<T,S> property);\n\t<S> Sort.TypedSort<S> by(MethodInvocationRecorder.Recorded.ToCollectionConverter<T,S> collectionProperty);\n\t<S> Sort.TypedSort<S> by(MethodInvocationRecorder.Recorded.ToMapConverter<T,S> mapProperty);\n\t// Returns a new Sort with the current setup but descending order direction.\n\tSort descending();\n}", "des": "Extension of Sort to use method handles to define properties to sort by."}
{"index": 13376, "repo": "spring-data-commons-3.1.2", "code": "public abstract class SortHandlerMethodArgumentResolverSupport extends Object {\n\t// Folds the given Sort instance into a List of sort expressions, accumulating Sort.Order instances of the same direction into a single expression if they are in order.\n\tprotected List<String> foldIntoExpressions(Sort sort);\n\t// Reads the default Sort to be used from the given MethodParameter.\n\tprotected Sort getDefaultFromAnnotationOrFallback(MethodParameter parameter);\n\tString getPropertyDelimiter();\n}", "des": "Base class providing methods for handler method argument resolvers to create Sort instances from request parameters or SortDefault annotations."}
{"index": 13377, "repo": "spring-data-commons-3.1.2", "code": "public class SpelAwareProxyProjectionFactory extends Object implements BeanFactoryAware {\n\t// Creates a projection instance for the given type.\n\t<T> T createProjection(Class<T> projectionType);\n\t// Creates a projection of the given type for the given source object.\n\t<T> T createProjection(Class<T> projectionType, Object source);\n\t// Creates a fresh, cacheable ProjectionInformation instance for the given projection type.\n\tprotected ProjectionInformation createProjectionInformation(Class<?> projectionType);\n}", "des": "A ProxyProjectionFactory that adds support to use Value-annotated methods on a projection interface to evaluate the contained SpEL expression to define the outcome of the method call."}
{"index": 13378, "repo": "spring-data-commons-3.1.2", "code": "public class SpelEvaluator extends Object {\n\t// Evaluate all the SpEL expressions in SpelQueryContext.SpelExtractor based on values provided as an argument.\n\tMap<String,Object> evaluate(Object[] values);\n\t// Returns the query string produced by the intermediate SpEL expression collection step.\n\tString getQueryString();\n}", "des": "Evaluates SpEL expressions as extracted by the SpelQueryContext.SpelExtractor based on parameter information from a method and parameter values from a method call."}
{"index": 13379, "repo": "spring-data-commons-3.1.2", "code": "public class SpELExpressionParameterValueProvider<P extends PersistentProperty<P>> extends Object implements ParameterValueProvider<P> {\n\t// Returns the value to be used for the given Parameter (usually when entity instances are created).\n\t<T> T getParameterValue(Parameter<T,P> parameter);\n\t// Hook to allow to massage the value resulting from the Spel expression evaluation.\n\tprotected <T> T potentiallyConvertSpelValue(Object object, Parameter<T,P> parameter);\n}", "des": "ParameterValueProvider that can be used to front a ParameterValueProvider delegate to prefer a SpEL expression evaluation over directly resolving the parameter value with the delegate."}
{"index": 13380, "repo": "spring-data-commons-3.1.2", "code": "public class SpelQueryContext extends Object {\n\tstatic SpelQueryContext of(BiFunction<Integer,String,String> parameterNameSource, BiFunction<String,String,String> replacementSource);\n\t// Parses the query for SpEL expressions using the pattern:\n\tSpelQueryContext.SpelExtractor parse(String query);\n}", "des": "A SpelQueryContext is able to find SpEL expressions in a query string and to replace them with bind variables."}
{"index": 13381, "repo": "spring-data-commons-3.1.2", "code": "public abstract class SpringDataJaxb extends Object {\n\t// Marshals each of the elements of the given Iterable using the given XmlAdapter.\n\tstatic <T, S> List<S> marshal(Iterable<T> source, jakarta.xml.bind.annotation.adapters.XmlAdapter<S,T> adapter);\n\t// Unmarshals each element of the given Collection using the given XmlAdapter.\n\tstatic <T, S> List<T> unmarshal(Collection<S> source, jakarta.xml.bind.annotation.adapters.XmlAdapter<S,T> adapter);\n}", "des": "Helper class containing utility methods to implement JAXB XmlAdapters as well as the DTO types to be marshalled by JAXB."}
{"index": 13382, "repo": "spring-data-commons-3.1.2", "code": "@FunctionalInterface public interface Streamable<T> extends Iterable<T>, Supplier<Stream<T>> {\n\t// Creates a new Streamable from the current one and the given Iterable concatenated.\n\tdefault Streamable<T> and(Iterable<? extends T> iterable);\n\t// Creates a new Streamable from the current one and the given Stream concatenated.\n\tdefault Streamable<T> and(Supplier<? extends Stream<? extends T>> stream);\n}", "des": "Simple interface to ease streamability of Iterables."}
{"index": 13383, "repo": "spring-data-commons-3.1.2", "code": "public interface StreamUtils {\n\t// Returns a Stream backed by the given Iterator\n\tstatic <T> Stream<T> createStreamFromIterator(Iterator<T> iterator);\n\t// Returns a Stream backed by the given CloseableIterator and forwarding calls to BaseStream.close() to the iterator.\n\tstatic <T> Stream<T> createStreamFromIterator(CloseableIterator<T> iterator);\n\t// Creates a new Stream for the given value returning an empty Stream if the value is null.\n\tstatic <T> Stream<T> fromNullable(T source);\n}", "des": "Spring Data specific Java Stream utility methods and classes."}
{"index": 13384, "repo": "spring-data-commons-3.1.2", "code": "public enum SurroundingTransactionDetectorMethodInterceptor extends Enum<SurroundingTransactionDetectorMethodInterceptor> implements MethodInterceptor {\n\tObject invoke(MethodInvocation invocation);\n\t// Returns whether a transaction was active before the method call entered the repository proxy.\n\tboolean isSurroundingTransactionActive();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SurroundingTransactionDetectorMethodInterceptor valueOf(String name);\n}", "des": "MethodInterceptor detecting whether a transaction is already running and exposing that fact via SurroundingTransactionDetectorMethodInterceptor.isSurroundingTransactionActive()."}
{"index": 13385, "repo": "spring-data-commons-3.1.2", "code": "public interface TargetAware extends TargetClassAware, RawTargetAccess {\n\t// Re-declaration of Spring Framework 4.3's DecoratingProxy.getDecoratedClass() so that we can exclude it from Jackson serialization.\n\tClass<?> getDecoratedClass();\n\t// Returns the proxy target.\n\tObject getTarget();\n\t// Returns the type of the proxy target.\n\tClass<?> getTargetClass();\n}", "des": "Extension of TargetClassAware to be able to ignore the getter on JSON rendering."}
{"index": 13386, "repo": "spring-data-commons-3.1.2", "code": "public abstract class TransactionalRepositoryFactoryBeanSupport<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID> implements BeanFactoryAware {\n\t// Delegates RepositoryFactorySupport creation to doCreateRepositoryFactory() and applies the TransactionalRepositoryProxyPostProcessor to the created instance.\n\tprotected final RepositoryFactorySupport createRepositoryFactory();\n}", "des": "Extension of RepositoryFactoryBeanSupport to add transactional capabilities to the repository proxy."}
{"index": 13387, "repo": "spring-data-commons-3.1.2", "code": "public interface TypeAliasAccessor<S> {\n\t// Reads the type alias to be used from the given source.\n\tAlias readAliasFrom(S source);\n\t// Writes the given type alias to the given sink.\n\tvoid writeTypeTo(S sink, Object alias);\n}", "des": "Interface to abstract implementations of how to access a type alias from a given source or sink."}
{"index": 13388, "repo": "spring-data-commons-3.1.2", "code": "public class TypeFilterParser extends Object {\n\t// Creates a TypeFilter instance from the given Element and ClassLoader.\n\tprotected TypeFilter createTypeFilter(Element element, ClassLoader classLoader);\n\t// Returns all TypeFilter declared in nested elements of the given Element.\n\tCollection<TypeFilter> parseTypeFilters(Element element, TypeFilterParser.Type type);\n}", "des": "Parser to populate the given ClassPathScanningCandidateComponentProvider with TypeFilters parsed from the given Element's children."}
{"index": 13389, "repo": "spring-data-commons-3.1.2", "code": "public interface TypeInformation<S> {\n\t// Returns a new TypeInformation for the given MethodParameter.\n\tstatic TypeInformation<?> fromMethodParameter(MethodParameter parameter);\n\t// Returns a TypeInformation for the given Method.\n\tstatic TypeInformation<?> fromReturnTypeOf(Method method);\n\t// Returns a TypeInformation for the given method as declared on the given type.\n\tstatic TypeInformation<?> fromReturnTypeOf(Method method, Class<?> type);\n}", "des": "Interface to access property types and resolving generics on the way."}
{"index": 13390, "repo": "spring-data-commons-3.1.2", "code": "public interface TypeInformationMapper {\n\t// Returns the alias to be used for the given TypeInformation.\n\tAlias createAliasFor(TypeInformation<?> type);\n\t// Returns the actual TypeInformation to be used for the given alias.\n\tTypeInformation<?> resolveTypeFrom(Alias alias);\n}", "des": "Interface to abstract the mapping from a type alias to the actual type."}
{"index": 13391, "repo": "spring-data-commons-3.1.2", "code": "public interface TypeMapper<S> {\n\t// Reads the TypeInformation from the given source.\n\tTypeInformation<?> readType(S source);\n\t// Returns the TypeInformation from the given source if it is a more concrete type than the given default one.\n\t<T> TypeInformation<? extends T> readType(S source, TypeInformation<T> defaultType);\n\t// Writes type information for the given type into the given sink.\n\tvoid writeType(Class<?> type, S dbObject);\n}", "des": "Interface to define strategies how to store type information in a store specific sink or source."}
{"index": 13392, "repo": "spring-data-commons-3.1.2", "code": "public interface TypeScanner {\n\t// Obtain the scan result.\n\tdefault Set<Class<?>> collectAsSet();\n\t// Performs the given action for each element found while scanning.\n\tvoid forEach(Consumer<Class<?>> action);\n\t// Define annotations identifying types to include in the scan result.\n\tdefault TypeScanner forTypesAnnotatedWith(Class<? extends Annotation>... annotations);\n}", "des": "A scanner that searches the classpath for matching types within given target packages."}
{"index": 13393, "repo": "spring-data-commons-3.1.2", "code": "public interface ValueConversionContext<P extends PersistentProperty<P>> {\n\t// Return the PersistentProperty to be handled.\n\tP getProperty();\n\t// Reads the value as an instance of the property type.\n\tdefault Object read(Object value);\n\t// Reads the value as an instance of type.\n\tdefault <T> T read(Object value, Class<T> target);\n\t// Reads the value as an instance of type.\n\tdefault <T> T read(Object value, TypeInformation<T> target);\n}", "des": "The ValueConversionContext provides access to the store-specific PersistentProperty and allows to call the store-default conversion through the read/write methods."}
{"index": 13394, "repo": "spring-data-commons-3.1.2", "code": "public interface ValueConverterRegistry<P extends PersistentProperty<P>> {\n\t// Check if a converter is registered for the given type, path combination.\n\tdefault boolean containsConverterFor(Class<?> type, String path);\n\t// Obtain the PropertyValueConverter registered for the given type, path combination or null if none defined.\n\t<DV, SV> PropertyValueConverter<DV,SV,? extends ValueConversionContext<P>> getConverter(Class<?> type, String path);\n\t// Check if converters are registered.\n\tboolean isEmpty();\n}", "des": "A registry of property-specific value converters to convert only specific properties/values of an object."}
{"index": 13395, "repo": "spring-data-commons-3.1.2", "code": "public class Version extends Object implements Comparable<Version> {\n\tint compareTo(Version that);\n\tboolean equals(Object obj);\n\t// Returns whether the current Version is the same as the given one.\n\tboolean is(Version version);\n\t// Returns whether the current Version is greater (newer) than the given one.\n\tboolean isGreaterThan(Version version);\n\t// Returns whether the current Version is greater (newer) or the same as the given one.\n\tboolean isGreaterThanOrEqualTo(Version version);\n}", "des": "Value object to represent a Version consisting of major, minor and bugfix part."}
{"index": 13396, "repo": "spring-data-commons-3.1.2", "code": "public interface Window<T> extends Streamable<T> {\n\t// Construct a Window.\n\tstatic <T> Window<T> from(List<T> items, IntFunction<? extends ScrollPosition> positionFunction);\n\t// Construct a Window.\n\tstatic <T> Window<T> from(List<T> items, IntFunction<? extends ScrollPosition> positionFunction, boolean hasNext);\n\t// Returns the windows content as List.\n\tList<T> getContent();\n\t// Returns if there is a next window.\n\tboolean hasNext();\n}", "des": "A set of data consumed from an underlying query result."}
{"index": 13397, "repo": "spring-data-commons-3.1.2", "code": "public class XmlRepositoryConfigurationSource extends RepositoryConfigurationSourceSupport {\n\t// Returns the value for the String attribute with the given name.\n\tOptional<String> getAttribute(String name);\n\t// Returns the value for the attribute with the given name and type.\n\t<T> Optional<T> getAttribute(String name, Class<T> type);\n\t// Returns the base packages the repository interfaces shall be found under.\n\tStreamable<String> getBasePackages();\n}", "des": "XML based RepositoryConfigurationSource."}
{"index": 13398, "repo": "spring-security-acl-6.1.2", "code": "public abstract class AbstractPermission extends Object implements Permission {\n\tfinal boolean equals(Object obj);\n\t// Returns the bits that represents the permission.\n\tfinal int getMask();\n\t// Returns a 32-character long bit pattern String representing this permission.\n\tString getPattern();\n}", "des": "Provides an abstract superclass for Permission implementations."}
{"index": 13399, "repo": "spring-security-acl-6.1.2", "code": "public interface AccessControlEntry extends Serializable {\n\tAcl getAcl();\n\t// Obtains an identifier that represents this ACE.\n\tSerializable getId();\n\tPermission getPermission();\n\tSid getSid();\n\t// Indicates the permission is being granted to the relevant Sid.\n\tboolean isGranting();\n}", "des": "Represents an individual permission assignment within an Acl."}
{"index": 13400, "repo": "spring-security-acl-6.1.2", "code": "public class AccessControlEntryImpl extends Object implements AccessControlEntry, AuditableAccessControlEntry {\n\tboolean equals(Object arg0);\n\tAcl getAcl();\n\t// Obtains an identifier that represents this ACE.\n\tSerializable getId();\n\tPermission getPermission();\n\tSid getSid();\n\tboolean isAuditFailure();\n\tboolean isAuditSuccess();\n\t// Indicates the permission is being granted to the relevant Sid.\n\tboolean isGranting();\n}", "des": "An immutable default implementation of AccessControlEntry."}
{"index": 13401, "repo": "spring-security-acl-6.1.2", "code": "public interface Acl extends Serializable {\n\t// Returns all of the entries represented by the present Acl.\n\tList<AccessControlEntry> getEntries();\n\t// Obtains the domain object this Acl provides entries for.\n\tObjectIdentity getObjectIdentity();\n\t// Determines the owner of the Acl.\n\tSid getOwner();\n\t// A domain object may have a parent for the purpose of ACL inheritance.\n\tAcl getParentAcl();\n}", "des": "Represents an access control list (ACL) for a domain object."}
{"index": 13402, "repo": "spring-security-acl-6.1.2", "code": "public class AclAuthorizationStrategyImpl extends Object implements AclAuthorizationStrategy {\n\t// Creates a principal-like sid from the authentication information.\n\tprotected Sid createCurrentUser(org.springframework.security.core.Authentication authentication);\n\tvoid securityCheck(Acl acl, int changeType);\n\t// Sets the SecurityContextHolderStrategy to use.\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy);\n}", "des": "Default implementation of AclAuthorizationStrategy."}
{"index": 13403, "repo": "spring-security-acl-6.1.2", "code": "public abstract class AclFormattingUtils extends Object {\n\tstatic String demergePatterns(String original, String removeBits);\n\tstatic String mergePatterns(String original, String extraBits);\n\t// Returns a representation of the active bits in the presented mask, with each active bit being denoted by character '*'.\n\tstatic String printBinary(int i);\n}", "des": "Utility methods for displaying ACL information."}
{"index": 13404, "repo": "spring-security-acl-6.1.2", "code": "public class AclImpl extends Object implements Acl, MutableAcl, AuditableAcl, OwnershipAcl {\n\tvoid deleteAce(int aceIndex);\n\tboolean equals(Object obj);\n\t// Returns all of the entries represented by the present Acl.\n\tList<AccessControlEntry> getEntries();\n\t// Obtains an identifier that represents this MutableAcl.\n\tSerializable getId();\n\t// Obtains the domain object this Acl provides entries for.\n\tObjectIdentity getObjectIdentity();\n\t// Determines the owner of the Acl.\n\tSid getOwner();\n}", "des": "Base implementation of Acl."}
{"index": 13405, "repo": "spring-security-acl-6.1.2", "code": "public interface AclService {\n\t// Locates all object identities that use the specified parent.\n\tList<ObjectIdentity> findChildren(ObjectIdentity parentIdentity);\n\t// Same as readAclsById(List) except it returns only a single Acl.\n\tAcl readAclById(ObjectIdentity object);\n\t// Same as readAclsById(List, List) except it returns only a single Acl.\n\tAcl readAclById(ObjectIdentity object, List<Sid> sids);\n}", "des": "Provides retrieval of Acl instances."}
{"index": 13406, "repo": "spring-security-acl-6.1.2", "code": "public class BasicLookupStrategy extends Object implements LookupStrategy {\n\t// Creates a particular implementation of Sid depending on the arguments.\n\tprotected Sid createSid(boolean isPrincipal, String sid);\n\t// The main method.\n\tfinal Map<ObjectIdentity,Acl> readAclsById(List<ObjectIdentity> objects, List<Sid> sids);\n\tfinal void setAclClassIdSupported(boolean aclClassIdSupported);\n\tfinal void setBatchSize(int batchSize);\n}", "des": "Performs lookups in a manner that is compatible with ANSI SQL."}
{"index": 13407, "repo": "spring-security-acl-6.1.2", "code": "public class DefaultPermissionFactory extends Object implements PermissionFactory {\n\t// Dynamically creates a CumulativePermission or BasePermission representing the active bits in the passed mask.\n\tPermission buildFromMask(int mask);\n\tPermission buildFromName(String name);\n\tList<Permission> buildFromNames(List<String> names);\n\tprotected void registerPermission(Permission perm, String permissionName);\n}", "des": "Default implementation of PermissionFactory."}
{"index": 13408, "repo": "spring-security-acl-6.1.2", "code": "public class JdbcAclService extends Object implements AclService {\n\t// Locates all object identities that use the specified parent.\n\tList<ObjectIdentity> findChildren(ObjectIdentity parentIdentity);\n\tprotected boolean isAclClassIdSupported();\n\t// Same as AclService.readAclsById(List) except it returns only a single Acl.\n\tAcl readAclById(ObjectIdentity object);\n\t// Same as AclService.readAclsById(List, List) except it returns only a single Acl.\n\tAcl readAclById(ObjectIdentity object, List<Sid> sids);\n}", "des": "Simple JDBC-based implementation of AclService."}
{"index": 13409, "repo": "spring-security-acl-6.1.2", "code": "public class JdbcMutableAclService extends JdbcAclService implements MutableAclService {\n\t// Creates an empty Acl object in the database.\n\tMutableAcl createAcl(ObjectIdentity objectIdentity);\n\t// Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object.\n\tprotected void createEntries(MutableAcl acl);\n\t// Creates an entry in the acl_object_identity table for the passed ObjectIdentity.\n\tprotected void createObjectIdentity(ObjectIdentity object, Sid owner);\n}", "des": "Provides a base JDBC implementation of MutableAclService."}
{"index": 13410, "repo": "spring-security-acl-6.1.2", "code": "public interface MutableAcl extends Acl {\n\tvoid deleteAce(int aceIndex);\n\t// Obtains an identifier that represents this MutableAcl.\n\tSerializable getId();\n\tvoid insertAce(int atIndexLocation, Permission permission, Sid sid, boolean granting);\n\t// Change the value returned by Acl.isEntriesInheriting().\n\tvoid setEntriesInheriting(boolean entriesInheriting);\n\t// Changes the present owner to a different owner.\n\tvoid setOwner(Sid newOwner);\n\t// Changes the parent of this ACL.\n\tvoid setParent(Acl newParent);\n}", "des": "A mutable Acl."}
{"index": 13411, "repo": "spring-security-acl-6.1.2", "code": "public interface MutableAclService extends AclService {\n\t// Creates an empty Acl object in the database.\n\tMutableAcl createAcl(ObjectIdentity objectIdentity);\n\t// Removes the specified entry from the database.\n\tvoid deleteAcl(ObjectIdentity objectIdentity, boolean deleteChildren);\n\t// Changes an existing Acl in the database.\n\tMutableAcl updateAcl(MutableAcl acl);\n}", "des": "Provides support for creating and storing Acl instances."}
{"index": 13412, "repo": "spring-security-acl-6.1.2", "code": "public interface ObjectIdentity extends Serializable {\n\tboolean equals(Object obj);\n\t// Obtains the actual identifier.\n\tSerializable getIdentifier();\n\t// Obtains the \"type\" metadata for the domain object.\n\tString getType();\n}", "des": "Represents the identity of an individual domain object instance."}
{"index": 13413, "repo": "spring-security-acl-6.1.2", "code": "public class ObjectIdentityImpl extends Object implements ObjectIdentity {\n\t// Important so caching operates properly.\n\tboolean equals(Object obj);\n\t// Obtains the actual identifier.\n\tSerializable getIdentifier();\n\t// Obtains the \"type\" metadata for the domain object.\n\tString getType();\n}", "des": "Simple implementation of ObjectIdentity."}
{"index": 13414, "repo": "spring-security-acl-6.1.2", "code": "public interface Permission extends Serializable {\n\t// Returns the bits that represents the permission.\n\tint getMask();\n\t// Returns a 32-character long bit pattern String representing this permission.\n\tString getPattern();\n}", "des": "Represents a permission granted to a Sid for a given domain object."}
{"index": 13415, "repo": "spring-data-keyvalue-3.1.2", "code": "public abstract class AbstractKeyValueAdapter extends Object implements KeyValueAdapter {\n\t// Count all matching objects within keyspace.\n\tlong count(KeyValueQuery<?> query, String keyspace);\n\t// Delete and return the object with given type and id.\n\t<T> T delete(Object id, String keyspace, Class<T> type);\n\t// Find all matching objects within keyspace.\n\tCollection<?> find(KeyValueQuery<?> query, String keyspace);\n\t<T> Iterable<T> find(KeyValueQuery<?> query, String keyspace, Class<T> type);\n}", "des": "Base implementation of KeyValueAdapter holds QueryEngine to delegate find and count execution to."}
{"index": 13416, "repo": "spring-data-keyvalue-3.1.2", "code": "public enum AnnotationBasedKeySpaceResolver extends Enum<AnnotationBasedKeySpaceResolver> implements KeySpaceResolver {\n\t// Determine the keySpace to use for a given type.\n\tString resolveKeySpace(Class<?> type);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AnnotationBasedKeySpaceResolver valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AnnotationBasedKeySpaceResolver[] values();\n}", "des": "AnnotationBasedKeySpaceResolver looks up Persistent and checks for presence of either meta or direct usage of KeySpace."}
{"index": 13417, "repo": "spring-data-keyvalue-3.1.2", "code": "public enum ClassNameKeySpaceResolver extends Enum<ClassNameKeySpaceResolver> implements KeySpaceResolver {\n\t// Determine the keySpace to use for a given type.\n\tString resolveKeySpace(Class<?> type);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClassNameKeySpaceResolver valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClassNameKeySpaceResolver[] values();\n}", "des": "Most trivial implementation of KeySpaceResolver returning the Class.getName()."}
{"index": 13418, "repo": "spring-data-keyvalue-3.1.2", "code": "public interface KeyValueAdapter extends DisposableBean {\n\t// Removes all objects.\n\tvoid clear();\n\t// Check if a object with given id exists in keyspace.\n\tboolean contains(Object id, String keyspace);\n\t// Count number of objects within keyspace.\n\tlong count(String keyspace);\n\t// Count all matching objects within keyspace.\n\tlong count(KeyValueQuery<?> query, String keyspace);\n\t// Delete and return the object with given type and id.\n\tObject delete(Object id, String keyspace);\n}", "des": "KeyValueAdapter unifies access and shields the underlying key/value specific implementation."}
{"index": 13419, "repo": "spring-data-keyvalue-3.1.2", "code": "public class KeyValueEvent<T> extends ApplicationEvent {\n\t// Create new KeyValueEvent.AfterDeleteEvent.\n\tstatic <T> KeyValueEvent.AfterDeleteEvent<T> afterDelete(Object id, String keyspace, Class<? extends T> type, T value);\n\t// Create new KeyValueEvent.AfterDropKeySpaceEvent.\n\tstatic <T> KeyValueEvent.AfterDropKeySpaceEvent<T> afterDropKeySpace(String keyspace, Class<? extends T> type);\n}", "des": "KeyValueEvent gets published for operations executed by eg."}
{"index": 13420, "repo": "spring-data-keyvalue-3.1.2", "code": "public static class KeyValueEvent.AfterDeleteEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent after removing an object by with a given key."}
{"index": 13421, "repo": "spring-data-keyvalue-3.1.2", "code": "public static class KeyValueEvent.AfterGetEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent after loading an object by its key."}
{"index": 13422, "repo": "spring-data-keyvalue-3.1.2", "code": "public static class KeyValueEvent.AfterInsertEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent after inserting an object by with a given key."}
{"index": 13423, "repo": "spring-data-keyvalue-3.1.2", "code": "public static class KeyValueEvent.AfterUpdateEvent<T> extends KeyValueEvent<T> {\n\t// Get the current value.\n\tT after();\n\t// Get the value before update.\n\tObject before();\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent after updating an object by with a given key."}
{"index": 13424, "repo": "spring-data-keyvalue-3.1.2", "code": "public static class KeyValueEvent.BeforeInsertEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent before inserting an object by with a given key."}
{"index": 13425, "repo": "spring-data-keyvalue-3.1.2", "code": "public static class KeyValueEvent.BeforeUpdateEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent before updating an object by with a given key."}
{"index": 13426, "repo": "spring-data-keyvalue-3.1.2", "code": "public class KeyValueMappingContext<E extends KeyValuePersistentEntity<?,P>,P extends KeyValuePersistentProperty<P>> extends AbstractMappingContext<E,P> {\n\tprotected <T> E createPersistentEntity(TypeInformation<T> typeInformation);\n\tprotected P createPersistentProperty(Property property, E owner, SimpleTypeHolder simpleTypeHolder);\n\tKeySpaceResolver getKeySpaceResolver();\n\t// Deprecated. since 3.1, use KeySpaceResolver instead.\n\tvoid setFallbackKeySpaceResolver(KeySpaceResolver fallbackKeySpaceResolver);\n}", "des": "Default implementation of a MappingContext using KeyValuePersistentEntity and KeyValuePersistentProperty as primary abstractions."}
{"index": 13427, "repo": "spring-data-keyvalue-3.1.2", "code": "public interface KeyValueOperations extends DisposableBean {\n\t// Total number of elements with given type available.\n\tlong count(Class<?> type);\n\t// Total number of elements matching given query.\n\tlong count(KeyValueQuery<?> query, Class<?> type);\n\t// Remove all elements of type.\n\tvoid delete(Class<?> type);\n\t// Delete item of type with given id.\n\t<T> T delete(Object id, Class<T> type);\n\t<T> T delete(T objectToDelete);\n}", "des": "Interface that specifies a basic set of key/value operations."}
{"index": 13428, "repo": "spring-data-keyvalue-3.1.2", "code": "public abstract class KeyValueRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport {\n\t// Get the default RootBeanDefinition for KeyValueTemplate.\n\tprotected AbstractBeanDefinition getDefaultKeyValueTemplateBeanDefinition(RepositoryConfigurationSource configurationSource);\n\t// Returns the KeyValueTemplate bean name to potentially register a default KeyValueTemplate bean if no bean is registered with the returned name.\n\tprotected abstract String getDefaultKeyValueTemplateRef();\n}", "des": "RepositoryConfigurationExtension for KeyValueRepository."}
{"index": 13429, "repo": "spring-data-keyvalue-3.1.2", "code": "public class KeyValueRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID> {\n\tvoid afterPropertiesSet();\n\tprotected final RepositoryFactorySupport createRepositoryFactory();\n\t// Create the repository factory to be used to create repositories.\n\tprotected KeyValueRepositoryFactory createRepositoryFactory(KeyValueOperations operations, Class<? extends AbstractQueryCreator<?,?>> queryCreator, Class<? extends RepositoryQuery> repositoryQueryType);\n}", "des": "FactoryBean to create KeyValueRepository."}
{"index": 13430, "repo": "spring-data-keyvalue-3.1.2", "code": "public class KeyValueTemplate extends Object implements KeyValueOperations, ApplicationEventPublisherAware {\n\t// Total number of elements with given type available.\n\tlong count(Class<?> type);\n\t// Total number of elements matching given query.\n\tlong count(KeyValueQuery<?> query, Class<?> type);\n\t// Remove all elements of type.\n\tvoid delete(Class<?> type);\n\t// Delete item of type with given id.\n\t<T> T delete(Object id, Class<T> type);\n\t<T> T delete(T objectToDelete);\n\tvoid destroy();\n}", "des": "Basic implementation of KeyValueOperations."}
{"index": 13431, "repo": "spring-data-keyvalue-3.1.2", "code": "public class MapKeyValueAdapter extends AbstractKeyValueAdapter {\n\t// Removes all objects.\n\tvoid clear();\n\t// Check if a object with given id exists in keyspace.\n\tboolean contains(Object id, String keyspace);\n\t// Count number of objects within keyspace.\n\tlong count(String keyspace);\n\t// Delete and return the object with given type and id.\n\tObject delete(Object id, String keyspace);\n\t// Remove all objects of given type.\n\tvoid deleteAllOf(String keyspace);\n\tvoid destroy();\n}", "des": "KeyValueAdapter implementation for Map."}
{"index": 13432, "repo": "spring-data-keyvalue-3.1.2", "code": "public abstract class QueryEngine<ADAPTER extends KeyValueAdapter,CRITERIA,SORT> extends Object {\n\tabstract long count(CRITERIA criteria, String keyspace);\n\t// Extract query attributes and delegate to concrete execution.\n\tlong count(KeyValueQuery<?> query, String keyspace);\n\tabstract Collection<?> execute(CRITERIA criteria, SORT sort, long offset, int rows, String keyspace);\n\t<T> Collection<T> execute(CRITERIA criteria, SORT sort, long offset, int rows, String keyspace, Class<T> type);\n}", "des": "Base implementation for accessing and executing KeyValueQuery against a KeyValueAdapter."}
{"index": 13433, "repo": "spring-data-keyvalue-3.1.2", "code": "public class SpelPropertyComparator<T> extends Object implements Comparator<T> {\n\t// Sort ascending.\n\tSpelPropertyComparator<T> asc();\n\t// Create the expression raw value.\n\tprotected String buildExpressionForPath();\n\tint compare(T arg1, T arg2);\n\t// Sort descending.\n\tSpelPropertyComparator<T> desc();\n\t// Parse values to SpelExpression\n\tprotected SpelExpression getExpression();\n\t// Get dot path to property.\n\tString getPath();\n\t// Sort null values first.\n\tSpelPropertyComparator<T> nullsFirst();\n}", "des": "Comparator implementation using SpelExpression."}
{"index": 13434, "repo": "spring-batch-test-5.0.2", "code": "public class JobLauncherTestUtils extends Object {\n\tJob getJob();\n\tJobLauncher getJobLauncher();\n\tJobRepository getJobRepository();\n\t// Convenient method for subclasses to grab a StepRunner for running steps by name.\n\tprotected StepRunner getStepRunner();\n\tJobParameters getUniqueJobParameters();\n\tJobParametersBuilder getUniqueJobParametersBuilder();\n\t// Launch the entire job, including all steps.\n\tJobExecution launchJob();\n}", "des": "Utility class for testing batch jobs."}
{"index": 13435, "repo": "spring-batch-test-5.0.2", "code": "public class JobRepositoryTestUtils extends Object {\n\t// Use the JobRepository to create some JobExecution instances each with a single step execution.\n\tList<JobExecution> createJobExecutions(int count);\n\t// Use the JobRepository to create some JobExecution instances each with the given job name and each having step executions with the given step names.\n\tList<JobExecution> createJobExecutions(String jobName, String[] stepNames, int count);\n}", "des": "Convenience class for creating and removing JobExecution instances from a database."}
{"index": 13436, "repo": "spring-batch-test-5.0.2", "code": "public class JobScopeTestExecutionListener extends Object implements org.springframework.test.context.TestExecutionListener {\n\tvoid afterTestMethod(org.springframework.test.context.TestContext testContext);\n\tvoid beforeTestMethod(org.springframework.test.context.TestContext testContext);\n\t// Discover a JobExecution as a field in the test case or create one if none is available.\n\tprotected JobExecution getJobExecution(org.springframework.test.context.TestContext testContext);\n}", "des": "A TestExecutionListener that sets up job-scope context for dependency injection into unit tests."}
{"index": 13437, "repo": "spring-batch-test-5.0.2", "code": "public class MetaDataInstanceFactory extends Object {\n\t// Create a JobExecution with default parameters.\n\tstatic JobExecution createJobExecution();\n\t// Create a JobExecution with the parameters provided.\n\tstatic JobExecution createJobExecution(Long executionId);\n\t// Create a JobExecution with the parameters provided.\n\tstatic JobExecution createJobExecution(String jobName, Long instanceId, Long executionId);\n}", "des": "Convenience methods for creating test instances of JobExecution, JobInstance and StepExecution."}
{"index": 13438, "repo": "spring-batch-test-5.0.2", "code": "public class StepRunner extends Object {\n\t// Launch just the specified step as its own job.\n\tJobExecution launchStep(Step step);\n\t// Launch just the specified step as its own job.\n\tJobExecution launchStep(Step step, JobParameters jobParameters);\n\t// Launch just the specified step as its own job.\n\tJobExecution launchStep(Step step, JobParameters jobParameters, org.springframework.batch.item.ExecutionContext jobExecutionContext);\n}", "des": "Utility class for executing steps outside of a Job."}
{"index": 13439, "repo": "spring-batch-test-5.0.2", "code": "public class StepScopeTestExecutionListener extends Object implements org.springframework.test.context.TestExecutionListener {\n\tvoid afterTestMethod(org.springframework.test.context.TestContext testContext);\n\tvoid beforeTestMethod(org.springframework.test.context.TestContext testContext);\n\t// Discover a StepExecution as a field in the test case or create one if none is available.\n\tprotected StepExecution getStepExecution(org.springframework.test.context.TestContext testContext);\n}", "des": "A TestExecutionListener that sets up step-scope context for dependency injection into unit tests."}
{"index": 13440, "repo": "spring-security-test-6.1.2", "code": "public final class SecurityMockMvcConfigurers extends Object {\n\t// Configures the MockMvcBuilder for use with Spring Security.\n\tstatic org.springframework.test.web.servlet.setup.MockMvcConfigurer springSecurity();\n\t// Configures the MockMvcBuilder for use with Spring Security.\n\tstatic org.springframework.test.web.servlet.setup.MockMvcConfigurer springSecurity(jakarta.servlet.Filter springSecurityFilterChain);\n}", "des": "Provides Security related MockMvcConfigurer implementations."}
{"index": 13441, "repo": "spring-security-test-6.1.2", "code": "public final class SecurityMockMvcRequestBuilders extends Object {\n\t// Creates a request (including any necessary CsrfToken) that will submit a form based login to POST \"/login\".\n\tstatic SecurityMockMvcRequestBuilders.FormLoginRequestBuilder formLogin();\n\t// Creates a request (including any necessary CsrfToken) that will submit a form based login to POST loginProcessingUrl.\n\tstatic SecurityMockMvcRequestBuilders.FormLoginRequestBuilder formLogin(String loginProcessingUrl);\n}", "des": "Contains Spring Security related MockMvc RequestBuilders."}
{"index": 13442, "repo": "spring-security-test-6.1.2", "code": "public static final class SecurityMockMvcRequestBuilders.LogoutRequestBuilder extends Object implements org.springframework.test.web.servlet.RequestBuilder, org.springframework.beans.Mergeable {\n\torg.springframework.mock.web.MockHttpServletRequest buildRequest(jakarta.servlet.ServletContext servletContext);\n\tboolean isMergeEnabled();\n\t// Specifies the logout URL to POST to.\n\tSecurityMockMvcRequestBuilders.LogoutRequestBuilder logoutUrl(String logoutUrl);\n}", "des": "Creates a logout request (including any necessary CsrfToken)"}
{"index": 13443, "repo": "spring-security-test-6.1.2", "code": "public final class SecurityMockMvcRequestPostProcessors extends Object {\n\t// Establish a SecurityContext that uses an AnonymousAuthenticationToken.\n\tstatic org.springframework.test.web.servlet.request.RequestPostProcessor anonymous();\n}", "des": "Contains MockMvc RequestPostProcessor implementations for Spring Security."}
{"index": 13444, "repo": "spring-security-test-6.1.2", "code": "public static final class SecurityMockMvcRequestPostProcessors.CsrfRequestPostProcessor extends Object implements org.springframework.test.web.servlet.request.RequestPostProcessor {\n\t// Instead of using the CsrfToken as a request parameter (default) will populate the CsrfToken as a header.\n\tSecurityMockMvcRequestPostProcessors.CsrfRequestPostProcessor asHeader();\n\torg.springframework.mock.web.MockHttpServletRequest postProcessRequest(org.springframework.mock.web.MockHttpServletRequest request);\n}", "des": "Populates a valid CsrfToken into the request."}
{"index": 13445, "repo": "spring-security-test-6.1.2", "code": "public static final class SecurityMockMvcRequestPostProcessors.UserRequestPostProcessor extends Object implements org.springframework.test.web.servlet.request.RequestPostProcessor {\n\t// Populates the user's GrantedAuthority's.\n\tSecurityMockMvcRequestPostProcessors.UserRequestPostProcessor authorities(Collection<? extends org.springframework.security.core.GrantedAuthority> authorities);\n}", "des": "Creates a UsernamePasswordAuthenticationToken and sets the principal to be a User and associates it to the MockHttpServletRequest."}
{"index": 13446, "repo": "spring-security-test-6.1.2", "code": "public final class SecurityMockMvcResultMatchers extends Object {\n\t// ResultMatcher that verifies that a specified user is authenticated.\n\tstatic SecurityMockMvcResultMatchers.AuthenticatedMatcher authenticated();\n\t// ResultMatcher that verifies that no user is authenticated.\n\tstatic org.springframework.test.web.servlet.ResultMatcher unauthenticated();\n}", "des": "Security related MockMvc ResultMatchers."}
{"index": 13447, "repo": "spring-security-test-6.1.2", "code": "public final class SecurityMockServerConfigurers extends Object {\n\tstatic SecurityMockServerConfigurers.CsrfMutator csrf();\n\t// Updates the ServerWebExchange to use the provided Authentication as the Principal\n\tstatic <T extends org.springframework.test.web.reactive.server.WebTestClientConfigurer & org.springframework.test.web.reactive.server.MockServerConfigurer>T mockAuthentication(org.springframework.security.core.Authentication authentication);\n}", "des": "Test utilities for working with Spring Security and WebTestClient.Builder.apply(WebTestClientConfigurer)."}
{"index": 13448, "repo": "spring-security-test-6.1.2", "code": "public enum TestExecutionEvent extends Enum<TestExecutionEvent> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TestExecutionEvent valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TestExecutionEvent[] values();\n}", "des": "Represents the events on the methods of TestExecutionListener"}
{"index": 13449, "repo": "spring-security-test-6.1.2", "code": "public final class TestSecurityContextHolder extends Object {\n\t// Clears the SecurityContext from TestSecurityContextHolder and SecurityContextHolder.\n\tstatic void clearContext();\n\t// Gets the SecurityContext from TestSecurityContextHolder.\n\tstatic org.springframework.security.core.context.SecurityContext getContext();\n\t// Creates a new SecurityContext with the given Authentication.\n\tstatic void setAuthentication(org.springframework.security.core.Authentication authentication);\n}", "des": "The TestSecurityContextHolder is very similar to SecurityContextHolder, but is necessary for testing."}
{"index": 13450, "repo": "spring-security-test-6.1.2", "code": "public abstract class WebTestUtils extends Object {\n\t// Gets the CsrfTokenRepository for the specified HttpServletRequest.\n\tstatic org.springframework.security.web.csrf.CsrfTokenRepository getCsrfTokenRepository(jakarta.servlet.http.HttpServletRequest request);\n\t// Gets the CsrfTokenRequestHandler for the specified HttpServletRequest.\n\tstatic org.springframework.security.web.csrf.CsrfTokenRequestHandler getCsrfTokenRequestHandler(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "A utility class for testing spring security"}
{"index": 13451, "repo": "spring-security-test-6.1.2", "code": "public class WithSecurityContextTestExecutionListener extends org.springframework.test.context.support.AbstractTestExecutionListener {\n\t// Clears out the TestSecurityContextHolder and the SecurityContextHolder after each test method.\n\tvoid afterTestMethod(org.springframework.test.context.TestContext testContext);\n\t// If configured before test execution sets the SecurityContext\n\tvoid beforeTestExecution(org.springframework.test.context.TestContext testContext);\n}", "des": "A TestExecutionListener that will find annotations that are annotated with WithSecurityContext on a test method or at the class level."}
{"index": 13452, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "protected abstract static class AbstractOAuth2AuthorizationServerMetadata.AbstractBuilder<T extends AbstractOAuth2AuthorizationServerMetadata,B extends AbstractOAuth2AuthorizationServerMetadata.AbstractBuilder<T,B>> extends Object {\n\t// Use this authorization_endpoint in the resulting AbstractOAuth2AuthorizationServerMetadata, REQUIRED.\n\tB authorizationEndpoint(String authorizationEndpoint);\n\t// Creates the AbstractOAuth2AuthorizationServerMetadata.\n\tabstract T build();\n}", "des": "A builder for subclasses of AbstractOAuth2AuthorizationServerMetadata."}
{"index": 13453, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public abstract class AbstractSettings extends Object implements Serializable {\n\tboolean equals(Object obj);\n\t// Returns a configuration setting.\n\t<T> T getSetting(String name);\n\t// Returns a Map of the configuration settings.\n\tMap<String,Object> getSettings();\n}", "des": "Base implementation for configuration settings."}
{"index": 13454, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "protected abstract static class AbstractSettings.AbstractBuilder<T extends AbstractSettings,B extends AbstractSettings.AbstractBuilder<T,B>> extends Object {\n\tabstract T build();\n\tprotected final Map<String,Object> getSettings();\n\tprotected final B getThis();\n\t// Sets a configuration setting.\n\tB setting(String name, Object value);\n\t// A Consumer of the configuration settings Map allowing the ability to add, replace, or remove.\n\tB settings(Consumer<Map<String,Object>> settingsConsumer);\n}", "des": "A builder for subclasses of AbstractSettings."}
{"index": 13455, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public interface AuthorizationServerContext {\n\t// Returns the AuthorizationServerSettings.\n\tAuthorizationServerSettings getAuthorizationServerSettings();\n\t// Returns the URL of the Authorization Server's issuer identifier.\n\tString getIssuer();\n}", "des": "A context that holds information of the Authorization Server runtime environment."}
{"index": 13456, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class AuthorizationServerContextHolder extends Object {\n\t// Returns the AuthorizationServerContext bound to the current thread.\n\tstatic AuthorizationServerContext getContext();\n\t// Reset the AuthorizationServerContext bound to the current thread.\n\tstatic void resetContext();\n\t// Bind the given AuthorizationServerContext to the current thread.\n\tstatic void setContext(AuthorizationServerContext authorizationServerContext);\n}", "des": "A holder of the AuthorizationServerContext that associates it with the current thread using a ThreadLocal."}
{"index": 13457, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class AuthorizationServerSettings extends AbstractSettings {\n\t// Constructs a new AuthorizationServerSettings.Builder with the default settings.\n\tstatic AuthorizationServerSettings.Builder builder();\n\t// Returns the OAuth 2.0 Authorization endpoint.\n\tString getAuthorizationEndpoint();\n\t// Returns the OAuth 2.0 Device Authorization endpoint.\n\tString getDeviceAuthorizationEndpoint();\n\t// Returns the OAuth 2.0 Device Verification endpoint.\n\tString getDeviceVerificationEndpoint();\n}", "des": "A facility for authorization server configuration settings."}
{"index": 13458, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static final class AuthorizationServerSettings.Builder extends AbstractSettings.AbstractBuilder<AuthorizationServerSettings,AuthorizationServerSettings.Builder> {\n\t// Sets the OAuth 2.0 Authorization endpoint.\n\tAuthorizationServerSettings.Builder authorizationEndpoint(String authorizationEndpoint);\n\t// Builds the AuthorizationServerSettings.\n\tAuthorizationServerSettings build();\n}", "des": "A builder for AuthorizationServerSettings."}
{"index": 13459, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class ClientSettings extends AbstractSettings {\n\t// Constructs a new ClientSettings.Builder with the default settings.\n\tstatic ClientSettings.Builder builder();\n\t// Returns the URL for the Client's JSON Web Key Set.\n\tString getJwkSetUrl();\n}", "des": "A facility for client configuration settings."}
{"index": 13460, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static final class ClientSettings.Builder extends AbstractSettings.AbstractBuilder<ClientSettings,ClientSettings.Builder> {\n\t// Builds the ClientSettings.\n\tClientSettings build();\n\t// Sets the URL for the Client's JSON Web Key Set.\n\tClientSettings.Builder jwkSetUrl(String jwkSetUrl);\n\t// Set to true if authorization consent is required when the client requests access.\n\tClientSettings.Builder requireAuthorizationConsent(boolean requireAuthorizationConsent);\n}", "des": "A builder for ClientSettings."}
{"index": 13461, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public interface Context {\n\t// Returns the value of the attribute associated to the key.\n\tdefault <V> V get(Class<V> key);\n\t// Returns the value of the attribute associated to the key.\n\t<V> V get(Object key);\n\t// Returns true if an attribute associated to the key exists, false otherwise.\n\tboolean hasKey(Object key);\n}", "des": "A facility for holding information associated to a specific context."}
{"index": 13462, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class DefaultOAuth2TokenContext extends Object implements OAuth2TokenContext {\n\t// Returns a new DefaultOAuth2TokenContext.Builder.\n\tstatic DefaultOAuth2TokenContext.Builder builder();\n\t// Returns the value of the attribute associated to the key.\n\t<V> V get(Object key);\n\t// Returns true if an attribute associated to the key exists, false otherwise.\n\tboolean hasKey(Object key);\n}", "des": "Default implementation of OAuth2TokenContext."}
{"index": 13463, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class InMemoryOAuth2AuthorizationConsentService extends Object implements OAuth2AuthorizationConsentService {\n\t// Returns the OAuth2AuthorizationConsent identified by the provided registeredClientId and principalName, or null if not found.\n\tOAuth2AuthorizationConsent findById(String registeredClientId, String principalName);\n\t// Removes the OAuth2AuthorizationConsent.\n\tvoid remove(OAuth2AuthorizationConsent authorizationConsent);\n}", "des": "An OAuth2AuthorizationConsentService that stores OAuth2AuthorizationConsent's in-memory."}
{"index": 13464, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class InMemoryOAuth2AuthorizationService extends Object implements OAuth2AuthorizationService {\n\t// Returns the OAuth2Authorization identified by the provided id, or null if not found.\n\tOAuth2Authorization findById(String id);\n\t// Returns the OAuth2Authorization containing the provided token, or null if not found.\n\tOAuth2Authorization findByToken(String token, OAuth2TokenType tokenType);\n\t// Removes the OAuth2Authorization.\n\tvoid remove(OAuth2Authorization authorization);\n}", "des": "An OAuth2AuthorizationService that stores OAuth2Authorization's in-memory."}
{"index": 13465, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class InMemoryRegisteredClientRepository extends Object implements RegisteredClientRepository {\n\t// Returns the registered client identified by the provided clientId, or null if not found.\n\tRegisteredClient findByClientId(String clientId);\n\t// Returns the registered client identified by the provided id, or null if not found.\n\tRegisteredClient findById(String id);\n\t// Saves the registered client.\n\tvoid save(RegisteredClient registeredClient);\n}", "des": "A RegisteredClientRepository that stores RegisteredClient(s) in-memory."}
{"index": 13466, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class JdbcOAuth2AuthorizationService extends Object implements OAuth2AuthorizationService {\n\t// Returns the OAuth2Authorization identified by the provided id, or null if not found.\n\tOAuth2Authorization findById(String id);\n\t// Returns the OAuth2Authorization containing the provided token, or null if not found.\n\tOAuth2Authorization findByToken(String token, OAuth2TokenType tokenType);\n}", "des": "A JDBC implementation of an OAuth2AuthorizationService that uses a JdbcOperations for OAuth2Authorization persistence."}
{"index": 13467, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class JdbcRegisteredClientRepository extends Object implements RegisteredClientRepository {\n\t// Returns the registered client identified by the provided clientId, or null if not found.\n\tRegisteredClient findByClientId(String clientId);\n\t// Returns the registered client identified by the provided id, or null if not found.\n\tRegisteredClient findById(String id);\n\tprotected final org.springframework.jdbc.core.JdbcOperations getJdbcOperations();\n}", "des": "A JDBC implementation of a RegisteredClientRepository that uses a JdbcOperations for RegisteredClient persistence."}
{"index": 13468, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class JwtEncodingContext extends Object implements OAuth2TokenContext {\n\t// Returns the value of the attribute associated to the key.\n\t<V> V get(Object key);\n\t// Returns the claims allowing the ability to add, replace, or remove.\n\torg.springframework.security.oauth2.jwt.JwtClaimsSet.Builder getClaims();\n\t// Returns the JWS headers allowing the ability to add, replace, or remove.\n\torg.springframework.security.oauth2.jwt.JwsHeader.Builder getJwsHeader();\n}", "des": "An OAuth2TokenContext implementation used when encoding a Jwt."}
{"index": 13469, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class JwtGenerator extends Object implements OAuth2TokenGenerator<org.springframework.security.oauth2.jwt.Jwt> {\n\t// Generate an OAuth 2.0 Token using the attributes contained in the OAuth2TokenContext, or return null if the OAuth2TokenContext.getTokenType() is not supported.\n\torg.springframework.security.oauth2.jwt.Jwt generate(OAuth2TokenContext context);\n}", "des": "An OAuth2TokenGenerator that generates a Jwt used for an OAuth2AccessToken or OidcIdToken."}
{"index": 13470, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2AccessTokenAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the access token.\n\torg.springframework.security.oauth2.core.OAuth2AccessToken getAccessToken();\n\t// Returns the additional parameters.\n\tMap<String,Object> getAdditionalParameters();\n\tObject getCredentials();\n\tObject getPrincipal();\n\t// Returns the refresh token.\n\torg.springframework.security.oauth2.core.OAuth2RefreshToken getRefreshToken();\n}", "des": "An Authentication implementation used when issuing an OAuth 2.0 Access Token and (optional) Refresh Token."}
{"index": 13471, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2AccessTokenGenerator extends Object implements OAuth2TokenGenerator<org.springframework.security.oauth2.core.OAuth2AccessToken> {\n\t// Generate an OAuth 2.0 Token using the attributes contained in the OAuth2TokenContext, or return null if the OAuth2TokenContext.getTokenType() is not supported.\n\torg.springframework.security.oauth2.core.OAuth2AccessToken generate(OAuth2TokenContext context);\n}", "des": "An OAuth2TokenGenerator that generates a \"reference\" (opaque) OAuth2AccessToken."}
{"index": 13472, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public abstract static class OAuth2AuthenticationContext.AbstractBuilder<T extends OAuth2AuthenticationContext,B extends OAuth2AuthenticationContext.AbstractBuilder<T,B>> extends Object {\n\t// Builds a new OAuth2AuthenticationContext.\n\tabstract T build();\n\t// A Consumer of the attributes Map allowing the ability to add, replace, or remove.\n\tB context(Consumer<Map<Object,Object>> contextConsumer);\n\tprotected <V> V get(Object key);\n\tprotected Map<Object,Object> getContext();\n\tprotected final B getThis();\n}", "des": "A builder for subclasses of OAuth2AuthenticationContext."}
{"index": 13473, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2Authorization extends Object implements Serializable {\n\tboolean equals(Object obj);\n\t// Returns a new OAuth2Authorization.Builder, initialized with the values from the provided OAuth2Authorization.\n\tstatic OAuth2Authorization.Builder from(OAuth2Authorization authorization);\n\t// Returns the OAuth2Authorization.Token of type OAuth2AccessToken.\n\tOAuth2Authorization.Token<org.springframework.security.oauth2.core.OAuth2AccessToken> getAccessToken();\n}", "des": "A representation of an OAuth 2.0 Authorization, which holds state related to the authorization granted to a client, by the resource owner or itself in the case of the client_credentials grant type."}
{"index": 13474, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static class OAuth2Authorization.Builder extends Object implements Serializable {\n\t// Sets the access token.\n\tOAuth2Authorization.Builder accessToken(org.springframework.security.oauth2.core.OAuth2AccessToken accessToken);\n\t// Adds an attribute associated to the authorization.\n\tOAuth2Authorization.Builder attribute(String name, Object value);\n}", "des": "A builder for OAuth2Authorization."}
{"index": 13475, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static class OAuth2Authorization.Token<T extends org.springframework.security.oauth2.core.OAuth2Token> extends Object implements Serializable {\n\tprotected static Map<String,Object> defaultMetadata();\n\tboolean equals(Object obj);\n\t// Returns the claims associated to the token.\n\tMap<String,Object> getClaims();\n\t// Returns the metadata associated to the token.\n\tMap<String,Object> getMetadata();\n\t// Returns the value of the metadata associated to the token.\n\t<V> V getMetadata(String name);\n}", "des": "A holder of an OAuth 2.0 Token and it's associated metadata."}
{"index": 13476, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2AuthorizationCodeAuthenticationToken extends OAuth2AuthorizationGrantAuthenticationToken {\n\t// Returns the authorization code.\n\tString getCode();\n\t// Returns the redirect uri.\n\tString getRedirectUri();\n}", "des": "An Authentication implementation used for the OAuth 2.0 Authorization Code Grant."}
{"index": 13477, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2AuthorizationCodeRequestAuthenticationContext extends Object implements OAuth2AuthenticationContext {\n\t// Returns the value of the attribute associated to the key.\n\t<V> V get(Object key);\n\t// Returns the registered client.\n\tRegisteredClient getRegisteredClient();\n\t// Returns true if an attribute associated to the key exists, false otherwise.\n\tboolean hasKey(Object key);\n}", "des": "An OAuth2AuthenticationContext that holds an OAuth2AuthorizationCodeRequestAuthenticationToken and additional information and is used when validating the OAuth 2.0 Authorization Request used in the Authorization Code Grant."}
{"index": 13478, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static final class OAuth2AuthorizationCodeRequestAuthenticationContext.Builder extends OAuth2AuthenticationContext.AbstractBuilder<OAuth2AuthorizationCodeRequestAuthenticationContext,OAuth2AuthorizationCodeRequestAuthenticationContext.Builder> {\n\t// Builds a new OAuth2AuthorizationCodeRequestAuthenticationContext.\n\tOAuth2AuthorizationCodeRequestAuthenticationContext build();\n}", "des": "A builder for OAuth2AuthorizationCodeRequestAuthenticationContext."}
{"index": 13479, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2AuthorizationCodeRequestAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the additional parameters.\n\tMap<String,Object> getAdditionalParameters();\n\t// Returns the OAuth2AuthorizationCode.\n\tOAuth2AuthorizationCode getAuthorizationCode();\n\t// Returns the authorization URI.\n\tString getAuthorizationUri();\n\t// Returns the client identifier.\n\tString getClientId();\n\tObject getCredentials();\n\tObject getPrincipal();\n}", "des": "An Authentication implementation for the OAuth 2.0 Authorization Request used in the Authorization Code Grant."}
{"index": 13480, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2AuthorizationConsent extends Object implements Serializable {\n\tboolean equals(Object obj);\n\t// Returns a new OAuth2AuthorizationConsent.Builder, initialized with the values from the provided OAuth2AuthorizationConsent.\n\tstatic OAuth2AuthorizationConsent.Builder from(OAuth2AuthorizationConsent authorizationConsent);\n\t// Returns the authorities granted to the client by the principal.\n\tSet<org.springframework.security.core.GrantedAuthority> getAuthorities();\n}", "des": "A representation of an OAuth 2.0 \"consent\" to an Authorization request, which holds state related to the set of authorities granted to a client by the resource owner."}
{"index": 13481, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static final class OAuth2AuthorizationConsent.Builder extends Object implements Serializable {\n\t// A Consumer of the authorities, allowing the ability to add, replace or remove.\n\tOAuth2AuthorizationConsent.Builder authorities(Consumer<Set<org.springframework.security.core.GrantedAuthority>> authoritiesConsumer);\n}", "des": "A builder for OAuth2AuthorizationConsent."}
{"index": 13482, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2AuthorizationConsentAuthenticationContext extends Object implements OAuth2AuthenticationContext {\n\t// Returns the value of the attribute associated to the key.\n\t<V> V get(Object key);\n\t// Returns the authorization.\n\tOAuth2Authorization getAuthorization();\n\t// Returns the authorization consent builder.\n\tOAuth2AuthorizationConsent.Builder getAuthorizationConsent();\n}", "des": "An OAuth2AuthenticationContext that holds an OAuth2AuthorizationConsent.Builder and additional information and is used when customizing the building of the OAuth2AuthorizationConsent."}
{"index": 13483, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static final class OAuth2AuthorizationConsentAuthenticationContext.Builder extends OAuth2AuthenticationContext.AbstractBuilder<OAuth2AuthorizationConsentAuthenticationContext,OAuth2AuthorizationConsentAuthenticationContext.Builder> {\n\t// Sets the authorization.\n\tOAuth2AuthorizationConsentAuthenticationContext.Builder authorization(OAuth2Authorization authorization);\n}", "des": "A builder for OAuth2AuthorizationConsentAuthenticationContext."}
{"index": 13484, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2AuthorizationConsentAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider {\n\torg.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication authentication);\n\t// Sets the OAuth2TokenGenerator that generates the OAuth2AuthorizationCode.\n\tvoid setAuthorizationCodeGenerator(OAuth2TokenGenerator<OAuth2AuthorizationCode> authorizationCodeGenerator);\n}", "des": "An AuthenticationProvider implementation for the OAuth 2.0 Authorization Consent used in the Authorization Code Grant."}
{"index": 13485, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2AuthorizationConsentAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the additional parameters.\n\tMap<String,Object> getAdditionalParameters();\n\t// Returns the authorization URI.\n\tString getAuthorizationUri();\n\t// Returns the client identifier.\n\tString getClientId();\n\tObject getCredentials();\n\tObject getPrincipal();\n\t// Returns the requested (or authorized) scope(s).\n\tSet<String> getScopes();\n}", "des": "An Authentication implementation for the OAuth 2.0 Authorization Consent used in the Authorization Code Grant."}
{"index": 13486, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public interface OAuth2AuthorizationConsentService {\n\t// Returns the OAuth2AuthorizationConsent identified by the provided registeredClientId and principalName, or null if not found.\n\tOAuth2AuthorizationConsent findById(String registeredClientId, String principalName);\n\t// Removes the OAuth2AuthorizationConsent.\n\tvoid remove(OAuth2AuthorizationConsent authorizationConsent);\n\t// Saves the OAuth2AuthorizationConsent.\n\tvoid save(OAuth2AuthorizationConsent authorizationConsent);\n}", "des": "Implementations of this interface are responsible for the management of OAuth 2.0 Authorization Consent(s)."}
{"index": 13487, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2AuthorizationEndpointConfigurer extends Object {\n\t// Adds an AuthenticationProvider used for authenticating an OAuth2AuthorizationCodeRequestAuthenticationToken.\n\tOAuth2AuthorizationEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider);\n}", "des": "Configurer for the OAuth 2.0 Authorization Endpoint."}
{"index": 13488, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2AuthorizationGrantAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the additional parameters.\n\tMap<String,Object> getAdditionalParameters();\n\tObject getCredentials();\n\t// Returns the authorization grant type.\n\torg.springframework.security.oauth2.core.AuthorizationGrantType getGrantType();\n\tObject getPrincipal();\n}", "des": "Base implementation of an Authentication representing an OAuth 2.0 Authorization Grant."}
{"index": 13489, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2AuthorizationServerConfigurer extends org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer<OAuth2AuthorizationServerConfigurer,org.springframework.security.config.annotation.web.builders.HttpSecurity> {\n\t// Sets the authorization consent service.\n\tOAuth2AuthorizationServerConfigurer authorizationConsentService(OAuth2AuthorizationConsentService authorizationConsentService);\n}", "des": "An AbstractHttpConfigurer for OAuth 2.0 Authorization Server support."}
{"index": 13490, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2AuthorizationServerMetadata extends AbstractOAuth2AuthorizationServerMetadata {\n\t// Constructs a new OAuth2AuthorizationServerMetadata.Builder with empty claims.\n\tstatic OAuth2AuthorizationServerMetadata.Builder builder();\n\t// Constructs a new OAuth2AuthorizationServerMetadata.Builder with the provided claims.\n\tstatic OAuth2AuthorizationServerMetadata.Builder withClaims(Map<String,Object> claims);\n}", "des": "A representation of an OAuth 2.0 Authorization Server Metadata response, which is returned from an OAuth 2.0 Authorization Server's Metadata Endpoint, and contains a set of claims about the Authorization Server's configuration."}
{"index": 13491, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public interface OAuth2AuthorizationServerMetadataClaimAccessor extends org.springframework.security.oauth2.core.ClaimAccessor {\n\t// Returns the URL of the OAuth 2.0 Authorization Endpoint (authorization_endpoint).\n\tdefault URL getAuthorizationEndpoint();\n\t// Returns the URL of the OAuth 2.0 Dynamic Client Registration Endpoint (registration_endpoint).\n\tdefault URL getClientRegistrationEndpoint();\n}", "des": "A ClaimAccessor for the \"claims\" an Authorization Server describes about its configuration, used in OAuth 2.0 Authorization Server Metadata and OpenID Connect Discovery 1.0."}
{"index": 13492, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public interface OAuth2AuthorizationService {\n\t// Returns the OAuth2Authorization identified by the provided id, or null if not found.\n\tOAuth2Authorization findById(String id);\n\t// Returns the OAuth2Authorization containing the provided token, or null if not found.\n\tOAuth2Authorization findByToken(String token, OAuth2TokenType tokenType);\n\t// Removes the OAuth2Authorization.\n\tvoid remove(OAuth2Authorization authorization);\n\t// Saves the OAuth2Authorization.\n\tvoid save(OAuth2Authorization authorization);\n}", "des": "Implementations of this interface are responsible for the management of OAuth 2.0 Authorization(s)."}
{"index": 13493, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2ClientAuthenticationConfigurer extends Object {\n\t// Adds an AuthenticationConverter used when attempting to extract client credentials from HttpServletRequest to an instance of OAuth2ClientAuthenticationToken used for authenticating the client.\n\tOAuth2ClientAuthenticationConfigurer authenticationConverter(org.springframework.security.web.authentication.AuthenticationConverter authenticationConverter);\n}", "des": "Configurer for OAuth 2.0 Client Authentication."}
{"index": 13494, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "@Transient public class OAuth2ClientAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the additional parameters.\n\tMap<String,Object> getAdditionalParameters();\n\t// Returns the authentication method used by the client.\n\torg.springframework.security.oauth2.core.ClientAuthenticationMethod getClientAuthenticationMethod();\n\tObject getCredentials();\n\tObject getPrincipal();\n}", "des": "An Authentication implementation used for OAuth 2.0 Client Authentication."}
{"index": 13495, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2DeviceAuthorizationConsentAuthenticationToken extends OAuth2AuthorizationConsentAuthenticationToken {\n\t// Returns the requested scopes.\n\tSet<String> getRequestedScopes();\n\t// Returns the user code.\n\tString getUserCode();\n}", "des": "An Authentication implementation for the Device Authorization Consent used in the OAuth 2.0 Device Authorization Grant."}
{"index": 13496, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2DeviceAuthorizationEndpointConfigurer extends Object {\n\t// Adds an AuthenticationProvider used for authenticating an OAuth2DeviceAuthorizationRequestAuthenticationToken.\n\tOAuth2DeviceAuthorizationEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider);\n}", "des": "Configurer for the OAuth 2.0 Device Authorization Endpoint."}
{"index": 13497, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2DeviceAuthorizationRequestAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider {\n\torg.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication authentication);\n\t// Sets the OAuth2TokenGenerator that generates the OAuth2DeviceCode.\n\tvoid setDeviceCodeGenerator(OAuth2TokenGenerator<org.springframework.security.oauth2.core.OAuth2DeviceCode> deviceCodeGenerator);\n}", "des": "An AuthenticationProvider implementation for the Device Authorization Request used in the OAuth 2.0 Device Authorization Grant."}
{"index": 13498, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2DeviceAuthorizationRequestAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the additional parameters.\n\tMap<String,Object> getAdditionalParameters();\n\t// Returns the authorization URI.\n\tString getAuthorizationUri();\n\tObject getCredentials();\n\t// Returns the device code.\n\torg.springframework.security.oauth2.core.OAuth2DeviceCode getDeviceCode();\n\tObject getPrincipal();\n}", "des": "An Authentication implementation for the Device Authorization Request used in the OAuth 2.0 Device Authorization Grant."}
{"index": 13499, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2DeviceVerificationAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the additional parameters.\n\tMap<String,Object> getAdditionalParameters();\n\t// Returns the client identifier.\n\tString getClientId();\n\tObject getCredentials();\n\tObject getPrincipal();\n\t// Returns the user code.\n\tString getUserCode();\n}", "des": "An Authentication implementation for the Device Verification Request (submission of the user code) used in the OAuth 2.0 Device Authorization Grant."}
{"index": 13500, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2DeviceVerificationEndpointConfigurer extends Object {\n\t// Adds an AuthenticationProvider used for authenticating an OAuth2DeviceVerificationAuthenticationToken or OAuth2DeviceAuthorizationConsentAuthenticationToken.\n\tOAuth2DeviceVerificationEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider);\n}", "des": "Configurer for the OAuth 2.0 Device Verification Endpoint."}
{"index": 13501, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2RefreshTokenAuthenticationToken extends OAuth2AuthorizationGrantAuthenticationToken {\n\t// Returns the refresh token.\n\tString getRefreshToken();\n\t// Returns the requested scope(s).\n\tSet<String> getScopes();\n}", "des": "An Authentication implementation used for the OAuth 2.0 Refresh Token Grant."}
{"index": 13502, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public interface OAuth2TokenClaimAccessor extends org.springframework.security.oauth2.core.ClaimAccessor {\n\t// Returns the Audience (aud) claim which identifies the recipient(s) that the OAuth 2.0 Token is intended for.\n\tdefault List<String> getAudience();\n\t// Returns the Expiration time (exp) claim which identifies the expiration time on or after which the OAuth 2.0 Token MUST NOT be accepted for processing.\n\tdefault Instant getExpiresAt();\n}", "des": "A ClaimAccessor for the \"claims\" that may be contained in an OAuth2TokenClaimsSet."}
{"index": 13503, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2TokenClaimsContext extends Object implements OAuth2TokenContext {\n\t// Returns the value of the attribute associated to the key.\n\t<V> V get(Object key);\n\t// Returns the claims allowing the ability to add, replace, or remove.\n\tOAuth2TokenClaimsSet.Builder getClaims();\n\t// Returns true if an attribute associated to the key exists, false otherwise.\n\tboolean hasKey(Object key);\n}", "des": "An OAuth2TokenContext implementation that provides access to the claims of an OAuth 2.0 Token, allowing the ability to customize."}
{"index": 13504, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static final class OAuth2TokenClaimsSet.Builder extends Object {\n\t// Sets the audience (aud) claim, which identifies the recipient(s) that the OAuth 2.0 Token is intended for.\n\tOAuth2TokenClaimsSet.Builder audience(List<String> audience);\n\t// Builds a new OAuth2TokenClaimsSet.\n\tOAuth2TokenClaimsSet build();\n\t// Sets the claim.\n\tOAuth2TokenClaimsSet.Builder claim(String name, Object value);\n}", "des": "A builder for OAuth2TokenClaimsSet."}
{"index": 13505, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public interface OAuth2TokenContext extends Context {\n\t// Returns the authorization.\n\tdefault OAuth2Authorization getAuthorization();\n\t// Returns the Authentication representing the authorization grant.\n\tdefault <T extends org.springframework.security.core.Authentication>T getAuthorizationGrant();\n\t// Returns the authorization grant type.\n\tdefault org.springframework.security.oauth2.core.AuthorizationGrantType getAuthorizationGrantType();\n}", "des": "A context that holds information (to be) associated to an OAuth 2.0 Token and is used by an OAuth2TokenGenerator and OAuth2TokenCustomizer."}
{"index": 13506, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public abstract static class OAuth2TokenContext.AbstractBuilder<T extends OAuth2TokenContext,B extends OAuth2TokenContext.AbstractBuilder<T,B>> extends Object {\n\t// Sets the authorization.\n\tB authorization(OAuth2Authorization authorization);\n\t// Sets the Authentication representing the authorization grant.\n\tB authorizationGrant(org.springframework.security.core.Authentication authorizationGrant);\n}", "des": "Base builder for implementations of OAuth2TokenContext."}
{"index": 13507, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2TokenEndpointConfigurer extends Object {\n\t// Adds an AuthenticationConverter used when attempting to extract an Access Token Request from HttpServletRequest to an instance of OAuth2AuthorizationGrantAuthenticationToken used for authenticating the authorization grant.\n\tOAuth2TokenEndpointConfigurer accessTokenRequestConverter(org.springframework.security.web.authentication.AuthenticationConverter accessTokenRequestConverter);\n}", "des": "Configurer for the OAuth 2.0 Token Endpoint."}
{"index": 13508, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2TokenIntrospection extends Object implements org.springframework.security.oauth2.core.OAuth2TokenIntrospectionClaimAccessor, Serializable {\n\t// Constructs a new OAuth2TokenIntrospection.Builder initialized with the active claim to false.\n\tstatic OAuth2TokenIntrospection.Builder builder();\n\t// Constructs a new OAuth2TokenIntrospection.Builder initialized with the provided active claim.\n\tstatic OAuth2TokenIntrospection.Builder builder(boolean active);\n}", "des": "A representation of the claims returned in an OAuth 2.0 Token Introspection Response."}
{"index": 13509, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static class OAuth2TokenIntrospection.Builder extends Object {\n\t// Sets the indicator of whether or not the presented token is currently active, REQUIRED.\n\tOAuth2TokenIntrospection.Builder active(boolean active);\n\t// Add the identifier representing the intended audience for this token, OPTIONAL.\n\tOAuth2TokenIntrospection.Builder audience(String audience);\n}", "des": "A builder for OAuth2TokenIntrospection."}
{"index": 13510, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2TokenIntrospectionAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the additional parameters.\n\tMap<String,Object> getAdditionalParameters();\n\tObject getCredentials();\n\tObject getPrincipal();\n\t// Returns the token.\n\tString getToken();\n\t// Returns the token claims.\n\tOAuth2TokenIntrospection getTokenClaims();\n\t// Returns the token type hint.\n\tString getTokenTypeHint();\n}", "des": "An Authentication implementation used for OAuth 2.0 Token Introspection."}
{"index": 13511, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2TokenIntrospectionEndpointConfigurer extends Object {\n\t// Adds an AuthenticationProvider used for authenticating a type of OAuth2TokenIntrospectionAuthenticationToken.\n\tOAuth2TokenIntrospectionEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider);\n}", "des": "Configurer for the OAuth 2.0 Token Introspection Endpoint."}
{"index": 13512, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OAuth2TokenRevocationAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\tObject getCredentials();\n\tObject getPrincipal();\n\t// Returns the token.\n\tString getToken();\n\t// Returns the token type hint.\n\tString getTokenTypeHint();\n}", "des": "An Authentication implementation used for OAuth 2.0 Token Revocation."}
{"index": 13513, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OAuth2TokenRevocationEndpointConfigurer extends Object {\n\t// Adds an AuthenticationProvider used for authenticating a type of OAuth2TokenRevocationAuthenticationToken.\n\tOAuth2TokenRevocationEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider);\n}", "des": "Configurer for the OAuth 2.0 Token Revocation Endpoint."}
{"index": 13514, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public interface OidcClientMetadataClaimAccessor extends org.springframework.security.oauth2.core.ClaimAccessor {\n\t// Returns the Client Identifier (client_id).\n\tdefault String getClientId();\n\t// Returns the time at which the Client Identifier was issued (client_id_issued_at).\n\tdefault Instant getClientIdIssuedAt();\n\t// Returns the name of the Client to be presented to the End-User (client_name).\n\tdefault String getClientName();\n}", "des": "A ClaimAccessor for the \"claims\" that are contained in the OpenID Client Registration Request and Response."}
{"index": 13515, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OidcClientRegistration extends Object implements OidcClientMetadataClaimAccessor, Serializable {\n\t// Constructs a new OidcClientRegistration.Builder with empty claims.\n\tstatic OidcClientRegistration.Builder builder();\n\t// Returns the metadata as claims.\n\tMap<String,Object> getClaims();\n\t// Constructs a new OidcClientRegistration.Builder with the provided claims.\n\tstatic OidcClientRegistration.Builder withClaims(Map<String,Object> claims);\n}", "des": "A representation of an OpenID Client Registration Request and Response, which is sent to and returned from the Client Registration Endpoint, and contains a set of claims about the Client's Registration information."}
{"index": 13516, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static class OidcClientRegistration.Builder extends Object {\n\t// Validate the claims and build the OidcClientRegistration.\n\tOidcClientRegistration build();\n\t// Sets the claim.\n\tOidcClientRegistration.Builder claim(String name, Object value);\n\t// Provides access to every claim(String, Object) declared so far allowing the ability to add, replace, or remove.\n\tOidcClientRegistration.Builder claims(Consumer<Map<String,Object>> claimsConsumer);\n}", "des": "Helps configure an OidcClientRegistration."}
{"index": 13517, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OidcClientRegistrationAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider {\n\torg.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication authentication);\n\t// Sets the PasswordEncoder used to encode the client secret.\n\tvoid setPasswordEncoder(org.springframework.security.crypto.password.PasswordEncoder passwordEncoder);\n}", "des": "An AuthenticationProvider implementation for OpenID Connect 1.0 Dynamic Client Registration Endpoint."}
{"index": 13518, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OidcClientRegistrationAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the client identifier.\n\tString getClientId();\n\t// Returns the client registration.\n\tOidcClientRegistration getClientRegistration();\n\tObject getCredentials();\n\tObject getPrincipal();\n}", "des": "An Authentication implementation used for OpenID Connect 1.0 Dynamic Client Registration (and Configuration) Endpoint."}
{"index": 13519, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OidcClientRegistrationEndpointConfigurer extends Object {\n\t// Adds an AuthenticationProvider used for authenticating an OidcClientRegistrationAuthenticationToken.\n\tOidcClientRegistrationEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider);\n}", "des": "Configurer for OpenID Connect 1.0 Dynamic Client Registration Endpoint."}
{"index": 13520, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OidcConfigurer extends Object {\n\t// Configures the OpenID Connect Dynamic Client Registration 1.0 Endpoint.\n\tOidcConfigurer clientRegistrationEndpoint(org.springframework.security.config.Customizer<OidcClientRegistrationEndpointConfigurer> clientRegistrationEndpointCustomizer);\n\tprotected final org.springframework.security.config.annotation.ObjectPostProcessor<Object> getObjectPostProcessor();\n}", "des": "Configurer for OpenID Connect 1.0 support."}
{"index": 13521, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class OidcLogoutAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the client identifier the ID Token was issued to.\n\tString getClientId();\n\tObject getCredentials();\n\t// Returns the ID Token previously issued by the Provider to the Client.\n\torg.springframework.security.oauth2.core.oidc.OidcIdToken getIdToken();\n}", "des": "An Authentication implementation used for OpenID Connect 1.0 RP-Initiated Logout Endpoint."}
{"index": 13522, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OidcLogoutEndpointConfigurer extends Object {\n\t// Adds an AuthenticationProvider used for authenticating an OidcLogoutAuthenticationToken.\n\tOidcLogoutEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider);\n}", "des": "Configurer for OpenID Connect 1.0 RP-Initiated Logout Endpoint."}
{"index": 13523, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OidcProviderConfiguration extends AbstractOAuth2AuthorizationServerMetadata implements OidcProviderMetadataClaimAccessor {\n\t// Constructs a new OidcProviderConfiguration.Builder with empty claims.\n\tstatic OidcProviderConfiguration.Builder builder();\n\t// Constructs a new OidcProviderConfiguration.Builder with the provided claims.\n\tstatic OidcProviderConfiguration.Builder withClaims(Map<String,Object> claims);\n}", "des": "A representation of an OpenID Provider Configuration Response, which is returned from an Issuer's Discovery Endpoint, and contains a set of claims about the OpenID Provider's configuration."}
{"index": 13524, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static class OidcProviderConfiguration.Builder extends AbstractOAuth2AuthorizationServerMetadata.AbstractBuilder<OidcProviderConfiguration,OidcProviderConfiguration.Builder> {\n\t// Validate the claims and build the OidcProviderConfiguration.\n\tOidcProviderConfiguration build();\n\t// Use this end_session_endpoint in the resulting OidcProviderConfiguration, OPTIONAL.\n\tOidcProviderConfiguration.Builder endSessionEndpoint(String endSessionEndpoint);\n}", "des": "Helps configure an OidcProviderConfiguration."}
{"index": 13525, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public interface OidcProviderMetadataClaimAccessor extends OAuth2AuthorizationServerMetadataClaimAccessor {\n\t// Returns the URL of the OpenID Connect 1.0 End Session Endpoint (end_session_endpoint).\n\tdefault URL getEndSessionEndpoint();\n\t// Returns the JWS signing algorithms supported for the ID Token to encode the claims in a Jwt (id_token_signing_alg_values_supported).\n\tdefault List<String> getIdTokenSigningAlgorithms();\n}", "des": "A ClaimAccessor for the \"claims\" that can be returned in the OpenID Provider Configuration Response."}
{"index": 13526, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OidcUserInfoAuthenticationContext extends Object implements OAuth2AuthenticationContext {\n\t// Returns the value of the attribute associated to the key.\n\t<V> V get(Object key);\n\t// Returns the OAuth 2.0 Access Token.\n\torg.springframework.security.oauth2.core.OAuth2AccessToken getAccessToken();\n\t// Returns the authorization.\n\tOAuth2Authorization getAuthorization();\n\t// Returns true if an attribute associated to the key exists, false otherwise.\n\tboolean hasKey(Object key);\n}", "des": "An OAuth2AuthenticationContext that holds an OidcUserInfoAuthenticationToken and additional information and is used when mapping claims to an instance of OidcUserInfo."}
{"index": 13527, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static final class OidcUserInfoAuthenticationContext.Builder extends OAuth2AuthenticationContext.AbstractBuilder<OidcUserInfoAuthenticationContext,OidcUserInfoAuthenticationContext.Builder> {\n\t// Sets the OAuth 2.0 Access Token.\n\tOidcUserInfoAuthenticationContext.Builder accessToken(org.springframework.security.oauth2.core.OAuth2AccessToken accessToken);\n\t// Sets the authorization.\n\tOidcUserInfoAuthenticationContext.Builder authorization(OAuth2Authorization authorization);\n}", "des": "A builder for OidcUserInfoAuthenticationContext."}
{"index": 13528, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class OidcUserInfoEndpointConfigurer extends Object {\n\t// Adds an AuthenticationProvider used for authenticating an OidcUserInfoAuthenticationToken.\n\tOidcUserInfoEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider);\n}", "des": "Configurer for OpenID Connect 1.0 UserInfo Endpoint."}
{"index": 13529, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public class RegisteredClient extends Object implements Serializable {\n\tboolean equals(Object obj);\n\t// Returns a new RegisteredClient.Builder, initialized with the values from the provided RegisteredClient.\n\tstatic RegisteredClient.Builder from(RegisteredClient registeredClient);\n\t// Returns the authorization grant type(s) that the client may use.\n\tSet<org.springframework.security.oauth2.core.AuthorizationGrantType> getAuthorizationGrantTypes();\n}", "des": "A representation of a client registration with an OAuth 2.0 Authorization Server."}
{"index": 13530, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static class RegisteredClient.Builder extends Object implements Serializable {\n\t// Adds an authorization grant type the client may use.\n\tRegisteredClient.Builder authorizationGrantType(org.springframework.security.oauth2.core.AuthorizationGrantType authorizationGrantType);\n}", "des": "A builder for RegisteredClient."}
{"index": 13531, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public interface RegisteredClientRepository {\n\t// Returns the registered client identified by the provided clientId, or null if not found.\n\tRegisteredClient findByClientId(String clientId);\n\t// Returns the registered client identified by the provided id, or null if not found.\n\tRegisteredClient findById(String id);\n\t// Saves the registered client.\n\tvoid save(RegisteredClient registeredClient);\n}", "des": "A repository for OAuth 2.0 RegisteredClient(s)."}
{"index": 13532, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public final class TokenSettings extends AbstractSettings {\n\t// Constructs a new TokenSettings.Builder with the default settings.\n\tstatic TokenSettings.Builder builder();\n\t// Returns the token format for an access token.\n\tOAuth2TokenFormat getAccessTokenFormat();\n\t// Returns the time-to-live for an access token.\n\tDuration getAccessTokenTimeToLive();\n\t// Returns the time-to-live for an authorization code.\n\tDuration getAuthorizationCodeTimeToLive();\n}", "des": "A facility for token configuration settings."}
{"index": 13533, "repo": "spring-security-oauth2-authorization-server-1.1.1", "code": "public static final class TokenSettings.Builder extends AbstractSettings.AbstractBuilder<TokenSettings,TokenSettings.Builder> {\n\t// Set the token format for an access token.\n\tTokenSettings.Builder accessTokenFormat(OAuth2TokenFormat accessTokenFormat);\n\t// Set the time-to-live for an access token.\n\tTokenSettings.Builder accessTokenTimeToLive(Duration accessTokenTimeToLive);\n}", "des": "A builder for TokenSettings."}
{"index": 13534, "repo": "spring-vault-core-3.0.4", "code": "@Configuration(proxyBeanMethods=false) public abstract class AbstractReactiveVaultConfiguration extends AbstractVaultConfiguration {\n\t// Create a ClientHttpConnector configured with ClientOptions and SslConfiguration.\n\tprotected ClientHttpConnector clientHttpConnector();\n\t// Return the WebClientFactory.\n\tprotected WebClientFactory getWebClientFactory();\n\t// Construct a ReactiveSessionManager using vaultTokenSupplier().\n\tReactiveSessionManager reactiveSessionManager();\n}", "des": "Base class for Spring Vault configuration using JavaConfig for a reactive infrastructure."}
{"index": 13535, "repo": "spring-vault-core-3.0.4", "code": "public abstract class AbstractResult<V> extends Object {\n\t// Return the result or throw a VaultException if the operation completed with an error.\n\tV get();\n\tprotected abstract V get0();\n\t// Returns the cause of the failed operation if the operation completed with an error.\n\tException getCause();\n\t// Returns true if and only if the batch operation was completed successfully.\n\tboolean isSuccessful();\n}", "des": "Supporting class for computation results allowing introspection of the result value."}
{"index": 13536, "repo": "spring-vault-core-3.0.4", "code": "@Configuration(proxyBeanMethods=false) public abstract class AbstractVaultConfiguration extends Object implements ApplicationContextAware {\n\t// Annotate with Bean in case you want to expose a ClientAuthentication instance to the ApplicationContext.\n\tabstract ClientAuthentication clientAuthentication();\n\t// Create a AbstractVaultConfiguration.ClientFactoryWrapper containing a ClientHttpRequestFactory .\n\tAbstractVaultConfiguration.ClientFactoryWrapper clientHttpRequestFactoryWrapper();\n}", "des": "Base class for Spring Vault configuration using JavaConfig."}
{"index": 13537, "repo": "spring-vault-core-3.0.4", "code": "public abstract class AbstractVaultConverter extends Object implements VaultConverter, InitializingBean {\n\tvoid afterPropertiesSet();\n\tConversionService getConversionService();\n\t// Registers the given custom conversions with the converter.\n\tvoid setCustomConversions(CustomConversions conversions);\n\t// Registers EntityInstantiators to customize entity instantiation.\n\tvoid setInstantiators(EntityInstantiators instantiators);\n}", "des": "Base class for VaultConverter implementations."}
{"index": 13538, "repo": "spring-vault-core-3.0.4", "code": "public static class AppIdAuthenticationOptions.AppIdAuthenticationOptionsBuilder extends Object {\n\t// Configure the AppId.\n\tAppIdAuthenticationOptions.AppIdAuthenticationOptionsBuilder appId(String appId);\n\t// Build a new AppIdAuthenticationOptions instance.\n\tAppIdAuthenticationOptions build();\n\t// Configure the mount path.\n\tAppIdAuthenticationOptions.AppIdAuthenticationOptionsBuilder path(String path);\n}", "des": "Builder for AppIdAuthenticationOptions."}
{"index": 13539, "repo": "spring-vault-core-3.0.4", "code": "public class AppRoleAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for AppRole authentication given AppRoleAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(AppRoleAuthenticationOptions options);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "AppRole implementation of ClientAuthentication."}
{"index": 13540, "repo": "spring-vault-core-3.0.4", "code": "public static class AppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder extends Object {\n\t// Configure a appRole.\n\tAppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder appRole(String appRole);\n\t// Build a new AppRoleAuthenticationOptions instance.\n\tAppRoleAuthenticationOptions build();\n\t// Configure the mount path.\n\tAppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder path(String path);\n}", "des": "Builder for AppRoleAuthenticationOptions."}
{"index": 13541, "repo": "spring-vault-core-3.0.4", "code": "public static interface AppRoleAuthenticationOptions.RoleId {\n\t// Create a AppRoleAuthenticationOptions.RoleId that encapsulates a static roleId.\n\tstatic AppRoleAuthenticationOptions.RoleId provided(String roleId);\n\t// Create a AppRoleAuthenticationOptions.RoleId that obtains its value using pull-mode, specifying a initial token.\n\tstatic AppRoleAuthenticationOptions.RoleId pull(VaultToken initialToken);\n}", "des": "RoleId type encapsulating how the roleId is actually obtained."}
{"index": 13542, "repo": "spring-vault-core-3.0.4", "code": "public static interface AppRoleAuthenticationOptions.SecretId {\n\t// Create a AppRoleAuthenticationOptions.SecretId that represents an absent secretId.\n\tstatic AppRoleAuthenticationOptions.SecretId absent();\n\t// Create a AppRoleAuthenticationOptions.SecretId that encapsulates a static secretId.\n\tstatic AppRoleAuthenticationOptions.SecretId provided(String secretId);\n}", "des": "SecretId type encapsulating how the secretId is actually obtained."}
{"index": 13543, "repo": "spring-vault-core-3.0.4", "code": "public abstract class AuthenticationEventPublisher extends Object {\n\t// Add a AuthenticationListener.\n\tvoid addAuthenticationListener(AuthenticationListener listener);\n\t// Add a AuthenticationErrorListener.\n\tvoid addErrorListener(AuthenticationErrorListener listener);\n\t// Remove a AuthenticationListener.\n\tvoid removeAuthenticationListener(AuthenticationListener listener);\n\t// Remove a AuthenticationErrorListener.\n\tvoid removeErrorListener(AuthenticationErrorListener listener);\n}", "des": "Publisher for AuthenticationEvents."}
{"index": 13544, "repo": "spring-vault-core-3.0.4", "code": "public class AuthenticationSteps extends Object {\n\t// Start flow composition from a AuthenticationSteps.HttpRequest.\n\tstatic <T> AuthenticationSteps.Node<T> fromHttpRequest(AuthenticationSteps.HttpRequest<T> request);\n\t// Start flow composition from a Supplier.\n\tstatic <T> AuthenticationSteps.Node<T> fromSupplier(Supplier<T> supplier);\n\t// Start flow composition from a scalar value.\n\tstatic <T> AuthenticationSteps.Node<T> fromValue(T value);\n}", "des": "Authentication DSL allowing flow composition to create a VaultToken."}
{"index": 13545, "repo": "spring-vault-core-3.0.4", "code": "public static class AuthenticationSteps.HttpRequestBuilder extends Object {\n\t// Configure the result type and build the AuthenticationSteps.HttpRequest object.\n\t<T> AuthenticationSteps.HttpRequest<T> as(Class<T> type);\n\t// Builder entry point to GET from uriTemplate.\n\tstatic AuthenticationSteps.HttpRequestBuilder get(String uriTemplate, String... uriVariables);\n\t// Builder entry point to GET from uri.\n\tstatic AuthenticationSteps.HttpRequestBuilder get(URI uri);\n}", "des": "Builder for AuthenticationSteps.HttpRequest."}
{"index": 13546, "repo": "spring-vault-core-3.0.4", "code": "public static class AuthenticationSteps.Node<T> extends Object {\n\t// Terminal operation requesting a token from Vault by posting the current state to Vaults uriTemplate.\n\tAuthenticationSteps login(String uriTemplate, String... uriVariables);\n\t// Terminal operation resulting in a token by applying a mapping Function to the current state object.\n\tAuthenticationSteps login(Function<? super T,? extends VaultToken> mappingFunction);\n}", "des": "Intermediate authentication step with authentication flow operators represented as node."}
{"index": 13547, "repo": "spring-vault-core-3.0.4", "code": "public static class AuthenticationSteps.Pair<L,R> extends Object {\n\tboolean equals(Object o);\n\t// Type-safe way to get the fist object of this AuthenticationSteps.Pair.\n\tL getLeft();\n\t// Type-safe way to get the second object of this AuthenticationSteps.Pair.\n\tR getRight();\n\t// Create a new AuthenticationSteps.Pair given left and right values.\n\tstatic <L, R> AuthenticationSteps.Pair<L,R> of(L left, R right);\n}", "des": "A tuple of two things."}
{"index": 13548, "repo": "spring-vault-core-3.0.4", "code": "public class AwsEc2Authentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for AWS-EC2 authentication given AwsEc2AuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(AwsEc2AuthenticationOptions options);\n\tprotected static AuthenticationSteps createAuthenticationSteps(AwsEc2AuthenticationOptions options, AtomicReference<char[]> nonce, Supplier<char[]> nonceSupplier);\n\tprotected char[] createNonce();\n}", "des": "AWS-EC2 login implementation."}
{"index": 13549, "repo": "spring-vault-core-3.0.4", "code": "public static class AwsEc2AuthenticationOptions.AwsEc2AuthenticationOptionsBuilder extends Object {\n\t// Build a new AwsEc2AuthenticationOptions instance.\n\tAwsEc2AuthenticationOptions build();\n\t// Configure the Identity Document URI.\n\tAwsEc2AuthenticationOptions.AwsEc2AuthenticationOptionsBuilder identityDocumentUri(URI identityDocumentUri);\n}", "des": "Builder for AwsEc2AuthenticationOptions.AwsEc2AuthenticationOptionsBuilder."}
{"index": 13550, "repo": "spring-vault-core-3.0.4", "code": "public static class AwsEc2AuthenticationOptions.Nonce extends Object {\n\t// Create a new generated AwsEc2AuthenticationOptions.Nonce using UUID.\n\tstatic AwsEc2AuthenticationOptions.Nonce generated();\n\tchar[] getValue();\n\t// Create a wrapped AwsEc2AuthenticationOptions.Nonce given a nonce value.\n\tstatic AwsEc2AuthenticationOptions.Nonce provided(char[] nonce);\n}", "des": "Value object for an authentication nonce."}
{"index": 13551, "repo": "spring-vault-core-3.0.4", "code": "public static class AwsIamAuthenticationOptions.AwsIamAuthenticationOptionsBuilder extends Object {\n\t// Build a new AwsIamAuthenticationOptions instance.\n\tAwsIamAuthenticationOptions build();\n\t// Configure static AWS credentials, required to calculate the signature.\n\tAwsIamAuthenticationOptions.AwsIamAuthenticationOptionsBuilder credentials(software.amazon.awssdk.auth.credentials.AwsCredentials credentials);\n}", "des": "Builder for AwsIamAuthenticationOptions."}
{"index": 13552, "repo": "spring-vault-core-3.0.4", "code": "public class AzureMsiAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for Azure authentication given AzureMsiAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(AzureMsiAuthenticationOptions options);\n\tprotected static AuthenticationSteps createAuthenticationSteps(AzureMsiAuthenticationOptions options, AzureVmEnvironment environment);\n}", "des": "Azure MSI (Managed Service Identity) authentication using Azure as trusted third party."}
{"index": 13553, "repo": "spring-vault-core-3.0.4", "code": "public static class AzureMsiAuthenticationOptions.AzureMsiAuthenticationOptionsBuilder extends Object {\n\t// Build a new AzureMsiAuthenticationOptions instance.\n\tAzureMsiAuthenticationOptions build();\n\t// Configure the managed identity service token URI.\n\tAzureMsiAuthenticationOptions.AzureMsiAuthenticationOptionsBuilder identityTokenServiceUri(URI identityTokenServiceUri);\n}", "des": "Builder for AzureMsiAuthenticationOptions."}
{"index": 13554, "repo": "spring-vault-core-3.0.4", "code": "public class CachingVaultTokenSupplier extends Object implements VaultTokenSupplier, ReactiveSessionManager {\n\t// Return a VaultToken.\n\tMono<VaultToken> getVaultToken();\n\t// Creates a new CachingVaultTokenSupplier given a delegate supplier.\n\tstatic CachingVaultTokenSupplier of(VaultTokenSupplier delegate);\n}", "des": "Default implementation of VaultTokenSupplier caching the VaultToken from a delegate VaultTokenSupplier."}
{"index": 13555, "repo": "spring-vault-core-3.0.4", "code": "public class Certificate extends Object {\n\t// Create a trust store as KeyStore from this Certificate containing the certificate chain.\n\tKeyStore createTrustStore();\n\tString getCertificate();\n\tString getIssuingCaCertificate();\n\tString getSerialNumber();\n\t// Retrieve the certificate as X509Certificate.\n\tX509Certificate getX509Certificate();\n\t// Retrieve the issuing CA certificate as X509Certificate.\n\tX509Certificate getX509IssuerCertificate();\n}", "des": "Value object representing a certificate consisting of the certificate and the issuer certificate."}
{"index": 13556, "repo": "spring-vault-core-3.0.4", "code": "public class CertificateBundle extends Certificate {\n\t// Create a KeyStore from this CertificateBundle containing the private key and certificate chain.\n\tKeyStore createKeyStore(String keyAlias);\n\t// Create a KeyStore from this CertificateBundle containing the private key and certificate chain.\n\tKeyStore createKeyStore(String keyAlias, boolean includeCaChain);\n}", "des": "Value object representing a certificate bundle consisting of a private key, the certificate and the issuer certificate."}
{"index": 13557, "repo": "spring-vault-core-3.0.4", "code": "public class Ciphertext extends Object {\n\tboolean equals(Object o);\n\tString getCiphertext();\n\tVaultTransitContext getContext();\n\t// Factory method to create Ciphertext from the given ciphertext.\n\tstatic Ciphertext of(String ciphertext);\n\t// Create a new Ciphertext object from this ciphertext associated with the given VaultTransitContext.\n\tCiphertext with(VaultTransitContext context);\n}", "des": "Value object representing cipher text with an optional VaultTransitContext."}
{"index": 13558, "repo": "spring-vault-core-3.0.4", "code": "public class ClientCertificateAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for client certificate authentication.\n\tstatic AuthenticationSteps createAuthenticationSteps();\n\t// Creates a AuthenticationSteps for client certificate authentication.\n\tstatic AuthenticationSteps createAuthenticationSteps(ClientCertificateAuthenticationOptions options);\n}", "des": "TLS Client Certificate ClientAuthentication."}
{"index": 13559, "repo": "spring-vault-core-3.0.4", "code": "public static class ClientCertificateAuthenticationOptions.ClientCertificateAuthenticationOptionsBuilder extends Object {\n\t// Build a new ClientCertificateAuthenticationOptions instance.\n\tClientCertificateAuthenticationOptions build();\n\t// Configure the mount path, defaults to azure.\n\tClientCertificateAuthenticationOptions.ClientCertificateAuthenticationOptionsBuilder path(String path);\n}", "des": "Builder for ClientCertificateAuthenticationOptions."}
{"index": 13560, "repo": "spring-vault-core-3.0.4", "code": "@FunctionalInterface public interface CredentialSupplier extends Supplier<String> {\n\t// Retrieve a cached CredentialSupplier that obtains the credential early and reuses the token for each get() call.\n\tdefault CredentialSupplier cached();\n\t// Get a credential to be used with an authentication mechanism.\n\tString get();\n}", "des": "Interface to obtain an arbitrary credential that is uses in ClientAuthentication or AuthenticationSteps methods."}
{"index": 13561, "repo": "spring-vault-core-3.0.4", "code": "public class CubbyholeAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for cubbyhole authentication given CubbyholeAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(CubbyholeAuthenticationOptions options);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "Cubbyhole ClientAuthentication implementation."}
{"index": 13562, "repo": "spring-vault-core-3.0.4", "code": "public static class CubbyholeAuthenticationOptions.CubbyholeAuthenticationOptionsBuilder extends Object {\n\t// Build a new CubbyholeAuthenticationOptions instance.\n\tCubbyholeAuthenticationOptions build();\n\t// Configure the initial VaultToken to access Cubbyhole.\n\tCubbyholeAuthenticationOptions.CubbyholeAuthenticationOptionsBuilder initialToken(VaultToken initialToken);\n}", "des": "Builder for CubbyholeAuthenticationOptions."}
{"index": 13563, "repo": "spring-vault-core-3.0.4", "code": "public class DurationParser extends Object {\n\t// Format a Duration into the Go format representation.\n\tstatic String formatDuration(Duration duration);\n\t// Parse a Go format duration into a Duration object.\n\tstatic Duration parseDuration(String duration);\n}", "des": "Utility to parse a Go format duration into Duration."}
{"index": 13564, "repo": "spring-vault-core-3.0.4", "code": "public class GcpComputeAuthentication extends GcpJwtAuthenticationSupport implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for GCE authentication given GcpComputeAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(GcpComputeAuthenticationOptions options);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "GCP GCE (Google Compute Engine)-based login implementation using GCE's metadata service to create signed JSON Web Token."}
{"index": 13565, "repo": "spring-vault-core-3.0.4", "code": "public static class GcpComputeAuthenticationOptions.GcpComputeAuthenticationOptionsBuilder extends Object {\n\t// Build a new GcpComputeAuthenticationOptions instance.\n\tGcpComputeAuthenticationOptions build();\n\t// Configure the mount path, defaults to aws.\n\tGcpComputeAuthenticationOptions.GcpComputeAuthenticationOptionsBuilder path(String path);\n}", "des": "Builder for GcpComputeAuthenticationOptions."}
{"index": 13566, "repo": "spring-vault-core-3.0.4", "code": "@FunctionalInterface public interface GcpCredentialSupplier extends Supplier<com.google.api.client.googleapis.auth.oauth2.GoogleCredential> {\n\t// Exception-safe helper to get GoogleCredential from getCredential().\n\tdefault com.google.api.client.googleapis.auth.oauth2.GoogleCredential get();\n\t// Get a GoogleCredential for GCP IAM authentication via JWT signing.\n\tcom.google.api.client.googleapis.auth.oauth2.GoogleCredential getCredential();\n}", "des": "Interface to obtain a GoogleCredential for GCP IAM authentication."}
{"index": 13567, "repo": "spring-vault-core-3.0.4", "code": "public static class GcpIamAuthenticationOptions.GcpIamAuthenticationOptionsBuilder extends Object {\n\t// Build a new GcpIamAuthenticationOptions instance.\n\tGcpIamAuthenticationOptions build();\n\t// Configure the Clock used to calculate epoch seconds until the JWT expiration.\n\tGcpIamAuthenticationOptions.GcpIamAuthenticationOptionsBuilder clock(Clock clock);\n}", "des": "Builder for GcpIamAuthenticationOptions."}
{"index": 13568, "repo": "spring-vault-core-3.0.4", "code": "public static class GcpIamCredentialsAuthenticationOptions.GcpIamCredentialsAuthenticationOptionsBuilder extends Object {\n\t// Build a new GcpIamCredentialsAuthenticationOptions instance.\n\tGcpIamCredentialsAuthenticationOptions build();\n\t// Configure the Clock used to calculate epoch seconds until the JWT expiration.\n\tGcpIamCredentialsAuthenticationOptions.GcpIamCredentialsAuthenticationOptionsBuilder clock(Clock clock);\n}", "des": "Builder for GcpIamCredentialsAuthenticationOptions."}
{"index": 13569, "repo": "spring-vault-core-3.0.4", "code": "@FunctionalInterface public interface GoogleCredentialsSupplier extends Supplier<com.google.auth.oauth2.GoogleCredentials> {\n\t// Exception-safe helper to get ServiceAccountCredentials from getCredentials().\n\tdefault com.google.auth.oauth2.GoogleCredentials get();\n\t// Get a GoogleCredentials for GCP IAM credentials authentication via JWT signing.\n\tcom.google.auth.oauth2.GoogleCredentials getCredentials();\n}", "des": "Interface to obtain a ServiceAccountCredentials for GCP IAM credentials authentication."}
{"index": 13570, "repo": "spring-vault-core-3.0.4", "code": "public abstract class JsonMapFlattener extends Object {\n\t// Flatten a hierarchical Map into a flat Map with key names using property dot notation.\n\tstatic Map<String,Object> flatten(Map<String,? extends Object> inputMap);\n\t// Flatten a hierarchical Map into a flat Map with key names using property dot notation.\n\tstatic Map<String,String> flattenToStringMap(Map<String,? extends Object> inputMap);\n}", "des": "Flattens a hierarchical Map of objects into a property Map."}
{"index": 13571, "repo": "spring-vault-core-3.0.4", "code": "public class KeyValueDelegate extends Object {\n\tKeyValueDelegate.MountInfo getMountInfo(String path);\n\t// Read a secret from a key-value backend.\n\tVaultResponse getSecret(String path);\n\t// Determine whether the path belongs to a versioned Key-Value mount.\n\tboolean isVersioned(String path);\n}", "des": "Key-Value utility to retrieve secrets from a versioned key-value backend."}
{"index": 13572, "repo": "spring-vault-core-3.0.4", "code": "public class KubernetesAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for kubernetes authentication given KubernetesAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(KubernetesAuthenticationOptions options);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "Kubernetes implementation of ClientAuthentication."}
{"index": 13573, "repo": "spring-vault-core-3.0.4", "code": "public static class KubernetesAuthenticationOptions.KubernetesAuthenticationOptionsBuilder extends Object {\n\t// Build a new KubernetesAuthenticationOptions instance.\n\tKubernetesAuthenticationOptions build();\n\t// Configure the Supplier to obtain a Kubernetes authentication token.\n\tKubernetesAuthenticationOptions.KubernetesAuthenticationOptionsBuilder jwtSupplier(Supplier<String> jwtSupplier);\n}", "des": "Builder for KubernetesAuthenticationOptions."}
{"index": 13574, "repo": "spring-vault-core-3.0.4", "code": "public class Lease extends Object {\n\tboolean equals(Object o);\n\t// Create a new non-renewable Lease, without a leaseId and specified duration.\n\tstatic Lease fromTimeToLive(Duration leaseDuration);\n\tDuration getLeaseDuration();\n\tString getLeaseId();\n\tboolean hasLeaseId();\n\tboolean isRenewable();\n\t// Factory method to return a non-renewable, zero-duration Lease.\n\tstatic Lease none();\n\t// Create a new Lease.\n\tstatic Lease of(String leaseId, Duration leaseDuration, boolean renewable);\n}", "des": "A lease abstracting the lease Id, duration and its renewability."}
{"index": 13575, "repo": "spring-vault-core-3.0.4", "code": "public class LeaseAwareVaultPropertySource extends EnumerablePropertySource<VaultOperations> {\n\t// Hook method to transform properties using PropertyTransformer.\n\tprotected Map<String,Object> doTransformProperties(Map<String,Object> properties);\n\t// Utility method converting a String/Object map to a flat String/Object map.\n\tprotected Map<String,Object> flattenMap(Map<String,Object> data);\n\tObject getProperty(String name);\n\tString[] getPropertyNames();\n\tRequestedSecret getRequestedSecret();\n}", "des": "PropertySource that requests renewable secrets from SecretLeaseContainer."}
{"index": 13576, "repo": "spring-vault-core-3.0.4", "code": "public enum LeaseEndpoints extends Enum<LeaseEndpoints> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic LeaseEndpoints valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic LeaseEndpoints[] values();\n}", "des": "Version-specific endpoint implementations that use either legacy or sys/leases endpoints."}
{"index": 13577, "repo": "spring-vault-core-3.0.4", "code": "public abstract class LeaseListenerAdapter extends Object implements LeaseListener, LeaseErrorListener {\n\t// Callback for a SecretLeaseEvent.\n\tvoid onLeaseError(SecretLeaseEvent leaseEvent, Exception exception);\n\t// Callback for a SecretLeaseEvent\n\tvoid onLeaseEvent(SecretLeaseEvent leaseEvent);\n}", "des": "Empty listener adapter implementing LeaseListener and LeaseErrorListener."}
{"index": 13578, "repo": "spring-vault-core-3.0.4", "code": "@FunctionalInterface public interface LeaseStrategy {\n\t// Predefined strategy to drop leases on error.\n\tstatic LeaseStrategy dropOnError();\n\t// Predefined strategy to retain leases on error.\n\tstatic LeaseStrategy retainOnError();\n\t// Predefined strategy to retain leases on I/O errors.\n\tstatic LeaseStrategy retainOnIoError();\n\t// Return true to drop the lease after error happened.\n\tboolean shouldDrop(Throwable error);\n}", "des": "Strategy interface to control whether to retain or drop a Lease after a failure."}
{"index": 13579, "repo": "spring-vault-core-3.0.4", "code": "public class LifecycleAwareSessionManager extends LifecycleAwareSessionManagerSupport implements SessionManager, DisposableBean {\n\tvoid destroy();\n\t// Obtain a session token.\n\tVaultToken getSessionToken();\n\t// The token state: Contains the currently valid token that identifies the Vault session.\n\tprotected Optional<LifecycleAwareSessionManager.TokenWrapper> getToken();\n\tprotected boolean isTokenRenewable();\n\tprotected VaultToken login();\n\t// Performs a token refresh.\n\tboolean renewToken();\n}", "des": "Lifecycle-aware Session Manager."}
{"index": 13580, "repo": "spring-vault-core-3.0.4", "code": "public abstract class LifecycleAwareSessionManagerSupport extends AuthenticationEventPublisher {\n\tprotected LifecycleAwareSessionManagerSupport.RefreshTrigger getRefreshTrigger();\n\tprotected TaskScheduler getTaskScheduler();\n\t// Check whether the Token falls below its validity threshold.\n\tprotected boolean isExpired(LoginToken loginToken);\n\t// Returns whether token self-lookup is enabled to augment VaultToken obtained from a ClientAuthentication.\n\tprotected boolean isTokenSelfLookupEnabled();\n}", "des": "Support class to build Lifecycle-aware Session Manager implementations, defining common properties such as the TaskScheduler and LifecycleAwareSessionManagerSupport.RefreshTrigger."}
{"index": 13581, "repo": "spring-vault-core-3.0.4", "code": "public static class LifecycleAwareSessionManagerSupport.FixedTimeoutRefreshTrigger extends Object implements LifecycleAwareSessionManagerSupport.RefreshTrigger {\n\t// Returns the minimum TTL duration to consider a token valid after renewal.\n\tDuration getValidTtlThreshold(LoginToken loginToken);\n\t// Determine the next execution time according to the given trigger context.\n\tDate nextExecutionTime(LoginToken loginToken);\n}", "des": "LifecycleAwareSessionManagerSupport.RefreshTrigger implementation using a fixed timeout to schedule renewal before a LoginToken expires."}
{"index": 13582, "repo": "spring-vault-core-3.0.4", "code": "public static interface LifecycleAwareSessionManagerSupport.RefreshTrigger {\n\t// Returns the minimum TTL duration to consider a token valid after renewal.\n\tDuration getValidTtlThreshold(LoginToken loginToken);\n\t// Determine the next execution time according to the given trigger context.\n\tDate nextExecutionTime(LoginToken loginToken);\n}", "des": "Common interface for trigger objects that determine the next execution time of a refresh task."}
{"index": 13583, "repo": "spring-vault-core-3.0.4", "code": "public class LoginToken extends VaultToken {\n\tstatic LoginToken.LoginTokenBuilder builder();\n\tString getAccessor();\n\tDuration getLeaseDuration();\n\tString getType();\n\tboolean isBatchToken();\n\tboolean isRenewable();\n\tboolean isServiceToken();\n\t// Create a new LoginToken.\n\tstatic LoginToken of(char[] token);\n\t// Create a new LoginToken with a leaseDurationSeconds.\n\tstatic LoginToken of(char[] token, Duration leaseDuration);\n\t// Create a new LoginToken.\n\tstatic LoginToken of(String token);\n}", "des": "Value object for a Vault token obtained by a login method."}
{"index": 13584, "repo": "spring-vault-core-3.0.4", "code": "public static class LoginToken.LoginTokenBuilder extends Object {\n\t// Configure the token accessor.\n\tLoginToken.LoginTokenBuilder accessor(String accessor);\n\t// Build a new LoginToken instance.\n\tLoginToken build();\n\t// Configure the lease duration.\n\tLoginToken.LoginTokenBuilder leaseDuration(Duration leaseDuration);\n\t// Configure whether the token is renewable.\n\tLoginToken.LoginTokenBuilder renewable(boolean renewable);\n\t// Configure the token value.\n\tLoginToken.LoginTokenBuilder token(char[] token);\n}", "des": "Builder for LoginToken."}
{"index": 13585, "repo": "spring-vault-core-3.0.4", "code": "public class MappingVaultConverter extends AbstractVaultConverter {\n\t// Adds custom type information to the given SecretDocument if necessary.\n\tprotected void addCustomTypeKeyIfNecessary(TypeInformation<?> type, Object value, org.springframework.vault.repository.convert.SecretDocumentAccessor accessor);\n\t// Writes the given Collection using the given VaultPersistentProperty information.\n\tprotected List<Object> createCollection(Collection<?> collection, VaultPersistentProperty property);\n}", "des": "VaultConverter that uses a MappingContext to do sophisticated mapping of domain objects to SecretDocument."}
{"index": 13586, "repo": "spring-vault-core-3.0.4", "code": "public class PcfAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for pcf authentication given PcfAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(PcfAuthenticationOptions options);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "PCF implementation of ClientAuthentication."}
{"index": 13587, "repo": "spring-vault-core-3.0.4", "code": "public static class PcfAuthenticationOptions.PcfAuthenticationOptionsBuilder extends Object {\n\t// Build a new PcfAuthenticationOptions instance.\n\tPcfAuthenticationOptions build();\n\t// Configure the Clock.\n\tPcfAuthenticationOptions.PcfAuthenticationOptionsBuilder clock(Clock clock);\n\t// Configure the Supplier to obtain the instance certificate.\n\tPcfAuthenticationOptions.PcfAuthenticationOptionsBuilder instanceCertificate(Supplier<String> instanceCertSupplier);\n}", "des": "Builder for PcfAuthenticationOptions."}
{"index": 13588, "repo": "spring-vault-core-3.0.4", "code": "public class PemObject extends Object {\n\t// Create a PemObject from PEM content that is enclosed with -BEGIN PRIVATE KEY- and -END PRIVATE KEY-.\n\tstatic PemObject fromKey(String content);\n\t// Retrieve a X509Certificate.\n\tX509Certificate getCertificate();\n\t// Retrieve one or more X509Certificates.\n\tList<X509Certificate> getCertificates();\n\t// Retrieve a RSAPrivateCrtKeySpec.\n\tRSAPrivateCrtKeySpec getRSAPrivateKeySpec();\n\t// Retrieve a RSAPrivateCrtKeySpec.\n\tRSAPublicKeySpec getRSAPublicKeySpec();\n}", "des": "Represents a PEM object that is internally decoded to a DER object."}
{"index": 13589, "repo": "spring-vault-core-3.0.4", "code": "public class Plaintext extends Object {\n\tString asString();\n\tString asString(Charset charset);\n\t// Factory method to create an empty Plaintext.\n\tstatic Plaintext empty();\n\tboolean equals(Object o);\n\tVaultTransitContext getContext();\n\tbyte[] getPlaintext();\n\t// Factory method to create Plaintext from a byte sequence.\n\tstatic Plaintext of(byte[] plaintext);\n\t// Factory method to create Plaintext using from a String.\n\tstatic Plaintext of(String plaintext);\n}", "des": "Value object representing plain text with an optional VaultTransitContext."}
{"index": 13590, "repo": "spring-vault-core-3.0.4", "code": "public class Policy extends Object {\n\t// Create an empty Policy without rules.\n\tstatic Policy empty();\n\tboolean equals(Object o);\n\t// Lookup a Policy.Rule by its path.\n\tPolicy.Rule getRule(String path);\n\tSet<Policy.Rule> getRules();\n\t// Create a Policy from one or more rules.\n\tstatic Policy of(Set<Policy.Rule> rules);\n\t// Create a Policy from one or more rules.\n\tstatic Policy of(Policy.Rule... rules);\n}", "des": "Value object representing a Vault policy associated with Policy.Rules."}
{"index": 13591, "repo": "spring-vault-core-3.0.4", "code": "public static enum Policy.BuiltinCapabilities extends Enum<Policy.BuiltinCapabilities> implements Policy.Capability {\n\t// Return all capabilities (CREATE,READ,UPDATE, DELETE, LIST) for regular CRUD operations.\n\tstatic List<Policy.Capability> crud();\n\t// Return all capabilities (CREATE,READ,UPDATE, DELETE, LIST) for regular CRUD operations including SUDO.\n\tstatic List<Policy.Capability> crudAndSudo();\n\t// Find a Policy.Capability by its name.\n\tstatic Policy.Capability find(String value);\n}", "des": "Built-in Vault capabilities."}
{"index": 13592, "repo": "spring-vault-core-3.0.4", "code": "public static class Policy.Rule.RuleBuilder extends Object {\n\t// Configure allowed parameter values given name and values.\n\tPolicy.Rule.RuleBuilder allowedParameter(String name, String... values);\n\t// Build the Policy.Rule object.\n\tPolicy.Rule build();\n\t// Configure capabilities represented as String literals.\n\tPolicy.Rule.RuleBuilder capabilities(String... capabilities);\n}", "des": "Builder for a Policy.Rule."}
{"index": 13593, "repo": "spring-vault-core-3.0.4", "code": "@FunctionalInterface public interface PropertyTransformer {\n\t// Return a composed transformer function that first applies this filter, and then applies the after transformer.\n\tdefault PropertyTransformer andThen(PropertyTransformer after);\n\t// Transform properties by creating a new map using the transformed property set.\n\tMap<String,Object> transformProperties(Map<String,? extends Object> input);\n}", "des": "Strategy interface to transform properties to a new key-value Map in a functional style."}
{"index": 13594, "repo": "spring-vault-core-3.0.4", "code": "public static class PropertyTransformers.KeyPrefixPropertyTransformer extends Object implements PropertyTransformer {\n\t// Create a new PropertyTransformers.KeyPrefixPropertyTransformer that adds a prefix to each key name.\n\tstatic PropertyTransformer forPrefix(String propertyNamePrefix);\n\tString getPropertyNamePrefix();\n\t// Transform properties by creating a new map using the transformed property set.\n\tMap<String,Object> transformProperties(Map<String,? extends Object> input);\n}", "des": "PropertyTransformer that adds a prefix to each key name."}
{"index": 13595, "repo": "spring-vault-core-3.0.4", "code": "public class ReactiveLifecycleAwareSessionManager extends LifecycleAwareSessionManagerSupport implements ReactiveSessionManager, DisposableBean {\n\tvoid destroy();\n\tprotected Mono<Void> doRevoke(Mono<ReactiveLifecycleAwareSessionManager.TokenWrapper> tokenMono);\n\t// Return a VaultToken.\n\tMono<VaultToken> getVaultToken();\n\tprotected boolean isTokenRenewable(VaultToken token);\n\t// Performs a token refresh.\n\tMono<VaultToken> renewToken();\n\t// Revoke and drop the current VaultToken.\n\tMono<Void> revoke();\n}", "des": "Reactive implementation of Lifecycle-aware session manager."}
{"index": 13596, "repo": "spring-vault-core-3.0.4", "code": "public class ReactiveVaultClients extends Object {\n\t// Create a WebClient configured with VaultEndpoint and ClientHttpConnector.\n\tstatic WebClient createWebClient(ReactiveVaultEndpointProvider endpointProvider, ClientHttpConnector connector);\n\t// Create a WebClient configured with VaultEndpoint and ClientHttpConnector.\n\tstatic WebClient createWebClient(VaultEndpointProvider endpointProvider, ClientHttpConnector connector);\n}", "des": "Vault Client factory to create WebClient configured to the needs of accessing Vault."}
{"index": 13597, "repo": "spring-vault-core-3.0.4", "code": "public interface ReactiveVaultOperations {\n\t// Delete a path.\n\tMono<Void> delete(String path);\n\t// Executes a Vault RestOperationsCallback.\n\t<V, T extends org.reactivestreams.Publisher<V>>T doWithSession(Function<WebClient,? extends T> sessionCallback);\n\t// Executes a Vault RestOperationsCallback.\n\t<V, T extends org.reactivestreams.Publisher<V>>T doWithVault(Function<WebClient,? extends T> clientCallback);\n\t// Enumerate keys from a Vault path.\n\tFlux<String> list(String path);\n}", "des": "Interface that specifies a basic set of Vault operations executed on a reactive infrastructure, implemented by ReactiveVaultTemplate."}
{"index": 13598, "repo": "spring-vault-core-3.0.4", "code": "public class ReactiveVaultTemplate extends Object implements ReactiveVaultOperations {\n\t// Delete a path.\n\tMono<Void> delete(String path);\n\t// Create a session-bound WebClient to be used by VaultTemplate for Vault communication given VaultEndpointProvider and ClientHttpConnector for calls that require an authenticated context.\n\tprotected WebClient doCreateSessionWebClient(VaultEndpointProvider endpointProvider, ClientHttpConnector connector);\n}", "des": "This class encapsulates main Vault interaction."}
{"index": 13599, "repo": "spring-vault-core-3.0.4", "code": "public class RequestedSecret extends Object {\n\tboolean equals(Object o);\n\t// Create a RequestedSecret given RequestedSecret.Mode at path.\n\tstatic RequestedSecret from(RequestedSecret.Mode mode, String path);\n\tRequestedSecret.Mode getMode();\n\tString getPath();\n\t// Create a renewable RequestedSecret at path.\n\tstatic RequestedSecret renewable(String path);\n\t// Create a rotating RequestedSecret at path.\n\tstatic RequestedSecret rotating(String path);\n}", "des": "Represents a requested secret from a specific Vault path associated with a lease RequestedSecret.Mode."}
{"index": 13600, "repo": "spring-vault-core-3.0.4", "code": "public class RestTemplateBuilder extends Object {\n\t// Build a new RestTemplate.\n\tRestTemplate build();\n\t// Create a new RestTemplateBuilder.\n\tstatic RestTemplateBuilder builder();\n\t// Create the RestTemplate to use.\n\tprotected RestTemplate createTemplate();\n\t// Add the RestTemplateCustomizers that should be applied to the RestTemplate.\n\tRestTemplateBuilder customizers(RestTemplateCustomizer... customizer);\n}", "des": "Builder that can be used to configure and create a RestTemplate."}
{"index": 13601, "repo": "spring-vault-core-3.0.4", "code": "@FunctionalInterface public interface RestTemplateFactory {\n\t// Create a RestTemplate instance.\n\tdefault RestTemplate create();\n\t// Create a RestTemplate instance by applying customizer to the underlying RestTemplateBuilder.\n\tRestTemplate create(Consumer<RestTemplateBuilder> customizer);\n}", "des": "Factory interface that produces a RestTemplate object."}
{"index": 13602, "repo": "spring-vault-core-3.0.4", "code": "public class SecretDocument extends Object {\n\tboolean equals(Object o);\n\t// Factory method to create a SecretDocument from an id and VaultResponse.\n\tstatic SecretDocument from(String id, VaultResponse vaultResponse);\n\t// Retrieve a value from the secret document by its key.\n\tObject get(String key);\n\tMap<String,Object> getBody();\n\tString getId();\n\t// Return the required Id or throw IllegalStateException if the Id is not set.\n\tString getRequiredId();\n\tInteger getVersion();\n}", "des": "Vault database exchange object containing data before/after it's exchanged with Vault."}
{"index": 13603, "repo": "spring-vault-core-3.0.4", "code": "public class SecretLeaseContainer extends SecretLeaseEventPublisher implements InitializingBean, DisposableBean {\n\t// Add a RequestedSecret.\n\tRequestedSecret addRequestedSecret(RequestedSecret requestedSecret);\n\tvoid afterPropertiesSet();\n\t// Shutdown this SecretLeaseContainer, disable lease renewal and revoke leases.\n\tvoid destroy();\n\t// Retrieve secrets from VaultOperations.\n\tprotected VaultResponseSupport<Map<String,Object>> doGetSecrets(RequestedSecret requestedSecret);\n}", "des": "Event-based container to request secrets from Vault and renew the associated Lease."}
{"index": 13604, "repo": "spring-vault-core-3.0.4", "code": "public class SecretLeaseEventPublisher extends Object implements InitializingBean {\n\t// Add a LeaseErrorListener to the container.\n\tvoid addErrorListener(LeaseErrorListener listener);\n\t// Add a LeaseListener to the container.\n\tvoid addLeaseListener(LeaseListener listener);\n\tvoid afterPropertiesSet();\n\t// Hook method called when a Lease is renewed.\n\tprotected void onAfterLeaseRenewed(RequestedSecret requestedSecret, Lease lease);\n}", "des": "Publisher for SecretLeaseEvents."}
{"index": 13605, "repo": "spring-vault-core-3.0.4", "code": "public static enum SecretLeaseEventPublisher.LoggingErrorListener extends Enum<SecretLeaseEventPublisher.LoggingErrorListener> implements LeaseErrorListener {\n\t// Callback for a SecretLeaseEvent.\n\tvoid onLeaseError(SecretLeaseEvent leaseEvent, Exception exception);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SecretLeaseEventPublisher.LoggingErrorListener valueOf(String name);\n}", "des": "Simple LeaseErrorListener implementation to log errors."}
{"index": 13606, "repo": "spring-vault-core-3.0.4", "code": "public class SignatureValidation extends Object {\n\tboolean equals(Object o);\n\t// Factory method to create a SignatureValidation object representing a failed signature validation.\n\tstatic SignatureValidation invalid();\n\tboolean isValid();\n\t// Factory method to create a SignatureValidation object representing a successfully validated signature.\n\tstatic SignatureValidation valid();\n}", "des": "Value object representing the result of a Signature validation."}
{"index": 13607, "repo": "spring-vault-core-3.0.4", "code": "public class SimpleVaultEndpointProvider extends Object implements VaultEndpointProvider {\n\t// Provides access to VaultEndpoint.\n\tVaultEndpoint getVaultEndpoint();\n\t// Creates a new VaultEndpointProvider given VaultEndpoint.\n\tstatic VaultEndpointProvider of(VaultEndpoint endpoint);\n}", "des": "VaultEndpointProvider returning a static VaultEndpoint."}
{"index": 13608, "repo": "spring-vault-core-3.0.4", "code": "public class SslConfiguration extends Object {\n\t// Create a new SslConfiguration for the given truststore with the default KeyStore type.\n\tstatic SslConfiguration create(Resource keyStore, char[] keyStorePassword, Resource trustStore, char[] trustStorePassword);\n\t// Create a new SslConfiguration for the given key store with the default KeyStore type.\n\tstatic SslConfiguration forKeyStore(Resource keyStore, char[] keyStorePassword);\n}", "des": "SSL configuration."}
{"index": 13609, "repo": "spring-vault-core-3.0.4", "code": "public static class SslConfiguration.KeyConfiguration extends Object {\n\tString getKeyAlias();\n\tchar[] getKeyPassword();\n\t// Create a SslConfiguration.KeyConfiguration to configure a specific key within a KeyStore.\n\tstatic SslConfiguration.KeyConfiguration of(char[] keyPassword, String keyAlias);\n\t// Create an unconfigured, empty SslConfiguration.KeyConfiguration.\n\tstatic SslConfiguration.KeyConfiguration unconfigured();\n}", "des": "Configuration for a key in a keystore."}
{"index": 13610, "repo": "spring-vault-core-3.0.4", "code": "public static class SslConfiguration.KeyStoreConfiguration extends Object {\n\tResource getResource();\n\tchar[] getStorePassword();\n\tString getStoreType();\n\tboolean isPresent();\n\t// Create a new SslConfiguration.KeyStoreConfiguration given Resource.\n\tstatic SslConfiguration.KeyStoreConfiguration of(Resource resource);\n}", "des": "Configuration for a key store/trust store."}
{"index": 13611, "repo": "spring-vault-core-3.0.4", "code": "public class TokenAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for token authentication given VaultToken.\n\tstatic AuthenticationSteps createAuthenticationSteps(VaultToken token, boolean selfLookup);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "Static Token-based ClientAuthentication method."}
{"index": 13612, "repo": "spring-vault-core-3.0.4", "code": "public class TransformCiphertext extends Object {\n\tboolean equals(Object o);\n\tString getCiphertext();\n\tVaultTransformContext getContext();\n\t// Factory method to create TransformCiphertext from the given ciphertext.\n\tstatic TransformCiphertext of(String ciphertext);\n\t// Create a new TransformCiphertext object from this ciphertext associated with the given VaultTransformContext.\n\tTransformCiphertext with(VaultTransformContext context);\n}", "des": "Value object representing cipher text with an optional VaultTransformContext."}
{"index": 13613, "repo": "spring-vault-core-3.0.4", "code": "public class TransformPlaintext extends Object {\n\tString asString();\n\tString asString(Charset charset);\n\t// Factory method to create an empty TransformPlaintext.\n\tstatic TransformPlaintext empty();\n\tboolean equals(Object o);\n\tVaultTransformContext getContext();\n\tbyte[] getPlaintext();\n\t// Factory method to create TransformPlaintext from a byte sequence.\n\tstatic TransformPlaintext of(byte[] plaintext);\n}", "des": "Value object representing plain text with an optional VaultTransformContext."}
{"index": 13614, "repo": "spring-vault-core-3.0.4", "code": "public enum TransitKeyType extends Enum<TransitKeyType> {\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TransitKeyType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TransitKeyType[] values();\n}", "des": "Enumeration to specify the type of the transit key."}
{"index": 13615, "repo": "spring-vault-core-3.0.4", "code": "public enum UnwrappingEndpoints extends Enum<UnwrappingEndpoints> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic UnwrappingEndpoints valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic UnwrappingEndpoints[] values();\n}", "des": "Version-specific endpoint implementations for response unwrapping."}
{"index": 13616, "repo": "spring-vault-core-3.0.4", "code": "public class UsernamePasswordAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for username/password authentication given UsernamePasswordAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(UsernamePasswordAuthenticationOptions options);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "Username and password implementation of ClientAuthentication."}
{"index": 13617, "repo": "spring-vault-core-3.0.4", "code": "public static class UsernamePasswordAuthenticationOptions.UsernamePasswordAuthenticationBuilder extends Object {\n\t// Build a new UsernamePasswordAuthenticationOptions instance.\n\tUsernamePasswordAuthenticationOptions build();\n\t// Configure a password for userpass authentication.\n\tUsernamePasswordAuthenticationOptions.UsernamePasswordAuthenticationBuilder password(CharSequence password);\n}", "des": "Builder for UsernamePasswordAuthenticationOptions."}
{"index": 13618, "repo": "spring-vault-core-3.0.4", "code": "public class VaultClients extends Object {\n\t// Create a ClientHttpRequestInterceptor that associates each request with a X-Vault-Namespace header if the header is not present.\n\tstatic ClientHttpRequestInterceptor createNamespaceInterceptor(String namespace);\n\t// Create a RestTemplate for Vault interaction.\n\tstatic RestTemplate createRestTemplate();\n}", "des": "Vault Client factory to create RestTemplate configured to the needs of accessing Vault."}
{"index": 13619, "repo": "spring-vault-core-3.0.4", "code": "public class VaultEndpoint extends Object implements Serializable {\n\t// Create a secure VaultEndpoint given a host and port using https.\n\tstatic VaultEndpoint create(String host, int port);\n\t// Build the Vault URI based on the given path.\n\tURI createUri(String path);\n\t// Build the Vault URI string based on the given path.\n\tString createUriString(String path);\n\tboolean equals(Object o);\n\t// Create a VaultEndpoint given a URI.\n\tstatic VaultEndpoint from(URI uri);\n\tString getHost();\n\tString getPath();\n}", "des": "Value object that defines Vault connection coordinates."}
{"index": 13620, "repo": "spring-vault-core-3.0.4", "code": "public static class VaultHmacRequest.VaultHmacRequestBuilder extends Object {\n\t// Configure the algorithm to be used for the operation.\n\tVaultHmacRequest.VaultHmacRequestBuilder algorithm(String algorithm);\n\t// Build a new VaultHmacRequest instance.\n\tVaultHmacRequest build();\n\t// Configure the key version to be used for the operation.\n\tVaultHmacRequest.VaultHmacRequestBuilder keyVersion(int version);\n}", "des": "Builder to build a VaultHmacRequest."}
{"index": 13621, "repo": "spring-vault-core-3.0.4", "code": "public interface VaultKeyValueMetadataOperations {\n\t// Permanently delete the key metadata and all version data for the specified key.\n\tvoid delete(String path);\n\t// Retrieve the metadata and versions for the secret at the specified path.\n\tVaultMetadataResponse get(String path);\n\t// Update the secret metadata, or creates new metadata if not present.\n\tvoid put(String path, VaultMetadataRequest body);\n}", "des": "Interface that specifies kv metadata related operations."}
{"index": 13622, "repo": "spring-vault-core-3.0.4", "code": "public interface VaultKeyValueOperations extends VaultKeyValueOperationsSupport {\n\t// Read the secret at path.\n\tVaultResponse get(String path);\n\t// Read the secret at path.\n\t<T> VaultResponseSupport<T> get(String path, Class<T> responseType);\n\t// Update the secret at path without removing the existing secrets.\n\tboolean patch(String path, Map<String,?> patch);\n\t// Write the secret at path.\n\tvoid put(String path, Object body);\n}", "des": "Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend."}
{"index": 13623, "repo": "spring-vault-core-3.0.4", "code": "public interface VaultKeyValueOperationsSupport {\n\t// Delete the secret at path.\n\tvoid delete(String path);\n\t// Read the secret at path.\n\tObject get(String path);\n\tVaultKeyValueOperationsSupport.KeyValueBackend getApiVersion();\n\t// Enumerate keys from a Vault path.\n\tList<String> list(String path);\n}", "des": "Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend."}
{"index": 13624, "repo": "spring-vault-core-3.0.4", "code": "public static enum VaultKeyValueOperationsSupport.KeyValueBackend extends Enum<VaultKeyValueOperationsSupport.KeyValueBackend> {\n\tstatic VaultKeyValueOperationsSupport.KeyValueBackend unversioned();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic VaultKeyValueOperationsSupport.KeyValueBackend valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic VaultKeyValueOperationsSupport.KeyValueBackend[] values();\n}", "des": "Enumeration of supported Key/Value backend API versions."}
{"index": 13625, "repo": "spring-vault-core-3.0.4", "code": "public static class VaultMount.VaultMountBuilder extends Object {\n\t// Build a new VaultMount instance.\n\tVaultMount build();\n\t// Set additional configuration details for this mount.\n\tVaultMount.VaultMountBuilder config(Map<String,Object> config);\n\t// Configure a human readable description of this mount.\n\tVaultMount.VaultMountBuilder description(String description);\n\t// Set mount type specific options for this mount.\n\tVaultMount.VaultMountBuilder options(Map<String,String> options);\n}", "des": "Builder to build a VaultMount."}
{"index": 13626, "repo": "spring-vault-core-3.0.4", "code": "public interface VaultOperations {\n\t// Delete a path.\n\tvoid delete(String path);\n\t// Executes a Vault RestOperationsCallback.\n\t<T> T doWithSession(RestOperationsCallback<T> sessionCallback);\n\t// Executes a Vault RestOperationsCallback.\n\t<T> T doWithVault(RestOperationsCallback<T> clientCallback);\n\t// Enumerate keys from a Vault path.\n\tList<String> list(String path);\n}", "des": "Interface that specifies a basic set of Vault operations, implemented by VaultTemplate."}
{"index": 13627, "repo": "spring-vault-core-3.0.4", "code": "public interface VaultPkiOperations {\n\t// Retrieves the current CRL in raw form.\n\tInputStream getCrl(VaultPkiOperations.Encoding encoding);\n\t// Requests a certificate bundle (private key and certificate) from Vault's PKI backend given a roleName and VaultCertificateRequest.\n\tVaultCertificateResponse issueCertificate(String roleName, VaultCertificateRequest certificateRequest);\n\t// Revokes a certificate using its serial number.\n\tvoid revoke(String serialNumber);\n}", "des": "Interface that specifies PKI backend-related operations."}
{"index": 13628, "repo": "spring-vault-core-3.0.4", "code": "public class VaultPkiTemplate extends Object implements VaultPkiOperations {\n\t// Retrieves the current CRL in raw form.\n\tInputStream getCrl(VaultPkiOperations.Encoding encoding);\n\t// Requests a certificate bundle (private key and certificate) from Vault's PKI backend given a roleName and VaultCertificateRequest.\n\tVaultCertificateResponse issueCertificate(String roleName, VaultCertificateRequest certificateRequest);\n\t// Revokes a certificate using its serial number.\n\tvoid revoke(String serialNumber);\n}", "des": "Default implementation of VaultPkiOperations."}
{"index": 13629, "repo": "spring-vault-core-3.0.4", "code": "public class VaultPropertySource extends EnumerablePropertySource<VaultOperations> {\n\t// Hook method to obtain properties from Vault.\n\tprotected Map<String,Object> doGetProperties(String path);\n\t// Hook method to transform properties using PropertyTransformer.\n\tprotected Map<String,Object> doTransformProperties(Map<String,Object> properties);\n\t// Utility method converting a String/Object map to a flat String/Object map.\n\tprotected Map<String,Object> flattenMap(Map<String,Object> data);\n}", "des": "PropertySource that reads keys and values from a VaultTemplate and path."}
{"index": 13630, "repo": "spring-vault-core-3.0.4", "code": "public class VaultQuery extends Object {\n\t// Compose a new VaultQuery using predicates of this and the other query using logical AND.\n\tVaultQuery and(Predicate<String> predicate);\n\t// Compose a new VaultQuery using predicates of this and the other query using logical AND.\n\tVaultQuery and(VaultQuery other);\n\tPredicate<String> getPredicate();\n\t// Compose a new VaultQuery using predicates of this and the other query using logical OR.\n\tVaultQuery or(VaultQuery other);\n}", "des": "Vault query consisting of a single Predicate."}
{"index": 13631, "repo": "spring-vault-core-3.0.4", "code": "public abstract class VaultResponses extends Object {\n\tstatic VaultException buildException(HttpStatusCode statusCode, String path, String message);\n\t// Build a VaultException given HttpStatusCodeException.\n\tstatic VaultException buildException(HttpStatusCodeException e);\n\t// Build a VaultException given HttpStatusCodeException and request path.\n\tstatic VaultException buildException(HttpStatusCodeException e, String path);\n}", "des": "Utility methods to unwrap Vault responses and build VaultException."}
{"index": 13632, "repo": "spring-vault-core-3.0.4", "code": "public class VaultSignatureVerificationRequest extends Object {\n\tstatic VaultSignatureVerificationRequest.VaultSignatureVerificationRequestBuilder builder();\n\t// Create a new VaultSignatureVerificationRequest given Plaintext and Hmac.\n\tstatic VaultSignatureVerificationRequest create(Plaintext plaintext, Hmac hmac);\n\t// Create a new VaultSignatureVerificationRequest given Plaintext and Signature.\n\tstatic VaultSignatureVerificationRequest create(Plaintext plaintext, Signature signature);\n}", "des": "Request for a signature verification."}
{"index": 13633, "repo": "spring-vault-core-3.0.4", "code": "public static class VaultSignatureVerificationRequest.VaultSignatureVerificationRequestBuilder extends Object {\n\t// Deprecated. since 2.4, use signatureAlgorithm(String) instead.\n\tVaultSignatureVerificationRequest.VaultSignatureVerificationRequestBuilder algorithm(String algorithm);\n\t// Build a new VaultSignatureVerificationRequest instance.\n\tVaultSignatureVerificationRequest build();\n}", "des": "Builder to build a VaultSignatureVerificationRequest."}
{"index": 13634, "repo": "spring-vault-core-3.0.4", "code": "public class VaultSignRequest extends Object {\n\tstatic VaultSignRequest.VaultSignRequestBuilder builder();\n\t// Create a new VaultSignRequest given Plaintext.\n\tstatic VaultSignRequest create(Plaintext input);\n\t// Deprecated. since 2.4, use getSignatureAlgorithm() instead.\n\tString getAlgorithm();\n\tString getHashAlgorithm();\n\tPlaintext getPlaintext();\n\tString getSignatureAlgorithm();\n}", "des": "Request for a signature creation request."}
{"index": 13635, "repo": "spring-vault-core-3.0.4", "code": "public static class VaultSignRequest.VaultSignRequestBuilder extends Object {\n\t// Deprecated. since 2.4, use signatureAlgorithm(String) instead.\n\tVaultSignRequest.VaultSignRequestBuilder algorithm(String algorithm);\n\t// Build a new VaultSignRequest instance.\n\tVaultSignRequest build();\n\t// Configure the hash algorithm to be used for the operation.\n\tVaultSignRequest.VaultSignRequestBuilder hashAlgorithm(String hashAlgorithm);\n}", "des": "Builder to build a VaultSignRequest."}
{"index": 13636, "repo": "spring-vault-core-3.0.4", "code": "public interface VaultSysOperations {\n\t// Mounts an auth backend VaultMount to path.\n\tvoid authMount(String path, VaultMount vaultMount);\n\t// Unmounts the auth backend mount at path.\n\tvoid authUnmount(String path);\n\t// Create or update a Policy.\n\tvoid createOrUpdatePolicy(String name, Policy policy);\n\t// Delete a Policy by its name.\n\tvoid deletePolicy(String name);\n\tMap<String,VaultMount> getAuthMounts();\n\tMap<String,VaultMount> getMounts();\n\t// Read a Policy by its name.\n\tPolicy getPolicy(String name);\n}", "des": "Interface that specifies a basic set of administrative Vault operations."}
{"index": 13637, "repo": "spring-vault-core-3.0.4", "code": "public class VaultSysTemplate extends Object implements VaultSysOperations {\n\t// Mounts an auth backend VaultMount to path.\n\tvoid authMount(String path, VaultMount vaultMount);\n\t// Unmounts the auth backend mount at path.\n\tvoid authUnmount(String path);\n\t// Create or update a Policy.\n\tvoid createOrUpdatePolicy(String name, Policy policy);\n\t// Delete a Policy by its name.\n\tvoid deletePolicy(String name);\n\tMap<String,VaultMount> getAuthMounts();\n\tMap<String,VaultMount> getMounts();\n}", "des": "Default implementation of VaultSysOperations."}
{"index": 13638, "repo": "spring-vault-core-3.0.4", "code": "public class VaultTemplate extends Object implements InitializingBean, VaultOperations, DisposableBean {\n\tvoid afterPropertiesSet();\n\t// Delete a path.\n\tvoid delete(String path);\n\tvoid destroy();\n\t// Create a RestTemplate to be used by VaultTemplate for Vault communication given VaultEndpointProvider and ClientHttpRequestFactory.\n\tprotected RestTemplate doCreateRestTemplate(VaultEndpointProvider endpointProvider, ClientHttpRequestFactory requestFactory);\n}", "des": "This class encapsulates main Vault interaction."}
{"index": 13639, "repo": "spring-vault-core-3.0.4", "code": "public class VaultToken extends Object {\n\tboolean equals(Object o);\n\tString getToken();\n\t// Create a new VaultToken.\n\tstatic VaultToken of(char[] token);\n\t// Create a new VaultToken.\n\tstatic VaultToken of(String token);\n\tchar[] toCharArray();\n}", "des": "Value object for a Vault token."}
{"index": 13640, "repo": "spring-vault-core-3.0.4", "code": "public interface VaultTokenOperations {\n\t// Create a new token.\n\tVaultTokenResponse create();\n\t// Create a new token for the given VaultTokenRequest.\n\tVaultTokenResponse create(VaultTokenRequest request);\n\t// Create a new orphan token.\n\tVaultTokenResponse createOrphan();\n\t// Create a new orphan token for the given VaultTokenRequest.\n\tVaultTokenResponse createOrphan(VaultTokenRequest request);\n\t// Renew a VaultToken.\n\tVaultTokenResponse renew(VaultToken vaultToken);\n}", "des": "Interface that specifies token-related operations."}
{"index": 13641, "repo": "spring-vault-core-3.0.4", "code": "public static class VaultTokenRequest.VaultTokenRequestBuilder extends Object {\n\t// Build a new VaultTokenRequest instance.\n\tVaultTokenRequest build();\n\t// Configure a display name for the token, defaults to \"token\".\n\tVaultTokenRequest.VaultTokenRequestBuilder displayName(String displayName);\n\t// Configure the explicit maximum TTL for the token.\n\tVaultTokenRequest.VaultTokenRequestBuilder explicitMaxTtl(long explicitMaxTtl, TimeUnit timeUnit);\n}", "des": "Builder to build a VaultTokenRequest."}
{"index": 13642, "repo": "spring-vault-core-3.0.4", "code": "public class VaultTokenTemplate extends Object implements VaultTokenOperations {\n\t// Create a new token.\n\tVaultTokenResponse create();\n\t// Create a new token for the given VaultTokenRequest.\n\tVaultTokenResponse create(VaultTokenRequest request);\n\t// Create a new orphan token.\n\tVaultTokenResponse createOrphan();\n\t// Create a new orphan token for the given VaultTokenRequest.\n\tVaultTokenResponse createOrphan(VaultTokenRequest request);\n\t// Renew a VaultToken.\n\tVaultTokenResponse renew(VaultToken vaultToken);\n}", "des": "Default implementation of VaultTokenOperations."}
{"index": 13643, "repo": "spring-vault-core-3.0.4", "code": "public class VaultTransformContext extends Object {\n\tstatic VaultTransformContext.VaultTransformRequestBuilder builder();\n\tstatic VaultTransformContext empty();\n\tboolean equals(Object o);\n\t// Create a VaultTransformContext given transformation bytes.\n\tstatic VaultTransformContext fromTransformation(String transformation);\n\t// Create a VaultTransformContext given tweak String.\n\tstatic VaultTransformContext fromTweak(byte[] tweak);\n\tString getTransformation();\n\tbyte[] getTweak();\n}", "des": "Transform backend encode/decode context object."}
{"index": 13644, "repo": "spring-vault-core-3.0.4", "code": "public static class VaultTransformContext.VaultTransformRequestBuilder extends Object {\n\t// Build a new VaultTransformContext instance.\n\tVaultTransformContext build();\n\t// Configure a transformation to be used with the transform operation.\n\tVaultTransformContext.VaultTransformRequestBuilder transformation(String transformation);\n\t// Configure the tweak value for a transform operation.\n\tVaultTransformContext.VaultTransformRequestBuilder tweak(byte[] tweak);\n}", "des": "Builder for VaultTransformContext."}
{"index": 13645, "repo": "spring-vault-core-3.0.4", "code": "public interface VaultTransformOperations {\n\t// Decode the provided ciphertext using the named role.\n\tdefault String decode(String roleName, String ciphertext);\n\t// Decode the provided ciphertext using the named role.\n\tString decode(String roleName, String ciphertext, VaultTransformContext transformContext);\n}", "des": "Interface that specifies operations using the transform backend."}
{"index": 13646, "repo": "spring-vault-core-3.0.4", "code": "public class VaultTransformTemplate extends Object implements VaultTransformOperations {\n\t// Decode the provided ciphertext using the named role.\n\tString decode(String roleName, String ciphertext, VaultTransformContext transformContext);\n\t// Decode the provided batch of ciphertext using the role given and transformation in each list item.\n\tList<VaultTransformDecodeResult> decode(String roleName, List<TransformCiphertext> batchRequest);\n}", "des": "Default implementation of VaultTransformOperations."}
{"index": 13647, "repo": "spring-vault-core-3.0.4", "code": "public class VaultTransitContext extends Object {\n\tstatic VaultTransitContext.VaultTransitRequestBuilder builder();\n\tstatic VaultTransitContext empty();\n\tboolean equals(Object o);\n\t// Create a VaultTransitContext given context bytes.\n\tstatic VaultTransitContext fromContext(byte[] context);\n\t// Create a VaultTransitContext given nonce bytes.\n\tstatic VaultTransitContext fromNonce(byte[] nonce);\n\tbyte[] getContext();\n\tint getKeyVersion();\n\tbyte[] getNonce();\n}", "des": "Transit backend encryption/decryption/rewrapping context."}
{"index": 13648, "repo": "spring-vault-core-3.0.4", "code": "public static class VaultTransitContext.VaultTransitRequestBuilder extends Object {\n\t// Build a new VaultTransitContext instance.\n\tVaultTransitContext build();\n\t// Configure a key derivation context for the transit operation.\n\tVaultTransitContext.VaultTransitRequestBuilder context(byte[] context);\n\t// Configure the key version to use.\n\tVaultTransitContext.VaultTransitRequestBuilder keyVersion(int keyVersion);\n}", "des": "Builder for VaultTransitContext."}
{"index": 13649, "repo": "spring-vault-core-3.0.4", "code": "public static class VaultTransitKeyConfiguration.VaultTransitKeyConfigurationBuilder extends Object {\n\t// Build a new VaultTransitKeyConfiguration instance.\n\tVaultTransitKeyConfiguration build();\n\t// Set whether key deletion is allowed.\n\tVaultTransitKeyConfiguration.VaultTransitKeyConfigurationBuilder deletionAllowed(boolean deletionAllowed);\n}", "des": "Builder for VaultTransitKeyConfiguration."}
{"index": 13650, "repo": "spring-vault-core-3.0.4", "code": "public static class VaultTransitKeyCreationRequest.VaultTransitKeyCreationRequestBuilder extends Object {\n\t// Configure if the key supports plaintext backups.\n\tVaultTransitKeyCreationRequest.VaultTransitKeyCreationRequestBuilder allowPlaintextBackup(boolean allowPlaintextBackup);\n\t// Build a new VaultTransitKeyCreationRequest instance.\n\tVaultTransitKeyCreationRequest build();\n}", "des": "Builder for VaultTransitKeyCreationRequest."}
{"index": 13651, "repo": "spring-vault-core-3.0.4", "code": "public interface VaultTransitOperations {\n\t// Create a new named encryption key given a name.\n\tvoid configureKey(String keyName, VaultTransitKeyConfiguration keyConfiguration);\n\t// Create a new named encryption key given a name.\n\tvoid createKey(String keyName);\n\t// Create a new named encryption key given a name and VaultTransitKeyCreationRequest.\n\tvoid createKey(String keyName, VaultTransitKeyCreationRequest createKeyRequest);\n}", "des": "Interface that specifies operations using the transit backend."}
{"index": 13652, "repo": "spring-vault-core-3.0.4", "code": "public class VaultTransitTemplate extends Object implements VaultTransitOperations {\n\t// Create a new named encryption key given a name.\n\tvoid configureKey(String keyName, VaultTransitKeyConfiguration keyConfiguration);\n\t// Create a new named encryption key given a name.\n\tvoid createKey(String keyName);\n\t// Create a new named encryption key given a name and VaultTransitKeyCreationRequest.\n\tvoid createKey(String keyName, VaultTransitKeyCreationRequest createKeyRequest);\n}", "des": "Default implementation of VaultTransitOperations."}
{"index": 13653, "repo": "spring-vault-core-3.0.4", "code": "public interface VaultVersionedKeyValueOperations extends VaultKeyValueOperationsSupport {\n\t// Delete one or more versions of the secret at path.\n\tvoid delete(String path, Versioned.Version... versionsToDelete);\n\t// Permanently remove the specified versions of the secret at path.\n\tvoid destroy(String path, Versioned.Version... versionsToDelete);\n\t// Read the most recent secret at path.\n\tdefault Versioned<Map<String,Object>> get(String path);\n}", "des": "Interface that specifies a basic set of Vault operations using Vault's versioned Key/Value (kv version 2) secret backend."}
{"index": 13654, "repo": "spring-vault-core-3.0.4", "code": "public class VaultVersionedKeyValueTemplate extends Object implements VaultVersionedKeyValueOperations {\n\t// Delete the secret at path.\n\tvoid delete(String path);\n\t// Delete one or more versions of the secret at path.\n\tvoid delete(String path, Versioned.Version... versionsToDelete);\n\t// Permanently remove the specified versions of the secret at path.\n\tvoid destroy(String path, Versioned.Version... versionsToDelete);\n}", "des": "Default implementation of VaultVersionedKeyValueOperations."}
{"index": 13655, "repo": "spring-vault-core-3.0.4", "code": "public interface VaultWrappingOperations {\n\t// Looks up metadata for the given token containing a wrapped response.\n\tWrappedMetadata lookup(VaultToken token);\n\t// Read a wrapped secret.\n\tVaultResponse read(VaultToken token);\n\t// Read a wrapped secret of type responseType.\n\t<T> VaultResponseSupport<T> read(VaultToken token, Class<T> responseType);\n\t// Rewraps a response-wrapped token.\n\tWrappedMetadata rewrap(VaultToken token);\n}", "des": "Interface that specifies wrapping-related operations."}
{"index": 13656, "repo": "spring-vault-core-3.0.4", "code": "public class Versioned<T> extends Object {\n\t// Create a unversioned given secret.\n\tstatic <T> Versioned<T> create(T secret);\n\t// Create a versioned secret object given secret and Versioned.Metadata.\n\tstatic <T> Versioned<T> create(T secret, Versioned.Metadata metadata);\n\t// Create a versioned secret object given secret and Versioned.Version.\n\tstatic <T> Versioned<T> create(T secret, Versioned.Version version);\n\tboolean equals(Object o);\n\tT getData();\n\tVersioned.Metadata getMetadata();\n}", "des": "Value object representing versioned secrets along Versioned.Version metadata."}
{"index": 13657, "repo": "spring-vault-core-3.0.4", "code": "public static class Versioned.Metadata.MetadataBuilder extends Object {\n\t// Build the Versioned.Metadata object.\n\tVersioned.Metadata build();\n\t// Configure a created at Instant.\n\tVersioned.Metadata.MetadataBuilder createdAt(Instant createdAt);\n\t// Configure a deleted at Instant.\n\tVersioned.Metadata.MetadataBuilder deletedAt(Instant deletedAt);\n\t// Configure the version was destroyed.\n\tVersioned.Metadata.MetadataBuilder destroyed();\n}", "des": "Builder for Versioned.Metadata objects."}
{"index": 13658, "repo": "spring-vault-core-3.0.4", "code": "public class WebClientBuilder extends Object {\n\t// Build a new WebClient.\n\tWebClient build();\n\t// Create a new WebClientBuilder.\n\tstatic WebClientBuilder builder();\n\t// Create the WebClient.Builder to use.\n\tprotected WebClient.Builder createWebClientBuilder();\n\t// Add the WebClientCustomizers that should be applied to the WebClient.\n\tWebClientBuilder customizers(WebClientCustomizer... customizer);\n}", "des": "Builder that can be used to configure and create a WebClient."}
{"index": 13659, "repo": "spring-vault-core-3.0.4", "code": "@FunctionalInterface public interface WebClientFactory {\n\t// Create a WebClient instance.\n\tdefault WebClient create();\n\t// Create a WebClient instance by applying customizer to the underlying WebClientBuilder.\n\tWebClient create(Consumer<WebClientBuilder> customizer);\n}", "des": "Factory interface that produces a WebClient object."}
{"index": 13660, "repo": "spring-data-elasticsearch-5.1.2", "code": "public abstract class AbstractElasticsearchTemplate extends Object implements ElasticsearchOperations, ApplicationContextAware {\n\tprotected <T> UpdateQuery buildUpdateQueryByEntity(T entity);\n\t// Bulk index all objects.\n\tList<IndexedObjectInformation> bulkIndex(List<IndexQuery> queries, Class<?> clazz);\n\t// Bulk index all objects.\n\tList<IndexedObjectInformation> bulkIndex(List<IndexQuery> queries, BulkOptions bulkOptions, Class<?> clazz);\n}", "des": "This class contains methods that are common to different implementations of the ElasticsearchOperations interface that use different clients, like RestHighLevelClient and the next Java client from Elasticsearch or some external implementation that might use a different client."}
{"index": 13661, "repo": "spring-data-elasticsearch-5.1.2", "code": "public abstract class AbstractIndexTemplate extends Object implements IndexOperations {\n\tprotected Class<?> checkForBoundClass();\n\t// Create an index.\n\tboolean create();\n\t// Create an index for given settings.\n\tboolean create(Map<String,Object> settings);\n\t// Create an index for given settings and mapping.\n\tboolean create(Map<String,Object> settings, Document mapping);\n\t// Creates the index mapping for the entity this IndexOperations is bound to.\n\tDocument createMapping();\n}", "des": "Base implementation of IndexOperations common to Transport and Rest based Implementations of IndexOperations."}
{"index": 13662, "repo": "spring-data-elasticsearch-5.1.2", "code": "public abstract class AbstractReactiveElasticsearchTemplate extends Object implements ReactiveElasticsearchOperations, ApplicationContextAware {\n\t// Perform an aggregation specified by the given query.\n\treactor.core.publisher.Flux<? extends AggregationContainer<?>> aggregate(Query query, Class<?> entityType);\n\t// Closes a point in time\n\treactor.core.publisher.Mono<Boolean> closePointInTime(String pit);\n}", "des": "Base class keeping common code for implementations of the ReactiveElasticsearchOperations interface independent of the used client."}
{"index": 13663, "repo": "spring-data-elasticsearch-5.1.2", "code": "public static record AbstractReactiveElasticsearchTemplate.IndexResponseMetaData(String id, String index, long seqNo, long primaryTerm, long version) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the id record component.\n\tString id();\n\t// Returns the value of the index record component.\n\tString index();\n\t// Returns the value of the primaryTerm record component.\n\tlong primaryTerm();\n}", "des": "Value class to capture client independent information from a response to an index request."}
{"index": 13664, "repo": "spring-data-elasticsearch-5.1.2", "code": "protected static interface AbstractReactiveElasticsearchTemplate.SearchDocumentCallback<T> {\n\t// converts a SearchDocument to an entity\n\treactor.core.publisher.Mono<T> toEntity(SearchDocument searchDocument);\n\t// converts a SearchDocument into a SearchHit\n\treactor.core.publisher.Mono<SearchHit<T>> toSearchHit(SearchDocument searchDocument);\n}", "des": "Callback to convert a SearchDocument into different other classes"}
{"index": 13665, "repo": "spring-data-elasticsearch-5.1.2", "code": "public record ActiveShardCount(int value) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the value record component.\n\tint value();\n}", "des": "Class corresponding to the Elasticsearch class, but in the org.springframework.data.elasticsearch package"}
{"index": 13666, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class BaseQuery extends Object implements Query {\n\t// Add fields to be added as part of search request\n\tvoid addFields(String... fields);\n\t// Adds a RescorerQuery.\n\tvoid addRescorerQuery(RescorerQuery rescorerQuery);\n\t// Adds a runtime field to the query.\n\tvoid addRuntimeField(RuntimeField runtimeField);\n\t// Add Sort to query\n\tfinal <T extends Query>T addSort(Sort sort);\n\t// Add source filter to be added as part of search request\n\tvoid addSourceFilter(SourceFilter sourceFilter);\n}", "des": "BaseQuery"}
{"index": 13667, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class BulkOptions extends Object {\n\t// Create a new BulkOptions.BulkOptionsBuilder to build BulkOptions.\n\tstatic BulkOptions.BulkOptionsBuilder builder();\n\t// Return default BulkOptions.\n\tstatic BulkOptions defaultOptions();\n\tString getPipeline();\n\tRefreshPolicy getRefreshPolicy();\n\tString getRoutingId();\n\tDuration getTimeout();\n\tActiveShardCount getWaitForActiveShards();\n}", "des": "Options that may be passed to an DocumentOperations.bulkIndex(List, BulkOptions, IndexCoordinates) or DocumentOperations.bulkUpdate(List, BulkOptions, IndexCoordinates) call."}
{"index": 13668, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class ByQueryResponse extends Object {\n\t// Create a new ByQueryResponse.ByQueryResponseBuilder to build ByQueryResponse\n\tstatic ByQueryResponse.ByQueryResponseBuilder builder();\n\t// The number of scroll responses pulled back by the update by query.\n\tint getBatches();\n\t// The number of times that the request had retry bulk actions.\n\tlong getBulkRetries();\n\t// The number of documents that were successfully deleted.\n\tlong getDeleted();\n}", "des": "Response of an update by query operation."}
{"index": 13669, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface ClientConfiguration {\n\t// Creates a new ClientConfigurationBuilder instance.\n\tstatic ClientConfiguration.ClientConfigurationBuilderWithRequiredEndpoint builder();\n\t// Creates a new ClientConfiguration instance configured to a single host given hostAndPort.\n\tstatic ClientConfiguration create(String hostAndPort);\n\t// Creates a new ClientConfiguration instance configured to a single host given InetSocketAddress.\n\tstatic ClientConfiguration create(InetSocketAddress socketAddress);\n}", "des": "Configuration interface exposing common client configuration properties for Elasticsearch clients."}
{"index": 13670, "repo": "spring-data-elasticsearch-5.1.2", "code": "public enum CompletionContextType extends Enum<CompletionContextType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CompletionContextType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CompletionContextType[] values();\n}", "des": "Based on reference doc - https://www.elastic.co/guide/en/elasticsearch/reference/current/suggester-context.html"}
{"index": 13671, "repo": "spring-data-elasticsearch-5.1.2", "code": "public record ComponentTemplateRequestData(Settings settings, Document mapping, AliasActions aliasActions, Boolean allowAutoCreate) extends Record {\n\t// Returns the value of the aliasActions record component.\n\tAliasActions aliasActions();\n\t// Returns the value of the allowAutoCreate record component.\n\tBoolean allowAutoCreate();\n\tstatic ComponentTemplateRequestData.Builder builder();\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n}", "des": "A component template to be used in a component template request."}
{"index": 13672, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class Criteria extends Object {\n\tstatic Criteria and();\n\t// Chain a new and- Criteria\n\tCriteria and(String fieldName);\n\t// Chain a Criteria to this object.\n\tCriteria and(Criteria criteria);\n\t// Chain an array of Criteria to this object.\n\tCriteria and(Criteria... criterias);\n\t// Chain a new and-Criteria\n\tCriteria and(Field field);\n\t// Adds a OperationKey.BETWEEN entry to the queryCriteriaEntries.\n\tCriteria between(Object lowerBound, Object upperBound);\n}", "des": "Criteria is the central class when constructing queries."}
{"index": 13673, "repo": "spring-data-elasticsearch-5.1.2", "code": "public static enum Criteria.Operator extends Enum<Criteria.Operator> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Criteria.Operator valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Criteria.Operator[] values();\n}", "des": "Operator to join the entries of the criteria chain"}
{"index": 13674, "repo": "spring-data-elasticsearch-5.1.2", "code": "public enum DateFormat extends Enum<DateFormat> {\n\tString getPattern();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DateFormat valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DateFormat[] values();\n}", "des": "Values based on Elasticsearch reference documentation."}
{"index": 13675, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface DateFormatter {\n\t// Formats a TemporalAccessor into a String.\n\tString format(TemporalAccessor accessor);\n\t// Parses a String into a TemporalAccessor.\n\t<T extends TemporalAccessor>T parse(String input, Class<T> type);\n}", "des": "Interface to convert from and to TemporalAccessors."}
{"index": 13676, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class DefaultRoutingResolver extends Object implements RoutingResolver {\n\t// returns the routing when no entity is available.\n\tString getRouting();\n\t// Returns the routing for a bean.\n\t<T> String getRouting(T bean);\n}", "des": "Default implementation of the RoutingResolver interface."}
{"index": 13677, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface Document extends StringObjectMap<Document> {\n\t// Create a new mutable Document.\n\tstatic Document create();\n\t// Create a Document from a Map containing key-value pairs and sub-documents.\n\tstatic Document from(Map<String,? extends Object> map);\n\t// initializes this object from the given JSON String.\n\tdefault Document fromJson(String json);\n\t// Retrieve the identifier associated with this Document.\n\tdefault String getId();\n\tdefault String getIndex();\n}", "des": "A representation of a Elasticsearch document as extended Map."}
{"index": 13678, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface DocumentOperations {\n\t// Bulk index all objects.\n\tdefault List<IndexedObjectInformation> bulkIndex(List<IndexQuery> queries, Class<?> clazz);\n\t// Bulk index all objects.\n\tdefault List<IndexedObjectInformation> bulkIndex(List<IndexQuery> queries, IndexCoordinates index);\n\t// Bulk index all objects.\n\tList<IndexedObjectInformation> bulkIndex(List<IndexQuery> queries, BulkOptions bulkOptions, Class<?> clazz);\n}", "des": "The operations for the Elasticsearch Document APIs."}
{"index": 13679, "repo": "spring-data-elasticsearch-5.1.2", "code": "public record DocValueField(String field, String format) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the field record component.\n\tString field();\n\t// Returns the value of the format record component.\n\tString format();\n}", "des": "Record defining a docvalue_field to be used in a query."}
{"index": 13680, "repo": "spring-data-elasticsearch-5.1.2", "code": "public enum Dynamic extends Enum<Dynamic> {\n\tString getMappedName();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Dynamic valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Dynamic[] values();\n}", "des": "Values for the dynamic mapping parameter."}
{"index": 13681, "repo": "spring-data-elasticsearch-5.1.2", "code": "public final class ElasticsearchClients extends Object {\n\t// Creates a new imperative ElasticsearchClient\n\tstatic co.elastic.clients.elasticsearch.ElasticsearchClient createImperative(org.elasticsearch.client.RestClient restClient);\n\t// Creates a new imperative ElasticsearchClient\n\tstatic co.elastic.clients.elasticsearch.ElasticsearchClient createImperative(org.elasticsearch.client.RestClient restClient, co.elastic.clients.transport.TransportOptions transportOptions);\n}", "des": "Utility class to create the different Elasticsearch clients"}
{"index": 13682, "repo": "spring-data-elasticsearch-5.1.2", "code": "public abstract class ElasticsearchConfiguration extends ElasticsearchConfigurationSupport {\n\t// Must be implemented by deriving classes to provide the ClientConfiguration.\n\tabstract ClientConfiguration clientConfiguration();\n\t// Provides the ElasticsearchClient to be used.\n\tco.elastic.clients.elasticsearch.ElasticsearchClient elasticsearchClient(org.elasticsearch.client.RestClient restClient);\n}", "des": "Base class for a @Configuration class to set up the Elasticsearch connection using the Elasticsearch Client."}
{"index": 13683, "repo": "spring-data-elasticsearch-5.1.2", "code": "public final class ElasticsearchDateConverter extends Object {\n\t// Formats the given TemporalAccessor into a String.\n\tString format(TemporalAccessor accessor);\n\t// Formats the given TemporalAccessor int a String\n\tString format(Date date);\n\t// Creates an ElasticsearchDateConverter for the given pattern.\n\tstatic ElasticsearchDateConverter of(String pattern);\n\t// Creates an ElasticsearchDateConverter for the given DateFormat.\n\tstatic ElasticsearchDateConverter of(DateFormat dateFormat);\n}", "des": "Provides Converter instances to convert to and from Dates in the different date and time formats that elasticsearch understands."}
{"index": 13684, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface ElasticsearchOperations extends DocumentOperations, SearchOperations, ScriptOperations {\n\t// return a ClusterOperations instance that uses the same client communication setup as this ElasticsearchOperations instance.\n\tClusterOperations cluster();\n\t// Converts an idValue to a String representation.\n\tdefault String convertId(Object idValue);\n\tElasticsearchConverter getElasticsearchConverter();\n}", "des": "ElasticsearchOperations."}
{"index": 13685, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface ElasticsearchPersistentEntity<T> extends PersistentEntity<T,ElasticsearchPersistentProperty> {\n\tDynamic dynamic();\n\t// returns the default settings for an index.\n\tSettings getDefaultSettings();\n\tFieldNamingStrategy getFieldNamingStrategy();\n\tIndexCoordinates getIndexCoordinates();\n\tElasticsearchPersistentProperty getIndexedIndexNameProperty();\n\tString getIndexStoreType();\n}", "des": "ElasticsearchPersistentEntity"}
{"index": 13686, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface ElasticsearchPersistentProperty extends PersistentProperty<ElasticsearchPersistentProperty> {\n\t// calls PersistentProperty.getActualType() but returns null when an exception is thrown\n\tdefault Class<?> getActualTypeOrNull();\n\t// Returns the name to be used to store the property in the document.\n\tString getFieldName();\n\tPropertyValueConverter getPropertyValueConverter();\n\tboolean hasExplicitFieldName();\n\tboolean hasPropertyValueConverter();\n\tboolean isCompletionProperty();\n}", "des": "ElasticsearchPersistentProperty"}
{"index": 13687, "repo": "spring-data-elasticsearch-5.1.2", "code": "public static enum ElasticsearchPersistentProperty.QueryPropertyToFieldNameConverter extends Enum<ElasticsearchPersistentProperty.QueryPropertyToFieldNameConverter> implements Converter<ElasticsearchPersistentProperty,String> {\n\tString convert(ElasticsearchPersistentProperty source);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ElasticsearchPersistentProperty.QueryPropertyToFieldNameConverter valueOf(String name);\n}", "des": "when building CriteriaQueries use the name; the fieldname is set later with ElasticsearchConverter."}
{"index": 13688, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class ElasticsearchTemplate extends AbstractElasticsearchTemplate {\n\t// Bulk update all objects.\n\tvoid bulkUpdate(List<UpdateQuery> queries, BulkOptions bulkOptions, IndexCoordinates index);\n\t// extract the list of IndexedObjectInformation from a BulkResponse.\n\tprotected List<IndexedObjectInformation> checkForBulkOperationFailure(co.elastic.clients.elasticsearch.core.BulkResponse bulkResponse);\n\t// Closes a point in time\n\tBoolean closePointInTime(String pit);\n}", "des": "Implementation of ElasticsearchOperations using the new Elasticsearch client."}
{"index": 13689, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface ElasticsearchTypeMapper extends TypeMapper<Map<String,Object>> {\n\tdefault boolean containsTypeInformation(Map<String,Object> source);\n\t// Creates a new default ElasticsearchTypeMapper.\n\tstatic ElasticsearchTypeMapper create(MappingContext<? extends ElasticsearchPersistentEntity<?>,ElasticsearchPersistentProperty> mappingContext);\n\tString getTypeKey();\n\t// Returns whether the given key is the type key.\n\tboolean isTypeKey(String key);\n}", "des": "Elasticsearch specific TypeMapper definition."}
{"index": 13690, "repo": "spring-data-elasticsearch-5.1.2", "code": "public static interface EntityOperations.AdaptableEntity<T> {\n\t// Returns the underlying bean.\n\tT getBean();\n\t// Returns the identifier of the entity.\n\tObject getId();\n\t// Returns the ElasticsearchPersistentEntity associated with this entity.\n\tElasticsearchPersistentEntity<?> getPersistentEntity();\n\t// Returns the required ElasticsearchPersistentEntity.\n\tdefault ElasticsearchPersistentEntity<?> getRequiredPersistentEntity();\n\t// returns the routing for the entity if it is available\n\tString getRouting();\n}", "des": "Information and commands on an entity."}
{"index": 13691, "repo": "spring-data-elasticsearch-5.1.2", "code": "@WritingConverter public static enum GeoConverters.GeoPointToMapConverter extends Enum<GeoConverters.GeoPointToMapConverter> implements Converter<GeoPoint,Map<String,Object>> {\n\tMap<String,Object> convert(GeoPoint source);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic GeoConverters.GeoPointToMapConverter valueOf(String name);\n}", "des": "Converter to write a GeoPoint to Map using lat/long properties."}
{"index": 13692, "repo": "spring-data-elasticsearch-5.1.2", "code": "@ReadingConverter public static enum GeoConverters.MapToPointConverter extends Enum<GeoConverters.MapToPointConverter> implements Converter<Map<String,Object>,Point> {\n\tPoint convert(Map<String,Object> source);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic GeoConverters.MapToPointConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic GeoConverters.MapToPointConverter[] values();\n}", "des": "Converter to read a Point from Map using lat/long properties."}
{"index": 13693, "repo": "spring-data-elasticsearch-5.1.2", "code": "@WritingConverter public static enum GeoConverters.PointToMapConverter extends Enum<GeoConverters.PointToMapConverter> implements Converter<Point,Map<String,Object>> {\n\tMap<String,Object> convert(Point source);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic GeoConverters.PointToMapConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic GeoConverters.PointToMapConverter[] values();\n}", "des": "Converter to write a Point to Map using lat/long properties."}
{"index": 13694, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface GeoJson<T extends Iterable<?>> {\n\t// The value of the coordinates member is always an Iterable.\n\tT getCoordinates();\n\t// String value representing the type of the GeoJson object.\n\tString getType();\n\tstatic GeoJson<?> of(String json);\n\tdefault String toJson();\n}", "des": "Interface definition for structures defined in GeoJSON format. copied from Spring Data Mongodb"}
{"index": 13695, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class GeoJsonGeometryCollection extends Object implements GeoJson<Iterable<GeoJson<?>>> {\n\tboolean equals(Object o);\n\t// The value of the coordinates member is always an Iterable.\n\tIterable<GeoJson<?>> getCoordinates();\n\tList<GeoJson<?>> getGeometries();\n\t// String value representing the type of the GeoJson object.\n\tString getType();\n\t// Creates a new GeoJsonGeometryCollection for the given GeoJson instances.\n\tstatic GeoJsonGeometryCollection of(List<GeoJson<?>> geometries);\n}", "des": "Defines a GeoJsonGeometryCollection that consists of a List of GeoJson objects. Copied from Spring Data Mongodb"}
{"index": 13696, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class GeoJsonLineString extends Object implements GeoJson<Iterable<Point>> {\n\tboolean equals(Object o);\n\t// The value of the coordinates member is always an Iterable.\n\tList<Point> getCoordinates();\n\t// String value representing the type of the GeoJson object.\n\tString getType();\n\t// Creates a new GeoJsonLineString for the given Points.\n\tstatic GeoJsonLineString of(List<Point> points);\n}", "des": "GeoJsonLineString is defined as list of Points. Copied from Spring Data Mongodb"}
{"index": 13697, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class GeoJsonMultiLineString extends Object implements GeoJson<Iterable<GeoJsonLineString>> {\n\tboolean equals(Object o);\n\t// The value of the coordinates member is always an Iterable.\n\tList<GeoJsonLineString> getCoordinates();\n\t// String value representing the type of the GeoJson object.\n\tString getType();\n\t// Creates new GeoJsonMultiLineString for the given GeoJsonLineStrings.\n\tstatic GeoJsonMultiLineString of(List<GeoJsonLineString> lines);\n}", "des": "GeoJsonMultiLineString is defined as list of GeoJsonLineStrings."}
{"index": 13698, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class GeoJsonMultiPoint extends Object implements GeoJson<Iterable<Point>> {\n\tboolean equals(Object o);\n\t// The value of the coordinates member is always an Iterable.\n\tList<Point> getCoordinates();\n\t// String value representing the type of the GeoJson object.\n\tString getType();\n\t// Creates a new GeoJsonMultiPoint for the given Points.\n\tstatic GeoJsonMultiPoint of(List<Point> points);\n}", "des": "GeoJsonMultiPoint is defined as list of Points. Copied from Spring Data Mongodb"}
{"index": 13699, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class GeoJsonMultiPolygon extends Object implements GeoJson<Iterable<GeoJsonPolygon>> {\n\tboolean equals(Object o);\n\t// The value of the coordinates member is always an Iterable.\n\tList<GeoJsonPolygon> getCoordinates();\n\t// String value representing the type of the GeoJson object.\n\tString getType();\n\t// Creates a new GeoJsonMultiPolygon for the given GeoJsonPolygons.\n\tstatic GeoJsonMultiPolygon of(List<GeoJsonPolygon> polygons);\n}", "des": "GeoJsonMultiPolygon is defined as a list of GeoJsonPolygons. Copied fro Spring Data Mongodb."}
{"index": 13700, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class GeoJsonPoint extends Object implements GeoJson<List<Double>> {\n\tboolean equals(Object o);\n\t// The value of the coordinates member is always an Iterable.\n\tList<Double> getCoordinates();\n\t// String value representing the type of the GeoJson object.\n\tString getType();\n\tdouble getX();\n\tdouble getY();\n\t// Creates GeoJsonPoint for given coordinates.\n\tstatic GeoJsonPoint of(double x, double y);\n\t// Creates GeoJsonPoint for given GeoPoint.\n\tstatic GeoJsonPoint of(GeoPoint geoPoint);\n}", "des": "GeoJson representation of Point. Copied from Spring Data Mongodb, not derived from Point as this conflicts with the already existing converter for Point in GeoConverters."}
{"index": 13701, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class GeoJsonPolygon extends Object implements GeoJson<Iterable<GeoJsonLineString>> {\n\tboolean equals(Object o);\n\t// The value of the coordinates member is always an Iterable.\n\tList<GeoJsonLineString> getCoordinates();\n\t// String value representing the type of the GeoJson object.\n\tString getType();\n\t// Creates new GeoJsonPolygon from the given Points.\n\tstatic GeoJsonPolygon of(List<Point> points);\n}", "des": "GeoJson representation of a polygon."}
{"index": 13702, "repo": "spring-data-elasticsearch-5.1.2", "code": "public static enum HostProvider.Verification extends Enum<HostProvider.Verification> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic HostProvider.Verification valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic HostProvider.Verification[] values();\n}", "des": "HostProvider.Verification allows to influence the lookup strategy for active hosts."}
{"index": 13703, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class HttpHeaders extends Object implements MultiValueMap<String,String> {\n\tvoid add(String key, String value);\n\tvoid addAll(String key, List<? extends String> values);\n\tvoid addAll(MultiValueMap<String,String> values);\n\tvoid clear();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\t// Encode a username and password to be used in basic authorization.\n\tstatic String encodeBasicAuth(String username, String password);\n}", "des": "A simple class implementing HTTP headers as a MultiValueMap."}
{"index": 13704, "repo": "spring-data-elasticsearch-5.1.2", "code": "public record IndexedObjectInformation(String id, String index, Long seqNo, Long primaryTerm, Long version) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the id record component.\n\tString id();\n\t// Returns the value of the index record component.\n\tString index();\n\t// Returns the value of the primaryTerm record component.\n\tLong primaryTerm();\n\t// Returns the value of the seqNo record component.\n\tLong seqNo();\n}", "des": "Value class capturing information about a newly indexed document in Elasticsearch."}
{"index": 13705, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface IndexOperations {\n\t// Executes the given AliasActions.\n\tboolean alias(AliasActions aliasActions);\n\t// Create an index.\n\tboolean create();\n\t// Create an index for given settings.\n\tboolean create(Map<String,Object> settings);\n\t// Create an index for given settings and mapping.\n\tboolean create(Map<String,Object> settings, Document mapping);\n\t// Creates the index mapping for the entity this IndexOperations is bound to.\n\tDocument createMapping();\n}", "des": "The operations for the Elasticsearch Index APIs."}
{"index": 13706, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class IndexQuery extends Object {\n\tString getId();\n\tString getIndexName();\n\tObject getObject();\n\tIndexQuery.OpType getOpType();\n\t// Deprecated. from 4.0.\n\tString getParentId();\n\tLong getPrimaryTerm();\n\tString getRouting();\n\tLong getSeqNo();\n\tString getSource();\n\tLong getVersion();\n\tvoid setId(String id);\n\tvoid setObject(Object object);\n\tvoid setOpType(IndexQuery.OpType opType);\n\t// Deprecated. from 4.0.\n\tvoid setParentId(String parentId);\n\tvoid setPrimaryTerm(Long primaryTerm);\n}", "des": "IndexQuery"}
{"index": 13707, "repo": "spring-data-elasticsearch-5.1.2", "code": "public static enum IndexQuery.OpType extends Enum<IndexQuery.OpType> {\n\tString getEsName();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IndexQuery.OpType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IndexQuery.OpType[] values();\n}", "des": "OpType for the index operation."}
{"index": 13708, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class IndicesTemplate extends ChildTemplate<co.elastic.clients.transport.ElasticsearchTransport,co.elastic.clients.elasticsearch.indices.ElasticsearchIndicesClient> implements IndexOperations {\n\t// Executes the given AliasActions.\n\tboolean alias(AliasActions aliasActions);\n\tprotected Class<?> checkForBoundClass();\n\t// Create an index.\n\tboolean create();\n\t// Create an index for given settings.\n\tboolean create(Map<String,Object> settings);\n}", "des": "Implementation of the IndexOperations interface using en ElasticsearchIndicesClient."}
{"index": 13709, "repo": "spring-data-elasticsearch-5.1.2", "code": "public final class MappingParameters extends Object {\n\t// extracts the mapping parameters from the relevant annotations.\n\tstatic MappingParameters from(Annotation annotation);\n\tboolean isStore();\n\t// writes the different fields to an ObjectNode.\n\tvoid writeTypeAndParametersTo(com.fasterxml.jackson.databind.node.ObjectNode objectNode);\n}", "des": "A class to hold the mapping parameters that might be set on Field or InnerField annotation."}
{"index": 13710, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface PropertyValueConverter {\n\t// Converts an elasticsearch property value to a property value.\n\tObject read(Object value);\n\t// Converts a property value to an elasticsearch value.\n\tObject write(Object value);\n}", "des": "Interface defining methods to convert the value of an entity-property to a value in Elasticsearch and back."}
{"index": 13711, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface Query {\n\t// Add fields to be added as part of search request\n\tvoid addFields(String... fields);\n\t// Adds a RescorerQuery.\n\tvoid addRescorerQuery(RescorerQuery rescorerQuery);\n\t// Adds a runtime field to the query.\n\tvoid addRuntimeField(RuntimeField runtimeField);\n\t// Add Sort to query\n\t<T extends Query>T addSort(Sort sort);\n\t// Add source filter to be added as part of search request\n\tvoid addSourceFilter(SourceFilter sourceFilter);\n}", "des": "Query"}
{"index": 13712, "repo": "spring-data-elasticsearch-5.1.2", "code": "public static record Query.IdWithRouting(String id, String routing) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the id record component.\n\tString id();\n\t// Returns the value of the routing record component.\n\tString routing();\n}", "des": "Value class combining an id with a routing value."}
{"index": 13713, "repo": "spring-data-elasticsearch-5.1.2", "code": "public static record Query.PointInTime(String id, Duration keepAlive) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the id record component.\n\tString id();\n\t// Returns the value of the keepAlive record component.\n\tDuration keepAlive();\n}", "des": "Desscribes the point in time parameters for a query"}
{"index": 13714, "repo": "spring-data-elasticsearch-5.1.2", "code": "public static final class Range.Bound<T> extends Object {\n\tboolean equals(Object o);\n\t// Creates a boundary excluding value.\n\tstatic Range.Bound<Double> exclusive(double value);\n\t// Creates a boundary excluding value.\n\tstatic Range.Bound<Float> exclusive(float value);\n\t// Creates a boundary excluding value.\n\tstatic Range.Bound<Integer> exclusive(int value);\n\t// Creates a boundary excluding value.\n\tstatic Range.Bound<Long> exclusive(long value);\n}", "des": "Value object representing a boundary."}
{"index": 13715, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface ReactiveDocumentOperations {\n\t// Bulk update all objects.\n\tdefault reactor.core.publisher.Mono<Void> bulkUpdate(List<UpdateQuery> queries, IndexCoordinates index);\n\t// Bulk update all objects.\n\treactor.core.publisher.Mono<Void> bulkUpdate(List<UpdateQuery> queries, BulkOptions bulkOptions, IndexCoordinates index);\n\t// Delete the given entity extracting index from entity metadata.\n\treactor.core.publisher.Mono<String> delete(Object entity);\n}", "des": "The reactive operations for the Elasticsearch Document APIs."}
{"index": 13716, "repo": "spring-data-elasticsearch-5.1.2", "code": "public static interface ReactiveElasticsearchClient.Cluster {\n\t// Execute the given {ClusterHealthRequest} against the cluster API.\n\tdefault reactor.core.publisher.Mono<org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse> health(Consumer<org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest> consumer);\n}", "des": "Encapsulation of methods for accessing the Cluster API."}
{"index": 13717, "repo": "spring-data-elasticsearch-5.1.2", "code": "public static interface ReactiveElasticsearchClient.Indices {\n\t// Execute the given CloseIndexRequest against the indices API.\n\tdefault reactor.core.publisher.Mono<Void> closeIndex(Consumer<org.elasticsearch.action.admin.indices.close.CloseIndexRequest> consumer);\n\t// Execute the given CloseIndexRequest against the indices API.\n\tdefault reactor.core.publisher.Mono<Void> closeIndex(org.elasticsearch.action.admin.indices.close.CloseIndexRequest closeIndexRequest);\n}", "des": "Encapsulation of methods for accessing the Indices API."}
{"index": 13718, "repo": "spring-data-elasticsearch-5.1.2", "code": "public abstract class ReactiveElasticsearchConfiguration extends ElasticsearchConfigurationSupport {\n\t// Must be implemented by deriving classes to provide the ClientConfiguration.\n\tabstract ClientConfiguration clientConfiguration();\n\t// Provides the underlying low level RestClient.\n\torg.elasticsearch.client.RestClient elasticsearchRestClient(ClientConfiguration clientConfiguration);\n}", "des": "Base class for a @Configuration class to set up the Elasticsearch connection using the ReactiveElasticsearchClient."}
{"index": 13719, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface ReactiveElasticsearchOperations extends ReactiveDocumentOperations, ReactiveSearchOperations, ReactiveScriptOperations {\n\t// return a ReactiveClusterOperations instance that uses the same client communication setup as this ElasticsearchOperations instance.\n\tReactiveClusterOperations cluster();\n}", "des": "Interface that specifies a basic set of Elasticsearch operations executed in a reactive way."}
{"index": 13720, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class ReactiveElasticsearchRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID> {\n\tvoid afterPropertiesSet();\n\tprotected final RepositoryFactorySupport createRepositoryFactory();\n\t// Creates and initializes a RepositoryFactorySupport instance.\n\tprotected RepositoryFactorySupport getFactoryInstance(ReactiveElasticsearchOperations operations);\n\tprotected void setMappingContext(MappingContext<?,?> mappingContext);\n}", "des": "FactoryBean to create ReactiveElasticsearchRepository instances."}
{"index": 13721, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class ReactiveElasticsearchTemplate extends AbstractReactiveElasticsearchTemplate {\n\t// Perform an aggregation specified by the given query.\n\treactor.core.publisher.Flux<? extends AggregationContainer<?>> aggregate(Query query, Class<?> entityType, IndexCoordinates index);\n\t// Bulk update all objects.\n\treactor.core.publisher.Mono<Void> bulkUpdate(List<UpdateQuery> queries, BulkOptions bulkOptions, IndexCoordinates index);\n}", "des": "Implementation of ReactiveElasticsearchOperations using the new Elasticsearch client."}
{"index": 13722, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface ReactiveIndexOperations {\n\t// Executes the given AliasActions.\n\treactor.core.publisher.Mono<Boolean> alias(AliasActions aliasActions);\n\t// Create an index.\n\treactor.core.publisher.Mono<Boolean> create();\n\t// Create an index with the specified settings.\n\treactor.core.publisher.Mono<Boolean> create(Map<String,Object> settings);\n\t// Create an index for given settings and mapping.\n\treactor.core.publisher.Mono<Boolean> create(Map<String,Object> settings, Document mapping);\n}", "des": "Interface defining operations on indexes for the reactive stack."}
{"index": 13723, "repo": "spring-data-elasticsearch-5.1.2", "code": "public abstract class ReactiveResourceUtil extends Object {\n\t// loads a Document initialized with data from a given resource path.\n\tstatic reactor.core.publisher.Mono<Document> loadDocument(String path, String annotation);\n\t// Read a ClassPathResource into a reactor.core.publisher.Mono<String>.\n\tstatic reactor.core.publisher.Mono<String> readFileFromClasspath(String url);\n}", "des": "Utility to reactively read Resources."}
{"index": 13724, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface ReactiveScriptOperations {\n\t// Deletes the script with the given name\n\treactor.core.publisher.Mono<Boolean> deleteScript(String name);\n\t// Gest the script with the given name.\n\treactor.core.publisher.Mono<Script> getScript(String name);\n\t// Stores the given script in the Elasticsearch cluster.\n\treactor.core.publisher.Mono<Boolean> putScript(Script script);\n}", "des": "This interfaces defines the operations to access the Elasticsearch script API."}
{"index": 13725, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface ReactiveSearchOperations {\n\t// Perform an aggregation specified by the given query.\n\treactor.core.publisher.Flux<? extends AggregationContainer<?>> aggregate(Query query, Class<?> entityType);\n\t// Perform an aggregation specified by the given query.\n\treactor.core.publisher.Flux<? extends AggregationContainer<?>> aggregate(Query query, Class<?> entityType, IndexCoordinates index);\n\t// Closes a point in time\n\treactor.core.publisher.Mono<Boolean> closePointInTime(String pit);\n}", "des": "The reactive operations for the Elasticsearch Document APIs."}
{"index": 13726, "repo": "spring-data-elasticsearch-5.1.2", "code": "public enum RefreshPolicy extends Enum<RefreshPolicy> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RefreshPolicy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RefreshPolicy[] values();\n}", "des": "Enum defining the refresh policy."}
{"index": 13727, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class ReindexResponse extends Object {\n\t// Create a new ReindexResponse.ReindexResponseBuilder to build ReindexResponse\n\tstatic ReindexResponse.ReindexResponseBuilder builder();\n\t// The number of scroll responses pulled back by the update by query.\n\tlong getBatches();\n\t// The number of times that the request had retry bulk actions.\n\tlong getBulkRetries();\n\t// The number of documents that were successfully created.\n\tlong getCreated();\n}", "des": "Response of reindex request."}
{"index": 13728, "repo": "spring-data-elasticsearch-5.1.2", "code": "public record ScriptData(ScriptType type, String language, String script, String scriptName, Map<String,Object> params) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the language record component.\n\tString language();\n\t// Returns the value of the params record component.\n\tMap<String,Object> params();\n\t// Returns the value of the script record component.\n\tString script();\n}", "des": "value class combining script information."}
{"index": 13729, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface ScriptOperations {\n\t// Deletes the script with the given name\n\tboolean deleteScript(String name);\n\t// Gest the script with the given name.\n\tScript getScript(String name);\n\t// Stores the given script in the Elasticsearch cluster.\n\tboolean putScript(Script script);\n}", "des": "This interfaces defines the operations to access the Elasticsearch script API."}
{"index": 13730, "repo": "spring-data-elasticsearch-5.1.2", "code": "public enum ScriptType extends Enum<ScriptType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ScriptType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ScriptType[] values();\n}", "des": "Define script types for update queries."}
{"index": 13731, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface SearchDocument extends Document {\n\tExplanation getExplanation();\n\tMap<String,List<Object>> getFields();\n\t// The first value of the given field.\n\tdefault <V> V getFieldValue(String name);\n\tdefault Map<String,List<String>> getHighlightFields();\n\tdefault Map<String,SearchDocumentResponse> getInnerHits();\n\tList<String> getMatchedQueries();\n\tdefault NestedMetaData getNestedMetaData();\n\tdefault String getRouting();\n\t// Return the search score.\n\tfloat getScore();\n}", "des": "Extension to Document exposing search response related data."}
{"index": 13732, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class SearchDocumentAdapter extends Object implements SearchDocument {\n\t// Map.put(Object, Object) the key/value tuple and return this object.\n\tSearchDocument append(String key, Object value);\n\tvoid clear();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\tSet<Map.Entry<String,Object>> entrySet();\n\tboolean equals(Object o);\n\tvoid forEach(BiConsumer<? super String,? super Object> action);\n\tObject get(Object key);\n}", "des": "SearchDocument implementation using a Document delegate."}
{"index": 13733, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class SearchHit<T> extends Object {\n\tT getContent();\n\tExplanation getExplanation();\n\t// gets the highlight values for a field.\n\tList<String> getHighlightField(String field);\n\tMap<String,List<String>> getHighlightFields();\n\tString getId();\n\tString getIndex();\n\tMap<String,SearchHits<?>> getInnerHits();\n\t// returns the SearchHits for the inner hits with the given name.\n\tSearchHits<?> getInnerHits(String name);\n\tList<String> getMatchedQueries();\n}", "des": "Encapsulates the found data with additional information from the search."}
{"index": 13734, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface SearchOperations {\n\t// Closes a point in time\n\tBoolean closePointInTime(String pit);\n\t// return number of elements found by given query\n\tlong count(Query query, Class<?> clazz);\n\t// return number of elements found by given query\n\tlong count(Query query, Class<?> clazz, IndexCoordinates index);\n\t// Return number of elements found by given query.\n\tdefault long count(Query query, IndexCoordinates index);\n}", "des": "The operations for the Elasticsearch Document APIs."}
{"index": 13735, "repo": "spring-data-elasticsearch-5.1.2", "code": "public record SeqNoPrimaryTerm(long sequenceNumber, long primaryTerm) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the primaryTerm record component.\n\tlong primaryTerm();\n\t// Returns the value of the sequenceNumber record component.\n\tlong sequenceNumber();\n}", "des": "A container for seq_no and primary_term values."}
{"index": 13736, "repo": "spring-data-elasticsearch-5.1.2", "code": "public class Settings extends DefaultStringObjectMap<Settings> {\n\t// flattens the nested structure (JSON fields index/foo/bar/: value) into a flat structure (index.foo.bar: value)\n\tSettings flatten();\n\tObject get(Object key);\n\t// Merges some other settings onto this one.\n\tvoid merge(Settings other);\n\t// Creates a Settings object from the given JSON String\n\tstatic Settings parse(String json);\n}", "des": "class defining the settings for an index."}
{"index": 13737, "repo": "spring-data-elasticsearch-5.1.2", "code": "public interface StringObjectMap<M extends StringObjectMap<M>> extends Map<String,Object> {\n\t// Map.put(Object, Object) the key/value tuple and return this object.\n\tdefault M append(String key, Object value);\n\t// initializes this object from the given JSON String.\n\tM fromJson(String json);\n\t// Returns the value to which the specified key is mapped, or null if this document contains no mapping for the key.\n\tdefault <T> T get(Object key, Class<T> type);\n}", "des": "Defines an interface for a Map<String, Object> with additional convenience methods."}
{"index": 13738, "repo": "spring-data-elasticsearch-5.1.2", "code": "public enum TotalHitsRelation extends Enum<TotalHitsRelation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TotalHitsRelation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TotalHitsRelation[] values();\n}", "des": "Enum to represent the relation that Elasticsearch returns for the totalHits value"}
{"index": 13739, "repo": "spring-data-elasticsearch-5.1.2", "code": "public record Version(int major, int minor, int revision) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Creates a version from a String that matches PATTERN; major, minor and revision numbers separated by dots with optional trailing characters.\n\tstatic Version fromString(String s);\n\t// Returns the value of the major record component.\n\tint major();\n\t// Returns the value of the minor record component.\n\tint minor();\n}", "des": "A version defined by 3 parts: major minor and revision number."}
{"index": 13740, "repo": "spring-data-elasticsearch-5.1.2", "code": "public enum WriteTypeHint extends Enum<WriteTypeHint> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic WriteTypeHint valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic WriteTypeHint[] values();\n}", "des": "Defines if type hints should be written."}
{"index": 13741, "repo": "spring-boot-3.1.1", "code": "public abstract class AbstractBeansOfTypeDatabaseInitializerDetector extends Object implements DatabaseInitializerDetector {\n\t// Detect beans defined in the given beanFactory that initialize a DataSource.\n\tSet<String> detect(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory);\n\t// Returns the bean types that should be detected as being database initializers.\n\tprotected abstract Set<Class<?>> getDatabaseInitializerBeanTypes();\n}", "des": "Base class for DatabaseInitializerDetectors that detect database initializer beans by type."}
{"index": 13742, "repo": "spring-boot-3.1.1", "code": "public abstract class AbstractBeansOfTypeDependsOnDatabaseInitializationDetector extends Object implements DependsOnDatabaseInitializationDetector {\n\t// Detect beans defined in the given beanFactory that depend on database initialization.\n\tSet<String> detect(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory);\n}", "des": "Base class for DependsOnDatabaseInitializationDetectors that detect by type beans that depend upon database initialization."}
{"index": 13743, "repo": "spring-boot-3.1.1", "code": "public abstract class AbstractConfigurableWebServerFactory extends Object implements ConfigurableWebServerFactory {\n\t// Adds error pages that will be used when handling exceptions.\n\tvoid addErrorPages(ErrorPage... errorPages);\n\t// Return the absolute temp dir for given web server.\n\tprotected final File createTempDir(String prefix);\n\t// Return the address that the web server binds to.\n\tInetAddress getAddress();\n\tCompression getCompression();\n}", "des": "Abstract base class for ConfigurableWebServerFactory implementations."}
{"index": 13744, "repo": "spring-boot-3.1.1", "code": "public abstract class AbstractFailureAnalyzer<T extends Throwable> extends Object implements FailureAnalyzer {\n\t// Returns an analysis of the given failure, or null if no analysis was possible.\n\tFailureAnalysis analyze(Throwable failure);\n\t// Returns an analysis of the given rootFailure, or null if no analysis was possible.\n\tprotected abstract FailureAnalysis analyze(Throwable rootFailure, T cause);\n\tprotected final <E extends Throwable>E findCause(Throwable failure, Class<E> type);\n}", "des": "Abstract base class for most FailureAnalyzer implementations."}
{"index": 13745, "repo": "spring-boot-3.1.1", "code": "public abstract class AbstractFilterRegistrationBean<T extends jakarta.servlet.Filter> extends DynamicRegistrationBean<jakarta.servlet.FilterRegistration.Dynamic> {\n\tprotected jakarta.servlet.FilterRegistration.Dynamic addRegistration(String description, jakarta.servlet.ServletContext servletContext);\n\t// Add servlet names for the filter.\n\tvoid addServletNames(String... servletNames);\n}", "des": "Abstract base ServletContextInitializer to register Filters in a Servlet 3.0+ container."}
{"index": 13746, "repo": "spring-boot-3.1.1", "code": "public abstract class AbstractInjectionFailureAnalyzer<T extends Throwable> extends AbstractFailureAnalyzer<T> {\n\t// Returns an analysis of the given rootFailure, or null if no analysis was possible.\n\tprotected final FailureAnalysis analyze(Throwable rootFailure, T cause);\n\t// Returns an analysis of the given rootFailure, or null if no analysis was possible.\n\tprotected abstract FailureAnalysis analyze(Throwable rootFailure, T cause, String description);\n}", "des": "Abstract base class for a FailureAnalyzer that handles some kind of injection failure."}
{"index": 13747, "repo": "spring-boot-3.1.1", "code": "public abstract class AbstractLoggingSystem extends LoggingSystem {\n\tprotected final void applySystemProperties(org.springframework.core.env.Environment environment, LogFile logFile);\n\t// Reset the logging system to be limit output.\n\tvoid beforeInitialize();\n\tprotected final ClassLoader getClassLoader();\n\tprotected final String getPackagedConfigFile(String fileName);\n\t// Return any self initialization config that has been applied.\n\tprotected String getSelfInitializationConfig();\n}", "des": "Abstract base class for LoggingSystem implementations."}
{"index": 13748, "repo": "spring-boot-3.1.1", "code": "public abstract class AbstractScriptDatabaseInitializer extends Object implements org.springframework.context.ResourceLoaderAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Initializes the database by applying schema and data scripts.\n\tboolean initializeDatabase();\n\t// Returns whether the database that is to be initialized is embedded.\n\tprotected boolean isEmbeddedDatabase();\n}", "des": "Base class for an InitializingBean that performs SQL database initialization using schema (DDL) and data (DML) scripts."}
{"index": 13749, "repo": "spring-boot-3.1.1", "code": "public abstract class AbstractServletWebServerFactory extends AbstractConfigurableWebServerFactory implements ConfigurableServletWebServerFactory {\n\t// Add CookieSameSiteSuppliers to those that should be used to obtain the Cookie.SameSite attribute of any added cookie.\n\tvoid addCookieSameSiteSuppliers(CookieSameSiteSupplier... cookieSameSiteSuppliers);\n}", "des": "Abstract base class for ConfigurableServletWebServerFactory implementations."}
{"index": 13750, "repo": "spring-boot-3.1.1", "code": "public class AnnotationConfigReactiveWebServerApplicationContext extends ReactiveWebServerApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry {\n\tprotected void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory);\n\tprotected void prepareRefresh();\n\t// Register one or more annotated classes to be processed.\n\tfinal void register(Class<?>... annotatedClasses);\n}", "des": "ReactiveWebServerApplicationContext that accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations."}
{"index": 13751, "repo": "spring-boot-3.1.1", "code": "public class AnnotationConfigServletWebServerApplicationContext extends ServletWebServerApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry {\n\t// Register ServletContextAwareProcessor.\n\tprotected void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory);\n\tprotected void prepareRefresh();\n\t// Register one or more annotated classes to be processed.\n\tfinal void register(Class<?>... annotatedClasses);\n}", "des": "ServletWebServerApplicationContext that accepts annotated classes as input - in particular @Configuration -annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations."}
{"index": 13752, "repo": "spring-boot-3.1.1", "code": "public final class Ansi8BitColor extends Object implements AnsiElement {\n\t// Return a background ANSI color code instance for the given code.\n\tstatic Ansi8BitColor background(int code);\n\tboolean equals(Object obj);\n\t// Return a foreground ANSI color code instance for the given code.\n\tstatic Ansi8BitColor foreground(int code);\n}", "des": "AnsiElement implementation for ANSI 8-bit foreground or background color codes."}
{"index": 13753, "repo": "spring-boot-3.1.1", "code": "public enum AnsiBackground extends Enum<AnsiBackground> implements AnsiElement {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AnsiBackground valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AnsiBackground[] values();\n}", "des": "Ansi background colors."}
{"index": 13754, "repo": "spring-boot-3.1.1", "code": "public enum AnsiColor extends Enum<AnsiColor> implements AnsiElement {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AnsiColor valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AnsiColor[] values();\n}", "des": "Ansi colors."}
{"index": 13755, "repo": "spring-boot-3.1.1", "code": "public abstract class AnsiOutput extends Object {\n\t// Encode a single AnsiElement if output is enabled.\n\tstatic String encode(AnsiElement element);\n\t// Returns if ANSI output is enabled\n\tstatic AnsiOutput.Enabled getEnabled();\n\t// Sets if the System.console() is known to be available.\n\tstatic void setConsoleAvailable(Boolean consoleAvailable);\n\t// Sets if ANSI output is enabled.\n\tstatic void setEnabled(AnsiOutput.Enabled enabled);\n}", "des": "Generates ANSI encoded output, automatically attempting to detect if the terminal supports ANSI."}
{"index": 13756, "repo": "spring-boot-3.1.1", "code": "public static enum AnsiOutput.Enabled extends Enum<AnsiOutput.Enabled> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AnsiOutput.Enabled valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AnsiOutput.Enabled[] values();\n}", "des": "Possible values to pass to AnsiOutput.setEnabled(org.springframework.boot.ansi.AnsiOutput.Enabled)."}
{"index": 13757, "repo": "spring-boot-3.1.1", "code": "public enum AnsiStyle extends Enum<AnsiStyle> implements AnsiElement {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AnsiStyle valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AnsiStyle[] values();\n}", "des": "Ansi styles."}
{"index": 13758, "repo": "spring-boot-3.1.1", "code": "public interface ApplicationArguments {\n\t// Return whether the set of option arguments parsed from the arguments contains an option with the given name.\n\tboolean containsOption(String name);\n\t// Return the collection of non-option arguments parsed.\n\tList<String> getNonOptionArgs();\n\t// Return the names of all option arguments.\n\tSet<String> getOptionNames();\n\t// Return the collection of values associated with the arguments option having the given name.\n\tList<String> getOptionValues(String name);\n}", "des": "Provides access to the arguments that were used to run a SpringApplication."}
{"index": 13759, "repo": "spring-boot-3.1.1", "code": "public interface ApplicationAvailability {\n\t// Return the last AvailabilityChangeEvent received for a given state type.\n\t<S extends AvailabilityState>AvailabilityChangeEvent<S> getLastChangeEvent(Class<S> stateType);\n\t// Return the LivenessState of the application.\n\tdefault LivenessState getLivenessState();\n\t// Return the ReadinessState of the application.\n\tdefault ReadinessState getReadinessState();\n}", "des": "Provides availability state information for the application."}
{"index": 13760, "repo": "spring-boot-3.1.1", "code": "public class ApplicationAvailabilityBean extends Object implements ApplicationAvailability, org.springframework.context.ApplicationListener<AvailabilityChangeEvent<?>> {\n\t// Return the last AvailabilityChangeEvent received for a given state type.\n\t<S extends AvailabilityState>AvailabilityChangeEvent<S> getLastChangeEvent(Class<S> stateType);\n\t// Return AvailabilityState information for the application.\n\t<S extends AvailabilityState>S getState(Class<S> stateType);\n}", "des": "Bean that provides an ApplicationAvailability implementation by listening for change events."}
{"index": 13761, "repo": "spring-boot-3.1.1", "code": "@FunctionalInterface public interface ApplicationContextFactory {\n\t// Creates the application context for a SpringApplication, respecting the given webApplicationType.\n\torg.springframework.context.ConfigurableApplicationContext create(WebApplicationType webApplicationType);\n\t// Create a new Environment to be set on the created application context.\n\tdefault org.springframework.core.env.ConfigurableEnvironment createEnvironment(WebApplicationType webApplicationType);\n}", "des": "Strategy interface for creating the ConfigurableApplicationContext used by a SpringApplication."}
{"index": 13762, "repo": "spring-boot-3.1.1", "code": "public abstract class ApplicationContextRequestMatcher<C> extends Object implements org.springframework.security.web.util.matcher.RequestMatcher {\n\t// Returns if the WebApplicationContext should be ignored and not used for matching.\n\tprotected boolean ignoreApplicationContext(org.springframework.web.context.WebApplicationContext webApplicationContext);\n}", "des": "ApplicationContext backed RequestMatcher."}
{"index": 13763, "repo": "spring-boot-3.1.1", "code": "public abstract class ApplicationContextServerWebExchangeMatcher<C> extends Object implements org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher {\n\tprotected Supplier<C> getContext(org.springframework.web.server.ServerWebExchange exchange);\n\t// Returns if the ApplicationContext should be ignored and not used for matching.\n\tprotected boolean ignoreApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n}", "des": "ApplicationContext backed ServerWebExchangeMatcher."}
{"index": 13764, "repo": "spring-boot-3.1.1", "code": "public class ApplicationConversionService extends org.springframework.format.support.FormattingConversionService {\n\t// Add converters useful for most Spring Boot applications.\n\tstatic void addApplicationConverters(org.springframework.core.convert.converter.ConverterRegistry registry);\n\t// Add formatters useful for most Spring Boot applications.\n\tstatic void addApplicationFormatters(org.springframework.format.FormatterRegistry registry);\n}", "des": "A specialization of FormattingConversionService configured by default with converters and formatters appropriate for most Spring Boot applications."}
{"index": 13765, "repo": "spring-boot-3.1.1", "code": "public class ApplicationEnvironmentPreparedEvent extends SpringApplicationEvent {\n\t// Return the bootstrap context.\n\tConfigurableBootstrapContext getBootstrapContext();\n\t// Return the environment.\n\torg.springframework.core.env.ConfigurableEnvironment getEnvironment();\n}", "des": "Event published when a SpringApplication is starting up and the Environment is first available for inspection and modification."}
{"index": 13766, "repo": "spring-boot-3.1.1", "code": "public class ApplicationFailedEvent extends SpringApplicationEvent {\n\t// Return the application context.\n\torg.springframework.context.ConfigurableApplicationContext getApplicationContext();\n\t// Return the exception that caused the failure.\n\tThrowable getException();\n}", "des": "Event published by a SpringApplication when it fails to start."}
{"index": 13767, "repo": "spring-boot-3.1.1", "code": "public class ApplicationHome extends Object {\n\t// Returns the application home directory.\n\tFile getDir();\n\t// Returns the underlying source used to find the home directory.\n\tFile getSource();\n}", "des": "Provides access to the application home directory."}
{"index": 13768, "repo": "spring-boot-3.1.1", "code": "public class ApplicationPidFileWriter extends Object implements org.springframework.context.ApplicationListener<SpringApplicationEvent>, org.springframework.core.Ordered {\n\tint getOrder();\n\tvoid onApplicationEvent(SpringApplicationEvent event);\n\t// Reset the created flag for testing purposes.\n\tprotected static void reset();\n\tvoid setOrder(int order);\n}", "des": "An ApplicationListener that saves application PID into file."}
{"index": 13769, "repo": "spring-boot-3.1.1", "code": "public class ApplicationReadyEvent extends SpringApplicationEvent {\n\t// Return the application context.\n\torg.springframework.context.ConfigurableApplicationContext getApplicationContext();\n\t// Return the time taken for the application to be ready to service requests, or null if unknown.\n\tDuration getTimeTaken();\n}", "des": "Event published as late as conceivably possible to indicate that the application is ready to service requests."}
{"index": 13770, "repo": "spring-boot-3.1.1", "code": "public class ApplicationStartedEvent extends SpringApplicationEvent {\n\t// Return the application context.\n\torg.springframework.context.ConfigurableApplicationContext getApplicationContext();\n\t// Return the time taken to start the application, or null if unknown.\n\tDuration getTimeTaken();\n}", "des": "Event published once the application context has been refreshed but before any application and command line runners have been called."}
{"index": 13771, "repo": "spring-boot-3.1.1", "code": "public class ApplicationTemp extends Object {\n\t// Return the directory to be used for application specific temp files.\n\tFile getDir();\n\t// Return a subdirectory of the application temp.\n\tFile getDir(String subDir);\n}", "des": "Provides access to an application specific temporary directory."}
{"index": 13772, "repo": "spring-boot-3.1.1", "code": "public class AvailabilityChangeEvent<S extends AvailabilityState> extends org.springframework.context.PayloadApplicationEvent<S> {\n\torg.springframework.core.ResolvableType getResolvableType();\n\t// Return the changed availability state.\n\tS getState();\n\t// Convenience method that can be used to publish an AvailabilityChangeEvent to the given application context.\n\tstatic <S extends AvailabilityState>void publish(org.springframework.context.ApplicationContext context, S state);\n}", "des": "ApplicationEvent sent when the AvailabilityState of the application changes."}
{"index": 13773, "repo": "spring-boot-3.1.1", "code": "public static enum Banner.Mode extends Enum<Banner.Mode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Banner.Mode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Banner.Mode[] values();\n}", "des": "An enumeration of possible values for configuring the Banner."}
{"index": 13774, "repo": "spring-boot-3.1.1", "code": "public class BasicJsonParser extends AbstractJsonParser {\n\t// Parse the specified JSON string into a List.\n\tList<Object> parseList(String json);\n\t// Parse the specified JSON string into a Map.\n\tMap<String,Object> parseMap(String json);\n}", "des": "Really basic JSON parser for when you have nothing else available."}
{"index": 13775, "repo": "spring-boot-3.1.1", "code": "public final class Bindable<T> extends Object {\n\tboolean equals(Object obj);\n\t// Return a single associated annotations that could affect binding.\n\t<A extends Annotation>A getAnnotation(Class<A> type);\n\t// Return any associated annotations that could affect binding.\n\tAnnotation[] getAnnotations();\n\t// Returns the method to be used to bind this bindable, or null if no specific binding method is required.\n\tBindMethod getBindMethod();\n}", "des": "Source that can be bound by a Binder."}
{"index": 13776, "repo": "spring-boot-3.1.1", "code": "public static enum Bindable.BindRestriction extends Enum<Bindable.BindRestriction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Bindable.BindRestriction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Bindable.BindRestriction[] values();\n}", "des": "Restrictions that can be applied when binding values."}
{"index": 13777, "repo": "spring-boot-3.1.1", "code": "public class BindableRuntimeHintsRegistrar extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar {\n\t// Create a new BindableRuntimeHintsRegistrar for the specified bindables.\n\tstatic BindableRuntimeHintsRegistrar forBindables(Iterable<Bindable<?>> bindables);\n\t// Create a new BindableRuntimeHintsRegistrar for the specified bindables.\n\tstatic BindableRuntimeHintsRegistrar forBindables(Bindable<?>... bindables);\n}", "des": "RuntimeHintsRegistrar that can be used to register ReflectionHints for Bindable types, discovering any nested type it may expose through a property."}
{"index": 13778, "repo": "spring-boot-3.1.1", "code": "@FunctionalInterface public interface BindConstructorProvider {\n\t// Return the bind constructor to use for the given type, or null if constructor binding is not supported.\n\tdefault Constructor<?> getBindConstructor(Class<?> type, boolean isNestedConstructorBinding);\n\t// Return the bind constructor to use for the given bindable, or null if constructor binding is not supported.\n\tConstructor<?> getBindConstructor(Bindable<?> bindable, boolean isNestedConstructorBinding);\n}", "des": "Strategy interface used to determine a specific constructor to use when binding."}
{"index": 13779, "repo": "spring-boot-3.1.1", "code": "public interface BindContext {\n\t// Return the source binder that is performing the bind operation.\n\tBinder getBinder();\n\t// Return the ConfigurationProperty actually being bound or null if the property has not yet been determined.\n\tConfigurationProperty getConfigurationProperty();\n\t// Return the current depth of the binding.\n\tint getDepth();\n\t// Return an Iterable of the sources being used by the Binder.\n\tIterable<ConfigurationPropertySource> getSources();\n}", "des": "Context information for use by BindHandlers."}
{"index": 13780, "repo": "spring-boot-3.1.1", "code": "public class Binder extends Object {\n\t// Bind the specified target Class using this binder's property sources.\n\t<T> BindResult<T> bind(String name, Class<T> target);\n\t// Bind the specified target Bindable using this binder's property sources.\n\t<T> BindResult<T> bind(String name, Bindable<T> target);\n\t// Bind the specified target Bindable using this binder's property sources.\n\t<T> BindResult<T> bind(String name, Bindable<T> target, BindHandler handler);\n}", "des": "A container object which Binds objects from one or more ConfigurationPropertySources."}
{"index": 13781, "repo": "spring-boot-3.1.1", "code": "public class BindException extends RuntimeException implements OriginProvider {\n\t// Return the name of the configuration property being bound.\n\tConfigurationPropertyName getName();\n\t// Return the source origin or null if the origin is not known.\n\tOrigin getOrigin();\n\t// Return the configuration property name of the item that was being bound.\n\tConfigurationProperty getProperty();\n\t// Return the target being bound.\n\tBindable<?> getTarget();\n}", "des": "Exception thrown when binding fails."}
{"index": 13782, "repo": "spring-boot-3.1.1", "code": "public interface BindHandler {\n\t// Called when binding of an element ends with an unbound result and a newly created instance is about to be returned.\n\tdefault Object onCreate(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result);\n}", "des": "Callback interface that can be used to handle additional logic during element binding."}
{"index": 13783, "repo": "spring-boot-3.1.1", "code": "public enum BindMethod extends Enum<BindMethod> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BindMethod valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BindMethod[] values();\n}", "des": "Configuration property binding methods."}
{"index": 13784, "repo": "spring-boot-3.1.1", "code": "public final class BindResult<T> extends Object {\n\tboolean equals(Object obj);\n\t// Return the object that was bound or throw a NoSuchElementException if no value was bound.\n\tT get();\n\t// Invoke the specified consumer with the bound value, or do nothing if no value has been bound.\n\tvoid ifBound(Consumer<? super T> consumer);\n\t// Returns true if a result was bound.\n\tboolean isBound();\n}", "des": "A container object to return the result of a Binder bind operation."}
{"index": 13785, "repo": "spring-boot-3.1.1", "code": "public interface BootstrapContext {\n\t// Return an instance from the context if the type has been registered.\n\t<T> T get(Class<T> type);\n\t// Return an instance from the context if the type has been registered.\n\t<T> T getOrElse(Class<T> type, T other);\n\t// Return an instance from the context if the type has been registered.\n\t<T> T getOrElseSupply(Class<T> type, Supplier<T> other);\n}", "des": "A simple bootstrap context that is available during startup and Environment post-processing up to the point that the ApplicationContext is prepared."}
{"index": 13786, "repo": "spring-boot-3.1.1", "code": "public class BootstrapContextClosedEvent extends org.springframework.context.ApplicationEvent {\n\t// Return the prepared application context.\n\torg.springframework.context.ConfigurableApplicationContext getApplicationContext();\n\t// Return the BootstrapContext that was closed.\n\tBootstrapContext getBootstrapContext();\n}", "des": "ApplicationEvent published by a BootstrapContext when it's closed."}
{"index": 13787, "repo": "spring-boot-3.1.1", "code": "public interface BootstrapRegistry {\n\t// Add an ApplicationListener that will be called with a BootstrapContextClosedEvent when the BootstrapContext is closed and the ApplicationContext has been prepared.\n\tvoid addCloseListener(org.springframework.context.ApplicationListener<BootstrapContextClosedEvent> listener);\n\t// Return any existing BootstrapRegistry.InstanceSupplier for the given type.\n\t<T> BootstrapRegistry.InstanceSupplier<T> getRegisteredInstanceSupplier(Class<T> type);\n}", "des": "A simple object registry that is available during startup and Environment post-processing up to the point that the ApplicationContext is prepared."}
{"index": 13788, "repo": "spring-boot-3.1.1", "code": "@FunctionalInterface public static interface BootstrapRegistry.InstanceSupplier<T> {\n\t// Factory method that can be used to create an BootstrapRegistry.InstanceSupplier from a Supplier.\n\tstatic <T> BootstrapRegistry.InstanceSupplier<T> from(Supplier<T> supplier);\n\t// Factory method used to create the instance when needed.\n\tT get(BootstrapContext context);\n\t// Return the scope of the supplied instance.\n\tdefault BootstrapRegistry.Scope getScope();\n}", "des": "Supplier used to provide the actual instance when needed."}
{"index": 13789, "repo": "spring-boot-3.1.1", "code": "public static enum BootstrapRegistry.Scope extends Enum<BootstrapRegistry.Scope> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BootstrapRegistry.Scope valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BootstrapRegistry.Scope[] values();\n}", "des": "The scope of an instance."}
{"index": 13790, "repo": "spring-boot-3.1.1", "code": "public class BoundConfigurationProperties extends Object {\n\t// Get the configuration property bound to the given name.\n\tConfigurationProperty get(ConfigurationPropertyName name);\n\t// Return the BoundConfigurationProperties from the given ApplicationContext if it is available.\n\tstatic BoundConfigurationProperties get(org.springframework.context.ApplicationContext context);\n\t// Get all bound properties.\n\tMap<ConfigurationPropertyName,ConfigurationProperty> getAll();\n}", "des": "Bean to record and provide bound @ConfigurationProperties."}
{"index": 13791, "repo": "spring-boot-3.1.1", "code": "public class BufferingApplicationStartup extends Object implements org.springframework.core.metrics.ApplicationStartup {\n\t// Add a predicate filter to the list of existing ones.\n\tvoid addFilter(Predicate<org.springframework.core.metrics.StartupStep> filter);\n\t// Return the timeline by pulling steps from the buffer.\n\tStartupTimeline drainBufferedTimeline();\n\t// Return the timeline as a snapshot of currently buffered steps.\n\tStartupTimeline getBufferedTimeline();\n}", "des": "ApplicationStartup implementation that buffers steps and records their timestamp as well as their processing time."}
{"index": 13792, "repo": "spring-boot-3.1.1", "code": "@ImportRuntimeHints(org.springframework.boot.info.BuildProperties.BuildPropertiesRuntimeHints.class) public class BuildProperties extends InfoProperties {\n\t// Return the artifactId of the project or null.\n\tString getArtifact();\n\t// Return the groupId of the project or null.\n\tString getGroup();\n\t// Return the name of the project or null.\n\tString getName();\n\t// Return the timestamp of the build or null.\n\tInstant getTime();\n\t// Return the version of the project or null.\n\tString getVersion();\n}", "des": "Provide build-related information such as group and artifact."}
{"index": 13793, "repo": "spring-boot-3.1.1", "code": "public final class ClientHttpRequestFactories extends Object {\n\t// Return a new ClientHttpRequestFactory of the given type, applying ClientHttpRequestFactorySettings using reflection if necessary.\n\tstatic <T extends org.springframework.http.client.ClientHttpRequestFactory>T get(Class<T> requestFactoryType, ClientHttpRequestFactorySettings settings);\n}", "des": "Utility class that can be used to create ClientHttpRequestFactory instances configured using given ClientHttpRequestFactorySettings."}
{"index": 13794, "repo": "spring-boot-3.1.1", "code": "public record ClientHttpRequestFactorySettings(Duration connectTimeout, Duration readTimeout, Boolean bufferRequestBody, SslBundle sslBundle) extends Record {\n\t// Returns the value of the bufferRequestBody record component.\n\tBoolean bufferRequestBody();\n\t// Returns the value of the connectTimeout record component.\n\tDuration connectTimeout();\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n}", "des": "Settings that can be applied when creating a ClientHttpRequestFactory."}
{"index": 13795, "repo": "spring-boot-3.1.1", "code": "public enum CloudPlatform extends Enum<CloudPlatform> {\n\t// Returns the active CloudPlatform or null if one is not active.\n\tstatic CloudPlatform getActive(org.springframework.core.env.Environment environment);\n\t// Determines if the platform is active (i.e.\n\tboolean isActive(org.springframework.core.env.Environment environment);\n}", "des": "Simple detection for well known cloud platforms."}
{"index": 13796, "repo": "spring-boot-3.1.1", "code": "public class CommonsDbcp2DataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<org.apache.commons.dbcp2.BasicDataSource> {\n\t// Return the current number of active connections that have been allocated from the data source or null if that information is not available.\n\tInteger getActive();\n\t// The default auto-commit state of connections created by this pool.\n\tBoolean getDefaultAutoCommit();\n\t// Return the number of established but idle connections.\n\tInteger getIdle();\n}", "des": "DataSourcePoolMetadata for an Apache Commons DBCP2 DataSource."}
{"index": 13797, "repo": "spring-boot-3.1.1", "code": "public class Compression extends Object {\n\t// Return whether response compression is enabled.\n\tboolean getEnabled();\n\tString[] getExcludedUserAgents();\n\t// Return the MIME types that should be compressed.\n\tString[] getMimeTypes();\n\t// Return the minimum \"Content-Length\" value that is required for compression to be performed.\n\torg.springframework.util.unit.DataSize getMinResponseSize();\n\tvoid setEnabled(boolean enabled);\n\tvoid setExcludedUserAgents(String[] excludedUserAgents);\n}", "des": "Simple server-independent abstraction for compression configuration."}
{"index": 13798, "repo": "spring-boot-3.1.1", "code": "public class ConcurrentReferenceCachingMetadataReaderFactory extends org.springframework.core.type.classreading.SimpleMetadataReaderFactory {\n\t// Clear the entire MetadataReader cache, removing all cached class metadata.\n\tvoid clearCache();\n\t// Create the meta-data reader.\n\tprotected org.springframework.core.type.classreading.MetadataReader createMetadataReader(org.springframework.core.io.Resource resource);\n}", "des": "Caching implementation of the MetadataReaderFactory interface backed by a ConcurrentReferenceHashMap, caching MetadataReader per Spring Resource handle (i.e."}
{"index": 13799, "repo": "spring-boot-3.1.1", "code": "public final class ConfigData extends Object {\n\t// Return the config data options that apply to the given source.\n\tConfigData.Options getOptions(org.springframework.core.env.PropertySource<?> propertySource);\n\t// Return the configuration data property sources in ascending priority order.\n\tList<org.springframework.core.env.PropertySource<?>> getPropertySources();\n}", "des": "Configuration data that has been loaded from a ConfigDataResource and may ultimately contribute property sources to Spring's Environment."}
{"index": 13800, "repo": "spring-boot-3.1.1", "code": "public static enum ConfigData.Option extends Enum<ConfigData.Option> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConfigData.Option valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConfigData.Option[] values();\n}", "des": "Option flags that can be applied."}
{"index": 13801, "repo": "spring-boot-3.1.1", "code": "public static final class ConfigData.Options extends Object {\n\t// Returns if the given option is contained in this set.\n\tboolean contains(ConfigData.Option option);\n\tboolean equals(Object obj);\n\t// Create a new instance with the given ConfigData.Option values.\n\tstatic ConfigData.Options of(ConfigData.Option... options);\n\t// Create a new ConfigData.Options instance that contains the options in this set including the given option.\n\tConfigData.Options with(ConfigData.Option option);\n}", "des": "A set of ConfigData.Option flags."}
{"index": 13802, "repo": "spring-boot-3.1.1", "code": "@FunctionalInterface public static interface ConfigData.PropertySourceOptions {\n\t// Create a new ConfigData.PropertySourceOptions instance that always returns the same options regardless of the property source.\n\tstatic ConfigData.PropertySourceOptions always(ConfigData.Option... options);\n\t// Create a new ConfigData.PropertySourceOptions instance that always returns the same options regardless of the property source.\n\tstatic ConfigData.PropertySourceOptions always(ConfigData.Options options);\n}", "des": "Strategy interface used to supply ConfigData.Options for a given PropertySource."}
{"index": 13803, "repo": "spring-boot-3.1.1", "code": "public class ConfigDataEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered {\n\t// Apply ConfigData post-processing to an existing Environment.\n\tstatic void applyTo(org.springframework.core.env.ConfigurableEnvironment environment);\n}", "des": "EnvironmentPostProcessor that loads and applies ConfigData to Spring's Environment."}
{"index": 13804, "repo": "spring-boot-3.1.1", "code": "public interface ConfigDataEnvironmentUpdateListener extends EventListener {\n\t// Called when a new PropertySource is added to the Environment.\n\tdefault void onPropertySourceAdded(org.springframework.core.env.PropertySource<?> propertySource, ConfigDataLocation location, ConfigDataResource resource);\n\t// Called when Environment profiles are set.\n\tdefault void onSetProfiles(Profiles profiles);\n}", "des": "EventListener to listen to Environment updates triggered by the ConfigDataEnvironmentPostProcessor."}
{"index": 13805, "repo": "spring-boot-3.1.1", "code": "public interface ConfigDataLoader<R extends ConfigDataResource> {\n\t// Returns if the specified resource can be loaded by this instance.\n\tdefault boolean isLoadable(ConfigDataLoaderContext context, R resource);\n\t// Load ConfigData for the given resource.\n\tConfigData load(ConfigDataLoaderContext context, R resource);\n}", "des": "Strategy class that can be used to load ConfigData for a given ConfigDataResource."}
{"index": 13806, "repo": "spring-boot-3.1.1", "code": "public final class ConfigDataLocation extends Object implements OriginProvider {\n\tboolean equals(Object obj);\n\t// Return getValue() with the specified prefix removed.\n\tString getNonPrefixedValue(String prefix);\n\t// Return the source origin or null if the origin is not known.\n\tOrigin getOrigin();\n\t// Return the value of the location (always excluding any user specified optional: prefix).\n\tString getValue();\n\t// Return if getValue() has the specified prefix.\n\tboolean hasPrefix(String prefix);\n}", "des": "A user specified location that can be resolved to one or more config data resources."}
{"index": 13807, "repo": "spring-boot-3.1.1", "code": "public class ConfigDataLocationNotFoundException extends ConfigDataNotFoundException {\n\t// Return the location that could not be found.\n\tConfigDataLocation getLocation();\n\t// Return the source origin or null if the origin is not known.\n\tOrigin getOrigin();\n\t// Return a description of actual referenced item that could not be found.\n\tString getReferenceDescription();\n}", "des": "ConfigDataNotFoundException thrown when a ConfigDataLocation cannot be found."}
{"index": 13808, "repo": "spring-boot-3.1.1", "code": "public interface ConfigDataLocationResolver<R extends ConfigDataResource> {\n\t// Returns if the specified location address can be resolved by this resolver.\n\tboolean isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location);\n\t// Resolve a ConfigDataLocation into one or more ConfigDataResource instances.\n\tList<R> resolve(ConfigDataLocationResolverContext context, ConfigDataLocation location);\n}", "des": "Strategy interface used to resolve locations into one or more resources."}
{"index": 13809, "repo": "spring-boot-3.1.1", "code": "public interface ConfigDataLocationResolverContext {\n\t// Provides access to a binder that can be used to obtain previously contributed values.\n\tBinder getBinder();\n\t// Provides access to the ConfigurableBootstrapContext shared across all EnvironmentPostProcessors.\n\tConfigurableBootstrapContext getBootstrapContext();\n\t// Provides access to the parent ConfigDataResource that triggered the resolve or null if there is no available parent.\n\tConfigDataResource getParent();\n}", "des": "Context provided to ConfigDataLocationResolver methods."}
{"index": 13810, "repo": "spring-boot-3.1.1", "code": "public enum ConfigDataNotFoundAction extends Enum<ConfigDataNotFoundAction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConfigDataNotFoundAction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConfigDataNotFoundAction[] values();\n}", "des": "Action to take when an uncaught ConfigDataNotFoundException is thrown."}
{"index": 13811, "repo": "spring-boot-3.1.1", "code": "public class ConfigDataResourceNotFoundException extends ConfigDataNotFoundException {\n\t// Return the original location that was resolved to determine the resource.\n\tConfigDataLocation getLocation();\n\t// Return the source origin or null if the origin is not known.\n\tOrigin getOrigin();\n\t// Return a description of actual referenced item that could not be found.\n\tString getReferenceDescription();\n\t// Return the resource that could not be found.\n\tConfigDataResource getResource();\n}", "des": "ConfigDataNotFoundException thrown when a ConfigDataResource cannot be found."}
{"index": 13812, "repo": "spring-boot-3.1.1", "code": "public class ConfigTreeConfigDataLocationResolver extends Object implements ConfigDataLocationResolver<ConfigTreeConfigDataResource> {\n\t// Returns if the specified location address can be resolved by this resolver.\n\tboolean isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location);\n\t// Resolve a ConfigDataLocation into one or more ConfigDataResource instances.\n\tList<ConfigTreeConfigDataResource> resolve(ConfigDataLocationResolverContext context, ConfigDataLocation location);\n}", "des": "ConfigDataLocationResolver for config tree locations."}
{"index": 13813, "repo": "spring-boot-3.1.1", "code": "public class ConfigTreePropertySource extends org.springframework.core.env.EnumerablePropertySource<Path> implements OriginLookup<String> {\n\t// Return the origin of the given key or null if the origin cannot be determined.\n\tOrigin getOrigin(String name);\n\tConfigTreePropertySource.Value getProperty(String name);\n\tString[] getPropertyNames();\n\t// Return true if this lookup is immutable and has contents that will never change.\n\tboolean isImmutable();\n}", "des": "PropertySource backed by a directory tree that contains files for each value."}
{"index": 13814, "repo": "spring-boot-3.1.1", "code": "public static enum ConfigTreePropertySource.Option extends Enum<ConfigTreePropertySource.Option> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConfigTreePropertySource.Option valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConfigTreePropertySource.Option[] values();\n}", "des": "Property source options."}
{"index": 13815, "repo": "spring-boot-3.1.1", "code": "public interface ConfigurableJettyWebServerFactory extends ConfigurableWebServerFactory {\n\t// Add JettyServerCustomizers that will be applied to the Server before it is started.\n\tvoid addServerCustomizers(JettyServerCustomizer... customizers);\n\t// Set the number of acceptor threads to use.\n\tvoid setAcceptors(int acceptors);\n\t// Set the number of selector threads to use.\n\tvoid setSelectors(int selectors);\n}", "des": "ConfigurableWebServerFactory for Jetty-specific features."}
{"index": 13816, "repo": "spring-boot-3.1.1", "code": "public interface ConfigurableRSocketServerFactory {\n\t// Set the specific network address that the server should bind to.\n\tvoid setAddress(InetAddress address);\n\t// Specify the maximum transmission unit.\n\tvoid setFragmentSize(org.springframework.util.unit.DataSize fragmentSize);\n\t// Set the port that the server should listen on.\n\tvoid setPort(int port);\n\t// Sets the SSL configuration that will be applied to the server's default connector.\n\tvoid setSsl(Ssl ssl);\n}", "des": "A configurable RSocketServerFactory."}
{"index": 13817, "repo": "spring-boot-3.1.1", "code": "public interface ConfigurableServletWebServerFactory extends ConfigurableWebServerFactory, ServletWebServerFactory, WebListenerRegistry {\n\t// Add CookieSameSiteSuppliers to those that should be used to obtain the Cookie.SameSite attribute of any added cookie.\n\tvoid addCookieSameSiteSuppliers(CookieSameSiteSupplier... cookieSameSiteSuppliers);\n}", "des": "A configurable ServletWebServerFactory."}
{"index": 13818, "repo": "spring-boot-3.1.1", "code": "public interface ConfigurableTomcatWebServerFactory extends ConfigurableWebServerFactory {\n\t// Add TomcatConnectorCustomizers that should be added to the Tomcat Connector.\n\tvoid addConnectorCustomizers(TomcatConnectorCustomizer... tomcatConnectorCustomizers);\n\t// Add TomcatContextCustomizers that should be added to the Tomcat Context.\n\tvoid addContextCustomizers(TomcatContextCustomizer... tomcatContextCustomizers);\n}", "des": "ConfigurableWebServerFactory for Tomcat-specific features."}
{"index": 13819, "repo": "spring-boot-3.1.1", "code": "public interface ConfigurableUndertowWebServerFactory extends ConfigurableWebServerFactory {\n\t// Add UndertowBuilderCustomizers that should be used to customize the Undertow Undertow.Builder.\n\tvoid addBuilderCustomizers(UndertowBuilderCustomizer... customizers);\n\t// Set the access log directory.\n\tvoid setAccessLogDirectory(File accessLogDirectory);\n\t// Set whether access logs are enabled.\n\tvoid setAccessLogEnabled(boolean accessLogEnabled);\n}", "des": "ConfigurableWebServerFactory for Undertow-specific features."}
{"index": 13820, "repo": "spring-boot-3.1.1", "code": "public interface ConfigurableWebServerFactory extends WebServerFactory, ErrorPageRegistry {\n\t// Sets the specific network address that the server should bind to.\n\tvoid setAddress(InetAddress address);\n\t// Sets the compression configuration that will be applied to the server's default connector.\n\tvoid setCompression(Compression compression);\n\t// Sets the error pages that will be used when handling exceptions.\n\tvoid setErrorPages(Set<? extends ErrorPage> errorPages);\n}", "des": "A configurable WebServerFactory."}
{"index": 13821, "repo": "spring-boot-3.1.1", "code": "public final class ConfigurationPropertiesBean extends Object {\n\t// Return a Bindable instance suitable that can be used as a target for the Binder.\n\tBindable<?> asBindTarget();\n\t// Return a @ConfigurationPropertiesBean instance for the given bean details or null if the bean is not a @ConfigurationProperties object.\n\tstatic ConfigurationPropertiesBean get(org.springframework.context.ApplicationContext applicationContext, Object bean, String beanName);\n}", "des": "Provides access to @ConfigurationProperties bean details, regardless of if the annotation was used directly or on a @Bean factory method."}
{"index": 13822, "repo": "spring-boot-3.1.1", "code": "public class ConfigurationPropertiesBindException extends org.springframework.beans.factory.BeanCreationException {\n\t// Return the configuration properties annotation that triggered the binding.\n\tConfigurationProperties getAnnotation();\n\t// Return the bean type that was being bound.\n\tClass<?> getBeanType();\n}", "des": "Exception thrown when @ConfigurationProperties binding fails."}
{"index": 13823, "repo": "spring-boot-3.1.1", "code": "public final class ConfigurationProperty extends Object implements OriginProvider, Comparable<ConfigurationProperty> {\n\tint compareTo(ConfigurationProperty other);\n\tboolean equals(Object obj);\n\t// Return the name of the configuration property.\n\tConfigurationPropertyName getName();\n\t// Return the source origin or null if the origin is not known.\n\tOrigin getOrigin();\n}", "des": "A single configuration property obtained from a ConfigurationPropertySource consisting of a name, value and optional origin."}
{"index": 13824, "repo": "spring-boot-3.1.1", "code": "public interface ConfigurationPropertyCaching {\n\t// Clear the cache and force it to be reloaded on next access.\n\tvoid clear();\n\t// Disable caching.\n\tvoid disable();\n\t// Enable caching with an unlimited time-to-live.\n\tvoid enable();\n\t// Get for all specified configuration property sources.\n\tstatic ConfigurationPropertyCaching get(Iterable<ConfigurationPropertySource> sources);\n}", "des": "Interface that can be used to control configuration property source caches."}
{"index": 13825, "repo": "spring-boot-3.1.1", "code": "public final class ConfigurationPropertyName extends Object implements Comparable<ConfigurationPropertyName> {\n\t// Create a ConfigurationPropertyName by adapting the given source.\n\tstatic ConfigurationPropertyName adapt(CharSequence name, char separator);\n\t// Create a new ConfigurationPropertyName by appending the given suffix.\n\tConfigurationPropertyName append(String suffix);\n}", "des": "A configuration property name composed of elements separated by dots."}
{"index": 13826, "repo": "spring-boot-3.1.1", "code": "public static enum ConfigurationPropertyName.Form extends Enum<ConfigurationPropertyName.Form> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConfigurationPropertyName.Form valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConfigurationPropertyName.Form[] values();\n}", "des": "The various forms that a non-indexed element value can take."}
{"index": 13827, "repo": "spring-boot-3.1.1", "code": "@FunctionalInterface public interface ConfigurationPropertySource {\n\t// Returns if the source contains any descendants of the specified name.\n\tdefault ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName name);\n\t// Return a filtered variant of this source, containing only names that match the given Predicate.\n\tdefault ConfigurationPropertySource filter(Predicate<ConfigurationPropertyName> filter);\n}", "des": "A source of ConfigurationProperties."}
{"index": 13828, "repo": "spring-boot-3.1.1", "code": "public final class ConfigurationPropertySources extends Object {\n\t// Attach a ConfigurationPropertySource support to the specified Environment.\n\tstatic void attach(org.springframework.core.env.Environment environment);\n\t// Create a new PropertyResolver that resolves property values against an underlying set of PropertySources.\n\tstatic org.springframework.core.env.ConfigurablePropertyResolver createPropertyResolver(org.springframework.core.env.MutablePropertySources propertySources);\n}", "des": "Provides access to ConfigurationPropertySources."}
{"index": 13829, "repo": "spring-boot-3.1.1", "code": "public enum ConfigurationPropertyState extends Enum<ConfigurationPropertyState> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConfigurationPropertyState valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConfigurationPropertyState[] values();\n}", "des": "The state of content from a ConfigurationPropertySource."}
{"index": 13830, "repo": "spring-boot-3.1.1", "code": "public abstract class Configurations extends Object {\n\tprotected final Set<Class<?>> getClasses();\n\t// Return the classes from all the specified configurations in the order that they would be registered.\n\tstatic Class<?>[] getClasses(Collection<Configurations> configurations);\n\t// Return the classes from all the specified configurations in the order that they would be registered.\n\tstatic Class<?>[] getClasses(Configurations... configurations);\n}", "des": "A set of @Configuration classes that can be registered in ApplicationContext."}
{"index": 13831, "repo": "spring-boot-3.1.1", "code": "public final class ConnectionFactoryBuilder extends Object {\n\t// Build a ConnectionFactory based on the state of this builder.\n\tio.r2dbc.spi.ConnectionFactory build();\n\t// Build a ConnectionFactoryOptions based on the state of this builder.\n\tio.r2dbc.spi.ConnectionFactoryOptions buildOptions();\n\t// Configure additional options.\n\tConnectionFactoryBuilder configure(Consumer<io.r2dbc.spi.ConnectionFactoryOptions.Builder> options);\n}", "des": "Builder for ConnectionFactory."}
{"index": 13832, "repo": "spring-boot-3.1.1", "code": "public static enum Cookie.SameSite extends Enum<Cookie.SameSite> {\n\tString attributeValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Cookie.SameSite valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Cookie.SameSite[] values();\n}", "des": "SameSite values."}
{"index": 13833, "repo": "spring-boot-3.1.1", "code": "@FunctionalInterface public interface CookieSameSiteSupplier {\n\t// Get the Cookie.SameSite values that should be used for the given Cookie.\n\tCookie.SameSite getSameSite(jakarta.servlet.http.Cookie cookie);\n\t// Return a new CookieSameSiteSupplier that always returns the given Cookie.SameSite value.\n\tstatic CookieSameSiteSupplier of(Cookie.SameSite sameSite);\n\t// Return a new CookieSameSiteSupplier that always returns Cookie.SameSite.LAX.\n\tstatic CookieSameSiteSupplier ofLax();\n}", "des": "Strategy interface that can be used with ConfigurableServletWebServerFactory implementations in order to supply custom Cookie.SameSite values for specific cookies."}
{"index": 13834, "repo": "spring-boot-3.1.1", "code": "public enum DatabaseDriver extends Enum<DatabaseDriver> {\n\t// Find a DatabaseDriver for the given DataSource.\n\tstatic DatabaseDriver fromDataSource(DataSource dataSource);\n\t// Find a DatabaseDriver for the given URL.\n\tstatic DatabaseDriver fromJdbcUrl(String url);\n\t// Find a DatabaseDriver for the given product name.\n\tstatic DatabaseDriver fromProductName(String productName);\n\t// Return the driver class name.\n\tString getDriverClassName();\n\t// Return the identifier of this driver.\n\tString getId();\n}", "des": "Enumeration of common database drivers."}
{"index": 13835, "repo": "spring-boot-3.1.1", "code": "public enum DatabaseInitializationMode extends Enum<DatabaseInitializationMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DatabaseInitializationMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DatabaseInitializationMode[] values();\n}", "des": "Supported database initialization modes."}
{"index": 13836, "repo": "spring-boot-3.1.1", "code": "public class DatabaseInitializationSettings extends Object {\n\t// Returns the locations of data (DML) scripts to apply to the database.\n\tList<String> getDataLocations();\n\t// Returns the encoding to use when reading the schema and data scripts.\n\tCharset getEncoding();\n\t// Gets the mode to use when determining whether database initialization should be performed.\n\tDatabaseInitializationMode getMode();\n}", "des": "Settings for initializing an SQL database."}
{"index": 13837, "repo": "spring-boot-3.1.1", "code": "public interface DatabaseInitializerDetector extends org.springframework.core.Ordered {\n\t// Detect beans defined in the given beanFactory that initialize a DataSource.\n\tSet<String> detect(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory);\n}", "des": "Detects beans that initialize an SQL database."}
{"index": 13838, "repo": "spring-boot-3.1.1", "code": "public final class DataSourceBuilder<T extends DataSource> extends Object {\n\t// Return a newly built DataSource instance.\n\tT build();\n\t// Create a new DataSourceBuilder instance.\n\tstatic DataSourceBuilder<?> create();\n\t// Create a new DataSourceBuilder instance.\n\tstatic DataSourceBuilder<?> create(ClassLoader classLoader);\n\t// Create a new DataSourceBuilder instance derived from the specified data source.\n\tstatic DataSourceBuilder<?> derivedFrom(DataSource dataSource);\n}", "des": "Convenience class for building a DataSource."}
{"index": 13839, "repo": "spring-boot-3.1.1", "code": "public interface DataSourcePoolMetadata {\n\t// Return the current number of active connections that have been allocated from the data source or null if that information is not available.\n\tInteger getActive();\n\t// The default auto-commit state of connections created by this pool.\n\tBoolean getDefaultAutoCommit();\n\t// Return the number of established but idle connections.\n\tdefault Integer getIdle();\n}", "des": "Provides access meta-data that is commonly available from most pooled DataSource implementations."}
{"index": 13840, "repo": "spring-boot-3.1.1", "code": "public class DataSourceScriptDatabaseInitializer extends AbstractScriptDatabaseInitializer {\n\t// Customize the ResourceDatabasePopulator.\n\tprotected void customize(org.springframework.jdbc.datasource.init.ResourceDatabasePopulator populator);\n\t// Returns the DataSource that will be initialized.\n\tprotected final DataSource getDataSource();\n\t// Returns whether the database that is to be initialized is embedded.\n\tprotected boolean isEmbeddedDatabase();\n}", "des": "InitializingBean that performs DataSource initialization using schema (DDL) and data (DML) scripts."}
{"index": 13841, "repo": "spring-boot-3.1.1", "code": "public final class DataSourceUnwrapper extends Object {\n\t// Return an object that implements the given target type, unwrapping delegate or proxy if necessary using the specified unwrapInterface.\n\tstatic <I, T extends I>T unwrap(DataSource dataSource, Class<I> unwrapInterface, Class<T> target);\n\t// Return an object that implements the given target type, unwrapping delegate or proxy if necessary.\n\tstatic <T> T unwrap(DataSource dataSource, Class<T> target);\n}", "des": "Unwraps a DataSource that may have been proxied or wrapped in a custom Wrapper such as DelegatingDataSource."}
{"index": 13842, "repo": "spring-boot-3.1.1", "code": "public class DefaultApplicationArguments extends Object implements ApplicationArguments {\n\t// Return whether the set of option arguments parsed from the arguments contains an option with the given name.\n\tboolean containsOption(String name);\n\t// Return the collection of non-option arguments parsed.\n\tList<String> getNonOptionArgs();\n\t// Return the names of all option arguments.\n\tSet<String> getOptionNames();\n}", "des": "Default implementation of ApplicationArguments."}
{"index": 13843, "repo": "spring-boot-3.1.1", "code": "public class DefaultBootstrapContext extends Object implements ConfigurableBootstrapContext {\n\t// Add an ApplicationListener that will be called with a BootstrapContextClosedEvent when the BootstrapContext is closed and the ApplicationContext has been prepared.\n\tvoid addCloseListener(org.springframework.context.ApplicationListener<BootstrapContextClosedEvent> listener);\n}", "des": "Default ConfigurableBootstrapContext implementation."}
{"index": 13844, "repo": "spring-boot-3.1.1", "code": "public class DefaultErrorAttributes extends Object implements ErrorAttributes {\n\t// Return the underlying cause of the error or null if the error cannot be extracted.\n\tThrowable getError(org.springframework.web.reactive.function.server.ServerRequest request);\n\t// Return a Map of the error attributes.\n\tMap<String,Object> getErrorAttributes(org.springframework.web.reactive.function.server.ServerRequest request, ErrorAttributeOptions options);\n}", "des": "Default implementation of ErrorAttributes."}
{"index": 13845, "repo": "spring-boot-3.1.1", "code": "@Order(-2147483648) public class DefaultErrorAttributes extends Object implements ErrorAttributes, org.springframework.web.servlet.HandlerExceptionResolver, org.springframework.core.Ordered {\n\t// Return the underlying cause of the error or null if the error cannot be extracted.\n\tThrowable getError(org.springframework.web.context.request.WebRequest webRequest);\n}", "des": "Default implementation of ErrorAttributes."}
{"index": 13846, "repo": "spring-boot-3.1.1", "code": "public class DefaultPropertiesPropertySource extends org.springframework.core.env.MapPropertySource {\n\t// Add a new DefaultPropertiesPropertySource or merge with an existing one.\n\tstatic void addOrMerge(Map<String,Object> source, org.springframework.core.env.MutablePropertySources sources);\n\t// Return true if the given source is named 'defaultProperties'.\n\tstatic boolean hasMatchingName(org.springframework.core.env.PropertySource<?> propertySource);\n}", "des": "MapPropertySource containing default properties contributed directly to a SpringApplication."}
{"index": 13847, "repo": "spring-boot-3.1.1", "code": "public class DefaultSslBundleRegistry extends Object implements SslBundleRegistry, SslBundles {\n\t// Return an SslBundle with the provided name.\n\tSslBundle getBundle(String name);\n\t// Register a named SslBundle.\n\tvoid registerBundle(String name, SslBundle bundle);\n}", "des": "Default SslBundleRegistry implementation."}
{"index": 13848, "repo": "spring-boot-3.1.1", "code": "@FunctionalInterface public interface DeferredLogFactory {\n\t// Create a new DeferredLog for the given destination.\n\tdefault org.apache.commons.logging.Log getLog(Class<?> destination);\n\t// Create a new DeferredLog for the given destination.\n\torg.apache.commons.logging.Log getLog(Supplier<org.apache.commons.logging.Log> destination);\n\t// Create a new DeferredLog for the given destination.\n\tdefault org.apache.commons.logging.Log getLog(org.apache.commons.logging.Log destination);\n}", "des": "Factory that can be used to create multiple DeferredLog instances that will switch over when appropriate."}
{"index": 13849, "repo": "spring-boot-3.1.1", "code": "public class DeferredLogs extends Object implements DeferredLogFactory {\n\t// Create a new DeferredLog for the given destination.\n\torg.apache.commons.logging.Log getLog(Class<?> destination);\n\t// Create a new DeferredLog for the given destination.\n\torg.apache.commons.logging.Log getLog(Supplier<org.apache.commons.logging.Log> destination);\n\t// Create a new DeferredLog for the given destination.\n\torg.apache.commons.logging.Log getLog(org.apache.commons.logging.Log destination);\n}", "des": "A DeferredLogFactory implementation that manages a collection DeferredLog instances."}
{"index": 13850, "repo": "spring-boot-3.1.1", "code": "public enum DispatcherType extends Enum<DispatcherType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DispatcherType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DispatcherType[] values();\n}", "des": "Enumeration of filter dispatcher types, identical to DispatcherType and used in configuration as the servlet API may not be present."}
{"index": 13851, "repo": "spring-boot-3.1.1", "code": "public enum DurationStyle extends Enum<DurationStyle> {\n\t// Detect the style from the given source value.\n\tstatic DurationStyle detect(String value);\n\t// Detect the style then parse the value to return a duration.\n\tstatic Duration detectAndParse(String value);\n\t// Detect the style then parse the value to return a duration.\n\tstatic Duration detectAndParse(String value, ChronoUnit unit);\n\tprotected final Matcher matcher(String value);\n\tprotected final boolean matches(String value);\n}", "des": "Duration format styles."}
{"index": 13852, "repo": "spring-boot-3.1.1", "code": "public abstract class DynamicRegistrationBean<D extends jakarta.servlet.Registration.Dynamic> extends RegistrationBean implements org.springframework.beans.factory.BeanNameAware {\n\t// Add a single init-parameter, replacing any existing parameter with the same name.\n\tvoid addInitParameter(String name, String value);\n\tprotected abstract D addRegistration(String description, jakarta.servlet.ServletContext servletContext);\n\tprotected void configure(D registration);\n}", "des": "Base class for Servlet 3.0+ dynamic based registration beans."}
{"index": 13853, "repo": "spring-boot-3.1.1", "code": "public enum EmbeddedDatabaseConnection extends Enum<EmbeddedDatabaseConnection> {\n\t// Returns the most suitable EmbeddedDatabaseConnection for the given class loader.\n\tstatic EmbeddedDatabaseConnection get(ClassLoader classLoader);\n\t// Returns the driver class name.\n\tString getDriverClassName();\n\t// Returns the EmbeddedDatabaseType for the connection.\n\torg.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType getType();\n}", "des": "Connection details for embedded databases."}
{"index": 13854, "repo": "spring-boot-3.1.1", "code": "public enum EmbeddedDatabaseConnection extends Enum<EmbeddedDatabaseConnection> {\n\t// Returns the most suitable EmbeddedDatabaseConnection for the given class loader.\n\tstatic EmbeddedDatabaseConnection get(ClassLoader classLoader);\n\t// Returns the driver class name.\n\tString getDriverClassName();\n\t// Returns the R2DBC URL for the connection using the specified databaseName.\n\tString getUrl(String databaseName);\n}", "des": "Connection details for embedded databases compatible with R2DBC."}
{"index": 13855, "repo": "spring-boot-3.1.1", "code": "public static enum Encoding.Type extends Enum<Encoding.Type> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Encoding.Type valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Encoding.Type[] values();\n}", "des": "Type of HTTP message to consider for encoding configuration."}
{"index": 13856, "repo": "spring-boot-3.1.1", "code": "public class EntityManagerFactoryBuilder extends Object {\n\tEntityManagerFactoryBuilder.Builder dataSource(DataSource dataSource);\n\t// Configure the bootstrap executor to be used by the LocalContainerEntityManagerFactoryBean.\n\tvoid setBootstrapExecutor(org.springframework.core.task.AsyncTaskExecutor bootstrapExecutor);\n}", "des": "Convenient builder for JPA EntityManagerFactory instances."}
{"index": 13857, "repo": "spring-boot-3.1.1", "code": "@FunctionalInterface public interface EnvironmentPostProcessorsFactory {\n\t// Return a EnvironmentPostProcessorsFactory backed by spring.factories.\n\tstatic EnvironmentPostProcessorsFactory fromSpringFactories(ClassLoader classLoader);\n\t// Create all requested EnvironmentPostProcessor instances.\n\tList<EnvironmentPostProcessor> getEnvironmentPostProcessors(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext);\n}", "des": "Factory interface used by the EnvironmentPostProcessorApplicationListener to create the EnvironmentPostProcessor instances."}
{"index": 13858, "repo": "spring-boot-3.1.1", "code": "public final class ErrorAttributeOptions extends Object {\n\t// Create an ErrorAttributeOptions with defaults.\n\tstatic ErrorAttributeOptions defaults();\n\t// Return an ErrorAttributeOptions that excludes the specified attribute ErrorAttributeOptions.Include options.\n\tErrorAttributeOptions excluding(ErrorAttributeOptions.Include... excludes);\n\t// Get all options for including attributes in the error response.\n\tSet<ErrorAttributeOptions.Include> getIncludes();\n}", "des": "Options controlling the contents of ErrorAttributes."}
{"index": 13859, "repo": "spring-boot-3.1.1", "code": "public static enum ErrorAttributeOptions.Include extends Enum<ErrorAttributeOptions.Include> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ErrorAttributeOptions.Include valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ErrorAttributeOptions.Include[] values();\n}", "des": "Error attributes that can be included in an error response."}
{"index": 13860, "repo": "spring-boot-3.1.1", "code": "public interface ErrorAttributes {\n\t// Return the underlying cause of the error or null if the error cannot be extracted.\n\tThrowable getError(org.springframework.web.reactive.function.server.ServerRequest request);\n\t// Return a Map of the error attributes.\n\tdefault Map<String,Object> getErrorAttributes(org.springframework.web.reactive.function.server.ServerRequest request, ErrorAttributeOptions options);\n}", "des": "Provides access to error attributes which can be logged or presented to the user."}
{"index": 13861, "repo": "spring-boot-3.1.1", "code": "public interface ErrorAttributes {\n\t// Return the underlying cause of the error or null if the error cannot be extracted.\n\tThrowable getError(org.springframework.web.context.request.WebRequest webRequest);\n\t// Returns a Map of the error attributes.\n\tdefault Map<String,Object> getErrorAttributes(org.springframework.web.context.request.WebRequest webRequest, ErrorAttributeOptions options);\n}", "des": "Provides access to error attributes which can be logged or presented to the user."}
{"index": 13862, "repo": "spring-boot-3.1.1", "code": "public class ErrorPage extends Object {\n\tboolean equals(Object obj);\n\t// Returns the exception type (or null for a page that matches by status).\n\tClass<? extends Throwable> getException();\n\t// The exception type name.\n\tString getExceptionName();\n\t// The path to render (usually implemented as a forward), starting with \"/\".\n\tString getPath();\n\t// The HTTP status value that this error page matches (or null for a page that matches by exception).\n\torg.springframework.http.HttpStatus getStatus();\n}", "des": "Simple server-independent abstraction for error pages."}
{"index": 13863, "repo": "spring-boot-3.1.1", "code": "public class ErrorPageFilter extends Object implements jakarta.servlet.Filter, ErrorPageRegistry, org.springframework.core.Ordered {\n\t// Adds error pages that will be used when handling exceptions.\n\tvoid addErrorPages(ErrorPage... errorPages);\n\tvoid destroy();\n\tvoid doFilter(jakarta.servlet.ServletRequest request, jakarta.servlet.ServletResponse response, jakarta.servlet.FilterChain chain);\n}", "des": "A Servlet Filter that provides an ErrorPageRegistry for non-embedded applications (i.e."}
{"index": 13864, "repo": "spring-boot-3.1.1", "code": "public class FailureAnalysis extends Object {\n\t// Returns the action, if any, to be taken to address the failure.\n\tString getAction();\n\t// Returns the cause of the failure.\n\tThrowable getCause();\n\t// Returns a description of the failure.\n\tString getDescription();\n}", "des": "The result of analyzing a failure."}
{"index": 13865, "repo": "spring-boot-3.1.1", "code": "public class FilterRegistrationBean<T extends jakarta.servlet.Filter> extends AbstractFilterRegistrationBean<T> {\n\t// Return the Filter to be registered.\n\tT getFilter();\n\t// Set the filter to be registered.\n\tvoid setFilter(T filter);\n}", "des": "A ServletContextInitializer to register Filters in a Servlet 3.0+ container."}
{"index": 13866, "repo": "spring-boot-3.1.1", "code": "@ImportRuntimeHints(org.springframework.boot.info.GitProperties.GitPropertiesRuntimeHints.class) public class GitProperties extends InfoProperties {\n\t// Return the name of the branch or null.\n\tString getBranch();\n\t// Return the full id of the commit or null.\n\tString getCommitId();\n\t// Return the timestamp of the commit or null.\n\tInstant getCommitTime();\n\t// Return the abbreviated id of the commit or null.\n\tString getShortCommitId();\n}", "des": "Provide git-related information such as commit id and time."}
{"index": 13867, "repo": "spring-boot-3.1.1", "code": "public enum GracefulShutdownResult extends Enum<GracefulShutdownResult> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic GracefulShutdownResult valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic GracefulShutdownResult[] values();\n}", "des": "The result of a graceful shutdown request."}
{"index": 13868, "repo": "spring-boot-3.1.1", "code": "public class GsonJsonParser extends AbstractJsonParser {\n\t// Parse the specified JSON string into a List.\n\tList<Object> parseList(String json);\n\t// Parse the specified JSON string into a Map.\n\tMap<String,Object> parseMap(String json);\n}", "des": "Thin wrapper to adapt Gson to a JsonParser."}
{"index": 13869, "repo": "spring-boot-3.1.1", "code": "public class HikariDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<com.zaxxer.hikari.HikariDataSource> {\n\t// Return the current number of active connections that have been allocated from the data source or null if that information is not available.\n\tInteger getActive();\n\t// The default auto-commit state of connections created by this pool.\n\tBoolean getDefaultAutoCommit();\n\t// Return the number of established but idle connections.\n\tInteger getIdle();\n}", "des": "DataSourcePoolMetadata for a Hikari DataSource."}
{"index": 13870, "repo": "spring-boot-3.1.1", "code": "public class HttpWebServiceMessageSenderBuilder extends Object {\n\t// Build the WebServiceMessageSender instance.\n\torg.springframework.ws.transport.WebServiceMessageSender build();\n}", "des": "WebServiceMessageSender builder that can detect a suitable HTTP library based on the classpath."}
{"index": 13871, "repo": "spring-boot-3.1.1", "code": "public final class ImportCandidates extends Object implements Iterable<String> {\n\t// Returns the list of loaded import candidates.\n\tList<String> getCandidates();\n\tIterator<String> iterator();\n\t// Loads the names of import candidates from the classpath.\n\tstatic ImportCandidates load(Class<?> annotation, ClassLoader classLoader);\n}", "des": "Contains @Configuration import candidates, usually auto-configurations."}
{"index": 13872, "repo": "spring-boot-3.1.1", "code": "public class InactiveConfigDataAccessException extends ConfigDataException {\n\t// Return the ConfigDataResource of the property source or null if the source was not loaded from ConfigData.\n\tConfigDataResource getLocation();\n\t// Return the origin or the property or null.\n\tOrigin getOrigin();\n\t// Return the name of the property.\n\tString getPropertyName();\n\t// Return the inactive property source that contained the property.\n\torg.springframework.core.env.PropertySource<?> getPropertySource();\n}", "des": "Exception thrown when an attempt is made to resolve a property against an inactive ConfigData property source."}
{"index": 13873, "repo": "spring-boot-3.1.1", "code": "public class InfoProperties extends Object implements Iterable<InfoProperties.Entry> {\n\t// Return the value of the specified property or null.\n\tString get(String key);\n\t// Return the value of the specified property as an Instant or null if the value is not a valid Long representation of an epoch time.\n\tInstant getInstant(String key);\n\tIterator<InfoProperties.Entry> iterator();\n\t// Return a PropertySource of this instance.\n\torg.springframework.core.env.PropertySource<?> toPropertySource();\n}", "des": "Base class for components exposing unstructured data with dedicated methods for well known keys."}
{"index": 13874, "repo": "spring-boot-3.1.1", "code": "public class Instantiator<T> extends Object {\n\t// Instantiate the given set of class name, injecting constructor arguments as necessary.\n\tList<T> instantiate(ClassLoader classLoader, Collection<String> names);\n\t// Instantiate the given set of class name, injecting constructor arguments as necessary.\n\tList<T> instantiate(Collection<String> names);\n\t// Instantiate the given set of classes, injecting constructor arguments as necessary.\n\tList<T> instantiateTypes(Collection<Class<?>> types);\n}", "des": "Simple factory used to instantiate objects by injecting available parameters."}
{"index": 13875, "repo": "spring-boot-3.1.1", "code": "public static interface Instantiator.AvailableParameters {\n\t// Add a parameter with an instance value.\n\tvoid add(Class<?> type, Object instance);\n\t// Add a parameter with an instance factory.\n\tvoid add(Class<?> type, Function<Class<?>,Object> factory);\n}", "des": "Callback used to register available parameters."}
{"index": 13876, "repo": "spring-boot-3.1.1", "code": "public class InvalidConfigDataPropertyException extends ConfigDataException {\n\t// Return the ConfigDataResource of the invalid property or null if the source was not loaded from ConfigData.\n\tConfigDataResource getLocation();\n\t// Return source property that caused the exception.\n\tConfigurationProperty getProperty();\n\t// Return the replacement property that should be used instead or null if not replacement is available.\n\tConfigurationPropertyName getReplacement();\n}", "des": "Exception thrown if an invalid property is found when processing config data."}
{"index": 13877, "repo": "spring-boot-3.1.1", "code": "public class InvalidConfigurationPropertyValueException extends RuntimeException {\n\t// Return the name of the property.\n\tString getName();\n\t// Return the reason why the value is invalid.\n\tString getReason();\n\t// Return the invalid value, can be null.\n\tObject getValue();\n}", "des": "Exception thrown when a configuration property value is invalid."}
{"index": 13878, "repo": "spring-boot-3.1.1", "code": "public interface IterableConfigurationPropertySource extends ConfigurationPropertySource, Iterable<ConfigurationPropertyName> {\n\t// Returns if the source contains any descendants of the specified name.\n\tdefault ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName name);\n\t// Return a filtered variant of this source, containing only names that match the given Predicate.\n\tdefault IterableConfigurationPropertySource filter(Predicate<ConfigurationPropertyName> filter);\n}", "des": "A ConfigurationPropertySource with a fully Iterable set of entries."}
{"index": 13879, "repo": "spring-boot-3.1.1", "code": "public class JacksonJsonParser extends AbstractJsonParser {\n\t// Parse the specified JSON string into a List.\n\tList<Object> parseList(String json);\n\t// Parse the specified JSON string into a Map.\n\tMap<String,Object> parseMap(String json);\n}", "des": "Thin wrapper to adapt Jackson 2 ObjectMapper to JsonParser."}
{"index": 13880, "repo": "spring-boot-3.1.1", "code": "public class JavaLoggingSystem extends AbstractLoggingSystem {\n\t// Reset the logging system to be limit output.\n\tvoid beforeInitialize();\n\t// Clean up the logging system.\n\tvoid cleanUp();\n\t// Returns the current configuration for a LoggingSystem's logger.\n\tLoggerConfiguration getLoggerConfiguration(String loggerName);\n\t// Returns a collection of the current configuration for all a LoggingSystem's loggers.\n\tList<LoggerConfiguration> getLoggerConfigurations();\n}", "des": "LoggingSystem for java.util.logging."}
{"index": 13881, "repo": "spring-boot-3.1.1", "code": "public enum JavaVersion extends Enum<JavaVersion> {\n\t// Returns the JavaVersion of the current runtime.\n\tstatic JavaVersion getJavaVersion();\n\t// Return if this version is equal to or newer than a given version.\n\tboolean isEqualOrNewerThan(JavaVersion version);\n\t// Return if this version is older than a given version.\n\tboolean isOlderThan(JavaVersion version);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic JavaVersion valueOf(String name);\n}", "des": "Known Java versions."}
{"index": 13882, "repo": "spring-boot-3.1.1", "code": "public class JettyServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableJettyWebServerFactory, org.springframework.context.ResourceLoaderAware {\n\t// Add Configurations that will be applied to the WebAppContext before the server is started.\n\tvoid addConfigurations(org.eclipse.jetty.webapp.Configuration... configurations);\n\t// Add Jetty's DefaultServlet to the given WebAppContext.\n\tprotected final void addDefaultServlet(org.eclipse.jetty.webapp.WebAppContext context);\n}", "des": "ServletWebServerFactory that can be used to create a JettyWebServer."}
{"index": 13883, "repo": "spring-boot-3.1.1", "code": "public class JettyWebServer extends Object implements WebServer {\n\t// Return the port this server is listening on.\n\tint getPort();\n\t// Returns access to the underlying Jetty Server.\n\torg.eclipse.jetty.server.Server getServer();\n\t// Initiates a graceful shutdown of the web server.\n\tvoid shutDownGracefully(GracefulShutdownCallback callback);\n\t// Starts the web server.\n\tvoid start();\n\t// Stops the web server.\n\tvoid stop();\n}", "des": "WebServer that can be used to control a Jetty web server."}
{"index": 13884, "repo": "spring-boot-3.1.1", "code": "public class JksSslStoreBundle extends Object implements SslStoreBundle {\n\t// Return a key store generated from the trust material or null.\n\tKeyStore getKeyStore();\n\t// Return the password for the key in the key store or null.\n\tString getKeyStorePassword();\n\t// Return a trust store generated from the trust material or null.\n\tKeyStore getTrustStore();\n}", "des": "SslStoreBundle backed by a Java keystore."}
{"index": 13885, "repo": "spring-boot-3.1.1", "code": "public record JksSslStoreDetails(String type, String provider, String location, String password) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Factory method to create a new JksSslStoreDetails instance for the given location.\n\tstatic JksSslStoreDetails forLocation(String location);\n\t// Returns the value of the location record component.\n\tString location();\n\t// Returns the value of the password record component.\n\tString password();\n}", "des": "Details for an individual trust or key store in a JksSslStoreBundle."}
{"index": 13886, "repo": "spring-boot-3.1.1", "code": "public static enum JsonComponent.Scope extends Enum<JsonComponent.Scope> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic JsonComponent.Scope valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic JsonComponent.Scope[] values();\n}", "des": "The various scopes under which a serializer/deserializer can be registered."}
{"index": 13887, "repo": "spring-boot-3.1.1", "code": "public final class JsonMixinModuleEntries extends Object {\n\t// Create an instance using the specified JsonMixinModuleEntries.Builder.\n\tstatic JsonMixinModuleEntries create(Consumer<JsonMixinModuleEntries.Builder> mixins);\n\t// Perform an action on each entry defined by this instance.\n\tvoid doWithEntry(ClassLoader classLoader, BiConsumer<Class<?>,Class<?>> action);\n}", "des": "Provide the mapping of json mixin class to consider."}
{"index": 13888, "repo": "spring-boot-3.1.1", "code": "public static class JsonMixinModuleEntries.Builder extends Object {\n\t// Add a mapping for the specified classes.\n\tJsonMixinModuleEntries.Builder and(Class<?> type, Class<?> mixinClass);\n\t// Add a mapping for the specified class names.\n\tJsonMixinModuleEntries.Builder and(String typeClassName, String mixinClassName);\n}", "des": "Builder for JsonMixinModuleEntries."}
{"index": 13889, "repo": "spring-boot-3.1.1", "code": "public interface JsonParser {\n\t// Parse the specified JSON string into a List.\n\tList<Object> parseList(String json);\n\t// Parse the specified JSON string into a Map.\n\tMap<String,Object> parseMap(String json);\n}", "des": "Parser that can read JSON formatted strings into Maps or Lists."}
{"index": 13890, "repo": "spring-boot-3.1.1", "code": "public class Jsp extends Object {\n\t// Return the class name of the servlet to use for JSPs.\n\tString getClassName();\n\t// Return the init parameters used to configure the JSP servlet.\n\tMap<String,String> getInitParameters();\n\t// Return whether the JSP servlet is registered.\n\tboolean getRegistered();\n\tvoid setClassName(String className);\n\tvoid setInitParameters(Map<String,String> initParameters);\n\tvoid setRegistered(boolean registered);\n}", "des": "Configuration for the server's JSP servlet."}
{"index": 13891, "repo": "spring-boot-3.1.1", "code": "public final class LambdaSafe extends Object {\n\t// Start a call to a single callback instance, dealing with common generic type concerns and exceptions.\n\tstatic <C, A> LambdaSafe.Callback<C,A> callback(Class<C> callbackType, C callbackInstance, A argument, Object... additionalArguments);\n}", "des": "Utility that can be used to invoke lambdas in a safe way."}
{"index": 13892, "repo": "spring-boot-3.1.1", "code": "public static final class LambdaSafe.Callback<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callback<C,A>> {\n\t// Invoke the callback instance where the callback method returns void.\n\tvoid invoke(Consumer<C> invoker);\n\t// Invoke the callback instance where the callback method returns a result.\n\t<R> LambdaSafe.InvocationResult<R> invokeAnd(Function<C,R> invoker);\n}", "des": "Represents a single callback that can be invoked in a lambda safe way."}
{"index": 13893, "repo": "spring-boot-3.1.1", "code": "public static final class LambdaSafe.Callbacks<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callbacks<C,A>> {\n\t// Invoke the callback instances where the callback method returns void.\n\tvoid invoke(Consumer<C> invoker);\n\t// Invoke the callback instances where the callback method returns a result.\n\t<R> Stream<R> invokeAnd(Function<C,R> invoker);\n}", "des": "Represents a collection of callbacks that can be invoked in a lambda safe way."}
{"index": 13894, "repo": "spring-boot-3.1.1", "code": "public static final class LambdaSafe.InvocationResult<R> extends Object {\n\t// Return the result of the invocation or null if the callback wasn't suitable.\n\tR get();\n\t// Return the result of the invocation or the given fallback if the callback wasn't suitable.\n\tR get(R fallback);\n\t// Return true if a result in present.\n\tboolean hasResult();\n\t// Return an LambdaSafe.InvocationResult instance representing no result.\n\tstatic <R> LambdaSafe.InvocationResult<R> noResult();\n}", "des": "The result of a callback which may be a value, null or absent entirely if the callback wasn't suitable."}
{"index": 13895, "repo": "spring-boot-3.1.1", "code": "protected abstract static class LambdaSafe.LambdaSafeCallback<C,A,SELF extends LambdaSafe.LambdaSafeCallback<C,A,SELF>> extends Object {\n\tprotected final <R> LambdaSafe.InvocationResult<R> invoke(C callbackInstance, Supplier<R> supplier);\n\t// Use the specified logger source to report any lambda failures.\n\tSELF withLogger(Class<?> loggerSource);\n\t// Use the specified logger to report any lambda failures.\n\tSELF withLogger(org.apache.commons.logging.Log logger);\n}", "des": "Abstract base class for lambda safe callbacks."}
{"index": 13896, "repo": "spring-boot-3.1.1", "code": "@FunctionalInterface public interface LazyInitializationExcludeFilter {\n\t// Factory method that creates a filter for the given bean types.\n\tstatic LazyInitializationExcludeFilter forBeanTypes(Class<?>... types);\n\t// Returns true if the specified bean definition should be excluded from having lazy-init automatically set.\n\tboolean isExcluded(String beanName, org.springframework.beans.factory.config.BeanDefinition beanDefinition, Class<?> beanType);\n}", "des": "Filter that can be used to exclude beans definitions from having their lazy-init set by the LazyInitializationBeanFactoryPostProcessor."}
{"index": 13897, "repo": "spring-boot-3.1.1", "code": "public enum LivenessState extends Enum<LivenessState> implements AvailabilityState {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic LivenessState valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic LivenessState[] values();\n}", "des": "\"Liveness\" state of the application."}
{"index": 13898, "repo": "spring-boot-3.1.1", "code": "public class Log4J2LoggingSystem extends AbstractLoggingSystem {\n\t// Reset the logging system to be limit output.\n\tvoid beforeInitialize();\n\t// Clean up the logging system.\n\tvoid cleanUp();\n\t// Get the Spring Environment attached to the given LoggerContext or null if no environment is available.\n\tstatic org.springframework.core.env.Environment getEnvironment(org.apache.logging.log4j.core.LoggerContext loggerContext);\n}", "des": "LoggingSystem for Log4j 2."}
{"index": 13899, "repo": "spring-boot-3.1.1", "code": "public class LogbackLoggingSystem extends AbstractLoggingSystem implements org.springframework.beans.factory.aot.BeanFactoryInitializationAotProcessor {\n\t// Reset the logging system to be limit output.\n\tvoid beforeInitialize();\n\t// Clean up the logging system.\n\tvoid cleanUp();\n\t// Returns the current configuration for a LoggingSystem's logger.\n\tLoggerConfiguration getLoggerConfiguration(String loggerName);\n}", "des": "LoggingSystem for logback."}
{"index": 13900, "repo": "spring-boot-3.1.1", "code": "public class LogFile extends Object {\n\t// Apply log file details to LOG_PATH and LOG_FILE map entries.\n\tvoid applyTo(Properties properties);\n\t// Apply log file details to LOG_PATH and LOG_FILE system properties.\n\tvoid applyToSystemProperties();\n\t// Get a LogFile from the given Spring Environment.\n\tstatic LogFile get(org.springframework.core.env.PropertyResolver propertyResolver);\n}", "des": "A reference to a log output file."}
{"index": 13901, "repo": "spring-boot-3.1.1", "code": "public final class LoggerConfiguration extends Object {\n\tboolean equals(Object obj);\n\t// Returns the configured level of the logger.\n\tLogLevel getConfiguredLevel();\n\t// Returns the effective level of the logger.\n\tLogLevel getEffectiveLevel();\n\t// Return the level configuration, considering inherited loggers.\n\tLoggerConfiguration.LevelConfiguration getLevelConfiguration();\n}", "des": "Immutable class that represents the configuration of a LoggingSystem's logger."}
{"index": 13902, "repo": "spring-boot-3.1.1", "code": "public static enum LoggerConfiguration.ConfigurationScope extends Enum<LoggerConfiguration.ConfigurationScope> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic LoggerConfiguration.ConfigurationScope valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic LoggerConfiguration.ConfigurationScope[] values();\n}", "des": "Supported logger configurations scopes."}
{"index": 13903, "repo": "spring-boot-3.1.1", "code": "public static final class LoggerConfiguration.LevelConfiguration extends Object {\n\tboolean equals(Object obj);\n\t// Return the actual level value if possible.\n\tLogLevel getLevel();\n\t// Return the name of the level.\n\tString getName();\n\t// Return if this is a custom level and cannot be represented by LogLevel.\n\tboolean isCustom();\n\t// Create a new LoggerConfiguration.LevelConfiguration instance of the given LogLevel.\n\tstatic LoggerConfiguration.LevelConfiguration of(LogLevel logLevel);\n}", "des": "Logger level configuration."}
{"index": 13904, "repo": "spring-boot-3.1.1", "code": "public class LoggingApplicationListener extends Object implements org.springframework.context.event.GenericApplicationListener {\n\tint getOrder();\n\t// Initialize the logging system according to preferences expressed through the Environment and the classpath.\n\tprotected void initialize(org.springframework.core.env.ConfigurableEnvironment environment, ClassLoader classLoader);\n}", "des": "An ApplicationListener that configures the LoggingSystem."}
{"index": 13905, "repo": "spring-boot-3.1.1", "code": "public abstract class LoggingSystem extends Object {\n\t// Reset the logging system to be limit output.\n\tabstract void beforeInitialize();\n\t// Clean up the logging system.\n\tvoid cleanUp();\n\t// Detect and return the logging system in use.\n\tstatic LoggingSystem get(ClassLoader classLoader);\n\t// Returns the current configuration for a LoggingSystem's logger.\n\tLoggerConfiguration getLoggerConfiguration(String loggerName);\n}", "des": "Common abstraction over logging systems."}
{"index": 13906, "repo": "spring-boot-3.1.1", "code": "public interface LoggingSystemFactory {\n\t// Return a LoggingSystemFactory backed by spring.factories.\n\tstatic LoggingSystemFactory fromSpringFactories();\n\t// Return a logging system implementation or null if no logging system is available.\n\tLoggingSystem getLoggingSystem(ClassLoader classLoader);\n}", "des": "Factory class used by LoggingSystem.get(ClassLoader) to find an actual implementation."}
{"index": 13907, "repo": "spring-boot-3.1.1", "code": "public enum LogLevel extends Enum<LogLevel> {\n\t// Log a message to the given logger at this level.\n\tvoid log(org.apache.commons.logging.Log logger, Object message);\n\t// Log a message to the given logger at this level.\n\tvoid log(org.apache.commons.logging.Log logger, Object message, Throwable cause);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic LogLevel valueOf(String name);\n}", "des": "Logging levels supported by a LoggingSystem."}
{"index": 13908, "repo": "spring-boot-3.1.1", "code": "public class MapConfigurationPropertySource extends Object implements IterableConfigurationPropertySource {\n\t// Return a single ConfigurationProperty from the source or null if no property can be found.\n\tConfigurationProperty getConfigurationProperty(ConfigurationPropertyName name);\n\t// Return the underlying source that is actually providing the properties.\n\tObject getUnderlyingSource();\n\t// Return an iterator for the names managed by this source.\n\tIterator<ConfigurationPropertyName> iterator();\n}", "des": "A ConfigurationPropertySource backed by a Map and using standard name mapping rules."}
{"index": 13909, "repo": "spring-boot-3.1.1", "code": "public interface MethodValidationExcludeFilter {\n\t// Factory method to create a MethodValidationExcludeFilter that excludes classes by annotation found using an inherited annotations search strategy.\n\tstatic MethodValidationExcludeFilter byAnnotation(Class<? extends Annotation> annotationType);\n}", "des": "A filter for excluding types from method validation."}
{"index": 13910, "repo": "spring-boot-3.1.1", "code": "public sealed class MimeMappings extends Object implements Iterable<MimeMappings.Mapping> {\n\t// Add a new mime mapping.\n\tString add(String extension, String mimeType);\n\tboolean equals(Object obj);\n\t// Get a mime mapping for the given extension.\n\tString get(String extension);\n\t// Returns all defined mappings.\n\tCollection<MimeMappings.Mapping> getAll();\n\tfinal Iterator<MimeMappings.Mapping> iterator();\n}", "des": "Simple server-independent abstraction for mime mappings."}
{"index": 13911, "repo": "spring-boot-3.1.1", "code": "public class MultipartConfigFactory extends Object {\n\t// Create a new MultipartConfigElement instance.\n\tjakarta.servlet.MultipartConfigElement createMultipartConfig();\n\t// Sets the size threshold after which files will be written to disk.\n\tvoid setFileSizeThreshold(org.springframework.util.unit.DataSize fileSizeThreshold);\n\t// Sets the directory location where files will be stored.\n\tvoid setLocation(String location);\n}", "des": "Factory that can be used to create a MultipartConfigElement."}
{"index": 13912, "repo": "spring-boot-3.1.1", "code": "public class MustacheView extends org.springframework.web.reactive.result.view.AbstractUrlBasedView {\n\tboolean checkResourceExists(Locale locale);\n\tprotected reactor.core.publisher.Mono<Void> renderInternal(Map<String,Object> model, org.springframework.http.MediaType contentType, org.springframework.web.server.ServerWebExchange exchange);\n\t// Set the charset used for reading Mustache template files.\n\tvoid setCharset(String charset);\n}", "des": "Spring WebFlux View using the Mustache template engine."}
{"index": 13913, "repo": "spring-boot-3.1.1", "code": "public class MustacheView extends org.springframework.web.servlet.view.AbstractTemplateView {\n\tboolean checkResource(Locale locale);\n\tprotected void renderMergedTemplateModel(Map<String,Object> model, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\t// Set the charset used for reading Mustache template files.\n\tvoid setCharset(String charset);\n}", "des": "Spring MVC View using the Mustache template engine."}
{"index": 13914, "repo": "spring-boot-3.1.1", "code": "public class MutuallyExclusiveConfigurationPropertiesException extends RuntimeException {\n\t// Return the names of the properties that have been configured.\n\tSet<String> getConfiguredNames();\n\t// Return the names of the properties that are mutually exclusive.\n\tSet<String> getMutuallyExclusiveNames();\n\t// Throw a new MutuallyExclusiveConfigurationPropertiesException if multiple non-null values are defined in a set of entries.\n\tstatic void throwIfMultipleNonNullValuesIn(Consumer<Map<String,Object>> entries);\n}", "des": "Exception thrown when more than one mutually exclusive configuration property has been configured."}
{"index": 13915, "repo": "spring-boot-3.1.1", "code": "public class NettyReactiveWebServerFactory extends AbstractReactiveWebServerFactory {\n\t// Add NettyRouteProviders that should be applied, in order, before the handler for the Spring application.\n\tvoid addRouteProviders(NettyRouteProvider... routeProviders);\n\t// Add NettyServerCustomizers that should be applied while building the server.\n\tvoid addServerCustomizers(NettyServerCustomizer... serverCustomizers);\n}", "des": "ReactiveWebServerFactory that can be used to create NettyWebServers."}
{"index": 13916, "repo": "spring-boot-3.1.1", "code": "public class NettyRSocketServer extends Object implements RSocketServer {\n\t// Return the address this server is listening on.\n\tInetSocketAddress address();\n\t// Starts the RSocket server.\n\tvoid start();\n\t// Stops the RSocket server.\n\tvoid stop();\n}", "des": "RSocketServer that is based on a Reactor Netty server."}
{"index": 13917, "repo": "spring-boot-3.1.1", "code": "public class NettyRSocketServerFactory extends Object implements RSocketServerFactory, ConfigurableRSocketServerFactory {\n\t// Add RSocketServerCustomizers that should be called to configure the RSocketServer.\n\tvoid addRSocketServerCustomizers(RSocketServerCustomizer... rSocketServerCustomizers);\n\t// Gets a new fully configured but paused RSocketServer instance.\n\tNettyRSocketServer create(io.rsocket.SocketAcceptor socketAcceptor);\n}", "des": "RSocketServerFactory that can be used to create RSocketServers backed by Netty."}
{"index": 13918, "repo": "spring-boot-3.1.1", "code": "public class NettyWebServer extends Object implements WebServer {\n\t// Return the port this server is listening on.\n\tint getPort();\n\tvoid setRouteProviders(List<NettyRouteProvider> routeProviders);\n\t// Initiates a graceful shutdown of the web server.\n\tvoid shutDownGracefully(GracefulShutdownCallback callback);\n\t// Starts the web server.\n\tvoid start();\n\t// Stops the web server.\n\tvoid stop();\n}", "des": "WebServer that can be used to control a Reactor Netty web server."}
{"index": 13919, "repo": "spring-boot-3.1.1", "code": "public class OracleUcpDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<oracle.ucp.jdbc.PoolDataSource> {\n\t// Return the current number of active connections that have been allocated from the data source or null if that information is not available.\n\tInteger getActive();\n\t// The default auto-commit state of connections created by this pool.\n\tBoolean getDefaultAutoCommit();\n\t// Return the number of established but idle connections.\n\tInteger getIdle();\n}", "des": "DataSourcePoolMetadata for an Oracle UCP DataSource."}
{"index": 13920, "repo": "spring-boot-3.1.1", "code": "public interface Origin {\n\t// Find the Origin that an object originated from.\n\tstatic Origin from(Object source);\n\t// Return the parent origin for this instance if there is one.\n\tdefault Origin getParent();\n\t// Find the parents of the Origin that an object originated from.\n\tstatic List<Origin> parentsFrom(Object source);\n}", "des": "Interface that uniquely represents the origin of an item."}
{"index": 13921, "repo": "spring-boot-3.1.1", "code": "@FunctionalInterface public interface OriginLookup<K> {\n\t// Attempt to look up the origin from the given source.\n\tstatic <K> Origin getOrigin(Object source, K key);\n\t// Return the origin of the given key or null if the origin cannot be determined.\n\tOrigin getOrigin(K key);\n\t// Return the implicit prefix that is applied when performing a lookup or null if no prefix is used.\n\tdefault String getPrefix();\n}", "des": "An interface that may be implemented by an object that can lookup Origin information from a given key."}
{"index": 13922, "repo": "spring-boot-3.1.1", "code": "public final class OriginTrackedMapPropertySource extends org.springframework.core.env.MapPropertySource implements OriginLookup<String> {\n\t// Return the origin of the given key or null if the origin cannot be determined.\n\tOrigin getOrigin(String name);\n\tObject getProperty(String name);\n\t// Return true if this lookup is immutable and has contents that will never change.\n\tboolean isImmutable();\n}", "des": "OriginLookup backed by a Map containing OriginTrackedValues."}
{"index": 13923, "repo": "spring-boot-3.1.1", "code": "public class OriginTrackedValue extends Object implements OriginProvider {\n\tboolean equals(Object obj);\n\t// Return the source origin or null if the origin is not known.\n\tOrigin getOrigin();\n\t// Return the tracked value.\n\tObject getValue();\n\tstatic OriginTrackedValue of(Object value);\n\t// Create an OriginTrackedValue containing the specified value and origin.\n\tstatic OriginTrackedValue of(Object value, Origin origin);\n}", "des": "A wrapper for an Object value and Origin."}
{"index": 13924, "repo": "spring-boot-3.1.1", "code": "public class PemSslStoreBundle extends Object implements SslStoreBundle {\n\t// Return a key store generated from the trust material or null.\n\tKeyStore getKeyStore();\n\t// Return the password for the key in the key store or null.\n\tString getKeyStorePassword();\n\t// Return a trust store generated from the trust material or null.\n\tKeyStore getTrustStore();\n}", "des": "SslStoreBundle backed by PEM-encoded certificates and private keys."}
{"index": 13925, "repo": "spring-boot-3.1.1", "code": "public record PemSslStoreDetails(String type, String certificate, String privateKey, String privateKeyPassword) extends Record {\n\t// Returns the value of the certificate record component.\n\tString certificate();\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Factory method to create a new PemSslStoreDetails instance for the given certificate.\n\tstatic PemSslStoreDetails forCertificate(String certificate);\n}", "des": "Details for an individual trust or key store in a PemSslStoreBundle."}
{"index": 13926, "repo": "spring-boot-3.1.1", "code": "public enum PeriodStyle extends Enum<PeriodStyle> {\n\t// Detect the style from the given source value.\n\tstatic PeriodStyle detect(String value);\n\t// Detect the style then parse the value to return a period.\n\tstatic Period detectAndParse(String value);\n\t// Detect the style then parse the value to return a period.\n\tstatic Period detectAndParse(String value, ChronoUnit unit);\n\tprotected final Matcher matcher(String value);\n\tprotected boolean matches(String value);\n}", "des": "A standard set of Period units."}
{"index": 13927, "repo": "spring-boot-3.1.1", "code": "public class PlatformPlaceholderDatabaseDriverResolver extends Object {\n\t// Resolves the placeholders in the given values, replacing them with the given platform.\n\tList<String> resolveAll(String platform, String... values);\n\t// Resolves the placeholders in the given values, replacing them with the platform derived from the DatabaseDriver of the given dataSource.\n\tList<String> resolveAll(DataSource dataSource, String... values);\n}", "des": "Utility class that can resolve placeholder text with the actual DatabaseDriver platform."}
{"index": 13928, "repo": "spring-boot-3.1.1", "code": "public class PortInUseException extends WebServerException {\n\t// Returns the port that was in use.\n\tint getPort();\n\t// Perform an action if the given exception was caused by a specific exception type.\n\tstatic <E extends Exception>void ifCausedBy(Exception ex, Class<E> causedBy, Consumer<E> action);\n\t// Perform an action if the given exception was caused by a \"port in use\" BindException.\n\tstatic void ifPortBindingException(Exception ex, Consumer<BindException> action);\n}", "des": "A PortInUseException is thrown when a web server fails to start due to a port already being in use."}
{"index": 13929, "repo": "spring-boot-3.1.1", "code": "public class Profiles extends Object implements Iterable<String> {\n\t// Return the accepted profiles.\n\tList<String> getAccepted();\n\t// Return the active profiles.\n\tList<String> getActive();\n\t// Return the default profiles.\n\tList<String> getDefault();\n\t// Return if the given profile is active.\n\tboolean isAccepted(String profile);\n\t// Return an iterator for all accepted profiles.\n\tIterator<String> iterator();\n}", "des": "Provides access to environment profiles that have either been set directly on the Environment or will be set based on configuration data property values."}
{"index": 13930, "repo": "spring-boot-3.1.1", "code": "public class PropertiesPropertySourceLoader extends Object implements PropertySourceLoader {\n\t// Returns the file extensions that the loader supports (excluding the '.').\n\tString[] getFileExtensions();\n\t// Load the resource into one or more property sources.\n\tList<org.springframework.core.env.PropertySource<?>> load(String name, org.springframework.core.io.Resource resource);\n}", "des": "Strategy to load '.properties' files into a PropertySource."}
{"index": 13931, "repo": "spring-boot-3.1.1", "code": "public final class PropertyMapper extends Object {\n\t// Return a new PropertyMapper instance that applies the given PropertyMapper.SourceOperator to every source.\n\tPropertyMapper alwaysApplying(PropertyMapper.SourceOperator operator);\n\t// Return a new PropertyMapper instance that applies whenNonNull to every source.\n\tPropertyMapper alwaysApplyingWhenNonNull();\n}", "des": "Utility that can be used to map values from a supplied source to a destination."}
{"index": 13932, "repo": "spring-boot-3.1.1", "code": "public static final class PropertyMapper.Source<T> extends Object {\n\t// Return an adapted version of the source changed through the given adapter function.\n\t<R> PropertyMapper.Source<R> as(Function<T,R> adapter);\n\t// Return an adapted version of the source with Integer type.\n\t<R extends Number>PropertyMapper.Source<Integer> asInt(Function<T,R> adapter);\n\t// Complete the mapping by passing any non-filtered value to the specified consumer.\n\tvoid to(Consumer<T> consumer);\n}", "des": "A source that is in the process of being mapped."}
{"index": 13933, "repo": "spring-boot-3.1.1", "code": "public interface PropertySourceLoader {\n\t// Returns the file extensions that the loader supports (excluding the '.').\n\tString[] getFileExtensions();\n\t// Load the resource into one or more property sources.\n\tList<org.springframework.core.env.PropertySource<?>> load(String name, org.springframework.core.io.Resource resource);\n}", "des": "Strategy interface located through SpringFactoriesLoader and used to load a PropertySource."}
{"index": 13934, "repo": "spring-boot-3.1.1", "code": "public class PropertySourceOrigin extends Object implements Origin {\n\t// Get an Origin for the given PropertySource and propertyName.\n\tstatic Origin get(org.springframework.core.env.PropertySource<?> propertySource, String name);\n\t// Return the property name that was used when obtaining the original value from the property source.\n\tString getPropertyName();\n\t// Return the origin PropertySource.\n\torg.springframework.core.env.PropertySource<?> getPropertySource();\n}", "des": "Origin from a PropertySource."}
{"index": 13935, "repo": "spring-boot-3.1.1", "code": "public class R2dbcScriptDatabaseInitializer extends AbstractScriptDatabaseInitializer {\n\t// Returns whether the database that is to be initialized is embedded.\n\tprotected boolean isEmbeddedDatabase();\n\t// Initialize the database by running the given scripts.\n\tprotected void runScripts(AbstractScriptDatabaseInitializer.Scripts scripts);\n}", "des": "An InitializingBean that initializes a database represented by an R2DBC ConnectionFactory."}
{"index": 13936, "repo": "spring-boot-3.1.1", "code": "public class ReactiveWebServerApplicationContext extends GenericReactiveWebApplicationContext implements ConfigurableWebServerApplicationContext {\n\tprotected void doClose();\n\t// Return the HttpHandler that should be used to process the reactive web server.\n\tprotected org.springframework.http.server.reactive.HttpHandler getHttpHandler();\n\t// Returns the namespace of the web server application context or null if no namespace has been set.\n\tString getServerNamespace();\n}", "des": "A GenericReactiveWebApplicationContext that can be used to bootstrap itself from a contained ReactiveWebServerFactory bean."}
{"index": 13937, "repo": "spring-boot-3.1.1", "code": "public enum ReadinessState extends Enum<ReadinessState> implements AvailabilityState {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ReadinessState valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ReadinessState[] values();\n}", "des": "\"Readiness\" state of the application."}
{"index": 13938, "repo": "spring-boot-3.1.1", "code": "public abstract class RegistrationBean extends Object implements ServletContextInitializer, org.springframework.core.Ordered {\n\t// Return a description of the registration.\n\tprotected abstract String getDescription();\n\t// Get the order of the registration bean.\n\tint getOrder();\n\t// Return if the registration is enabled.\n\tboolean isEnabled();\n}", "des": "Base class for Servlet 3.0+ based registration beans."}
{"index": 13939, "repo": "spring-boot-3.1.1", "code": "public class ResourceBanner extends Object implements Banner {\n\t// Return the application title that should be used for the source class.\n\tprotected String getApplicationTitle(Class<?> sourceClass);\n\tprotected String getApplicationVersion(Class<?> sourceClass);\n\tprotected String getBootVersion();\n}", "des": "Banner implementation that prints from a source text Resource."}
{"index": 13940, "repo": "spring-boot-3.1.1", "code": "public class RestTemplateBuilder extends Object {\n\t// Add RestTemplateCustomizers that should be applied to the RestTemplate.\n\tRestTemplateBuilder additionalCustomizers(Collection<? extends RestTemplateCustomizer> customizers);\n\t// Add RestTemplateCustomizers that should be applied to the RestTemplate.\n\tRestTemplateBuilder additionalCustomizers(RestTemplateCustomizer... customizers);\n}", "des": "Builder that can be used to configure and create a RestTemplate."}
{"index": 13941, "repo": "spring-boot-3.1.1", "code": "public class RootUriTemplateHandler extends Object implements org.springframework.web.util.UriTemplateHandler {\n\t// Add a RootUriTemplateHandler instance to the given RestTemplate.\n\tstatic RootUriTemplateHandler addTo(org.springframework.web.client.RestTemplate restTemplate, String rootUri);\n\tURI expand(String uriTemplate, Object... uriVariables);\n\tURI expand(String uriTemplate, Map<String,?> uriVariables);\n\tString getRootUri();\n}", "des": "UriTemplateHandler to set the root for URI that starts with '/'."}
{"index": 13942, "repo": "spring-boot-3.1.1", "code": "public interface RSocketServer {\n\t// Return the address this server is listening on.\n\tInetSocketAddress address();\n\t// Starts the RSocket server.\n\tvoid start();\n\t// Stops the RSocket server.\n\tvoid stop();\n}", "des": "Simple interface that represents a fully configured RSocket server."}
{"index": 13943, "repo": "spring-boot-3.1.1", "code": "public static enum RSocketServer.Transport extends Enum<RSocketServer.Transport> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RSocketServer.Transport valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RSocketServer.Transport[] values();\n}", "des": "Choice of transport protocol for the RSocket server."}
{"index": 13944, "repo": "spring-boot-3.1.1", "code": "public class RSocketServerInitializedEvent extends org.springframework.context.ApplicationEvent {\n\t// Access the RSocketServer.\n\tRSocketServer getServer();\n\t// Access the source of the event (an RSocketServer).\n\tRSocketServer getSource();\n}", "des": "Event to be published after the application context is refreshed and the RSocketServer is ready."}
{"index": 13945, "repo": "spring-boot-3.1.1", "code": "public enum SchemaManagement extends Enum<SchemaManagement> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SchemaManagement valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SchemaManagement[] values();\n}", "des": "An enumeration of the available schema management options."}
{"index": 13946, "repo": "spring-boot-3.1.1", "code": "public class ServletListenerRegistrationBean<T extends EventListener> extends RegistrationBean {\n\t// Return a description of the registration.\n\tprotected String getDescription();\n\t// Return the listener to be registered.\n\tT getListener();\n\t// Return the supported types for this registration.\n\tstatic Set<Class<?>> getSupportedTypes();\n\t// Returns true if the specified listener is one of the supported types.\n\tstatic boolean isSupportedType(EventListener listener);\n}", "des": "A ServletContextInitializer to register EventListeners in a Servlet 3.0+ container."}
{"index": 13947, "repo": "spring-boot-3.1.1", "code": "public class ServletRegistrationBean<T extends jakarta.servlet.Servlet> extends DynamicRegistrationBean<jakarta.servlet.ServletRegistration.Dynamic> {\n\tprotected jakarta.servlet.ServletRegistration.Dynamic addRegistration(String description, jakarta.servlet.ServletContext servletContext);\n\t// Add URL mappings, as defined in the Servlet specification, for the servlet.\n\tvoid addUrlMappings(String... urlMappings);\n}", "des": "A ServletContextInitializer to register Servlets in a Servlet 3.0+ container."}
{"index": 13948, "repo": "spring-boot-3.1.1", "code": "public class ServletWebServerApplicationContext extends org.springframework.web.context.support.GenericWebApplicationContext implements ConfigurableWebServerApplicationContext {\n\tprotected void doClose();\n\tprotected org.springframework.core.io.Resource getResourceByPath(String path);\n\t// Returns the namespace of the web server application context or null if no namespace has been set.\n\tString getServerNamespace();\n\tjakarta.servlet.ServletConfig getServletConfig();\n}", "des": "A WebApplicationContext that can be used to bootstrap itself from a contained ServletWebServerFactory bean."}
{"index": 13949, "repo": "spring-boot-3.1.1", "code": "public class Session extends Object {\n\tSession.Cookie getCookie();\n\t// Return the directory used to store session data.\n\tFile getStoreDir();\n\tDuration getTimeout();\n\t// Return the session tracking modes.\n\tSet<Session.SessionTrackingMode> getTrackingModes();\n\t// Return whether to persist session data between restarts.\n\tboolean isPersistent();\n\tvoid setPersistent(boolean persistent);\n\tvoid setStoreDir(File storeDir);\n\tvoid setTimeout(Duration timeout);\n}", "des": "Session properties."}
{"index": 13950, "repo": "spring-boot-3.1.1", "code": "public static class Session.Cookie extends Cookie {\n\t// Deprecated, for removal: This API element is subject to removal in a future version. since 3.0.0 without replacement\n\tString getComment();\n\t// Deprecated, for removal: This API element is subject to removal in a future version.\n\tvoid setComment(String comment);\n}", "des": "Session cookie properties."}
{"index": 13951, "repo": "spring-boot-3.1.1", "code": "public static enum Session.SessionTrackingMode extends Enum<Session.SessionTrackingMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Session.SessionTrackingMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Session.SessionTrackingMode[] values();\n}", "des": "Available session tracking modes (mirrors SessionTrackingMode."}
{"index": 13952, "repo": "spring-boot-3.1.1", "code": "public enum Shutdown extends Enum<Shutdown> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Shutdown valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Shutdown[] values();\n}", "des": "Configuration for shutting down a WebServer."}
{"index": 13953, "repo": "spring-boot-3.1.1", "code": "public class SpringApplication extends Object {\n\t// Adds BootstrapRegistryInitializer instances that can be used to initialize the BootstrapRegistry.\n\tvoid addBootstrapRegistryInitializer(BootstrapRegistryInitializer bootstrapRegistryInitializer);\n\t// Add ApplicationContextInitializers to be applied to the Spring ApplicationContext.\n\tvoid addInitializers(org.springframework.context.ApplicationContextInitializer<?>... initializers);\n}", "des": "Class that can be used to bootstrap and launch a Spring application from a Java main method."}
{"index": 13954, "repo": "spring-boot-3.1.1", "code": "public static class SpringApplication.Augmented extends Object {\n\t// Run the application using the given args.\n\tSpringApplication.Running run(String... args);\n\t// Return a new SpringApplication.Augmented instance with additional sources that should be applied when the application runs.\n\tSpringApplication.Augmented with(Class<?>... sources);\n}", "des": "Used to configure and run an augmented SpringApplication where additional configuration should be applied."}
{"index": 13955, "repo": "spring-boot-3.1.1", "code": "public interface SpringApplicationAdminMXBean {\n\t// Return the value of the specified key from the application Environment.\n\tString getProperty(String key);\n\t// Specify if the application runs in an embedded web container.\n\tboolean isEmbeddedWebApplication();\n\t// Specify if the application has fully started and is now ready.\n\tboolean isReady();\n\t// Shutdown the application.\n\tvoid shutdown();\n}", "des": "An MBean contract to control and monitor a running SpringApplication over JMX."}
{"index": 13956, "repo": "spring-boot-3.1.1", "code": "public class SpringApplicationBuilder extends Object {\n\t// Adds BootstrapRegistryInitializer instances that can be used to initialize the BootstrapRegistry.\n\tSpringApplicationBuilder addBootstrapRegistryInitializer(BootstrapRegistryInitializer bootstrapRegistryInitializer);\n\t// Flag to indicate that command line arguments should be added to the environment.\n\tSpringApplicationBuilder addCommandLineProperties(boolean addCommandLineProperties);\n}", "des": "Builder for SpringApplication and ApplicationContext instances with convenient fluent API and context hierarchy support."}
{"index": 13957, "repo": "spring-boot-3.1.1", "code": "public interface SpringApplicationRunListener {\n\t// Called once the application context has been loaded but before it has been refreshed.\n\tdefault void contextLoaded(org.springframework.context.ConfigurableApplicationContext context);\n\t// Called once the ApplicationContext has been created and prepared, but before sources have been loaded.\n\tdefault void contextPrepared(org.springframework.context.ConfigurableApplicationContext context);\n}", "des": "Listener for the SpringApplication run method."}
{"index": 13958, "repo": "spring-boot-3.1.1", "code": "public interface SpringApplicationShutdownHandlers {\n\t// Add an action to the handlers that will be run when the JVM exits.\n\tvoid add(Runnable action);\n\t// Remove a previously added an action so that it no longer runs when the JVM exits.\n\tvoid remove(Runnable action);\n}", "des": "Interface that can be used to add or remove code that should run when the JVM is shutdown."}
{"index": 13959, "repo": "spring-boot-3.1.1", "code": "public abstract class SpringBootServletInitializer extends Object implements org.springframework.web.WebApplicationInitializer {\n\t// Configure the application.\n\tprotected SpringApplicationBuilder configure(SpringApplicationBuilder builder);\n\tprotected org.springframework.web.context.WebApplicationContext createRootApplicationContext(jakarta.servlet.ServletContext servletContext);\n}", "des": "An opinionated WebApplicationInitializer to run a SpringApplication from a traditional WAR deployment."}
{"index": 13960, "repo": "spring-boot-3.1.1", "code": "public class Ssl extends Object {\n\t// Factory method to create an Ssl instance for a specific bundle name.\n\tstatic Ssl forBundle(String bundle);\n\t// Return the name of the SSL bundle to use.\n\tString getBundle();\n\t// Return the location of the certificate in PEM format.\n\tString getCertificate();\n\t// Return the location of the private key for the certificate in PEM format.\n\tString getCertificatePrivateKey();\n\t// Return the supported SSL ciphers.\n\tString[] getCiphers();\n}", "des": "Simple server-independent abstraction for SSL configuration."}
{"index": 13961, "repo": "spring-boot-3.1.1", "code": "public static enum Ssl.ClientAuth extends Enum<Ssl.ClientAuth> {\n\t// Map an optional Ssl.ClientAuth value to a different type.\n\tstatic <R> R map(Ssl.ClientAuth clientAuth, R none, R want, R need);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Ssl.ClientAuth valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Ssl.ClientAuth[] values();\n}", "des": "Client authentication types."}
{"index": 13962, "repo": "spring-boot-3.1.1", "code": "public interface SslBundle {\n\t// Factory method to create a new SSLContext for this bundle.\n\tdefault SSLContext createSslContext();\n\t// Return a reference to the key that should be used for this bundle or SslBundleKey.NONE.\n\tSslBundleKey getKey();\n\t// Return the SslManagerBundle that can be used to access this bundle's key and trust managers.\n\tSslManagerBundle getManagers();\n\t// Return SslOptions that should be applied when establishing the SSL connection.\n\tSslOptions getOptions();\n}", "des": "A bundle of trust material that can be used to establish an SSL connection."}
{"index": 13963, "repo": "spring-boot-3.1.1", "code": "public interface SslBundleKey {\n\t// Assert that the alias is contained in the given keystore.\n\tdefault void assertContainsAlias(KeyStore keyStore);\n\t// Return the alias of the key or null if the key has no alias.\n\tString getAlias();\n\t// Return the password that should be used to access the key or null if no password is required.\n\tString getPassword();\n\t// Factory method to create a new SslBundleKey instance.\n\tstatic SslBundleKey of(String password);\n}", "des": "A reference to a single key obtained via SslBundle."}
{"index": 13964, "repo": "spring-boot-3.1.1", "code": "public interface SslManagerBundle {\n\t// Factory method to create a new SSLContext for the key managers and trust managers managed by this instance.\n\tdefault SSLContext createSslContext(String protocol);\n\t// Factory method to create a new SslManagerBundle backed by the given SslBundle and SslBundleKey.\n\tstatic SslManagerBundle from(SslStoreBundle storeBundle, SslBundleKey key);\n\t// Return the KeyManagerFactory used to establish identity.\n\tKeyManagerFactory getKeyManagerFactory();\n}", "des": "A bundle of key and trust managers that can be used to establish an SSL connection."}
{"index": 13965, "repo": "spring-boot-3.1.1", "code": "public interface SslOptions {\n\t// Helper method that provides a null-safe way to convert a String[] to a Collection for client libraries to use.\n\tstatic Set<String> asSet(String[] array);\n\t// Return the ciphers that can be used or an empty set.\n\tString[] getCiphers();\n\t// Return the protocols that should be enabled or an empty set.\n\tString[] getEnabledProtocols();\n\t// Return if any SSL options have been specified.\n\tdefault boolean isSpecified();\n}", "des": "Configuration options that should be applied when establishing an SSL connection."}
{"index": 13966, "repo": "spring-boot-3.1.1", "code": "public interface SslStoreBundle {\n\t// Return a key store generated from the trust material or null.\n\tKeyStore getKeyStore();\n\t// Return the password for the key in the key store or null.\n\tString getKeyStorePassword();\n\t// Return a trust store generated from the trust material or null.\n\tKeyStore getTrustStore();\n\t// Factory method to create a new SslStoreBundle instance.\n\tstatic SslStoreBundle of(KeyStore keyStore, String keyStorePassword, KeyStore trustStore);\n}", "des": "A bundle of key and trust stores that can be used to establish an SSL connection."}
{"index": 13967, "repo": "spring-boot-3.1.1", "code": "public class StandardConfigDataLocationResolver extends Object implements ConfigDataLocationResolver<StandardConfigDataResource>, org.springframework.core.Ordered {\n\tint getOrder();\n\t// Returns if the specified location address can be resolved by this resolver.\n\tboolean isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location);\n}", "des": "ConfigDataLocationResolver for standard locations."}
{"index": 13968, "repo": "spring-boot-3.1.1", "code": "public class StandardConfigDataResource extends ConfigDataResource {\n\tboolean equals(Object obj);\n\t// Return the profile or null if the resource is not profile specific.\n\tString getProfile();\n\t// Return the underlying Spring Resource being loaded.\n\torg.springframework.core.io.Resource getResource();\n}", "des": "ConfigDataResource backed by a Resource."}
{"index": 13969, "repo": "spring-boot-3.1.1", "code": "public class StartupTimeline extends Object {\n\t// Return the recorded events.\n\tList<StartupTimeline.TimelineEvent> getEvents();\n\t// Return the start time of this timeline.\n\tInstant getStartTime();\n}", "des": "Represent the timeline of steps recorded by BufferingApplicationStartup."}
{"index": 13970, "repo": "spring-boot-3.1.1", "code": "public static class StartupTimeline.TimelineEvent extends Object {\n\t// Return the duration of this event, i.e.\n\tDuration getDuration();\n\t// Return the end time of this event.\n\tInstant getEndTime();\n\t// Return the start time of this event.\n\tInstant getStartTime();\n\t// Return the StartupStep information for this event.\n\torg.springframework.core.metrics.StartupStep getStartupStep();\n}", "des": "Event on the current StartupTimeline."}
{"index": 13971, "repo": "spring-boot-3.1.1", "code": "protected static class SystemEnvironmentPropertySourceEnvironmentPostProcessor.OriginAwareSystemEnvironmentPropertySource extends org.springframework.core.env.SystemEnvironmentPropertySource implements OriginLookup<String> {\n\tboolean containsProperty(String name);\n\t// Return the origin of the given key or null if the origin cannot be determined.\n\tOrigin getOrigin(String key);\n\t// Return the implicit prefix that is applied when performing a lookup or null if no prefix is used.\n\tString getPrefix();\n}", "des": "SystemEnvironmentPropertySource that also tracks Origin."}
{"index": 13972, "repo": "spring-boot-3.1.1", "code": "public class TaskExecutorBuilder extends Object {\n\t// Add TaskExecutorCustomizers that should be applied to the ThreadPoolTaskExecutor.\n\tTaskExecutorBuilder additionalCustomizers(Iterable<TaskExecutorCustomizer> customizers);\n\t// Add TaskExecutorCustomizers that should be applied to the ThreadPoolTaskExecutor.\n\tTaskExecutorBuilder additionalCustomizers(TaskExecutorCustomizer... customizers);\n}", "des": "Builder that can be used to configure and create a TaskExecutor."}
{"index": 13973, "repo": "spring-boot-3.1.1", "code": "public class TaskSchedulerBuilder extends Object {\n\t// Add taskSchedulerCustomizers that should be applied to the ThreadPoolTaskScheduler.\n\tTaskSchedulerBuilder additionalCustomizers(Iterable<TaskSchedulerCustomizer> customizers);\n\t// Add taskSchedulerCustomizers that should be applied to the ThreadPoolTaskScheduler.\n\tTaskSchedulerBuilder additionalCustomizers(TaskSchedulerCustomizer... customizers);\n}", "des": "Builder that can be used to configure and create a TaskScheduler."}
{"index": 13974, "repo": "spring-boot-3.1.1", "code": "public class TextResourceOrigin extends Object implements Origin {\n\tboolean equals(Object obj);\n\t// Return the location of the property within the source (if known).\n\tTextResourceOrigin.Location getLocation();\n\t// Return the parent origin for this instance if there is one.\n\tOrigin getParent();\n\t// Return the resource where the property originated.\n\torg.springframework.core.io.Resource getResource();\n}", "des": "Origin for an item loaded from a text resource."}
{"index": 13975, "repo": "spring-boot-3.1.1", "code": "public static final class TextResourceOrigin.Location extends Object {\n\tboolean equals(Object obj);\n\t// Return the column of the text resource where the property originated.\n\tint getColumn();\n\t// Return the line of the text resource where the property originated.\n\tint getLine();\n}", "des": "A location (line and column number) within the resource."}
{"index": 13976, "repo": "spring-boot-3.1.1", "code": "public class TomcatDataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<org.apache.tomcat.jdbc.pool.DataSource> {\n\t// Return the current number of active connections that have been allocated from the data source or null if that information is not available.\n\tInteger getActive();\n\t// The default auto-commit state of connections created by this pool.\n\tBoolean getDefaultAutoCommit();\n\t// Return the number of established but idle connections.\n\tInteger getIdle();\n}", "des": "DataSourcePoolMetadata for a Tomcat DataSource."}
{"index": 13977, "repo": "spring-boot-3.1.1", "code": "public class TomcatReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableTomcatWebServerFactory {\n\t// Add Connectors in addition to the default connector, e.g.\n\tvoid addAdditionalTomcatConnectors(org.apache.catalina.connector.Connector... connectors);\n\t// Add TomcatConnectorCustomizers that should be added to the Tomcat Connector.\n\tvoid addConnectorCustomizers(TomcatConnectorCustomizer... tomcatConnectorCustomizers);\n}", "des": "ReactiveWebServerFactory that can be used to create a TomcatWebServer."}
{"index": 13978, "repo": "spring-boot-3.1.1", "code": "public class TomcatServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableTomcatWebServerFactory, org.springframework.context.ResourceLoaderAware {\n\t// Add Connectors in addition to the default connector, e.g.\n\tvoid addAdditionalTomcatConnectors(org.apache.catalina.connector.Connector... connectors);\n\t// Add TomcatConnectorCustomizers that should be added to the Tomcat Connector.\n\tvoid addConnectorCustomizers(TomcatConnectorCustomizer... tomcatConnectorCustomizers);\n}", "des": "AbstractServletWebServerFactory that can be used to create TomcatWebServers."}
{"index": 13979, "repo": "spring-boot-3.1.1", "code": "public class TomcatWebServer extends Object implements WebServer {\n\t// Return the port this server is listening on.\n\tint getPort();\n\t// Returns access to the underlying Tomcat server.\n\torg.apache.catalina.startup.Tomcat getTomcat();\n\t// Initiates a graceful shutdown of the web server.\n\tvoid shutDownGracefully(GracefulShutdownCallback callback);\n\t// Starts the web server.\n\tvoid start();\n\t// Stops the web server.\n\tvoid stop();\n}", "des": "WebServer that can be used to control a Tomcat web server."}
{"index": 13980, "repo": "spring-boot-3.1.1", "code": "public class UndertowReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableUndertowWebServerFactory {\n\t// Add UndertowBuilderCustomizers that should be used to customize the Undertow Undertow.Builder.\n\tvoid addBuilderCustomizers(UndertowBuilderCustomizer... customizers);\n\t// Returns a mutable collection of the UndertowBuilderCustomizers that will be applied to the Undertow Builder.\n\tCollection<UndertowBuilderCustomizer> getBuilderCustomizers();\n}", "des": "ReactiveWebServerFactory that can be used to create UndertowWebServers."}
{"index": 13981, "repo": "spring-boot-3.1.1", "code": "public class UndertowServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableUndertowWebServerFactory, org.springframework.context.ResourceLoaderAware {\n\t// Add UndertowBuilderCustomizers that should be used to customize the Undertow Undertow.Builder.\n\tvoid addBuilderCustomizers(UndertowBuilderCustomizer... customizers);\n}", "des": "ServletWebServerFactory that can be used to create UndertowServletWebServers."}
{"index": 13982, "repo": "spring-boot-3.1.1", "code": "public class UndertowWebServer extends Object implements WebServer {\n\tprotected io.undertow.server.HttpHandler createHttpHandler();\n\t// Return the port this server is listening on.\n\tint getPort();\n\tprotected String getStartLogMessage();\n\t// Initiates a graceful shutdown of the web server.\n\tvoid shutDownGracefully(GracefulShutdownCallback callback);\n\t// Starts the web server.\n\tvoid start();\n\t// Stops the web server.\n\tvoid stop();\n}", "des": "WebServer that can be used to control an Undertow web server."}
{"index": 13983, "repo": "spring-boot-3.1.1", "code": "public class ValidationErrors extends Object implements Iterable<org.springframework.validation.ObjectError> {\n\t// Return the list of all validation errors.\n\tList<org.springframework.validation.ObjectError> getAllErrors();\n\t// Return the properties that were bound before validation failed.\n\tSet<ConfigurationProperty> getBoundProperties();\n\t// Return the name of the item that was being validated.\n\tConfigurationPropertyName getName();\n\tboolean hasErrors();\n}", "des": "A collection of ObjectErrors caused by bind validation failures."}
{"index": 13984, "repo": "spring-boot-3.1.1", "code": "public enum WebApplicationType extends Enum<WebApplicationType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic WebApplicationType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic WebApplicationType[] values();\n}", "des": "An enumeration of possible types of web application."}
{"index": 13985, "repo": "spring-boot-3.1.1", "code": "public interface WebServer {\n\t// Return the port this server is listening on.\n\tint getPort();\n\t// Initiates a graceful shutdown of the web server.\n\tdefault void shutDownGracefully(GracefulShutdownCallback callback);\n\t// Starts the web server.\n\tvoid start();\n\t// Stops the web server.\n\tvoid stop();\n}", "des": "Simple interface that represents a fully configured web server (for example Tomcat, Jetty, Netty)."}
{"index": 13986, "repo": "spring-boot-3.1.1", "code": "public interface WebServerApplicationContext extends org.springframework.context.ApplicationContext {\n\t// Returns the namespace of the web server application context or null if no namespace has been set.\n\tString getServerNamespace();\n\t// Returns the server namespace if the specified context is a WebServerApplicationContext.\n\tstatic String getServerNamespace(org.springframework.context.ApplicationContext context);\n}", "des": "Interface to be implemented by application contexts that create and manage the lifecycle of an embedded WebServer."}
{"index": 13987, "repo": "spring-boot-3.1.1", "code": "public abstract class WebServerInitializedEvent extends org.springframework.context.ApplicationEvent {\n\t// Access the application context that the server was created in.\n\tabstract WebServerApplicationContext getApplicationContext();\n\t// Access the source of the event (an WebServer).\n\tWebServer getSource();\n\t// Access the WebServer.\n\tWebServer getWebServer();\n}", "des": "Event to be published when the WebServer is ready."}
{"index": 13988, "repo": "spring-boot-3.1.1", "code": "public final class WebServerSslBundle extends Object implements SslBundle {\n\t// Get the SslBundle that should be used for the given Ssl instance.\n\tstatic SslBundle get(Ssl ssl);\n\t// Get the SslBundle that should be used for the given Ssl instance.\n\tstatic SslBundle get(Ssl ssl, SslBundles sslBundles);\n}", "des": "SslBundle backed by Ssl or an SslStoreProvider."}
{"index": 13989, "repo": "spring-boot-3.1.1", "code": "public class WebServiceTemplateBuilder extends Object {\n\t// Add additional WebServiceTemplateCustomizers that should be applied to the WebServiceTemplate.\n\tWebServiceTemplateBuilder additionalCustomizers(Collection<? extends WebServiceTemplateCustomizer> customizers);\n\t// Add additional WebServiceTemplateCustomizers that should be applied to the WebServiceTemplate.\n\tWebServiceTemplateBuilder additionalCustomizers(WebServiceTemplateCustomizer... customizers);\n}", "des": "Builder that can be used to configure and create a WebServiceTemplate."}
{"index": 13990, "repo": "spring-boot-3.1.1", "code": "public class XmlServletWebServerApplicationContext extends ServletWebServerApplicationContext {\n\t// Load bean definitions from the given XML resources.\n\tfinal void load(Class<?> relativeClass, String... resourceNames);\n\t// Load bean definitions from the given XML resources.\n\tfinal void load(String... resourceLocations);\n\t// Load bean definitions from the given XML resources.\n\tfinal void load(org.springframework.core.io.Resource... resources);\n}", "des": "ServletWebServerApplicationContext which takes its configuration from XML documents, understood by an XmlBeanDefinitionReader."}
{"index": 13991, "repo": "spring-boot-3.1.1", "code": "public class YamlPropertySourceLoader extends Object implements PropertySourceLoader {\n\t// Returns the file extensions that the loader supports (excluding the '.').\n\tString[] getFileExtensions();\n\t// Load the resource into one or more property sources.\n\tList<org.springframework.core.env.PropertySource<?>> load(String name, org.springframework.core.io.Resource resource);\n}", "des": "Strategy to load '.yml' (or '.yaml') files into a PropertySource."}
{"index": 13992, "repo": "camel-base-4.0.0-RC1", "code": "public class AnnotationTypeConverterLoader extends Object implements org.apache.camel.spi.TypeConverterLoader {\n\tprotected boolean acceptClass(Class<?> clazz);\n\t// Filters the given list of packages and returns an array of only package names.\n\tprotected String[] filterPackageNamesOnly(org.apache.camel.spi.PackageScanClassResolver resolver, String[] packageNames, Set<Class<?>> classes);\n}", "des": "A class which will auto-discover Converter objects and methods to pre-load the TypeConverterRegistry of converters on startup."}
{"index": 13993, "repo": "camel-base-4.0.0-RC1", "code": "public abstract class BaseTypeConverterRegistry extends CoreTypeConverterRegistry {\n\tvoid addFallbackTypeConverter(org.apache.camel.TypeConverter typeConverter, boolean canPromote);\n\tvoid addTypeConverters(Object typeConverters);\n\tprotected void doInit();\n\t// Finds the fallback type converter classes from the classpath looking for text files on the classpath at the META_INF_SERVICES_FALLBACK_TYPE_CONVERTER location.\n\tprotected Collection<String> findFallbackTypeConverterClasses();\n}", "des": "Base implementation of a type converter registry used for type converters in Camel."}
{"index": 13994, "repo": "camel-base-4.0.0-RC1", "code": "@Converter(generateBulkLoader=true) public final class CollectionConverter extends Object {\n\t// Converts a collection to an array\n\tstatic Object[] toArray(Collection<?> value);\n\t// Converts an Iterable to a ArrayList\n\tstatic <T> ArrayList<T> toArrayList(Iterable<T> it);\n\t// Converts an Iterator to a ArrayList\n\tstatic <T> ArrayList<T> toArrayList(Iterator<T> it);\n\tstatic <K, V> Collection<Map.Entry<K,V>> toCollection(Map<K,V> map);\n\tstatic <K, V> HashMap<K,V> toHashMap(Map<? extends K,? extends V> map);\n}", "des": "Some core java.util Collection based Type Converters"}
{"index": 13995, "repo": "camel-base-4.0.0-RC1", "code": "public class DefaultPropertiesParser extends Object implements PropertiesParser {\n\tPropertiesComponent getPropertiesComponent();\n\t// While parsing the uri using parseUri method each parsed property found invokes this callback.\n\tString parseProperty(String key, String value, PropertiesLookup properties);\n}", "des": "A parser to parse a string which contains property placeholders."}
{"index": 13996, "repo": "camel-base-4.0.0-RC1", "code": "@Converter(generateBulkLoader=true) public final class ObjectConverter extends Object {\n\tstatic String fromCharArray(char[] value);\n\t// Creates an iterable over the value\n\tstatic Iterable<?> iterable(Object value);\n\t// Creates an iterator over the value\n\tstatic Iterator<?> iterator(Object value);\n\t// Returns the converted value, or null if the value is null\n\tstatic BigInteger toBigInteger(Object value);\n}", "des": "Some core java.lang based Type Converters"}
{"index": 13997, "repo": "camel-base-4.0.0-RC1", "code": "public interface PropertiesFunctionResolver {\n\t// Registers the PropertiesFunction as a function to this component.\n\tvoid addPropertiesFunction(org.apache.camel.spi.PropertiesFunction function);\n\t// Gets the functions registered in this properties component.\n\tMap<String,org.apache.camel.spi.PropertiesFunction> getFunctions();\n\t// Is there a PropertiesFunction with the given name?\n\tboolean hasFunction(String name);\n}", "des": "Resolver for built-in and custom PropertiesFunction."}
{"index": 13998, "repo": "camel-base-4.0.0-RC1", "code": "public interface PropertiesParser {\n\t// While parsing the uri using parseUri method each parsed property found invokes this callback.\n\tString parseProperty(String key, String value, PropertiesLookup properties);\n\t// Parses the string and replaces the property placeholders with values from the given properties.\n\tString parseUri(String text, PropertiesLookup properties, boolean fallback, boolean keepUnresolvedOptional, boolean nestedPlaceholder);\n}", "des": "A parser to parse properties for a given input"}
{"index": 13999, "repo": "spring-security-crypto-6.1.2", "code": "public abstract class AbstractPasswordEncoder extends Object implements PasswordEncoder {\n\t// Encode the raw password.\n\tString encode(CharSequence rawPassword);\n\tprotected abstract byte[] encode(CharSequence rawPassword, byte[] salt);\n\tprotected byte[] encodeAndConcatenate(CharSequence rawPassword, byte[] salt);\n\t// Constant time comparison to prevent against timing attacks.\n\tprotected static boolean matches(byte[] expected, byte[] actual);\n}", "des": "Abstract base class for password encoders"}
{"index": 14000, "repo": "spring-security-crypto-6.1.2", "code": "public final class AesBytesEncryptor extends Object implements BytesEncryptor {\n\t// Decrypt the byte array.\n\tbyte[] decrypt(byte[] encryptedBytes);\n\t// Encrypt the byte array.\n\tbyte[] encrypt(byte[] bytes);\n}", "des": "Encryptor that uses AES encryption."}
{"index": 14001, "repo": "spring-security-crypto-6.1.2", "code": "public class Argon2PasswordEncoder extends Object implements PasswordEncoder {\n\t// Deprecated. Use defaultsForSpringSecurity_v5_8() instead\n\tstatic Argon2PasswordEncoder defaultsForSpringSecurity_v5_2();\n\t// Constructs an Argon2 password encoder with a salt length of 16 bytes, a hash length of 32 bytes, parallelism of 1, memory cost of 1 << 14 and 2 iterations.\n\tstatic Argon2PasswordEncoder defaultsForSpringSecurity_v5_8();\n\t// Encode the raw password.\n\tString encode(CharSequence rawPassword);\n}", "des": "Implementation of PasswordEncoder that uses the Argon2 hashing function."}
{"index": 14002, "repo": "spring-security-crypto-6.1.2", "code": "public class BCrypt extends Object {\n\t// Check that a password (as a byte array) matches a previously hashed one\n\tstatic boolean checkpw(byte[] passwordb, String hashed);\n\t// Check that a plaintext password matches a previously hashed one\n\tstatic boolean checkpw(String plaintext, String hashed);\n\t// Generate a salt for use with the BCrypt.hashpw() method, selecting a reasonable default for the number of hashing rounds to apply\n\tstatic String gensalt();\n}", "des": "BCrypt implements OpenBSD-style Blowfish password hashing using the scheme described in \"A Future-Adaptable Password Scheme\" by Niels Provos and David Mazieres."}
{"index": 14003, "repo": "spring-security-crypto-6.1.2", "code": "public class BCryptPasswordEncoder extends Object implements PasswordEncoder {\n\t// Encode the raw password.\n\tString encode(CharSequence rawPassword);\n\t// Verify the encoded password obtained from storage matches the submitted raw password after it too is encoded.\n\tboolean matches(CharSequence rawPassword, String encodedPassword);\n\t// Returns true if the encoded password should be encoded again for better security, else false.\n\tboolean upgradeEncoding(String encodedPassword);\n}", "des": "Implementation of PasswordEncoder that uses the BCrypt strong hashing function."}
{"index": 14004, "repo": "spring-security-crypto-6.1.2", "code": "public static enum BCryptPasswordEncoder.BCryptVersion extends Enum<BCryptPasswordEncoder.BCryptVersion> {\n\tString getVersion();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BCryptPasswordEncoder.BCryptVersion valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BCryptPasswordEncoder.BCryptVersion[] values();\n}", "des": "Stores the default bcrypt version for use in configuration."}
{"index": 14005, "repo": "spring-security-crypto-6.1.2", "code": "public class BouncyCastleAesCbcBytesEncryptor extends Object {\n\t// Decrypt the byte array.\n\tbyte[] decrypt(byte[] encryptedBytes);\n\t// Encrypt the byte array.\n\tbyte[] encrypt(byte[] bytes);\n}", "des": "An Encryptor equivalent to AesBytesEncryptor using AesBytesEncryptor.CipherAlgorithm.CBC that uses Bouncy Castle instead of JCE."}
{"index": 14006, "repo": "spring-security-crypto-6.1.2", "code": "public class BouncyCastleAesGcmBytesEncryptor extends Object {\n\t// Decrypt the byte array.\n\tbyte[] decrypt(byte[] encryptedBytes);\n\t// Encrypt the byte array.\n\tbyte[] encrypt(byte[] bytes);\n}", "des": "An Encryptor equivalent to AesBytesEncryptor using AesBytesEncryptor.CipherAlgorithm.GCM that uses Bouncy Castle instead of JCE."}
{"index": 14007, "repo": "spring-security-crypto-6.1.2", "code": "public interface BytesEncryptor {\n\t// Decrypt the byte array.\n\tbyte[] decrypt(byte[] encryptedByteArray);\n\t// Encrypt the byte array.\n\tbyte[] encrypt(byte[] byteArray);\n}", "des": "Service interface for symmetric data encryption."}
{"index": 14008, "repo": "spring-security-crypto-6.1.2", "code": "public interface BytesKeyGenerator {\n\t// Generate a new key.\n\tbyte[] generateKey();\n\t// Get the length, in bytes, of keys created by this generator.\n\tint getKeyLength();\n}", "des": "A generator for unique byte array-based keys."}
{"index": 14009, "repo": "spring-security-crypto-6.1.2", "code": "public class DelegatingPasswordEncoder extends Object implements PasswordEncoder {\n\t// Encode the raw password.\n\tString encode(CharSequence rawPassword);\n\t// Verify the encoded password obtained from storage matches the submitted raw password after it too is encoded.\n\tboolean matches(CharSequence rawPassword, String prefixEncodedPassword);\n}", "des": "A password encoder that delegates to another PasswordEncoder based upon a prefixed identifier."}
{"index": 14010, "repo": "spring-security-crypto-6.1.2", "code": "public final class EncodingUtils extends Object {\n\t// Combine the individual byte arrays into one array.\n\tstatic byte[] concatenate(byte[]... arrays);\n\t// Extract a sub array of bytes out of the byte array.\n\tstatic byte[] subArray(byte[] array, int beginIndex, int endIndex);\n}", "des": "Static helper for encoding data."}
{"index": 14011, "repo": "spring-security-crypto-6.1.2", "code": "public final class Encryptors extends Object {\n\t// Creates a text encryptor that uses \"stronger\" password-based encryption.\n\tstatic TextEncryptor delux(CharSequence password, CharSequence salt);\n\t// Creates a text encryptor that performs no encryption.\n\tstatic TextEncryptor noOpText();\n\t// Creates a standard password-based bytes encryptor using 256 bit AES encryption.\n\tstatic BytesEncryptor standard(CharSequence password, CharSequence salt);\n}", "des": "Factory for commonly used encryptors."}
{"index": 14012, "repo": "spring-security-crypto-6.1.2", "code": "public final class KeyGenerators extends Object {\n\t// Create a BytesKeyGenerator that uses a SecureRandom to generate keys of 8 bytes in length.\n\tstatic BytesKeyGenerator secureRandom();\n\t// Create a BytesKeyGenerator that uses a SecureRandom to generate keys of a custom length.\n\tstatic BytesKeyGenerator secureRandom(int keyLength);\n\t// Create a BytesKeyGenerator that returns a single, shared SecureRandom key of a custom length.\n\tstatic BytesKeyGenerator shared(int keyLength);\n}", "des": "Factory for commonly used key generators."}
{"index": 14013, "repo": "spring-security-crypto-6.1.2", "code": "public interface PasswordEncoder {\n\t// Encode the raw password.\n\tString encode(CharSequence rawPassword);\n\t// Verify the encoded password obtained from storage matches the submitted raw password after it too is encoded.\n\tboolean matches(CharSequence rawPassword, String encodedPassword);\n\t// Returns true if the encoded password should be encoded again for better security, else false.\n\tdefault boolean upgradeEncoding(String encodedPassword);\n}", "des": "Service interface for encoding passwords."}
{"index": 14014, "repo": "spring-security-crypto-6.1.2", "code": "public class Pbkdf2PasswordEncoder extends Object implements PasswordEncoder {\n\t// Deprecated. Use defaultsForSpringSecurity_v5_8() instead\n\tstatic Pbkdf2PasswordEncoder defaultsForSpringSecurity_v5_5();\n\t// Constructs a PBKDF2 password encoder with no additional secret value.\n\tstatic Pbkdf2PasswordEncoder defaultsForSpringSecurity_v5_8();\n\t// Encode the raw password.\n\tString encode(CharSequence rawPassword);\n}", "des": "A PasswordEncoder implementation that uses PBKDF2 with : a configurable random salt value length (default is 16 bytes) a configurable number of iterations (default is 310000) a configurable key derivation function (see Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm) a configurable secret appended to the random salt (default is empty) The algorithm is invoked on the concatenated bytes of the salt, secret and password."}
{"index": 14015, "repo": "spring-security-crypto-6.1.2", "code": "public static enum Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm extends Enum<Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm[] values();\n}", "des": "The Algorithm used for creating the SecretKeyFactory"}
{"index": 14016, "repo": "spring-security-crypto-6.1.2", "code": "public class SCryptPasswordEncoder extends Object implements PasswordEncoder {\n\t// Deprecated. Use defaultsForSpringSecurity_v5_8() instead\n\tstatic SCryptPasswordEncoder defaultsForSpringSecurity_v4_1();\n\t// Constructs a SCrypt password encoder with cpu cost of 65,536, memory cost of 8, parallelization of 1, a key length of 32 and a salt length of 16 bytes.\n\tstatic SCryptPasswordEncoder defaultsForSpringSecurity_v5_8();\n\t// Encode the raw password.\n\tString encode(CharSequence rawPassword);\n}", "des": "Implementation of PasswordEncoder that uses the SCrypt hashing function."}
{"index": 14017, "repo": "spring-security-crypto-6.1.2", "code": "public interface TextEncryptor {\n\t// Decrypt the encrypted text string.\n\tString decrypt(String encryptedText);\n\t// Encrypt the raw text string.\n\tString encrypt(String text);\n}", "des": "Service interface for symmetric encryption of text strings."}
{"index": 14018, "repo": "spring-security-crypto-6.1.2", "code": "public final class Utf8 extends Object {\n\t// Decode the bytes in UTF-8 form into a String.\n\tstatic String decode(byte[] bytes);\n\t// Get the bytes of the String in UTF-8 encoded form.\n\tstatic byte[] encode(CharSequence string);\n}", "des": "UTF-8 Charset encoder/decoder."}
{"index": 14019, "repo": "pulsar-client-api-3.0.0", "code": "@LimitedPrivate @Stable public interface Authentication extends Closeable, Serializable {\n\t// An authentication Stage.\n\tdefault void authenticationStage(String requestUrl, AuthenticationDataProvider authData, Map<String,String> previousResHeaders, CompletableFuture<Map<String,String>> authFuture);\n}", "des": "Interface of authentication providers."}
{"index": 14020, "repo": "pulsar-client-api-3.0.0", "code": "@LimitedPrivate @Stable public final class AuthenticationFactory extends Object {\n\t// Create an instance of the Authentication object by using the plugin class name.\n\tstatic Authentication create(String authPluginClassName, String authParamsString);\n\t// Create an instance of the Authentication-Plugin.\n\tstatic Authentication create(String authPluginClassName, Map<String,String> authParams);\n}", "des": "Factory class that allows to create Authentication instances for all the supported authentication methods."}
{"index": 14021, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Evolving public interface AutoClusterFailoverBuilder {\n\t// Build the ServiceUrlProvider instance.\n\tServiceUrlProvider build();\n\t// Set the checkInterval for probe.\n\tAutoClusterFailoverBuilder checkInterval(long interval, TimeUnit timeUnit);\n\t// Set the switch failoverDelay.\n\tAutoClusterFailoverBuilder failoverDelay(long failoverDelay, TimeUnit timeUnit);\n\t// Set secondary choose policy.\n\tAutoClusterFailoverBuilder failoverPolicy(AutoClusterFailoverBuilder.FailoverPolicy policy);\n}", "des": "AutoClusterFailoverBuilder is used to configure and create instance of ServiceUrlProvider."}
{"index": 14022, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface BatchMessageContainer {\n\t// Clear the message batch container.\n\tvoid clear();\n\t// Release the payload and clear the container.\n\tvoid discard(Exception ex);\n\t// Get current allocated buffer size of the message batch container in bytes.\n\tint getBatchAllocatedSizeBytes();\n\t// Get current message batch size of the message batch container in bytes.\n\tlong getCurrentBatchSize();\n\t// Get count of messages in the message batch container.\n\tint getNumMessagesInBatch();\n}", "des": "Batch message container for individual messages being published until they are batched and sent to broker."}
{"index": 14023, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface ClientBuilder extends Serializable, Cloneable {\n\t// Configure whether the Pulsar client accept untrusted TLS certificate from broker (default: false).\n\tClientBuilder allowTlsInsecureConnection(boolean allowTlsInsecureConnection);\n\t// Configure the authentication provider to use in the Pulsar client instance.\n\tClientBuilder authentication(String authPluginClassName, String authParamsString);\n}", "des": "Builder interface that is used to configure and construct a PulsarClient instance."}
{"index": 14024, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum CompressionType extends Enum<CompressionType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CompressionType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CompressionType[] values();\n}", "des": "The compression type that can be specified on a Producer."}
{"index": 14025, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface Consumer<T> extends Closeable, MessageAcknowledger {\n\t// Batch receiving messages.\n\tMessages<T> batchReceive();\n\t// Batch receiving messages.\n\tCompletableFuture<Messages<T>> batchReceiveAsync();\n\t// Close the consumer and stop the broker to push more messages.\n\tvoid close();\n\t// Asynchronously close the consumer and stop the broker to push more messages.\n\tCompletableFuture<Void> closeAsync();\n\t// Get the name of consumer.\n\tString getConsumerName();\n}", "des": "An interface that abstracts behavior of Pulsar's consumer."}
{"index": 14026, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface ConsumerBuilder<T> extends Cloneable {\n\t// Sets amount of time for group consumer acknowledgments.\n\tConsumerBuilder<T> acknowledgmentGroupTime(long delay, TimeUnit unit);\n\t// Sets the timeout for unacknowledged messages, truncated to the nearest millisecond.\n\tConsumerBuilder<T> ackTimeout(long ackTimeout, TimeUnit timeUnit);\n}", "des": "ConsumerBuilder is used to configure and create instances of Consumer."}
{"index": 14027, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum ConsumerCryptoFailureAction extends Enum<ConsumerCryptoFailureAction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConsumerCryptoFailureAction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConsumerCryptoFailureAction[] values();\n}", "des": "The action a consumer should take when a consumer receives a message that it cannot decrypt."}
{"index": 14028, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface ConsumerEventListener extends Serializable {\n\t// Notified when the consumer group is changed, and the consumer becomes the active consumer.\n\tvoid becameActive(Consumer<?> consumer, int partitionId);\n\t// Notified when the consumer group is changed, and the consumer is still inactive or becomes inactive.\n\tvoid becameInactive(Consumer<?> consumer, int partitionId);\n}", "des": "Listener on the consumer state changes."}
{"index": 14029, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface ConsumerInterceptor<T> extends AutoCloseable {\n\t// This is called just before the message is returned by Consumer.receive(), MessageListener.received(Consumer, Message) or the CompletableFuture returned by Consumer.receiveAsync() completes.\n\tMessage<T> beforeConsume(Consumer<T> consumer, Message<T> message);\n\t// Close the interceptor.\n\tvoid close();\n}", "des": "A plugin interface that allows you to intercept (and possibly mutate) messages received by the consumer."}
{"index": 14030, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface ConsumerStats extends Serializable {\n\t// Get the size of receiver queue.\n\tInteger getMsgNumInReceiverQueue();\n\t// Get the receiver queue size of sub-consumers.\n\tMap<Long,Integer> getMsgNumInSubReceiverQueue();\n\tlong getNumAcksFailed();\n\tlong getNumAcksSent();\n\tlong getNumBatchReceiveFailed();\n\tlong getNumBytesReceived();\n\tlong getNumMsgsReceived();\n\tlong getNumReceiveFailed();\n\tdefault Map<String,ConsumerStats> getPartitionStats();\n\tdouble getRateBytesReceived();\n}", "des": "Consumer statistics recorded by client."}
{"index": 14031, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Evolving public interface ControlledClusterFailoverBuilder {\n\t// Build the ServiceUrlProvider instance.\n\tServiceUrlProvider build();\n\t// Set the probe check interval.\n\tControlledClusterFailoverBuilder checkInterval(long interval, TimeUnit timeUnit);\n\t// Set default service url.\n\tControlledClusterFailoverBuilder defaultServiceUrl(String serviceUrl);\n\t// Set the service url provider.\n\tControlledClusterFailoverBuilder urlProvider(String urlProvider);\n}", "des": "ControlledClusterFailoverBuilder is used to configure and create instance of ServiceUrlProvider."}
{"index": 14032, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface FieldSchemaBuilder<T extends FieldSchemaBuilder<T>> {\n\t// The optional name aliases of this field.\n\tT aliases(String... aliases);\n\t// Set the default value of this field.\n\tT defaultValue(Object value);\n\t// The documentation of this field.\n\tT doc(String doc);\n\t// Make this field optional.\n\tT optional();\n\t// Set name-value pair properties for this field.\n\tT property(String name, String val);\n\t// Make this field required.\n\tT required();\n}", "des": "Build a field for a record."}
{"index": 14033, "repo": "pulsar-client-api-3.0.0", "code": "public interface GenericObject {\n\t// Return the internal native representation of the Object, like a AVRO GenericRecord, a String or a byte[].\n\tObject getNativeObject();\n\t// Return the schema tyoe.\n\tSchemaType getSchemaType();\n}", "des": "This is an abstraction over the logical value that is store into a Message."}
{"index": 14034, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface GenericRecord extends GenericObject {\n\t// Retrieve the value of the provided fieldName.\n\tObject getField(String fieldName);\n\t// Retrieve the value of the provided field.\n\tdefault Object getField(Field field);\n\t// Returns the list of fields associated with the record.\n\tList<Field> getFields();\n\t// Return the internal native representation of the Record, like a AVRO GenericRecord.\n\tdefault Object getNativeObject();\n}", "des": "An interface represents a message with schema."}
{"index": 14035, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface GenericRecordBuilder {\n\t// Build a generic record.\n\tGenericRecord build();\n\t// Clears the value of the given field.\n\tGenericRecordBuilder clear(String fieldName);\n\t// Clears the value of the given field.\n\tGenericRecordBuilder clear(Field field);\n\t// Sets the value of a field.\n\tGenericRecordBuilder set(String fieldName, Object value);\n\t// Sets the value of a field.\n\tGenericRecordBuilder set(Field field, Object value);\n}", "des": "Generic Record Builder to build a GenericRecord."}
{"index": 14036, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface GenericSchema<T extends GenericRecord> extends Schema<T> {\n\t// Returns the list of fields.\n\tList<Field> getFields();\n\t// Create a builder to build GenericRecord.\n\tGenericRecordBuilder newRecordBuilder();\n\tstatic GenericSchema of(SchemaInfo schemaInfo);\n\tstatic GenericSchema of(SchemaInfo schemaInfo, boolean useProvidedSchemaAsReaderSchema);\n}", "des": "A schema that serializes and deserializes between GenericRecord and bytes."}
{"index": 14037, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum HashingScheme extends Enum<HashingScheme> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic HashingScheme valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic HashingScheme[] values();\n}", "des": "Standard hashing functions available when choosing the partition to use for a particular message."}
{"index": 14038, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum KeySharedMode extends Enum<KeySharedMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic KeySharedMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic KeySharedMode[] values();\n}", "des": "KeyShared mode of KeyShared subscription."}
{"index": 14039, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public class KeyValue<K,V> extends Object {\n\t// Decode the value into a key/value pair.\n\tstatic <K, V> KeyValue<K,V> decode(byte[] data, KeyValue.KeyValueDecoder<K,V> decoder);\n\t// Encode a key and value pair into a bytes array.\n\tstatic <K, V> byte[] encode(K key, Schema<K> keyWriter, V value, Schema<V> valueWriter);\n\tboolean equals(Object obj);\n\tK getKey();\n\tV getValue();\n}", "des": "A simple KeyValue class."}
{"index": 14040, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum KeyValueEncodingType extends Enum<KeyValueEncodingType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic KeyValueEncodingType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic KeyValueEncodingType[] values();\n}", "des": "Encoding types of supported KeyValueSchema for Pulsar messages."}
{"index": 14041, "repo": "pulsar-client-api-3.0.0", "code": "public interface KeyValueSchema<K,V> extends Schema<KeyValue<K,V>> {\n\t// Get the Schema of the Key.\n\tSchema<K> getKeySchema();\n\t// Get the KeyValueEncodingType.\n\tKeyValueEncodingType getKeyValueEncodingType();\n\t// Get the Schema of the Value.\n\tSchema<V> getValueSchema();\n}", "des": "This interface models a Schema that is composed of two parts."}
{"index": 14042, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface Message<T> {\n\t// Get broker publish time from broker entry metadata.\n\tOptional<Long> getBrokerPublishTime();\n\t// Get the raw payload of the message.\n\tbyte[] getData();\n\t// EncryptionContext contains encryption and compression information in it using which application can decrypt consumed message with encrypted-payload.\n\tOptional<EncryptionContext> getEncryptionCtx();\n\t// Get the event time associated with this message.\n\tlong getEventTime();\n}", "des": "The message abstraction used in Pulsar."}
{"index": 14043, "repo": "pulsar-client-api-3.0.0", "code": "public interface MessageAcknowledger {\n\t// Acknowledge the consumption of a list of message.\n\tvoid acknowledge(List<MessageId> messageIdList);\n\tdefault void acknowledge(Message<?> message);\n\t// Acknowledge the consumption of a single message.\n\tvoid acknowledge(MessageId messageId);\n\tdefault void acknowledge(Messages<?> messages);\n\t// The asynchronous version of acknowledge(List).\n\tCompletableFuture<Void> acknowledgeAsync(List<MessageId> messageIdList);\n}", "des": "The interface to acknowledge one or more messages individually or cumulatively."}
{"index": 14044, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface MessageId extends Comparable<MessageId>, Serializable {\n\t// De-serialize a message id from a byte array.\n\tstatic MessageId fromByteArray(byte[] data);\n\t// De-serialize a message id from a byte array with its topic information attached.\n\tstatic MessageId fromByteArrayWithTopic(byte[] data, String topicName);\n\t// Serialize the message ID into a byte array.\n\tbyte[] toByteArray();\n}", "des": "Opaque unique identifier of a single message"}
{"index": 14045, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface MessageListener<T> extends Serializable {\n\t// Get the notification when a topic is terminated.\n\tdefault void reachedEndOfTopic(Consumer<T> consumer);\n\t// This method is called whenever a new message is received.\n\tvoid received(Consumer<T> consumer, Message<T> msg);\n}", "des": "A listener that will be called in order for every message received."}
{"index": 14046, "repo": "pulsar-client-api-3.0.0", "code": "public interface MessagePayload {\n\t// Copy the bytes of the payload into the byte array.\n\tbyte[] copiedBuffer();\n\t// Release the resources if necessary.\n\tdefault void release();\n}", "des": "The abstraction of a message's payload."}
{"index": 14047, "repo": "pulsar-client-api-3.0.0", "code": "public interface MessagePayloadContext {\n\t// Convert the given payload to a single message if the entry is not a batch.\n\t<T> Message<T> asSingleMessage(MessagePayload payload, Schema<T> schema);\n\t// Get the internal single message with a specific index from a payload if the payload is a batch.\n\t<T> Message<T> getMessageAt(int index, int numMessages, MessagePayload payload, boolean containMetadata, Schema<T> schema);\n}", "des": "The context of the message payload, which usually represents a batched message (batch) or a single message."}
{"index": 14048, "repo": "pulsar-client-api-3.0.0", "code": "public interface MessagePayloadFactory {\n\t// Create a payload whose underlying buffer refers to a byte array.\n\tMessagePayload wrap(byte[] bytes);\n\t// Create a payload whose underlying buffer refers to a NIO buffer.\n\tMessagePayload wrap(ByteBuffer buffer);\n}", "des": "The factory class of MessagePayload."}
{"index": 14049, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface MessageRouter extends Serializable {\n\t// Deprecated. since 1.22.0.\n\tdefault int choosePartition(Message<?> msg);\n\t// Choose a partition based on msg and the topic metadata.\n\tdefault int choosePartition(Message<?> msg, TopicMetadata metadata);\n}", "des": "Interface for custom message router that can be passed to a producer to select the partition that a particular messsage should be published on."}
{"index": 14050, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum MessageRoutingMode extends Enum<MessageRoutingMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MessageRoutingMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MessageRoutingMode[] values();\n}", "des": "Default routing mode for messages to partition."}
{"index": 14051, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface Producer<T> extends Closeable {\n\t// Close the producer and releases resources allocated.\n\tvoid close();\n\t// Close the producer and releases resources allocated.\n\tCompletableFuture<Void> closeAsync();\n\t// Flush all the messages buffered in the client and wait until all messages have been successfully persisted.\n\tvoid flush();\n\t// Flush all the messages buffered in the client and wait until all messages have been successfully persisted.\n\tCompletableFuture<Void> flushAsync();\n}", "des": "Producer is used to publish messages on a topic."}
{"index": 14052, "repo": "pulsar-client-api-3.0.0", "code": "public enum ProducerAccessMode extends Enum<ProducerAccessMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ProducerAccessMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ProducerAccessMode[] values();\n}", "des": "The type of access to the topic that the producer requires."}
{"index": 14053, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface ProducerBuilder<T> extends Cloneable {\n\t// Configure the type of access mode that the producer requires on the topic.\n\tProducerBuilder<T> accessMode(ProducerAccessMode accessMode);\n\t// Add public encryption key, used by producer to encrypt the data key.\n\tProducerBuilder<T> addEncryptionKey(String key);\n\t// If enabled, partitioned producer will automatically discover new partitions at runtime.\n\tProducerBuilder<T> autoUpdatePartitions(boolean autoUpdate);\n}", "des": "ProducerBuilder is used to configure and create instances of Producer."}
{"index": 14054, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum ProducerCryptoFailureAction extends Enum<ProducerCryptoFailureAction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ProducerCryptoFailureAction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ProducerCryptoFailureAction[] values();\n}", "des": "The action the producer will take in case of encryption failures."}
{"index": 14055, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface ProducerInterceptor extends AutoCloseable {\n\t// This is called from Producer.send(Object) and Producer.sendAsync(Object) methods, before send the message to the brokers.\n\tMessage beforeSend(Producer producer, Message message);\n\t// Close the interceptor.\n\tvoid close();\n\t// Check whether the interceptor is eligible for this message.\n\tboolean eligible(Message message);\n}", "des": "A plugin interface that allows you to intercept (and possibly mutate) the messages received by the producer before they are published to the Pulsar brokers."}
{"index": 14056, "repo": "pulsar-client-api-3.0.0", "code": "@Private @Stable public class ProducerInterceptorWrapper extends Object implements ProducerInterceptor {\n\t// This is called from Producer.send(Object) and Producer.sendAsync(Object) methods, before send the message to the brokers.\n\tMessage beforeSend(Producer producer, Message message);\n\t// Close the interceptor.\n\tvoid close();\n\t// Check whether the interceptor is eligible for this message.\n\tboolean eligible(Message message);\n}", "des": "A wrapper for old style producer interceptor."}
{"index": 14057, "repo": "pulsar-client-api-3.0.0", "code": "public class PropertiesUtils extends Object {\n\t// Filters the Properties object so that only properties with the configured prefix are retained, and then removes that prefix and puts the key value pairs into the result map.\n\tstatic Map<String,Object> filterAndMapProperties(Properties props, String prefix);\n}", "des": "Internal utility methods for filtering and mapping Properties objects."}
{"index": 14058, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum ProxyProtocol extends Enum<ProxyProtocol> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ProxyProtocol valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ProxyProtocol[] values();\n}", "des": "Protcol type to determine type of proxy routing when client connects to proxy using {@link ClientBuilder::proxyServiceUrl}."}
{"index": 14059, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface PulsarClient extends Closeable {\n\t// Get a new builder instance that can used to configure and build a PulsarClient instance.\n\tstatic ClientBuilder builder();\n\t// Close the PulsarClient and release all the resources.\n\tvoid close();\n\t// Asynchronously close the PulsarClient and release all the resources.\n\tCompletableFuture<Void> closeAsync();\n\t// Get the list of partitions for a given topic.\n\tCompletableFuture<List<String>> getPartitionsForTopic(String topic);\n}", "des": "Class that provides a client interface to Pulsar."}
{"index": 14060, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public class PulsarClientException extends IOException {\n\t// Get the collection of previous exceptions which have caused retries for this operation.\n\tCollection<Throwable> getPreviousExceptions();\n\tstatic Collection<Throwable> getPreviousExceptions(Throwable t);\n\tlong getSequenceId();\n\tstatic boolean isRetriableError(Throwable t);\n\tstatic void setPreviousExceptions(Throwable t, Collection<Throwable> previous);\n}", "des": "Base type of exception thrown by Pulsar client."}
{"index": 14061, "repo": "pulsar-client-api-3.0.0", "code": "public interface PulsarClientImplementationBinding {\n\t// Convert the key/value schema info data json bytes to key/value schema info data bytes.\n\tbyte[] convertKeyValueDataStringToSchemaInfoSchema(byte[] keyValueSchemaInfoDataJsonBytes);\n\t// Convert the key/value schema data.\n\tString convertKeyValueSchemaInfoDataToString(KeyValue<SchemaInfo,SchemaInfo> kvSchemaInfo);\n\tAuthentication createAuthentication(String authPluginClassName, String authParamsString);\n}", "des": "Helper class for class instantiations and it also contains methods to work with schemas."}
{"index": 14062, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface Reader<T> extends Closeable {\n\t// Asynchronously close the reader and stop the broker to push more messages.\n\tCompletableFuture<Void> closeAsync();\n\tString getTopic();\n\t// Check if there is any message available to read from the current position.\n\tboolean hasMessageAvailable();\n\t// Asynchronously check if there is any message available to read from the current position.\n\tCompletableFuture<Boolean> hasMessageAvailableAsync();\n}", "des": "A Reader can be used to scan through all the messages currently available in a topic."}
{"index": 14063, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface ReaderBuilder<T> extends Cloneable {\n\t// Buffering large number of outstanding uncompleted chunked messages can create memory pressure and it can be guarded by providing this @maxPendingChunkedMessage threshold.\n\tReaderBuilder<T> autoAckOldestChunkedMessageOnQueueFull(boolean autoAckOldestChunkedMessageOnQueueFull);\n\t// If enabled, the reader will auto subscribe for partitions increasement.\n\tReaderBuilder<T> autoUpdatePartitions(boolean autoUpdate);\n}", "des": "ReaderBuilder is used to configure and create instances of Reader."}
{"index": 14064, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface ReaderInterceptor<T> {\n\t// This is called just before the message is returned by Reader.readNext(), ReaderListener.received(Reader, Message) or the CompletableFuture returned by Reader.readNextAsync() completes.\n\tMessage<T> beforeRead(Reader<T> reader, Message<T> message);\n\t// Close the interceptor.\n\tvoid close();\n\t// This method is called when partitions of the topic (partitioned-topic) changes.\n\tdefault void onPartitionsChange(String topicName, int partitions);\n}", "des": "Reader interceptor."}
{"index": 14065, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface ReaderListener<T> extends Serializable {\n\t// Get the notification when a topic is terminated.\n\tdefault void reachedEndOfTopic(Reader<T> reader);\n\t// This method is called whenever a new message is received.\n\tvoid received(Reader<T> reader, Message<T> msg);\n}", "des": "A listener that will be called in order for every message received."}
{"index": 14066, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface RecordSchemaBuilder {\n\t// Build the schema info.\n\tSchemaInfo build(SchemaType schemaType);\n\t// Add doc to the record schema.\n\tRecordSchemaBuilder doc(String doc);\n\t// Add a field with the given name to the record.\n\tFieldSchemaBuilder field(String fieldName);\n\t// Add a field with the given name and genericSchema to the record.\n\tFieldSchemaBuilder field(String fieldName, GenericSchema genericSchema);\n}", "des": "Building the schema for a GenericRecord."}
{"index": 14067, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum RegexSubscriptionMode extends Enum<RegexSubscriptionMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RegexSubscriptionMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RegexSubscriptionMode[] values();\n}", "des": "When subscribing to topics using a regular expression, one can specify to only pick a certain type of topics."}
{"index": 14068, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface Schema<T> extends Cloneable {\n\t// Deprecated.\n\tstatic Schema<GenericRecord> AUTO();\n\t// Create a schema instance that automatically deserialize messages based on the current topic schema.\n\tstatic Schema<GenericRecord> AUTO_CONSUME();\n\t// Create a schema instance that accepts a serialized payload and validates it against the topic schema.\n\tstatic Schema<byte[]> AUTO_PRODUCE_BYTES();\n}", "des": "Message schema definition."}
{"index": 14069, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface SchemaDefinition<T> {\n\t// Get a new builder instance that can used to configure and build a SchemaDefinition instance.\n\tstatic <T> SchemaDefinitionBuilder<T> builder();\n\t// Get schema whether always allow null or not.\n\tboolean getAlwaysAllowNull();\n\t// Get pojo classLoader.\n\tClassLoader getClassLoader();\n\t// Get json schema definition.\n\tString getJsonDef();\n\t// Get pojo schema definition.\n\tClass<T> getPojo();\n\t// Get schema class.\n\tMap<String,String> getProperties();\n}", "des": "Interface for schema definition."}
{"index": 14070, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface SchemaDefinitionBuilder<T> {\n\t// Set schema info properties.\n\tSchemaDefinitionBuilder<T> addProperty(String key, String value);\n\t// Build the schema definition.\n\tSchemaDefinition<T> build();\n\t// Set schema whether always allow null or not.\n\tSchemaDefinitionBuilder<T> withAlwaysAllowNull(boolean alwaysAllowNull);\n\t// Set schema of pojo classLoader.\n\tSchemaDefinitionBuilder<T> withClassLoader(ClassLoader classLoader);\n}", "des": "Builder to build schema definition SchemaDefinition."}
{"index": 14071, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface SchemaInfo {\n\tstatic SchemaInfo.SchemaInfoBuilder builder();\n\tString getName();\n\t// Additional properties of the schema definition (implementation defined).\n\tMap<String,String> getProperties();\n\t// The schema data in AVRO JSON format.\n\tbyte[] getSchema();\n\tString getSchemaDefinition();\n\t// The created time of schema.\n\tlong getTimestamp();\n\t// The type of schema (AVRO, JSON, PROTOBUF, etc..).\n\tSchemaType getType();\n}", "des": "Information about the schema."}
{"index": 14072, "repo": "pulsar-client-api-3.0.0", "code": "@Private @Stable public interface SchemaInfoProvider {\n\t// Retrieve the latest schema info.\n\tCompletableFuture<SchemaInfo> getLatestSchema();\n\t// Retrieve the schema info of a given schemaVersion.\n\tCompletableFuture<SchemaInfo> getSchemaByVersion(byte[] schemaVersion);\n\t// Retrieve the topic name.\n\tString getTopicName();\n}", "des": "Schema Provider."}
{"index": 14073, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface SchemaReader<T> {\n\t// Returns the underling Schema if possible.\n\tdefault Optional<Object> getNativeSchema();\n\t// Serialize bytes convert pojo.\n\tdefault T read(byte[] bytes);\n\t// Serialize bytes convert pojo.\n\tdefault T read(byte[] bytes, byte[] schemaVersion);\n\t// serialize bytes convert pojo.\n\tT read(byte[] bytes, int offset, int length);\n\t// serialize bytes convert pojo.\n\tT read(InputStream inputStream);\n}", "des": "Deserialize messages from bytes."}
{"index": 14074, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum SchemaType extends Enum<SchemaType> {\n\tint getValue();\n\tboolean isPrimitive();\n\tstatic boolean isPrimitiveType(SchemaType type);\n\tboolean isStruct();\n\tstatic boolean isStructType(SchemaType type);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SchemaType valueOf(int value);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SchemaType valueOf(String name);\n}", "des": "Types of supported schema for Pulsar messages."}
{"index": 14075, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface ServiceUrlProvider extends AutoCloseable {\n\t// Close the resource that the provider allocated.\n\tdefault void close();\n\t// Get the current service URL the Pulsar client should connect to.\n\tString getServiceUrl();\n\t// Initialize the service url provider with Pulsar client instance.\n\tvoid initialize(PulsarClient client);\n}", "des": "The provider to provide the service url."}
{"index": 14076, "repo": "pulsar-client-api-3.0.0", "code": "public enum SizeUnit extends Enum<SizeUnit> {\n\tlong toBytes(long value);\n\tlong toGigaBytes(long value);\n\tlong toKiloBytes(long value);\n\tlong toMegaBytes(long value);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SizeUnit valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SizeUnit[] values();\n}", "des": "Size unit converter."}
{"index": 14077, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum SubscriptionInitialPosition extends Enum<SubscriptionInitialPosition> {\n\tfinal int getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SubscriptionInitialPosition valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SubscriptionInitialPosition[] values();\n}", "des": "When creating a consumer, if the subscription does not exist, a new subscription will be created."}
{"index": 14078, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum SubscriptionMode extends Enum<SubscriptionMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SubscriptionMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SubscriptionMode[] values();\n}", "des": "Types of subscription mode supported by Pulsar."}
{"index": 14079, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public enum SubscriptionType extends Enum<SubscriptionType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SubscriptionType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SubscriptionType[] values();\n}", "des": "Types of subscription supported by Pulsar."}
{"index": 14080, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Evolving public interface TableViewBuilder<T> {\n\t// Set the interval of updating partitions (default: 1 minute).\n\tTableViewBuilder<T> autoUpdatePartitionsInterval(int interval, TimeUnit unit);\n\t// Finalize the creation of the TableView instance.\n\tTableView<T> create();\n\t// Finalize the creation of the TableView instance in asynchronous mode.\n\tCompletableFuture<TableView<T>> createAsync();\n}", "des": "TableViewBuilder is used to configure and create instances of TableView."}
{"index": 14081, "repo": "pulsar-client-api-3.0.0", "code": "public interface TopicConsumerBuilder<T> {\n\t// Complete the configuration of the topic specific options and return control back to the ConsumerBuilder instance.\n\tConsumerBuilder<T> build();\n\t// Configure the priority level of this topic.\n\tTopicConsumerBuilder<T> priorityLevel(int priorityLevel);\n}", "des": "TopicConsumerBuilder is used to configure topic specific options to override those set at the ConsumerBuilder level."}
{"index": 14082, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Evolving public interface Transaction {\n\t// Abort the transaction.\n\tCompletableFuture<Void> abort();\n\t// Commit the transaction.\n\tCompletableFuture<Void> commit();\n\t// Get transaction state.\n\tTransaction.State getState();\n\t// Get TxnID of the transaction.\n\tTxnID getTxnID();\n}", "des": "The class represents a transaction within Pulsar."}
{"index": 14083, "repo": "pulsar-client-api-3.0.0", "code": "@Private @Evolving public interface TransactionBufferClient {\n\t// Abort the transaction associated with the topic subscription.\n\tCompletableFuture<TxnID> abortTxnOnSubscription(String topic, String subscription, long txnIdMostBits, long txnIdLeastBits, long lowWaterMark);\n\t// Abort the transaction associated with the topic.\n\tCompletableFuture<TxnID> abortTxnOnTopic(String topic, long txnIdMostBits, long txnIdLeastBits, long lowWaterMark);\n\tvoid close();\n}", "des": "The transaction buffer client to commit and abort transactions on topics or subscription."}
{"index": 14084, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Evolving public interface TransactionBuilder {\n\t// Build the transaction with the configured settings.\n\tCompletableFuture<Transaction> build();\n\t// Configure the maximum amount of time that the transaction coordinator will for a transaction to be completed by the client before proactively aborting the ongoing transaction.\n\tTransactionBuilder withTransactionTimeout(long timeout, TimeUnit timeoutUnit);\n}", "des": "The builder to build a transaction for Pulsar."}
{"index": 14085, "repo": "pulsar-client-api-3.0.0", "code": "@Private @Evolving public interface TransactionCoordinatorClient extends Closeable {\n\t// Abort txn.\n\tvoid abort(TxnID txnID);\n\t// Abort txn asynchronously.\n\tCompletableFuture<Void> abortAsync(TxnID txnID);\n\t// Add publish partition to txn.\n\tvoid addPublishPartitionToTxn(TxnID txnID, List<String> partitions);\n\t// Add publish partition to txn asynchronously.\n\tCompletableFuture<Void> addPublishPartitionToTxnAsync(TxnID txnID, List<String> partitions);\n}", "des": "Transaction coordinator client."}
{"index": 14086, "repo": "pulsar-client-api-3.0.0", "code": "public static enum TransactionCoordinatorClient.State extends Enum<TransactionCoordinatorClient.State> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TransactionCoordinatorClient.State valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TransactionCoordinatorClient.State[] values();\n}", "des": "State of the transaction coordinator client."}
{"index": 14087, "repo": "pulsar-client-api-3.0.0", "code": "@Public @Stable public interface TypedMessageBuilder<T> extends Serializable {\n\t// Request to deliver the message only after the specified relative delay.\n\tTypedMessageBuilder<T> deliverAfter(long delay, TimeUnit unit);\n\t// Deliver the message only at or after the specified absolute timestamp.\n\tTypedMessageBuilder<T> deliverAt(long timestamp);\n\t// Disable geo-replication for this message.\n\tTypedMessageBuilder<T> disableReplication();\n}", "des": "Message builder that constructs a message to be published through a producer."}
{"index": 14088, "repo": "spring-batch-core-5.0.2", "code": "public abstract class AbstractJob extends Object implements Job, StepLocator, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean {\n\t// Assert mandatory properties: JobRepository.\n\tvoid afterPropertiesSet();\n\t// Extension point for subclasses allowing them to concentrate on processing logic and ignore listeners and repository calls.\n\tprotected abstract void doExecute(JobExecution execution);\n}", "des": "Abstract implementation of the Job interface."}
{"index": 14089, "repo": "spring-batch-core-5.0.2", "code": "public abstract class AbstractJobExplorerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobExplorer>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Creates an execution context instance data access object (DAO).\n\tprotected abstract ExecutionContextDao createExecutionContextDao();\n\t// Creates a job execution data access object (DAO).\n\tprotected abstract JobExecutionDao createJobExecutionDao();\n}", "des": "A FactoryBean that automates the creation of a SimpleJobExplorer."}
{"index": 14090, "repo": "spring-batch-core-5.0.2", "code": "public abstract class AbstractPartitionHandler extends Object implements PartitionHandler {\n\t// Executes the specified StepExecution instances and returns an updated view of them.\n\tprotected abstract Set<StepExecution> doHandle(StepExecution managerStepExecution, Set<StepExecution> partitionStepExecutions);\n\t// Returns the number of step executions.\n\tint getGridSize();\n}", "des": "Base PartitionHandler implementation providing common base features."}
{"index": 14091, "repo": "spring-batch-core-5.0.2", "code": "public abstract class AbstractStep extends Object implements Step, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanNameAware {\n\tvoid afterPropertiesSet();\n\t// Extension point for subclasses to provide callbacks to their collaborators at the end of a step (right at the end of the finally block), to close or release resources.\n\tprotected void close(ExecutionContext ctx);\n}", "des": "A Step implementation that provides common behavior to subclasses, including registering and calling listeners."}
{"index": 14092, "repo": "spring-batch-core-5.0.2", "code": "public abstract class AbstractTaskletStepBuilder<B extends AbstractTaskletStepBuilder<B>> extends StepBuilderHelper<B> {\n\t// Build the step from the components collected by the fluent setters.\n\tTaskletStep build();\n\t// Convenience method for subclasses to determine if the step is concurrent.\n\tprotected boolean concurrent();\n\tprotected abstract Tasklet createTasklet();\n\t// Sets the exception handler to use in the case of tasklet failures.\n\tB exceptionHandler(ExceptionHandler exceptionHandler);\n}", "des": "Base class for step builders that want to build a TaskletStep."}
{"index": 14093, "repo": "spring-batch-core-5.0.2", "code": "public class ApplicationContextJobFactory extends Object implements JobFactory {\n\t// Create an ApplicationContext from the factory provided and pull out a bean with the name given during initialization.\n\tfinal Job createJob();\n\t// Return the name of the instance passed in on initialization.\n\tString getJobName();\n}", "des": "A JobFactory that creates its own ApplicationContext and pulls a bean out when asked to create a Job."}
{"index": 14094, "repo": "spring-batch-core-5.0.2", "code": "public enum BatchJobObservation extends Enum<BatchJobObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BatchJobObservation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BatchJobObservation[] values();\n}", "des": "Observation created around a Job execution."}
{"index": 14095, "repo": "spring-batch-core-5.0.2", "code": "public final class BatchMetrics extends Object {\n\t// Calculate the duration between two dates.\n\tstatic Duration calculateDuration(LocalDateTime startTime, LocalDateTime endTime);\n\t// Create a Counter.\n\tstatic io.micrometer.core.instrument.Counter createCounter(io.micrometer.core.instrument.MeterRegistry meterRegistry, String name, String description, io.micrometer.core.instrument.Tag... tags);\n}", "des": "Central class for batch metrics."}
{"index": 14096, "repo": "spring-batch-core-5.0.2", "code": "public enum BatchStatus extends Enum<BatchStatus> {\n\tboolean isGreaterThan(BatchStatus other);\n\tboolean isLessThan(BatchStatus other);\n\tboolean isLessThanOrEqualTo(BatchStatus other);\n\t// Convenience method to decide if a status indicates that work is in progress.\n\tboolean isRunning();\n\t// Convenience method to decide if a status indicates execution was unsuccessful.\n\tboolean isUnsuccessful();\n\t// Find a BatchStatus that matches the beginning of the given value.\n\tstatic BatchStatus match(String value);\n}", "des": "Enumeration representing the status of an execution."}
{"index": 14097, "repo": "spring-batch-core-5.0.2", "code": "public enum BatchStepObservation extends Enum<BatchStepObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BatchStepObservation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BatchStepObservation[] values();\n}", "des": "Observation created around a step execution."}
{"index": 14098, "repo": "spring-batch-core-5.0.2", "code": "public class CallableTaskletAdapter extends Object implements Tasklet, org.springframework.beans.factory.InitializingBean {\n\t// Assert that the callable is set.\n\tvoid afterPropertiesSet();\n\t// Execute the provided Callable and return its RepeatStatus.\n\tRepeatStatus execute(StepContribution contribution, ChunkContext chunkContext);\n\t// Public setter for the Callable.\n\tvoid setCallable(Callable<RepeatStatus> callable);\n}", "des": "Adapts a Callable<RepeatStatus> to the Tasklet interface."}
{"index": 14099, "repo": "spring-batch-core-5.0.2", "code": "public interface ChunkListener extends StepListener {\n\t// Callback after the chunk is executed, outside the transaction.\n\tdefault void afterChunk(ChunkContext context);\n\t// Callback after a chunk has been marked for rollback.\n\tdefault void afterChunkError(ChunkContext context);\n\t// Callback before the chunk is executed, but inside the transaction.\n\tdefault void beforeChunk(ChunkContext context);\n}", "des": "Listener interface for the lifecycle of a chunk."}
{"index": 14100, "repo": "spring-batch-core-5.0.2", "code": "public class ChunkOrientedTasklet<I> extends Object implements Tasklet {\n\t// Given the current context in the form of a step contribution, do whatever is necessary to process this unit inside a transaction.\n\tRepeatStatus execute(StepContribution contribution, ChunkContext chunkContext);\n\t// Flag to indicate that items should be buffered once read.\n\tvoid setBuffering(boolean buffering);\n}", "des": "A Tasklet implementing variations on read-process-write item handling."}
{"index": 14101, "repo": "spring-batch-core-5.0.2", "code": "public class ClasspathXmlApplicationContextsFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ApplicationContextFactory[]>, org.springframework.context.ApplicationContextAware {\n\t// Create an ApplicationContextFactory from each resource provided in setResources(Resource[]).\n\tApplicationContextFactory[] getObject();\n\t// The type of object returned by this factory as an array of ApplicationContextFactory.\n\tClass<?> getObjectType();\n}", "des": "A convenient factory for creating a set of ApplicationContextFactory components from a set of resources."}
{"index": 14102, "repo": "spring-batch-core-5.0.2", "code": "public class CommandLineJobRunner extends Object {\n\t// Delegate to the exiter to (possibly) exit the VM gracefully.\n\tvoid exit(int status);\n\t// Retrieve the error message set by an instance of CommandLineJobRunner as it exits.\n\tstatic String getErrorMessage();\n\t// Launch a batch job using a CommandLineJobRunner.\n\tstatic void main(String[] args);\n\t// Static setter for the SystemExiter so it can be adjusted before dependency injection.\n\tstatic void presetSystemExiter(SystemExiter systemExiter);\n}", "des": "Basic launcher for starting jobs from the command line."}
{"index": 14103, "repo": "spring-batch-core-5.0.2", "code": "public class CompositeJobParametersValidator extends Object implements JobParametersValidator, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Public setter for the validators\n\tvoid setValidators(List<JobParametersValidator> validators);\n\t// Validates the JobParameters according to the injected JobParameterValidators Validation stops and exception is thrown on first validation error\n\tvoid validate(JobParameters parameters);\n}", "des": "Composite JobParametersValidator that passes the job parameters through a sequence of injected JobParametersValidators"}
{"index": 14104, "repo": "spring-batch-core-5.0.2", "code": "public class CoreNamespaceUtils extends Object {\n\t// Create the beans based on the content of the source.\n\tstatic void autoregisterBeansForNamespace(org.springframework.beans.factory.xml.ParserContext parserContext, Object source);\n\tstatic boolean isAbstract(Element element);\n\t// Should this element be treated as incomplete? If it has a parent or is abstract, it may not have all properties.\n\tstatic boolean isUnderspecified(Element element);\n}", "des": "Utility methods used in parsing of the batch core namespace."}
{"index": 14105, "repo": "spring-batch-core-5.0.2", "code": "public class DataFieldMaxValueJobParametersIncrementer extends Object implements JobParametersIncrementer {\n\t// Get the incrementer.\n\torg.springframework.jdbc.support.incrementer.DataFieldMaxValueIncrementer getDataFieldMaxValueIncrementer();\n\t// Get the key.\n\tString getKey();\n\t// Increments the provided parameters.\n\tJobParameters getNext(JobParameters jobParameters);\n}", "des": "This incrementer uses a DataFieldMaxValueIncrementer to generate the sequence of values to use as job instance discriminator."}
{"index": 14106, "repo": "spring-batch-core-5.0.2", "code": "public class DecisionState extends AbstractState {\n\t// Handle some business or processing logic and return a status that can be used to drive a flow to the next State.\n\tFlowExecutionStatus handle(FlowExecutor executor);\n\t// Inquire as to whether a State is an end state.\n\tboolean isEndState();\n}", "des": "State that requires a decider to make the status decision."}
{"index": 14107, "repo": "spring-batch-core-5.0.2", "code": "@Configuration(proxyBeanMethods=false) @Import(ScopeConfiguration.class) public class DefaultBatchConfiguration extends Object implements org.springframework.context.ApplicationContextAware {\n\t// Return the Charset to use when serializing/deserializing the execution context.\n\tprotected Charset getCharset();\n\t// Return the value from Types class to indicate the type to use for a CLOB\n\tprotected int getClobType();\n}", "des": "Base Configuration class that provides common JDBC-based infrastructure beans for enabling and using Spring Batch."}
{"index": 14108, "repo": "spring-batch-core-5.0.2", "code": "public class DefaultExecutionContextSerializer extends Object implements ExecutionContextSerializer {\n\t// Deserializes an execution context from the provided InputStream.\n\tMap<String,Object> deserialize(InputStream inputStream);\n\t// Serializes an execution context to the provided OutputStream.\n\tvoid serialize(Map<String,Object> context, OutputStream out);\n}", "des": "An implementation of the ExecutionContextSerializer that produces/consumes Base64 content."}
{"index": 14109, "repo": "spring-batch-core-5.0.2", "code": "public class DefaultItemFailureHandler extends ItemListenerSupport<Object,Object> {\n\t// Called if an error occurs while trying to read.\n\tvoid onReadError(Exception ex);\n\t// Called if an error occurs while trying to write.\n\tvoid onWriteError(Exception ex, Chunk<? extends Object> item);\n}", "des": "Default implementation of the ItemListenerSupport class that writes all exceptions via commons logging."}
{"index": 14110, "repo": "spring-batch-core-5.0.2", "code": "public class DefaultJobLoader extends Object implements JobLoader, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Unregister all the jobs and close all the contexts created by this loader.\n\tvoid clear();\n\t// Load an application context and register all the jobs.\n\tCollection<Job> load(ApplicationContextFactory factory);\n}", "des": "Default implementation of JobLoader."}
{"index": 14111, "repo": "spring-batch-core-5.0.2", "code": "public class DefaultJobParametersConverter extends Object implements JobParametersConverter {\n\t// Decode a job parameter from a string.\n\tprotected JobParameter<?> decode(String encodedJobParameter);\n\t// Encode a job parameter to a string.\n\tprotected String encode(JobParameter<?> jobParameter);\n\t// Get a new JobParameters instance.\n\tJobParameters getJobParameters(Properties properties);\n\t// The inverse operation: get a Properties instance.\n\tProperties getProperties(JobParameters jobParameters);\n}", "des": "Converter for JobParameters instances that uses a simple naming convention for converting job parameters."}
{"index": 14112, "repo": "spring-batch-core-5.0.2", "code": "public class DefaultJobParametersExtractor extends Object implements JobParametersExtractor {\n\t// Extract job parameters from the step execution, for example from the execution context or other properties.\n\tJobParameters getJobParameters(Job job, StepExecution stepExecution);\n\t// Set the JobParametersConverter to use.\n\tvoid setJobParametersConverter(JobParametersConverter jobParametersConverter);\n}", "des": "Simple implementation of JobParametersExtractor which pulls parameters with named keys out of the step execution context and the job parameters of the surrounding job."}
{"index": 14113, "repo": "spring-batch-core-5.0.2", "code": "public class DefaultJobParametersValidator extends Object implements JobParametersValidator, org.springframework.beans.factory.InitializingBean {\n\t// Check that there are no overlaps between required and optional keys.\n\tvoid afterPropertiesSet();\n\t// The keys that are optional in the parameters.\n\tfinal void setOptionalKeys(String[] optionalKeys);\n\t// The keys that are required in the parameters.\n\tfinal void setRequiredKeys(String[] requiredKeys);\n}", "des": "Default implementation of JobParametersValidator."}
{"index": 14114, "repo": "spring-batch-core-5.0.2", "code": "public class EndState extends AbstractState {\n\tprotected String getCode();\n\tprotected FlowExecutionStatus getStatus();\n\t// Return the FlowExecutionStatus stored.\n\tFlowExecutionStatus handle(FlowExecutor executor);\n\tprotected boolean isAbandon();\n\t// Inquire as to whether a State is an end state.\n\tboolean isEndState();\n\t// Performs any logic to update the exit status for the current flow.\n\tprotected void setExitStatus(FlowExecutor executor, String code);\n}", "des": "State implementation for ending a job if it is in progress and continuing if just starting."}
{"index": 14115, "repo": "spring-batch-core-5.0.2", "code": "public class Entity extends Object implements Serializable {\n\t// Attempt to establish identity based on id if both exist.\n\tboolean equals(Object other);\n\tLong getId();\n\tInteger getVersion();\n\t// Increment the version number.\n\tvoid incrementVersion();\n\tvoid setId(Long id);\n\t// Public setter for the version.\n\tvoid setVersion(Integer version);\n}", "des": "Batch Domain Entity class."}
{"index": 14116, "repo": "spring-batch-core-5.0.2", "code": "public class ExceptionClassifierSkipPolicy extends Object implements SkipPolicy {\n\t// The classifier that will be used to choose a delegate policy.\n\tvoid setExceptionClassifier(org.springframework.classify.SubclassClassifier<Throwable,SkipPolicy> classifier);\n\t// Setter for policy map.\n\tvoid setPolicyMap(Map<Class<? extends Throwable>,SkipPolicy> policyMap);\n\t// Consult the classifier and find a delegate policy, and then use that to determine the outcome.\n\tboolean shouldSkip(Throwable t, long skipCount);\n}", "des": "A SkipPolicy that depends on an exception classifier to make its decision, and then delegates to the classifier result."}
{"index": 14117, "repo": "spring-batch-core-5.0.2", "code": "public interface ExecutionContextDao {\n\t// Delete the execution context of the given JobExecution.\n\tdefault void deleteExecutionContext(JobExecution jobExecution);\n\t// Delete the execution context of the given StepExecution.\n\tdefault void deleteExecutionContext(StepExecution stepExecution);\n\tExecutionContext getExecutionContext(JobExecution jobExecution);\n\tExecutionContext getExecutionContext(StepExecution stepExecution);\n}", "des": "DAO interface for persisting and retrieving ExecutionContexts."}
{"index": 14118, "repo": "spring-batch-core-5.0.2", "code": "public class ExecutionContextPromotionListener extends Object implements StepExecutionListener, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Give a listener a chance to modify the exit status from a step.\n\tExitStatus afterStep(StepExecution stepExecution);\n\tvoid setKeys(String[] keys);\n\tvoid setStatuses(String[] statuses);\n\t// If set to TRUE, the listener will throw an exception if any 'key' is not found in the Step ExecutionContext.\n\tvoid setStrict(boolean strict);\n}", "des": "This class can be used to automatically promote items from the Step ExecutionContext to the Job ExecutionContext at the end of a step."}
{"index": 14119, "repo": "spring-batch-core-5.0.2", "code": "public class ExitStatus extends Object implements Serializable, Comparable<ExitStatus> {\n\t// Add an exit description to an existing ExitStatus.\n\tExitStatus addExitDescription(String description);\n\t// Extract the stack trace from the throwable provided and append it to the existing description.\n\tExitStatus addExitDescription(Throwable throwable);\n\t// Create a new ExitStatus with a logical combination of the exit code and a concatenation of the descriptions.\n\tExitStatus and(ExitStatus status);\n}", "des": "Value object used to carry information about the status of a job or step execution."}
{"index": 14120, "repo": "spring-batch-core-5.0.2", "code": "public class FaultTolerantChunkProcessor<I,O> extends SimpleChunkProcessor<I,O> {\n\t// Extension point for subclasses that want to adjust the outputs based on additional saved data in the inputs.\n\tprotected Chunk<O> getAdjustedOutputs(Chunk<I> inputs, Chunk<O> outputs);\n\t// Extension point for subclasses to calculate the filter count.\n\tprotected int getFilterCount(Chunk<I> inputs, Chunk<O> outputs);\n}", "des": "FaultTolerant implementation of the ChunkProcessor interface, that allows for skipping or retry of items that cause exceptions during writing."}
{"index": 14121, "repo": "spring-batch-core-5.0.2", "code": "public class FaultTolerantChunkProvider<I> extends SimpleChunkProvider<I> {\n\tvoid postProcess(StepContribution contribution, Chunk<I> chunk);\n\t// Delegates to SimpleChunkProvider.doRead().\n\tprotected I read(StepContribution contribution, Chunk<I> chunk);\n\tvoid setMaxSkipsOnRead(int maxSkipsOnRead);\n}", "des": "FaultTolerant implementation of the ChunkProvider interface, that allows for skipping or retry of items that cause exceptions during reading or processing."}
{"index": 14122, "repo": "spring-batch-core-5.0.2", "code": "public class FaultTolerantStepBuilder<I,O> extends SimpleStepBuilder<I,O> {\n\t// Provide a backoff policy to prevent items being retried immediately (e.g.\n\tFaultTolerantStepBuilder<I,O> backOffPolicy(org.springframework.retry.backoff.BackOffPolicy backOffPolicy);\n\t// Build a step with the reader, writer, processor as provided.\n\tTaskletStep build();\n\tprotected ChunkProcessor<I> createChunkProcessor();\n\tprotected ChunkProvider<I> createChunkProvider();\n\tprotected BatchRetryTemplate createRetryOperations();\n}", "des": "A step builder for fully fault tolerant chunk-oriented item processing steps."}
{"index": 14123, "repo": "spring-batch-core-5.0.2", "code": "public class FaultTolerantStepFactoryBean<T,S> extends SimpleStepFactoryBean<T,S> {\n\tprotected void applyConfiguration(SimpleStepBuilder<T,S> builder);\n\tprotected SimpleStepBuilder<T,S> createBuilder(String name);\n\t// Public setter for the BackOffPolicy.\n\tvoid setBackOffPolicy(org.springframework.retry.backoff.BackOffPolicy backOffPolicy);\n\t// Public setter for the capacity of the cache in the retry policy.\n\tvoid setCacheCapacity(int cacheCapacity);\n}", "des": "Factory bean for step that provides options for configuring skip behavior."}
{"index": 14124, "repo": "spring-batch-core-5.0.2", "code": "public class FlowBuilder<Q> extends Object {\n\t// Validate the current state of the builder and build a flow.\n\tQ build();\n\t// A synonym for build() which callers might find useful.\n\tfinal Q end();\n\tprotected Flow flow();\n\t// Start again from a subflow that was already registered.\n\tFlowBuilder<Q> from(Flow flow);\n\t// Start again from a decision that was already registered.\n\tFlowBuilder.UnterminatedFlowBuilder<Q> from(JobExecutionDecider decider);\n}", "des": "A builder for a flow of steps that can be executed as a job or as part of a job."}
{"index": 14125, "repo": "spring-batch-core-5.0.2", "code": "public static class FlowBuilder.TransitionBuilder<Q> extends Object {\n\t// Signal the successful end of the flow.\n\tFlowBuilder<Q> end();\n\t// Signal the end of the flow with the status provided.\n\tFlowBuilder<Q> end(String status);\n\t// Signal the end of the flow with an error condition.\n\tFlowBuilder<Q> fail();\n\t// Signal the successful end of the flow.\n\tFlowBuilder<Q> stop();\n\t// Stop the flow and provide a flow to start with if the flow is restarted.\n\tFlowBuilder<Q> stopAndRestart(Flow flow);\n}", "des": "A builder for transitions within a flow."}
{"index": 14126, "repo": "spring-batch-core-5.0.2", "code": "public class FlowExecutionStatus extends Object implements Comparable<FlowExecutionStatus> {\n\t// Create an ordering on FlowExecutionStatus instances by comparing their statuses.\n\tint compareTo(FlowExecutionStatus other);\n\t// Check the equality of the statuses.\n\tboolean equals(Object object);\n\tString getName();\n\tboolean isEnd();\n\tboolean isFail();\n\tboolean isStop();\n}", "des": "Represents the status of FlowExecution."}
{"index": 14127, "repo": "spring-batch-core-5.0.2", "code": "public interface FlowExecutor {\n\t// Handle any status changes that might be needed at the start of a state.\n\tvoid abandonStepExecution();\n\tvoid addExitStatus(String code);\n\t// Chance to clean up resources at the end of a flow (whether it completed successfully or not).\n\tvoid close(FlowExecution result);\n\tString executeStep(Step step);\n\tJobExecution getJobExecution();\n\tStepExecution getStepExecution();\n\tboolean isRestart();\n}", "des": "Context and execution strategy for FlowJob to allow it to delegate its execution step by step."}
{"index": 14128, "repo": "spring-batch-core-5.0.2", "code": "public class FlowJob extends AbstractJob {\n\t// Extension point for subclasses allowing them to concentrate on processing logic and ignore listeners and repository calls.\n\tprotected void doExecute(JobExecution execution);\n\t// Retrieve the step with the given name.\n\tStep getStep(String stepName);\n\t// Retrieve the step names.\n\tCollection<String> getStepNames();\n\t// Public setter for the flow.\n\tvoid setFlow(Flow flow);\n}", "des": "Implementation of the Job interface that allows for complex flows of steps, rather than requiring sequential execution."}
{"index": 14129, "repo": "spring-batch-core-5.0.2", "code": "public class FlowJobBuilder extends JobBuilderHelper<FlowJobBuilder> {\n\t// Build a job that executes the flow provided, normally composed of other steps.\n\tJob build();\n\t// Provide a single flow to execute as the job.\n\tprotected FlowJobBuilder flow(Flow flow);\n\t// Start a job with this flow, but expect to transition from there to other flows or steps.\n\tJobFlowBuilder start(Flow flow);\n}", "des": "A job builder for FlowJob instances."}
{"index": 14130, "repo": "spring-batch-core-5.0.2", "code": "public class FlowState extends AbstractState implements FlowHolder {\n\tCollection<Flow> getFlows();\n\t// Handle some business or processing logic and return a status that can be used to drive a flow to the next State.\n\tFlowExecutionStatus handle(FlowExecutor executor);\n\t// Inquire as to whether a State is an end state.\n\tboolean isEndState();\n}", "des": "State that delegates to a Flow"}
{"index": 14131, "repo": "spring-batch-core-5.0.2", "code": "public class FlowStep extends AbstractStep {\n\t// Ensure that the flow is set.\n\tvoid afterPropertiesSet();\n\t// Delegate to the flow provided for the execution of the step.\n\tprotected void doExecute(StepExecution stepExecution);\n\t// Public setter for the flow.\n\tvoid setFlow(Flow flow);\n}", "des": "A Step implementation that delegates to a Flow."}
{"index": 14132, "repo": "spring-batch-core-5.0.2", "code": "public class FlowStepBuilder extends StepBuilderHelper<FlowStepBuilder> {\n\t// Build a step that executes the flow provided, normally composed of other steps.\n\tStep build();\n\t// Provide a flow to execute during the step.\n\tFlowStepBuilder flow(Flow flow);\n\tprotected FlowStepBuilder self();\n}", "des": "A step builder for FlowStep instances."}
{"index": 14133, "repo": "spring-batch-core-5.0.2", "code": "public class GroupAwareJob extends Object implements Job {\n\tboolean equals(Object obj);\n\t// Run the JobExecution and update the meta information, such as status and statistics, as necessary.\n\tvoid execute(JobExecution execution);\n\t// If clients need to generate new parameters for the next execution in a sequence, they can use this incrementer.\n\tJobParametersIncrementer getJobParametersIncrementer();\n}", "des": "A Job that can optionally prepend a group name to another job's name, to make it fit a naming convention for type or origin."}
{"index": 14134, "repo": "spring-batch-core-5.0.2", "code": "public interface ItemProcessListener<T,S> extends StepListener {\n\t// Called after ItemProcessor.process(Object) returns.\n\tdefault void afterProcess(T item, S result);\n\t// Called before ItemProcessor.process(Object).\n\tdefault void beforeProcess(T item);\n\t// Called if an exception was thrown from ItemProcessor.process(Object).\n\tdefault void onProcessError(T item, Exception e);\n}", "des": "Listener interface for the processing of an item."}
{"index": 14135, "repo": "spring-batch-core-5.0.2", "code": "public interface ItemReadListener<T> extends StepListener {\n\t// Called after ItemReader.read().\n\tdefault void afterRead(T item);\n\t// Called before ItemReader.read()\n\tdefault void beforeRead();\n\t// Called if an error occurs while trying to read.\n\tdefault void onReadError(Exception ex);\n}", "des": "Listener interface around the reading of an item."}
{"index": 14136, "repo": "spring-batch-core-5.0.2", "code": "public interface ItemWriteListener<S> extends StepListener {\n\t// Called after ItemWriter.write(Chunk).\n\tdefault void afterWrite(Chunk<? extends S> items);\n\t// Called before ItemWriter.write(Chunk)\n\tdefault void beforeWrite(Chunk<? extends S> items);\n\t// Called if an error occurs while trying to write.\n\tdefault void onWriteError(Exception exception, Chunk<? extends S> items);\n}", "des": "Listener interface for the writing of items."}
{"index": 14137, "repo": "spring-batch-core-5.0.2", "code": "public class JdbcExecutionContextDao extends AbstractJdbcBatchMetadataDao implements ExecutionContextDao {\n\tvoid afterPropertiesSet();\n\t// Delete the execution context of the given JobExecution.\n\tvoid deleteExecutionContext(JobExecution jobExecution);\n\t// Delete the execution context of the given StepExecution.\n\tvoid deleteExecutionContext(StepExecution stepExecution);\n\tExecutionContext getExecutionContext(JobExecution jobExecution);\n\tExecutionContext getExecutionContext(StepExecution stepExecution);\n}", "des": "JDBC DAO for ExecutionContext."}
{"index": 14138, "repo": "spring-batch-core-5.0.2", "code": "public class JdbcJobExecutionDao extends AbstractJdbcBatchMetadataDao implements JobExecutionDao, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Delete the given job execution.\n\tvoid deleteJobExecution(JobExecution jobExecution);\n\t// Delete the parameters associated with the given job execution.\n\tvoid deleteJobExecutionParameters(JobExecution jobExecution);\n}", "des": "JDBC implementation of JobExecutionDao."}
{"index": 14139, "repo": "spring-batch-core-5.0.2", "code": "public class JdbcJobInstanceDao extends AbstractJdbcBatchMetadataDao implements JobInstanceDao, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// In this JDBC implementation a job instance id is obtained by asking the jobInstanceIncrementer (which is likely a sequence) for the next long value, and then passing the Id and parameter values into an INSERT statement.\n\tJobInstance createJobInstance(String jobName, JobParameters jobParameters);\n}", "des": "JDBC implementation of JobInstanceDao."}
{"index": 14140, "repo": "spring-batch-core-5.0.2", "code": "public class JdbcStepExecutionDao extends AbstractJdbcBatchMetadataDao implements StepExecutionDao, org.springframework.beans.factory.InitializingBean {\n\t// Retrieve all the StepExecution for the parent JobExecution.\n\tvoid addStepExecutions(JobExecution jobExecution);\n\tvoid afterPropertiesSet();\n\t// Counts all the StepExecution for a given step name.\n\tlong countStepExecutions(JobInstance jobInstance, String stepName);\n}", "des": "JDBC implementation of StepExecutionDao. Allows customization of the tables names used by Spring Batch for step meta data via a prefix property. Uses sequences or tables (via Spring's DataFieldMaxValueIncrementer abstraction) to create all primary keys before inserting a new row."}
{"index": 14141, "repo": "spring-batch-core-5.0.2", "code": "public interface Job {\n\t// Run the JobExecution and update the meta information, such as status and statistics, as necessary.\n\tvoid execute(JobExecution execution);\n\t// If clients need to generate new parameters for the next execution in a sequence, they can use this incrementer.\n\tdefault JobParametersIncrementer getJobParametersIncrementer();\n\t// A validator for the job parameters of a JobExecution.\n\tdefault JobParametersValidator getJobParametersValidator();\n\tString getName();\n}", "des": "Batch domain object representing a job."}
{"index": 14142, "repo": "spring-batch-core-5.0.2", "code": "public class JobBuilder extends JobBuilderHelper<JobBuilder> {\n\t// Create a new job builder that will execute a step or sequence of steps.\n\tJobFlowBuilder flow(Step step);\n\t// Create a new job builder that will execute a flow.\n\tJobFlowBuilder start(Flow flow);\n\t// Create a new job builder that will execute a step or sequence of steps.\n\tSimpleJobBuilder start(Step step);\n}", "des": "Convenience for building jobs of various kinds."}
{"index": 14143, "repo": "spring-batch-core-5.0.2", "code": "public abstract class JobBuilderHelper<B extends JobBuilderHelper<B>> extends Object {\n\tprotected void enhance(AbstractJob job);\n\tprotected JobRepository getJobRepository();\n\tprotected String getName();\n\t// Add a job parameters incrementer.\n\tB incrementer(JobParametersIncrementer jobParametersIncrementer);\n\tprotected boolean isRestartable();\n\t// Registers objects using the annotation based listener configuration.\n\tB listener(Object listener);\n}", "des": "A base class and utility for other job builders providing access to common properties like job repository."}
{"index": 14144, "repo": "spring-batch-core-5.0.2", "code": "public class JobContext extends SynchronizedAttributeAccessor {\n\t// Clean up the context at the end of a step execution.\n\tvoid close();\n\t// Extend the base class method to include the job execution itself as a key (i.e.\n\tboolean equals(Object other);\n\tString getId();\n\t// The current JobExecution that is active in this context.\n\tJobExecution getJobExecution();\n\tMap<String,Object> getJobExecutionContext();\n\t// Convenient accessor for current job name identifier.\n\tString getJobName();\n}", "des": "A context object that can be used to interrogate the current JobExecution and some of its associated properties using expressions based on bean paths."}
{"index": 14145, "repo": "spring-batch-core-5.0.2", "code": "public class JobExecution extends Entity {\n\t// Add the provided throwable to the failure exception list.\n\tvoid addFailureException(Throwable t);\n\t// Add some step executions.\n\tvoid addStepExecutions(List<StepExecution> stepExecutions);\n\t// Register a step execution with the current job execution.\n\tStepExecution createStepExecution(String stepName);\n\t// Return all failure causing exceptions for this JobExecution, including step executions.\n\tList<Throwable> getAllFailureExceptions();\n}", "des": "Batch domain object representing the execution of a job."}
{"index": 14146, "repo": "spring-batch-core-5.0.2", "code": "public interface JobExecutionDao {\n\t// Delete the given job execution.\n\tdefault void deleteJobExecution(JobExecution jobExecution);\n\t// Delete the parameters associated with the given job execution.\n\tdefault void deleteJobExecutionParameters(JobExecution jobExecution);\n\t// Return all JobExecutions for given JobInstance, sorted backwards by creation order (so the first element is the most recent).\n\tList<JobExecution> findJobExecutions(JobInstance jobInstance);\n}", "des": "Data Access Object for job executions."}
{"index": 14147, "repo": "spring-batch-core-5.0.2", "code": "public interface JobExecutionListener {\n\t// Callback after completion of a job.\n\tdefault void afterJob(JobExecution jobExecution);\n\t// Callback before a job executes.\n\tdefault void beforeJob(JobExecution jobExecution);\n}", "des": "Provide callbacks at specific points in the lifecycle of a Job."}
{"index": 14148, "repo": "spring-batch-core-5.0.2", "code": "public class JobExecutionListenerParser extends AbstractListenerParser {\n\t// Gets the bean class.\n\tprotected Class<? extends AbstractListenerFactoryBean<?>> getBeanClass();\n\t// Gets the metadata values.\n\tprotected ListenerMetaData[] getMetaDataValues();\n}", "des": "Parser for a step listener element."}
{"index": 14149, "repo": "spring-batch-core-5.0.2", "code": "public interface JobExplorer {\n\t// Fetch JobInstance values in descending order of creation (and, therefore, usually of first execution) with a 'like' or wildcard criteria.\n\tList<JobInstance> findJobInstancesByJobName(String jobName, int start, int count);\n\t// Retrieve running job executions.\n\tSet<JobExecution> findRunningJobExecutions(String jobName);\n\t// Retrieve a JobExecution by its ID.\n\tJobExecution getJobExecution(Long executionId);\n}", "des": "Entry point for browsing the executions of running or historical jobs and steps."}
{"index": 14150, "repo": "spring-batch-core-5.0.2", "code": "public class JobExplorerFactoryBean extends AbstractJobExplorerFactoryBean implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Creates an execution context instance data access object (DAO).\n\tprotected ExecutionContextDao createExecutionContextDao();\n\t// Creates a job execution data access object (DAO).\n\tprotected JobExecutionDao createJobExecutionDao();\n\t// Creates a job instance data access object (DAO).\n\tprotected JobInstanceDao createJobInstanceDao();\n}", "des": "A FactoryBean that automates the creation of a SimpleJobExplorer by using JDBC DAO implementations."}
{"index": 14151, "repo": "spring-batch-core-5.0.2", "code": "public class JobFactoryRegistrationListener extends Object {\n\t// Take the JobFactory provided and register it with the JobRegistry.\n\tvoid bind(JobFactory jobFactory, Map<String,?> params);\n\t// Public setter for a JobRegistry to use for all the bind and unbind events.\n\tvoid setJobRegistry(JobRegistry jobRegistry);\n\t// Take the provided JobFactory and unregister it with the JobRegistry.\n\tvoid unbind(JobFactory jobFactory, Map<String,?> params);\n}", "des": "Generic service that can bind and unbind a JobFactory in a JobRegistry."}
{"index": 14152, "repo": "spring-batch-core-5.0.2", "code": "public class JobFlowExecutor extends Object implements FlowExecutor {\n\t// Handle any status changes that might be needed at the start of a state.\n\tvoid abandonStepExecution();\n\tvoid addExitStatus(String code);\n\t// Chance to clean up resources at the end of a flow (whether it completed successfully or not).\n\tvoid close(FlowExecution result);\n\tString executeStep(Step step);\n\tprotected BatchStatus findBatchStatus(FlowExecutionStatus status);\n\tJobExecution getJobExecution();\n\tStepExecution getStepExecution();\n}", "des": "Implementation of FlowExecutor for use in components that need to execute a flow related to a JobExecution."}
{"index": 14153, "repo": "spring-batch-core-5.0.2", "code": "public interface JobInstanceDao {\n\t// Create a JobInstance with given name and parameters.\n\tJobInstance createJobInstance(String jobName, JobParameters jobParameters);\n\t// Delete the job instance.\n\tdefault void deleteJobInstance(JobInstance jobInstance);\n\t// Fetch the last job instances with the provided name, sorted backwards by primary key, using a 'like' criteria\n\tList<JobInstance> findJobInstancesByName(String jobName, int start, int count);\n}", "des": "Data Access Object for job instances."}
{"index": 14154, "repo": "spring-batch-core-5.0.2", "code": "public class JobListenerFactoryBean extends AbstractListenerFactoryBean<JobExecutionListener> {\n\tprotected Class<?> getDefaultListenerClass();\n\t// Convenience method to wrap any object and expose the appropriate JobExecutionListener interfaces.\n\tstatic JobExecutionListener getListener(Object delegate);\n\tprotected ListenerMetaData getMetaDataFromPropertyName(String propertyName);\n\tprotected ListenerMetaData[] getMetaDataValues();\n\tClass<?> getObjectType();\n}", "des": "This AbstractListenerFactoryBean implementation is used to create a JobExecutionListener."}
{"index": 14155, "repo": "spring-batch-core-5.0.2", "code": "public enum JobListenerMetaData extends Enum<JobListenerMetaData> implements ListenerMetaData {\n\t// Return the relevant meta data for the provided property name.\n\tstatic JobListenerMetaData fromPropertyName(String propertyName);\n\tClass<? extends Annotation> getAnnotation();\n\tClass<?> getListenerInterface();\n\tString getMethodName();\n\tClass<?>[] getParamTypes();\n\tString getPropertyName();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic JobListenerMetaData valueOf(String name);\n}", "des": "Enumeration for JobExecutionListener meta data, which ties together the names of methods, their interfaces, annotation, and expected arguments."}
{"index": 14156, "repo": "spring-batch-core-5.0.2", "code": "public interface JobOperator {\n\t// Mark the JobExecution as ABANDONED.\n\tJobExecution abandon(long jobExecutionId);\n\t// List the JobExecutions associated with a particular JobInstance, in reverse order of creation (and therefore usually of execution).\n\tList<Long> getExecutions(long instanceId);\n\tdefault JobInstance getJobInstance(String jobName, JobParameters jobParameters);\n}", "des": "Low level interface for inspecting and controlling jobs with access only to primitive and collection types."}
{"index": 14157, "repo": "spring-batch-core-5.0.2", "code": "public class JobOperatorFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobOperator>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tJobOperator getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\t// Setter for the job explorer.\n\tvoid setJobExplorer(JobExplorer jobExplorer);\n\t// Setter for the job launcher.\n\tvoid setJobLauncher(JobLauncher jobLauncher);\n}", "des": "Convenient factory bean that creates a transactional proxy around a JobOperator."}
{"index": 14158, "repo": "spring-batch-core-5.0.2", "code": "public class JobParameters extends Object implements Serializable {\n\tboolean equals(Object obj);\n\t// Typesafe getter for the Date represented by the provided key.\n\tDate getDate(String key);\n\t// Typesafe getter for the Date represented by the provided key.\n\tDate getDate(String key, Date defaultValue);\n\t// Typesafe getter for the Long represented by the provided key.\n\tDouble getDouble(String key);\n}", "des": "Value object representing runtime parameters to a batch job."}
{"index": 14159, "repo": "spring-batch-core-5.0.2", "code": "public class JobParametersBuilder extends Object {\n\t// Add a new identifying Date parameter for the given key.\n\tJobParametersBuilder addDate(String key, Date parameter);\n\t// Add a new Date parameter for the given key.\n\tJobParametersBuilder addDate(String key, Date parameter, boolean identifying);\n\t// Add a new identifying Double parameter for the given key.\n\tJobParametersBuilder addDouble(String key, Double parameter);\n}", "des": "Helper class for creating JobParameters."}
{"index": 14160, "repo": "spring-batch-core-5.0.2", "code": "public interface JobParametersConverter {\n\t// Get a new JobParameters instance.\n\tJobParameters getJobParameters(Properties properties);\n\t// The inverse operation: get a Properties instance.\n\tProperties getProperties(JobParameters params);\n}", "des": "A factory for JobParameters instances."}
{"index": 14161, "repo": "spring-batch-core-5.0.2", "code": "public class JobParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser {\n\t// Create a bean definition for a FlowJob.\n\tprotected void doParse(Element element, org.springframework.beans.factory.xml.ParserContext parserContext, org.springframework.beans.factory.support.BeanDefinitionBuilder builder);\n\tprotected Class<JobParserJobFactoryBean> getBeanClass(Element element);\n}", "des": "Parser for the <job/> element in the Batch namespace."}
{"index": 14162, "repo": "spring-batch-core-5.0.2", "code": "public class JobParserJobFactoryBean extends Object implements org.springframework.beans.factory.SmartFactoryBean<FlowJob> {\n\tJobRepository getJobRepository();\n\tfinal FlowJob getObject();\n\tClass<FlowJob> getObjectType();\n\tboolean isEagerInit();\n\tboolean isPrototype();\n\tboolean isSingleton();\n\t// Set the flow for the factory bean.\n\tvoid setFlow(Flow flow);\n\tvoid setJobExecutionListeners(JobExecutionListener[] jobExecutionListeners);\n}", "des": "This FactoryBean is used by the batch namespace parser to create FlowJob objects."}
{"index": 14163, "repo": "spring-batch-core-5.0.2", "code": "public interface JobRegistry extends ListableJobLocator {\n\t// Registers a Job at runtime.\n\tvoid register(JobFactory jobFactory);\n\t// Unregisters a previously registered Job.\n\tvoid unregister(String jobName);\n}", "des": "A runtime service registry interface for registering job configurations by name."}
{"index": 14164, "repo": "spring-batch-core-5.0.2", "code": "public class JobRegistryBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\t// Make sure the registry is set before use.\n\tvoid afterPropertiesSet();\n\t// Unregister all the Job instances that were registered by this post processor.\n\tvoid destroy();\n}", "des": "A BeanPostProcessor that registers Job beans with a JobRegistry."}
{"index": 14165, "repo": "spring-batch-core-5.0.2", "code": "public interface JobRepository {\n\t// Save the StepExecution and its ExecutionContext.\n\tvoid add(StepExecution stepExecution);\n\t// Save a collection of StepExecutions and each ExecutionContext.\n\tvoid addAll(Collection<StepExecution> stepExecutions);\n\t// Create a JobExecution for a given Job and JobParameters.\n\tJobExecution createJobExecution(String jobName, JobParameters jobParameters);\n}", "des": "Repository responsible for persistence of batch meta-data entities."}
{"index": 14166, "repo": "spring-batch-core-5.0.2", "code": "public class JobStep extends AbstractStep {\n\tvoid afterPropertiesSet();\n\t// Execute the job provided by delegating to the JobLauncher to prevent duplicate executions.\n\tprotected void doExecute(StepExecution stepExecution);\n\t// The Job to delegate to in this step.\n\tvoid setJob(Job job);\n\t// A JobLauncher is required to be able to run the enclosed Job.\n\tvoid setJobLauncher(JobLauncher jobLauncher);\n}", "des": "A Step that delegates to a Job to do its work."}
{"index": 14167, "repo": "spring-batch-core-5.0.2", "code": "public class JobStepBuilder extends StepBuilderHelper<JobStepBuilder> {\n\t// Build a step from the job provided.\n\tStep build();\n\t// Provide a job to execute during the step.\n\tJobStepBuilder job(Job job);\n\t// Add a job launcher.\n\tJobStepBuilder launcher(JobLauncher jobLauncher);\n\t// Provide a job parameters extractor.\n\tJobStepBuilder parametersExtractor(JobParametersExtractor jobParametersExtractor);\n\tprotected JobStepBuilder self();\n}", "des": "A step builder for JobStep instances."}
{"index": 14168, "repo": "spring-batch-core-5.0.2", "code": "public class JobSynchronizationManager extends Object {\n\t// Method for unregistering the current context - should always and only be used by in conjunction with a matching register(JobExecution) to ensure that getContext() always returns the correct value.\n\tstatic void close();\n\t// Getter for the current context if there is one, otherwise returns null.\n\tstatic JobContext getContext();\n}", "des": "Central convenience class for framework use in managing the job scope context."}
{"index": 14169, "repo": "spring-batch-core-5.0.2", "code": "public class JsonJobParametersConverter extends DefaultJobParametersConverter {\n\t// Decode a job parameter from a string.\n\tprotected JobParameter decode(String encodedJobParameter);\n\t// Encode a job parameter to a string.\n\tprotected String encode(JobParameter<?> jobParameter);\n}", "des": "Converter for JobParameters instances that uses a JSON naming convention for converting job parameters."}
{"index": 14170, "repo": "spring-batch-core-5.0.2", "code": "public class LimitCheckingItemSkipPolicy extends Object implements SkipPolicy {\n\t// The absolute number of skips (of skippable exceptions) that can be tolerated before a failure.\n\tvoid setSkipLimit(long skipLimit);\n\t// The classifier that will be used to decide on skippability.\n\tvoid setSkippableExceptionClassifier(org.springframework.classify.Classifier<Throwable,Boolean> skippableExceptionClassifier);\n}", "des": "SkipPolicy that determines whether or not reading should continue based upon how many items have been skipped."}
{"index": 14171, "repo": "spring-batch-core-5.0.2", "code": "public class MapJobRegistry extends Object implements JobRegistry {\n\t// Locates a Job at runtime.\n\tJob getJob(String name);\n\t// Provides an unmodifiable view of the job names.\n\tSet<String> getJobNames();\n\t// Registers a Job at runtime.\n\tvoid register(JobFactory jobFactory);\n\t// Unregisters a previously registered Job.\n\tvoid unregister(String name);\n}", "des": "Simple, thread-safe, map-based implementation of JobRegistry."}
{"index": 14172, "repo": "spring-batch-core-5.0.2", "code": "public class MapStepRegistry extends Object implements StepRegistry {\n\t// Returns the Step of the specified job based on its name.\n\tStep getStep(String jobName, String stepName);\n\t// Registers all the step instances of the given job.\n\tvoid register(String jobName, Collection<Step> steps);\n\t// Unregisters all the steps instances of the given job.\n\tvoid unregisterStepsFromJob(String jobName);\n}", "des": "Simple map-based implementation of StepRegistry."}
{"index": 14173, "repo": "spring-batch-core-5.0.2", "code": "public class MethodInvokingTaskletAdapter extends AbstractMethodInvokingDelegator<Object> implements Tasklet {\n\t// Delegate execution to the target object and translate the return value to an ExitStatus by invoking a method in the delegate POJO.\n\tRepeatStatus execute(StepContribution contribution, ChunkContext chunkContext);\n\t// If the result is an ExitStatus already just return that, otherwise return ExitStatus.COMPLETED.\n\tprotected ExitStatus mapResult(Object result);\n}", "des": "A Tasklet that wraps a method in a POJO."}
{"index": 14174, "repo": "spring-batch-core-5.0.2", "code": "public class MultiResourcePartitioner extends Object implements Partitioner {\n\t// Assign the filename of each of the injected resources to an ExecutionContext.\n\tMap<String,ExecutionContext> partition(int gridSize);\n\t// The name of the key for the file name in each ExecutionContext.\n\tvoid setKeyName(String keyName);\n\t// The resources to assign to each partition.\n\tvoid setResources(org.springframework.core.io.Resource[] resources);\n}", "des": "Implementation of Partitioner that locates multiple resources and associates their file names with execution context keys."}
{"index": 14175, "repo": "spring-batch-core-5.0.2", "code": "public class PartitionStep extends AbstractStep {\n\t// Assert that mandatory properties are set (stepExecutionSplitter, partitionHandler) and delegate top superclass.\n\tvoid afterPropertiesSet();\n\t// Delegate execution to the PartitionHandler provided.\n\tprotected void doExecute(StepExecution stepExecution);\n\tprotected PartitionHandler getPartitionHandler();\n\tprotected StepExecutionSplitter getStepExecutionSplitter();\n}", "des": "Implementation of Step which partitions the execution and spreads the load using a PartitionHandler."}
{"index": 14176, "repo": "spring-batch-core-5.0.2", "code": "public class ReferenceJobFactory extends Object implements JobFactory {\n\t// Return the instance that was passed in on initialization.\n\tfinal Job createJob();\n\t// Return the name of the instance that was passed in on initialization.\n\tString getJobName();\n}", "des": "A JobFactory that keeps a reference to a Job."}
{"index": 14177, "repo": "spring-batch-core-5.0.2", "code": "public class RunIdIncrementer extends Object implements JobParametersIncrementer {\n\t// Increment the run.id parameter (starting with 1).\n\tJobParameters getNext(JobParameters parameters);\n\t// The name of the run id in the job parameters.\n\tvoid setKey(String key);\n}", "des": "This incrementer increments a \"run.id\" parameter of type Long from the given job parameters."}
{"index": 14178, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleChunkProcessor<I,O> extends Object implements ChunkProcessor<I>, org.springframework.beans.factory.InitializingBean {\n\t// Check mandatory properties.\n\tvoid afterPropertiesSet();\n\t// Call the listener's after write method.\n\tprotected final void doAfterWrite(Chunk<O> items);\n\t// Call listener's writerError method.\n\tprotected final void doOnWriteError(Exception e, Chunk<O> items);\n\tprotected final O doProcess(I item);\n}", "des": "Simple implementation of the ChunkProcessor interface that handles basic item writing and processing."}
{"index": 14179, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleChunkProvider<I> extends Object implements ChunkProvider<I> {\n\t// Surrounds the read call with listener callbacks.\n\tprotected final I doRead();\n\tprotected MulticasterBatchListener<I,?> getListener();\n\tvoid postProcess(StepContribution contribution, Chunk<I> chunk);\n\tChunk<I> provide(StepContribution contribution);\n\t// Delegates to doRead().\n\tprotected I read(StepContribution contribution, Chunk<I> chunk);\n}", "des": "Simple implementation of the ChunkProvider interface that does basic chunk providing from an ItemReader."}
{"index": 14180, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleFlow extends Object implements Flow, org.springframework.beans.factory.InitializingBean {\n\t// Locate start state and pre-populate data structures needed for execution.\n\tvoid afterPropertiesSet();\n\t// Get the name for this flow.\n\tString getName();\n\tState getStartState();\n\t// Retrieve the State with the given name.\n\tState getState(String stateName);\n\tprotected Map<String,State> getStateMap();\n}", "des": "A Flow that branches conditionally depending on the exit status of the last State."}
{"index": 14181, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleFlowFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<SimpleFlow>, org.springframework.beans.factory.InitializingBean {\n\t// Check mandatory properties (name).\n\tvoid afterPropertiesSet();\n\t// Provides an extension point to provide alternative StepState implementations within a SimpleFlow.\n\tprotected State createNewStepState(State state, String oldName, String stateName);\n\tSimpleFlow getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n}", "des": "Convenience factory for SimpleFlow instances for use in the XML namespace."}
{"index": 14182, "repo": "spring-batch-core-5.0.2", "code": "public static class SimpleFlowFactoryBean.DelegateState extends AbstractState implements FlowHolder {\n\tCollection<Flow> getFlows();\n\t// Gets the current state.\n\tState getState();\n\t// Handle some business or processing logic and return a status that can be used to drive a flow to the next State.\n\tFlowExecutionStatus handle(FlowExecutor executor);\n\t// Inquire as to whether a State is an end state.\n\tboolean isEndState();\n}", "des": "A State that proxies a delegate and changes its name but leaves its behavior unchanged."}
{"index": 14183, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleJob extends AbstractJob {\n\t// Convenience method for adding a single step to the job.\n\tvoid addStep(Step step);\n\t// Handler of steps sequentially as provided, checking each one for success before moving to the next.\n\tprotected void doExecute(JobExecution execution);\n\t// Retrieve the step with the given name.\n\tStep getStep(String stepName);\n\t// Convenience method for clients to inspect the steps for this job.\n\tCollection<String> getStepNames();\n}", "des": "Simple implementation of Job interface providing the ability to run a JobExecution."}
{"index": 14184, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleJobExplorer extends Object implements JobExplorer {\n\t// Fetch JobInstance values in descending order of creation (and, therefore, usually of first execution) with a 'like' or wildcard criteria.\n\tList<JobInstance> findJobInstancesByJobName(String jobName, int start, int count);\n\t// Retrieve running job executions.\n\tSet<JobExecution> findRunningJobExecutions(String jobName);\n\t// Retrieve a JobExecution by its ID.\n\tJobExecution getJobExecution(Long executionId);\n}", "des": "Implementation of JobExplorer that uses the injected DAOs."}
{"index": 14185, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleJobOperator extends Object implements JobOperator, org.springframework.beans.factory.InitializingBean {\n\t// Mark the JobExecution as ABANDONED.\n\tJobExecution abandon(long jobExecutionId);\n\t// Check mandatory properties.\n\tvoid afterPropertiesSet();\n\t// List the JobExecutions associated with a particular JobInstance, in reverse order of creation (and therefore usually of execution).\n\tList<Long> getExecutions(long instanceId);\n}", "des": "Simple implementation of the JobOperator interface."}
{"index": 14186, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleJobRepository extends Object implements JobRepository {\n\t// Save the StepExecution and its ExecutionContext.\n\tvoid add(StepExecution stepExecution);\n\t// Save a collection of StepExecutions and each ExecutionContext.\n\tvoid addAll(Collection<StepExecution> stepExecutions);\n\t// Create a JobExecution for a given Job and JobParameters.\n\tJobExecution createJobExecution(String jobName, JobParameters jobParameters);\n}", "des": "Implementation of JobRepository that stores job instances, job executions, and step executions using the injected DAOs."}
{"index": 14187, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleJvmExitCodeMapper extends Object implements ExitCodeMapper {\n\tMap<String,Integer> getMapping();\n\t// Get the operating system exit status that matches a certain Batch Framework exit code\n\tint intValue(String exitCode);\n\t// Supply the ExitCodeMappings\n\tvoid setMapping(Map<String,Integer> exitCodeMap);\n}", "des": "An implementation of ExitCodeMapper that can be configured through a map from batch exit codes (String) to integer results."}
{"index": 14188, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleRetryExceptionHandler extends org.springframework.retry.listener.RetryListenerSupport implements ExceptionHandler {\n\t// If retry is exhausted set up some state in the context that can be used to signal that the exception should be handled.\n\t<T, E extends Throwable>void close(org.springframework.retry.RetryContext context, org.springframework.retry.RetryCallback<T,E> callback, Throwable throwable);\n}", "des": "An ExceptionHandler that is aware of the retry context so that it can distinguish between a fatal exception and one that can be retried."}
{"index": 14189, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleStepBuilder<I,O> extends AbstractTaskletStepBuilder<SimpleStepBuilder<I,O>> {\n\t// Build a step with the reader, writer, processor as provided.\n\tTaskletStep build();\n\t// Sets the chunk size or commit interval for this step.\n\tSimpleStepBuilder<I,O> chunk(int chunkSize);\n\t// Sets a completion policy for the chunk processing.\n\tSimpleStepBuilder<I,O> chunk(CompletionPolicy completionPolicy);\n}", "des": "Step builder for simple item processing (chunk oriented) steps."}
{"index": 14190, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleStepExecutionSplitter extends Object implements StepExecutionSplitter, org.springframework.beans.factory.InitializingBean {\n\t// Check mandatory properties (step name, job repository and partitioner).\n\tvoid afterPropertiesSet();\n\t// The name of the step configuration that will be executed remotely.\n\tString getStepName();\n\t// Check if a step execution is startable.\n\tprotected boolean isStartable(StepExecution stepExecution, ExecutionContext context);\n}", "des": "Generic implementation of StepExecutionSplitter that delegates to a Partitioner to generate ExecutionContext instances."}
{"index": 14191, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleStepFactoryBean<T,S> extends Object implements org.springframework.beans.factory.FactoryBean<Step>, org.springframework.beans.factory.BeanNameAware {\n\tprotected void applyConfiguration(SimpleStepBuilder<T,S> builder);\n\tprotected SimpleStepBuilder<T,S> createBuilder(String name);\n\t// Protected getter for the chunk operations to make them available in subclasses.\n\tprotected RepeatOperations getChunkOperations();\n}", "des": "Most common configuration options for simple steps should be found here."}
{"index": 14192, "repo": "spring-batch-core-5.0.2", "code": "public class SimpleStepHandler extends Object implements StepHandler, org.springframework.beans.factory.InitializingBean {\n\t// Check mandatory properties (jobRepository).\n\tvoid afterPropertiesSet();\n\tprotected JobRepository getJobRepository();\n\t// Handle a step and return the execution for it.\n\tStepExecution handleStep(Step step, JobExecution execution);\n\t// A context containing values to be added to the step execution before it is handled.\n\tvoid setExecutionContext(ExecutionContext executionContext);\n}", "des": "Implementation of StepHandler that manages repository and restart concerns."}
{"index": 14193, "repo": "spring-batch-core-5.0.2", "code": "public interface SkipListener<T,S> extends StepListener {\n\t// This item failed on processing with the given exception, and a skip was called for.\n\tdefault void onSkipInProcess(T item, Throwable t);\n\t// Callback for a failure on read that is legal and, consequently, is not going to be re-thrown.\n\tdefault void onSkipInRead(Throwable t);\n\t// This item failed on write with the given exception, and a skip was called for.\n\tdefault void onSkipInWrite(S item, Throwable t);\n}", "des": "Interface for listener to skipped items."}
{"index": 14194, "repo": "spring-batch-core-5.0.2", "code": "public class SplitState extends AbstractState implements FlowHolder {\n\tprotected FlowExecutionStatus doAggregation(Collection<FlowExecution> results, FlowExecutor executor);\n\tCollection<Flow> getFlows();\n\t// Execute the flows in parallel by passing them to the TaskExecutor and wait for all of them to finish before proceeding.\n\tFlowExecutionStatus handle(FlowExecutor executor);\n\t// Inquire as to whether a State is an end state.\n\tboolean isEndState();\n}", "des": "A State implementation that splits a Flow into multiple parallel subflows."}
{"index": 14195, "repo": "spring-batch-core-5.0.2", "code": "public final class StateTransition extends Object {\n\t// Create a new end state StateTransition specification.\n\tstatic StateTransition createEndStateTransition(State state);\n\t// Create a new end state StateTransition specification.\n\tstatic StateTransition createEndStateTransition(State state, String pattern);\n\t// Create a new state StateTransition specification with a wildcard pattern that matches all outcomes.\n\tstatic StateTransition createStateTransition(State state, String next);\n}", "des": "Value object representing a potential transition from one State to another."}
{"index": 14196, "repo": "spring-batch-core-5.0.2", "code": "public class StepBuilder extends StepBuilderHelper<StepBuilder> {\n\t// Deprecated. use chunk(int, PlatformTransactionManager)\n\t<I, O> SimpleStepBuilder<I,O> chunk(int chunkSize);\n\t// Build a step that processes items in chunks with the size provided.\n\t<I, O> SimpleStepBuilder<I,O> chunk(int chunkSize, org.springframework.transaction.PlatformTransactionManager transactionManager);\n}", "des": "Convenient entry point for building all kinds of steps."}
{"index": 14197, "repo": "spring-batch-core-5.0.2", "code": "public class StepContext extends SynchronizedAttributeAccessor {\n\t// Clean up the context at the end of a step execution.\n\tvoid close();\n\t// Extend the base class method to include the step execution itself as a key (i.e.\n\tboolean equals(Object other);\n\tString getId();\n\tMap<String,Object> getJobExecutionContext();\n\t// Convenient accessor for current JobInstance identifier.\n\tLong getJobInstanceId();\n\t// Convenient accessor for current job name identifier.\n\tString getJobName();\n}", "des": "A context object that can be used to interrogate the current StepExecution and some of its associated properties using expressions based on bean paths."}
{"index": 14198, "repo": "spring-batch-core-5.0.2", "code": "public abstract class StepContextRepeatCallback extends Object implements RepeatCallback {\n\t// Do the work required for this chunk of the step.\n\tabstract RepeatStatus doInChunkContext(RepeatContext context, ChunkContext chunkContext);\n\t// Manage the StepContext lifecycle.\n\tRepeatStatus doInIteration(RepeatContext context);\n}", "des": "Convenient base class for clients who need to do something in a repeat callback inside a Step."}
{"index": 14199, "repo": "spring-batch-core-5.0.2", "code": "public class StepContribution extends Object implements Serializable {\n\tboolean equals(Object obj);\n\t// Public getter for the ExitStatus.\n\tExitStatus getExitStatus();\n\t// Public getter for the filter counter.\n\tlong getFilterCount();\n\t// Public getter for the process skip count.\n\tlong getProcessSkipCount();\n\t// Public access to the read counter.\n\tlong getReadCount();\n\t// Public getter for the read skip count.\n\tlong getReadSkipCount();\n\tlong getSkipCount();\n}", "des": "Represents a contribution to a StepExecution, buffering changes until they can be applied at a chunk boundary."}
{"index": 14200, "repo": "spring-batch-core-5.0.2", "code": "public class StepExecution extends Entity {\n\t// Add a Throwable to failure exceptions.\n\tvoid addFailureException(Throwable throwable);\n\t// This method should be called on successful execution just before a chunk commit.\n\tvoid apply(StepContribution contribution);\n\t// Factory method for StepContribution.\n\tStepContribution createStepContribution();\n\t// Attempt to establish identity based on id if both exist.\n\tboolean equals(Object obj);\n}", "des": "Batch domain object representation for the execution of a step."}
{"index": 14201, "repo": "spring-batch-core-5.0.2", "code": "public interface StepExecutionListener extends StepListener {\n\t// Give a listener a chance to modify the exit status from a step.\n\tdefault ExitStatus afterStep(StepExecution stepExecution);\n\t// Initialize the state of the listener with the StepExecution from the current scope.\n\tdefault void beforeStep(StepExecution stepExecution);\n}", "des": "Listener interface for the lifecycle of a Step."}
{"index": 14202, "repo": "spring-batch-core-5.0.2", "code": "public class StepExecutionSimpleCompletionPolicy extends Object implements StepExecutionListener, CompletionPolicy {\n\t// Set up a SimpleCompletionPolicy with a commit interval taken from the JobParameters.\n\tvoid beforeStep(StepExecution stepExecution);\n\tboolean isComplete(RepeatContext context);\n\tboolean isComplete(RepeatContext context, RepeatStatus result);\n\t// Public setter for the key name of a Long value in the JobParameters that will contain a commit interval.\n\tvoid setKeyName(String keyName);\n}", "des": "A CompletionPolicy that picks up a commit interval from JobParameters by listening to the start of a step."}
{"index": 14203, "repo": "spring-batch-core-5.0.2", "code": "public interface StepExecutionSplitter {\n\t// The name of the step configuration that will be executed remotely.\n\tString getStepName();\n\t// Partition the provided StepExecution into a set of parallel executable instances with the same parent JobExecution.\n\tSet<StepExecution> split(StepExecution stepExecution, int gridSize);\n}", "des": "Strategy interface for generating input contexts for a partitioned step execution independent from the fabric they are going to run on."}
{"index": 14204, "repo": "spring-batch-core-5.0.2", "code": "public class StepListenerFactoryBean extends AbstractListenerFactoryBean<StepListener> {\n\tprotected Class<?> getDefaultListenerClass();\n\t// Convenience method to wrap any object and expose the appropriate StepListener interfaces.\n\tstatic StepListener getListener(Object delegate);\n\tprotected ListenerMetaData getMetaDataFromPropertyName(String propertyName);\n\tprotected ListenerMetaData[] getMetaDataValues();\n\tClass<StepListener> getObjectType();\n}", "des": "This AbstractListenerFactoryBean implementation is used to create a StepListener."}
{"index": 14205, "repo": "spring-batch-core-5.0.2", "code": "public class StepListenerParser extends AbstractListenerParser {\n\t// Gets the bean class.\n\tprotected Class<? extends AbstractListenerFactoryBean<?>> getBeanClass();\n\t// Gets the metadata values.\n\tprotected ListenerMetaData[] getMetaDataValues();\n\tvoid handleListenersElement(Element stepElement, org.springframework.beans.factory.config.BeanDefinition beanDefinition, org.springframework.beans.factory.xml.ParserContext parserContext);\n}", "des": "Parser for a step listener element."}
{"index": 14206, "repo": "spring-batch-core-5.0.2", "code": "public class StepLocatorStepFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Step> {\n\tStep getObject();\n\t// Tell clients that we are a factory for Step instances.\n\tClass<? extends Step> getObjectType();\n\t// Always return true as optimization for bean factory.\n\tboolean isSingleton();\n\tvoid setStepLocator(StepLocator stepLocator);\n\tvoid setStepName(String stepName);\n}", "des": "Convenience factory for Step instances given a StepLocator."}
{"index": 14207, "repo": "spring-batch-core-5.0.2", "code": "public class StepParserStepFactoryBean<I,O> extends Object implements org.springframework.beans.factory.FactoryBean<Step>, org.springframework.beans.factory.BeanNameAware {\n\t// Creates a fault tolerant Step.\n\tprotected Step createFaultTolerantStep();\n\t// Create a new FlowStep.\n\tprotected Step createFlowStep();\n\t// Create a partition Step.\n\tprotected Step createPartitionStep();\n\t// Creates a new TaskletStep.\n\tprotected Step createSimpleStep();\n}", "des": "This FactoryBean is used by the batch namespace parser to create Step objects."}
{"index": 14208, "repo": "spring-batch-core-5.0.2", "code": "public interface StepRegistry {\n\t// Returns the Step of the specified job based on its name.\n\tStep getStep(String jobName, String stepName);\n\t// Registers all the step instances of the given job.\n\tvoid register(String jobName, Collection<Step> steps);\n\t// Unregisters all the steps instances of the given job.\n\tvoid unregisterStepsFromJob(String jobName);\n}", "des": "Registry keeping track of all the Step instances defined in a Job."}
{"index": 14209, "repo": "spring-batch-core-5.0.2", "code": "public class StepState extends AbstractState implements StepLocator, StepHolder {\n\tStep getStep();\n\tStep getStep(String stepName);\n\tCollection<String> getStepNames();\n\t// Handle some business or processing logic and return a status that can be used to drive a flow to the next State.\n\tFlowExecutionStatus handle(FlowExecutor executor);\n\t// Inquire as to whether a State is an end state.\n\tboolean isEndState();\n}", "des": "State implementation that delegates to a FlowExecutor to execute the specified Step."}
{"index": 14210, "repo": "spring-batch-core-5.0.2", "code": "public class StepSynchronizationManager extends Object {\n\t// Method for unregistering the current context - should always and only be used by in conjunction with a matching register(StepExecution) to ensure that getContext() always returns the correct value.\n\tstatic void close();\n\t// Getter for the current context if there is one, otherwise returns null.\n\tstatic StepContext getContext();\n}", "des": "Central convenience class for framework use in managing the step scope context."}
{"index": 14211, "repo": "spring-batch-core-5.0.2", "code": "public abstract class SynchronizationManagerSupport<E,C> extends Object {\n\t// Method for unregistering the current context - should always and only be used by in conjunction with a matching register(Object) to ensure that getContext() always returns the correct value.\n\tvoid close();\n\tprotected abstract void close(C context);\n\tprotected abstract C createNewContext(E execution);\n\t// Getter for the current context if there is one, otherwise returns null.\n\tC getContext();\n\tStack<E> getCurrent();\n}", "des": "Central convenience class for framework use in managing the scope context."}
{"index": 14212, "repo": "spring-batch-core-5.0.2", "code": "public class SystemCommandTasklet extends Object implements StepExecutionListener, StoppableTasklet, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Get a reference to StepExecution for interrupt checks during system command execution.\n\tvoid beforeStep(StepExecution stepExecution);\n\t// Execute system command and map its exit code to ExitStatus using SystemProcessExitCodeMapper.\n\tRepeatStatus execute(StepContribution contribution, ChunkContext chunkContext);\n}", "des": "Tasklet that executes a system command."}
{"index": 14213, "repo": "spring-batch-core-5.0.2", "code": "public class TaskExecutorJobLauncher extends SimpleJobLauncher {\n\t// Ensure the required dependencies of a JobRepository have been set.\n\tvoid afterPropertiesSet();\n\t// Run the provided job with the given JobParameters.\n\tJobExecution run(Job job, JobParameters jobParameters);\n\t// Set the JobRepository.\n\tvoid setJobRepository(JobRepository jobRepository);\n\t// Set the TaskExecutor.\n\tvoid setTaskExecutor(org.springframework.core.task.TaskExecutor taskExecutor);\n}", "des": "Implementation of the JobLauncher interface based on a TaskExecutor."}
{"index": 14214, "repo": "spring-batch-core-5.0.2", "code": "public class TaskExecutorPartitionHandler extends AbstractPartitionHandler implements StepHolder, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Creates the task executing the given step in the context of the given execution.\n\tprotected FutureTask<StepExecution> createTask(Step step, StepExecution stepExecution);\n}", "des": "A PartitionHandler that uses a TaskExecutor to execute the partitioned Step locally in multiple threads."}
{"index": 14215, "repo": "spring-batch-core-5.0.2", "code": "public class TaskletStep extends AbstractStep {\n\tvoid afterPropertiesSet();\n\t// Extension point for subclasses to provide callbacks to their collaborators at the end of a step (right at the end of the finally block), to close or release resources.\n\tprotected void close(ExecutionContext ctx);\n\t// Extension point mainly for test purposes so that the behaviour of the lock can be manipulated to simulate various pathologies.\n\tprotected Semaphore createSemaphore();\n}", "des": "Simple implementation of executing the step as a call to a Tasklet, possibly repeated, and each call surrounded by a transaction."}
{"index": 14216, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "public enum AccessLevel extends Enum<AccessLevel> {\n\t// Returns if the access level should allow access to the specified ID.\n\tboolean isAccessAllowed(String id);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AccessLevel valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AccessLevel[] values();\n}", "des": "The specific access level granted to the cloud foundry user that's calling the endpoints."}
{"index": 14217, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "public class CloudFoundryAuthorizationException extends RuntimeException {\n\t// Return the reason why the authorization exception was thrown.\n\tCloudFoundryAuthorizationException.Reason getReason();\n\t// Return the status code that should be returned to the client.\n\torg.springframework.http.HttpStatus getStatusCode();\n}", "des": "Authorization exceptions thrown to limit access to the endpoints."}
{"index": 14218, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "public static enum CloudFoundryAuthorizationException.Reason extends Enum<CloudFoundryAuthorizationException.Reason> {\n\torg.springframework.http.HttpStatus getStatus();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CloudFoundryAuthorizationException.Reason valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CloudFoundryAuthorizationException.Reason[] values();\n}", "des": "Reasons why the exception can be thrown."}
{"index": 14219, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "public enum EndpointExposure extends Enum<EndpointExposure> {\n\t// Return the default set of include patterns.\n\tString[] getDefaultIncludes();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic EndpointExposure valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic EndpointExposure[] values();\n}", "des": "Technologies that can be used to expose an endpoint."}
{"index": 14220, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "public final class EndpointRequest extends Object {\n\t// Returns a matcher that includes the specified actuator endpoints.\n\tstatic EndpointRequest.EndpointServerWebExchangeMatcher to(Class<?>... endpoints);\n\t// Returns a matcher that includes the specified actuator endpoints.\n\tstatic EndpointRequest.EndpointServerWebExchangeMatcher to(String... endpoints);\n\t// Returns a matcher that includes all actuator endpoints.\n\tstatic EndpointRequest.EndpointServerWebExchangeMatcher toAnyEndpoint();\n}", "des": "Factory that can be used to create a ServerWebExchangeMatcher for actuator endpoint locations."}
{"index": 14221, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "public final class EndpointRequest extends Object {\n\t// Returns a matcher that includes the specified actuator endpoints.\n\tstatic EndpointRequest.EndpointRequestMatcher to(Class<?>... endpoints);\n\t// Returns a matcher that includes the specified actuator endpoints.\n\tstatic EndpointRequest.EndpointRequestMatcher to(String... endpoints);\n\t// Returns a matcher that includes all actuator endpoints.\n\tstatic EndpointRequest.EndpointRequestMatcher toAnyEndpoint();\n}", "des": "Factory that can be used to create a RequestMatcher for actuator endpoint locations."}
{"index": 14222, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "public enum InfoContributorFallback extends Enum<InfoContributorFallback> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic InfoContributorFallback valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic InfoContributorFallback[] values();\n}", "des": "Controls the fallback behavior when the primary property that controls whether an info contributor is enabled is not set."}
{"index": 14223, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "public enum ManagementContextType extends Enum<ManagementContextType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ManagementContextType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ManagementContextType[] values();\n}", "des": "Enumeration of management context types."}
{"index": 14224, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "public enum ManagementPortType extends Enum<ManagementPortType> {\n\t// Look at the given environment to determine if the ManagementPortType is DISABLED, SAME or DIFFERENT.\n\tstatic ManagementPortType get(org.springframework.core.env.Environment environment);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ManagementPortType valueOf(String name);\n}", "des": "Port types that can be used to control how the management server is started."}
{"index": 14225, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "@ConfigurationProperties(prefix=\"management.server\", ignoreUnknownFields=true) public class ManagementServerProperties extends Object {\n\tInetAddress getAddress();\n\tString getBasePath();\n\t// Returns the management port or null if the server port should be used.\n\tInteger getPort();\n\torg.springframework.boot.web.server.Ssl getSsl();\n\tvoid setAddress(InetAddress address);\n\tvoid setBasePath(String basePath);\n}", "des": "Properties for the management server (e.g."}
{"index": 14226, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "public final class MeterValue extends Object {\n\t// Return the underlying value in form suitable to apply to the given meter type.\n\tDouble getValue(io.micrometer.core.instrument.Meter.Type meterType);\n\t// Return a new MeterValue instance for the given double value.\n\tstatic MeterValue valueOf(double value);\n\t// Return a new MeterValue instance for the given String value.\n\tstatic MeterValue valueOf(String value);\n}", "des": "A meter value that is used when configuring micrometer."}
{"index": 14227, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "public final class ServiceLevelObjectiveBoundary extends Object {\n\t// Return the underlying value of the SLO in form suitable to apply to the given meter type.\n\tDouble getValue(io.micrometer.core.instrument.Meter.Type meterType);\n\t// Return a new ServiceLevelObjectiveBoundary instance for the given double value.\n\tstatic ServiceLevelObjectiveBoundary valueOf(double value);\n}", "des": "A boundary for a service-level objective (SLO) for use when configuring Micrometer."}
{"index": 14228, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "@ConfigurationProperties(prefix=\"management.wavefront\") public class WavefrontProperties extends Object {\n\tString getApiToken();\n\t// Returns the API token or throws an exception if the API token is mandatory.\n\tString getApiTokenOrThrow();\n\tWavefrontProperties.Application getApplication();\n\t// Returns the effective URI of the wavefront instance.\n\tURI getEffectiveUri();\n\tWavefrontProperties.Metrics getMetrics();\n\tWavefrontProperties.Sender getSender();\n\tString getSource();\n\tString getSourceOrDefault();\n}", "des": "Configuration properties to configure Wavefront."}
{"index": 14229, "repo": "spring-security-core-6.1.2", "code": "public abstract class AbstractAuthenticationToken extends Object implements Authentication, CredentialsContainer {\n\tboolean equals(Object obj);\n\t// Checks the credentials, principal and details objects, invoking the eraseCredentials method on any which implement CredentialsContainer.\n\tvoid eraseCredentials();\n\t// Set by an AuthenticationManager to indicate the authorities that the principal has been granted.\n\tCollection<GrantedAuthority> getAuthorities();\n}", "des": "Base class for Authentication objects."}
{"index": 14230, "repo": "spring-security-core-6.1.2", "code": "public abstract class AbstractJaasAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationListener<SessionDestroyedEvent> {\n\t// Validates the required properties are set.\n\tvoid afterPropertiesSet();\n\t// Attempts to login the user given the Authentication objects principal and credential\n\tAuthentication authenticate(Authentication auth);\n}", "des": "An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration."}
{"index": 14231, "repo": "spring-security-core-6.1.2", "code": "public abstract class AbstractSecurityExpressionHandler<T> extends Object implements SecurityExpressionHandler<T>, org.springframework.context.ApplicationContextAware {\n\t// Invokes the internal template methods to create StandardEvaluationContext and SecurityExpressionRoot objects.\n\tfinal org.springframework.expression.EvaluationContext createEvaluationContext(Authentication authentication, T invocation);\n}", "des": "Base implementation of the facade which isolates Spring Security's requirements for evaluating security expressions from the implementation of the underlying expression objects."}
{"index": 14232, "repo": "spring-security-core-6.1.2", "code": "public abstract class AbstractUserDetailsReactiveAuthenticationManager extends Object implements ReactiveAuthenticationManager, org.springframework.context.MessageSourceAware {\n\t// Attempts to authenticate the provided Authentication\n\treactor.core.publisher.Mono<Authentication> authenticate(Authentication authentication);\n\t// Allows subclasses to retrieve the UserDetails from an implementation-specific location.\n\tprotected abstract reactor.core.publisher.Mono<UserDetails> retrieveUser(String username);\n}", "des": "A base ReactiveAuthenticationManager that allows subclasses to override and work with UserDetails objects."}
{"index": 14233, "repo": "spring-security-core-6.1.2", "code": "public class AnonymousAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.context.MessageSourceAware {\n\t// Performs authentication with the same contract as AuthenticationManager.authenticate(Authentication) .\n\tAuthentication authenticate(Authentication authentication);\n\tString getKey();\n\tvoid setMessageSource(org.springframework.context.MessageSource messageSource);\n}", "des": "An AuthenticationProvider implementation that validates AnonymousAuthenticationTokens."}
{"index": 14234, "repo": "spring-security-core-6.1.2", "code": "public class AnonymousAuthenticationToken extends AbstractAuthenticationToken implements Serializable {\n\tboolean equals(Object obj);\n\t// Always returns an empty String\n\tObject getCredentials();\n\tint getKeyHash();\n\t// The identity of the principal being authenticated.\n\tObject getPrincipal();\n}", "des": "Represents an anonymous Authentication."}
{"index": 14235, "repo": "spring-security-core-6.1.2", "code": "public final class AuthenticatedAuthorizationManager<T> extends Object implements AuthorizationManager<T> {\n\t// Creates an instance of AuthenticatedAuthorizationManager that determines if the Authentication is anonymous.\n\tstatic <T> AuthenticatedAuthorizationManager<T> anonymous();\n\t// Creates an instance of AuthenticatedAuthorizationManager.\n\tstatic <T> AuthenticatedAuthorizationManager<T> authenticated();\n}", "des": "An AuthorizationManager that determines if the current user is authenticated."}
{"index": 14236, "repo": "spring-security-core-6.1.2", "code": "public class AuthenticatedReactiveAuthorizationManager<T> extends Object implements ReactiveAuthorizationManager<T> {\n\t// Gets an instance of AuthenticatedReactiveAuthorizationManager\n\tstatic <T> AuthenticatedReactiveAuthorizationManager<T> authenticated();\n\t// Determines if access is granted for a specific authentication and object.\n\treactor.core.publisher.Mono<AuthorizationDecision> check(reactor.core.publisher.Mono<Authentication> authentication, T object);\n}", "des": "A ReactiveAuthorizationManager that determines if the current user is authenticated."}
{"index": 14237, "repo": "spring-security-core-6.1.2", "code": "public interface Authentication extends Principal, Serializable {\n\t// Set by an AuthenticationManager to indicate the authorities that the principal has been granted.\n\tCollection<? extends GrantedAuthority> getAuthorities();\n\t// The credentials that prove the principal is correct.\n\tObject getCredentials();\n\t// Stores additional details about the authentication request.\n\tObject getDetails();\n\t// The identity of the principal being authenticated.\n\tObject getPrincipal();\n}", "des": "Represents the token for an authentication request or for an authenticated principal once the request has been processed by the AuthenticationManager.authenticate(Authentication) method."}
{"index": 14238, "repo": "spring-security-core-6.1.2", "code": "public class AuthenticationObservationContext extends io.micrometer.observation.Observation.Context {\n\t// Get the AuthenticationManager class that processed the authentication\n\tClass<?> getAuthenticationManagerClass();\n\t// Get the Authentication request that was observed\n\tAuthentication getAuthenticationRequest();\n\t// Get the Authentication result that was observed\n\tAuthentication getAuthenticationResult();\n}", "des": "An Observation.Context used during authentications"}
{"index": 14239, "repo": "spring-security-core-6.1.2", "code": "public interface AuthenticationProvider {\n\t// Performs authentication with the same contract as AuthenticationManager.authenticate(Authentication) .\n\tAuthentication authenticate(Authentication authentication);\n\t// Returns true if this AuthenticationProvider supports the indicated Authentication object.\n\tboolean supports(Class<?> authentication);\n}", "des": "Indicates a class can process a specific Authentication implementation."}
{"index": 14240, "repo": "spring-security-core-6.1.2", "code": "public interface AuthenticationTrustResolver {\n\t// Indicates whether the passed Authentication token represents an anonymous user.\n\tboolean isAnonymous(Authentication authentication);\n\t// Indicates whether the passed Authentication token represents a fully authenticated user (that is, neither anonymous or remember-me).\n\tdefault boolean isFullyAuthenticated(Authentication authentication);\n}", "des": "Evaluates Authentication tokens"}
{"index": 14241, "repo": "spring-security-core-6.1.2", "code": "public class AuthenticationTrustResolverImpl extends Object implements AuthenticationTrustResolver {\n\t// Indicates whether the passed Authentication token represents an anonymous user.\n\tboolean isAnonymous(Authentication authentication);\n\t// Indicates whether the passed Authentication token represents user that has been remembered (i.e.\n\tboolean isRememberMe(Authentication authentication);\n\tvoid setAnonymousClass(Class<? extends Authentication> anonymousClass);\n}", "des": "Basic implementation of AuthenticationTrustResolver."}
{"index": 14242, "repo": "spring-security-core-6.1.2", "code": "public final class AuthoritiesAuthorizationManager extends Object implements AuthorizationManager<Collection<String>> {\n\t// Determines if the current user is authorized by evaluating if the Authentication contains any of specified authorities.\n\tAuthorityAuthorizationDecision check(Supplier<Authentication> authentication, Collection<String> authorities);\n\t// Sets the RoleHierarchy to be used.\n\tvoid setRoleHierarchy(RoleHierarchy roleHierarchy);\n}", "des": "An AuthorizationManager that determines if the current user is authorized by evaluating if the Authentication contains any of the specified authorities."}
{"index": 14243, "repo": "spring-security-core-6.1.2", "code": "public final class AuthorityAuthorizationManager<T> extends Object implements AuthorizationManager<T> {\n\t// Determines if the current user is authorized by evaluating if the Authentication contains a specified authority.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, T object);\n\t// Creates an instance of AuthorityAuthorizationManager with the provided authorities.\n\tstatic <T> AuthorityAuthorizationManager<T> hasAnyAuthority(String... authorities);\n}", "des": "An AuthorizationManager that determines if the current user is authorized by evaluating if the Authentication contains a specified authority."}
{"index": 14244, "repo": "spring-security-core-6.1.2", "code": "public class AuthorityReactiveAuthorizationManager<T> extends Object implements ReactiveAuthorizationManager<T> {\n\t// Determines if access is granted for a specific authentication and object.\n\treactor.core.publisher.Mono<AuthorizationDecision> check(reactor.core.publisher.Mono<Authentication> authentication, T object);\n\t// Creates an instance of AuthorityReactiveAuthorizationManager with the provided authorities.\n\tstatic <T> AuthorityReactiveAuthorizationManager<T> hasAnyAuthority(String... authorities);\n}", "des": "A ReactiveAuthorizationManager that determines if the current user is authorized by evaluating if the Authentication contains a specified authority."}
{"index": 14245, "repo": "spring-security-core-6.1.2", "code": "public final class AuthorityUtils extends Object {\n\t// Converts an array of GrantedAuthority objects to a Set.\n\tstatic Set<String> authorityListToSet(Collection<? extends GrantedAuthority> userAuthorities);\n\t// Creates a array of GrantedAuthority objects from a comma-separated string representation (e.g.\n\tstatic List<GrantedAuthority> commaSeparatedStringToAuthorityList(String authorityString);\n}", "des": "Utility method for manipulating GrantedAuthority collections etc."}
{"index": 14246, "repo": "spring-security-core-6.1.2", "code": "public class AuthorizationEvent extends org.springframework.context.ApplicationEvent {\n\t// Get the principal requiring access\n\tSupplier<Authentication> getAuthentication();\n\t// Get the response to the princpal's request\n\tAuthorizationDecision getAuthorizationDecision();\n\t// Get the object to which access was requested\n\tObject getObject();\n}", "des": "A parent class for AuthorizationGrantedEvent and AuthorizationDeniedEvent."}
{"index": 14247, "repo": "spring-security-core-6.1.2", "code": "public enum AuthorizationInterceptorsOrder extends Enum<AuthorizationInterceptorsOrder> {\n\tint getOrder();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AuthorizationInterceptorsOrder valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AuthorizationInterceptorsOrder[] values();\n}", "des": "Ordering of Spring Security's authorization Advisors"}
{"index": 14248, "repo": "spring-security-core-6.1.2", "code": "@FunctionalInterface public interface AuthorizationManager<T> {\n\t// Determines if access is granted for a specific authentication and object.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, T object);\n\t// Determines if access should be granted for a specific authentication and object.\n\tdefault void verify(Supplier<Authentication> authentication, T object);\n}", "des": "An Authorization manager which can determine if an Authentication has access to a specific object."}
{"index": 14249, "repo": "spring-security-core-6.1.2", "code": "public final class AuthorizationManagers extends Object {\n\t// Creates an AuthorizationManager that grants access if all AuthorizationManagers granted or abstained, if managers are empty then granted decision is returned.\n\tstatic <T> AuthorizationManager<T> allOf(AuthorizationManager<T>... managers);\n}", "des": "A factory class to create an AuthorizationManager instances."}
{"index": 14250, "repo": "spring-security-core-6.1.2", "code": "public class AuthorizationObservationContext<T> extends io.micrometer.observation.Observation.Context {\n\t// Get the observed Authentication for this authorization\n\tAuthentication getAuthentication();\n\t// Get the observed AuthorizationDecision\n\tAuthorizationDecision getDecision();\n\t// Get the object for which access was requested\n\tT getObject();\n\t// Set the observed Authentication for this authorization\n\tvoid setAuthentication(Authentication authentication);\n}", "des": "An Observation.Context used during authorizations"}
{"index": 14251, "repo": "spring-security-core-6.1.2", "code": "public class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {\n\t// Allows subclasses to perform any additional checks of a returned (or cached) UserDetails for a given authentication request.\n\tprotected void additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication);\n}", "des": "An AuthenticationProvider implementation that retrieves user details from a UserDetailsService."}
{"index": 14252, "repo": "spring-security-core-6.1.2", "code": "public class DefaultJaasAuthenticationProvider extends AbstractJaasAuthenticationProvider {\n\t// Validates the required properties are set.\n\tvoid afterPropertiesSet();\n\t// Creates a LoginContext using the Configuration that was specified in setConfiguration(Configuration).\n\tprotected LoginContext createLoginContext(CallbackHandler handler);\n\tprotected Configuration getConfiguration();\n\t// Sets the Configuration to use for Authentication.\n\tvoid setConfiguration(Configuration configuration);\n}", "des": "Creates a LoginContext using the Configuration provided to it."}
{"index": 14253, "repo": "spring-security-core-6.1.2", "code": "public class DefaultMethodSecurityExpressionHandler extends AbstractSecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation> implements MethodSecurityExpressionHandler {\n\t// Provides an evaluation context in which to evaluate security expressions for the invocation type.\n\torg.springframework.expression.EvaluationContext createEvaluationContext(Supplier<Authentication> authentication, org.aopalliance.intercept.MethodInvocation mi);\n}", "des": "The standard implementation of MethodSecurityExpressionHandler."}
{"index": 14254, "repo": "spring-security-core-6.1.2", "code": "public class DefaultToken extends Object implements Token {\n\tboolean equals(Object obj);\n\t// Obtains the extended information associated within the token, which was presented when the token was first created.\n\tString getExtendedInformation();\n\t// Obtains the randomised, secure key assigned to this token.\n\tString getKey();\n\t// The time the token key was initially created is available from this method.\n\tlong getKeyCreationTime();\n}", "des": "The default implementation of Token."}
{"index": 14255, "repo": "spring-security-core-6.1.2", "code": "public final class DelegatingSecurityContextCallable<V> extends Object implements Callable<V> {\n\tV call();\n\t// Creates a DelegatingSecurityContextCallable and with the given Callable and SecurityContext, but if the securityContext is null will defaults to the current SecurityContext on the SecurityContextHolder\n\tstatic <V> Callable<V> create(Callable<V> delegate, SecurityContext securityContext);\n}", "des": "Wraps a delegate Callable with logic for setting up a SecurityContext before invoking the delegate Callable and then removing the SecurityContext after the delegate has completed."}
{"index": 14256, "repo": "spring-security-core-6.1.2", "code": "public final class DelegatingSecurityContextRunnable extends Object implements Runnable {\n\t// Factory method for creating a DelegatingSecurityContextRunnable.\n\tstatic Runnable create(Runnable delegate, SecurityContext securityContext);\n\tvoid run();\n\t// Sets the SecurityContextHolderStrategy to use.\n\tvoid setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy);\n}", "des": "Wraps a delegate Runnable with logic for setting up a SecurityContext before invoking the delegate Runnable and then removing the SecurityContext after the delegate has completed."}
{"index": 14257, "repo": "spring-security-core-6.1.2", "code": "public final class FieldUtils extends Object {\n\t// Attempts to locate the specified field on the class.\n\tstatic Field getField(Class<?> clazz, String fieldName);\n\t// Returns the value of a (nested) field on a bean.\n\tstatic Object getFieldValue(Object bean, String fieldName);\n\tstatic Object getProtectedFieldValue(String protectedField, Object object);\n\tstatic void setProtectedFieldValue(String protectedField, Object object, Object newValue);\n}", "des": "Offers static methods for directly manipulating fields."}
{"index": 14258, "repo": "spring-security-core-6.1.2", "code": "public interface GroupManager {\n\t// Assigns a new authority to a group.\n\tvoid addGroupAuthority(String groupName, GrantedAuthority authority);\n\t// Makes a user a member of a particular group.\n\tvoid addUserToGroup(String username, String group);\n\t// Creates a new group with the specified list of authorities.\n\tvoid createGroup(String groupName, List<GrantedAuthority> authorities);\n\t// Removes a group, including all members and authorities.\n\tvoid deleteGroup(String groupName);\n}", "des": "Allows management of groups of authorities and their members."}
{"index": 14259, "repo": "spring-security-core-6.1.2", "code": "public class InMemoryUserDetailsManager extends Object implements UserDetailsManager, UserDetailsPasswordService {\n\t// Modify the current user's password.\n\tvoid changePassword(String oldPassword, String newPassword);\n\t// Create a new user with the supplied details.\n\tvoid createUser(UserDetails user);\n\t// Remove the user with the given login name from the system.\n\tvoid deleteUser(String username);\n\t// Locates the user based on the username.\n\tUserDetails loadUserByUsername(String username);\n}", "des": "Non-persistent implementation of UserDetailsManager which is backed by an in-memory map."}
{"index": 14260, "repo": "spring-security-core-6.1.2", "code": "public class JaasAuthenticationProvider extends AbstractJaasAuthenticationProvider {\n\t// Validates the required properties are set.\n\tvoid afterPropertiesSet();\n\t// Hook method for configuring Jaas.\n\tprotected void configureJaas(org.springframework.core.io.Resource loginConfig);\n\t// Creates the LoginContext to be used for authentication.\n\tprotected LoginContext createLoginContext(CallbackHandler handler);\n\torg.springframework.core.io.Resource getLoginConfig();\n}", "des": "An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration."}
{"index": 14261, "repo": "spring-security-core-6.1.2", "code": "public class JdbcDaoImpl extends org.springframework.jdbc.core.support.JdbcDaoSupport implements UserDetailsService, org.springframework.context.MessageSourceAware {\n\t// Allows subclasses to add their own granted authorities to the list to be returned in the UserDetails.\n\tprotected void addCustomAuthorities(String username, List<GrantedAuthority> authorities);\n}", "des": "UserDetailsService implementation which retrieves the user details (username, password, enabled flag, and authorities) from a database using JDBC queries."}
{"index": 14262, "repo": "spring-security-core-6.1.2", "code": "public class JdbcUserDetailsManager extends JdbcDaoImpl implements UserDetailsManager, GroupManager {\n\t// Assigns a new authority to a group.\n\tvoid addGroupAuthority(String groupName, GrantedAuthority authority);\n\t// Makes a user a member of a particular group.\n\tvoid addUserToGroup(String username, String groupName);\n\t// Modify the current user's password.\n\tvoid changePassword(String oldPassword, String newPassword);\n}", "des": "Jdbc user management service, based on the same table structure as its parent class, JdbcDaoImpl."}
{"index": 14263, "repo": "spring-security-core-6.1.2", "code": "public final class Jsr250AuthorizationManager extends Object implements AuthorizationManager<org.aopalliance.intercept.MethodInvocation> {\n\t// Determine if an Authentication has access to a method by evaluating the DenyAll, PermitAll, and RolesAllowed annotations that MethodInvocation specifies.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, org.aopalliance.intercept.MethodInvocation methodInvocation);\n\t// Sets the role prefix.\n\tvoid setRolePrefix(String rolePrefix);\n}", "des": "An AuthorizationManager which can determine if an Authentication may invoke the MethodInvocation by evaluating if the Authentication contains a specified authority from the JSR-250 security annotations."}
{"index": 14264, "repo": "spring-security-core-6.1.2", "code": "public class KeyBasedPersistenceTokenService extends Object implements TokenService, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Forces the allocation of a new Token.\n\tToken allocateToken(String extendedInformation);\n\tvoid setPseudoRandomNumberBytes(int pseudoRandomNumberBytes);\n\tvoid setSecureRandom(SecureRandom secureRandom);\n\tvoid setServerInteger(Integer serverInteger);\n\tvoid setServerSecret(String serverSecret);\n}", "des": "Basic implementation of TokenService that is compatible with clusters and across machine restarts, without requiring database persistence."}
{"index": 14265, "repo": "spring-security-core-6.1.2", "code": "public final class ListeningSecurityContextHolderStrategy extends Object implements SecurityContextHolderStrategy {\n\t// Clears the current context.\n\tvoid clearContext();\n\t// Creates a new, empty context implementation, for use by SecurityContextRepository implementations, when creating a new context for the first time.\n\tSecurityContext createEmptyContext();\n\t// Obtains the current context.\n\tSecurityContext getContext();\n}", "des": "An API for notifying when the SecurityContext changes."}
{"index": 14266, "repo": "spring-security-core-6.1.2", "code": "public class MapBasedAttributes2GrantedAuthoritiesMapper extends Object implements Attributes2GrantedAuthoritiesMapper, MappableAttributesRetriever, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tMap<String,Collection<GrantedAuthority>> getAttributes2grantedAuthoritiesMap();\n\t// Map the given array of attributes to Spring Security GrantedAuthorities.\n\tList<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes);\n}", "des": "This class implements the Attributes2GrantedAuthoritiesMapper and MappableAttributesRetriever interfaces based on the supplied Map."}
{"index": 14267, "repo": "spring-security-core-6.1.2", "code": "public class MapReactiveUserDetailsService extends Object implements ReactiveUserDetailsService, ReactiveUserDetailsPasswordService {\n\t// Find the UserDetails by username.\n\treactor.core.publisher.Mono<UserDetails> findByUsername(String username);\n\t// Modify the specified user's password.\n\treactor.core.publisher.Mono<UserDetails> updatePassword(UserDetails user, String newPassword);\n}", "des": "A Map based implementation of ReactiveUserDetailsService"}
{"index": 14268, "repo": "spring-security-core-6.1.2", "code": "public final class MethodExpressionAuthorizationManager extends Object implements AuthorizationManager<org.aopalliance.intercept.MethodInvocation> {\n\t// Determines the access by evaluating the provided expression.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, org.aopalliance.intercept.MethodInvocation context);\n\t// Sets the SecurityExpressionHandler to be used.\n\tvoid setExpressionHandler(SecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation> expressionHandler);\n}", "des": "An expression-based AuthorizationManager that determines the access by evaluating the provided expression against the MethodInvocation."}
{"index": 14269, "repo": "spring-security-core-6.1.2", "code": "public class MethodInvocationResult extends Object {\n\t// Return the already-invoked MethodInvocation\n\torg.aopalliance.intercept.MethodInvocation getMethodInvocation();\n\t// Return the result of the already-invoked MethodInvocation\n\tObject getResult();\n}", "des": "A context object that contains a MethodInvocation and the result of that MethodInvocation."}
{"index": 14270, "repo": "spring-security-core-6.1.2", "code": "public final class MethodInvocationUtils extends Object {\n\t// Generates a MethodInvocation for specified methodName on the passed object, using the args to locate the method.\n\tstatic org.aopalliance.intercept.MethodInvocation create(Object object, String methodName, Object... args);\n\t// Generates a MethodInvocation for the specified methodName on the passed class.\n\tstatic org.aopalliance.intercept.MethodInvocation createFromClass(Class<?> clazz, String methodName);\n}", "des": "Static utility methods for creating MethodInvocations usable within Spring Security."}
{"index": 14271, "repo": "spring-security-core-6.1.2", "code": "public interface MethodSecurityExpressionHandler extends SecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation> {\n\t// Filters a target collection or array.\n\tObject filter(Object filterTarget, org.springframework.expression.Expression filterExpression, org.springframework.expression.EvaluationContext ctx);\n}", "des": "Extended expression-handler facade which adds methods which are specific to securing method invocations."}
{"index": 14272, "repo": "spring-security-core-6.1.2", "code": "public class NullUserCache extends Object implements UserCache {\n\t// Obtains a UserDetails from the cache.\n\tUserDetails getUserFromCache(String username);\n\t// Places a UserDetails in the cache.\n\tvoid putUserInCache(UserDetails user);\n\t// Removes the specified user from the cache.\n\tvoid removeUserFromCache(String username);\n}", "des": "Does not perform any caching."}
{"index": 14273, "repo": "spring-security-core-6.1.2", "code": "public final class ObservationAuthenticationManager extends Object implements AuthenticationManager {\n\t// Attempts to authenticate the passed Authentication object, returning a fully populated Authentication object (including granted authorities) if successful.\n\tAuthentication authenticate(Authentication authentication);\n}", "des": "An AuthenticationManager that observes the authentication"}
{"index": 14274, "repo": "spring-security-core-6.1.2", "code": "public final class ObservationAuthorizationManager<T> extends Object implements AuthorizationManager<T> {\n\t// Determines if access is granted for a specific authentication and object.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, T object);\n\t// Use the provided convention for reporting observation data\n\tvoid setObservationConvention(io.micrometer.observation.ObservationConvention<AuthorizationObservationContext<?>> convention);\n}", "des": "An AuthorizationManager that observes the authorization"}
{"index": 14275, "repo": "spring-security-core-6.1.2", "code": "public class ObservationReactiveAuthenticationManager extends Object implements ReactiveAuthenticationManager {\n\t// Attempts to authenticate the provided Authentication\n\treactor.core.publisher.Mono<Authentication> authenticate(Authentication authentication);\n\t// Use the provided convention for reporting observation data\n\tvoid setObservationConvention(io.micrometer.observation.ObservationConvention<AuthenticationObservationContext> convention);\n}", "des": "An ReactiveAuthenticationManager that observes the authentication"}
{"index": 14276, "repo": "spring-security-core-6.1.2", "code": "public final class ObservationReactiveAuthorizationManager<T> extends Object implements ReactiveAuthorizationManager<T> {\n\t// Determines if access is granted for a specific authentication and object.\n\treactor.core.publisher.Mono<AuthorizationDecision> check(reactor.core.publisher.Mono<Authentication> authentication, T object);\n}", "des": "An ReactiveAuthorizationManager that observes the authentication"}
{"index": 14277, "repo": "spring-security-core-6.1.2", "code": "public final class PostAuthorizeAuthorizationManager extends Object implements AuthorizationManager<MethodInvocationResult> {\n\t// Determine if an Authentication has access to the returned object by evaluating the PostAuthorize annotation that the MethodInvocation specifies.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, MethodInvocationResult mi);\n\t// Use this the MethodSecurityExpressionHandler.\n\tvoid setExpressionHandler(MethodSecurityExpressionHandler expressionHandler);\n}", "des": "An AuthorizationManager which can determine if an Authentication may return the result from an invoked MethodInvocation by evaluating an expression from the PostAuthorize annotation."}
{"index": 14278, "repo": "spring-security-core-6.1.2", "code": "public final class PreAuthorizeAuthorizationManager extends Object implements AuthorizationManager<org.aopalliance.intercept.MethodInvocation> {\n\t// Determine if an Authentication has access to a method by evaluating an expression from the PreAuthorize annotation that the MethodInvocation specifies.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, org.aopalliance.intercept.MethodInvocation mi);\n}", "des": "An AuthorizationManager which can determine if an Authentication may invoke the MethodInvocation by evaluating an expression from the PreAuthorize annotation."}
{"index": 14279, "repo": "spring-security-core-6.1.2", "code": "public class ProviderManager extends Object implements AuthenticationManager, org.springframework.context.MessageSourceAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Attempts to authenticate the passed Authentication object.\n\tAuthentication authenticate(Authentication authentication);\n\tList<AuthenticationProvider> getProviders();\n\tboolean isEraseCredentialsAfterAuthentication();\n\tvoid setAuthenticationEventPublisher(AuthenticationEventPublisher eventPublisher);\n}", "des": "Iterates an Authentication request through a list of AuthenticationProviders."}
{"index": 14280, "repo": "spring-security-core-6.1.2", "code": "public class ReactiveAuthenticationManagerAdapter extends Object implements ReactiveAuthenticationManager {\n\t// Attempts to authenticate the provided Authentication\n\treactor.core.publisher.Mono<Authentication> authenticate(Authentication token);\n\t// Set a scheduler that will be published on to perform the authentication logic.\n\tvoid setScheduler(reactor.core.scheduler.Scheduler scheduler);\n}", "des": "Adapts an AuthenticationManager to the reactive APIs."}
{"index": 14281, "repo": "spring-security-core-6.1.2", "code": "public interface ReactiveAuthorizationManager<T> {\n\t// Determines if access is granted for a specific authentication and object.\n\treactor.core.publisher.Mono<AuthorizationDecision> check(reactor.core.publisher.Mono<Authentication> authentication, T object);\n\t// Determines if access should be granted for a specific authentication and object\n\tdefault reactor.core.publisher.Mono<Void> verify(reactor.core.publisher.Mono<Authentication> authentication, T object);\n}", "des": "A reactive authorization manager which can determine if an Authentication has access to a specific object."}
{"index": 14282, "repo": "spring-security-core-6.1.2", "code": "public final class ReactiveSecurityContextHolder extends Object {\n\t// Clears the Mono<SecurityContext> from Reactor Context\n\tstatic Function<reactor.util.context.Context,reactor.util.context.Context> clearContext();\n\t// Gets the Mono<SecurityContext> from Reactor Context\n\tstatic reactor.core.publisher.Mono<SecurityContext> getContext();\n\t// A shortcut for withSecurityContext(Mono)\n\tstatic reactor.util.context.Context withAuthentication(Authentication authentication);\n}", "des": "Allows getting and setting the Spring SecurityContext into a Context."}
{"index": 14283, "repo": "spring-security-core-6.1.2", "code": "public class RememberMeAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware {\n\tvoid afterPropertiesSet();\n\t// Performs authentication with the same contract as AuthenticationManager.authenticate(Authentication) .\n\tAuthentication authenticate(Authentication authentication);\n\tString getKey();\n\tvoid setMessageSource(org.springframework.context.MessageSource messageSource);\n}", "des": "An AuthenticationProvider implementation that validates RememberMeAuthenticationTokens."}
{"index": 14284, "repo": "spring-security-core-6.1.2", "code": "public class RememberMeAuthenticationToken extends AbstractAuthenticationToken {\n\tboolean equals(Object obj);\n\t// Always returns an empty String\n\tObject getCredentials();\n\tint getKeyHash();\n\t// The identity of the principal being authenticated.\n\tObject getPrincipal();\n}", "des": "Represents a remembered Authentication."}
{"index": 14285, "repo": "spring-security-core-6.1.2", "code": "public class RoleHierarchyImpl extends Object implements RoleHierarchy {\n\t// Returns an array of all reachable authorities.\n\tCollection<GrantedAuthority> getReachableGrantedAuthorities(Collection<? extends GrantedAuthority> authorities);\n\t// Set the role hierarchy and pre-calculate for every role the set of all reachable roles, i.e.\n\tvoid setHierarchy(String roleHierarchyStringRepresentation);\n}", "des": "This class defines a role hierarchy for use with various access checking components."}
{"index": 14286, "repo": "spring-security-core-6.1.2", "code": "public final class RsaKeyConverters extends Object {\n\t// Construct a Converter for converting a PEM-encoded PKCS#8 RSA Private Key into a RSAPrivateKey.\n\tstatic org.springframework.core.convert.converter.Converter<InputStream,RSAPrivateKey> pkcs8();\n\t// Construct a Converter for converting a PEM-encoded X.509 RSA Public Key or X.509 Certificate into a RSAPublicKey.\n\tstatic org.springframework.core.convert.converter.Converter<InputStream,RSAPublicKey> x509();\n}", "des": "Used for creating Key converter instances"}
{"index": 14287, "repo": "spring-security-core-6.1.2", "code": "public final class SecuredAuthorizationManager extends Object implements AuthorizationManager<org.aopalliance.intercept.MethodInvocation> {\n\t// Determine if an Authentication has access to a method by evaluating the Secured annotation that MethodInvocation specifies.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, org.aopalliance.intercept.MethodInvocation mi);\n}", "des": "An AuthorizationManager which can determine if an Authentication may invoke the MethodInvocation by evaluating if the Authentication contains a specified authority from the Spring Security's Secured annotation."}
{"index": 14288, "repo": "spring-security-core-6.1.2", "code": "public class SecureRandomFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<SecureRandom> {\n\tSecureRandom getObject();\n\tClass<SecureRandom> getObjectType();\n\tboolean isSingleton();\n\t// Allows the Pseudo Random Number Generator (PRNG) algorithm to be nominated.\n\tvoid setAlgorithm(String algorithm);\n\t// Allows the user to specify a resource which will act as a seed for the SecureRandom instance.\n\tvoid setSeed(org.springframework.core.io.Resource seed);\n}", "des": "Creates a SecureRandom instance."}
{"index": 14289, "repo": "spring-security-core-6.1.2", "code": "public interface SecurityContext extends Serializable {\n\t// Obtains the currently authenticated principal, or an authentication request token.\n\tAuthentication getAuthentication();\n\t// Changes the currently authenticated principal, or removes the authentication information.\n\tvoid setAuthentication(Authentication authentication);\n}", "des": "Interface defining the minimum security information associated with the current thread of execution."}
{"index": 14290, "repo": "spring-security-core-6.1.2", "code": "public class SecurityContextChangedEvent extends org.springframework.context.ApplicationEvent {\n\t// Get the SecurityContext set on the SecurityContextHolder as of this event\n\tSecurityContext getNewContext();\n\t// Get the SecurityContext set on the SecurityContextHolder immediately previous to this event\n\tSecurityContext getOldContext();\n\t// Say whether the event is a context-clearing event.\n\tboolean isCleared();\n}", "des": "An event that represents a change in SecurityContext"}
{"index": 14291, "repo": "spring-security-core-6.1.2", "code": "public class SecurityContextHolder extends Object {\n\t// Explicitly clears the context value from the current thread.\n\tstatic void clearContext();\n\t// Delegates the creation of a new, empty context to the configured strategy.\n\tstatic SecurityContext createEmptyContext();\n\t// Obtain the current SecurityContext.\n\tstatic SecurityContext getContext();\n\t// Allows retrieval of the context strategy.\n\tstatic SecurityContextHolderStrategy getContextHolderStrategy();\n}", "des": "Associates a given SecurityContext with the current execution thread."}
{"index": 14292, "repo": "spring-security-core-6.1.2", "code": "public interface SecurityContextHolderStrategy {\n\t// Clears the current context.\n\tvoid clearContext();\n\t// Creates a new, empty context implementation, for use by SecurityContextRepository implementations, when creating a new context for the first time.\n\tSecurityContext createEmptyContext();\n\t// Obtains the current context.\n\tSecurityContext getContext();\n\t// Obtains a Supplier that returns the current context.\n\tdefault Supplier<SecurityContext> getDeferredContext();\n}", "des": "A strategy for storing security context information against a thread."}
{"index": 14293, "repo": "spring-security-core-6.1.2", "code": "public class SecurityContextImpl extends Object implements SecurityContext {\n\tboolean equals(Object obj);\n\t// Obtains the currently authenticated principal, or an authentication request token.\n\tAuthentication getAuthentication();\n\t// Changes the currently authenticated principal, or removes the authentication information.\n\tvoid setAuthentication(Authentication authentication);\n}", "des": "Base implementation of SecurityContext."}
{"index": 14294, "repo": "spring-security-core-6.1.2", "code": "public class SecurityContextLoginModule extends Object implements LoginModule {\n\t// Abort the authentication process by forgetting the Spring Security Authentication.\n\tboolean abort();\n\t// Authenticate the Subject (phase two) by adding the Spring Security Authentication to the Subject's principals.\n\tboolean commit();\n\t// Initialize this LoginModule.\n\tvoid initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options);\n}", "des": "An implementation of LoginModule that uses a Spring Security SecurityContext to provide authentication."}
{"index": 14295, "repo": "spring-security-core-6.1.2", "code": "public interface SecurityExpressionHandler<T> extends org.springframework.aop.framework.AopInfrastructureBean {\n\t// Provides an evaluation context in which to evaluate security expressions for the invocation type.\n\tdefault org.springframework.expression.EvaluationContext createEvaluationContext(Supplier<Authentication> authentication, T invocation);\n}", "des": "Facade which isolates Spring Security's requirements for evaluating security expressions from the implementation of the underlying expression objects"}
{"index": 14296, "repo": "spring-security-core-6.1.2", "code": "public interface SecurityExpressionOperations {\n\t// Always denies access\n\tboolean denyAll();\n\t// Gets the Authentication used for evaluating the expressions\n\tAuthentication getAuthentication();\n\t// Determines if the getAuthentication() has any of the specified authorities within Authentication.getAuthorities().\n\tboolean hasAnyAuthority(String... authorities);\n}", "des": "Standard interface for expression root objects used with expression-based security."}
{"index": 14297, "repo": "spring-security-core-6.1.2", "code": "public abstract class SecurityExpressionRoot extends Object implements SecurityExpressionOperations {\n\t// Always denies access\n\tfinal boolean denyAll();\n\t// Gets the Authentication used for evaluating the expressions\n\tfinal Authentication getAuthentication();\n\t// Convenience method to access Authentication.getPrincipal() from getAuthentication()\n\tObject getPrincipal();\n}", "des": "Base root object for use in Spring Security expression evaluations."}
{"index": 14298, "repo": "spring-security-core-6.1.2", "code": "public interface SecurityMetadataSource extends org.springframework.aop.framework.AopInfrastructureBean {\n\t// If available, returns all of the ConfigAttributes defined by the implementing class.\n\tCollection<ConfigAttribute> getAllConfigAttributes();\n\t// Accesses the ConfigAttributes that apply to a given secure object.\n\tCollection<ConfigAttribute> getAttributes(Object object);\n}", "des": "Implemented by classes that store and can identify the ConfigAttributes that applies to a given secure object invocation."}
{"index": 14299, "repo": "spring-security-core-6.1.2", "code": "public abstract class SessionIdChangedEvent extends AbstractSessionEvent {\n\t// Returns the new session ID.\n\tabstract String getNewSessionId();\n\t// Returns the old session ID.\n\tabstract String getOldSessionId();\n}", "des": "Generic \"session ID changed\" event which indicates that a session identifier (potentially represented by a security context) has changed."}
{"index": 14300, "repo": "spring-security-core-6.1.2", "code": "public interface SessionRegistry {\n\t// Obtains all the known principals in the SessionRegistry.\n\tList<Object> getAllPrincipals();\n\t// Obtains all the known sessions for the specified principal.\n\tList<SessionInformation> getAllSessions(Object principal, boolean includeExpiredSessions);\n\t// Obtains the session information for the specified sessionId.\n\tSessionInformation getSessionInformation(String sessionId);\n}", "des": "Maintains a registry of SessionInformation instances."}
{"index": 14301, "repo": "spring-security-core-6.1.2", "code": "public class SessionRegistryImpl extends Object implements SessionRegistry, org.springframework.context.ApplicationListener<AbstractSessionEvent> {\n\t// Obtains all the known principals in the SessionRegistry.\n\tList<Object> getAllPrincipals();\n\t// Obtains all the known sessions for the specified principal.\n\tList<SessionInformation> getAllSessions(Object principal, boolean includeExpiredSessions);\n}", "des": "Default implementation of SessionRegistry which listens for SessionDestroyedEvents published in the Spring application context."}
{"index": 14302, "repo": "spring-security-core-6.1.2", "code": "public abstract class Sha512DigestUtils extends Object {\n\t// Calculates the SHA digest and returns the value as a byte[].\n\tstatic byte[] sha(byte[] data);\n\t// Calculates the SHA digest and returns the value as a byte[].\n\tstatic byte[] sha(String data);\n\t// Calculates the SHA digest and returns the value as a hex string.\n\tstatic String shaHex(byte[] data);\n\t// Calculates the SHA digest and returns the value as a hex string.\n\tstatic String shaHex(String data);\n}", "des": "Provides SHA512 digest methods."}
{"index": 14303, "repo": "spring-security-core-6.1.2", "code": "public class SimpleAttributes2GrantedAuthoritiesMapper extends Object implements Attributes2GrantedAuthoritiesMapper, org.springframework.beans.factory.InitializingBean {\n\t// Check whether all properties have been set to correct values.\n\tvoid afterPropertiesSet();\n\t// Map the given list of string attributes one-to-one to Spring Security GrantedAuthorities.\n\tList<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes);\n\tvoid setAddPrefixIfAlreadyExisting(boolean b);\n}", "des": "This class implements the Attributes2GrantedAuthoritiesMapper interface by doing a one-to-one mapping from roles to Spring Security GrantedAuthorities."}
{"index": 14304, "repo": "spring-security-core-6.1.2", "code": "public final class SimpleAuthorityMapper extends Object implements GrantedAuthoritiesMapper, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Creates a mapping of the supplied authorities based on the case-conversion and prefix settings.\n\tSet<GrantedAuthority> mapAuthorities(Collection<? extends GrantedAuthority> authorities);\n\t// Whether to convert the authority value to lower case in the mapping.\n\tvoid setConvertToLowerCase(boolean convertToLowerCase);\n}", "des": "Simple one-to-one GrantedAuthoritiesMapper which allows for case conversion of the authority name and the addition of a string prefix (which defaults to ROLE_ )."}
{"index": 14305, "repo": "spring-security-core-6.1.2", "code": "public class SpringCacheBasedUserCache extends Object implements UserCache {\n\t// Obtains a UserDetails from the cache.\n\tUserDetails getUserFromCache(String username);\n\t// Places a UserDetails in the cache.\n\tvoid putUserInCache(UserDetails user);\n\t// Removes the specified user from the cache.\n\tvoid removeUserFromCache(String username);\n\tvoid removeUserFromCache(UserDetails user);\n}", "des": "Caches UserDetails instances in a Spring defined Cache."}
{"index": 14306, "repo": "spring-security-core-6.1.2", "code": "public class TestingAuthenticationProvider extends Object implements AuthenticationProvider {\n\t// Performs authentication with the same contract as AuthenticationManager.authenticate(Authentication) .\n\tAuthentication authenticate(Authentication authentication);\n\t// Returns true if this AuthenticationProvider supports the indicated Authentication object.\n\tboolean supports(Class<?> authentication);\n}", "des": "An AuthenticationProvider implementation for the TestingAuthenticationToken."}
{"index": 14307, "repo": "spring-security-core-6.1.2", "code": "public class TestingAuthenticationToken extends AbstractAuthenticationToken {\n\t// The credentials that prove the principal is correct.\n\tObject getCredentials();\n\t// The identity of the principal being authenticated.\n\tObject getPrincipal();\n}", "des": "An Authentication implementation that is designed for use whilst unit testing."}
{"index": 14308, "repo": "spring-security-core-6.1.2", "code": "public interface Token {\n\t// Obtains the extended information associated within the token, which was presented when the token was first created.\n\tString getExtendedInformation();\n\t// Obtains the randomised, secure key assigned to this token.\n\tString getKey();\n\t// The time the token key was initially created is available from this method.\n\tlong getKeyCreationTime();\n}", "des": "A token issued by TokenService."}
{"index": 14309, "repo": "spring-security-core-6.1.2", "code": "public interface TokenService {\n\t// Forces the allocation of a new Token.\n\tToken allocateToken(String extendedInformation);\n\t// Permits verification the Token.getKey() was issued by this TokenService and reconstructs the corresponding Token.\n\tToken verifyToken(String key);\n}", "des": "Provides a mechanism to allocate and rebuild secure, randomised tokens."}
{"index": 14310, "repo": "spring-security-core-6.1.2", "code": "public class User extends Object implements UserDetails, CredentialsContainer {\n\t// Creates a UserBuilder\n\tstatic User.UserBuilder builder();\n\t// Returns true if the supplied object is a User instance with the same username value.\n\tboolean equals(Object obj);\n\tvoid eraseCredentials();\n\t// Returns the authorities granted to the user.\n\tCollection<GrantedAuthority> getAuthorities();\n\t// Returns the password used to authenticate the user.\n\tString getPassword();\n}", "des": "Models core user information retrieved by a UserDetailsService."}
{"index": 14311, "repo": "spring-security-core-6.1.2", "code": "public static final class User.UserBuilder extends Object {\n\t// Defines if the account is expired or not.\n\tUser.UserBuilder accountExpired(boolean accountExpired);\n\t// Defines if the account is locked or not.\n\tUser.UserBuilder accountLocked(boolean accountLocked);\n\t// Populates the authorities.\n\tUser.UserBuilder authorities(String... authorities);\n\t// Populates the authorities.\n\tUser.UserBuilder authorities(Collection<? extends GrantedAuthority> authorities);\n}", "des": "Builds the user to be added."}
{"index": 14312, "repo": "spring-security-core-6.1.2", "code": "public class UserAttribute extends Object {\n\tvoid addAuthority(GrantedAuthority newAuthority);\n\tList<GrantedAuthority> getAuthorities();\n\tString getPassword();\n\tboolean isEnabled();\n\tboolean isValid();\n\t// Set all authorities for this user.\n\tvoid setAuthorities(List<GrantedAuthority> authorities);\n\t// Set all authorities for this user from String values.\n\tvoid setAuthoritiesAsString(List<String> authoritiesAsStrings);\n\tvoid setEnabled(boolean enabled);\n\tvoid setPassword(String password);\n}", "des": "Used by InMemoryUserDetailsManager to temporarily store the attributes associated with a user."}
{"index": 14313, "repo": "spring-security-core-6.1.2", "code": "public interface UserCache {\n\t// Obtains a UserDetails from the cache.\n\tUserDetails getUserFromCache(String username);\n\t// Places a UserDetails in the cache.\n\tvoid putUserInCache(UserDetails user);\n\t// Removes the specified user from the cache.\n\tvoid removeUserFromCache(String username);\n}", "des": "Provides a cache of UserDetails objects."}
{"index": 14314, "repo": "spring-security-core-6.1.2", "code": "public interface UserDetails extends Serializable {\n\t// Returns the authorities granted to the user.\n\tCollection<? extends GrantedAuthority> getAuthorities();\n\t// Returns the password used to authenticate the user.\n\tString getPassword();\n\t// Returns the username used to authenticate the user.\n\tString getUsername();\n\t// Indicates whether the user's account has expired.\n\tboolean isAccountNonExpired();\n\t// Indicates whether the user is locked or unlocked.\n\tboolean isAccountNonLocked();\n}", "des": "Provides core user information."}
{"index": 14315, "repo": "spring-security-core-6.1.2", "code": "public class UserDetailsByNameServiceWrapper<T extends Authentication> extends Object implements AuthenticationUserDetailsService<T>, org.springframework.beans.factory.InitializingBean {\n\t// Check whether all required properties have been set.\n\tvoid afterPropertiesSet();\n\t// Get the UserDetails object from the wrapped UserDetailsService implementation\n\tUserDetails loadUserDetails(T authentication);\n}", "des": "This implementation for AuthenticationUserDetailsService wraps a regular Spring Security UserDetailsService implementation, to retrieve a UserDetails object based on the user name contained in an Authentication object."}
{"index": 14316, "repo": "spring-security-core-6.1.2", "code": "public interface UserDetailsManager extends UserDetailsService {\n\t// Modify the current user's password.\n\tvoid changePassword(String oldPassword, String newPassword);\n\t// Create a new user with the supplied details.\n\tvoid createUser(UserDetails user);\n\t// Remove the user with the given login name from the system.\n\tvoid deleteUser(String username);\n\t// Update the specified user.\n\tvoid updateUser(UserDetails user);\n}", "des": "An extension of the UserDetailsService which provides the ability to create new users and update existing ones."}
{"index": 14317, "repo": "spring-security-core-6.1.2", "code": "public class UsernamePasswordAuthenticationToken extends AbstractAuthenticationToken {\n\t// This factory method can be safely used by any code that wishes to create a authenticated UsernamePasswordAuthenticationToken.\n\tstatic UsernamePasswordAuthenticationToken authenticated(Object principal, Object credentials, Collection<? extends GrantedAuthority> authorities);\n}", "des": "An Authentication implementation that is designed for simple presentation of a username and password."}
{"index": 14318, "repo": "pulsar-common-3.0.0", "code": "public enum ActionType extends Enum<ActionType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ActionType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ActionType[] values();\n}", "des": "Pulsar event action type."}
{"index": 14319, "repo": "pulsar-common-3.0.0", "code": "public class AppendBrokerTimestampMetadataInterceptor extends Object implements BrokerEntryMetadataInterceptor {\n\t// Called by ManagedLedger to intercept adding an entry.\n\tBrokerEntryMetadata intercept(BrokerEntryMetadata brokerMetadata);\n\t// Called by ManagedLedger to intercept adding an entry with numberOfMessages.\n\tBrokerEntryMetadata interceptWithNumberOfMessages(BrokerEntryMetadata brokerMetadata, int numberOfMessages);\n}", "des": "A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add timestamp from broker side metadata for each entry."}
{"index": 14320, "repo": "pulsar-common-3.0.0", "code": "public class BitSetRecyclable extends Object implements Cloneable, Serializable {\n\t// Performs a logical AND of this target bit set with the argument bit set.\n\tvoid and(BitSetRecyclable set);\n\t// Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet.\n\tvoid andNot(BitSetRecyclable set);\n\t// Returns the number of bits set to true in this BitSet.\n\tint cardinality();\n\t// Sets all of the bits in this BitSet to false.\n\tvoid clear();\n}", "des": "This this copy of BitSet."}
{"index": 14321, "repo": "pulsar-common-3.0.0", "code": "@LimitedPrivate @Stable public interface BrokerEntryMetadataInterceptor {\n\t// Called by ManagedLedger to intercept adding an entry.\n\tBrokerEntryMetadata intercept(BrokerEntryMetadata brokerMetadata);\n\t// Called by ManagedLedger to intercept adding an entry with numberOfMessages.\n\tBrokerEntryMetadata interceptWithNumberOfMessages(BrokerEntryMetadata brokerMetadata, int numberOfMessages);\n}", "des": "A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add metadata for each entry from broker side."}
{"index": 14322, "repo": "pulsar-common-3.0.0", "code": "public static enum Commands.ChecksumType extends Enum<Commands.ChecksumType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Commands.ChecksumType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Commands.ChecksumType[] values();\n}", "des": "Definition of possible checksum types."}
{"index": 14323, "repo": "pulsar-common-3.0.0", "code": "public class CompletableFutureCancellationHandler extends Object {\n\t// Attaches the cancellation handler to handle cancels and timeouts.\n\tvoid attachToFuture(CompletableFuture<?> future);\n\t// Creates a new CompletableFuture and attaches the cancellation handler to handle cancels and timeouts.\n\t<T> CompletableFuture<T> createFuture();\n\t// Set the action to run when the future gets cancelled or timeouts.\n\tvoid setCancelAction(Runnable cancelAction);\n}", "des": "Implements cancellation and timeout support for CompletableFutures."}
{"index": 14324, "repo": "pulsar-common-3.0.0", "code": "public interface CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedSize);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf raw);\n}", "des": "Generic compression codec interface."}
{"index": 14325, "repo": "pulsar-common-3.0.0", "code": "public class CompressionCodecLZ4 extends Object implements CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedLength);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf source);\n}", "des": "LZ4 Compression."}
{"index": 14326, "repo": "pulsar-common-3.0.0", "code": "public class CompressionCodecNone extends Object implements CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedSize);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf raw);\n}", "des": "No compression."}
{"index": 14327, "repo": "pulsar-common-3.0.0", "code": "public class CompressionCodecSnappy extends Object implements CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedLength);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf source);\n}", "des": "Snappy Compression."}
{"index": 14328, "repo": "pulsar-common-3.0.0", "code": "public class CompressionCodecZLib extends Object implements CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedLength);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf source);\n}", "des": "ZLib Compression."}
{"index": 14329, "repo": "pulsar-common-3.0.0", "code": "public class CompressionCodecZstd extends Object implements CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedLength);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf source);\n}", "des": "Zstandard Compression."}
{"index": 14330, "repo": "pulsar-common-3.0.0", "code": "public class ConcurrentLongPairSet extends Object implements LongPairSet {\n\t// Adds composite value of item1 and item2 to set.\n\tboolean add(long item1, long item2);\n\t// Returns capacity of the set.\n\tlong capacity();\n\t// Removes all items from set.\n\tvoid clear();\n\t// Checks if given (item1,item2) composite value exists into set.\n\tboolean contains(long item1, long item2);\n}", "des": "Concurrent hash set where values are composed of pairs of longs."}
{"index": 14331, "repo": "pulsar-common-3.0.0", "code": "public class ConcurrentOpenLongPairRangeSet<T extends Comparable<T>> extends Object implements LongPairRangeSet<T> {\n\t// Adds the specified range to this RangeSet (optional operation).\n\tvoid add(com.google.common.collect.Range<LongPairRangeSet.LongPair> range);\n\t// Adds the specified range to this RangeSet (optional operation).\n\tvoid addOpenClosed(long lowerKey, long lowerValueOpen, long upperKey, long upperValue);\n}", "des": "A Concurrent set comprising zero or more ranges of type LongPairRangeSet.LongPair."}
{"index": 14332, "repo": "pulsar-common-3.0.0", "code": "public class ConcurrentSortedLongPairSet extends Object implements LongPairSet {\n\t// Adds composite value of item1 and item2 to set.\n\tboolean add(long item1, long item2);\n\t// Returns capacity of the set.\n\tlong capacity();\n\t// Removes all items from set.\n\tvoid clear();\n\t// Checks if given (item1,item2) composite value exists into set.\n\tboolean contains(long item1, long item2);\n}", "des": "Sorted concurrent LongPairSet which is not fully accurate in sorting."}
{"index": 14333, "repo": "pulsar-common-3.0.0", "code": "public enum DomainType extends Enum<DomainType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DomainType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DomainType[] values();\n}", "des": "Domain types differentiated by Mozilla Public Suffix List."}
{"index": 14334, "repo": "pulsar-common-3.0.0", "code": "public enum EventType extends Enum<EventType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic EventType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic EventType[] values();\n}", "des": "Pulsar system event type."}
{"index": 14335, "repo": "pulsar-common-3.0.0", "code": "public final class FieldParser extends Object {\n\t// Converts Boolean to String.\n\tstatic String booleanToString(Boolean value);\n\t// Convert the given object value to the given class.\n\tstatic <T> T convert(Object from, Class<T> to);\n\t// Converts Integer to String.\n\tstatic String integerToString(Integer value);\n\t// Sets the empty/null value if field is allowed to be set empty.\n\tstatic <T> void setEmptyValue(String strValue, Field field, T obj);\n}", "des": "Generic value converter."}
{"index": 14336, "repo": "pulsar-common-3.0.0", "code": "public class FileUtils extends Object {\n\tstatic void deleteFile(File file, boolean recurse);\n\t// Deletes the given file.\n\tstatic boolean deleteFile(File file, org.slf4j.Logger logger);\n\t// Deletes the given file.\n\tstatic boolean deleteFile(File file, org.slf4j.Logger logger, int attempts);\n\t// Deletes given files.\n\tstatic void deleteFiles(Collection<File> files, boolean recurse);\n}", "des": "A utility class containing a few useful static methods to do typical IO operations."}
{"index": 14337, "repo": "pulsar-common-3.0.0", "code": "public class FutureUtil extends Object {\n\t// Adds timeout handling to an existing CompletableFuture.\n\tstatic <T> CompletableFuture<T> addTimeoutHandling(CompletableFuture<T> future, Duration timeout, ScheduledExecutorService executor, Supplier<Throwable> exceptionSupplier);\n\tstatic <T> CompletableFuture<T> composeAsync(Supplier<CompletableFuture<T>> futureSupplier, Executor executor);\n}", "des": "This class is aimed at simplifying work with CompletableFuture."}
{"index": 14338, "repo": "pulsar-common-3.0.0", "code": "public class GracefulExecutorServicesShutdown extends Object {\n\t// Starts the handler for polling frequently for the completed termination of enlisted executors.\n\tCompletableFuture<Void> handle();\n\t// Initiates a new shutdown for one or many ExecutorServices.\n\tstatic GracefulExecutorServicesShutdown initiate();\n\t// Calls ExecutorService.shutdown() and enlists the executor as part of the shutdown handling.\n\tGracefulExecutorServicesShutdown shutdown(ExecutorService... executorServices);\n}", "des": "This a builder like class for providing a fluent API for graceful shutdown Executors are added with the GracefulExecutorServicesShutdown.shutdown(ExecutorService...) method."}
{"index": 14339, "repo": "pulsar-common-3.0.0", "code": "public class InetAddressUtils extends Object {\n\t// Checks whether the parameter is a valid IPv4 address.\n\tstatic boolean isIPv4Address(String input);\n\tstatic boolean isIPv4MappedIPv64Address(String input);\n\t// Checks whether the parameter is a valid IPv6 address (including compressed).\n\tstatic boolean isIPv6Address(String input);\n\t// Checks whether the parameter is a valid compressed IPv6 address.\n\tstatic boolean isIPv6HexCompressedAddress(String input);\n}", "des": "A collection of utilities relating to InetAddresses."}
{"index": 14340, "repo": "pulsar-common-3.0.0", "code": "public class JvmG1GCMetricsLogger extends Object implements JvmGCMetricsLogger {\n\t// JvmGCMetricsLogger should update the metrics with GC specific dimensions and value.\n\tvoid logMetrics(Metrics metrics);\n\t// It will be triggered by JvmMetrics periodically to refresh stats at interval (default = 1 min).\n\tvoid refresh();\n}", "des": "Logger for the JVM G1 GC metrics."}
{"index": 14341, "repo": "pulsar-common-3.0.0", "code": "public interface JvmGCMetricsLogger {\n\t// JvmGCMetricsLogger should update the metrics with GC specific dimensions and value.\n\tvoid logMetrics(Metrics metrics);\n\t// It will be triggered by JvmMetrics periodically to refresh stats at interval (default = 1 min).\n\tvoid refresh();\n}", "des": "JvmGCMetricsLogger can be implemented for each specific GC type which retrieves GC count and pause time and logs it into metrics."}
{"index": 14342, "repo": "pulsar-common-3.0.0", "code": "public class KerberosName extends Object {\n\t// Get the configured default realm.\n\tString getDefaultRealm();\n\tstatic String getDefaultRealm2();\n\t// Get the second component of the name.\n\tString getHostName();\n\t// Get the realm of the name.\n\tString getRealm();\n\t// Get the first component of the name.\n\tString getServiceName();\n\t// Get the translation of the principal name into an operating system user name.\n\tString getShortName();\n\tstatic void main(String[] args);\n}", "des": "This class implements parsing and handling of Kerberos principal names."}
{"index": 14343, "repo": "pulsar-common-3.0.0", "code": "public static enum KeyStoreSSLContext.Mode extends Enum<KeyStoreSSLContext.Mode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic KeyStoreSSLContext.Mode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic KeyStoreSSLContext.Mode[] values();\n}", "des": "Connection Mode for TLS."}
{"index": 14344, "repo": "pulsar-common-3.0.0", "code": "public final class KeyValueSchemaInfo extends Object {\n\t// Decode the kv encoding type from the schema info.\n\tstatic KeyValueEncodingType decodeKeyValueEncodingType(SchemaInfo schemaInfo);\n\t// Decode the key/value schema info to get key schema info and value schema info.\n\tstatic KeyValue<SchemaInfo,SchemaInfo> decodeKeyValueSchemaInfo(SchemaInfo schemaInfo);\n}", "des": "Util class for processing key/value schema info."}
{"index": 14345, "repo": "pulsar-common-3.0.0", "code": "public interface LongPairRangeSet<T extends Comparable<T>> {\n\t// Adds the specified range (range that contains all values strictly greater than lower and less than or equal to upper.) to this RangeSet (optional operation).\n\tvoid addOpenClosed(long lowerKey, long lowerValue, long upperKey, long upperValue);\n\t// Returns a view of the disconnected ranges that make up this range set.\n\tCollection<com.google.common.collect.Range<T>> asRanges();\n}", "des": "A set comprising zero or more ranges type of key-value pair."}
{"index": 14346, "repo": "pulsar-common-3.0.0", "code": "public static class LongPairRangeSet.DefaultRangeSet<T extends Comparable<T>> extends Object implements LongPairRangeSet<T> {\n\t// Adds the specified range (range that contains all values strictly greater than lower and less than or equal to upper.) to this RangeSet (optional operation).\n\tvoid addOpenClosed(long key1, long value1, long key2, long value2);\n\t// Returns a view of the disconnected ranges that make up this range set.\n\tSet<com.google.common.collect.Range<T>> asRanges();\n}", "des": "Generic implementation of a default range set."}
{"index": 14347, "repo": "pulsar-common-3.0.0", "code": "public interface LongPairSet {\n\t// Adds composite value of item1 and item2 to set.\n\tboolean add(long item1, long item2);\n\t// Returns capacity of the set.\n\tlong capacity();\n\t// Removes all items from set.\n\tvoid clear();\n\t// Checks if given (item1,item2) composite value exists into set.\n\tboolean contains(long item1, long item2);\n\t// Execute ConcurrentLongPairSet.LongPairConsumer processor for each entry in the set.\n\tvoid forEach(ConcurrentLongPairSet.LongPairConsumer processor);\n}", "des": "Hash set where values are composed of pairs of longs."}
{"index": 14348, "repo": "pulsar-common-3.0.0", "code": "public class LookupData extends Object {\n\tString getBrokerUrl();\n\t// Deprecated.\n\tString getBrokerUrlSsl();\n\tString getBrokerUrlTls();\n\tString getHttpUrl();\n\tString getHttpUrlTls();\n\t// Deprecated.\n\tString getNativeUrl();\n\tvoid setHttpUrlTls(String httpUrlTls);\n}", "des": "This class encapsulates lookup data."}
{"index": 14349, "repo": "pulsar-common-3.0.0", "code": "public interface MessageIdAdv extends MessageId {\n\t// The default implementation of Comparable.compareTo(Object).\n\tdefault int compareTo(MessageId o);\n\t// Get the BitSet that indicates which messages in the batch.\n\tdefault BitSet getAckSet();\n\t// Get the batch index.\n\tdefault int getBatchIndex();\n\t// Get the batch size.\n\tdefault int getBatchSize();\n\t// Get the entry ID.\n\tlong getEntryId();\n}", "des": "The MessageId interface provided for advanced users."}
{"index": 14350, "repo": "pulsar-common-3.0.0", "code": "public class NamespaceIsolationPolicies extends Object {\n\tvoid assignBroker(NamespaceName nsname, BrokerStatus brkStatus, SortedSet<BrokerStatus> primaryCandidates, SortedSet<BrokerStatus> secondaryCandidates, SortedSet<BrokerStatus> sharedCandidates);\n\t// Delete a policy.\n\tvoid deletePolicy(String policyName);\n\t// Get the full policy map.\n\tMap<String,NamespaceIsolationDataImpl> getPolicies();\n}", "des": "Namespace isolation policies."}
{"index": 14351, "repo": "pulsar-common-3.0.0", "code": "public interface NamespaceIsolationPolicy {\n\t// Get the list of primary brokers for the namespace according to the policy.\n\tList<URL> findPrimaryBrokers(List<URL> availableBrokers, NamespaceName namespace);\n\t// Get the list of secondary brokers for the namespace according to the policy.\n\tList<URL> findSecondaryBrokers(List<URL> availableBrokers, NamespaceName namespace);\n}", "des": "Namespace isolation policy."}
{"index": 14352, "repo": "pulsar-common-3.0.0", "code": "public class NamespaceIsolationPolicyImpl extends Object implements NamespaceIsolationPolicy {\n\tboolean equals(Object obj);\n\t// Get the list of primary brokers for the namespace according to the policy.\n\tList<URL> findPrimaryBrokers(List<URL> availableBrokers, NamespaceName namespace);\n\t// Get the list of secondary brokers for the namespace according to the policy.\n\tList<URL> findSecondaryBrokers(List<URL> availableBrokers, NamespaceName namespace);\n}", "des": "Implementation of the namespace isolation policy."}
{"index": 14353, "repo": "pulsar-common-3.0.0", "code": "public class NamespaceName extends Object implements ServiceUnitId {\n\tboolean equals(Object obj);\n\tstatic NamespaceName get(String namespace);\n\tstatic NamespaceName get(String tenant, String namespace);\n\tstatic NamespaceName get(String tenant, String cluster, String namespace);\n\t// Deprecated.\n\tString getCluster();\n\tstatic Optional<NamespaceName> getIfValid(String namespace);\n\tString getLocalName();\n\t// Return the namespace object that this ServiceUnitId belongs to.\n\tNamespaceName getNamespaceObject();\n}", "des": "Parser of a value from the namespace field provided in configuration."}
{"index": 14354, "repo": "pulsar-common-3.0.0", "code": "public enum NamespaceOperation extends Enum<NamespaceOperation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic NamespaceOperation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic NamespaceOperation[] values();\n}", "des": "Namespace authorization operations."}
{"index": 14355, "repo": "pulsar-common-3.0.0", "code": "public class NetSslContextBuilder extends SslContextAutoRefreshBuilder<SSLContext> {\n\t// Returns cached SSLContext.\n\tSSLContext getSslContext();\n\t// Returns whether the key files modified after a refresh time, and context need update.\n\tboolean needUpdate();\n\t// updates and returns cached SSLContext.\n\tSSLContext update();\n}", "des": "Similar to `DefaultSslContextBuilder`, which build `javax.net.ssl.SSLContext` for web service."}
{"index": 14356, "repo": "pulsar-common-3.0.0", "code": "public final class NettyChannelUtil extends Object {\n\t// Write and flush the message to the channel and the close the channel.\n\tstatic void writeAndFlushWithClosePromise(io.netty.channel.ChannelOutboundInvoker ctx, io.netty.buffer.ByteBuf msg);\n\t// Write and flush the message to the channel.\n\tstatic void writeAndFlushWithVoidPromise(io.netty.channel.ChannelOutboundInvoker ctx, io.netty.buffer.ByteBuf msg);\n}", "des": "Contains utility methods for working with Netty Channels."}
{"index": 14357, "repo": "pulsar-common-3.0.0", "code": "public class NettyClientSslContextRefresher extends SslContextAutoRefreshBuilder<io.netty.handler.ssl.SslContext> {\n\t// Returns cached SSLContext.\n\tio.netty.handler.ssl.SslContext getSslContext();\n\t// Returns whether the key files modified after a refresh time, and context need update.\n\tboolean needUpdate();\n\t// updates and returns cached SSLContext.\n\tio.netty.handler.ssl.SslContext update();\n}", "des": "SSL context builder for Netty Client side."}
{"index": 14358, "repo": "pulsar-common-3.0.0", "code": "public class NettyFutureUtil extends Object {\n\t// Converts a Netty Future to CompletableFuture.\n\tstatic <V> CompletableFuture<V> toCompletableFuture(io.netty.util.concurrent.Future<V> future);\n\t// Converts a Netty Future to CompletableFuture with Void type.\n\tstatic CompletableFuture<Void> toCompletableFutureVoid(io.netty.util.concurrent.Future<?> future);\n}", "des": "Contains utility methods for working with Netty Futures."}
{"index": 14359, "repo": "pulsar-common-3.0.0", "code": "public class NettyServerSslContextBuilder extends SslContextAutoRefreshBuilder<io.netty.handler.ssl.SslContext> {\n\t// Returns cached SSLContext.\n\tio.netty.handler.ssl.SslContext getSslContext();\n\t// Returns whether the key files modified after a refresh time, and context need update.\n\tboolean needUpdate();\n\t// updates and returns cached SSLContext.\n\tio.netty.handler.ssl.SslContext update();\n}", "des": "SSL context builder for Netty Server side."}
{"index": 14360, "repo": "pulsar-common-3.0.0", "code": "public class NettySSLContextAutoRefreshBuilder extends SslContextAutoRefreshBuilder<KeyStoreSSLContext> {\n\t// Returns cached SSLContext.\n\tKeyStoreSSLContext getSslContext();\n\t// Returns whether the key files modified after a refresh time, and context need update.\n\tboolean needUpdate();\n\t// updates and returns cached SSLContext.\n\tKeyStoreSSLContext update();\n}", "des": "SSL context builder for Netty."}
{"index": 14361, "repo": "pulsar-common-3.0.0", "code": "public enum PolicyName extends Enum<PolicyName> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PolicyName valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PolicyName[] values();\n}", "des": "PolicyName authorization operations."}
{"index": 14362, "repo": "pulsar-common-3.0.0", "code": "public enum PolicyOperation extends Enum<PolicyOperation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PolicyOperation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PolicyOperation[] values();\n}", "des": "PolicyOperation authorization operations."}
{"index": 14363, "repo": "pulsar-common-3.0.0", "code": "public final class PublicSuffixMatcher extends Object {\n\t// Returns registrable part of the domain for the given domain name or null if given domain represents a public suffix.\n\tString getDomainRoot(String domain);\n\t// Returns registrable part of the domain for the given domain name or null if given domain represents a public suffix.\n\tString getDomainRoot(String domain, DomainType expectedType);\n}", "des": "Utility class that can test if DNS names match the content of the Public Suffix List."}
{"index": 14364, "repo": "pulsar-common-3.0.0", "code": "public class RateLimiter extends Object implements AutoCloseable {\n\t// Acquires the given number of permits from this RateLimiter, blocking until the request be granted.\n\tvoid acquire();\n\t// Acquires the given number of permits from this RateLimiter, blocking until the request be granted.\n\tvoid acquire(long acquirePermit);\n\tvoid close();\n\tprotected ScheduledFuture<?> createTask();\n\t// Return available permits for this RateLimiter.\n\tlong getAvailablePermits();\n}", "des": "A Rate Limiter that distributes permits at a configurable rate."}
{"index": 14365, "repo": "pulsar-common-3.0.0", "code": "public interface RawMessage {\n\t// Get chunkId of chunked message.\n\tint getChunkId();\n\t// Get the content of the message.\n\tio.netty.buffer.ByteBuf getData();\n\t// Get the event time associated with this message.\n\tlong getEventTime();\n\t// Get the key of the message.\n\tOptional<String> getKey();\n\t// Get byteBuf of the key.\n\tOptional<io.netty.buffer.ByteBuf> getKeyBytes();\n\t// Get the unique message ID associated with this message.\n\tRawMessageId getMessageId();\n}", "des": "View of a message that exposes the internal direct-memory buffer for more efficient processing."}
{"index": 14366, "repo": "pulsar-common-3.0.0", "code": "public class Reflections extends Object {\n\t// Check if class exists.\n\tstatic boolean classExists(String fqcn);\n\t// Check if a class is in a jar.\n\tstatic boolean classExistsInJar(File jar, String fqcn);\n\t// check if class implements interface.\n\tstatic boolean classImplementsIface(String fqcn, Class xface);\n\t// check if a class implements an interface.\n\tstatic boolean classInJarImplementsIface(File jar, String fqcn, Class xface);\n\tstatic Object createInstance(String userClassName, File jar);\n}", "des": "Utils related to reflections."}
{"index": 14367, "repo": "pulsar-common-3.0.0", "code": "public class ResourceUnitRanking extends Object implements Comparable<ResourceUnitRanking> {\n\t// Pre-allocate a ServiceUnit to this ResourceUnit.\n\tvoid addPreAllocatedServiceUnit(String suName, ResourceQuota quota);\n\t// Estimate the maximum number namespace bundles a ResourceUnit is able to handle with all resource.\n\tstatic long calculateBrokerMaxCapacity(SystemResourceUsage systemResourceUsage, ResourceQuota defaultQuota);\n}", "des": "The class containing information about system resources, allocated quota, and loaded bundles."}
{"index": 14368, "repo": "pulsar-common-3.0.0", "code": "public class SchemaData extends Object {\n\t// Convert a schema info to a schema data.\n\tstatic SchemaData fromSchemaInfo(SchemaInfo schemaInfo);\n\t// Convert a schema data to a schema info.\n\tSchemaInfo toSchemaInfo();\n}", "des": "Schema data."}
{"index": 14369, "repo": "pulsar-common-3.0.0", "code": "public final class SchemaUtils extends Object {\n\t// Convert the key/value schema info data json bytes to key/value schema info data bytes.\n\tstatic byte[] convertKeyValueDataStringToSchemaInfoSchema(byte[] keyValueSchemaInfoDataJsonBytes);\n\t// Convert the key/value schema info data to string.\n\tstatic String convertKeyValueSchemaInfoDataToString(KeyValue<SchemaInfo,SchemaInfo> kvSchemaInfo);\n}", "des": "Utils for schemas."}
{"index": 14370, "repo": "pulsar-common-3.0.0", "code": "public interface ServiceUnitId {\n\t// Return the namespace object that this ServiceUnitId belongs to.\n\tNamespaceName getNamespaceObject();\n\t// Check whether a fully-qualified topic is included in this ServiceUnitId object.\n\tboolean includes(TopicName topicName);\n}", "des": "Basic interface for service unit's identification."}
{"index": 14371, "repo": "pulsar-common-3.0.0", "code": "public class ServiceURI extends Object {\n\t// Create a service uri instance from a uri string.\n\tstatic ServiceURI create(String uriStr);\n\t// Create a service uri instance from a URI instance.\n\tstatic ServiceURI create(URI uri);\n\tString[] getServiceHosts();\n\tString[] getServiceInfos();\n\tString getServiceScheme();\n\t// Create a new URI from the service URI which only specifies one of the hosts.\n\tString selectOne();\n}", "des": "ServiceURI represents service uri within pulsar cluster."}
{"index": 14372, "repo": "pulsar-common-3.0.0", "code": "public abstract class SslContextAutoRefreshBuilder<T> extends Object {\n\t// It updates SSLContext at every configured refresh time and returns updated SSLContext.\n\tT get();\n\t// Returns cached SSLContext.\n\tprotected abstract T getSslContext();\n\t// Returns whether the key files modified after a refresh time, and context need update.\n\tprotected abstract boolean needUpdate();\n\t// updates and returns cached SSLContext.\n\tprotected abstract T update();\n}", "des": "Auto refresher and builder of SSLContext."}
{"index": 14373, "repo": "pulsar-common-3.0.0", "code": "public class SSLContextValidatorEngine extends Object {\n\t// Check if the given ByteBuffer capacity.\n\tstatic ByteBuffer ensureCapacity(ByteBuffer existingBuffer, int newLength);\n\t// Validates TLS handshake up to TLSv1.2.\n\tstatic void validate(SSLContextValidatorEngine.SSLEngineProvider clientSslEngineSupplier, SSLContextValidatorEngine.SSLEngineProvider serverSslEngineSupplier);\n}", "des": "SSLContextValidatorEngine to validate 2 SSlContext."}
{"index": 14374, "repo": "pulsar-common-3.0.0", "code": "public static enum SystemResourceUsage.ResourceType extends Enum<SystemResourceUsage.ResourceType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SystemResourceUsage.ResourceType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SystemResourceUsage.ResourceType[] values();\n}", "des": "Definition of possible resource types."}
{"index": 14375, "repo": "pulsar-common-3.0.0", "code": "public enum TenantOperation extends Enum<TenantOperation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TenantOperation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TenantOperation[] values();\n}", "des": "Tenant authorization operations."}
{"index": 14376, "repo": "pulsar-common-3.0.0", "code": "public interface TopicCompactionStrategy<T> {\n\t// Returns the schema object for this strategy.\n\tSchema<T> getSchema();\n\tstatic TopicCompactionStrategy load(String topicCompactionStrategyClassName);\n\t// Tests if the compaction needs to keep the left(previous message) compared to the right(current message) for the same key.\n\tboolean shouldKeepLeft(T prev, T cur);\n}", "des": "Defines a custom strategy to compact messages in a topic."}
{"index": 14377, "repo": "pulsar-common-3.0.0", "code": "public enum TopicOperation extends Enum<TopicOperation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TopicOperation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TopicOperation[] values();\n}", "des": "Topic authorization operations."}
{"index": 14378, "repo": "pulsar-common-3.0.0", "code": "public class TripleLongPriorityQueue extends Object implements AutoCloseable {\n\t// Add a tuple of 3 long items to the priority queue.\n\tvoid add(long n1, long n2, long n3);\n\t// The amount of memory used to back the priority queue.\n\tlong bytesCapacity();\n\t// Clear all items.\n\tvoid clear();\n\t// Close the priority queue and free the memory associated.\n\tvoid close();\n\t// Returns whether the priority queue is empty.\n\tboolean isEmpty();\n}", "des": "Provides a priority-queue implementation specialized on items composed by 3 longs."}
{"index": 14379, "repo": "pulsar-common-3.0.0", "code": "@ThreadSafe public class URIPreconditions extends Object {\n\t// Check whether the given string is a legal URI and passes the user's check.\n\tstatic void checkURI(String uri, Predicate<URI> predicate);\n\t// Check whether the given string is a legal URI and passes the user's check.\n\tstatic void checkURI(String uri, Predicate<URI> predicate, String errorMessage);\n\t// Check whether the given string is a legal URI and passes the user's check.\n\tstatic void checkURIIfPresent(String uri, Predicate<URI> predicate);\n}", "des": "Static convenience URI checker."}
{"index": 14380, "repo": "camel-api-4.0.0-RC1", "code": "public interface AggregationRepository {\n\t// Add the given Exchange under the correlation key.\n\tExchange add(CamelContext camelContext, String key, Exchange exchange);\n\t// Confirms the completion of the Exchange.\n\tvoid confirm(CamelContext camelContext, String exchangeId);\n\t// Gets the given exchange with the correlation key\n\tExchange get(CamelContext camelContext, String key);\n\t// Gets the keys currently in the repository.\n\tSet<String> getKeys();\n}", "des": "Access to a repository to store aggregated exchanges to support pluggable implementations."}
{"index": 14381, "repo": "camel-api-4.0.0-RC1", "code": "public interface AggregationStrategy {\n\t// Aggregates an old and new exchange together to create a single combined exchange\n\tExchange aggregate(Exchange oldExchange, Exchange newExchange);\n\t// Aggregates an old and new exchange together to create a single combined exchange.\n\tdefault Exchange aggregate(Exchange oldExchange, Exchange newExchange, Exchange inputExchange);\n\t// Indicates if this aggregation strategy uses pre-completion mode.\n\tdefault boolean canPreComplete();\n}", "des": "A strategy for aggregating two exchanges together into a single exchange."}
{"index": 14382, "repo": "camel-api-4.0.0-RC1", "code": "public interface AnnotationBasedProcessorFactory {\n\t// Creates dynamic router processor from the configured annotation.\n\tAsyncProcessor createDynamicRouter(CamelContext camelContext, DynamicRouter annotation);\n\t// Creates recipient list processor from the configured annotation.\n\tAsyncProcessor createRecipientList(CamelContext camelContext, RecipientList annotation);\n}", "des": "Factory to create Processor for annotation based EIPs."}
{"index": 14383, "repo": "camel-api-4.0.0-RC1", "code": "public interface AsyncCallback extends Runnable {\n\t// This method is invoked once the Exchange is done.\n\tvoid done(boolean doneSync);\n\t// Optimized for the reactive executor engine to be able to schedule this callback in its engine.\n\tdefault void run();\n}", "des": "The callback interface for an AsyncProcessor so that it can notify you when an Exchange is done."}
{"index": 14384, "repo": "camel-api-4.0.0-RC1", "code": "public interface AsyncProcessorAwaitManager extends StaticService {\n\t// A read-only browser of the AsyncProcessorAwaitManager.AwaitThreads that are currently inflight.\n\tCollection<AsyncProcessorAwaitManager.AwaitThread> browse();\n\t// Gets the utilization statistics of this manager\n\tAsyncProcessorAwaitManager.Statistics getStatistics();\n\t// To interrupt an exchange which may seem as stuck, to force the exchange to continue, allowing any blocking thread to be released.\n\tvoid interrupt(String exchangeId);\n}", "des": "A manager to handle async routing engine, when Exchanges are being handed over from one thread to another, while the callee thread is blocked waiting for the other threads to complete, before it can continue."}
{"index": 14385, "repo": "camel-api-4.0.0-RC1", "code": "public static interface AsyncProcessorAwaitManager.AwaitThread {\n\t// The thread which is blocked waiting for other threads to signal the callback.\n\tThread getBlockedThread();\n\t// The exchange being processed by the other thread.\n\tExchange getExchange();\n\t// The id of the node from the route where the exchange was processed when the thread was set to block.\n\tString getNodeId();\n\t// The id of the route where the exchange was processed when the thread was set to block.\n\tString getRouteId();\n}", "des": "Information about the thread and exchange that are inflight."}
{"index": 14386, "repo": "camel-api-4.0.0-RC1", "code": "public static interface AsyncProcessorAwaitManager.Statistics {\n\t// The highest duration time in millis.\n\tlong getMaxDuration();\n\t// The average duration time in millis.\n\tlong getMeanDuration();\n\t// The lowest duration time in millis.\n\tlong getMinDuration();\n\t// Total number of threads that has been blocked\n\tlong getThreadsBlocked();\n\t// Total number of threads that has been forced interrupted\n\tlong getThreadsInterrupted();\n\t// The total duration time in millis.\n\tlong getTotalDuration();\n}", "des": "Utilization statistics of this manager."}
{"index": 14387, "repo": "camel-api-4.0.0-RC1", "code": "public class AwsVaultConfiguration extends VaultConfiguration {\n\tString getAccessKey();\n\tString getProfileName();\n\tlong getRefreshPeriod();\n\tString getRegion();\n\tString getSecretKey();\n\tString getSecrets();\n\tboolean isDefaultCredentialsProvider();\n\tboolean isProfileCredentialsProvider();\n\tboolean isRefreshEnabled();\n\t// The AWS access key\n\tvoid setAccessKey(String accessKey);\n}", "des": "Configuration for access to AWS Secret."}
{"index": 14388, "repo": "camel-api-4.0.0-RC1", "code": "public class AzureVaultConfiguration extends VaultConfiguration {\n\tString getBlobAccessKey();\n\tString getBlobAccountName();\n\tString getBlobContainerName();\n\tString getClientId();\n\tString getClientSecret();\n\tString getEventhubConnectionString();\n\tlong getRefreshPeriod();\n\tString getSecrets();\n\tString getTenantId();\n\tString getVaultName();\n\tboolean isRefreshEnabled();\n\t// The Eventhubs Blob Access Key for CheckpointStore purpose\n\tvoid setBlobAccessKey(String blobAccessKey);\n}", "des": "Configuration for access to Azure Key Vault."}
{"index": 14389, "repo": "camel-api-4.0.0-RC1", "code": "public interface BacklogTracer {\n\t// Clears the backlog of traced messages.\n\tvoid clear();\n\t// Dumps all tracing data\n\tList<BacklogTracerEventMessage> dumpAllTracedMessages();\n\t// Dumps all tracing data as JSon\n\tString dumpAllTracedMessagesAsJSon();\n\t// Dumps all tracing data as XML\n\tString dumpAllTracedMessagesAsXml();\n\t// Dumps tracing data for the given route id / node id\n\tList<BacklogTracerEventMessage> dumpTracedMessages(String nodeId);\n}", "des": "Backlog tracer that captures the last N messages during routing in a backlog."}
{"index": 14390, "repo": "camel-api-4.0.0-RC1", "code": "public interface BacklogTracerEventMessage {\n\t// The event message as an org.apache.camel.util.json.JsonObject object.\n\tMap<String,Object> asJSon();\n\t// Time elapsed for processing the given node (in millis).\n\tlong getElapsed();\n\t// The exception as JSon (exception type, message and stacktrace)\n\tString getExceptionAsJSon();\n\t// The exception as XML (exception type, message and stacktrace)\n\tString getExceptionAsXml();\n\t// The exchange id\n\tString getExchangeId();\n}", "des": "Represents a traced message by the BacklogTracer."}
{"index": 14391, "repo": "camel-api-4.0.0-RC1", "code": "public abstract class BaseService extends Object {\n\tvoid build();\n\t// Optional build phase of the service.\n\tprotected void doBuild();\n\t// Implementations override this method to perform any action upon failure.\n\tprotected void doFail(Exception e);\n\t// Initialize the service.\n\tprotected void doInit();\n\t// Implementations may return an object that will be closed when the lifecycle action is completed.\n\tprotected AutoCloseable doLifecycleChange();\n}", "des": "A useful base class which ensures that a service is only initialized once and provides some helper methods for enquiring of its status."}
{"index": 14392, "repo": "camel-api-4.0.0-RC1", "code": "public abstract class BaseSSLContextParameters extends JsseParameters {\n\t// Configures a SSLSessionContext, client or server, with the supplied session timeout.\n\tprotected void configureSessionContext(SSLSessionContext sessionContext, String sessionTimeout);\n\t// Configures the actual SSLContext itself with direct setter calls.\n\tprotected void configureSSLContext(SSLContext context);\n}", "des": "Represents configuration options that can be applied in the client-side or server-side context depending on what they are applied to."}
{"index": 14393, "repo": "camel-api-4.0.0-RC1", "code": "protected static final class BaseSSLContextParameters.SSLContextSpiDecorator extends SSLContextSpi {\n\t// Configures an SSLEngine based on the configurers in instance.\n\tprotected SSLEngine configureSSLEngine(SSLEngine engine);\n\t// Configures an SSLServerSocketFactory based on the configurers in this instance.\n\tprotected SSLServerSocketFactory configureSSLServerSocketFactory(SSLServerSocketFactory factory);\n}", "des": "Class needed to provide decoration of an existing SSLContext."}
{"index": 14394, "repo": "camel-api-4.0.0-RC1", "code": "public interface BatchConsumer extends Consumer {\n\t// Whether processing the batch is still allowed.\n\tboolean isBatchAllowed();\n\t// Processes the list of Exchange objects in a batch.\n\tint processBatch(Queue<Object> exchanges);\n\t// Sets a maximum number of messages as a limit to poll at each polling.\n\tvoid setMaxMessagesPerPoll(int maxMessagesPerPoll);\n}", "des": "A consumer of a batch of message exchanges from an Endpoint"}
{"index": 14395, "repo": "camel-api-4.0.0-RC1", "code": "public interface BeanIntrospection extends StaticService, AfterPropertiesConfigured {\n\t// Introspects the given class.\n\tBeanIntrospection.ClassInfo cacheClass(Class<?> clazz);\n\t// Clears the introspection cache.\n\tvoid clearCache();\n\t// Find all the setter methods on the class\n\tSet<Method> findSetterMethods(Class<?> clazz, String name, boolean allowBuilderPattern, boolean allowPrivateSetter, boolean ignoreCase);\n\t// Number of classes in the introspection cache.\n\tlong getCachedClassesCounter();\n}", "des": "Used for introspecting beans properties via Java reflection; such as extracting current property values, or updating one or more properties etc."}
{"index": 14396, "repo": "camel-api-4.0.0-RC1", "code": "public interface BeanProcessorFactory {\n\t// Creates the bean processor from the existing bean instance\n\tProcessor createBeanProcessor(CamelContext camelContext, Object bean, Method method);\n\t// Creates the bean processor from a given set of parameters that can refer to the bean via an existing bean, a reference to a bean, or its class name etc.\n\tProcessor createBeanProcessor(CamelContext camelContext, Object bean, String beanType, Class<?> beanClass, String ref, String method, BeanScope scope);\n}", "des": "Factory for creating a Processor that can invoke a method on a bean and supporting using Camel bean parameter bindings."}
{"index": 14397, "repo": "camel-api-4.0.0-RC1", "code": "public interface BeanRepository {\n\t// Finds beans in the registry by their type.\n\t<T> Set<T> findByType(Class<T> type);\n\t// Finds beans in the registry by their type.\n\t<T> Map<String,T> findByTypeWithName(Class<T> type);\n\t// Finds the bean by type, if there is exactly only one instance of the bean\n\tdefault <T> T findSingleByType(Class<T> type);\n\t// Looks up a bean in the registry based purely on name, returning the bean or null if it could not be found.\n\tObject lookupByName(String name);\n}", "des": "Represents a bean repository used to lookup components by name and type."}
{"index": 14398, "repo": "camel-api-4.0.0-RC1", "code": "public interface BinaryPredicate extends Predicate {\n\t// Gets the left hand side expression\n\tExpression getLeft();\n\t// Gets the operator\n\tString getOperator();\n\t// Gets the right hand side expression\n\tExpression getRight();\n\t// Evaluates the predicate on the message exchange and returns null if this exchange matches the predicate.\n\tString matchesReturningFailureMessage(Exchange exchange);\n}", "des": "A predicate which evaluates a binary expression."}
{"index": 14399, "repo": "camel-api-4.0.0-RC1", "code": "public interface Breakpoint {\n\t// Activates this breakpoint\n\tvoid activate();\n\t// Callback invoked when the breakpoint was hit and the Exchange has been processed (after).\n\tvoid afterProcess(Exchange exchange, Processor processor, NamedNode definition, long timeTaken);\n\t// Callback invoked when the breakpoint was hit and the Exchange is about to be processed (before).\n\tvoid beforeProcess(Exchange exchange, Processor processor, NamedNode definition);\n}", "des": "Breakpoint are used by the Debugger API."}
{"index": 14400, "repo": "camel-api-4.0.0-RC1", "code": "public static enum Breakpoint.State extends Enum<Breakpoint.State> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Breakpoint.State valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Breakpoint.State[] values();\n}", "des": "State of the breakpoint as either active or suspended."}
{"index": 14401, "repo": "camel-api-4.0.0-RC1", "code": "public interface BulkTypeConverters extends Ordered, TypeConverter {\n\t// Whether the type converter allows returning null as a valid response.\n\tdefault boolean allowNull();\n\t// Converts the value to the specified type in the context of an exchange\n\t<T> T convertTo(Class<?> from, Class<T> to, Exchange exchange, Object value);\n\t// Converts the value to the specified type\n\tdefault <T> T convertTo(Class<T> type, Object value);\n}", "des": "Bulk type converters that often comes out of the box with Apache Camel."}
{"index": 14402, "repo": "camel-api-4.0.0-RC1", "code": "public interface Cacheable {\n\t// Adds an offset key and value to the cache\n\tboolean add(OffsetKey<?> key, Offset<?> offset);\n\t// Gets the cache in resume adapters and objects that cache their data\n\tResumeCache<?> getCache();\n\t// Gets the for this cache instance\n\tdefault Cacheable.FillPolicy getFillPolicy();\n\t// Sets the cache in resume adapters and objects that cache their data\n\tvoid setCache(ResumeCache<?> cache);\n}", "des": "Used to identify objects that can cache their resume state or data"}
{"index": 14403, "repo": "camel-api-4.0.0-RC1", "code": "public static enum Cacheable.FillPolicy extends Enum<Cacheable.FillPolicy> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Cacheable.FillPolicy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Cacheable.FillPolicy[] values();\n}", "des": "The cache fill policy can be used to determine how this cache should be filled with data."}
{"index": 14404, "repo": "camel-api-4.0.0-RC1", "code": "public interface CamelBeanPostProcessor {\n\t// Adds a custom bean post injector\n\tdefault void addCamelBeanPostProjectInjector(CamelBeanPostProcessorInjector injector);\n\tdefault boolean isEnabled();\n\t// Can be used to unbind any existing beans before binding a bean to the registry.\n\tdefault boolean isUnbindEnabled();\n}", "des": "Bean post processor."}
{"index": 14405, "repo": "camel-api-4.0.0-RC1", "code": "public interface CamelBeanPostProcessorInjector {\n\t// Field injection\n\tvoid onFieldInject(Field field, Object bean, String beanName);\n\t// Method injection\n\tvoid onMethodInject(Method method, Object bean, String beanName);\n}", "des": "Used for custom injection when doing CamelBeanPostProcessor bean post-processing."}
{"index": 14406, "repo": "camel-api-4.0.0-RC1", "code": "public interface CamelClusterView extends Service, CamelContextAware {\n\t// Add an event listener.\n\tvoid addEventListener(CamelClusterEventListener listener);\n\tCamelClusterService getClusterService();\n\t// Provides the leader member if elected.\n\tOptional<CamelClusterMember> getLeader();\n\t// Provides the local member.\n\tCamelClusterMember getLocalMember();\n\t// Provides the list of members of the cluster.\n\tList<CamelClusterMember> getMembers();\n\tString getNamespace();\n}", "des": "Represents the View of the cluster at some given period of time."}
{"index": 14407, "repo": "camel-api-4.0.0-RC1", "code": "public interface CamelContext extends CamelContextLifecycle, RuntimeConfiguration {\n\t// Adds a component to the context.\n\tvoid addComponent(String componentName, Component component);\n\t// Adds and starts the endpoint to the EndpointRegistry using the given URI.\n\tEndpoint addEndpoint(String uri, Endpoint endpoint);\n\t// Adds the given lifecycle strategy to be used.\n\tvoid addLifecycleStrategy(LifecycleStrategy lifecycleStrategy);\n}", "des": "Interface used to represent the CamelContext used to configure routes and the policies to use during message exchanges between endpoints."}
{"index": 14408, "repo": "camel-api-4.0.0-RC1", "code": "public interface CamelContextAware {\n\t// Get the CamelContext\n\tCamelContext getCamelContext();\n\t// Injects the CamelContext\n\tvoid setCamelContext(CamelContext camelContext);\n\t// Set the CamelContext context if the object is an instance of CamelContextAware.\n\tstatic <T> T trySetCamelContext(T object, CamelContext camelContext);\n}", "des": "An interface to represent an object which wishes to be injected with the CamelContext"}
{"index": 14409, "repo": "camel-api-4.0.0-RC1", "code": "@FunctionalInterface public interface CamelContextCustomizer extends Ordered, Comparable<CamelContextCustomizer> {\n\tdefault int compareTo(CamelContextCustomizer other);\n\t// Configure the CamelContext.\n\tvoid configure(CamelContext camelContext);\n\t// Gets the order.\n\tdefault int getOrder();\n}", "des": "To apply custom configurations to CamelContext instances."}
{"index": 14410, "repo": "camel-api-4.0.0-RC1", "code": "public interface CamelContextLifecycle extends AutoCloseable {\n\t// Builds the CamelContext.\n\tvoid build();\n\t// Closes (Shutdown) the CamelContext, which means it cannot be started again.\n\tvoid close();\n\t// Get the status of this CamelContext\n\tServiceStatus getStatus();\n\t// Initializes the CamelContext.\n\tvoid init();\n\t// Helper methods so the CamelContext knows if it should keep running.\n\tboolean isRunAllowed();\n\t// Whether the CamelContext is started\n\tboolean isStarted();\n}", "des": "Lifecycle API for CamelContext."}
{"index": 14411, "repo": "camel-api-4.0.0-RC1", "code": "public interface CamelContextNameStrategy {\n\t// Gets the name\n\tString getName();\n\t// Gets the next calculated name, if this strategy is not using fixed names.\n\tString getNextName();\n\t// Whether the name will be fixed, or allow re-calculation such as by using an unique counter.\n\tboolean isFixedName();\n}", "des": "Strategy for assigning name to a CamelContext."}
{"index": 14412, "repo": "camel-api-4.0.0-RC1", "code": "public class CamelContextTracker extends Object implements Closeable {\n\t// Called to determine whether this tracker should accept the given context.\n\tboolean accept(CamelContext camelContext);\n\t// Closes the tracker so it not longer tracks.\n\tfinal void close();\n\t// Called when a context is created.\n\tvoid contextCreated(CamelContext camelContext);\n\t// Called when a context has been shutdown.\n\tvoid contextDestroyed(CamelContext camelContext);\n\tstatic void notifyContextCreated(CamelContext camelContext);\n}", "des": "A CamelContext creation and destruction tracker."}
{"index": 14413, "repo": "camel-api-4.0.0-RC1", "code": "public class CamelExchangeException extends CamelException {\n\t// Creates an exception message with the provided details.\n\tstatic String createExceptionMessage(String message, Exchange exchange, Throwable cause);\n\t// Returns the exchange which caused the exception\n\tExchange getExchange();\n}", "des": "An exception caused by a specific message Exchange"}
{"index": 14414, "repo": "camel-api-4.0.0-RC1", "code": "public interface CamelInternalProcessorAdvice<T> {\n\t// Callback executed after processing a step in the route.\n\tvoid after(Exchange exchange, T data);\n\t// Callback executed before processing a step in the route.\n\tT before(Exchange exchange);\n\t// Whether this advice has state or not.\n\tdefault boolean hasState();\n}", "des": "An advice (before and after) to execute cross cutting functionality in the Camel routing engine."}
{"index": 14415, "repo": "camel-api-4.0.0-RC1", "code": "public class CamelLogger extends Object {\n\t// Logs the message without checking the shouldLog() method first.\n\tvoid doLog(String message);\n\tLoggingLevel getLevel();\n\torg.slf4j.Logger getLog();\n\torg.slf4j.Marker getMarker();\n\t// Logs the message with checking the shouldLog() method first.\n\tvoid log(String message);\n\tvoid log(String message, Throwable exception);\n\tvoid log(String message, Throwable exception, LoggingLevel loggingLevel);\n\tvoid log(String message, LoggingLevel loggingLevel);\n}", "des": "A logger which logs to a slf4j Logger."}
{"index": 14416, "repo": "camel-api-4.0.0-RC1", "code": "public interface CamelPreemptiveClusterView extends CamelClusterView {\n\t// Check if the view is disabled.\n\tboolean isDisabled();\n\t// Enable or disables a view.\n\tvoid setDisabled(boolean disabled);\n}", "des": "A CamelPreemptiveClusterView is a CamelClusterView that can be externally disabled by another controller."}
{"index": 14417, "repo": "camel-api-4.0.0-RC1", "code": "public interface CatalogCamelContext extends CamelContext {\n\t// Returns the JSON schema representation of the component and endpoint parameters for the given component name.\n\tString getComponentParameterJsonSchema(String componentName);\n\t// Returns the JSON schema representation of the DataFormat parameters for the given data format name.\n\tString getDataFormatParameterJsonSchema(String dataFormatName);\n}", "des": "Catalog level interface for the CamelContext"}
{"index": 14418, "repo": "camel-api-4.0.0-RC1", "code": "public enum Category extends Enum<Category> {\n\t// Returns the string representation of this value\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Category valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Category[] values();\n}", "des": "This enum set various categories options into the UriEndpoint."}
{"index": 14419, "repo": "camel-api-4.0.0-RC1", "code": "public interface Channel extends AsyncProcessor, Navigate<Processor> {\n\t// Gets the ErrorHandler this Channel uses.\n\tProcessor getErrorHandler();\n\t// Gets the next Processor to route to (not wrapped)\n\tProcessor getNextProcessor();\n\t// Gets the wrapped output that at runtime should be delegated to.\n\tProcessor getOutput();\n\t// Gets the Route\n\tRoute getRoute();\n}", "des": "Channel acts as a channel between Processors in the route graph."}
{"index": 14420, "repo": "camel-api-4.0.0-RC1", "code": "public class CipherSuitesParameters extends Object {\n\t// Returns a live reference to the list of cipher suite names.\n\tList<String> getCipherSuite();\n\t// Sets the cipher suite.\n\tvoid setCipherSuite(List<String> cipherSuite);\n}", "des": "Represents a list of TLS/SSL cipher suite names."}
{"index": 14421, "repo": "camel-api-4.0.0-RC1", "code": "public interface ClaimCheckRepository extends Service {\n\t// Adds the exchange to the repository.\n\tboolean add(String key, Exchange exchange);\n\t// Clear the repository.\n\tvoid clear();\n\t// Returns true if this repository contains the specified key.\n\tboolean contains(String key);\n\t// Gets the exchange from the repository.\n\tExchange get(String key);\n\t// Gets and removes the exchange from the repository.\n\tExchange getAndRemove(String key);\n\t// Pops the repository and returns the latest.\n\tExchange pop();\n}", "des": "Access to a repository of keys to implement the Claim Check pattern."}
{"index": 14422, "repo": "camel-api-4.0.0-RC1", "code": "public interface ClassResolver {\n\t// Adds a custom class loader to use.\n\tvoid addClassLoader(ClassLoader classLoader);\n\t// Loads the given resources as a URL from all bundles/classloaders\n\tEnumeration<URL> loadAllResourcesAsURL(String uri);\n\t// Loads the given resource as a stream\n\tInputStream loadResourceAsStream(String uri);\n\t// Loads the given resource as a URL\n\tURL loadResourceAsURL(String uri);\n}", "des": "A class resolver for loading classes in a loosly coupled manner to cater for different platforms such as standalone, web container, j2ee container and OSGi platforms."}
{"index": 14423, "repo": "camel-api-4.0.0-RC1", "code": "public interface CliConnectorFactory {\n\t// Creates the connector which will be added as a Service to CamelContext as the lifecycle to start and stop the connector.\n\tCliConnector createConnector();\n\t// What runtime platform is in use, such as camel-jbang, camel-spring-boot, or camel-quarkus etc.\n\tString getRuntime();\n\t// The main class used by the runtime to start.\n\tString getRuntimeStartClass();\n\t// What runtime platform version is in use.\n\tString getRuntimeVersion();\n}", "des": "Factory for creating connector to CLI tooling."}
{"index": 14424, "repo": "camel-api-4.0.0-RC1", "code": "public enum ClientAuthentication extends Enum<ClientAuthentication> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClientAuthentication valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClientAuthentication[] values();\n}", "des": "Represents the options for the client authentication settings of a server socket."}
{"index": 14425, "repo": "camel-api-4.0.0-RC1", "code": "public interface Component extends CamelContextAware, Service {\n\t// Attempt to resolve an endpoint for the given URI if the component is capable of handling the URI.\n\tEndpoint createEndpoint(String uri);\n\t// Attempt to resolve an endpoint for the given URI if the component is capable of handling the URI.\n\tEndpoint createEndpoint(String uri, Map<String,Object> parameters);\n\t// Gets the component PropertyConfigurer.\n\tdefault PropertyConfigurer getComponentPropertyConfigurer();\n}", "des": "A component is a factory of Endpoint objects."}
{"index": 14426, "repo": "camel-api-4.0.0-RC1", "code": "public interface ComponentAware {\n\t// Get the Component\n\tComponent getComponent();\n\t// Get the Component as the specified type.\n\tdefault <T extends Component>T getComponent(Class<T> type);\n\t// Injects the Component\n\tvoid setComponent(Component component);\n}", "des": "An interface to represent an object which wishes to be injected with a Component."}
{"index": 14427, "repo": "camel-api-4.0.0-RC1", "code": "@FunctionalInterface public interface ComponentCustomizer extends Ordered {\n\t// Create a generic ComponentCustomizer.Builder.\n\tstatic ComponentCustomizer.Builder<Component> builder();\n\t// Create a typed ComponentCustomizer.Builder that can process a concrete component type instance.\n\tstatic <T extends Component>ComponentCustomizer.Builder<T> builder(Class<T> type);\n\t// Customize the specified Component.\n\tvoid configure(String name, Component target);\n}", "des": "To apply custom configurations to Component instances."}
{"index": 14428, "repo": "camel-api-4.0.0-RC1", "code": "@FunctionalInterface public static interface ComponentCustomizer.Policy extends BiPredicate<String,Component> {\n\t// A simple allow-all policy.\n\tstatic ComponentCustomizer.Policy any();\n\t// A simple deny-all policy.\n\tstatic ComponentCustomizer.Policy none();\n}", "des": "Used as additional filer mechanism to control if customizers need to be applied or not."}
{"index": 14429, "repo": "camel-api-4.0.0-RC1", "code": "public static interface ComponentVerifierExtension.Result extends Serializable {\n\t// Collection of errors happened for the verification.\n\tList<ComponentVerifierExtension.VerificationError> getErrors();\n\t// Scope of the verification.\n\tComponentVerifierExtension.Scope getScope();\n\t// Result of the validation as status.\n\tComponentVerifierExtension.Result.Status getStatus();\n}", "des": "The result of a verification"}
{"index": 14430, "repo": "camel-api-4.0.0-RC1", "code": "public static enum ComponentVerifierExtension.Result.Status extends Enum<ComponentVerifierExtension.Result.Status> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ComponentVerifierExtension.Result.Status valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ComponentVerifierExtension.Result.Status[] values();\n}", "des": "Status of the verification"}
{"index": 14431, "repo": "camel-api-4.0.0-RC1", "code": "public static enum ComponentVerifierExtension.Scope extends Enum<ComponentVerifierExtension.Scope> {\n\t// Get an instance of this scope from a string representation\n\tstatic ComponentVerifierExtension.Scope fromString(String scope);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ComponentVerifierExtension.Scope valueOf(String name);\n}", "des": "The scope defines how the parameters should be verified."}
{"index": 14432, "repo": "camel-api-4.0.0-RC1", "code": "public static interface ComponentVerifierExtension.VerificationError extends Serializable {\n\t// Convert a string to an ComponentVerifierExtension.VerificationError.Attribute\n\tstatic ComponentVerifierExtension.VerificationError.Attribute asAttribute(String attribute);\n\t// Convert a string to an ComponentVerifierExtension.VerificationError.Code\n\tstatic ComponentVerifierExtension.VerificationError.Code asCode(String code);\n}", "des": "This interface represents a detailed error in case when the verification fails."}
{"index": 14433, "repo": "camel-api-4.0.0-RC1", "code": "public static interface ComponentVerifierExtension.VerificationError.Attribute extends Serializable {\n\t// Bean style accessor to name; This is required for framework like Jackson using bean convention for object serialization.\n\tdefault String getName();\n\t// Name of the attribute.\n\tString name();\n}", "des": "Interface defining an attribute which is a key for the detailed error messages."}
{"index": 14434, "repo": "camel-api-4.0.0-RC1", "code": "public static interface ComponentVerifierExtension.VerificationError.Code extends Serializable {\n\t// Bean style accessor to name.\n\tdefault String getName();\n\t// Name of the code.\n\tString name();\n}", "des": "Interface defining an error code."}
{"index": 14435, "repo": "camel-api-4.0.0-RC1", "code": "public interface Condition {\n\t// Does the condition match\n\tboolean matchEvent(Exchange exchange, CamelEvent.ExchangeEvent event);\n\t// Does the condition match\n\tboolean matchProcess(Exchange exchange, Processor processor, NamedNode definition);\n}", "des": "A condition to define when a given Exchange matches when is being routed."}
{"index": 14436, "repo": "camel-api-4.0.0-RC1", "code": "public interface Consumer extends Service, EndpointAware {\n\t// Creates an Exchange that was consumed.\n\tExchange createExchange(boolean autoRelease);\n\t// The default callback to use with the consumer when calling the processor using asynchronous routing.\n\tdefault AsyncCallback defaultConsumerCallback(Exchange exchange, boolean autoRelease);\n\t// The processor that will process the Exchange that was consumed.\n\tProcessor getProcessor();\n}", "des": "A consumer of message exchanges from an Endpoint."}
{"index": 14437, "repo": "camel-api-4.0.0-RC1", "code": "public interface ConsumerCache extends Service {\n\t// Acquires a pooled polling consumer which you must release back again after usage using the releasePollingConsumer(Endpoint, PollingConsumer) method.\n\tPollingConsumer acquirePollingConsumer(Endpoint endpoint);\n\t// Cleanup the cache (purging stale entries)\n\tvoid cleanUp();\n\t// Gets the maximum cache size (capacity).\n\tint getCapacity();\n\t// Gets the endpoint statistics\n\tEndpointUtilizationStatistics getEndpointUtilizationStatistics();\n}", "des": "Cache containing created PollingConsumer."}
{"index": 14438, "repo": "camel-api-4.0.0-RC1", "code": "public interface ConsumerListener<C,P> {\n\t// This is an event that runs after data consumption.\n\tboolean afterConsume(C consumePayload);\n\t// This is an event that runs after data processing.\n\tboolean afterProcess(P processingPayload);\n\t// This sets the predicate responsible for evaluating whether the processing can resume or not.\n\tvoid setResumableCheck(Predicate<?> afterConsumeEval);\n}", "des": "An interface for listening to consumer events and allow proxying between a consumer predicate and the Camel component."}
{"index": 14439, "repo": "camel-api-4.0.0-RC1", "code": "public interface ConsumerListenerAware<T extends ConsumerListener<?,?>> {\n\t// Gets the ConsumerListener instance\n\tT getConsumerListener();\n\t// Injects the ConsumerListener instance into the object\n\tvoid setConsumerListener(T consumerListener);\n}", "des": "An interface to represent an object which wishes to support listening for consumer events using the ConsumerListener."}
{"index": 14440, "repo": "camel-api-4.0.0-RC1", "code": "public interface ConsumerTemplate extends Service {\n\t// Cleanup the cache (purging stale entries)\n\tvoid cleanUp();\n\t// If you have used any of the receive methods which returns a Exchange type then you need to invoke this method when you are done using the returned Exchange.\n\tvoid doneUoW(Exchange exchange);\n\t// Get the CamelContext\n\tCamelContext getCamelContext();\n\t// Gets an approximated size of the current cached resources in the backing cache pools.\n\tint getCurrentCacheSize();\n}", "des": "Template for working with Camel and consuming Message instances in an Exchange from an Endpoint."}
{"index": 14441, "repo": "camel-api-4.0.0-RC1", "code": "public interface ContentTypeAware {\n\t// The content type.\n\tString getContentType();\n\t// Sets the content type.\n\tvoid setContentType(String contentType);\n}", "des": "Represents an object that can have an associated content type."}
{"index": 14442, "repo": "camel-api-4.0.0-RC1", "code": "public class Contract extends Object {\n\tboolean equals(Object target);\n\tDataType getInputType();\n\tDataType getOutputType();\n\tboolean isEmpty();\n\tboolean isValidateInput();\n\tboolean isValidateOutput();\n\t// Set the input data type with Java class.\n\tvoid setInputType(Class<?> clazz);\n\t// Set the input data type.\n\tvoid setInputType(String inputType);\n\t// Set the output data type with Java class.\n\tvoid setOutputType(Class<?> clazz);\n\t// Set the output data type.\n\tvoid setOutputType(String outputType);\n}", "des": "A Contract which represents the input type and/or output type of the Endpoint or Processor."}
{"index": 14443, "repo": "camel-api-4.0.0-RC1", "code": "public interface DataFormat extends Service {\n\t// Marshals the object to the given Stream.\n\tvoid marshal(Exchange exchange, Object graph, OutputStream stream);\n\t// Unmarshals the given stream into an object.\n\tObject unmarshal(Exchange exchange, InputStream stream);\n}", "des": "Represents a data format used to marshal objects to and from streams such as Java Serialization or using JAXB2 to encode/decode objects using XML or using SOAP encoding."}
{"index": 14444, "repo": "camel-api-4.0.0-RC1", "code": "@FunctionalInterface public interface DataFormatCustomizer extends Ordered {\n\t// Create a generic DataFormatCustomizer.Builder.\n\tstatic DataFormatCustomizer.Builder<DataFormat> builder();\n\t// Create a typed DataFormatCustomizer.Builder that can process a concrete data format type instance.\n\tstatic <T extends DataFormat>DataFormatCustomizer.Builder<T> builder(Class<T> type);\n\t// Customize the specified DataFormat.\n\tvoid configure(String name, DataFormat target);\n}", "des": "To apply custom configurations to DataFormat instances."}
{"index": 14445, "repo": "camel-api-4.0.0-RC1", "code": "@FunctionalInterface public static interface DataFormatCustomizer.Policy extends BiPredicate<String,DataFormat> {\n\t// A simple allow-all policy.\n\tstatic DataFormatCustomizer.Policy any();\n\t// A simple deny-all policy.\n\tstatic DataFormatCustomizer.Policy none();\n}", "des": "Used as additional filer mechanism to control if customizers need to be applied or not."}
{"index": 14446, "repo": "camel-api-4.0.0-RC1", "code": "public interface DataTypeAware {\n\t// Get the data type of the message.\n\tDataType getDataType();\n\t// Whether any data type has been configured\n\tboolean hasDataType();\n\t// Set the message body with data type.\n\tvoid setBody(Object body, DataType type);\n\t// Set the data type of the message.\n\tvoid setDataType(DataType type);\n}", "des": "Allows Message to store a DataType which represents the data type of the Message."}
{"index": 14447, "repo": "camel-api-4.0.0-RC1", "code": "public interface Debugger extends Service, CamelContextAware {\n\t// Activate all breakpoints.\n\tvoid activateAllBreakpoints();\n\t// Add the given breakpoint\n\tvoid addBreakpoint(Breakpoint breakpoint);\n\t// Add the given breakpoint\n\tvoid addBreakpoint(Breakpoint breakpoint, Condition... conditions);\n\t// Add the given breakpoint which will be used in single step mode\n\tvoid addSingleStepBreakpoint(Breakpoint breakpoint);\n}", "des": "A debugger which allows tooling to attach breakpoints which is being invoked when Exchanges is being routed."}
{"index": 14448, "repo": "camel-api-4.0.0-RC1", "code": "public interface DevConsole {\n\t// Invokes and gets the output from this console.\n\tdefault Object call(DevConsole.MediaType mediaType);\n\t// Invokes and gets the output from this console.\n\tObject call(DevConsole.MediaType mediaType, Map<String,Object> options);\n\t// Short description of this console.\n\tString getDescription();\n\t// Display name of this console.\n\tString getDisplayName();\n\t// The group of this console.\n\tString getGroup();\n\t// The ID of this console.\n\tString getId();\n}", "des": "Developer Console"}
{"index": 14449, "repo": "camel-api-4.0.0-RC1", "code": "public interface DevConsoleRegistry extends CamelContextAware, StaticService, IdAware {\n\t// Returns an optional DevConsoleRegistry, by default no registry is present, and it must be explicit activated.\n\tstatic DevConsoleRegistry get(CamelContext context);\n\t// Returns the dev console identified by the given id if available.\n\tdefault Optional<DevConsole> getConsole(String id);\n\t// A collection of dev console IDs.\n\tdefault Collection<String> getConsoleIDs();\n}", "des": "A registry for dev console."}
{"index": 14450, "repo": "camel-api-4.0.0-RC1", "code": "public interface DevConsoleResolver extends CamelContextAware, StaticService {\n\t// Lookup existing resolved DevConsole.\n\tOptional<DevConsole> lookupDevConsole(String id);\n\t// Resolves the given DevConsole.\n\tDevConsole resolveDevConsole(String id);\n}", "des": "A pluggable strategy for resolving dev consoles in a loosely coupled manner"}
{"index": 14451, "repo": "camel-api-4.0.0-RC1", "code": "public interface Endpoint extends IsSingleton, Service {\n\t// Configures a newly created Exchange.\n\tvoid configureExchange(Exchange exchange);\n\t// Configure properties on this endpoint.\n\tvoid configureProperties(Map<String,Object> options);\n\t// Creates a new producer which is used send messages into the endpoint Important: Do not do any initialization in the constructor of the Producer.\n\tAsyncProducer createAsyncProducer();\n}", "des": "An endpoint implements the Message Endpoint pattern and represents an endpoint that can send and receive message exchanges"}
{"index": 14452, "repo": "camel-api-4.0.0-RC1", "code": "public interface EndpointConsumerResolver {\n\t// Resolves this object as an endpoint.\n\tEndpoint resolve(CamelContext context);\n\t// Resolves this object as an endpoint.\n\t<T extends Endpoint>T resolve(CamelContext context, Class<T> endpointType);\n}", "des": "An interface to represent an object that can be resolved as a consumer Endpoint"}
{"index": 14453, "repo": "camel-api-4.0.0-RC1", "code": "public interface EndpointProducerResolver {\n\t// Resolves this object as an endpoint.\n\tEndpoint resolve(CamelContext context);\n\t// Resolves this object as an endpoint.\n\t<T extends Endpoint>T resolve(CamelContext context, Class<T> endpointType);\n}", "des": "An interface to represent an object that can be resolved as a producer Endpoint"}
{"index": 14454, "repo": "camel-api-4.0.0-RC1", "code": "public interface EndpointRegistry<K> extends Map<K,Endpoint>, StaticService {\n\t// Cleanup the cache (purging stale entries)\n\tvoid cleanUp();\n\t// Whether the given endpoint is stored in the registry\n\tboolean containsKey(Object key);\n\t// Number of endpoints in the dynamic registry\n\tint dynamicSize();\n\t// Maximum number of entries to store in the dynamic registry\n\tint getMaximumCacheSize();\n\t// Gets a read-only map of the endpoints currently in the registry.\n\tMap<String,Endpoint> getReadOnlyMap();\n}", "des": "Registry to cache endpoints in memory."}
{"index": 14455, "repo": "camel-api-4.0.0-RC1", "code": "public interface EndpointUriFactory extends CamelContextAware {\n\t// Assembles an endpoint uri for the given component name with the given parameters.\n\tdefault String buildUri(String scheme, Map<String,Object> properties);\n\t// Assembles an endpoint uri for the given component name with the given parameters.\n\tString buildUri(String scheme, Map<String,Object> properties, boolean encode);\n\t// Checks whether this factory supports the given component name\n\tboolean isEnabled(String scheme);\n}", "des": "Factory to create Endpoint URI string from a Map of parameters."}
{"index": 14456, "repo": "camel-api-4.0.0-RC1", "code": "public interface EndpointUtilizationStatistics {\n\t// Clears all information.\n\tvoid clear();\n\t// Gets the endpoint utilization statistics.\n\tMap<String,Long> getStatistics();\n\t// Maximum number of elements that we can have information about\n\tint maxCapacity();\n\t// Callback when an endpoint is being utilized by an Processor EIP such as sending a message to a dynamic endpoint.\n\tvoid onHit(String uri);\n\t// To remove an endpoint from tracking information about its utilization\n\tvoid remove(String uri);\n}", "des": "Various statistics about endpoint utilization, such as from EIP patterns that uses dynamic endpoints."}
{"index": 14457, "repo": "camel-api-4.0.0-RC1", "code": "public interface ErrorHandlerAware {\n\t// Gets the error handler\n\tProcessor getErrorHandler();\n\t// Sets the error handler\n\tvoid setErrorHandler(Processor errorHandler);\n}", "des": "An interface for Processor aware of its ErrorHandler which are wrapped via the Channel during route initialization, or specially used by RecipientList EIP annotation."}
{"index": 14458, "repo": "camel-api-4.0.0-RC1", "code": "public interface ErrorHandlerFactory {\n\t// Clones this factory so each route has its private builder to use, to avoid changes from one route to influence the others.\n\tErrorHandlerFactory cloneBuilder();\n\t// Whether this error handler supports transacted exchanges.\n\tboolean supportTransacted();\n}", "des": "Factory for creating ErrorHandlers."}
{"index": 14459, "repo": "camel-api-4.0.0-RC1", "code": "public interface ErrorHandlerRedeliveryCustomizer {\n\t// Allows to change the output of the error handler which are used when optimising the JMX instrumentation to use either an advice or wrapped processor when calling a processor.\n\tvoid changeOutput(Processor output);\n\t// Determines if redelivery is enabled by checking if any of the redelivery policy settings may allow redeliveries.\n\tboolean determineIfRedeliveryIsEnabled();\n\t// Returns the output processor\n\tProcessor getOutput();\n}", "des": "Customizer for ErrorHandler which supports redeliveries."}
{"index": 14460, "repo": "camel-api-4.0.0-RC1", "code": "public interface EventFactory {\n\t// Creates an CamelEvent for Camel has been initialized successfully.\n\tCamelEvent createCamelContextInitializedEvent(CamelContext context);\n\t// Creates an CamelEvent for Camel is initializing.\n\tCamelEvent createCamelContextInitializingEvent(CamelContext context);\n\t// Creates an CamelEvent for CamelContext has been reloaded successfully.\n\tCamelEvent createCamelContextReloaded(CamelContext context, Object source);\n}", "des": "Factory to create events that are emitted when such an event occur."}
{"index": 14461, "repo": "camel-api-4.0.0-RC1", "code": "public interface EventNotifier {\n\t// Checks whether notification is disabled for all events\n\tboolean isDisabled();\n\t// Checks whether notification for the given event is enabled.\n\tboolean isEnabled(CamelEvent event);\n\tboolean isIgnoreCamelContextEvents();\n\tboolean isIgnoreCamelContextInitEvents();\n\tboolean isIgnoreExchangeAsyncProcessingStartedEvents();\n\tboolean isIgnoreExchangeCompletedEvent();\n\tboolean isIgnoreExchangeCreatedEvent();\n\tboolean isIgnoreExchangeEvents();\n}", "des": "Notifier to send events."}
{"index": 14462, "repo": "camel-api-4.0.0-RC1", "code": "public interface ExceptionHandler {\n\t// Handles the given exception\n\tvoid handleException(String message, Throwable exception);\n\t// Handles the given exception\n\tvoid handleException(String message, Exchange exchange, Throwable exception);\n\t// Handles the given exception\n\tvoid handleException(Throwable exception);\n}", "des": "A Strategy pattern for handling exceptions; particularly in asynchronous processes such as consumers."}
{"index": 14463, "repo": "camel-api-4.0.0-RC1", "code": "@ConstantProvider(\"org.apache.camel.ExchangeConstantProvider\") public interface Exchange {\n\t// Creates a copy of the current message exchange so that it can be forwarded to another destination\n\tExchange copy();\n\t// Returns all (both internal and custom) properties associated with the exchange\n\tMap<String,Object> getAllProperties();\n\t// Returns the container so that a processor can resolve endpoints from URIs\n\tCamelContext getContext();\n}", "des": "An Exchange is the message container holding the information during the entire routing of a Message received by a Consumer."}
{"index": 14464, "repo": "camel-api-4.0.0-RC1", "code": "public interface ExchangeFactory extends PooledObjectFactory<Exchange>, NonManagedService, RouteIdAware {\n\t// Gets a new Exchange\n\tExchange create(boolean autoRelease);\n\t// Gets a new Exchange\n\tExchange create(Endpoint fromEndpoint, boolean autoRelease);\n\t// The consumer using this factory.\n\tConsumer getConsumer();\n\t// Creates a new ExchangeFactory that is private for the given consumer.\n\tExchangeFactory newExchangeFactory(Consumer consumer);\n}", "des": "Factory used by Consumer to create Camel Exchange holding the incoming message received by the consumer."}
{"index": 14465, "repo": "camel-api-4.0.0-RC1", "code": "public interface ExchangeFactoryManager extends StaticService {\n\t// Adds the ExchangeFactory to be managed.\n\tvoid addExchangeFactory(ExchangeFactory exchangeFactory);\n\t// The capacity the pool (for each consumer) uses for storing exchanges.\n\tint getCapacity();\n\t// Number of consumers currently being managed\n\tint getConsumerCounter();\n\t// Returns a read-only view of the managed factories.\n\tCollection<ExchangeFactory> getExchangeFactories();\n}", "des": "Manages ExchangeFactory."}
{"index": 14466, "repo": "camel-api-4.0.0-RC1", "code": "public enum ExchangePattern extends Enum<ExchangePattern> {\n\tstatic ExchangePattern asEnum(String value);\n\t// Return true if there can be an IN message\n\tboolean isInCapable();\n\t// Return true if there can be an OUT message\n\tboolean isOutCapable();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ExchangePattern valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ExchangePattern[] values();\n}", "des": "Represents the kind of message exchange pattern"}
{"index": 14467, "repo": "camel-api-4.0.0-RC1", "code": "public enum ExchangePropertyKey extends Enum<ExchangePropertyKey> {\n\tstatic ExchangePropertyKey asExchangePropertyKey(String name);\n\tString getName();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ExchangePropertyKey valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ExchangePropertyKey[] values();\n}", "des": "An enum of common and known keys for exchange properties used by camel-core."}
{"index": 14468, "repo": "camel-api-4.0.0-RC1", "code": "public interface ExecutorServiceManager extends ShutdownableService, StaticService {\n\t// Awaits the termination of the thread pool.\n\tboolean awaitTermination(ExecutorService executorService, long shutdownAwaitTermination);\n\t// Gets the default thread pool profile\n\tThreadPoolProfile getDefaultThreadPoolProfile();\n\t// Gets the time to wait for thread pools to shutdown orderly, when invoking the ShutdownableService.shutdown() method.\n\tlong getShutdownAwaitTermination();\n}", "des": "Strategy to create thread pools."}
{"index": 14469, "repo": "camel-api-4.0.0-RC1", "code": "public interface Expression {\n\t// Returns the value of the expression on the given exchange\n\t<T> T evaluate(Exchange exchange, Class<T> type);\n\t// Initialize the expression with the given camel context\n\tdefault void init(CamelContext context);\n}", "des": "An expression provides a plugin strategy for evaluating expressions on a message exchange."}
{"index": 14470, "repo": "camel-api-4.0.0-RC1", "code": "public interface ExpressionResultTypeAware {\n\t// Gets the expression or predicate as text\n\tString getExpressionText();\n\t// Gets the result type\n\tClass<?> getResultType();\n}", "des": "Represents an Expression or Predicate that supports a result type."}
{"index": 14471, "repo": "camel-api-4.0.0-RC1", "code": "public interface ExtendedCamelContext {\n\t// Adds a BootstrapCloseable task.\n\tvoid addBootstrap(BootstrapCloseable bootstrap);\n\t// Allows installation of custom plugins to the Camel context.\n\t<T> void addContextPlugin(Class<T> type, T module);\n\t// Adds the given interceptor strategy\n\tvoid addInterceptStrategy(InterceptStrategy interceptStrategy);\n\t// Adds a LogListener.\n\tvoid addLogListener(LogListener listener);\n\t// Internal API for adding routes.\n\tvoid addRoute(Route route);\n}", "des": "Extended CamelContext which contains the methods and APIs that are not primary intended for Camel end users but for SPI, custom components, or more advanced used-cases with Camel."}
{"index": 14472, "repo": "camel-api-4.0.0-RC1", "code": "public interface FactoryFinder {\n\t// Clear the resolver state from previous scans.\n\tvoid clear();\n\t// Finds the given factory class using the key to lookup.\n\tOptional<Class<?>> findClass(String key);\n\t// Finds the optional factory class using the key to lookup.\n\tOptional<Class<?>> findOptionalClass(String key);\n\t// Gets the resource classpath.\n\tString getResourcePath();\n\t// Creates a new class instance using the key to lookup\n\tOptional<Object> newInstance(String key);\n}", "des": "Finder to find factories from the resource classpath, usually META-INF/services/org/apache/camel/."}
{"index": 14473, "repo": "camel-api-4.0.0-RC1", "code": "public interface FactoryFinderResolver {\n\t// Creates a new bootstrap factory finder using a default resource path.\n\tdefault FactoryFinder resolveBootstrapFactoryFinder(ClassResolver classResolver);\n\t// Creates a new factory finder.\n\tFactoryFinder resolveBootstrapFactoryFinder(ClassResolver classResolver, String resourcePath);\n\t// Creates a new default factory finder using a default resource path.\n\tdefault FactoryFinder resolveDefaultFactoryFinder(ClassResolver classResolver);\n}", "des": "Represents a resolver for FactoryFinder"}
{"index": 14474, "repo": "camel-api-4.0.0-RC1", "code": "public class FilterParameters extends JsseParameters {\n\t// Returns a live copy of the list of patterns to exclude.\n\tList<String> getExclude();\n\t// Returns a list of compiled Patterns based on the values of the exclude list.\n\tList<Pattern> getExcludePatterns();\n\t// Returns a live copy of the list of patterns to include.\n\tList<String> getInclude();\n\t// Returns a list of compiled Patterns based on the values of the include list.\n\tList<Pattern> getIncludePatterns();\n}", "des": "Represents a set of regular expression based filter patterns for including and excluding content of some type."}
{"index": 14475, "repo": "camel-api-4.0.0-RC1", "code": "public interface FluentProducerTemplate extends Service {\n\t// Sends asynchronously to the given endpoint (InOut).\n\tFuture<Object> asyncRequest();\n\t// Sends asynchronously to the given endpoint (InOut).\n\t<T> Future<T> asyncRequest(Class<T> type);\n\t// Sends asynchronously to the given endpoint (InOnly).\n\tFuture<Exchange> asyncSend();\n\t// Cleanup the cache (purging stale entries)\n\tvoid cleanUp();\n\t// Get the CamelContext\n\tCamelContext getCamelContext();\n}", "des": "Template for working with Camel and sending Message instances in an Exchange to an Endpoint using a fluent build style."}
{"index": 14476, "repo": "camel-api-4.0.0-RC1", "code": "public class GcpVaultConfiguration extends VaultConfiguration {\n\tString getProjectId();\n\tlong getRefreshPeriod();\n\tString getSecrets();\n\tString getServiceAccountKey();\n\tString getSubscriptionName();\n\tboolean isRefreshEnabled();\n\tboolean isUseDefaultInstance();\n\t// The GCP Project ID\n\tvoid setProjectId(String projectId);\n\t// Whether to automatically reload Camel upon secrets being updated in AWS.\n\tvoid setRefreshEnabled(boolean refreshEnabled);\n}", "des": "Configuration for access to GCP Secret Manager."}
{"index": 14477, "repo": "camel-api-4.0.0-RC1", "code": "public interface GlobalEndpointConfiguration {\n\tboolean isAutowiredEnabled();\n\tboolean isBridgeErrorHandler();\n\tboolean isLazyStartProducer();\n\t// Whether autowiring is enabled.\n\tvoid setAutowiredEnabled(boolean autowiredEnabled);\n}", "des": "Global endpoint configurations which can be set as defaults when Camel creates new Endpoints."}
{"index": 14478, "repo": "camel-api-4.0.0-RC1", "code": "public class HashicorpVaultConfiguration extends VaultConfiguration {\n\t// Engine to look at hashicorp vault\n\tString getEngine();\n\t// Host to access hashicorp vault\n\tString getHost();\n\t// Port to access hashicorp vault\n\tString getPort();\n\t// Scheme to access hashicorp vault\n\tString getScheme();\n\t// Token to access hashicorp vault\n\tString getToken();\n\tvoid setEngine(String engine);\n\tvoid setHost(String host);\n\tvoid setPort(String port);\n\tvoid setScheme(String scheme);\n\tvoid setToken(String token);\n}", "des": "Configuration for access to Hashicorp Vault Secrets."}
{"index": 14479, "repo": "camel-api-4.0.0-RC1", "code": "public interface HeaderFilterStrategy {\n\t// Applies filtering logic to Camel Message header that is going to be copied to target message such as CXF and JMS message.\n\tboolean applyFilterToCamelHeaders(String headerName, Object headerValue, Exchange exchange);\n\t// Applies filtering logic to an external message header such as CXF and JMS message that is going to be copied to Camel message header.\n\tboolean applyFilterToExternalHeaders(String headerName, Object headerValue, Exchange exchange);\n}", "des": "Interface to allow plug-able implementation to filter header to and from Camel message."}
{"index": 14480, "repo": "camel-api-4.0.0-RC1", "code": "public static enum HeaderFilterStrategy.Direction extends Enum<HeaderFilterStrategy.Direction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic HeaderFilterStrategy.Direction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic HeaderFilterStrategy.Direction[] values();\n}", "des": "The direction is either IN or OUT."}
{"index": 14481, "repo": "camel-api-4.0.0-RC1", "code": "public interface HeaderFilterStrategyAware {\n\t// Gets the header filter strategy used\n\tHeaderFilterStrategy getHeaderFilterStrategy();\n\t// Sets the header filter strategy to use\n\tvoid setHeaderFilterStrategy(HeaderFilterStrategy strategy);\n}", "des": "An interface to represent an object which can make use of injected HeaderFilterStrategy."}
{"index": 14482, "repo": "camel-api-4.0.0-RC1", "code": "public interface HeadersMapFactory {\n\t// Whether the created Map are case insensitive or not.\n\tboolean isCaseInsensitive();\n\t// Whether the given Map implementation is created by this factory?\n\tboolean isInstanceOf(Map<String,Object> map);\n\t// Creates a new empty Map\n\tMap<String,Object> newMap();\n\t// Creates a new Map and copies over all the content from the existing map.\n\tMap<String,Object> newMap(Map<String,Object> map);\n}", "des": "Factory to create the Map implementation to use for storing headers on Message."}
{"index": 14483, "repo": "camel-api-4.0.0-RC1", "code": "public interface HealthCheck extends HasGroup, HasId, Ordered {\n\t// Invoke the check.\n\tdefault HealthCheck.Result call();\n\t// Invoke the check.\n\tHealthCheck.Result call(Map<String,Object> options);\n\t// Invoke the check as liveness check.\n\tdefault HealthCheck.Result callLiveness();\n\t// Invoke the check as readiness check.\n\tdefault HealthCheck.Result callReadiness();\n\t// Return metadata associated with this HealthCheck.\n\tdefault Map<String,Object> getMetaData();\n\t// Gets the order.\n\tdefault int getOrder();\n}", "des": "Health check"}
{"index": 14484, "repo": "camel-api-4.0.0-RC1", "code": "public static interface HealthCheck.Result {\n\t// The HealthCheck associated to this response.\n\tHealthCheck getCheck();\n\t// A key/value combination of details.\n\tMap<String,Object> getDetails();\n\t// An error associated to the result, used to provide the error associated to unhealthy services.\n\tOptional<Throwable> getError();\n\t// A message associated to the result, used to provide more information for unhealthy services.\n\tOptional<String> getMessage();\n}", "des": "Response to a health check invocation."}
{"index": 14485, "repo": "camel-api-4.0.0-RC1", "code": "public interface HealthCheckAware {\n\t// Gets the HealthCheck\n\tHealthCheck getHealthCheck();\n\t// Injects the HealthCheck\n\tvoid setHealthCheck(HealthCheck healthCheck);\n}", "des": "An interface to represent an object which wishes to be injected with the HealthCheck"}
{"index": 14486, "repo": "camel-api-4.0.0-RC1", "code": "public final class HealthCheckHelper extends Object {\n\t// Gets the HealthCheck by the given id (will resolve from classpath if necessary)\n\tstatic HealthCheck getHealthCheck(CamelContext context, String id);\n\t// Gets the HealthCheck by the given id (will resolve from classpath if necessary)\n\tstatic <T extends HealthCheck>T getHealthCheck(CamelContext context, String id, Class<T> type);\n\t// Gets the HealthCheckRegistry.\n\tstatic HealthCheckRegistry getHealthCheckRegistry(CamelContext context);\n}", "des": "Helper for invoking HealthCheck's."}
{"index": 14487, "repo": "camel-api-4.0.0-RC1", "code": "public interface HealthCheckRegistry extends CamelContextAware, StaticService, IdAware {\n\t// Returns an optional HealthCheckRegistry, by default no registry is present, and it must be explicit activated.\n\tstatic HealthCheckRegistry get(CamelContext context);\n\t// Returns the check identified by the given id if available.\n\tdefault Optional<HealthCheck> getCheck(String id);\n\t// A collection of health check IDs.\n\tdefault Collection<String> getCheckIDs();\n}", "des": "A registry for health checks."}
{"index": 14488, "repo": "camel-api-4.0.0-RC1", "code": "public interface HealthCheckRepository extends HasId, HasHealthChecks {\n\t// Returns the check identified by the given id if available.\n\tdefault Optional<HealthCheck> getCheck(String id);\n\t// Set if the checks associated to this repository is enabled or not.\n\tboolean isEnabled();\n\t// Set if the checks associated to this repository is enabled or not.\n\tvoid setEnabled(boolean enabled);\n}", "des": "A repository for health checks."}
{"index": 14489, "repo": "camel-api-4.0.0-RC1", "code": "public interface HealthCheckResolver extends CamelContextAware {\n\t// Resolves the given HealthCheck.\n\tHealthCheck resolveHealthCheck(String id);\n\t// Resolves the given HealthCheckRepository.\n\tHealthCheckRepository resolveHealthCheckRepository(String id);\n}", "des": "A pluggable strategy for resolving health checks in a loosely coupled manner"}
{"index": 14490, "repo": "camel-api-4.0.0-RC1", "code": "public interface HttpResponseAware {\n\t// The HTTP status code\n\tint getHttpResponseCode();\n\t// The HTTP status line\n\tString getHttpResponseStatus();\n\t// Sets the HTTP status code\n\tvoid setHttpResponseCode(int code);\n\t// Sets the HTTP status line\n\tvoid setHttpResponseStatus(String status);\n}", "des": "Represents an object which is aware of HTTP responses."}
{"index": 14491, "repo": "camel-api-4.0.0-RC1", "code": "public interface IdAware extends HasId {\n\t// Sets the id which has been auto generated\n\tdefault void setGeneratedId(String id);\n\t// Sets the id\n\tvoid setId(String id);\n}", "des": "To allow objects to be injected with an id, such as EIP Processors which has been defined from Camel routes."}
{"index": 14492, "repo": "camel-api-4.0.0-RC1", "code": "public interface IdempotentRepository extends Service {\n\t// Adds the key to the repository.\n\tboolean add(String key);\n\t// Adds the key to the repository.\n\tdefault boolean add(Exchange exchange, String key);\n\t// Clear the repository.\n\tvoid clear();\n\t// Confirms the key, after the exchange has been processed successfully.\n\tboolean confirm(String key);\n\t// Confirms the key, after the exchange has been processed successfully.\n\tdefault boolean confirm(Exchange exchange, String key);\n}", "des": "Access to a repository of Message IDs to implement the Idempotent Consumer pattern."}
{"index": 14493, "repo": "camel-api-4.0.0-RC1", "code": "public interface InflightRepository extends StaticService {\n\t// Adds the exchange to the inflight registry to the total counter\n\tvoid add(Exchange exchange);\n\t// Adds the exchange to the inflight registry associated to the given route\n\tvoid add(Exchange exchange, String routeId);\n\t// Adds the route from the in flight registry.\n\tvoid addRoute(String routeId);\n}", "des": "A repository which tracks in flight Exchanges."}
{"index": 14494, "repo": "camel-api-4.0.0-RC1", "code": "public static interface InflightRepository.InflightExchange {\n\t// The id of the route where the exchange currently is being processed\n\tString getAtRouteId();\n\t// The duration in millis the exchange has been inflight\n\tlong getDuration();\n\t// The elapsed time in millis processing the exchange at the current node\n\tlong getElapsed();\n\t// The exchange being inflight\n\tExchange getExchange();\n\t// The id of the route where the exchange originates (started)\n\tString getFromRouteId();\n}", "des": "Information about the inflight exchange."}
{"index": 14495, "repo": "camel-api-4.0.0-RC1", "code": "public interface Injector {\n\t// Instantiates a new instance of the given type; possibly injecting values into the object in the process (bean post processing)\n\t<T> T newInstance(Class<T> type);\n\t// Instantiates a new instance of the given type; possibly injecting values into the object in the process (bean post processing if enabled)\n\t<T> T newInstance(Class<T> type, boolean postProcessBean);\n}", "des": "A pluggable strategy for creating and possibly dependency injecting objects which could be implemented using straight forward reflection or using Spring or CDI to perform dependency injection."}
{"index": 14496, "repo": "camel-api-4.0.0-RC1", "code": "public interface InterceptSendToEndpoint extends Endpoint {\n\t// The processor (optional) for routing after sending to the original endpoint.\n\tProcessor getAfter();\n\t// The processor for routing in a detour before sending to the original endpoint.\n\tProcessor getBefore();\n\t// The original endpoint which was intercepted.\n\tEndpoint getOriginalEndpoint();\n\t// Whether to skip sending to the original endpoint.\n\tboolean isSkip();\n}", "des": "This is an endpoint when sending to it, is intercepted and is routed in a detour, with the following flow: before, send to original endpoint (can be skipped), after (optional)."}
{"index": 14497, "repo": "camel-api-4.0.0-RC1", "code": "public interface IsSingleton {\n\t// Whether this class supports being singleton or not.\n\tboolean isSingleton();\n\t// Test if the given instance is a singleton or not.\n\tstatic boolean test(Object instance);\n}", "des": "Used for defining if a given class is singleton or not."}
{"index": 14498, "repo": "camel-api-4.0.0-RC1", "code": "public interface JSonSchemaResolver {\n\t// Returns the component information as JSON format.\n\tString getComponentJSonSchema(String name);\n\t// Returns the data format information as JSON format.\n\tString getDataFormatJSonSchema(String name);\n\t// Returns the language information as JSON format.\n\tString getLanguageJSonSchema(String name);\n\t// Returns the camel-main json schema\n\tString getMainJsonSchema();\n\t// Returns the model information as JSON format.\n\tString getModelJSonSchema(String name);\n}", "des": "Pluggable resolver to load JSON schema files for components, data formats, languages etc."}
{"index": 14499, "repo": "camel-api-4.0.0-RC1", "code": "public class JsseParameters extends Object implements CamelContextAware {\n\t// Get the CamelContext\n\tCamelContext getCamelContext();\n\t// Parses the value using the Camel Property Placeholder capabilities if a context is provided.\n\tprotected String parsePropertyValue(String value);\n\t// Parses the values using the Camel Property Placeholder capabilities if a context is provided.\n\tprotected List<String> parsePropertyValues(List<String> values);\n}", "des": "Base class that provides optional integration with core Camel capabilities."}
{"index": 14500, "repo": "camel-api-4.0.0-RC1", "code": "public class KeyManagersParameters extends JsseParameters {\n\t// Creates KeyManagers based on this instance's configuration and the KeyStore produced by the configuration returned from getKeyStore().\n\tKeyManager[] createKeyManagers();\n\tString getAlgorithm();\n\tString getKeyPassword();\n\tKeyStoreParameters getKeyStore();\n\tString getProvider();\n\t// Sets optional algorithm name for the KeyManagerFactory used to create the KeyManagers represented by this object's configuration.\n\tvoid setAlgorithm(String value);\n}", "des": "A representation of configuration options for creating and loading KeyManager instance(s)."}
{"index": 14501, "repo": "camel-api-4.0.0-RC1", "code": "public class KeyStoreParameters extends JsseParameters {\n\t// Creates a KeyStoreParameters instance based off of the configuration state of this instance.\n\tKeyStore createKeyStore();\n\tString getPassword();\n\tString getProvider();\n\tString getResource();\n\tString getType();\n\t// Sets the optional key store, which has higher priority then value in resource.\n\tvoid setKeyStore(KeyStore keyStore);\n\t// Set the optional password for reading/opening/verifying the key store.\n\tvoid setPassword(String value);\n}", "des": "A representation of configuration options for creating and loading a KeyStore instance."}
{"index": 14502, "repo": "camel-api-4.0.0-RC1", "code": "public interface Language {\n\t// Creates an expression based on only the given string input\n\tExpression createExpression(String expression);\n\t// Creates an expression based on the input with properties\n\tdefault Expression createExpression(String expression, Object[] properties);\n\t// Creates a predicate based on only the given string input\n\tPredicate createPredicate(String expression);\n}", "des": "Represents a language to be used for Expression or Predicate instances"}
{"index": 14503, "repo": "camel-api-4.0.0-RC1", "code": "@FunctionalInterface public interface LanguageCustomizer extends Ordered {\n\t// Create a generic LanguageCustomizer.Builder.\n\tstatic LanguageCustomizer.Builder<Language> builder();\n\t// Create a typed LanguageCustomizer.Builder that can process a concrete language type instance.\n\tstatic <T extends Language>LanguageCustomizer.Builder<T> builder(Class<T> type);\n\t// Customize the specified Language.\n\tvoid configure(String name, Language target);\n}", "des": "To apply custom configurations to Language instances."}
{"index": 14504, "repo": "camel-api-4.0.0-RC1", "code": "@FunctionalInterface public static interface LanguageCustomizer.Policy extends BiPredicate<String,Language> {\n\t// A simple allow-all policy.\n\tstatic LanguageCustomizer.Policy any();\n\t// A simple deny-all policy.\n\tstatic LanguageCustomizer.Policy none();\n}", "des": "Used as additional filer mechanism to control if customizers need to be applied or not."}
{"index": 14505, "repo": "camel-api-4.0.0-RC1", "code": "public interface LifecycleStrategy {\n\t// Notification on adding an Component.\n\tvoid onComponentAdd(String name, Component component);\n\t// Notification on removing an Component.\n\tvoid onComponentRemove(String name, Component component);\n\t// Notification on initialized CamelContext.\n\tdefault void onContextInitialized(CamelContext context);\n\t// Notification on initializing a CamelContext.\n\tdefault void onContextInitializing(CamelContext context);\n}", "des": "Strategy for lifecycle notifications."}
{"index": 14506, "repo": "camel-api-4.0.0-RC1", "code": "public interface LineNumberAware {\n\t// The line number of this entity.\n\tint getLineNumber();\n\t// The location of the entity.\n\tString getLocation();\n\t// Sets the line number of this entity.\n\tvoid setLineNumber(int lineNumber);\n\t// Sets the location of the entity (source file name, i.e.\n\tvoid setLocation(String location);\n\t// Set the LineNumberAware if the object is an instance of LineNumberAware.\n\tstatic <T> T trySetLineNumberAware(T object, LineNumberAware source);\n}", "des": "An entity that can point to a given line number from a source Resource such as YAML and XML DSL parsers."}
{"index": 14507, "repo": "camel-api-4.0.0-RC1", "code": "public interface LoadablePropertiesSource extends PropertiesSource {\n\t// Loads the properties from the source\n\tProperties loadProperties();\n\t// Loads the properties from the source filtering them out according to a predicate.\n\tProperties loadProperties(Predicate<String> filter);\n\t// Re-loads the properties from the file location\n\tvoid reloadProperties(String location);\n}", "des": "A source for properties that can be loaded all at once during initialization, such as loading .properties files."}
{"index": 14508, "repo": "camel-api-4.0.0-RC1", "code": "public interface LocalBeanRepositoryAware {\n\t// Gets the local bean repository (if any in use)\n\tBeanRepository getLocalBeanRepository();\n\t// Sets a special local bean repository (ie thread local) that take precedence and will use first, if a bean exists.\n\tvoid setLocalBeanRepository(BeanRepository repository);\n}", "des": "Allows a BeanRepository to temporary have a local repository take precedence, such as when creating route templates to give more flexibility."}
{"index": 14509, "repo": "camel-api-4.0.0-RC1", "code": "public enum LoggingLevel extends Enum<LoggingLevel> {\n\t// Is the given logging level equal or higher than the current level.\n\tboolean isEnabled(LoggingLevel level);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic LoggingLevel valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic LoggingLevel[] values();\n}", "des": "Used to configure the logging levels"}
{"index": 14510, "repo": "camel-api-4.0.0-RC1", "code": "public interface ManagementAgent extends Service {\n\t// Gets whether endpoint runtime statistics is enabled\n\tBoolean getEndpointRuntimeStatisticsEnabled();\n\t// Gets whether host name is included in MBean names.\n\tBoolean getIncludeHostName();\n\t// Gets whether load statistics is enabled\n\tBoolean getLoadStatisticsEnabled();\n\t// The naming pattern for creating the CamelContext management name.\n\tString getManagementNamePattern();\n}", "des": "Camel JMX service agent"}
{"index": 14511, "repo": "camel-api-4.0.0-RC1", "code": "public enum ManagementMBeansLevel extends Enum<ManagementMBeansLevel> {\n\tboolean isProcessors();\n\tboolean isRoutes();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ManagementMBeansLevel valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ManagementMBeansLevel[] values();\n}", "des": "Level of mbeans for registration"}
{"index": 14512, "repo": "camel-api-4.0.0-RC1", "code": "public interface ManagementNameStrategy {\n\t// Gets the name\n\tString getName();\n\t// Gets the custom name pattern.\n\tString getNamePattern();\n\t// Gets the next calculated name, if this strategy is not using fixed names.\n\tString getNextName();\n\t// Whether the name will be fixed, or allow re-calculation such as by using an unique counter.\n\tboolean isFixedName();\n\t// Creates a new management name with the given pattern.\n\tString resolveManagementName(String pattern, String name, boolean invalidCheck);\n}", "des": "Strategy for assigning the name part of the ObjectName for a managed CamelContext."}
{"index": 14513, "repo": "camel-api-4.0.0-RC1", "code": "public enum ManagementStatisticsLevel extends Enum<ManagementStatisticsLevel> {\n\tboolean isDefaultOrExtended();\n\tboolean isExtended();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ManagementStatisticsLevel valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ManagementStatisticsLevel[] values();\n}", "des": "Level of granularity for performance statistics enabled"}
{"index": 14514, "repo": "camel-api-4.0.0-RC1", "code": "public interface ManagementStrategy extends StaticService {\n\t// Adds the event notifier to use.\n\tvoid addEventNotifier(EventNotifier eventNotifier);\n\t// Gets the event factory\n\tEventFactory getEventFactory();\n\t// Gets the event notifiers.\n\tList<EventNotifier> getEventNotifiers();\n\t// Gets the management agent\n\tManagementAgent getManagementAgent();\n\t// Gets the naming strategy to use\n\tManagementObjectNameStrategy getManagementObjectNameStrategy();\n}", "des": "Strategy for management."}
{"index": 14515, "repo": "camel-api-4.0.0-RC1", "code": "public interface ManagementStrategyFactory {\n\t// Creates the ManagementStrategy.\n\tManagementStrategy create(CamelContext context, Map<String,Object> properties);\n\t// Creates the associated LifecycleStrategy that the management strategy uses.\n\tLifecycleStrategy createLifecycle(CamelContext context);\n\t// Setup the management on the CamelContext.\n\tvoid setupManagement(CamelContext camelContext, ManagementStrategy strategy, LifecycleStrategy lifecycle);\n}", "des": "Service Factory for ManagementStrategy"}
{"index": 14516, "repo": "camel-api-4.0.0-RC1", "code": "public interface Message {\n\t// Creates a copy of this message so that it can be used and possibly modified further in another exchange.\n\tMessage copy();\n\t// Copies the contents of the other message into this message\n\tvoid copyFrom(Message message);\n\t// Copies the contents (except the body) of the other message into this message and uses the provided new body instead\n\tvoid copyFromWithNewBody(Message message, Object newBody);\n\t// Returns the body of the message as a POJO\n\tObject getBody();\n}", "des": "Implements the Message pattern and represents an inbound or outbound message as part of an Exchange."}
{"index": 14517, "repo": "camel-api-4.0.0-RC1", "code": "public interface MessageHistory {\n\t// Gets the elapsed time in millis processing the node took (this is 0 until the node processing is done)\n\tlong getElapsed();\n\t// A read-only copy of the message at the point of this history (if this has been enabled).\n\tMessage getMessage();\n\t// Gets the node at the point of this history.\n\tNamedNode getNode();\n\t// Gets the route id at the point of this history.\n\tString getRouteId();\n\t// Gets the timestamp at the point of this history.\n\tlong getTime();\n}", "des": "Represents the history of a Camel Message how it was routed by the Camel routing engine."}
{"index": 14518, "repo": "camel-api-4.0.0-RC1", "code": "public interface MessageHistoryFactory extends StaticService, CamelContextAware {\n\t// An optional pattern to filter which nodes to trace in this message history.\n\tString getNodePattern();\n\t// Whether to make a copy of the message in the MessageHistory.\n\tboolean isCopyMessage();\n\t// Creates a new MessageHistory\n\tMessageHistory newMessageHistory(String routeId, NamedNode node, long timestamp, Exchange exchange);\n}", "des": "A factory to create MessageHistory instances."}
{"index": 14519, "repo": "camel-api-4.0.0-RC1", "code": "public enum MessageTrait extends Enum<MessageTrait> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MessageTrait valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MessageTrait[] values();\n}", "des": "Message traits are runtime traits that can be associated with a message (for instance, the redelivery state, a data type, etc)."}
{"index": 14520, "repo": "camel-api-4.0.0-RC1", "code": "public interface ModelToXMLDumper {\n\t// Dumps the definition as XML\n\tString dumpModelAsXml(CamelContext context, NamedNode definition);\n\t// Dumps the definition as XML\n\tString dumpModelAsXml(CamelContext context, NamedNode definition, boolean resolvePlaceholders);\n}", "des": "SPI for dumping model definitions into XML representation."}
{"index": 14521, "repo": "camel-api-4.0.0-RC1", "code": "public interface ModelToYAMLDumper {\n\t// Dumps the definition as YAML\n\tString dumpModelAsYaml(CamelContext context, NamedNode definition);\n\t// Dumps the definition as YAML\n\tString dumpModelAsYaml(CamelContext context, NamedNode definition, boolean resolvePlaceholders, boolean uriAsParameters);\n}", "des": "SPI for dumping model definitions into YAML representation."}
{"index": 14522, "repo": "camel-api-4.0.0-RC1", "code": "public interface NamedNode extends LineNumberAware {\n\t// Returns the description text or null if there is no description text associated with this node\n\tString getDescriptionText();\n\t// Gets the value of the id property.\n\tString getId();\n\t// Returns a label to describe this node such as the expression if some kind of expression node\n\tString getLabel();\n\t// Returns the parent\n\tNamedNode getParent();\n}", "des": "Represents a node in the routes which is identified by an id."}
{"index": 14523, "repo": "camel-api-4.0.0-RC1", "code": "public interface NamedRoute {\n\t// Gets the route endpoint url.\n\tString getEndpointUrl();\n\t// Gets the route input\n\tNamedNode getInput();\n\t// Gets the route id.\n\tString getRouteId();\n\t// Is the route created from Rest DSL\n\tboolean isCreatedFromRest();\n\t// Is the route created from template;\n\tboolean isCreatedFromTemplate();\n}", "des": "Represents a node in the routes which is identified as a route."}
{"index": 14524, "repo": "camel-api-4.0.0-RC1", "code": "public interface NamespaceAware {\n\t// Gets the XML Namespaces\n\tMap<String,String> getNamespaces();\n\t// Injects the XML Namespaces of prefix -> uri mappings\n\tvoid setNamespaces(Map<String,String> namespaces);\n}", "des": "Represents an object which is aware of the namespaces in which its used such as XPath and XQuery type expressions so that the current namespace context can be injected"}
{"index": 14525, "repo": "camel-api-4.0.0-RC1", "code": "public interface Navigate<T> {\n\t// Are there more outputs?\n\tboolean hasNext();\n\t// Next group of outputs\n\tList<T> next();\n}", "des": "Implementations support navigating a graph where you can traverse forward and each next returns a List of outputs of type T that can contain 0..n nodes."}
{"index": 14526, "repo": "camel-api-4.0.0-RC1", "code": "public interface NotifyBuilderMatcher {\n\t// Whether the predicate matches\n\tboolean notifyBuilderMatches();\n\t// When an exchange was received\n\tvoid notifyBuilderOnExchange(Exchange exchange);\n\t// Reset state\n\tvoid notifyBuilderReset();\n}", "des": "Allows to be used in combination with NotifyBuilder as external predicate implementations to compute if the exchange matches."}
{"index": 14527, "repo": "camel-api-4.0.0-RC1", "code": "public class NoTypeConversionAvailableException extends CamelException {\n\t// Returns an error message for no type converter available.\n\tstatic String createMessage(Object value, Class<?> type);\n\t// Returns an error message for no type converter available with the cause.\n\tstatic String createMessage(Object value, Class<?> type, Throwable cause);\n\t// Returns the required from type.\n\tClass<?> getFromType();\n\t// Returns the required to type\n\tClass<?> getToType();\n}", "des": "An exception thrown if a value could not be converted to the required type"}
{"index": 14528, "repo": "camel-api-4.0.0-RC1", "code": "public interface Offset<T> extends Serializable {\n\t// Gets the offset value\n\tT getValue();\n\t// Gets the offset value converting it to the given type\n\tdefault <V> V getValue(Class<V> tClass);\n\t// Serializes this offset into a buffer of bytes\n\tdefault ByteBuffer serialize();\n\t// Sets the current offset value\n\tvoid update(T offset);\n}", "des": "Generic offset without a concrete type"}
{"index": 14529, "repo": "camel-api-4.0.0-RC1", "code": "public interface OffsetKey<K> extends Serializable {\n\t// Gets the key value\n\tK getValue();\n\t// Serializes this offset into a buffer of bytes\n\tdefault ByteBuffer serialize();\n\t// Sets the key value\n\tvoid setValue(K key);\n}", "des": "An interface to represent offset keys (addressable for an offset)"}
{"index": 14530, "repo": "camel-api-4.0.0-RC1", "code": "public interface OptimisticLockingAggregationRepository extends AggregationRepository {\n\t// Add the given Exchange under the correlation key.\n\tExchange add(CamelContext camelContext, String key, Exchange oldExchange, Exchange newExchange);\n\t// Removes the given Exchange when both the supplied key and Exchange are present in the repository.\n\tvoid remove(CamelContext camelContext, String key, Exchange exchange);\n}", "des": "A specialized AggregationRepository which also supports optimistic locking."}
{"index": 14531, "repo": "camel-api-4.0.0-RC1", "code": "public interface PackageScanClassResolver extends StaticService {\n\t// Adds the class loader to the existing loaders\n\tvoid addClassLoader(ClassLoader classLoader);\n\t// Add a filter that will be applied to all scan operations\n\tvoid addFilter(PackageScanFilter filter);\n\t// Clears and frees the internal cache.\n\tvoid clearCache();\n\t// Attempts to discover classes that are annotated with to the annotation.\n\tSet<Class<?>> findAnnotated(Class<? extends Annotation> annotation, String... packageNames);\n}", "des": "A resolver that can find classes based on package scanning."}
{"index": 14532, "repo": "camel-api-4.0.0-RC1", "code": "public interface PackageScanResourceResolver extends StaticService {\n\t// Adds the class loader to the existing loaders\n\tvoid addClassLoader(ClassLoader classLoader);\n\t// Finds the resources from the given location.\n\tCollection<Resource> findResources(String location);\n\t// Gets the ClassLoader instances that should be used when scanning for resources.\n\tSet<ClassLoader> getClassLoaders();\n}", "des": "A resolver that can find resources based on package scanning."}
{"index": 14533, "repo": "camel-api-4.0.0-RC1", "code": "public interface PeriodTaskResolver {\n\t// Creates a new class instance using the key to lookup\n\tOptional<Object> newInstance(String key);\n\t// Creates a new class instance using the key to lookup\n\t<T> Optional<T> newInstance(String key, Class<T> type);\n}", "des": "Finder to find PeriodicTask tasks."}
{"index": 14534, "repo": "camel-api-4.0.0-RC1", "code": "public interface PeriodTaskScheduler {\n\t// Gets an existing task by a given type, assuming there is only one task of the given type.\n\t<T> T getTaskByType(Class<T> type);\n\t// Schedules the period task.\n\tvoid schedulePeriodTask(Runnable task, long period);\n}", "des": "A shared scheduler to run small period tasks, such as updating internal statistics, or for custom components to have a background task."}
{"index": 14535, "repo": "camel-api-4.0.0-RC1", "code": "public interface PluginManager {\n\t// Allows installation of custom plugins to the Camel context.\n\t<T> void addContextPlugin(Class<T> type, T module);\n\t// Gets a plugin of the given type.\n\t<T> T getContextPlugin(Class<T> type);\n\t// Allows lazy installation of custom plugins to the Camel context.\n\t<T> void lazyAddContextPlugin(Class<T> type, Supplier<T> module);\n}", "des": "A manager for internal plugins."}
{"index": 14536, "repo": "camel-api-4.0.0-RC1", "code": "public interface Policy {\n\t// Hook invoked before the wrap.\n\tvoid beforeWrap(Route route, NamedNode definition);\n\t// Wraps any applicable interceptors around the given processor.\n\tProcessor wrap(Route route, Processor processor);\n}", "des": "A strategy capable of applying interceptors to a processor."}
{"index": 14537, "repo": "camel-api-4.0.0-RC1", "code": "public interface PollingConsumer extends Consumer {\n\t// Waits until a message is available and then returns it.\n\tExchange receive();\n\t// Attempts to receive a message exchange, waiting up to the given timeout to expire if a message is not yet available.\n\tExchange receive(long timeout);\n\t// Attempts to receive a message exchange immediately without waiting and returning null if a message exchange is not available yet.\n\tExchange receiveNoWait();\n}", "des": "Represents a Polling Consumer where the caller polls for messages when it is ready."}
{"index": 14538, "repo": "camel-api-4.0.0-RC1", "code": "public interface PollingConsumerPollingStrategy {\n\t// Callback invoked after the poll.\n\tvoid afterPoll();\n\t// Callback invoked before the poll.\n\tlong beforePoll(long timeout);\n\t// Callback invoked when the consumer is initialized such as when the PollingConsumer starts.\n\tvoid onInit();\n}", "des": "Strategy that allows Consumers to influence the PollingConsumer."}
{"index": 14539, "repo": "camel-api-4.0.0-RC1", "code": "public interface PollingConsumerPollStrategy {\n\t// Called when poll is about to begin\n\tboolean begin(Consumer consumer, Endpoint endpoint);\n\t// Called when poll is completed successfully\n\tvoid commit(Consumer consumer, Endpoint endpoint, int polledMessages);\n\t// Called when poll failed\n\tboolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception cause);\n}", "des": "Strategy for a PollingConsumer when polling an Endpoint."}
{"index": 14540, "repo": "camel-api-4.0.0-RC1", "code": "public interface PooledExchange extends Exchange {\n\t// When the exchange is done being used.\n\tvoid done();\n\t// Whether this exchange was created to auto release when its unit of work is done\n\tboolean isAutoRelease();\n\t// Registers a task to run when this exchange is done.\n\tvoid onDone(PooledExchange.OnDoneTask task);\n\t// Resets the exchange for reuse with the given created timestamp;\n\tvoid reset(long created);\n}", "des": "Pooled Exchange which contains the methods and APIs that are not intended for Camel end users but used internally by Camel for optimizing memory footprint by reusing exchanges created by Consumers via ExchangeFactory."}
{"index": 14541, "repo": "camel-api-4.0.0-RC1", "code": "public interface PooledObjectFactory<T> extends Service, CamelContextAware {\n\t// Acquires an object from the pool (if any)\n\tT acquire();\n\t// The capacity the pool uses for storing objects.\n\tint getCapacity();\n\t// The current number of objects in the pool\n\tint getSize();\n\t// Gets the usage statistics\n\tPooledObjectFactory.Statistics getStatistics();\n\t// Whether the factory is pooled.\n\tboolean isPooled();\n\t// Whether statistics is enabled.\n\tboolean isStatisticsEnabled();\n}", "des": "Factory for pooled objects or tasks."}
{"index": 14542, "repo": "camel-api-4.0.0-RC1", "code": "public static interface PooledObjectFactory.Statistics {\n\t// Number of exchanges acquired (reused) when using pooled factory.\n\tlong getAcquiredCounter();\n\t// Number of new exchanges created.\n\tlong getCreatedCounter();\n\t// Number of exchanges discarded (thrown away) such as if no space in cache pool.\n\tlong getDiscardedCounter();\n\t// Number of exchanges released back to pool\n\tlong getReleasedCounter();\n\t// Reset the counters\n\tvoid reset();\n}", "des": "Utilization statistics of the this factory."}
{"index": 14543, "repo": "camel-api-4.0.0-RC1", "code": "public interface Predicate {\n\t// Initialize the predicate with the given camel context\n\tdefault void init(CamelContext context);\n\t// Initialize as a predicate with the given camel context\n\tdefault void initPredicate(CamelContext context);\n\t// Evaluates the predicate on the message exchange and returns true if this exchange matches the predicate\n\tboolean matches(Exchange exchange);\n}", "des": "Evaluates a binary predicate on the message exchange."}
{"index": 14544, "repo": "camel-api-4.0.0-RC1", "code": "public interface ProcessorExchangeFactory extends PooledObjectFactory<Exchange>, NonManagedService, RouteIdAware, IdAware {\n\t// Gets a new Exchange\n\tExchange create(Endpoint fromEndpoint, ExchangePattern exchangePattern);\n\t// Gets a copy of the given Exchange\n\tExchange createCopy(Exchange exchange);\n\t// Gets a copy of the given Exchange and the copy is correlated to the source\n\tExchange createCorrelatedCopy(Exchange exchange, boolean handover);\n}", "des": "Factory used by Processor (EIPs) when they create copies of the processed Exchange."}
{"index": 14545, "repo": "camel-api-4.0.0-RC1", "code": "public interface ProcessorFactory {\n\t// Creates the child processor.\n\tProcessor createChildProcessor(Route route, NamedNode definition, boolean mandatory);\n\t// Creates a processor by the name of the definition.\n\tProcessor createProcessor(CamelContext camelContext, String definitionName, Object[] args);\n\t// Creates the processor.\n\tProcessor createProcessor(Route route, NamedNode definition);\n}", "des": "A factory to create Processor based on the definition."}
{"index": 14546, "repo": "camel-api-4.0.0-RC1", "code": "public interface ProducerCache extends Service {\n\t// Acquires a pooled producer which you must release back again after usage using the releaseProducer(org.apache.camel.Endpoint, org.apache.camel.AsyncProducer) method.\n\tAsyncProducer acquireProducer(Endpoint endpoint);\n}", "des": "Cache containing created Producer."}
{"index": 14547, "repo": "camel-api-4.0.0-RC1", "code": "public interface ProducerTemplate extends Service {\n\t// Sends an asynchronous body to the given endpoint.\n\tCompletableFuture<Object> asyncRequestBody(String endpointUri, Object body);\n\t// Sends an asynchronous body to the given endpoint.\n\t<T> CompletableFuture<T> asyncRequestBody(String endpointUri, Object body, Class<T> type);\n\t// Sends an asynchronous body to the given endpoint.\n\tCompletableFuture<Object> asyncRequestBody(Endpoint endpoint, Object body);\n}", "des": "Template for working with Camel and sending Message instances in an Exchange to an Endpoint."}
{"index": 14548, "repo": "camel-api-4.0.0-RC1", "code": "public interface PropertiesComponent extends StaticService {\n\t// Adds an initial property which will be added before any property locations are loaded.\n\tvoid addInitialProperty(String key, String value);\n\t// Adds the list of locations to the current locations, where to load properties.\n\tvoid addLocation(String location);\n\t// Adds a special override property that take precedence and will use first, if a property exist.\n\tvoid addOverrideProperty(String key, String value);\n}", "des": "Component for property placeholders and loading properties from sources (such as .properties file from classpath or file system)"}
{"index": 14549, "repo": "camel-api-4.0.0-RC1", "code": "public interface PropertiesFunction {\n\t// Applies the function.\n\tString apply(String remainder);\n\t// Name of the function which is used as name: to let the properties component know it is a function.\n\tString getName();\n\t// Whether the value should be looked up as a regular properties first, before applying this function.\n\tdefault boolean lookupFirst(String remainder);\n}", "des": "A function that is applied instead of looking up a property placeholder."}
{"index": 14550, "repo": "camel-api-4.0.0-RC1", "code": "public interface PropertiesSource {\n\t// Name of properties source\n\tString getName();\n\t// Gets the property with the name\n\tString getProperty(String name);\n}", "des": "A source for properties."}
{"index": 14551, "repo": "camel-api-4.0.0-RC1", "code": "public interface PropertiesSourceFactory {\n\t// New classpath based PropertiesSource\n\tPropertiesSource newClasspathPropertiesSource(String location);\n\t// New file based PropertiesSource\n\tPropertiesSource newFilePropertiesSource(String location);\n\t// New ref based PropertiesSource\n\tPropertiesSource newRefPropertiesSource(String ref);\n}", "des": "Factory for creating out of the box PropertiesSource."}
{"index": 14552, "repo": "camel-api-4.0.0-RC1", "code": "public interface PropertyConfigurerGetter {\n\t// Gets the names of the autowired options.\n\tdefault String[] getAutowiredNames();\n\t// This method can be used to retrieve the class type for an option if the option is a collection kind (list, map, or array).\n\tdefault Object getCollectionValueType(Object target, String name, boolean ignoreCase);\n\t// Gets the option class type.\n\tClass<?> getOptionType(String name, boolean ignoreCase);\n}", "des": "A marker interface to identify the object as being a configurer which can provide details about the options the configurer supports."}
{"index": 14553, "repo": "camel-api-4.0.0-RC1", "code": "public interface ReactiveExecutor {\n\t// Executes the next task (if supported by the reactive executor implementation)\n\tboolean executeFromQueue();\n\t// Whether statistics is enabled\n\tboolean isStatisticsEnabled();\n\t// Schedules the task to be run (fairly)\n\tvoid schedule(Runnable runnable);\n\t// Schedules the task to be prioritized and run asap\n\tvoid scheduleMain(Runnable runnable);\n}", "des": "SPI to plugin different reactive engines in the Camel routing engine."}
{"index": 14554, "repo": "camel-api-4.0.0-RC1", "code": "public interface RecoverableAggregationRepository extends AggregationRepository {\n\t// Confirms the completion of the Exchange with a result.\n\tdefault boolean confirmWithResult(CamelContext camelContext, String exchangeId);\n\t// Gets the dead letter channel\n\tString getDeadLetterUri();\n\t// Gets the maximum redelivery attempts to do before a recovered Exchange is doomed as exhausted and moved to the dead letter channel.\n\tint getMaximumRedeliveries();\n}", "des": "A specialized AggregationRepository which also supports recovery."}
{"index": 14555, "repo": "camel-api-4.0.0-RC1", "code": "public enum RedeliveryTraitPayload extends Enum<RedeliveryTraitPayload> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RedeliveryTraitPayload valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RedeliveryTraitPayload[] values();\n}", "des": "Some messages can carry redelivery details which might affect routing (i.e; JMS messages)."}
{"index": 14556, "repo": "camel-api-4.0.0-RC1", "code": "public interface Registry extends BeanRepository {\n\t// Binds the bean to the repository (if possible).\n\tvoid bind(String id, Class<?> type, Object bean);\n\t// Binds the bean (via a supplier) to the repository (if possible).\n\tvoid bind(String id, Class<?> type, Supplier<Object> bean);\n\t// Binds the bean to the repository (if possible).\n\tdefault void bind(String id, Object bean);\n}", "des": "Represents a BeanRepository which may also be capable of binding beans to its repository."}
{"index": 14557, "repo": "camel-api-4.0.0-RC1", "code": "public interface ReloadStrategy extends StaticService, CamelContextAware {\n\t// Number of reloads failed.\n\tint getFailedCounter();\n\t// Number of reloads succeeded.\n\tint getReloadCounter();\n\t// Trigger reload.\n\tvoid onReload(Object source);\n\t// Reset the counters.\n\tvoid resetCounters();\n}", "des": "SPI strategy for reloading."}
{"index": 14558, "repo": "camel-api-4.0.0-RC1", "code": "public interface Resource {\n\t// Whether this resource exists.\n\tboolean exists();\n\t// Returns an InputStream that reads from the underlying resource.\n\tInputStream getInputStream();\n\t// The location of the resource.\n\tString getLocation();\n\t// Returns a Reader that reads from the underlying resource using UTF-8 as charset.\n\tdefault Reader getReader();\n\t// Returns a Reader that reads from the underlying resource using the given Charset\n\tdefault Reader getReader(Charset charset);\n}", "des": "Describe a resource, such as a file or class path resource."}
{"index": 14559, "repo": "camel-api-4.0.0-RC1", "code": "public interface ResourceAware {\n\t// Gets the Resource.\n\tResource getResource();\n\t// Sets the Resource.\n\tvoid setResource(Resource resource);\n\t// Set the Resource resource if the object is an instance of ResourceAware.\n\tstatic <T> T trySetResource(T object, Resource resource);\n}", "des": "An interface to represent an object which wishes to be injected with the Resource"}
{"index": 14560, "repo": "camel-api-4.0.0-RC1", "code": "public interface ResourceReloadStrategy extends ReloadStrategy {\n\t// Gets the resource listener that is triggered on reload.\n\tResourceReload getResourceReload();\n\t// Sets the resource listener to trigger on reload.\n\tvoid setResourceReload(ResourceReload listener);\n}", "des": "SPI strategy for reloading Resource in an existing running CamelContext"}
{"index": 14561, "repo": "camel-api-4.0.0-RC1", "code": "public interface ResourceResolver extends StaticService, CamelContextAware {\n\t// The supported resource scheme.\n\tString getSupportedScheme();\n\t// Resolve a Resource from a give uri.\n\tResource resolve(String location);\n}", "des": "SPI for loading resources."}
{"index": 14562, "repo": "camel-api-4.0.0-RC1", "code": "public class RestConfiguration extends Object {\n\t// Gets the name of the Camel component to use as the REST API (such as swagger or openapi).\n\tString getApiComponent();\n\tString getApiContextPath();\n\tString getApiContextRouteId();\n\tString getApiHost();\n\tMap<String,Object> getApiProperties();\n\t// Gets the binding mode used by the REST consumer\n\tRestConfiguration.RestBindingMode getBindingMode();\n\t// Gets the name of the Camel component to use as the REST consumer\n\tString getComponent();\n}", "des": "Configuration use by RestConsumerFactory and RestApiConsumerFactory for Camel components to support the Camel rest DSL."}
{"index": 14563, "repo": "camel-api-4.0.0-RC1", "code": "public interface RestRegistry extends Service {\n\t// Adds a new REST service to the registry.\n\tvoid addRestService(Consumer consumer, String url, String baseUrl, String basePath, String uriTemplate, String method, String consumes, String produces, String inType, String outType, String routeId, String description);\n\t// Outputs the Rest services API documentation in JSON (requires camel-openapi-java on classpath)\n\tString apiDocAsJson();\n}", "des": "A registry of all REST services running within the CamelContext which have been defined and created using the Rest DSL."}
{"index": 14564, "repo": "camel-api-4.0.0-RC1", "code": "public static interface RestRegistry.RestService {\n\t// Gets the base path to the REST service\n\tString getBasePath();\n\t// Gets the base url to the REST service\n\tString getBaseUrl();\n\t// Gets the consumer of the REST service\n\tConsumer getConsumer();\n\t// Optional details about what media-types the REST service accepts\n\tString getConsumes();\n\t// Optional description about this rest service.\n\tString getDescription();\n\t// Optional detail about input binding to a FQN class name.\n\tString getInType();\n}", "des": "Details about the REST service"}
{"index": 14565, "repo": "camel-api-4.0.0-RC1", "code": "public interface Resumable {\n\t// Gets the last offset\n\tOffset<?> getLastOffset();\n\t// Gets the offset key (i.e.: the addressable part of the resumable object)\n\tOffsetKey<?> getOffsetKey();\n}", "des": "This provides an interface for resumable objects."}
{"index": 14566, "repo": "camel-api-4.0.0-RC1", "code": "public interface ResumeAware<T extends ResumeStrategy> {\n\t// Allows the implementation to provide custom adapter factories.\n\tdefault String adapterFactoryService();\n\t// Gets the ResumeStrategy instance\n\tT getResumeStrategy();\n\t// Injects the ResumeStrategy instance into the object\n\tvoid setResumeStrategy(T resumeStrategy);\n}", "des": "An interface to represent an object which wishes to support resume operations using a ResumeStrategy."}
{"index": 14567, "repo": "camel-api-4.0.0-RC1", "code": "public interface ResumeCache<K> {\n\t// Adds a value to the cache\n\tvoid add(K key, Object offsetValue);\n\t// Gets the cache pool size\n\tlong capacity();\n\t// If the specified key is not present, compute its value from the mapping function (like Java's standard Map one)\n\tObject computeIfAbsent(K key, Function<? super K,? super Object> mapping);\n}", "des": "This cache stored the resumed data from a ResumeStrategy."}
{"index": 14568, "repo": "camel-api-4.0.0-RC1", "code": "public interface ResumeStrategy extends Service {\n\t// Gets an adapter for resuming operations\n\tResumeAdapter getAdapter();\n\t// Gets and adapter for resuming operations\n\tdefault <T extends ResumeAdapter>T getAdapter(Class<T> clazz);\n\tResumeStrategyConfiguration getResumeStrategyConfiguration();\n\t// Loads the cache with the data currently available in this strategy\n\tdefault void loadCache();\n\t// Sets an adapter for resuming operations with this strategy\n\tvoid setAdapter(ResumeAdapter adapter);\n}", "des": "Defines a strategy for handling resume operations."}
{"index": 14569, "repo": "camel-api-4.0.0-RC1", "code": "public abstract class ResumeStrategyConfiguration extends Object {\n\t// Gets the Cacheable.FillPolicy for the cache used in the strategy\n\tCacheable.FillPolicy getCacheFillPolicy();\n\tResumeCache<?> getResumeCache();\n\t// Allows the implementation to provide custom strategy service factories.\n\tabstract String resumeStrategyService();\n\t// Sets the Cacheable.FillPolicy for the cache used in the strategy\n\tvoid setCacheFillPolicy(Cacheable.FillPolicy cacheFillPolicy);\n}", "des": "Basic configuration holder for resume strategies"}
{"index": 14570, "repo": "camel-api-4.0.0-RC1", "code": "public interface ResumeStrategyConfigurationBuilder<T extends ResumeStrategyConfigurationBuilder,Y extends ResumeStrategyConfiguration> {\n\t// Builds the resume strategy configuration\n\tY build();\n\t// Sets the Cacheable.FillPolicy for the cache used in the strategy\n\tT withCacheFillPolicy(Cacheable.FillPolicy cacheFillPolicy);\n\t// Sets the local resume cache instance to use in the strategy\n\tT withResumeCache(ResumeCache<?> resumeCache);\n}", "des": "Provides a basic interface for implementing component-specific configuration builder"}
{"index": 14571, "repo": "camel-api-4.0.0-RC1", "code": "public interface Route extends RuntimeConfiguration {\n\t// Adds error handler for the given exception type\n\tvoid addErrorHandler(ErrorHandlerFactory factory, NamedNode exception);\n\t// Link the error handlers from a factory to another\n\tvoid addErrorHandlerFactoryReference(ErrorHandlerFactory source, ErrorHandlerFactory target);\n\t// Adds a service to this route\n\tvoid addService(Service service);\n\t// Clears the route model when its no longer needed.\n\tvoid clearRouteModel();\n}", "des": "A Route defines the processing used on an inbound message exchange from a specific Endpoint within a CamelContext."}
{"index": 14572, "repo": "camel-api-4.0.0-RC1", "code": "public interface RouteAware {\n\t// Gets the Route\n\tRoute getRoute();\n\t// Injects the Route\n\tvoid setRoute(Route route);\n}", "des": "An interface to represent an object which wishes to be injected with a Route such as Consumer which is the consumer for a route."}
{"index": 14573, "repo": "camel-api-4.0.0-RC1", "code": "public interface RouteConfigurationsBuilder {\n\t// Adds the route configurations from this builder to the CamelContext.\n\tvoid addRouteConfigurationsToCamelContext(CamelContext context);\n\t// Adds or updates the route configurations from this builder to the CamelContext.\n\tvoid updateRouteConfigurationsToCamelContext(CamelContext context);\n}", "des": "A route configurations builder is capable of building route configurations using the builder and model classes."}
{"index": 14574, "repo": "camel-api-4.0.0-RC1", "code": "public interface RouteController extends CamelContextAware, StaticService {\n\t// Adapts this RouteController to the specialized type.\n\t<T extends RouteController>T adapt(Class<T> type);\n\t// Return the list of routes controlled by this controller.\n\tCollection<Route> getControlledRoutes();\n\t// Gets the logging level used for logging route activity (such as starting and stopping routes).\n\tLoggingLevel getLoggingLevel();\n}", "des": "Controller for managing the lifecycle of all the Route's."}
{"index": 14575, "repo": "camel-api-4.0.0-RC1", "code": "public interface RouteError {\n\t// Gets the error.\n\tThrowable getException();\n\t// Gets the phase associated with the error.\n\tRouteError.Phase getPhase();\n\t// Whether the route is regarded as unhealthy.\n\tboolean isUnhealthy();\n}", "des": "The last error that happened during changing the route lifecycle, i.e."}
{"index": 14576, "repo": "camel-api-4.0.0-RC1", "code": "public interface RouteIdAware {\n\t// Gets the route id\n\tString getRouteId();\n\t// Sets the route id\n\tvoid setRouteId(String routeId);\n}", "des": "To allow objects to be injected with the route id"}
{"index": 14577, "repo": "camel-api-4.0.0-RC1", "code": "public interface RoutePolicy {\n\t// Callback invoked when an Exchange is started being routed on the given Route\n\tvoid onExchangeBegin(Route route, Exchange exchange);\n\t// Callback invoked when an Exchange is done being routed, where it started from the given Route\n\tvoid onExchangeDone(Route route, Exchange exchange);\n\t// Callback invoked when the Route is being initialized\n\tvoid onInit(Route route);\n\t// Callback invoked when the Route is being removed from CamelContext\n\tvoid onRemove(Route route);\n}", "des": "Policy for a Route which allows controlling the route at runtime."}
{"index": 14578, "repo": "camel-api-4.0.0-RC1", "code": "public interface RoutesBuilder {\n\t// Adds the routes from this Route Builder to the CamelContext.\n\tvoid addRoutesToCamelContext(CamelContext context);\n\t// Adds the templated routes from this Route Builder to the CamelContext.\n\tvoid addTemplatedRoutesToCamelContext(CamelContext context);\n\t// Adds or updates the routes from this Route Builder to the CamelContext.\n\tSet<String> updateRoutesToCamelContext(CamelContext context);\n}", "des": "A routes builder is capable of building routes using the builder and model classes."}
{"index": 14579, "repo": "camel-api-4.0.0-RC1", "code": "public interface RoutesBuilderLoader extends StaticService, CamelContextAware {\n\t// The supported file extension.\n\tString getSupportedExtension();\n\t// Loads RoutesBuilder from Resource.\n\tRoutesBuilder loadRoutesBuilder(Resource resource);\n\t// Pre-parses the RoutesBuilder from Resource.\n\tdefault void preParseRoute(Resource resource);\n}", "des": "SPI for loading RoutesBuilder from a Resource."}
{"index": 14580, "repo": "camel-api-4.0.0-RC1", "code": "public interface RoutesLoader extends CamelContextAware {\n\t// Find RoutesBuilder from the give list of Resource.\n\tCollection<RoutesBuilder> findRoutesBuilders(Collection<Resource> resources);\n\t// Find RoutesBuilder from the give list of Resource.\n\tCollection<RoutesBuilder> findRoutesBuilders(Collection<Resource> resources, boolean optional);\n\t// Find RoutesBuilder from the give list of Resource.\n\tdefault Collection<RoutesBuilder> findRoutesBuilders(Resource... resources);\n}", "des": "SPI for loading RoutesBuilder from a list of Resource."}
{"index": 14581, "repo": "camel-api-4.0.0-RC1", "code": "public interface RouteStartupOrder {\n\t// Gets the input to this route\n\tConsumer getInput();\n\t// Gets the route\n\tRoute getRoute();\n\t// Gets the services to this route.\n\tList<Service> getServices();\n\t// Get the order this route should be started.\n\tint getStartupOrder();\n}", "des": "Information about a route to be started where we want to control the order in which they are started by CamelContext."}
{"index": 14582, "repo": "camel-api-4.0.0-RC1", "code": "public interface RouteTemplateContext extends HasCamelContext {\n\t// Binds the bean to the repository (if possible).\n\tvoid bind(String id, Class<?> type, Object bean);\n\t// Binds the bean (via a supplier) to the repository (if possible).\n\tvoid bind(String id, Class<?> type, Supplier<Object> bean);\n\t// Binds the bean to the repository (if possible).\n\tdefault void bind(String id, Object bean);\n}", "des": "The context used during creating a Route from a route template."}
{"index": 14583, "repo": "camel-api-4.0.0-RC1", "code": "public interface RouteTemplateParameterSource {\n\t// The parameters for the given route\n\tMap<String,Object> parameters(String routeId);\n\t// Gets the route id's as a set.\n\tSet<String> routeIds();\n}", "des": "Source for parameters used when creating routes from route templates."}
{"index": 14584, "repo": "camel-api-4.0.0-RC1", "code": "public interface RuntimeCamelCatalog extends StaticService, CamelContextAware {\n\t// Creates an endpoint uri in Java style from the information from the properties\n\tString asEndpointUri(String scheme, Map<String,String> properties, boolean encode);\n\t// Returns the component information as JSON format.\n\tString componentJSonSchema(String name);\n}", "des": "Runtime catalog which limited API needed by components that supports ComponentVerifierExtension."}
{"index": 14585, "repo": "camel-api-4.0.0-RC1", "code": "public class RuntimeCamelException extends RuntimeException {\n\t// Wraps the caused exception in a RuntimeCamelException if its not already such an exception.\n\tstatic RuntimeCamelException wrapRuntimeCamelException(Throwable e);\n\t// Wraps the caused exception in a RuntimeCamelException if its not already a runtime exception.\n\tstatic RuntimeException wrapRuntimeException(Throwable e);\n}", "des": "Base class for all Camel unchecked exceptions."}
{"index": 14586, "repo": "camel-api-4.0.0-RC1", "code": "public interface RuntimeConfiguration {\n\t// Gets the delay value\n\tLong getDelayer();\n\t// Gets the option to use when shutting down the route.\n\tShutdownRoute getShutdownRoute();\n\t// Gets the ShutdownRunningTask option in use when shutting down a route.\n\tShutdownRunningTask getShutdownRunningTask();\n\t// Tracing pattern to match which node EIPs to trace.\n\tString getTracingPattern();\n}", "des": "Various runtime configuration options used by CamelContext and Route for cross cutting functions such as tracing, delayer, stream cache and the like."}
{"index": 14587, "repo": "camel-api-4.0.0-RC1", "code": "public interface RuntimeEndpointRegistry extends StaticService {\n\t// Clears the registry\n\tvoid clear();\n\t// Gets all the endpoint uris captured during runtime routing that are in-use of the routes.\n\tList<String> getAllEndpoints(boolean includeInputs);\n\t// Gets all the endpoint uris captured from the given route during runtime routing that are in-use of the routes.\n\tList<String> getEndpointsPerRoute(String routeId, boolean includeInputs);\n}", "des": "A registry which listen for runtime usage of Endpoint during routing in Camel."}
{"index": 14588, "repo": "camel-api-4.0.0-RC1", "code": "public static interface RuntimeEndpointRegistry.Statistic {\n\t// Whether the endpoint is used as input our output\n\tString getDirection();\n\t// Usage of the endpoint, such as how many messages it has received / sent to\n\tlong getHits();\n\t// The route id (if the endpoint is associated with a route)\n\tString getRouteId();\n\t// The endpoint uri\n\tString getUri();\n}", "des": "Statistics gathered about the endpoint."}
{"index": 14589, "repo": "camel-api-4.0.0-RC1", "code": "public interface ScheduledPollConsumerScheduler extends ShutdownableService, CamelContextAware {\n\t// Whether the scheduler has been started.\n\tboolean isSchedulerStarted();\n\t// Initializes this ScheduledPollConsumerScheduler with the associated Consumer.\n\tvoid onInit(Consumer consumer);\n\t// Schedules the task to run.\n\tvoid scheduleTask(Runnable task);\n\t// Starts the scheduler.\n\tvoid startScheduler();\n\t// Attempts to unschedules the last task which was scheduled.\n\tvoid unscheduleTask();\n}", "des": "A pluggable scheduler for org.apache.camel.support.ScheduledPollConsumer consumers."}
{"index": 14590, "repo": "camel-api-4.0.0-RC1", "code": "public class SecureSocketProtocolsParameters extends Object {\n\t// Returns a live reference to the list of secure socket protocol names.\n\tList<String> getSecureSocketProtocol();\n\t// Sets the list of secure socket protocol names.\n\tvoid setSecureSocketProtocol(List<String> secureSocketProtocol);\n}", "des": "Represents a list of TLS/SSL cipher suite names."}
{"index": 14591, "repo": "camel-api-4.0.0-RC1", "code": "public interface SendDynamicAware extends Service, CamelContextAware {\n\t// Creates an optional post Processor that will be executed afterwards when the message has been sent dynamic.\n\tProcessor createPostProcessor(Exchange exchange, SendDynamicAware.DynamicAwareEntry entry);\n\t// Creates the pre Processor that will prepare the Exchange with dynamic details from the given recipient.\n\tProcessor createPreProcessor(Exchange exchange, SendDynamicAware.DynamicAwareEntry entry);\n}", "des": "Used for components that can optimise the usage of org.apache.camel.processor.SendDynamicProcessor (toD) to reuse a static Endpoint and Producer that supports using headers to provide the dynamic parts."}
{"index": 14592, "repo": "camel-api-4.0.0-RC1", "code": "@FunctionalInterface public interface Serializable {\n\t// Serializes this offset into a buffer of bytes\n\tByteBuffer serialize();\n\t// Serializes this offset into a buffer of bytes\n\tdefault ByteBuffer serialize(Object obj);\n}", "des": "An interface that represents resumable objects that can be serialized to a medium"}
{"index": 14593, "repo": "camel-api-4.0.0-RC1", "code": "public interface Service extends AutoCloseable {\n\t// Optional build phase which is executed by frameworks that supports pre-building projects (pre-compile) which allows special optimizations such as camel-quarkus.\n\tdefault void build();\n\t// Delegates to stop() so it can be used in try-with-resources expression.\n\tdefault void close();\n\t// Initialize the service\n\tdefault void init();\n\t// Starts the service\n\tvoid start();\n\t// Stops the service\n\tvoid stop();\n}", "des": "Represents the core lifecycle API for services which can be initialized, started and stopped"}
{"index": 14594, "repo": "camel-api-4.0.0-RC1", "code": "public interface ServiceChooserAware {\n\t// Get the ServiceChooser\n\tServiceChooser getServiceChooser();\n\t// Injects the ServiceChooser\n\tvoid setServiceChooser(ServiceChooser serviceChooser);\n}", "des": "An interface to represent an object which wishes to be injected with a ServiceChooser"}
{"index": 14595, "repo": "camel-api-4.0.0-RC1", "code": "public interface ServiceDefinition {\n\t// Gets the health.\n\tServiceHealth getHealth();\n\t// Gets the IP or hostname of the server hosting the service.\n\tString getHost();\n\t// Gets the service id.\n\tString getId();\n\t// Gets a key/value metadata associated with the service.\n\tMap<String,String> getMetadata();\n\t// Gets the service name.\n\tString getName();\n\t// Gets the port number of the server hosting the service.\n\tint getPort();\n}", "des": "Represents a Service."}
{"index": 14596, "repo": "camel-api-4.0.0-RC1", "code": "public interface ServiceDiscoveryAware {\n\t// Get the ServiceDiscovery\n\tServiceDiscovery getServiceDiscovery();\n\t// Injects the ServiceDiscovery\n\tvoid setServiceDiscovery(ServiceDiscovery serviceDiscovery);\n}", "des": "An interface to represent an object which wishes to be injected with a ServiceDiscovery"}
{"index": 14597, "repo": "camel-api-4.0.0-RC1", "code": "public interface ServiceFilterAware {\n\t// Get the ServiceFilter\n\tServiceFilter getServiceFilter();\n\t// Injects the ServiceFilter\n\tvoid setServiceFilter(ServiceFilter serviceFilter);\n}", "des": "An interface to represent an object which wishes to be injected with a ServiceFilter"}
{"index": 14598, "repo": "camel-api-4.0.0-RC1", "code": "public final class ServiceHelper extends Object {\n\t// Builds the given value if it's a Service or a collection of it.\n\tstatic void buildService(Object value);\n\t// Builds each element of the given services if services itself is not null, otherwise this method would return immediately.\n\tstatic void buildService(Object... services);\n\t// Gathers all child services by navigating the service to recursively gather all child services.\n\tstatic Set<Service> getChildServices(Service service);\n}", "des": "A collection of helper methods for working with Service objects."}
{"index": 14599, "repo": "camel-api-4.0.0-RC1", "code": "public enum ServiceStatus extends Enum<ServiceStatus> implements Serializable {\n\tboolean isInitialized();\n\tboolean isInitializing();\n\tboolean isStartable();\n\tboolean isStarted();\n\tboolean isStarting();\n\tboolean isStoppable();\n\tboolean isStopped();\n\tboolean isStopping();\n\tboolean isSuspendable();\n\tboolean isSuspended();\n\tboolean isSuspending();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ServiceStatus valueOf(String name);\n}", "des": "Represents the status of a Service instance"}
{"index": 14600, "repo": "camel-api-4.0.0-RC1", "code": "public interface SharedInternalProcessor extends Processor {\n\t// Processes the message exchange\n\tdefault void process(Exchange exchange);\n\t// Asynchronous API\n\tboolean process(Exchange exchange, AsyncCallback originalCallback, AsyncProcessor processor, Processor resultProcessor);\n\t// Synchronous API\n\tvoid process(Exchange exchange, AsyncProcessor processor, Processor resultProcessor);\n}", "des": "A Shared (thread safe) internal Processor that Camel routing engine used during routing for cross cutting functionality such as: Execute UnitOfWork Keeping track which route currently is being routed Execute RoutePolicy Gather JMX performance statics Tracing Debugging Message History Stream Caching Transformer ..."}
{"index": 14601, "repo": "camel-api-4.0.0-RC1", "code": "public interface ShutdownAware extends ShutdownPrepared {\n\t// To defer shutdown during first phase of shutdown.\n\tboolean deferShutdown(ShutdownRunningTask shutdownRunningTask);\n\t// Gets the number of pending exchanges.\n\tint getPendingExchangesSize();\n}", "des": "Allows Consumer to fine grained control on shutdown which mostly have to cater for in-memory based components."}
{"index": 14602, "repo": "camel-api-4.0.0-RC1", "code": "public enum ShutdownRoute extends Enum<ShutdownRoute> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ShutdownRoute valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ShutdownRoute[] values();\n}", "des": "Represents the options available when shutting down routes."}
{"index": 14603, "repo": "camel-api-4.0.0-RC1", "code": "public enum ShutdownRunningTask extends Enum<ShutdownRunningTask> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ShutdownRunningTask valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ShutdownRunningTask[] values();\n}", "des": "Represents the kind of options for what to do with the current task when shutting down."}
{"index": 14604, "repo": "camel-api-4.0.0-RC1", "code": "public interface ShutdownStrategy extends StaticService {\n\t// Gets the logging level used for logging shutdown activity (such as starting and stopping routes).\n\tLoggingLevel getLoggingLevel();\n\t// Gets the timeout.\n\tlong getTimeout();\n\t// Gets the time unit used\n\tTimeUnit getTimeUnit();\n\t// Whether a timeout has occurred during a shutdown.\n\tboolean hasTimeoutOccurred();\n\t// Whether the shutdown strategy is forcing to shutdown\n\tboolean isForceShutdown();\n}", "des": "Pluggable shutdown strategy executed during shutdown of Camel and the active routes."}
{"index": 14605, "repo": "camel-api-4.0.0-RC1", "code": "public class SSLContextClientParameters extends BaseSSLContextParameters {\n\tvoid addAllSniHostNames(List<String> sniHostNames);\n\t// Configures the actual SSLContext itself with direct setter calls.\n\tprotected void configureSSLContext(SSLContext context);\n\t// Returns a flag indicating if default values should be applied in the event that no other property of the instance configures a particular aspect of the entity produced by the instance.\n\tprotected boolean getAllowPassthrough();\n}", "des": "Configuration model for client side JSSE options."}
{"index": 14606, "repo": "camel-api-4.0.0-RC1", "code": "public class SSLContextParameters extends BaseSSLContextParameters {\n\t// Configures the actual SSLContext itself with direct setter calls.\n\tprotected void configureSSLContext(SSLContext context);\n\t// Creates an SSLContext based on the related configuration options of this instance.\n\tSSLContext createSSLContext(CamelContext camelContext);\n\tString getCertAlias();\n\tSSLContextClientParameters getClientParameters();\n\tKeyManagersParameters getKeyManagers();\n\tString getProvider();\n}", "des": "Represents SSLContext configuration options used in instantiating an SSLContext instance."}
{"index": 14607, "repo": "camel-api-4.0.0-RC1", "code": "public interface SSLContextParametersAware extends CamelContextAware {\n\t// Determine if the implementing object is using global SSL context parameters.\n\tboolean isUseGlobalSslContextParameters();\n\t// Returns the global SSLContextParameters if enabled on the implementing object, null otherwise.\n\tdefault SSLContextParameters retrieveGlobalSslContextParameters();\n\t// Enable usage of global SSL context parameters.\n\tvoid setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);\n}", "des": "Indicates that an object is able to use the global SSLContextParameters if configured."}
{"index": 14608, "repo": "camel-api-4.0.0-RC1", "code": "public interface StartupListener {\n\t// Callback invoked when the CamelContext has been fully started.\n\tdefault void onCamelContextFullyStarted(CamelContext context, boolean alreadyStarted);\n\t// Callback invoked when the CamelContext is about to be fully started (not started yet).\n\tvoid onCamelContextStarted(CamelContext context, boolean alreadyStarted);\n\t// Callback invoked when the CamelContext is being started.\n\tdefault void onCamelContextStarting(CamelContext context, boolean alreadyStarted);\n}", "des": "Allows objects to be notified when CamelContext has almost done all work when starting."}
{"index": 14609, "repo": "camel-api-4.0.0-RC1", "code": "public interface StartupStep {\n\t// Ends the step.\n\tvoid endStep();\n\t// Gets the begin time (optional).\n\tlong getBeginTime();\n\t// Description of the step\n\tString getDescription();\n\t// The id of the step\n\tint getId();\n\t// The step level (sub step of previous steps)\n\tint getLevel();\n\t// Name of the step\n\tString getName();\n\t// The id of the parent step\n\tint getParentId();\n\t// The source class type of the step\n\tString getType();\n}", "des": "Recording state of steps during startup to capture execution time, and being able to emit events to diagnostic tools such as Java Flight Recorder."}
{"index": 14610, "repo": "camel-api-4.0.0-RC1", "code": "public interface StartupStepRecorder extends StaticService {\n\t// Beings a new step.\n\tStartupStep beginStep(Class<?> type, String name, String description);\n\t// Ends the step\n\tvoid endStep(StartupStep step);\n\t// To filter our sub steps at a maximum depth\n\tint getMaxDepth();\n\tString getRecordingDir();\n\tString getRecordingProfile();\n\t// How long time to run the startup recorder.\n\tlong getStartupRecorderDuration();\n\t// Whether recording is enabled\n\tboolean isEnabled();\n}", "des": "To record StartupStep during startup to allow to capture diagnostic information to help troubleshoot Camel applications via various tooling such as Java Flight Recorder."}
{"index": 14611, "repo": "camel-api-4.0.0-RC1", "code": "public enum StartupSummaryLevel extends Enum<StartupSummaryLevel> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic StartupSummaryLevel valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic StartupSummaryLevel[] values();\n}", "des": "Controls the level of information logged during startup (and shutdown) of CamelContext."}
{"index": 14612, "repo": "camel-api-4.0.0-RC1", "code": "public interface StatefulService extends SuspendableService, ShutdownableService {\n\t// Returns the current status\n\tServiceStatus getStatus();\n\t// Helper methods so the service knows if it should keep running.\n\tboolean isRunAllowed();\n\t// Whether the service is started\n\tboolean isStarted();\n\t// Whether the service is starting\n\tboolean isStarting();\n\t// Whether the service is stopped\n\tboolean isStopped();\n\t// Whether the service is stopping\n\tboolean isStopping();\n}", "des": "A Service which has all the lifecycle events and offers details about its current state."}
{"index": 14613, "repo": "camel-api-4.0.0-RC1", "code": "public interface StateRepository<K,V> extends Service {\n\t// Gets the state value for the given key.\n\tV getState(K key);\n\t// Sets the state value for the given key.\n\tvoid setState(K key, V value);\n}", "des": "This StateRepository holds a set of key/value pairs for defining a particular state of a component."}
{"index": 14614, "repo": "camel-api-4.0.0-RC1", "code": "public interface StaticExpression extends Expression {\n\t// Gets the constant value\n\tObject getValue();\n\t// Sets the constant value\n\tvoid setValue(Object value);\n}", "des": "Marked if the Expression or Predicate is based from a constant value (ie is static)."}
{"index": 14615, "repo": "camel-api-4.0.0-RC1", "code": "public interface StreamCache {\n\t// Create a copy of the stream.\n\tStreamCache copy(Exchange exchange);\n\t// Whether this StreamCache is in memory only or spooled to persistent storage such as files.\n\tboolean inMemory();\n\t// Gets the length of the cached stream.\n\tlong length();\n\t// Read position\n\tlong position();\n\t// Resets the StreamCache for a new stream consumption.\n\tvoid reset();\n\t// Writes the stream to the given output\n\tvoid writeTo(OutputStream os);\n}", "des": "Tagging interface to indicate that a type is capable of caching the underlying data stream."}
{"index": 14616, "repo": "camel-api-4.0.0-RC1", "code": "public interface StreamCachingStrategy extends StaticService {\n\t// Adds the StreamCachingStrategy.SpoolRule rule to be used.\n\tvoid addSpoolRule(StreamCachingStrategy.SpoolRule rule);\n\t// Caches the body aas a StreamCache.\n\tStreamCache cache(Exchange exchange);\n\t// Caches the body aas a StreamCache.\n\tStreamCache cache(Message message);\n\tint getBufferSize();\n\tString getSpoolCipher();\n\tFile getSpoolDirectory();\n\tlong getSpoolThreshold();\n}", "des": "Strategy for using stream caching."}
{"index": 14617, "repo": "camel-api-4.0.0-RC1", "code": "public static enum StreamCachingStrategy.SpoolUsedHeapMemoryLimit extends Enum<StreamCachingStrategy.SpoolUsedHeapMemoryLimit> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic StreamCachingStrategy.SpoolUsedHeapMemoryLimit valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic StreamCachingStrategy.SpoolUsedHeapMemoryLimit[] values();\n}", "des": "Used for selecting if the memory limit is committed or maximum heap memory setting."}
{"index": 14618, "repo": "camel-api-4.0.0-RC1", "code": "public static interface StreamCachingStrategy.Statistics {\n\t// Gets the average number of bytes per cached stream for in-memory stream caches.\n\tlong getCacheMemoryAverageSize();\n\t// Gets the counter for number of in-memory StreamCache created.\n\tlong getCacheMemoryCounter();\n\t// Gets the total accumulated number of bytes which has been stream cached for in-memory stream caches.\n\tlong getCacheMemorySize();\n}", "des": "Utilization statistics of stream caching."}
{"index": 14619, "repo": "camel-api-4.0.0-RC1", "code": "public interface SupervisingRouteController extends RouteController {\n\tlong getBackOffDelay();\n\tlong getBackOffMaxAttempts();\n\tlong getBackOffMaxDelay();\n\tlong getBackOffMaxElapsedTime();\n\tdouble getBackOffMultiplier();\n\tString getExcludeRoutes();\n\t// Return the list of routes that have failed all attempts to startup and are now exhausted.\n\tCollection<Route> getExhaustedRoutes();\n\tString getIncludeRoutes();\n\tlong getInitialDelay();\n}", "des": "A supervising capable RouteController that delays the startup of the routes after the camel context startup and takes control of starting the routes in a safe manner."}
{"index": 14620, "repo": "camel-api-4.0.0-RC1", "code": "public interface SuspendableService extends Service {\n\t// Tests whether the service is suspended or not.\n\tboolean isSuspended();\n\t// Resumes the service.\n\tvoid resume();\n\t// Suspends the service.\n\tvoid suspend();\n}", "des": "A Service which is also capable of suspending and resuming."}
{"index": 14621, "repo": "camel-api-4.0.0-RC1", "code": "public interface Synchronization {\n\t// Get an optional SynchronizationRouteAware for this synchronization\n\tdefault SynchronizationRouteAware getRouteSynchronization();\n\t// Called when the processing of the message exchange is complete\n\tvoid onComplete(Exchange exchange);\n\t// Called when the processing of the message exchange has failed for some reason.\n\tvoid onFailure(Exchange exchange);\n}", "des": "Provides a hook for custom Processor or Component instances to respond to completed or failed processing of an Exchange rather like Spring's TransactionSynchronization"}
{"index": 14622, "repo": "camel-api-4.0.0-RC1", "code": "public interface SynchronizationRouteAware {\n\t// Invoked after the Exchange has been routed by the given route.\n\tvoid onAfterRoute(Route route, Exchange exchange);\n\t// Invoked before the Exchange is being routed by the given route.\n\tvoid onBeforeRoute(Route route, Exchange exchange);\n}", "des": "An extension to Synchronization which provides route awareness capabilities."}
{"index": 14623, "repo": "camel-api-4.0.0-RC1", "code": "public interface SynchronizationVetoable extends Synchronization {\n\t// Whether or not handover this synchronization is allowed.\n\tboolean allowHandover();\n\t// A method to perform optional housekeeping when a Synchronization is being handed over.\n\tvoid beforeHandover(Exchange target);\n}", "des": "A vetoable Synchronization."}
{"index": 14624, "repo": "camel-api-4.0.0-RC1", "code": "public interface ThreadPoolFactory {\n\t// Creates a new cached thread pool\n\tExecutorService newCachedThreadPool(ThreadFactory threadFactory);\n\t// Create a scheduled thread pool using the given thread pool profile\n\tScheduledExecutorService newScheduledThreadPool(ThreadPoolProfile profile, ThreadFactory threadFactory);\n\t// Create a thread pool using the given thread pool profile\n\tExecutorService newThreadPool(ThreadPoolProfile profile, ThreadFactory threadFactory);\n}", "des": "Creates ExecutorService and ScheduledExecutorService objects that work with a thread pool for a given ThreadPoolProfile and ThreadFactory."}
{"index": 14625, "repo": "camel-api-4.0.0-RC1", "code": "public class ThreadPoolProfile extends Object implements Serializable, Cloneable {\n\t// Overwrites each attribute that is null with the attribute from defaultProfile\n\tvoid addDefaults(ThreadPoolProfile defaultProfile);\n\tThreadPoolProfile clone();\n\t// Gets whether to allow core threads to timeout\n\tBoolean getAllowCoreThreadTimeOut();\n\t// Gets the id of this profile\n\tString getId();\n\t// Gets the keep alive time for inactive threads\n\tLong getKeepAliveTime();\n}", "des": "A profile which defines thread pool settings."}
{"index": 14626, "repo": "camel-api-4.0.0-RC1", "code": "public interface TimeoutMap<K,V> extends Service {\n\t// Assign the (singular) TimeoutMap.Listener\n\tvoid addListener(TimeoutMap.Listener<K,V> listener);\n\t// Looks up the value in the map by the given key.\n\tV get(K key);\n\t// Adds the key value pair into the map such that some time after the given timeout the entry will be evicted\n\tV put(K key, V value, long timeoutMillis);\n}", "des": "Represents a map of values which timeout after a period of inactivity."}
{"index": 14627, "repo": "camel-api-4.0.0-RC1", "code": "public interface Tracer extends StaticService {\n\t// To use a custom exchange formatter for formatting the output of the Exchange in the trace logs.\n\tExchangeFormatter getExchangeFormatter();\n\t// Number of traced messages\n\tlong getTraceCounter();\n\t// Tracing pattern to match which node EIPs to trace.\n\tString getTracePattern();\n\t// Whether the tracer is enabled\n\tboolean isEnabled();\n\t// Whether the tracer is standby.\n\tboolean isStandby();\n}", "des": "SPI for tracing messages."}
{"index": 14628, "repo": "camel-api-4.0.0-RC1", "code": "public abstract class Transformer extends ServiceSupport implements CamelContextAware {\n\t// Implementations override this method to support customized start/stop.\n\tprotected void doStart();\n\t// Implementations override this method to support customized start/stop.\n\tprotected void doStop();\n\t// Get the CamelContext\n\tCamelContext getCamelContext();\n\t// Get 'from' data type.\n\tDataType getFrom();\n\t// Get a data model which is supported by this transformer.\n\tString getModel();\n}", "des": "Transformer performs message transformation according to the declared data type."}
{"index": 14629, "repo": "camel-api-4.0.0-RC1", "code": "public interface TransformerRegistry<K> extends Map<K,Transformer>, StaticService {\n\t// Cleanup the cache (purging stale entries)\n\tvoid cleanUp();\n\t// Number of transformers in the dynamic registry\n\tint dynamicSize();\n\t// Maximum number of entries to store in the dynamic registry\n\tint getMaximumCacheSize();\n\t// Whether the given transformer is stored in the dynamic cache\n\tboolean isDynamic(String scheme);\n}", "des": "Registry to cache transformers in memory."}
{"index": 14630, "repo": "camel-api-4.0.0-RC1", "code": "public class TypeConversionException extends RuntimeCamelException {\n\t// Returns an error message for type conversion failed.\n\tstatic String createMessage(Object value, Class<?> type, Throwable cause);\n\t// Returns the required from type.\n\tClass<?> getFromType();\n\t// Returns the required to type\n\tClass<?> getToType();\n\t// Returns the value which could not be converted\n\tObject getValue();\n}", "des": "Exception when failing during type conversion."}
{"index": 14631, "repo": "camel-api-4.0.0-RC1", "code": "public interface TypeConverter {\n\t// Whether the type converter allows returning null as a valid response.\n\tboolean allowNull();\n\t// Converts the value to the specified type\n\t<T> T convertTo(Class<T> type, Object value);\n\t// Converts the value to the specified type in the context of an exchange\n\t<T> T convertTo(Class<T> type, Exchange exchange, Object value);\n\t// Converts the value to the specified type\n\t<T> T mandatoryConvertTo(Class<T> type, Object value);\n}", "des": "A pluggable strategy to be able to convert objects to different types such as to and from String, InputStream/OutputStream, Reader/Writer, Document, byte[], ByteBuffer etc"}
{"index": 14632, "repo": "camel-api-4.0.0-RC1", "code": "public enum TypeConverterExists extends Enum<TypeConverterExists> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TypeConverterExists valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TypeConverterExists[] values();\n}", "des": "What to do if attempting to add a duplicate type converter"}
{"index": 14633, "repo": "camel-api-4.0.0-RC1", "code": "public interface TypeConverterRegistry extends StaticService, CamelContextAware {\n\t// Registers a new set of type converters that are bulked together into a single BulkTypeConverters class.\n\tvoid addBulkTypeConverters(BulkTypeConverters bulkTypeConverters);\n\t// Registers a new fallback type converter\n\tvoid addFallbackTypeConverter(TypeConverter typeConverter, boolean canPromote);\n\t// Registers a new type converter.\n\tvoid addTypeConverter(Class<?> toType, Class<?> fromType, TypeConverter typeConverter);\n}", "des": "Registry for type converters."}
{"index": 14634, "repo": "camel-api-4.0.0-RC1", "code": "public static interface TypeConverterRegistry.Statistics {\n\t// Number of type conversion attempts\n\tlong getAttemptCounter();\n\t// Number of failed attempts during type conversion\n\tlong getFailedCounter();\n\t// Number of successful conversions\n\tlong getHitCounter();\n\t// Number of attempts which cannot be converted as no suitable type converter exists\n\tlong getMissCounter();\n\t// Number of noop attempts (no type conversion was needed)\n\tlong getNoopCounter();\n}", "des": "Utilization statistics of the registry."}
{"index": 14635, "repo": "camel-api-4.0.0-RC1", "code": "public interface UnitOfWork {\n\t// Adds a synchronization hook\n\tvoid addSynchronization(Synchronization synchronization);\n\t// Strategy for work to be executed after the processing\n\tvoid afterProcess(Processor processor, Exchange exchange, AsyncCallback callback, boolean doneSync);\n\t// Invoked when this unit of work is done being routed by the given route.\n\tvoid afterRoute(Exchange exchange, Route route);\n}", "des": "An object representing the unit of work processing an Exchange which allows the use of Synchronization hooks."}
{"index": 14636, "repo": "camel-api-4.0.0-RC1", "code": "public interface UnitOfWorkFactory extends AfterPropertiesConfigured {\n\t// Callback invoked after the element have configured its properties.\n\tdefault void afterPropertiesConfigured(CamelContext camelContext);\n\t// Creates a new UnitOfWork\n\tUnitOfWork createUnitOfWork(Exchange exchange);\n}", "des": "Factory to create UnitOfWork."}
{"index": 14637, "repo": "camel-api-4.0.0-RC1", "code": "public interface UuidGenerator {\n\t// Generates an UUID string representation to be used as exchange id.\n\tdefault String generateExchangeUuid();\n\t// Generates an UUID string representation.\n\tString generateUuid();\n}", "des": "Generator to generate UUID strings."}
{"index": 14638, "repo": "camel-api-4.0.0-RC1", "code": "public abstract class Validator extends ServiceSupport implements CamelContextAware {\n\t// Implementations override this method to support customized start/stop.\n\tprotected void doStart();\n\t// Implementations override this method to support customized start/stop.\n\tprotected void doStop();\n\t// Get the CamelContext\n\tCamelContext getCamelContext();\n\t// Get 'from' data type.\n\tDataType getType();\n\t// Injects the CamelContext\n\tvoid setCamelContext(CamelContext context);\n}", "des": "Validator performs message content validation according to the declared data type."}
{"index": 14639, "repo": "camel-api-4.0.0-RC1", "code": "public interface ValidatorRegistry<K> extends Map<K,Validator>, StaticService {\n\t// Cleanup the cache (purging stale entries)\n\tvoid cleanUp();\n\t// Number of validators in the dynamic registry\n\tint dynamicSize();\n\t// Maximum number of entries to store in the dynamic registry\n\tint getMaximumCacheSize();\n\t// Whether the given Validator is stored in the dynamic cache\n\tboolean isDynamic(DataType type);\n\t// Whether the given Validator is stored in the static cache\n\tboolean isStatic(DataType type);\n}", "des": "Registry to cache validators in memory."}
{"index": 14640, "repo": "camel-api-4.0.0-RC1", "code": "public class VaultConfiguration extends Object {\n\t// AWS Vault Configuration\n\tAwsVaultConfiguration aws();\n\t// Azure Vault Configuration\n\tAzureVaultConfiguration azure();\n\t// GCP Vault Configuration\n\tGcpVaultConfiguration gcp();\n\tAwsVaultConfiguration getAwsVaultConfiguration();\n\tAzureVaultConfiguration getAzureVaultConfiguration();\n\tGcpVaultConfiguration getGcpVaultConfiguration();\n\tHashicorpVaultConfiguration getHashicorpVaultConfiguration();\n}", "des": "Base configuration for access to Vaults."}
{"index": 14641, "repo": "camel-api-4.0.0-RC1", "code": "public enum WaitForTaskToComplete extends Enum<WaitForTaskToComplete> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic WaitForTaskToComplete valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic WaitForTaskToComplete[] values();\n}", "des": "Represent the kinds of options for wait for tasks to complete."}
{"index": 14642, "repo": "camel-api-4.0.0-RC1", "code": "public interface WrappedFile<T> {\n\t// Gets the content of the file.\n\tObject getBody();\n\t// Gets the file.\n\tT getFile();\n}", "des": "Wraps a file."}
{"index": 14643, "repo": "camel-api-4.0.0-RC1", "code": "public interface WritableHealthCheckRepository extends HealthCheckRepository {\n\t// Adds a HealthCheck to the repository.\n\tvoid addHealthCheck(HealthCheck healthCheck);\n\t// Removes a HealthCheck from the repository.\n\tvoid removeHealthCheck(HealthCheck healthCheck);\n}", "des": "An interface to represent an object which wishes to be injected with the HealthCheck"}
{"index": 14644, "repo": "spring-rabbit-3.0.6", "code": "public static enum AbstractConnectionFactory.AddressShuffleMode extends Enum<AbstractConnectionFactory.AddressShuffleMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AbstractConnectionFactory.AddressShuffleMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AbstractConnectionFactory.AddressShuffleMode[] values();\n}", "des": "The mode used to shuffle the addresses."}
{"index": 14645, "repo": "spring-rabbit-3.0.6", "code": "public abstract class AbstractRabbitListenerContainerFactory<C extends AbstractMessageListenerContainer> extends BaseRabbitListenerContainerFactory<C> implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware {\n\t// Create an empty container instance.\n\tprotected abstract C createContainerInstance();\n\t// Create a MessageListenerContainer for the given RabbitListenerEndpoint.\n\tC createListenerContainer(RabbitListenerEndpoint endpoint);\n}", "des": "RabbitListenerContainerFactory for Spring's base container implementation."}
{"index": 14646, "repo": "spring-rabbit-3.0.6", "code": "public abstract class AbstractRabbitListenerEndpoint extends Object implements RabbitListenerEndpoint, org.springframework.beans.factory.BeanFactoryAware {\n\t// Create a MessageListener that is able to serve this endpoint for the specified container.\n\tprotected abstract org.springframework.amqp.core.MessageListener createMessageListener(MessageListenerContainer container);\n\t// Override the container factory's AcknowledgeMode.\n\torg.springframework.amqp.core.AcknowledgeMode getAckMode();\n}", "des": "Base model for a Rabbit listener endpoint."}
{"index": 14647, "repo": "spring-rabbit-3.0.6", "code": "@Plugin(name=\"RabbitMQ\", category=\"Core\", elementType=\"appender\", printObject=true) public class AmqpAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {\n\tvoid append(org.apache.logging.log4j.core.LogEvent event);\n\tprotected void doSend(AmqpAppender.Event event, org.apache.logging.log4j.core.LogEvent logEvent, org.springframework.amqp.core.MessageProperties amqpProps);\n\t// Return the number of events waiting to be sent.\n\tint getQueuedEventCount();\n}", "des": "A Log4j 2 appender that publishes logging events to an AMQP Exchange."}
{"index": 14648, "repo": "spring-rabbit-3.0.6", "code": "public class AmqpAppender extends ch.qos.logback.core.AppenderBase<ch.qos.logback.classic.spi.ILoggingEvent> {\n\tprotected void append(ch.qos.logback.classic.spi.ILoggingEvent event);\n\t// Configure the RabbitConnectionFactoryBean.\n\tprotected void configureRabbitConnectionFactory(RabbitConnectionFactoryBean factoryBean);\n\t// Subclasses can override this method to inject a custom queue implementation.\n\tprotected BlockingQueue<AmqpAppender.Event> createEventQueue();\n}", "des": "A Logback appender that publishes logging events to an AMQP Exchange."}
{"index": 14649, "repo": "spring-rabbit-3.0.6", "code": "protected static class AmqpAppender.AmqpManager extends org.apache.logging.log4j.core.appender.AbstractManager {\n\t// Configure the RabbitConnectionFactoryBean.\n\tprotected void configureRabbitConnectionFactory(RabbitConnectionFactoryBean factoryBean);\n\t// Create the ConnectionFactory.\n\tprotected com.rabbitmq.client.ConnectionFactory createRabbitConnectionFactory();\n\tprotected boolean releaseSub(long timeout, TimeUnit timeUnit);\n\tprotected void setUpExchangeDeclaration();\n}", "des": "Manager class for the appender."}
{"index": 14650, "repo": "spring-rabbit-3.0.6", "code": "public class BatchingRabbitTemplate extends RabbitTemplate {\n\t// Perform additional start actions.\n\tvoid doStart();\n\t// Perform additional stop actions.\n\tvoid doStop();\n\t// Flush any partial in-progress batches.\n\tvoid flush();\n\tboolean isRunning();\n\t// Send a message to a specific exchange with a specific routing key.\n\tvoid send(String exchange, String routingKey, org.springframework.amqp.core.Message message, CorrelationData correlationData);\n}", "des": "A RabbitTemplate that permits batching individual messages into a larger message."}
{"index": 14651, "repo": "spring-rabbit-3.0.6", "code": "public interface BatchingStrategy {\n\t// Add a message to the batch and optionally release the batch.\n\tMessageBatch addToBatch(String exchange, String routingKey, org.springframework.amqp.core.Message message);\n\t// Return true if this strategy can decode a batch of messages from a message body.\n\tdefault boolean canDebatch(org.springframework.amqp.core.MessageProperties properties);\n}", "des": "Strategy for batching messages."}
{"index": 14652, "repo": "spring-rabbit-3.0.6", "code": "public class BlockingQueueConsumer extends Object {\n\tprotected void basicCancel();\n\tprotected void basicCancel(boolean expected);\n\tprotected boolean cancelled();\n\t// Clear the delivery tags when rolling back with an external transaction manager.\n\tvoid clearDeliveryTags();\n\t// Perform a commit or message acknowledgement, as appropriate.\n\tboolean commitIfNecessary(boolean localTx);\n\tvoid forceCloseAndClearQueue();\n\torg.springframework.util.backoff.BackOffExecution getBackOffExecution();\n}", "des": "Specialized consumer encapsulating knowledge of the broker connections and having its own lifecycle (start and stop)."}
{"index": 14653, "repo": "spring-rabbit-3.0.6", "code": "public class BrokerEvent extends org.springframework.amqp.event.AmqpEvent {\n\t// Properties of the event MessageProperties.getHeaders().\n\tMap<String,Object> getEventProperties();\n\t// The event type (MessageProperties.getReceivedRoutingKey()).\n\tString getEventType();\n\t// The complete MessageProperties from the event representing the event.\n\torg.springframework.amqp.core.MessageProperties getMessageProperties();\n}", "des": "Represents a broker event generated by the Event Exchange Plugin (https://www.rabbitmq.com/event-exchange.html)."}
{"index": 14654, "repo": "spring-rabbit-3.0.6", "code": "public class BrokerEventListener extends Object implements org.springframework.amqp.core.MessageListener, org.springframework.context.ApplicationEventPublisherAware, ConnectionListener, org.springframework.context.SmartLifecycle {\n\t// Return any exception thrown when attempting to bind the queue to the event exchange.\n\tException getBindingsFailedException();\n\tint getPhase();\n\tboolean isAutoStartup();\n\tboolean isRunning();\n}", "des": "When the event-exchange-plugin is enabled (see https://www.rabbitmq.com/event-exchange.html), if an object of this type is declared as a bean, selected events will be published as BrokerEvents."}
{"index": 14655, "repo": "spring-rabbit-3.0.6", "code": "public static enum CachingConnectionFactory.CacheMode extends Enum<CachingConnectionFactory.CacheMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CachingConnectionFactory.CacheMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CachingConnectionFactory.CacheMode[] values();\n}", "des": "The cache mode."}
{"index": 14656, "repo": "spring-rabbit-3.0.6", "code": "public static enum CachingConnectionFactory.ConfirmType extends Enum<CachingConnectionFactory.ConfirmType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CachingConnectionFactory.ConfirmType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CachingConnectionFactory.ConfirmType[] values();\n}", "des": "The type of publisher confirms to use."}
{"index": 14657, "repo": "spring-rabbit-3.0.6", "code": "@FunctionalInterface public interface ChannelListener {\n\t// Called when a new channel is created.\n\tvoid onCreate(com.rabbitmq.client.Channel channel, boolean transactional);\n\t// Called when the underlying RabbitMQ channel is closed for any reason.\n\tdefault void onShutDown(com.rabbitmq.client.ShutdownSignalException signal);\n}", "des": "A listener for new channel creation and destruction."}
{"index": 14658, "repo": "spring-rabbit-3.0.6", "code": "public interface ChannelProxy extends com.rabbitmq.client.Channel, org.springframework.aop.RawTargetAccess {\n\t// Return the target Channel of this proxy.\n\tcom.rabbitmq.client.Channel getTargetChannel();\n\t// Return true if confirms are selected on this channel.\n\tdefault boolean isConfirmSelected();\n\t// Return true if publisher confirms are enabled.\n\tdefault boolean isPublisherConfirms();\n\t// Return whether this channel has transactions enabled txSelect().\n\tboolean isTransactional();\n}", "des": "Subinterface of Channel to be implemented by Channel proxies."}
{"index": 14659, "repo": "spring-rabbit-3.0.6", "code": "public final class ClosingRecoveryListener extends Object implements com.rabbitmq.client.RecoveryListener {\n\t// Add a listener if necessary so we can immediately close an autorecovered channel if necessary since the actual consumer will no longer exist.\n\tstatic void addRecoveryListenerIfNecessary(com.rabbitmq.client.Channel channel);\n\tvoid handleRecovery(com.rabbitmq.client.Recoverable recoverable);\n\tvoid handleRecoveryStarted(com.rabbitmq.client.Recoverable recoverable);\n}", "des": "A RecoveryListener that closes the recovered channel, to avoid orphaned consumers."}
{"index": 14660, "repo": "spring-rabbit-3.0.6", "code": "public class CompositeConnectionListener extends Object implements ConnectionListener {\n\tvoid addDelegate(ConnectionListener delegate);\n\tvoid clearDelegates();\n\t// Called when a connection is closed.\n\tvoid onClose(Connection connection);\n\t// Called when a new connection is established.\n\tvoid onCreate(Connection connection);\n\t// Called when a connection couldn't be established.\n\tvoid onFailed(Exception exception);\n}", "des": "A composite listener that invokes its delegages in turn."}
{"index": 14661, "repo": "spring-rabbit-3.0.6", "code": "public class ConditionalRejectingErrorHandler extends Object implements org.springframework.util.ErrorHandler {\n\t// Return true if there is already an AmqpRejectAndDontRequeueException present in the cause chain.\n\tprotected boolean causeChainContainsARADRE(Throwable t);\n\t// Return the exception strategy.\n\tprotected FatalExceptionStrategy getExceptionStrategy();\n}", "des": "ErrorHandler that conditionally wraps the Exception in an AmqpRejectAndDontRequeueException if the configured rejection strategy determines that the message is fatal and should not be requeued."}
{"index": 14662, "repo": "spring-rabbit-3.0.6", "code": "public static class ConditionalRejectingErrorHandler.DefaultExceptionStrategy extends Object implements FatalExceptionStrategy {\n\tboolean isFatal(Throwable t);\n\t// Subclasses can override this to add custom exceptions.\n\tprotected boolean isUserCauseFatal(Throwable cause);\n\t// Log the fatal ListenerExecutionFailedException at WARN level, excluding stack trace.\n\tprotected void logFatalException(ListenerExecutionFailedException t, Throwable cause);\n}", "des": "Default implementation of FatalExceptionStrategy."}
{"index": 14663, "repo": "spring-rabbit-3.0.6", "code": "public interface ConnectionFactory {\n\tvoid addConnectionListener(ConnectionListener listener);\n\tvoid clearConnectionListeners();\n\tConnection createConnection();\n\tString getHost();\n\tint getPort();\n\t// Return a separate connection factory for publishers (if implemented).\n\tdefault ConnectionFactory getPublisherConnectionFactory();\n\tString getUsername();\n\tString getVirtualHost();\n\t// Return true if publisher confirms are enabled.\n\tdefault boolean isPublisherConfirms();\n}", "des": "An interface based ConnectionFactory for creating Connections."}
{"index": 14664, "repo": "spring-rabbit-3.0.6", "code": "public class ConnectionFactoryContextWrapper extends Object {\n\t// Execute a Callable binding the given ConnectionFactory and finally unbinding it.\n\t<T> T call(String contextName, Callable<T> callable);\n\t// Execute a Callable binding to the default ConnectionFactory and finally unbinding it.\n\t<T> T call(Callable<T> callable);\n\t// Execute a Runnable binding to the default ConnectionFactory and finally unbinding it.\n\tvoid run(Runnable runnable);\n}", "des": "Helper class to handle ConnectionFactory context binding and unbinding when executing instructions."}
{"index": 14665, "repo": "spring-rabbit-3.0.6", "code": "public final class ConnectionFactoryUtils extends Object {\n\tstatic RabbitResourceHolder bindResourceToTransaction(RabbitResourceHolder resourceHolder, ConnectionFactory connectionFactory, boolean synched);\n\t// When using transaction synchronization, call this method after the transaction commits to verify that the RabbitMQ transaction committed.\n\tstatic void checkAfterCompletion();\n}", "des": "Helper class for managing a Spring based Rabbit ConnectionFactory, in particular for obtaining transactional Rabbit resources for a given ConnectionFactory."}
{"index": 14666, "repo": "spring-rabbit-3.0.6", "code": "public static interface ConnectionFactoryUtils.ResourceFactory {\n\t// Create a new RabbitMQ Session for registration with a RabbitResourceHolder.\n\tcom.rabbitmq.client.Channel createChannel(Connection con);\n\t// Create a new RabbitMQ Connection for registration with a RabbitResourceHolder.\n\tConnection createConnection();\n\t// Fetch an appropriate Channel from the given RabbitResourceHolder.\n\tcom.rabbitmq.client.Channel getChannel(RabbitResourceHolder holder);\n}", "des": "Callback interface for resource creation."}
{"index": 14667, "repo": "spring-rabbit-3.0.6", "code": "@FunctionalInterface public interface ConnectionListener {\n\t// Called when a connection is closed.\n\tdefault void onClose(Connection connection);\n\t// Called when a new connection is established.\n\tvoid onCreate(Connection connection);\n\t// Called when a connection couldn't be established.\n\tdefault void onFailed(Exception exception);\n\t// Called when a connection is force closed.\n\tdefault void onShutDown(com.rabbitmq.client.ShutdownSignalException signal);\n}", "des": "A listener for connection creation and closing."}
{"index": 14668, "repo": "spring-rabbit-3.0.6", "code": "public class ConsumeOkEvent extends org.springframework.amqp.event.AmqpEvent {\n\t// Obtain the consumer tag assigned to the consumer.\n\tString getConsumerTag();\n\t// Obtain the queue name a consumer has been subscribed.\n\tString getQueue();\n}", "des": "An AmqpEvent emitted by the listener container when consumer is subscribed to the queue."}
{"index": 14669, "repo": "spring-rabbit-3.0.6", "code": "public final class ConsumerChannelRegistry extends Object {\n\t// See registerConsumerChannel.\n\tstatic com.rabbitmq.client.Channel getConsumerChannel();\n\t// See registerConsumerChannel.\n\tstatic com.rabbitmq.client.Channel getConsumerChannel(ConnectionFactory connectionFactory);\n}", "des": "Consumers register their primary channels with this class."}
{"index": 14670, "repo": "spring-rabbit-3.0.6", "code": "public final class ContainerUtils extends Object {\n\t// Return true for AmqpRejectAndDontRequeueException.isRejectManual().\n\tstatic boolean isRejectManual(Throwable ex);\n}", "des": "Utility methods for listener containers."}
{"index": 14671, "repo": "spring-rabbit-3.0.6", "code": "public class CorrelationData extends Object implements org.springframework.amqp.core.Correlation {\n\t// Return a future to check the success/failure of the publish operation.\n\tCompletableFuture<CorrelationData.Confirm> getFuture();\n\t// Return the id.\n\tString getId();\n\t// Get the returned message and metadata, if any.\n\torg.springframework.amqp.core.ReturnedMessage getReturned();\n\t// Set the correlation id.\n\tvoid setId(String id);\n}", "des": "Base class for correlating publisher confirms to sent messages."}
{"index": 14672, "repo": "spring-rabbit-3.0.6", "code": "public final class DeclareExchangeConnectionListener extends Object implements ConnectionListener {\n\t// Called when a connection is closed.\n\tvoid onClose(Connection connection);\n\t// Called when a new connection is established.\n\tvoid onCreate(Connection connection);\n}", "des": "A ConnectionListener that will declare a single exchange when the connection is established."}
{"index": 14673, "repo": "spring-rabbit-3.0.6", "code": "public class Delivery extends Object {\n\t// Retrieve the message body.\n\tbyte[] getBody();\n\t// Retrieve the consumer tag.\n\tString getConsumerTag();\n\t// Retrieve the message envelope.\n\tcom.rabbitmq.client.Envelope getEnvelope();\n\t// Retrieve the message properties.\n\tcom.rabbitmq.client.AMQP.BasicProperties getProperties();\n\t// Retrieve the queue.\n\tString getQueue();\n}", "des": "Encapsulates an arbitrary message - simple \"bean\" holder structure."}
{"index": 14674, "repo": "spring-rabbit-3.0.6", "code": "public class DirectMessageListenerContainer extends AbstractMessageListenerContainer {\n\tprotected void actualStart();\n\t// Add queue(s) to this container's list of queues.\n\tvoid addQueueNames(String... queueNames);\n\t// Add queue(s) to this container's list of queues.\n\tvoid addQueues(org.springframework.amqp.core.Queue... queues);\n\tprotected void checkConnect();\n}", "des": "The SimpleMessageListenerContainer is not so simple."}
{"index": 14675, "repo": "spring-rabbit-3.0.6", "code": "public class DirectRabbitListenerContainerFactory extends AbstractRabbitListenerContainerFactory<DirectMessageListenerContainer> {\n\t// Create an empty container instance.\n\tprotected DirectMessageListenerContainer createContainerInstance();\n\t// Further initialize the specified container.\n\tprotected void initializeContainer(DirectMessageListenerContainer instance, RabbitListenerEndpoint endpoint);\n}", "des": "A RabbitListenerContainerFactory implementation to build a regular DirectMessageListenerContainer."}
{"index": 14676, "repo": "spring-rabbit-3.0.6", "code": "public class DirectReplyToMessageListenerContainer extends DirectMessageListenerContainer {\n\t// Add queue(s) to this container's list of queues.\n\tfinal void addQueueNames(String... queueNames);\n\t// Called whenever a consumer is removed.\n\tprotected void consumerRemoved(org.springframework.amqp.rabbit.listener.DirectMessageListenerContainer.SimpleConsumer consumer);\n\t// Start this container, and notify all invoker tasks.\n\tprotected void doStart();\n}", "des": "Listener container for Direct ReplyTo only listens to the pseudo queue Address.AMQ_RABBITMQ_REPLY_TO."}
{"index": 14677, "repo": "spring-rabbit-3.0.6", "code": "public class HandlerAdapter extends Object {\n\t// Get the bean from the handler method.\n\tObject getBean();\n\t// Build an InvocationResult for the result and inbound payload.\n\tInvocationResult getInvocationResultFor(Object result, Object inboundPayload);\n\t// Get the method signature for the payload type via Method.toGenericString().\n\tString getMethodAsString(Object payload);\n\t// Get the method for the payload type.\n\tMethod getMethodFor(Object payload);\n}", "des": "A wrapper for either an InvocableHandlerMethod or DelegatingInvocableHandler."}
{"index": 14678, "repo": "spring-rabbit-3.0.6", "code": "public static enum ListenerContainerFactoryBean.Type extends Enum<ListenerContainerFactoryBean.Type> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ListenerContainerFactoryBean.Type valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ListenerContainerFactoryBean.Type[] values();\n}", "des": "The container type."}
{"index": 14679, "repo": "spring-rabbit-3.0.6", "code": "public class ListenerContainerIdleEvent extends org.springframework.amqp.event.AmqpEvent {\n\t// How long the container has been idle.\n\tlong getIdleTime();\n\t// The id of the listener (if @RabbitListener) or the container bean name.\n\tString getListenerId();\n\t// The queues the container is listening to.\n\tString[] getQueueNames();\n}", "des": "An event that is emitted when a container is idle if the container is configured to do so."}
{"index": 14680, "repo": "spring-rabbit-3.0.6", "code": "public class LocalizedQueueConnectionFactory extends Object implements ConnectionFactory, RoutingConnectionFactory, org.springframework.beans.factory.DisposableBean {\n\tvoid addConnectionListener(ConnectionListener listener);\n\tvoid clearConnectionListeners();\n\tConnection createConnection();\n\t// Create a dedicated connection factory for the address.\n\tprotected ConnectionFactory createConnectionFactory(String address, String node);\n\tvoid destroy();\n\tString getHost();\n\tint getPort();\n}", "des": "A RoutingConnectionFactory that determines the node on which a queue is located and returns a factory that connects directly to that node."}
{"index": 14681, "repo": "spring-rabbit-3.0.6", "code": "@FunctionalInterface public interface MessageBatchRecoverer extends MessageRecoverer {\n\t// Callback for message batch that was consumed but failed all retry attempts.\n\tvoid recover(List<org.springframework.amqp.core.Message> messages, Throwable cause);\n\t// Callback for message that was consumed but failed all retry attempts.\n\tdefault void recover(org.springframework.amqp.core.Message message, Throwable cause);\n}", "des": "A retry recoverer for use with a batch listener."}
{"index": 14682, "repo": "spring-rabbit-3.0.6", "code": "public class MessageListenerAdapter extends AbstractAdaptableMessageListener {\n\t// Add the mapping of a queue name or consumer tag to a method name.\n\tvoid addQueueOrTagToMethodName(String queueOrTag, String methodName);\n\t// Build an array of arguments to be passed into the target listener method.\n\tprotected Object[] buildListenerArguments(Object extractedMessage, com.rabbitmq.client.Channel channel, org.springframework.amqp.core.Message message);\n\tprotected String getDefaultListenerMethod();\n}", "des": "Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion."}
{"index": 14683, "repo": "spring-rabbit-3.0.6", "code": "public interface MessageListenerContainer extends org.springframework.context.SmartLifecycle, org.springframework.beans.factory.InitializingBean {\n\tdefault void afterPropertiesSet();\n\t// Get the message listener.\n\tObject getMessageListener();\n\t// Return true if this container is capable of (and configured to) create batches of consumed messages.\n\tdefault boolean isConsumerBatchEnabled();\n\t// Do not check for missing or mismatched queues during startup.\n\tdefault void lazyLoad();\n}", "des": "Internal abstraction used by the framework representing a message listener container."}
{"index": 14684, "repo": "spring-rabbit-3.0.6", "code": "public class MethodRabbitListenerEndpoint extends AbstractRabbitListenerEndpoint {\n\t// Create a HandlerAdapter for this listener adapter.\n\tprotected HandlerAdapter configureListenerAdapter(MessagingMessageListenerAdapter messageListener);\n\t// Create a MessageListener that is able to serve this endpoint for the specified container.\n\tprotected MessagingMessageListenerAdapter createMessageListener(MessageListenerContainer container);\n}", "des": "A RabbitListenerEndpoint providing the method to invoke to process an incoming message for this endpoint."}
{"index": 14685, "repo": "spring-rabbit-3.0.6", "code": "public abstract class NamespaceUtils extends Object {\n\t// Populates the bean definition constructor argument with the boolean value of that attribute if it is defined in the given element or else uses the default provided.\n\tstatic void addConstructorArgBooleanValueIfAttributeDefined(org.springframework.beans.factory.support.BeanDefinitionBuilder builder, Element element, String attributeName, boolean defaultValue);\n}", "des": "Shared utility methods for namespace parsers."}
{"index": 14686, "repo": "spring-rabbit-3.0.6", "code": "public interface NodeLocator<T> {\n\t// Close the client.\n\tdefault void close(T client);\n\t// Create a client for subsequent use.\n\tT createClient(String userName, String password);\n\t// Return a connection factory for the leader node for the queue.\n\tdefault ConnectionFactory locate(String[] adminUris, Map<String,String> nodeToAddress, String vhost, String username, String password, String queue, FactoryFinder factoryFunction);\n}", "des": "Used to obtain a connection factory for the queue leader."}
{"index": 14687, "repo": "spring-rabbit-3.0.6", "code": "public class PendingConfirm extends Object {\n\t// Count down the returned message latch; call after the listener has been called.\n\tvoid countDown();\n\tString getCause();\n\t// The correlation data supplied by the client when sending the message corresponding to this confirmation.\n\tCorrelationData getCorrelationData();\n\tlong getTimestamp();\n\t// True if a returned message has been received.\n\tboolean isReturned();\n\t// When the confirmation is nacked, set the cause when available.\n\tvoid setCause(String cause);\n}", "des": "Instances of this object track pending publisher confirms."}
{"index": 14688, "repo": "spring-rabbit-3.0.6", "code": "public class PooledChannelConnectionFactory extends AbstractConnectionFactory implements com.rabbitmq.client.ShutdownListener {\n\tvoid addConnectionListener(ConnectionListener listener);\n\tConnection createConnection();\n\tvoid destroy();\n\t// Return true if simple publisher confirms are enabled.\n\tboolean isSimplePublisherConfirms();\n\t// Close the connection(s).\n\tvoid resetConnection();\n}", "des": "A very simple connection factory that caches channels using Apache Pool2 GenericObjectPools (one for transactional and one for non-transactional channels)."}
{"index": 14689, "repo": "spring-rabbit-3.0.6", "code": "public interface PublisherCallbackChannel extends com.rabbitmq.client.Channel {\n\t// Adds a PublisherCallbackChannel.Listener.\n\tvoid addListener(PublisherCallbackChannel.Listener listener);\n\t// Adds a pending confirmation to this channel's map.\n\tvoid addPendingConfirm(PublisherCallbackChannel.Listener listener, long seq, PendingConfirm pendingConfirm);\n}", "des": "Instances of this interface support a single listener being registered for publisher confirms with multiple channels, by adding context to the callbacks."}
{"index": 14690, "repo": "spring-rabbit-3.0.6", "code": "public static interface PublisherCallbackChannel.Listener {\n\t// Returns the UUID used to identify this Listener for returns.\n\tString getUUID();\n\t// Invoked by the channel when a confirm is received.\n\tvoid handleConfirm(PendingConfirm pendingConfirm, boolean ack);\n\t// Handle a returned message.\n\tvoid handleReturn(com.rabbitmq.client.Return returned);\n\tboolean isConfirmListener();\n\tboolean isReturnListener();\n}", "des": "Listeners implementing this interface can participate in publisher confirms received from multiple channels, by invoking addListener on each channel."}
{"index": 14691, "repo": "spring-rabbit-3.0.6", "code": "public abstract class RabbitFuture<T> extends CompletableFuture<T> {\n\tboolean cancel(boolean mayInterruptIfRunning);\n\t// When confirms are enabled contains a CompletableFuture for the confirmation.\n\tCompletableFuture<Boolean> getConfirm();\n\t// When confirms are enabled and a nack is received, contains the cause for the nack, if any.\n\tString getNackCause();\n}", "des": "Base class for CompletableFutures returned by AsyncRabbitTemplate."}
{"index": 14692, "repo": "spring-rabbit-3.0.6", "code": "public class RabbitGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean {\n\tfinal void afterPropertiesSet();\n\t// Create a RabbitTemplate for the given ConnectionFactory.\n\tprotected RabbitTemplate createRabbitTemplate(ConnectionFactory connectionFactory);\n\tfinal ConnectionFactory getConnectionFactory();\n\tfinal RabbitOperations getRabbitOperations();\n\t// Subclasses can override this for custom initialization behavior.\n\tprotected void initGateway();\n}", "des": "Convenient super class for application classes that need RabbitMQ access."}
{"index": 14693, "repo": "spring-rabbit-3.0.6", "code": "@FunctionalInterface public interface RabbitListenerContainerFactory<C extends MessageListenerContainer> {\n\t// Create a MessageListenerContainer with no MessageListener or queues; the listener must be added later before the container is started.\n\tdefault C createListenerContainer();\n\t// Create a MessageListenerContainer for the given RabbitListenerEndpoint.\n\tC createListenerContainer(RabbitListenerEndpoint endpoint);\n}", "des": "Factory of MessageListenerContainers."}
{"index": 14694, "repo": "spring-rabbit-3.0.6", "code": "public interface RabbitListenerEndpoint {\n\t// Override the container factory's AcknowledgeMode.\n\tdefault org.springframework.amqp.core.AcknowledgeMode getAckMode();\n\t// Override of the default autoStartup property.\n\tBoolean getAutoStartup();\n\t// Return this endpoint's batching strategy, or null.\n\tdefault BatchingStrategy getBatchingStrategy();\n\t// Whether this endpoint is for a batch listener.\n\tBoolean getBatchListener();\n\tString getConcurrency();\n\tString getGroup();\n\tString getId();\n}", "des": "Model for a Rabbit listener endpoint."}
{"index": 14695, "repo": "spring-rabbit-3.0.6", "code": "public enum RabbitListenerObservation extends Enum<RabbitListenerObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RabbitListenerObservation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RabbitListenerObservation[] values();\n}", "des": "Spring Rabbit Observation for listeners."}
{"index": 14696, "repo": "spring-rabbit-3.0.6", "code": "public static enum RabbitListenerObservation.ListenerLowCardinalityTags extends Enum<RabbitListenerObservation.ListenerLowCardinalityTags> implements io.micrometer.common.docs.KeyName {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RabbitListenerObservation.ListenerLowCardinalityTags valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RabbitListenerObservation.ListenerLowCardinalityTags[] values();\n}", "des": "Low cardinality tags."}
{"index": 14697, "repo": "spring-rabbit-3.0.6", "code": "public interface RabbitMessageOperations extends org.springframework.messaging.core.MessageSendingOperations<String>, org.springframework.messaging.core.MessageReceivingOperations<String>, org.springframework.messaging.core.MessageRequestReplyOperations<String> {\n\t// Convert the given Object to serialized form, possibly using a MessageConverter, wrap it as a message and send it to a specific exchange with a specific routing key.\n\tvoid convertAndSend(String exchange, String routingKey, Object payload);\n}", "des": "A specialization of MessageSendingOperations and MessageRequestReplyOperations for AMQP related operations that allow to specify not only the exchange but also the routing key to use."}
{"index": 14698, "repo": "spring-rabbit-3.0.6", "code": "public interface RabbitOperations extends org.springframework.amqp.core.AmqpTemplate, org.springframework.context.Lifecycle {\n\t// Convert a Java object to an Amqp Message and send it to a default exchange with a default routing key.\n\tvoid convertAndSend(Object message, org.springframework.amqp.core.MessagePostProcessor messagePostProcessor, CorrelationData correlationData);\n}", "des": "Rabbit specific methods for Amqp functionality."}
{"index": 14699, "repo": "spring-rabbit-3.0.6", "code": "public enum RabbitTemplateObservation extends Enum<RabbitTemplateObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RabbitTemplateObservation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RabbitTemplateObservation[] values();\n}", "des": "Spring RabbitMQ Observation for RabbitTemplate."}
{"index": 14700, "repo": "spring-rabbit-3.0.6", "code": "public static enum RabbitTemplateObservation.TemplateLowCardinalityTags extends Enum<RabbitTemplateObservation.TemplateLowCardinalityTags> implements io.micrometer.common.docs.KeyName {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RabbitTemplateObservation.TemplateLowCardinalityTags valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RabbitTemplateObservation.TemplateLowCardinalityTags[] values();\n}", "des": "Low cardinality tags."}
{"index": 14701, "repo": "spring-rabbit-3.0.6", "code": "public class RepublishMessageRecoverer extends Object implements MessageRecoverer {\n\t// Subclasses can override this method to add more headers to the republished message.\n\tprotected Map<? extends String,?> additionalHeaders(org.springframework.amqp.core.Message message, Throwable cause);\n\t// Send the message.\n\tprotected void doSend(String exchange, String routingKey, org.springframework.amqp.core.Message message);\n}", "des": "MessageRecoverer implementation that republishes recovered messages to a specified exchange with the exception stack trace stored in the message header x-exception."}
{"index": 14702, "repo": "spring-rabbit-3.0.6", "code": "public class RepublishMessageRecovererWithConfirms extends RepublishMessageRecoverer {\n\t// Send the message.\n\tprotected void doSend(String exchange, String routingKey, org.springframework.amqp.core.Message message);\n\t// Set the confirm timeout; default 10 seconds.\n\tvoid setConfirmTimeout(long confirmTimeout);\n}", "des": "A RepublishMessageRecoverer supporting publisher confirms and returns."}
{"index": 14703, "repo": "spring-rabbit-3.0.6", "code": "public class RestTemplateNodeLocator extends Object implements NodeLocator<org.springframework.amqp.rabbit.connection.RestTemplateHolder> {\n\t// Create a client for subsequent use.\n\torg.springframework.amqp.rabbit.connection.RestTemplateHolder createClient(String userName, String password);\n}", "des": "A NodeLocator using the RestTemplate."}
{"index": 14704, "repo": "spring-rabbit-3.0.6", "code": "public abstract class RetryInterceptorBuilder<B extends RetryInterceptorBuilder<B,T>,T extends org.aopalliance.intercept.MethodInterceptor> extends Object {\n\tprotected final B _this();\n\tprotected void applyCommonSettings(AbstractRetryOperationsInterceptorFactoryBean factoryBean);\n\t// Apply the backoff options.\n\tB backOffOptions(long initialInterval, double multiplier, long maxInterval);\n\t// Apply the back off policy.\n\tB backOffPolicy(org.springframework.retry.backoff.BackOffPolicy policy);\n}", "des": "Simplified facade to make it easier and simpler to build a StatefulRetryOperationsInterceptor or (stateless) RetryOperationsInterceptor by providing a fluent interface to defining the behavior on error."}
{"index": 14705, "repo": "spring-rabbit-3.0.6", "code": "public static final class RetryInterceptorBuilder.StatefulRetryInterceptorBuilder extends RetryInterceptorBuilder<RetryInterceptorBuilder.StatefulRetryInterceptorBuilder,org.springframework.retry.interceptor.StatefulRetryOperationsInterceptor> {\n\torg.springframework.retry.interceptor.StatefulRetryOperationsInterceptor build();\n\t// Stateful retry requires messages to be identifiable.\n\tRetryInterceptorBuilder.StatefulRetryInterceptorBuilder messageKeyGenerator(MessageKeyGenerator messageKeyGenerator);\n}", "des": "Builder for a stateful interceptor."}
{"index": 14706, "repo": "spring-rabbit-3.0.6", "code": "@FunctionalInterface public interface ShutDownChannelListener extends ChannelListener {\n\t// Called when a new channel is created.\n\tdefault void onCreate(com.rabbitmq.client.Channel channel, boolean transactional);\n\t// Called when the underlying RabbitMQ channel is closed for any reason.\n\tvoid onShutDown(com.rabbitmq.client.ShutdownSignalException signal);\n}", "des": "Functional sub interface enabling a lambda for the onShutDown method."}
{"index": 14707, "repo": "spring-rabbit-3.0.6", "code": "public class SimpleBatchingStrategy extends Object implements BatchingStrategy {\n\t// Add a message to the batch and optionally release the batch.\n\tMessageBatch addToBatch(String exch, String routKey, org.springframework.amqp.core.Message message);\n\t// Return true if this strategy can decode a batch of messages from a message body.\n\tboolean canDebatch(org.springframework.amqp.core.MessageProperties properties);\n}", "des": "A simple batching strategy that supports only one exchange/routingKey; includes a batch size, a batched message size limit and a timeout."}
{"index": 14708, "repo": "spring-rabbit-3.0.6", "code": "public class SimpleConnection extends Object implements Connection, com.rabbitmq.client.impl.NetworkConnection {\n\t// Add a BlockedListener.\n\tvoid addBlockedListener(com.rabbitmq.client.BlockedListener listener);\n\t// Close this connection and all its channels with the AMQP.REPLY_SUCCESS close code and message 'OK'.\n\tvoid close();\n\t// Create a new channel, using an internally allocated channel number.\n\tcom.rabbitmq.client.Channel createChannel(boolean transactional);\n\tInetAddress getAddress();\n}", "des": "Simply a Connection."}
{"index": 14709, "repo": "spring-rabbit-3.0.6", "code": "public class SimpleRabbitListenerContainerFactory extends AbstractRabbitListenerContainerFactory<SimpleMessageListenerContainer> {\n\t// Create an empty container instance.\n\tprotected SimpleMessageListenerContainer createContainerInstance();\n\t// Further initialize the specified container.\n\tprotected void initializeContainer(SimpleMessageListenerContainer instance, RabbitListenerEndpoint endpoint);\n\tvoid setBatchSize(Integer batchSize);\n\tvoid setConcurrentConsumers(Integer concurrency);\n}", "des": "A RabbitListenerContainerFactory implementation to build a regular SimpleMessageListenerContainer."}
{"index": 14710, "repo": "spring-rabbit-3.0.6", "code": "public class SimpleRabbitListenerEndpoint extends AbstractRabbitListenerEndpoint {\n\t// Create a MessageListener that is able to serve this endpoint for the specified container.\n\tprotected org.springframework.amqp.core.MessageListener createMessageListener(MessageListenerContainer container);\n\tprotected StringBuilder getEndpointDescription();\n\torg.springframework.amqp.core.MessageListener getMessageListener();\n}", "des": "A RabbitListenerEndpoint simply providing the MessageListener to invoke to process an incoming message for this endpoint."}
{"index": 14711, "repo": "spring-rabbit-3.0.6", "code": "public final class SimpleResourceHolder extends Object {\n\t// Bind the given resource for the given key to the current thread.\n\tstatic void bind(Object key, Object value);\n\t// Clear resources for the current thread.\n\tstatic void clear();\n\t// Retrieve a resource for the given key that is bound to the current thread.\n\tstatic Object get(Object key);\n\t// Return all resources that are bound to the current thread.\n\tstatic Map<Object,Object> getResources();\n}", "des": "Central helper that manages resources per thread to be used by resource management code."}
{"index": 14712, "repo": "spring-rabbit-3.0.6", "code": "public class ThreadChannelConnectionFactory extends AbstractConnectionFactory implements com.rabbitmq.client.ShutdownListener {\n\tvoid addConnectionListener(ConnectionListener listener);\n\t// Close the channel associated with this thread, if any.\n\tvoid closeThreadChannel();\n\tConnection createConnection();\n\tvoid destroy();\n\t// Return true if simple publisher confirms are enabled.\n\tboolean isSimplePublisherConfirms();\n}", "des": "A very simple connection factory that caches a channel per thread."}
{"index": 14713, "repo": "spring-rabbit-3.0.6", "code": "public class WebFluxNodeLocator extends Object implements NodeLocator<org.springframework.web.reactive.function.client.WebClient> {\n\t// Create a client instance.\n\torg.springframework.web.reactive.function.client.WebClient createClient(String username, String password);\n\t// Retrieve a map of queue properties using the RabbitMQ Management REST API.\n\tMap<String,Object> restCall(org.springframework.web.reactive.function.client.WebClient client, String baseUri, String vhost, String queue);\n}", "des": "A NodeLocator using the Spring WebFlux WebClient."}
{"index": 14714, "repo": "spring-integration-jms-6.1.2", "code": "public class DefaultJmsHeaderMapper extends JmsHeaderMapper {\n\tvoid fromHeaders(org.springframework.messaging.MessageHeaders headers, jakarta.jms.Message jmsMessage);\n\t// Specify a prefix to be appended to the integration message header name for any JMS property that is being mapped into the MessageHeaders.\n\tvoid setInboundPrefix(String inboundPrefix);\n\t// Map the inbound deliveryMode by using this setter with 'true'.\n\tvoid setMapInboundDeliveryMode(boolean mapInboundDeliveryMode);\n}", "des": "Default implementation of JmsHeaderMapper."}
{"index": 14715, "repo": "spring-integration-jms-6.1.2", "code": "public final class Jms extends Object {\n\t// The factory to produce a JmsMessageChannelSpec.\n\tstatic JmsMessageChannelSpec<?,?> channel(jakarta.jms.ConnectionFactory connectionFactory);\n\t// The factory to produce a JmsMessageChannelSpec.\n\tstatic JmsMessageChannelSpec<?,?> channel(String id, jakarta.jms.ConnectionFactory connectionFactory);\n}", "des": "Factory class for JMS components."}
{"index": 14716, "repo": "spring-integration-jms-6.1.2", "code": "public class JmsDefaultListenerContainerSpec extends JmsListenerContainerSpec<JmsDefaultListenerContainerSpec,org.springframework.jms.listener.DefaultMessageListenerContainer> {\n\t// Specify a BackOff.\n\tJmsDefaultListenerContainerSpec backOff(org.springframework.util.backoff.BackOff backOff);\n\t// Specify the level of caching that this listener container is allowed to apply.\n\tJmsDefaultListenerContainerSpec cacheLevel(int cacheLevel);\n}", "des": "A DefaultMessageListenerContainer specific JmsListenerContainerSpec extension."}
{"index": 14717, "repo": "spring-integration-jms-6.1.2", "code": "public abstract class JmsDestinationAccessorSpec<S extends JmsDestinationAccessorSpec<S,A>,A extends org.springframework.jms.support.destination.JmsDestinationAccessor> extends org.springframework.integration.dsl.IntegrationComponentSpec<S,A> {\n\tprotected S connectionFactory(jakarta.jms.ConnectionFactory connectionFactory);\n\t// A DestinationResolver to use.\n\tS destinationResolver(org.springframework.jms.support.destination.DestinationResolver destinationResolver);\n\tS id(String id);\n}", "des": "A base IntegrationComponentSpec for JmsDestinationAccessors."}
{"index": 14718, "repo": "spring-integration-jms-6.1.2", "code": "public class JmsDestinationPollingSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object> {\n\t// Will receive a JMS Message converting and returning it as a Spring Integration Message.\n\tprotected Object doReceive();\n\tString getComponentType();\n\tprotected void onInit();\n\tvoid setDestination(jakarta.jms.Destination destination);\n\tvoid setDestinationName(String destinationName);\n}", "des": "A source for receiving JMS Messages with a polling listener."}
{"index": 14719, "repo": "spring-integration-jms-6.1.2", "code": "public class JmsInboundChannelAdapterSpec<S extends JmsInboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageSourceSpec<S,JmsDestinationPollingSource> {\n\t// Configure the destination from which to receive messages.\n\tS destination(jakarta.jms.Destination destination);\n\t// Configure the name of destination from which to receive messages.\n\tS destination(String destination);\n}", "des": "A MessageSourceSpec for a JmsDestinationPollingSource."}
{"index": 14720, "repo": "spring-integration-jms-6.1.2", "code": "public static class JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer> extends JmsInboundGatewaySpec<JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S,C>> {\n\t// Specify a Consumer to accept a JmsListenerContainerSpec for further configuration.\n\tJmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S,C> configureListenerContainer(Consumer<S> configurer);\n}", "des": "An AbstractMessageListenerContainer-based JmsInboundGatewaySpec extension."}
{"index": 14721, "repo": "spring-integration-jms-6.1.2", "code": "public class JmsMessageChannelSpec<S extends JmsMessageChannelSpec<S,T>,T extends AbstractJmsChannel> extends JmsPollableMessageChannelSpec<S,T> {\n\tS acceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);\n\tS autoStartup(boolean autoStartup);\n\t// Only applies if the containerType(Class) is a DefaultMessageListenerContainer.\n\tS cacheLevel(Integer cacheLevel);\n}", "des": "A JmsMessageChannelSpec for subscribable AbstractJmsChannels."}
{"index": 14722, "repo": "spring-integration-jms-6.1.2", "code": "public class JmsOutboundChannelAdapterSpec<S extends JmsOutboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageHandlerSpec<S,JmsSendingMessageHandler> {\n\t// Specify a SpEL expression to evaluate a deliveryMode for JMS message to send.\n\tS deliveryModeExpression(String deliveryModeExpression);\n\t// Specify a Function to resolve a deliveryMode for JMS message to send.\n\t<P> S deliveryModeFunction(Function<org.springframework.messaging.Message<P>,?> deliveryModeFunction);\n}", "des": "A MessageHandlerSpec for a JmsSendingMessageHandler."}
{"index": 14723, "repo": "spring-integration-jms-6.1.2", "code": "public class JmsOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle, jakarta.jms.MessageListener {\n\t// Create a new JMS Connection for this JMS gateway.\n\tprotected jakarta.jms.Connection createConnection();\n\t// Create a new JMS Session using the provided Connection.\n\tprotected jakarta.jms.Session createSession(jakarta.jms.Connection connection);\n\tprotected void doInit();\n}", "des": "An outbound Messaging Gateway for request/reply JMS."}
{"index": 14724, "repo": "spring-integration-jms-6.1.2", "code": "public class JmsPollableMessageChannelSpec<S extends JmsPollableMessageChannelSpec<S,T>,T extends AbstractJmsChannel> extends org.springframework.integration.dsl.MessageChannelSpec<S,T> {\n\tS deliveryPersistent(boolean deliveryPersistent);\n\t// Configure the destination that backs this channel.\n\tS destination(jakarta.jms.Destination destination);\n\t// Configure the destination name that backs this channel.\n\tS destination(String destination);\n}", "des": "A MessageChannelSpec for an AbstractJmsChannel."}
{"index": 14725, "repo": "spring-integration-jms-6.1.2", "code": "public class JmsSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler {\n\tString getComponentType();\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> message);\n\tprotected void onInit();\n\t// Specify a SpEL expression to evaluate a deliveryMode for the JMS message to send.\n\tvoid setDeliveryModeExpression(org.springframework.expression.Expression deliveryModeExpression);\n}", "des": "A MessageConsumer that sends the converted Message payload within a JMS Message."}
{"index": 14726, "repo": "spring-cloud-context-3.1.7", "code": "@Component @ManagedResource public class ConfigurationPropertiesRebinder extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<EnvironmentChangeEvent> {\n\tSet<String> getBeanNames();\n\t// A map of bean name to errors when instantiating the bean.\n\tMap<String,Exception> getErrors();\n\tSet<String> getNeverRefreshable();\n\tvoid onApplicationEvent(EnvironmentChangeEvent event);\n\tvoid rebind();\n}", "des": "Listens for EnvironmentChangeEvent and rebinds beans that were bound to the Environment using @ConfigurationProperties."}
{"index": 14727, "repo": "spring-cloud-context-3.1.7", "code": "public class GenericScope extends Object implements org.springframework.beans.factory.config.Scope, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor, org.springframework.beans.factory.DisposableBean {\n\tvoid destroy();\n\t// Destroys the named bean (i.e.\n\tprotected boolean destroy(String name);\n\tObject get(String name, org.springframework.beans.factory.ObjectFactory<?> objectFactory);\n\tString getConversationId();\n}", "des": "A generic Scope implementation."}
{"index": 14728, "repo": "spring-cloud-context-3.1.7", "code": "public interface ScopeCache {\n\t// Clears the cache and returns all objects in an unmodifiable collection.\n\tCollection<Object> clear();\n\t// Gets the named object from the cache.\n\tObject get(String name);\n\t// Put a value in the cache if the key is not already used.\n\tObject put(String name, Object value);\n\t// Removes the object with this name from the cache.\n\tObject remove(String name);\n}", "des": "A special-purpose cache interface specifically for the GenericScope to use to manage cached bean instances."}
{"index": 14729, "repo": "spring-cloud-context-3.1.7", "code": "public class StandardScopeCache extends Object implements ScopeCache {\n\t// Clears the cache and returns all objects in an unmodifiable collection.\n\tCollection<Object> clear();\n\t// Gets the named object from the cache.\n\tObject get(String name);\n\t// Put a value in the cache if the key is not already used.\n\tObject put(String name, Object value);\n\t// Removes the object with this name from the cache.\n\tObject remove(String name);\n}", "des": "A simple cache implementation backed by a concurrent map."}
{"index": 14730, "repo": "spring-integration-sftp-6.1.2", "code": "public final class Sftp extends Object {\n\t// An SftpInboundChannelAdapterSpec factory for an inbound channel adapter spec.\n\tstatic SftpInboundChannelAdapterSpec inboundAdapter(org.springframework.integration.file.remote.session.SessionFactory<org.apache.sshd.sftp.client.SftpClient.DirEntry> sessionFactory);\n}", "des": "The factory for SFTP components."}
{"index": 14731, "repo": "spring-data-cassandra-4.1.2", "code": "@Configuration public abstract class AbstractCassandraConfiguration extends AbstractSessionConfiguration implements BeanClassLoaderAware {\n\t// Creates a CassandraConverter using the configured cassandraMapping().\n\tCassandraConverter cassandraConverter();\n\t// Returns the given CassandraManagedTypes object holding the initial entity set.\n\tCassandraManagedTypes cassandraManagedTypes();\n}", "des": "Base class for Spring Data Cassandra configuration using JavaConfig."}
{"index": 14732, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class AbstractCassandraConverter extends Object implements CassandraConverter, InitializingBean {\n\tvoid afterPropertiesSet();\n\tConversionService getConversionService();\n\t// Returns the CustomConversions for this converter.\n\tCustomConversions getCustomConversions();\n\t// Registers the given custom conversions with the converter.\n\tvoid setCustomConversions(CustomConversions conversions);\n}", "des": "Base class for CassandraConverter implementations."}
{"index": 14733, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class AbstractCassandraEventListener<E> extends Object implements ApplicationListener<CassandraMappingEvent<?>> {\n\t// Captures AfterConvertEvent.\n\tvoid onAfterConvert(AfterConvertEvent<E> event);\n\t// Captures AfterDeleteEvent.\n\tvoid onAfterDelete(AfterDeleteEvent<E> event);\n\t// Captures AfterLoadEvent.\n\tvoid onAfterLoad(AfterLoadEvent<E> event);\n\t// Captures AfterSaveEvent.\n\tvoid onAfterSave(AfterSaveEvent<E> event);\n\tvoid onApplicationEvent(CassandraMappingEvent<?> event);\n}", "des": "Base class to implement domain specific ApplicationListeners for CassandraMappingEvent."}
{"index": 14734, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class AbstractCassandraQuery extends CassandraRepositoryQuerySupport {\n\t// Creates a Statement using the given ParameterAccessor\n\tprotected abstract com.datastax.oss.driver.api.core.cql.SimpleStatement createQuery(CassandraParameterAccessor accessor);\n\tObject execute(Object[] parameters);\n\t// Return a reference to the CassandraOperations used to execute this Cassandra query.\n\tprotected CassandraOperations getOperations();\n}", "des": "Base class for RepositoryQuery implementations for Cassandra."}
{"index": 14735, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class AbstractReactiveCassandraConfiguration extends AbstractCassandraConfiguration {\n\t// Creates a ReactiveSession object.\n\tReactiveSession reactiveCassandraSession();\n\t// Creates a ReactiveSessionFactory to be used by the ReactiveCassandraTemplate.\n\tReactiveSessionFactory reactiveCassandraSessionFactory();\n\t// Creates a CassandraAdminTemplate.\n\tReactiveCassandraTemplate reactiveCassandraTemplate();\n}", "des": "Extension to AbstractCassandraConfiguration providing Spring Data Cassandra configuration for Spring Data's Reactive Cassandra support using JavaConfig."}
{"index": 14736, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class AbstractReactiveCassandraQuery extends CassandraRepositoryQuerySupport {\n\t// Creates a string query using the given ParameterAccessor\n\tprotected abstract reactor.core.publisher.Mono<com.datastax.oss.driver.api.core.cql.SimpleStatement> createQuery(CassandraParameterAccessor accessor);\n\tObject execute(Object[] parameters);\n\tReactiveCassandraQueryMethod getQueryMethod();\n\tprotected ReactiveCassandraOperations getReactiveCassandraOperations();\n}", "des": "Base class for reactive RepositoryQuery implementations for Cassandra."}
{"index": 14737, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class AbstractResultSetConverter<T> extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,T> {\n\tT convert(com.datastax.oss.driver.api.core.cql.ResultSet source);\n\t// Converts the given result set (as a List<Map<String,Object>>) to this converter's type or throws IllegalArgumentException.\n\tprotected T doConvertResultSet(List<Map<String,Object>> resultSet);\n}", "des": "Convenient converter that can be used to convert a single-row-single-column, single-row-multi-column, or multi-row ResultSet into the given value of a given type."}
{"index": 14738, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class AbstractRoutingSessionFactory extends Object implements SessionFactory, InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Determine the current lookup key.\n\tprotected abstract Object determineCurrentLookupKey();\n\t// Retrieve the current target SessionFactory.\n\tprotected SessionFactory determineTargetSessionFactory();\n}", "des": "Abstract SessionFactory implementation that routes AbstractRoutingSessionFactory.getSession() calls to one of various target factories based on a lookup key."}
{"index": 14739, "repo": "spring-data-cassandra-4.1.2", "code": "@Configuration public abstract class AbstractSessionConfiguration extends Object implements BeanFactoryAware {\n\t// Creates a CqlSessionFactoryBean that provides a Cassandra CqlSession.\n\tCqlSessionFactoryBean cassandraSession();\n\t// Creates a CqlTemplate configured with getRequiredSessionFactory().\n\tCqlTemplate cqlTemplate();\n\t// Returns the configured reference to the BeanFactory.\n\tprotected BeanFactory getBeanFactory();\n}", "des": "Spring Configuration class used to configure a Cassandra client application CqlSession connected to a Cassandra cluster."}
{"index": 14740, "repo": "spring-data-cassandra-4.1.2", "code": "public class AddColumnSpecification extends ColumnTypeChangeSpecification {\n\t// Create a new AddColumnSpecification for the given name and DataType.\n\tstatic AddColumnSpecification addColumn(com.datastax.oss.driver.api.core.CqlIdentifier name, com.datastax.oss.driver.api.core.type.DataType type);\n\t// Create a new AddColumnSpecification for the given name and DataType.\n\tstatic AddColumnSpecification addColumn(String name, com.datastax.oss.driver.api.core.type.DataType type);\n}", "des": "Value object representing a specification to add a column."}
{"index": 14741, "repo": "spring-data-cassandra-4.1.2", "code": "public class AlterColumnSpecification extends ColumnTypeChangeSpecification {\n\t// Entry point into the AlterColumnSpecification's fluent API given name and DataType to alter a column.\n\tstatic AlterColumnSpecification alterColumn(com.datastax.oss.driver.api.core.CqlIdentifier name, com.datastax.oss.driver.api.core.type.DataType type);\n}", "des": "Value object representing a specification to alter a column."}
{"index": 14742, "repo": "spring-data-cassandra-4.1.2", "code": "public class AlterKeyspaceSpecification extends KeyspaceOptionsSpecification<AlterKeyspaceSpecification> {\n\t// Entry point into the AlterKeyspaceSpecification's fluent API given name to alter a keyspace.\n\tstatic AlterKeyspaceSpecification alterKeyspace(com.datastax.oss.driver.api.core.CqlIdentifier name);\n\t// Entry point into the AlterKeyspaceSpecification's fluent API given name to alter a keyspace.\n\tstatic AlterKeyspaceSpecification alterKeyspace(String name);\n}", "des": "Object to configure a ALTER KEYSPACE specification."}
{"index": 14743, "repo": "spring-data-cassandra-4.1.2", "code": "public class AlterTableSpecification extends TableOptionsSpecification<AlterTableSpecification> {\n\t// Adds an ADD to the list of column changes.\n\tAlterTableSpecification add(com.datastax.oss.driver.api.core.CqlIdentifier column, com.datastax.oss.driver.api.core.type.DataType type);\n\t// Adds an ADD to the list of column changes.\n\tAlterTableSpecification add(String column, com.datastax.oss.driver.api.core.type.DataType type);\n}", "des": "Object to configure a ALTER TABLE specification."}
{"index": 14744, "repo": "spring-data-cassandra-4.1.2", "code": "public class AlterUserTypeSpecification extends UserTypeNameSpecification {\n\t// Adds an ADD to the list of field changes.\n\tAlterUserTypeSpecification add(com.datastax.oss.driver.api.core.CqlIdentifier field, com.datastax.oss.driver.api.core.type.DataType type);\n\t// Adds an ADD to the list of field changes.\n\tAlterUserTypeSpecification add(String field, com.datastax.oss.driver.api.core.type.DataType type);\n}", "des": "Object to configure a ALTER TYPE specification."}
{"index": 14745, "repo": "spring-data-cassandra-4.1.2", "code": "public interface AsyncCassandraOperations {\n\t// Returns the number of rows for the given entity class.\n\tCompletableFuture<Long> count(Class<?> entityClass);\n\t// Returns the number of rows for the given entity class applying Query.\n\tCompletableFuture<Long> count(Query query, Class<?> entityClass);\n\t// Delete the given entity applying QueryOptions and return the entity if the delete statement was applied.\n\tCompletableFuture<WriteResult> delete(Object entity, QueryOptions options);\n}", "des": "Interface specifying a basic set of asynchronous Cassandra operations."}
{"index": 14746, "repo": "spring-data-cassandra-4.1.2", "code": "public class AsyncCassandraTemplate extends Object implements AsyncCassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware {\n\t// Returns the number of rows for the given entity class.\n\tCompletableFuture<Long> count(Class<?> entityClass);\n\t// Returns the number of rows for the given entity class applying Query.\n\tCompletableFuture<Long> count(Query query, Class<?> entityClass);\n}", "des": "Primary implementation of AsyncCassandraOperations."}
{"index": 14747, "repo": "spring-data-cassandra-4.1.2", "code": "public static class AsyncCassandraTemplate.PreparedStatementHandler extends Object implements AsyncCassandraTemplate.AsyncPreparedStatementHandler {\n\t// Bind parameter values on the given PreparedStatement.\n\tcom.datastax.oss.driver.api.core.cql.BoundStatement bindValues(com.datastax.oss.driver.api.core.cql.PreparedStatement ps);\n}", "des": "Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement."}
{"index": 14748, "repo": "spring-data-cassandra-4.1.2", "code": "public interface AsyncCqlOperations {\n\t// Issue a single CQL execute, typically a DDL statement, insert, update or delete statement.\n\tCompletableFuture<Boolean> execute(com.datastax.oss.driver.api.core.cql.Statement<?> statement);\n\t// Issue a single CQL execute, typically a DDL statement, insert, update or delete statement.\n\tCompletableFuture<Boolean> execute(String cql);\n}", "des": "Interface specifying a basic set of CQL asynchronously executed operations."}
{"index": 14749, "repo": "spring-data-cassandra-4.1.2", "code": "public class AsyncCqlTemplate extends CassandraAccessor implements AsyncCqlOperations {\n\t// Issue a single CQL execute, typically a DDL statement, insert, update or delete statement.\n\tCompletableFuture<Boolean> execute(com.datastax.oss.driver.api.core.cql.Statement<?> statement);\n\t// Issue a single CQL execute, typically a DDL statement, insert, update or delete statement.\n\tCompletableFuture<Boolean> execute(String cql);\n}", "des": "This is the central class in the CQL core package for asynchronous Cassandra data access. It simplifies the use of CQL and helps to avoid common errors."}
{"index": 14750, "repo": "spring-data-cassandra-4.1.2", "code": "public class BasicCassandraPersistentProperty extends AnnotationBasedPersistentProperty<CassandraPersistentProperty> implements CassandraPersistentProperty, ApplicationContextAware {\n\tprotected Association<CassandraPersistentProperty> createAssociation();\n\t// Find an AnnotatedType by annotationType derived from the property type.\n\tAnnotatedType findAnnotatedType(Class<? extends Annotation> annotationType);\n\tAssociation<CassandraPersistentProperty> getAssociation();\n}", "des": "Cassandra specific AnnotationBasedPersistentProperty implementation."}
{"index": 14751, "repo": "spring-data-cassandra-4.1.2", "code": "public class BasicCassandraPersistentTupleProperty extends BasicCassandraPersistentProperty {\n\t// The name of the single column to which the property is persisted.\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getColumnName();\n\t// The name of the element ordinal to which the property is persisted when the owning type is a mapped tuple.\n\tInteger getOrdinal();\n\t// The ordering (ascending or descending) for the column.\n\tOrdering getPrimaryKeyOrdering();\n}", "des": "Cassandra Tuple specific CassandraPersistentProperty implementation."}
{"index": 14752, "repo": "spring-data-cassandra-4.1.2", "code": "public class BasicMapId extends Object implements MapId {\n\tvoid clear();\n\tboolean containsKey(Object name);\n\tboolean containsValue(Object value);\n\tSet<Map.Entry<String,Object>> entrySet();\n\tboolean equals(Object that);\n\tObject get(Object name);\n\t// Factory method.\n\tstatic MapId id();\n\t// Factory method.\n\tstatic MapId id(String name, Object value);\n\t// Factory method.\n\tstatic MapId id(MapId id);\n\tboolean isEmpty();\n\tSet<String> keySet();\n\tObject put(String name, Object value);\n}", "des": "Simple implementation of MapId."}
{"index": 14753, "repo": "spring-data-cassandra-4.1.2", "code": "public class BeanPropertyRowMapper<T> extends Object implements RowMapper<T> {\n\t// Construct an instance of the mapped class for the current row.\n\tprotected T constructMappedInstance(com.datastax.oss.driver.api.core.cql.Row row, TypeConverter tc);\n\t// Retrieve a Cassandra object value for the specified column.\n\tprotected Object getColumnValue(com.datastax.oss.driver.api.core.cql.Row row, int index, PropertyDescriptor pd);\n}", "des": "RowMapper implementation that converts a Row into a new instance of the specified mapped target class."}
{"index": 14754, "repo": "spring-data-cassandra-4.1.2", "code": "public class CachingCassandraPersistentProperty extends BasicCassandraPersistentProperty {\n\t// Find an AnnotatedType by annotationType derived from the property type.\n\tAnnotatedType findAnnotatedType(Class<? extends Annotation> annotationType);\n\t// The ordering (ascending or descending) for the column.\n\tOrdering getPrimaryKeyOrdering();\n\t// Whether the property is a cluster key column.\n\tboolean isClusterKeyColumn();\n\t// Whether the property is a composite primary key.\n\tboolean isCompositePrimaryKey();\n}", "des": "BasicCassandraPersistentProperty that pre-computes primary key and embedded flags."}
{"index": 14755, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraAccessor extends Object implements InitializingBean {\n\t// Ensures the Cassandra CqlSession and exception translator has been propertly set.\n\tvoid afterPropertiesSet();\n\t// Prepare the given CQL Statement applying statement settings such as page size and consistency level.\n\tprotected com.datastax.oss.driver.api.core.cql.Statement<?> applyStatementSettings(com.datastax.oss.driver.api.core.cql.Statement<?> statement);\n}", "des": "CassandraAccessor provides access to a Cassandra SessionFactory and the CassandraExceptionTranslator."}
{"index": 14756, "repo": "spring-data-cassandra-4.1.2", "code": "public interface CassandraAdminOperations extends CassandraOperations {\n\t// Create a table with the name given and fields corresponding to the given class.\n\tvoid createTable(boolean ifNotExists, com.datastax.oss.driver.api.core.CqlIdentifier tableName, Class<?> entityClass, Map<String,Object> optionsByName);\n\t// Drops the named table.\n\tvoid dropTable(boolean ifExists, com.datastax.oss.driver.api.core.CqlIdentifier tableName);\n}", "des": "Operations for managing a Cassandra keyspace."}
{"index": 14757, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraAdminTemplate extends CassandraTemplate implements CassandraAdminOperations {\n\t// Create a table with the name given and fields corresponding to the given class.\n\tvoid createTable(boolean ifNotExists, com.datastax.oss.driver.api.core.CqlIdentifier tableName, Class<?> entityClass, Map<String,Object> optionsByName);\n\t// Drops the named table.\n\tvoid dropTable(boolean ifExists, com.datastax.oss.driver.api.core.CqlIdentifier tableName);\n}", "des": "Default implementation of CassandraAdminOperations."}
{"index": 14758, "repo": "spring-data-cassandra-4.1.2", "code": "public interface CassandraBatchOperations {\n\t// Add a collection of deletes to the batch.\n\tCassandraBatchOperations delete(Iterable<?> entities);\n\t// Add a collection of deletes with given WriteOptions to the batch.\n\tCassandraBatchOperations delete(Iterable<?> entities, WriteOptions options);\n\t// Add an array of deletes to the batch.\n\tCassandraBatchOperations delete(Object... entities);\n\t// Add delete to the batch.\n\tdefault CassandraBatchOperations delete(Object entity, WriteOptions options);\n}", "des": "Batch operations for insert/update/delete actions on a table."}
{"index": 14759, "repo": "spring-data-cassandra-4.1.2", "code": "public interface CassandraColumnType extends ColumnType {\n\t// Returns the DataType associated with this column type.\n\tcom.datastax.oss.driver.api.core.type.DataType getDataType();\n\t// Returns whether the associated DataType is a TupleType.\n\tdefault boolean isTupleType();\n\t// Returns whether the associated DataType is a UserDefinedType.\n\tdefault boolean isUserDefinedType();\n}", "des": "Descriptor for a Cassandra column type exposing a DataType."}
{"index": 14760, "repo": "spring-data-cassandra-4.1.2", "code": "public interface CassandraConverter extends EntityConverter<CassandraPersistentEntity<?>,CassandraPersistentProperty,Object,Object> {\n\t// Converts the given object into a value Cassandra will be able to store natively in a column.\n\tObject convertToColumnType(Object value);\n\t// Converts the given object into a value Cassandra will be able to store natively in a column.\n\tObject convertToColumnType(Object value, ColumnType typeDescriptor);\n}", "des": "Central Cassandra specific converter interface from Object to Row."}
{"index": 14761, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraCqlTemplateFactoryBean extends Object implements FactoryBean<CqlTemplate>, InitializingBean {\n\tvoid afterPropertiesSet();\n\tCqlTemplate getObject();\n\tClass<CqlTemplate> getObjectType();\n\tboolean isSingleton();\n\t// Sets the Cassandra CqlSession to use.\n\tvoid setSession(com.datastax.oss.driver.api.core.CqlSession session);\n\t// Sets the Cassandra SessionFactory to use.\n\tvoid setSessionFactory(SessionFactory sessionFactory);\n}", "des": "Factory for configuring a CqlTemplate."}
{"index": 14762, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraEntityClassScanner extends Object {\n\tprotected Class<? extends Annotation>[] getEntityAnnotations();\n\tSet<Class<?>> getEntityBasePackageClasses();\n\tSet<String> getEntityBasePackages();\n\t// Scan one or more base packages for entity classes.\n\tstatic Set<Class<?>> scan(Class<?>... entityBasePackageClasses);\n\t// Scan one or more base packages for entity classes.\n\tstatic Set<Class<?>> scan(String... entityBasePackages);\n}", "des": "Scans packages for Cassandra entities."}
{"index": 14763, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraExceptionTranslator extends Object implements CqlExceptionTranslator {\n\t// Build a message String for the given DriverException.\n\tprotected String buildMessage(String task, String cql, RuntimeException ex);\n\t// Translate the given RuntimeException into a generic DataAccessException.\n\tDataAccessException translate(String task, String cql, RuntimeException exception);\n\tDataAccessException translateExceptionIfPossible(RuntimeException exception);\n}", "des": "Simple PersistenceExceptionTranslator for Cassandra."}
{"index": 14764, "repo": "spring-data-cassandra-4.1.2", "code": "@WritingConverter public static enum CassandraJsr310Converters.DateToInstantConverter extends Enum<CassandraJsr310Converters.DateToInstantConverter> implements Converter<Date,Instant> {\n\tInstant convert(Date source);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CassandraJsr310Converters.DateToInstantConverter valueOf(String name);\n}", "des": "Simple singleton to convert Dates to their Cassandra Instant representation for the CQL Timestamp type."}
{"index": 14765, "repo": "spring-data-cassandra-4.1.2", "code": "@ReadingConverter public static enum CassandraJsr310Converters.LocalTimeToMillisOfDayConverter extends Enum<CassandraJsr310Converters.LocalTimeToMillisOfDayConverter> implements Converter<LocalTime,Long> {\n\tLong convert(LocalTime source);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CassandraJsr310Converters.LocalTimeToMillisOfDayConverter valueOf(String name);\n}", "des": "Simple singleton to convert LocalTimes to their Long representation."}
{"index": 14766, "repo": "spring-data-cassandra-4.1.2", "code": "@ReadingConverter public static enum CassandraJsr310Converters.MillisOfDayToLocalTimeConverter extends Enum<CassandraJsr310Converters.MillisOfDayToLocalTimeConverter> implements Converter<Long,LocalTime> {\n\tLocalTime convert(Long source);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CassandraJsr310Converters.MillisOfDayToLocalTimeConverter valueOf(String name);\n}", "des": "Simple singleton to convert Longs to their LocalTime representation."}
{"index": 14767, "repo": "spring-data-cassandra-4.1.2", "code": "public final class CassandraManagedTypes extends Object implements ManagedTypes {\n\t// Factory method to return an empty CassandraManagedTypes object.\n\tstatic CassandraManagedTypes empty();\n\tvoid forEach(Consumer<Class<?>> action);\n\t// Factory method used to construct CassandraManagedTypes from the given array of types.\n\tstatic CassandraManagedTypes from(Class<?>... types);\n\t// Wraps an existing ManagedTypes object with CassandraManagedTypes.\n\tstatic CassandraManagedTypes from(ManagedTypes managedTypes);\n}", "des": "Cassandra-specific extension to ManagedTypes."}
{"index": 14768, "repo": "spring-data-cassandra-4.1.2", "code": "public interface CassandraOperations extends FluentCassandraOperations {\n\t// Returns a new CassandraBatchOperations using BatchType.LOGGED.\n\tdefault CassandraBatchOperations batchOps();\n\t// Returns a new CassandraBatchOperations.\n\tCassandraBatchOperations batchOps(com.datastax.oss.driver.api.core.cql.BatchType batchType);\n\t// Returns the number of rows for the given entity class.\n\tlong count(Class<?> entityClass);\n}", "des": "Interface specifying a basic set of Cassandra operations."}
{"index": 14769, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraPageRequest extends PageRequest {\n\tboolean equals(Object obj);\n\t// Creates a new unsorted PageRequest for the first page.\n\tstatic CassandraPageRequest first(int size);\n\t// Creates a new PageRequest with sort parameters applied for the first page.\n\tstatic CassandraPageRequest first(int size, Sort sort);\n}", "des": "Cassandra-specific PageRequest implementation providing access to paging state."}
{"index": 14770, "repo": "spring-data-cassandra-4.1.2", "code": "public interface CassandraParameterAccessor extends ParameterAccessor {\n\t// Returns the CassandraType for the declared method parameter.\n\tCassandraType findCassandraType(int index);\n\t// Returns the Cassandra DataType for the declared parameter if the type is a simple type.\n\tcom.datastax.oss.driver.api.core.type.DataType getDataType(int index);\n\t// The actual parameter type (after unwrapping).\n\tClass<?> getParameterType(int index);\n}", "des": "Cassandra-specific ParameterAccessor exposing a Cassandra types that are supported by the driver and parameter type."}
{"index": 14771, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraParametersParameterAccessor extends ParametersParameterAccessor implements CassandraParameterAccessor {\n\t// Returns the CassandraType for the declared method parameter.\n\tCassandraType findCassandraType(int index);\n\t// Returns the Cassandra DataType for the declared parameter if the type is a simple type.\n\tcom.datastax.oss.driver.api.core.type.DataType getDataType(int index);\n\tCassandraParameters getParameters();\n}", "des": "Cassandra-specific ParameterAccessor exposing Cassandra types that are supported by the driver and parameter type."}
{"index": 14772, "repo": "spring-data-cassandra-4.1.2", "code": "public interface CassandraPersistentEntity<T> extends PersistentEntity<T,CassandraPersistentProperty> {\n\t// Returns the table name to which the entity shall be persisted.\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getTableName();\n\t// Returns whether this entity represents a composite primary key.\n\tboolean isCompositePrimaryKey();\n\tboolean isTupleType();\n\tboolean isUserDefinedType();\n\t// Deprecated. since 3.0.\n\tvoid setForceQuote(boolean forceQuote);\n}", "des": "Cassandra specific PersistentEntity abstraction."}
{"index": 14773, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraPersistentEntitySchemaCreator extends Object {\n\t// Create indexes from types known to CassandraMappingContext.\n\tvoid createIndexes(boolean ifNotExists);\n\t// Create List of CreateIndexSpecification.\n\tprotected List<CreateIndexSpecification> createIndexSpecifications(boolean ifNotExists);\n\t// Create tables from types known to CassandraMappingContext.\n\tvoid createTables(boolean ifNotExists);\n}", "des": "Schema creation support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity."}
{"index": 14774, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraPersistentEntitySchemaDropper extends Object {\n\t// Drop tables that exist in the keyspace.\n\tvoid dropTables(boolean dropUnused);\n\t// Drop user types that exist in the keyspace.\n\tvoid dropUserTypes(boolean dropUnused);\n}", "des": "Schema drop support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity."}
{"index": 14775, "repo": "spring-data-cassandra-4.1.2", "code": "public interface CassandraPersistentProperty extends PersistentProperty<CassandraPersistentProperty>, ApplicationContextAware {\n\t// Find an AnnotatedType by annotationType derived from the property type.\n\tAnnotatedType findAnnotatedType(Class<? extends Annotation> annotationType);\n\t// The name of the single column to which the property is persisted.\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getColumnName();\n}", "des": "Cassandra specific PersistentProperty extension."}
{"index": 14776, "repo": "spring-data-cassandra-4.1.2", "code": "public enum CassandraPersistentPropertyComparator extends Enum<CassandraPersistentPropertyComparator> implements Comparator<CassandraPersistentProperty> {\n\tint compare(CassandraPersistentProperty left, CassandraPersistentProperty right);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CassandraPersistentPropertyComparator valueOf(String name);\n}", "des": "Comparator implementation that orders CassandraPersistentProperty instances."}
{"index": 14777, "repo": "spring-data-cassandra-4.1.2", "code": "public enum CassandraPrimaryKeyColumnAnnotationComparator extends Enum<CassandraPrimaryKeyColumnAnnotationComparator> implements Comparator<PrimaryKeyColumn> {\n\tint compare(PrimaryKeyColumn left, PrimaryKeyColumn right);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CassandraPrimaryKeyColumnAnnotationComparator valueOf(String name);\n}", "des": "Comparator implementation that uses, in order, the..."}
{"index": 14778, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraQueryMethod extends QueryMethod {\n\tprotected CassandraParameters createParameters(Method method);\n\t// Returns the query string declared in a Query annotation or null if neither the annotation found nor the attribute was specified.\n\tString getAnnotatedQuery();\n\tprotected Class<?> getDomainClass();\n\tCassandraEntityMetadata<?> getEntityInformation();\n\tCassandraParameters getParameters();\n}", "des": "Cassandra specific implementation of QueryMethod."}
{"index": 14779, "repo": "spring-data-cassandra-4.1.2", "code": "@NoRepositoryBean public interface CassandraRepository<T,ID> extends ListCrudRepository<T,ID> {\n\t// Returns a Slice of entities meeting the paging restriction provided in the Pageable object.\n\tSlice<T> findAll(Pageable pageable);\n\tList<T> findAllById(Iterable<ID> ids);\n\t// Inserts the given entities.\n\t<S extends T>List<S> insert(Iterable<S> entities);\n\t// Inserts the given entity.\n\t<S extends T>S insert(S entity);\n}", "des": "Cassandra-specific extension of the CrudRepository interface that allows the specification of a type for the identity of the @Table (or @Persistable) type."}
{"index": 14780, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraSchemaElementExistsException extends NonTransientDataAccessException {\n\t// Deprecated.\n\tString getElementName();\n\t// Deprecated.\n\tCassandraSchemaElementExistsException.ElementType getElementType();\n}", "des": "Spring data access exception for when Cassandra schema element being created already exists."}
{"index": 14781, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraSimpleTypeHolder extends SimpleTypeHolder {\n\t// Returns the default DataType for a Class.\n\tstatic com.datastax.oss.driver.api.core.type.DataType getDataTypeFor(Class<?> javaType);\n\t// Returns the DataType for a CassandraType.Name.\n\tstatic com.datastax.oss.driver.api.core.type.DataType getDataTypeFor(CassandraType.Name dataTypeName);\n\t// Returns the required default DataType for a Class.\n\tstatic com.datastax.oss.driver.api.core.type.DataType getRequiredDataTypeFor(Class<?> javaType);\n}", "des": "Simple constant holder for a SimpleTypeHolder enriched with Cassandra specific simple types."}
{"index": 14782, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraTemplate extends Object implements CassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware {\n\t// Returns a new CassandraBatchOperations.\n\tCassandraBatchOperations batchOps(com.datastax.oss.driver.api.core.cql.BatchType batchType);\n\t// Returns the number of rows for the given entity class.\n\tlong count(Class<?> entityClass);\n\t// Returns the number of rows for the given entity class applying Query.\n\tlong count(Query query, Class<?> entityClass);\n}", "des": "Primary implementation of CassandraOperations."}
{"index": 14783, "repo": "spring-data-cassandra-4.1.2", "code": "public static class CassandraTemplate.PreparedStatementHandler extends Object implements PreparedStatementCreator, PreparedStatementBinder, CqlProvider {\n\t// Bind parameter values on the given PreparedStatement.\n\tcom.datastax.oss.driver.api.core.cql.BoundStatement bindValues(com.datastax.oss.driver.api.core.cql.PreparedStatement ps);\n\t// Create a statement in this session.\n\tcom.datastax.oss.driver.api.core.cql.PreparedStatement createPreparedStatement(com.datastax.oss.driver.api.core.CqlSession session);\n}", "des": "Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement."}
{"index": 14784, "repo": "spring-data-cassandra-4.1.2", "code": "public class CassandraTemplateFactoryBean extends Object implements FactoryBean<CassandraTemplate>, InitializingBean {\n\tvoid afterPropertiesSet();\n\tCassandraTemplate getObject();\n\tClass<CassandraTemplate> getObjectType();\n\tboolean isSingleton();\n\t// Set the CassandraConverter to use.\n\tvoid setConverter(CassandraConverter converter);\n\t// Sets the Cassandra CqlOperations to use.\n\tvoid setCqlOperations(CqlOperations cqlOperations);\n}", "des": "Factory for configuring a CassandraTemplate."}
{"index": 14785, "repo": "spring-data-cassandra-4.1.2", "code": "public static enum CassandraType.Name extends Enum<CassandraType.Name> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CassandraType.Name valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CassandraType.Name[] values();\n}", "des": "Cassandra Protocol types."}
{"index": 14786, "repo": "spring-data-cassandra-4.1.2", "code": "public interface CassandraValueProvider extends PropertyValueProvider<CassandraPersistentProperty> {\n\t// Returns whether the underlying source.\n\tObject getSource();\n\t// Returns whether the underlying source contains a data source for the given CassandraPersistentProperty.\n\tboolean hasProperty(CassandraPersistentProperty property);\n}", "des": "PropertyValueProvider for CassandraPersistentProperty."}
{"index": 14787, "repo": "spring-data-cassandra-4.1.2", "code": "public class ColumnMapRowMapper extends Object implements RowMapper<Map<String,Object>> {\n\t// Create a Map instance to be used as column map.\n\tprotected Map<String,Object> createColumnMap(int columnCount);\n\t// Determine the key to use for the given column in the column Map.\n\tprotected String getColumnKey(String columnName);\n\t// Retrieve a CQL object value for the specified column.\n\tprotected Object getColumnValue(com.datastax.oss.driver.api.core.cql.Row row, int index);\n}", "des": "RowMapper implementation that creates a java.util.Map for each row, representing all columns as key-value pairs: one entry for each column, with the column name as key."}
{"index": 14788, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class ColumnName extends Object {\n\tboolean equals(Object obj);\n\t// Create a ColumnName given CqlIdentifier.\n\tstatic ColumnName from(com.datastax.oss.driver.api.core.CqlIdentifier cqlIdentifier);\n\t// Create a ColumnName given a string columnName.\n\tstatic ColumnName from(String columnName);\n\tabstract Optional<String> getColumnName();\n\tabstract Optional<com.datastax.oss.driver.api.core.CqlIdentifier> getCqlIdentifier();\n\t// Represent the column name as CQL.\n\tabstract String toCql();\n}", "des": "Value object representing a column name."}
{"index": 14789, "repo": "spring-data-cassandra-4.1.2", "code": "public class Columns extends Object implements Iterable<ColumnName> {\n\t// Returns a new Columns consisting of the ColumnNames of the current Columns combined with the given ones.\n\tColumns and(Columns columns);\n\t// Create an empty Columns instance without any columns.\n\tstatic Columns empty();\n\tboolean equals(Object object);\n\t// Create a Columns given columnNames.\n\tstatic Columns from(com.datastax.oss.driver.api.core.CqlIdentifier... columnNames);\n}", "des": "Value object to abstract column names involved in a CQL query."}
{"index": 14790, "repo": "spring-data-cassandra-4.1.2", "code": "public static class Columns.ColumnSelector extends Object implements Columns.Selector {\n\t// Create a Columns.ColumnSelector for the current expression aliased as alias.\n\tColumns.ColumnSelector as(com.datastax.oss.driver.api.core.CqlIdentifier alias);\n\t// Create a Columns.ColumnSelector for the current expression aliased as alias.\n\tColumns.ColumnSelector as(String alias);\n\tboolean equals(Object o);\n}", "des": "Column selection."}
{"index": 14791, "repo": "spring-data-cassandra-4.1.2", "code": "public static class Columns.FunctionCall extends Object implements Columns.Selector {\n\t// Create a Columns.FunctionCall for the current expression aliased as alias.\n\tColumns.FunctionCall as(com.datastax.oss.driver.api.core.CqlIdentifier alias);\n\t// Create a Columns.FunctionCall for the current expression aliased as alias.\n\tColumns.FunctionCall as(String alias);\n\tboolean equals(Object o);\n\tstatic Columns.FunctionCall from(String expression, Object... params);\n}", "des": "Function call selector with alias support."}
{"index": 14792, "repo": "spring-data-cassandra-4.1.2", "code": "public class ColumnSpecification extends Object {\n\t// Identifies this column as a clustered key column with default ordering.\n\tColumnSpecification clustered();\n\t// Identifies this column as a clustered key column with the given ordering.\n\tColumnSpecification clustered(Ordering order);\n\t// Toggles the identification of this column as a clustered key column.\n\tColumnSpecification clustered(Ordering order, boolean primary);\n\tPrimaryKeyType getKeyType();\n}", "des": "Object to configure a CQL column specification."}
{"index": 14793, "repo": "spring-data-cassandra-4.1.2", "code": "public interface ColumnType {\n\t// Creates a ColumnType for a Class.\n\tstatic ColumnType create(Class<?> type);\n\t// Creates a ColumnType for a Class and DataType.\n\tstatic CassandraColumnType create(Class<?> type, com.datastax.oss.driver.api.core.type.DataType dataType);\n\t// Creates a ColumnType for a TypeInformation.\n\tstatic ColumnType create(TypeInformation<?> type);\n\t// Returns the component type for Collections or the key type for Maps.\n\tColumnType getComponentType();\n}", "des": "Interface to access column type information."}
{"index": 14794, "repo": "spring-data-cassandra-4.1.2", "code": "public interface ColumnTypeResolver {\n\t// Resolve a ColumnType from a value.\n\tColumnType resolve(Object value);\n\t// Resolve a CassandraColumnType from a CassandraPersistentProperty.\n\tdefault CassandraColumnType resolve(CassandraPersistentProperty property);\n\t// Resolve a CassandraColumnType from a CassandraType annotation.\n\tCassandraColumnType resolve(CassandraType annotation);\n\t// Resolve a CassandraColumnType from TypeInformation.\n\tCassandraColumnType resolve(TypeInformation<?> typeInformation);\n}", "des": "Resolves ColumnType for properties, TypeInformation, and values."}
{"index": 14795, "repo": "spring-data-cassandra-4.1.2", "code": "public class CompositeKeyspacePopulator extends Object implements KeyspacePopulator {\n\t// Add one or more populators to the list of delegates.\n\tvoid addPopulators(KeyspacePopulator... populators);\n\t// Populate, initialize, or clean up the database using the provided CqlSession connection.\n\tvoid populate(com.datastax.oss.driver.api.core.CqlSession session);\n\t// Specify one or more populators to delegate to.\n\tvoid setPopulators(KeyspacePopulator... populators);\n}", "des": "Composite KeyspacePopulator that delegates to a list of given KeyspacePopulator implementations, executing all scripts."}
{"index": 14796, "repo": "spring-data-cassandra-4.1.2", "code": "public enum CompressionType extends Enum<CompressionType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CompressionType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CompressionType[] values();\n}", "des": "Simple enumeration for the various compression types."}
{"index": 14797, "repo": "spring-data-cassandra-4.1.2", "code": "public interface CqlOperations {\n\t// Describe the current Ring.\n\tList<RingMember> describeRing();\n\t// Describe the current Ring.\n\t<T> Collection<T> describeRing(HostMapper<T> hostMapper);\n\t// Issue a single CQL execute, typically a DDL statement, insert, update or delete statement.\n\tboolean execute(com.datastax.oss.driver.api.core.cql.Statement<?> statement);\n\t// Issue a single CQL execute, typically a DDL statement, insert, update or delete statement.\n\tboolean execute(String cql);\n}", "des": "Interface specifying a basic set of CQL operations."}
{"index": 14798, "repo": "spring-data-cassandra-4.1.2", "code": "public class CqlTemplate extends CassandraAccessor implements CqlOperations {\n\t// Describe the current Ring.\n\tList<RingMember> describeRing();\n\t// Describe the current Ring.\n\t<T> Collection<T> describeRing(HostMapper<T> hostMapper);\n\t// Issue a single CQL execute, typically a DDL statement, insert, update or delete statement.\n\tboolean execute(com.datastax.oss.driver.api.core.cql.Statement<?> statement);\n}", "des": "This is the central class in the CQL core package. It simplifies the use of CQL and helps to avoid common errors."}
{"index": 14799, "repo": "spring-data-cassandra-4.1.2", "code": "public class CreateIndexSpecification extends IndexNameSpecification<CreateIndexSpecification> implements IndexDescriptor {\n\t// Set a CreateIndexSpecification.ColumnFunction such as KEYS(…), ENTRIES(…).\n\tCreateIndexSpecification columnFunction(CreateIndexSpecification.ColumnFunction columnFunction);\n\t// Sets the column name.\n\tCreateIndexSpecification columnName(com.datastax.oss.driver.api.core.CqlIdentifier columnName);\n\t// Sets the column name.\n\tCreateIndexSpecification columnName(String columnName);\n}", "des": "Object to configure a CREATE INDEX specification."}
{"index": 14800, "repo": "spring-data-cassandra-4.1.2", "code": "public static enum CreateIndexSpecification.ColumnFunction extends Enum<CreateIndexSpecification.ColumnFunction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CreateIndexSpecification.ColumnFunction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CreateIndexSpecification.ColumnFunction[] values();\n}", "des": "Column functions to specify indexing behavior."}
{"index": 14801, "repo": "spring-data-cassandra-4.1.2", "code": "public class CreateKeyspaceSpecification extends KeyspaceOptionsSpecification<CreateKeyspaceSpecification> implements KeyspaceDescriptor {\n\t// Entry point into the CreateKeyspaceSpecification's fluent API given name to create a keyspace.\n\tstatic CreateKeyspaceSpecification createKeyspace(com.datastax.oss.driver.api.core.CqlIdentifier name);\n\t// Entry point into the CreateKeyspaceSpecification's fluent API given name to create a keyspace.\n\tstatic CreateKeyspaceSpecification createKeyspace(String name);\n}", "des": "Object to configure a CREATE KEYSPACE specification."}
{"index": 14802, "repo": "spring-data-cassandra-4.1.2", "code": "public class CreateTableSpecification extends TableSpecification<CreateTableSpecification> {\n\t// Entry point into the CreateTableSpecification's fluent API given tableName to create a table.\n\tstatic CreateTableSpecification createTable(com.datastax.oss.driver.api.core.CqlIdentifier tableName);\n\t// Entry point into the CreateTableSpecification's fluent API given tableName to create a table.\n\tstatic CreateTableSpecification createTable(String tableName);\n\tboolean getIfNotExists();\n}", "des": "Object to configure a CREATE TABLE specification."}
{"index": 14803, "repo": "spring-data-cassandra-4.1.2", "code": "public class CreateUserTypeSpecification extends UserTypeSpecification<CreateUserTypeSpecification> {\n\t// Entry point into the CreateUserTypeSpecification's fluent API given name to create a type.\n\tstatic CreateUserTypeSpecification createType(com.datastax.oss.driver.api.core.CqlIdentifier name);\n\t// Entry point into the CreateUserTypeSpecification's fluent API given name to create a type.\n\tstatic CreateUserTypeSpecification createType(String name);\n\tboolean getIfNotExists();\n}", "des": "Object to configure a CREATE TYPE specification."}
{"index": 14804, "repo": "spring-data-cassandra-4.1.2", "code": "public class Criteria extends Object implements CriteriaDefinition {\n\t// Create a criterion using the CONTAINS operator.\n\tCriteriaDefinition contains(Object value);\n\t// Create a criterion using the CONTAINS KEY operator.\n\tCriteriaDefinition containsKey(Object key);\n\tboolean equals(Object obj);\n\t// Get the identifying key.\n\tColumnName getColumnName();\n\t// Get CriteriaDefinition.Predicate.\n\tCriteriaDefinition.Predicate getPredicate();\n}", "des": "Basic class for creating queries."}
{"index": 14805, "repo": "spring-data-cassandra-4.1.2", "code": "public interface CriteriaDefinition {\n\t// Get the identifying key.\n\tColumnName getColumnName();\n\t// Get CriteriaDefinition.Predicate.\n\tCriteriaDefinition.Predicate getPredicate();\n}", "des": "Criteria definition for a ColumnName exposing a CriteriaDefinition.Predicate."}
{"index": 14806, "repo": "spring-data-cassandra-4.1.2", "code": "public static enum CriteriaDefinition.Operators extends Enum<CriteriaDefinition.Operators> implements CriteriaDefinition.Operator {\n\tstatic Optional<CriteriaDefinition.Operators> from(String operator);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CriteriaDefinition.Operators valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CriteriaDefinition.Operators[] values();\n}", "des": "Commonly used CQL operators."}
{"index": 14807, "repo": "spring-data-cassandra-4.1.2", "code": "public class DataClassRowMapper<T> extends BeanPropertyRowMapper<T> {\n\t// Construct an instance of the mapped class for the current row.\n\tprotected T constructMappedInstance(com.datastax.oss.driver.api.core.cql.Row row, TypeConverter tc);\n\t// Initialize the mapping meta-data for the given class.\n\tprotected void initialize(Class<T> mappedClass);\n\t// Static factory method to create a new DataClassRowMapper.\n\tstatic <T> DataClassRowMapper<T> newInstance(Class<T> mappedClass);\n}", "des": "RowMapper implementation that converts a row into a new instance of the specified mapped target class."}
{"index": 14808, "repo": "spring-data-cassandra-4.1.2", "code": "public class DefaultBridgedReactiveSession extends Object implements ReactiveSession {\n\t// Initiates a shutdown of this session instance and blocks until that shutdown completes.\n\tvoid close();\n\t// Executes the provided query.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(com.datastax.oss.driver.api.core.cql.Statement<?> statement);\n\t// Executes the provided query.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(String query);\n}", "des": "Default implementation of a ReactiveSession."}
{"index": 14809, "repo": "spring-data-cassandra-4.1.2", "code": "public class DefaultOption extends Object implements Option {\n\t// Checks that the given value can be coerced into the type given by Option.getType().\n\tvoid checkValue(Object value);\n\t// Whether this option should escape single quotes in its value.\n\tboolean escapesValue();\n\t// The (usually lower-cased, underscore-separated) name of this table option.\n\tString getName();\n\t// The type that values must be able to be coerced into for this option.\n\tClass<?> getType();\n}", "des": "A default implementation of Option."}
{"index": 14810, "repo": "spring-data-cassandra-4.1.2", "code": "public class DeleteOptions extends WriteOptions {\n\t// Create a new DeleteOptions.DeleteOptionsBuilder.\n\tstatic DeleteOptions.DeleteOptionsBuilder builder();\n\t// Create default DeleteOptions.\n\tstatic DeleteOptions empty();\n\tboolean equals(Object o);\n\tFilter getIfCondition();\n\tboolean isIfExists();\n\t// Create a new DeleteOptions.DeleteOptionsBuilder to mutate properties of this DeleteOptions.\n\tDeleteOptions.DeleteOptionsBuilder mutate();\n}", "des": "Extension to WriteOptions for use with DELETE operations."}
{"index": 14811, "repo": "spring-data-cassandra-4.1.2", "code": "public static class DeleteOptions.DeleteOptionsBuilder extends WriteOptions.WriteOptionsBuilder {\n\t// Builds a new DeleteOptions with the configured values.\n\tDeleteOptions build();\n\t// Sets the ConsistencyLevel to use.\n\tDeleteOptions.DeleteOptionsBuilder consistencyLevel(com.datastax.oss.driver.api.core.ConsistencyLevel consistencyLevel);\n\t// Sets the execution profile to use.\n\tDeleteOptions.DeleteOptionsBuilder executionProfile(String profileName);\n}", "des": "Builder for DeleteOptions."}
{"index": 14812, "repo": "spring-data-cassandra-4.1.2", "code": "public class DropColumnSpecification extends ColumnChangeSpecification {\n\t// Create a new DropColumnSpecification for the given name.\n\tstatic DropColumnSpecification dropColumn(com.datastax.oss.driver.api.core.CqlIdentifier name);\n\t// Create a new DropColumnSpecification for the given name.\n\tstatic DropColumnSpecification dropColumn(String name);\n}", "des": "Value object representing a specification to drop a column."}
{"index": 14813, "repo": "spring-data-cassandra-4.1.2", "code": "public class DropIndexSpecification extends IndexNameSpecification<DropIndexSpecification> {\n\t// Create a new DropIndexSpecification for the given indexName.\n\tstatic DropIndexSpecification dropIndex(com.datastax.oss.driver.api.core.CqlIdentifier indexName);\n\t// Create a new DropIndexSpecification for the given indexName.\n\tstatic DropIndexSpecification dropIndex(String indexName);\n}", "des": "Value object representing a DROP INDEX specification."}
{"index": 14814, "repo": "spring-data-cassandra-4.1.2", "code": "public class DropKeyspaceSpecification extends KeyspaceActionSpecification {\n\t// Create a new DropKeyspaceSpecification for the given name.\n\tstatic DropKeyspaceSpecification dropKeyspace(com.datastax.oss.driver.api.core.CqlIdentifier name);\n\t// Create a new DropKeyspaceSpecification for the given name.\n\tstatic DropKeyspaceSpecification dropKeyspace(String name);\n\t// Deprecated. since 3.0, use dropKeyspace(CqlIdentifier).\n\tstatic DropKeyspaceSpecification dropKeyspace(KeyspaceIdentifier name);\n}", "des": "Object to configure a DROP KEYSPACE specification."}
{"index": 14815, "repo": "spring-data-cassandra-4.1.2", "code": "public class DropTableSpecification extends TableNameSpecification {\n\t// Entry point into the DropTableSpecification's fluent API given tableName to drop a table.\n\tstatic DropTableSpecification dropTable(com.datastax.oss.driver.api.core.CqlIdentifier tableName);\n\t// Entry point into the DropTableSpecification's fluent API tableName to drop a table.\n\tstatic DropTableSpecification dropTable(String tableName);\n\tboolean getIfExists();\n}", "des": "Object to configure a DROP TABLE specification."}
{"index": 14816, "repo": "spring-data-cassandra-4.1.2", "code": "public class DropUserTypeSpecification extends UserTypeNameSpecification {\n\t// Entry point into the DropUserTypeSpecification's fluent API given name to drop a type.\n\tstatic DropUserTypeSpecification dropType(com.datastax.oss.driver.api.core.CqlIdentifier name);\n\t// Entry point into the DropUserTypeSpecification's fluent API given name to drop a type.\n\tstatic DropUserTypeSpecification dropType(String name);\n\tboolean getIfExists();\n}", "des": "Object to configure a DROP TYPE specification."}
{"index": 14817, "repo": "spring-data-cassandra-4.1.2", "code": "public static enum Embedded.OnEmpty extends Enum<Embedded.OnEmpty> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Embedded.OnEmpty valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Embedded.OnEmpty[] values();\n}", "des": "Load strategy to be used Embedded.onEmpty()."}
{"index": 14818, "repo": "spring-data-cassandra-4.1.2", "code": "public class EntityMapping extends Object {\n\tboolean equals(Object obj);\n\tString getEntityClassName();\n\t// Deprecated. since 3.0.\n\tString getForceQuote();\n\tMap<String,PropertyMapping> getPropertyMappings();\n\tString getTableName();\n\tvoid setEntityClassName(String entityClassName);\n\t// Deprecated.\n\tvoid setForceQuote(String forceQuote);\n\tvoid setPropertyMappings(Map<String,PropertyMapping> propertyMappings);\n\tvoid setTableName(String tableName);\n}", "des": "Mapping information for an individual entity class."}
{"index": 14819, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface ExecutableDeleteOperation.DeleteWithTable {\n\t// Explicitly set the name of the table on which to execute the delete.\n\tExecutableDeleteOperation.DeleteWithQuery inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to execute the delete.\n\tdefault ExecutableDeleteOperation.DeleteWithQuery inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 14820, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface ExecutableInsertOperation.InsertWithTable<T> extends ExecutableInsertOperation.InsertWithOptions<T> {\n\t// Explicitly set the name of the table.\n\tExecutableInsertOperation.InsertWithOptions<T> inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table.\n\tdefault ExecutableInsertOperation.InsertWithOptions<T> inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 14821, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface ExecutableSelectOperation.SelectWithTable<T> extends ExecutableSelectOperation.SelectWithQuery<T> {\n\t// Explicitly set the name of the table on which to execute the query.\n\tExecutableSelectOperation.SelectWithProjection<T> inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to execute the query.\n\tdefault ExecutableSelectOperation.SelectWithProjection<T> inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 14822, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface ExecutableSelectOperation.TerminatingSelect<T> {\n\t// Get all matching elements.\n\tList<T> all();\n\t// Get the number of matching elements.\n\tlong count();\n\t// Check for the presence of matching elements.\n\tdefault boolean exists();\n\t// Get the first result, or no result.\n\tdefault Optional<T> first();\n\t// Get the first result, or no result.\n\tT firstValue();\n\t// Get exactly zero or one result.\n\tdefault Optional<T> one();\n\t// Get exactly zero or one result.\n\tT oneValue();\n}", "des": "Trigger SELECT query execution by calling one of the terminating methods."}
{"index": 14823, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface ExecutableUpdateOperation.UpdateWithTable {\n\t// Explicitly set the name of the table on which to execute the update.\n\tExecutableUpdateOperation.UpdateWithQuery inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to execute the update.\n\tdefault ExecutableUpdateOperation.UpdateWithQuery inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 14824, "repo": "spring-data-cassandra-4.1.2", "code": "@FunctionalInterface public interface ExecutionProfileResolver {\n\t// Apply an execution profile based on the Statement.\n\tcom.datastax.oss.driver.api.core.cql.Statement<?> apply(com.datastax.oss.driver.api.core.cql.Statement<?> statement);\n\t// Create a ExecutionProfileResolver from a DriverExecutionProfile to apply the profile object.\n\tstatic ExecutionProfileResolver from(com.datastax.oss.driver.api.core.config.DriverExecutionProfile driverExecutionProfile);\n}", "des": "Resolver for a DriverExecutionProfile used with Statement.setExecutionProfileName(String) or Statement.setExecutionProfile(DriverExecutionProfile)."}
{"index": 14825, "repo": "spring-data-cassandra-4.1.2", "code": "public class FieldSpecification extends Object {\n\t// Create a new FieldSpecification given name and DataType.\n\tstatic FieldSpecification of(com.datastax.oss.driver.api.core.CqlIdentifier name, com.datastax.oss.driver.api.core.type.DataType type);\n\t// Create a new FieldSpecification for the given name and DataType\n\tstatic FieldSpecification of(String name, com.datastax.oss.driver.api.core.type.DataType type);\n\tString toCql();\n\tStringBuilder toCql(StringBuilder cql);\n}", "des": "Base value object class to specify user type fields."}
{"index": 14826, "repo": "spring-data-cassandra-4.1.2", "code": "@FunctionalInterface public interface Filter extends Streamable<CriteriaDefinition> {\n\t// Create a simple Filter given CriteriaDefinitions.\n\tstatic Filter from(Iterable<? extends CriteriaDefinition> criteriaDefinitions);\n\t// Create a simple Filter given CriteriaDefinitions.\n\tstatic Filter from(CriteriaDefinition... criteriaDefinitions);\n\tIterable<CriteriaDefinition> getCriteriaDefinitions();\n\tdefault Iterator<CriteriaDefinition> iterator();\n}", "des": "Filter consisting of CriteriaDefinitions to be used with SELECT, UPDATE and DELETE queries."}
{"index": 14827, "repo": "spring-data-cassandra-4.1.2", "code": "public class IdInterfaceExceptions extends MappingException {\n\tvoid add(IdInterfaceException e);\n\t// Returns the number of exceptions aggregated in this exception.\n\tint getCount();\n\t// Returns a list of the IdInterfaceExceptions aggregated within.\n\tCollection<MappingException> getExceptions();\n\tString getIdInterfaceName();\n\tString getMessage();\n\t// Returns a list of the IdInterfaceException messages aggregated within.\n\tCollection<String> getMessages();\n}", "des": "Aggregator of multiple violations for convenience when verifying id interfaces."}
{"index": 14828, "repo": "spring-data-cassandra-4.1.2", "code": "public class IncorrectResultSetColumnCountException extends DataRetrievalFailureException {\n\t// Return the actual column count.\n\tint getActualCount();\n\t// Return the expected column count.\n\tint getExpectedCount();\n}", "des": "Data access exception thrown when a result set did not have the correct column count, for example when expecting a single column but getting 0 or more than 1 columns."}
{"index": 14829, "repo": "spring-data-cassandra-4.1.2", "code": "public interface IndexDescriptor {\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getColumnName();\n\t// Returns the name of the index.\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getName();\n\t// Returns the table name for the index\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getTableName();\n\tString getUsing();\n\tboolean isCustom();\n}", "des": "Describes an index."}
{"index": 14830, "repo": "spring-data-cassandra-4.1.2", "code": "public class InsertOptions extends WriteOptions {\n\t// Create a new InsertOptions.InsertOptionsBuilder.\n\tstatic InsertOptions.InsertOptionsBuilder builder();\n\t// Create default InsertOptions.\n\tstatic InsertOptions empty();\n\tboolean equals(Object o);\n\tboolean isIfNotExists();\n\tboolean isInsertNulls();\n\t// Create a new InsertOptions.InsertOptionsBuilder to mutate properties of this InsertOptions.\n\tInsertOptions.InsertOptionsBuilder mutate();\n}", "des": "Extension to WriteOptions for use with INSERT operations."}
{"index": 14831, "repo": "spring-data-cassandra-4.1.2", "code": "public static class InsertOptions.InsertOptionsBuilder extends WriteOptions.WriteOptionsBuilder {\n\t// Builds a new InsertOptions with the configured values.\n\tInsertOptions build();\n\t// Sets the ConsistencyLevel to use.\n\tInsertOptions.InsertOptionsBuilder consistencyLevel(com.datastax.oss.driver.api.core.ConsistencyLevel consistencyLevel);\n\t// Sets the execution profile to use.\n\tInsertOptions.InsertOptionsBuilder executionProfile(String profileName);\n}", "des": "Builder for InsertOptions."}
{"index": 14832, "repo": "spring-data-cassandra-4.1.2", "code": "public enum KeyspaceAction extends Enum<KeyspaceAction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic KeyspaceAction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic KeyspaceAction[] values();\n}", "des": "Available actions for Keyspace Specifications."}
{"index": 14833, "repo": "spring-data-cassandra-4.1.2", "code": "public class KeyspaceAttributes extends Object {\n\tboolean getDurableWrites();\n\tlong getReplicationFactor();\n\tKeyspaceOption.ReplicationStrategy getReplicationStrategy();\n\t// Returns a map of Options suitable as the value of a KeyspaceOption.REPLICATION option with replication strategy class \"NetworkTopologyStrategy\" and with data centers each with their corresponding replication factors.\n\tstatic Map<Option,Object> newNetworkReplication(DataCenterReplication... dataCenterReplications);\n}", "des": "Keyspace attributes."}
{"index": 14834, "repo": "spring-data-cassandra-4.1.2", "code": "public interface KeyspaceDescriptor {\n\t// Returns the name of the table.\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getName();\n\t// Returns an unmodifiable Map of keyspace options.\n\tMap<String,Object> getOptions();\n}", "des": "Describes a Keyspace."}
{"index": 14835, "repo": "spring-data-cassandra-4.1.2", "code": "public static enum KeyspaceOption.ReplicationStrategy extends Enum<KeyspaceOption.ReplicationStrategy> {\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic KeyspaceOption.ReplicationStrategy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic KeyspaceOption.ReplicationStrategy[] values();\n}", "des": "Known Replication Strategy options."}
{"index": 14836, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class KeyspaceOptionsSpecification<T extends KeyspaceOptionsSpecification<T>> extends KeyspaceActionSpecification {\n\tboolean equals(Object o);\n\tMap<String,Object> getOptions();\n\t// Adds the given option by name to this keyspaces's options.\n\tT with(String name, Object value, boolean escape, boolean quote);\n\t// Convenience method that calls with(option, null).\n\tT with(KeyspaceOption option);\n\t// Sets the given table option.\n\tT with(KeyspaceOption option, Object value);\n}", "des": "Abstract builder class to support the construction of table specifications that have table options, that is, those options normally specified by WITH ... AND ...."}
{"index": 14837, "repo": "spring-data-cassandra-4.1.2", "code": "public class MapBuilder<K,V> extends Object implements Map<K,V> {\n\t// Return a new map based on the current state of this builder's map.\n\tMap<K,V> build();\n\tvoid clear();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\t// Add an entry to this map, then returns this.\n\tMapBuilder<K,V> entry(K key, V value);\n\tSet<Map.Entry<K,V>> entrySet();\n\tboolean equals(Object o);\n\tV get(Object key);\n\tboolean isEmpty();\n\tSet<K> keySet();\n}", "des": "Builder for maps, which also conveniently implements Map via delegation for convenience so you don't have to actually build() it."}
{"index": 14838, "repo": "spring-data-cassandra-4.1.2", "code": "public class MapIdFactory extends Object {\n\t// Produces an implementation of the given id interface type using the type's class loader.\n\tstatic <T> T id(Class<T> idInterface);\n\t// Produces an implementation of the given class loader.\n\tstatic <T> T id(Class<T> idInterface, ClassLoader loader);\n}", "des": "Factory class for producing implementations of given id interfaces."}
{"index": 14839, "repo": "spring-data-cassandra-4.1.2", "code": "public class MappingCassandraConverter extends AbstractCassandraConverter implements ApplicationContextAware, BeanClassLoaderAware {\n\t// Converts the given object into a value Cassandra will be able to store natively in a column.\n\tObject convertToColumnType(Object obj);\n\t// Converts the given object into a value Cassandra will be able to store natively in a column.\n\tObject convertToColumnType(Object value, ColumnType columnType);\n}", "des": "CassandraConverter that uses a MappingContext to do sophisticated mapping of domain objects to Row."}
{"index": 14840, "repo": "spring-data-cassandra-4.1.2", "code": "public class MappingCassandraEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements CassandraEntityInformation<T,ID> {\n\tID getId(T entity);\n\t// Returns the attribute that the id will be persisted to.\n\tString getIdAttribute();\n\tClass<ID> getIdType();\n\t// Returns the name of the table the entity shall be persisted to.\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getTableName();\n}", "des": "CassandraEntityInformation implementation using a CassandraPersistentEntity instance to lookup the necessary information."}
{"index": 14841, "repo": "spring-data-cassandra-4.1.2", "code": "public class MapSessionFactoryLookup extends Object implements SessionFactoryLookup {\n\t// Add the supplied SessionFactory to the map of session factories maintained by this object.\n\tvoid addSessionFactory(String sessionFactoryName, SessionFactory sessionFactory);\n\t// Get the Map of session factories maintained by this object.\n\tMap<String,SessionFactory> getSessionFactories();\n}", "des": "Simple SessionFactoryLookup implementation that relies on a map for doing lookups."}
{"index": 14842, "repo": "spring-data-cassandra-4.1.2", "code": "public interface NamingStrategy {\n\t// Create a column name from the given property.\n\tdefault String getColumnName(CassandraPersistentProperty property);\n\t// Create a table name from the given CassandraPersistentEntity.\n\tdefault String getTableName(CassandraPersistentEntity<?> entity);\n\t// Create a user-defined type name from the given CassandraPersistentEntity.\n\tdefault String getUserDefinedTypeName(CassandraPersistentEntity<?> entity);\n}", "des": "Interface and default implementation of a naming strategy."}
{"index": 14843, "repo": "spring-data-cassandra-4.1.2", "code": "public final class ObservableCqlSessionFactory extends Object {\n\t// Wrap the CqlSession with a CqlSessionObservationInterceptor.\n\tstatic com.datastax.oss.driver.api.core.CqlSession wrap(com.datastax.oss.driver.api.core.CqlSession session, io.micrometer.observation.ObservationRegistry observationRegistry);\n}", "des": "Factory to wrap a CqlSession with a CqlSessionObservationInterceptor."}
{"index": 14844, "repo": "spring-data-cassandra-4.1.2", "code": "public class ObservableReactiveSession extends Object implements ReactiveSession {\n\t// Initiates a shutdown of this session instance and blocks until that shutdown completes.\n\tvoid close();\n\t// Factory method for creation of a ObservableReactiveSession.\n\tstatic ReactiveSession create(ReactiveSession session, io.micrometer.observation.ObservationRegistry observationRegistry);\n}", "des": "Instrumented ReactiveSession for observability."}
{"index": 14845, "repo": "spring-data-cassandra-4.1.2", "code": "public final class ObservableReactiveSessionFactory extends Object {\n\t// Wrap the CqlSession with a CqlSessionObservationInterceptor.\n\tstatic ReactiveSession wrap(ReactiveSession session, io.micrometer.observation.ObservationRegistry observationRegistry);\n\t// Wrap the CqlSession with a CqlSessionObservationInterceptor.\n\tstatic ReactiveSession wrap(ReactiveSession session, String remoteServiceName, io.micrometer.observation.ObservationRegistry observationRegistry);\n}", "des": "Factory to wrap a ReactiveSession with ObservableReactiveSession."}
{"index": 14846, "repo": "spring-data-cassandra-4.1.2", "code": "public interface Option {\n\t// Checks that the given value can be coerced into the type given by getType().\n\tvoid checkValue(Object value);\n\t// Whether this option should escape single quotes in its value.\n\tboolean escapesValue();\n\t// The (usually lower-cased, underscore-separated) name of this table option.\n\tString getName();\n\t// The type that values must be able to be coerced into for this option.\n\tClass<?> getType();\n}", "des": "Interface to represent option types."}
{"index": 14847, "repo": "spring-data-cassandra-4.1.2", "code": "public enum Ordering extends Enum<Ordering> {\n\t// Returns the CQL keyword of this Ordering.\n\tString cql();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Ordering valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Ordering[] values();\n}", "des": "Enum for Cassandra primary key column ordering."}
{"index": 14848, "repo": "spring-data-cassandra-4.1.2", "code": "public class PartTreeCassandraQuery extends AbstractCassandraQuery {\n\t// Creates a Statement using the given ParameterAccessor\n\tprotected com.datastax.oss.driver.api.core.cql.SimpleStatement createQuery(CassandraParameterAccessor parameterAccessor);\n\t// Returns the MappingContext used by this query to access mapping meta-data used to store (map) objects to Cassandra tables.\n\tprotected MappingContext<? extends CassandraPersistentEntity<?>,CassandraPersistentProperty> getMappingContext();\n}", "des": "RepositoryQuery implementation for Cassandra."}
{"index": 14849, "repo": "spring-data-cassandra-4.1.2", "code": "public class PersistentPropertyTranslator extends Object {\n\t// Create a new PersistentPropertyTranslator.\n\tstatic PersistentPropertyTranslator create(CassandraPersistentEntity<?> targetEntity);\n\t// Create a new PersistentPropertyTranslator accepting a filter predicate whether the translation should happen at all.\n\tstatic PersistentPropertyTranslator create(CassandraPersistentEntity<?> targetEntity, Predicate<CassandraPersistentProperty> translationFilter);\n}", "des": "Utility to translate a CassandraPersistentProperty into a corresponding property from a different CassandraPersistentEntity by looking it up by name."}
{"index": 14850, "repo": "spring-data-cassandra-4.1.2", "code": "public enum PrimaryKeyType extends Enum<PrimaryKeyType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PrimaryKeyType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PrimaryKeyType[] values();\n}", "des": "Values representing primary key column types."}
{"index": 14851, "repo": "spring-data-cassandra-4.1.2", "code": "public class PropertyMapping extends Object {\n\tboolean equals(Object o);\n\tString getColumnName();\n\t// Deprecated.\n\tString getForceQuote();\n\tString getPropertyName();\n\tvoid setColumnName(String columnName);\n\t// Deprecated.\n\tvoid setForceQuote(String forceQuote);\n}", "des": "Mapping between a persistent entity's property and its column."}
{"index": 14852, "repo": "spring-data-cassandra-4.1.2", "code": "public class Query extends Object implements Filter {\n\t// Add the given CriteriaDefinition to the current Query.\n\tQuery and(CriteriaDefinition criteriaDefinition);\n\t// Add Columns to the Query instance.\n\tQuery columns(Columns columns);\n\t// Static factory method to create an empty Query.\n\tstatic Query empty();\n\tboolean equals(Object obj);\n\tColumns getColumns();\n\tIterable<CriteriaDefinition> getCriteriaDefinitions();\n\tlong getLimit();\n\tOptional<ByteBuffer> getPagingState();\n}", "des": "Query object representing CriteriaDefinitions, Columns, Sort, paging state and QueryOptions for a CQL query."}
{"index": 14853, "repo": "spring-data-cassandra-4.1.2", "code": "public static enum Query.Idempotency extends Enum<Query.Idempotency> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Query.Idempotency valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Query.Idempotency[] values();\n}", "des": "Enumeration to define statement idempotency."}
{"index": 14854, "repo": "spring-data-cassandra-4.1.2", "code": "public class QueryMapper extends Object {\n\t// Returns the configured CassandraConverter used to convert object values into Cassandra column typed values.\n\tCassandraConverter getConverter();\n\t// Map Columns with a type hint to column names for included columns.\n\tList<com.datastax.oss.driver.api.core.CqlIdentifier> getMappedColumnNames(Columns columns, CassandraPersistentEntity<?> entity);\n\t// Map a Filter with a type hint.\n\tFilter getMappedObject(Filter filter, CassandraPersistentEntity<?> entity);\n}", "des": "Map Query to CQL-specific data types."}
{"index": 14855, "repo": "spring-data-cassandra-4.1.2", "code": "protected static class QueryMapper.Field extends Object {\n\t// Returns the key to be used in the mapped document eventually.\n\tColumnName getMappedKey();\n\t// Returns the underlying CassandraPersistentProperty backing the field.\n\tOptional<CassandraPersistentProperty> getProperty();\n\t// Returns a new QueryMapper.Field with the given name.\n\tQueryMapper.Field with(ColumnName name);\n}", "des": "Value object to represent a field and its meta-information."}
{"index": 14856, "repo": "spring-data-cassandra-4.1.2", "code": "protected static class QueryMapper.MetadataBackedField extends QueryMapper.Field {\n\t// Returns the key to be used in the mapped document eventually.\n\tColumnName getMappedKey();\n\t// Returns the underlying CassandraPersistentProperty backing the field.\n\tOptional<CassandraPersistentProperty> getProperty();\n\t// Returns a new QueryMapper.Field with the given name.\n\tQueryMapper.MetadataBackedField with(ColumnName name);\n}", "des": "Extension of QueryMapper.Field to be backed with mapping metadata."}
{"index": 14857, "repo": "spring-data-cassandra-4.1.2", "code": "public class QueryOptions extends Object {\n\t// Create a new QueryOptions.QueryOptionsBuilder.\n\tstatic QueryOptions.QueryOptionsBuilder builder();\n\t// Create default QueryOptions.\n\tstatic QueryOptions empty();\n\tboolean equals(Object o);\n\tprotected com.datastax.oss.driver.api.core.ConsistencyLevel getConsistencyLevel();\n\tprotected ExecutionProfileResolver getExecutionProfileResolver();\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getKeyspace();\n\tprotected Integer getPageSize();\n}", "des": "Cassandra Query Options for queries."}
{"index": 14858, "repo": "spring-data-cassandra-4.1.2", "code": "public static class QueryOptions.QueryOptionsBuilder extends Object {\n\t// Builds a new QueryOptions with the configured values.\n\tQueryOptions build();\n\t// Sets the ConsistencyLevel to use.\n\tQueryOptions.QueryOptionsBuilder consistencyLevel(com.datastax.oss.driver.api.core.ConsistencyLevel consistencyLevel);\n\t// Sets the execution profile to use.\n\tQueryOptions.QueryOptionsBuilder executionProfile(String profileName);\n}", "des": "Builder for QueryOptions."}
{"index": 14859, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class QueryOptionsUtil extends Object {\n\t// Add common QueryOptions to all types of queries.\n\tstatic <T extends com.datastax.oss.driver.api.core.cql.Statement<?>>T addQueryOptions(T statement, QueryOptions queryOptions);\n\t// Add common WriteOptions options to Delete CQL statements.\n\tstatic com.datastax.oss.driver.api.querybuilder.delete.Delete addWriteOptions(com.datastax.oss.driver.api.querybuilder.delete.Delete delete, WriteOptions writeOptions);\n}", "des": "Utility class to associate QueryOptions and WriteOptions with QueryBuilder Statements."}
{"index": 14860, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class ReactiveCassandraAccessor extends Object implements InitializingBean {\n\t// Ensures the Cassandra ReactiveSessionFactory and exception translator has been properly set.\n\tvoid afterPropertiesSet();\n\t// Returns the exception translator for this instance.\n\tCqlExceptionTranslator getExceptionTranslator();\n\t// Returns the configured ReactiveSessionFactory.\n\tReactiveSessionFactory getSessionFactory();\n}", "des": "Base class for ReactiveCqlTemplate and other CQL-accessing DAO helpers, defining common properties such as ReactiveSessionFactory and exception translator."}
{"index": 14861, "repo": "spring-data-cassandra-4.1.2", "code": "public interface ReactiveCassandraBatchOperations {\n\t// Add a collection of deletes to the batch.\n\tReactiveCassandraBatchOperations delete(Iterable<?> entities);\n\t// Add a collection of deletes with given WriteOptions to the batch.\n\tReactiveCassandraBatchOperations delete(Iterable<?> entities, WriteOptions options);\n\t// Add an array of deletes to the batch.\n\tReactiveCassandraBatchOperations delete(Object... entities);\n}", "des": "Reactive Batch operations for insert/update/delete actions on a table."}
{"index": 14862, "repo": "spring-data-cassandra-4.1.2", "code": "public interface ReactiveCassandraOperations extends ReactiveFluentCassandraOperations {\n\t// Returns a new ReactiveCassandraBatchOperations using BatchType.LOGGED.\n\tdefault ReactiveCassandraBatchOperations batchOps();\n\t// Returns a new ReactiveCassandraBatchOperations.\n\tReactiveCassandraBatchOperations batchOps(com.datastax.oss.driver.api.core.cql.BatchType batchType);\n\t// Returns the number of rows for the given entity class.\n\treactor.core.publisher.Mono<Long> count(Class<?> entityClass);\n}", "des": "Interface specifying a basic set of reactive Cassandra operations."}
{"index": 14863, "repo": "spring-data-cassandra-4.1.2", "code": "@NoRepositoryBean public interface ReactiveCassandraRepository<T,ID> extends ReactiveCrudRepository<T,ID> {\n\treactor.core.publisher.Flux<T> findAllById(Iterable<ID> iterable);\n\treactor.core.publisher.Flux<T> findAllById(org.reactivestreams.Publisher<ID> publisher);\n\t// Inserts the given entities.\n\t<S extends T>reactor.core.publisher.Flux<S> insert(Iterable<S> entities);\n\t// Inserts the given a given entities.\n\t<S extends T>reactor.core.publisher.Flux<S> insert(org.reactivestreams.Publisher<S> entities);\n}", "des": "Cassandra specific Repository interface with reactive support."}
{"index": 14864, "repo": "spring-data-cassandra-4.1.2", "code": "public class ReactiveCassandraTemplate extends Object implements ReactiveCassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware {\n\t// Returns a new ReactiveCassandraBatchOperations.\n\tReactiveCassandraBatchOperations batchOps(com.datastax.oss.driver.api.core.cql.BatchType batchType);\n\t// Returns the number of rows for the given entity class.\n\treactor.core.publisher.Mono<Long> count(Class<?> entityClass);\n}", "des": "Primary implementation of ReactiveCassandraOperations."}
{"index": 14865, "repo": "spring-data-cassandra-4.1.2", "code": "public static class ReactiveCassandraTemplate.PreparedStatementHandler extends Object implements ReactiveCassandraTemplate.ReactivePreparedStatementHandler {\n\t// Bind parameter values on the given PreparedStatement.\n\tcom.datastax.oss.driver.api.core.cql.BoundStatement bindValues(com.datastax.oss.driver.api.core.cql.PreparedStatement ps);\n}", "des": "Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement."}
{"index": 14866, "repo": "spring-data-cassandra-4.1.2", "code": "public interface ReactiveCqlOperations {\n\t// Issue a single CQL execute, typically a DDL statement, insert, update or delete statement.\n\treactor.core.publisher.Mono<Boolean> execute(com.datastax.oss.driver.api.core.cql.Statement<?> statement);\n\t// Issue a single CQL execute, typically a DDL statement, insert, update or delete statement.\n\treactor.core.publisher.Mono<Boolean> execute(String cql);\n}", "des": "Interface specifying a basic set of CQL operations executed in a reactive fashion."}
{"index": 14867, "repo": "spring-data-cassandra-4.1.2", "code": "public class ReactiveCqlTemplate extends ReactiveCassandraAccessor implements ReactiveCqlOperations {\n\t// Prepare the given CQL Statement applying statement settings such as page size and consistency level.\n\tprotected com.datastax.oss.driver.api.core.cql.Statement<?> applyStatementSettings(com.datastax.oss.driver.api.core.cql.Statement<?> statement);\n}", "des": "This is the central class in the CQL core package for reactive Cassandra data access. It simplifies the use of CQL and helps to avoid common errors."}
{"index": 14868, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface ReactiveDeleteOperation.DeleteWithTable {\n\t// Explicitly set the name of the table on which to perform the delete.\n\tReactiveDeleteOperation.DeleteWithQuery inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to perform the delete.\n\tdefault ReactiveDeleteOperation.DeleteWithQuery inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 14869, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface ReactiveInsertOperation.InsertWithTable<T> extends ReactiveInsertOperation.InsertWithOptions<T> {\n\t// Explicitly set the name of the table.\n\tReactiveInsertOperation.InsertWithOptions<T> inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table.\n\tdefault ReactiveInsertOperation.InsertWithOptions<T> inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 14870, "repo": "spring-data-cassandra-4.1.2", "code": "public class ReactivePartTreeCassandraQuery extends AbstractReactiveCassandraQuery {\n\t// Creates a string query using the given ParameterAccessor\n\tprotected reactor.core.publisher.Mono<com.datastax.oss.driver.api.core.cql.SimpleStatement> createQuery(CassandraParameterAccessor parameterAccessor);\n}", "des": "Reactive PartTree RepositoryQuery implementation for Cassandra."}
{"index": 14871, "repo": "spring-data-cassandra-4.1.2", "code": "public interface ReactiveResultSet {\n\t// Returns a Flux over the rows contained in this result set chunk.\n\treactor.core.publisher.Flux<com.datastax.oss.driver.api.core.cql.Row> availableRows();\n\t// Return the execution information for all queries made to retrieve this ReactiveResultSet.\n\tList<com.datastax.oss.driver.api.core.cql.ExecutionInfo> getAllExecutionInfo();\n\t// Returns the columns returned in this ReactiveResultSet.\n\tcom.datastax.oss.driver.api.core.cql.ColumnDefinitions getColumnDefinitions();\n}", "des": "The reactive result of a query."}
{"index": 14872, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface ReactiveSelectOperation.SelectWithTable<T> extends ReactiveSelectOperation.SelectWithQuery<T> {\n\t// Explicitly set the name of the table on which to perform the query.\n\tReactiveSelectOperation.SelectWithProjection<T> inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to perform the query.\n\tdefault ReactiveSelectOperation.SelectWithProjection<T> inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 14873, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface ReactiveSelectOperation.TerminatingSelect<T> {\n\t// Get all matching elements.\n\treactor.core.publisher.Flux<T> all();\n\t// Get the number of matching elements.\n\treactor.core.publisher.Mono<Long> count();\n\t// Check for the presence of matching elements.\n\treactor.core.publisher.Mono<Boolean> exists();\n\t// Get the first result or no result.\n\treactor.core.publisher.Mono<T> first();\n\t// Get exactly zero or one result.\n\treactor.core.publisher.Mono<T> one();\n}", "des": "Trigger SELECT execution by calling one of the terminating methods."}
{"index": 14874, "repo": "spring-data-cassandra-4.1.2", "code": "public interface ReactiveSession extends Closeable {\n\t// Initiates a shutdown of this session instance and blocks until that shutdown completes.\n\tvoid close();\n\t// Executes the provided query.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(com.datastax.oss.driver.api.core.cql.Statement<?> statement);\n\t// Executes the provided query.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(String query);\n}", "des": "A session holds connections to a Cassandra cluster, allowing it to be queried."}
{"index": 14875, "repo": "spring-data-cassandra-4.1.2", "code": "public class ReactiveStringBasedCassandraQuery extends AbstractReactiveCassandraQuery {\n\t// Creates a string query using the given ParameterAccessor\n\treactor.core.publisher.Mono<com.datastax.oss.driver.api.core.cql.SimpleStatement> createQuery(CassandraParameterAccessor parameterAccessor);\n\tprotected org.springframework.data.cassandra.repository.query.StringBasedQuery getStringBasedQuery();\n\t// Returns whether the query should get a count projection applied.\n\tprotected boolean isCountQuery();\n}", "des": "String-based AbstractReactiveCassandraQuery implementation."}
{"index": 14876, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface ReactiveUpdateOperation.UpdateWithTable {\n\t// Explicitly set the name of the table to on which to perform the update.\n\tReactiveUpdateOperation.UpdateWithQuery inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to perform the update.\n\tdefault ReactiveUpdateOperation.UpdateWithQuery inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 14877, "repo": "spring-data-cassandra-4.1.2", "code": "public class ResourceKeyspacePopulator extends Object implements KeyspacePopulator {\n\t// Add a script to execute to initialize or clean up the database.\n\tvoid addScript(Resource script);\n\t// Add multiple scripts to execute to initialize or clean up the database.\n\tvoid addScripts(Resource... scripts);\n\t// Execute this ResourceKeyspacePopulator against the given SessionFactory.\n\tvoid execute(SessionFactory sessionFactory);\n}", "des": "Populates, initializes, or cleans up a keyspace using CQL scripts defined in external resources."}
{"index": 14878, "repo": "spring-data-cassandra-4.1.2", "code": "public class ResultSetToListOfStringConverter extends AbstractResultSetConverter<List<String>> {\n\t// Converts the given result set (as a List<Map<String,Object>>) to this converter's type or throws IllegalArgumentException.\n\tprotected List<String> doConvertResultSet(List<Map<String,Object>> resultSet);\n\t// Converts the given row (as a Map<String,Object>) to this converter's type or throws IllegalArgumentException.\n\tprotected List<String> doConvertSingleRow(Map<String,Object> row);\n}", "des": "Converter from ResultSet to a List of String."}
{"index": 14879, "repo": "spring-data-cassandra-4.1.2", "code": "public class ResultSetToStringConverter extends AbstractResultSetConverter<String> {\n\t// Converts the given result set (as a List<Map<String,Object>>) to this converter's type or throws IllegalArgumentException.\n\tprotected String doConvertResultSet(List<Map<String,Object>> resultSet);\n\t// Converts the given row (as a Map<String,Object>) to this converter's type or throws IllegalArgumentException.\n\tprotected String doConvertSingleRow(Map<String,Object> row);\n}", "des": "Converter from ResultSet to a single String value."}
{"index": 14880, "repo": "spring-data-cassandra-4.1.2", "code": "public enum RingMemberHostMapper extends Enum<RingMemberHostMapper> implements HostMapper<RingMember> {\n\t// Implementations must implement this method to map each Node.\n\tCollection<RingMember> mapHosts(Iterable<com.datastax.oss.driver.api.core.metadata.Node> hosts);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RingMemberHostMapper valueOf(String name);\n}", "des": "HostMapper to to map hosts into RingMember objects."}
{"index": 14881, "repo": "spring-data-cassandra-4.1.2", "code": "public enum RowToArrayConverter extends Enum<RowToArrayConverter> implements Converter<com.datastax.oss.driver.api.core.cql.Row,Object[]> {\n\tObject[] convert(com.datastax.oss.driver.api.core.cql.Row row);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RowToArrayConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RowToArrayConverter[] values();\n}", "des": "Converter to convert Row to Object array."}
{"index": 14882, "repo": "spring-data-cassandra-4.1.2", "code": "@ReadingConverter public enum RowToListConverter extends Enum<RowToListConverter> implements Converter<com.datastax.oss.driver.api.core.cql.Row,List<Object>> {\n\tList<Object> convert(com.datastax.oss.driver.api.core.cql.Row row);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RowToListConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RowToListConverter[] values();\n}", "des": "Converter to convert Rows to a List of Object representation."}
{"index": 14883, "repo": "spring-data-cassandra-4.1.2", "code": "@ReadingConverter public enum RowToMapConverter extends Enum<RowToMapConverter> implements Converter<com.datastax.oss.driver.api.core.cql.Row,Map<String,Object>> {\n\tMap<String,Object> convert(com.datastax.oss.driver.api.core.cql.Row row);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RowToMapConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RowToMapConverter[] values();\n}", "des": "Converter to convert Rows to a Map of String/Object representation."}
{"index": 14884, "repo": "spring-data-cassandra-4.1.2", "code": "public class RowValueProvider extends Object implements CassandraValueProvider {\n\t<T> T getPropertyValue(CassandraPersistentProperty property);\n\t// Returns whether the underlying source.\n\tObject getSource();\n\t// Returns whether the underlying source contains a data source for the given CassandraPersistentProperty.\n\tboolean hasProperty(CassandraPersistentProperty property);\n}", "des": "CassandraValueProvider to read property values from a Row."}
{"index": 14885, "repo": "spring-data-cassandra-4.1.2", "code": "public enum SchemaAction extends Enum<SchemaAction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SchemaAction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SchemaAction[] values();\n}", "des": "Enum identifying any schema actions to take at startup."}
{"index": 14886, "repo": "spring-data-cassandra-4.1.2", "code": "public class SchemaFactory extends Object {\n\t// Returns index specifications derived from CassandraPersistentEntity.\n\tList<CreateIndexSpecification> getCreateIndexSpecificationsFor(Class<?> entityType);\n\t// Returns index specifications derived from CassandraPersistentEntity.\n\tList<CreateIndexSpecification> getCreateIndexSpecificationsFor(CassandraPersistentEntity<?> entity);\n}", "des": "Factory for Cassandra Schema objects such as user-defined types, tables and indexes."}
{"index": 14887, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class ScriptUtils extends Object {\n\t// Does the provided CQL script contain the specified delimiter?\n\tstatic boolean containsCqlScriptDelimiters(String script, String separator);\n\t// Execute the given CQL script using default settings for statement separators, comment delimiters, and exception handling flags.\n\tstatic void executeCqlScript(com.datastax.oss.driver.api.core.CqlSession session, Resource resource);\n}", "des": "Generic utility methods for working with CQL scripts."}
{"index": 14888, "repo": "spring-data-cassandra-4.1.2", "code": "public class SessionFactoryFactoryBean extends AbstractFactoryBean<SessionFactory> {\n\tvoid afterPropertiesSet();\n\tprotected SessionFactory createInstance();\n\t// Perform schema actions.\n\tprotected void createTables(boolean drop, boolean dropUnused, boolean ifNotExists);\n\tvoid destroy();\n\tClass<?> getObjectType();\n\t// Perform the configured SchemaAction using CassandraMappingContext metadata.\n\tprotected void performSchemaAction();\n}", "des": "Factory to create and configure a Cassandra SessionFactory with support for executing CQL and initializing the database schema (a.k.a. keyspace)."}
{"index": 14889, "repo": "spring-data-cassandra-4.1.2", "code": "public class SessionFactoryInitializer extends Object implements InitializingBean, DisposableBean {\n\t// Use the keyspace populator to set up the keyspace.\n\tvoid afterPropertiesSet();\n\t// Use the keyspace cleaner to clean up the keyspace.\n\tvoid destroy();\n\t// Flag to explicitly enable or disable the keyspace populator and keyspace cleaner.\n\tvoid setEnabled(boolean enabled);\n}", "des": "Used to set up a keyspace during initialization and clean up a keyspace during destruction."}
{"index": 14890, "repo": "spring-data-cassandra-4.1.2", "code": "public class SimplePreparedStatementCreator extends Object implements PreparedStatementCreator, CqlProvider {\n\t// Create a statement in this session.\n\tcom.datastax.oss.driver.api.core.cql.PreparedStatement createPreparedStatement(com.datastax.oss.driver.api.core.CqlSession session);\n\t// Return the CQL string for this object, i.e. typically the CQL used for creating statements.\n\tString getCql();\n}", "des": "Trivial implementation of PreparedStatementCreator."}
{"index": 14891, "repo": "spring-data-cassandra-4.1.2", "code": "public enum SimpleTupleTypeFactory extends Enum<SimpleTupleTypeFactory> implements TupleTypeFactory {\n\t// Create a TupleType representing the given tuple element types.\n\tcom.datastax.oss.driver.api.core.type.TupleType create(com.datastax.oss.driver.api.core.type.DataType... types);\n\t// Create a TupleType representing the given tuple element types.\n\tcom.datastax.oss.driver.api.core.type.TupleType create(List<com.datastax.oss.driver.api.core.type.DataType> types);\n}", "des": "CodecRegistry-based TupleTypeFactory using DefaultTupleType to create tuple types."}
{"index": 14892, "repo": "spring-data-cassandra-4.1.2", "code": "public class SingleColumnRowMapper<T> extends Object implements RowMapper<T> {\n\t// Convert the given column value to the specified required type.\n\tprotected Object convertValueToRequiredType(Object value, Class<?> requiredType);\n\t// Retrieve a object value for the specified column, using the most appropriate value type.\n\tprotected Object getColumnValue(com.datastax.oss.driver.api.core.cql.Row row, int index);\n}", "des": "RowMapper implementation that converts a single column into a single result value per row."}
{"index": 14893, "repo": "spring-data-cassandra-4.1.2", "code": "public class SnakeCaseNamingStrategy extends Object implements NamingStrategy {\n\t// Uses PersistentProperty.getName() and separates camel case parts with '_'.\n\tString getColumnName(CassandraPersistentProperty property);\n\t// Uses Class.getSimpleName() and separates camel case parts with '_'.\n\tString getTableName(CassandraPersistentEntity<?> entity);\n\t// Uses Class.getSimpleName() and separates camel case parts with '_'.\n\tString getUserDefinedTypeName(CassandraPersistentEntity<?> entity);\n}", "des": "Naming strategy that renders CamelCase name parts to snake_case."}
{"index": 14894, "repo": "spring-data-cassandra-4.1.2", "code": "public class SpelUtils extends Object {\n\t// Evaluates the given value against the given context as a string.\n\tstatic String evaluate(CharSequence value, EvaluationContext context);\n\t// Evaluates the given value against the given context as an object of the given class.\n\tstatic <T> T evaluate(CharSequence value, EvaluationContext context, Class<T> clazz);\n}", "des": "Evaluates a SpEL expression."}
{"index": 14895, "repo": "spring-data-cassandra-4.1.2", "code": "public class StatementBuilder<S extends com.datastax.oss.driver.api.querybuilder.BuildableQuery> extends Object {\n\t// Apply a builder function to the statement.\n\t<R extends com.datastax.oss.driver.api.querybuilder.BuildableQuery>StatementBuilder<S> apply(Function<S,R> action);\n\t// Apply a StatementBuilder.BindFunction to the statement.\n\tStatementBuilder<S> bind(StatementBuilder.BindFunction<S> action);\n}", "des": "Functional builder for Cassandra statements."}
{"index": 14896, "repo": "spring-data-cassandra-4.1.2", "code": "public static enum StatementBuilder.ParameterHandling extends Enum<StatementBuilder.ParameterHandling> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic StatementBuilder.ParameterHandling valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic StatementBuilder.ParameterHandling[] values();\n}", "des": "Enumeration to represent how parameters are rendered."}
{"index": 14897, "repo": "spring-data-cassandra-4.1.2", "code": "public class StatementFactory extends Object {\n\t// Create a COUNT statement by mapping Query to Select.\n\tStatementBuilder<com.datastax.oss.driver.api.querybuilder.select.Select> count(Query query, CassandraPersistentEntity<?> persistentEntity);\n\t// Create a COUNT statement by mapping Query to Select.\n\tStatementBuilder<com.datastax.oss.driver.api.querybuilder.select.Select> count(Query query, CassandraPersistentEntity<?> entity, com.datastax.oss.driver.api.core.CqlIdentifier tableName);\n}", "des": "Factory to render Statement objects from Query and Update objects."}
{"index": 14898, "repo": "spring-data-cassandra-4.1.2", "code": "public class StringBasedCassandraQuery extends AbstractCassandraQuery {\n\t// Creates a Statement using the given ParameterAccessor\n\tcom.datastax.oss.driver.api.core.cql.SimpleStatement createQuery(CassandraParameterAccessor parameterAccessor);\n\tprotected org.springframework.data.cassandra.repository.query.StringBasedQuery getStringBasedQuery();\n\t// Returns whether the query should get a count projection applied.\n\tprotected boolean isCountQuery();\n}", "des": "String-based AbstractCassandraQuery implementation."}
{"index": 14899, "repo": "spring-data-cassandra-4.1.2", "code": "public interface TableDescriptor {\n\t// Returns an unmodifiable list of all primary key columns that are not also partition key columns.\n\tList<ColumnSpecification> getClusteredKeyColumns();\n\t// Returns an unmodifiable List of ColumnSpecifications.\n\tList<ColumnSpecification> getColumns();\n\t// Returns the name of the table.\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getName();\n\t// Returns an unmodifiable list of all non-key columns.\n\tList<ColumnSpecification> getNonKeyColumns();\n}", "des": "Describes a table."}
{"index": 14900, "repo": "spring-data-cassandra-4.1.2", "code": "public enum TableOption extends Enum<TableOption> implements Option {\n\t// Checks that the given value can be coerced into the type given by Option.getType().\n\tvoid checkValue(Object value);\n\t// Whether this option should escape single quotes in its value.\n\tboolean escapesValue();\n\t// The (usually lower-cased, underscore-separated) name of this table option.\n\tString getName();\n\t// The type that values must be able to be coerced into for this option.\n\tClass<?> getType();\n}", "des": "Enumeration that represents all known table options."}
{"index": 14901, "repo": "spring-data-cassandra-4.1.2", "code": "public static enum TableOption.CachingOption extends Enum<TableOption.CachingOption> implements Option {\n\t// Checks that the given value can be coerced into the type given by Option.getType().\n\tvoid checkValue(Object value);\n\t// Whether this option should escape single quotes in its value.\n\tboolean escapesValue();\n\t// The (usually lower-cased, underscore-separated) name of this table option.\n\tString getName();\n\t// The type that values must be able to be coerced into for this option.\n\tClass<?> getType();\n}", "des": "Known caching options."}
{"index": 14902, "repo": "spring-data-cassandra-4.1.2", "code": "public static enum TableOption.CompactionOption extends Enum<TableOption.CompactionOption> implements Option {\n\t// Checks that the given value can be coerced into the type given by Option.getType().\n\tvoid checkValue(Object value);\n\t// Whether this option should escape single quotes in its value.\n\tboolean escapesValue();\n\t// The (usually lower-cased, underscore-separated) name of this table option.\n\tString getName();\n}", "des": "Known compaction options."}
{"index": 14903, "repo": "spring-data-cassandra-4.1.2", "code": "public static enum TableOption.CompressionOption extends Enum<TableOption.CompressionOption> implements Option {\n\t// Checks that the given value can be coerced into the type given by Option.getType().\n\tvoid checkValue(Object value);\n\t// Whether this option should escape single quotes in its value.\n\tboolean escapesValue();\n\t// The (usually lower-cased, underscore-separated) name of this table option.\n\tString getName();\n}", "des": "Known compression options."}
{"index": 14904, "repo": "spring-data-cassandra-4.1.2", "code": "public static enum TableOption.KeyCachingOption extends Enum<TableOption.KeyCachingOption> {\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TableOption.KeyCachingOption valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TableOption.KeyCachingOption[] values();\n}", "des": "Known KeyCaching Options"}
{"index": 14905, "repo": "spring-data-cassandra-4.1.2", "code": "public abstract class TableOptionsSpecification<T extends TableOptionsSpecification<T>> extends TableNameSpecification {\n\tMap<String,Object> getOptions();\n\t// Adds the given option by name to this table's options.\n\tT with(String name, Object value, boolean escape, boolean quote);\n\t// Convenience method that calls with(option, null).\n\tT with(TableOption option);\n\t// Sets the given table option.\n\tT with(TableOption option, Object value);\n}", "des": "Abstract builder class to support the construction of table specifications that have table options, that is, those options normally specified by WITH ... AND ...."}
{"index": 14906, "repo": "spring-data-cassandra-4.1.2", "code": "public class TableSpecification<T> extends TableOptionsSpecification<TableSpecification<T>> implements TableDescriptor {\n\t// Adds the given primary key column to the table with ascending ordering.\n\tT clusteredKeyColumn(com.datastax.oss.driver.api.core.CqlIdentifier name, com.datastax.oss.driver.api.core.type.DataType type);\n}", "des": "Object to support the configuration of table specifications that have columns."}
{"index": 14907, "repo": "spring-data-cassandra-4.1.2", "code": "@FunctionalInterface public interface TermFactory {\n\t// Check whether the term factory accepts Collection values to be created as Term.\n\tdefault boolean canBindCollection();\n\t// Create a Term for the given value.\n\tcom.datastax.oss.driver.api.querybuilder.term.Term create(Object value);\n}", "des": "Factory for Term objects encapsulating a binding value."}
{"index": 14908, "repo": "spring-data-cassandra-4.1.2", "code": "public class TransformingNamingStrategy extends Object implements NamingStrategy {\n\t// Create a column name from the given property.\n\tString getColumnName(CassandraPersistentProperty property);\n\t// Create a table name from the given CassandraPersistentEntity.\n\tString getTableName(CassandraPersistentEntity<?> entity);\n\t// Create a user-defined type name from the given CassandraPersistentEntity.\n\tString getUserDefinedTypeName(CassandraPersistentEntity<?> entity);\n}", "des": "NamingStrategy that applies a transformation Function after invoking a delegate NamingStrategy."}
{"index": 14909, "repo": "spring-data-cassandra-4.1.2", "code": "public class TupleValueProvider extends Object implements CassandraValueProvider {\n\t<T> T getPropertyValue(CassandraPersistentProperty property);\n\t// Returns whether the underlying source.\n\tObject getSource();\n\t// Returns whether the underlying source contains a data source for the given CassandraPersistentProperty.\n\tboolean hasProperty(CassandraPersistentProperty property);\n}", "des": "CassandraValueProvider to read property values from a TupleValue."}
{"index": 14910, "repo": "spring-data-cassandra-4.1.2", "code": "public class UdtValueProvider extends Object implements CassandraValueProvider {\n\t<T> T getPropertyValue(CassandraPersistentProperty property);\n\t// Returns whether the underlying source.\n\tObject getSource();\n\t// Returns whether the underlying source contains a data source for the given CassandraPersistentProperty.\n\tboolean hasProperty(CassandraPersistentProperty property);\n}", "des": "CassandraValueProvider to read property values from a UdtValue."}
{"index": 14911, "repo": "spring-data-cassandra-4.1.2", "code": "public class Update extends Object {\n\t// Create a new Update.AddToBuilder to add items to a collection for columnName in a fluent style.\n\tUpdate.AddToBuilder addTo(String columnName);\n\t// Cleat the collection at columnName.\n\tUpdate clear(String columnName);\n\t// Decrement the value at columnName by 1.\n\tUpdate decrement(String columnName);\n\t// Decrement the value at columnName by delta.\n\tUpdate decrement(String columnName, Number delta);\n\t// Create an empty Update object.\n\tstatic Update empty();\n}", "des": "Update object representing a set of update operations."}
{"index": 14912, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface Update.AddToBuilder {\n\t// Associate all entries of the specified map with the map at ColumnName.\n\tUpdate addAll(Map<? extends Object,? extends Object> map);\n\t// Append the value to the collection.\n\tUpdate append(Object value);\n\t// Append all values to the collection.\n\tUpdate appendAll(Iterable<? extends Object> values);\n\t// Append all values to the collection.\n\tUpdate appendAll(Object... values);\n}", "des": "Builder to add a single element/multiple elements to a collection associated with a ColumnName."}
{"index": 14913, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface Update.RemoveFromBuilder {\n\t// Remove all entries matching value from a set, list or map (map key).\n\tUpdate value(Object value);\n\t// Remove all entries matching values from a set, list or map (map key).\n\tUpdate values(Iterable<? extends Object> values);\n\t// Remove all entries matching values from a set, list or map (map key).\n\tdefault Update values(Object... values);\n}", "des": "Builder to remove a single element/multiple elements from a collection associated with a ColumnName."}
{"index": 14914, "repo": "spring-data-cassandra-4.1.2", "code": "public static interface Update.SetBuilder {\n\t// Create a Update.SetValueBuilder to set a value at a numeric index.\n\tUpdate.SetValueBuilder atIndex(int index);\n\t// Create a Update.SetValueBuilder to set a value at index.\n\tUpdate.SetValueBuilder atKey(Object key);\n}", "des": "Builder to associate a single value with a collection at a given index at ColumnName."}
{"index": 14915, "repo": "spring-data-cassandra-4.1.2", "code": "public class UpdateOptions extends WriteOptions {\n\t// Create a new UpdateOptions.UpdateOptionsBuilder.\n\tstatic UpdateOptions.UpdateOptionsBuilder builder();\n\t// Create default UpdateOptions.\n\tstatic UpdateOptions empty();\n\tboolean equals(Object o);\n\tFilter getIfCondition();\n\tboolean isIfExists();\n\t// Create a new UpdateOptions.UpdateOptionsBuilder to mutate properties of this UpdateOptions.\n\tUpdateOptions.UpdateOptionsBuilder mutate();\n}", "des": "Extension to WriteOptions for use with UPDATE operations."}
{"index": 14916, "repo": "spring-data-cassandra-4.1.2", "code": "public static class UpdateOptions.UpdateOptionsBuilder extends WriteOptions.WriteOptionsBuilder {\n\t// Builds a new UpdateOptions with the configured values.\n\tUpdateOptions build();\n\t// Sets the ConsistencyLevel to use.\n\tUpdateOptions.UpdateOptionsBuilder consistencyLevel(com.datastax.oss.driver.api.core.ConsistencyLevel consistencyLevel);\n\t// Sets the execution profile to use.\n\tUpdateOptions.UpdateOptionsBuilder executionProfile(String profileName);\n}", "des": "Builder for UpdateOptions."}
{"index": 14917, "repo": "spring-data-cassandra-4.1.2", "code": "public class UserTypeSpecification<T extends UserTypeSpecification<T>> extends UserTypeNameSpecification {\n\t// Adds an ADD to the list of field changes.\n\tT field(com.datastax.oss.driver.api.core.CqlIdentifier name, com.datastax.oss.driver.api.core.type.DataType type);\n\t// Adds the given field to the type.\n\tT field(String name, com.datastax.oss.driver.api.core.type.DataType type);\n\tList<FieldSpecification> getFields();\n}", "des": "Object to support the configuration of user type specifications that have columns."}
{"index": 14918, "repo": "spring-data-cassandra-4.1.2", "code": "public class VerifierMappingExceptions extends MappingException {\n\t// Returns a list of the MappingExceptions aggregated within.\n\tCollection<MappingException> getMappingExceptions();\n\tString getMessage();\n\t// Returns a list of the MappingException messages aggregated within.\n\tCollection<String> getMessages();\n}", "des": "Aggregator of multiple MappingException for convenience when verifying persistent entities."}
{"index": 14919, "repo": "spring-data-cassandra-4.1.2", "code": "public class WriteOptions extends QueryOptions {\n\t// Create a new WriteOptions.WriteOptionsBuilder.\n\tstatic WriteOptions.WriteOptionsBuilder builder();\n\t// Create default WriteOptions.\n\tstatic WriteOptions empty();\n\tboolean equals(Object o);\n\tLong getTimestamp();\n\tDuration getTtl();\n\t// Create a new WriteOptions.WriteOptionsBuilder to mutate properties of this WriteOptions.\n\tWriteOptions.WriteOptionsBuilder mutate();\n}", "des": "Cassandra Write Options are an extension to QueryOptions for write operations."}
{"index": 14920, "repo": "spring-data-cassandra-4.1.2", "code": "public static class WriteOptions.WriteOptionsBuilder extends QueryOptions.QueryOptionsBuilder {\n\t// Builds a new WriteOptions with the configured values.\n\tWriteOptions build();\n\t// Sets the ConsistencyLevel to use.\n\tWriteOptions.WriteOptionsBuilder consistencyLevel(com.datastax.oss.driver.api.core.ConsistencyLevel consistencyLevel);\n\t// Sets the execution profile to use.\n\tWriteOptions.WriteOptionsBuilder executionProfile(String profileName);\n}", "des": "Builder for WriteOptions."}
{"index": 14921, "repo": "spring-data-jdbc-3.1.2", "code": "@Configuration(proxyBeanMethods=false) public class AbstractJdbcConfiguration extends Object implements ApplicationContextAware {\n\t// Create a DataAccessStrategy for reuse in the JdbcAggregateOperations and the JdbcConverter.\n\tDataAccessStrategy dataAccessStrategyBean(NamedParameterJdbcOperations operations, JdbcConverter jdbcConverter, JdbcMappingContext context, Dialect dialect);\n\t// Scans the mapping base package for classes annotated with Table.\n\tprotected Set<Class<?>> getInitialEntitySet();\n}", "des": "Beans that must be registered for Spring Data JDBC to work."}
{"index": 14922, "repo": "spring-data-jdbc-3.1.2", "code": "public abstract class AbstractJdbcQuery extends Object implements RepositoryQuery {\n\tprotected org.springframework.data.jdbc.repository.query.JdbcQueryExecution<Object> createModifyingQueryExecutor();\n\t// Creates a JdbcQueryExecution given a ResultSetExtractor or a RowMapper.\n\tprotected org.springframework.data.jdbc.repository.query.JdbcQueryExecution<?> createReadingQueryExecution(ResultSetExtractor<?> extractor, RowMapper<?> rowMapper);\n}", "des": "Base class for queries based on a repository method."}
{"index": 14923, "repo": "spring-data-jdbc-3.1.2", "code": "public class BasicJdbcConverter extends BasicRelationalConverter implements JdbcConverter, ApplicationContextAware {\n\t// The type to be used to store this property in the database.\n\tClass<?> getColumnType(RelationalPersistentProperty property);\n\t// The SQL type constant used when using this property as a parameter for a SQL statement.\n\tSQLType getTargetSqlType(RelationalPersistentProperty property);\n}", "des": "RelationalConverter that uses a MappingContext to apply basic conversion of relational values to property values."}
{"index": 14924, "repo": "spring-data-jdbc-3.1.2", "code": "public class CascadingDataAccessStrategy extends Object implements DataAccessStrategy {\n\t// Acquire a lock on all aggregates of the given domain type.\n\t<T> void acquireLockAll(LockMode lockMode, Class<T> domainType);\n\t// Acquire a lock on the aggregate specified by id.\n\t<T> void acquireLockById(Object id, LockMode lockMode, Class<T> domainType);\n\t// Counts the rows in the table representing the given domain type.\n\tlong count(Class<?> domainType);\n}", "des": "Delegates each method to the DataAccessStrategys passed to the constructor in turn until the first that does not throw an exception."}
{"index": 14925, "repo": "spring-data-jdbc-3.1.2", "code": "public interface DataAccessStrategy extends RelationResolver {\n\t// Acquire a lock on all aggregates of the given domain type.\n\t<T> void acquireLockAll(LockMode lockMode, Class<T> domainType);\n\t// Acquire a lock on the aggregate specified by id.\n\t<T> void acquireLockById(Object id, LockMode lockMode, Class<T> domainType);\n\t// Counts the rows in the table representing the given domain type.\n\tlong count(Class<?> domainType);\n}", "des": "Abstraction for accesses to the database that should be implementable with a single SQL statement per method and relates to a single entity as opposed to JdbcAggregateOperations which provides interactions related to complete aggregates."}
{"index": 14926, "repo": "spring-data-jdbc-3.1.2", "code": "public class DefaultDataAccessStrategy extends Object implements DataAccessStrategy {\n\t// Acquire a lock on all aggregates of the given domain type.\n\t<T> void acquireLockAll(LockMode lockMode, Class<T> domainType);\n\t// Acquire a lock on the aggregate specified by id.\n\t<T> void acquireLockById(Object id, LockMode lockMode, Class<T> domainType);\n\t// Counts the rows in the table representing the given domain type.\n\tlong count(Class<?> domainType);\n}", "des": "The default DataAccessStrategy is to generate SQL statements based on metadata from the entity."}
{"index": 14927, "repo": "spring-data-jdbc-3.1.2", "code": "public class DelegatingDataAccessStrategy extends Object implements DataAccessStrategy {\n\t// Acquire a lock on all aggregates of the given domain type.\n\t<T> void acquireLockAll(LockMode lockMode, Class<T> domainType);\n\t// Acquire a lock on the aggregate specified by id.\n\t<T> void acquireLockById(Object id, LockMode lockMode, Class<T> domainType);\n\t// Counts the rows in the table representing the given domain type.\n\tlong count(Class<?> domainType);\n}", "des": "Delegates all method calls to an instance set after construction."}
{"index": 14928, "repo": "spring-data-jdbc-3.1.2", "code": "public final class Identifier extends Object {\n\t// Returns an empty Identifier.\n\tstatic Identifier empty();\n\tboolean equals(Object o);\n\t// Performs the given action for each element of the Identifier until all elements have been processed or the action throws an exception.\n\tvoid forEach(Identifier.IdentifierConsumer consumer);\n\t// Creates an Identifier from a Map of name to value tuples.\n\tstatic Identifier from(Map<SqlIdentifier,Object> map);\n}", "des": "Identifier represents a composite id of an entity that may be composed of one or many parts."}
{"index": 14929, "repo": "spring-data-jdbc-3.1.2", "code": "public interface JdbcAggregateOperations {\n\t// Counts the number of aggregates of a given type.\n\tlong count(Class<?> domainType);\n\t// Counts the number of aggregates of a given type that match the given query.\n\t<T> long count(Query query, Class<T> domainType);\n\t// Delete an aggregate identified by its aggregate root.\n\t<T> void delete(T aggregateRoot);\n\t// Deprecated. since 3.0 use delete(Object) instead\n\tdefault <T> void delete(T aggregateRoot, Class<T> domainType);\n}", "des": "Specifies operations one can perform on a database, based on an Domain Type."}
{"index": 14930, "repo": "spring-data-jdbc-3.1.2", "code": "public class JdbcAggregateTemplate extends Object implements JdbcAggregateOperations {\n\t// Counts the number of aggregates of a given type.\n\tlong count(Class<?> domainType);\n\t// Counts the number of aggregates of a given type that match the given query.\n\t<T> long count(Query query, Class<T> domainType);\n\t// Delete an aggregate identified by its aggregate root.\n\t<S> void delete(S aggregateRoot);\n\t// Delete all aggregates of a given type.\n\tvoid deleteAll(Class<?> domainType);\n}", "des": "JdbcAggregateOperations implementation, storing aggregates in and obtaining them from a JDBC data store."}
{"index": 14931, "repo": "spring-data-jdbc-3.1.2", "code": "public static enum JdbcArrayColumns.DefaultSupport extends Enum<JdbcArrayColumns.DefaultSupport> implements JdbcArrayColumns {\n\t// The appropriate SQL type as a String which should be used to represent the given SQLType in an Array.\n\tString getArrayTypeName(SQLType jdbcType);\n\tboolean isSupported();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic JdbcArrayColumns.DefaultSupport valueOf(String name);\n}", "des": "Default ArrayColumns implementation for dialects that do not support array-typed columns."}
{"index": 14932, "repo": "spring-data-jdbc-3.1.2", "code": "public static enum JdbcArrayColumns.Unsupported extends Enum<JdbcArrayColumns.Unsupported> implements JdbcArrayColumns {\n\t// The appropriate SQL type as a String which should be used to represent the given SQLType in an Array.\n\tString getArrayTypeName(SQLType jdbcType);\n\tboolean isSupported();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic JdbcArrayColumns.Unsupported valueOf(String name);\n}", "des": "Default ArrayColumns implementation for dialects that do not support array-typed columns."}
{"index": 14933, "repo": "spring-data-jdbc-3.1.2", "code": "public enum JdbcColumnTypes extends Enum<JdbcColumnTypes> {\n\tabstract Class<?> resolvePrimitiveType(Class<?> type);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic JdbcColumnTypes valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic JdbcColumnTypes[] values();\n}", "des": "Utility that determines the necessary type conversions between Java types used in the domain model and types compatible with JDBC drivers."}
{"index": 14934, "repo": "spring-data-jdbc-3.1.2", "code": "public interface JdbcConverter extends RelationalConverter {\n\t// The type to be used to store this property in the database.\n\tClass<?> getColumnType(RelationalPersistentProperty property);\n\t// The SQL type constant used when using this property as a parameter for a SQL statement.\n\tSQLType getTargetSqlType(RelationalPersistentProperty property);\n\t// Read the current row from ResultSet to an entity.\n\t<T> T mapRow(PersistentPropertyPathExtension path, ResultSet resultSet, Identifier identifier, Object key);\n}", "des": "A JdbcConverter is responsible for converting for values to the native relational representation and vice versa."}
{"index": 14935, "repo": "spring-data-jdbc-3.1.2", "code": "public class JdbcIdentifierBuilder extends Object {\n\tIdentifier build();\n\tstatic JdbcIdentifierBuilder empty();\n\t// Creates ParentKeys with backreference for the given path and value of the parents id.\n\tstatic JdbcIdentifierBuilder forBackReferences(JdbcConverter converter, PersistentPropertyPathExtension path, Object value);\n\t// Adds a qualifier to the identifier to build.\n\tJdbcIdentifierBuilder withQualifier(PersistentPropertyPathExtension path, Object value);\n}", "des": "Builder for Identifier."}
{"index": 14936, "repo": "spring-data-jdbc-3.1.2", "code": "public interface JdbcTypeFactory {\n\t// Converts the provided value in a Array instance.\n\tArray createArray(Object[] value);\n\t// An implementation used in places where a proper JdbcTypeFactory can not be provided but an instance needs to be provided anyway, mostly for providing backward compatibility.\n\tstatic JdbcTypeFactory unsupported();\n}", "des": "Allows the creation of instances of database dependent types, e.g."}
{"index": 14937, "repo": "spring-data-jdbc-3.1.2", "code": "public class MyBatisContext extends Object {\n\t// Returns a value for the given key.\n\tObject get(String key);\n\t// The domain type of the entity to query or act upon.\n\tClass getDomainType();\n\t// The ID of the entity to query/act upon.\n\tObject getId();\n\t// The Identifier for a path to query.\n\tIdentifier getIdentifier();\n\t// The entity to act upon.\n\tObject getInstance();\n}", "des": "MyBatisContext instances get passed to MyBatis mapped statements as arguments, making Ids, instances, domainType and other attributes available to the statements."}
{"index": 14938, "repo": "spring-data-jdbc-3.1.2", "code": "public class MyBatisDataAccessStrategy extends Object implements DataAccessStrategy {\n\t// Acquire a lock on all aggregates of the given domain type.\n\t<T> void acquireLockAll(LockMode lockMode, Class<T> domainType);\n\t// Acquire a lock on the aggregate specified by id.\n\t<T> void acquireLockById(Object id, LockMode lockMode, Class<T> domainType);\n\t// Counts the rows in the table representing the given domain type.\n\tlong count(Class<?> domainType);\n}", "des": "DataAccessStrategy implementation based on MyBatis."}
{"index": 14939, "repo": "spring-data-jdbc-3.1.2", "code": "public class QueryMapper extends Object {\n\tprotected Object convertValue(Object value, TypeInformation<?> typeInformation);\n\t// Map a CriteriaDefinition object into Condition and consider value/NULL bindings.\n\tCondition getMappedObject(MapSqlParameterSource parameterSource, CriteriaDefinition criteria, Table table, RelationalPersistentEntity<?> entity);\n}", "des": "Maps CriteriaDefinition and Sort objects considering mapping metadata and dialect-specific conversion."}
{"index": 14940, "repo": "spring-r2dbc-6.0.11", "code": "public abstract class AbstractRoutingConnectionFactory extends Object implements ConnectionFactory, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\treactor.core.publisher.Mono<Connection> create();\n\t// Determine the current lookup key.\n\tprotected abstract reactor.core.publisher.Mono<Object> determineCurrentLookupKey();\n\t// Retrieve the current target ConnectionFactory.\n\tprotected reactor.core.publisher.Mono<ConnectionFactory> determineTargetConnectionFactory();\n}", "des": "Abstract ConnectionFactory implementation that routes AbstractRoutingConnectionFactory.create() calls to one of various target factories based on a lookup key."}
{"index": 14941, "repo": "spring-r2dbc-6.0.11", "code": "public class BadSqlGrammarException extends org.springframework.dao.InvalidDataAccessResourceUsageException {\n\t// Return the wrapped R2dbcException.\n\tR2dbcException getR2dbcException();\n\t// Return the SQL that caused the problem.\n\tString getSql();\n}", "des": "Exception thrown when SQL specified is invalid."}
{"index": 14942, "repo": "spring-r2dbc-6.0.11", "code": "public class Bindings extends Object implements Iterable<Bindings.Binding> {\n\t// Merge this bindings with an other Bindings object and create a new merged Bindings object.\n\tBindings and(Bindings other);\n\t// Apply the bindings to a BindTarget.\n\tvoid apply(BindTarget bindTarget);\n\t// Return an empty Bindings object.\n\tstatic Bindings empty();\n}", "des": "Value object representing value and null bindings for a Statement using BindMarkers."}
{"index": 14943, "repo": "spring-r2dbc-6.0.11", "code": "public abstract static class Bindings.Binding extends Object {\n\t// Apply the binding to a BindTarget.\n\tabstract void apply(BindTarget bindTarget);\n\t// Return the associated BindMarker.\n\tBindMarker getBindMarker();\n\t// Return the binding value.\n\tabstract Object getValue();\n\t// Return whether the binding has a value associated with it.\n\tabstract boolean hasValue();\n\t// Return whether the binding is empty.\n\tboolean isNull();\n}", "des": "Base class for value objects representing a value or a NULL binding."}
{"index": 14944, "repo": "spring-r2dbc-6.0.11", "code": "public interface BindMarker {\n\t// Bind the given value to the Statement using the underlying binding strategy.\n\tvoid bind(BindTarget bindTarget, Object value);\n\t// Bind a null value to the Statement using the underlying binding strategy.\n\tvoid bindNull(BindTarget bindTarget, Class<?> valueType);\n\t// Return the database-specific placeholder for a given substitution.\n\tString getPlaceholder();\n}", "des": "A bind marker represents a single bindable parameter within a query."}
{"index": 14945, "repo": "spring-r2dbc-6.0.11", "code": "@FunctionalInterface public interface BindMarkers {\n\t// Create a new BindMarker.\n\tBindMarker next();\n\t// Create a new BindMarker that accepts a hint.\n\tdefault BindMarker next(String hint);\n}", "des": "Bind markers represent placeholders in SQL queries for substitution for an actual parameter."}
{"index": 14946, "repo": "spring-r2dbc-6.0.11", "code": "@FunctionalInterface public interface BindMarkersFactory {\n\t// Create anonymous, index-based bind marker using a static placeholder.\n\tstatic BindMarkersFactory anonymous(String placeholder);\n\t// Create a new BindMarkers instance.\n\tBindMarkers create();\n\t// Return whether the BindMarkersFactory uses identifiable placeholders: false if multiple placeholders cannot be distinguished by just the placeholder identifier.\n\tdefault boolean identifiablePlaceholders();\n}", "des": "This class creates new BindMarkers instances to bind parameter to a specific Statement."}
{"index": 14947, "repo": "spring-r2dbc-6.0.11", "code": "public interface BindTarget {\n\t// Bind a value to an index.\n\tvoid bind(int index, Object value);\n\t// Bind a value.\n\tvoid bind(String identifier, Object value);\n\t// Bind a null value.\n\tvoid bindNull(int index, Class<?> type);\n\t// Bind a null value.\n\tvoid bindNull(String identifier, Class<?> type);\n}", "des": "Target to apply bindings to."}
{"index": 14948, "repo": "spring-r2dbc-6.0.11", "code": "public class ColumnMapRowMapper extends Object implements BiFunction<Row,RowMetadata,Map<String,Object>> {\n\tMap<String,Object> apply(Row row, RowMetadata rowMetadata);\n\t// Create a Map instance to be used as column map.\n\tprotected Map<String,Object> createColumnMap(int columnCount);\n\t// Determine the key to use for the given column in the column Map.\n\tprotected String getColumnKey(String columnName);\n}", "des": "Mapping function implementation that creates a java.util.Map for each row, representing all columns as key-value pairs: one entry for each column, with the column name as key."}
{"index": 14949, "repo": "spring-r2dbc-6.0.11", "code": "public class CompositeDatabasePopulator extends Object implements DatabasePopulator {\n\t// Add one or more populators to the list of delegates.\n\tvoid addPopulators(DatabasePopulator... populators);\n\t// Populate, initialize, or clean up the database using the provided R2DBC Connection.\n\treactor.core.publisher.Mono<Void> populate(Connection connection);\n\t// Specify one or more populators to delegate to.\n\tvoid setPopulators(DatabasePopulator... populators);\n}", "des": "Composite DatabasePopulator that delegates to a list of given DatabasePopulator implementations, executing all scripts."}
{"index": 14950, "repo": "spring-r2dbc-6.0.11", "code": "public interface ConnectionAccessor {\n\t// Execute a callback Function within a Connection scope.\n\t<T> reactor.core.publisher.Mono<T> inConnection(Function<Connection,reactor.core.publisher.Mono<T>> action);\n\t// Execute a callback Function within a Connection scope.\n\t<T> reactor.core.publisher.Flux<T> inConnectionMany(Function<Connection,reactor.core.publisher.Flux<T>> action);\n}", "des": "Interface declaring methods that accept callback Function to operate within the scope of a Connection."}
{"index": 14951, "repo": "spring-r2dbc-6.0.11", "code": "public class ConnectionFactoryInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\t// Use the database populator to set up the database.\n\tvoid afterPropertiesSet();\n\t// Use the database cleaner to clean up the database.\n\tvoid destroy();\n}", "des": "Used to set up a database during initialization and clean up a database during destruction."}
{"index": 14952, "repo": "spring-r2dbc-6.0.11", "code": "public abstract class ConnectionFactoryUtils extends Object {\n\t// Translate the given R2dbcException into a generic DataAccessException.\n\tstatic org.springframework.dao.DataAccessException convertR2dbcException(String task, String sql, R2dbcException ex);\n\t// Obtain the ConnectionFactory from the current TransactionSynchronizationManager.\n\tstatic reactor.core.publisher.Mono<ConnectionFactory> currentConnectionFactory(ConnectionFactory connectionFactory);\n}", "des": "Helper class that provides static methods for obtaining R2DBC Connections from a ConnectionFactory."}
{"index": 14953, "repo": "spring-r2dbc-6.0.11", "code": "public class ConnectionHolder extends org.springframework.transaction.support.ResourceHolderSupport {\n\tvoid clear();\n\t// Return the current Connection held by this ConnectionHolder.\n\tConnection getConnection();\n\t// Return whether this holder currently has a Connection.\n\tprotected boolean hasConnection();\n\t// Return whether this holder represents an active, R2DBC-managed transaction.\n\tprotected boolean isTransactionActive();\n\t// Releases the current Connection.\n\tvoid released();\n}", "des": "Resource holder wrapping a R2DBC Connection."}
{"index": 14954, "repo": "spring-r2dbc-6.0.11", "code": "public interface DatabaseClient extends ConnectionAccessor {\n\t// Obtain a DatabaseClient builder.\n\tstatic DatabaseClient.Builder builder();\n\t// Create a DatabaseClient that will use the provided ConnectionFactory.\n\tstatic DatabaseClient create(ConnectionFactory factory);\n\t// Get the ConnectionFactory that this client uses.\n\tConnectionFactory getConnectionFactory();\n\t// Specify a static sql statement to run.\n\tDatabaseClient.GenericExecuteSpec sql(String sql);\n}", "des": "A non-blocking, reactive client for performing database calls with Reactive Streams back pressure."}
{"index": 14955, "repo": "spring-r2dbc-6.0.11", "code": "public static interface DatabaseClient.Builder {\n\t// Apply a Consumer to configure this builder.\n\tDatabaseClient.Builder apply(Consumer<DatabaseClient.Builder> builderConsumer);\n\t// Configure the BindMarkers to be used.\n\tDatabaseClient.Builder bindMarkers(BindMarkersFactory bindMarkers);\n\t// Build the DatabaseClient instance.\n\tDatabaseClient build();\n\t// Configure the R2DBC connector.\n\tDatabaseClient.Builder connectionFactory(ConnectionFactory factory);\n}", "des": "A mutable builder for creating a DatabaseClient."}
{"index": 14956, "repo": "spring-r2dbc-6.0.11", "code": "public static interface DatabaseClient.GenericExecuteSpec {\n\t// Bind a non-null value to a parameter identified by its index.\n\tDatabaseClient.GenericExecuteSpec bind(int index, Object value);\n\t// Bind a non-null value to a parameter identified by its name.\n\tDatabaseClient.GenericExecuteSpec bind(String name, Object value);\n\t// Bind a null value to a parameter identified by its index.\n\tDatabaseClient.GenericExecuteSpec bindNull(int index, Class<?> type);\n}", "des": "Contract for specifying an SQL call along with options leading to the execution."}
{"index": 14957, "repo": "spring-r2dbc-6.0.11", "code": "@FunctionalInterface public interface DatabasePopulator {\n\t// Populate, initialize, or clean up the database using the provided R2DBC Connection.\n\treactor.core.publisher.Mono<Void> populate(Connection connection);\n\t// Execute the given DatabasePopulator against the given ConnectionFactory.\n\tdefault reactor.core.publisher.Mono<Void> populate(ConnectionFactory connectionFactory);\n}", "des": "Strategy used to populate, initialize, or clean up a database."}
{"index": 14958, "repo": "spring-r2dbc-6.0.11", "code": "public class MapConnectionFactoryLookup extends Object implements ConnectionFactoryLookup {\n\t// Add the supplied ConnectionFactory to the map of ConnectionFactory instances maintained by this object.\n\tvoid addConnectionFactory(String connectionFactoryName, ConnectionFactory connectionFactory);\n\t// Get the Map of ConnectionFactories maintained by this object.\n\tMap<String,ConnectionFactory> getConnectionFactories();\n}", "des": "Simple ConnectionFactoryLookup implementation that relies on a map for doing lookups."}
{"index": 14959, "repo": "spring-r2dbc-6.0.11", "code": "public class MutableBindings extends Bindings {\n\t// Bind a value and return the related BindMarker.\n\tBindMarker bind(Object value);\n\t// Bind a value to BindMarker.\n\tMutableBindings bind(BindMarker marker, Object value);\n\t// Bind a NULL value and return the related BindMarker.\n\tBindMarker bindNull(Class<?> valueType);\n\t// Bind a NULL value to BindMarker.\n\tMutableBindings bindNull(BindMarker marker, Class<?> valueType);\n\t// Obtain the next BindMarker.\n\tBindMarker nextMarker();\n}", "des": "Mutable extension to Bindings for Value and null bindings for a Statement using BindMarkers."}
{"index": 14960, "repo": "spring-r2dbc-6.0.11", "code": "public interface PreparedOperation<T> extends QueryOperation {\n\t// Apply bindings to the supplied BindTarget.\n\tvoid bindTo(BindTarget target);\n\t// Get the underlying query source.\n\tT getSource();\n}", "des": "Extension to QueryOperation for a prepared SQL query Supplier with bound parameters."}
{"index": 14961, "repo": "spring-r2dbc-6.0.11", "code": "public class R2dbcTransactionManager extends org.springframework.transaction.reactive.AbstractReactiveTransactionManager implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Determine the transaction definition from our TransactionDefinition.\n\tprotected TransactionDefinition createTransactionDefinition(org.springframework.transaction.TransactionDefinition definition);\n}", "des": "ReactiveTransactionManager implementation for a single R2DBC ConnectionFactory."}
{"index": 14962, "repo": "spring-r2dbc-6.0.11", "code": "public class ResourceDatabasePopulator extends Object implements DatabasePopulator {\n\t// Add a script to execute to initialize or clean up the database.\n\tvoid addScript(org.springframework.core.io.Resource script);\n\t// Add multiple scripts to execute to initialize or clean up the database.\n\tvoid addScripts(org.springframework.core.io.Resource... scripts);\n}", "des": "Populates, initializes, or cleans up a database using SQL scripts defined in external resources."}
{"index": 14963, "repo": "spring-r2dbc-6.0.11", "code": "public interface RowsFetchSpec<T> {\n\t// Get all matching elements.\n\treactor.core.publisher.Flux<T> all();\n\t// Get the first or no result.\n\treactor.core.publisher.Mono<T> first();\n\t// Get exactly zero or one result.\n\treactor.core.publisher.Mono<T> one();\n}", "des": "Contract for fetching tabular results."}
{"index": 14964, "repo": "spring-r2dbc-6.0.11", "code": "public abstract class ScriptUtils extends Object {\n\t// Execute the given SQL script using default settings for statement separators, comment delimiters, and exception handling flags.\n\tstatic reactor.core.publisher.Mono<Void> executeSqlScript(Connection connection, org.springframework.core.io.Resource resource);\n}", "des": "Generic utility methods for working with SQL scripts in conjunction with R2DBC."}
{"index": 14965, "repo": "spring-r2dbc-6.0.11", "code": "public class SingleConnectionFactory extends DelegatingConnectionFactory implements org.springframework.beans.factory.DisposableBean {\n\treactor.core.publisher.Mono<? extends Connection> create();\n\t// Close the underlying Connection.\n\tvoid destroy();\n\t// Return whether the returned Connection's \"autoCommit\" setting should be overridden.\n\tprotected Boolean getAutoCommitValue();\n}", "des": "Implementation of DelegatingConnectionFactory that wraps a single R2DBC Connection which is not closed after use."}
{"index": 14966, "repo": "spring-r2dbc-6.0.11", "code": "@FunctionalInterface public interface StatementFilterFunction {\n\t// Return a composed filter function that first applies this filter and then applies the given afterFilter.\n\tdefault StatementFilterFunction andThen(StatementFilterFunction afterFilter);\n\t// Apply this filter to the given Statement and ExecuteFunction.\n\tPublisher<? extends Result> filter(Statement statement, ExecuteFunction next);\n}", "des": "Represents a function that filters an ExecuteFunction."}
{"index": 14967, "repo": "spring-r2dbc-6.0.11", "code": "public class TransactionAwareConnectionFactoryProxy extends DelegatingConnectionFactory {\n\t// Delegates to ConnectionFactoryUtils for automatically participating in Spring-managed transactions.\n\treactor.core.publisher.Mono<Connection> create();\n}", "des": "Proxy for a target R2DBC ConnectionFactory, adding awareness of Spring-managed transactions."}
{"index": 14968, "repo": "spring-r2dbc-6.0.11", "code": "public class UncategorizedR2dbcException extends org.springframework.dao.UncategorizedDataAccessException {\n\t// Return the wrapped R2dbcException.\n\tR2dbcException getR2dbcException();\n\t// Return the SQL that led to the problem (if known).\n\tString getSql();\n}", "des": "Exception thrown when we can't classify a R2dbcException into one of our generic data access exceptions."}
{"index": 14969, "repo": "spring-session-core-3.1.1", "code": "@Order(100) public abstract class AbstractHttpSessionApplicationInitializer extends Object implements org.springframework.web.WebApplicationInitializer {\n\t// Invoked after the springSessionRepositoryFilter is added.\n\tprotected void afterSessionRepositoryFilter(jakarta.servlet.ServletContext servletContext);\n}", "des": "Registers the DelegatingFilterProxy to use the springSessionRepositoryFilter before any other registered Filter."}
{"index": 14970, "repo": "spring-session-core-3.1.1", "code": "public final class CookieHttpSessionIdResolver extends Object implements HttpSessionIdResolver {\n\t// Instruct the client to end the current session.\n\tvoid expireSession(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\t// Resolve the session ids associated with the provided HttpServletRequest.\n\tList<String> resolveSessionIds(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "A HttpSessionIdResolver that uses a cookie to obtain the session from."}
{"index": 14971, "repo": "spring-session-core-3.1.1", "code": "public interface CookieSerializer {\n\t// Reads all the matching cookies from the HttpServletRequest.\n\tList<String> readCookieValues(jakarta.servlet.http.HttpServletRequest request);\n\t// Writes a given CookieSerializer.CookieValue to the provided HttpServletResponse.\n\tvoid writeCookieValue(CookieSerializer.CookieValue cookieValue);\n}", "des": "Strategy for reading and writing a cookie value to the HttpServletResponse."}
{"index": 14972, "repo": "spring-session-core-3.1.1", "code": "public static class CookieSerializer.CookieValue extends Object {\n\t// Get the cookie max age.\n\tint getCookieMaxAge();\n\t// The value to be written.\n\tString getCookieValue();\n\t// Gets the request to use.\n\tjakarta.servlet.http.HttpServletRequest getRequest();\n\t// Gets the response to write to.\n\tjakarta.servlet.http.HttpServletResponse getResponse();\n\t// Set the cookie max age.\n\tvoid setCookieMaxAge(int cookieMaxAge);\n}", "des": "Contains the information necessary to write a value to the HttpServletResponse."}
{"index": 14973, "repo": "spring-session-core-3.1.1", "code": "public class DefaultCookieSerializer extends Object implements CookieSerializer {\n\t// Reads all the matching cookies from the HttpServletRequest.\n\tList<String> readCookieValues(jakarta.servlet.http.HttpServletRequest request);\n\t// Sets the maxAge property of the Cookie.\n\tvoid setCookieMaxAge(int cookieMaxAge);\n\tvoid setCookieName(String cookieName);\n\t// Sets the path of the Cookie.\n\tvoid setCookiePath(String cookiePath);\n\t// Sets an explicit Domain Name.\n\tvoid setDomainName(String domainName);\n}", "des": "The default implementation of CookieSerializer."}
{"index": 14974, "repo": "spring-session-core-3.1.1", "code": "public interface FindByIndexNameSessionRepository<S extends Session> extends SessionRepository<S> {\n\t// Find a Map of the session id to the Session of all sessions that contain the specified index name index value.\n\tMap<String,S> findByIndexNameAndIndexValue(String indexName, String indexValue);\n}", "des": "Extends a basic SessionRepository to allow finding sessions by the specified index name and index value."}
{"index": 14975, "repo": "spring-session-core-3.1.1", "code": "public enum FlushMode extends Enum<FlushMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic FlushMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic FlushMode[] values();\n}", "des": "Supported modes of writing the session to session store."}
{"index": 14976, "repo": "spring-session-core-3.1.1", "code": "public class HeaderHttpSessionIdResolver extends Object implements HttpSessionIdResolver {\n\t// Convenience factory to create HeaderHttpSessionIdResolver that uses \"Authentication-Info\" header.\n\tstatic HeaderHttpSessionIdResolver authenticationInfo();\n\t// Instruct the client to end the current session.\n\tvoid expireSession(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "A HttpSessionIdResolver that uses a header to resolve the session id."}
{"index": 14977, "repo": "spring-session-core-3.1.1", "code": "public interface HttpSessionIdResolver {\n\t// Instruct the client to end the current session.\n\tvoid expireSession(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\t// Resolve the session ids associated with the provided HttpServletRequest.\n\tList<String> resolveSessionIds(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "Contract for session id resolution strategies."}
{"index": 14978, "repo": "spring-session-core-3.1.1", "code": "public final class MapSession extends Object implements Session, Serializable {\n\t// Changes the session id.\n\tString changeSessionId();\n\tboolean equals(Object obj);\n\t// Gets the Object associated with the specified name or null if no Object is associated to that name.\n\t<T> T getAttribute(String attributeName);\n\t// Gets the attribute names that have a value associated with it.\n\tSet<String> getAttributeNames();\n\t// Gets the time when this session was created.\n\tInstant getCreationTime();\n}", "des": "A Session implementation that is backed by a Map."}
{"index": 14979, "repo": "spring-session-core-3.1.1", "code": "public class MapSessionRepository extends Object implements SessionRepository<MapSession> {\n\t// Creates a new Session that is capable of being persisted by this SessionRepository.\n\tMapSession createSession();\n\t// Deletes the Session with the given Session.getId() or does nothing if the Session is not found.\n\tvoid deleteById(String id);\n\t// Gets the Session by the Session.getId() or null if no Session is found.\n\tMapSession findById(String id);\n}", "des": "A SessionRepository backed by a Map and that uses a MapSession."}
{"index": 14980, "repo": "spring-session-core-3.1.1", "code": "public class ReactiveMapSessionRepository extends Object implements ReactiveSessionRepository<MapSession> {\n\t// Creates a new Session that is capable of being persisted by this ReactiveSessionRepository.\n\treactor.core.publisher.Mono<MapSession> createSession();\n\t// Deletes the Session with the given Session.getId() or does nothing if the Session is not found.\n\treactor.core.publisher.Mono<Void> deleteById(String id);\n}", "des": "A ReactiveSessionRepository backed by a Map and that uses a MapSession."}
{"index": 14981, "repo": "spring-session-core-3.1.1", "code": "public interface ReactiveSessionRepository<S extends Session> {\n\t// Creates a new Session that is capable of being persisted by this ReactiveSessionRepository.\n\treactor.core.publisher.Mono<S> createSession();\n\t// Deletes the Session with the given Session.getId() or does nothing if the Session is not found.\n\treactor.core.publisher.Mono<Void> deleteById(String id);\n\t// Gets the Session by the Session.getId() or null if no Session is found.\n\treactor.core.publisher.Mono<S> findById(String id);\n}", "des": "A repository interface for managing Session instances."}
{"index": 14982, "repo": "spring-session-core-3.1.1", "code": "public enum SaveMode extends Enum<SaveMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SaveMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SaveMode[] values();\n}", "des": "Supported modes of tracking and saving session changes to session store."}
{"index": 14983, "repo": "spring-session-core-3.1.1", "code": "public interface Session {\n\t// Changes the session id.\n\tString changeSessionId();\n\t// Gets the Object associated with the specified name or null if no Object is associated to that name.\n\t<T> T getAttribute(String attributeName);\n\t// Gets the attribute names that have a value associated with it.\n\tSet<String> getAttributeNames();\n\t// Return the session attribute value, or a default, fallback value.\n\tdefault <T> T getAttributeOrDefault(String name, T defaultValue);\n}", "des": "Provides a way to identify a user in an agnostic way."}
{"index": 14984, "repo": "spring-session-core-3.1.1", "code": "public interface SessionRepository<S extends Session> {\n\t// Creates a new Session that is capable of being persisted by this SessionRepository.\n\tS createSession();\n\t// Deletes the Session with the given Session.getId() or does nothing if the Session is not found.\n\tvoid deleteById(String id);\n\t// Gets the Session by the Session.getId() or null if no Session is found.\n\tS findById(String id);\n\t// Ensures the Session created by createSession() is saved.\n\tvoid save(S session);\n}", "des": "A repository interface for managing Session instances."}
{"index": 14985, "repo": "spring-session-core-3.1.1", "code": "@Order(-2147483598) public class SessionRepositoryFilter<S extends Session> extends Object {\n\tvoid destroy();\n\t// This doFilter implementation stores a request attribute for \"already filtered\", proceeding without filtering again if the attribute is already there.\n\tfinal void doFilter(jakarta.servlet.ServletRequest request, jakarta.servlet.ServletResponse response, jakarta.servlet.FilterChain filterChain);\n}", "des": "Switches the HttpSession implementation to be backed by a Session."}
{"index": 14986, "repo": "spring-data-jpa-3.1.2", "code": "public abstract class AbstractJpaQuery extends Object implements RepositoryQuery {\n\t// Applies the declared query hints to the given query.\n\tprotected <T extends jakarta.persistence.Query>T applyHints(T query, JpaQueryMethod method);\n\t// Protected to be able to customize in sub-classes.\n\tprotected <T extends jakarta.persistence.Query>void applyQueryHint(T query, jakarta.persistence.QueryHint hint);\n\tprotected ParameterBinder createBinder();\n}", "des": "Abstract base class to implement RepositoryQuerys."}
{"index": 14987, "repo": "spring-data-jpa-3.1.2", "code": "@MappedSuperclass public abstract class AbstractPersistable<PK extends Serializable> extends Object implements Persistable<PK> {\n\tboolean equals(Object obj);\n\tPK getId();\n\t// Must be Transient in order to ensure that no JPA provider complains because of a missing setter.\n\tboolean isNew();\n\t// Sets the id of the entity.\n\tprotected void setId(PK id);\n}", "des": "Abstract base class for entities."}
{"index": 14988, "repo": "spring-data-jpa-3.1.2", "code": "@Configurable public class AuditingEntityListener extends Object {\n\t// Configures the AuditingHandler to be used to set the current auditor on the domain types touched.\n\tvoid setAuditingHandler(ObjectFactory<AuditingHandler> auditingHandler);\n\t// Sets modification and creation date and auditor on the target object in case it implements Auditable on persist events.\n\tvoid touchForCreate(Object target);\n}", "des": "JPA entity listener to capture auditing information on persisting and updating entities."}
{"index": 14989, "repo": "spring-data-jpa-3.1.2", "code": "public final class BeanDefinitionUtils extends Object {\n\t// Returns the BeanDefinition with the given name, obtained from the given BeanFactory or one of its parents.\n\tstatic BeanDefinition getBeanDefinition(String name, ConfigurableListableBeanFactory beanFactory);\n}", "des": "Utility methods to work with BeanDefinition instances from BeanFactoryPostProcessors."}
{"index": 14990, "repo": "spring-data-jpa-3.1.2", "code": "public static class BeanDefinitionUtils.EntityManagerFactoryBeanDefinition extends Object {\n\tboolean equals(Object o);\n\t// Returns the BeanDefinition for the EntityManagerFactory.\n\tBeanDefinition getBeanDefinition();\n\t// Returns the underlying BeanFactory.\n\tBeanFactory getBeanFactory();\n\t// Returns the bean name of the BeanDefinition for the EntityManagerFactory.\n\tString getBeanName();\n}", "des": "Value object to represent a BeanDefinition for an EntityManagerFactory with a dedicated bean name."}
{"index": 14991, "repo": "spring-data-jpa-3.1.2", "code": "public interface CrudMethodMetadata {\n\t// Returns query comment to be applied to query.\n\tString getComment();\n\t// Returns the EntityGraph to be used.\n\tOptional<EntityGraph> getEntityGraph();\n\t// Returns the LockModeType to be used.\n\tjakarta.persistence.LockModeType getLockModeType();\n\t// Returns the Method to be used.\n\tMethod getMethod();\n\t// Returns all query hints in a list to be applied to queries executed for the CRUD method.\n\tQueryHints getQueryHints();\n}", "des": "Interface to abstract CrudMethodMetadata that provide the LockModeType to be used for query execution."}
{"index": 14992, "repo": "spring-data-jpa-3.1.2", "code": "public class DefaultQueryEnhancer extends Object implements QueryEnhancer {\n\t// Adds order by clause to the JPQL query.\n\tString applySorting(Sort sort, String alias);\n\t// Creates a count projected query from the given original query using the provided countProjection.\n\tString createCountQueryFor(String countProjection);\n\t// Resolves the alias for the entity to be retrieved from the given JPA query.\n\tString detectAlias();\n\tSet<String> getJoinAliases();\n}", "des": "The implementation of QueryEnhancer using QueryUtils."}
{"index": 14993, "repo": "spring-data-jpa-3.1.2", "code": "public class DelegatingQueryRewriter extends Object implements QueryRewriter {\n\t// Rewrite the assembled query with the given Pageable.\n\tString rewrite(String query, Pageable pageRequest);\n\t// Rewrite the assembled query with the given Sort.\n\tString rewrite(String query, Sort sort);\n}", "des": "Delegating QueryRewriter that delegates rewrite calls to a delegate provided by a Supplier."}
{"index": 14994, "repo": "spring-data-jpa-3.1.2", "code": "public static enum EntityGraph.EntityGraphType extends Enum<EntityGraph.EntityGraphType> {\n\tString getKey();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic EntityGraph.EntityGraphType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic EntityGraph.EntityGraphType[] values();\n}", "des": "Enum for JPA 2.1 EntityGraph types."}
{"index": 14995, "repo": "spring-data-jpa-3.1.2", "code": "public class JpaCountQueryCreator extends JpaQueryCreator {\n\t// Template method to finalize the given Predicate using the given CriteriaQuery and CriteriaBuilder.\n\tprotected jakarta.persistence.criteria.CriteriaQuery<? extends Object> complete(jakarta.persistence.criteria.Predicate predicate, Sort sort, jakarta.persistence.criteria.CriteriaQuery<? extends Object> query, jakarta.persistence.criteria.CriteriaBuilder builder, jakarta.persistence.criteria.Root<?> root);\n}", "des": "Special JpaQueryCreator that creates a count projecting query."}
{"index": 14996, "repo": "spring-data-jpa-3.1.2", "code": "public class JpaEntityGraph extends Object {\n\t// Returns the attribute node names to be used for this JpaEntityGraph.\n\tList<String> getAttributePaths();\n\t// Returns the name of the EntityGraph configuration to use.\n\tString getName();\n\t// Returns the EntityGraph.EntityGraphType of the EntityGraph to use.\n\tEntityGraph.EntityGraphType getType();\n\t// Return true if this JpaEntityGraph needs to be generated on-the-fly.\n\tboolean isAdHocEntityGraph();\n}", "des": "EntityGraph configuration for JPA 2.1 EntityGraphs."}
{"index": 14997, "repo": "spring-data-jpa-3.1.2", "code": "public interface JpaEntityInformation<T,ID> extends EntityInformation<T,ID>, JpaEntityMetadata<T> {\n\t// Extracts the value for the given id attribute from a composite id\n\tObject getCompositeIdAttributeValue(Object id, String idAttribute);\n\t// Returns the id attribute of the entity.\n\tjakarta.persistence.metamodel.SingularAttribute<? super T,?> getIdAttribute();\n\t// Returns the attribute names of the id attributes.\n\tCollection<String> getIdAttributeNames();\n}", "des": "Extension of EntityInformation to capture additional JPA specific information about entities."}
{"index": 14998, "repo": "spring-data-jpa-3.1.2", "code": "public abstract class JpaEntityInformationSupport<T,ID> extends AbstractEntityInformation<T,ID> implements JpaEntityInformation<T,ID> {\n\t// Creates a JpaEntityInformation for the given domain class and EntityManager.\n\tstatic <T> JpaEntityInformation<T,?> getEntityInformation(Class<T> domainClass, jakarta.persistence.EntityManager em);\n\t// Returns the name of the entity.\n\tString getEntityName();\n}", "des": "Base class for JpaEntityInformation implementations to share common method implementations."}
{"index": 14999, "repo": "spring-data-jpa-3.1.2", "code": "public class JpaMetamodel extends Object {\n\t// Returns whether the given type is managed by the backing JPA Metamodel.\n\tboolean isJpaManaged(Class<?> type);\n\t// Returns whether the given type is considered a mapped type, i.e. an actually JPA persisted entity, mapped superclass or native JPA embeddable.\n\tboolean isMappedType(Class<?> entity);\n}", "des": "Wrapper around the JPA Metamodel to be able to apply some fixes against bugs in provider implementations."}
{"index": 15000, "repo": "spring-data-jpa-3.1.2", "code": "public class JpaMetamodelEntityInformation<T,ID> extends JpaEntityInformationSupport<T,ID> {\n\t// Extracts the value for the given id attribute from a composite id\n\tObject getCompositeIdAttributeValue(Object id, String idAttribute);\n\t// Returns the name of the entity.\n\tString getEntityName();\n\tID getId(T entity);\n\t// Returns the id attribute of the entity.\n\tjakarta.persistence.metamodel.SingularAttribute<? super T,?> getIdAttribute();\n}", "des": "Implementation of EntityInformation that uses JPA Metamodel to find the domain class' id field."}
{"index": 15001, "repo": "spring-data-jpa-3.1.2", "code": "public class JpaQueryCreator extends AbstractQueryCreator<jakarta.persistence.criteria.CriteriaQuery<? extends Object>,jakarta.persistence.criteria.Predicate> {\n\tprotected jakarta.persistence.criteria.Predicate and(Part part, jakarta.persistence.criteria.Predicate base, Iterator<Object> iterator);\n\t// Finalizes the given Predicate and applies the given sort.\n\tprotected final jakarta.persistence.criteria.CriteriaQuery<? extends Object> complete(jakarta.persistence.criteria.Predicate predicate, Sort sort);\n}", "des": "Query creator to create a CriteriaQuery from a PartTree."}
{"index": 15002, "repo": "spring-data-jpa-3.1.2", "code": "public abstract class JpaQueryExecution extends Object {\n\t// Method to implement AbstractStringBasedJpaQuery executions by single enum values.\n\tprotected abstract Object doExecute(AbstractJpaQuery query, JpaParametersParameterAccessor accessor);\n\t// Executes the given AbstractStringBasedJpaQuery with the given ParameterBinder.\n\tObject execute(AbstractJpaQuery query, JpaParametersParameterAccessor accessor);\n}", "des": "Set of classes to contain query execution strategies."}
{"index": 15003, "repo": "spring-data-jpa-3.1.2", "code": "public class JpaQueryMethod extends QueryMethod {\n\tprotected JpaParameters createParameters(Method method);\n\t// Returns the query string declared in a Query annotation or null if neither the annotation found nor the attribute was specified.\n\tString getAnnotatedQuery();\n\t// Returns the countQuery string declared in a Query annotation or null if neither the annotation found nor the attribute was specified.\n\tString getCountQuery();\n\tJpaEntityMetadata<?> getEntityInformation();\n\tString getNamedQueryName();\n}", "des": "JPA specific extension of QueryMethod."}
{"index": 15004, "repo": "spring-data-jpa-3.1.2", "code": "@NoRepositoryBean public interface JpaRepository<T,ID> extends ListCrudRepository<T,ID>, ListPagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T> {\n\t// Deletes the entities identified by the given ids using a single query.\n\tvoid deleteAllByIdInBatch(Iterable<ID> ids);\n\t// Deletes all entities in a batch call.\n\tvoid deleteAllInBatch();\n\t// Deletes the given entities in a batch which means it will create a single query.\n\tvoid deleteAllInBatch(Iterable<T> entities);\n}", "des": "JPA specific extension of Repository."}
{"index": 15005, "repo": "spring-data-jpa-3.1.2", "code": "public class JpaRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends TransactionalRepositoryFactoryBeanSupport<T,S,ID> {\n\tvoid afterPropertiesSet();\n\t// Returns a RepositoryFactorySupport.\n\tprotected RepositoryFactorySupport createRepositoryFactory(jakarta.persistence.EntityManager entityManager);\n\tprotected RepositoryFactorySupport doCreateRepositoryFactory();\n\t// The EntityManager to be used.\n\tvoid setEntityManager(jakarta.persistence.EntityManager entityManager);\n}", "des": "Special adapter for Springs FactoryBean interface to allow easy setup of repository factories via Spring configuration."}
{"index": 15006, "repo": "spring-data-jpa-3.1.2", "code": "@NoRepositoryBean public interface JpaRepositoryImplementation<T,ID> extends JpaRepository<T,ID>, JpaSpecificationExecutor<T> {\n\t// Configures the EscapeCharacter to be used with the repository.\n\tdefault void setEscapeCharacter(EscapeCharacter escapeCharacter);\n\t// Configures the CrudMethodMetadata to be used with the repository.\n\tvoid setRepositoryMethodMetadata(CrudMethodMetadata crudMethodMetadata);\n}", "des": "SPI interface to be implemented by JpaRepository implementations."}
{"index": 15007, "repo": "spring-data-jpa-3.1.2", "code": "public class JpaSort extends Sort {\n\t// Returns a new JpaSort with the given sorting criteria added to the current one.\n\tJpaSort and(Sort.Direction direction, jakarta.persistence.metamodel.Attribute<?,?>... attributes);\n\t// Returns a new JpaSort with the given sorting criteria added to the current one.\n\tJpaSort and(Sort.Direction direction, JpaSort.Path<?,?>... paths);\n}", "des": "Sort option for queries that wraps JPA meta-model Attributes for sorting."}
{"index": 15008, "repo": "spring-data-jpa-3.1.2", "code": "public static class JpaSort.Path<T,S> extends Object {\n\t// Collects the given Attribute and returning a new JpaSort.Path pointing to the attribute type.\n\t<A extends jakarta.persistence.metamodel.Attribute<S, U>, U>JpaSort.Path<S,U> dot(A attribute);\n\t// Collects the given PluralAttribute and returning a new JpaSort.Path pointing to the attribute type.\n\t<P extends jakarta.persistence.metamodel.PluralAttribute<S, ?, U>, U>JpaSort.Path<S,U> dot(P attribute);\n}", "des": "Value object to abstract a collection of Attributes."}
{"index": 15009, "repo": "spring-data-jpa-3.1.2", "code": "public interface JpaSpecificationExecutor<T> {\n\t// Returns the number of instances that the given Specification will return.\n\tlong count(Specification<T> spec);\n\t// Deletes by the Specification and returns the number of rows deleted.\n\tlong delete(Specification<T> spec);\n\t// Checks whether the data store contains elements that match the given Specification.\n\tboolean exists(Specification<T> spec);\n\t// Returns all entities matching the given Specification.\n\tList<T> findAll(Specification<T> spec);\n}", "des": "Interface to allow execution of Specifications based on the JPA criteria API."}
{"index": 15010, "repo": "spring-data-jpa-3.1.2", "code": "public class JSqlParserQueryEnhancer extends Object implements QueryEnhancer {\n\t// Adds order by clause to the JPQL query.\n\tString applySorting(Sort sort, String alias);\n\t// Creates a count projected query from the given original query using the provided countProjection.\n\tString createCountQueryFor(String countProjection);\n\t// Resolves the alias for the entity to be retrieved from the given JPA query.\n\tString detectAlias();\n\tSet<String> getJoinAliases();\n}", "des": "The implementation of QueryEnhancer using JSqlParser."}
{"index": 15011, "repo": "spring-data-jpa-3.1.2", "code": "public final class JSqlParserUtils extends Object {\n\t// Generates a count function call, based on the countFields.\n\tstatic net.sf.jsqlparser.expression.Function getJSqlCount(List<String> countFields, boolean distinct);\n\t// Generates a lower function call, based on the column.\n\tstatic net.sf.jsqlparser.expression.Function getJSqlLower(String column);\n}", "des": "A utility class for JSqlParser."}
{"index": 15012, "repo": "spring-data-jpa-3.1.2", "code": "public static interface KeysetScrollDelegate.QueryStrategy<E,P> {\n\t// AND-combine the intermediate predicates.\n\tP and(List<P> intermediate);\n\t// Create an equals-comparison object.\n\tP compare(E propertyExpression, Object value);\n\t// Create a comparison object according to the Sort.Order.\n\tP compare(Sort.Order order, E propertyExpression, Object value);\n\t// Create an expression object from the given property path.\n\tE createExpression(String property);\n}", "des": "Adapter to construct scroll queries."}
{"index": 15013, "repo": "spring-data-jpa-3.1.2", "code": "public record KeysetScrollSpecification<T>(KeysetScrollPosition position, Sort sort, JpaEntityInformation<?,?> entity) extends Record implements Specification<T> {\n\tjakarta.persistence.criteria.Predicate createPredicate(jakarta.persistence.criteria.Root<?> root, jakarta.persistence.criteria.CriteriaBuilder criteriaBuilder);\n\t// Create a Sort object to be used with the actual query.\n\tstatic Sort createSort(KeysetScrollPosition position, Sort sort, JpaEntityInformation<?,?> entity);\n}", "des": "Specification to create scroll queries using keyset-scrolling."}
{"index": 15014, "repo": "spring-data-jpa-3.1.2", "code": "public class Meta extends Object {\n\tString getComment();\n\tboolean hasValues();\n\t// Add a comment to the query that is propagated to the profile log.\n\tvoid setComment(String comment);\n\t// Get Iterable of set meta values.\n\tIterable<Map.Entry<String,Object>> values();\n}", "des": "Value object to hold metadata about repository methods."}
{"index": 15015, "repo": "spring-data-jpa-3.1.2", "code": "public class MutableQueryHints extends Object implements QueryHints {\n\t// Add a new key-value pair for a hint.\n\tvoid add(String name, Object value);\n\t// Creates and returns a new QueryHints instance that will contain only those hints applicable for count queries.\n\tQueryHints forCounts();\n\t// Performs the given action for each element of this query hints object until all hints have been processed or the action throws an exception.\n\tvoid forEach(BiConsumer<String,Object> action);\n}", "des": "Mutable implementation of QueryHints, without the Option to switch between MutableQueryHints.forCounts()/MutableQueryHints.withFetchGraphs(EntityManager) hints."}
{"index": 15016, "repo": "spring-data-jpa-3.1.2", "code": "public class PartTreeJpaQuery extends AbstractJpaQuery {\n\t// Creates a TypedQuery for counting using the given values.\n\tjakarta.persistence.TypedQuery<Long> doCreateCountQuery(JpaParametersParameterAccessor accessor);\n\t// Creates a Query instance for the given values.\n\tjakarta.persistence.Query doCreateQuery(JpaParametersParameterAccessor accessor);\n\tprotected JpaQueryExecution getExecution();\n}", "des": "A AbstractJpaQuery implementation based on a PartTree."}
{"index": 15017, "repo": "spring-data-jpa-3.1.2", "code": "public enum PersistenceProvider extends Enum<PersistenceProvider> implements QueryExtractor, ProxyIdAccessor, QueryComment {\n\t// Returns whether the extractor is able to extract the original query string from a given Query.\n\tboolean canExtractQuery();\n\tCloseableIterator<Object> executeQueryWithResultStream(jakarta.persistence.Query jpaQuery);\n\t// Determines the PersistenceProvider from the given EntityManager.\n\tstatic PersistenceProvider fromEntityManager(jakarta.persistence.EntityManager em);\n}", "des": "Enumeration representing persistence providers to be used."}
{"index": 15018, "repo": "spring-data-jpa-3.1.2", "code": "public interface ProxyIdAccessor {\n\t// Returns the identifier of the given entity by leniently inspecting it for the identifier value.\n\tObject getIdentifierFrom(Object entity);\n\t// Returns whether the ProxyIdAccessor should be used for the given entity.\n\tboolean shouldUseAccessorFor(Object entity);\n}", "des": "Interface for a persistence provider specific accessor of identifiers held in proxies."}
{"index": 15019, "repo": "spring-data-jpa-3.1.2", "code": "public class QueryByExamplePredicateBuilder extends Object {\n\t// Extract the Predicate representing the Example.\n\tstatic <T> jakarta.persistence.criteria.Predicate getPredicate(jakarta.persistence.criteria.Root<T> root, jakarta.persistence.criteria.CriteriaBuilder cb, Example<T> example);\n}", "des": "QueryByExamplePredicateBuilder creates a single CriteriaBuilder.and(Predicate...) combined Predicate for a given Example."}
{"index": 15020, "repo": "spring-data-jpa-3.1.2", "code": "public class Querydsl extends Object {\n\t// Applies the given Pageable to the given JPQLQuery.\n\t<T> com.querydsl.jpa.JPQLQuery<T> applyPagination(Pageable pageable, com.querydsl.jpa.JPQLQuery<T> query);\n\t// Applies sorting to the given JPQLQuery.\n\t<T> com.querydsl.jpa.JPQLQuery<T> applySorting(Sort sort, com.querydsl.jpa.JPQLQuery<T> query);\n}", "des": "Helper instance to ease access to Querydsl JPA query API."}
{"index": 15021, "repo": "spring-data-jpa-3.1.2", "code": "public class QuerydslJpaPredicateExecutor<T> extends Object implements QuerydslPredicateExecutor<T> {\n\tlong count(com.querydsl.core.types.Predicate predicate);\n\t// Creates a new JPQLQuery count query for the given Predicate.\n\tprotected com.querydsl.jpa.JPQLQuery<?> createCountQuery(com.querydsl.core.types.Predicate... predicate);\n\t// Creates a new JPQLQuery for the given Predicate.\n\tprotected com.querydsl.jpa.impl.AbstractJPAQuery<?,?> createQuery(com.querydsl.core.types.Predicate... predicate);\n}", "des": "Querydsl specific fragment for extending SimpleJpaRepository with an implementation of QuerydslPredicateExecutor."}
{"index": 15022, "repo": "spring-data-jpa-3.1.2", "code": "@Repository public abstract class QuerydslRepositorySupport extends Object {\n\t// Returns a fresh DeleteClause.\n\tprotected com.querydsl.core.dml.DeleteClause<com.querydsl.jpa.impl.JPADeleteClause> delete(com.querydsl.core.types.EntityPath<?> path);\n\t// Returns a fresh JPQLQuery.\n\tprotected com.querydsl.jpa.JPQLQuery<Object> from(com.querydsl.core.types.EntityPath<?>... paths);\n}", "des": "Base class for implementing repositories using Querydsl library."}
{"index": 15023, "repo": "spring-data-jpa-3.1.2", "code": "public interface QueryEnhancer {\n\t// Adds order by clause to the JPQL query.\n\tdefault String applySorting(Sort sort);\n\t// Adds order by clause to the JPQL query.\n\tString applySorting(Sort sort, String alias);\n\t// Creates a count projected query from the given original query.\n\tdefault String createCountQueryFor();\n\t// Creates a count projected query from the given original query using the provided countProjection.\n\tString createCountQueryFor(String countProjection);\n}", "des": "This interface describes the API for enhancing a given Query."}
{"index": 15024, "repo": "spring-data-jpa-3.1.2", "code": "public interface QueryExtractor {\n\t// Returns whether the extractor is able to extract the original query string from a given Query.\n\tboolean canExtractQuery();\n\t// Reverse engineers the query string from the Query object.\n\tString extractQueryString(jakarta.persistence.Query query);\n}", "des": "Interface to hide different implementations to extract the original JPA query string from a Query."}
{"index": 15025, "repo": "spring-data-jpa-3.1.2", "code": "public interface QueryHints {\n\t// Creates and returns a new QueryHints instance that will contain only those hints applicable for count queries.\n\tQueryHints forCounts();\n\t// Performs the given action for each element of this query hints object until all hints have been processed or the action throws an exception.\n\tvoid forEach(BiConsumer<String,Object> action);\n\t// Create a new QueryHints object from the given sources.\n\tstatic QueryHints from(QueryHints... sources);\n}", "des": "QueryHints provides access to query hints defined via CrudMethodMetadata.getQueryHints() QueryHintList()} by default excluding JPA EntityGraph."}
{"index": 15026, "repo": "spring-data-jpa-3.1.2", "code": "public static enum QueryHints.NoHints extends Enum<QueryHints.NoHints> implements QueryHints {\n\t// Creates and returns a new QueryHints instance that will contain only those hints applicable for count queries.\n\tQueryHints forCounts();\n\t// Performs the given action for each element of this query hints object until all hints have been processed or the action throws an exception.\n\tvoid forEach(BiConsumer<String,Object> action);\n}", "des": "Null object implementation of QueryHints."}
{"index": 15027, "repo": "spring-data-jpa-3.1.2", "code": "@FunctionalInterface public interface QueryRewriter {\n\t// Rewrite the assembled query with the given Pageable.\n\tdefault String rewrite(String query, Pageable pageRequest);\n\t// Rewrite the assembled query with the given Sort.\n\tString rewrite(String query, Sort sort);\n}", "des": "Callback to rewrite a query and apply sorting and pagination settings that cannot be applied based on a regularly detectable scheme."}
{"index": 15028, "repo": "spring-data-jpa-3.1.2", "code": "public static enum QueryRewriter.IdentityQueryRewriter extends Enum<QueryRewriter.IdentityQueryRewriter> implements QueryRewriter {\n\t// Rewrite the assembled query with the given Sort.\n\tString rewrite(String query, Sort sort);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic QueryRewriter.IdentityQueryRewriter valueOf(String name);\n}", "des": "A QueryRewriter that doesn't change the query."}
{"index": 15029, "repo": "spring-data-jpa-3.1.2", "code": "public interface QueryRewriterProvider {\n\t// Obtain an instance of QueryRewriter for a JpaQueryMethod.\n\tQueryRewriter getQueryRewriter(JpaQueryMethod method);\n\t// Return a simple QueryRewriterProvider that uses BeanUtils.instantiateClass(Class) to obtain a QueryRewriter instance.\n\tstatic QueryRewriterProvider simple();\n}", "des": "Provide a QueryRewriter based upon the JpaQueryMethod."}
{"index": 15030, "repo": "spring-data-jpa-3.1.2", "code": "public abstract class QueryUtils extends Object {\n\t// Creates a where-clause referencing the given entities and appends it to the given query string.\n\tstatic <T> jakarta.persistence.Query applyAndBind(String queryString, Iterable<T> entities, jakarta.persistence.EntityManager entityManager);\n\t// Adds order by clause to the JPQL query.\n\tstatic String applySorting(String query, Sort sort);\n\t// Adds order by clause to the JPQL query.\n\tstatic String applySorting(String query, Sort sort, String alias);\n}", "des": "Simple utility class to create JPA queries using the default implementation of a custom parser."}
{"index": 15031, "repo": "spring-data-jpa-3.1.2", "code": "@Repository @Transactional(readOnly=true) public class SimpleJpaRepository<T,ID> extends Object implements JpaRepositoryImplementation<T,ID> {\n\tlong count();\n\t<S extends T>long count(Example<S> example);\n\t// Returns the number of instances that the given Specification will return.\n\tlong count(Specification<T> spec);\n\t// Deletes by the Specification and returns the number of rows deleted.\n\tlong delete(Specification<T> spec);\n\tvoid delete(T entity);\n\tvoid deleteAll();\n}", "des": "Default implementation of the CrudRepository interface."}
{"index": 15032, "repo": "spring-data-jpa-3.1.2", "code": "public interface Specification<T> extends Serializable {\n\t// Applies an AND operation to all the given Specifications.\n\tstatic <T> Specification<T> allOf(Iterable<Specification<T>> specifications);\n\tstatic <T> Specification<T> allOf(Specification<T>... specifications);\n\t// ANDs the given Specification to the current one.\n\tdefault Specification<T> and(Specification<T> other);\n}", "des": "Specification in the sense of Domain Driven Design."}
{"index": 15033, "repo": "spring-integration-http-6.1.2", "code": "public abstract class BaseHttpInboundEndpointSpec<S extends BaseHttpInboundEndpointSpec<S,E>,E extends HttpRequestHandlingEndpointSupport> extends HttpInboundEndpointSupportSpec<S,E> {\n\t// Flag which determines if the default converters should be available after custom converters.\n\tS mergeWithDefaultConverters(boolean mergeWithDefaultConverters);\n\t// Set the message body converters to use.\n\tS messageConverters(org.springframework.http.converter.HttpMessageConverter<?>... messageConverters);\n}", "des": "A base MessagingGatewaySpec for the HttpRequestHandlingEndpointSupport implementations."}
{"index": 15034, "repo": "spring-integration-http-6.1.2", "code": "public abstract class BaseHttpMessageHandlerSpec<S extends BaseHttpMessageHandlerSpec<S,E>,E extends AbstractHttpRequestExecutingMessageHandler> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E> implements org.springframework.integration.dsl.ComponentsRegistration {\n\t// Specify the charset name to use for converting String-typed payloads to bytes.\n\tS charset(String charset);\n}", "des": "The base MessageHandlerSpec for AbstractHttpRequestExecutingMessageHandlers."}
{"index": 15035, "repo": "spring-integration-http-6.1.2", "code": "public class FileCopyingMultipartFileReader extends Object implements MultipartFileReader<org.springframework.web.multipart.MultipartFile> {\n\t// Read MultipartFile content.\n\torg.springframework.web.multipart.MultipartFile readMultipartFile(org.springframework.web.multipart.MultipartFile multipartFile);\n\t// Specify the prefix to use for temporary files.\n\tvoid setPrefix(String prefix);\n\t// Specify the suffix to use for temporary files.\n\tvoid setSuffix(String suffix);\n}", "des": "MultipartFileReader implementation that copies the MultipartFile's content to a new temporary File in the specified directory."}
{"index": 15036, "repo": "spring-integration-http-6.1.2", "code": "public final class Http extends Object {\n\t// Create an HttpRequestHandlerEndpointSpec builder for one-way adapter based on the provided path array for mapping.\n\tstatic HttpRequestHandlerEndpointSpec inboundChannelAdapter(String... path);\n\t// Create an HttpControllerEndpointSpec builder for one-way adapter based on the provided MVC viewName and path array for mapping.\n\tstatic HttpControllerEndpointSpec inboundControllerAdapter(String viewName, String... path);\n}", "des": "The HTTP components Factory."}
{"index": 15037, "repo": "spring-integration-http-6.1.2", "code": "public class HttpControllerEndpointSpec extends BaseHttpInboundEndpointSpec<HttpControllerEndpointSpec,HttpRequestHandlingController> {\n\t// The error code to use to signal an error in the message handling.\n\tHttpControllerEndpointSpec errorCode(String errorCode);\n\t// The key used to expose Errors in the core, in the case that message handling fails.\n\tHttpControllerEndpointSpec errorsKey(String errorsKey);\n}", "des": "The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingController."}
{"index": 15038, "repo": "spring-integration-http-6.1.2", "code": "public static final class HttpInboundEndpointSupportSpec.CrossOriginSpec extends Object {\n\t// Whether the browser should include any cookies associated with the domain of the request being annotated.\n\tHttpInboundEndpointSupportSpec.CrossOriginSpec allowCredentials(Boolean allowCredentials);\n\t// List of request headers that can be used during the actual request.\n\tHttpInboundEndpointSupportSpec.CrossOriginSpec allowedHeaders(String... allowedHeaders);\n}", "des": "A fluent API for the CrossOrigin."}
{"index": 15039, "repo": "spring-integration-http-6.1.2", "code": "public static final class HttpInboundEndpointSupportSpec.RequestMappingSpec extends Object {\n\t// The consumable media types of the mapped request, narrowing the primary mapping.\n\tHttpInboundEndpointSupportSpec.RequestMappingSpec consumes(String... consumes);\n\t// The headers of the mapped request, narrowing the primary mapping.\n\tHttpInboundEndpointSupportSpec.RequestMappingSpec headers(String... headers);\n}", "des": "A fluent API for the RequestMapping."}
{"index": 15040, "repo": "spring-integration-http-6.1.2", "code": "public class HttpMessageHandlerSpec extends BaseHttpMessageHandlerSpec<HttpMessageHandlerSpec,HttpRequestExecutingMessageHandler> {\n\t// Set the ResponseErrorHandler for the underlying RestTemplate.\n\tHttpMessageHandlerSpec errorHandler(org.springframework.web.client.ResponseErrorHandler errorHandler);\n\tprotected boolean isClientSet();\n}", "des": "The BaseHttpMessageHandlerSpec implementation for the HttpRequestExecutingMessageHandler."}
{"index": 15041, "repo": "spring-integration-http-6.1.2", "code": "public class HttpRequestHandlingController extends HttpRequestHandlingEndpointSupport implements org.springframework.web.servlet.mvc.Controller {\n\t// Handles the HTTP request by generating a Message and sending it to the request channel.\n\tfinal org.springframework.web.servlet.ModelAndView handleRequest(jakarta.servlet.http.HttpServletRequest servletRequest, jakarta.servlet.http.HttpServletResponse servletResponse);\n}", "des": "Inbound HTTP endpoint that implements Spring's Controller interface to be used with a DispatcherServlet front controller."}
{"index": 15042, "repo": "spring-integration-http-6.1.2", "code": "public class HttpRequestHandlingMessagingGateway extends HttpRequestHandlingEndpointSupport implements org.springframework.web.HttpRequestHandler {\n\t// Handles the HTTP request by generating a Message and sending it to the request channel.\n\tfinal void handleRequest(jakarta.servlet.http.HttpServletRequest servletRequest, jakarta.servlet.http.HttpServletResponse servletResponse);\n}", "des": "Inbound Messaging Gateway that handles HTTP Requests."}
{"index": 15043, "repo": "spring-integration-http-6.1.2", "code": "public class SimpleMultipartFileReader extends Object implements MultipartFileReader<Object> {\n\t// Read MultipartFile content.\n\tObject readMultipartFile(org.springframework.web.multipart.MultipartFile multipartFile);\n\t// Specify the default charset name to use when converting multipart file content into Strings if the multipart itself does not provide a charset.\n\tvoid setDefaultMultipartCharset(String defaultCharset);\n}", "des": "MultipartFileReader implementation that does not maintain metadata from the original MultipartFile instance."}
{"index": 15044, "repo": "spring-integration-ftp-6.1.2", "code": "public abstract class AbstractFtpSessionFactory<T extends org.apache.commons.net.ftp.FTPClient> extends Object implements org.springframework.integration.file.remote.session.SessionFactory<org.apache.commons.net.ftp.FTPFile> {\n\tprotected abstract T createClientInstance();\n\tFtpSession getSession();\n\t// Will handle additional initialization after client.connect() method was invoked, but before any action on the client has been taken.\n\tprotected void postProcessClientAfterConnect(T t);\n}", "des": "Base class for FTP SessionFactory implementations."}
{"index": 15045, "repo": "spring-integration-ftp-6.1.2", "code": "public class DefaultFtpsSessionFactory extends AbstractFtpSessionFactory<org.apache.commons.net.ftp.FTPSClient> {\n\tprotected org.apache.commons.net.ftp.FTPSClient createClientInstance();\n\t// Will handle additional initialization after client.connect() method was invoked, but before any action on the client has been taken.\n\tprotected void postProcessClientAfterConnect(org.apache.commons.net.ftp.FTPSClient ftpsClient);\n}", "des": "SessionFactory for FTPS."}
{"index": 15046, "repo": "spring-integration-ftp-6.1.2", "code": "public final class Ftp extends Object {\n\t// A FtpInboundChannelAdapterSpec factory for an inbound channel adapter spec.\n\tstatic FtpInboundChannelAdapterSpec inboundAdapter(org.springframework.integration.file.remote.session.SessionFactory<org.apache.commons.net.ftp.FTPFile> sessionFactory);\n}", "des": "The factory for FTP components."}
{"index": 15047, "repo": "spring-integration-ftp-6.1.2", "code": "public class FtpInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpInboundChannelAdapterSpec,FtpInboundFileSynchronizingMessageSource> {\n\t// Specify a simple pattern to match remote files.\n\tFtpInboundChannelAdapterSpec patternFilter(String pattern);\n\t// Specify a regular expression to match remote files.\n\tFtpInboundChannelAdapterSpec regexFilter(String regex);\n}", "des": "A RemoteFileInboundChannelAdapterSpec for an FtpInboundFileSynchronizingMessageSource."}
{"index": 15048, "repo": "spring-integration-ftp-6.1.2", "code": "public class FtpOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<org.apache.commons.net.ftp.FTPFile,FtpOutboundGatewaySpec> {\n\tFtpOutboundGatewaySpec patternFileNameFilter(String pattern);\n\tFtpOutboundGatewaySpec regexFileNameFilter(String regex);\n\t// Specify a SpEL Expression to evaluate FTP client working directory against request message.\n\tFtpOutboundGatewaySpec workingDirExpression(String workingDirExpression);\n}", "des": "A RemoteFileOutboundGatewaySpec for FTP."}
{"index": 15049, "repo": "spring-integration-ftp-6.1.2", "code": "public static enum FtpRemoteFileTemplate.ExistsMode extends Enum<FtpRemoteFileTemplate.ExistsMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic FtpRemoteFileTemplate.ExistsMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic FtpRemoteFileTemplate.ExistsMode[] values();\n}", "des": "The FtpRemoteFileTemplate.exists(String) operation mode."}
{"index": 15050, "repo": "spring-integration-ftp-6.1.2", "code": "public class FtpStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpStreamingInboundChannelAdapterSpec,FtpStreamingMessageSource> {\n\t// Specify a simple pattern to match remote files (e.g.\n\tFtpStreamingInboundChannelAdapterSpec patternFilter(String pattern);\n\t// Specify a regular expression to match remote files (e.g.\n\tFtpStreamingInboundChannelAdapterSpec regexFilter(String regex);\n}", "des": "A RemoteFileStreamingInboundChannelAdapterSpec for a FtpStreamingMessageSource."}
{"index": 15051, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class AbstractCursorItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean {\n\t// Assert that mandatory properties are set.\n\tvoid afterPropertiesSet();\n\t// Prepare the given JDBC Statement (or PreparedStatement or CallableStatement), applying statement settings such as fetch size, max rows, and query timeout.\n\tprotected void applyStatementSettings(PreparedStatement stmt);\n}", "des": "Abstract base class for any simple item reader that opens a database cursor and continually retrieves the next row in the ResultSet."}
{"index": 15052, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class AbstractFileItemWriter<T> extends AbstractItemStreamItemWriter<T> implements ResourceAwareItemWriterItemStream<T>, org.springframework.beans.factory.InitializingBean {\n\t// No-op.\n\tvoid close();\n\t// Write out a string of items followed by a \"new line\", where the format of the new line separator is determined by the underlying operating system.\n\tprotected abstract String doWrite(Chunk<? extends T> items);\n\tprotected AbstractFileItemWriter<T>.OutputState getOutputState();\n}", "des": "Base class for item writers that write data to a file or stream."}
{"index": 15053, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class AbstractItemCountingItemStreamItemReader<T> extends AbstractItemStreamItemReader<T> {\n\t// No-op.\n\tvoid close();\n\t// Close the resources opened in doOpen().\n\tprotected abstract void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected abstract void doOpen();\n\t// Read next item from input.\n\tprotected abstract T doRead();\n\tprotected int getCurrentItemCount();\n\t// The flag that determines whether to save internal state for restarts.\n\tboolean isSaveState();\n}", "des": "Abstract superclass for ItemReaders that supports restart by storing item count in the ExecutionContext (therefore requires item ordering to be preserved between runs)."}
{"index": 15054, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class AbstractJpaQueryProvider extends Object implements JpaQueryProvider, org.springframework.beans.factory.InitializingBean {\n\t// Getter for EntityManager\n\tprotected jakarta.persistence.EntityManager getEntityManager();\n\t// Public setter to override the entityManager that was created by this HibernateQueryProvider.\n\tvoid setEntityManager(jakarta.persistence.EntityManager entityManager);\n}", "des": "Abstract JPA Query Provider to serve as a base class for all JPA Query providers."}
{"index": 15055, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class AbstractLineTokenizer extends Object implements LineTokenizer {\n\tprotected abstract List<String> doTokenize(String line);\n\tboolean hasNames();\n\t// Provides access to the strict flag for subclasses if needed.\n\tprotected boolean isStrict();\n\t// Factory for FieldSet instances.\n\tvoid setFieldSetFactory(FieldSetFactory fieldSetFactory);\n\t// Setter for column names.\n\tvoid setNames(String... names);\n\t// Public setter for the strict flag.\n\tvoid setStrict(boolean strict);\n}", "des": "Abstract class handling common concerns of various LineTokenizer implementations such as dealing with names and actual construction of FieldSet"}
{"index": 15056, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class AbstractMethodInvokingDelegator<T> extends Object implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Return arguments.\n\tprotected Object[] getArguments();\n\t// Invoker the target method with arguments set by setArguments(Object[]).\n\tprotected T invokeDelegateMethod();\n\t// Invokes the target method with given argument.\n\tprotected T invokeDelegateMethodWithArgument(Object object);\n}", "des": "Superclass for delegating classes which dynamically call a custom method of injected object."}
{"index": 15057, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class AbstractPaginatedDataItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> {\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected void doOpen();\n\t// Method this ItemStreamReader delegates to for the actual work of reading a page.\n\tprotected abstract Iterator<T> doPageRead();\n\t// Read next item from input.\n\tprotected T doRead();\n}", "des": "A base class that handles basic reading logic based on the paginated semantics of Spring Data's paginated facilities."}
{"index": 15058, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class AbstractPagingItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean {\n\t// Check mandatory properties.\n\tvoid afterPropertiesSet();\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected void doOpen();\n\t// Read next item from input.\n\tprotected T doRead();\n\tprotected abstract void doReadPage();\n}", "des": "Abstract ItemStreamReader for to extend when reading database records in a paging fashion."}
{"index": 15059, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class AbstractSqlPagingQueryProvider extends Object implements PagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tabstract String generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tabstract String generateRemainingPagesQuery(int pageSize);\n\tprotected String getFromClause();\n\t// The getter for the group by clause\n\tString getGroupClause();\n}", "des": "Abstract SQL Paging Query Provider to serve as a base class for all provided SQL paging query providers."}
{"index": 15060, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class AmqpItemReader<T> extends Object implements ItemReader<T> {\n\t// Reads a piece of input data and advance to the next one.\n\tT read();\n\t// Establish the itemType for the reader.\n\tvoid setItemType(Class<? extends T> itemType);\n}", "des": "AMQP ItemReader implementation using an AmqpTemplate to receive and/or convert messages."}
{"index": 15061, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class AmqpItemReaderBuilder<T> extends Object {\n\t// Establish the amqpTemplate to be used by the AmqpItemReader.\n\tAmqpItemReaderBuilder<T> amqpTemplate(org.springframework.amqp.core.AmqpTemplate amqpTemplate);\n\t// Validates and builds a AmqpItemReader.\n\tAmqpItemReader<T> build();\n\t// Establish the itemType for the reader.\n\tAmqpItemReaderBuilder<T> itemType(Class<? extends T> itemType);\n}", "des": "A builder implementation for the AmqpItemReader"}
{"index": 15062, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class AmqpItemWriterBuilder<T> extends Object {\n\t// Establish the amqpTemplate to be used by the AmqpItemWriter.\n\tAmqpItemWriterBuilder<T> amqpTemplate(org.springframework.amqp.core.AmqpTemplate amqpTemplate);\n\t// Validates and builds a AmqpItemWriter.\n\tAmqpItemWriter<T> build();\n}", "des": "A builder implementation for the AmqpItemWriter"}
{"index": 15063, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class AnnotationMethodResolver extends Object implements MethodResolver {\n\t// Find a single Method on the given Class that contains the annotation type for which this resolver is searching.\n\tMethod findMethod(Class<?> clazz);\n\t// Find a single Method on the Class of the given candidate object that contains the annotation type for which this resolver is searching.\n\tMethod findMethod(Object candidate);\n}", "des": "MethodResolver implementation that finds a single Method on the given Class that contains the specified annotation type."}
{"index": 15064, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class AvroItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> {\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected void doOpen();\n\t// Read next item from input.\n\tprotected T doRead();\n\t// Disable or enable reading an embedded Avro schema.\n\tvoid setEmbeddedSchema(boolean embeddedSchema);\n}", "des": "An ItemReader that deserializes data from a Resource containing serialized Avro objects."}
{"index": 15065, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class AvroItemReaderBuilder<T> extends Object {\n\t// Build an instance of AvroItemReader.\n\tAvroItemReader<T> build();\n\t// Index for the current item.\n\tAvroItemReaderBuilder<T> currentItemCount(int currentItemCount);\n\t// Disable or enable reading an embedded Avro schema.\n\tAvroItemReaderBuilder<T> embeddedSchema(boolean embeddedSchema);\n\t// Configure the max number of items to be read.\n\tAvroItemReaderBuilder<T> maxItemCount(int maxItemCount);\n}", "des": "A builder implementation for the AvroItemReader."}
{"index": 15066, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class AvroItemWriter<T> extends AbstractItemStreamItemWriter<T> {\n\t// No-op.\n\tvoid close();\n\t// No-op.\n\tvoid open(ExecutionContext executionContext);\n\t// Process the supplied data element.\n\tvoid write(Chunk<? extends T> items);\n}", "des": "An ItemWriter that serializes data to an WritableResource using Avro."}
{"index": 15067, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class AvroItemWriterBuilder<T> extends Object {\n\t// Build an instance of AvroItemWriter.\n\tAvroItemWriter<T> build();\n\t// The name used to calculate the key within the ExecutionContext.\n\tAvroItemWriterBuilder<T> name(String name);\n\tAvroItemWriterBuilder<T> resource(org.springframework.core.io.WritableResource resource);\n\tAvroItemWriterBuilder<T> schema(String schemaString);\n\tAvroItemWriterBuilder<T> schema(org.springframework.core.io.Resource schema);\n\tAvroItemWriterBuilder<T> type(Class<T> type);\n}", "des": "A builder implementation for the AvroItemWriter."}
{"index": 15068, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class BeanWrapperFieldSetMapper<T> extends DefaultPropertyEditorRegistrar implements FieldSetMapper<T>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean {\n\t// Check that precisely one of type or prototype bean name is specified.\n\tvoid afterPropertiesSet();\n\t// Create a binder for the target object.\n\tprotected org.springframework.validation.DataBinder createBinder(Object target);\n}", "des": "FieldSetMapper implementation based on bean property paths."}
{"index": 15069, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class Chunk<W> extends Object implements Iterable<W>, Serializable {\n\t// Add the item to the chunk.\n\tvoid add(W item);\n\t// Add all items to the chunk.\n\tvoid addAll(List<W> items);\n\t// Clear the items down to signal that we are done.\n\tvoid clear();\n\t// Clear only the skips list.\n\tvoid clearSkips();\n\tboolean equals(Object obj);\n\tList<Exception> getErrors();\n\tList<W> getItems();\n\tList<SkipWrapper<W>> getSkips();\n\tObject getUserData();\n}", "des": "Encapsulation of a list of items to be processed and possibly a list of failed items to be skipped."}
{"index": 15070, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class ClassifierCompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O> {\n\t// Delegates to injected ItemProcessor instances according to the classification by the Classifier.\n\tO process(I item);\n\t// Establishes the classifier that will determine which ItemProcessor to use.\n\tvoid setClassifier(org.springframework.classify.Classifier<? super I,ItemProcessor<?,? extends O>> classifier);\n}", "des": "Calls one of a collection of ItemProcessors, based on a router pattern implemented through the provided Classifier."}
{"index": 15071, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class ClassifierCompositeItemProcessorBuilder<I,O> extends Object {\n\t// Returns a fully constructed ClassifierCompositeItemProcessor.\n\tClassifierCompositeItemProcessor<I,O> build();\n\t// Establishes the classifier that will determine which ItemProcessor to use.\n\tClassifierCompositeItemProcessorBuilder<I,O> classifier(org.springframework.classify.Classifier<? super I,ItemProcessor<?,? extends O>> classifier);\n}", "des": "Creates a fully qualified ClassifierCompositeItemProcessor."}
{"index": 15072, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class ClassifierCompositeItemWriterBuilder<T> extends Object {\n\t// Returns a fully constructed ClassifierCompositeItemWriter.\n\tClassifierCompositeItemWriter<T> build();\n\t// Establish the classifier to be used for the selection of which ItemWriter to use.\n\tClassifierCompositeItemWriterBuilder<T> classifier(org.springframework.classify.Classifier<T,ItemWriter<? super T>> classifier);\n}", "des": "Creates a fully qualified ClassifierCompositeItemWriter."}
{"index": 15073, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface CompletionPolicy {\n\t// Allow policy to signal completion according to internal state, without having to wait for the callback to complete.\n\tboolean isComplete(RepeatContext context);\n\t// Determine whether a batch is complete given the latest result from the callback.\n\tboolean isComplete(RepeatContext context, RepeatStatus result);\n\t// Create a new context for the execution of a batch.\n\tRepeatContext start(RepeatContext parent);\n}", "des": "Interface for batch completion policies, to enable batch operations to strategise normal completion conditions."}
{"index": 15074, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class CompletionPolicySupport extends Object implements CompletionPolicy {\n\t// Always true.\n\tboolean isComplete(RepeatContext context);\n\t// If exit status is not continuable return true, otherwise delegate to isComplete(RepeatContext).\n\tboolean isComplete(RepeatContext context, RepeatStatus result);\n\t// Build a new RepeatContextSupport and return it.\n\tRepeatContext start(RepeatContext context);\n\t// Increment the context so the counter is up to date.\n\tvoid update(RepeatContext context);\n}", "des": "Very simple base class for CompletionPolicy implementations."}
{"index": 15075, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class CompositeCompletionPolicy extends Object implements CompletionPolicy {\n\t// This policy is complete if any of the composed policies is complete.\n\tboolean isComplete(RepeatContext context);\n\t// This policy is complete if any of the composed policies is complete.\n\tboolean isComplete(RepeatContext context, RepeatStatus result);\n\t// Setter for the policies.\n\tvoid setPolicies(CompletionPolicy[] policies);\n}", "des": "Composite policy that loops through a list of delegate policies and answers calls by a consensus."}
{"index": 15076, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class CompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Process the provided item, returning a potentially modified or new item for continued processing.\n\tO process(I item);\n\t// Establishes the ItemProcessor delegates that will work on the item to be processed.\n\tvoid setDelegates(List<? extends ItemProcessor<?,?>> delegates);\n}", "des": "Composite ItemProcessor that passes the item through a sequence of injected ItemTransformers (return value of previous transformation is the entry value of the next). Note the user is responsible for injecting a chain of ItemProcessors that conforms to declared input and output types."}
{"index": 15077, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class CompositeItemProcessorBuilder<I,O> extends Object {\n\t// Returns a fully constructed CompositeItemProcessor.\n\tCompositeItemProcessor<I,O> build();\n\t// Establishes the ItemProcessor delegates that will work on the item to be processed.\n\tCompositeItemProcessorBuilder<I,O> delegates(List<? extends ItemProcessor<?,?>> delegates);\n\t// Establishes the ItemProcessor delegates that will work on the item to be processed.\n\tCompositeItemProcessorBuilder<I,O> delegates(ItemProcessor<?,?>... delegates);\n}", "des": "Creates a fully qualified CompositeItemProcessorBuilder."}
{"index": 15078, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class CompositeItemStream extends Object implements ItemStream {\n\t// Broadcast the call to close.\n\tvoid close();\n\t// Broadcast the call to open.\n\tvoid open(ExecutionContext executionContext);\n\t// Register a ItemStream as one of the interesting providers under the provided key.\n\tvoid register(ItemStream stream);\n\t// Public setter for the ItemStreams.\n\tvoid setStreams(List<ItemStream> streams);\n\t// Public setter for the ItemStreams.\n\tvoid setStreams(ItemStream[] streams);\n}", "des": "Simple ItemStream that delegates to a list of other streams."}
{"index": 15079, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class CompositeItemWriter<T> extends Object implements ItemStreamWriter<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// If any resources are needed for the stream to operate they need to be destroyed here.\n\tvoid close();\n\t// Open the stream for the provided ExecutionContext.\n\tvoid open(ExecutionContext executionContext);\n\t// The list of item writers to use as delegates.\n\tvoid setDelegates(List<ItemWriter<? super T>> delegates);\n}", "des": "Calls a collection of ItemWriters in fixed-order sequence. The implementation is thread-safe if all delegates are thread-safe."}
{"index": 15080, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class CompositeItemWriterBuilder<T> extends Object {\n\t// Returns a fully constructed CompositeItemWriter.\n\tCompositeItemWriter<T> build();\n\t// The list of item writers to use as delegates.\n\tCompositeItemWriterBuilder<T> delegates(List<ItemWriter<? super T>> delegates);\n\t// The item writers to use as delegates.\n\tfinal CompositeItemWriterBuilder<T> delegates(ItemWriter<? super T>... delegates);\n}", "des": "Creates a fully qualified CompositeItemWriter."}
{"index": 15081, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class CompositeRepeatListener extends Object implements RepeatListener {\n\t// Called by the framework after each item has been processed, unless the item processing results in an exception.\n\tvoid after(RepeatContext context, RepeatStatus result);\n\t// Called by the framework before each batch item.\n\tvoid before(RepeatContext context);\n\t// Called once at the end of a complete batch, after normal or abnormal completion (i.e.\n\tvoid close(RepeatContext context);\n}", "des": "Allows a user to register one or more RepeatListeners to be notified on batch events."}
{"index": 15082, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class CountingCompletionPolicy extends DefaultResultCompletionPolicy {\n\t// Extension point for subclasses.\n\tprotected int doUpdate(RepeatContext context);\n\t// Extension point for subclasses.\n\tprotected abstract int getCount(RepeatContext context);\n\t// Always false.\n\tfinal boolean isComplete(RepeatContext context);\n\t// Setter for maximum value of count before termination.\n\tvoid setMaxCount(int maxCount);\n}", "des": "Abstract base class for policies that need to count the number of occurrences of some event (e.g."}
{"index": 15083, "repo": "spring-batch-infrastructure-5.0.2", "code": "public enum DatabaseType extends Enum<DatabaseType> {\n\t// Convenience method that pulls a database product name from the DataSource's metadata.\n\tstatic DatabaseType fromMetaData(DataSource dataSource);\n\t// Static method to obtain a DatabaseType from the provided product name.\n\tstatic DatabaseType fromProductName(String productName);\n\tString getProductName();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DatabaseType valueOf(String name);\n}", "des": "Enum representing a database type, such as DB2 or oracle."}
{"index": 15084, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface DataFieldMaxValueIncrementerFactory {\n\t// Return the DataFieldMaxValueIncrementer for the provided database type.\n\torg.springframework.jdbc.support.incrementer.DataFieldMaxValueIncrementer getIncrementer(String databaseType, String incrementerName);\n\t// Returns the list of supported database incrementer types\n\tString[] getSupportedIncrementerTypes();\n}", "des": "Factory for creating DataFieldMaxValueIncrementer implementations based upon a provided string."}
{"index": 15085, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class Db2PagingQueryProvider extends SqlWindowingPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n\tprotected Object getSubQueryAlias();\n}", "des": "DB2 implementation of a PagingQueryProvider using database specific features."}
{"index": 15086, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class DefaultDataFieldMaxValueIncrementerFactory extends Object implements DataFieldMaxValueIncrementerFactory {\n\t// Return the DataFieldMaxValueIncrementer for the provided database type.\n\torg.springframework.jdbc.support.incrementer.DataFieldMaxValueIncrementer getIncrementer(String incrementerType, String incrementerName);\n\t// Returns the list of supported database incrementer types\n\tString[] getSupportedIncrementerTypes();\n}", "des": "Default implementation of the DataFieldMaxValueIncrementerFactory interface."}
{"index": 15087, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class DefaultFieldSet extends Object implements FieldSet {\n\tboolean equals(Object object);\n\t// Return the number of fields in this 'FieldSet'.\n\tint getFieldCount();\n\t// Accessor for the names of the fields.\n\tString[] getNames();\n\t// Construct name-value pairs from the field names and string values.\n\tProperties getProperties();\n\tString[] getValues();\n\t// Check if there are names defined for the fields.\n\tboolean hasNames();\n}", "des": "Default implementation of FieldSet using Java using Java primitive and standard types and utilities."}
{"index": 15088, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class DefaultFieldSetFactory extends Object implements FieldSetFactory {\n\t// Create a FieldSet with anonymous tokens.\n\tFieldSet create(String[] values);\n\t// Create a FieldSet with named tokens.\n\tFieldSet create(String[] values, String[] names);\n\t// The DateFormat to use for parsing numbers.\n\tvoid setDateFormat(DateFormat dateFormat);\n\t// The NumberFormat to use for parsing numbers.\n\tvoid setNumberFormat(NumberFormat numberFormat);\n}", "des": "Default implementation of FieldSetFactory with no special knowledge of the FieldSet required."}
{"index": 15089, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class DefaultFragmentEventReader extends Object implements FragmentEventReader {\n\tvoid close();\n\tString getElementText();\n\tObject getProperty(String name);\n\tboolean hasNext();\n\t// Finishes reading the fragment in case the fragment was processed without being read until the end.\n\tvoid markFragmentProcessed();\n\t// Tells the event reader its cursor position is exactly before the fragment.\n\tvoid markStartFragment();\n\tObject next();\n\tXMLEvent nextEvent();\n\tXMLEvent nextTag();\n\tXMLEvent peek();\n}", "des": "Default implementation of FragmentEventReader"}
{"index": 15090, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class DefaultMailErrorHandler extends Object implements MailErrorHandler {\n\t// Wraps the input exception with a runtime MailException.\n\tvoid handle(org.springframework.mail.MailMessage message, Exception exception);\n\t// The limit for the size of message that will be copied to the exception message.\n\tvoid setMaxMessageLength(int maxMessageLength);\n}", "des": "This MailErrorHandler implementation simply rethrows the exception it receives."}
{"index": 15091, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class DefaultPropertyEditorRegistrar extends Object implements org.springframework.beans.PropertyEditorRegistrar {\n\t// Register the custom editors with the given registry.\n\tvoid registerCustomEditors(org.springframework.beans.PropertyEditorRegistry registry);\n\t// Specify the custom editors to register.\n\tvoid setCustomEditors(Map<? extends Object,? extends PropertyEditor> customEditors);\n}", "des": "A re-usable PropertyEditorRegistrar that can be used wherever one needs to register custom PropertyEditor instances with a PropertyEditorRegistry (like a bean wrapper, or a type converter)."}
{"index": 15092, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class DefaultRecordSeparatorPolicy extends SimpleRecordSeparatorPolicy {\n\t// Return true if the line does not have unterminated quotes (delimited by \"), and does not end with a continuation marker ('\\').\n\tboolean isEndOfRecord(String line);\n\t// If we are in an unterminated quote, add a line separator.\n\tString preProcess(String line);\n\t// Public setter for the continuation.\n\tvoid setContinuation(String continuation);\n}", "des": "A RecordSeparatorPolicy that treats all lines as record endings, as long as they do not have unterminated quotes, and do not end in a continuation marker."}
{"index": 15093, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class DefaultResultCompletionPolicy extends CompletionPolicySupport {\n\t// Always false.\n\tboolean isComplete(RepeatContext context);\n\t// True if the result is null, or a RepeatStatus indicating completion.\n\tboolean isComplete(RepeatContext context, RepeatStatus result);\n}", "des": "Very simple CompletionPolicy that bases its decision on the result of a batch operation."}
{"index": 15094, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class DelimitedLineAggregator<T> extends ExtractorLineAggregator<T> {\n\t// Aggregate provided fields into single String.\n\tString doAggregate(Object[] fields);\n\t// Public setter for the delimiter.\n\tvoid setDelimiter(String delimiter);\n}", "des": "A LineAggregator implementation that converts an object into a delimited list of strings."}
{"index": 15095, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class DelimitedLineTokenizer extends AbstractLineTokenizer implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Yields the tokens resulting from the splitting of the supplied line.\n\tprotected List<String> doTokenize(String line);\n\t// Is the supplied character a quote character?\n\tprotected boolean isQuoteCharacter(char c);\n\t// Setter for the delimiter character.\n\tvoid setDelimiter(String delimiter);\n}", "des": "A LineTokenizer implementation that splits the input String on a configurable delimiter."}
{"index": 15096, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class ExecutionContext extends Object implements Serializable {\n\t// Clears the dirty flag.\n\tvoid clearDirtyFlag();\n\t// Indicates whether or not a key is represented in this context.\n\tboolean containsKey(String key);\n\t// Indicates whether or not a value is represented in this context.\n\tboolean containsValue(Object value);\n\t// Returns the entry set containing the contents of this context.\n\tSet<Map.Entry<String,Object>> entrySet();\n\tboolean equals(Object obj);\n}", "des": "Object representing a context for an ItemStream."}
{"index": 15097, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class ExtractorLineAggregator<T> extends Object implements LineAggregator<T> {\n\t// Extract fields from the given item using the FieldExtractor and then aggregate them.\n\tString aggregate(T item);\n\t// Aggregate provided fields into single String.\n\tprotected abstract String doAggregate(Object[] fields);\n\t// Public setter for the field extractor responsible for splitting an input object up into an array of objects.\n\tvoid setFieldExtractor(FieldExtractor<T> fieldExtractor);\n}", "des": "An abstract LineAggregator implementation that utilizes a FieldExtractor to convert the incoming object to an array of its parts."}
{"index": 15098, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface FieldSet {\n\t// Return the number of fields in this 'FieldSet'.\n\tint getFieldCount();\n\t// Accessor for the names of the fields.\n\tString[] getNames();\n\t// Construct name-value pairs from the field names and string values.\n\tProperties getProperties();\n\tString[] getValues();\n\t// Check if there are names defined for the fields.\n\tboolean hasNames();\n\t// Read the BigDecimal value at index 'index'.\n\tBigDecimal readBigDecimal(int index);\n}", "des": "Interface used by flat file input sources to encapsulate concerns of converting an array of Strings to Java native types."}
{"index": 15099, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface FieldSetFactory {\n\t// Create a FieldSet with anonymous tokens.\n\tFieldSet create(String[] values);\n\t// Create a FieldSet with named tokens.\n\tFieldSet create(String[] values, String[] names);\n}", "des": "Factory interface for creating FieldSet instances."}
{"index": 15100, "repo": "spring-batch-infrastructure-5.0.2", "code": "public final class FileUtils extends Object {\n\t// Create a new file if it doesn't already exist.\n\tstatic boolean createNewFile(File file);\n\t// Set up output file for batch processing.\n\tstatic void setUpOutputFile(File file, boolean restarted, boolean append, boolean overwriteOutputFile);\n}", "des": "Utility methods for files used in batch processing."}
{"index": 15101, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class FixedLengthTokenizer extends AbstractLineTokenizer {\n\t// Yields the tokens resulting from the splitting of the supplied line.\n\tprotected List<String> doTokenize(String line);\n\t// Set the column ranges.\n\tvoid setColumns(Range... ranges);\n}", "des": "Tokenizer used to process data obtained from files with fixed-length format."}
{"index": 15102, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class FlatFileItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected void doOpen();\n\t// Read next item from input.\n\tprotected T doRead();\n\tprotected boolean isComment(String line);\n}", "des": "Restartable ItemReader that reads lines from input FlatFileItemReader.setResource(Resource)."}
{"index": 15103, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class FlatFileItemReaderBuilder<T> extends Object {\n\t// Add a string to the list of Strings that indicate commented lines.\n\tFlatFileItemReaderBuilder<T> addComment(String comment);\n\t// Configures the BeanFactory used to create the beans that are returned as items.\n\tFlatFileItemReaderBuilder<T> beanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}", "des": "A builder implementation for the FlatFileItemReader."}
{"index": 15104, "repo": "spring-batch-infrastructure-5.0.2", "code": "public static class FlatFileItemReaderBuilder.DelimitedBuilder<T> extends Object {\n\t// Add an index to the list of fields to be included from the file\n\tFlatFileItemReaderBuilder.DelimitedBuilder<T> addIncludedField(int field);\n\t// Returns a DelimitedLineTokenizer\n\tDelimitedLineTokenizer build();\n\t// Define the delimiter for the file.\n\tFlatFileItemReaderBuilder.DelimitedBuilder<T> delimiter(String delimiter);\n}", "des": "A builder for constructing a DelimitedLineTokenizer"}
{"index": 15105, "repo": "spring-batch-infrastructure-5.0.2", "code": "public static class FlatFileItemReaderBuilder.FixedLengthBuilder<T> extends Object {\n\t// Add a column range to the existing list\n\tFlatFileItemReaderBuilder.FixedLengthBuilder<T> addColumns(Range range);\n\t// Insert a column range to the existing list\n\tFlatFileItemReaderBuilder.FixedLengthBuilder<T> addColumns(Range range, int index);\n\t// Returns a FixedLengthTokenizer\n\tFixedLengthTokenizer build();\n}", "des": "A builder for constructing a FixedLengthTokenizer"}
{"index": 15106, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class FlatFileItemWriter<T> extends AbstractFileItemWriter<T> {\n\t// Assert that mandatory properties (lineAggregator) are set.\n\tvoid afterPropertiesSet();\n\t// Write out a string of items followed by a \"new line\", where the format of the new line separator is determined by the underlying operating system.\n\tString doWrite(Chunk<? extends T> items);\n\t// Public setter for the LineAggregator.\n\tvoid setLineAggregator(LineAggregator<T> lineAggregator);\n}", "des": "This class is an item writer that writes data to a file or stream."}
{"index": 15107, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class FlatFileItemWriterBuilder<T> extends Object {\n\t// If set to true and the file exists, the output will be appended to the existing file.\n\tFlatFileItemWriterBuilder<T> append(boolean append);\n\t// Validates and builds a FlatFileItemWriter.\n\tFlatFileItemWriter<T> build();\n\t// Returns an instance of a FlatFileItemWriterBuilder.DelimitedBuilder for building a DelimitedLineAggregator.\n\tFlatFileItemWriterBuilder.DelimitedBuilder<T> delimited();\n}", "des": "A builder implementation for the FlatFileItemWriter"}
{"index": 15108, "repo": "spring-batch-infrastructure-5.0.2", "code": "public static class FlatFileItemWriterBuilder.DelimitedBuilder<T> extends Object {\n\tDelimitedLineAggregator<T> build();\n\t// Define the delimiter for the file.\n\tFlatFileItemWriterBuilder.DelimitedBuilder<T> delimiter(String delimiter);\n\t// Set the FieldExtractor to use to extract fields from each item.\n\tFlatFileItemWriterBuilder<T> fieldExtractor(FieldExtractor<T> fieldExtractor);\n}", "des": "A builder for constructing a DelimitedLineAggregator"}
{"index": 15109, "repo": "spring-batch-infrastructure-5.0.2", "code": "public static class FlatFileItemWriterBuilder.FormattedBuilder<T> extends Object {\n\tFormatterLineAggregator<T> build();\n\t// Set the FieldExtractor to use to extract fields from each item.\n\tFlatFileItemWriterBuilder<T> fieldExtractor(FieldExtractor<T> fieldExtractor);\n\t// Set the format string used to aggregate items\n\tFlatFileItemWriterBuilder.FormattedBuilder<T> format(String format);\n\t// Set the locale.\n\tFlatFileItemWriterBuilder.FormattedBuilder<T> locale(Locale locale);\n}", "des": "A builder for constructing a FormatterLineAggregator."}
{"index": 15110, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class FormatterLineAggregator<T> extends ExtractorLineAggregator<T> {\n\t// Aggregate provided fields into single String.\n\tprotected String doAggregate(Object[] fields);\n\t// Set the format string used to aggregate items.\n\tvoid setFormat(String format);\n\t// Public setter for the locale.\n\tvoid setLocale(Locale locale);\n\t// Public setter for the maximum length of the formatted string.\n\tvoid setMaximumLength(int maximumLength);\n}", "des": "A LineAggregator implementation which produces a String by aggregating the provided item via the Formatter syntax."}
{"index": 15111, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface FragmentEventReader extends XMLEventReader {\n\t// Tells the event reader the current fragment has been processed.\n\tvoid markFragmentProcessed();\n\t// Tells the event reader its cursor position is exactly before the fragment.\n\tvoid markStartFragment();\n\t// Reset the state of the fragment reader - make it forget it assumptions about current position of cursor (e.g.\n\tvoid reset();\n}", "des": "Interface for event readers which support treating XML fragments as standalone XML documents by wrapping the fragments with StartDocument and EndDocument events."}
{"index": 15112, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class GsonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T> {\n\t// Marshal an object into a json representation.\n\tString marshal(T item);\n\t// Set the Gson object to use.\n\tvoid setGson(com.google.gson.Gson gson);\n}", "des": "A json object marshaller that uses Google Gson to marshal an object into a json representation."}
{"index": 15113, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class GsonJsonObjectReader<T> extends Object implements JsonObjectReader<T> {\n\t// Close the input resource.\n\tvoid close();\n\t// Open the Json resource for reading.\n\tvoid open(org.springframework.core.io.Resource resource);\n\t// Read the next object in the Json resource if any.\n\tT read();\n\t// Set the object mapper to use to map Json objects to domain objects.\n\tvoid setMapper(com.google.gson.Gson mapper);\n}", "des": "Implementation of JsonObjectReader based on Google Gson."}
{"index": 15114, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class H2PagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "H2 implementation of a PagingQueryProvider using database specific features."}
{"index": 15115, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class HanaPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "SAP HANA implementation of a PagingQueryProvider using database specific features."}
{"index": 15116, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class HsqlPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "HSQLDB implementation of a PagingQueryProvider using database specific features."}
{"index": 15117, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class IncorrectLineLengthException extends FlatFileFormatException {\n\t// Retrieves the actual length that was recorded for this exception.\n\tint getActualLength();\n\t// Retrieves the expected length that was recorded for this exception.\n\tint getExpectedLength();\n}", "des": "Exception indicating that the line size expected is different from what is expected."}
{"index": 15118, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface ItemStream {\n\t// If any resources are needed for the stream to operate they need to be destroyed here.\n\tdefault void close();\n\t// Open the stream for the provided ExecutionContext.\n\tdefault void open(ExecutionContext executionContext);\n\t// Indicates that the execution context provided during open is about to be saved.\n\tdefault void update(ExecutionContext executionContext);\n}", "des": "Marker interface defining a contract for periodically storing state and restoring from that state should an error occur."}
{"index": 15119, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class ItemStreamSupport extends Object implements ItemStream {\n\t// Deprecated, for removal: This API element is subject to removal in a future version. since 5.0 in favor of ItemStream.close().\n\tvoid close();\n\tString getExecutionContextKey(String key);\n\t// Get the name of the component\n\tString getName();\n}", "des": "Empty method implementation of ItemStream."}
{"index": 15120, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JacksonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T> {\n\t// Marshal an object into a json representation.\n\tString marshal(T item);\n\t// Set the ObjectMapper to use.\n\tvoid setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper objectMapper);\n}", "des": "A json object marshaller that uses Jackson to marshal an object into a json representation."}
{"index": 15121, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JacksonJsonObjectReader<T> extends Object implements JsonObjectReader<T> {\n\t// Close the input resource.\n\tvoid close();\n\t// Open the Json resource for reading.\n\tvoid open(org.springframework.core.io.Resource resource);\n\t// Read the next object in the Json resource if any.\n\tT read();\n\t// Set the object mapper to use to map Json objects to domain objects.\n\tvoid setMapper(com.fasterxml.jackson.databind.ObjectMapper mapper);\n}", "des": "Implementation of JsonObjectReader based on Jackson."}
{"index": 15122, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JdbcBatchItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean {\n\t// Check mandatory properties - there must be a NamedParameterJdbcOperations and an SQL statement plus a parameter source.\n\tvoid afterPropertiesSet();\n\t// Public setter for the flag that determines whether an assertion is made that all items cause at least one row to be updated.\n\tvoid setAssertUpdates(boolean assertUpdates);\n}", "des": "ItemWriter that uses the batching features from NamedParameterJdbcTemplate to execute a batch of statements for all items provided."}
{"index": 15123, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JdbcBatchItemWriterBuilder<T> extends Object {\n\t// If set to true, confirms that every insert results in the update of at least one row in the database.\n\tJdbcBatchItemWriterBuilder<T> assertUpdates(boolean assertUpdates);\n\t// Creates a BeanPropertyItemSqlParameterSourceProvider to be used as your ItemSqlParameterSourceProvider.\n\tJdbcBatchItemWriterBuilder<T> beanMapped();\n\t// Validates configuration and builds the JdbcBatchItemWriter.\n\tJdbcBatchItemWriter<T> build();\n}", "des": "A builder implementation for the JdbcBatchItemWriter."}
{"index": 15124, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JdbcCursorItemReader<T> extends AbstractCursorItemReader<T> {\n\t// Assert that mandatory properties are set.\n\tvoid afterPropertiesSet();\n\t// Close the cursor and database connection.\n\tprotected void cleanupOnClose(Connection connection);\n\tString getSql();\n\tprotected void openCursor(Connection con);\n\t// Read the cursor and map to the type of object this reader should return.\n\tprotected T readCursor(ResultSet rs, int currentRow);\n}", "des": "Simple item reader implementation that opens a JDBC cursor and continually retrieves the next row in the ResultSet."}
{"index": 15125, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JdbcCursorItemReaderBuilder<T> extends Object {\n\t// Creates a BeanPropertyRowMapper to be used as your RowMapper.\n\tJdbcCursorItemReaderBuilder<T> beanRowMapper(Class<T> mappedClass);\n\t// Validates configuration and builds a new reader instance.\n\tJdbcCursorItemReader<T> build();\n\t// Set whether \"autoCommit\" should be overridden for the connection used by the cursor.\n\tJdbcCursorItemReaderBuilder<T> connectionAutoCommit(boolean connectionAutoCommit);\n}", "des": "Builder for the JdbcCursorItemReader"}
{"index": 15126, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JdbcPagingItemReader<T> extends AbstractPagingItemReader<T> implements org.springframework.beans.factory.InitializingBean {\n\t// Check mandatory properties.\n\tvoid afterPropertiesSet();\n\tprotected void doReadPage();\n\t// No-op.\n\tvoid open(ExecutionContext executionContext);\n\tvoid setDataSource(DataSource dataSource);\n}", "des": "ItemReader for reading database records using JDBC in a paging fashion."}
{"index": 15127, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JdbcPagingItemReaderBuilder<T> extends Object {\n\t// Creates a BeanPropertyRowMapper to be used as your RowMapper.\n\tJdbcPagingItemReaderBuilder<T> beanRowMapper(Class<T> mappedClass);\n\t// Provides a completely built instance of the JdbcPagingItemReader\n\tJdbcPagingItemReader<T> build();\n\t// Index for the current item.\n\tJdbcPagingItemReaderBuilder<T> currentItemCount(int currentItemCount);\n\t// The DataSource to query against.\n\tJdbcPagingItemReaderBuilder<T> dataSource(DataSource dataSource);\n}", "des": "This is a builder for the JdbcPagingItemReader."}
{"index": 15128, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JmsItemReader<T> extends Object implements ItemReader<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Reads a piece of input data and advance to the next one.\n\tT read();\n\t// Set the expected type of incoming message payloads.\n\tvoid setItemType(Class<? extends T> itemType);\n\t// Setter for JMS template.\n\tvoid setJmsTemplate(org.springframework.jms.core.JmsOperations jmsTemplate);\n}", "des": "An ItemReader for JMS using a JmsTemplate."}
{"index": 15129, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JmsItemReaderBuilder<T> extends Object {\n\t// Returns a fully constructed JmsItemReader.\n\tJmsItemReader<T> build();\n\t// Set the expected type of incoming message payloads.\n\tJmsItemReaderBuilder<T> itemType(Class<? extends T> itemType);\n\t// Establish the JMS template that will be used by the JmsItemReader.\n\tJmsItemReaderBuilder<T> jmsTemplate(org.springframework.jms.core.JmsOperations jmsTemplate);\n}", "des": "Creates a fully qualified JmsItemReader."}
{"index": 15130, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JmsItemWriter<T> extends Object implements ItemWriter<T> {\n\t// Setter for JMS template.\n\tvoid setJmsTemplate(org.springframework.jms.core.JmsOperations jmsTemplate);\n\t// Send the items one-by-one to the default destination of the JMS template.\n\tvoid write(Chunk<? extends T> items);\n}", "des": "An ItemWriter for JMS using a JmsTemplate."}
{"index": 15131, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JmsItemWriterBuilder<T> extends Object {\n\t// Returns a fully constructed JmsItemWriter.\n\tJmsItemWriter<T> build();\n\t// Establish the JMS template that will be used by the JmsItemWriter.\n\tJmsItemWriterBuilder<T> jmsTemplate(org.springframework.jms.core.JmsOperations jmsTemplate);\n}", "des": "Creates a fully qualified JmsItemWriter."}
{"index": 15132, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JpaCursorItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected void doOpen();\n\t// Read next item from input.\n\tprotected T doRead();\n}", "des": "ItemStreamReader implementation based on JPA Query.getResultStream()."}
{"index": 15133, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JpaCursorItemReaderBuilder<T> extends Object {\n\t// Returns a fully constructed JpaCursorItemReader.\n\tJpaCursorItemReader<T> build();\n\t// Index for the current item.\n\tJpaCursorItemReaderBuilder<T> currentItemCount(int currentItemCount);\n\t// The EntityManagerFactory to be used for executing the configured queryString.\n\tJpaCursorItemReaderBuilder<T> entityManagerFactory(jakarta.persistence.EntityManagerFactory entityManagerFactory);\n}", "des": "Builder for JpaCursorItemReader."}
{"index": 15134, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JpaItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean {\n\t// Check mandatory properties - there must be an entityManagerFactory.\n\tvoid afterPropertiesSet();\n\t// Do perform the actual write operation.\n\tprotected void doWrite(jakarta.persistence.EntityManager entityManager, Chunk<? extends T> items);\n\t// Set the EntityManager to be used internally.\n\tvoid setEntityManagerFactory(jakarta.persistence.EntityManagerFactory entityManagerFactory);\n}", "des": "ItemWriter that is using a JPA EntityManagerFactory to merge any Entities that aren't part of the persistence context."}
{"index": 15135, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JpaItemWriterBuilder<T> extends Object {\n\t// Returns a fully built JpaItemWriter.\n\tJpaItemWriter<T> build();\n\t// The JPA EntityManagerFactory to obtain an entity manager from.\n\tJpaItemWriterBuilder<T> entityManagerFactory(jakarta.persistence.EntityManagerFactory entityManagerFactory);\n\t// Set whether the entity manager should perform a persist instead of a merge.\n\tJpaItemWriterBuilder<T> usePersist(boolean usePersist);\n}", "des": "A builder for the JpaItemWriter."}
{"index": 15136, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JpaPagingItemReader<T> extends AbstractPagingItemReader<T> {\n\t// Check mandatory properties.\n\tvoid afterPropertiesSet();\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected void doOpen();\n\tprotected void doReadPage();\n\tvoid setEntityManagerFactory(jakarta.persistence.EntityManagerFactory entityManagerFactory);\n}", "des": "ItemReader for reading database records built on top of JPA."}
{"index": 15137, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JpaPagingItemReaderBuilder<T> extends Object {\n\t// Returns a fully constructed JpaPagingItemReader.\n\tJpaPagingItemReader<T> build();\n\t// Index for the current item.\n\tJpaPagingItemReaderBuilder<T> currentItemCount(int currentItemCount);\n\t// The EntityManagerFactory to be used for executing the configured queryString.\n\tJpaPagingItemReaderBuilder<T> entityManagerFactory(jakarta.persistence.EntityManagerFactory entityManagerFactory);\n}", "des": "Creates a fully qualified JpaPagingItemReader."}
{"index": 15138, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface JpaQueryProvider {\n\t// Create the query object.\n\tjakarta.persistence.Query createQuery();\n\t// Provide an EntityManager for the query to be built.\n\tvoid setEntityManager(jakarta.persistence.EntityManager entityManager);\n}", "des": "Interface defining the functionality to be provided for generating queries for use with JPA ItemReaders or other custom built artifacts."}
{"index": 15139, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JsonFileItemWriter<T> extends AbstractFileItemWriter<T> {\n\t// Assert that mandatory properties (jsonObjectMarshaller) are set.\n\tvoid afterPropertiesSet();\n\t// Write out a string of items followed by a \"new line\", where the format of the new line separator is determined by the underlying operating system.\n\tString doWrite(Chunk<? extends T> items);\n\t// Set the JsonObjectMarshaller to use to marshal object to json.\n\tvoid setJsonObjectMarshaller(JsonObjectMarshaller<T> jsonObjectMarshaller);\n}", "des": "Item writer that writes data in json format to an output file."}
{"index": 15140, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JsonFileItemWriterBuilder<T> extends Object {\n\t// If set to true and the file exists, the output will be appended to the existing file.\n\tJsonFileItemWriterBuilder<T> append(boolean append);\n\t// Validate the configuration and build a new JsonFileItemWriter.\n\tJsonFileItemWriter<T> build();\n\t// Encoding used for output.\n\tJsonFileItemWriterBuilder<T> encoding(String encoding);\n\t// A callback for footer processing.\n\tJsonFileItemWriterBuilder<T> footerCallback(FlatFileFooterCallback callback);\n}", "des": "Builder for JsonFileItemWriter."}
{"index": 15141, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JsonItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T> {\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected void doOpen();\n\t// Read next item from input.\n\tprotected T doRead();\n}", "des": "ItemStreamReader implementation that reads Json objects from a Resource having the following format:"}
{"index": 15142, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class JsonItemReaderBuilder<T> extends Object {\n\t// Validate the configuration and build a new JsonItemReader.\n\tJsonItemReader<T> build();\n\t// Index for the current item.\n\tJsonItemReaderBuilder<T> currentItemCount(int currentItemCount);\n\t// Set the JsonObjectReader to use to read and map Json objects to domain objects.\n\tJsonItemReaderBuilder<T> jsonObjectReader(JsonObjectReader<T> jsonObjectReader);\n}", "des": "A builder for JsonItemReader."}
{"index": 15143, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface JsonObjectReader<T> {\n\t// Close the input resource.\n\tdefault void close();\n\t// Open the Json resource for reading.\n\tdefault void open(org.springframework.core.io.Resource resource);\n\t// Read the next object in the Json resource if any.\n\tT read();\n}", "des": "Strategy interface for Json readers."}
{"index": 15144, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class KafkaItemReader<K,V> extends AbstractItemStreamItemReader<V> {\n\t// No-op.\n\tvoid close();\n\t// The flag that determines whether to save internal state for restarts.\n\tboolean isSaveState();\n\t// No-op.\n\tvoid open(ExecutionContext executionContext);\n\t// Reads a piece of input data and advance to the next one.\n\tV read();\n\t// Setter for partition offsets.\n\tvoid setPartitionOffsets(Map<org.apache.kafka.common.TopicPartition,Long> partitionOffsets);\n}", "des": "An ItemReader implementation for Apache Kafka."}
{"index": 15145, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class KafkaItemReaderBuilder<K,V> extends Object {\n\tKafkaItemReader<K,V> build();\n\t// Configure the underlying consumer properties.\n\tKafkaItemReaderBuilder<K,V> consumerProperties(Properties consumerProperties);\n\t// The name used to calculate the key within the ExecutionContext.\n\tKafkaItemReaderBuilder<K,V> name(String name);\n\t// Setter for partition offsets.\n\tKafkaItemReaderBuilder<K,V> partitionOffsets(Map<org.apache.kafka.common.TopicPartition,Long> partitionOffsets);\n}", "des": "A builder implementation for the KafkaItemReader."}
{"index": 15146, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class KafkaItemWriter<K,T> extends KeyValueItemWriter<K,T> {\n\t// Flush items to the key/value store.\n\tprotected void flush();\n\t// afterPropertiesSet() hook\n\tprotected void init();\n\t// Set the KafkaTemplate to use.\n\tvoid setKafkaTemplate(org.springframework.kafka.core.KafkaTemplate<K,T> kafkaTemplate);\n\t// The time limit to wait when flushing items to Kafka.\n\tvoid setTimeout(long timeout);\n}", "des": "An ItemWriter implementation for Apache Kafka using a KafkaTemplate with default topic configured."}
{"index": 15147, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class KafkaItemWriterBuilder<K,V> extends Object {\n\t// Validates and builds a KafkaItemWriter.\n\tKafkaItemWriter<K,V> build();\n\t// Indicate if the items being passed to the writer are all to be sent as delete events to the topic.\n\tKafkaItemWriterBuilder<K,V> delete(boolean delete);\n\t// Set the Converter to use to derive the key from the item.\n\tKafkaItemWriterBuilder<K,V> itemKeyMapper(org.springframework.core.convert.converter.Converter<V,K> itemKeyMapper);\n}", "des": "A builder implementation for the KafkaItemWriter"}
{"index": 15148, "repo": "spring-batch-infrastructure-5.0.2", "code": "public abstract class KeyValueItemWriter<K,V> extends Object implements ItemWriter<V>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Flush items to the key/value store.\n\tprotected void flush();\n\t// afterPropertiesSet() hook\n\tprotected abstract void init();\n\t// Sets the delete flag to have the item writer perform deletes\n\tvoid setDelete(boolean delete);\n}", "des": "A base class to implement any ItemWriter that writes to a key value store using a Converter to derive a key from an item"}
{"index": 15149, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class LdifReader extends AbstractItemCountingItemStreamItemReader<org.springframework.ldap.core.LdapAttributes> implements ResourceAwareItemReaderItemStream<org.springframework.ldap.core.LdapAttributes>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected void doOpen();\n}", "des": "The LdifReader is an adaptation of the FlatFileItemReader built around an LdifParser."}
{"index": 15150, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class LdifReaderBuilder extends Object {\n\t// Returns a fully constructed LdifReader.\n\tLdifReader build();\n\t// Index for the current item.\n\tLdifReaderBuilder currentItemCount(int currentItemCount);\n\t// Configure the max number of items to be read.\n\tLdifReaderBuilder maxItemCount(int maxItemCount);\n\t// The name used to calculate the key within the ExecutionContext.\n\tLdifReaderBuilder name(String name);\n}", "des": "Creates a fully qualified LdifReader."}
{"index": 15151, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class LogOrRethrowExceptionHandler extends Object implements ExceptionHandler {\n\t// Classify the throwables and decide whether to rethrow based on the result.\n\tvoid handleException(RepeatContext context, Throwable throwable);\n\t// Setter for the Classifier used by this handler.\n\tvoid setExceptionClassifier(org.springframework.classify.Classifier<Throwable,LogOrRethrowExceptionHandler.Level> exceptionClassifier);\n}", "des": "Implementation of ExceptionHandler based on an Classifier."}
{"index": 15152, "repo": "spring-batch-infrastructure-5.0.2", "code": "public static enum LogOrRethrowExceptionHandler.Level extends Enum<LogOrRethrowExceptionHandler.Level> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic LogOrRethrowExceptionHandler.Level valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic LogOrRethrowExceptionHandler.Level[] values();\n}", "des": "Logging levels for the handler."}
{"index": 15153, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MappingLdifReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected void doOpen();\n\t// Read next item from input.\n\tprotected T doRead();\n}", "des": "The MappingLdifReader is an adaptation of the FlatFileItemReader built around an LdifParser."}
{"index": 15154, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MappingLdifReaderBuilder<T> extends Object {\n\t// Returns a fully constructed MappingLdifReader.\n\tMappingLdifReader<T> build();\n\t// Index for the current item.\n\tMappingLdifReaderBuilder<T> currentItemCount(int currentItemCount);\n\t// Configure the max number of items to be read.\n\tMappingLdifReaderBuilder<T> maxItemCount(int maxItemCount);\n\t// The name used to calculate the key within the ExecutionContext.\n\tMappingLdifReaderBuilder<T> name(String name);\n}", "des": "Creates a fully qualified MappingLdifReader."}
{"index": 15155, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MariaDBPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "MariaDB implementation of a PagingQueryProvider using database specific features."}
{"index": 15156, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MethodInvokerUtils extends Object {\n\t// Create MethodInvoker for the method with the provided annotation on the provided object.\n\tstatic MethodInvoker getMethodInvokerByAnnotation(Class<? extends Annotation> annotationType, Object target);\n\t// Create a MethodInvoker from the delegate based on the annotationType.\n\tstatic MethodInvoker getMethodInvokerByAnnotation(Class<? extends Annotation> annotationType, Object target, Class<?>... expectedParamTypes);\n}", "des": "Utility methods for create MethodInvoker instances."}
{"index": 15157, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface MethodResolver {\n\t// Find a single Method on the given Class that matches this resolver's criteria.\n\tMethod findMethod(Class<?> clazz);\n\t// Find a single Method on the provided Object that matches this resolver's criteria.\n\tMethod findMethod(Object candidate);\n}", "des": "Strategy interface for detecting a single Method on a Class."}
{"index": 15158, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MimeMessageItemWriter extends Object implements ItemWriter<jakarta.mail.internet.MimeMessage> {\n\t// Check mandatory properties (mailSender).\n\tvoid afterPropertiesSet();\n\t// A JavaMailSender to be used to send messages in write(Chunk).\n\tvoid setJavaMailSender(org.springframework.mail.javamail.JavaMailSender mailSender);\n\t// The handler for failed messages.\n\tvoid setMailErrorHandler(MailErrorHandler mailErrorHandler);\n}", "des": "A simple ItemWriter that can send mail messages."}
{"index": 15159, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MongoItemReader<T> extends AbstractPaginatedDataItemReader<T> implements org.springframework.beans.factory.InitializingBean {\n\t// Checks mandatory properties\n\tvoid afterPropertiesSet();\n\t// Method this ItemStreamReader delegates to for the actual work of reading a page.\n\tprotected Iterator<T> doPageRead();\n\tvoid setCollection(String collection);\n\t// JSON defining the fields to be returned from the matching documents by MongoDB.\n\tvoid setFields(String fields);\n}", "des": "Restartable ItemReader that reads documents from MongoDB via a paging technique."}
{"index": 15160, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MongoItemReaderBuilder<T> extends Object {\n\t// Validates and builds a MongoItemReader.\n\tMongoItemReader<T> build();\n\t// Establish an optional collection that can be queried.\n\tMongoItemReaderBuilder<T> collection(String collection);\n\t// Index for the current item.\n\tMongoItemReaderBuilder<T> currentItemCount(int currentItemCount);\n\t// JSON defining the fields to be returned from the matching documents by MongoDB.\n\tMongoItemReaderBuilder<T> fields(String fields);\n}", "des": "A builder implementation for the MongoItemReader"}
{"index": 15161, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MongoItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Performs the actual write to the store via the template.\n\tprotected void doWrite(Chunk<? extends T> chunk);\n\t// Get the MongoOperations to be used to save items to be written.\n\tprotected org.springframework.data.mongodb.core.MongoOperations getTemplate();\n}", "des": "A ItemWriter implementation that writes to a MongoDB store using an implementation of Spring Data's MongoOperations."}
{"index": 15162, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MongoItemWriterBuilder<T> extends Object {\n\t// Validates and builds a MongoItemWriter.\n\tMongoItemWriter<T> build();\n\t// Set the name of the Mongo collection to be written to.\n\tMongoItemWriterBuilder<T> collection(String collection);\n\t// Indicates if the items being passed to the writer are to be saved or removed from the data store.\n\tMongoItemWriterBuilder<T> delete(boolean delete);\n}", "des": "A builder implementation for the MongoItemWriter"}
{"index": 15163, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MultiResourceItemReader<T> extends AbstractItemStreamItemReader<T> {\n\t// Close the setDelegate(ResourceAwareItemReaderItemStream) reader and reset instance variable values.\n\tvoid close();\n\t// Figure out which resource to start with in case of restart, open the delegate and restore delegate's position in the resource.\n\tvoid open(ExecutionContext executionContext);\n\t// Reads the next item, jumping to next resource if necessary.\n\tT read();\n}", "des": "Reads items from multiple resources sequentially - resource list is given by MultiResourceItemReader.setResources(Resource[]), the actual reading is delegated to MultiResourceItemReader.setDelegate(ResourceAwareItemReaderItemStream)."}
{"index": 15164, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MultiResourceItemReaderBuilder<T> extends Object {\n\t// Builds the MultiResourceItemReader.\n\tMultiResourceItemReader<T> build();\n\t// Used to order the injected resources, by default compares Resource.getFilename() values.\n\tMultiResourceItemReaderBuilder<T> comparator(Comparator<org.springframework.core.io.Resource> comparator);\n}", "des": "A builder implementation for the MultiResourceItemReader."}
{"index": 15165, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MultiResourceItemWriter<T> extends AbstractItemStreamItemWriter<T> {\n\t// No-op.\n\tvoid close();\n\t// No-op.\n\tvoid open(ExecutionContext executionContext);\n\t// Delegate used for actual writing of the output.\n\tvoid setDelegate(ResourceAwareItemWriterItemStream<? super T> delegate);\n\t// After this limit is exceeded the next chunk will be written into newly created resource.\n\tvoid setItemCountLimitPerResource(int itemCountLimitPerResource);\n}", "des": "Wraps a ResourceAwareItemWriterItemStream and creates a new output resource when the count of items written in current resource exceeds MultiResourceItemWriter.setItemCountLimitPerResource(int)."}
{"index": 15166, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MultiResourceItemWriterBuilder<T> extends Object {\n\t// Builds the MultiResourceItemWriter.\n\tMultiResourceItemWriter<T> build();\n\t// Delegate used for actual writing of the output.\n\tMultiResourceItemWriterBuilder<T> delegate(ResourceAwareItemWriterItemStream<? super T> delegate);\n\t// After this limit is exceeded the next chunk will be written into newly created resource.\n\tMultiResourceItemWriterBuilder<T> itemCountLimitPerResource(int itemCountLimitPerResource);\n}", "des": "A builder implementation for the MultiResourceItemWriter."}
{"index": 15167, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class MySqlPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "MySQL implementation of a PagingQueryProvider using database specific features."}
{"index": 15168, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class OraclePagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "Oracle implementation of a PagingQueryProvider using database specific features."}
{"index": 15169, "repo": "spring-batch-infrastructure-5.0.2", "code": "public enum Order extends Enum<Order> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Order valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Order[] values();\n}", "des": "The direction of the sort in an ORDER BY clause."}
{"index": 15170, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface PagingQueryProvider {\n\t// Generate the query that will provide the first page, limited by the page size.\n\tString generateFirstPageQuery(int pageSize);\n\t// Generate the query that will provide the first page, limited by the page size.\n\tString generateRemainingPagesQuery(int pageSize);\n\t// The number of parameters that are declared in the query\n\tint getParameterCount();\n}", "des": "Interface defining the functionality to be provided for generating paging queries for use with Paging Item Readers."}
{"index": 15171, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class PostgresPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "Postgres implementation of a PagingQueryProvider using database specific features."}
{"index": 15172, "repo": "spring-batch-infrastructure-5.0.2", "code": "public final class PropertiesConverter extends Object {\n\t// Convert a Properties object to a String.\n\tstatic String propertiesToString(Properties propertiesToParse);\n\t// Parse a String to a Properties object.\n\tstatic Properties stringToProperties(String stringToParse);\n}", "des": "Utility to convert a Properties object to a String and back."}
{"index": 15173, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface RecordSeparatorPolicy {\n\t// Signal the end of a record based on the content of the current record.\n\tboolean isEndOfRecord(String record);\n\t// Give the policy a chance to post-process a complete record, e.g.\n\tString postProcess(String record);\n\t// Pre-process a record before another line is appended, in the case of a multi-line record.\n\tString preProcess(String record);\n}", "des": "Policy for text file-based input sources to determine the end of a record, e.g."}
{"index": 15174, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class RecursiveCollectionLineAggregator<T> extends Object implements LineAggregator<Collection<T>> {\n\t// Create a string from the value provided.\n\tString aggregate(Collection<T> items);\n\t// Public setter for the LineAggregator to use on single items, that are not Strings.\n\tvoid setDelegate(LineAggregator<T> delegate);\n}", "des": "An implementation of LineAggregator that concatenates a collection of items of a common type with the system line separator."}
{"index": 15175, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class RegexLineTokenizer extends AbstractLineTokenizer {\n\tprotected List<String> doTokenize(String line);\n\t// Sets the regex pattern to use.\n\tvoid setPattern(Pattern pattern);\n\t// Sets the regular expression to use.\n\tvoid setRegex(String regex);\n}", "des": "Line-tokenizer using a regular expression to filter out data (by using matching and non-matching groups)."}
{"index": 15176, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface RepeatContext extends org.springframework.core.AttributeAccessor {\n\t// Allow resources to be cleared, especially in destruction callbacks.\n\tvoid close();\n\t// If batches are nested, then the inner batch will be created with the outer one as a parent.\n\tRepeatContext getParent();\n\t// Public access to a counter for the number of operations attempted.\n\tint getStartedCount();\n\t// Public accessor for the complete flag.\n\tboolean isCompleteOnly();\n}", "des": "Base interface for context which controls the state and completion / termination of a batch step."}
{"index": 15177, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class RepeatContextCounter extends Object {\n\tint getCount();\n\t// Increment by 1.\n\tfinal void increment();\n\t// Increment the counter.\n\tfinal void increment(int delta);\n}", "des": "Helper class for policies that need to count the number of occurrences of some event (e.g."}
{"index": 15178, "repo": "spring-batch-infrastructure-5.0.2", "code": "public interface RepeatListener {\n\t// Called by the framework after each item has been processed, unless the item processing results in an exception.\n\tdefault void after(RepeatContext context, RepeatStatus result);\n\t// Called by the framework before each batch item.\n\tdefault void before(RepeatContext context);\n\t// Called once at the end of a complete batch, after normal or abnormal completion (i.e.\n\tdefault void close(RepeatContext context);\n}", "des": "Interface for listeners to the batch process."}
{"index": 15179, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class RepeatOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor {\n\t// Invoke the proceeding method call repeatedly, according to the properties of the injected RepeatOperations.\n\tObject invoke(org.aopalliance.intercept.MethodInvocation invocation);\n\t// Setter for the RepeatOperations.\n\tvoid setRepeatOperations(RepeatOperations batchTemplate);\n}", "des": "A MethodInterceptor that can be used to automatically repeat calls to a method on a service."}
{"index": 15180, "repo": "spring-batch-infrastructure-5.0.2", "code": "public final class RepeatSynchronizationManager extends Object {\n\t// Clear the current context at the end of a batch - should only be used by RepeatOperations implementations.\n\tstatic RepeatContext clear();\n\t// Getter for the current context.\n\tstatic RepeatContext getContext();\n\t// Method for registering a context - should only be used by RepeatOperations implementations to ensure that getContext() always returns the correct value.\n\tstatic RepeatContext register(RepeatContext context);\n}", "des": "Global variable support for repeat clients."}
{"index": 15181, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class RepeatTemplate extends Object implements RepeatOperations {\n\t// Check return value from batch operation.\n\tprotected final boolean canContinue(RepeatStatus value);\n\t// Create an internal state object that is used to store data needed internally in the scope of an iteration.\n\tprotected RepeatInternalState createInternalState(RepeatContext context);\n}", "des": "Simple implementation and base class for batch templates implementing RepeatOperations."}
{"index": 15182, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class RepositoryItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected void doOpen();\n\t// Performs the actual reading of a page via the repository.\n\tprotected List<T> doPageRead();\n}", "des": "A ItemReader that reads records utilizing a PagingAndSortingRepository."}
{"index": 15183, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class RepositoryItemReaderBuilder<T> extends Object {\n\t// Arguments to be passed to the data providing method.\n\tRepositoryItemReaderBuilder<T> arguments(Object... arguments);\n\t// Arguments to be passed to the data providing method.\n\tRepositoryItemReaderBuilder<T> arguments(List<?> arguments);\n\t// Builds the RepositoryItemReader.\n\tRepositoryItemReader<T> build();\n\t// Index for the current item.\n\tRepositoryItemReaderBuilder<T> currentItemCount(int currentItemCount);\n}", "des": "A builder implementation for the RepositoryItemReader."}
{"index": 15184, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class RepositoryItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean {\n\t// Check mandatory properties - there must be a repository.\n\tvoid afterPropertiesSet();\n\t// Performs the actual write to the repository.\n\tprotected void doWrite(Chunk<? extends T> items);\n\t// Specifies what method on the repository to call.\n\tvoid setMethodName(String methodName);\n}", "des": "A ItemWriter wrapper for a CrudRepository from Spring Data."}
{"index": 15185, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class RepositoryItemWriterBuilder<T> extends Object {\n\t// Builds the RepositoryItemWriter.\n\tRepositoryItemWriter<T> build();\n\t// Specifies what method on the repository to call.\n\tRepositoryItemWriterBuilder<T> methodName(String methodName);\n\t// Specifies a repository and the type-safe method to call for the writer.\n\tRepositoryItemWriterBuilder<T> repository(RepositoryItemWriterBuilder.RepositoryMethodReference repositoryMethodReference);\n}", "des": "A builder implementation for the RepositoryItemWriter."}
{"index": 15186, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class ResourcesItemReader extends AbstractItemStreamItemReader<org.springframework.core.io.Resource> {\n\t// No-op.\n\tvoid open(ExecutionContext executionContext);\n\t// Increments a counter and returns the next Resource instance from the input, or null if none remain.\n\torg.springframework.core.io.Resource read();\n\t// The resources to serve up as items.\n\tvoid setResources(org.springframework.core.io.Resource[] resources);\n}", "des": "ItemReader which produces Resource instances from an array."}
{"index": 15187, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class RethrowOnThresholdExceptionHandler extends Object implements ExceptionHandler {\n\t// Classify the throwables and decide whether to re-throw based on the result.\n\tvoid handleException(RepeatContext context, Throwable throwable);\n\t// A map from exception classes to a threshold value of type Integer.\n\tvoid setThresholds(Map<Class<? extends Throwable>,Integer> thresholds);\n}", "des": "Implementation of ExceptionHandler that rethrows when exceptions of a given type reach a threshold."}
{"index": 15188, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class ScriptItemProcessor<I,O> extends Object implements ItemProcessor<I,O>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Process the provided item, returning a potentially modified or new item for continued processing.\n\tO process(I item);\n}", "des": "ItemProcessor implementation that passes the current item to process to the provided script."}
{"index": 15189, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class ScriptItemProcessorBuilder<I,O> extends Object {\n\t// Returns a fully constructed ScriptItemProcessor.\n\tScriptItemProcessor<I,O> build();\n\t// Provides the ability to change the key name that scripts use to obtain the current item to process if the variable represented by: ScriptItemProcessor.ITEM_BINDING_VARIABLE_NAME is not suitable (\"item\").\n\tScriptItemProcessorBuilder<I,O> itemBindingVariableName(String itemBindingVariableName);\n}", "des": "Creates a fully qualified ScriptItemProcessor."}
{"index": 15190, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SimpleCompletionPolicy extends DefaultResultCompletionPolicy {\n\tint getChunkSize();\n\t// Terminate if the chunk size has been reached.\n\tboolean isComplete(RepeatContext context);\n\t// Terminate if the chunk size has been reached, or the result is null.\n\tboolean isComplete(RepeatContext context, RepeatStatus result);\n\tvoid setChunkSize(int chunkSize);\n\t// Reset the counter.\n\tRepeatContext start(RepeatContext context);\n\t// Increment the counter in the context.\n\tvoid update(RepeatContext context);\n}", "des": "Policy for terminating a batch after a fixed number of operations."}
{"index": 15191, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SimpleLimitExceptionHandler extends Object implements ExceptionHandler, org.springframework.beans.factory.InitializingBean {\n\t// Apply the provided properties to create a delegate handler.\n\tvoid afterPropertiesSet();\n\t// Rethrows only if the limit is breached for this context on the exception type specified.\n\tvoid handleException(RepeatContext context, Throwable throwable);\n}", "des": "Simple implementation of exception handler which looks for given exception types."}
{"index": 15192, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SimpleMailMessageItemWriter extends Object implements ItemWriter<org.springframework.mail.SimpleMailMessage>, org.springframework.beans.factory.InitializingBean {\n\t// Check mandatory properties (mailSender).\n\tvoid afterPropertiesSet();\n\t// The handler for failed messages.\n\tvoid setMailErrorHandler(MailErrorHandler mailErrorHandler);\n\t// A MailSender to be used to send messages in write(Chunk).\n\tvoid setMailSender(org.springframework.mail.MailSender mailSender);\n}", "des": "A simple ItemWriter that can send mail messages."}
{"index": 15193, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SimpleMailMessageItemWriterBuilder extends Object {\n\t// Returns a fully constructed SimpleMailMessageItemWriter.\n\tSimpleMailMessageItemWriter build();\n\t// The handler for failed messages.\n\tSimpleMailMessageItemWriterBuilder mailErrorHandler(MailErrorHandler mailErrorHandler);\n\t// A MailSender to be used to send messages in SimpleMailMessageItemWriter.write(Chunk).\n\tSimpleMailMessageItemWriterBuilder mailSender(org.springframework.mail.MailSender mailSender);\n}", "des": "Creates a fully qualified SimpleMailMessageItemWriter."}
{"index": 15194, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SimpleRecordSeparatorPolicy extends Object implements RecordSeparatorPolicy {\n\t// Always returns true.\n\tboolean isEndOfRecord(String line);\n\t// Pass the record through.\n\tString postProcess(String record);\n\t// Pass the line through.\n\tString preProcess(String line);\n}", "des": "Simplest possible RecordSeparatorPolicy - treats all lines as record endings."}
{"index": 15195, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SingleItemPeekableItemReader<T> extends Object implements ItemStreamReader<T>, PeekableItemReader<T> {\n\t// If the delegate is an ItemStream, just pass the call on, otherwise reset the peek cache.\n\tvoid close();\n\t// If the delegate is an ItemStream, just pass the call on, otherwise reset the peek cache.\n\tvoid open(ExecutionContext executionContext);\n}", "des": "A PeekableItemReader that allows the user to peek one item ahead."}
{"index": 15196, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SingleItemPeekableItemReaderBuilder<T> extends Object {\n\t// Returns a fully constructed SingleItemPeekableItemReader.\n\tSingleItemPeekableItemReader<T> build();\n\t// The item reader to use as a delegate.\n\tSingleItemPeekableItemReaderBuilder<T> delegate(ItemReader<T> delegate);\n}", "des": "Creates a fully qualified SingleItemPeekeableItemReader."}
{"index": 15197, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SkipWrapper<T> extends Object {\n\t// Public getter for the exception.\n\tThrowable getException();\n\t// Public getter for the item.\n\tT getItem();\n}", "des": "Wrapper for an item and its exception if it failed processing."}
{"index": 15198, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SqlitePagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "SQLite implementation of a PagingQueryProvider using database specific features."}
{"index": 15199, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SqlPagingQueryProviderFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<PagingQueryProvider> {\n\t// Get a PagingQueryProvider instance using the provided properties and appropriate for the given database type.\n\tPagingQueryProvider getObject();\n\t// Always returns PagingQueryProvider.\n\tClass<PagingQueryProvider> getObjectType();\n\t// Always returns true.\n\tboolean isSingleton();\n\tvoid setDatabaseType(String databaseType);\n}", "des": "Factory bean for PagingQueryProvider interface."}
{"index": 15200, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SqlPagingQueryUtils extends Object {\n\t// Generates ORDER BY attributes based on the sort keys.\n\tstatic String buildSortClause(Map<String,Order> sortKeys);\n\t// Generates ORDER BY attributes based on the sort keys.\n\tstatic String buildSortClause(AbstractSqlPagingQueryProvider provider);\n\t// Appends the where conditions required to query for the subsequent pages.\n\tstatic void buildSortConditions(AbstractSqlPagingQueryProvider provider, StringBuilder sql);\n}", "des": "Utility class that generates the actual SQL statements used by query providers."}
{"index": 15201, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SqlServerPagingQueryProvider extends SqlWindowingPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n\tprotected Object getSubQueryAlias();\n}", "des": "SQL Server implementation of a PagingQueryProvider using database specific features."}
{"index": 15202, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SqlWindowingPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\tprotected Object extractTableAlias();\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n\tprotected String getOrderedQueryAlias();\n\tprotected String getOverClause();\n}", "des": "Generic Paging Query Provider using standard SQL:2003 windowing functions."}
{"index": 15203, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class StaxEventItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean {\n\t// Ensure that all required dependencies for the ItemReader to run are provided after all properties have been set.\n\tvoid afterPropertiesSet();\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n}", "des": "Item reader for reading XML input based on StAX."}
{"index": 15204, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class StaxEventItemReaderBuilder<T> extends Object {\n\t// Adds the list of fragments to be used as the root of each chunk to the configuration.\n\tStaxEventItemReaderBuilder<T> addFragmentRootElements(String... fragmentRootElements);\n\t// Adds the list of fragments to be used as the root of each chunk to the configuration.\n\tStaxEventItemReaderBuilder<T> addFragmentRootElements(List<String> fragmentRootElements);\n}", "des": "A fluent builder for the StaxEventItemReader"}
{"index": 15205, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class StaxEventItemWriter<T> extends AbstractItemStreamItemWriter<T> implements ResourceAwareItemWriterItemStream<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Flush and close the output source.\n\tvoid close();\n\t// Subclasses can override to customize the STAX result.\n\tprotected Result createStaxResult();\n\t// Subclasses can override to customize the event factory.\n\tprotected XMLEventFactory createXmlEventFactory();\n}", "des": "An implementation of ItemWriter which uses StAX and Marshaller for serializing object to XML."}
{"index": 15206, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class StaxEventItemWriterBuilder<T> extends Object {\n\t// Returns a configured StaxEventItemWriter\n\tStaxEventItemWriter<T> build();\n\t// Encoding for the file.\n\tStaxEventItemWriterBuilder<T> encoding(String encoding);\n\t// A StaxWriterCallback to provide any footer elements\n\tStaxEventItemWriterBuilder<T> footerCallback(StaxWriterCallback footerCallback);\n\t// Flag to indicate that changes should be force-synced to disk on flush.\n\tStaxEventItemWriterBuilder<T> forceSync(boolean forceSync);\n}", "des": "A builder for the StaxEventItemWriter."}
{"index": 15207, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class StoredProcedureItemReader<T> extends AbstractCursorItemReader<T> {\n\t// Assert that mandatory properties are set.\n\tvoid afterPropertiesSet();\n\t// Close the cursor and database connection.\n\tprotected void cleanupOnClose(Connection connection);\n\tString getSql();\n\tprotected void openCursor(Connection con);\n\t// Read the cursor and map to the type of object this reader should return.\n\tprotected T readCursor(ResultSet rs, int currentRow);\n}", "des": "Item reader implementation that executes a stored procedure and then reads the returned cursor and continually retrieves the next row in the ResultSet."}
{"index": 15208, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class StoredProcedureItemReaderBuilder<T> extends Object {\n\t// Validates configuration and builds a new reader instance\n\tStoredProcedureItemReader<T> build();\n\t// Index for the current item.\n\tStoredProcedureItemReaderBuilder<T> currentItemCount(int currentItemCount);\n\t// The DataSource to read from\n\tStoredProcedureItemReaderBuilder<T> dataSource(DataSource dataSource);\n}", "des": "A fluent builder API for the configuration of a StoredProcedureItemReader."}
{"index": 15209, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SuffixRecordSeparatorPolicy extends DefaultRecordSeparatorPolicy {\n\t// Return true if the line ends with the specified substring.\n\tboolean isEndOfRecord(String line);\n\t// Remove the suffix from the end of the record.\n\tString postProcess(String record);\n\t// Flag to indicate that the decision to terminate a record should ignore whitespace at the end of the line.\n\tvoid setIgnoreWhitespace(boolean ignoreWhitespace);\n}", "des": "A RecordSeparatorPolicy that looks for an exact match for a String at the end of a line (e.g."}
{"index": 15210, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SybasePagingQueryProvider extends SqlWindowingPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n\tprotected Object getSubQueryAlias();\n}", "des": "Sybase implementation of a PagingQueryProvider using database specific features."}
{"index": 15211, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SynchronizedItemStreamReader<T> extends Object implements ItemStreamReader<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// If any resources are needed for the stream to operate they need to be destroyed here.\n\tvoid close();\n\t// Open the stream for the provided ExecutionContext.\n\tvoid open(ExecutionContext executionContext);\n\t// This delegates to the read method of the delegate\n\tT read();\n\tvoid setDelegate(ItemStreamReader<T> delegate);\n}", "des": "This is a simple ItemStreamReader decorator with a synchronized ItemReader.read() method - which makes a non-thread-safe ItemReader thread-safe."}
{"index": 15212, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SynchronizedItemStreamReaderBuilder<T> extends Object {\n\t// Returns a fully constructed SynchronizedItemStreamReader.\n\tSynchronizedItemStreamReader<T> build();\n\t// The item stream reader to use as a delegate.\n\tSynchronizedItemStreamReaderBuilder<T> delegate(ItemStreamReader<T> delegate);\n}", "des": "Creates a fully qualified SynchronizedItemStreamReader."}
{"index": 15213, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SynchronizedItemStreamWriter<T> extends Object implements ItemStreamWriter<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// If any resources are needed for the stream to operate they need to be destroyed here.\n\tvoid close();\n\t// Open the stream for the provided ExecutionContext.\n\tvoid open(ExecutionContext executionContext);\n\t// Set the delegate ItemStreamWriter.\n\tvoid setDelegate(ItemStreamWriter<T> delegate);\n}", "des": "An ItemStreamWriter decorator with a synchronized write() method."}
{"index": 15214, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SynchronizedItemStreamWriterBuilder<T> extends Object {\n\t// Returns a fully constructed SynchronizedItemStreamWriter.\n\tSynchronizedItemStreamWriter<T> build();\n\t// Set the delegate ItemStreamWriter.\n\tSynchronizedItemStreamWriterBuilder<T> delegate(ItemStreamWriter<T> delegate);\n}", "des": "Creates a fully qualified SynchronizedItemStreamWriter."}
{"index": 15215, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class SystemPropertyInitializer extends Object implements org.springframework.beans.factory.InitializingBean {\n\t// Sets the System property with the provided name and default value.\n\tvoid afterPropertiesSet();\n\t// Mandatory property specifying the default value of the System property.\n\tvoid setDefaultValue(String defaultValue);\n\t// Set the key name for the System property that is created.\n\tvoid setKeyName(String keyName);\n}", "des": "Helper class that sets up a System property with a default value."}
{"index": 15216, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class TaskExecutorRepeatTemplate extends RepeatTemplate {\n\t// Create an internal state object that is used to store data needed internally in the scope of an iteration.\n\tprotected RepeatInternalState createInternalState(RepeatContext context);\n\t// Use the setTaskExecutor(TaskExecutor) to generate a result.\n\tprotected RepeatStatus getNextResult(RepeatContext context, RepeatCallback callback, RepeatInternalState state);\n}", "des": "Provides RepeatOperations support including interceptors that can be used to modify or monitor the behaviour at run time. This implementation is sufficient to be used to configure transactional behaviour for each item by making the RepeatCallback transactional, or for the whole batch by making the execute method transactional (but only then if the task executor is synchronous). This class is thread-safe if its collaborators are thread-safe (interceptors, terminationPolicy, callback)."}
{"index": 15217, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class TimeoutTerminationPolicy extends CompletionPolicySupport {\n\t// Check the timeout and complete gracefully if it has expires.\n\tboolean isComplete(RepeatContext context);\n\t// Start the clock on the timeout.\n\tRepeatContext start(RepeatContext context);\n}", "des": "Termination policy that times out after a fixed period."}
{"index": 15218, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class TransactionAwareBufferedWriter extends Writer {\n\tvoid close();\n\tvoid flush();\n\t// Convenience method for clients to determine if there is any unflushed data.\n\tlong getBufferSize();\n\tvoid setEncoding(String encoding);\n\t// Flag to indicate that changes should be force-synced to disk on flush.\n\tvoid setForceSync(boolean forceSync);\n\tvoid write(char[] cbuf, int off, int len);\n\tvoid write(String str, int off, int len);\n}", "des": "Wrapper for a FileChannel that delays actually writing to or closing the buffer if a transaction is active."}
{"index": 15219, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class TransactionAwareProxyFactory<T> extends Object {\n\t// Make a copy of the target that can be used inside a transaction to isolate changes from the original.\n\tprotected final T begin(T target);\n\t// Take the working copy state and commit it back to the original target.\n\tprotected void commit(T copy, T target);\n\tstatic <T> List<T> createAppendOnlyTransactionalList();\n\tstatic <K, V> ConcurrentMap<K,V> createAppendOnlyTransactionalMap();\n\tstatic <T> Set<T> createAppendOnlyTransactionalSet();\n}", "des": "Factory for transaction aware objects (like lists, sets, maps)."}
{"index": 15220, "repo": "spring-batch-infrastructure-5.0.2", "code": "public class ValidatingItemProcessor<T> extends Object implements ItemProcessor<T,T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Validate the item and return it unmodified\n\tT process(T item);\n\t// Should the processor filter invalid records instead of skipping them?\n\tvoid setFilter(boolean filter);\n\t// Set the validator used to validate each item.\n\tvoid setValidator(Validator<? super T> validator);\n}", "des": "Simple implementation of ItemProcessor that validates input and returns it without modifications."}
{"index": 15221, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory {\n\t// Apply BeanPostProcessors to the given existing bean instance, invoking their postProcessAfterInitialization methods.\n\tObject applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName);\n}", "des": "Abstract bean factory superclass that implements default bean creation, with the full capabilities specified by the RootBeanDefinition class."}
{"index": 15222, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractBeanDefinition extends BeanMetadataAttributeAccessor implements BeanDefinition, Cloneable {\n\t// Register a qualifier to be used for autowire candidate resolution, keyed by the qualifier's type name.\n\tvoid addQualifier(AutowireCandidateQualifier qualifier);\n\t// Apply the provided default values to this bean.\n\tvoid applyDefaults(BeanDefinitionDefaults defaults);\n\t// Public declaration of Object's clone() method.\n\tObject clone();\n}", "des": "Base class for concrete, full-fledged BeanDefinition classes, factoring out common properties of GenericBeanDefinition, RootBeanDefinition, and ChildBeanDefinition."}
{"index": 15223, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractBeanDefinitionParser extends Object implements BeanDefinitionParser {\n\t// Parse the specified Element and register the resulting BeanDefinition(s) with the BeanDefinitionRegistry embedded in the supplied ParserContext.\n\tfinal BeanDefinition parse(Element element, ParserContext parserContext);\n}", "des": "Abstract BeanDefinitionParser implementation providing a number of convenience methods and a template method that subclasses must override to provide the actual parsing logic."}
{"index": 15224, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractBeanDefinitionReader extends Object implements BeanDefinitionReader, org.springframework.core.env.EnvironmentCapable {\n\t// Return the class loader to use for bean classes.\n\tClassLoader getBeanClassLoader();\n\t// Return the BeanNameGenerator to use for anonymous beans (without explicit bean name specified).\n\tBeanNameGenerator getBeanNameGenerator();\n\torg.springframework.core.env.Environment getEnvironment();\n}", "des": "Abstract base class for bean definition readers which implement the BeanDefinitionReader interface."}
{"index": 15225, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory {\n\t// Add a new BeanPostProcessor that will get applied to beans created by this factory.\n\tvoid addBeanPostProcessor(BeanPostProcessor beanPostProcessor);\n\t// Add new BeanPostProcessors that will get applied to beans created by this factory.\n\tvoid addBeanPostProcessors(Collection<? extends BeanPostProcessor> beanPostProcessors);\n}", "des": "Abstract base class for BeanFactory implementations, providing the full capabilities of the ConfigurableBeanFactory SPI."}
{"index": 15226, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractComponentDefinition extends Object implements ComponentDefinition {\n\t// Returns an empty array.\n\tBeanDefinition[] getBeanDefinitions();\n\t// Returns an empty array.\n\tBeanReference[] getBeanReferences();\n\t// Delegates to ComponentDefinition.getName().\n\tString getDescription();\n\t// Returns an empty array.\n\tBeanDefinition[] getInnerBeanDefinitions();\n}", "des": "Base implementation of ComponentDefinition that provides a basic implementation of AbstractComponentDefinition.getDescription() which delegates to ComponentDefinition.getName()."}
{"index": 15227, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractFactoryBean<T> extends Object implements FactoryBean<T>, BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean {\n\t// Eagerly create the singleton instance, if necessary.\n\tvoid afterPropertiesSet();\n\t// Template method that subclasses must override to construct the object returned by this factory.\n\tprotected abstract T createInstance();\n\t// Destroy the singleton instance, if any.\n\tvoid destroy();\n}", "des": "Simple template superclass for FactoryBean implementations that creates a singleton or a prototype object, depending on a flag."}
{"index": 15228, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractNestablePropertyAccessor extends AbstractPropertyAccessor {\n\tprotected Object convertForProperty(String propertyName, Object oldValue, Object newValue, org.springframework.core.convert.TypeDescriptor td);\n\t// Create a NotWritablePropertyException for the specified property.\n\tprotected abstract NotWritablePropertyException createNotWritablePropertyException(String propertyName);\n\t// Return the limit for array and collection auto-growing.\n\tint getAutoGrowCollectionLimit();\n}", "des": "A basic ConfigurablePropertyAccessor that provides the necessary infrastructure for all typical use cases."}
{"index": 15229, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractPropertyAccessor extends TypeConverterSupport implements ConfigurablePropertyAccessor {\n\t// Determine the property type for the given property path.\n\tClass<?> getPropertyType(String propertyPath);\n\t// Actually get the value of a property.\n\tabstract Object getPropertyValue(String propertyName);\n\t// Return whether \"auto-growing\" of nested paths has been activated.\n\tboolean isAutoGrowNestedPaths();\n}", "des": "Abstract implementation of the PropertyAccessor interface."}
{"index": 15230, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractServiceLoaderBasedFactoryBean extends AbstractFactoryBean<Object> implements BeanClassLoaderAware {\n\t// Delegates to getObjectToExpose(java.util.ServiceLoader).\n\tprotected Object createInstance();\n\t// Determine the actual object to expose for the given ServiceLoader.\n\tprotected abstract Object getObjectToExpose(ServiceLoader<?> serviceLoader);\n\t// Return the desired service type.\n\tClass<?> getServiceType();\n}", "des": "Abstract base class for FactoryBeans operating on the JDK 1.6 ServiceLoader facility."}
{"index": 15231, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractSimpleBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n\t// Parse the supplied Element and populate the supplied BeanDefinitionBuilder as required.\n\tprotected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);\n\t// Extract a JavaBean property name from the supplied attribute name.\n\tprotected String extractPropertyName(String attributeName);\n}", "des": "Convenient base class for when there exists a one-to-one mapping between attribute names on the element that is to be parsed and the property names on the Class being configured."}
{"index": 15232, "repo": "spring-beans-6.0.11", "code": "public abstract class AbstractSingleBeanDefinitionParser extends AbstractBeanDefinitionParser {\n\t// Parse the supplied Element and populate the supplied BeanDefinitionBuilder as required.\n\tprotected void doParse(Element element, BeanDefinitionBuilder builder);\n\t// Parse the supplied Element and populate the supplied BeanDefinitionBuilder as required.\n\tprotected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);\n}", "des": "Base class for those BeanDefinitionParser implementations that need to parse and define just a single BeanDefinition."}
{"index": 15233, "repo": "spring-beans-6.0.11", "code": "public class AliasDefinition extends Object implements BeanMetadataElement {\n\t// Return the alias registered for the bean.\n\tfinal String getAlias();\n\t// Return the canonical name of the bean.\n\tfinal String getBeanName();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tfinal Object getSource();\n}", "des": "Representation of an alias that has been registered during the parsing process."}
{"index": 15234, "repo": "spring-beans-6.0.11", "code": "public interface AnnotatedBeanDefinition extends BeanDefinition {\n\t// Obtain metadata for this bean definition's factory method, if any.\n\torg.springframework.core.type.MethodMetadata getFactoryMethodMetadata();\n\t// Obtain the annotation metadata (as well as basic class metadata) for this bean definition's bean class.\n\torg.springframework.core.type.AnnotationMetadata getMetadata();\n}", "des": "Extended BeanDefinition interface that exposes AnnotationMetadata about its bean class - without requiring the class to be loaded yet."}
{"index": 15235, "repo": "spring-beans-6.0.11", "code": "public class AnnotatedGenericBeanDefinition extends GenericBeanDefinition implements AnnotatedBeanDefinition {\n\t// Obtain metadata for this bean definition's factory method, if any.\n\tfinal org.springframework.core.type.MethodMetadata getFactoryMethodMetadata();\n\t// Obtain the annotation metadata (as well as basic class metadata) for this bean definition's bean class.\n\tfinal org.springframework.core.type.AnnotationMetadata getMetadata();\n}", "des": "Extension of the GenericBeanDefinition class, adding support for annotation metadata exposed through the AnnotatedBeanDefinition interface."}
{"index": 15236, "repo": "spring-beans-6.0.11", "code": "public class AnnotationBeanWiringInfoResolver extends Object implements BeanWiringInfoResolver {\n\t// Build the BeanWiringInfo for the given Configurable annotation.\n\tprotected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation);\n\t// Determine the default bean name for the specified bean instance.\n\tprotected String getDefaultBeanName(Object beanInstance);\n\t// Resolve the BeanWiringInfo for the given bean instance.\n\tBeanWiringInfo resolveWiringInfo(Object beanInstance);\n}", "des": "BeanWiringInfoResolver that uses the Configurable annotation to identify which classes need autowiring."}
{"index": 15237, "repo": "spring-beans-6.0.11", "code": "public final class AotServices<T> extends Object implements Iterable<T> {\n\t// Return the AOT services as a List.\n\tList<T> asList();\n\t// Create a new AotServices.Loader that will obtain AOT services from \"META-INF/spring/aot.factories\".\n\tstatic AotServices.Loader factories();\n\t// Create a new AotServices.Loader that will obtain AOT services from \"META-INF/spring/aot.factories\".\n\tstatic AotServices.Loader factories(ClassLoader classLoader);\n}", "des": "A collection of AOT services that can be loaded from a SpringFactoriesLoader or obtained from a ListableBeanFactory."}
{"index": 15238, "repo": "spring-beans-6.0.11", "code": "public static enum AotServices.Source extends Enum<AotServices.Source> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AotServices.Source valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AotServices.Source[] values();\n}", "des": "Sources from which services were obtained."}
{"index": 15239, "repo": "spring-beans-6.0.11", "code": "public class ArgumentConvertingMethodInvoker extends org.springframework.util.MethodInvoker {\n\t// Actually find a method with matching parameter type, i.e.\n\tprotected Method doFindMatchingMethod(Object[] arguments);\n\t// This implementation looks for a method with matching parameter types.\n\tprotected Method findMatchingMethod();\n\t// Obtain the default TypeConverter for this method invoker.\n\tprotected TypeConverter getDefaultTypeConverter();\n}", "des": "Subclass of MethodInvoker that tries to convert the given arguments for the actual target method via a TypeConverter."}
{"index": 15240, "repo": "spring-beans-6.0.11", "code": "public enum Autowire extends Enum<Autowire> {\n\t// Return whether this represents an actual autowiring value.\n\tboolean isAutowire();\n\tint value();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Autowire valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Autowire[] values();\n}", "des": "Enumeration determining autowiring status: that is, whether a bean should have its dependencies automatically injected by the Spring container using setter injection."}
{"index": 15241, "repo": "spring-beans-6.0.11", "code": "public interface AutowireCandidateResolver {\n\t// Return a clone of this resolver instance if necessary, retaining its local configuration and allowing for the cloned instance to get associated with a new bean factory, or this original instance if there is no such state.\n\tdefault AutowireCandidateResolver cloneIfNecessary();\n}", "des": "Strategy interface for determining whether a specific bean definition qualifies as an autowire candidate for a specific dependency."}
{"index": 15242, "repo": "spring-beans-6.0.11", "code": "public interface AutowireCapableBeanFactory extends BeanFactory {\n\t// Apply BeanPostProcessors to the given existing bean instance, invoking their postProcessAfterInitialization methods.\n\tObject applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName);\n\t// Apply BeanPostProcessors to the given existing bean instance, invoking their postProcessBeforeInitialization methods.\n\tObject applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName);\n}", "des": "Extension of the BeanFactory interface to be implemented by bean factories that are capable of autowiring, provided that they want to expose this functionality for existing bean instances."}
{"index": 15243, "repo": "spring-beans-6.0.11", "code": "public class AutowiredAnnotationBeanPostProcessor extends Object implements SmartInstantiationAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor, BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, BeanFactoryAware {\n\t// Determine the type of the bean to be eventually returned from this processor's InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String) callback.\n\tClass<?> determineBeanType(Class<?> beanClass, String beanName);\n}", "des": "BeanPostProcessor implementation that autowires annotated fields, setter methods, and arbitrary config methods."}
{"index": 15244, "repo": "spring-beans-6.0.11", "code": "@FunctionalInterface public interface AutowiredArguments {\n\t// Return the resolved argument at the specified index.\n\tdefault <T> T get(int index);\n\t// Return the resolved argument at the specified index.\n\tdefault <T> T get(int index, Class<T> requiredType);\n\t// Return the resolved argument at the specified index.\n\tdefault Object getObject(int index);\n\t// Factory method to create a new AutowiredArguments instance from the given object array.\n\tstatic AutowiredArguments of(Object[] arguments);\n}", "des": "Resolved arguments to be autowired."}
{"index": 15245, "repo": "spring-beans-6.0.11", "code": "public final class AutowiredFieldValueResolver extends Object {\n\t// Create a new AutowiredFieldValueResolver for the specified field where injection is optional.\n\tstatic AutowiredFieldValueResolver forField(String fieldName);\n\t// Create a new AutowiredFieldValueResolver for the specified field where injection is required.\n\tstatic AutowiredFieldValueResolver forRequiredField(String fieldName);\n}", "des": "Resolver used to support the autowiring of fields."}
{"index": 15246, "repo": "spring-beans-6.0.11", "code": "public final class AutowiredMethodArgumentsResolver extends Object {\n\t// Create a new AutowiredMethodArgumentsResolver for the specified method where injection is optional.\n\tstatic AutowiredMethodArgumentsResolver forMethod(String methodName, Class<?>... parameterTypes);\n\t// Create a new AutowiredMethodArgumentsResolver for the specified method where injection is required.\n\tstatic AutowiredMethodArgumentsResolver forRequiredMethod(String methodName, Class<?>... parameterTypes);\n}", "des": "Resolver used to support the autowiring of methods."}
{"index": 15247, "repo": "spring-beans-6.0.11", "code": "public class BeanComponentDefinition extends BeanDefinitionHolder implements ComponentDefinition {\n\t// This implementation expects the other object to be of type BeanComponentDefinition as well, in addition to the superclass's equality requirements.\n\tboolean equals(Object other);\n\t// Return the BeanDefinitions that were registered to form this ComponentDefinition.\n\tBeanDefinition[] getBeanDefinitions();\n}", "des": "ComponentDefinition based on a standard BeanDefinition, exposing the given bean definition as well as inner bean definitions and bean references for the given bean."}
{"index": 15248, "repo": "spring-beans-6.0.11", "code": "public class BeanConfigurerSupport extends Object implements BeanFactoryAware, InitializingBean, DisposableBean {\n\t// Check that a BeanFactory has been set.\n\tvoid afterPropertiesSet();\n\t// Configure the bean instance.\n\tvoid configureBean(Object beanInstance);\n\t// Create the default BeanWiringInfoResolver to be used if none was specified explicitly.\n\tprotected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();\n}", "des": "Convenient base class for bean configurers that can perform Dependency Injection on objects (however they may be created)."}
{"index": 15249, "repo": "spring-beans-6.0.11", "code": "public class BeanCreationException extends FatalBeanException {\n\t// Add a related cause to this bean creation exception, not being a direct cause of the failure but having occurred earlier in the creation of the same bean instance.\n\tvoid addRelatedCause(Throwable ex);\n\tboolean contains(Class<?> exClass);\n\t// Return the name of the bean requested, if any.\n\tString getBeanName();\n\t// Return the related causes, if any.\n\tThrowable[] getRelatedCauses();\n}", "des": "Exception thrown when a BeanFactory encounters an error when attempting to create a bean from a bean definition."}
{"index": 15250, "repo": "spring-beans-6.0.11", "code": "public interface BeanDefinition extends org.springframework.core.AttributeAccessor, BeanMetadataElement {\n\t// Return the current bean class name of this bean definition.\n\tString getBeanClassName();\n\t// Return the constructor argument values for this bean.\n\tConstructorArgumentValues getConstructorArgumentValues();\n\t// Return the bean names that this bean depends on.\n\tString[] getDependsOn();\n\t// Return a human-readable description of this bean definition.\n\tString getDescription();\n}", "des": "A BeanDefinition describes a bean instance, which has property values, constructor argument values, and further information supplied by concrete implementations."}
{"index": 15251, "repo": "spring-beans-6.0.11", "code": "public final class BeanDefinitionBuilder extends Object {\n\t// Add an autowired marker for the specified property on the specified bean.\n\tBeanDefinitionBuilder addAutowiredProperty(String name);\n\t// Add a reference to a named bean as a constructor arg.\n\tBeanDefinitionBuilder addConstructorArgReference(String beanName);\n\t// Add an indexed constructor arg value.\n\tBeanDefinitionBuilder addConstructorArgValue(Object value);\n}", "des": "Programmatic means of constructing BeanDefinitions using the builder pattern."}
{"index": 15252, "repo": "spring-beans-6.0.11", "code": "public class BeanDefinitionDefaults extends Object {\n\t// Return the default autowire mode.\n\tint getAutowireMode();\n\t// Return the default dependency check code.\n\tint getDependencyCheck();\n\t// Return the name of the default destroy method.\n\tString getDestroyMethodName();\n\t// Return the name of the default initializer method.\n\tString getInitMethodName();\n\t// Return whether beans should be lazily initialized by default, i.e.\n\tBoolean getLazyInit();\n}", "des": "A simple holder for BeanDefinition property defaults."}
{"index": 15253, "repo": "spring-beans-6.0.11", "code": "public class BeanDefinitionHolder extends Object implements BeanMetadataElement {\n\tboolean equals(Object other);\n\t// Return the alias names for the bean, as specified directly for the bean definition.\n\tString[] getAliases();\n\t// Return the wrapped BeanDefinition.\n\tBeanDefinition getBeanDefinition();\n\t// Return the primary name of the bean, as specified for the bean definition.\n\tString getBeanName();\n}", "des": "Holder for a BeanDefinition with name and aliases."}
{"index": 15254, "repo": "spring-beans-6.0.11", "code": "public class BeanDefinitionOverrideException extends BeanDefinitionStoreException {\n\t// Return the newly registered bean definition.\n\tBeanDefinition getBeanDefinition();\n\t// Return the name of the bean.\n\tString getBeanName();\n\t// Return the existing bean definition for the same name.\n\tBeanDefinition getExistingDefinition();\n\t// Return the description of the resource that the bean definition came from.\n\tString getResourceDescription();\n}", "des": "Subclass of BeanDefinitionStoreException indicating an invalid override attempt: typically registering a new definition for the same bean name while DefaultListableBeanFactory.isAllowBeanDefinitionOverriding() is false."}
{"index": 15255, "repo": "spring-beans-6.0.11", "code": "public class BeanDefinitionParserDelegate extends Object {\n\t// Build a typed String value Object for the given raw value.\n\tprotected TypedStringValue buildTypedStringValue(String value, String targetTypeName);\n\t// Build a typed String value Object for the given raw value.\n\tprotected final Object buildTypedStringValueForMap(String value, String defaultTypeName, Element entryEle);\n}", "des": "Stateful delegate class used to parse XML bean definitions."}
{"index": 15256, "repo": "spring-beans-6.0.11", "code": "public interface BeanDefinitionReader {\n\t// Return the class loader to use for bean classes.\n\tClassLoader getBeanClassLoader();\n\t// Return the BeanNameGenerator to use for anonymous beans (without explicit bean name specified).\n\tBeanNameGenerator getBeanNameGenerator();\n\t// Return the bean factory to register the bean definitions with.\n\tBeanDefinitionRegistry getRegistry();\n\t// Return the ResourceLoader to use for resource locations.\n\torg.springframework.core.io.ResourceLoader getResourceLoader();\n}", "des": "Simple interface for bean definition readers that specifies load methods with Resource and String location parameters."}
{"index": 15257, "repo": "spring-beans-6.0.11", "code": "public abstract class BeanDefinitionReaderUtils extends Object {\n\t// Create a new GenericBeanDefinition for the given parent name and class name, eagerly loading the bean class if a ClassLoader has been specified.\n\tstatic AbstractBeanDefinition createBeanDefinition(String parentName, String className, ClassLoader classLoader);\n}", "des": "Utility methods that are useful for bean definition reader implementations."}
{"index": 15258, "repo": "spring-beans-6.0.11", "code": "public interface BeanDefinitionRegistry extends org.springframework.core.AliasRegistry {\n\t// Check if this registry contains a bean definition with the given name.\n\tboolean containsBeanDefinition(String beanName);\n\t// Return the BeanDefinition for the given bean name.\n\tBeanDefinition getBeanDefinition(String beanName);\n\t// Return the number of beans defined in the registry.\n\tint getBeanDefinitionCount();\n\t// Return the names of all beans defined in this registry.\n\tString[] getBeanDefinitionNames();\n}", "des": "Interface for registries that hold bean definitions, for example RootBeanDefinition and ChildBeanDefinition instances."}
{"index": 15259, "repo": "spring-beans-6.0.11", "code": "public class BeanDefinitionStoreException extends FatalBeanException {\n\t// Return the name of the bean, if available.\n\tString getBeanName();\n\t// Return the description of the resource that the bean definition came from, if available.\n\tString getResourceDescription();\n}", "des": "Exception thrown when a BeanFactory encounters an invalid bean definition: e.g."}
{"index": 15260, "repo": "spring-beans-6.0.11", "code": "public class BeanDefinitionValueResolver extends Object {\n\t// Evaluate the given value as an expression, if necessary.\n\tprotected Object evaluate(Object value);\n\t// Evaluate the given value as an expression, if necessary.\n\tprotected Object evaluate(TypedStringValue value);\n\t// Resolve an inner bean definition and invoke the specified resolver on its merged bean definition.\n\t<T> T resolveInnerBean(String innerBeanName, BeanDefinition innerBd, BiFunction<String,RootBeanDefinition,T> resolver);\n}", "des": "Helper class for use in bean factory implementations, resolving values contained in bean definition objects into the actual values applied to the target bean instance."}
{"index": 15261, "repo": "spring-beans-6.0.11", "code": "public class BeanDefinitionVisitor extends Object {\n\t// Resolve the given String value, for example parsing placeholders.\n\tprotected String resolveStringValue(String strVal);\n\tprotected Object resolveValue(Object value);\n\tprotected void visitArray(Object[] arrayVal);\n\tprotected void visitBeanClassName(BeanDefinition beanDefinition);\n}", "des": "Visitor class for traversing BeanDefinition objects, in particular the property values and constructor argument values contained in them, resolving bean metadata values."}
{"index": 15262, "repo": "spring-beans-6.0.11", "code": "public interface BeanFactory {\n\t// Does this bean factory contain a bean definition or externally registered singleton instance with the given name?\n\tboolean containsBean(String name);\n\t// Return the aliases for the given bean name, if any.\n\tString[] getAliases(String name);\n\t// Return the bean instance that uniquely matches the given object type, if any.\n\t<T> T getBean(Class<T> requiredType);\n}", "des": "The root interface for accessing a Spring bean container."}
{"index": 15263, "repo": "spring-beans-6.0.11", "code": "public abstract class BeanFactoryAnnotationUtils extends Object {\n\t// Check whether the named bean declares a qualifier of the given name.\n\tstatic boolean isQualifierMatch(Predicate<String> qualifier, String beanName, BeanFactory beanFactory);\n\t// Obtain a bean of type T from the given BeanFactory declaring a qualifier (e.g.\n\tstatic <T> T qualifiedBeanOfType(BeanFactory beanFactory, Class<T> beanType, String qualifier);\n}", "des": "Convenience methods performing bean lookups related to Spring-specific annotations, for example Spring's @Qualifier annotation."}
{"index": 15264, "repo": "spring-beans-6.0.11", "code": "public interface BeanFactoryInitializationCode {\n\t// Add an initializer method call.\n\tvoid addInitializer(org.springframework.aot.generate.MethodReference methodReference);\n\t// Get the GeneratedMethods used by the initializing code.\n\torg.springframework.aot.generate.GeneratedMethods getMethods();\n}", "des": "Interface that can be used to configure the code that will be generated to perform bean factory initialization."}
{"index": 15265, "repo": "spring-beans-6.0.11", "code": "public abstract class BeanFactoryUtils extends Object {\n\t// Get all bean names whose Class has the supplied Annotation type, including those defined in ancestor factories, without creating any bean instances yet.\n\tstatic String[] beanNamesForAnnotationIncludingAncestors(ListableBeanFactory lbf, Class<? extends Annotation> annotationType);\n}", "des": "Convenience methods operating on bean factories, in particular on the ListableBeanFactory interface."}
{"index": 15266, "repo": "spring-beans-6.0.11", "code": "public final class BeanInstanceSupplier<T> extends Object implements InstanceSupplier<T> {\n\t// Create a BeanInstanceSupplier that resolves arguments for the specified bean constructor.\n\tstatic <T> BeanInstanceSupplier<T> forConstructor(Class<?>... parameterTypes);\n\t// Create a new BeanInstanceSupplier that resolves arguments for the specified factory method.\n\tstatic <T> BeanInstanceSupplier<T> forFactoryMethod(Class<?> declaringClass, String methodName, Class<?>... parameterTypes);\n}", "des": "Specialized InstanceSupplier that provides the factory Method used to instantiate the underlying bean instance, if any."}
{"index": 15267, "repo": "spring-beans-6.0.11", "code": "public class BeanInstantiationException extends FatalBeanException {\n\t// Return the offending bean class (never null).\n\tClass<?> getBeanClass();\n\t// Return the delegate for bean construction purposes, if known.\n\tMethod getConstructingMethod();\n\t// Return the offending constructor, if known.\n\tConstructor<?> getConstructor();\n}", "des": "Exception thrown when instantiation of a bean failed."}
{"index": 15268, "repo": "spring-beans-6.0.11", "code": "public class BeanMetadataAttribute extends Object implements BeanMetadataElement {\n\tboolean equals(Object other);\n\t// Return the name of the attribute.\n\tString getName();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n\t// Return the value of the attribute.\n\tObject getValue();\n\t// Set the configuration source Object for this metadata element.\n\tvoid setSource(Object source);\n}", "des": "Holder for a key-value style attribute that is part of a bean definition."}
{"index": 15269, "repo": "spring-beans-6.0.11", "code": "public class BeanMetadataAttributeAccessor extends org.springframework.core.AttributeAccessorSupport implements BeanMetadataElement {\n\t// Add the given BeanMetadataAttribute to this accessor's set of attributes.\n\tvoid addMetadataAttribute(BeanMetadataAttribute attribute);\n\tObject getAttribute(String name);\n\t// Look up the given BeanMetadataAttribute in this accessor's set of attributes.\n\tBeanMetadataAttribute getMetadataAttribute(String name);\n}", "des": "Extension of AttributeAccessorSupport, holding attributes as BeanMetadataAttribute objects in order to keep track of the definition source."}
{"index": 15270, "repo": "spring-beans-6.0.11", "code": "public class BeanNotOfRequiredTypeException extends BeansException {\n\t// Return the actual type of the instance found.\n\tClass<?> getActualType();\n\t// Return the name of the instance that was of the wrong type.\n\tString getBeanName();\n\t// Return the expected type for the bean.\n\tClass<?> getRequiredType();\n}", "des": "Thrown when a bean doesn't match the expected type."}
{"index": 15271, "repo": "spring-beans-6.0.11", "code": "public interface BeanPostProcessor {\n\t// Apply this BeanPostProcessor to the given new bean instance after any bean initialization callbacks (like InitializingBean's afterPropertiesSet or a custom init-method).\n\tdefault Object postProcessAfterInitialization(Object bean, String beanName);\n}", "des": "Factory hook that allows for custom modification of new bean instances — for example, checking for marker interfaces or wrapping beans with proxies."}
{"index": 15272, "repo": "spring-beans-6.0.11", "code": "@FunctionalInterface public interface BeanRegistrationAotContribution {\n\t// Apply this contribution to the given BeanRegistrationCode.\n\tvoid applyTo(org.springframework.aot.generate.GenerationContext generationContext, BeanRegistrationCode beanRegistrationCode);\n}", "des": "AOT contribution from a BeanRegistrationAotProcessor used to register a single bean definition."}
{"index": 15273, "repo": "spring-beans-6.0.11", "code": "@FunctionalInterface public interface BeanRegistrationAotProcessor {\n\t// Return if the bean instance associated with this processor should be excluded from AOT processing itself.\n\tdefault boolean isBeanExcludedFromAotProcessing();\n\t// Process the given RegisteredBean instance ahead-of-time and return a contribution or null.\n\tBeanRegistrationAotContribution processAheadOfTime(RegisteredBean registeredBean);\n}", "des": "AOT processor that makes bean registration contributions by processing RegisteredBean instances."}
{"index": 15274, "repo": "spring-beans-6.0.11", "code": "public interface BeanRegistrationCode {\n\t// Add an instance post processor method call to the registration code.\n\tvoid addInstancePostProcessor(org.springframework.aot.generate.MethodReference methodReference);\n\t// Return the name of the class being used for registrations.\n\torg.springframework.javapoet.ClassName getClassName();\n\t// Return a GeneratedMethods being used by the registrations code.\n\torg.springframework.aot.generate.GeneratedMethods getMethods();\n}", "des": "Interface that can be used to configure the code that will be generated to perform registration of a single bean."}
{"index": 15275, "repo": "spring-beans-6.0.11", "code": "public interface BeanRegistrationCodeFragments {\n\t// Generate the instance supplier code.\n\torg.springframework.javapoet.CodeBlock generateInstanceSupplierCode(org.springframework.aot.generate.GenerationContext generationContext, BeanRegistrationCode beanRegistrationCode, Executable constructorOrFactoryMethod, boolean allowDirectSupplierShortcut);\n}", "des": "Generate the various fragments of code needed to register a bean."}
{"index": 15276, "repo": "spring-beans-6.0.11", "code": "public class BeanRegistrationCodeFragmentsDecorator extends Object implements BeanRegistrationCodeFragments {\n\t// Generate the instance supplier code.\n\torg.springframework.javapoet.CodeBlock generateInstanceSupplierCode(org.springframework.aot.generate.GenerationContext generationContext, BeanRegistrationCode beanRegistrationCode, Executable constructorOrFactoryMethod, boolean allowDirectSupplierShortcut);\n}", "des": "A BeanRegistrationCodeFragments decorator implementation."}
{"index": 15277, "repo": "spring-beans-6.0.11", "code": "public interface BeanRegistrationsCode {\n\t// Return the name of the class being used for registrations.\n\torg.springframework.javapoet.ClassName getClassName();\n\t// Return a GeneratedMethods being used by the registrations code.\n\torg.springframework.aot.generate.GeneratedMethods getMethods();\n}", "des": "Interface that can be used to configure the code that will be generated to register beans."}
{"index": 15278, "repo": "spring-beans-6.0.11", "code": "public abstract class BeanUtils extends Object {\n\t// Copy the property values of the given source bean into the target bean.\n\tstatic void copyProperties(Object source, Object target);\n\t// Copy the property values of the given source bean into the given target bean, only setting properties defined in the given \"editable\" class (or interface).\n\tstatic void copyProperties(Object source, Object target, Class<?> editable);\n}", "des": "Static convenience methods for JavaBeans: for instantiating beans, checking bean property types, copying bean properties, etc."}
{"index": 15279, "repo": "spring-beans-6.0.11", "code": "public class BeanWiringInfo extends Object {\n\t// Return one of the constants AUTOWIRE_BY_NAME / AUTOWIRE_BY_TYPE, if autowiring is indicated.\n\tint getAutowireMode();\n\t// Return the specific bean name that this BeanWiringInfo points to, if any.\n\tString getBeanName();\n\t// Return whether to perform a dependency check for object references in the bean instance (after autowiring).\n\tboolean getDependencyCheck();\n\t// Return whether this BeanWiringInfo indicates autowiring.\n\tboolean indicatesAutowiring();\n}", "des": "Holder for bean wiring metadata information about a particular class."}
{"index": 15280, "repo": "spring-beans-6.0.11", "code": "public interface BeanWrapper extends ConfigurablePropertyAccessor {\n\t// Return the limit for array and collection auto-growing.\n\tint getAutoGrowCollectionLimit();\n\t// Obtain the property descriptor for a specific property of the wrapped object.\n\tPropertyDescriptor getPropertyDescriptor(String propertyName);\n\t// Obtain the PropertyDescriptors for the wrapped object (as determined by standard JavaBeans introspection).\n\tPropertyDescriptor[] getPropertyDescriptors();\n}", "des": "The central interface of Spring's low-level JavaBeans infrastructure."}
{"index": 15281, "repo": "spring-beans-6.0.11", "code": "public class BeanWrapperImpl extends AbstractNestablePropertyAccessor implements BeanWrapper {\n\t// Convert the given value for the specified property to the latter's type.\n\tObject convertForProperty(Object value, String propertyName);\n\t// Create a NotWritablePropertyException for the specified property.\n\tprotected NotWritablePropertyException createNotWritablePropertyException(String propertyName);\n}", "des": "Default BeanWrapper implementation that should be sufficient for all typical use cases."}
{"index": 15282, "repo": "spring-beans-6.0.11", "code": "public final class CachedIntrospectionResults extends Object {\n\t// Accept the given ClassLoader as cache-safe, even if its classes would not qualify as cache-safe in this CachedIntrospectionResults class.\n\tstatic void acceptClassLoader(ClassLoader classLoader);\n}", "des": "Internal class that caches JavaBeans PropertyDescriptor information for a Java class."}
{"index": 15283, "repo": "spring-beans-6.0.11", "code": "public class CannotLoadBeanClassException extends FatalBeanException {\n\t// Return the name of the class we were trying to load.\n\tString getBeanClassName();\n\t// Return the name of the bean requested.\n\tString getBeanName();\n\t// Return the description of the resource that the bean definition came from.\n\tString getResourceDescription();\n}", "des": "Exception thrown when the BeanFactory cannot load the specified class of a given bean."}
{"index": 15284, "repo": "spring-beans-6.0.11", "code": "public class CglibSubclassingInstantiationStrategy extends SimpleInstantiationStrategy {\n\t// Determine the actual class for the given bean definition, as instantiated at runtime.\n\tClass<?> getActualBeanClass(RootBeanDefinition bd, String beanName, BeanFactory owner);\n}", "des": "Default object instantiation strategy for use in BeanFactories."}
{"index": 15285, "repo": "spring-beans-6.0.11", "code": "public class ChildBeanDefinition extends AbstractBeanDefinition {\n\t// Clone this bean definition.\n\tAbstractBeanDefinition cloneBeanDefinition();\n\tboolean equals(Object other);\n\t// Return the name of the parent definition of this bean definition, if any.\n\tString getParentName();\n\t// Set the name of the parent definition of this bean definition, if any.\n\tvoid setParentName(String parentName);\n\t// Validate this bean definition.\n\tvoid validate();\n}", "des": "Bean definition for beans which inherit settings from their parent."}
{"index": 15286, "repo": "spring-beans-6.0.11", "code": "public interface ComponentDefinition extends BeanMetadataElement {\n\t// Return the BeanDefinitions that were registered to form this ComponentDefinition.\n\tBeanDefinition[] getBeanDefinitions();\n\t// Return the set of BeanReferences that are considered to be important to this ComponentDefinition.\n\tBeanReference[] getBeanReferences();\n\t// Return a friendly description of the described component.\n\tString getDescription();\n}", "des": "Interface that describes the logical view of a set of BeanDefinitions and BeanReferences as presented in some configuration context."}
{"index": 15287, "repo": "spring-beans-6.0.11", "code": "public class CompositeComponentDefinition extends AbstractComponentDefinition {\n\t// Add the given component as nested element of this composite component.\n\tvoid addNestedComponent(ComponentDefinition component);\n\t// Get the user-visible name of this ComponentDefinition.\n\tString getName();\n\t// Return the nested components that this composite component holds.\n\tComponentDefinition[] getNestedComponents();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n}", "des": "ComponentDefinition implementation that holds one or more nested ComponentDefinition instances, aggregating them into a named group of components."}
{"index": 15288, "repo": "spring-beans-6.0.11", "code": "public interface ConfigurableBeanFactory extends HierarchicalBeanFactory, SingletonBeanRegistry {\n\t// Add a new BeanPostProcessor that will get applied to beans created by this factory.\n\tvoid addBeanPostProcessor(BeanPostProcessor beanPostProcessor);\n\t// Add a String resolver for embedded values such as annotation attributes.\n\tvoid addEmbeddedValueResolver(org.springframework.util.StringValueResolver valueResolver);\n}", "des": "Configuration interface to be implemented by most bean factories."}
{"index": 15289, "repo": "spring-beans-6.0.11", "code": "public interface ConfigurableListableBeanFactory extends ListableBeanFactory, AutowireCapableBeanFactory, ConfigurableBeanFactory {\n\t// Clear the merged bean definition cache, removing entries for beans which are not considered eligible for full metadata caching yet.\n\tvoid clearMetadataCache();\n\t// Freeze all bean definitions, signalling that the registered bean definitions will not be modified or post-processed any further.\n\tvoid freezeConfiguration();\n}", "des": "Configuration interface to be implemented by most listable bean factories."}
{"index": 15290, "repo": "spring-beans-6.0.11", "code": "public interface ConfigurablePropertyAccessor extends PropertyAccessor, PropertyEditorRegistry, TypeConverter {\n\t// Return the associated ConversionService, if any.\n\torg.springframework.core.convert.ConversionService getConversionService();\n\t// Return whether \"auto-growing\" of nested paths has been activated.\n\tboolean isAutoGrowNestedPaths();\n\t// Return whether to extract the old property value when applying a property editor to a new value for a property.\n\tboolean isExtractOldValueForEditor();\n}", "des": "Interface that encapsulates configuration methods for a PropertyAccessor."}
{"index": 15291, "repo": "spring-beans-6.0.11", "code": "public class ConstructorArgumentValues extends Object {\n\t// Copy all given argument values into this object, using separate holder instances to keep the values independent of the original object.\n\tvoid addArgumentValues(ConstructorArgumentValues other);\n\t// Add a generic argument value to be matched by type.\n\tvoid addGenericArgumentValue(Object value);\n\t// Add a generic argument value to be matched by type.\n\tvoid addGenericArgumentValue(Object value, String type);\n}", "des": "Holder for constructor argument values, typically as part of a bean definition."}
{"index": 15292, "repo": "spring-beans-6.0.11", "code": "public static class ConstructorArgumentValues.ValueHolder extends Object implements BeanMetadataElement {\n\t// Create a copy of this ValueHolder: that is, an independent ValueHolder instance with the same contents.\n\tConstructorArgumentValues.ValueHolder copy();\n\t// Return the converted value of the constructor argument, after processed type conversion.\n\tObject getConvertedValue();\n\t// Return the name of the constructor argument.\n\tString getName();\n}", "des": "Holder for a constructor argument value, with an optional type attribute indicating the target type of the actual constructor argument."}
{"index": 15293, "repo": "spring-beans-6.0.11", "code": "public class CustomAutowireConfigurer extends Object implements BeanFactoryPostProcessor, BeanClassLoaderAware, org.springframework.core.Ordered {\n\tint getOrder();\n\t// Modify the application context's internal bean factory after its standard initialization.\n\tvoid postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);\n\t// Callback that supplies the bean class loader to a bean instance.\n\tvoid setBeanClassLoader(ClassLoader beanClassLoader);\n}", "des": "A BeanFactoryPostProcessor implementation that allows for convenient registration of custom autowire qualifier types."}
{"index": 15294, "repo": "spring-beans-6.0.11", "code": "public class CustomCollectionEditor extends PropertyEditorSupport {\n\t// Return whether to always create a new Collection, even if the type of the passed-in Collection already matches.\n\tprotected boolean alwaysCreateNewCollection();\n\t// Hook to convert each encountered Collection/array element.\n\tprotected Object convertElement(Object element);\n}", "des": "Property editor for Collections, converting any source Collection to a given target Collection type."}
{"index": 15295, "repo": "spring-beans-6.0.11", "code": "public class CustomDateEditor extends PropertyEditorSupport {\n\t// Format the Date as String, using the specified DateFormat.\n\tString getAsText();\n\t// Parse the Date from the given text, using the specified DateFormat.\n\tvoid setAsText(String text);\n}", "des": "Property editor for java.util.Date, supporting a custom java.text.DateFormat."}
{"index": 15296, "repo": "spring-beans-6.0.11", "code": "public class CustomEditorConfigurer extends Object implements BeanFactoryPostProcessor, org.springframework.core.Ordered {\n\tint getOrder();\n\t// Modify the application context's internal bean factory after its standard initialization.\n\tvoid postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);\n}", "des": "BeanFactoryPostProcessor implementation that allows for convenient registration of custom property editors."}
{"index": 15297, "repo": "spring-beans-6.0.11", "code": "public class CustomMapEditor extends PropertyEditorSupport {\n\t// Return whether to always create a new Map, even if the type of the passed-in Map already matches.\n\tprotected boolean alwaysCreateNewMap();\n\t// Hook to convert each encountered Map key.\n\tprotected Object convertKey(Object key);\n\t// Hook to convert each encountered Map value.\n\tprotected Object convertValue(Object value);\n}", "des": "Property editor for Maps, converting any source Map to a given target Map type."}
{"index": 15298, "repo": "spring-beans-6.0.11", "code": "public class CustomNumberEditor extends PropertyEditorSupport {\n\t// Format the Number as String, using the specified NumberFormat.\n\tString getAsText();\n\t// Parse the Number from the given text, using the specified NumberFormat.\n\tvoid setAsText(String text);\n\t// Coerce a Number value into the required target class, if necessary.\n\tvoid setValue(Object value);\n}", "des": "Property editor for any Number subclass such as Short, Integer, Long, BigInteger, Float, Double, BigDecimal."}
{"index": 15299, "repo": "spring-beans-6.0.11", "code": "public class CustomScopeConfigurer extends Object implements BeanFactoryPostProcessor, BeanClassLoaderAware, org.springframework.core.Ordered {\n\t// Add the given scope to this configurer's map of scopes.\n\tvoid addScope(String scopeName, Scope scope);\n\tint getOrder();\n\t// Modify the application context's internal bean factory after its standard initialization.\n\tvoid postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);\n}", "des": "Simple BeanFactoryPostProcessor implementation that registers custom Scope(s) with the containing ConfigurableBeanFactory."}
{"index": 15300, "repo": "spring-beans-6.0.11", "code": "public class DefaultBeanDefinitionDocumentReader extends Object implements BeanDefinitionDocumentReader {\n\tprotected BeanDefinitionParserDelegate createDelegate(XmlReaderContext readerContext, Element root, BeanDefinitionParserDelegate parentDelegate);\n\t// Register each bean definition within the given root <beans/> element.\n\tprotected void doRegisterBeanDefinitions(Element root);\n}", "des": "Default implementation of the BeanDefinitionDocumentReader interface that reads bean definitions according to the \"spring-beans\" DTD and XSD format (Spring's default XML bean definition format)."}
{"index": 15301, "repo": "spring-beans-6.0.11", "code": "public class DefaultDocumentLoader extends Object implements DocumentLoader {\n\t// Create a JAXP DocumentBuilder that this bean definition reader will use for parsing XML documents.\n\tprotected DocumentBuilder createDocumentBuilder(DocumentBuilderFactory factory, EntityResolver entityResolver, ErrorHandler errorHandler);\n\t// Create the DocumentBuilderFactory instance.\n\tprotected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware);\n}", "des": "Spring's default DocumentLoader implementation."}
{"index": 15302, "repo": "spring-beans-6.0.11", "code": "public class DefaultListableBeanFactory extends AbstractAutowireCapableBeanFactory implements ConfigurableListableBeanFactory, BeanDefinitionRegistry, Serializable {\n\t// Only allows alias overriding if bean definition overriding is allowed.\n\tprotected boolean allowAliasOverriding();\n\t// Also checks for an alias overriding a bean definition of the same name.\n\tprotected void checkForAliasCircle(String name, String alias);\n}", "des": "Spring's default implementation of the ConfigurableListableBeanFactory and BeanDefinitionRegistry interfaces: a full-fledged bean factory based on bean definition metadata, extensible through post-processors."}
{"index": 15303, "repo": "spring-beans-6.0.11", "code": "public class DefaultSingletonBeanRegistry extends org.springframework.core.SimpleAliasRegistry implements SingletonBeanRegistry {\n\t// Add the given singleton object to the singleton cache of this factory.\n\tprotected void addSingleton(String beanName, Object singletonObject);\n\t// Add the given singleton factory for building the specified singleton if necessary.\n\tprotected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory);\n}", "des": "Generic registry for shared bean instances, implementing the SingletonBeanRegistry."}
{"index": 15304, "repo": "spring-beans-6.0.11", "code": "public class DependencyDescriptor extends InjectionPoint implements Serializable {\n\tboolean equals(Object other);\n\t// Return whether a fallback match is allowed.\n\tboolean fallbackMatchAllowed();\n\t// Return a variant of this descriptor that is intended for a fallback match.\n\tDependencyDescriptor forFallbackMatch();\n\t// Determine the name of the wrapped parameter/field.\n\tString getDependencyName();\n\t// Determine the declared (non-generic) type of the wrapped parameter/field.\n\tClass<?> getDependencyType();\n}", "des": "Descriptor for a specific dependency that is about to be injected."}
{"index": 15305, "repo": "spring-beans-6.0.11", "code": "public class DeprecatedBeanWarner extends Object implements BeanFactoryPostProcessor {\n\t// Determine whether the logger field is enabled.\n\tprotected boolean isLogEnabled();\n\t// Logs a warning for a bean annotated with @Deprecated.\n\tprotected void logDeprecatedBean(String beanName, Class<?> beanType, BeanDefinition beanDefinition);\n\t// Modify the application context's internal bean factory after its standard initialization.\n\tvoid postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);\n}", "des": "Bean factory post processor that logs a warning for @Deprecated beans."}
{"index": 15306, "repo": "spring-beans-6.0.11", "code": "public interface DestructionAwareBeanPostProcessor extends BeanPostProcessor {\n\t// Apply this BeanPostProcessor to the given bean instance before its destruction, e.g.\n\tvoid postProcessBeforeDestruction(Object bean, String beanName);\n\t// Determine whether the given bean instance requires destruction by this post-processor.\n\tdefault boolean requiresDestruction(Object bean);\n}", "des": "Subinterface of BeanPostProcessor that adds a before-destruction callback."}
{"index": 15307, "repo": "spring-beans-6.0.11", "code": "public class DirectFieldAccessor extends AbstractNestablePropertyAccessor {\n\t// Create a NotWritablePropertyException for the specified property.\n\tprotected NotWritablePropertyException createNotWritablePropertyException(String propertyName);\n\t// Return a AbstractNestablePropertyAccessor.PropertyHandler for the specified local propertyName.\n\tprotected org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler getLocalPropertyHandler(String propertyName);\n}", "des": "ConfigurablePropertyAccessor implementation that directly accesses instance fields."}
{"index": 15308, "repo": "spring-beans-6.0.11", "code": "public class DocumentDefaultsDefinition extends Object implements DefaultsDefinition {\n\t// Return the default autowire setting for the document that's currently parsed.\n\tString getAutowire();\n\t// Return the default autowire-candidate pattern for the document that's currently parsed.\n\tString getAutowireCandidates();\n\t// Return the default destroy-method setting for the document that's currently parsed.\n\tString getDestroyMethod();\n}", "des": "Simple JavaBean that holds the defaults specified at the <beans> level in a standard Spring XML bean definition document: default-lazy-init, default-autowire, etc."}
{"index": 15309, "repo": "spring-beans-6.0.11", "code": "public class EmptyReaderEventListener extends Object implements ReaderEventListener {\n\t// Notification that the given alias has been registered.\n\tvoid aliasRegistered(AliasDefinition aliasDefinition);\n\t// Notification that the given component has been registered.\n\tvoid componentRegistered(ComponentDefinition componentDefinition);\n\t// Notification that the given defaults has been registered.\n\tvoid defaultsRegistered(DefaultsDefinition defaultsDefinition);\n}", "des": "Empty implementation of the ReaderEventListener interface, providing no-op implementations of all callback methods."}
{"index": 15310, "repo": "spring-beans-6.0.11", "code": "public interface FactoryBean<T> {\n\t// Return an instance (possibly shared or independent) of the object managed by this factory.\n\tT getObject();\n\t// Return the type of object that this FactoryBean creates, or null if not known in advance.\n\tClass<?> getObjectType();\n\t// Is the object managed by this factory a singleton? That is, will getObject() always return the same object (a reference that can be cached)?\n\tdefault boolean isSingleton();\n}", "des": "Interface to be implemented by objects used within a BeanFactory which are themselves factories for individual objects."}
{"index": 15311, "repo": "spring-beans-6.0.11", "code": "public abstract class FactoryBeanRegistrySupport extends DefaultSingletonBeanRegistry {\n\t// Overridden to clear the FactoryBean object cache as well.\n\tprotected void clearSingletonCache();\n\t// Obtain an object to expose from the given FactoryBean, if available in cached form.\n\tprotected Object getCachedObjectForFactoryBean(String beanName);\n\t// Get a FactoryBean for the given bean if possible.\n\tprotected FactoryBean<?> getFactoryBean(String beanName, Object beanInstance);\n}", "des": "Support base class for singleton registries which need to handle FactoryBean instances, integrated with DefaultSingletonBeanRegistry's singleton management."}
{"index": 15312, "repo": "spring-beans-6.0.11", "code": "public class FailFastProblemReporter extends Object implements ProblemReporter {\n\t// Throws a BeanDefinitionParsingException detailing the error that has occurred.\n\tvoid error(Problem problem);\n\t// Throws a BeanDefinitionParsingException detailing the error that has occurred.\n\tvoid fatal(Problem problem);\n\t// Set the logger that is to be used to report warnings.\n\tvoid setLogger(org.apache.commons.logging.Log logger);\n\t// Writes the supplied Problem to the Log at WARN level.\n\tvoid warning(Problem problem);\n}", "des": "Simple ProblemReporter implementation that exhibits fail-fast behavior when errors are encountered."}
{"index": 15313, "repo": "spring-beans-6.0.11", "code": "public class FieldRetrievingFactoryBean extends Object implements FactoryBean<Object>, BeanNameAware, BeanClassLoaderAware, InitializingBean {\n\t// Invoked by the containing BeanFactory after it has set all bean properties and satisfied BeanFactoryAware, ApplicationContextAware etc.\n\tvoid afterPropertiesSet();\n\t// Return an instance (possibly shared or independent) of the object managed by this factory.\n\tObject getObject();\n}", "des": "FactoryBean which retrieves a static or non-static field value."}
{"index": 15314, "repo": "spring-beans-6.0.11", "code": "public class GenericBeanDefinition extends AbstractBeanDefinition {\n\t// Clone this bean definition.\n\tAbstractBeanDefinition cloneBeanDefinition();\n\tboolean equals(Object other);\n\t// Return the name of the parent definition of this bean definition, if any.\n\tString getParentName();\n\t// Set the name of the parent definition of this bean definition, if any.\n\tvoid setParentName(String parentName);\n}", "des": "GenericBeanDefinition is a one-stop shop for declarative bean definition purposes."}
{"index": 15315, "repo": "spring-beans-6.0.11", "code": "public class GenericTypeAwareAutowireCandidateResolver extends SimpleAutowireCandidateResolver implements BeanFactoryAware, Cloneable {\n\t// Match the given dependency type with its generic type information against the given candidate bean definition.\n\tprotected boolean checkGenericTypeMatch(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);\n}", "des": "Basic AutowireCandidateResolver that performs a full generic type match with the candidate's type if the dependency is declared as a generic type (e.g."}
{"index": 15316, "repo": "spring-beans-6.0.11", "code": "public class GroovyBeanDefinitionReader extends AbstractBeanDefinitionReader implements groovy.lang.GroovyObject {\n\tprotected void applyPropertyToBeanDefinition(String name, Object value);\n\t// Define an inner bean definition.\n\tGenericBeanDefinition bean(Class<?> type);\n\t// Define an inner bean definition.\n\tAbstractBeanDefinition bean(Class<?> type, Object... args);\n\t// Defines a set of beans for the given block or closure.\n\tGroovyBeanDefinitionReader beans(groovy.lang.Closure<?> closure);\n}", "des": "A Groovy-based reader for Spring bean definitions: like a Groovy builder, but more of a DSL for Spring configuration."}
{"index": 15317, "repo": "spring-beans-6.0.11", "code": "public interface HierarchicalBeanFactory extends BeanFactory {\n\t// Return whether the local bean factory contains a bean of the given name, ignoring beans defined in ancestor contexts.\n\tboolean containsLocalBean(String name);\n\t// Return the parent bean factory, or null if there is none.\n\tBeanFactory getParentBeanFactory();\n}", "des": "Sub-interface implemented by bean factories that can be part of a hierarchy."}
{"index": 15318, "repo": "spring-beans-6.0.11", "code": "public class ImportDefinition extends Object implements BeanMetadataElement {\n\tfinal org.springframework.core.io.Resource[] getActualResources();\n\t// Return the location of the imported resource.\n\tfinal String getImportedResource();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tfinal Object getSource();\n}", "des": "Representation of an import that has been processed during the parsing process."}
{"index": 15319, "repo": "spring-beans-6.0.11", "code": "public class InitDestroyAnnotationBeanPostProcessor extends Object implements DestructionAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor, BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, Serializable {\n\t// Add a destroy annotation to check for, indicating destruction methods to call when the context is shutting down.\n\tvoid addDestroyAnnotationType(Class<? extends Annotation> destroyAnnotationType);\n}", "des": "BeanPostProcessor implementation that invokes annotated init and destroy methods."}
{"index": 15320, "repo": "spring-beans-6.0.11", "code": "public class InjectionMetadata extends Object {\n\tvoid checkConfigMembers(RootBeanDefinition beanDefinition);\n\t// Clear property skipping for the contained elements.\n\tvoid clear(PropertyValues pvs);\n\t// Return an InjectionMetadata instance, possibly for empty elements.\n\tstatic InjectionMetadata forElements(Collection<InjectionMetadata.InjectedElement> elements, Class<?> clazz);\n\t// Return the elements to inject.\n\tCollection<InjectionMetadata.InjectedElement> getInjectedElements();\n}", "des": "Internal class for managing injection metadata."}
{"index": 15321, "repo": "spring-beans-6.0.11", "code": "public abstract static class InjectionMetadata.InjectedElement extends Object {\n\t// Check whether this injector's property needs to be skipped due to an explicit property value having been specified.\n\tprotected boolean checkPropertySkipping(PropertyValues pvs);\n\tprotected final void checkResourceType(Class<?> resourceType);\n\t// Clear property skipping for this element.\n\tprotected void clearPropertySkipping(PropertyValues pvs);\n\tboolean equals(Object other);\n\tfinal Member getMember();\n}", "des": "A single injected element."}
{"index": 15322, "repo": "spring-beans-6.0.11", "code": "public class InjectionPoint extends Object {\n\tboolean equals(Object other);\n\t// Return the wrapped annotated element.\n\tAnnotatedElement getAnnotatedElement();\n\t// Retrieve a field/parameter annotation of the given type, if any.\n\t<A extends Annotation>A getAnnotation(Class<A> annotationType);\n\t// Obtain the annotations associated with the wrapped field or method/constructor parameter.\n\tAnnotation[] getAnnotations();\n}", "des": "A simple descriptor for an injection point, pointing to a method/constructor parameter or a field."}
{"index": 15323, "repo": "spring-beans-6.0.11", "code": "@FunctionalInterface public interface InstanceSupplier<T> extends org.springframework.util.function.ThrowingSupplier<T> {\n\t// Return a composed instance supplier that first obtains the instance from this supplier and then applies the after function to obtain the result.\n\tdefault <V> InstanceSupplier<V> andThen(org.springframework.util.function.ThrowingBiFunction<RegisteredBean,? super T,? extends V> after);\n\t// Get the supplied instance.\n\tT get(RegisteredBean registeredBean);\n}", "des": "Specialized Supplier that can be set on a BeanDefinition when details about the registered bean are needed to supply the instance."}
{"index": 15324, "repo": "spring-beans-6.0.11", "code": "public interface InstantiationAwareBeanPostProcessor extends BeanPostProcessor {\n\t// Perform operations after the bean has been instantiated, via a constructor or factory method, but before Spring property population (from explicit properties or autowiring) occurs.\n\tdefault boolean postProcessAfterInstantiation(Object bean, String beanName);\n\t// Apply this BeanPostProcessor before the target bean gets instantiated.\n\tdefault Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName);\n}", "des": "Subinterface of BeanPostProcessor that adds a before-instantiation callback, and a callback after instantiation but before explicit properties are set or autowiring occurs."}
{"index": 15325, "repo": "spring-beans-6.0.11", "code": "public interface InstantiationStrategy {\n\t// Determine the actual class for the given bean definition, as instantiated at runtime.\n\tdefault Class<?> getActualBeanClass(RootBeanDefinition bd, String beanName, BeanFactory owner);\n\t// Return an instance of the bean with the given name in this factory.\n\tObject instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner);\n}", "des": "Interface responsible for creating instances corresponding to a root bean definition."}
{"index": 15326, "repo": "spring-beans-6.0.11", "code": "public class InvalidPropertyException extends FatalBeanException {\n\t// Return the offending bean class.\n\tClass<?> getBeanClass();\n\t// Return the name of the offending property.\n\tString getPropertyName();\n}", "des": "Exception thrown when referring to an invalid bean property."}
{"index": 15327, "repo": "spring-beans-6.0.11", "code": "public interface ListableBeanFactory extends BeanFactory {\n\t// Check if this bean factory contains a bean definition with the given name.\n\tboolean containsBeanDefinition(String beanName);\n}", "des": "Extension of the BeanFactory interface to be implemented by bean factories that can enumerate all their bean instances, rather than attempting bean lookup by name one by one as requested by clients."}
{"index": 15328, "repo": "spring-beans-6.0.11", "code": "public class ListFactoryBean extends AbstractFactoryBean<List<Object>> {\n\t// Template method that subclasses must override to construct the object returned by this factory.\n\tprotected List<Object> createInstance();\n\t// This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tClass<List> getObjectType();\n\t// Set the source List, typically populated via XML \"list\" elements.\n\tvoid setSourceList(List<?> sourceList);\n}", "des": "Simple factory for shared List instances."}
{"index": 15329, "repo": "spring-beans-6.0.11", "code": "public class Location extends Object {\n\t// Get the resource with which this location is associated.\n\torg.springframework.core.io.Resource getResource();\n\t// Get the actual location within the associated resource (may be null).\n\tObject getSource();\n}", "des": "Class that models an arbitrary location in a resource."}
{"index": 15330, "repo": "spring-beans-6.0.11", "code": "public class LookupOverride extends MethodOverride {\n\tboolean equals(Object other);\n\t// Return the name of the bean that should be returned by this method.\n\tString getBeanName();\n\t// Match the specified method by Method reference or method name.\n\tboolean matches(Method method);\n}", "des": "Represents an override of a method that looks up an object in the same IoC context, either by bean name or by bean type (based on the declared method return type)."}
{"index": 15331, "repo": "spring-beans-6.0.11", "code": "public class ManagedList<E> extends ArrayList<E> implements Mergeable, BeanMetadataElement {\n\t// Return the default element type name (class name) to be used for this list.\n\tString getElementTypeName();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n\t// Is merging enabled for this particular instance?\n\tboolean isMergeEnabled();\n\t// Merge the current value set with that of the supplied object.\n\tList<E> merge(Object parent);\n}", "des": "Tag collection class used to hold managed List elements, which may include runtime bean references (to be resolved into bean objects)."}
{"index": 15332, "repo": "spring-beans-6.0.11", "code": "public class ManagedMap<K,V> extends LinkedHashMap<K,V> implements Mergeable, BeanMetadataElement {\n\t// Return the default key type name (class name) to be used for this map.\n\tString getKeyTypeName();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n\t// Return the default value type name (class name) to be used for this map.\n\tString getValueTypeName();\n\t// Is merging enabled for this particular instance?\n\tboolean isMergeEnabled();\n}", "des": "Tag collection class used to hold managed Map values, which may include runtime bean references (to be resolved into bean objects)."}
{"index": 15333, "repo": "spring-beans-6.0.11", "code": "public class ManagedProperties extends Properties implements Mergeable, BeanMetadataElement {\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n\t// Is merging enabled for this particular instance?\n\tboolean isMergeEnabled();\n\t// Merge the current value set with that of the supplied object.\n\tObject merge(Object parent);\n}", "des": "Tag class which represents a Spring-managed Properties instance that supports merging of parent/child definitions."}
{"index": 15334, "repo": "spring-beans-6.0.11", "code": "public class ManagedSet<E> extends LinkedHashSet<E> implements Mergeable, BeanMetadataElement {\n\t// Return the default element type name (class name) to be used for this set.\n\tString getElementTypeName();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n\t// Is merging enabled for this particular instance?\n\tboolean isMergeEnabled();\n\t// Merge the current value set with that of the supplied object.\n\tSet<E> merge(Object parent);\n}", "des": "Tag collection class used to hold managed Set values, which may include runtime bean references (to be resolved into bean objects)."}
{"index": 15335, "repo": "spring-beans-6.0.11", "code": "public class MapFactoryBean extends AbstractFactoryBean<Map<Object,Object>> {\n\t// Template method that subclasses must override to construct the object returned by this factory.\n\tprotected Map<Object,Object> createInstance();\n\t// This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tClass<Map> getObjectType();\n\t// Set the source Map, typically populated via XML \"map\" elements.\n\tvoid setSourceMap(Map<?,?> sourceMap);\n}", "des": "Simple factory for shared Map instances."}
{"index": 15336, "repo": "spring-beans-6.0.11", "code": "public interface Mergeable {\n\t// Is merging enabled for this particular instance?\n\tboolean isMergeEnabled();\n\t// Merge the current value set with that of the supplied object.\n\tObject merge(Object parent);\n}", "des": "Interface representing an object whose value set can be merged with that of a parent object."}
{"index": 15337, "repo": "spring-beans-6.0.11", "code": "public interface MergedBeanDefinitionPostProcessor extends BeanPostProcessor {\n\t// Post-process the given merged bean definition for the specified bean.\n\tvoid postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName);\n\t// A notification that the bean definition for the specified name has been reset, and that this post-processor should clear any metadata for the affected bean.\n\tdefault void resetBeanDefinition(String beanName);\n}", "des": "Post-processor callback interface for merged bean definitions at runtime."}
{"index": 15338, "repo": "spring-beans-6.0.11", "code": "public class MethodInvokingBean extends ArgumentConvertingMethodInvoker implements BeanClassLoaderAware, BeanFactoryAware, InitializingBean {\n\t// Invoked by the containing BeanFactory after it has set all bean properties and satisfied BeanFactoryAware, ApplicationContextAware etc.\n\tvoid afterPropertiesSet();\n\t// Obtain the TypeConverter from the BeanFactory that this bean runs in, if possible.\n\tprotected TypeConverter getDefaultTypeConverter();\n}", "des": "Simple method invoker bean: just invoking a target method, not expecting a result to expose to the container (in contrast to MethodInvokingFactoryBean)."}
{"index": 15339, "repo": "spring-beans-6.0.11", "code": "public class MethodInvokingFactoryBean extends MethodInvokingBean implements FactoryBean<Object> {\n\t// Invoked by the containing BeanFactory after it has set all bean properties and satisfied BeanFactoryAware, ApplicationContextAware etc.\n\tvoid afterPropertiesSet();\n\t// Returns the same value each time if the singleton property is set to \"true\", otherwise returns the value returned from invoking the specified method on the fly.\n\tObject getObject();\n}", "des": "FactoryBean which returns a value which is the result of a static or instance method invocation."}
{"index": 15340, "repo": "spring-beans-6.0.11", "code": "public abstract class MethodOverride extends Object implements BeanMetadataElement {\n\tboolean equals(Object other);\n\t// Return the name of the method to be overridden.\n\tString getMethodName();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n\t// Return whether the overridden method is overloaded (i.e., whether argument type matching needs to occur to disambiguate methods of the same name).\n\tprotected boolean isOverloaded();\n}", "des": "Object representing the override of a method on a managed object by the IoC container."}
{"index": 15341, "repo": "spring-beans-6.0.11", "code": "public class MethodOverrides extends Object {\n\t// Add the given method override.\n\tvoid addOverride(MethodOverride override);\n\t// Copy all given method overrides into this object.\n\tvoid addOverrides(MethodOverrides other);\n\tboolean equals(Object other);\n\t// Return the override for the given method, if any.\n\tMethodOverride getOverride(Method method);\n\t// Return all method overrides contained by this object.\n\tSet<MethodOverride> getOverrides();\n}", "des": "Set of method overrides, determining which, if any, methods on a managed object the Spring IoC container will override at runtime."}
{"index": 15342, "repo": "spring-beans-6.0.11", "code": "public class MutablePropertyValues extends Object implements PropertyValues, Serializable {\n\t// Add a PropertyValue object, replacing any existing one for the corresponding property or getting merged with it (if applicable).\n\tMutablePropertyValues add(String propertyName, Object propertyValue);\n\t// Overloaded version of addPropertyValue that takes a property name and a property value.\n\tvoid addPropertyValue(String propertyName, Object propertyValue);\n}", "des": "The default implementation of the PropertyValues interface."}
{"index": 15343, "repo": "spring-beans-6.0.11", "code": "public class MutableSortDefinition extends Object implements SortDefinition, Serializable {\n\tboolean equals(Object other);\n\t// Return the name of the bean property to compare.\n\tString getProperty();\n\t// Return whether to sort ascending (true) or descending (false).\n\tboolean isAscending();\n\t// Return whether upper and lower case in String values should be ignored.\n\tboolean isIgnoreCase();\n}", "des": "Mutable implementation of the SortDefinition interface."}
{"index": 15344, "repo": "spring-beans-6.0.11", "code": "public class NamedBeanHolder<T> extends Object implements NamedBean {\n\t// Return the corresponding bean instance.\n\tT getBeanInstance();\n\t// Return the name of the bean.\n\tString getBeanName();\n}", "des": "A simple holder for a given bean name plus bean instance."}
{"index": 15345, "repo": "spring-beans-6.0.11", "code": "public interface NamespaceHandler {\n\t// Parse the specified Node and decorate the supplied BeanDefinitionHolder, returning the decorated definition.\n\tBeanDefinitionHolder decorate(Node source, BeanDefinitionHolder definition, ParserContext parserContext);\n\t// Invoked by the DefaultBeanDefinitionDocumentReader after construction but before any custom elements are parsed.\n\tvoid init();\n}", "des": "Base interface used by the DefaultBeanDefinitionDocumentReader for handling custom namespaces in a Spring XML configuration file."}
{"index": 15346, "repo": "spring-beans-6.0.11", "code": "public abstract class NamespaceHandlerSupport extends Object implements NamespaceHandler {\n\t// Decorates the supplied Node by delegating to the BeanDefinitionDecorator that is registered to handle that Node.\n\tBeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext);\n\t// Parses the supplied Element by delegating to the BeanDefinitionParser that is registered for that Element.\n\tBeanDefinition parse(Element element, ParserContext parserContext);\n}", "des": "Support class for implementing custom NamespaceHandlers."}
{"index": 15347, "repo": "spring-beans-6.0.11", "code": "public class NoSuchBeanDefinitionException extends BeansException {\n\t// Return the name of the missing bean, if it was a lookup by name that failed.\n\tString getBeanName();\n\t// Return the required type of the missing bean, if it was a lookup by type that failed.\n\tClass<?> getBeanType();\n\t// Return the number of beans found when only one matching bean was expected.\n\tint getNumberOfBeansFound();\n}", "des": "Exception thrown when a BeanFactory is asked for a bean instance for which it cannot find a definition."}
{"index": 15348, "repo": "spring-beans-6.0.11", "code": "public class NoUniqueBeanDefinitionException extends NoSuchBeanDefinitionException {\n\t// Return the names of all beans found when only one matching bean was expected.\n\tCollection<String> getBeanNamesFound();\n\t// Return the number of beans found when only one matching bean was expected.\n\tint getNumberOfBeansFound();\n}", "des": "Exception thrown when a BeanFactory is asked for a bean instance for which multiple matching candidates have been found when only one matching bean was expected."}
{"index": 15349, "repo": "spring-beans-6.0.11", "code": "public class ObjectFactoryCreatingFactoryBean extends AbstractFactoryBean<ObjectFactory<Object>> {\n\t// Eagerly create the singleton instance, if necessary.\n\tvoid afterPropertiesSet();\n\t// Template method that subclasses must override to construct the object returned by this factory.\n\tprotected ObjectFactory<Object> createInstance();\n\t// This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tClass<?> getObjectType();\n}", "des": "A FactoryBean implementation that returns a value which is an ObjectFactory that in turn returns a bean sourced from a BeanFactory."}
{"index": 15350, "repo": "spring-beans-6.0.11", "code": "public interface ObjectProvider<T> extends ObjectFactory<T>, Iterable<T> {\n\t// Return an instance (possibly shared or independent) of the object managed by this factory.\n\tT getIfAvailable();\n\t// Return an instance (possibly shared or independent) of the object managed by this factory.\n\tdefault T getIfAvailable(Supplier<T> defaultSupplier);\n\t// Return an instance (possibly shared or independent) of the object managed by this factory.\n\tT getIfUnique();\n}", "des": "A variant of ObjectFactory designed specifically for injection points, allowing for programmatic optionality and lenient not-unique handling."}
{"index": 15351, "repo": "spring-beans-6.0.11", "code": "public class PagedListHolder<E> extends Object implements Serializable {\n\t// Create a deep copy of the given sort definition, for use as state holder to compare a modified sort definition against.\n\tprotected SortDefinition copySortDefinition(SortDefinition sort);\n\t// Actually perform sorting of the given source list, according to the given sort definition.\n\tprotected void doSort(List<E> source, SortDefinition sort);\n}", "des": "PagedListHolder is a simple state holder for handling lists of objects, separating them into pages."}
{"index": 15352, "repo": "spring-beans-6.0.11", "code": "public final class ParameterResolutionDelegate extends Object {\n\t// Determine if the supplied Parameter can potentially be autowired from an AutowireCapableBeanFactory.\n\tstatic boolean isAutowirable(Parameter parameter, int parameterIndex);\n\t// Resolve the dependency for the supplied Parameter from the supplied AutowireCapableBeanFactory.\n\tstatic Object resolveDependency(Parameter parameter, int parameterIndex, Class<?> containingClass, AutowireCapableBeanFactory beanFactory);\n}", "des": "Public delegate for resolving autowirable parameters on externally managed constructors and methods."}
{"index": 15353, "repo": "spring-beans-6.0.11", "code": "public final class ParseState extends Object {\n\t// Return the ParseState.Entry currently at the top of the ArrayDeque or null if the ArrayDeque is empty.\n\tParseState.Entry peek();\n\t// Remove an ParseState.Entry from the ArrayDeque.\n\tvoid pop();\n\t// Add a new ParseState.Entry to the ArrayDeque.\n\tvoid push(ParseState.Entry entry);\n\t// Create a new instance of ParseState which is an independent snapshot of this instance.\n\tParseState snapshot();\n}", "des": "Simple ArrayDeque-based structure for tracking the logical position during a parsing process."}
{"index": 15354, "repo": "spring-beans-6.0.11", "code": "public abstract class PlaceholderConfigurerSupport extends PropertyResourceConfigurer implements BeanNameAware, BeanFactoryAware {\n\tprotected void doProcessProperties(ConfigurableListableBeanFactory beanFactoryToProcess, org.springframework.util.StringValueResolver valueResolver);\n\t// Only necessary to check that we're not parsing our own bean definition, to avoid failing on unresolvable placeholders in properties file locations.\n\tvoid setBeanFactory(BeanFactory beanFactory);\n}", "des": "Abstract base class for property resource configurers that resolve placeholders in bean definition property values."}
{"index": 15355, "repo": "spring-beans-6.0.11", "code": "public class Problem extends Object {\n\t// Get the location within a bean configuration source that triggered the error.\n\tLocation getLocation();\n\t// Get the message detailing the problem.\n\tString getMessage();\n\t// Get the ParseState at the time of the error (may be null).\n\tParseState getParseState();\n\t// Get the description of the bean configuration source that triggered the error, as contained within this Problem's Location object.\n\tString getResourceDescription();\n}", "des": "Represents a problem with a bean definition configuration."}
{"index": 15356, "repo": "spring-beans-6.0.11", "code": "public interface ProblemReporter {\n\t// Called when an error is encountered during the parsing process.\n\tvoid error(Problem problem);\n\t// Called when a fatal error is encountered during the parsing process.\n\tvoid fatal(Problem problem);\n\t// Called when a warning is raised during the parsing process.\n\tvoid warning(Problem problem);\n}", "des": "SPI interface allowing tools and other external processes to handle errors and warnings reported during bean definition parsing."}
{"index": 15357, "repo": "spring-beans-6.0.11", "code": "public class PropertiesEditor extends PropertyEditorSupport {\n\t// Convert String into Properties, considering it as properties content.\n\tvoid setAsText(String text);\n\t// Take Properties as-is; convert Map into Properties.\n\tvoid setValue(Object value);\n}", "des": "Custom PropertyEditor for Properties objects."}
{"index": 15358, "repo": "spring-beans-6.0.11", "code": "public class PropertiesFactoryBean extends org.springframework.core.io.support.PropertiesLoaderSupport implements FactoryBean<Properties>, InitializingBean {\n\t// Invoked by the containing BeanFactory after it has set all bean properties and satisfied BeanFactoryAware, ApplicationContextAware etc.\n\tfinal void afterPropertiesSet();\n\t// Template method that subclasses may override to construct the object returned by this factory.\n\tprotected Properties createProperties();\n}", "des": "Allows for making a properties file from a classpath location available as Properties instance in a bean factory."}
{"index": 15359, "repo": "spring-beans-6.0.11", "code": "public abstract class PropertyAccessException extends BeansException {\n\t// Return a corresponding error code for this type of exception.\n\tabstract String getErrorCode();\n\t// Return the PropertyChangeEvent that resulted in the problem.\n\tPropertyChangeEvent getPropertyChangeEvent();\n\t// Return the name of the affected property, if available.\n\tString getPropertyName();\n\t// Return the affected value that was about to be set, if any.\n\tObject getValue();\n}", "des": "Superclass for exceptions related to a property access, such as type mismatch or invocation target exception."}
{"index": 15360, "repo": "spring-beans-6.0.11", "code": "public interface PropertyAccessor {\n\t// Determine the property type for the specified property, either checking the property descriptor or checking the value in case of an indexed or mapped element.\n\tClass<?> getPropertyType(String propertyName);\n\t// Return a type descriptor for the specified property: preferably from the read method, falling back to the write method.\n\torg.springframework.core.convert.TypeDescriptor getPropertyTypeDescriptor(String propertyName);\n}", "des": "Common interface for classes that can access named properties (such as bean properties of an object or fields in an object)."}
{"index": 15361, "repo": "spring-beans-6.0.11", "code": "public final class PropertyAccessorFactory extends Object {\n\t// Obtain a BeanWrapper for the given target object, accessing properties in JavaBeans style.\n\tstatic BeanWrapper forBeanPropertyAccess(Object target);\n\t// Obtain a PropertyAccessor for the given target object, accessing properties in direct field style.\n\tstatic ConfigurablePropertyAccessor forDirectFieldAccess(Object target);\n}", "des": "Simple factory facade for obtaining PropertyAccessor instances, in particular for BeanWrapper instances."}
{"index": 15362, "repo": "spring-beans-6.0.11", "code": "public abstract class PropertyAccessorUtils extends Object {\n\t// Determine the canonical name for the given property path.\n\tstatic String canonicalPropertyName(String propertyName);\n\t// Determine the canonical names for the given property paths.\n\tstatic String[] canonicalPropertyNames(String[] propertyNames);\n\t// Determine the first nested property separator in the given property path, ignoring dots in keys (like \"map[my.key]\").\n\tstatic int getFirstNestedPropertySeparatorIndex(String propertyPath);\n}", "des": "Utility methods for classes that perform bean property access according to the PropertyAccessor interface."}
{"index": 15363, "repo": "spring-beans-6.0.11", "code": "public class PropertyBatchUpdateException extends BeansException {\n\tboolean contains(Class<?> exType);\n\t// If this returns 0, no errors were encountered during binding.\n\tfinal int getExceptionCount();\n\tString getMessage();\n\t// Return the exception for this field, or null if there isn't any.\n\tPropertyAccessException getPropertyAccessException(String propertyName);\n\t// Return an array of the propertyAccessExceptions stored in this object.\n\tfinal PropertyAccessException[] getPropertyAccessExceptions();\n}", "des": "Combined exception, composed of individual PropertyAccessException instances."}
{"index": 15364, "repo": "spring-beans-6.0.11", "code": "public class PropertyComparator<T> extends Object implements Comparator<T> {\n\tint compare(T o1, T o2);\n\t// Return the SortDefinition that this comparator uses.\n\tfinal SortDefinition getSortDefinition();\n\t// Sort the given source according to the given sort definition.\n\tstatic void sort(Object[] source, SortDefinition sortDefinition);\n\t// Sort the given List according to the given sort definition.\n\tstatic void sort(List<?> source, SortDefinition sortDefinition);\n}", "des": "PropertyComparator performs a comparison of two beans, evaluating the specified bean property via a BeanWrapper."}
{"index": 15365, "repo": "spring-beans-6.0.11", "code": "public interface PropertyEditorRegistry {\n\t// Find a custom property editor for the given type and property.\n\tPropertyEditor findCustomEditor(Class<?> requiredType, String propertyPath);\n\t// Register the given custom property editor for all properties of the given type.\n\tvoid registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor);\n}", "des": "Encapsulates methods for registering JavaBeans PropertyEditors."}
{"index": 15366, "repo": "spring-beans-6.0.11", "code": "public class PropertyEditorRegistrySupport extends Object implements PropertyEditorRegistry {\n\t// Copy the custom editors registered in this instance to the given target registry.\n\tprotected void copyCustomEditorsTo(PropertyEditorRegistry target, String nestedProperty);\n\t// Copy the default editors registered in this instance to the given target registry.\n\tprotected void copyDefaultEditorsTo(PropertyEditorRegistrySupport target);\n}", "des": "Base implementation of the PropertyEditorRegistry interface."}
{"index": 15367, "repo": "spring-beans-6.0.11", "code": "public abstract class PropertyMatches extends Object {\n\tprotected void appendHintMessage(StringBuilder msg);\n\t// Build an error message for the given invalid property name, indicating the possible property matches.\n\tabstract String buildErrorMessage();\n\t// Create PropertyMatches for the given field property.\n\tstatic PropertyMatches forField(String propertyName, Class<?> beanClass);\n}", "des": "Helper class for calculating property matches, according to a configurable distance."}
{"index": 15368, "repo": "spring-beans-6.0.11", "code": "public class PropertyOverrideConfigurer extends PropertyResourceConfigurer {\n\t// Apply the given property value to the corresponding bean.\n\tprotected void applyPropertyValue(ConfigurableListableBeanFactory factory, String beanName, String property, String value);\n\t// Were there overrides for this bean? Only valid after processing has occurred at least once.\n\tboolean hasPropertyOverridesFor(String beanName);\n}", "des": "Property resource configurer that overrides bean property values in an application context definition."}
{"index": 15369, "repo": "spring-beans-6.0.11", "code": "public class PropertyPathFactoryBean extends Object implements FactoryBean<Object>, BeanNameAware, BeanFactoryAware {\n\t// Return an instance (possibly shared or independent) of the object managed by this factory.\n\tObject getObject();\n\t// Return the type of object that this FactoryBean creates, or null if not known in advance.\n\tClass<?> getObjectType();\n}", "des": "FactoryBean that evaluates a property path on a given target object."}
{"index": 15370, "repo": "spring-beans-6.0.11", "code": "public abstract class PropertyResourceConfigurer extends org.springframework.core.io.support.PropertiesLoaderSupport implements BeanFactoryPostProcessor, org.springframework.core.PriorityOrdered {\n\t// Convert the given merged properties, converting property values if necessary.\n\tprotected void convertProperties(Properties props);\n\t// Convert the given property from the properties source to the value which should be applied.\n\tprotected String convertProperty(String propertyName, String propertyValue);\n}", "des": "Allows for configuration of individual bean property values from a property resource, i.e."}
{"index": 15371, "repo": "spring-beans-6.0.11", "code": "public class PropertyValue extends BeanMetadataAttributeAccessor implements Serializable {\n\tboolean equals(Object other);\n\t// Return the converted value of this property value, after processed type conversion.\n\tObject getConvertedValue();\n\t// Return the name of the property.\n\tString getName();\n\t// Return the original PropertyValue instance for this value holder.\n\tPropertyValue getOriginalPropertyValue();\n\t// Return the value of the property.\n\tObject getValue();\n}", "des": "Object to hold information and value for an individual bean property."}
{"index": 15372, "repo": "spring-beans-6.0.11", "code": "public interface PropertyValues extends Iterable<PropertyValue> {\n\t// Return the changes since the previous PropertyValues.\n\tPropertyValues changesSince(PropertyValues old);\n\t// Is there a property value (or other processing entry) for this property?\n\tboolean contains(String propertyName);\n\t// Return the property value with the given name, if any.\n\tPropertyValue getPropertyValue(String propertyName);\n}", "des": "Holder containing one or more PropertyValue objects, typically comprising one update for a specific target bean."}
{"index": 15373, "repo": "spring-beans-6.0.11", "code": "public class ProviderCreatingFactoryBean extends AbstractFactoryBean<Provider<Object>> {\n\t// Eagerly create the singleton instance, if necessary.\n\tvoid afterPropertiesSet();\n\t// Template method that subclasses must override to construct the object returned by this factory.\n\tprotected Provider<Object> createInstance();\n\t// This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tClass<?> getObjectType();\n}", "des": "A FactoryBean implementation that returns a value which is a JSR-330 Provider that in turn returns a bean sourced from a BeanFactory."}
{"index": 15374, "repo": "spring-beans-6.0.11", "code": "public class QualifierAnnotationAutowireCandidateResolver extends GenericTypeAwareAutowireCandidateResolver {\n\t// Register the given type to be used as a qualifier when autowiring.\n\tvoid addQualifierType(Class<? extends Annotation> qualifierType);\n\t// Match the given qualifier annotation against the candidate bean definition.\n\tprotected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);\n}", "des": "AutowireCandidateResolver implementation that matches bean definition qualifiers against qualifier annotations on the field or parameter to be autowired."}
{"index": 15375, "repo": "spring-beans-6.0.11", "code": "public class ReaderContext extends Object {\n\t// Raise a regular error.\n\tvoid error(String message, Object source);\n\t// Raise a regular error.\n\tvoid error(String message, Object source, Throwable cause);\n\t// Raise a regular error.\n\tvoid error(String message, Object source, ParseState parseState);\n\t// Raise a regular error.\n\tvoid error(String message, Object source, ParseState parseState, Throwable cause);\n}", "des": "Context that gets passed along a bean definition reading process, encapsulating all relevant configuration as well as state."}
{"index": 15376, "repo": "spring-beans-6.0.11", "code": "public interface ReaderEventListener extends EventListener {\n\t// Notification that the given alias has been registered.\n\tvoid aliasRegistered(AliasDefinition aliasDefinition);\n\t// Notification that the given component has been registered.\n\tvoid componentRegistered(ComponentDefinition componentDefinition);\n\t// Notification that the given defaults has been registered.\n\tvoid defaultsRegistered(DefaultsDefinition defaultsDefinition);\n}", "des": "Interface that receives callbacks for component, alias and import registrations during a bean definition reading process."}
{"index": 15377, "repo": "spring-beans-6.0.11", "code": "public final class RegisteredBean extends Object {\n\t// Return the user-defined class of the bean.\n\tClass<?> getBeanClass();\n\t// Return the bean factory containing the bean.\n\tConfigurableListableBeanFactory getBeanFactory();\n\t// Return the name of the bean.\n\tString getBeanName();\n\t// Return the ResolvableType of the bean.\n\torg.springframework.core.ResolvableType getBeanType();\n\t// Return the merged bean definition of the bean.\n\tRootBeanDefinition getMergedBeanDefinition();\n}", "des": "A RegisteredBean represents a bean that has been registered with a BeanFactory, but has not necessarily been instantiated."}
{"index": 15378, "repo": "spring-beans-6.0.11", "code": "public class ReplaceOverride extends MethodOverride {\n\t// Add a fragment of a class string, like \"Exception\" or \"java.lang.Exc\", to identify a parameter type.\n\tvoid addTypeIdentifier(String identifier);\n\tboolean equals(Object other);\n\t// Return the name of the bean implementing MethodReplacer.\n\tString getMethodReplacerBeanName();\n\t// Subclasses must override this to indicate whether they match the given method.\n\tboolean matches(Method method);\n}", "des": "Extension of MethodOverride that represents an arbitrary override of a method by the IoC container."}
{"index": 15379, "repo": "spring-beans-6.0.11", "code": "public class RootBeanDefinition extends AbstractBeanDefinition {\n\t// Clone this bean definition.\n\tRootBeanDefinition cloneBeanDefinition();\n\tboolean equals(Object other);\n\t// Return the target definition that is being decorated by this bean definition, if any.\n\tBeanDefinitionHolder getDecoratedDefinition();\n\t// Get all externally managed configuration methods and fields (as an immutable Set).\n\tSet<Member> getExternallyManagedConfigMembers();\n}", "des": "A root bean definition represents the merged bean definition at runtime that backs a specific bean in a Spring BeanFactory."}
{"index": 15380, "repo": "spring-beans-6.0.11", "code": "public class RuntimeBeanNameReference extends Object implements BeanReference {\n\tboolean equals(Object other);\n\t// Return the target bean name that this reference points to (never null).\n\tString getBeanName();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n\t// Set the configuration source Object for this metadata element.\n\tvoid setSource(Object source);\n}", "des": "Immutable placeholder class used for a property value object when it's a reference to another bean name in the factory, to be resolved at runtime."}
{"index": 15381, "repo": "spring-beans-6.0.11", "code": "public class RuntimeBeanReference extends Object implements BeanReference {\n\tboolean equals(Object other);\n\t// Return the requested bean name, or the fully-qualified type name in case of by-type resolution.\n\tString getBeanName();\n\t// Return the requested bean type if resolution by type is demanded.\n\tClass<?> getBeanType();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n}", "des": "Immutable placeholder class used for a property value object when it's a reference to another bean in the factory, to be resolved at runtime."}
{"index": 15382, "repo": "spring-beans-6.0.11", "code": "public interface Scope {\n\t// Return the object with the given name from the underlying scope, creating it if not found in the underlying storage mechanism.\n\tObject get(String name, ObjectFactory<?> objectFactory);\n\t// Return the conversation ID for the current underlying scope, if any.\n\tString getConversationId();\n}", "des": "Strategy interface used by a ConfigurableBeanFactory, representing a target scope to hold bean instances in."}
{"index": 15383, "repo": "spring-beans-6.0.11", "code": "public class ServiceFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware {\n\t// Determine the actual object to expose for the given ServiceLoader.\n\tprotected Object getObjectToExpose(ServiceLoader<?> serviceLoader);\n\t// This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tClass<?> getObjectType();\n}", "des": "FactoryBean that exposes the 'primary' service for the configured service class, obtained through the JDK 1.6 ServiceLoader facility."}
{"index": 15384, "repo": "spring-beans-6.0.11", "code": "public class ServiceListFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware {\n\t// Determine the actual object to expose for the given ServiceLoader.\n\tprotected Object getObjectToExpose(ServiceLoader<?> serviceLoader);\n\t// This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tClass<?> getObjectType();\n}", "des": "FactoryBean that exposes all services for the configured service class, represented as a List of service objects, obtained through the JDK 1.6 ServiceLoader facility."}
{"index": 15385, "repo": "spring-beans-6.0.11", "code": "public class ServiceLoaderFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware {\n\t// Determine the actual object to expose for the given ServiceLoader.\n\tprotected Object getObjectToExpose(ServiceLoader<?> serviceLoader);\n\t// This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tClass<?> getObjectType();\n}", "des": "FactoryBean that exposes the JDK 1.6 ServiceLoader for the configured service class."}
{"index": 15386, "repo": "spring-beans-6.0.11", "code": "public class ServiceLocatorFactoryBean extends Object implements FactoryBean<Object>, BeanFactoryAware, InitializingBean {\n\t// Invoked by the containing BeanFactory after it has set all bean properties and satisfied BeanFactoryAware, ApplicationContextAware etc.\n\tvoid afterPropertiesSet();\n\t// Create a service locator exception for the given cause.\n\tprotected Exception createServiceLocatorException(Constructor<Exception> exceptionConstructor, BeansException cause);\n}", "des": "A FactoryBean implementation that takes an interface which must have one or more methods with the signatures MyType xxx() or MyType xxx(MyIdType id) (typically, MyService getService() or MyService getService(String id)) and creates a dynamic proxy which implements that interface, delegating to an underlying BeanFactory."}
{"index": 15387, "repo": "spring-beans-6.0.11", "code": "public class SetFactoryBean extends AbstractFactoryBean<Set<Object>> {\n\t// Template method that subclasses must override to construct the object returned by this factory.\n\tprotected Set<Object> createInstance();\n\t// This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tClass<Set> getObjectType();\n\t// Set the source Set, typically populated via XML \"set\" elements.\n\tvoid setSourceSet(Set<?> sourceSet);\n}", "des": "Simple factory for shared Set instances."}
{"index": 15388, "repo": "spring-beans-6.0.11", "code": "public class SimpleAutowireCandidateResolver extends Object implements AutowireCandidateResolver {\n\t// This implementation returns this as-is.\n\tAutowireCandidateResolver cloneIfNecessary();\n\t// Determine the proxy class for lazy resolution of the dependency target, if demanded by the injection point.\n\tClass<?> getLazyResolutionProxyClass(DependencyDescriptor descriptor, String beanName);\n}", "des": "AutowireCandidateResolver implementation to use when no annotation support is available."}
{"index": 15389, "repo": "spring-beans-6.0.11", "code": "public class SimpleBeanDefinitionRegistry extends org.springframework.core.SimpleAliasRegistry implements BeanDefinitionRegistry {\n\t// Check if this registry contains a bean definition with the given name.\n\tboolean containsBeanDefinition(String beanName);\n\t// Return the BeanDefinition for the given bean name.\n\tBeanDefinition getBeanDefinition(String beanName);\n\t// Return the number of beans defined in the registry.\n\tint getBeanDefinitionCount();\n}", "des": "Simple implementation of the BeanDefinitionRegistry interface."}
{"index": 15390, "repo": "spring-beans-6.0.11", "code": "public class SimpleConstructorNamespaceHandler extends Object implements NamespaceHandler {\n\t// Parse the specified Node and decorate the supplied BeanDefinitionHolder, returning the decorated definition.\n\tBeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext);\n\t// Invoked by the DefaultBeanDefinitionDocumentReader after construction but before any custom elements are parsed.\n\tvoid init();\n}", "des": "Simple NamespaceHandler implementation that maps custom attributes directly through to bean properties."}
{"index": 15391, "repo": "spring-beans-6.0.11", "code": "public class SimpleInstantiationStrategy extends Object implements InstantiationStrategy {\n\t// Return the factory method currently being invoked or null if none.\n\tstatic Method getCurrentlyInvokedFactoryMethod();\n\t// Return an instance of the bean with the given name in this factory.\n\tObject instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner);\n}", "des": "Simple object instantiation strategy for use in a BeanFactory."}
{"index": 15392, "repo": "spring-beans-6.0.11", "code": "public class SimplePropertyNamespaceHandler extends Object implements NamespaceHandler {\n\t// Parse the specified Node and decorate the supplied BeanDefinitionHolder, returning the decorated definition.\n\tBeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext);\n\t// Invoked by the DefaultBeanDefinitionDocumentReader after construction but before any custom elements are parsed.\n\tvoid init();\n}", "des": "Simple NamespaceHandler implementation that maps custom attributes directly through to bean properties."}
{"index": 15393, "repo": "spring-beans-6.0.11", "code": "public interface SingletonBeanRegistry {\n\t// Check if this registry contains a singleton instance with the given name.\n\tboolean containsSingleton(String beanName);\n\t// Return the (raw) singleton object registered under the given name.\n\tObject getSingleton(String beanName);\n\t// Return the number of singleton beans registered in this registry.\n\tint getSingletonCount();\n\t// Return the singleton mutex used by this registry (for external collaborators).\n\tObject getSingletonMutex();\n}", "des": "Interface that defines a registry for shared bean instances."}
{"index": 15394, "repo": "spring-beans-6.0.11", "code": "public interface SmartFactoryBean<T> extends FactoryBean<T> {\n\t// Does this FactoryBean expect eager initialization, that is, eagerly initialize itself as well as expect eager initialization of its singleton object (if any)?\n\tdefault boolean isEagerInit();\n\t// Is the object managed by this factory a prototype? That is, will FactoryBean.getObject() always return an independent instance?\n\tdefault boolean isPrototype();\n}", "des": "Extension of the FactoryBean interface."}
{"index": 15395, "repo": "spring-beans-6.0.11", "code": "public interface SmartInstantiationAwareBeanPostProcessor extends InstantiationAwareBeanPostProcessor {\n\t// Determine the type of the bean to be eventually returned from this processor's InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String) callback.\n\tdefault Class<?> determineBeanType(Class<?> beanClass, String beanName);\n}", "des": "Extension of the InstantiationAwareBeanPostProcessor interface, adding a callback for predicting the eventual type of a processed bean."}
{"index": 15396, "repo": "spring-beans-6.0.11", "code": "public interface SortDefinition {\n\t// Return the name of the bean property to compare.\n\tString getProperty();\n\t// Return whether to sort ascending (true) or descending (false).\n\tboolean isAscending();\n\t// Return whether upper and lower case in String values should be ignored.\n\tboolean isIgnoreCase();\n}", "des": "Definition for sorting bean instances by a property."}
{"index": 15397, "repo": "spring-beans-6.0.11", "code": "public class StaticListableBeanFactory extends Object implements ListableBeanFactory {\n\t// Add a new singleton bean.\n\tvoid addBean(String name, Object bean);\n\t// Does this bean factory contain a bean definition or externally registered singleton instance with the given name?\n\tboolean containsBean(String name);\n\t// Check if this bean factory contains a bean definition with the given name.\n\tboolean containsBeanDefinition(String name);\n}", "des": "Static BeanFactory implementation which allows one to register existing singleton instances programmatically."}
{"index": 15398, "repo": "spring-beans-6.0.11", "code": "public interface TypeConverter {\n\t// Convert the value to the required type (if necessary from a String).\n\t<T> T convertIfNecessary(Object value, Class<T> requiredType);\n\t// Convert the value to the required type (if necessary from a String).\n\t<T> T convertIfNecessary(Object value, Class<T> requiredType, Field field);\n}", "des": "Interface that defines type conversion methods."}
{"index": 15399, "repo": "spring-beans-6.0.11", "code": "public abstract class TypeConverterSupport extends PropertyEditorRegistrySupport implements TypeConverter {\n\t// Convert the value to the required type (if necessary from a String).\n\t<T> T convertIfNecessary(Object value, Class<T> requiredType);\n\t// Convert the value to the required type (if necessary from a String).\n\t<T> T convertIfNecessary(Object value, Class<T> requiredType, Field field);\n}", "des": "Base implementation of the TypeConverter interface, using a package-private delegate."}
{"index": 15400, "repo": "spring-beans-6.0.11", "code": "public class TypedStringValue extends Object implements BeanMetadataElement {\n\tboolean equals(Object other);\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n\t// Return the type name as actually specified for this particular value, if any.\n\tString getSpecifiedTypeName();\n\t// Return the type to convert to.\n\tClass<?> getTargetType();\n\t// Return the type to convert to.\n\tString getTargetTypeName();\n\t// Return the String value.\n\tString getValue();\n}", "des": "Holder for a typed String value."}
{"index": 15401, "repo": "spring-beans-6.0.11", "code": "public class TypeMismatchException extends PropertyAccessException {\n\t// Return a corresponding error code for this type of exception.\n\tString getErrorCode();\n\t// Return the name of the affected property, if available.\n\tString getPropertyName();\n\t// Return the required target type, if any.\n\tClass<?> getRequiredType();\n\t// Return the offending value (may be null).\n\tObject getValue();\n}", "des": "Exception thrown on a type mismatch when trying to set a bean property."}
{"index": 15402, "repo": "spring-beans-6.0.11", "code": "public class XmlBeanDefinitionReader extends AbstractBeanDefinitionReader {\n\t// Create the BeanDefinitionDocumentReader to use for actually reading bean definitions from an XML document.\n\tprotected BeanDefinitionDocumentReader createBeanDefinitionDocumentReader();\n\t// Create the default implementation of NamespaceHandlerResolver used if none is specified.\n\tprotected NamespaceHandlerResolver createDefaultNamespaceHandlerResolver();\n}", "des": "Bean definition reader for XML bean definitions."}
{"index": 15403, "repo": "spring-beans-6.0.11", "code": "public class XmlReaderContext extends ReaderContext {\n\t// Call the bean name generator for the given bean definition.\n\tString generateBeanName(BeanDefinition beanDefinition);\n\t// Return the bean class loader to use, if any.\n\tfinal ClassLoader getBeanClassLoader();\n\t// Return the environment to use.\n\tfinal org.springframework.core.env.Environment getEnvironment();\n\t// Return the namespace resolver.\n\tfinal NamespaceHandlerResolver getNamespaceHandlerResolver();\n}", "des": "Extension of ReaderContext, specific to use with an XmlBeanDefinitionReader."}
{"index": 15404, "repo": "spring-beans-6.0.11", "code": "public class YamlMapFactoryBean extends YamlProcessor implements FactoryBean<Map<String,Object>>, InitializingBean {\n\t// Invoked by the containing BeanFactory after it has set all bean properties and satisfied BeanFactoryAware, ApplicationContextAware etc.\n\tvoid afterPropertiesSet();\n\t// Template method that subclasses may override to construct the object returned by this factory.\n\tprotected Map<String,Object> createMap();\n}", "des": "Factory for a Map that reads from a YAML source, preserving the YAML-declared value types and their structure."}
{"index": 15405, "repo": "spring-beans-6.0.11", "code": "public abstract class YamlProcessor extends Object {\n\t// Create the Yaml instance to use.\n\tprotected org.yaml.snakeyaml.Yaml createYaml();\n\t// Return a flattened version of the given map, recursively following any nested Map or Collection values.\n\tprotected final Map<String,Object> getFlattenedMap(Map<String,Object> source);\n\t// Provide an opportunity for subclasses to process the Yaml parsed from the supplied resources.\n\tprotected void process(YamlProcessor.MatchCallback callback);\n}", "des": "Base class for YAML factories."}
{"index": 15406, "repo": "spring-beans-6.0.11", "code": "public static enum YamlProcessor.MatchStatus extends Enum<YamlProcessor.MatchStatus> {\n\t// Compare two YamlProcessor.MatchStatus items, returning the most specific status.\n\tstatic YamlProcessor.MatchStatus getMostSpecific(YamlProcessor.MatchStatus a, YamlProcessor.MatchStatus b);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic YamlProcessor.MatchStatus valueOf(String name);\n}", "des": "Status returned from YamlProcessor.DocumentMatcher.matches(java.util.Properties)."}
{"index": 15407, "repo": "spring-beans-6.0.11", "code": "public static enum YamlProcessor.ResolutionMethod extends Enum<YamlProcessor.ResolutionMethod> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic YamlProcessor.ResolutionMethod valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic YamlProcessor.ResolutionMethod[] values();\n}", "des": "Method to use for resolving resources."}
{"index": 15408, "repo": "spring-beans-6.0.11", "code": "public class YamlPropertiesFactoryBean extends YamlProcessor implements FactoryBean<Properties>, InitializingBean {\n\t// Invoked by the containing BeanFactory after it has set all bean properties and satisfied BeanFactoryAware, ApplicationContextAware etc.\n\tvoid afterPropertiesSet();\n\t// Template method that subclasses may override to construct the object returned by this factory.\n\tprotected Properties createProperties();\n}", "des": "Factory for Properties that reads from a YAML source, exposing a flat structure of String property values."}
{"index": 15409, "repo": "spring-jms-6.0.11", "code": "public abstract class AbstractAdaptableMessageListener extends Object implements MessageListener, SessionAwareMessageListener<Message> {\n\t// Build a JMS message to be sent as response based on the given result object.\n\tprotected Message buildMessage(Session session, Object result);\n\t// Extract the message body from the given JMS message.\n\tprotected Object extractMessage(Message message);\n\t// Return the DestinationResolver for this adapter.\n\tprotected DestinationResolver getDestinationResolver();\n}", "des": "An abstract JMS MessageListener adapter providing the necessary infrastructure to extract the payload of a JMS Message."}
{"index": 15410, "repo": "spring-jms-6.0.11", "code": "public abstract class AbstractJmsListenerContainerFactory<C extends AbstractMessageListenerContainer> extends Object implements JmsListenerContainerFactory<C> {\n\t// Create an empty container instance.\n\tprotected abstract C createContainerInstance();\n\t// Create a MessageListenerContainer for the given JmsListenerEndpoint.\n\tC createListenerContainer(JmsListenerEndpoint endpoint);\n\t// Further initialize the specified container.\n\tprotected void initializeContainer(C instance);\n}", "des": "Base JmsListenerContainerFactory for Spring's base container implementation."}
{"index": 15411, "repo": "spring-jms-6.0.11", "code": "public abstract class AbstractJmsListenerEndpoint extends Object implements JmsListenerEndpoint {\n\t// Create a MessageListener that is able to serve this endpoint for the specified container.\n\tprotected abstract MessageListener createMessageListener(MessageListenerContainer container);\n\t// Return the concurrency for the listener, if any.\n\tString getConcurrency();\n\t// Return the name of the destination for this endpoint.\n\tString getDestination();\n}", "des": "Base model for a JMS listener endpoint."}
{"index": 15412, "repo": "spring-jms-6.0.11", "code": "public abstract class AbstractJmsListeningContainer extends JmsDestinationAccessor implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.DisposableBean, org.springframework.context.SmartLifecycle {\n\t// Delegates to validateConfiguration() and initialize().\n\tvoid afterPropertiesSet();\n\t// Create a shared Connection for this container.\n\tprotected Connection createSharedConnection();\n}", "des": "Common base class for all containers which need to implement listening based on a JMS Connection (either shared or freshly obtained for each attempt)."}
{"index": 15413, "repo": "spring-jms-6.0.11", "code": "public abstract class AbstractMessageListenerContainer extends AbstractJmsListeningContainer implements MessageListenerContainer {\n\t// Check the given message listener, throwing an exception if it does not correspond to a supported listener type.\n\tprotected void checkMessageListener(Object messageListener);\n\t// Perform a commit or message acknowledgement, as appropriate.\n\tprotected void commitIfNecessary(Session session, Message message);\n}", "des": "Abstract base class for Spring message listener container implementations."}
{"index": 15414, "repo": "spring-jms-6.0.11", "code": "public abstract class AbstractPollingMessageListenerContainer extends AbstractMessageListenerContainer {\n\t// Create a MessageConsumer for the given JMS Session, registering a MessageListener for the specified listener.\n\tprotected MessageConsumer createListenerConsumer(Session session);\n}", "des": "Base class for listener container implementations which are based on polling."}
{"index": 15415, "repo": "spring-jms-6.0.11", "code": "public class CachingConnectionFactory extends SingleConnectionFactory {\n\t// Return a current session count, indicating the number of sessions currently cached by this connection factory.\n\tint getCachedSessionCount();\n\t// Wrap the given Session with a proxy that delegates every method call to it but adapts close calls.\n\tprotected Session getCachedSessionProxy(Session target, Deque<Session> sessionList);\n}", "des": "SingleConnectionFactory subclass that adds Session caching as well as MessageProducer and MessageConsumer caching."}
{"index": 15416, "repo": "spring-jms-6.0.11", "code": "public interface CachingDestinationResolver extends DestinationResolver {\n\t// Clear the entire destination cache.\n\tvoid clearCache();\n\t// Remove the destination with the given name from the cache (if cached by this resolver in the first place).\n\tvoid removeFromCache(String destinationName);\n}", "des": "Extension of the DestinationResolver interface, exposing methods for clearing the cache."}
{"index": 15417, "repo": "spring-jms-6.0.11", "code": "public class ChainedExceptionListener extends Object implements ExceptionListener {\n\t// Add an ExceptionListener to the chained delegate list.\n\tfinal void addDelegate(ExceptionListener listener);\n\t// Return all registered ExceptionListener delegates (as array).\n\tfinal ExceptionListener[] getDelegates();\n\tvoid onException(JMSException ex);\n}", "des": "Implementation of the JMS ExceptionListener interface that supports chaining, allowing the addition of multiple ExceptionListener instances in order."}
{"index": 15418, "repo": "spring-jms-6.0.11", "code": "public abstract class ConnectionFactoryUtils extends Object {\n\t// Obtain a JMS Session that is synchronized with the current transaction, if any.\n\tstatic Session doGetTransactionalSession(ConnectionFactory connectionFactory, ConnectionFactoryUtils.ResourceFactory resourceFactory);\n}", "des": "Helper class for managing a JMS ConnectionFactory, in particular for obtaining transactional JMS resources for a given ConnectionFactory."}
{"index": 15419, "repo": "spring-jms-6.0.11", "code": "public static interface ConnectionFactoryUtils.ResourceFactory {\n\t// Create a new JMS Connection for registration with a JmsResourceHolder.\n\tConnection createConnection();\n\t// Create a new JMS Session for registration with a JmsResourceHolder.\n\tSession createSession(Connection con);\n\t// Fetch an appropriate Connection from the given JmsResourceHolder.\n\tConnection getConnection(JmsResourceHolder holder);\n}", "des": "Callback interface for resource creation."}
{"index": 15420, "repo": "spring-jms-6.0.11", "code": "public class DefaultJcaListenerContainerFactory extends JmsActivationSpecConfig implements JmsListenerContainerFactory<JmsMessageEndpointManager> {\n\t// Create an empty container instance.\n\tprotected JmsMessageEndpointManager createContainerInstance();\n\t// Create a MessageListenerContainer for the given JmsListenerEndpoint.\n\tJmsMessageEndpointManager createListenerContainer(JmsListenerEndpoint endpoint);\n\tvoid setActivationSpecFactory(JmsActivationSpecFactory activationSpecFactory);\n}", "des": "A JmsListenerContainerFactory implementation to build a JCA-based JmsMessageEndpointManager."}
{"index": 15421, "repo": "spring-jms-6.0.11", "code": "public class DefaultJmsActivationSpecFactory extends StandardJmsActivationSpecFactory {\n\t// This implementation maps SESSION_TRANSACTED onto an ActivationSpec property named \"useRAManagedTransaction\", if available (following ActiveMQ's naming conventions).\n\tprotected void applyAcknowledgeMode(org.springframework.beans.BeanWrapper bw, int ackMode);\n}", "des": "Default implementation of the JmsActivationSpecFactory interface."}
{"index": 15422, "repo": "spring-jms-6.0.11", "code": "public class DefaultJmsListenerContainerFactory extends AbstractJmsListenerContainerFactory<DefaultMessageListenerContainer> {\n\t// Create an empty container instance.\n\tprotected DefaultMessageListenerContainer createContainerInstance();\n\t// Further initialize the specified container.\n\tprotected void initializeContainer(DefaultMessageListenerContainer container);\n\tvoid setBackOff(org.springframework.util.backoff.BackOff backOff);\n\tvoid setCacheLevel(Integer cacheLevel);\n}", "des": "A JmsListenerContainerFactory implementation to build a regular DefaultMessageListenerContainer."}
{"index": 15423, "repo": "spring-jms-6.0.11", "code": "public class DefaultMessageListenerContainer extends AbstractPollingMessageListenerContainer {\n\t// Apply the next back-off time using the specified BackOffExecution.\n\tprotected boolean applyBackOffTime(org.springframework.util.backoff.BackOffExecution execution);\n\t// Create a default TaskExecutor.\n\tprotected org.springframework.core.task.TaskExecutor createDefaultTaskExecutor();\n}", "des": "Message listener container variant that uses plain JMS client APIs, specifically a loop of MessageConsumer.receive() calls that also allow for transactional reception of messages (registering them with XA transactions)."}
{"index": 15424, "repo": "spring-jms-6.0.11", "code": "public class DynamicDestinationResolver extends Object implements DestinationResolver {\n\t// Resolve the specified destination name as a dynamic destination.\n\tDestination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain);\n\t// Resolve the given destination name to a Queue.\n\tprotected Queue resolveQueue(Session session, String queueName);\n\t// Resolve the given destination name to a Topic.\n\tprotected Topic resolveTopic(Session session, String topicName);\n}", "des": "Simple DestinationResolver implementation resolving destination names as dynamic destinations."}
{"index": 15425, "repo": "spring-jms-6.0.11", "code": "public abstract class JmsAccessor extends Object implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Convert the specified checked JMSException to a Spring runtime JmsException equivalent.\n\tprotected JmsException convertJmsAccessException(JMSException ex);\n\t// Create a JMS Connection via this template's ConnectionFactory.\n\tprotected Connection createConnection();\n\t// Create a JMS Session for the given Connection.\n\tprotected Session createSession(Connection con);\n}", "des": "Base class for JmsTemplate and other JMS-accessing gateway helpers, defining common properties such as the JMS ConnectionFactory to operate on."}
{"index": 15426, "repo": "spring-jms-6.0.11", "code": "public class JmsActivationSpecConfig extends Object {\n\t// Return the JMS acknowledgement mode to use.\n\tint getAcknowledgeMode();\n\tString getClientId();\n\tString getDestinationName();\n\tString getDurableSubscriptionName();\n\t// Return the maximum number of consumers/sessions to use.\n\tint getMaxConcurrency();\n\t// Return the MessageConverter to use, if any.\n\tMessageConverter getMessageConverter();\n\tString getMessageSelector();\n}", "des": "Common configuration object for activating a JMS message endpoint."}
{"index": 15427, "repo": "spring-jms-6.0.11", "code": "public abstract class JmsDestinationAccessor extends JmsAccessor {\n\t// Return the DestinationResolver for this accessor (never null).\n\tDestinationResolver getDestinationResolver();\n\t// Return whether the Publish/Subscribe domain (Topics) is used.\n\tboolean isPubSubDomain();\n\t// Actually receive a message from the given consumer.\n\tprotected Message receiveFromConsumer(MessageConsumer consumer, long timeout);\n}", "des": "Base class for JmsTemplate and other JMS-accessing gateway helpers, adding destination-related properties to JmsAccessor's common properties."}
{"index": 15428, "repo": "spring-jms-6.0.11", "code": "public abstract class JmsException extends org.springframework.core.NestedRuntimeException {\n\t// Convenience method to get the vendor specific error code if the root cause was an instance of JMSException.\n\tString getErrorCode();\n\t// Return the detail message, including the message from the linked exception if there is one.\n\tString getMessage();\n}", "des": "Base class for exception thrown by the framework whenever it encounters a problem related to JMS."}
{"index": 15429, "repo": "spring-jms-6.0.11", "code": "public abstract class JmsGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean {\n\tfinal void afterPropertiesSet();\n\t// Create a JmsTemplate for the given ConnectionFactory.\n\tprotected JmsTemplate createJmsTemplate(ConnectionFactory connectionFactory);\n\t// Return the JMS ConnectionFactory used by the gateway.\n\tfinal ConnectionFactory getConnectionFactory();\n\t// Return the JmsTemplate for the gateway.\n\tfinal JmsTemplate getJmsTemplate();\n}", "des": "Convenient superclass for application classes that need JMS access."}
{"index": 15430, "repo": "spring-jms-6.0.11", "code": "public interface JmsListenerEndpoint {\n\t// Return the id of this endpoint.\n\tString getId();\n\t// Set up the specified message listener container with the model defined by this endpoint.\n\tvoid setupListenerContainer(MessageListenerContainer listenerContainer);\n}", "des": "Model for a JMS listener endpoint."}
{"index": 15431, "repo": "spring-jms-6.0.11", "code": "public class JmsListenerEndpointRegistrar extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Return the JmsListenerEndpointRegistry instance for this registrar, may be null.\n\tJmsListenerEndpointRegistry getEndpointRegistry();\n}", "des": "Helper bean for registering JmsListenerEndpoint with a JmsListenerEndpointRegistry."}
{"index": 15432, "repo": "spring-jms-6.0.11", "code": "public class JmsMessageEndpointFactory extends org.springframework.jca.endpoint.AbstractMessageEndpointFactory {\n\t// Creates a concrete JMS message endpoint, internal to this factory.\n\tprotected org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint createEndpointInternal();\n\t// Return the JMS MessageListener for this endpoint.\n\tprotected MessageListener getMessageListener();\n}", "des": "JMS-specific implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities for a JMS listener object (e.g."}
{"index": 15433, "repo": "spring-jms-6.0.11", "code": "public class JmsMessageEndpointManager extends org.springframework.jca.endpoint.GenericMessageEndpointManager implements org.springframework.beans.factory.BeanNameAware, MessageListenerContainer {\n\tvoid afterPropertiesSet();\n\t// Return the JmsActivationSpecConfig object that this endpoint manager should use for activating its listener.\n\tJmsActivationSpecConfig getActivationSpecConfig();\n}", "des": "Extension of the generic JCA 1.5 GenericMessageEndpointManager, adding JMS-specific support for ActivationSpec configuration."}
{"index": 15434, "repo": "spring-jms-6.0.11", "code": "public class JmsMessageHeaderAccessor extends org.springframework.messaging.support.NativeMessageHeaderAccessor {\n\t// Return the correlationId.\n\tString getCorrelationId();\n\t// Return the delivery mode.\n\tInteger getDeliveryMode();\n\t// Return the destination.\n\tDestination getDestination();\n\t// Return the message expiration.\n\tLong getExpiration();\n\t// Return the message id.\n\tString getMessageId();\n\t// Return the priority.\n\tInteger getPriority();\n\t// Return the redelivered flag.\n\tBoolean getRedelivered();\n}", "des": "A MessageHeaderAccessor implementation giving access to JMS-specific headers."}
{"index": 15435, "repo": "spring-jms-6.0.11", "code": "public interface JmsMessageOperations extends org.springframework.messaging.core.MessageSendingOperations<Destination>, org.springframework.messaging.core.MessageReceivingOperations<Destination>, org.springframework.messaging.core.MessageRequestReplyOperations<Destination> {\n\t// Convert the given Object to serialized form, possibly using a MessageConverter, wrap it as a message and send it to the given destination.\n\tvoid convertAndSend(String destinationName, Object payload);\n}", "des": "A specialization of MessageSendingOperations, MessageReceivingOperations and MessageRequestReplyOperations for JMS related operations that allow to specify a destination name rather than the actual Destination."}
{"index": 15436, "repo": "spring-jms-6.0.11", "code": "public interface JmsOperations {\n\t// Browse messages in a JMS queue.\n\t<T> T browse(Queue queue, BrowserCallback<T> action);\n\t// Browse messages in a JMS queue.\n\t<T> T browse(String queueName, BrowserCallback<T> action);\n\t// Browse messages in the default JMS queue.\n\t<T> T browse(BrowserCallback<T> action);\n\t// Browse selected messages in a JMS queue.\n\t<T> T browseSelected(Queue queue, String messageSelector, BrowserCallback<T> action);\n}", "des": "Specifies a basic set of JMS operations."}
{"index": 15437, "repo": "spring-jms-6.0.11", "code": "public class JmsResourceHolder extends org.springframework.transaction.support.ResourceHolderSupport {\n\t// Add the given Connection to this resource holder.\n\tfinal void addConnection(Connection connection);\n\t// Add the given Session to this resource holder.\n\tfinal void addSession(Session session);\n\t// Add the given Session to this resource holder, registered for a specific Connection.\n\tfinal void addSession(Session session, Connection connection);\n}", "des": "Resource holder wrapping a JMS Connection and a JMS Session."}
{"index": 15438, "repo": "spring-jms-6.0.11", "code": "public class JmsResponse<T> extends Object {\n\t// Create a JmsResponse targeting the specified Destination.\n\tstatic <T> JmsResponse<T> forDestination(T result, Destination destination);\n\t// Create a JmsResponse targeting the queue with the specified name.\n\tstatic <T> JmsResponse<T> forQueue(T result, String queueName);\n\t// Create a JmsResponse targeting the topic with the specified name.\n\tstatic <T> JmsResponse<T> forTopic(T result, String topicName);\n}", "des": "Return type of any JMS listener method used to indicate the actual response destination alongside the response itself."}
{"index": 15439, "repo": "spring-jms-6.0.11", "code": "public class JmsTemplate extends JmsDestinationAccessor implements JmsOperations {\n\t// Browse messages in a JMS queue.\n\t<T> T browse(Queue queue, BrowserCallback<T> action);\n\t// Browse messages in a JMS queue.\n\t<T> T browse(String queueName, BrowserCallback<T> action);\n\t// Browse messages in the default JMS queue.\n\t<T> T browse(BrowserCallback<T> action);\n\t// Browse selected messages in a JMS queue.\n\t<T> T browseSelected(Queue queue, String messageSelector, BrowserCallback<T> action);\n}", "des": "Helper class that simplifies synchronous JMS access code."}
{"index": 15440, "repo": "spring-jms-6.0.11", "code": "public class JmsTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean {\n\t// Make sure the ConnectionFactory has been set.\n\tvoid afterPropertiesSet();\n\t// Create a JMS Connection via this template's ConnectionFactory.\n\tprotected Connection createConnection();\n}", "des": "PlatformTransactionManager implementation for a single JMS ConnectionFactory."}
{"index": 15441, "repo": "spring-jms-6.0.11", "code": "public abstract class JmsUtils extends Object {\n\t// Build a descriptive exception message for the given JMSException, incorporating a linked exception's message if appropriate.\n\tstatic String buildExceptionMessage(JMSException ex);\n\t// Close the given JMS Connection and ignore any thrown exception.\n\tstatic void closeConnection(Connection con);\n\t// Close the given JMS Connection and ignore any thrown exception.\n\tstatic void closeConnection(Connection con, boolean stop);\n}", "des": "Generic utility methods for working with JMS."}
{"index": 15442, "repo": "spring-jms-6.0.11", "code": "public class JndiDestinationResolver extends org.springframework.jndi.JndiLocatorSupport implements CachingDestinationResolver {\n\t// Clear the entire destination cache.\n\tvoid clearCache();\n\t// Remove the destination with the given name from the cache (if cached by this resolver in the first place).\n\tvoid removeFromCache(String destinationName);\n}", "des": "DestinationResolver implementation which interprets destination names as JNDI locations (with a configurable fallback strategy)."}
{"index": 15443, "repo": "spring-jms-6.0.11", "code": "public class MappingJackson2MessageConverter extends Object implements SmartMessageConverter, org.springframework.beans.factory.BeanClassLoaderAware {\n\t// Convert a BytesMessage to a Java Object with the specified type.\n\tprotected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType);\n\t// Template method that allows for custom message mapping.\n\tprotected Object convertFromMessage(Message message, JavaType targetJavaType);\n}", "des": "Message converter that uses Jackson 2.x to convert messages to and from JSON."}
{"index": 15444, "repo": "spring-jms-6.0.11", "code": "public class MarshallingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// This implementation unmarshals the given Message into an object.\n\tObject fromMessage(Message message);\n\t// Marshal the given object to a BytesMessage.\n\tprotected BytesMessage marshalToBytesMessage(Object object, Session session, org.springframework.oxm.Marshaller marshaller);\n}", "des": "Spring JMS MessageConverter that uses a Marshaller and Unmarshaller."}
{"index": 15445, "repo": "spring-jms-6.0.11", "code": "public interface MessageConverter {\n\t// Convert from a JMS Message to a Java object.\n\tObject fromMessage(Message message);\n\t// Convert a Java object to a JMS Message using the supplied session to create the message object.\n\tMessage toMessage(Object object, Session session);\n}", "des": "Strategy interface that specifies a converter between Java objects and JMS messages."}
{"index": 15446, "repo": "spring-jms-6.0.11", "code": "public class MessageListenerAdapter extends AbstractAdaptableMessageListener implements SubscriptionNameProvider {\n\t// Build an array of arguments to be passed into the target listener method.\n\tprotected Object[] buildListenerArguments(Object extractedMessage);\n\t// Return the name of the default listener method to delegate to.\n\tprotected String getDefaultListenerMethod();\n\t// Return the target object to delegate message listening to.\n\tprotected Object getDelegate();\n}", "des": "Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion."}
{"index": 15447, "repo": "spring-jms-6.0.11", "code": "public interface MessageListenerContainer extends org.springframework.context.SmartLifecycle {\n\t// Return the DestinationResolver to use to resolve destinations by names.\n\tDestinationResolver getDestinationResolver();\n\t// Return the MessageConverter that can be used to convert Message, if any.\n\tMessageConverter getMessageConverter();\n\t// Return the QosSettings to use when sending a reply, or null if the broker's defaults should be used.\n\tQosSettings getReplyQosSettings();\n}", "des": "Internal abstraction used by the framework representing a message listener container."}
{"index": 15448, "repo": "spring-jms-6.0.11", "code": "public enum MessageType extends Enum<MessageType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MessageType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MessageType[] values();\n}", "des": "Constants that indicate a target message type to convert to: a TextMessage, a BytesMessage, a MapMessage or an ObjectMessage."}
{"index": 15449, "repo": "spring-jms-6.0.11", "code": "public class MessagingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Create a JMS message for the specified payload and conversionHint.\n\tprotected Message createMessageForPayload(Object payload, Session session, Object conversionHint);\n\tprotected final org.springframework.messaging.MessageHeaders extractHeaders(Message message);\n}", "des": "Convert a Message from the messaging abstraction to and from a Message using an underlying MessageConverter for the payload and a JmsHeaderMapper to map the JMS headers to and from standard message headers."}
{"index": 15450, "repo": "spring-jms-6.0.11", "code": "public class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener implements SubscriptionNameProvider {\n\t// Generate a subscription name for this MessageListener adapter based on the following rules.\n\tString getSubscriptionName();\n\t// Callback for processing a received JMS message.\n\tvoid onMessage(Message jmsMessage, Session session);\n\t// Pre-process the given result before it is converted to a Message.\n\tprotected Object preProcessResponse(Object result);\n}", "des": "A MessageListener adapter that invokes a configurable InvocableHandlerMethod."}
{"index": 15451, "repo": "spring-jms-6.0.11", "code": "public class MethodJmsListenerEndpoint extends AbstractJmsListenerEndpoint implements org.springframework.beans.factory.BeanFactoryAware {\n\t// Create a MessageListener that is able to serve this endpoint for the specified container.\n\tprotected MessagingMessageListenerAdapter createMessageListener(MessageListenerContainer container);\n\t// Create an empty MessagingMessageListenerAdapter instance.\n\tprotected MessagingMessageListenerAdapter createMessageListenerInstance();\n\tObject getBean();\n}", "des": "A JmsListenerEndpoint providing the method to invoke to process an incoming message for this endpoint."}
{"index": 15452, "repo": "spring-jms-6.0.11", "code": "public class QosSettings extends Object {\n\tboolean equals(Object other);\n\t// Return the delivery mode to use when sending a message.\n\tint getDeliveryMode();\n\t// Return the priority of a message when sending.\n\tint getPriority();\n\t// Return the time-to-live of the message when sending.\n\tlong getTimeToLive();\n\t// Set the delivery mode to use when sending a message.\n\tvoid setDeliveryMode(int deliveryMode);\n\t// Set the priority of a message when sending.\n\tvoid setPriority(int priority);\n}", "des": "Gather the Quality-of-Service settings that can be used when sending a message."}
{"index": 15453, "repo": "spring-jms-6.0.11", "code": "public class SimpleJmsHeaderMapper extends org.springframework.messaging.support.AbstractHeaderMapper<Message> implements JmsHeaderMapper {\n\t// Add the outbound prefix if necessary.\n\tprotected String fromHeaderName(String headerName);\n\tvoid fromHeaders(org.springframework.messaging.MessageHeaders headers, Message jmsMessage);\n\t// Add the inbound prefix if necessary.\n\tprotected String toHeaderName(String propertyName);\n\torg.springframework.messaging.MessageHeaders toHeaders(Message jmsMessage);\n}", "des": "Simple implementation of JmsHeaderMapper."}
{"index": 15454, "repo": "spring-jms-6.0.11", "code": "public class SimpleJmsListenerEndpoint extends AbstractJmsListenerEndpoint {\n\t// Create a MessageListener that is able to serve this endpoint for the specified container.\n\tprotected MessageListener createMessageListener(MessageListenerContainer container);\n\t// Return a description for this endpoint.\n\tprotected StringBuilder getEndpointDescription();\n\t// Return the MessageListener to invoke when a message matching the endpoint is received.\n\tMessageListener getMessageListener();\n}", "des": "A JmsListenerEndpoint simply providing the MessageListener to invoke to process an incoming message for this endpoint."}
{"index": 15455, "repo": "spring-jms-6.0.11", "code": "public class SimpleMessageConverter extends Object implements MessageConverter {\n\t// Create a JMS BytesMessage for the given byte array.\n\tprotected BytesMessage createMessageForByteArray(byte[] bytes, Session session);\n\t// Create a JMS MapMessage for the given Map.\n\tprotected MapMessage createMessageForMap(Map<?,?> map, Session session);\n\t// Create a JMS ObjectMessage for the given Serializable object.\n\tprotected ObjectMessage createMessageForSerializable(Serializable object, Session session);\n}", "des": "A simple message converter which is able to handle TextMessages, BytesMessages, MapMessages, and ObjectMessages."}
{"index": 15456, "repo": "spring-jms-6.0.11", "code": "public class SimpleMessageListenerContainer extends AbstractMessageListenerContainer implements ExceptionListener {\n\t// Create a MessageConsumer for the given JMS Session, registering a MessageListener for the specified listener.\n\tprotected MessageConsumer createListenerConsumer(Session session);\n\t// Creates the specified number of concurrent consumers, in the form of a JMS Session plus associated MessageConsumer.\n\tprotected void doInitialize();\n}", "des": "Message listener container that uses the plain JMS client API's MessageConsumer.setMessageListener() method to create concurrent MessageConsumers for the specified listeners."}
{"index": 15457, "repo": "spring-jms-6.0.11", "code": "public class SingleConnectionFactory extends Object implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, ExceptionListener, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\t// Make sure a Connection or ConnectionFactory has been set.\n\tvoid afterPropertiesSet();\n\t// Close the given Connection.\n\tprotected void closeConnection(Connection con);\n\tConnection createConnection();\n}", "des": "A JMS ConnectionFactory adapter that returns the same Connection from all SingleConnectionFactory.createConnection() calls, and ignores calls to Connection.close()."}
{"index": 15458, "repo": "spring-jms-6.0.11", "code": "public class StandardJmsActivationSpecFactory extends Object implements JmsActivationSpecFactory {\n\t// Apply the specified acknowledge mode to the ActivationSpec object.\n\tprotected void applyAcknowledgeMode(org.springframework.beans.BeanWrapper bw, int ackMode);\n\t// Create a JCA 1.5 ActivationSpec object based on the given JmsActivationSpecConfig object.\n\tActivationSpec createActivationSpec(ResourceAdapter adapter, JmsActivationSpecConfig config);\n}", "des": "Standard implementation of the JmsActivationSpecFactory interface."}
{"index": 15459, "repo": "spring-jms-6.0.11", "code": "public class UserCredentialsConnectionFactoryAdapter extends Object implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Determine whether there are currently thread-bound credentials, using them if available, falling back to the statically specified username and password (i.e.\n\tfinal Connection createConnection();\n}", "des": "An adapter for a target JMS ConnectionFactory, applying the given user credentials to every standard createConnection() call, that is, implicitly invoking createConnection(username, password) on the target."}
{"index": 15460, "repo": "spring-security-ldap-6.1.2", "code": "public class BindAuthenticator extends AbstractLdapAuthenticator {\n\t// Authenticates as a user and obtains additional user information from the directory.\n\torg.springframework.ldap.core.DirContextOperations authenticate(org.springframework.security.core.Authentication authentication);\n\t// Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN.\n\tprotected void handleBindException(String userDn, String username, Throwable cause);\n}", "des": "An authenticator which binds as a user."}
{"index": 15461, "repo": "spring-security-ldap-6.1.2", "code": "public interface EmbeddedLdapServerContainer {\n\t// Returns the embedded LDAP server port.\n\tint getPort();\n\t// The embedded LDAP server port to connect to.\n\tvoid setPort(int port);\n}", "des": "Provides lifecycle services for an embedded LDAP server."}
{"index": 15462, "repo": "spring-security-ldap-6.1.2", "code": "public class FilterBasedLdapUserSearch extends Object implements LdapUserSearch {\n\t// Return the LdapUserDetails containing the user's information\n\torg.springframework.ldap.core.DirContextOperations searchForUser(String username);\n\t// Sets the corresponding property on the SearchControls instance used in the search.\n\tvoid setDerefLinkFlag(boolean deref);\n\t// Specifies the attributes that will be returned as part of the search.\n\tvoid setReturningAttributes(String[] attrs);\n}", "des": "LdapUserSearch implementation which uses an Ldap filter to locate the user."}
{"index": 15463, "repo": "spring-security-ldap-6.1.2", "code": "public class LdapAuthority extends Object implements org.springframework.security.core.GrantedAuthority {\n\t// Compares the LdapAuthority based on getAuthority() and getDn() values.\n\tboolean equals(Object obj);\n\t// Returns the LDAP attributes\n\tMap<String,List<String>> getAttributes();\n\t// Returns the values for a specific attribute\n\tList<String> getAttributeValues(String name);\n\tString getAuthority();\n\t// Returns the DN for this LDAP authority\n\tString getDn();\n}", "des": "An authority that contains at least a DN and a role name for an LDAP entry but can also contain other desired attributes to be fetched during an LDAP authority search."}
{"index": 15464, "repo": "spring-security-ldap-6.1.2", "code": "public class LdapUserDetailsManager extends Object implements org.springframework.security.provisioning.UserDetailsManager {\n\tprotected void addAuthorities(org.springframework.ldap.core.DistinguishedName userDn, Collection<? extends org.springframework.security.core.GrantedAuthority> authorities);\n\t// Creates a DN from a group name.\n\tprotected org.springframework.ldap.core.DistinguishedName buildGroupDn(String group);\n}", "des": "An Ldap implementation of UserDetailsManager."}
{"index": 15465, "repo": "spring-security-ldap-6.1.2", "code": "public class LdapUserDetailsMapper extends Object implements UserDetailsContextMapper {\n\t// Creates a GrantedAuthority from a role attribute.\n\tprotected org.springframework.security.core.GrantedAuthority createAuthority(Object role);\n\t// Extension point to allow customized creation of the user's password from the attribute stored in the directory.\n\tprotected String mapPassword(Object passwordValue);\n}", "des": "The context mapper used by the LDAP authentication provider to create an LDAP user object."}
{"index": 15466, "repo": "spring-security-ldap-6.1.2", "code": "public final class LdapUtils extends Object {\n\tstatic void closeContext(Context ctx);\n\tstatic void closeEnumeration(NamingEnumeration ne);\n\tstatic String convertPasswordToString(Object passObj);\n\t// Gets the full dn of a name by prepending the name of the context it is relative to.\n\tstatic org.springframework.ldap.core.DistinguishedName getFullDn(org.springframework.ldap.core.DistinguishedName dn, Context baseCtx);\n}", "des": "LDAP Utility methods."}
{"index": 15467, "repo": "spring-security-ldap-6.1.2", "code": "public class NestedLdapAuthoritiesPopulator extends DefaultLdapAuthoritiesPopulator {\n\tSet<org.springframework.security.core.GrantedAuthority> getGroupMembershipRoles(String userDn, String username);\n\t// Sets the attribute names to retrieve for each ldap groups.\n\tvoid setAttributeNames(Set<String> attributeNames);\n\t// How far should a nested search go.\n\tvoid setMaxSearchDepth(int maxSearchDepth);\n}", "des": "A LDAP authority populator that can recursively search static nested groups."}
{"index": 15468, "repo": "spring-security-ldap-6.1.2", "code": "public class PasswordPolicyControl extends Object implements Control {\n\t// Retrieves the ASN.1 BER encoded value of the LDAP control.\n\tbyte[] getEncodedValue();\n\t// Returns the OID of the Password Policy Control (\"1.3.6.1.4.1.42.2.27.8.5.1\").\n\tString getID();\n\t// Returns whether the control is critical for the client.\n\tboolean isCritical();\n}", "des": "A Password Policy request control."}
{"index": 15469, "repo": "spring-security-ldap-6.1.2", "code": "public enum PasswordPolicyErrorStatus extends Enum<PasswordPolicyErrorStatus> {\n\tString getDefaultMessage();\n\tString getErrorCode();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PasswordPolicyErrorStatus valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PasswordPolicyErrorStatus[] values();\n}", "des": "Defines status codes for use with PasswordPolicyException, with error codes (for message source lookup) and default messages."}
{"index": 15470, "repo": "spring-security-ldap-6.1.2", "code": "public class PasswordPolicyResponseControl extends PasswordPolicyControl {\n\t// Returns the unchanged value of the response control.\n\tbyte[] getEncodedValue();\n\tPasswordPolicyErrorStatus getErrorStatus();\n\t// Returns the graceLoginsRemaining.\n\tint getGraceLoginsRemaining();\n\t// Returns the timeBeforeExpiration.\n\tint getTimeBeforeExpiration();\n\t// Checks whether an error is present.\n\tboolean hasError();\n\t// Checks whether a warning is present.\n\tboolean hasWarning();\n\tboolean isChangeAfterReset();\n}", "des": "Represents the response control received when a PasswordPolicyControl is used when binding to a directory."}
{"index": 15471, "repo": "spring-security-ldap-6.1.2", "code": "public class SpringSecurityAuthenticationSource extends Object implements org.springframework.ldap.core.AuthenticationSource {\n\tString getCredentials();\n\t// Get the principals of the logged in user, in this case the distinguished name.\n\tString getPrincipal();\n\t// Sets the SecurityContextHolderStrategy to use.\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy);\n}", "des": "An AuthenticationSource to retrieve authentication information stored in Spring Security's SecurityContextHolder."}
{"index": 15472, "repo": "spring-security-ldap-6.1.2", "code": "public class SpringSecurityLdapTemplate extends org.springframework.ldap.core.LdapTemplate {\n\t// Performs an LDAP compare operation of the value of an attribute for a particular directory entry.\n\tboolean compare(String dn, String attributeName, Object value);\n\t// Composes an object from the attributes of the given DN.\n\torg.springframework.ldap.core.DirContextOperations retrieveEntry(String dn, String[] attributesToRetrieve);\n}", "des": "Extension of Spring LDAP's LdapTemplate class which adds extra functionality required by Spring Security."}
{"index": 15473, "repo": "spring-security-ldap-6.1.2", "code": "public interface UserDetailsContextMapper {\n\t// Creates a fully populated UserDetails object for use by the security framework.\n\torg.springframework.security.core.userdetails.UserDetails mapUserFromContext(org.springframework.ldap.core.DirContextOperations ctx, String username, Collection<? extends org.springframework.security.core.GrantedAuthority> authorities);\n}", "des": "Operations to map a UserDetails object to and from a Spring LDAP DirContextOperations implementation."}
{"index": 15474, "repo": "spring-expression-6.0.11", "code": "public class BooleanLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Represents the literal values TRUE and FALSE."}
{"index": 15475, "repo": "spring-expression-6.0.11", "code": "public class CodeFlow extends Object implements org.springframework.asm.Opcodes {\n\t// Determine whether boxing/unboxing can get from one type to the other.\n\tstatic boolean areBoxingCompatible(String desc1, String desc2);\n\t// Determine the appropriate T tag to use for the NEWARRAY bytecode.\n\tstatic int arrayCodeFor(String arrayType);\n\t// Create the JVM signature descriptor for a constructor.\n\tstatic String createSignatureDescriptor(Constructor<?> ctor);\n}", "des": "Manages the class being generated by the compilation process."}
{"index": 15476, "repo": "spring-expression-6.0.11", "code": "public interface CompilablePropertyAccessor extends PropertyAccessor, org.springframework.asm.Opcodes {\n\t// Generate the bytecode the performs the access operation into the specified MethodVisitor using context information from the codeflow where necessary.\n\tvoid generateCode(String propertyName, org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Return the type of the accessed property - may only be known once an access has occurred.\n\tClass<?> getPropertyType();\n}", "des": "A compilable property accessor is able to generate bytecode that represents the access operation, facilitating compilation to bytecode of expressions that use the accessor."}
{"index": 15477, "repo": "spring-expression-6.0.11", "code": "public class CompositeStringExpression extends Object implements Expression {\n\tfinal Expression[] getExpressions();\n\t// Return the original string used to create this expression (unmodified).\n\tfinal String getExpressionString();\n\t// Evaluate this expression in the default standard context.\n\tString getValue();\n\t// Evaluate the expression in the default context.\n\t<T> T getValue(Class<T> expectedResultType);\n\t// Evaluate this expression against the specified root object.\n\tString getValue(Object rootObject);\n}", "des": "Represents a template expression broken into pieces."}
{"index": 15478, "repo": "spring-expression-6.0.11", "code": "public class CompoundExpression extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Evaluates a compound expression.\n\tTypedValue getValueInternal(ExpressionState state);\n\tprotected ValueRef getValueRef(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Represents a DOT separated expression sequence, such as property1.property2.methodOne()."}
{"index": 15479, "repo": "spring-expression-6.0.11", "code": "public class ConstructorReference extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Implements getValue() - delegating to the code for building an array or a simple type.\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represents the invocation of a constructor."}
{"index": 15480, "repo": "spring-expression-6.0.11", "code": "public final class DataBindingMethodResolver extends ReflectiveMethodResolver {\n\t// Create a new data-binding method resolver for instance method resolution.\n\tstatic DataBindingMethodResolver forInstanceMethodInvocation();\n\t// Determine whether the given Method is a candidate for method resolution on an instance of the given target class.\n\tprotected boolean isCandidateForInvocation(Method method, Class<?> targetClass);\n}", "des": "A MethodResolver variant for data binding purposes, using reflection to access instance methods on a given target object."}
{"index": 15481, "repo": "spring-expression-6.0.11", "code": "public final class DataBindingPropertyAccessor extends ReflectivePropertyAccessor {\n\t// Create a new data-binding property accessor for read-only operations.\n\tstatic DataBindingPropertyAccessor forReadOnlyAccess();\n\t// Create a new data-binding property accessor for read-write operations.\n\tstatic DataBindingPropertyAccessor forReadWriteAccess();\n}", "des": "A PropertyAccessor variant for data binding purposes, using reflection to access properties for reading and possibly writing."}
{"index": 15482, "repo": "spring-expression-6.0.11", "code": "public class Elvis extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Evaluate the condition and if not null, return it.\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represents the elvis operator ?:."}
{"index": 15483, "repo": "spring-expression-6.0.11", "code": "public interface EvaluationContext {\n\t// Assign the value created by the specified Supplier to a named variable within this evaluation context.\n\tdefault TypedValue assignVariable(String name, Supplier<TypedValue> valueSupplier);\n\t// Return a bean resolver that can look up beans by name.\n\tBeanResolver getBeanResolver();\n\t// Return a list of resolvers that will be asked in turn to locate a constructor.\n\tList<ConstructorResolver> getConstructorResolvers();\n}", "des": "Expressions are executed in an evaluation context."}
{"index": 15484, "repo": "spring-expression-6.0.11", "code": "public interface Expression {\n\t// Return the original string used to create this expression (unmodified).\n\tString getExpressionString();\n\t// Evaluate this expression in the default standard context.\n\tObject getValue();\n\t// Evaluate the expression in the default context.\n\t<T> T getValue(Class<T> desiredResultType);\n\t// Evaluate this expression against the specified root object.\n\tObject getValue(Object rootObject);\n}", "des": "An expression capable of evaluating itself against context objects."}
{"index": 15485, "repo": "spring-expression-6.0.11", "code": "public class ExpressionException extends RuntimeException {\n\t// Return the expression string.\n\tfinal String getExpressionString();\n\t// Return the exception message.\n\tString getMessage();\n\t// Return the position in the expression string where the problem occurred.\n\tfinal int getPosition();\n\t// Return the exception simple message without including the expression that caused the failure.\n\tString getSimpleMessage();\n}", "des": "Superclass for exceptions that can occur whilst processing expressions."}
{"index": 15486, "repo": "spring-expression-6.0.11", "code": "public interface ExpressionParser {\n\t// Parse the expression string and return an Expression object you can use for repeated evaluation.\n\tExpression parseExpression(String expressionString);\n\t// Parse the expression string and return an Expression object you can use for repeated evaluation.\n\tExpression parseExpression(String expressionString, ParserContext context);\n}", "des": "Parses expression strings into compiled expressions that can be evaluated."}
{"index": 15487, "repo": "spring-expression-6.0.11", "code": "public abstract class ExpressionUtils extends Object {\n\t// Determines if there is a type converter available in the specified context and attempts to use it to convert the supplied value to the specified type.\n\tstatic <T> T convertTypedValue(EvaluationContext context, TypedValue typedValue, Class<T> targetType);\n\t// Attempt to convert a typed value to a boolean using the supplied type converter.\n\tstatic boolean toBoolean(TypeConverter typeConverter, TypedValue typedValue);\n}", "des": "Common utility functions that may be used by any Expression Language provider."}
{"index": 15488, "repo": "spring-expression-6.0.11", "code": "public class FloatLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents a float literal."}
{"index": 15489, "repo": "spring-expression-6.0.11", "code": "public class FunctionReference extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "A function reference is of the form \"#someFunction(a,b,c)\"."}
{"index": 15490, "repo": "spring-expression-6.0.11", "code": "public class Indexer extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\tprotected ValueRef getValueRef(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Determine if this expression node will support a setValue() call.\n\tboolean isWritable(ExpressionState expressionState);\n}", "des": "An Indexer can index into some proceeding structure to access a particular piece of it."}
{"index": 15491, "repo": "spring-expression-6.0.11", "code": "public class InlineList extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow codeflow);\n\tList<Object> getConstantValue();\n\tTypedValue getValueInternal(ExpressionState expressionState);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return whether this list is a constant value.\n\tboolean isConstant();\n}", "des": "Represent a list in an expression, e.g."}
{"index": 15492, "repo": "spring-expression-6.0.11", "code": "public class InlineMap extends SpelNodeImpl {\n\tMap<Object,Object> getConstantValue();\n\tTypedValue getValueInternal(ExpressionState expressionState);\n\t// Return whether this list is a constant value.\n\tboolean isConstant();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represent a map in an expression, e.g."}
{"index": 15493, "repo": "spring-expression-6.0.11", "code": "public class IntLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents an integer literal."}
{"index": 15494, "repo": "spring-expression-6.0.11", "code": "public class LiteralExpression extends Object implements Expression {\n\t// Return the original string used to create this expression (unmodified).\n\tfinal String getExpressionString();\n\t// Evaluate this expression in the default standard context.\n\tString getValue();\n\t// Evaluate the expression in the default context.\n\t<T> T getValue(Class<T> expectedResultType);\n\t// Evaluate this expression against the specified root object.\n\tString getValue(Object rootObject);\n}", "des": "A very simple hardcoded implementation of the Expression interface that represents a string literal."}
{"index": 15495, "repo": "spring-expression-6.0.11", "code": "public class LongLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents a long integer literal."}
{"index": 15496, "repo": "spring-expression-6.0.11", "code": "public class MethodReference extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tfinal String getName();\n\tTypedValue getValueInternal(ExpressionState state);\n\tprotected ValueRef getValueRef(ExpressionState state);\n}", "des": "Expression language AST node that represents a method reference."}
{"index": 15497, "repo": "spring-expression-6.0.11", "code": "public class NullLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents null."}
{"index": 15498, "repo": "spring-expression-6.0.11", "code": "public class OpAnd extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Represents the boolean AND operation."}
{"index": 15499, "repo": "spring-expression-6.0.11", "code": "public class OpDivide extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements division operator."}
{"index": 15500, "repo": "spring-expression-6.0.11", "code": "public class OpEQ extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the equality operator."}
{"index": 15501, "repo": "spring-expression-6.0.11", "code": "public enum Operation extends Enum<Operation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Operation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Operation[] values();\n}", "des": "Supported operations that an OperatorOverloader can implement for any pair of operands."}
{"index": 15502, "repo": "spring-expression-6.0.11", "code": "public abstract class Operator extends SpelNodeImpl {\n\t// Perform an equality check for the given operand values.\n\tstatic boolean equalityCheck(EvaluationContext context, Object left, Object right);\n\t// Numeric comparison operators share very similar generated code, only differing in two comparison instructions.\n\tprotected void generateComparisonCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf, int compInstruction1, int compInstruction2);\n\tSpelNodeImpl getLeftOperand();\n}", "des": "Common supertype for operators that operate on either one or two operands."}
{"index": 15503, "repo": "spring-expression-6.0.11", "code": "public class OperatorInstanceof extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Compare the left operand to see it is an instance of the type specified as the right operand.\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "The operator 'instanceof' checks if an object is of the class specified in the right-hand operand, in the same way that instanceof does in Java."}
{"index": 15504, "repo": "spring-expression-6.0.11", "code": "public class OperatorNot extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represents a NOT operation."}
{"index": 15505, "repo": "spring-expression-6.0.11", "code": "public interface OperatorOverloader {\n\t// Execute the specified operation on two operands, returning a result.\n\tObject operate(Operation operation, Object leftOperand, Object rightOperand);\n\t// Return true if the operator overloader supports the specified operation between the two operands and so should be invoked to handle it.\n\tboolean overridesOperation(Operation operation, Object leftOperand, Object rightOperand);\n}", "des": "By default the mathematical operators Operation support simple types like numbers."}
{"index": 15506, "repo": "spring-expression-6.0.11", "code": "public class OpGE extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements greater-than-or-equal operator."}
{"index": 15507, "repo": "spring-expression-6.0.11", "code": "public class OpGT extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the greater-than operator."}
{"index": 15508, "repo": "spring-expression-6.0.11", "code": "public class OpLE extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the less-than-or-equal operator."}
{"index": 15509, "repo": "spring-expression-6.0.11", "code": "public class OpLT extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the less-than operator."}
{"index": 15510, "repo": "spring-expression-6.0.11", "code": "public class OpMinus extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tSpelNodeImpl getRightOperand();\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// String format for all operators is the same '(' [operand] [operator] [operand] ')'.\n\tString toStringAST();\n}", "des": "The minus operator supports: subtraction of numbers subtraction of an int from a string of one character (effectively decreasing that character), so 'd'-3='a'"}
{"index": 15511, "repo": "spring-expression-6.0.11", "code": "public class OpModulus extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the modulus operator."}
{"index": 15512, "repo": "spring-expression-6.0.11", "code": "public class OpMultiply extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Implements the multiply operator directly here for certain types of supported operands and otherwise delegates to any registered overloader for types not supported here.\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the multiply operator."}
{"index": 15513, "repo": "spring-expression-6.0.11", "code": "public class OpNE extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the not-equal operator."}
{"index": 15514, "repo": "spring-expression-6.0.11", "code": "public class OpOr extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Represents the boolean OR operation."}
{"index": 15515, "repo": "spring-expression-6.0.11", "code": "public class OpPlus extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tSpelNodeImpl getRightOperand();\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// String format for all operators is the same '(' [operand] [operator] [operand] ')'.\n\tString toStringAST();\n}", "des": "The plus operator will: add numbers concatenate strings"}
{"index": 15516, "repo": "spring-expression-6.0.11", "code": "public interface ParserContext {\n\t// For template expressions, returns the prefix that identifies the start of an expression block within a string.\n\tString getExpressionPrefix();\n\t// For template expressions, return the prefix that identifies the end of an expression block within a string.\n\tString getExpressionSuffix();\n\t// Whether the expression being parsed is a template.\n\tboolean isTemplate();\n}", "des": "Input provided to an expression parser that can influence an expression parsing/compilation routine."}
{"index": 15517, "repo": "spring-expression-6.0.11", "code": "public interface PropertyAccessor {\n\t// Called to determine if a resolver instance is able to access a specified property on a specified target object.\n\tboolean canRead(EvaluationContext context, Object target, String name);\n\t// Called to determine if a resolver instance is able to write to a specified property on a specified target object.\n\tboolean canWrite(EvaluationContext context, Object target, String name);\n}", "des": "A property accessor is able to read from (and possibly write to) an object's properties."}
{"index": 15518, "repo": "spring-expression-6.0.11", "code": "public class PropertyOrFieldReference extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tString getName();\n\tTypedValue getValueInternal(ExpressionState state);\n\tValueRef getValueRef(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\tboolean isNullSafe();\n}", "des": "Represents a simple property or field reference."}
{"index": 15519, "repo": "spring-expression-6.0.11", "code": "public class RealLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents a real literal."}
{"index": 15520, "repo": "spring-expression-6.0.11", "code": "public abstract class ReflectionHelper extends Object {\n\t// Convert a supplied set of arguments into the requested types.\n\tstatic boolean convertAllArguments(TypeConverter converter, Object[] arguments, Method method);\n\t// Based on MethodInvoker.getTypeDifferenceWeight(Class[], Object[]) but operates on TypeDescriptors.\n\tstatic int getTypeDifferenceWeight(List<org.springframework.core.convert.TypeDescriptor> paramTypes, List<org.springframework.core.convert.TypeDescriptor> argTypes);\n}", "des": "Utility methods used by the reflection resolver code to discover the appropriate methods/constructors and fields that should be used in expressions."}
{"index": 15521, "repo": "spring-expression-6.0.11", "code": "public class ReflectiveMethodExecutor extends Object implements MethodExecutor {\n\tboolean didArgumentConversionOccur();\n\t// Execute a command using the specified arguments, and using the specified expression state.\n\tTypedValue execute(EvaluationContext context, Object target, Object... arguments);\n\t// Return the original method that this executor has been configured for.\n\tfinal Method getMethod();\n}", "des": "MethodExecutor that works via reflection."}
{"index": 15522, "repo": "spring-expression-6.0.11", "code": "public class ReflectiveMethodResolver extends Object implements MethodResolver {\n\t// Return the set of methods for this type.\n\tprotected Method[] getMethods(Class<?> type);\n\t// Determine whether the given Method is a candidate for method resolution on an instance of the given target class.\n\tprotected boolean isCandidateForInvocation(Method method, Class<?> targetClass);\n\t// Register a filter for methods on the given type.\n\tvoid registerMethodFilter(Class<?> type, MethodFilter filter);\n}", "des": "Reflection-based MethodResolver used by default in StandardEvaluationContext unless explicit method resolvers have been specified."}
{"index": 15523, "repo": "spring-expression-6.0.11", "code": "public class ReflectivePropertyAccessor extends Object implements PropertyAccessor {\n\t// Called to determine if a resolver instance is able to access a specified property on a specified target object.\n\tboolean canRead(EvaluationContext context, Object target, String name);\n\t// Called to determine if a resolver instance is able to write to a specified property on a specified target object.\n\tboolean canWrite(EvaluationContext context, Object target, String name);\n}", "des": "A powerful PropertyAccessor that uses reflection to access properties for reading and possibly also for writing on a target instance."}
{"index": 15524, "repo": "spring-expression-6.0.11", "code": "public static class ReflectivePropertyAccessor.OptimalPropertyAccessor extends Object implements CompilablePropertyAccessor {\n\t// Called to determine if a resolver instance is able to access a specified property on a specified target object.\n\tboolean canRead(EvaluationContext context, Object target, String name);\n\t// Called to determine if a resolver instance is able to write to a specified property on a specified target object.\n\tboolean canWrite(EvaluationContext context, Object target, String name);\n}", "des": "An optimized form of a PropertyAccessor that will use reflection but only knows how to access a particular property on a particular class."}
{"index": 15525, "repo": "spring-expression-6.0.11", "code": "public final class SimpleEvaluationContext extends Object implements EvaluationContext {\n\t// SimpleEvaluationContext does not support variable assignment within expressions.\n\tTypedValue assignVariable(String name, Supplier<TypedValue> valueSupplier);\n\t// Create a SimpleEvaluationContext for the specified PropertyAccessor delegates: typically a custom PropertyAccessor specific to a use case (e.g.\n\tstatic SimpleEvaluationContext.Builder forPropertyAccessors(PropertyAccessor... accessors);\n}", "des": "A basic implementation of EvaluationContext that focuses on a subset of essential SpEL features and customization options, targeting simple condition evaluation and in particular data binding scenarios."}
{"index": 15526, "repo": "spring-expression-6.0.11", "code": "public static class SimpleEvaluationContext.Builder extends Object {\n\tSimpleEvaluationContext build();\n\t// Register a custom ConversionService.\n\tSimpleEvaluationContext.Builder withConversionService(org.springframework.core.convert.ConversionService conversionService);\n\t// Register a DataBindingMethodResolver for instance method invocation purposes (i.e.\n\tSimpleEvaluationContext.Builder withInstanceMethods();\n}", "des": "Builder for SimpleEvaluationContext."}
{"index": 15527, "repo": "spring-expression-6.0.11", "code": "public final class SpelCompiler extends Object implements org.springframework.asm.Opcodes {\n\t// Request that an attempt is made to compile the specified expression.\n\tstatic boolean compile(Expression expression);\n\t// Attempt compilation of the supplied expression.\n\tCompiledExpression compile(SpelNodeImpl expression);\n\t// Factory method for compiler instances.\n\tstatic SpelCompiler getCompiler(ClassLoader classLoader);\n}", "des": "A SpelCompiler will take a regular parsed expression and create (and load) a class containing byte code that does the same thing as that expression."}
{"index": 15528, "repo": "spring-expression-6.0.11", "code": "public enum SpelCompilerMode extends Enum<SpelCompilerMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SpelCompilerMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SpelCompilerMode[] values();\n}", "des": "Captures the possible configuration settings for a compiler that can be used when evaluating expressions."}
{"index": 15529, "repo": "spring-expression-6.0.11", "code": "public class SpelEvaluationException extends EvaluationException {\n\t// Return the message inserts.\n\tObject[] getInserts();\n\t// Return the message code.\n\tSpelMessage getMessageCode();\n\t// Set the position in the related expression which gave rise to this exception.\n\tvoid setPosition(int position);\n}", "des": "Root exception for Spring EL related exceptions."}
{"index": 15530, "repo": "spring-expression-6.0.11", "code": "public class SpelExpression extends Object implements Expression {\n\t// Perform expression compilation.\n\tboolean compileExpression();\n\t// Return the Abstract Syntax Tree for the expression.\n\tSpelNode getAST();\n\t// Return the default evaluation context that will be used if none is supplied on an evaluation call.\n\tEvaluationContext getEvaluationContext();\n\t// Return the original string used to create this expression (unmodified).\n\tString getExpressionString();\n}", "des": "A SpelExpression represents a parsed (valid) expression that is ready to be evaluated in a specified context."}
{"index": 15531, "repo": "spring-expression-6.0.11", "code": "public enum SpelMessage extends Enum<SpelMessage> {\n\t// Produce a complete message including the prefix and with the inserts applied to the message.\n\tString formatMessage(Object... inserts);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SpelMessage valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SpelMessage[] values();\n}", "des": "Contains all the messages that can be produced by the Spring Expression Language."}
{"index": 15532, "repo": "spring-expression-6.0.11", "code": "public static enum SpelMessage.Kind extends Enum<SpelMessage.Kind> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SpelMessage.Kind valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SpelMessage.Kind[] values();\n}", "des": "Message kinds."}
{"index": 15533, "repo": "spring-expression-6.0.11", "code": "public interface SpelNode {\n\t// Helper method that returns a SpelNode rather than an Antlr Tree node.\n\tSpelNode getChild(int index);\n\t// Return the number of children under this node.\n\tint getChildCount();\n\t// Return the end position of this AST node in the expression string.\n\tint getEndPosition();\n\t// Determine the class of the object passed in, unless it is already a class object.\n\tClass<?> getObjectClass(Object obj);\n}", "des": "Represents a node in the AST for a parsed expression."}
{"index": 15534, "repo": "spring-expression-6.0.11", "code": "public abstract class SpelNodeImpl extends Object implements SpelNode, org.springframework.asm.Opcodes {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n}", "des": "The common supertype of all AST nodes in a parsed Spring Expression Language format expression."}
{"index": 15535, "repo": "spring-expression-6.0.11", "code": "public class SpelParseException extends ParseException {\n\t// Return the message inserts.\n\tObject[] getInserts();\n\t// Return the message code.\n\tSpelMessage getMessageCode();\n}", "des": "Root exception for Spring EL related exceptions."}
{"index": 15536, "repo": "spring-expression-6.0.11", "code": "public class SpelParserConfiguration extends Object {\n\t// Return the ClassLoader to use as the basis for expression compilation.\n\tClassLoader getCompilerClassLoader();\n\t// Return the compiler mode for parsers using this configuration object.\n\tSpelCompilerMode getCompilerMode();\n\t// Return the maximum size that a collection can auto grow.\n\tint getMaximumAutoGrowSize();\n\t// Return the maximum number of characters that a SpEL expression can contain.\n\tint getMaximumExpressionLength();\n}", "des": "Configuration object for the SpEL expression parser."}
{"index": 15537, "repo": "spring-expression-6.0.11", "code": "public class StandardEvaluationContext extends Object implements EvaluationContext {\n\tvoid addConstructorResolver(ConstructorResolver resolver);\n\tvoid addMethodResolver(MethodResolver resolver);\n\tvoid addPropertyAccessor(PropertyAccessor accessor);\n\t// Return a bean resolver that can look up beans by name.\n\tBeanResolver getBeanResolver();\n\t// Return a list of resolvers that will be asked in turn to locate a constructor.\n\tList<ConstructorResolver> getConstructorResolvers();\n}", "des": "A powerful and highly configurable EvaluationContext implementation."}
{"index": 15538, "repo": "spring-expression-6.0.11", "code": "public class StandardOperatorOverloader extends Object implements OperatorOverloader {\n\t// Execute the specified operation on two operands, returning a result.\n\tObject operate(Operation operation, Object leftOperand, Object rightOperand);\n\t// Return true if the operator overloader supports the specified operation between the two operands and so should be invoked to handle it.\n\tboolean overridesOperation(Operation operation, Object leftOperand, Object rightOperand);\n}", "des": "Standard implementation of OperatorOverloader."}
{"index": 15539, "repo": "spring-expression-6.0.11", "code": "public class StandardTypeComparator extends Object implements TypeComparator {\n\t// Return true if the comparator can compare these two objects.\n\tboolean canCompare(Object left, Object right);\n\t// Compare two given objects.\n\tint compare(Object left, Object right);\n}", "des": "A basic TypeComparator implementation: supports comparison of Number types as well as types implementing Comparable."}
{"index": 15540, "repo": "spring-expression-6.0.11", "code": "public class StandardTypeConverter extends Object implements TypeConverter {\n\t// Return true if the type converter can convert the specified type to the desired target type.\n\tboolean canConvert(org.springframework.core.convert.TypeDescriptor sourceType, org.springframework.core.convert.TypeDescriptor targetType);\n}", "des": "Default implementation of the TypeConverter interface, delegating to a core Spring ConversionService."}
{"index": 15541, "repo": "spring-expression-6.0.11", "code": "public class StandardTypeLocator extends Object implements TypeLocator {\n\t// Find a (possibly unqualified) type reference - first using the type name as-is, then trying any registered prefixes if the type name cannot be found.\n\tClass<?> findType(String typeName);\n\t// Return a list of all the import prefixes registered with this StandardTypeLocator.\n\tList<String> getImportPrefixes();\n}", "des": "A simple implementation of TypeLocator that uses the context ClassLoader (or any ClassLoader set upon it)."}
{"index": 15542, "repo": "spring-expression-6.0.11", "code": "public class StringLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents a string literal."}
{"index": 15543, "repo": "spring-expression-6.0.11", "code": "public abstract class TemplateAwareExpressionParser extends Object implements ExpressionParser {\n\t// Actually parse the expression string and return an Expression object.\n\tprotected abstract Expression doParseExpression(String expressionString, ParserContext context);\n\t// Parse the expression string and return an Expression object you can use for repeated evaluation.\n\tExpression parseExpression(String expressionString);\n}", "des": "An expression parser that understands templates."}
{"index": 15544, "repo": "spring-expression-6.0.11", "code": "public class TemplateParserContext extends Object implements ParserContext {\n\t// For template expressions, returns the prefix that identifies the start of an expression block within a string.\n\tfinal String getExpressionPrefix();\n\t// For template expressions, return the prefix that identifies the end of an expression block within a string.\n\tfinal String getExpressionSuffix();\n\t// Whether the expression being parsed is a template.\n\tfinal boolean isTemplate();\n}", "des": "Configurable ParserContext implementation for template parsing."}
{"index": 15545, "repo": "spring-expression-6.0.11", "code": "public class Ternary extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Evaluate the condition and if true evaluate the first alternative, otherwise evaluate the second alternative.\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represents a ternary expression, for example: \"someCheck()?true:false\"."}
{"index": 15546, "repo": "spring-expression-6.0.11", "code": "public enum TypeCode extends Enum<TypeCode> {\n\tstatic TypeCode forClass(Class<?> clazz);\n\tstatic TypeCode forName(String name);\n\tClass<?> getType();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TypeCode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TypeCode[] values();\n}", "des": "Captures primitive types and their corresponding class objects, plus one special TypeCode.OBJECT entry that represents all reference (non-primitive) types."}
{"index": 15547, "repo": "spring-expression-6.0.11", "code": "public interface TypeComparator {\n\t// Return true if the comparator can compare these two objects.\n\tboolean canCompare(Object firstObject, Object secondObject);\n\t// Compare two given objects.\n\tint compare(Object firstObject, Object secondObject);\n}", "des": "Instances of a type comparator should be able to compare pairs of objects for equality."}
{"index": 15548, "repo": "spring-expression-6.0.11", "code": "public interface TypeConverter {\n\t// Return true if the type converter can convert the specified type to the desired target type.\n\tboolean canConvert(org.springframework.core.convert.TypeDescriptor sourceType, org.springframework.core.convert.TypeDescriptor targetType);\n}", "des": "A type converter can convert values between different types encountered during expression evaluation."}
{"index": 15549, "repo": "spring-expression-6.0.11", "code": "public class TypeReference extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represents a reference to a type, for example \"T(String)\" or \"T(com.example.Foo)\"."}
{"index": 15550, "repo": "spring-expression-6.0.11", "code": "public interface ValueRef {\n\t// Returns the value this ValueRef points to, it should not require expression component re-evaluation.\n\tTypedValue getValue();\n\t// Indicates whether calling setValue(Object) is supported.\n\tboolean isWritable();\n\t// Sets the value this ValueRef points to, it should not require expression component re-evaluation.\n\tvoid setValue(Object newValue);\n}", "des": "Represents a reference to a value."}
{"index": 15551, "repo": "spring-expression-6.0.11", "code": "public static class ValueRef.NullValueRef extends Object implements ValueRef {\n\t// Returns the value this ValueRef points to, it should not require expression component re-evaluation.\n\tTypedValue getValue();\n\t// Indicates whether calling setValue(Object) is supported.\n\tboolean isWritable();\n\t// Sets the value this ValueRef points to, it should not require expression component re-evaluation.\n\tvoid setValue(Object newValue);\n}", "des": "A ValueRef for the null value."}
{"index": 15552, "repo": "spring-expression-6.0.11", "code": "public static class ValueRef.TypedValueHolderValueRef extends Object implements ValueRef {\n\t// Returns the value this ValueRef points to, it should not require expression component re-evaluation.\n\tTypedValue getValue();\n\t// Indicates whether calling setValue(Object) is supported.\n\tboolean isWritable();\n\t// Sets the value this ValueRef points to, it should not require expression component re-evaluation.\n\tvoid setValue(Object newValue);\n}", "des": "A ValueRef holder for a single value, which cannot be set."}
{"index": 15553, "repo": "spring-expression-6.0.11", "code": "public class VariableReference extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\tValueRef getValueRef(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Determine if this expression node will support a setValue() call.\n\tboolean isWritable(ExpressionState expressionState);\n}", "des": "Represents a variable reference — for example, #someVar."}
{"index": 15554, "repo": "spring-amqp-3.0.6", "code": "public abstract class AbstractCompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered {\n\t// Get the stream.\n\tprotected abstract OutputStream getCompressorStream(OutputStream stream);\n\t// Get the encoding.\n\tprotected abstract String getEncoding();\n\tint getOrder();\n\t// Change (or replace) the message.\n\tMessage postProcessMessage(Message message);\n}", "des": "Base class for post processors that compress the message body."}
{"index": 15555, "repo": "spring-amqp-3.0.6", "code": "public abstract class AbstractDeclarable extends Object implements Declarable {\n\t// Add an argument to the declarable.\n\tvoid addArgument(String argName, Object argValue);\n\tMap<String,Object> getArguments();\n\t// The collection of AmqpAdmins that should declare this object; if empty, all admins should declare.\n\tCollection<?> getDeclaringAdmins();\n\t// Should ignore exceptions (such as mismatched args) when declaring.\n\tboolean isIgnoreDeclarationExceptions();\n}", "des": "Base class for Declarable classes."}
{"index": 15556, "repo": "spring-amqp-3.0.6", "code": "public abstract class AbstractDecompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered {\n\t// Get the stream.\n\tprotected abstract InputStream getDecompressorStream(InputStream stream);\n\t// Get the encoding.\n\tprotected abstract String getEncoding();\n\tint getOrder();\n\t// Change (or replace) the message.\n\tMessage postProcessMessage(Message message);\n\t// Set the order.\n\tprotected void setOrder(int order);\n}", "des": "Base class for post processors that decompress the message body if the MessageProperties.SPRING_AUTO_DECOMPRESS header is true or to optionally always decompress if the content encoding matches AbstractDecompressingPostProcessor.getEncoding(), or starts with AbstractDecompressingPostProcessor.getEncoding() + \":\", in which case the encoding following the colon becomes the final content encoding of the decompressed message."}
{"index": 15557, "repo": "spring-amqp-3.0.6", "code": "public abstract class AbstractDeflaterPostProcessor extends AbstractCompressingPostProcessor {\n\t// Get the deflater compression level.\n\tint getLevel();\n\t// Set the deflater compression level.\n\tvoid setLevel(int level);\n}", "des": "Base class for post processors based on Deflater."}
{"index": 15558, "repo": "spring-amqp-3.0.6", "code": "public abstract class AbstractExchange extends AbstractDeclarable implements Exchange {\n\t// The name of the exchange.\n\tString getName();\n\t// The type of the exchange.\n\tabstract String getType();\n\t// True if the server should delete the exchange when it is no longer in use (if all bindings are deleted).\n\tboolean isAutoDelete();\n\t// Is a delayed message exchange; currently requires a broker plugin.\n\tboolean isDelayed();\n\t// A durable exchange will survive a server restart.\n\tboolean isDurable();\n}", "des": "Common properties that describe all exchange types."}
{"index": 15559, "repo": "spring-amqp-3.0.6", "code": "public abstract class AbstractJackson2MessageConverter extends AbstractMessageConverter implements org.springframework.beans.factory.BeanClassLoaderAware, SmartMessageConverter {\n\t// Crate a message from the payload object and message properties provided.\n\tprotected Message createMessage(Object objectToConvert, MessageProperties messageProperties);\n}", "des": "Abstract Jackson2 message converter."}
{"index": 15560, "repo": "spring-amqp-3.0.6", "code": "public abstract class AbstractMessageConverter extends Object implements MessageConverter {\n\t// Crate a message from the payload object and message properties provided.\n\tprotected abstract Message createMessage(Object object, MessageProperties messageProperties);\n\t// Crate a message from the payload object and message properties provided.\n\tprotected Message createMessage(Object object, MessageProperties messageProperties, Type genericType);\n}", "des": "Convenient base class for MessageConverter implementations."}
{"index": 15561, "repo": "spring-amqp-3.0.6", "code": "public enum AcknowledgeMode extends Enum<AcknowledgeMode> {\n\t// Return if the mode is NONE (which is called autoAck in RabbitMQ).\n\tboolean isAutoAck();\n\t// Return true if the mode is MANUAL.\n\tboolean isManual();\n\t// Return if transactions are allowed - if the mode is AUTO or MANUAL.\n\tboolean isTransactionAllowed();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AcknowledgeMode valueOf(String name);\n}", "des": "Acknowledgment modes supported by the listener container."}
{"index": 15562, "repo": "spring-amqp-3.0.6", "code": "public abstract class AllowedListDeserializingMessageConverter extends AbstractMessageConverter {\n\t// Add package/class patterns to the allowed list.\n\tvoid addAllowedListPatterns(String... patterns);\n\tprotected void checkAllowedList(Class<?> clazz);\n\t// Set simple patterns for allowable packages/classes for deserialization.\n\tvoid setAllowedListPatterns(List<String> patterns);\n}", "des": "MessageConverters that potentially use Java deserialization."}
{"index": 15563, "repo": "spring-amqp-3.0.6", "code": "public interface AmqpAdmin {\n\t// Declare a binding of a queue to an exchange.\n\tvoid declareBinding(Binding binding);\n\t// Declare an exchange.\n\tvoid declareExchange(Exchange exchange);\n\t// Declare a queue whose name is automatically named.\n\tQueue declareQueue();\n\t// Declare the given queue.\n\tString declareQueue(Queue queue);\n\t// Delete an exchange.\n\tboolean deleteExchange(String exchangeName);\n}", "des": "Specifies a basic set of portable AMQP administrative operations for AMQP > 0.9."}
{"index": 15564, "repo": "spring-amqp-3.0.6", "code": "public interface AmqpTemplate {\n\t// Convert a Java object to an Amqp Message and send it to a default exchange with a default routing key.\n\tvoid convertAndSend(Object message);\n\t// Convert a Java object to an Amqp Message and send it to a default exchange with a default routing key.\n\tvoid convertAndSend(Object message, MessagePostProcessor messagePostProcessor);\n}", "des": "Specifies a basic set of AMQP operations."}
{"index": 15565, "repo": "spring-amqp-3.0.6", "code": "public interface AsyncAmqpTemplate {\n\t// Convert the object to a message and send it to the default exchange with the default routing key.\n\t<C> CompletableFuture<C> convertSendAndReceive(Object object);\n\t// Convert the object to a message and send it to the default exchange with the default routing key after invoking the MessagePostProcessor.\n\t<C> CompletableFuture<C> convertSendAndReceive(Object object, MessagePostProcessor messagePostProcessor);\n}", "des": "Classes implementing this interface can perform asynchronous send and receive operations using CompletableFutures."}
{"index": 15566, "repo": "spring-amqp-3.0.6", "code": "public interface BatchMessageListener extends MessageListener {\n\t// Delivers a single message.\n\tdefault void onMessage(Message message);\n\t// Delivers a batch of messages.\n\tvoid onMessageBatch(List<Message> messages);\n}", "des": "Used to receive a batch of messages if the container supports it."}
{"index": 15567, "repo": "spring-amqp-3.0.6", "code": "public static enum Binding.DestinationType extends Enum<Binding.DestinationType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Binding.DestinationType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Binding.DestinationType[] values();\n}", "des": "The binding destination."}
{"index": 15568, "repo": "spring-amqp-3.0.6", "code": "public class ContentTypeDelegatingMessageConverter extends Object implements MessageConverter {\n\t// Add a delegate converter for the content type.\n\tvoid addDelegate(String contentType, MessageConverter messageConverter);\n\t// Convert from a Message to a Java object.\n\tObject fromMessage(Message message);\n\tprotected MessageConverter getConverterForContentType(String contentType);\n\tMap<String,MessageConverter> getDelegates();\n}", "des": "A composite MessageConverter that delegates to an actual MessageConverter based on the contentType header."}
{"index": 15569, "repo": "spring-amqp-3.0.6", "code": "public interface Declarable {\n\t// Add an argument to the declarable.\n\tdefault void addArgument(String name, Object value);\n\t// The collection of AmqpAdmins that should declare this object; if empty, all admins should declare.\n\tCollection<?> getDeclaringAdmins();\n\t// Should ignore exceptions (such as mismatched args) when declaring.\n\tboolean isIgnoreDeclarationExceptions();\n\t// Remove an argument from the declarable.\n\tdefault Object removeArgument(String name);\n}", "des": "Classes implementing this interface can be auto-declared with the broker during context initialization by an AmqpAdmin."}
{"index": 15570, "repo": "spring-amqp-3.0.6", "code": "public class DefaultClassMapper extends Object implements ClassMapper, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tvoid fromClass(Class<?> clazz, MessageProperties properties);\n\t// The name of the header that contains the type id.\n\tString getClassIdFieldName();\n\t// Set the type of Map to use.\n\tvoid setDefaultMapClass(Class<?> defaultMapClass);\n}", "des": "Maps to/from JSON using type information in the MessageProperties; the default name of the message property containing the type is \"__TypeId__\"."}
{"index": 15571, "repo": "spring-amqp-3.0.6", "code": "public class DefaultJackson2JavaTypeMapper extends AbstractJavaTypeMapper implements Jackson2JavaTypeMapper {\n\t// Add trusted packages.\n\tvoid addTrustedPackages(String... packages);\n\tvoid fromClass(Class<?> clazz, MessageProperties properties);\n\t// Set the message properties according to the type.\n\tvoid fromJavaType(com.fasterxml.jackson.databind.JavaType javaType, MessageProperties properties);\n}", "des": "Jackson 2 type mapper."}
{"index": 15572, "repo": "spring-amqp-3.0.6", "code": "public class DeflaterPostProcessor extends AbstractDeflaterPostProcessor {\n\t// Get the stream.\n\tprotected OutputStream getCompressorStream(OutputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a DeflaterOutputStream to compress the message body."}
{"index": 15573, "repo": "spring-amqp-3.0.6", "code": "public class DelegatingDecompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered {\n\t// Add a message post processor to the map of decompressing MessageProcessors.\n\tvoid addDecompressor(String contentEncoding, MessagePostProcessor decompressor);\n\tint getOrder();\n\t// Change (or replace) the message.\n\tMessage postProcessMessage(Message message);\n}", "des": "A MessagePostProcessor that delegates to one of its MessagePostProcessors depending on the content encoding."}
{"index": 15574, "repo": "spring-amqp-3.0.6", "code": "public interface Exchange extends Declarable {\n\t// A map of arguments used to declare the exchange.\n\tMap<String,Object> getArguments();\n\t// The name of the exchange.\n\tString getName();\n\t// The type of the exchange.\n\tString getType();\n\t// True if the server should delete the exchange when it is no longer in use (if all bindings are deleted).\n\tboolean isAutoDelete();\n\t// Is a delayed message exchange; currently requires a broker plugin.\n\tboolean isDelayed();\n}", "des": "Interface for all exchanges."}
{"index": 15575, "repo": "spring-amqp-3.0.6", "code": "public final class ExchangeBuilder extends AbstractBuilder {\n\t// Admin instances, or admin bean names that should declare this exchange.\n\tExchangeBuilder admins(Object... admins);\n\tExchangeBuilder alternate(String exchange);\n\t// Set the auto delete flag.\n\tExchangeBuilder autoDelete();\n\t<T extends Exchange>T build();\n\t// Set the delayed flag.\n\tExchangeBuilder delayed();\n\t// Return a DirectExchange builder.\n\tstatic ExchangeBuilder directExchange(String name);\n}", "des": "Builder providing a fluent API for building Exchanges."}
{"index": 15576, "repo": "spring-amqp-3.0.6", "code": "public class GUnzipPostProcessor extends AbstractDecompressingPostProcessor {\n\t// Get the stream.\n\tprotected InputStream getDecompressorStream(InputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a GZIPInputStream to decompress the message body."}
{"index": 15577, "repo": "spring-amqp-3.0.6", "code": "public class GZipPostProcessor extends AbstractDeflaterPostProcessor {\n\t// Get the stream.\n\tprotected OutputStream getCompressorStream(OutputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a GZIPOutputStream to compress the message body."}
{"index": 15578, "repo": "spring-amqp-3.0.6", "code": "public class InflaterPostProcessor extends AbstractDecompressingPostProcessor {\n\t// Get the stream.\n\tprotected InputStream getDecompressorStream(InputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a InflaterInputStream to decompress the message body."}
{"index": 15579, "repo": "spring-amqp-3.0.6", "code": "public interface Jackson2JavaTypeMapper extends ClassMapper {\n\t// Add trusted packages.\n\tdefault void addTrustedPackages(String... packages);\n\t// Set the message properties according to the type.\n\tvoid fromJavaType(com.fasterxml.jackson.databind.JavaType javaType, MessageProperties properties);\n\t// Return the inferred type, if the type precedence is inferred and the header is present.\n\tcom.fasterxml.jackson.databind.JavaType getInferredType(MessageProperties properties);\n}", "des": "Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message."}
{"index": 15580, "repo": "spring-amqp-3.0.6", "code": "public static enum Jackson2JavaTypeMapper.TypePrecedence extends Enum<Jackson2JavaTypeMapper.TypePrecedence> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Jackson2JavaTypeMapper.TypePrecedence valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Jackson2JavaTypeMapper.TypePrecedence[] values();\n}", "des": "The precedence for type conversion - inferred from the method parameter or message headers."}
{"index": 15581, "repo": "spring-amqp-3.0.6", "code": "public final class JavaUtils extends Object {\n\t// Invoke BiConsumer.accept(Object, Object) with the arguments if the condition is true.\n\t<T1, T2> JavaUtils acceptIfCondition(boolean condition, T1 t1, T2 t2, BiConsumer<T1,T2> consumer);\n\t// Invoke Consumer.accept(Object) with the value if the condition is true.\n\t<T> JavaUtils acceptIfCondition(boolean condition, T value, Consumer<T> consumer);\n}", "des": "Chained utility methods to simplify some Java repetitive code."}
{"index": 15582, "repo": "spring-amqp-3.0.6", "code": "public class MarshallingMessageConverter extends AbstractMessageConverter implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Marshals the given object to a Message.\n\tprotected Message createMessage(Object object, MessageProperties messageProperties);\n\t// Unmarshals the given Message into an object.\n\tObject fromMessage(Message message);\n\t// Set the contentType to be used by this message converter.\n\tvoid setContentType(String contentType);\n}", "des": "Spring Rabbit MessageConverter that uses a Marshaller and Unmarshaller."}
{"index": 15583, "repo": "spring-amqp-3.0.6", "code": "public class Message extends Object implements Serializable {\n\tboolean equals(Object obj);\n\tbyte[] getBody();\n\tMessageProperties getMessageProperties();\n\t// Set the encoding to use in toString() when converting the body if there is no contentEncoding message property present.\n\tstatic void setDefaultEncoding(String encoding);\n\t// Set the maximum length of a test message body to render as a String in toString().\n\tstatic void setMaxBodyLength(int length);\n}", "des": "The 0-8 and 0-9-1 AMQP specifications do not define an Message class or interface."}
{"index": 15584, "repo": "spring-amqp-3.0.6", "code": "public final class MessageBuilder extends MessageBuilderSupport<Message> {\n\t// Makes this builder's properties builder use a reference to properties.\n\tMessageBuilder andProperties(MessageProperties properties);\n\tMessage build();\n\t// The final message will have a copy of the message body, the MessageProperties will be cloned (top level only).\n\tstatic MessageBuilder fromClonedMessage(Message message);\n}", "des": "Builds a Spring AMQP Message either from a byte[] body or another Message using a fluent API."}
{"index": 15585, "repo": "spring-amqp-3.0.6", "code": "public interface MessageConverter {\n\t// Convert from a Message to a Java object.\n\tObject fromMessage(Message message);\n\t// Convert a Java object to a Message.\n\tMessage toMessage(Object object, MessageProperties messageProperties);\n\t// Convert a Java object to a Message.\n\tdefault Message toMessage(Object object, MessageProperties messageProperties, Type genericType);\n}", "des": "Message converter interface."}
{"index": 15586, "repo": "spring-amqp-3.0.6", "code": "public enum MessageDeliveryMode extends Enum<MessageDeliveryMode> {\n\tstatic MessageDeliveryMode fromInt(int modeAsNumber);\n\tstatic int toInt(MessageDeliveryMode mode);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MessageDeliveryMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MessageDeliveryMode[] values();\n}", "des": "Enumeration for the message delivery mode."}
{"index": 15587, "repo": "spring-amqp-3.0.6", "code": "@FunctionalInterface public interface MessageListener {\n\t// Called by the container to inform the listener of its acknowledgement mode.\n\tdefault void containerAckMode(AcknowledgeMode mode);\n\t// Return true if this listener is request/reply and the replies are async.\n\tdefault boolean isAsyncReplies();\n\t// Delivers a single message.\n\tvoid onMessage(Message message);\n\t// Delivers a batch of messages.\n\tdefault void onMessageBatch(List<Message> messages);\n}", "des": "Listener interface to receive asynchronous delivery of Amqp Messages."}
{"index": 15588, "repo": "spring-amqp-3.0.6", "code": "@FunctionalInterface public interface MessagePostProcessor {\n\t// Change (or replace) the message.\n\tMessage postProcessMessage(Message message);\n\t// Change (or replace) the message and/or change its correlation data.\n\tdefault Message postProcessMessage(Message message, Correlation correlation);\n\t// Change (or replace) the message and/or change its correlation data.\n\tdefault Message postProcessMessage(Message message, Correlation correlation, String exchange, String routingKey);\n}", "des": "Used in several places in the framework, such as AmqpTemplate#convertAndSend(Object, MessagePostProcessor) where it can be used to add/modify headers or properties after the message conversion has been performed."}
{"index": 15589, "repo": "spring-amqp-3.0.6", "code": "public class MessageProperties extends Object implements Serializable {\n\tboolean equals(Object obj);\n\tString getAppId();\n\tString getClusterId();\n\tString getConsumerQueue();\n\tString getConsumerTag();\n\tString getContentEncoding();\n\tlong getContentLength();\n\tString getContentType();\n\t// Get the correlation id.\n\tString getCorrelationId();\n\t// The x-delay header (outbound).\n\tInteger getDelay();\n\tMessageDeliveryMode getDeliveryMode();\n\tlong getDeliveryTag();\n}", "des": "Message Properties for an AMQP message."}
{"index": 15590, "repo": "spring-amqp-3.0.6", "code": "public final class MessagePropertiesBuilder extends MessageBuilderSupport<MessageProperties> {\n\tMessageProperties build();\n\tMessagePropertiesBuilder copyProperties(MessageProperties properties);\n\t// Performs a shallow copy of the properties for the initial value.\n\tstatic MessagePropertiesBuilder fromClonedProperties(MessageProperties properties);\n}", "des": "Builds a Spring AMQP MessageProperties object using a fluent API."}
{"index": 15591, "repo": "spring-amqp-3.0.6", "code": "public class MessagingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Extract the payload of the specified Message.\n\tprotected Object extractPayload(Message message);\n\t// Convert from a Message to a Java object.\n\tObject fromMessage(Message message);\n\tAmqpHeaderMapper getHeaderMapper();\n}", "des": "Convert a Message from the messaging abstraction to and from a Message using an underlying MessageConverter for the payload and a AmqpHeaderMapper to map the AMQP headers to and from standard message headers."}
{"index": 15592, "repo": "spring-amqp-3.0.6", "code": "public class Queue extends AbstractDeclarable implements Cloneable {\n\tObject clone();\n\t// Return the name provided to the constructor or the broker-generated name if that name is an empty String.\n\tString getActualName();\n\t// Return the name provided in the constructor.\n\tString getName();\n\t// True if the server should delete the queue when it is no longer in use (the last consumer is cancelled).\n\tboolean isAutoDelete();\n\t// A durable queue will survive a server restart.\n\tboolean isDurable();\n}", "des": "Simple container collecting information to describe a queue."}
{"index": 15593, "repo": "spring-amqp-3.0.6", "code": "public final class QueueBuilder extends AbstractBuilder {\n\t// The final queue will auto delete.\n\tQueueBuilder autoDelete();\n\t// Builds a final queue.\n\tQueue build();\n\t// Set the dead-letter exchange to which to route expired or rejected messages.\n\tQueueBuilder deadLetterExchange(String dlx);\n\t// Set the routing key to use when routing expired or rejected messages to the dead-letter exchange.\n\tQueueBuilder deadLetterRoutingKey(String dlrk);\n}", "des": "Builds a Spring AMQP Queue using a fluent API."}
{"index": 15594, "repo": "spring-amqp-3.0.6", "code": "public static enum QueueBuilder.LeaderLocator extends Enum<QueueBuilder.LeaderLocator> {\n\t// Return the value.\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic QueueBuilder.LeaderLocator valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic QueueBuilder.LeaderLocator[] values();\n}", "des": "Locate the queue leader."}
{"index": 15595, "repo": "spring-amqp-3.0.6", "code": "public static enum QueueBuilder.Overflow extends Enum<QueueBuilder.Overflow> {\n\t// Return the value.\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic QueueBuilder.Overflow valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic QueueBuilder.Overflow[] values();\n}", "des": "Overflow argument values."}
{"index": 15596, "repo": "spring-amqp-3.0.6", "code": "public class RemoteInvocationAwareMessageConverterAdapter extends Object implements MessageConverter {\n\t// Convert from a Message to a Java object.\n\tObject fromMessage(Message message);\n\t// Convert a Java object to a Message.\n\tMessage toMessage(Object object, MessageProperties messageProperties);\n}", "des": "A delegating adapter that unwraps RemoteInvocationResult after invoking the delegate to convert from a message."}
{"index": 15597, "repo": "spring-amqp-3.0.6", "code": "public class RemoteInvocationResult extends Object implements Serializable {\n\t// Return the exception thrown by an unsuccessful invocation of the target method, if any.\n\tThrowable getException();\n\t// Return the result value returned by a successful invocation of the target method, if any.\n\tObject getValue();\n\t// Return whether this invocation result holds an exception.\n\tboolean hasException();\n}", "des": "Encapsulates a remote invocation result, holding a result value or an exception."}
{"index": 15598, "repo": "spring-amqp-3.0.6", "code": "public class ReturnedMessage extends Object {\n\t// Get the exchange.\n\tString getExchange();\n\t// Get the message.\n\tMessage getMessage();\n\t// Get the reply code.\n\tint getReplyCode();\n\t// Get the reply text.\n\tString getReplyText();\n\t// Get the routing key.\n\tString getRoutingKey();\n}", "des": "Returned message and its metadata."}
{"index": 15599, "repo": "spring-amqp-3.0.6", "code": "public final class SendRetryContextAccessor extends Object {\n\t// Retrieve the Address from the context.\n\tstatic Address getAddress(org.springframework.retry.RetryContext context);\n\t// Retrieve the Message from the context.\n\tstatic Message getMessage(org.springframework.retry.RetryContext context);\n}", "des": "Type safe accessor for retried message sending."}
{"index": 15600, "repo": "spring-amqp-3.0.6", "code": "public final class SerializationUtils extends Object {\n\t// Verify that the class is in the allowed list.\n\tstatic void checkAllowedList(Class<?> clazz, Set<String> patterns);\n\t// Deserialize the bytes.\n\tstatic Object deserialize(byte[] bytes);\n\t// Deserialize the stream.\n\tstatic Object deserialize(InputStream inputStream, Set<String> allowedListPatterns, ClassLoader classLoader);\n\t// Deserialize the stream.\n\tstatic Object deserialize(ObjectInputStream stream);\n}", "des": "Static utility to help with serialization."}
{"index": 15601, "repo": "spring-amqp-3.0.6", "code": "public class SerializerMessageConverter extends AllowedListDeserializingMessageConverter {\n\t// Creates an AMQP Message from the provided Object.\n\tprotected Message createMessage(Object object, MessageProperties messageProperties);\n\t// Converts from a AMQP Message to an Object.\n\tObject fromMessage(Message message);\n\t// Specify the default charset to use when converting to or from text-based Message body content.\n\tvoid setDefaultCharset(String defaultCharset);\n}", "des": "Implementation of MessageConverter that can work with Strings or native objects of any kind via the Serializer and Deserializer abstractions in Spring."}
{"index": 15602, "repo": "spring-amqp-3.0.6", "code": "public class SimpleMessageConverter extends AllowedListDeserializingMessageConverter {\n\t// Creates an AMQP Message from the provided Object.\n\tprotected Message createMessage(Object object, MessageProperties messageProperties);\n\t// Create an ObjectInputStream for the given InputStream and codebase.\n\tprotected ObjectInputStream createObjectInputStream(InputStream is);\n\t// Converts from a AMQP Message to an Object.\n\tObject fromMessage(Message message);\n}", "des": "Implementation of MessageConverter that can work with Strings, Serializable instances, or byte arrays."}
{"index": 15603, "repo": "spring-amqp-3.0.6", "code": "public class UnzipPostProcessor extends AbstractDecompressingPostProcessor {\n\t// Get the stream.\n\tprotected InputStream getDecompressorStream(InputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a ZipInputStream to decompress the message body."}
{"index": 15604, "repo": "spring-amqp-3.0.6", "code": "public class ZipPostProcessor extends AbstractDeflaterPostProcessor {\n\t// Get the stream.\n\tprotected OutputStream getCompressorStream(OutputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a ZipOutputStream to compress the message body."}
{"index": 15605, "repo": "spring-security-oauth2-core-6.1.2", "code": "public abstract class AbstractOAuth2Token extends Object implements OAuth2Token, Serializable {\n\tboolean equals(Object obj);\n\t// Returns the expiration time on or after which the token MUST NOT be accepted.\n\tInstant getExpiresAt();\n\t// Returns the time at which the token was issued.\n\tInstant getIssuedAt();\n\t// Returns the token value.\n\tString getTokenValue();\n}", "des": "Base class for OAuth 2.0 Token implementations."}
{"index": 15606, "repo": "spring-security-oauth2-core-6.1.2", "code": "public interface AddressStandardClaim {\n\t// Returns the country.\n\tString getCountry();\n\t// Returns the full mailing address, formatted for display.\n\tString getFormatted();\n\t// Returns the city or locality.\n\tString getLocality();\n\t// Returns the zip code or postal code.\n\tString getPostalCode();\n\t// Returns the state, province, prefecture, or region.\n\tString getRegion();\n\t// Returns the full street address, which may include house number, street name, P.O.\n\tString getStreetAddress();\n}", "des": "The Address Claim represents a physical mailing address defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token."}
{"index": 15607, "repo": "spring-security-oauth2-core-6.1.2", "code": "public interface ClaimAccessor {\n\t// Returns the claim value as a T type.\n\tdefault <T> T getClaim(String claim);\n\t// Returns the claim value as a Boolean or null if the claim does not exist.\n\tdefault Boolean getClaimAsBoolean(String claim);\n\t// Returns the claim value as an Instant or null if it does not exist.\n\tdefault Instant getClaimAsInstant(String claim);\n\t// Returns the claim value as a Map<String, Object> or null if the claim does not exist.\n\tdefault Map<String,Object> getClaimAsMap(String claim);\n}", "des": "An \"accessor\" for a set of claims that may be used for assertions."}
{"index": 15608, "repo": "spring-security-oauth2-core-6.1.2", "code": "public final class ClaimConversionService extends org.springframework.core.convert.support.GenericConversionService {\n\t// Adds the converters that provide type conversion for claim values to the provided ConverterRegistry.\n\tstatic void addConverters(org.springframework.core.convert.converter.ConverterRegistry converterRegistry);\n\t// Returns a shared instance of ClaimConversionService.\n\tstatic ClaimConversionService getSharedInstance();\n}", "des": "A ConversionService configured with converters that provide type conversion for claim values."}
{"index": 15609, "repo": "spring-security-oauth2-core-6.1.2", "code": "public final class DefaultAddressStandardClaim extends Object implements AddressStandardClaim {\n\tboolean equals(Object obj);\n\t// Returns the country.\n\tString getCountry();\n\t// Returns the full mailing address, formatted for display.\n\tString getFormatted();\n\t// Returns the city or locality.\n\tString getLocality();\n\t// Returns the zip code or postal code.\n\tString getPostalCode();\n\t// Returns the state, province, prefecture, or region.\n\tString getRegion();\n}", "des": "The default implementation of an Address Claim."}
{"index": 15610, "repo": "spring-security-oauth2-core-6.1.2", "code": "public static class DefaultAddressStandardClaim.Builder extends Object {\n\t// Builds a new DefaultAddressStandardClaim.\n\tAddressStandardClaim build();\n\t// Sets the country.\n\tDefaultAddressStandardClaim.Builder country(String country);\n\t// Sets the full mailing address, formatted for display.\n\tDefaultAddressStandardClaim.Builder formatted(String formatted);\n\t// Sets the city or locality.\n\tDefaultAddressStandardClaim.Builder locality(String locality);\n}", "des": "A builder for DefaultAddressStandardClaim."}
{"index": 15611, "repo": "spring-security-oauth2-core-6.1.2", "code": "public final class DefaultOAuth2AuthenticatedPrincipal extends Object implements OAuth2AuthenticatedPrincipal, Serializable {\n\t// Gets the attributes of the OAuth 2.0 token in map form.\n\tMap<String,Object> getAttributes();\n\t// Get the Collection of GrantedAuthoritys associated with this OAuth 2.0 token\n\tCollection<? extends org.springframework.security.core.GrantedAuthority> getAuthorities();\n\tString getName();\n}", "des": "A domain object that wraps the attributes of an OAuth 2.0 token."}
{"index": 15612, "repo": "spring-security-oauth2-core-6.1.2", "code": "public class DefaultOAuth2User extends Object implements OAuth2User, Serializable {\n\tboolean equals(Object obj);\n\t// Get the OAuth 2.0 token attributes\n\tMap<String,Object> getAttributes();\n\t// Get the Collection of GrantedAuthoritys associated with this OAuth 2.0 token\n\tCollection<? extends org.springframework.security.core.GrantedAuthority> getAuthorities();\n\tString getName();\n}", "des": "The default implementation of an OAuth2User."}
{"index": 15613, "repo": "spring-security-oauth2-core-6.1.2", "code": "public class DefaultOidcUser extends DefaultOAuth2User implements OidcUser {\n\t// Returns the claims about the user.\n\tMap<String,Object> getClaims();\n\t// Returns the ID Token containing claims about the user.\n\tOidcIdToken getIdToken();\n\t// Returns the UserInfo containing claims about the user.\n\tOidcUserInfo getUserInfo();\n}", "des": "The default implementation of an OidcUser."}
{"index": 15614, "repo": "spring-security-oauth2-core-6.1.2", "code": "public interface IdTokenClaimAccessor extends StandardClaimAccessor {\n\t// Returns the Access Token hash value (at_hash).\n\tdefault String getAccessTokenHash();\n\t// Returns the Audience(s) (aud) that this ID Token is intended for.\n\tdefault List<String> getAudience();\n\t// Returns the time when the End-User authentication occurred (auth_time).\n\tdefault Instant getAuthenticatedAt();\n\t// Returns the Authentication Context Class Reference (acr).\n\tdefault String getAuthenticationContextClass();\n}", "des": "A ClaimAccessor for the \"claims\" that can be returned in the ID Token, which provides information about the authentication of an End-User by an Authorization Server."}
{"index": 15615, "repo": "spring-security-oauth2-core-6.1.2", "code": "public class OAuth2AccessToken extends AbstractOAuth2Token {\n\t// Returns the scope(s) associated to the token.\n\tSet<String> getScopes();\n\t// Returns the token type.\n\tOAuth2AccessToken.TokenType getTokenType();\n}", "des": "An implementation of an AbstractOAuth2Token representing an OAuth 2.0 Access Token."}
{"index": 15616, "repo": "spring-security-oauth2-core-6.1.2", "code": "public final class OAuth2AccessTokenResponse extends Object {\n\t// Returns the Access Token.\n\tOAuth2AccessToken getAccessToken();\n\t// Returns the additional parameters returned in the response.\n\tMap<String,Object> getAdditionalParameters();\n\t// Returns the Refresh Token.\n\tOAuth2RefreshToken getRefreshToken();\n\t// Returns a new OAuth2AccessTokenResponse.Builder, initialized with the provided response.\n\tstatic OAuth2AccessTokenResponse.Builder withResponse(OAuth2AccessTokenResponse response);\n}", "des": "A representation of an OAuth 2.0 Access Token Response."}
{"index": 15617, "repo": "spring-security-oauth2-core-6.1.2", "code": "public static final class OAuth2AccessTokenResponse.Builder extends Object {\n\t// Sets the additional parameters returned in the response.\n\tOAuth2AccessTokenResponse.Builder additionalParameters(Map<String,Object> additionalParameters);\n\t// Builds a new OAuth2AccessTokenResponse.\n\tOAuth2AccessTokenResponse build();\n\t// Sets the lifetime (in seconds) of the access token.\n\tOAuth2AccessTokenResponse.Builder expiresIn(long expiresIn);\n}", "des": "A builder for OAuth2AccessTokenResponse."}
{"index": 15618, "repo": "spring-security-oauth2-core-6.1.2", "code": "public interface OAuth2AuthenticatedPrincipal extends org.springframework.security.core.AuthenticatedPrincipal {\n\t// Get the OAuth 2.0 token attribute by name\n\tdefault <A> A getAttribute(String name);\n\t// Get the OAuth 2.0 token attributes\n\tMap<String,Object> getAttributes();\n\t// Get the Collection of GrantedAuthoritys associated with this OAuth 2.0 token\n\tCollection<? extends org.springframework.security.core.GrantedAuthority> getAuthorities();\n}", "des": "An AuthenticatedPrincipal that represents the principal associated with an OAuth 2.0 token."}
{"index": 15619, "repo": "spring-security-oauth2-core-6.1.2", "code": "public final class OAuth2AuthorizationExchange extends Object {\n\t// Returns the Authorization Request.\n\tOAuth2AuthorizationRequest getAuthorizationRequest();\n\t// Returns the Authorization Response.\n\tOAuth2AuthorizationResponse getAuthorizationResponse();\n}", "des": "An \"exchange\" of an OAuth 2.0 Authorization Request and Response for the authorization code grant type."}
{"index": 15620, "repo": "spring-security-oauth2-core-6.1.2", "code": "public final class OAuth2AuthorizationRequest extends Object implements Serializable {\n\t// Returns a new OAuth2AuthorizationRequest.Builder, initialized with the authorization code grant type.\n\tstatic OAuth2AuthorizationRequest.Builder authorizationCode();\n\t// Returns a new OAuth2AuthorizationRequest.Builder, initialized with the values from the provided authorizationRequest.\n\tstatic OAuth2AuthorizationRequest.Builder from(OAuth2AuthorizationRequest authorizationRequest);\n}", "des": "A representation of an OAuth 2.0 Authorization Request for the authorization code grant type."}
{"index": 15621, "repo": "spring-security-oauth2-core-6.1.2", "code": "public static final class OAuth2AuthorizationRequest.Builder extends Object {\n\t// A Consumer to be provided access to the additional parameter(s) allowing the ability to add, replace, or remove.\n\tOAuth2AuthorizationRequest.Builder additionalParameters(Consumer<Map<String,Object>> additionalParametersConsumer);\n\t// Sets the additional parameter(s) used in the request.\n\tOAuth2AuthorizationRequest.Builder additionalParameters(Map<String,Object> additionalParameters);\n}", "des": "A builder for OAuth2AuthorizationRequest."}
{"index": 15622, "repo": "spring-security-oauth2-core-6.1.2", "code": "public final class OAuth2AuthorizationResponse extends Object {\n\t// Returns a new OAuth2AuthorizationResponse.Builder, initialized with the error code.\n\tstatic OAuth2AuthorizationResponse.Builder error(String errorCode);\n\t// Returns the authorization code.\n\tString getCode();\n\t// Returns the OAuth 2.0 Error if the Authorization Request failed, otherwise null.\n\tOAuth2Error getError();\n\t// Returns the uri where the response was redirected to.\n\tString getRedirectUri();\n}", "des": "A representation of an OAuth 2.0 Authorization Response for the authorization code grant type."}
{"index": 15623, "repo": "spring-security-oauth2-core-6.1.2", "code": "public static final class OAuth2AuthorizationResponse.Builder extends Object {\n\t// Builds a new OAuth2AuthorizationResponse.\n\tOAuth2AuthorizationResponse build();\n\t// Sets the authorization code.\n\tOAuth2AuthorizationResponse.Builder code(String code);\n\t// Sets the error code.\n\tOAuth2AuthorizationResponse.Builder errorCode(String errorCode);\n\t// Sets the error description.\n\tOAuth2AuthorizationResponse.Builder errorDescription(String errorDescription);\n}", "des": "A builder for OAuth2AuthorizationResponse."}
{"index": 15624, "repo": "spring-security-oauth2-core-6.1.2", "code": "public final class OAuth2DeviceAuthorizationResponse extends Object {\n\t// Returns the additional parameters returned in the response.\n\tMap<String,Object> getAdditionalParameters();\n\t// Returns the Device Code.\n\tOAuth2DeviceCode getDeviceCode();\n\t// Returns the minimum amount of time (in seconds) that the client should wait between polling requests to the token endpoint.\n\tlong getInterval();\n\t// Returns the User Code.\n\tOAuth2UserCode getUserCode();\n}", "des": "A representation of an OAuth 2.0 Device Authorization Response."}
{"index": 15625, "repo": "spring-security-oauth2-core-6.1.2", "code": "public static final class OAuth2DeviceAuthorizationResponse.Builder extends Object {\n\t// Sets the additional parameters returned in the response.\n\tOAuth2DeviceAuthorizationResponse.Builder additionalParameters(Map<String,Object> additionalParameters);\n\t// Builds a new OAuth2DeviceAuthorizationResponse.\n\tOAuth2DeviceAuthorizationResponse build();\n\t// Sets the lifetime (in seconds) of the device code and user code.\n\tOAuth2DeviceAuthorizationResponse.Builder expiresIn(long expiresIn);\n}", "des": "A builder for OAuth2DeviceAuthorizationResponse."}
{"index": 15626, "repo": "spring-security-oauth2-core-6.1.2", "code": "public class OAuth2Error extends Object implements Serializable {\n\t// Returns the error description.\n\tfinal String getDescription();\n\t// Returns the error code.\n\tfinal String getErrorCode();\n\t// Returns the error uri.\n\tfinal String getUri();\n}", "des": "A representation of an OAuth 2.0 Error."}
{"index": 15627, "repo": "spring-security-oauth2-core-6.1.2", "code": "public class OAuth2ErrorHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter<OAuth2Error> {\n\tprotected OAuth2Error readInternal(Class<? extends OAuth2Error> clazz, org.springframework.http.HttpInputMessage inputMessage);\n\t// Sets the Converter used for converting the OAuth 2.0 Error parameters to an OAuth2Error.\n\tfinal void setErrorConverter(org.springframework.core.convert.converter.Converter<Map<String,String>,OAuth2Error> errorConverter);\n}", "des": "A HttpMessageConverter for an OAuth 2.0 Error."}
{"index": 15628, "repo": "spring-security-oauth2-core-6.1.2", "code": "public interface OAuth2Token {\n\t// Returns the expiration time on or after which the token MUST NOT be accepted.\n\tdefault Instant getExpiresAt();\n\t// Returns the time at which the token was issued.\n\tdefault Instant getIssuedAt();\n\t// Returns the token value.\n\tString getTokenValue();\n}", "des": "Core interface representing an OAuth 2.0 Token."}
{"index": 15629, "repo": "spring-security-oauth2-core-6.1.2", "code": "public interface OAuth2TokenIntrospectionClaimAccessor extends ClaimAccessor {\n\t// Returns the intended audience (aud) for the token\n\tdefault List<String> getAudience();\n\t// Returns the client identifier (client_id) for the token\n\tdefault String getClientId();\n\t// Returns a timestamp (exp) indicating when the token expires\n\tdefault Instant getExpiresAt();\n\t// Returns the identifier (jti) for the token\n\tdefault String getId();\n}", "des": "A ClaimAccessor for the \"claims\" that may be contained in the Introspection Response."}
{"index": 15630, "repo": "spring-security-oauth2-core-6.1.2", "code": "public final class OAuth2TokenValidatorResult extends Object {\n\t// Construct a failure OAuth2TokenValidatorResult with the provided detail\n\tstatic OAuth2TokenValidatorResult failure(Collection<OAuth2Error> errors);\n\t// Construct a failure OAuth2TokenValidatorResult with the provided detail\n\tstatic OAuth2TokenValidatorResult failure(OAuth2Error... errors);\n\t// Return error details regarding the validation attempt\n\tCollection<OAuth2Error> getErrors();\n}", "des": "A result emitted from an OAuth2TokenValidator validation attempt"}
{"index": 15631, "repo": "spring-security-oauth2-core-6.1.2", "code": "public class OidcIdToken extends AbstractOAuth2Token implements IdTokenClaimAccessor {\n\t// Returns a set of claims that may be used for assertions.\n\tMap<String,Object> getClaims();\n\t// Create a OidcIdToken.Builder based on the given token value\n\tstatic OidcIdToken.Builder withTokenValue(String tokenValue);\n}", "des": "An implementation of an AbstractOAuth2Token representing an OpenID Connect Core 1.0 ID Token."}
{"index": 15632, "repo": "spring-security-oauth2-core-6.1.2", "code": "public static final class OidcIdToken.Builder extends Object {\n\t// Use this access token hash in the resulting OidcIdToken\n\tOidcIdToken.Builder accessTokenHash(String accessTokenHash);\n\t// Use this audience in the resulting OidcIdToken\n\tOidcIdToken.Builder audience(Collection<String> audience);\n\t// Use this authentication context class reference in the resulting OidcIdToken\n\tOidcIdToken.Builder authenticationContextClass(String authenticationContextClass);\n}", "des": "A builder for OidcIdTokens"}
{"index": 15633, "repo": "spring-security-oauth2-core-6.1.2", "code": "public interface OidcUser extends OAuth2User, IdTokenClaimAccessor {\n\t// Returns the claims about the user.\n\tMap<String,Object> getClaims();\n\t// Returns the ID Token containing claims about the user.\n\tOidcIdToken getIdToken();\n\t// Returns the UserInfo containing claims about the user.\n\tOidcUserInfo getUserInfo();\n}", "des": "A representation of a user Principal that is registered with an OpenID Connect 1.0 Provider."}
{"index": 15634, "repo": "spring-security-oauth2-core-6.1.2", "code": "public class OidcUserAuthority extends OAuth2UserAuthority {\n\tboolean equals(Object obj);\n\t// Returns the ID Token containing claims about the user.\n\tOidcIdToken getIdToken();\n\t// Returns the UserInfo containing claims about the user, may be null.\n\tOidcUserInfo getUserInfo();\n}", "des": "A GrantedAuthority that may be associated to an OidcUser."}
{"index": 15635, "repo": "spring-security-oauth2-core-6.1.2", "code": "public class OidcUserInfo extends Object implements StandardClaimAccessor, Serializable {\n\t// Create a OidcUserInfo.Builder\n\tstatic OidcUserInfo.Builder builder();\n\tboolean equals(Object obj);\n\t// Returns a set of claims that may be used for assertions.\n\tMap<String,Object> getClaims();\n}", "des": "A representation of a UserInfo Response that is returned from the OAuth 2.0 Protected Resource UserInfo Endpoint."}
{"index": 15636, "repo": "spring-security-oauth2-core-6.1.2", "code": "public static final class OidcUserInfo.Builder extends Object {\n\t// Use this address in the resulting OidcUserInfo\n\tOidcUserInfo.Builder address(String address);\n\t// Use this birthdate in the resulting OidcUserInfo\n\tOidcUserInfo.Builder birthdate(String birthdate);\n\t// Build the OidcUserInfo\n\tOidcUserInfo build();\n\t// Use this claim in the resulting OidcUserInfo\n\tOidcUserInfo.Builder claim(String name, Object value);\n}", "des": "A builder for OidcUserInfos"}
{"index": 15637, "repo": "spring-security-oauth2-core-6.1.2", "code": "public interface StandardClaimAccessor extends ClaimAccessor {\n\t// Returns the user's preferred postal address (address).\n\tdefault AddressStandardClaim getAddress();\n\t// Returns the user's birth date (birthdate).\n\tdefault String getBirthdate();\n\t// Returns the user's preferred e-mail address (email).\n\tdefault String getEmail();\n\t// Returns true if the user's e-mail address has been verified (email_verified), otherwise false.\n\tdefault Boolean getEmailVerified();\n}", "des": "A ClaimAccessor for the \"Standard Claims\" that can be returned either in the UserInfo Response or the ID Token."}
{"index": 15638, "repo": "spring-integration-ip-6.1.2", "code": "public abstract class AbstractClientConnectionFactory extends AbstractConnectionFactory {\n\tprotected TcpConnectionSupport buildNewConnection();\n\t// Set whether to automatically (default) or manually add a TcpListener to the connections created by this factory.\n\tvoid enableManualListenerRegistration();\n\t// Force close the connection and null the field if it's a shared connection.\n\tvoid forceClose(TcpConnection connection);\n}", "des": "Abstract class for client connection factories; client connection factories establish outgoing connections."}
{"index": 15639, "repo": "spring-integration-ip-6.1.2", "code": "public abstract class AbstractPooledBufferByteArraySerializer extends AbstractByteArraySerializer {\n\t// Copy size bytes to a new buffer exactly size bytes long.\n\tprotected byte[] copyToSizedArray(byte[] buffer, int size);\n\tfinal byte[] deserialize(InputStream inputStream);\n\tprotected abstract byte[] doDeserialize(InputStream inputStream, byte[] buffer);\n\t// Set the pool size for deserialization buffers.\n\tvoid setPoolSize(int size);\n}", "des": "Base class for deserializers that cannot determine the buffer size needed."}
{"index": 15640, "repo": "spring-integration-ip-6.1.2", "code": "public abstract class AbstractServerConnectionFactory extends AbstractConnectionFactory implements TcpServerConnectionFactory, org.springframework.scheduling.SchedulingAwareRunnable, org.springframework.integration.context.OrderlyShutdownCapable {\n\tint afterShutdown();\n\tint beforeShutdown();\n\t// The number of sockets in the server connection backlog.\n\tint getBacklog();\n\t// Not supported because the factory manages multiple connections and this method cannot discriminate.\n\tTcpConnection getConnection();\n}", "des": "Base class for all server connection factories."}
{"index": 15641, "repo": "spring-integration-ip-6.1.2", "code": "public abstract class AbstractTcpConnectionSupport extends Object {\n\tint getPushbackBufferSize();\n\tboolean isPushbackCapable();\n\t// The size of the push back buffer; defaults to 1.\n\tvoid setPushbackBufferSize(int pushbackBufferSize);\n\t// Set to true to cause wrapping of the connection's input stream in a PushbackInputStream, enabling deserializers to \"unread\" data.\n\tvoid setPushbackCapable(boolean pushbackCapable);\n}", "des": "Base class for TCP Connection Support implementations."}
{"index": 15642, "repo": "spring-integration-ip-6.1.2", "code": "public class ByteArrayCrLfSerializer extends AbstractPooledBufferByteArraySerializer {\n\t// Reads the data in the inputStream to a byte[].\n\tbyte[] doDeserialize(InputStream inputStream, byte[] buffer);\n\tint fillToCrLf(InputStream inputStream, byte[] buffer);\n\t// Writes the byte[] to the stream and appends \\r\\n.\n\tvoid serialize(byte[] bytes, OutputStream outputStream);\n}", "des": "Reads data in an InputStream to a byte[]; data must be terminated by \\r\\n (not included in resulting byte[])."}
{"index": 15643, "repo": "spring-integration-ip-6.1.2", "code": "public class ByteArrayLengthHeaderSerializer extends AbstractByteArraySerializer {\n\t// Read the header from the stream and then reads the provided length from the stream and returns the data in a byte[].\n\tbyte[] deserialize(InputStream inputStream);\n\t// Include the length of the header in addition to the payload.\n\tByteArrayLengthHeaderSerializer inclusive();\n\t// Return true if the length header value includes its own length.\n\tprotected boolean isInclusive();\n}", "des": "Reads data in an InputStream to a byte[]; data must be preceded by a binary length (network byte order, not included in resulting byte[])."}
{"index": 15644, "repo": "spring-integration-ip-6.1.2", "code": "public class ByteArraySingleTerminatorSerializer extends AbstractPooledBufferByteArraySerializer {\n\t// Reads the data in the inputStream to a byte[].\n\tprotected byte[] doDeserialize(InputStream inputStream, byte[] buffer);\n\t// Writes the byte[] to the stream and appends the terminator.\n\tvoid serialize(byte[] bytes, OutputStream outputStream);\n}", "des": "Reads data in an InputStream to a byte[]; data must be terminated by a single byte (not included in resulting byte[])."}
{"index": 15645, "repo": "spring-integration-ip-6.1.2", "code": "public class ByteArrayStxEtxSerializer extends AbstractPooledBufferByteArraySerializer {\n\t// Reads the data in the inputStream to a byte[].\n\tbyte[] doDeserialize(InputStream inputStream, byte[] buffer);\n\t// Writes the byte[] to the stream, prefixed by an ASCII STX character and terminated with an ASCII ETX character.\n\tvoid serialize(byte[] bytes, OutputStream outputStream);\n}", "des": "Reads data in an InputStream to a byte[]; data must be prefixed by <stx> and terminated by <etx> (not included in resulting byte[])."}
{"index": 15646, "repo": "spring-integration-ip-6.1.2", "code": "public class CachingClientConnectionFactory extends AbstractClientConnectionFactory implements org.springframework.beans.factory.DisposableBean {\n\tvoid destroy();\n\t// Set whether to automatically (default) or manually add a TcpListener to the connections created by this factory.\n\tvoid enableManualListenerRegistration();\n\tboolean equals(Object o);\n\t// Force close the connection and null the field if it's a shared connection.\n\tvoid forceClose(TcpConnection connection);\n\tint getActiveCount();\n}", "des": "Connection factory that caches connections from the underlying target factory."}
{"index": 15647, "repo": "spring-integration-ip-6.1.2", "code": "public class DefaultTcpNetSocketFactorySupport extends Object implements TcpSocketFactorySupport {\n\t// Supplies the ServerSocketFactory to be used to create new ServerSockets.\n\tServerSocketFactory getServerSocketFactory();\n\t// Supplies the SocketFactory to be used to create new Sockets.\n\tSocketFactory getSocketFactory();\n}", "des": "Implementation of TcpSocketFactorySupport for non-SSL sockets ServerSocket and Socket."}
{"index": 15648, "repo": "spring-integration-ip-6.1.2", "code": "public class DefaultTcpNetSSLSocketFactorySupport extends Object implements TcpSocketFactorySupport {\n\t// Supplies the ServerSocketFactory to be used to create new ServerSockets.\n\tServerSocketFactory getServerSocketFactory();\n\t// Supplies the SocketFactory to be used to create new Sockets.\n\tSocketFactory getSocketFactory();\n}", "des": "Implementation of TcpSocketFactorySupport for SSL sockets SSLServerSocket and SSLSocket."}
{"index": 15649, "repo": "spring-integration-ip-6.1.2", "code": "public class DefaultTcpNioSSLConnectionSupport extends AbstractTcpConnectionSupport implements TcpNioConnectionSupport {\n\t// Creates a TcpNioSSLConnection.\n\tTcpNioConnection createNewConnection(SocketChannel socketChannel, boolean server, boolean lookupHost, org.springframework.context.ApplicationEventPublisher applicationEventPublisher, String connectionFactoryName);\n\t// Subclasses can post-process the ssl engine (set properties).\n\tprotected void postProcessSSLEngine(SSLEngine sslEngine);\n}", "des": "Implementation of TcpNioConnectionSupport for SSL NIO connections."}
{"index": 15650, "repo": "spring-integration-ip-6.1.2", "code": "public class DefaultTcpSocketSupport extends Object implements TcpSocketSupport {\n\t// No-Op.\n\tvoid postProcessServerSocket(ServerSocket serverSocket);\n\t// Enables host verification for SSL, if so configured.\n\tvoid postProcessSocket(Socket socket);\n}", "des": "Default implementation of TcpSocketSupport; makes no changes to sockets."}
{"index": 15651, "repo": "spring-integration-ip-6.1.2", "code": "public class DefaultTcpSSLContextSupport extends Object implements TcpSSLContextSupport {\n\t// Gets an SSLContext.\n\tSSLContext getSSLContext();\n\t// Set the key store type.\n\tvoid setKeyStoreType(String keyStoreType);\n\t// The protocol used in SSLContext.getInstance(String); default \"TLS\".\n\tvoid setProtocol(String protocol);\n\t// Set the trust store type.\n\tvoid setTrustStoreType(String trustStoreType);\n}", "des": "Default implementation of TcpSSLContextSupport; uses a 'TLS' (by default) SSLContext, initialized with 'JKS' keystores, managed by 'SunX509' Key and Trust managers."}
{"index": 15652, "repo": "spring-integration-ip-6.1.2", "code": "public class FailoverClientConnectionFactory extends AbstractClientConnectionFactory {\n\t// Return true if all factories are running.\n\tboolean isRunning();\n\tprotected TcpConnectionSupport obtainConnection();\n\tprotected void onInit();\n\t// Delegate TCP Client Connection factories that are used to receive data need a Listener to send the messages to.\n\tvoid registerListener(TcpListener listener);\n}", "des": "Given a list of connection factories, serves up TcpConnections that can iterate over a connection from each factory until the write succeeds or the list is exhausted."}
{"index": 15653, "repo": "spring-integration-ip-6.1.2", "code": "public abstract class IpAdapterParserUtils extends Object {\n\t// Adds a constructor-arg to the provided bean definition builder with the value of the attribute whose name is provided if that attribute is defined in the given element.\n\tstatic void addConstructorValueIfAttributeDefined(org.springframework.beans.factory.support.BeanDefinitionBuilder builder, Element element, String attributeName);\n}", "des": "Utility methods and constants for IP adapter parsers."}
{"index": 15654, "repo": "spring-integration-ip-6.1.2", "code": "public class MapJsonSerializer extends Object implements org.springframework.core.serializer.Serializer<Map<?,?>>, org.springframework.core.serializer.Deserializer<Map<?,?>> {\n\tMap<?,?> deserialize(InputStream inputStream);\n\tvoid serialize(Map<?,?> object, OutputStream outputStream);\n\t// An JsonObjectMapper to be used for the conversion to/from JSON.\n\tvoid setJsonObjectMapper(org.springframework.integration.support.json.JsonObjectMapper<?,?> jsonObjectMapper);\n}", "des": "Serializes a Map as JSON."}
{"index": 15655, "repo": "spring-integration-ip-6.1.2", "code": "public class MulticastSendingMessageHandler extends UnicastSendingMessageHandler {\n\tprotected void convertAndSend(org.springframework.messaging.Message<?> message);\n\tprotected DatagramSocket getSocket();\n\t// On a multi-homed system, specifies the ip address of the network interface used to communicate.\n\tvoid setLocalAddress(String localAddress);\n\t// If acknowledge = true; how many acks needed for success.\n\tvoid setMinAcksForSuccess(int minAcksForSuccess);\n}", "des": "A MessageHandler implementation that maps a Message into a UDP datagram packet and sends that to the specified multicast address (224.0.0.0 to 239.255.255.255) and port."}
{"index": 15656, "repo": "spring-integration-ip-6.1.2", "code": "public final class Tcp extends Object {\n\t// Create an inbound channel adapter using the supplied connection factory.\n\tstatic TcpInboundChannelAdapterSpec inboundAdapter(AbstractConnectionFactorySpec<?,?> connectionFactorySpec);\n\t// Create an inbound channel adapter using the supplied connection factory.\n\tstatic TcpInboundChannelAdapterSpec inboundAdapter(AbstractConnectionFactory connectionFactory);\n}", "des": "Factory methods for TCP."}
{"index": 15657, "repo": "spring-integration-ip-6.1.2", "code": "public final class TcpCodecs extends Object {\n\t// Return a serializer with the default max message size for deserialization.\n\tstatic ByteArrayCrLfSerializer crlf();\n\t// Return a serializer with the provided max message size for deserialization.\n\tstatic ByteArrayCrLfSerializer crlf(int maxMessageSize);\n\t// Return a serializer with the default max message size for deserialization.\n\tstatic ByteArrayLengthHeaderSerializer lengthHeader(int bytes);\n}", "des": "Factory class to create TCP Serializer/Deserializers used to encode/decode messages to/from a TCP stream."}
{"index": 15658, "repo": "spring-integration-ip-6.1.2", "code": "public interface TcpConnection extends Runnable {\n\t// Closes the connection.\n\tvoid close();\n\tString getConnectionId();\n\torg.springframework.core.serializer.Deserializer<?> getDeserializer();\n\tObject getDeserializerStateKey();\n\tString getHostAddress();\n\tString getHostName();\n\tTcpListener getListener();\n\t// Uses the deserializer to obtain the message payload from the connection's input stream.\n\tObject getPayload();\n\tint getPort();\n\torg.springframework.core.serializer.Serializer<?> getSerializer();\n}", "des": "An abstraction over Socket and SocketChannel that sends Message objects by serializing the payload and streaming it to the destination."}
{"index": 15659, "repo": "spring-integration-ip-6.1.2", "code": "public abstract class TcpConnectionInterceptorSupport extends TcpConnectionSupport implements TcpConnectionInterceptor {\n\t// When we are using sockets owned by a TcpListener, this method is called each time a new connection is made.\n\tvoid addNewConnection(TcpConnection connection);\n\t// Close this connection.\n\tvoid close();\n\tString getConnectionFactoryName();\n\tString getConnectionId();\n\torg.springframework.core.serializer.Deserializer<?> getDeserializer();\n\tObject getDeserializerStateKey();\n}", "des": "Base class for TcpConnectionInterceptors; passes all method calls through to the underlying TcpConnection."}
{"index": 15660, "repo": "spring-integration-ip-6.1.2", "code": "public abstract class TcpConnectionSupport extends Object implements TcpConnection {\n\t// Close this connection.\n\tvoid close();\n\t// If we have been intercepted, propagate the close from the outermost interceptor; otherwise, just call close().\n\tprotected void closeConnection(boolean isException);\n\t// Set whether or not automatic or manual registration of the TcpListener is to be used.\n\tvoid enableManualListenerRegistration();\n\tString getConnectionFactoryName();\n\tString getConnectionId();\n}", "des": "Base class for TcpConnections."}
{"index": 15661, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpNetClientConnectionFactory extends AbstractClientConnectionFactory {\n\tprotected TcpConnectionSupport buildNewConnection();\n\t// Create a new Socket.\n\tprotected Socket createSocket(String host, int port);\n\tprotected TcpSocketFactorySupport getTcpSocketFactorySupport();\n\t// Set the TcpNetConnectionSupport to use to create connection objects.\n\tvoid setTcpNetConnectionSupport(TcpNetConnectionSupport connectionSupport);\n}", "des": "A client connection factory that creates TcpNetConnections."}
{"index": 15662, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpNetClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNetClientConnectionFactorySpec,TcpNetClientConnectionFactory> {\n\t// The TcpNetConnectionSupport to use to create connection objects.\n\tTcpNetClientConnectionFactorySpec connectionSupport(TcpNetConnectionSupport connectionSupport);\n\t// Set the TcpSocketFactorySupport used to create server sockets.\n\tTcpNetClientConnectionFactorySpec socketFactorySupport(TcpSocketFactorySupport tcpSocketFactorySupport);\n}", "des": "TcpClientConnectionFactorySpec for TcpNetClientConnectionFactorys."}
{"index": 15663, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpNetConnection extends TcpConnectionSupport implements org.springframework.scheduling.SchedulingAwareRunnable {\n\t// Closes this connection.\n\tvoid close();\n\tObject getDeserializerStateKey();\n\t// Uses the deserializer to obtain the message payload from the connection's input stream.\n\tObject getPayload();\n\tint getPort();\n\tSSLSession getSslSession();\n\tprotected boolean handleReadException(Exception exception);\n}", "des": "A TcpConnection that uses and underlying Socket."}
{"index": 15664, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpNetServerConnectionFactory extends AbstractServerConnectionFactory {\n\t// Create a new ServerSocket.\n\tprotected ServerSocket createServerSocket(int port, int backlog, InetAddress whichNic);\n\tString getComponentType();\n\t// Return the port this server is listening on.\n\tint getPort();\n\tprotected ServerSocket getServerSocket();\n\t// Return the SocketAddress that the underlying ServerSocket is bound to.\n\tSocketAddress getServerSocketAddress();\n}", "des": "Implements a server connection factory that produces TcpNetConnections using a ServerSocket."}
{"index": 15665, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpNetServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNetServerConnectionFactorySpec,TcpNetServerConnectionFactory> {\n\t// The TcpNetConnectionSupport to use to create connection objects.\n\tTcpNetServerConnectionFactorySpec connectionSupport(TcpNetConnectionSupport connectionSupport);\n\t// Set the TcpSocketFactorySupport used to create server sockets.\n\tTcpNetServerConnectionFactorySpec socketFactorySupport(TcpSocketFactorySupport tcpSocketFactorySupport);\n}", "des": "TcpServerConnectionFactorySpec for TcpNetServerConnectionFactorys."}
{"index": 15666, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpNioClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNioClientConnectionFactorySpec,TcpNioClientConnectionFactory> {\n\t// The TcpNioConnectionSupport to use.\n\tTcpNioClientConnectionFactorySpec connectionSupport(TcpNioConnectionSupport tcpNioSupport);\n\t// True to use direct buffers.\n\tTcpNioClientConnectionFactorySpec directBuffers(boolean usingDirectBuffers);\n}", "des": "TcpClientConnectionFactorySpec for TcpNioClientConnectionFactorys."}
{"index": 15667, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpNioConnection extends TcpConnectionSupport {\n\t// Allocate a ByteBuffer of the requested length using normal or direct buffers, depending on the usingDirectBuffers field.\n\tprotected ByteBuffer allocate(int length);\n\t// Close this connection.\n\tvoid close();\n\tprotected org.springframework.integration.ip.tcp.connection.TcpNioConnection.ChannelOutputStream getChannelOutputStream();\n\tObject getDeserializerStateKey();\n\tlong getLastRead();\n\tlong getLastSend();\n}", "des": "A TcpConnection that uses and underlying SocketChannel."}
{"index": 15668, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpNioServerConnectionFactory extends AbstractServerConnectionFactory {\n\tprotected void doAccept(Selector selectorForNewSocket, ServerSocketChannel server, long now);\n\tString getComponentType();\n\tprotected Map<SocketChannel,TcpNioConnection> getConnections();\n\t// Return the port this server is listening on.\n\tint getPort();\n\tprotected ServerSocketChannel getServerChannel();\n\t// Return the SocketAddress that the underlying ServerSocket is bound to.\n\tSocketAddress getServerSocketAddress();\n}", "des": "/** Implements a server connection factory that produces TcpNioConnections using a ServerSocketChannel."}
{"index": 15669, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpNioServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNioServerConnectionFactorySpec,TcpNioServerConnectionFactory> {\n\t// The TcpNioConnectionSupport to use.\n\tTcpNioServerConnectionFactorySpec connectionSupport(TcpNioConnectionSupport tcpNioSupport);\n\t// True to use direct buffers.\n\tTcpNioServerConnectionFactorySpec directBuffers(boolean usingDirectBuffers);\n}", "des": "TcpServerConnectionFactorySpec for TcpNioServerConnectionFactorys."}
{"index": 15670, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpNioSSLConnection extends TcpNioConnection {\n\t// Close this connection.\n\tvoid close();\n\tprotected org.springframework.integration.ip.tcp.connection.TcpNioConnection.ChannelOutputStream getChannelOutputStream();\n\tprotected org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection.SSLChannelOutputStream getSSLChannelOutputStream();\n\tSSLSession getSslSession();\n\t// Initializes the SSLEngine and sets up the encryption/decryption buffers.\n\tvoid init();\n}", "des": "Implementation of TcpConnection supporting SSL/TLS over NIO."}
{"index": 15671, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpOutboundGatewaySpec extends org.springframework.integration.dsl.MessageHandlerSpec<TcpOutboundGatewaySpec,TcpOutboundGateway> implements org.springframework.integration.dsl.ComponentsRegistration {\n\t// Set to true to release the sending thread and receive the reply asynchronously.\n\tTcpOutboundGatewaySpec async(boolean async);\n}", "des": "A MessageHandlerSpec for TcpOutboundGateways."}
{"index": 15672, "repo": "spring-integration-ip-6.1.2", "code": "@FunctionalInterface public interface TcpSender {\n\t// When we are using sockets owned by a TcpListener, this method is called each time a new connection is made.\n\tvoid addNewConnection(TcpConnection connection);\n\t// When we are using sockets owned by a TcpListener, this method is called each time a connection is closed.\n\tdefault void removeDeadConnection(TcpConnection connection);\n}", "des": "An interface representing a sending client of a connection factory."}
{"index": 15673, "repo": "spring-integration-ip-6.1.2", "code": "public class TcpSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler implements TcpSender, org.springframework.integration.support.management.ManageableLifecycle, ClientModeCapable {\n\t// When we are using sockets owned by a TcpListener, this method is called each time a new connection is made.\n\tvoid addNewConnection(TcpConnection connection);\n\t// Method that actually does the write.\n\tprotected TcpConnection doWrite(org.springframework.messaging.Message<?> message);\n}", "des": "Tcp outbound channel adapter using a TcpConnection to send data - if the connection factory is a server factory, the TcpListener owns the connections."}
{"index": 15674, "repo": "spring-integration-ip-6.1.2", "code": "public interface TcpServerConnectionFactory {\n\t// Return the port this server is listening on.\n\tint getPort();\n\t// Return the SocketAddress that the underlying ServerSocket is bound to.\n\tSocketAddress getServerSocketAddress();\n}", "des": "Connection factories that act as TCP servers, listening for incoming connections."}
{"index": 15675, "repo": "spring-integration-ip-6.1.2", "code": "public interface TcpSocketFactorySupport {\n\t// Supplies the ServerSocketFactory to be used to create new ServerSockets.\n\tServerSocketFactory getServerSocketFactory();\n\t// Supplies the SocketFactory to be used to create new Sockets.\n\tSocketFactory getSocketFactory();\n}", "des": "Strategy interface for supplying Socket Factories."}
{"index": 15676, "repo": "spring-integration-ip-6.1.2", "code": "public interface TcpSocketSupport {\n\t// Performs any further modifications to the server socket after the connection factory has created the socket and set any configured attributes, before invoking ServerSocket.accept().\n\tvoid postProcessServerSocket(ServerSocket serverSocket);\n\t// Performs any further modifications to the Socket after the socket has been created by a client, or accepted by a server, and after any configured atributes have been set.\n\tvoid postProcessSocket(Socket socket);\n}", "des": "Strategy interface for modifying sockets."}
{"index": 15677, "repo": "spring-integration-ip-6.1.2", "code": "public final class TestingUtilities extends Object {\n\t// Wait for a server connection factory to actually start listening before starting a test.\n\tstatic void waitListening(AbstractInternetProtocolReceivingChannelAdapter adapter, Long delayArg);\n\t// Wait for a server connection factory to actually start listening before starting a test.\n\tstatic void waitListening(AbstractServerConnectionFactory serverConnectionFactory, Long delayArg);\n}", "des": "Convenience class providing methods for testing IP components."}
{"index": 15678, "repo": "spring-integration-ip-6.1.2", "code": "public class ThreadAffinityClientConnectionFactory extends AbstractClientConnectionFactory {\n\t// Close a connection with the specified connection id.\n\tboolean closeConnection(String connectionId);\n\t// Set whether to automatically (default) or manually add a TcpListener to the connections created by this factory.\n\tvoid enableManualListenerRegistration();\n\t// Force close the connection and null the field if it's a shared connection.\n\tvoid forceClose(TcpConnection connection);\n}", "des": "A client connection factory that binds a connection to a thread."}
{"index": 15679, "repo": "spring-integration-ip-6.1.2", "code": "public final class Udp extends Object {\n\t// Create an inbound unicast channel adapter using the supplied port.\n\tstatic UdpInboundChannelAdapterSpec inboundAdapter(int port);\n\t// Create an inbound multicast channel adapter using the supplied port and group.\n\tstatic UdpInboundChannelAdapterSpec inboundMulticastAdapter(int port, String multicastGroup);\n}", "des": "Factory methods for UDP."}
{"index": 15680, "repo": "spring-orm-6.0.11", "code": "public abstract class AbstractJpaVendorAdapter extends Object implements JpaVendorAdapter {\n\t// Return the target database to operate on.\n\tprotected Database getDatabase();\n\t// Return the name of the target database to operate on.\n\tprotected String getDatabasePlatform();\n\t// Return the vendor-specific EntityManagerFactory interface that the EntityManagerFactory proxy is supposed to implement.\n\tClass<? extends EntityManagerFactory> getEntityManagerFactoryInterface();\n}", "des": "Abstract JpaVendorAdapter implementation that defines common properties, to be translated into vendor-specific JPA properties by concrete subclasses."}
{"index": 15681, "repo": "spring-orm-6.0.11", "code": "public enum Database extends Enum<Database> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Database valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Database[] values();\n}", "des": "Enumeration for common database platforms."}
{"index": 15682, "repo": "spring-orm-6.0.11", "code": "public class DefaultJpaDialect extends Object implements JpaDialect, Serializable {\n\t// This implementation invokes the standard JPA Transaction.begin method.\n\tObject beginTransaction(EntityManager entityManager, org.springframework.transaction.TransactionDefinition definition);\n\t// This implementation does nothing, since the default beginTransaction implementation does not require any cleanup.\n\tvoid cleanupTransaction(Object transactionData);\n}", "des": "Default implementation of the JpaDialect interface."}
{"index": 15683, "repo": "spring-orm-6.0.11", "code": "public class EclipseLinkJpaDialect extends DefaultJpaDialect {\n\t// This implementation invokes the standard JPA Transaction.begin method.\n\tObject beginTransaction(EntityManager entityManager, org.springframework.transaction.TransactionDefinition definition);\n\t// This implementation always returns null, indicating that no JDBC Connection can be provided.\n\torg.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly);\n}", "des": "JpaDialect implementation for Eclipse Persistence Services (EclipseLink)."}
{"index": 15684, "repo": "spring-orm-6.0.11", "code": "public class EclipseLinkJpaVendorAdapter extends AbstractJpaVendorAdapter {\n\t// Determine the EclipseLink target database name for the given database.\n\tprotected String determineTargetDatabaseName(Database database);\n\t// Return the vendor-specific EntityManager interface that this provider's EntityManagers will implement.\n\tClass<? extends EntityManager> getEntityManagerInterface();\n}", "des": "JpaVendorAdapter implementation for Eclipse Persistence Services (EclipseLink)."}
{"index": 15685, "repo": "spring-orm-6.0.11", "code": "public abstract class EntityManagerFactoryAccessor extends Object implements org.springframework.beans.factory.BeanFactoryAware {\n\t// Obtain a new EntityManager from this accessor's EntityManagerFactory.\n\tprotected EntityManager createEntityManager();\n\t// Return the JPA EntityManagerFactory that should be used to create EntityManagers.\n\tEntityManagerFactory getEntityManagerFactory();\n}", "des": "Base class for any class that needs to access a JPA EntityManagerFactory, usually in order to obtain a JPA EntityManager."}
{"index": 15686, "repo": "spring-orm-6.0.11", "code": "public interface EntityManagerFactoryInfo {\n\t// Create a native JPA EntityManager to be used as the framework-managed resource behind an application-level EntityManager handle.\n\tEntityManager createNativeEntityManager(Map<?,?> properties);\n\t// Return the ClassLoader that the application's beans are loaded with.\n\tClassLoader getBeanClassLoader();\n\t// Return the JDBC DataSource that this EntityManagerFactory obtains its JDBC Connections from.\n\tDataSource getDataSource();\n}", "des": "Metadata interface for a Spring-managed JPA EntityManagerFactory."}
{"index": 15687, "repo": "spring-orm-6.0.11", "code": "public abstract class EntityManagerFactoryUtils extends Object {\n\t// Apply the current transaction timeout, if any, to the given JPA Query object.\n\tstatic void applyTransactionTimeout(Query query, EntityManagerFactory emf);\n\t// Close the given JPA EntityManager, catching and logging any cleanup exceptions thrown.\n\tstatic void closeEntityManager(EntityManager em);\n}", "des": "Helper class featuring methods for JPA EntityManager handling, allowing for reuse of EntityManager instances within transactions."}
{"index": 15688, "repo": "spring-orm-6.0.11", "code": "public abstract class ExtendedEntityManagerCreator extends Object {\n\t// Create an application-managed extended EntityManager proxy.\n\tstatic EntityManager createApplicationManagedEntityManager(EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);\n\t// Create an application-managed extended EntityManager proxy.\n\tstatic EntityManager createApplicationManagedEntityManager(EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);\n}", "des": "Delegate for creating a variety of EntityManager proxies that follow the JPA spec's semantics for \"extended\" EntityManagers."}
{"index": 15689, "repo": "spring-orm-6.0.11", "code": "public abstract class HibernateDaoSupport extends org.springframework.dao.support.DaoSupport {\n\tprotected final void checkDaoConfig();\n\t// Create a HibernateTemplate for the given SessionFactory.\n\tprotected HibernateTemplate createHibernateTemplate(SessionFactory sessionFactory);\n\t// Conveniently obtain the current Hibernate Session.\n\tprotected final Session currentSession();\n}", "des": "Convenient superclass for Hibernate-based data access objects."}
{"index": 15690, "repo": "spring-orm-6.0.11", "code": "public class HibernateExceptionTranslator extends Object implements org.springframework.dao.support.PersistenceExceptionTranslator {\n\t// Convert the given HibernateException to an appropriate exception from the org.springframework.dao hierarchy.\n\tprotected org.springframework.dao.DataAccessException convertHibernateAccessException(HibernateException ex);\n}", "des": "PersistenceExceptionTranslator capable of translating HibernateException instances to Spring's DataAccessException hierarchy."}
{"index": 15691, "repo": "spring-orm-6.0.11", "code": "public class HibernateJdbcException extends org.springframework.dao.UncategorizedDataAccessException {\n\t// Return the SQL that led to the problem.\n\tString getSql();\n\t// Return the underlying SQLException.\n\tSQLException getSQLException();\n}", "des": "Hibernate-specific subclass of UncategorizedDataAccessException, for JDBC exceptions that Hibernate wrapped."}
{"index": 15692, "repo": "spring-orm-6.0.11", "code": "public class HibernateJpaDialect extends DefaultJpaDialect {\n\t// This implementation invokes the standard JPA Transaction.begin method.\n\tObject beginTransaction(EntityManager entityManager, org.springframework.transaction.TransactionDefinition definition);\n\t// This implementation does nothing, since the default beginTransaction implementation does not require any cleanup.\n\tvoid cleanupTransaction(Object transactionData);\n}", "des": "JpaDialect implementation for Hibernate."}
{"index": 15693, "repo": "spring-orm-6.0.11", "code": "public class HibernateJpaVendorAdapter extends AbstractJpaVendorAdapter {\n\t// Determine the Hibernate database dialect class for the given target database.\n\tprotected Class<?> determineDatabaseDialectClass(Database database);\n\t// Return the vendor-specific EntityManagerFactory interface that the EntityManagerFactory proxy is supposed to implement.\n\tClass<? extends EntityManagerFactory> getEntityManagerFactoryInterface();\n}", "des": "JpaVendorAdapter implementation for Hibernate."}
{"index": 15694, "repo": "spring-orm-6.0.11", "code": "public interface HibernateOperations {\n\t// Deprecated. as of 5.0.4, in favor of a custom HibernateCallback lambda code block passed to the general execute(org.springframework.orm.hibernate5.HibernateCallback<T>) method\n\tint bulkUpdate(String queryString, Object... values);\n\t// Remove all objects from the Session cache, and cancel all pending saves, updates and deletes.\n\tvoid clear();\n}", "des": "Interface that specifies a common set of Hibernate operations as well as a general HibernateOperations.execute(org.springframework.orm.hibernate5.HibernateCallback<T>) method for Session-based lambda expressions."}
{"index": 15695, "repo": "spring-orm-6.0.11", "code": "public class HibernateTemplate extends Object implements HibernateOperations, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Apply the given name parameter to the given Query object.\n\tprotected void applyNamedParameterToQuery(Query<?> queryObject, String paramName, Object value);\n\t// Deprecated.\n\tint bulkUpdate(String queryString, Object... values);\n}", "des": "Helper class that simplifies Hibernate data access code."}
{"index": 15696, "repo": "spring-orm-6.0.11", "code": "public interface JpaDialect extends org.springframework.dao.support.PersistenceExceptionTranslator {\n\t// Begin the given JPA transaction, applying the semantics specified by the given Spring transaction definition (in particular, an isolation level and a timeout).\n\tObject beginTransaction(EntityManager entityManager, org.springframework.transaction.TransactionDefinition definition);\n\t// Clean up the transaction via the given transaction data.\n\tvoid cleanupTransaction(Object transactionData);\n}", "des": "SPI strategy that encapsulates certain functionality that standard JPA 3.0 does not offer, such as access to the underlying JDBC Connection."}
{"index": 15697, "repo": "spring-orm-6.0.11", "code": "public class JpaTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean {\n\t// Eagerly initialize the JPA dialect, creating a default one for the specified EntityManagerFactory if none set.\n\tvoid afterPropertiesSet();\n}", "des": "PlatformTransactionManager implementation for a single JPA EntityManagerFactory."}
{"index": 15698, "repo": "spring-orm-6.0.11", "code": "public interface JpaVendorAdapter {\n\t// Return the vendor-specific EntityManagerFactory interface that the EntityManagerFactory proxy is supposed to implement.\n\tdefault Class<? extends EntityManagerFactory> getEntityManagerFactoryInterface();\n\t// Return the vendor-specific EntityManager interface that this provider's EntityManagers will implement.\n\tdefault Class<? extends EntityManager> getEntityManagerInterface();\n}", "des": "SPI interface that allows to plug in vendor-specific behavior into Spring's EntityManagerFactory creators."}
{"index": 15699, "repo": "spring-orm-6.0.11", "code": "public class LocalContainerEntityManagerFactoryBean extends AbstractEntityManagerFactoryBean implements org.springframework.context.ResourceLoaderAware, org.springframework.context.weaving.LoadTimeWeaverAware {\n\tvoid afterPropertiesSet();\n\t// Subclasses must implement this method to create the EntityManagerFactory that will be returned by the getObject() method.\n\tprotected EntityManagerFactory createNativeEntityManagerFactory();\n}", "des": "FactoryBean that creates a JPA EntityManagerFactory according to JPA's standard container bootstrap contract."}
{"index": 15700, "repo": "spring-orm-6.0.11", "code": "public class LocalSessionFactoryBuilder extends Configuration {\n\t// Add the given annotated classes in a batch.\n\tLocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);\n\t// Add the given annotated packages in a batch.\n\tLocalSessionFactoryBuilder addPackages(String... annotatedPackages);\n}", "des": "A Spring-provided extension of the standard Hibernate Configuration class, adding SpringSessionContext as a default and providing convenient ways to specify a JDBC DataSource and an application class loader."}
{"index": 15701, "repo": "spring-orm-6.0.11", "code": "public class MutablePersistenceUnitInfo extends Object implements SmartPersistenceUnitInfo {\n\tvoid addJarFileUrl(URL jarFileUrl);\n\t// Add a managed class name to the persistence provider's metadata.\n\tvoid addManagedClassName(String managedClassName);\n\t// Add a managed package to the persistence provider's metadata.\n\tvoid addManagedPackage(String packageName);\n\tvoid addMappingFileName(String mappingFileName);\n\tvoid addProperty(String name, String value);\n}", "des": "Spring's base implementation of the JPA PersistenceUnitInfo interface, used to bootstrap an EntityManagerFactory in a container."}
{"index": 15702, "repo": "spring-orm-6.0.11", "code": "public class ObjectOptimisticLockingFailureException extends org.springframework.dao.OptimisticLockingFailureException {\n\t// Return the identifier of the object for which the locking failed.\n\tObject getIdentifier();\n\t// Return the persistent class of the object for which the locking failed.\n\tClass<?> getPersistentClass();\n\t// Return the name of the persistent class of the object for which the locking failed.\n\tString getPersistentClassName();\n}", "des": "Exception thrown on an optimistic locking violation for a mapped object."}
{"index": 15703, "repo": "spring-orm-6.0.11", "code": "public class ObjectRetrievalFailureException extends org.springframework.dao.DataRetrievalFailureException {\n\t// Return the identifier of the object that was not found.\n\tObject getIdentifier();\n\t// Return the persistent class of the object that was not found.\n\tClass<?> getPersistentClass();\n\t// Return the name of the persistent class of the object that was not found.\n\tString getPersistentClassName();\n}", "des": "Exception thrown if a mapped object could not be retrieved via its identifier."}
{"index": 15704, "repo": "spring-orm-6.0.11", "code": "public class OpenEntityManagerInViewFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\t// Create a JPA EntityManager to be bound to a request.\n\tprotected EntityManager createEntityManager(EntityManagerFactory emf);\n\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain);\n\t// Return the bean name of the EntityManagerFactory to fetch from Spring's root application context.\n\tprotected String getEntityManagerFactoryBeanName();\n}", "des": "Servlet Filter that binds a JPA EntityManager to the thread for the entire processing of the request."}
{"index": 15705, "repo": "spring-orm-6.0.11", "code": "public class OpenSessionInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.\n\tSessionFactory getSessionFactory();\n\tObject invoke(org.aopalliance.intercept.MethodInvocation invocation);\n\t// Open a Session for the given SessionFactory.\n\tprotected Session openSession(SessionFactory sessionFactory);\n}", "des": "Simple AOP Alliance MethodInterceptor implementation that binds a new Hibernate Session for each method invocation, if none bound before."}
{"index": 15706, "repo": "spring-orm-6.0.11", "code": "public class OpenSessionInViewFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain);\n\t// Return the bean name of the SessionFactory to fetch from Spring's root application context.\n\tprotected String getSessionFactoryBeanName();\n\t// Look up the SessionFactory that this filter should use.\n\tprotected SessionFactory lookupSessionFactory();\n}", "des": "Servlet Filter that binds a Hibernate Session to the thread for the entire processing of the request."}
{"index": 15707, "repo": "spring-orm-6.0.11", "code": "public class OpenSessionInViewInterceptor extends Object implements org.springframework.web.context.request.AsyncWebRequestInterceptor {\n\t// Unbind the Hibernate Session from the thread and close it.\n\tvoid afterCompletion(org.springframework.web.context.request.WebRequest request, Exception ex);\n\tvoid afterConcurrentHandlingStarted(org.springframework.web.context.request.WebRequest request);\n}", "des": "Spring web request interceptor that binds a Hibernate Session to the thread for the entire processing of the request."}
{"index": 15708, "repo": "spring-orm-6.0.11", "code": "public interface PersistenceManagedTypes {\n\t// Return the class names the persistence provider must add to its set of managed classes.\n\tList<String> getManagedClassNames();\n\t// Return a list of managed Java packages, to be introspected by the persistence provider.\n\tList<String> getManagedPackages();\n\t// Return the persistence unit root url or null if it could not be determined.\n\tURL getPersistenceUnitRootUrl();\n}", "des": "Provide the list of managed persistent types that an entity manager should consider."}
{"index": 15709, "repo": "spring-orm-6.0.11", "code": "public interface PersistenceUnitManager {\n\t// Obtain the default PersistenceUnitInfo from this manager.\n\tPersistenceUnitInfo obtainDefaultPersistenceUnitInfo();\n\t// Obtain the specified PersistenceUnitInfo from this manager.\n\tPersistenceUnitInfo obtainPersistenceUnitInfo(String persistenceUnitName);\n}", "des": "Interface that defines an abstraction for finding and managing JPA PersistenceUnitInfos."}
{"index": 15710, "repo": "spring-orm-6.0.11", "code": "public abstract class SessionFactoryUtils extends Object {\n\t// Perform actual closing of the Hibernate Session, catching and logging any cleanup exceptions thrown.\n\tstatic void closeSession(Session session);\n\t// Convert the given HibernateException to an appropriate exception from the org.springframework.dao hierarchy.\n\tstatic org.springframework.dao.DataAccessException convertHibernateAccessException(HibernateException ex);\n}", "des": "Helper class featuring methods for Hibernate Session handling."}
{"index": 15711, "repo": "spring-orm-6.0.11", "code": "public class SharedEntityManagerBean extends EntityManagerFactoryAccessor implements org.springframework.beans.factory.FactoryBean<EntityManager>, org.springframework.beans.factory.InitializingBean {\n\tfinal void afterPropertiesSet();\n\tEntityManager getObject();\n\tClass<? extends EntityManager> getObjectType();\n\tboolean isSingleton();\n\t// Specify the EntityManager interface to expose.\n\tvoid setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface);\n}", "des": "FactoryBean that exposes a shared JPA EntityManager reference for a given EntityManagerFactory."}
{"index": 15712, "repo": "spring-orm-6.0.11", "code": "public abstract class SharedEntityManagerCreator extends Object {\n\t// Create a transactional EntityManager proxy for the given EntityManagerFactory.\n\tstatic EntityManager createSharedEntityManager(EntityManagerFactory emf);\n\t// Create a transactional EntityManager proxy for the given EntityManagerFactory.\n\tstatic EntityManager createSharedEntityManager(EntityManagerFactory emf, Map<?,?> properties);\n}", "des": "Delegate for creating a shareable JPA EntityManager reference for a given EntityManagerFactory."}
{"index": 15713, "repo": "spring-orm-6.0.11", "code": "public interface SmartPersistenceUnitInfo extends PersistenceUnitInfo {\n\t// Return a list of managed Java packages, to be introspected by the persistence provider.\n\tList<String> getManagedPackages();\n\t// Set the persistence provider's own package name, for exclusion from class transformation.\n\tvoid setPersistenceProviderPackageName(String persistenceProviderPackageName);\n}", "des": "Extension of the standard JPA PersistenceUnitInfo interface, for advanced collaboration between Spring's LocalContainerEntityManagerFactoryBean and PersistenceUnitManager implementations."}
{"index": 15714, "repo": "groovy-xml-4.0.13", "code": "public class Attribute extends GPathResult {\n\t// NOP, because a node can not be appended to an attribute.\n\tprotected void appendNode(Object newValue);\n\tvoid build(groovy.lang.GroovyObject builder);\n\t// Throws a GroovyRuntimeException, because an attribute can have no children.\n\tIterator childNodes();\n\t// Returns the first child of this GPathResult matching the condition(s) specified in the passed closure.\n\tGPathResult find(groovy.lang.Closure closure);\n}", "des": "Lazy evaluated representation of a node attribute."}
{"index": 15715, "repo": "groovy-xml-4.0.13", "code": "public class Attributes extends NodeChildren {\n\tvoid build(groovy.lang.GroovyObject builder);\n\t// Throws a GroovyRuntimeException, because attributes can have no children.\n\tIterator childNodes();\n\t// Returns the children of this GPathResult matching the condition(s) specified in the passed closure.\n\tGPathResult findAll(groovy.lang.Closure closure);\n\tIterator iterator();\n\t// Creates a list of objects representing this GPathResult.\n\tList list();\n\t// Returns the name of this GPathResult.\n\tString name();\n}", "des": "Lazy evaluated representation of a node's attributes."}
{"index": 15716, "repo": "groovy-xml-4.0.13", "code": "public abstract class GPathResult extends groovy.lang.GroovyObjectSupport implements groovy.lang.Writable, groovy.lang.Buildable, Iterable {\n\tprotected abstract void appendNode(Object newValue);\n\t// Provides an Iterator over all the nodes of this GPathResult using a breadth-first traversal.\n\tIterator breadthFirst();\n\t// Returns an iterator over the child nodes of this GPathResult.\n\tabstract Iterator childNodes();\n}", "des": "Base class for representing lazy evaluated GPath expressions."}
{"index": 15717, "repo": "groovy-xml-4.0.13", "code": "public class MarkupBuilder extends groovy.util.BuilderSupport {\n\tprotected Object createNode(Object name);\n\tprotected Object createNode(Object name, Object value);\n\tprotected Object createNode(Object name, Map attributes);\n\tprotected Object createNode(Object name, Map attributes, Object value);\n\tList<Function<Character,Optional<String>>> getAdditionalFilters();\n\t// Returns true if attribute values are output with double quotes; false if single quotes are used.\n\tboolean getDoubleQuotes();\n}", "des": "A helper class for creating XML or HTML markup."}
{"index": 15718, "repo": "groovy-xml-4.0.13", "code": "public class MarkupBuilderHelper extends Object {\n\t// Produce a comment in the output.\n\tvoid comment(String value);\n\t// Produce an XML processing instruction in the output.\n\tvoid pi(Map<String,Map<String,Object>> args);\n\t// Produce an XML declaration in the output.\n\tvoid xmlDeclaration(Map<String,Object> args);\n\t// Prints data in the body of the current tag, escaping XML entities.\n\tvoid yield(Object value);\n\t// Prints data in the body of the current tag, escaping XML entities.\n\tvoid yield(String value);\n}", "des": "A helper class for MarkupBuilder."}
{"index": 15719, "repo": "groovy-xml-4.0.13", "code": "public class Namespace extends Object {\n\t// Returns the QName for the given localName.\n\tgroovy.namespace.QName get(String localName);\n\t// Returns the prefix mapped to this namespace\n\tString getPrefix();\n\t// Returns the URI of this namespace\n\tString getUri();\n}", "des": "A simple helper class which acts as a factory of QName instances."}
{"index": 15720, "repo": "groovy-xml-4.0.13", "code": "public class NoChildren extends GPathResult {\n\t// NOP\n\tprotected void appendNode(Object newValue);\n\t// Returns false.\n\tboolean asBoolean();\n\t// NOP\n\tvoid build(groovy.lang.GroovyObject builder);\n\t// Returns an empty Iterator.\n\tIterator childNodes();\n\t// Returns this.\n\tGPathResult find(groovy.lang.Closure closure);\n\t// Returns this.\n\tGPathResult findAll(groovy.lang.Closure closure);\n\t// Returns an empty Iterator.\n\tIterator iterator();\n\t// Returns an empty iterator.\n\tIterator nodeIterator();\n}", "des": "Lazy evaluated representation of a GPath expression returning no children."}
{"index": 15721, "repo": "groovy-xml-4.0.13", "code": "public class Node extends Object implements groovy.lang.Writable {\n\t// Adds an object as a new child to this Node.\n\tvoid addChild(Object child);\n\tprotected void appendNode(Object newValue, GPathResult result);\n\t// Returns a map of the attributes of this Node.\n\tMap attributes();\n\tvoid build(groovy.lang.GroovyObject builder, Map namespaceMap, Map<String,String> namespaceTagHints);\n\t// Returns an iterator over the child nodes of this Node.\n\tIterator childNodes();\n}", "des": "Represents a node."}
{"index": 15722, "repo": "groovy-xml-4.0.13", "code": "public class NodeChild extends GPathResult {\n\tprotected void appendNode(Object newValue);\n\t// Returns a map containing all attributes of the Node of this NodeChild.\n\tMap attributes();\n\tvoid build(groovy.lang.GroovyObject builder);\n\t// Returns an iterator over the child nodes of this GPathResult.\n\tIterator childNodes();\n\t// Returns the first child of this GPathResult matching the condition(s) specified in the passed closure.\n\tGPathResult find(groovy.lang.Closure closure);\n}", "des": "Lazy evaluated representation of a child node."}
{"index": 15723, "repo": "groovy-xml-4.0.13", "code": "public class NodeChildren extends GPathResult {\n\tprotected void appendNode(Object newValue);\n\tvoid build(groovy.lang.GroovyObject builder);\n\t// Returns an iterator over the child nodes of this GPathResult.\n\tIterator childNodes();\n\t// Returns the first child of this GPathResult matching the condition(s) specified in the passed closure.\n\tGPathResult find(groovy.lang.Closure closure);\n}", "des": "Lazy evaluated representation of child nodes."}
{"index": 15724, "repo": "groovy-xml-4.0.13", "code": "public class XmlExtensions extends Object {\n\t// Makes NodeList iterable by returning a read-only Iterator which traverses over each Node.\n\tstatic Iterator<Node> iterator(NodeList nodeList);\n\t// Transforms the element to its text equivalent.\n\tstatic String serialize(Element element);\n}", "des": "This class defines all the new XML-related groovy methods which enhance the normal JDK XML classes when inside the Groovy environment."}
{"index": 15725, "repo": "groovy-xml-4.0.13", "code": "public class XmlNodePrinter extends Object {\n\tprotected String getName(Object object);\n\t// Get Quote to use when printing attributes.\n\tString getQuote();\n\t// Whether empty elements are expanded from <tagName/> to <tagName></tagName>.\n\tboolean isExpandEmptyElements();\n\t// Check if namespace handling is enabled.\n\tboolean isNamespaceAware();\n\t// Check if whitespace preservation is enabled.\n\tboolean isPreserveWhitespace();\n\tvoid print(groovy.util.Node node);\n}", "des": "Prints a groovy.util.Node (as used with XmlParser) including all children in XML format."}
{"index": 15726, "repo": "groovy-xml-4.0.13", "code": "public class XmlParser extends Object implements ContentHandler {\n\tprotected void addTextToNode();\n\tvoid characters(char[] buffer, int start, int length);\n\t// Creates a new node with the given parent, name, and attributes.\n\tprotected groovy.util.Node createNode(groovy.util.Node parent, Object name, Map attributes);\n\tvoid endDocument();\n\tvoid endElement(String namespaceURI, String localName, String qName);\n\tvoid endPrefixMapping(String prefix);\n\tLocator getDocumentLocator();\n\tDTDHandler getDTDHandler();\n}", "des": "A helper class for parsing XML into a tree of Node instances for a simple way of processing XML."}
{"index": 15727, "repo": "groovy-xml-4.0.13", "code": "public class XmlUtil extends Object {\n\t// Escape control characters (below 0x20) with their XML entities, e.g.\n\tstatic String escapeControlCharacters(String orig);\n\t// Escape the following characters \" ' & < > with their XML entities, e.g.\n\tstatic String escapeXml(String orig);\n}", "des": "Used for pretty printing XML content and other XML related utilities."}
{"index": 15728, "repo": "spring-data-r2dbc-3.1.2", "code": "@Configuration(proxyBeanMethods=false) public abstract class AbstractR2dbcConfiguration extends Object implements ApplicationContextAware {\n\t// Return a R2DBC ConnectionFactory.\n\tabstract ConnectionFactory connectionFactory();\n\t// Register a DatabaseClient using connectionFactory() and ReactiveDataAccessStrategy.\n\tDatabaseClient databaseClient();\n\t// Customization hook to return custom converters.\n\tprotected List<Object> getCustomConverters();\n}", "des": "Base class for Spring Data R2DBC configuration containing bean declarations that must be registered for Spring Data R2DBC to work."}
{"index": 15729, "repo": "spring-data-r2dbc-3.1.2", "code": "public abstract class AbstractR2dbcQuery extends Object implements RepositoryQuery {\n\t// Creates a BindableQuery instance using the given ParameterAccessor\n\tprotected abstract reactor.core.publisher.Mono<PreparedOperation<?>> createQuery(RelationalParameterAccessor accessor);\n\tObject execute(Object[] parameters);\n\tR2dbcQueryMethod getQueryMethod();\n\t// Returns whether the query should get a count projection applied.\n\tprotected abstract boolean isCountQuery();\n}", "des": "Base class for reactive RepositoryQuery implementations for R2DBC."}
{"index": 15730, "repo": "spring-data-r2dbc-3.1.2", "code": "public abstract class ArrayUtils extends Object {\n\t// Create a new empty array with the given number of dimensions.\n\tstatic Class<?> getArrayClass(Class<?> componentType, int dimensions);\n\t// Determine the number of dimensions for an arrayClass.\n\tstatic int getDimensionDepth(Class<?> arrayClass);\n\t// Determine the number of dimensions for an array object.\n\tstatic int getDimensionDepth(Object value);\n}", "des": "Utilities for array interaction."}
{"index": 15731, "repo": "spring-data-r2dbc-3.1.2", "code": "public final class BindTargetBinder extends Object {\n\t// Bind a Parameter by index.\n\tvoid bind(int index, Parameter parameter);\n\t// Bind a Parameter by name.\n\tvoid bind(String name, Parameter parameter);\n}", "des": "Utility to bind Parameter to a BindTarget."}
{"index": 15732, "repo": "spring-data-r2dbc-3.1.2", "code": "public class DefaultReactiveDataAccessStrategy extends Object implements ReactiveDataAccessStrategy {\n\t// Creates a new R2dbcConverter given R2dbcDialect and custom converters.\n\tstatic R2dbcConverter createConverter(R2dbcDialect dialect, Collection<?> converters);\n\tList<SqlIdentifier> getAllColumns(Class<?> entityType);\n\t// Return a potentially converted Parameter for strategies that support type conversion.\n\tParameter getBindValue(Parameter value);\n}", "des": "Default ReactiveDataAccessStrategy implementation."}
{"index": 15733, "repo": "spring-data-r2dbc-3.1.2", "code": "public class H2Dialect extends H2Dialect implements R2dbcDialect {\n\tArrayColumns getArraySupport();\n\t// Returns the BindMarkersFactory used by this dialect.\n\tBindMarkersFactory getBindMarkersFactory();\n\t// Render a SqlIdentifier in a way suitable for registering it as a generated key with a statement through Statement#returnGeneratedValues.\n\tString renderForGeneratedValues(SqlIdentifier identifier);\n}", "des": "R2DBC dialect for H2."}
{"index": 15734, "repo": "spring-data-r2dbc-3.1.2", "code": "public class MappingR2dbcConverter extends BasicRelationalConverter implements R2dbcConverter {\n\t// Writes the given Collection using the given RelationalPersistentProperty information.\n\tprotected List<Object> createCollection(Collection<?> collection, RelationalPersistentProperty property);\n\t// Convert a value into an array representation according to ArrayColumns.\n\tObject getArrayValue(ArrayColumns arrayColumns, RelationalPersistentProperty property, Object value);\n}", "des": "Converter for R2DBC."}
{"index": 15735, "repo": "spring-data-r2dbc-3.1.2", "code": "public class MySqlDialect extends MySqlDialect implements R2dbcDialect {\n\t// Returns the BindMarkersFactory used by this dialect.\n\tBindMarkersFactory getBindMarkersFactory();\n\t// Return a collection of converters for this dialect.\n\tCollection<Object> getConverters();\n\t// Return a collection of types that are natively supported by this database/driver.\n\tCollection<? extends Class<?>> getSimpleTypes();\n}", "des": "An SQL dialect for MySQL."}
{"index": 15736, "repo": "spring-data-r2dbc-3.1.2", "code": "@WritingConverter public static enum MySqlDialect.BooleanToByteConverter extends Enum<MySqlDialect.BooleanToByteConverter> implements Converter<Boolean,Byte> {\n\tByte convert(Boolean s);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MySqlDialect.BooleanToByteConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MySqlDialect.BooleanToByteConverter[] values();\n}", "des": "Simple singleton to convert Booleans to their Byte representation."}
{"index": 15737, "repo": "spring-data-r2dbc-3.1.2", "code": "@ReadingConverter public static enum MySqlDialect.ByteToBooleanConverter extends Enum<MySqlDialect.ByteToBooleanConverter> implements Converter<Byte,Boolean> {\n\tBoolean convert(Byte s);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MySqlDialect.ByteToBooleanConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MySqlDialect.ByteToBooleanConverter[] values();\n}", "des": "Simple singleton to convert Bytes to their Boolean representation."}
{"index": 15738, "repo": "spring-data-r2dbc-3.1.2", "code": "public class OutboundRow extends Object implements Map<SqlIdentifier,Parameter>, Cloneable {\n\t// Put the given key/value pair into this OutboundRow and return this.\n\tOutboundRow append(String key, Parameter value);\n\t// Put the given key/value pair into this OutboundRow and return this.\n\tOutboundRow append(SqlIdentifier key, Parameter value);\n\tvoid clear();\n\tprotected OutboundRow clone();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n}", "des": "Representation of a Row to be written through a INSERT or UPDATE statement."}
{"index": 15739, "repo": "spring-data-r2dbc-3.1.2", "code": "public class PartTreeR2dbcQuery extends AbstractR2dbcQuery {\n\t// Creates a BindableQuery instance using the given ParameterAccessor\n\tprotected reactor.core.publisher.Mono<PreparedOperation<?>> createQuery(RelationalParameterAccessor accessor);\n\t// Returns whether the query should get a count projection applied.\n\tprotected boolean isCountQuery();\n\t// Returns whether the query should get an exists projection applied.\n\tprotected boolean isExistsQuery();\n}", "des": "An AbstractR2dbcQuery implementation based on a PartTree."}
{"index": 15740, "repo": "spring-data-r2dbc-3.1.2", "code": "public class PostgresDialect extends PostgresDialect implements R2dbcDialect {\n\tArrayColumns getArraySupport();\n\t// Returns the BindMarkersFactory used by this dialect.\n\tBindMarkersFactory getBindMarkersFactory();\n\t// Return a collection of converters for this dialect.\n\tCollection<Object> getConverters();\n\t// Return a collection of types that are natively supported by this database/driver.\n\tCollection<? extends Class<?>> getSimpleTypes();\n}", "des": "An SQL dialect for Postgres."}
{"index": 15741, "repo": "spring-data-r2dbc-3.1.2", "code": "public class QueryMapper extends Object {\n\tprotected Object convertValue(Object value, TypeInformation<?> typeInformation);\n\t// Potentially convert the Parameter.\n\tParameter getBindValue(Parameter value);\n\t// Map the Sort object to apply field name mapping using the type to read.\n\tSort getMappedObject(Sort sort, RelationalPersistentEntity<?> entity);\n}", "des": "Maps CriteriaDefinition and Sort objects considering mapping metadata and dialect-specific conversion."}
{"index": 15742, "repo": "spring-data-r2dbc-3.1.2", "code": "public interface R2dbcConverter extends EntityReader<Object,Row>, EntityWriter<Object,OutboundRow>, RelationalConverter {\n\t// Convert a value into an array representation according to ArrayColumns.\n\tObject getArrayValue(ArrayColumns arrayColumns, RelationalPersistentProperty property, Object value);\n\t// Returns the underlying ConversionService used by the converter.\n\tConversionService getConversionService();\n}", "des": "Central R2DBC specific converter interface."}
{"index": 15743, "repo": "spring-data-r2dbc-3.1.2", "code": "public class R2dbcCustomConversions extends CustomConversions {\n\t// Create a new R2dbcCustomConversions from the given R2dbcDialect and converters.\n\tstatic R2dbcCustomConversions of(R2dbcDialect dialect, Object... converters);\n\t// Create a new R2dbcCustomConversions from the given R2dbcDialect and converters.\n\tstatic R2dbcCustomConversions of(R2dbcDialect dialect, Collection<?> converters);\n}", "des": "Value object to capture custom conversion."}
{"index": 15744, "repo": "spring-data-r2dbc-3.1.2", "code": "public interface R2dbcDialect extends Dialect {\n\t// Returns the BindMarkersFactory used by this dialect.\n\tBindMarkersFactory getBindMarkersFactory();\n\t// Return a collection of converters for this dialect.\n\tdefault Collection<Object> getConverters();\n\t// Return the SimpleTypeHolder for this dialect.\n\tdefault SimpleTypeHolder getSimpleTypeHolder();\n\t// Return a collection of types that are natively supported by this database/driver.\n\tdefault Collection<? extends Class<?>> getSimpleTypes();\n}", "des": "R2DBC-specific extension to Dialect."}
{"index": 15745, "repo": "spring-data-r2dbc-3.1.2", "code": "public interface R2dbcEntityOperations extends FluentR2dbcOperations {\n\t// Returns the number of rows for the given entity class applying Query.\n\treactor.core.publisher.Mono<Long> count(Query query, Class<?> entityClass);\n\t// Remove entities (rows)/columns from the table by Query.\n\treactor.core.publisher.Mono<Long> delete(Query query, Class<?> entityClass);\n\t// Delete the given entity and emit the entity if the delete was applied.\n\t<T> reactor.core.publisher.Mono<T> delete(T entity);\n}", "des": "Interface specifying a basic set of reactive R2DBC operations using entities."}
{"index": 15746, "repo": "spring-data-r2dbc-3.1.2", "code": "public class R2dbcEntityTemplate extends Object implements R2dbcEntityOperations, BeanFactoryAware, ApplicationContextAware {\n\t// Returns the number of rows for the given entity class applying Query.\n\treactor.core.publisher.Mono<Long> count(Query query, Class<?> entityClass);\n\t// Begin creating a DELETE operation for the given domainType.\n\tReactiveDeleteOperation.ReactiveDelete delete(Class<?> domainType);\n}", "des": "Implementation of R2dbcEntityOperations."}
{"index": 15747, "repo": "spring-data-r2dbc-3.1.2", "code": "public class R2dbcQueryMethod extends QueryMethod {\n\tprotected RelationalParameters createParameters(Method method);\n\tRelationalEntityMetadata<?> getEntityInformation();\n\tRelationalParameters getParameters();\n\t// Returns the required query string declared in a Query annotation or throws IllegalStateException if neither the annotation found nor the attribute was specified.\n\tString getRequiredAnnotatedQuery();\n\tboolean hasAnnotatedQuery();\n\tboolean hasLockMode();\n}", "des": "Reactive specific implementation of QueryMethod."}
{"index": 15748, "repo": "spring-data-r2dbc-3.1.2", "code": "public static interface ReactiveDeleteOperation.DeleteWithTable extends ReactiveDeleteOperation.TerminatingDelete {\n\t// Explicitly set the name of the table on which to perform the delete.\n\tdefault ReactiveDeleteOperation.DeleteWithQuery from(String table);\n\t// Explicitly set the name of the table on which to perform the delete.\n\tReactiveDeleteOperation.DeleteWithQuery from(SqlIdentifier table);\n}", "des": "Table override (optional)."}
{"index": 15749, "repo": "spring-data-r2dbc-3.1.2", "code": "public static interface ReactiveInsertOperation.InsertWithTable<T> extends ReactiveInsertOperation.TerminatingInsert<T> {\n\t// Explicitly set the name of the table.\n\tdefault ReactiveInsertOperation.TerminatingInsert<T> into(String table);\n\t// Explicitly set the name of the table.\n\tReactiveInsertOperation.TerminatingInsert<T> into(SqlIdentifier table);\n}", "des": "Table override (optional)."}
{"index": 15750, "repo": "spring-data-r2dbc-3.1.2", "code": "public static interface ReactiveSelectOperation.SelectWithTable<T> extends ReactiveSelectOperation.SelectWithQuery<T> {\n\t// Explicitly set the name of the table on which to perform the query.\n\tdefault ReactiveSelectOperation.SelectWithProjection<T> from(String table);\n\t// Explicitly set the name of the table on which to perform the query.\n\tReactiveSelectOperation.SelectWithProjection<T> from(SqlIdentifier table);\n}", "des": "Table override (optional)."}
{"index": 15751, "repo": "spring-data-r2dbc-3.1.2", "code": "public static interface ReactiveSelectOperation.TerminatingSelect<T> {\n\t// Get all matching elements.\n\treactor.core.publisher.Flux<T> all();\n\t// Get the number of matching elements.\n\treactor.core.publisher.Mono<Long> count();\n\t// Check for the presence of matching elements.\n\treactor.core.publisher.Mono<Boolean> exists();\n\t// Get the first result or no result.\n\treactor.core.publisher.Mono<T> first();\n\t// Get exactly zero or one result.\n\treactor.core.publisher.Mono<T> one();\n}", "des": "Trigger SELECT execution by calling one of the terminating methods."}
{"index": 15752, "repo": "spring-data-r2dbc-3.1.2", "code": "public static interface ReactiveUpdateOperation.UpdateWithTable extends ReactiveUpdateOperation.TerminatingUpdate {\n\t// Explicitly set the name of the table on which to perform the update.\n\tdefault ReactiveUpdateOperation.UpdateWithQuery inTable(String table);\n\t// Explicitly set the name of the table on which to perform the update.\n\tReactiveUpdateOperation.UpdateWithQuery inTable(SqlIdentifier table);\n}", "des": "Table override (optional)."}
{"index": 15753, "repo": "spring-data-r2dbc-3.1.2", "code": "public class SqlServerDialect extends SqlServerDialect implements R2dbcDialect {\n\t// Returns the BindMarkersFactory used by this dialect.\n\tBindMarkersFactory getBindMarkersFactory();\n\t// Return a collection of types that are natively supported by this database/driver.\n\tCollection<? extends Class<?>> getSimpleTypes();\n}", "des": "An SQL dialect for Microsoft SQL Server."}
{"index": 15754, "repo": "spring-data-r2dbc-3.1.2", "code": "public interface StatementMapper {\n\t// Create a new StatementMapper given R2dbcDialect and R2dbcConverter.\n\tstatic StatementMapper create(R2dbcDialect dialect, R2dbcConverter converter);\n\t// Create a DELETE specification for table.\n\tdefault StatementMapper.DeleteSpec createDelete(String table);\n\t// Create a DELETE specification for table.\n\tdefault StatementMapper.DeleteSpec createDelete(SqlIdentifier table);\n}", "des": "Mapper for statement specifications to PreparedOperation."}
{"index": 15755, "repo": "spring-data-r2dbc-3.1.2", "code": "public static class StatementMapper.DeleteSpec extends Object {\n\t// Create an DELETE specification for table.\n\tstatic StatementMapper.DeleteSpec create(String table);\n\t// Create an DELETE specification for table.\n\tstatic StatementMapper.DeleteSpec create(SqlIdentifier table);\n\tCriteriaDefinition getCriteria();\n\tSqlIdentifier getTable();\n\t// Associate a Criteria with the delete and return a new StatementMapper.DeleteSpec.\n\tStatementMapper.DeleteSpec withCriteria(CriteriaDefinition criteria);\n}", "des": "DELETE specification."}
{"index": 15756, "repo": "spring-data-r2dbc-3.1.2", "code": "public static class StatementMapper.InsertSpec extends Object {\n\t// Create an INSERT specification for table.\n\tstatic StatementMapper.InsertSpec create(String table);\n\t// Create an INSERT specification for table.\n\tstatic StatementMapper.InsertSpec create(SqlIdentifier table);\n\tMap<SqlIdentifier,Parameter> getAssignments();\n\tSqlIdentifier getTable();\n\t// Associate a column with a Parameter and create a new StatementMapper.InsertSpec.\n\tStatementMapper.InsertSpec withColumn(String column, Parameter value);\n}", "des": "INSERT specification."}
{"index": 15757, "repo": "spring-data-r2dbc-3.1.2", "code": "public static class StatementMapper.SelectSpec extends Object {\n\t// Create an SELECT specification for table.\n\tstatic StatementMapper.SelectSpec create(String table);\n\t// Create an SELECT specification for table.\n\tstatic StatementMapper.SelectSpec create(SqlIdentifier table);\n\t// Associate a result statement distinct with the select and create a new StatementMapper.SelectSpec.\n\tStatementMapper.SelectSpec distinct();\n}", "des": "SELECT specification."}
{"index": 15758, "repo": "spring-data-r2dbc-3.1.2", "code": "public static class StatementMapper.UpdateSpec extends Object {\n\t// Create an INSERT specification for table.\n\tstatic StatementMapper.UpdateSpec create(String table, Update update);\n\t// Create an INSERT specification for table.\n\tstatic StatementMapper.UpdateSpec create(SqlIdentifier table, Update update);\n\tCriteriaDefinition getCriteria();\n\tSqlIdentifier getTable();\n\tUpdate getUpdate();\n}", "des": "UPDATE specification."}
{"index": 15759, "repo": "spring-data-r2dbc-3.1.2", "code": "public class StringBasedR2dbcQuery extends AbstractR2dbcQuery {\n\t// Creates a BindableQuery instance using the given ParameterAccessor\n\tprotected reactor.core.publisher.Mono<PreparedOperation<?>> createQuery(RelationalParameterAccessor accessor);\n\t// Returns whether the query should get a count projection applied.\n\tprotected boolean isCountQuery();\n\t// Returns whether the query should get an exists projection applied.\n\tprotected boolean isExistsQuery();\n}", "des": "String-based StringBasedR2dbcQuery implementation."}
{"index": 15760, "repo": "spring-data-r2dbc-3.1.2", "code": "public class UpdateMapper extends QueryMapper {\n\t// Map a assignments object to BoundAssignments and consider value/NULL Bindings.\n\tBoundAssignments getMappedObject(BindMarkers markers, Map<SqlIdentifier,? extends Object> assignments, Table table, RelationalPersistentEntity<?> entity);\n\t// Map a Update object to BoundAssignments and consider value/NULL Bindings.\n\tBoundAssignments getMappedObject(BindMarkers markers, Update update, Table table, RelationalPersistentEntity<?> entity);\n}", "des": "A subclass of QueryMapper that maps Update to update assignments."}
{"index": 15761, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractCandidate extends Object implements Candidate {\n\t// Gets the identifier.\n\tString getId();\n\t// Gets the role.\n\tString getRole();\n\t// Callback method invoked when this candidate is elected leader.\n\tabstract void onGranted(Context ctx);\n\t// Callback method invoked when this candidate is no longer leader.\n\tabstract void onRevoked(Context ctx);\n}", "des": "Base implementation of a Candidate."}
{"index": 15762, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractCorrelatingMessageHandler extends AbstractMessageProducingHandler implements DiscardingMessageHandler, org.springframework.context.ApplicationEventPublisherAware, ManageableLifecycle {\n\t// Allows you to provide additional logic that needs to be performed after the MessageGroup was released.\n\tprotected abstract void afterRelease(MessageGroup group, Collection<org.springframework.messaging.Message<?>> completedMessages);\n}", "des": "Abstract Message handler that holds a buffer of correlated messages in a MessageStore."}
{"index": 15763, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractDispatcher extends Object implements MessageDispatcher {\n\t// Add the handler to the internal Set.\n\tboolean addHandler(org.springframework.messaging.MessageHandler handler);\n\t// Return the current handler count.\n\tint getHandlerCount();\n\t// Returns an unmodifiable Set of this dispatcher's handlers.\n\tprotected Set<org.springframework.messaging.MessageHandler> getHandlers();\n}", "des": "Base class for MessageDispatcher implementations."}
{"index": 15764, "repo": "spring-integration-core-6.1.2", "code": "@IntegrationManagedResource public abstract class AbstractEndpoint extends IntegrationObjectSupport implements ManageableSmartLifecycle, org.springframework.beans.factory.DisposableBean {\n\tvoid destroy();\n\t// Subclasses must implement this method with the start behavior.\n\tprotected abstract void doStart();\n\t// Subclasses must implement this method with the stop behavior.\n\tprotected abstract void doStop();\n\t// Stop the component and invoke callback.\n\tprotected void doStop(Runnable callback);\n}", "des": "The base class for Message Endpoint implementations."}
{"index": 15765, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractExecutorChannel extends AbstractSubscribableChannel implements ExecutorChannelInterceptorAware {\n\t// Add a channel interceptor to the specified index of the list.\n\tvoid addInterceptor(int index, org.springframework.messaging.support.ChannelInterceptor interceptor);\n\t// Add a channel interceptor to the end of the list.\n\tvoid addInterceptor(org.springframework.messaging.support.ChannelInterceptor interceptor);\n}", "des": "The AbstractSubscribableChannel base implementation for those inheritors which logic may be based on the Executor."}
{"index": 15766, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractFetchLimitingMessageSource<T> extends AbstractMessageSource<T> implements MessageSourceManagement {\n\t// Subclasses must implement this method.\n\tprotected Object doReceive();\n\t// Subclasses must implement this method.\n\tprotected abstract Object doReceive(int maxFetchSizeToReceive);\n\t// Return the max fetch size.\n\tint getMaxFetchSize();\n\t// Set the maximum number of objects the source should fetch if it is necessary to fetch objects.\n\tvoid setMaxFetchSize(int maxFetchSize);\n}", "des": "A message source that can limit the number of remote objects it fetches."}
{"index": 15767, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractHeaderMapper<T> extends Object implements RequestReplyHeaderMapper<T>, org.springframework.beans.factory.BeanClassLoaderAware {\n\t// Create the initial AbstractHeaderMapper.HeaderMatcher based on the specified headers and standard header prefix.\n\tprotected AbstractHeaderMapper.HeaderMatcher createDefaultHeaderMatcher(String standardHeaderPrefix, Collection<String> headerNames);\n}", "des": "Abstract base class for RequestReplyHeaderMapper implementations."}
{"index": 15768, "repo": "spring-integration-core-6.1.2", "code": "@FunctionalInterface public static interface AbstractHeaderMapper.HeaderMatcher {\n\t// Return true if this match should be explicitly excluded from the mapping.\n\tdefault boolean isNegated();\n\t// Specify if the given headerName matches.\n\tboolean matchHeader(String headerName);\n}", "des": "Strategy interface to determine if a given header name matches."}
{"index": 15769, "repo": "spring-integration-core-6.1.2", "code": "protected static class AbstractHeaderMapper.SinglePatternBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher {\n\t// Return true if this match should be explicitly excluded from the mapping.\n\tboolean isNegated();\n\t// Specify if the given headerName matches.\n\tboolean matchHeader(String headerName);\n}", "des": "A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches the specified simple pattern."}
{"index": 15770, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractKeyValueMessageStore extends AbstractMessageGroupStore implements MessageStore {\n\t// Put the provided Message into the MessageStore.\n\t<T> org.springframework.messaging.Message<T> addMessage(org.springframework.messaging.Message<T> message);\n\t// Store messages with an association to a group id.\n\tvoid addMessagesToGroup(Object groupId, org.springframework.messaging.Message<?>... messages);\n\t// Completes this MessageGroup.\n\tvoid completeGroup(Object groupId);\n}", "des": "Base class for implementations of Key/Value style MessageGroupStore and MessageStore."}
{"index": 15771, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractKryoCodec extends Object implements Codec {\n\t// Subclasses implement this to configure the kryo instance.\n\tprotected abstract void configureKryoInstance(com.esotericsoftware.kryo.Kryo kryo);\n\t// Decode an object of a given type.\n\t<T> T decode(byte[] bytes, Class<T> type);\n\t// Decode an object of a given type.\n\t<T> T decode(InputStream inputStream, Class<T> type);\n}", "des": "Base class for Codecs using Kryo."}
{"index": 15772, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractLeaderEvent extends org.springframework.context.ApplicationEvent {\n\t// Get the Context associated with this event.\n\tContext getContext();\n\t// Get the role of the leader.\n\tString getRole();\n}", "des": "Base ApplicationEvent class for leader based events."}
{"index": 15773, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractMappingMessageRouter extends AbstractMessageRouter implements MappingMessageRouterManagement {\n\t// Subclasses must implement this method to return a Collection of zero or more MessageChannels to which the given Message should be routed.\n\tprotected Collection<org.springframework.messaging.MessageChannel> determineTargetChannels(org.springframework.messaging.Message<?> message);\n}", "des": "Base class for all Message Routers that support mapping from arbitrary String values to Message Channel names."}
{"index": 15774, "repo": "spring-integration-core-6.1.2", "code": "@IntegrationManagedResource public abstract class AbstractMessageChannel extends IntegrationObjectSupport implements org.springframework.messaging.MessageChannel, TrackableComponent, org.springframework.messaging.support.InterceptableChannel, IntegrationManagement, IntegrationPattern {\n\t// Add a channel interceptor to the specified index of the list.\n\tvoid addInterceptor(int index, org.springframework.messaging.support.ChannelInterceptor interceptor);\n}", "des": "Base class for MessageChannel implementations providing common properties such as the channel name."}
{"index": 15775, "repo": "spring-integration-core-6.1.2", "code": "@ManagedResource @IntegrationManagedResource public abstract class AbstractMessageRouter extends AbstractMessageHandler implements MessageRouter {\n\t// Subclasses must implement this method to return a Collection of zero or more MessageChannels to which the given Message should be routed.\n\tprotected abstract Collection<org.springframework.messaging.MessageChannel> determineTargetChannels(org.springframework.messaging.Message<?> message);\n}", "des": "Base class for all Message Routers."}
{"index": 15776, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractMessageSplitter extends AbstractReplyProducingMessageHandler implements DiscardingMessageHandler {\n\t// Allows subclasses to add extra headers to the output messages.\n\tprotected void addHeaders(org.springframework.messaging.Message<?> message, Map<String,Object> headers);\n\tprotected void doInit();\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n}", "des": "Base class for Message-splitting handlers."}
{"index": 15777, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractOutboundChannelAdapterParser extends AbstractChannelAdapterParser {\n\t// Subclasses must implement this method to parse the adapter element.\n\tprotected org.springframework.beans.factory.support.AbstractBeanDefinition doParse(Element element, org.springframework.beans.factory.xml.ParserContext parserContext, String channelName);\n}", "des": "Base class for outbound Channel Adapter parsers."}
{"index": 15778, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractPollableChannel extends AbstractMessageChannel implements org.springframework.messaging.PollableChannel, ExecutorChannelInterceptorAware {\n\t// Add a channel interceptor to the specified index of the list.\n\tvoid addInterceptor(int index, org.springframework.messaging.support.ChannelInterceptor interceptor);\n\t// Add a channel interceptor to the end of the list.\n\tvoid addInterceptor(org.springframework.messaging.support.ChannelInterceptor interceptor);\n}", "des": "Base class for all pollable channels."}
{"index": 15779, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractPollingEndpoint extends AbstractEndpoint implements org.springframework.beans.factory.BeanClassLoaderAware {\n\t// Add the advice chain to the component that responds to receiveMessage() calls.\n\tprotected void applyReceiveOnlyAdviceChain(Collection<org.aopalliance.aop.Advice> chain);\n\t// Subclasses must implement this method with the start behavior.\n\tprotected void doStart();\n\t// Subclasses must implement this method with the stop behavior.\n\tprotected void doStop();\n}", "des": "An AbstractEndpoint extension for Polling Consumer pattern basics."}
{"index": 15780, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractPollingInboundChannelAdapterParser extends AbstractChannelAdapterParser {\n\t// Subclasses must implement this method to parse the adapter element.\n\tprotected org.springframework.beans.factory.support.AbstractBeanDefinition doParse(Element element, org.springframework.beans.factory.xml.ParserContext parserContext, String channelName);\n}", "des": "Base parser for inbound Channel Adapters that poll a source."}
{"index": 15781, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractRequestHandlerAdvice extends IntegrationObjectSupport implements org.aopalliance.intercept.MethodInterceptor {\n\t// Subclasses implement this method to apply behavior to the MessageHandler.\n\tprotected abstract Object doInvoke(AbstractRequestHandlerAdvice.ExecutionCallback callback, Object target, org.springframework.messaging.Message<?> message);\n\tfinal Object invoke(org.aopalliance.intercept.MethodInvocation invocation);\n}", "des": "Base class for MessageHandler advice classes."}
{"index": 15782, "repo": "spring-integration-core-6.1.2", "code": "protected static interface AbstractRequestHandlerAdvice.ExecutionCallback {\n\t// Call this when it is necessary to clone the invocation before calling proceed() - such as when the invocation might be called multiple times - for example in a retry advice.\n\tObject cloneAndExecute();\n\t// Call this for a normal invocation.proceed().\n\tObject execute();\n}", "des": "Called by subclasses in doInvoke() to proceed() the invocation."}
{"index": 15783, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractRouterParser extends AbstractConsumerEndpointParser {\n\tprotected abstract org.springframework.beans.factory.config.BeanDefinition doParseRouter(Element element, org.springframework.beans.factory.xml.ParserContext parserContext);\n\t// Returns the name of the attribute that provides a key for the channel mappings.\n\tprotected String getMappingKeyAttributeName();\n}", "des": "Base parser for routers."}
{"index": 15784, "repo": "spring-integration-core-6.1.2", "code": "public class AbstractRouterSpec<S extends AbstractRouterSpec<S,R>,R extends AbstractMessageRouter> extends ConsumerEndpointSpec<S,R> {\n\tS applySequence(boolean applySequence);\n\t// Specify a MessageChannel bean name as a default output from the router.\n\tS defaultOutputChannel(String channelName);\n\t// Specify a MessageChannel as a default output from the router.\n\tS defaultOutputChannel(org.springframework.messaging.MessageChannel channel);\n}", "des": "A MessageHandlerSpec for AbstractMessageRouters."}
{"index": 15785, "repo": "spring-integration-core-6.1.2", "code": "public abstract class AbstractSubscribableChannel extends AbstractMessageChannel implements org.springframework.messaging.SubscribableChannel, SubscribableChannelManagement {\n\t// Subclasses must implement this method.\n\tprotected boolean doSend(org.springframework.messaging.Message<?> message, long timeout);\n\tprotected abstract MessageDispatcher getDispatcher();\n\t// The number of message handlers currently subscribed to this channel.\n\tint getSubscriberCount();\n}", "des": "Base implementation of MessageChannel that invokes the subscribed handler(s) by delegating to a MessageDispatcher."}
{"index": 15786, "repo": "spring-integration-core-6.1.2", "code": "@FunctionalInterface public interface AcknowledgmentCallback extends SimpleAcknowledgment {\n\t// Acknowledge the message delivery.\n\tdefault void acknowledge();\n\t// Acknowledge the message.\n\tvoid acknowledge(AcknowledgmentCallback.Status status);\n\t// Implementations must implement this to indicate when the ack has been processed by the user so that the framework can auto-ack if needed.\n\tdefault boolean isAcknowledged();\n}", "des": "A general abstraction over acknowledgments."}
{"index": 15787, "repo": "spring-integration-core-6.1.2", "code": "public final class AckUtils extends Object {\n\t// ACCEPT the associated message if the callback is not null.\n\tstatic void accept(AcknowledgmentCallback ackCallback);\n\t// ACCEPT an AcknowledgmentCallback if it's not null, supports auto ack and is not already ack'd.\n\tstatic void autoAck(AcknowledgmentCallback ackCallback);\n\t// REJECT an AcknowledgmentCallback if it's not null, supports auto ack and is not already ack'd.\n\tstatic void autoNack(AcknowledgmentCallback ackCallback);\n}", "des": "Utility methods for acting on AcknowledgmentCallback headers."}
{"index": 15788, "repo": "spring-integration-core-6.1.2", "code": "public class AggregatingMessageHandler extends AbstractCorrelatingMessageHandler {\n\t// Complete the group and remove all its messages.\n\tprotected void afterRelease(MessageGroup messageGroup, Collection<org.springframework.messaging.Message<?>> completedMessages);\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n\tprotected boolean isExpireGroupsUponCompletion();\n}", "des": "Aggregator specific implementation of AbstractCorrelatingMessageHandler."}
{"index": 15789, "repo": "spring-integration-core-6.1.2", "code": "public class AggregatorSpec extends CorrelationHandlerSpec<AggregatorSpec,AggregatingMessageHandler> {\n\tAggregatorSpec expireGroupsUponCompletion(boolean expireGroupsUponCompletion);\n\tMap<Object,String> getComponentsToRegister();\n\t// Configure a Function to merge and compute headers for reply based on the completed MessageGroup.\n\tAggregatorSpec headersFunction(Function<MessageGroup,Map<String,Object>> headersFunction);\n}", "des": "A CorrelationHandlerSpec for an AggregatingMessageHandler."}
{"index": 15790, "repo": "spring-integration-core-6.1.2", "code": "public class AllowListDeserializingConverter extends Object implements org.springframework.core.convert.converter.Converter<byte[],Object> {\n\t// Add package/class patterns to the allowed list.\n\tvoid addAllowedPatterns(String... patterns);\n\tprotected void checkAllowList(Class<?> clazz);\n\tObject convert(byte[] source);\n\tprotected Object deserialize(ByteArrayInputStream inputStream);\n}", "des": "A Converter that delegates to a Deserializer to convert data in a byte array to an object."}
{"index": 15791, "repo": "spring-integration-core-6.1.2", "code": "public class BarrierMessageHandler extends AbstractReplyProducingMessageHandler implements MessageTriggerAction, DiscardingMessageHandler {\n\t// Override to change the default mechanism by which the inbound and release messages are returned as a result.\n\tprotected Object buildResult(Object key, org.springframework.messaging.Message<?> requestMessage, org.springframework.messaging.Message<?> releaseMessage);\n}", "des": "A message handler that suspends the thread until a message with corresponding correlation is passed into the trigger method or the timeout occurs."}
{"index": 15792, "repo": "spring-integration-core-6.1.2", "code": "@IntegrationDsl public abstract class BaseIntegrationFlowDefinition<B extends BaseIntegrationFlowDefinition<B>> extends Object {\n\tprotected final B _this();\n\tprotected B addComponent(Object component);\n\tprotected B addComponent(Object component, String beanName);\n\tprotected B addComponents(Map<Object,String> components);\n\t// Populate the AggregatingMessageHandler with default options.\n\tB aggregate();\n}", "des": "The Builder pattern implementation for the EIP-method chain."}
{"index": 15793, "repo": "spring-integration-core-6.1.2", "code": "public interface BasicMessageGroupStore {\n\t// Store a message with an association to a group id.\n\tMessageGroup addMessageToGroup(Object groupId, org.springframework.messaging.Message<?> message);\n\t// Return all Messages currently in the MessageStore that were stored using addMessageToGroup(Object, Message) with this group id.\n\tMessageGroup getMessageGroup(Object groupId);\n\t// Return the size of this MessageGroup.\n\tint messageGroupSize(Object groupId);\n}", "des": "Defines a minimal message group store with basic capabilities."}
{"index": 15794, "repo": "spring-integration-core-6.1.2", "code": "public class BridgeHandler extends AbstractReplyProducingMessageHandler {\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n\t// Subclasses must implement this method to handle the request Message.\n\tprotected Object handleRequestMessage(org.springframework.messaging.Message<?> requestMessage);\n}", "des": "A simple MessageHandler implementation that passes the request Message directly to the output channel without modifying it."}
{"index": 15795, "repo": "spring-integration-core-6.1.2", "code": "public class BroadcastingDispatcher extends AbstractDispatcher implements org.springframework.beans.factory.BeanFactoryAware {\n\t// Dispatch the message.\n\tboolean dispatch(org.springframework.messaging.Message<?> message);\n\tprotected MessageBuilderFactory getMessageBuilderFactory();\n\t// Specify whether to apply sequence numbers to the messages prior to sending to the handlers.\n\tvoid setApplySequence(boolean applySequence);\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}", "des": "A broadcasting dispatcher implementation."}
{"index": 15796, "repo": "spring-integration-core-6.1.2", "code": "public interface BytesMessageMapper extends InboundMessageMapper<byte[]>, OutboundMessageMapper<byte[]> {\n\t// Convert a provided object to the Message.\n\tdefault org.springframework.messaging.Message<?> toMessage(byte[] object);\n\t// Convert a provided object to the Message and supply with headers if necessary and provided.\n\torg.springframework.messaging.Message<?> toMessage(byte[] bytes, Map<String,Object> headers);\n}", "des": "An OutboundMessageMapper and InboundMessageMapper that maps to/from byte[]."}
{"index": 15797, "repo": "spring-integration-core-6.1.2", "code": "public class CacheRequestHandlerAdvice extends AbstractRequestHandlerAdvice implements org.springframework.beans.factory.SmartInitializingSingleton {\n\tvoid afterSingletonsInstantiated();\n\t// Subclasses implement this method to apply behavior to the MessageHandler.\n\tprotected Object doInvoke(AbstractRequestHandlerAdvice.ExecutionCallback callback, Object target, org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n}", "des": "The AbstractRequestHandlerAdvice implementation for caching AbstractReplyProducingMessageHandler.RequestHandler#handleRequestMessage(Message) results."}
{"index": 15798, "repo": "spring-integration-core-6.1.2", "code": "public interface Candidate {\n\t// Gets the identifier.\n\tString getId();\n\t// Gets the role.\n\tString getRole();\n\t// Callback method invoked when this candidate is elected leader.\n\tvoid onGranted(Context ctx);\n\t// Callback method invoked when this candidate is no longer leader.\n\tvoid onRevoked(Context ctx);\n}", "des": "Interface that defines the contract for candidates to participate in a leader election."}
{"index": 15799, "repo": "spring-integration-core-6.1.2", "code": "public class ClaimCheckInTransformer extends AbstractTransformer implements IntegrationPattern {\n\t// Subclasses must implement this method to provide the transformation logic.\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n}", "des": "Transformer that stores a Message and returns a new Message whose payload is the id of the stored Message."}
{"index": 15800, "repo": "spring-integration-core-6.1.2", "code": "public class ClaimCheckOutTransformer extends AbstractTransformer implements IntegrationPattern {\n\t// Subclasses must implement this method to provide the transformation logic.\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n}", "des": "Transformer that accepts a Message whose payload is a UUID and retrieves the Message associated with that id from a MessageStore if available."}
{"index": 15801, "repo": "spring-integration-core-6.1.2", "code": "public interface Codec {\n\t// Decode an object of a given type.\n\t<T> T decode(byte[] bytes, Class<T> type);\n\t// Decode an object of a given type.\n\t<T> T decode(InputStream inputStream, Class<T> type);\n\t// Encode an object to a byte array.\n\tbyte[] encode(Object object);\n\t// Encode (encode) an object to an OutputStream.\n\tvoid encode(Object object, OutputStream outputStream);\n}", "des": "Interface for classes that perform both encode (serialize) and decode (deserialize) on multiple classes."}
{"index": 15802, "repo": "spring-integration-core-6.1.2", "code": "public class CompositeCodec extends Object implements Codec {\n\t// Decode an object of a given type.\n\t<T> T decode(byte[] bytes, Class<T> type);\n\t// Decode an object of a given type.\n\t<T> T decode(InputStream inputStream, Class<T> type);\n\t// Encode an object to a byte array.\n\tbyte[] encode(Object object);\n\t// Encode (encode) an object to an OutputStream.\n\tvoid encode(Object object, OutputStream outputStream);\n}", "des": "A Codec that can delegate to one out of many Codecs, each mapped to a class."}
{"index": 15803, "repo": "spring-integration-core-6.1.2", "code": "public class CompositeExecutor extends Object implements Executor {\n\t// Execute using the primary executor.\n\tvoid execute(Runnable task);\n\t// Execute using the secondary executor.\n\tvoid execute2(Runnable task);\n}", "des": "An Executor that encapsulates two underlying executors."}
{"index": 15804, "repo": "spring-integration-core-6.1.2", "code": "public class CompoundTrigger extends Object implements org.springframework.scheduling.Trigger {\n\tInstant nextExecution(org.springframework.scheduling.TriggerContext triggerContext);\n\t// Set the override trigger; set to null to revert to using the primary trigger.\n\tvoid setOverride(org.springframework.scheduling.Trigger override);\n\t// Set the primary trigger.\n\tfinal void setPrimary(org.springframework.scheduling.Trigger primary);\n}", "des": "A Trigger that delegates the Trigger.nextExecutionTime(TriggerContext) to one of two Triggers."}
{"index": 15805, "repo": "spring-integration-core-6.1.2", "code": "public interface ConcurrentMetadataStore extends MetadataStore {\n\t// Atomically insert the key into the store.\n\tString putIfAbsent(String key, String value);\n\t// Atomically replace the value for the key in the store if the old value matches the oldValue argument.\n\tboolean replace(String key, String oldValue, String newValue);\n}", "des": "Supports atomic updates to values in the store."}
{"index": 15806, "repo": "spring-integration-core-6.1.2", "code": "public abstract class ConsumerEndpointSpec<S extends ConsumerEndpointSpec<S,H>,H extends org.springframework.messaging.MessageHandler> extends EndpointSpec<S,ConsumerEndpointFactoryBean,H> {\n\t// Configure a list of Advice objects to be applied, in nested order, to the endpoint's handler.\n\tS advice(org.aopalliance.aop.Advice... advice);\n\t// Allow async replies.\n\tS async(boolean async);\n\tS autoStartup(boolean autoStartup);\n}", "des": "A EndpointSpec for consumer endpoints."}
{"index": 15807, "repo": "spring-integration-core-6.1.2", "code": "public class ContentEnricher extends AbstractReplyProducingMessageHandler implements ManageableLifecycle {\n\t// Initialize the Content Enricher.\n\tprotected void doInit();\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n}", "des": "Content Enricher is a Message Transformer that can augment a message's payload with either static values or by optionally invoking a downstream message flow via its request channel and then applying values from the reply Message to the original payload."}
{"index": 15808, "repo": "spring-integration-core-6.1.2", "code": "@FunctionalInterface public interface Context {\n\t// Get the role for the Candidate.\n\tdefault String getRole();\n\t// Checks if the Candidate this context was passed to is the leader.\n\tboolean isLeader();\n\t// Causes the Candidate this context was passed to to relinquish leadership.\n\tdefault void yield();\n}", "des": "Interface that defines the context for candidate leadership."}
{"index": 15809, "repo": "spring-integration-core-6.1.2", "code": "public class CorrelatingMessageBarrier extends AbstractMessageHandler implements MessageSource<Object> {\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> message);\n\t// Retrieve the next available message from this source.\n\torg.springframework.messaging.Message<Object> receive();\n\t// Set the CorrelationStrategy to be used to determine the correlation key for incoming messages.\n\tvoid setCorrelationStrategy(CorrelationStrategy correlationStrategy);\n}", "des": "This Endpoint serves as a barrier for messages that should not be processed yet."}
{"index": 15810, "repo": "spring-integration-core-6.1.2", "code": "public abstract class CorrelationHandlerSpec<S extends CorrelationHandlerSpec<S,H>,H extends AbstractCorrelatingMessageHandler> extends ConsumerEndpointSpec<S,H> {\n\t// Configure the handler with an ExpressionEvaluatingCorrelationStrategy for the given expression.\n\tS correlationExpression(String correlationExpression);\n\t// Configure the handler with an MethodInvokingCorrelationStrategy for the target object and method name.\n\tS correlationStrategy(Object target, String methodName);\n}", "des": "A MessageHandlerSpec for an AbstractCorrelatingMessageHandler."}
{"index": 15811, "repo": "spring-integration-core-6.1.2", "code": "public class DecodingTransformer<T> extends AbstractTransformer {\n\t// Subclasses must implement this method to provide the transformation logic.\n\tprotected T doTransform(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\tvoid setEvaluationContext(org.springframework.expression.spel.support.StandardEvaluationContext evaluationContext);\n}", "des": "AbstractPayloadTransformer that delegates to a codec to decode the payload from a byte[]."}
{"index": 15812, "repo": "spring-integration-core-6.1.2", "code": "public class DefaultCandidate extends AbstractCandidate {\n\t// Callback method invoked when this candidate is elected leader.\n\tvoid onGranted(Context ctx);\n\t// Callback method invoked when this candidate is no longer leader.\n\tvoid onRevoked(Context ctx);\n\t// Voluntarily yield leadership if held.\n\tvoid yieldLeadership();\n}", "des": "Simple Candidate for leadership."}
{"index": 15813, "repo": "spring-integration-core-6.1.2", "code": "public class DefaultHeaderChannelRegistry extends IntegrationObjectSupport implements HeaderChannelRegistry, ManageableLifecycle, Runnable {\n\t// Converts the channel name back to a MessageChannel (if it is registered).\n\torg.springframework.messaging.MessageChannel channelNameToChannel(String name);\n\t// Converts the channel to a name (String).\n\tObject channelToChannelName(Object channel);\n\t// Converts the channel to a name (String).\n\tObject channelToChannelName(Object channel, long timeToLive);\n}", "des": "Converts a channel to a name, retaining a reference to the channel keyed by the name."}
{"index": 15814, "repo": "spring-integration-core-6.1.2", "code": "public class DefaultLeaderEventPublisher extends Object implements LeaderEventPublisher, org.springframework.context.ApplicationEventPublisherAware {\n\t// Publish a failure to acquire event.\n\tvoid publishOnFailedToAcquire(Object source, Context context, String role);\n\t// Publish a granted event.\n\tvoid publishOnGranted(Object source, Context context, String role);\n\t// Publish a revoked event.\n\tvoid publishOnRevoked(Object source, Context context, String role);\n}", "des": "Default implementation of LeaderEventPublisher."}
{"index": 15815, "repo": "spring-integration-core-6.1.2", "code": "public class DefaultMessageSplitter extends AbstractMessageSplitter {\n\t// Set delimiters to use for tokenizing String values.\n\tvoid setDelimiters(String delimiters);\n\t// Subclasses must override this method to split the received Message.\n\tprotected final Object splitMessage(org.springframework.messaging.Message<?> message);\n}", "des": "The default Message Splitter implementation."}
{"index": 15816, "repo": "spring-integration-core-6.1.2", "code": "public class DelayerEndpointSpec extends ConsumerEndpointSpec<DelayerEndpointSpec,DelayHandler> {\n\tDelayerEndpointSpec defaultDelay(long defaultDelay);\n\t// Configure a list of Advice objects that will be applied, in nested order, when delayed messages are sent.\n\tDelayerEndpointSpec delayedAdvice(org.aopalliance.aop.Advice... advice);\n\t// Set a message channel name to which an ErrorMessage will be sent if sending the released message fails.\n\tDelayerEndpointSpec delayedMessageErrorChannel(String channel);\n}", "des": "A ConsumerEndpointSpec for a DelayHandler."}
{"index": 15817, "repo": "spring-integration-core-6.1.2", "code": "@ManagedResource @IntegrationManagedResource public class DelayHandler extends AbstractReplyProducingMessageHandler implements DelayHandlerManagement, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent> {\n\tprotected void doInit();\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\tint getDelayedMessageCount();\n}", "des": "A MessageHandler that is capable of delaying the continuation of a Message flow based on the result of evaluation delayExpression on an inbound Message or a default delay value configured on this handler."}
{"index": 15818, "repo": "spring-integration-core-6.1.2", "code": "public class DirectChannel extends AbstractSubscribableChannel {\n\tprotected UnicastingDispatcher getDispatcher();\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\t// Specify whether the channel's dispatcher should have failover enabled.\n\tvoid setFailover(boolean failover);\n\t// Specify the maximum number of subscribers supported by the channel's dispatcher.\n\tvoid setMaxSubscribers(int maxSubscribers);\n}", "des": "A channel that invokes a single subscriber for each sent Message."}
{"index": 15819, "repo": "spring-integration-core-6.1.2", "code": "public class DynamicPeriodicTrigger extends Object implements org.springframework.scheduling.Trigger {\n\tboolean equals(Object obj);\n\t// Return the duration.\n\tDuration getDuration();\n\t// Get the initial duration.\n\tDuration getInitialDuration();\n\t// Return whether this trigger is fixed rate.\n\tboolean isFixedRate();\n\t// Return the time after which a task should run again.\n\tInstant nextExecution(org.springframework.scheduling.TriggerContext triggerContext);\n}", "des": "This is a dynamically changeable Trigger."}
{"index": 15820, "repo": "spring-integration-core-6.1.2", "code": "public class EmbeddedJsonHeadersMessageMapper extends Object implements BytesMessageMapper {\n\tbyte[] fromMessage(org.springframework.messaging.Message<?> message);\n\tCollection<String> getHeaderPatterns();\n\t// Set to true to make the header name pattern match case sensitive.\n\tvoid setCaseSensitive(boolean caseSensitive);\n\t// For messages with byte[] payloads, if rendered as JSON, Jackson performs Base64 conversion on the bytes.\n\tvoid setRawBytes(boolean rawBytes);\n}", "des": "For outbound messages, uses a message-aware Jackson object mapper to render the message as JSON."}
{"index": 15821, "repo": "spring-integration-core-6.1.2", "code": "public class EnricherParser extends AbstractConsumerEndpointParser {\n\t// Parse the MessageHandler.\n\tprotected org.springframework.beans.factory.support.BeanDefinitionBuilder parseHandler(Element element, org.springframework.beans.factory.xml.ParserContext parserContext);\n\t// Override to allow 'reply-channel' within a chain, for components where it makes sense (e.g.\n\tprotected boolean replyChannelInChainAllowed(Element element);\n}", "des": "Parser for the 'enricher' element."}
{"index": 15822, "repo": "spring-integration-core-6.1.2", "code": "public class EnricherSpec extends ConsumerEndpointSpec<EnricherSpec,ContentEnricher> {\n\tprotected reactor.util.function.Tuple2<ConsumerEndpointFactoryBean,ContentEnricher> doGet();\n\tEnricherSpec errorChannel(String errorChannel);\n\tEnricherSpec errorChannel(org.springframework.messaging.MessageChannel errorChannel);\n\t// Set a header value using an explicit HeaderValueMessageProcessor.\n\t<V> EnricherSpec header(String headerName, HeaderValueMessageProcessor<V> headerValueMessageProcessor);\n}", "des": "A ConsumerEndpointSpec extension for the ContentEnricher."}
{"index": 15823, "repo": "spring-integration-core-6.1.2", "code": "public class ErrorMessageExceptionTypeRouter extends AbstractMappingMessageRouter {\n\t// Subclasses must implement this method to return the channel keys.\n\tprotected List<Object> getChannelKeys(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\t// Remove a channel mapping for the given key if present.\n\tvoid removeChannelMapping(String key);\n}", "des": "A Message Router that resolves the target MessageChannel for messages whose payload is a Throwable."}
{"index": 15824, "repo": "spring-integration-core-6.1.2", "code": "public class EventDrivenConsumer extends AbstractEndpoint implements IntegrationConsumer {\n\t// Subclasses must implement this method with the start behavior.\n\tprotected void doStart();\n\t// Subclasses must implement this method with the stop behavior.\n\tprotected void doStop();\n\t// Return the consumer's handler.\n\torg.springframework.messaging.MessageHandler getHandler();\n\t// Return the input channel.\n\torg.springframework.messaging.MessageChannel getInputChannel();\n}", "des": "Message Endpoint that connects any MessageHandler implementation to a SubscribableChannel."}
{"index": 15825, "repo": "spring-integration-core-6.1.2", "code": "public class ExecutorChannel extends AbstractExecutorChannel {\n\tprotected UnicastingDispatcher getDispatcher();\n\t// Subclasses may implement this for initialization logic.\n\tfinal void onInit();\n\t// Specify whether the channel's dispatcher should have failover enabled.\n\tvoid setFailover(boolean failover);\n}", "des": "An implementation of MessageChannel that delegates to an instance of UnicastingDispatcher which in turn delegates all dispatching invocations to an Executor."}
{"index": 15826, "repo": "spring-integration-core-6.1.2", "code": "public class ExpressionCommandMessageProcessor extends AbstractMessageProcessor<Object> implements IntegrationPattern {\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n\t// Evaluates the Message payload expression as a command.\n\tObject processMessage(org.springframework.messaging.Message<?> message);\n}", "des": "A MessageProcessor implementation that expects an Expression or expressionString as the Message payload."}
{"index": 15827, "repo": "spring-integration-core-6.1.2", "code": "public class ExpressionEvaluatingMessageHandler extends AbstractMessageHandler {\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\tvoid setComponentType(String componentType);\n}", "des": "A MessageHandler that evaluates the provided Expression expecting a void return."}
{"index": 15828, "repo": "spring-integration-core-6.1.2", "code": "public class ExpressionEvaluatingMessageListProcessor extends AbstractExpressionEvaluator implements MessageListProcessor {\n\t// Processes the Message by evaluating the expression with that Message as the root object.\n\tObject process(Collection<? extends org.springframework.messaging.Message<?>> messages);\n\t// Set the result type expected from evaluation of the expression.\n\tvoid setExpectedType(Class<?> expectedType);\n}", "des": "A base class for aggregators that evaluates a SpEL expression with the message list as the root object within the evaluation context."}
{"index": 15829, "repo": "spring-integration-core-6.1.2", "code": "public class ExpressionEvaluatingRequestHandlerAdvice extends AbstractRequestHandlerAdvice {\n\tprotected org.springframework.expression.spel.support.StandardEvaluationContext createEvaluationContext();\n\t// Subclasses implement this method to apply behavior to the MessageHandler.\n\tprotected Object doInvoke(AbstractRequestHandlerAdvice.ExecutionCallback callback, Object target, org.springframework.messaging.Message<?> message);\n}", "des": "Used to advise MessageHandlers."}
{"index": 15830, "repo": "spring-integration-core-6.1.2", "code": "public class ExpressionEvaluatingRouter extends AbstractMappingMessageRouter {\n\t// Subclasses must implement this method to return the channel keys.\n\tprotected List<Object> getChannelKeys(org.springframework.messaging.Message<?> message);\n\tboolean isRunning();\n\t// Subclasses may implement this for initialization logic.\n\tfinal void onInit();\n\tvoid start();\n\tvoid stop();\n}", "des": "A Message Router implementation that evaluates the specified SpEL expression."}
{"index": 15831, "repo": "spring-integration-core-6.1.2", "code": "public final class ExpressionUtils extends Object {\n\t// Used to create a context with no BeanFactory, usually in tests.\n\tstatic org.springframework.expression.spel.support.SimpleEvaluationContext createSimpleEvaluationContext();\n\t// Obtains the context from the beanFactory if not null; emits a warning if the beanFactory is null.\n\tstatic org.springframework.expression.spel.support.SimpleEvaluationContext createSimpleEvaluationContext(org.springframework.beans.factory.BeanFactory beanFactory);\n}", "des": "Utility class with static methods for helping with evaluation of SpEL expressions."}
{"index": 15832, "repo": "spring-integration-core-6.1.2", "code": "public class FilterEndpointSpec extends ConsumerEndpointSpec<FilterEndpointSpec,MessageFilter> {\n\t// Specify a channel name where rejected Messages should be sent.\n\tFilterEndpointSpec discardChannel(String discardChannelName);\n\t// Specify a channel where rejected Messages should be sent.\n\tFilterEndpointSpec discardChannel(org.springframework.messaging.MessageChannel discardChannel);\n}", "des": "A ConsumerEndpointSpec implementation for the MessageFilter."}
{"index": 15833, "repo": "spring-integration-core-6.1.2", "code": "public class FilterFactoryBean extends AbstractStandardMessageHandlerFactoryBean {\n\t// MessageFilter is an ARPMH.\n\tprotected boolean canBeUsedDirect(AbstractMessageProducingHandler handler);\n\tprotected void checkForIllegalTarget(Object targetObject, String targetMethodName);\n\tprotected org.springframework.messaging.MessageHandler createExpressionEvaluatingHandler(org.springframework.expression.Expression expression);\n\tprotected MessageFilter createFilter(MessageSelector selector);\n}", "des": "Factory bean for creating a Message Filter."}
{"index": 15834, "repo": "spring-integration-core-6.1.2", "code": "public class FluxAggregatorMessageHandler extends AbstractMessageProducingHandler implements ManageableLifecycle {\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> message);\n\tboolean isRunning();\n}", "des": "The AbstractMessageProducingHandler implementation for aggregation logic based on Reactor's Flux.groupBy(java.util.function.Function<? super T, ? extends K>) and Flux.window(int) operators."}
{"index": 15835, "repo": "spring-integration-core-6.1.2", "code": "public class FromProtobufTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware {\n\t// Subclasses must implement this method to provide the transformation logic.\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n}", "des": "A Protocol Buffer transformer to instantiate Message objects from either byte[] if content type is application/x-protobuf or from String in case of application/json content type."}
{"index": 15836, "repo": "spring-integration-core-6.1.2", "code": "public class GatewayEndpointSpec extends ConsumerEndpointSpec<GatewayEndpointSpec,GatewayMessageHandler> {\n\t// Set an error channel.\n\tGatewayEndpointSpec errorChannel(String errorChannel);\n\t// Set an error channel.\n\tGatewayEndpointSpec errorChannel(org.springframework.messaging.MessageChannel errorChannel);\n\t// Set a reply channel.\n\tGatewayEndpointSpec replyChannel(String replyChannel);\n\t// Set a reply channel.\n\tGatewayEndpointSpec replyChannel(org.springframework.messaging.MessageChannel replyChannel);\n}", "des": "A ConsumerEndpointSpec implementation for a mid-flow GatewayMessageHandler."}
{"index": 15837, "repo": "spring-integration-core-6.1.2", "code": "public class GatewayProxyFactoryBean<T> extends AbstractEndpoint implements TrackableComponent, org.springframework.beans.factory.FactoryBean<T>, org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanClassLoaderAware, IntegrationManagement {\n\tvoid destroy();\n\tprotected Object doInvoke(org.aopalliance.intercept.MethodInvocation invocation, boolean runningOnCallerThread);\n\t// Subclasses must implement this method with the start behavior.\n\tprotected void doStart();\n}", "des": "Generates a proxy for the provided service interface to enable interaction with messaging components without application code being aware of them allowing for POJO-style interaction."}
{"index": 15838, "repo": "spring-integration-core-6.1.2", "code": "public class GatewayProxySpec extends Object {\n\t// Provide a reference to an implementation of Executor to use for any of the interface methods that have a Future return type.\n\tGatewayProxySpec asyncExecutor(Executor executor);\n\t// Specify a bean name for the target GatewayProxyFactoryBean.\n\tGatewayProxySpec beanName(String beanName);\n\t// Identifies a channel that error messages will be sent to if a failure occurs in the gateway's proxy invocation.\n\tGatewayProxySpec errorChannel(String errorChannelName);\n}", "des": "A builder for the GatewayProxyFactoryBean options when MessagingGateway on the service interface cannot be declared."}
{"index": 15839, "repo": "spring-integration-core-6.1.2", "code": "public interface HeaderChannelRegistry {\n\t// Converts the channel name back to a MessageChannel (if it is registered).\n\torg.springframework.messaging.MessageChannel channelNameToChannel(String name);\n\t// Converts the channel to a name (String).\n\tObject channelToChannelName(Object channel);\n\t// Converts the channel to a name (String).\n\tObject channelToChannelName(Object channel, long timeToLive);\n\t// Cancel the scheduled reap task and run immediately; then reschedule.\n\tvoid runReaper();\n\tint size();\n}", "des": "Implementations convert a channel to a name, retaining a reference to the channel keyed by the name."}
{"index": 15840, "repo": "spring-integration-core-6.1.2", "code": "public class HeaderEnricher extends IntegrationObjectSupport implements Transformer, IntegrationPattern {\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n\t// Subclasses may implement this for initialization logic.\n\tvoid onInit();\n\tvoid setDefaultOverwrite(boolean defaultOverwrite);\n}", "des": "A Transformer that adds statically configured header values to a Message."}
{"index": 15841, "repo": "spring-integration-core-6.1.2", "code": "public class HeaderEnricherSpec extends ConsumerEndpointSpec<HeaderEnricherSpec,MessageTransformingHandler> {\n\t// Add a IntegrationMessageHeaderAccessor.CORRELATION_ID header.\n\tHeaderEnricherSpec correlationId(Object correlationId);\n\t// Add a IntegrationMessageHeaderAccessor.CORRELATION_ID header.\n\tHeaderEnricherSpec correlationId(Object correlationId, Boolean overwrite);\n}", "des": "An IntegrationComponentSpec for a HeaderEnricher."}
{"index": 15842, "repo": "spring-integration-core-6.1.2", "code": "public class HeaderFilter extends IntegrationObjectSupport implements Transformer, IntegrationPattern {\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\tvoid setPatternMatch(boolean patternMatch);\n}", "des": "Transformer that removes Message headers."}
{"index": 15843, "repo": "spring-integration-core-6.1.2", "code": "public interface HeaderPropagationAware {\n\t// Add headers that will NOT be copied from the inbound message if the handler is configured to copy headers, instead of overwriting the existing set.\n\tvoid addNotPropagatedHeaders(String... headers);\n\t// Get the header names this handler doesn't propagate.\n\tCollection<String> getNotPropagatedHeaders();\n\t// Set headers that will NOT be copied from the inbound message if the handler is configured to copy headers.\n\tvoid setNotPropagatedHeaders(String... headers);\n}", "des": "MessageHandlers implementing this interface can propagate headers from an input message to an output message."}
{"index": 15844, "repo": "spring-integration-core-6.1.2", "code": "public class IdempotentReceiverInterceptor extends AbstractHandleMessageAdvice {\n\tprotected Object doInvoke(org.aopalliance.intercept.MethodInvocation invocation, org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Specify a channel where rejected Messages should be sent.\n\tvoid setDiscardChannel(org.springframework.messaging.MessageChannel discardChannel);\n}", "des": "The MethodInterceptor implementation for the Idempotent Receiver E.I."}
{"index": 15845, "repo": "spring-integration-core-6.1.2", "code": "@FunctionalInterface public interface InboundMessageMapper<T> {\n\t// Convert a provided object to the Message.\n\tdefault org.springframework.messaging.Message<?> toMessage(T object);\n\t// Convert a provided object to the Message and supply with headers if necessary and provided.\n\torg.springframework.messaging.Message<?> toMessage(T object, Map<String,Object> headers);\n}", "des": "Strategy interface for mapping from an Object to aMessage."}
{"index": 15846, "repo": "spring-integration-core-6.1.2", "code": "public interface IntegrationConsumer extends NamedComponent {\n\t// Return the consumer's handler.\n\torg.springframework.messaging.MessageHandler getHandler();\n\t// Return the input channel.\n\torg.springframework.messaging.MessageChannel getInputChannel();\n\t// Return the output channel (may be null).\n\torg.springframework.messaging.MessageChannel getOutputChannel();\n}", "des": "Message consumers implement this interface, the message handler within a consumer may or may not emit output messages."}
{"index": 15847, "repo": "spring-integration-core-6.1.2", "code": "@FunctionalInterface public interface IntegrationFlow {\n\t// The callback-based function to declare the chain of EIP-methods to configure an integration flow with the provided IntegrationFlowDefinition.\n\tvoid configure(IntegrationFlowDefinition<?> flow);\n\t// Populate the MessageChannel to the new IntegrationFlowBuilder chain, which becomes as a requestChannel for the Messaging Gateway(s) built on the provided service interface.\n\tstatic IntegrationFlowBuilder from(Class<?> serviceInterface);\n}", "des": "The main Integration DSL abstraction."}
{"index": 15848, "repo": "spring-integration-core-6.1.2", "code": "public abstract class IntegrationFlowAdapter extends Object implements IntegrationFlow, ManageableSmartLifecycle {\n\tprotected abstract IntegrationFlowDefinition<?> buildFlow();\n\t// The callback-based function to declare the chain of EIP-methods to configure an integration flow with the provided IntegrationFlowDefinition.\n\tfinal void configure(IntegrationFlowDefinition<?> flow);\n\tprotected IntegrationFlowBuilder from(Class<?> serviceInterface);\n}", "des": "The base Adapter class for the IntegrationFlow abstraction."}
{"index": 15849, "repo": "spring-integration-core-6.1.2", "code": "public interface IntegrationFlowContext {\n\t// Obtain an IntegrationFlowContext.IntegrationFlowRegistration for the IntegrationFlow associated with the provided flowId.\n\tIntegrationFlowContext.IntegrationFlowRegistration getRegistrationById(String flowId);\n\t// Provide the state of the mapping of integration flow names to their IntegrationFlowContext.IntegrationFlowRegistration instances.\n\tMap<String,IntegrationFlowContext.IntegrationFlowRegistration> getRegistry();\n}", "des": "A public API for dynamic (manual) registration of IntegrationFlows, not via standard bean registration phase."}
{"index": 15850, "repo": "spring-integration-core-6.1.2", "code": "public static interface IntegrationFlowContext.IntegrationFlowRegistrationBuilder {\n\t// Add an object which will be registered as an IntegrationFlow dependant bean in the application context.\n\tIntegrationFlowContext.IntegrationFlowRegistrationBuilder addBean(Object bean);\n\t// Add an object which will be registered as an IntegrationFlow dependant bean in the application context.\n\tIntegrationFlowContext.IntegrationFlowRegistrationBuilder addBean(String name, Object bean);\n}", "des": "A Builder pattern implementation for the options to register IntegrationFlow in the application context."}
{"index": 15851, "repo": "spring-integration-core-6.1.2", "code": "public abstract class IntegrationFlowDefinition<B extends IntegrationFlowDefinition<B>> extends BaseIntegrationFlowDefinition<B> {\n\t// Populate a MessageFilter with MethodInvokingSelector for the provided GenericSelector.\n\t<P> B filter(GenericSelector<P> genericSelector);\n\t// Populate a MessageFilter with MethodInvokingSelector for the provided GenericSelector.\n\t<P> B filter(GenericSelector<P> genericSelector, Consumer<FilterEndpointSpec> endpointConfigurer);\n}", "des": "The BaseIntegrationFlowDefinition extension for syntax sugar with generics for some type-based EIP-methods when an expected payload type is assumed from upstream."}
{"index": 15852, "repo": "spring-integration-core-6.1.2", "code": "public interface IntegrationManagement extends NamedComponent, org.springframework.beans.factory.DisposableBean {\n\tdefault void destroy();\n\tdefault String getManagedName();\n\tdefault String getManagedType();\n\t// Return the overrides.\n\tdefault IntegrationManagement.ManagementOverrides getOverrides();\n\t// Return this IntegrationManagement as its concrete type.\n\tdefault <T> T getThisAs();\n\t// Return whether logging is enabled.\n\tdefault boolean isLoggingEnabled();\n}", "des": "Base interface for Integration managed components."}
{"index": 15853, "repo": "spring-integration-core-6.1.2", "code": "public class IntegrationMessageHeaderAccessor extends org.springframework.messaging.support.MessageHeaderAccessor {\n\t// Return the acknowledgment callback, if present.\n\tAcknowledgmentCallback getAcknowledgmentCallback();\n\t// If the payload was created by a Closeable that needs to remain open until the payload is consumed, the resource will be added to this header.\n\tCloseable getCloseableResource();\n\tObject getCorrelationId();\n}", "des": "Adds standard SI Headers."}
{"index": 15854, "repo": "spring-integration-core-6.1.2", "code": "public abstract class IntegrationNode extends Object {\n\t// Add extra property to the node.\n\tvoid addProperties(Map<String,Object> props);\n\t// Add extra property to the node.\n\tvoid addProperty(String name, Object value);\n\tfinal String getComponentType();\n\tIntegrationPatternType.IntegrationPatternCategory getIntegrationPatternCategory();\n\tIntegrationPatternType getIntegrationPatternType();\n\tString getName();\n\tint getNodeId();\n\tMap<String,Object> getProperties();\n}", "des": "Base class for all nodes."}
{"index": 15855, "repo": "spring-integration-core-6.1.2", "code": "public enum IntegrationObservation extends Enum<IntegrationObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationObservation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationObservation[] values();\n}", "des": "The ObservationDocumentation implementation for Spring Integration infrastructure."}
{"index": 15856, "repo": "spring-integration-core-6.1.2", "code": "public static enum IntegrationObservation.GatewayTags extends Enum<IntegrationObservation.GatewayTags> implements io.micrometer.common.docs.KeyName {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationObservation.GatewayTags valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationObservation.GatewayTags[] values();\n}", "des": "Key names for message handler observations."}
{"index": 15857, "repo": "spring-integration-core-6.1.2", "code": "public static enum IntegrationObservation.HandlerTags extends Enum<IntegrationObservation.HandlerTags> implements io.micrometer.common.docs.KeyName {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationObservation.HandlerTags valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationObservation.HandlerTags[] values();\n}", "des": "Key names for message handler observations."}
{"index": 15858, "repo": "spring-integration-core-6.1.2", "code": "public static enum IntegrationObservation.ProducerTags extends Enum<IntegrationObservation.ProducerTags> implements io.micrometer.common.docs.KeyName {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationObservation.ProducerTags valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationObservation.ProducerTags[] values();\n}", "des": "Key names for message producer observations."}
{"index": 15859, "repo": "spring-integration-core-6.1.2", "code": "public enum IntegrationPatternType extends Enum<IntegrationPatternType> {\n\tIntegrationPatternType.IntegrationPatternCategory getPatternCategory();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationPatternType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationPatternType[] values();\n}", "des": "The Enterprise Integration Pattern types."}
{"index": 15860, "repo": "spring-integration-core-6.1.2", "code": "public static enum IntegrationPatternType.IntegrationPatternCategory extends Enum<IntegrationPatternType.IntegrationPatternCategory> {\n\tSet<IntegrationPatternType> getPatternTypes();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationPatternType.IntegrationPatternCategory valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationPatternType.IntegrationPatternCategory[] values();\n}", "des": "The Enterprise Integration Pattern categories."}
{"index": 15861, "repo": "spring-integration-core-6.1.2", "code": "public final class IntegrationProperties extends Object {\n\tstatic Properties defaults();\n\t// Return the value of CHANNELS_MAX_BROADCAST_SUBSCRIBERS option.\n\tint getChannelsMaxBroadcastSubscribers();\n\t// Return the value of CHANNELS_MAX_UNICAST_SUBSCRIBERS option.\n\tint getChannelsMaxUnicastSubscribers();\n\t// Build the bean property definition expression to resolve the value from Integration properties within the bean building phase.\n\tstatic String getExpressionFor(String key);\n}", "des": "Utility class to encapsulate infrastructure Integration properties constants and their default values."}
{"index": 15862, "repo": "spring-integration-core-6.1.2", "code": "public class IntegrationResourceHolder extends Object implements org.springframework.transaction.support.ResourceHolder {\n\t// Add attribute to this ResourceHolder instance.\n\tvoid addAttribute(String key, Object value);\n\t// Will return an immutable Map of current attributes.\n\tMap<String,Object> getAttributes();\n\torg.springframework.messaging.Message<?> getMessage();\n\tboolean isVoid();\n\tvoid reset();\n\tvoid setMessage(org.springframework.messaging.Message<?> message);\n\tvoid unbound();\n}", "des": "An implementation of the ResourceHolder which holds an instance of the current Message and the synchronization resource."}
{"index": 15863, "repo": "spring-integration-core-6.1.2", "code": "public final class IntegrationUtils extends Object {\n\t// Utility method for null-safe conversion from byte[] to String.\n\tstatic String bytesToString(byte[] bytes, String encoding);\n\tstatic org.springframework.core.convert.ConversionService getConversionService(org.springframework.beans.factory.BeanFactory beanFactory);\n}", "des": "General utility methods."}
{"index": 15864, "repo": "spring-integration-core-6.1.2", "code": "public final class JavaUtils extends Object {\n\t// Invoke BiConsumer.accept(Object, Object) with the arguments if the condition is true.\n\t<T1, T2> JavaUtils acceptIfCondition(boolean condition, T1 t1, T2 t2, BiConsumer<T1,T2> consumer);\n\t// Invoke Consumer.accept(Object) with the value if the condition is true.\n\t<T> JavaUtils acceptIfCondition(boolean condition, T value, Consumer<T> consumer);\n}", "des": "Chained utility methods to simplify some Java repetitive code."}
{"index": 15865, "repo": "spring-integration-core-6.1.2", "code": "public final class JsonHeaders extends Object {\n\t// Build a ResolvableType for provided class components.\n\tstatic org.springframework.core.ResolvableType buildResolvableType(Class<?> targetClass, Class<?> contentClass, Class<?> keyClass);\n\t// Build a ResolvableType for provided class components.\n\tstatic org.springframework.core.ResolvableType buildResolvableType(ClassLoader classLoader, Object targetClassValue, Object contentClassValue, Object keyClassValue);\n}", "des": "Pre-defined names and prefixes to be used for setting and/or retrieving JSON entries from/to Message Headers and other adapter, e.g."}
{"index": 15866, "repo": "spring-integration-core-6.1.2", "code": "public final class JsonObjectMapperProvider extends Object {\n\t// Returns true if a supported JSON implementation is on the class path.\n\tstatic boolean jsonAvailable();\n\t// Return an object mapper if available.\n\tstatic JsonObjectMapper<?,?> newInstance();\n}", "des": "Simple factory to provide JsonObjectMapper instances based on jackson-databind lib in the classpath."}
{"index": 15867, "repo": "spring-integration-core-6.1.2", "code": "public class JsonToObjectTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware {\n\t// Subclasses must implement this method to provide the transformation logic.\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n}", "des": "Transformer implementation that converts a JSON string payload into an instance of the provided target Class."}
{"index": 15868, "repo": "spring-integration-core-6.1.2", "code": "public interface LeaderEventPublisher {\n\t// Publish a failure to acquire event.\n\tvoid publishOnFailedToAcquire(Object source, Context context, String role);\n\t// Publish a granted event.\n\tvoid publishOnGranted(Object source, Context context, String role);\n\t// Publish a revoked event.\n\tvoid publishOnRevoked(Object source, Context context, String role);\n}", "des": "Interface for publishing leader based application events."}
{"index": 15869, "repo": "spring-integration-core-6.1.2", "code": "public interface ListenableMetadataStore extends ConcurrentMetadataStore {\n\t// Register a listener with the metadata store.\n\tvoid addListener(MetadataStoreListener callback);\n\t// Unregister a listener.\n\tvoid removeListener(MetadataStoreListener callback);\n}", "des": "ConcurrentMetadataStore with the ability of registering MetadataStoreListener callbacks, to be invoked when changes occur in the metadata store."}
{"index": 15870, "repo": "spring-integration-core-6.1.2", "code": "public class LoggingHandler extends AbstractMessageHandler {\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\tLoggingHandler.Level getLevel();\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\t// Set the logging LoggingHandler.Level to change the behavior at runtime.\n\tvoid setLevel(LoggingHandler.Level level);\n}", "des": "MessageHandler implementation that simply logs the Message or its payload depending on the value of the 'shouldLogFullMessage' or SpEL 'logExpression' property."}
{"index": 15871, "repo": "spring-integration-core-6.1.2", "code": "public interface MappingMessageRouterManagement {\n\tMap<String,String> getChannelMappings();\n\t// Provide a collection of channel names to which we have routed messages where the channel was not explicitly mapped.\n\tCollection<String> getDynamicChannelNames();\n\t// Remove a channel mapping for the given key if present.\n\tvoid removeChannelMapping(String key);\n\t// Provide mappings from channel keys to channel names.\n\tvoid replaceChannelMappings(Properties channelMappings);\n}", "des": "Exposes channel mapping operations when the router is proxied."}
{"index": 15872, "repo": "spring-integration-core-6.1.2", "code": "public class MapToObjectTransformer extends AbstractPayloadTransformer<Map<?,?>,Object> {\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\tprotected Object transformPayload(Map<?,?> payload);\n}", "des": "Will transform Map to an instance of Object."}
{"index": 15873, "repo": "spring-integration-core-6.1.2", "code": "public final class MessageBuilder<T> extends AbstractIntegrationMessageBuilder<T> {\n\torg.springframework.messaging.Message<T> build();\n\t// Copy the name-value pairs from the provided Map.\n\tMessageBuilder<T> copyHeaders(Map<String,?> headersToCopy);\n\t// Copy the name-value pairs from the provided Map.\n\tMessageBuilder<T> copyHeadersIfAbsent(Map<String,?> headersToCopy);\n}", "des": "The default message builder; creates immutable GenericMessages."}
{"index": 15874, "repo": "spring-integration-core-6.1.2", "code": "public record MessageChannelReference(String name) extends Record implements org.springframework.messaging.MessageChannel {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the name record component.\n\tString name();\n\tboolean send(org.springframework.messaging.Message<?> message);\n\tboolean send(org.springframework.messaging.Message<?> message, long timeout);\n}", "des": "An \"artificial\" MessageChannel implementation which will be unwrapped to the MessageChannel bean on the bean registration phase."}
{"index": 15875, "repo": "spring-integration-core-6.1.2", "code": "public interface MessageDispatcher {\n\t// Add a message handler.\n\tboolean addHandler(org.springframework.messaging.MessageHandler handler);\n\t// Dispatch the message.\n\tboolean dispatch(org.springframework.messaging.Message<?> message);\n\t// Return the current handler count.\n\tint getHandlerCount();\n\t// Remove a message handler.\n\tboolean removeHandler(org.springframework.messaging.MessageHandler handler);\n}", "des": "Strategy interface for dispatching messages to handlers."}
{"index": 15876, "repo": "spring-integration-core-6.1.2", "code": "public class MessageFilter extends AbstractReplyProducingPostProcessingMessageHandler implements DiscardingMessageHandler, ManageableLifecycle {\n\tprotected Object doHandleRequestMessage(org.springframework.messaging.Message<?> message);\n\tprotected void doInit();\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return the discard channel.\n\torg.springframework.messaging.MessageChannel getDiscardChannel();\n}", "des": "Message Handler that delegates to a MessageSelector."}
{"index": 15877, "repo": "spring-integration-core-6.1.2", "code": "public interface MessageGroup {\n\t// Add the message to this group.\n\tvoid add(org.springframework.messaging.Message<?> messageToAdd);\n\t// Query if the message can be added.\n\tboolean canAdd(org.springframework.messaging.Message<?> message);\n\tvoid clear();\n\t// Complete the group.\n\tvoid complete();\n\t// Return the condition for this group to consult with, e.g.\n\tString getCondition();\n\tObject getGroupId();\n\tlong getLastModified();\n\tint getLastReleasedMessageSequenceNumber();\n}", "des": "A group of messages that are correlated with each other and should be processed in the same context."}
{"index": 15878, "repo": "spring-integration-core-6.1.2", "code": "public interface MessageGroupFactory {\n\t// Create a MessageGroup instance based on the provided groupId.\n\tMessageGroup create(Object groupId);\n\t// Create a MessageGroup instance based on the provided groupId and with the messages for the group.\n\tMessageGroup create(Collection<? extends org.springframework.messaging.Message<?>> messages, Object groupId);\n}", "des": "The MessageGroup factory strategy."}
{"index": 15879, "repo": "spring-integration-core-6.1.2", "code": "public class MessageGroupQueue extends AbstractQueue<org.springframework.messaging.Message<?>> implements BlockingQueue<org.springframework.messaging.Message<?>> {\n\t// It is assumed that the 'storeLock' is being held by the caller, otherwise IllegalMonitorStateException may be thrown.\n\tprotected boolean doOffer(org.springframework.messaging.Message<?> message);\n}", "des": "A BlockingQueue that is backed by a MessageGroupStore."}
{"index": 15880, "repo": "spring-integration-core-6.1.2", "code": "public interface MessageGroupStore extends BasicMessageGroupStore {\n\t// Store messages with an association to a group id.\n\tvoid addMessagesToGroup(Object groupId, org.springframework.messaging.Message<?>... messages);\n\t// Completes this MessageGroup.\n\tvoid completeGroup(Object groupId);\n\t// Extract all expired groups (whose timestamp is older than the current time less the threshold provided) and call each of the registered callbacks on them in turn.\n\tint expireMessageGroups(long timeout);\n}", "des": "Defines additional storage operations on groups of messages linked by a group id."}
{"index": 15881, "repo": "spring-integration-core-6.1.2", "code": "public class MessageGroupStoreReaper extends Object implements Runnable, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.InitializingBean, org.springframework.context.SmartLifecycle {\n\tvoid afterPropertiesSet();\n\tvoid destroy();\n\tint getPhase();\n\tboolean isAutoStartup();\n\tfinal boolean isRunning();\n\t// Expire all message groups older than the timeout provided.\n\tvoid run();\n\tvoid setAutoStartup(boolean autoStartup);\n}", "des": "Convenient configurable component to allow explicit timed expiry of MessageGroup instances in a MessageGroupStore."}
{"index": 15882, "repo": "spring-integration-core-6.1.2", "code": "public class MessageHandlerChain extends AbstractMessageProducingHandler implements CompositeMessageHandler, ManageableLifecycle {\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return an unmodifiable list of handlers.\n\tList<org.springframework.messaging.MessageHandler> getHandlers();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n}", "des": "A composite MessageHandler implementation that invokes a chain of MessageHandler instances in order."}
{"index": 15883, "repo": "spring-integration-core-6.1.2", "code": "@IntegrationManagedResource public abstract class MessageHandlerSupport extends IntegrationObjectSupport implements TrackableComponent, Orderable, IntegrationManagement, IntegrationPattern {\n\tprotected TimerFacade buildSendTimer(boolean success, String exception);\n\tvoid destroy();\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n}", "des": "Base class for Message handling components that provides basic validation and error handling capabilities."}
{"index": 15884, "repo": "spring-integration-core-6.1.2", "code": "public class MessageKryoRegistrar extends AbstractKryoRegistrar {\n\tList<com.esotericsoftware.kryo.Registration> getRegistrations();\n\t// This method is invoked by the PojoCodec and applied to the Kryo instance whenever a new instance is created.\n\tvoid registerTypes(com.esotericsoftware.kryo.Kryo kryo);\n\t// Set the registration id for AdviceMessage.\n\tvoid setAdviceMessageRegistrationId(int adviceMessageRegistrationId);\n}", "des": "Registers common MessageHeader types and Serializers."}
{"index": 15885, "repo": "spring-integration-core-6.1.2", "code": "public interface MessageProducer {\n\t// Return the the output channel.\n\torg.springframework.messaging.MessageChannel getOutputChannel();\n\t// Specify the MessageChannel to which produced Messages should be sent.\n\tvoid setOutputChannel(org.springframework.messaging.MessageChannel outputChannel);\n\t// Specify the bean name of the MessageChannel to which produced Messages should be sent.\n\tdefault void setOutputChannelName(String outputChannel);\n}", "des": "Base interface for any component that is capable of sending messages to a MessageChannel."}
{"index": 15886, "repo": "spring-integration-core-6.1.2", "code": "public abstract class MessageProducerSpec<S extends MessageProducerSpec<S,P>,P extends MessageProducerSupport> extends IntegrationComponentSpec<S,P> {\n\tS autoStartup(boolean autoStartup);\n\t// Configure the bean name of the MessageChannel to which error messages will be sent.\n\tS errorChannel(String errorChannel);\n\t// Configure the MessageChannel to which error messages will be sent.\n\tS errorChannel(org.springframework.messaging.MessageChannel errorChannel);\n}", "des": "An IntegrationComponentSpec for MessageProducers."}
{"index": 15887, "repo": "spring-integration-core-6.1.2", "code": "public class MessagePublishingErrorHandler extends ErrorMessagePublisher implements org.springframework.util.ErrorHandler {\n\t// Return the default error channel for this error handler.\n\torg.springframework.messaging.MessageChannel getDefaultErrorChannel();\n\tfinal void handleError(Throwable ex);\n\tvoid setDefaultErrorChannel(org.springframework.messaging.MessageChannel defaultErrorChannel);\n}", "des": "ErrorHandler implementation that sends an ErrorMessage to a MessageChannel."}
{"index": 15888, "repo": "spring-integration-core-6.1.2", "code": "public class MessageSelectorChain extends Object implements MessageSelector {\n\t// Pass the message through the selector chain.\n\tfinal boolean accept(org.springframework.messaging.Message<?> message);\n\t// Add a selector to the chain at the specified index.\n\tvoid add(int index, MessageSelector selector);\n\t// Add a selector to the end of the chain.\n\tvoid add(MessageSelector selector);\n\t// Initialize the selector chain.\n\tvoid setSelectors(List<MessageSelector> selectors);\n}", "des": "A message selector implementation that passes incoming messages through a chain of selectors."}
{"index": 15889, "repo": "spring-integration-core-6.1.2", "code": "@FunctionalInterface public interface MessageSource<T> extends IntegrationPattern {\n\t// Return a pattern type this component implements.\n\tdefault IntegrationPatternType getIntegrationPatternType();\n\t// Retrieve the next available message from this source.\n\torg.springframework.messaging.Message<T> receive();\n}", "des": "Base interface for any source of Messages that can be polled."}
{"index": 15890, "repo": "spring-integration-core-6.1.2", "code": "@IntegrationManagedResource public interface MessageSourceManagement {\n\t// Return the max fetch size.\n\tint getMaxFetchSize();\n\t// Set the maximum number of objects the source should fetch if it is necessary to fetch objects.\n\tvoid setMaxFetchSize(int maxFetchSize);\n}", "des": "Message sources implementing this interface have additional properties that can be set or examined using JMX."}
{"index": 15891, "repo": "spring-integration-core-6.1.2", "code": "@FunctionalInterface public interface MessageSourceMutator extends ReceiveMessageAdvice {\n\t// Subclasses can take actions based on the result of the Joinpoint.proceed(); e.g.\n\tdefault org.springframework.messaging.Message<?> afterReceive(org.springframework.messaging.Message<?> result, Object source);\n\t// Subclasses can take actions based on the result of the poll; e.g.\n\torg.springframework.messaging.Message<?> afterReceive(org.springframework.messaging.Message<?> result, MessageSource<?> source);\n}", "des": "A ReceiveMessageAdvice extension that can mutate a MessageSource before and/or after MessageSource.receive() is called."}
{"index": 15892, "repo": "spring-integration-core-6.1.2", "code": "public interface MessageStore {\n\t// Put the provided Message into the MessageStore.\n\t<T> org.springframework.messaging.Message<T> addMessage(org.springframework.messaging.Message<T> message);\n\torg.springframework.messaging.Message<?> getMessage(UUID id);\n\t// Optional attribute giving the number of messages in the store.\n\tlong getMessageCount();\n\t// Return a MessageMetadata for the Message by provided id.\n\tMessageMetadata getMessageMetadata(UUID id);\n}", "des": "Strategy interface for storing and retrieving messages."}
{"index": 15893, "repo": "spring-integration-core-6.1.2", "code": "public class MessageTransformingHandler extends AbstractReplyProducingMessageHandler implements ManageableLifecycle {\n\t// Add header patterns (\"xxx*\", \"*xxx\", \"*xxx*\" or \"xxx*yyy\") that will NOT be copied from the inbound message if AbstractMessageProducingHandler.shouldCopyRequestHeaders() is true, instead of overwriting the existing set.\n\tvoid addNotPropagatedHeaders(String... headers);\n\tprotected void doInit();\n}", "des": "A reply-producing MessageHandler that delegates to a Transformer instance to modify the received Message and sends the result to its output channel."}
{"index": 15894, "repo": "spring-integration-core-6.1.2", "code": "public final class MessagingAnnotationUtils extends Object {\n\t// Return the EndpointId.value() property, if present.\n\tstatic String endpointIdValue(Method method);\n\t// Return the EndpointId.value() property, if present.\n\tstatic String endpointIdValue(org.springframework.core.annotation.MergedAnnotations mergedAnnotations);\n\tstatic Method findAnnotatedMethod(Object target, Class<? extends Annotation> annotationType);\n}", "des": "Utility methods to support annotation processing."}
{"index": 15895, "repo": "spring-integration-core-6.1.2", "code": "public abstract class MessagingGatewaySpec<S extends MessagingGatewaySpec<S,G>,G extends MessagingGatewaySupport> extends IntegrationComponentSpec<S,G> {\n\t// An auto-startup flag.\n\tS autoStartup(boolean autoStartup);\n\t// An error channel name to use.\n\tS errorChannel(String errorChannelName);\n\t// An error channel to use.\n\tS errorChannel(org.springframework.messaging.MessageChannel errorChannel);\n}", "des": "An IntegrationComponentSpec for MessagingGatewaySupports."}
{"index": 15896, "repo": "spring-integration-core-6.1.2", "code": "public class MessagingMethodInvokerHelper extends AbstractExpressionEvaluator implements ManageableLifecycle {\n\tboolean isAsync();\n\tboolean isRunning();\n\tObject process(Collection<org.springframework.messaging.Message<?>> messages, Map<String,Object> headers);\n\tObject process(org.springframework.messaging.Message<?> message);\n\t// Specify a BeanFactory in order to enable resolution via @beanName in the expression.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}", "des": "A helper class for processors that invoke a method on a target Object using a combination of message payload(s) and headers as arguments."}
{"index": 15897, "repo": "spring-integration-core-6.1.2", "code": "@ManagedResource public interface MetadataStore {\n\t// Reads a value for the given key from this MetadataStore.\n\tString get(String key);\n\t// Writes a key value pair to this MetadataStore.\n\tvoid put(String key, String value);\n\t// Remove a value for the given key from this MetadataStore.\n\tString remove(String key);\n}", "des": "Strategy interface for storing metadata from certain adapters to avoid duplicate delivery of messages, for example."}
{"index": 15898, "repo": "spring-integration-core-6.1.2", "code": "public interface MetadataStoreListener {\n\t// Invoked when a key is added to the store.\n\tvoid onAdd(String key, String value);\n\t// Invoked when a key is removed from the store.\n\tvoid onRemove(String key, String oldValue);\n\t// Invoked when a key is updated into the store.\n\tvoid onUpdate(String key, String newValue);\n}", "des": "A callback to be invoked whenever a value changes in the data store."}
{"index": 15899, "repo": "spring-integration-core-6.1.2", "code": "public abstract class MetadataStoreListenerAdapter extends Object implements MetadataStoreListener {\n\t// Invoked when a key is added to the store.\n\tvoid onAdd(String key, String value);\n\t// Invoked when a key is removed from the store.\n\tvoid onRemove(String key, String oldValue);\n\t// Invoked when a key is updated into the store.\n\tvoid onUpdate(String key, String newValue);\n}", "des": "Base implementation for a MetadataStoreListener."}
{"index": 15900, "repo": "spring-integration-core-6.1.2", "code": "public class MetadataStoreSelector extends Object implements MessageSelector {\n\tboolean accept(org.springframework.messaging.Message<?> message);\n\t// Fluent version of setCompareValues(BiPredicate).\n\tMetadataStoreSelector compareValues(BiPredicate<String,String> compareValues);\n\t// Set a BiPredicate to compare old and new values in the metadata store for the key.\n\tvoid setCompareValues(BiPredicate<String,String> compareValues);\n}", "des": "The MessageSelector implementation using a ConcurrentMetadataStore and MessageProcessor."}
{"index": 15901, "repo": "spring-integration-core-6.1.2", "code": "public class MethodInvokingMessageListProcessor<T> extends AbstractExpressionEvaluator implements ManageableLifecycle {\n\tboolean isRunning();\n\tT process(Collection<org.springframework.messaging.Message<?>> messages, Map<String,Object> aggregateHeaders);\n\t// Specify a BeanFactory in order to enable resolution via @beanName in the expression.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}", "des": "A MessageListProcessor implementation that invokes a method on a target POJO."}
{"index": 15902, "repo": "spring-integration-core-6.1.2", "code": "public class MethodInvokingMessageProcessor<T> extends AbstractMessageProcessor<T> implements ManageableLifecycle {\n\tboolean isAsync();\n\tboolean isRunning();\n\t// Process the Message and return a value (or null).\n\tT processMessage(org.springframework.messaging.Message<?> message);\n\t// Specify a BeanFactory in order to enable resolution via @beanName in the expression.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}", "des": "A MessageProcessor implementation that invokes a method on a target Object."}
{"index": 15903, "repo": "spring-integration-core-6.1.2", "code": "public class MethodInvokingRouter extends AbstractMappingMessageRouter {\n\t// Subclasses must implement this method to return the channel keys.\n\tprotected List<Object> getChannelKeys(org.springframework.messaging.Message<?> message);\n\tboolean isRunning();\n\t// Subclasses may implement this for initialization logic.\n\tfinal void onInit();\n\tvoid start();\n\tvoid stop();\n}", "des": "A Message Router that invokes the specified method on the given object."}
{"index": 15904, "repo": "spring-integration-core-6.1.2", "code": "public interface MetricsCaptor {\n\t// Create a counter builder for a counter with the provided name.\n\tMetricsCaptor.CounterBuilder counterBuilder(String name);\n\t// Create a gauge builder for a gauge with the provided parameters.\n\tMetricsCaptor.GaugeBuilder gaugeBuilder(String name, Object obj, ToDoubleFunction<Object> f);\n\t// Remove a meter facade.\n\tdefault MeterFacade removeMeter(MeterFacade facade);\n\t// Start a sample collection.\n\tSampleFacade start();\n}", "des": "A metrics facade that delegates to a concrete implementation."}
{"index": 15905, "repo": "spring-integration-core-6.1.2", "code": "public static interface MetricsCaptor.CounterBuilder {\n\t// Build the counter.\n\tCounterFacade build();\n\t// Add the description.\n\tMetricsCaptor.CounterBuilder description(String desc);\n\t// Add a tag.\n\tMetricsCaptor.CounterBuilder tag(String key, String value);\n}", "des": "A builder for a counter."}
{"index": 15906, "repo": "spring-integration-core-6.1.2", "code": "public static interface MetricsCaptor.GaugeBuilder {\n\t// Build the gauge.\n\tGaugeFacade build();\n\t// Add the description.\n\tMetricsCaptor.GaugeBuilder description(String desc);\n\t// Add a tag.\n\tMetricsCaptor.GaugeBuilder tag(String key, String value);\n}", "des": "A builder for a gauge."}
{"index": 15907, "repo": "spring-integration-core-6.1.2", "code": "public static interface MetricsCaptor.TimerBuilder {\n\t// Build the timer.\n\tTimerFacade build();\n\t// Add the description.\n\tMetricsCaptor.TimerBuilder description(String desc);\n\t// Add a tag.\n\tMetricsCaptor.TimerBuilder tag(String key, String value);\n}", "des": "A builder for a timer."}
{"index": 15908, "repo": "spring-integration-core-6.1.2", "code": "public class MicrometerMetricsCaptor extends Object implements MetricsCaptor {\n\t// Create a counter builder for a counter with the provided name.\n\tMetricsCaptor.CounterBuilder counterBuilder(String name);\n\t// Create a gauge builder for a gauge with the provided parameters.\n\tMetricsCaptor.GaugeBuilder gaugeBuilder(String name, Object obj, ToDoubleFunction<Object> f);\n\tio.micrometer.core.instrument.MeterRegistry getMeterRegistry();\n\t// Remove a meter facade.\n\tMeterFacade removeMeter(MeterFacade facade);\n}", "des": "The Micrometer implementation of MetricsCaptor."}
{"index": 15909, "repo": "spring-integration-core-6.1.2", "code": "public final class MutableMessageBuilder<T> extends AbstractIntegrationMessageBuilder<T> {\n\torg.springframework.messaging.Message<T> build();\n\t// Copy the name-value pairs from the provided Map.\n\tAbstractIntegrationMessageBuilder<T> copyHeaders(Map<String,?> headersToCopy);\n\t// Copy the name-value pairs from the provided Map.\n\tAbstractIntegrationMessageBuilder<T> copyHeadersIfAbsent(Map<String,?> headersToCopy);\n}", "des": "Specialized message builder that can be used within a component to avoid the overhead of having to build multiple messages for mutations within that component."}
{"index": 15910, "repo": "spring-integration-core-6.1.2", "code": "@IntegrationManagedResource public class NullChannel extends Object implements org.springframework.messaging.PollableChannel, org.springframework.beans.factory.BeanNameAware, IntegrationManagement, IntegrationPattern {\n\tvoid destroy();\n\tString getBeanName();\n\tString getComponentName();\n\tString getComponentType();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n\t// Return the overrides.\n\tIntegrationManagement.ManagementOverrides getOverrides();\n}", "des": "A channel implementation that essentially behaves like \"/dev/null\"."}
{"index": 15911, "repo": "spring-integration-core-6.1.2", "code": "public class ObjectToJsonTransformer extends AbstractTransformer {\n\t// Subclasses must implement this method to provide the transformation logic.\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Set the content-type header value.\n\tvoid setContentType(String contentType);\n}", "des": "Transformer implementation that converts a payload instance into a JSON string representation."}
{"index": 15912, "repo": "spring-integration-core-6.1.2", "code": "public interface OrderlyShutdownCapable {\n\t// Called after normal shutdown of schedulers, executors etc, and after the shutdown delay has elapsed, but before any forced shutdown of any remaining active scheduler/executor threads.Can optionally return the number of active messages still in process.\n\tint afterShutdown();\n\t// Called before shutdown begins.\n\tint beforeShutdown();\n}", "des": "Interface for components that wish to be considered for an orderly shutdown using management interfaces."}
{"index": 15913, "repo": "spring-integration-core-6.1.2", "code": "public class PartialSuccessException extends org.springframework.messaging.MessagingException {\n\t// See PartialSuccessException(Message, String, Throwable, Collection, Collection).\n\tCollection<?> getDerivedInput();\n\t// Convenience version of getDerivedInput() to avoid casting.\n\t<T> Collection<T> getDerivedInput(Class<T> clazz);\n\t// See PartialSuccessException(Message, String, Throwable, Collection, Collection).\n\tCollection<?> getPartialResults();\n}", "des": "A MessagingException thrown when a non-transactional operation is performing multiple updates from a single message, e.g."}
{"index": 15914, "repo": "spring-integration-core-6.1.2", "code": "public class PartitionedChannel extends AbstractExecutorChannel {\n\tvoid destroy();\n\tprotected PartitionedDispatcher getDispatcher();\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\t// Specify whether the channel's dispatcher should have failover enabled.\n\tvoid setFailover(boolean failover);\n\t// Provide a LoadBalancingStrategy for the PartitionedDispatcher.\n\tvoid setLoadBalancingStrategy(LoadBalancingStrategy loadBalancingStrategy);\n}", "des": "An AbstractExecutorChannel implementation for partitioned message dispatching."}
{"index": 15915, "repo": "spring-integration-core-6.1.2", "code": "public class PartitionedDispatcher extends AbstractDispatcher {\n\t// Dispatch the message.\n\tboolean dispatch(org.springframework.messaging.Message<?> message);\n\t// Provide a ErrorHandler for wrapping partition Executor to the ErrorHandlingTaskExecutor.\n\tvoid setErrorHandler(org.springframework.util.ErrorHandler errorHandler);\n\t// Specify whether partition dispatchers should have failover enabled.\n\tvoid setFailover(boolean failover);\n}", "des": "An AbstractDispatcher implementation for distributing messages to dedicated threads according to the key determined by the provided function against the message to dispatch."}
{"index": 15916, "repo": "spring-integration-core-6.1.2", "code": "public final class PatternMatchUtils extends Object {\n\t// Pattern match against the supplied patterns; also supports negated ('!') patterns.\n\tstatic Boolean smartMatch(String str, String... patterns);\n\t// Pattern match against the supplied patterns ignoring case; also supports negated ('!') patterns.\n\tstatic Boolean smartMatchIgnoreCase(String str, String... patterns);\n}", "des": "Utility methods for pattern matching."}
{"index": 15917, "repo": "spring-integration-core-6.1.2", "code": "public interface Pausable extends ManageableLifecycle {\n\t// Check if the endpoint is paused.\n\tdefault boolean isPaused();\n\t// Pause the endpoint.\n\tvoid pause();\n\t// Resume the endpoint if paused.\n\tvoid resume();\n}", "des": "Endpoints implementing this interface can be paused/resumed."}
{"index": 15918, "repo": "spring-integration-core-6.1.2", "code": "public class PayloadTypeConvertingTransformer<T,U> extends AbstractPayloadTransformer<T,U> {\n\tprotected final void doSetConverter(org.springframework.core.convert.converter.Converter<T,U> converter);\n\t// Get the configured Converter.\n\tprotected org.springframework.core.convert.converter.Converter<T,U> getConverter();\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n}", "des": "Transformer that converts the inbound payload to an object by delegating to a Converter<Object, Object>."}
{"index": 15919, "repo": "spring-integration-core-6.1.2", "code": "public class PojoCodec extends AbstractKryoCodec {\n\t// Subclasses implement this to configure the kryo instance.\n\tprotected void configureKryoInstance(com.esotericsoftware.kryo.Kryo kryo);\n\t// Subclasses implement this method to decode with Kryo.\n\tprotected <T> T doDecode(com.esotericsoftware.kryo.Kryo kryo, com.esotericsoftware.kryo.io.Input input, Class<T> type);\n}", "des": "Kryo Codec that can encode and decode arbitrary types."}
{"index": 15920, "repo": "spring-integration-core-6.1.2", "code": "public final class PollerFactory extends Object {\n\t// Create a PollerSpec based on the provided cron expression.\n\tPollerSpec cron(String cronExpression);\n\t// Create a PollerSpec based on the provided cron expression and TimeZone.\n\tPollerSpec cron(String cronExpression, TimeZone timeZone);\n\t// Create a PollerSpec based on the provided fixed delay period.\n\tPollerSpec fixedDelay(long period);\n}", "des": "An Adapter class for the Pollers factory."}
{"index": 15921, "repo": "spring-integration-core-6.1.2", "code": "public final class Pollers extends Object {\n\t// Create a PollerSpec based on the provided cron expression.\n\tstatic PollerSpec cron(String cronExpression);\n\t// Create a PollerSpec based on the provided cron expression and TimeZone.\n\tstatic PollerSpec cron(String cronExpression, TimeZone timeZone);\n\t// Create a PollerSpec based on the provided fixed delay period.\n\tstatic PollerSpec fixedDelay(long period);\n}", "des": "A utility class to provide PollerSpecs for PollerMetadata configuration variants."}
{"index": 15922, "repo": "spring-integration-core-6.1.2", "code": "public final class PollerSpec extends IntegrationComponentSpec<PollerSpec,PollerMetadata> implements ComponentsRegistration {\n\t// Specify AOP Advices for the pollingTask.\n\tPollerSpec advice(org.aopalliance.aop.Advice... advice);\n\t// Specify a bean name for the MessageChannel to use for sending error message in case of polling failures.\n\tPollerSpec errorChannel(String errorChannelName);\n}", "des": "An IntegrationComponentSpec for PollerMetadatas."}
{"index": 15923, "repo": "spring-integration-core-6.1.2", "code": "public class PollingConsumer extends AbstractPollingEndpoint implements IntegrationConsumer {\n\t// Subclasses must implement this method with the start behavior.\n\tprotected void doStart();\n\t// Subclasses must implement this method with the stop behavior.\n\tprotected void doStop();\n\t// Return the consumer's handler.\n\torg.springframework.messaging.MessageHandler getHandler();\n\t// Return the input channel.\n\torg.springframework.messaging.MessageChannel getInputChannel();\n}", "des": "Message Endpoint that connects any MessageHandler implementation to a PollableChannel."}
{"index": 15924, "repo": "spring-integration-core-6.1.2", "code": "public interface Pool<T> {\n\t// Close the pool; returned items will be destroyed.\n\tdefault void close();\n\t// Return the number of allocated items that are currently checked out of the pool.\n\tint getActiveCount();\n\t// Return the current count of allocated items (in use and idle).\n\tint getAllocatedCount();\n\t// Return the number of items that have been allocated but are not currently in use.\n\tint getIdleCount();\n\t// Obtain an item from the pool.\n\tT getItem();\n}", "des": "Represents a pool of items."}
{"index": 15925, "repo": "spring-integration-core-6.1.2", "code": "public class PriorityChannel extends QueueChannel {\n\t// Subclasses must implement this method.\n\tprotected org.springframework.messaging.Message<?> doReceive(long timeout);\n\t// Subclasses must implement this method.\n\tprotected boolean doSend(org.springframework.messaging.Message<?> message, long timeout);\n\t// Obtain the remaining capacity of this channel.\n\tint getRemainingCapacity();\n}", "des": "A message channel that prioritizes messages based on a Comparator."}
{"index": 15926, "repo": "spring-integration-core-6.1.2", "code": "public class PropertiesPersistingMetadataStore extends Object implements ConcurrentMetadataStore, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, Closeable, Flushable {\n\tvoid afterPropertiesSet();\n\tvoid close();\n\tvoid destroy();\n\tvoid flush();\n\t// Reads a value for the given key from this MetadataStore.\n\tString get(String key);\n\t// Writes a key value pair to this MetadataStore.\n\tvoid put(String key, String value);\n}", "des": "Properties file-based implementation of MetadataStore."}
{"index": 15927, "repo": "spring-integration-core-6.1.2", "code": "public class PublishSubscribeChannel extends AbstractExecutorChannel implements BroadcastCapableChannel {\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\tprotected BroadcastingDispatcher getDispatcher();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n\t// Callback method for initialization.\n\tfinal void onInit();\n}", "des": "A channel that sends Messages to each of its subscribers."}
{"index": 15928, "repo": "spring-integration-core-6.1.2", "code": "public class QueueChannel extends AbstractPollableChannel implements QueueChannelOperations {\n\t// Remove all Messages from this channel.\n\tList<org.springframework.messaging.Message<?>> clear();\n\tvoid destroy();\n\t// Subclasses must implement this method.\n\tprotected org.springframework.messaging.Message<?> doReceive(long timeout);\n\t// Subclasses must implement this method.\n\tprotected boolean doSend(org.springframework.messaging.Message<?> message, long timeout);\n}", "des": "Simple implementation of a message channel."}
{"index": 15929, "repo": "spring-integration-core-6.1.2", "code": "public interface QueueChannelOperations {\n\t// Remove all Messages from this channel.\n\tList<org.springframework.messaging.Message<?>> clear();\n\t// Obtain the current number of queued Messages in this channel.\n\tint getQueueSize();\n\t// Obtain the remaining capacity of this channel.\n\tint getRemainingCapacity();\n\t// Remove any Messages that are not accepted by the provided selector.\n\tList<org.springframework.messaging.Message<?>> purge(MessageSelector selector);\n}", "des": "Operations available on a channel that has queuing semantics."}
{"index": 15930, "repo": "spring-integration-core-6.1.2", "code": "public class RateLimiterRequestHandlerAdvice extends AbstractRequestHandlerAdvice {\n\t// Subclasses implement this method to apply behavior to the MessageHandler.\n\tprotected Object doInvoke(AbstractRequestHandlerAdvice.ExecutionCallback callback, Object target, org.springframework.messaging.Message<?> message);\n\t// Obtain the metrics from the rate limiter.\n\tio.github.resilience4j.ratelimiter.RateLimiter.Metrics getMetrics();\n}", "des": "An AbstractRequestHandlerAdvice extension for a rate limiting to service method calls."}
{"index": 15931, "repo": "spring-integration-core-6.1.2", "code": "public class ReactiveMessageSourceProducer extends MessageProducerSupport {\n\t// Take no action by default.\n\tprotected void doStart();\n\t// Configure a Duration to delay next pull request when the previous one was empty.\n\tvoid setDelayWhenEmpty(Duration delayWhenEmpty);\n}", "des": "The MessageProducerSupport to adapt a provided MessageSource into a Flux and let it be subscribed in the MessageProducerSupport.subscribeToPublisher(org.reactivestreams.Publisher<? extends org.springframework.messaging.Message<?>>)."}
{"index": 15932, "repo": "spring-integration-core-6.1.2", "code": "public class ReactiveStreamsConsumer extends AbstractEndpoint implements IntegrationConsumer {\n\t// Subclasses must implement this method with the start behavior.\n\tprotected void doStart();\n\t// Subclasses must implement this method with the stop behavior.\n\tprotected void doStop();\n\t// Return the consumer's handler.\n\torg.springframework.messaging.MessageHandler getHandler();\n\t// Return the input channel.\n\torg.springframework.messaging.MessageChannel getInputChannel();\n}", "des": "An AbstractEndpoint implementation for Reactive Streams subscription into an input channel and reactive consumption of messages from that channel."}
{"index": 15933, "repo": "spring-integration-core-6.1.2", "code": "@FunctionalInterface public interface ReceiveMessageAdvice extends org.aopalliance.intercept.MethodInterceptor {\n\t// Subclasses can take actions based on the result of the Joinpoint.proceed(); e.g.\n\torg.springframework.messaging.Message<?> afterReceive(org.springframework.messaging.Message<?> result, Object source);\n\t// Subclasses can decide whether to Joinpoint.proceed() or not.\n\tdefault boolean beforeReceive(Object source);\n\tdefault Object invoke(org.aopalliance.intercept.MethodInvocation invocation);\n}", "des": "An AOP advice to perform hooks before and/or after a receive() contract is called."}
{"index": 15934, "repo": "spring-integration-core-6.1.2", "code": "public class RecipientListRouter extends AbstractMessageRouter implements RecipientListRouterManagement {\n\t// Add a recipient with channelName.\n\tvoid addRecipient(String channelName);\n\t// Add a recipient with channelName and expression.\n\tvoid addRecipient(String channelName, String selectorExpression);\n\tvoid addRecipient(String channelName, MessageSelector selector);\n\tvoid addRecipient(org.springframework.messaging.MessageChannel channel);\n}", "des": "<recipient-list-router id=\"simpleRouter\" input-channel=\"routingChannelA\"> <recipient channel=\"channel1\"/> <recipient channel=\"channel2\"/> </recipient-list-router>"}
{"index": 15935, "repo": "spring-integration-core-6.1.2", "code": "@ManagedResource @IntegrationManagedResource public interface RecipientListRouterManagement {\n\t// Add a recipient with channelName.\n\tvoid addRecipient(String channelName);\n\t// Add a recipient with channelName and expression.\n\tvoid addRecipient(String channelName, String selectorExpression);\n\tCollection<?> getRecipients();\n\t// Remove all recipients that match the channelName.\n\tint removeRecipient(String channelName);\n}", "des": "Exposes adding/removing individual recipients operations for RecipientListRouter."}
{"index": 15936, "repo": "spring-integration-core-6.1.2", "code": "public class RecipientListRouterSpec extends AbstractRouterSpec<RecipientListRouterSpec,RecipientListRouter> {\n\t// Adds a recipient channel that is always selected.\n\tRecipientListRouterSpec recipient(String channelName);\n\t// Adds a recipient channel that will be selected if the expression evaluates to 'true'.\n\tRecipientListRouterSpec recipient(String channelName, String expression);\n}", "des": "An AbstractRouterSpec for a RecipientListRouter."}
{"index": 15937, "repo": "spring-integration-core-6.1.2", "code": "public class ReloadableResourceBundleExpressionSource extends Object implements ExpressionSource, org.springframework.context.ResourceLoaderAware {\n\t// Clear the resource bundle cache.\n\tvoid clearCache();\n\t// Resolves the given key in the retrieved bundle files to an Expression.\n\torg.springframework.expression.Expression getExpression(String key, Locale locale);\n}", "des": "ExpressionSource implementation that accesses resource bundles using specified basenames."}
{"index": 15938, "repo": "spring-integration-core-6.1.2", "code": "public class ReplyProducingMessageHandlerWrapper extends AbstractReplyProducingMessageHandler implements ManageableLifecycle {\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n\t// Subclasses must implement this method to handle the request Message.\n\tprotected Object handleRequestMessage(org.springframework.messaging.Message<?> requestMessage);\n\tboolean isRunning();\n\tvoid start();\n\tvoid stop();\n}", "des": "The AbstractReplyProducingMessageHandler wrapper around raw MessageHandler for request-reply scenarios, e.g."}
{"index": 15939, "repo": "spring-integration-core-6.1.2", "code": "public interface RequestReplyHeaderMapper<T> {\n\t// Map from the given MessageHeaders to the specified reply target.\n\tvoid fromHeadersToReply(org.springframework.messaging.MessageHeaders headers, T target);\n\t// Map from the given MessageHeaders to the specified request target.\n\tvoid fromHeadersToRequest(org.springframework.messaging.MessageHeaders headers, T target);\n\t// Map from the given reply object to abstracted MessageHeaders.\n\tMap<String,Object> toHeadersFromReply(T source);\n}", "des": "Request/Reply strategy interface for mapping MessageHeaders to and from other types of objects."}
{"index": 15940, "repo": "spring-integration-core-6.1.2", "code": "public class ResequencingMessageHandler extends AbstractCorrelatingMessageHandler {\n\t// Allows you to provide additional logic that needs to be performed after the MessageGroup was released.\n\tprotected void afterRelease(MessageGroup messageGroup, Collection<org.springframework.messaging.Message<?>> completedMessages);\n}", "des": "Resequencer specific implementation of AbstractCorrelatingMessageHandler."}
{"index": 15941, "repo": "spring-integration-core-6.1.2", "code": "public class RouterSpec<K,R extends AbstractMappingMessageRouter> extends AbstractRouterSpec<RouterSpec<K,R>,R> {\n\t// When true (default), if a resolved channel key does not exist in the channel map, the key itself is used as the channel name, which we will attempt to resolve to a channel.\n\tRouterSpec<K,R> channelKeyFallback(boolean channelKeyFallback);\n\tRouterSpec<K,R> channelMapping(K key, String channelName);\n}", "des": "The AbstractRouterSpec for an AbstractMappingMessageRouter."}
{"index": 15942, "repo": "spring-integration-core-6.1.2", "code": "public class ScatterGatherHandler extends AbstractReplyProducingMessageHandler implements ManageableLifecycle {\n\tprotected void doInit();\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n}", "des": "The MessageHandler implementation for the Scatter-Gather EIP pattern."}
{"index": 15943, "repo": "spring-integration-core-6.1.2", "code": "public class ScatterGatherSpec extends ConsumerEndpointSpec<ScatterGatherSpec,ScatterGatherHandler> {\n\t// Specify a MessageChannel bean name for async error processing.\n\tScatterGatherSpec errorChannel(String errorChannel);\n\t// Specify a MessageChannel (optional) which is used internally in the ScatterGatherHandler for gathering (aggregate) results for scattered requests.\n\tScatterGatherSpec gatherChannel(org.springframework.messaging.MessageChannel gatherChannel);\n}", "des": "A GenericEndpointSpec extension for the ScatterGatherHandler."}
{"index": 15944, "repo": "spring-integration-core-6.1.2", "code": "public class ServiceActivatorFactoryBean extends AbstractStandardMessageHandlerFactoryBean {\n\t// Always returns true - any AbstractMessageProducingHandler can be used directly.\n\tprotected boolean canBeUsedDirect(AbstractMessageProducingHandler handler);\n\tprotected org.springframework.messaging.MessageHandler configureHandler(ServiceActivatingHandler handler);\n}", "des": "FactoryBean for creating ServiceActivatingHandler instances."}
{"index": 15945, "repo": "spring-integration-core-6.1.2", "code": "public class SimpleActiveIdleReceiveMessageAdvice extends Object implements ReceiveMessageAdvice {\n\t// Subclasses can take actions based on the result of the Joinpoint.proceed(); e.g.\n\torg.springframework.messaging.Message<?> afterReceive(org.springframework.messaging.Message<?> result, Object source);\n\t// Set the poll period when messages are returned.\n\tvoid setActivePollPeriod(long activePollPeriod);\n\t// Set the poll period when messages are not returned.\n\tvoid setIdlePollPeriod(long idlePollPeriod);\n}", "des": "A simple advice that polls at one rate when messages exist and another when there are no messages."}
{"index": 15946, "repo": "spring-integration-core-6.1.2", "code": "public class SimpleFromAvroTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware {\n\t// Subclasses must implement this method to provide the transformation logic.\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n}", "des": "An Apache Avro transformer to create generated SpecificRecord objects from byte[]."}
{"index": 15947, "repo": "spring-integration-core-6.1.2", "code": "public class SimpleMessageGroup extends Object implements MessageGroup {\n\t// Add the message to this group.\n\tvoid add(org.springframework.messaging.Message<?> messageToAdd);\n\t// Query if the message can be added.\n\tboolean canAdd(org.springframework.messaging.Message<?> message);\n\tvoid clear();\n\t// Complete the group.\n\tvoid complete();\n\t// Return true if a message with this sequence number header exists in the group.\n\tboolean containsSequence(Integer sequence);\n}", "des": "Represents a mutable group of correlated messages that is bound to a certain MessageStore and group id."}
{"index": 15948, "repo": "spring-integration-core-6.1.2", "code": "public class SimpleMessageGroupFactory extends Object implements MessageGroupFactory {\n\t// Create a MessageGroup instance based on the provided groupId.\n\tMessageGroup create(Object groupId);\n\t// Create a MessageGroup instance based on the provided groupId and with the messages for the group.\n\tMessageGroup create(Collection<? extends org.springframework.messaging.Message<?>> messages, Object groupId);\n}", "des": "The MessageGroupFactory implementation to produce SimpleMessageGroup instances."}
{"index": 15949, "repo": "spring-integration-core-6.1.2", "code": "public class SimpleMessageStore extends AbstractMessageGroupStore implements MessageStore, ChannelMessageStore {\n\t// Put the provided Message into the MessageStore.\n\t<T> org.springframework.messaging.Message<T> addMessage(org.springframework.messaging.Message<T> message);\n\t// Store messages with an association to a group id.\n\tvoid addMessagesToGroup(Object groupId, org.springframework.messaging.Message<?>... messages);\n\tvoid clearMessageGroup(Object groupId);\n}", "des": "Map-based in-memory implementation of MessageStore and MessageGroupStore."}
{"index": 15950, "repo": "spring-integration-core-6.1.2", "code": "public class SimpleMetadataStore extends Object implements ConcurrentMetadataStore {\n\t// Reads a value for the given key from this MetadataStore.\n\tString get(String key);\n\t// Writes a key value pair to this MetadataStore.\n\tvoid put(String key, String value);\n\t// Atomically insert the key into the store.\n\tString putIfAbsent(String key, String value);\n\t// Remove a value for the given key from this MetadataStore.\n\tString remove(String key);\n}", "des": "Simple implementation of MetadataStore that uses a ConcurrentMap for the data store."}
{"index": 15951, "repo": "spring-integration-core-6.1.2", "code": "@ManagedResource public class SimplePollSkipStrategy extends Object implements PollSkipStrategy {\n\t// Resume polling at the next Trigger event.\n\tvoid reset();\n\t// Return true if this poll should be skipped.\n\tboolean skipPoll();\n\t// Skip future polls.\n\tvoid skipPolls();\n}", "des": "A simple PollSkipStrategy to be used with a PollSkipAdvice."}
{"index": 15952, "repo": "spring-integration-core-6.1.2", "code": "public class SimplePool<T> extends Object implements Pool<T> {\n\t// Close the pool; returned items will be destroyed.\n\tvoid close();\n\t// Return the number of allocated items that are currently checked out of the pool.\n\tint getActiveCount();\n\t// Return the current count of allocated items (in use and idle).\n\tint getAllocatedCount();\n\t// Return the number of items that have been allocated but are not currently in use.\n\tint getIdleCount();\n}", "des": "Implementation of Pool supporting dynamic resizing and a variable timeout when attempting to obtain an item from the pool."}
{"index": 15953, "repo": "spring-integration-core-6.1.2", "code": "public static interface SimplePool.PoolItemCallback<T> {\n\t// Called by the pool when a new instance is required to populate the pool.\n\tT createForPool();\n\t// Called by the pool when an idle item is retrieved from the pool.\n\tboolean isStale(T item);\n\t// Called by the pool when an item is forcibly removed from the pool - for example when the pool size is reduced.\n\tvoid removedFromPool(T item);\n}", "des": "User of the pool provide an implementation of this interface; called during various pool operations."}
{"index": 15954, "repo": "spring-integration-core-6.1.2", "code": "public class SimpleToAvroTransformer extends AbstractTransformer {\n\t// Subclasses must implement this method to provide the transformation logic.\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\t// Set the expression to evaluate against the message to determine the value for the AvroHeaders.TYPE header.\n\tvoid setTypeExpression(org.springframework.expression.Expression expression);\n}", "des": "An Apache Avro transformer for generated SpecificRecord objects."}
{"index": 15955, "repo": "spring-integration-core-6.1.2", "code": "public class SmartLifecycleRoleController extends Object implements org.springframework.context.ApplicationListener<AbstractLeaderEvent>, org.springframework.context.ApplicationContextAware {\n\t// Add a SmartLifecycle beans to the role using their names.\n\tvoid addLifecyclesToRole(String role, List<String> lifecycleBeanNames);\n\t// Add a SmartLifecycle bean to the role using its name.\n\tfinal void addLifecycleToRole(String role, String lifecycleBeanName);\n}", "des": "Bulk start/stop SmartLifecycle in a particular role in phase order."}
{"index": 15956, "repo": "spring-integration-core-6.1.2", "code": "public class SourcePollingChannelAdapter extends AbstractPollingEndpoint implements TrackableComponent {\n\t// Subclasses must implement this method with the start behavior.\n\tprotected void doStart();\n\t// Subclasses must implement this method with the stop behavior.\n\tprotected void doStop();\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return this endpoint's source.\n\tMessageSource<?> getMessageSource();\n}", "des": "A Channel Adapter implementation for connecting a MessageSource to a MessageChannel."}
{"index": 15957, "repo": "spring-integration-core-6.1.2", "code": "public class SpelPropertyAccessorRegistrar extends Object {\n\t// Add the provided named property accessor.\n\tSpelPropertyAccessorRegistrar add(String name, org.springframework.expression.PropertyAccessor propertyAccessor);\n\t// Add the provided property accessors.\n\tSpelPropertyAccessorRegistrar add(org.springframework.expression.PropertyAccessor... propertyAccessors);\n\t// Return the registered accessors.\n\tMap<String,org.springframework.expression.PropertyAccessor> getPropertyAccessors();\n}", "des": "Utility class that keeps track of a Set of SpEL PropertyAccessors in order to register them with the \"integrationEvaluationContext\" upon initialization."}
{"index": 15958, "repo": "spring-integration-core-6.1.2", "code": "public class SplitterEndpointSpec<S extends AbstractMessageSplitter> extends ConsumerEndpointSpec<SplitterEndpointSpec<S>,S> {\n\t// Set the applySequence flag to the specified value.\n\tSplitterEndpointSpec<S> applySequence(boolean applySequence);\n\t// Set delimiters to tokenize String values.\n\tSplitterEndpointSpec<S> delimiters(String delimiters);\n\t// Specify a channel bean name where rejected Messages should be sent.\n\tSplitterEndpointSpec<S> discardChannel(String discardChannelName);\n}", "des": "A ConsumerEndpointSpec for a AbstractMessageSplitter implementations."}
{"index": 15959, "repo": "spring-integration-core-6.1.2", "code": "public class StandardIntegrationFlow extends Object implements IntegrationFlow, org.springframework.context.SmartLifecycle, org.springframework.beans.factory.BeanNameAware, NamedComponent {\n\t// The callback-based function to declare the chain of EIP-methods to configure an integration flow with the provided IntegrationFlowDefinition.\n\tvoid configure(IntegrationFlowDefinition<?> flow);\n\tString getComponentName();\n\tString getComponentType();\n}", "des": "The standard implementation of the IntegrationFlow interface instantiated by the Framework."}
{"index": 15960, "repo": "spring-integration-core-6.1.2", "code": "public final class StandardIntegrationFlowContext extends Object implements IntegrationFlowContext, org.springframework.beans.factory.BeanFactoryAware {\n\t// Obtain an IntegrationFlowContext.IntegrationFlowRegistration for the IntegrationFlow associated with the provided flowId.\n\tIntegrationFlowContext.IntegrationFlowRegistration getRegistrationById(String flowId);\n}", "des": "Standard implementation of IntegrationFlowContext."}
{"index": 15961, "repo": "spring-integration-core-6.1.2", "code": "public class TransformerFactoryBean extends AbstractStandardMessageHandlerFactoryBean {\n\t// Always returns true - any AbstractMessageProducingHandler can be used directly.\n\tprotected boolean canBeUsedDirect(AbstractMessageProducingHandler handler);\n\tprotected org.springframework.messaging.MessageHandler createExpressionEvaluatingHandler(org.springframework.expression.Expression expression);\n\tprotected MessageTransformingHandler createHandler(Transformer transformer);\n}", "des": "Factory bean for creating a Message Transformer."}
{"index": 15962, "repo": "spring-integration-core-6.1.2", "code": "public abstract class Transformers extends Object {\n\tstatic <T, U> PayloadTypeConvertingTransformer<T,U> converter(org.springframework.core.convert.converter.Converter<T,U> converter);\n\t// The factory method for the DecodingTransformer.\n\tstatic <T> DecodingTransformer<T> decoding(Codec codec, Class<T> type);\n\t// The factory method for the DecodingTransformer.\n\tstatic <T> DecodingTransformer<T> decoding(Codec codec, String typeExpression);\n}", "des": "An utility class to provide methods for out-of-the-box Transformers."}
{"index": 15963, "repo": "spring-integration-core-6.1.2", "code": "public class UnicastingDispatcher extends AbstractDispatcher {\n\t// Dispatch the message.\n\tfinal boolean dispatch(org.springframework.messaging.Message<?> message);\n\t// Specify whether this dispatcher should failover when a single MessageHandler throws an Exception.\n\tvoid setFailover(boolean failover);\n\t// Provide a LoadBalancingStrategy for this dispatcher.\n\tvoid setLoadBalancingStrategy(LoadBalancingStrategy loadBalancingStrategy);\n}", "des": "Implementation of MessageDispatcher that will attempt to send a Message to at most one of its handlers."}
{"index": 15964, "repo": "spring-integration-core-6.1.2", "code": "public final class UpperBound extends Object {\n\tint availablePermits();\n\t// Releases one lock on the underlying semaphore.\n\tvoid release();\n\t// Releases several locks on the underlying semaphore.\n\tvoid release(int permits);\n\t// Acquires a permit from the underlying semaphore if this UpperBound is bounded and returns true if it succeeds within the given timeout.\n\tboolean tryAcquire(long timeoutInMilliseconds);\n}", "des": "Thin wrapper around a Semaphore that allows to create a potentially unlimited upper bound to by used in buffers of messages (e.g."}
{"index": 15965, "repo": "spring-integration-core-6.1.2", "code": "public class UUIDConverter extends Object implements org.springframework.core.convert.converter.Converter<Object,UUID> {\n\t// Convert the input to a UUID using the convenience method getUUID(Object).\n\tUUID convert(Object source);\n\t// Convenient utility to convert an object to a UUID.\n\tstatic UUID getUUID(Object input);\n}", "des": "Utility to help generate UUID instances from generic objects."}
{"index": 15966, "repo": "spring-integration-core-6.1.2", "code": "@ManagedResource public class WireTap extends Object implements org.springframework.messaging.support.ChannelInterceptor, ManageableLifecycle, VetoCapableInterceptor, org.springframework.beans.factory.BeanFactoryAware {\n\t// Check whether the wire tap is currently running.\n\tboolean isRunning();\n}", "des": "A ChannelInterceptor that publishes a copy of the intercepted message to a secondary target while still sending the original message to the main channel."}
{"index": 15967, "repo": "spring-integration-amqp-6.1.2", "code": "public final class Amqp extends Object {\n\t// Create an initial AmqpAsyncOutboundGatewaySpec.\n\tstatic AmqpAsyncOutboundGatewaySpec asyncOutboundGateway(org.springframework.amqp.rabbit.AsyncRabbitTemplate asyncRabbitTemplate);\n\t// Create an initial AmqpMessageChannelSpec.\n\tstatic AmqpMessageChannelSpec<?,?> channel(String id, org.springframework.amqp.rabbit.connection.ConnectionFactory connectionFactory);\n}", "des": "Factory class for AMQP components."}
{"index": 15968, "repo": "spring-integration-amqp-6.1.2", "code": "public class AmqpBaseInboundChannelAdapterSpec<S extends AmqpBaseInboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageProducerSpec<S,AmqpInboundChannelAdapter> {\n\t// Configure the adapter's AmqpHeaderMapper; defaults to DefaultAmqpHeaderMapper.\n\tS headerMapper(AmqpHeaderMapper headerMapper);\n\t// Only applies if the default header mapper is used.\n\tS mappedRequestHeaders(String... headers);\n}", "des": "The base MessageProducerSpec implementation for a AmqpInboundChannelAdapter."}
{"index": 15969, "repo": "spring-integration-amqp-6.1.2", "code": "public class AmqpBaseInboundGatewaySpec<S extends AmqpBaseInboundGatewaySpec<S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,AmqpInboundGateway> {\n\t// Set a batching strategy to use when de-batching messages.\n\tS batchingStrategy(org.springframework.amqp.rabbit.batch.BatchingStrategy batchingStrategy);\n\t// Set to true to bind the source message in the headers.\n\tS bindSourceMessage(boolean bindSourceMessage);\n}", "des": "A base MessagingGatewaySpec implementation for AmqpInboundGateway endpoint options."}
{"index": 15970, "repo": "spring-integration-amqp-6.1.2", "code": "public abstract class AmqpBaseOutboundEndpointSpec<S extends AmqpBaseOutboundEndpointSpec<S,E>,E extends AbstractAmqpOutboundEndpoint> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E> {\n\t// Set the channel to which acks are send (publisher confirms).\n\tS confirmAckChannel(org.springframework.messaging.MessageChannel ackChannel);\n\t// Set a SpEL expression to evaluate confirm correlation at runtime.\n\tS confirmCorrelationExpression(String confirmCorrelationExpression);\n}", "des": "The base MessageHandlerSpec for AbstractAmqpOutboundEndpoints."}
{"index": 15971, "repo": "spring-integration-amqp-6.1.2", "code": "public static enum AmqpInboundChannelAdapter.BatchMode extends Enum<AmqpInboundChannelAdapter.BatchMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AmqpInboundChannelAdapter.BatchMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AmqpInboundChannelAdapter.BatchMode[] values();\n}", "des": "Defines the payload type when the listener container is configured with consumerBatchEnabled."}
{"index": 15972, "repo": "spring-integration-amqp-6.1.2", "code": "public class AmqpInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport {\n\tprotected void doStart();\n\tprotected void doStop();\n\tString getComponentType();\n\tprotected org.springframework.core.AttributeAccessor getErrorMessageAttributes(org.springframework.messaging.Message<?> message);\n\tprotected void onInit();\n\t// Set a batching strategy to use when de-batching messages.\n\tvoid setBatchingStrategy(org.springframework.amqp.rabbit.batch.BatchingStrategy batchingStrategy);\n}", "des": "Adapter that receives Messages from an AMQP Queue, converts them into Spring Integration Messages, and sends the results to a Message Channel."}
{"index": 15973, "repo": "spring-integration-amqp-6.1.2", "code": "public abstract class AmqpOutboundEndpointSpec<S extends AmqpOutboundEndpointSpec<S>> extends AmqpBaseOutboundEndpointSpec<S,AmqpOutboundEndpoint> {\n\t// Provide the header names that should be mapped to a response from a MessageHeaders.\n\tS mappedReplyHeaders(String... headers);\n\t// Wait for a publisher confirm.\n\tS waitForConfirm(boolean waitForConfirm);\n}", "des": "Base spec for outbound AMQP endpoints."}
{"index": 15974, "repo": "spring-integration-amqp-6.1.2", "code": "public class AmqpPollableMessageChannelSpec<S extends AmqpPollableMessageChannelSpec<S,T>,T extends AbstractAmqpChannel> extends org.springframework.integration.dsl.MessageChannelSpec<S,T> {\n\tS amqpMessageConverter(org.springframework.amqp.support.converter.MessageConverter messageConverter);\n\t// Configure channelTransacted on both the RabbitTemplate (for sends) and SimpleMessageListenerContainer (for receives) when using Spring Integration 4.0.\n\tS channelTransacted(boolean channelTransacted);\n}", "des": "A MessageChannelSpec for a AbstractAmqpChannels."}
{"index": 15975, "repo": "spring-integration-amqp-6.1.2", "code": "public class DefaultAmqpHeaderMapper extends org.springframework.integration.mapping.AbstractHeaderMapper<org.springframework.amqp.core.MessageProperties> implements AmqpHeaderMapper {\n\t// Extract \"standard\" headers from an AMQP MessageProperties instance.\n\tprotected Map<String,Object> extractStandardHeaders(org.springframework.amqp.core.MessageProperties amqpMessageProperties);\n}", "des": "Default implementation of AmqpHeaderMapper."}
{"index": 15976, "repo": "spring-integration-amqp-6.1.2", "code": "public final class EndpointUtils extends Object {\n\t// Return an ListenerExecutionFailedException or a ManualAckListenerExecutionFailedException depending on whether isManualAck is false or true.\n\tstatic org.springframework.amqp.rabbit.support.ListenerExecutionFailedException errorMessagePayload(List<org.springframework.amqp.core.Message> messages, com.rabbitmq.client.Channel channel, boolean isManualAck, Exception ex);\n}", "des": "Utility methods for messaging endpoints."}
{"index": 15977, "repo": "spring-integration-amqp-6.1.2", "code": "public class ManualAckListenerExecutionFailedException extends org.springframework.amqp.rabbit.support.ListenerExecutionFailedException {\n\t// Return the channel.\n\tcom.rabbitmq.client.Channel getChannel();\n\t// Return the delivery tag for the last failed message.\n\tlong getDeliveryTag();\n}", "des": "A ListenerExecutionFailedException enhanced with the channel and delivery tag."}
{"index": 15978, "repo": "spring-integration-amqp-6.1.2", "code": "public final class MappingUtils extends Object {\n\t// Check the delivery mode and update with the default if not already present.\n\tstatic void checkDeliveryMode(org.springframework.messaging.Message<?> requestMessage, org.springframework.amqp.core.MessageProperties messageProperties, org.springframework.amqp.core.MessageDeliveryMode defaultDeliveryMode);\n}", "des": "Utility methods used during message mapping."}
{"index": 15979, "repo": "spring-integration-amqp-6.1.2", "code": "public class PointToPointSubscribableAmqpChannel extends AbstractAmqpChannel {\n\tprotected org.springframework.integration.dispatcher.AbstractDispatcher createDispatcher();\n\tvoid destroy();\n\tprotected void doDeclares();\n\tint getPhase();\n\t// Subclasses may override this method to return a routing key.\n\tprotected String getRoutingKey();\n\tboolean isAutoStartup();\n\tboolean isRunning();\n\tprotected String obtainQueueName(String channelName);\n\tvoid onInit();\n}", "des": "The AbstractSubscribableAmqpChannel implementation for one-to-one subscription over AMQP queue."}
{"index": 15980, "repo": "spring-integration-amqp-6.1.2", "code": "public final class RabbitStream extends Object {\n\t// Create an initial RabbitStreamInboundChannelAdapterSpec with the provided Environment.\n\tstatic RabbitStreamInboundChannelAdapterSpec inboundAdapter(com.rabbitmq.stream.Environment environment);\n\t// Create an initial RabbitStreamInboundChannelAdapterSpec with the provided Environment.\n\tstatic RabbitStreamInboundChannelAdapterSpec inboundAdapter(com.rabbitmq.stream.Environment environment, com.rabbitmq.stream.Codec codec);\n}", "des": "Factory class for RabbitMQ components."}
{"index": 15981, "repo": "spring-integration-amqp-6.1.2", "code": "public class RabbitStreamInboundChannelAdapterSpec extends AmqpInboundChannelAdapterSpec<RabbitStreamInboundChannelAdapterSpec,org.springframework.rabbit.stream.listener.StreamListenerContainer> {\n\tRabbitStreamInboundChannelAdapterSpec configureContainer(Consumer<RabbitStreamMessageListenerContainerSpec> configurer);\n\t// Configure a name for Rabbit stream to consume from.\n\tRabbitStreamInboundChannelAdapterSpec streamName(String streamName);\n}", "des": "Spec for an inbound channel adapter with a StreamListenerContainer."}
{"index": 15982, "repo": "spring-integration-amqp-6.1.2", "code": "public class RabbitStreamMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler {\n\tprotected org.springframework.messaging.MessageChannel getSendFailureChannel();\n\tprotected org.springframework.messaging.MessageChannel getSendSuccessChannel();\n\t// Return the RabbitStreamOperations.\n\torg.springframework.rabbit.stream.producer.RabbitStreamOperations getStreamOperations();\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> requestMessage);\n}", "des": "MessageHandler based on RabbitStreamOperations."}
{"index": 15983, "repo": "spring-integration-amqp-6.1.2", "code": "public class RabbitStreamMessageHandlerSpec extends org.springframework.integration.dsl.MessageHandlerSpec<RabbitStreamMessageHandlerSpec,RabbitStreamMessageHandler> {\n\t// Set a timeout for the confirm result.\n\tRabbitStreamMessageHandlerSpec confirmTimeout(long timeout);\n\t// Set a custom AmqpHeaderMapper for mapping request and reply headers.\n\tRabbitStreamMessageHandlerSpec headerMapper(AmqpHeaderMapper headerMapper);\n}", "des": "The base MessageHandlerSpec for RabbitStreamMessageHandlers."}
{"index": 15984, "repo": "spring-integration-amqp-6.1.2", "code": "public class RabbitStreamMessageListenerContainerSpec extends MessageListenerContainerSpec<RabbitStreamMessageListenerContainerSpec,org.springframework.rabbit.stream.listener.StreamListenerContainer> {\n\tRabbitStreamMessageListenerContainerSpec adviceChain(org.aopalliance.aop.Advice... adviceChain);\n\t// Perform additional configuration of the container.\n\tRabbitStreamMessageListenerContainerSpec configure(Consumer<org.springframework.rabbit.stream.listener.StreamListenerContainer> consumer);\n}", "des": "Spec for StreamListenerContainer."}
{"index": 15985, "repo": "spring-boot-maven-plugin-3.1.1", "code": "public abstract class AbstractPackagerMojo extends AbstractDependencyFilterMojo {\n\t// Return a Packager configured for this MOJO.\n\tprotected <P extends org.springframework.boot.loader.tools.Packager>P getConfiguredPackager(Supplier<P> supplier);\n\t// Return the type of archive that should be packaged by this MOJO.\n\tprotected AbstractPackagerMojo.LayoutType getLayout();\n}", "des": "Abstract base class for classes that work with an Packager."}
{"index": 15986, "repo": "spring-boot-maven-plugin-3.1.1", "code": "public static enum AbstractPackagerMojo.LayoutType extends Enum<AbstractPackagerMojo.LayoutType> {\n\torg.springframework.boot.loader.tools.Layout layout();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AbstractPackagerMojo.LayoutType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AbstractPackagerMojo.LayoutType[] values();\n}", "des": "Archive layout types."}
{"index": 15987, "repo": "spring-boot-maven-plugin-3.1.1", "code": "public abstract class AbstractRunMojo extends AbstractDependencyFilterMojo {\n\tvoid execute();\n\t// Returns the directories that contain the application's classes and resources.\n\tprotected List<File> getClassesDirectories();\n\tprotected URL[] getClassPathUrls();\n\tprotected abstract boolean isUseTestClasspath();\n\t// Resolve the application arguments to use.\n\tprotected org.springframework.boot.maven.RunArguments resolveApplicationArguments();\n}", "des": "Base class to run a Spring Boot application."}
{"index": 15988, "repo": "spring-boot-maven-plugin-3.1.1", "code": "public abstract class BuildImageMojo extends AbstractPackagerMojo {\n\tvoid execute();\n\t// Return the type of archive that should be used when building the image.\n\tprotected AbstractPackagerMojo.LayoutType getLayout();\n\t// Return the layout factory that will be used to determine the AbstractPackagerMojo.LayoutType if no explicit layout is set.\n\tprotected org.springframework.boot.loader.tools.LayoutFactory getLayoutFactory();\n}", "des": "Package an application into an OCI image using a buildpack."}
{"index": 15989, "repo": "spring-boot-maven-plugin-3.1.1", "code": "public class Docker extends Object {\n\t// The path to TLS certificate and key files required for TLS communication with the Docker daemon.\n\tString getCertPath();\n\t// The host address of the Docker daemon.\n\tString getHost();\n\t// Whether to use the configured Docker host in the builder container.\n\tboolean isBindHostToBuilder();\n\t// Whether the Docker daemon requires TLS communication.\n\tboolean isTlsVerify();\n}", "des": "Docker configuration options."}
{"index": 15990, "repo": "spring-boot-maven-plugin-3.1.1", "code": "public static class Docker.DockerRegistry extends Object {\n\t// The email address that will be used for user authentication to the registry.\n\tString getEmail();\n\t// The password that will be used for user authentication to the registry.\n\tString getPassword();\n\t// The token that will be used for token authentication to the registry.\n\tString getToken();\n\t// The username that will be used for user authentication to the registry.\n\tString getUsername();\n}", "des": "Encapsulates Docker registry authentication configuration options."}
{"index": 15991, "repo": "spring-boot-maven-plugin-3.1.1", "code": "public class Image extends Object {\n\t// Returns the application content directory for the image.\n\tString getApplicationDirectory();\n\t// The name of the builder image to use to create the image.\n\tString getBuilder();\n\t// If the cache should be cleaned before building.\n\tBoolean getCleanCache();\n\t// Returns the created date for the image.\n\tString getCreatedDate();\n\t// Environment properties that should be passed to the builder.\n\tMap<String,String> getEnv();\n}", "des": "Image configuration options."}
{"index": 15992, "repo": "spring-boot-maven-plugin-3.1.1", "code": "public class Layers extends Object {\n\t// The location of the layers configuration file.\n\tFile getConfiguration();\n\t// Whether a layers.idx file should be added to the jar.\n\tboolean isEnabled();\n\t// Whether to include the layer tools jar.\n\tboolean isIncludeLayerTools();\n\tvoid setConfiguration(File configuration);\n}", "des": "Layer configuration options."}
{"index": 15993, "repo": "spring-boot-maven-plugin-3.1.1", "code": "public class PropertiesMergingResourceTransformer extends Object implements org.apache.maven.plugins.shade.resource.ReproducibleResourceTransformer {\n\tboolean canTransformResource(String resource);\n\t// Return the data the properties being merged.\n\tProperties getData();\n\tString getResource();\n\tboolean hasTransformedResource();\n\tvoid modifyOutputStream(JarOutputStream os);\n}", "des": "Extension for the Maven shade plugin to allow properties files (e.g."}
{"index": 15994, "repo": "spring-boot-maven-plugin-3.1.1", "code": "@Mojo(name=\"repackage\", defaultPhase=PACKAGE, requiresProject=true, threadSafe=true, requiresDependencyResolution=COMPILE_PLUS_RUNTIME, requiresDependencyCollection=COMPILE_PLUS_RUNTIME) public class RepackageMojo extends AbstractPackagerMojo {\n\tvoid execute();\n\t// Return the type of archive that should be packaged by this MOJO.\n\tprotected AbstractPackagerMojo.LayoutType getLayout();\n}", "des": "Repackage existing JAR and WAR archives so that they can be executed from the command line using java -jar."}
{"index": 15995, "repo": "spring-boot-maven-plugin-3.1.1", "code": "@Mojo(name=\"run\", requiresProject=true, defaultPhase=VALIDATE, requiresDependencyResolution=TEST) @Execute(phase=TEST_COMPILE) public class RunMojo extends AbstractRunMojo {\n\tprotected boolean isUseTestClasspath();\n\t// Resolve the JVM arguments to use.\n\tprotected org.springframework.boot.maven.RunArguments resolveJvmArguments();\n}", "des": "Run an application in place."}
{"index": 15996, "repo": "spring-boot-maven-plugin-3.1.1", "code": "@Mojo(name=\"start\", requiresProject=true, defaultPhase=PRE_INTEGRATION_TEST, requiresDependencyResolution=TEST) public class StartMojo extends AbstractRunMojo {\n\t// Execute a task, retrying it on failure.\n\t<T> T execute(long wait, int maxAttempts, Callable<T> callback);\n\tprotected boolean isUseTestClasspath();\n\t// Resolve the application arguments to use.\n\tprotected org.springframework.boot.maven.RunArguments resolveApplicationArguments();\n}", "des": "Start a spring application."}
{"index": 15997, "repo": "spring-boot-maven-plugin-3.1.1", "code": "@Mojo(name=\"test-run\", requiresProject=true, defaultPhase=VALIDATE, requiresDependencyResolution=TEST) @Execute(phase=TEST_COMPILE) public class TestRunMojo extends AbstractRunMojo {\n\t// Returns the directories that contain the application's classes and resources.\n\tprotected List<File> getClassesDirectories();\n\tprotected boolean isUseTestClasspath();\n\t// Resolve the JVM arguments to use.\n\tprotected org.springframework.boot.maven.RunArguments resolveJvmArguments();\n}", "des": "Run an application in place using the test runtime classpath."}
{"index": 15998, "repo": "spring-xml-4.0.5", "code": "public abstract class AbstractXmlReader extends Object implements XMLReader {\n\tContentHandler getContentHandler();\n\tDTDHandler getDTDHandler();\n\tEntityResolver getEntityResolver();\n\tErrorHandler getErrorHandler();\n\t// Throws a SAXNotRecognizedException exception.\n\tboolean getFeature(String name);\n\tprotected LexicalHandler getLexicalHandler();\n\t// Throws a SAXNotRecognizedException exception when the given property does not signify a lexical handler.\n\tObject getProperty(String name);\n}", "des": "Abstract base class for SAX XMLReader implementations."}
{"index": 15999, "repo": "spring-xml-4.0.5", "code": "public abstract class AbstractXPathTemplate extends TransformerObjectSupport implements XPathOperations {\n\t// Evaluates the given expression, handling the result Node objects on a per-node basis with a NodeCallbackHandler.\n\tfinal void evaluate(String expression, Source context, NodeCallbackHandler callbackHandler);\n\t// Returns namespaces used in the XPath expression.\n\tMap<String,String> getNamespaces();\n\t// Returns the root element of the given source.\n\tprotected Element getRootElement(Source source);\n}", "des": "Abstract base class for implementations of XPathOperations."}
{"index": 16000, "repo": "spring-xml-4.0.5", "code": "public class CommonsXsdSchema extends Object implements XsdSchema {\n\t// Creates a XmlValidator based on the schema.\n\tXmlValidator createValidator();\n\tQName[] getElementNames();\n\t// Returns the wrapped Commons XmlSchema object.\n\torg.apache.ws.commons.schema.XmlSchema getSchema();\n\t// Returns the Source of the schema.\n\tSource getSource();\n\t// Returns the target namespace of this schema.\n\tString getTargetNamespace();\n}", "des": "Implementation of the XsdSchema interface that uses Apache WS-Commons XML Schema."}
{"index": 16001, "repo": "spring-xml-4.0.5", "code": "public class CommonsXsdSchemaCollection extends Object implements XsdSchemaCollection, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware {\n\tvoid afterPropertiesSet();\n\t// Creates a XmlValidator based on the schemas contained in this collection.\n\tXmlValidator createValidator();\n\t// Returns all schemas contained in this collection.\n\tXsdSchema[] getXsdSchemas();\n}", "des": "Implementation of the XsdSchemaCollection that uses Apache WS-Commons XML Schema."}
{"index": 16002, "repo": "spring-xml-4.0.5", "code": "public class JaxenXPathTemplate extends AbstractXPathTemplate {\n\t// Evaluates the given expression, mapping each result Node objects to a Java object via a NodeMapper.\n\t<T> List<T> evaluate(String expression, Source context, NodeMapper<T> nodeMapper);\n\t// Evaluates the given expression as a boolean.\n\tboolean evaluateAsBoolean(String expression, Source context);\n\t// Evaluates the given expression as a double.\n\tdouble evaluateAsDouble(String expression, Source context);\n}", "des": "Implementation of XPathOperations that uses Jaxen."}
{"index": 16003, "repo": "spring-xml-4.0.5", "code": "public class Jaxp13XPathTemplate extends AbstractXPathTemplate {\n\t// Evaluates the given expression, mapping each result Node objects to a Java object via a NodeMapper.\n\t<T> List<T> evaluate(String expression, Source context, NodeMapper<T> nodeMapper);\n\t// Evaluates the given expression as a boolean.\n\tboolean evaluateAsBoolean(String expression, Source context);\n\t// Evaluates the given expression as a double.\n\tdouble evaluateAsDouble(String expression, Source context);\n}", "des": "Implementation of XPathOperations that uses JAXP 1.3."}
{"index": 16004, "repo": "spring-xml-4.0.5", "code": "public abstract class JaxpVersion extends Object {\n\t// Gets the JAXP version.\n\tstatic int getJaxpVersion();\n\t// Convenience method to determine if the current JAXP version is at least 1.4 (packaged with JDK 1.6).\n\tstatic boolean isAtLeastJaxp14();\n}", "des": "Helper class used to find the current version of JAXP."}
{"index": 16005, "repo": "spring-xml-4.0.5", "code": "public abstract class QNameUtils extends Object {\n\t// Deprecated. in favor of QName(String, String, String)\n\tstatic QName createQName(String namespaceUri, String localPart, String prefix);\n\t// Deprecated. in favor of QName.getPrefix()\n\tstatic String getPrefix(QName qName);\n\t// Returns the qualified name of the given DOM Node.\n\tstatic QName getQNameForNode(Node node);\n\t// Parse the given qualified name string into a QName.\n\tstatic QName parseQNameString(String qNameString);\n}", "des": "Helper class for using QName."}
{"index": 16006, "repo": "spring-xml-4.0.5", "code": "public abstract class SaxUtils extends Object {\n\t// Creates a SAX InputSource from the given resource.\n\tstatic InputSource createInputSource(org.springframework.core.io.Resource resource);\n\t// Retrieves the URL from the given resource as System ID.\n\tstatic String getSystemId(org.springframework.core.io.Resource resource);\n}", "des": "Convenient utility methods for dealing with SAX."}
{"index": 16007, "repo": "spring-xml-4.0.5", "code": "public abstract class SchemaLoaderUtils extends Object {\n\t// Retrieves the URL from the given resource as System ID.\n\tstatic String getSystemId(org.springframework.core.io.Resource resource);\n\t// Load schema from the given resource.\n\tstatic Schema loadSchema(org.springframework.core.io.Resource[] resources, String schemaLanguage);\n\t// Load schema from the given resource.\n\tstatic Schema loadSchema(org.springframework.core.io.Resource resource, String schemaLanguage);\n}", "des": "Convenient utility methods for loading of Schema objects, performing standard handling of input streams."}
{"index": 16008, "repo": "spring-xml-4.0.5", "code": "public class SimpleNamespaceContext extends Object implements NamespaceContext {\n\t// Binds the given namespace as default namespace.\n\tvoid bindDefaultNamespaceUri(String namespaceUri);\n\t// Binds the given prefix to the given namespace.\n\tvoid bindNamespaceUri(String prefix, String namespaceUri);\n\t// Removes all declared prefixes.\n\tvoid clear();\n\t// Returns all declared prefixes.\n\tIterator<String> getBoundPrefixes();\n\tString getNamespaceURI(String prefix);\n\tString getPrefix(String namespaceUri);\n}", "des": "Simple javax.xml.namespace.NamespaceContext implementation."}
{"index": 16009, "repo": "spring-xml-4.0.5", "code": "public class SimpleXsdSchema extends Object implements XsdSchema, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Creates a XmlValidator based on the schema.\n\tXmlValidator createValidator();\n\t// Returns the Source of the schema.\n\tSource getSource();\n\t// Returns the target namespace of this schema.\n\tString getTargetNamespace();\n}", "des": "The default XsdSchema implementation."}
{"index": 16010, "repo": "spring-xml-4.0.5", "code": "public class StringSource extends StreamSource {\n\t// Returns null.\n\tInputStream getInputStream();\n\tReader getReader();\n\t// Throws UnsupportedOperationException.\n\tvoid setInputStream(InputStream inputStream);\n\t// Throws UnsupportedOperationException.\n\tvoid setReader(Reader reader);\n}", "des": "Convenient subclass of StreamSource that reads from a StringReader."}
{"index": 16011, "repo": "spring-xml-4.0.5", "code": "public class TransformerHelper extends Object {\n\t// Creates a new Transformer.\n\tTransformer createTransformer();\n\t// Returns the TransformerFactory.\n\tTransformerFactory getTransformerFactory();\n\t// Instantiate a new TransformerFactory.\n\tprotected TransformerFactory newTransformerFactory(Class<? extends TransformerFactory> transformerFactoryClass);\n\t// Specify the TransformerFactory class to use.\n\tvoid setTransformerFactoryClass(Class<? extends TransformerFactory> transformerFactoryClass);\n}", "des": "Helper class for Transformer usage."}
{"index": 16012, "repo": "spring-xml-4.0.5", "code": "public abstract class TransformerObjectSupport extends Object {\n\t// Creates a new Transformer.\n\tprotected final Transformer createTransformer();\n\t// Returns the TransformerFactory.\n\tprotected TransformerFactory getTransformerFactory();\n\t// Instantiate a new TransformerFactory.\n\tprotected TransformerFactory newTransformerFactory(Class<? extends TransformerFactory> transformerFactoryClass);\n}", "des": "Convenient base class for objects that use a Transformer."}
{"index": 16013, "repo": "spring-xml-4.0.5", "code": "public abstract class TraxUtils extends Object {\n\t// Performs the given callback operation on a Result.\n\tstatic void doWithResult(Result result, TraxUtils.ResultCallback callback);\n\t// Performs the given callback operation on a Source.\n\tstatic void doWithSource(Source source, TraxUtils.SourceCallback callback);\n\t// Returns the Document of the given DOMSource.\n\tstatic Document getDocument(DOMSource source);\n}", "des": "Convenient utility methods for dealing with TrAX."}
{"index": 16014, "repo": "spring-xml-4.0.5", "code": "public static interface TraxUtils.ResultCallback {\n\t// Perform an operation on the node contained in a DOMResult.\n\tvoid domResult(Node node);\n\t// Perform an operation on the system identifier contained in any Result.\n\tvoid result(String systemId);\n\t// Perform an operation on the ContentHandler and LexicalHandler contained in a SAXResult.\n\tvoid saxResult(ContentHandler contentHandler, LexicalHandler lexicalHandler);\n}", "des": "Callback interface invoked on each sort of Result."}
{"index": 16015, "repo": "spring-xml-4.0.5", "code": "public static interface TraxUtils.SourceCallback {\n\t// Perform an operation on the node contained in a DOMSource.\n\tvoid domSource(Node node);\n\t// Perform an operation on the XMLReader and InputSource contained in a SAXSource.\n\tvoid saxSource(XMLReader reader, InputSource inputSource);\n\t// Perform an operation on the system identifier contained in any Source.\n\tvoid source(String systemId);\n}", "des": "Callback interface invoked on each sort of Source."}
{"index": 16016, "repo": "spring-xml-4.0.5", "code": "public interface XmlValidator {\n\t// Validates the given Source, and returns an array of SAXParseExceptions as result.\n\tSAXParseException[] validate(Source source);\n\t// Validates the given Source and ValidationErrorHandler, and returns an array of SAXParseExceptions as result.\n\tSAXParseException[] validate(Source source, ValidationErrorHandler errorHandler);\n}", "des": "Simple processor that validates a given Source."}
{"index": 16017, "repo": "spring-xml-4.0.5", "code": "public abstract class XmlValidatorFactory extends Object {\n\t// Create a XmlValidator with the given schema resources and schema language type.\n\tstatic XmlValidator createValidator(org.springframework.core.io.Resource[] schemaResources, String schemaLanguage);\n\t// Create a XmlValidator with the given schema resource and schema language type.\n\tstatic XmlValidator createValidator(org.springframework.core.io.Resource schemaResource, String schemaLanguage);\n}", "des": "Factory for XmlValidator objects, being aware of JAXP 1.3 Validators, and JAXP 1.0 parsing capabilities."}
{"index": 16018, "repo": "spring-xml-4.0.5", "code": "public interface XPathExpression {\n\t// Evaluates the given expression, mapping each result Node objects to a Java object via a NodeMapper.\n\t<T> List<T> evaluate(Node node, NodeMapper<T> nodeMapper);\n\t// Evaluates the given expression as a boolean.\n\tboolean evaluateAsBoolean(Node node);\n\t// Evaluates the given expression as a Node.\n\tNode evaluateAsNode(Node node);\n\t// Evaluates the given expression, and returns all Node objects that conform to it.\n\tList<Node> evaluateAsNodeList(Node node);\n}", "des": "Defines the contract for a precompiled XPath expression."}
{"index": 16019, "repo": "spring-xml-4.0.5", "code": "public abstract class XPathExpressionFactory extends Object {\n\t// Create a compiled XPath expression using the given string.\n\tstatic XPathExpression createXPathExpression(String expression);\n\t// Create a compiled XPath expression using the given string and namespaces.\n\tstatic XPathExpression createXPathExpression(String expression, Map<String,String> namespaces);\n}", "des": "Factory for compiled XPathExpressions, being aware of JAXP 1.3+ XPath functionality, and Jaxen."}
{"index": 16020, "repo": "spring-xml-4.0.5", "code": "public class XPathExpressionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<XPathExpression>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tXPathExpression getObject();\n\tClass<? extends XPathExpression> getObjectType();\n\tboolean isSingleton();\n\t// Sets the XPath expression.\n\tvoid setExpression(String expression);\n\t// Sets the namespaces for the expressions.\n\tvoid setNamespaces(Map<String,String> namespaces);\n}", "des": "Spring FactoryBean for XPathExpression object."}
{"index": 16021, "repo": "spring-xml-4.0.5", "code": "public interface XPathOperations {\n\t// Evaluates the given expression, handling the result Node objects on a per-node basis with a NodeCallbackHandler.\n\tvoid evaluate(String expression, Source context, NodeCallbackHandler callbackHandler);\n\t// Evaluates the given expression, mapping each result Node objects to a Java object via a NodeMapper.\n\t<T> List<T> evaluate(String expression, Source context, NodeMapper<T> nodeMapper);\n}", "des": "Interface that specifies a basic set of XPath operations, implemented by various XPathTemplates."}
{"index": 16022, "repo": "spring-xml-4.0.5", "code": "public interface XsdSchema {\n\t// Creates a XmlValidator based on the schema.\n\tXmlValidator createValidator();\n\t// Returns the Source of the schema.\n\tSource getSource();\n\t// Returns the target namespace of this schema.\n\tString getTargetNamespace();\n}", "des": "Represents an abstraction for XSD schemas."}
{"index": 16023, "repo": "spring-xml-4.0.5", "code": "public interface XsdSchemaCollection {\n\t// Creates a XmlValidator based on the schemas contained in this collection.\n\tXmlValidator createValidator();\n\t// Returns all schemas contained in this collection.\n\tXsdSchema[] getXsdSchemas();\n}", "des": "Represents an abstraction for a collection of XSD schemas."}
{"index": 16024, "repo": "groovy-4.0.13", "code": "public abstract class AbstractReaderSource extends Object implements ReaderSource {\n\t// Returns true if the source can be restarted (i.e.\n\tboolean canReopenSource();\n\t// Cleans up any cached resources used by getLine().\n\tvoid cleanup();\n\t// Returns a line from the source, or null, if unavailable.\n\tString getLine(int lineNumber, Janitor janitor);\n}", "des": "For ReaderSources that can choose a parent class, a base that provides common functionality."}
{"index": 16025, "repo": "groovy-4.0.13", "code": "public interface AdaptingMetaClass extends MetaClass {\n\t// Returns the MetaClass that this adapter adapts\n\tMetaClass getAdaptee();\n\t// Sets the MetaClass adapted by this MetaClass\n\tvoid setAdaptee(MetaClass metaClass);\n}", "des": "An interface for MetaClass instances that \"adapt\" other MetaClass instances such as a proxy or delegating MetaClass."}
{"index": 16026, "repo": "groovy-4.0.13", "code": "public class AnnotatedNode extends ASTNode implements GroovydocHolder<AnnotatedNode> {\n\tvoid addAnnotation(AnnotationNode annotation);\n\tAnnotationNode addAnnotation(ClassNode type);\n\tvoid addAnnotations(List<AnnotationNode> annotations);\n\tList<AnnotationNode> getAnnotations();\n\tList<AnnotationNode> getAnnotations(ClassNode type);\n\tClassNode getDeclaringClass();\n\t// Get the groovydoc\n\tGroovydoc getGroovydoc();\n\t// Get GroovydocHolder instance\n\tAnnotatedNode getInstance();\n}", "des": "Base class for any AST node which is capable of being annotated"}
{"index": 16027, "repo": "groovy-4.0.13", "code": "public class AnnotationCollectorTransform extends Object {\n\t// Adds a new syntax error to the source unit and then continues.\n\tprotected void addError(String message, ASTNode node, SourceUnit source);\n\t// Returns a list of AnnotationNodes for the value attribute of the given AnnotationNode.\n\tprotected List<AnnotationNode> getTargetAnnotationList(AnnotationNode collector, AnnotationNode aliasAnnotationUsage, SourceUnit source);\n}", "des": "This class is the base for any annotation alias processor."}
{"index": 16028, "repo": "groovy-4.0.13", "code": "public class AnnotationNode extends ASTNode {\n\tvoid addMember(String name, Expression value);\n\tClassNode getClassNode();\n\tExpression getMember(String name);\n\tMap<String,Expression> getMembers();\n\tString getText();\n\t// Flag corresponding to RetentionPolicy.CLASS.\n\tboolean hasClassRetention();\n\t// Flag corresponding to RetentionPolicy.RUNTIME.\n\tboolean hasRuntimeRetention();\n\t// Flag corresponding to RetentionPolicy.SOURCE.\n\tboolean hasSourceRetention();\n\tboolean isBuiltIn();\n}", "des": "Represents an annotation which can be attached to interfaces, classes, methods, fields, parameters, and other places."}
{"index": 16029, "repo": "groovy-4.0.13", "code": "public class ArrayExpression extends Expression {\n\t// Add another element to the initializer expressions\n\tvoid addExpression(Expression initExpression);\n\tClassNode getElementType();\n\t// Get a particular initializer expression\n\tExpression getExpression(int i);\n\t// Get the initializer expressions\n\tList<Expression> getExpressions();\n\tList<Expression> getSizeExpression();\n\tString getText();\n\tboolean hasInitializer();\n\tboolean isDynamic();\n}", "des": "Represents an array object construction."}
{"index": 16030, "repo": "groovy-4.0.13", "code": "public class ArrayTypeUtils extends Object {\n\t// Calculate the dimension of array\n\tstatic int dimension(Class clazz);\n\t// Calculate the dimension of array\n\tstatic int dimension(ClassNode clazz);\n\t// Get the type of array elements\n\tstatic Class elementType(Class clazz);\n\t// Get the type of array elements by the dimension\n\tstatic Class elementType(Class clazz, int dim);\n\t// Get the type of array elements\n\tstatic ClassNode elementType(ClassNode clazz);\n}", "des": "Utilities for handling array types"}
{"index": 16031, "repo": "groovy-4.0.13", "code": "public class AstBuilder extends GroovyParserBaseVisitor<Object> {\n\tBlockStatement appendStatementsToBlockStatement(BlockStatement bs, Statement... statements);\n\tModuleNode buildAST();\n\t// Visit tree safely, no NPE occurred when the tree is null.\n\tObject visit(org.antlr.v4.runtime.tree.ParseTree tree);\n\t// Visit a parse tree produced by the additiveExprAlt labeled alternative in GroovyParser.expression().\n\tBinaryExpression visitAdditiveExprAlt(GroovyParser.AdditiveExprAltContext ctx);\n}", "des": "Builds the AST from the parse tree generated by Antlr4."}
{"index": 16032, "repo": "groovy-4.0.13", "code": "public class AstStringCompiler extends Object {\n\t// Compiles the specified source code and returns its statement block and any declared types.\n\tList<ASTNode> compile(String script);\n\t// Compiles the specified source code and returns its statement block, the script class (if desired) and any declared types.\n\tList<ASTNode> compile(String script, CompilePhase compilePhase, boolean statementsOnly);\n}", "des": "This class handles converting Strings to ASTNode lists."}
{"index": 16033, "repo": "groovy-4.0.13", "code": "public enum AutoCloneStyle extends Enum<AutoCloneStyle> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic AutoCloneStyle valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic AutoCloneStyle[] values();\n}", "des": "Intended style to use for cloning when using the @AutoClone annotation."}
{"index": 16034, "repo": "groovy-4.0.13", "code": "public class BenchmarkInterceptor extends Object implements Interceptor {\n\t// This code is executed after the method is called.\n\tObject afterInvoke(Object object, String methodName, Object[] arguments, Object result);\n\t// This code is executed before the method is called.\n\tObject beforeInvoke(Object object, String methodName, Object[] arguments);\n\t// The call should be invoked separately\n\tboolean doInvoke();\n\t// Returns the raw data associated with the current benchmark run.\n\tMap getCalls();\n}", "des": "Interceptor that registers the timestamp of each method call before and after invocation."}
{"index": 16035, "repo": "groovy-4.0.13", "code": "public class BinaryExpression extends Expression {\n\tExpression getLeftExpression();\n\tToken getOperation();\n\tExpression getRightExpression();\n\tString getText();\n\tboolean isSafe();\n\t// Creates an assignment expression in which the specified expression is written into the specified variable name.\n\tstatic BinaryExpression newAssignmentExpression(Variable variable, Expression rhs);\n}", "des": "Represents two expressions and an operation"}
{"index": 16036, "repo": "groovy-4.0.13", "code": "public class BindableASTTransformation extends Object implements ASTTransformation, org.objectweb.asm.Opcodes {\n\t// Adds the necessary field and methods to support property change support.\n\tprotected void addPropertyChangeSupport(ClassNode declaringClass);\n\t// Creates a statement body similar to: this.firePropertyChange(\"field\", field, field = value)\n\tprotected Statement createBindableStatement(PropertyNode propertyNode, Expression fieldExpression);\n}", "des": "Handles generation of code for the @Bindable annotation when @Vetoable is not present."}
{"index": 16037, "repo": "groovy-4.0.13", "code": "public class Binding extends GroovyObjectSupport {\n\t// Overloaded to make variables appear as bean properties or via the subscript operator\n\tObject getProperty(String property);\n\tObject getVariable(String name);\n\tMap getVariables();\n\t// Simple check for whether the binding contains a particular variable or not.\n\tboolean hasVariable(String name);\n\t// remove the variable with the specified name\n\tvoid removeVariable(String name);\n}", "des": "Represents the variable bindings of a script which can be altered from outside the script object or created outside of a script and passed into it."}
{"index": 16038, "repo": "groovy-4.0.13", "code": "public class BooleanClosureWrapper extends Object {\n\t// normal closure call\n\tboolean call(Object... args);\n\t// Bridge for a call based on a map entry.\n\t<K, V> boolean callForMap(Map.Entry<K,V> entry);\n}", "des": "Helper class for internal use only."}
{"index": 16039, "repo": "groovy-4.0.13", "code": "public class BytecodeHelper extends Object {\n\t// Deprecated.\n\tstatic boolean box(org.objectweb.asm.MethodVisitor mv, Class type);\n\t// Deprecated.\n\tstatic boolean box(org.objectweb.asm.MethodVisitor mv, ClassNode type);\n\t// Converts a primitive type to boolean.\n\tstatic void convertPrimitiveToBoolean(org.objectweb.asm.MethodVisitor mv, ClassNode type);\n\tstatic void doCast(org.objectweb.asm.MethodVisitor mv, Class type);\n\tstatic void doCast(org.objectweb.asm.MethodVisitor mv, ClassNode type);\n}", "des": "A helper class for bytecode generation with AsmClassGenerator."}
{"index": 16040, "repo": "groovy-4.0.13", "code": "public class BytecodeInterface8 extends Object {\n\t// get value from byte[] using normalized index\n\tstatic byte bArrayGet(byte[] a, int i);\n\t// set value from byte[] using normalized index\n\tstatic void bArraySet(byte[] a, int i, byte v);\n\t// get value from char[] using normalized index\n\tstatic char cArrayGet(char[] a, int i);\n\t// set value from char[] using normalized index\n\tstatic void cArraySet(char[] a, int i, char v);\n}", "des": "This class contains methods special to optimizations used directly from bytecode in Groovy 1.8"}
{"index": 16041, "repo": "groovy-4.0.13", "code": "public class BytecodeSequence extends Statement {\n\t// Returns the singular BytecodeInstruction.\n\tBytecodeInstruction getBytecodeInstruction();\n\tList<?> getInstructions();\n\t// Delegates to the visit method used for this class.\n\tvoid visit(GroovyCodeVisitor visitor);\n}", "des": "This class represents a sequence of BytecodeInstructions or ASTNodes."}
{"index": 16042, "repo": "groovy-4.0.13", "code": "public class CastExpression extends Expression {\n\tstatic CastExpression asExpression(ClassNode type, Expression expression);\n\tExpression getExpression();\n\tString getText();\n\tboolean isCoerce();\n\tboolean isIgnoringAutoboxing();\n\t// If strict mode is true, then when the compiler generates a cast, it will disable Groovy casts and rely on a strict cast (CHECKCAST).\n\tboolean isStrict();\n\tvoid setCoerce(boolean coerce);\n\tvoid setExpression(Expression expression);\n}", "des": "Represents a typecast expression."}
{"index": 16043, "repo": "groovy-4.0.13", "code": "public class CharSequenceReader extends Reader implements Serializable {\n\t// Close resets the reader back to the start and removes any marked position.\n\tvoid close();\n\t// Mark the current position.\n\tvoid mark(int readAheadLimit);\n\t// Mark is supported (returns true).\n\tboolean markSupported();\n\t// Read a single character.\n\tint read();\n\t// Read the specified number of characters into the array.\n\tint read(char[] array, int offset, int length);\n}", "des": "Reader implementation that can read from String, StringBuffer, StringBuilder, CharBuffer or GString."}
{"index": 16044, "repo": "groovy-4.0.13", "code": "public class CharsetToolkit extends Object {\n\t// Retrieves all the available Charsets on the platform, among which the default charset.\n\tstatic Charset[] getAvailableCharsets();\n\tCharset getCharset();\n\t// Retrieves the default Charset\n\tCharset getDefaultCharset();\n\t// Retrieve the default charset of the system.\n\tstatic Charset getDefaultSystemCharset();\n\t// Gets the enforce8Bit flag, in case we do not want to ever get a US-ASCII encoding.\n\tboolean getEnforce8Bit();\n}", "des": "Utility class to guess the encoding of a given text file."}
{"index": 16045, "repo": "groovy-4.0.13", "code": "public abstract class ClassCodeExpressionTransformer extends ClassCodeVisitorSupport implements ExpressionTransformer {\n\t// Set the source position of toSet including its property expression if it has one.\n\tprotected static void setSourcePosition(Expression toSet, Expression origNode);\n\t// NOTE: This method does not visit Expressions within Closures, for performance and historical reasons.\n\tExpression transform(Expression expr);\n\tprotected void visitAnnotation(AnnotationNode node);\n}", "des": "Transforms expressions in a whole class."}
{"index": 16046, "repo": "groovy-4.0.13", "code": "public class ClassCompletionVerifier extends ClassCodeVisitorSupport {\n\tClassNode getClassNode();\n\tprotected SourceUnit getSourceUnit();\n\tvoid visitBinaryExpression(BinaryExpression expression);\n\tvoid visitCatchStatement(CatchStatement cs);\n\t// Visit a ClassNode.\n\tvoid visitClass(ClassNode node);\n\tvoid visitConstantExpression(ConstantExpression expression);\n\t// Visit a ConstructorNode.\n\tvoid visitConstructor(ConstructorNode node);\n\tvoid visitDeclarationExpression(DeclarationExpression expression);\n}", "des": "Checks that a class satisfies various conditions including: Incorrect class or method access modifiers No abstract methods appear in a non-abstract class Existence and correct visibility for inherited members Invalid attempts to override final members"}
{"index": 16047, "repo": "groovy-4.0.13", "code": "public class ClassFinder extends Object {\n\t// Returns the found classes\n\tstatic Map<String,Set<String>> find(URI classpathEntryURI, String packageName);\n\t// Returns the found classes\n\tstatic Map<String,Set<String>> find(URI classpathEntryURI, String packageName, boolean recursive);\n}", "des": "Find classes under the specified package via some classpath entry Usage:"}
{"index": 16048, "repo": "groovy-4.0.13", "code": "public class ClassHelper extends Object {\n\tstatic ClassNode dynamicType();\n\t// Returns the single abstract method of a class node, if it is a SAM type, or null otherwise.\n\tstatic MethodNode findSAM(ClassNode type);\n\t// Returns a super class or interface for a given class depending on supplied target.\n\tstatic ClassNode getNextSuperClass(ClassNode source, ClassNode target);\n\tstatic ClassNode getUnwrapper(ClassNode cn);\n}", "des": "Helper for ClassNode and classes handling them."}
{"index": 16049, "repo": "groovy-4.0.13", "code": "public class ClassNodeResolver extends Object {\n\t// caches a ClassNode\n\tvoid cacheClass(String name, ClassNode res);\n\t// Extension point for custom lookup logic of finding ClassNodes.\n\tClassNodeResolver.LookupResult findClassNode(String name, CompilationUnit compilationUnit);\n\t// returns whatever is stored in the class cache for the given name\n\tClassNode getFromClassCache(String name);\n}", "des": "This class is used as a pluggable way to resolve class names."}
{"index": 16050, "repo": "groovy-4.0.13", "code": "public static class ClassNodeResolver.LookupResult extends Object {\n\t// returns the ClassNode\n\tClassNode getClassNode();\n\t// returns the SourceUnit\n\tSourceUnit getSourceUnit();\n\t// returns true if a ClassNode is stored\n\tboolean isClassNode();\n\t// returns true if a SourceUnit is stored\n\tboolean isSourceUnit();\n}", "des": "Helper class to return either a SourceUnit or ClassNode."}
{"index": 16051, "repo": "groovy-4.0.13", "code": "public class ClassNodeUtils extends Object {\n\t// Adds methods from interfaces and parent interfaces.\n\tstatic void addDeclaredMethodsFromAllInterfaces(ClassNode cNode, Map<String,MethodNode> methodsMap);\n\t// Adds methods from all interfaces.\n\tstatic void addDeclaredMethodsFromInterfaces(ClassNode cNode, Map<String,MethodNode> methodsMap);\n}", "des": "Utility class for working with ClassNodes"}
{"index": 16052, "repo": "groovy-4.0.13", "code": "public abstract class Closure<V> extends GroovyObjectSupport implements Cloneable, Runnable, GroovyCallable<V>, Serializable {\n\t// Alias for rightShift(Closure)\n\t<W> Closure<W> andThen(Closure<W> other);\n\t// Call andThen(Closure) on this.\n\tClosure<V> andThenSelf();\n\t// Call andThen(Closure) on this exactly times times.\n\tClosure<V> andThenSelf(int times);\n\tClosure asWritable();\n\t// Invokes the closure with no arguments, returning any value if applicable.\n\tV call();\n}", "des": "Represents any closure object in Groovy."}
{"index": 16053, "repo": "groovy-4.0.13", "code": "public class ClosureExpression extends Expression {\n\t// This gets the code statement of the closure.\n\tStatement getCode();\n\tParameter[] getParameters();\n\tString getText();\n\tVariableScope getVariableScope();\n\tboolean isParameterSpecified();\n\t// This sets the code statement of the closure.\n\tvoid setCode(Statement code);\n\tvoid setVariableScope(VariableScope variableScope);\n}", "des": "Represents a closure expression such as"}
{"index": 16054, "repo": "groovy-4.0.13", "code": "public interface ClosureInvokingMethod {\n\t// Returns the original closure that this method invokes\n\tClosure getClosure();\n\t// The method name\n\tString getName();\n\t// Is it a static method?\n\tboolean isStatic();\n}", "des": "An interface for MetaMethods that invoke closures to implements."}
{"index": 16055, "repo": "groovy-4.0.13", "code": "public final class ClosureMetaClass extends MetaClassImpl {\n\t// Adds a new MetaBeanProperty to this MetaClass\n\tvoid addMetaBeanProperty(MetaBeanProperty mp);\n\t// adds a MetaMethod to this class.\n\tvoid addMetaMethod(MetaMethod method);\n\t// Adds an instance method to this metaclass.\n\tvoid addNewInstanceMethod(Method method);\n\t// Adds a static method to this metaclass.\n\tvoid addNewStaticMethod(Method method);\n\tprotected void applyPropertyDescriptors(PropertyDescriptor[] propertyDescriptors);\n}", "des": "A metaclass for closures generated by the Groovy compiler."}
{"index": 16056, "repo": "groovy-4.0.13", "code": "public class ClosureMetaMethod extends MetaMethod implements ClosureInvokingMethod {\n\tstatic ClosureMetaMethod copy(ClosureMetaMethod closureMethod);\n\tstatic List<MetaMethod> createMethodList(String name, Class declaringClass, Closure closure);\n\t// Retrieves the closure that is invoked by this MetaMethod\n\tClosure getClosure();\n\t// Gets the class where this method is declared\n\tCachedClass getDeclaringClass();\n\tCachedMethod getDoCall();\n\t// Returns the modifiers for this method\n\tint getModifiers();\n}", "des": "A MetaMethod that accepts a closure in the constructor which is invoked when the MetaMethod is called."}
{"index": 16057, "repo": "groovy-4.0.13", "code": "public abstract class ClosureSignatureHint extends Object {\n\t// Produces a ClassNode given a string representing the type.\n\tprotected ClassNode findClassNode(SourceUnit sourceUnit, CompilationUnit compilationUnit, String className);\n\t// Subclasses should implement this method, which returns the list of accepted closure signatures.\n\tabstract List<ClassNode[]> getClosureSignatures(MethodNode node, SourceUnit sourceUnit, CompilationUnit compilationUnit, String[] options, ASTNode usage);\n}", "des": "A closure signature hint class is always used in conjunction with the ClosureParams annotation."}
{"index": 16058, "repo": "groovy-4.0.13", "code": "public class ClosureStaticMetaMethod extends MetaMethod implements ClosureInvokingMethod {\n\t// Retrieves the closure that is invoked by this MetaMethod\n\tClosure getClosure();\n\t// Gets the class where this method is declared\n\tCachedClass getDeclaringClass();\n\t// Returns the modifiers for this method\n\tint getModifiers();\n\t// Returns the name of the method represented by this class\n\tString getName();\n\t// Access the return type for this method\n\tClass getReturnType();\n}", "des": "This class represents a MetaMethod that is a closure that pretends to be a static method."}
{"index": 16059, "repo": "groovy-4.0.13", "code": "public class ClosureUtils extends Object {\n\t// Converts a ClosureExpression into the String source.\n\tstatic String convertClosureToSource(ReaderSource readerSource, ClosureExpression expression);\n\tstatic Parameter[] getParametersSafe(ClosureExpression ce);\n\t// Returns the constant name associated with the given resolve strategy.\n\tstatic String getResolveStrategyName(int resolveStrategy);\n\tstatic boolean hasImplicitParameter(ClosureExpression ce);\n}", "des": "Handy methods when working with Closure AST data structures."}
{"index": 16060, "repo": "groovy-4.0.13", "code": "public class CommonCache<K,V> extends Object implements EvictableCache<K,V>, ValueConvertable<V,Object>, Serializable {\n\t// Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache.\n\tvoid cleanUpNullReferences();\n\t// Clear the cache\n\tMap<K,V> clearAll();\n\t// Determines if the cache contains an entry for the specified key.\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n}", "des": "Represents a simple key-value cache, which is NOT thread safe and backed by a Map instance"}
{"index": 16061, "repo": "groovy-4.0.13", "code": "public class CompilationUnit extends ProcessingUnit {\n\t// Adds a ClassNode directly to the unit (i.e.\n\tvoid addClassNode(ClassNode node);\n\tvoid addFirstPhaseOperation(CompilationUnit.IPrimaryClassNodeOperation op, int phase);\n\t// Deprecated.\n\tvoid addFirstPhaseOperation(CompilationUnit.PrimaryClassNodeOperation op, int phase);\n\tvoid addJavaCompilationUnits(Set<JavaFileObject> javaCompilationUnitSet);\n\tvoid addNewPhaseOperation(CompilationUnit.ISourceUnitOperation op, int phase);\n}", "des": "The CompilationUnit collects all compilation data as it is generated by the compiler system."}
{"index": 16062, "repo": "groovy-4.0.13", "code": "public enum CompilePhase extends Enum<CompilePhase> {\n\t// Returns the CompilePhase for the given integer phase number.\n\tstatic CompilePhase fromPhaseNumber(int phaseNumber);\n\t// Returns the underlying integer Phase number.\n\tint getPhaseNumber();\n\t// Returns the enum constant of this type with the specified name.\n\tstatic CompilePhase valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic CompilePhase[] values();\n}", "des": "The phases of the GroovyCompiler."}
{"index": 16063, "repo": "groovy-4.0.13", "code": "public class Compiler extends Object {\n\t// Compiles a single File.\n\tvoid compile(File file);\n\t// Compiles a series of Files.\n\tvoid compile(File[] files);\n\t// Compiles a series of Files from file names.\n\tvoid compile(String[] files);\n\t// Compiles a string of code.\n\tvoid compile(String name, String code);\n}", "des": "A convenience front end for getting standard compilations done."}
{"index": 16064, "repo": "groovy-4.0.13", "code": "public class CompilerConfiguration extends Object {\n\t// Adds compilation customizers to the compilation process.\n\tCompilerConfiguration addCompilationCustomizers(CompilationCustomizer... customizers);\n\t// Method to configure a CompilerConfiguration by using Properties.\n\tvoid configure(Properties configuration);\n\tBytecodeProcessor getBytecodePostprocessor();\n\t// Returns the ASM bytecode version.\n\tint getBytecodeVersion();\n\tList<String> getClasspath();\n}", "des": "Compilation control flags and coordination stuff."}
{"index": 16065, "repo": "groovy-4.0.13", "code": "public class CompileStack extends Object {\n\tvoid addExceptionBlock(org.objectweb.asm.Label start, org.objectweb.asm.Label end, org.objectweb.asm.Label goal, String sig);\n\tvoid applyBlockRecorder();\n\tvoid applyFinallyBlocks(org.objectweb.asm.Label label, boolean isBreakLabel);\n\t// Clears the state of the class.\n\tvoid clear();\n\tboolean containsVariable(String name);\n\t// creates a new named label\n\torg.objectweb.asm.Label createLocalLabel(String name);\n}", "des": "Manages different aspects of the code of a code block like handling labels, defining variables, and scopes."}
{"index": 16066, "repo": "groovy-4.0.13", "code": "public class CompileUnit extends Object implements NodeMetaDataHandler {\n\t// Adds a class to the unit.\n\tvoid addClass(ClassNode node);\n\t// Appends all of the fully-qualified class names in this module into the given map.\n\tvoid addClasses(List<ClassNode> list);\n\t// this method actually does not compile a class.\n\tvoid addClassNodeToCompile(ClassNode node, SourceUnit location);\n\tvoid addGeneratedInnerClass(InnerClassNode icn);\n\tvoid addModule(ModuleNode node);\n\tClassNode getClass(String name);\n}", "des": "Represents the entire contents of a compilation step which consists of one or more ModuleNode instances."}
{"index": 16067, "repo": "groovy-4.0.13", "code": "public final class ComposedClosure<V> extends Closure<V> {\n\t// Invokes the closure with given argument(s), returning any value if applicable.\n\tV call(Object... args);\n\tObject clone();\n\tObject doCall(Object... args);\n\tObject getDelegate();\n\tClass[] getParameterTypes();\n\t// Gets the strategy which the closure uses to resolve methods and properties\n\tint getResolveStrategy();\n\t// Allows the delegate to be changed such as when performing markup building\n\tvoid setDelegate(Object delegate);\n}", "des": "A wrapper for Closure to support composition."}
{"index": 16068, "repo": "groovy-4.0.13", "code": "@ThreadSafe public class ConcurrentCommonCache<K,V> extends Object implements EvictableCache<K,V>, ValueConvertable<V,Object>, Serializable {\n\t// Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache.\n\tvoid cleanUpNullReferences();\n\t// Clear the cache\n\tMap<K,V> clearAll();\n\t// Determines if the cache contains an entry for the specified key.\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n}", "des": "Represents a simple key-value cache, which is thread safe and backed by a Map instance"}
{"index": 16069, "repo": "groovy-4.0.13", "code": "@ThreadSafe public final class ConcurrentLinkedHashMap<K,V> extends AbstractMap<K,V> implements ConcurrentMap<K,V>, Serializable {\n\t// Returns an unmodifiable snapshot Set view of the keys contained in this map.\n\tSet<K> ascendingKeySet();\n\t// Returns an unmodifiable snapshot Set view of the keys contained in this map.\n\tSet<K> ascendingKeySetWithLimit(int limit);\n\t// Returns an unmodifiable snapshot Map view of the mappings contained in this map.\n\tMap<K,V> ascendingMap();\n}", "des": "A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by."}
{"index": 16070, "repo": "groovy-4.0.13", "code": "public static final class ConcurrentLinkedHashMap.Builder<K,V> extends Object {\n\t// Creates a new ConcurrentLinkedHashMap instance.\n\tConcurrentLinkedHashMap<K,V> build();\n\t// Specifies the estimated number of concurrently updating threads.\n\tConcurrentLinkedHashMap.Builder<K,V> concurrencyLevel(int concurrencyLevel);\n\t// Specifies the initial capacity of the hash table (default 16).\n\tConcurrentLinkedHashMap.Builder<K,V> initialCapacity(int initialCapacity);\n}", "des": "A builder that creates ConcurrentLinkedHashMap instances."}
{"index": 16071, "repo": "groovy-4.0.13", "code": "public class ConcurrentReaderHashMap extends AbstractMap implements Cloneable, Serializable {\n\tint capacity();\n\t// Removes all mappings from this map.\n\tvoid clear();\n\t// Returns a shallow copy of this ConcurrentReaderHashMap instance: the keys and values themselves are not cloned.\n\tObject clone();\n\t// Tests if some key maps into the specified value in this table.\n\tboolean contains(Object value);\n\t// Tests if the specified object is a key in this table.\n\tboolean containsKey(Object key);\n}", "des": "A hash table that supports mostly-concurrent reading, but exclusive writing."}
{"index": 16072, "repo": "groovy-4.0.13", "code": "protected static class ConcurrentReaderHashMap.Entry extends Object implements Map.Entry {\n\tboolean equals(Object o);\n\tObject getKey();\n\t// Get the value.\n\tObject getValue();\n}", "des": "ConcurrentReaderHashMap collision list entry."}
{"index": 16073, "repo": "groovy-4.0.13", "code": "public class ConcurrentReferenceHashMap<K,V> extends AbstractMap<K,V> implements Serializable {\n\tV apply(K key, BiFunction<? super K,? super V,? extends V> remappingFunction);\n\tV applyIfAbsent(K key, Function<? super K,? extends V> mappingFunction);\n\tV applyIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction);\n\tSet<Map.Entry<K,V>> cachedEntrySet();\n\t// Removes all of the mappings from this map.\n\tvoid clear();\n}", "des": "An advanced hash table supporting configurable garbage collection semantics of keys and values, optional referential-equality, full concurrency of retrievals, and adjustable expected concurrency for updates."}
{"index": 16074, "repo": "groovy-4.0.13", "code": "public static enum ConcurrentReferenceHashMap.Option extends Enum<ConcurrentReferenceHashMap.Option> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic ConcurrentReferenceHashMap.Option valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic ConcurrentReferenceHashMap.Option[] values();\n}", "des": "Behavior-changing configuration options for the map"}
{"index": 16075, "repo": "groovy-4.0.13", "code": "public static enum ConcurrentReferenceHashMap.ReferenceType extends Enum<ConcurrentReferenceHashMap.ReferenceType> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic ConcurrentReferenceHashMap.ReferenceType valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic ConcurrentReferenceHashMap.ReferenceType[] values();\n}", "des": "An option specifying which Java reference type should be used to refer to a key and/or value."}
{"index": 16076, "repo": "groovy-4.0.13", "code": "public class ConfigObject extends GroovyObjectSupport implements Writable, Map, Cloneable {\n\tvoid clear();\n\t// Returns a shallow copy of this ConfigObject, keys and configuration entries are not cloned.\n\tConfigObject clone();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\tSet entrySet();\n\t// A ConfigObject is a tree structure consisting of nested maps.\n\tMap flatten();\n\t// Flattens this ConfigObject populating the results into the target Map\n\tMap flatten(Map target);\n}", "des": "A ConfigObject at a simple level is a Map that creates configuration entries (other ConfigObjects) when referencing them."}
{"index": 16077, "repo": "groovy-4.0.13", "code": "public class ConfigurationException extends RuntimeException implements GroovyExceptionInterface {\n\t// Returns the causing exception, if available.\n\tThrowable getCause();\n\t// It's always fatal.\n\tboolean isFatal();\n\t// Set fatal is just ignored.\n\tvoid setFatal(boolean fatal);\n}", "des": "Thrown when configuration data is invalid."}
{"index": 16078, "repo": "groovy-4.0.13", "code": "public abstract class ConversionHandler extends Object implements InvocationHandler, Serializable {\n\tprotected boolean checkMethod(Method method);\n\t// Indicates whether some other object is \"equal to\" this one.\n\tboolean equals(Object obj);\n\t// Returns the delegate.\n\tObject getDelegate();\n\t// This method is a default implementation for the invoke method given in InvocationHandler.\n\tObject invoke(Object proxy, Method method, Object[] args);\n}", "des": "This class is a general adapter to map a call to a Java interface to a given delegate."}
{"index": 16079, "repo": "groovy-4.0.13", "code": "public class ConvertedMap extends ConversionHandler {\n\tprotected boolean checkMethod(Method method);\n\t// This method is called for all Methods not defined on Object.\n\tObject invokeCustom(Object proxy, Method method, Object[] args);\n\t// Checks whether a method is a core method from java.lang.Object.\n\tstatic boolean isCoreObjectMethod(Method method);\n}", "des": "This class is a general adapter to adapt a map of closures to any Java interface."}
{"index": 16080, "repo": "groovy-4.0.13", "code": "public abstract class CSTNode extends Object {\n\t// Adds an element to the node.\n\tCSTNode add(CSTNode element);\n\t// Adds all children of the specified node to this one.\n\tvoid addChildrenOf(CSTNode of);\n\t// Creates a Reduction from this node.\n\tabstract Reduction asReduction();\n\t// Returns true if the node can be coerced to the specified type.\n\tboolean canMean(int type);\n\t// Returns the number of non-root elements in the node.\n\tint children();\n}", "des": "An abstract base class for nodes in the concrete syntax tree that is the result of parsing."}
{"index": 16081, "repo": "groovy-4.0.13", "code": "public final class CurriedClosure<V> extends Closure<V> {\n\tObject clone();\n\tObject getDelegate();\n\tClass[] getParameterTypes();\n\t// Gets the strategy which the closure uses to resolve methods and properties\n\tint getResolveStrategy();\n\tObject[] getUncurriedArguments(Object... arguments);\n\t// Allows the delegate to be changed such as when performing markup building\n\tvoid setDelegate(Object delegate);\n}", "des": "A wrapper for Closure to support currying."}
{"index": 16082, "repo": "groovy-4.0.13", "code": "public class DeclarationExpression extends BinaryExpression {\n\tString getText();\n\t// This method returns the left hand side of the declaration cast to the TupleExpression type.\n\tTupleExpression getTupleExpression();\n\t// This method returns the left hand side of the declaration cast to the VariableExpression type.\n\tVariableExpression getVariableExpression();\n}", "des": "Represents one or more local variables."}
{"index": 16083, "repo": "groovy-4.0.13", "code": "public class DecompiledClassNode extends ClassNode {\n\tList<AnnotationNode> getAnnotations();\n\tList<AnnotationNode> getAnnotations(ClassNode type);\n\tlong getCompilationTimeStamp();\n\tList<ConstructorNode> getDeclaredConstructors();\n\t// Finds a field matching the given name in this class.\n\tFieldNode getDeclaredField(String name);\n\t// This method returns a list of all methods of the given name defined in the current class\n\tList<MethodNode> getDeclaredMethods(String name);\n\tList<FieldNode> getFields();\n}", "des": "A ClassNode kind representing the classes coming from *.class files decompiled using ASM."}
{"index": 16084, "repo": "groovy-4.0.13", "code": "public class DefaultGroovyMethods extends DefaultGroovyMethodsSupport {\n\t// Get the absolute value\n\tstatic double abs(Double number);\n\t// Get the absolute value\n\tstatic float abs(Float number);\n\t// Get the absolute value\n\tstatic long abs(Long number);\n\t// Get the absolute value\n\tstatic int abs(Number number);\n\t// Adds all items from the iterable to the Collection.\n\tstatic <T> boolean addAll(Collection<T> self, Iterable<? extends T> items);\n}", "des": "This class defines new groovy methods which appear on normal JDK classes inside the Groovy environment."}
{"index": 16085, "repo": "groovy-4.0.13", "code": "public class DefaultGroovyMethodsSupport extends Object {\n\tprotected static <T> Collection<T> cloneSimilarCollection(Collection<T> orig, int newCapacity);\n\tprotected static <K, V> Map<K,V> cloneSimilarMap(Map<K,V> orig);\n\t// Close the Closeable.\n\tstatic void closeQuietly(Closeable c);\n\t// Close the Closeable.\n\tstatic void closeWithWarning(Closeable closeable);\n\tprotected static <T> T[] createSimilarArray(T[] orig, int newCapacity);\n}", "des": "Support methods for DefaultGroovyMethods and PluginDefaultMethods."}
{"index": 16086, "repo": "groovy-4.0.13", "code": "public class DefaultGroovyStaticMethods extends Object {\n\tstatic File createTempDir(File self);\n\tstatic File createTempDir(File self, String prefix);\n\tstatic File createTempDir(File self, String prefix, String suffix);\n\t// Get the current time in seconds\n\tstatic long currentTimeSeconds(System self);\n\t// Dump the thread dump of all threads\n\tstatic String dumpAll(Thread self);\n\t// Works exactly like ResourceBundle.getBundle(String).\n\tstatic ResourceBundle getBundle(ResourceBundle self, String bundleName);\n}", "des": "This class defines all the new static groovy methods which appear on normal JDK classes inside the Groovy environment."}
{"index": 16087, "repo": "groovy-4.0.13", "code": "public class DefaultMetaClassInfo extends Object {\n\tstatic boolean disabledStandardMetaClass();\n\tstatic DefaultMetaClassInfo.ConstantMetaClassVersioning getCurrentConstantMetaClassVersioning();\n\tstatic DefaultMetaClassInfo.ConstantMetaClassVersioning getNewConstantMetaClassVersioning();\n\t// Returns true if no metaclass creation handle is set and if the original boolean metaclass is used.\n\tstatic boolean isOrigBool();\n}", "des": "WARNING: This class is for internal use only! We use this class to store information about if a default MetaClass is used for certain primitives."}
{"index": 16088, "repo": "groovy-4.0.13", "code": "public enum DefaultsMode extends Enum<DefaultsMode> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic DefaultsMode valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic DefaultsMode[] values();\n}", "des": "Intended mode to use when generating constructors to emulate default parameter values when using the TupleConstructor annotation."}
{"index": 16089, "repo": "groovy-4.0.13", "code": "public class DefaultTypeCheckingExtension extends TypeCheckingExtension {\n\tvoid addHandler(TypeCheckingExtension handler);\n\t// Allows the extension to perform additional tasks after the type checker actually visits a method call.\n\tvoid afterMethodCall(MethodCall call);\n\t// Allows the extension to perform additional tasks after the type checker actually visited a class node.\n\tvoid afterVisitClass(ClassNode node);\n}", "des": "The default type checking handler is used by the standard type checker and doesn't handle any of the type checking errors by default."}
{"index": 16090, "repo": "groovy-4.0.13", "code": "public class DefaultTypeTransformation extends Object {\n\tstatic Collection arrayAsCollection(Object value);\n\tstatic <T> Collection<T> arrayAsCollection(T[] value);\n\tstatic Object asArray(Object object, Class type);\n\tstatic Collection asCollection(Object value);\n\tstatic <T> Collection<T> asCollection(T[] value);\n\tstatic boolean booleanUnbox(Object value);\n\t// Deprecated.\n\tstatic Object box(boolean value);\n\t// Deprecated.\n\tstatic Object box(byte value);\n\t// Deprecated.\n\tstatic Object box(char value);\n}", "des": "Class providing various type conversions, coercions and boxing/unboxing operations."}
{"index": 16091, "repo": "groovy-4.0.13", "code": "public abstract class DelegatingScript extends Script {\n\tObject getDelegate();\n\t// Retrieves a property value.\n\tObject getProperty(String property);\n\t// Invoke a method (or closure in the binding) defined.\n\tObject invokeMethod(String name, Object args);\n\t// Sets the delegation target.\n\tvoid setDelegate(Object delegate);\n\t// Sets the given property to the new value.\n\tvoid setProperty(String property, Object newValue);\n}", "des": "Script that performs method invocations and property access like Closure does."}
{"index": 16092, "repo": "groovy-4.0.13", "code": "public class DoWhileStatement extends Statement implements LoopingStatement {\n\tBooleanExpression getBooleanExpression();\n\t// Gets the loop block.\n\tStatement getLoopBlock();\n\tvoid setBooleanExpression(BooleanExpression booleanExpression);\n\t// Sets the loop block.\n\tvoid setLoopBlock(Statement loopBlock);\n\tvoid visit(GroovyCodeVisitor visitor);\n}", "des": "Represents a do { ..."}
{"index": 16093, "repo": "groovy-4.0.13", "code": "public class DummyClassGenerator extends ClassGenerator {\n\tprotected CompileUnit getCompileUnit();\n\tvoid visitAnnotations(AnnotatedNode node);\n\t// Visit a ClassNode.\n\tvoid visitClass(ClassNode classNode);\n\t// Visit a ConstructorNode.\n\tvoid visitConstructor(ConstructorNode node);\n\t// Visit a FieldNode.\n\tvoid visitField(FieldNode fieldNode);\n\t// Visit a MethodNode.\n\tvoid visitMethod(MethodNode node);\n\tprotected void visitParameter(ASTNode node, Parameter parameter);\n}", "des": "To generate a class that has all the fields and methods, except that fields are not initialized and methods are empty."}
{"index": 16094, "repo": "groovy-4.0.13", "code": "public class EmptyRange<T extends Comparable> extends AbstractList<T> implements Range<T> {\n\t// Always throws UnsupportedOperationException for an empty range.\n\tboolean add(T o);\n\t// Always throws UnsupportedOperationException for an empty range.\n\tboolean addAll(int index, Collection<? extends T> c);\n\t// Always throws UnsupportedOperationException for an empty range.\n\tboolean addAll(Collection<? extends T> c);\n\t// Never true for an empty range.\n\tboolean containsWithinBounds(Object o);\n}", "des": "Constructing Ranges like 0..<0"}
{"index": 16095, "repo": "groovy-4.0.13", "code": "public class EncodingAwareBufferedWriter extends BufferedWriter {\n\t// The encoding as returned by the underlying OutputStreamWriter.\n\tString getEncoding();\n\t// The encoding as returned by the underlying OutputStreamWriter.\n\tString getNormalizedEncoding();\n}", "des": "A buffered writer only for OutputStreamWriter that is aware of the encoding of the OutputStreamWriter."}
{"index": 16096, "repo": "groovy-4.0.13", "code": "public class EncodingGroovyMethods extends Object {\n\t// Decode the String from Base64 into a byte array.\n\tstatic byte[] decodeBase64(String value);\n\t// Decodes a Base64 URL and Filename Safe encoded String into a byte array.\n\tstatic byte[] decodeBase64Url(String value);\n\t// Decodes a hex string to a byte array.\n\tstatic byte[] decodeHex(String value);\n\t// digest the byte array\n\tstatic String digest(byte[] self, String algorithm);\n}", "des": "This class defines all the encoding/decoding groovy methods which enhance the normal JDK classes when inside the Groovy environment."}
{"index": 16097, "repo": "groovy-4.0.13", "code": "public class ErrorCollector extends Object implements Serializable {\n\tvoid addCollectorContents(ErrorCollector that);\n\tvoid addError(String error, CSTNode context, SourceUnit source);\n\t// Adds a non-fatal error to the message set, which may cause a failure if the error threshold is exceeded.\n\tvoid addError(Message message);\n\t// Adds an optionally-fatal error to the message set.\n\tvoid addError(Message message, boolean fatal);\n\tvoid addError(SyntaxException error, SourceUnit source);\n}", "des": "A base class for collecting messages and errors during processing."}
{"index": 16098, "repo": "groovy-4.0.13", "code": "public class ErrorReporter extends Object {\n\t// Runs the report once all initialization is complete.\n\tprotected void dispatch(Throwable object, boolean child);\n\t// Prints a line to the underlying PrintStream\n\tprotected void println(String line);\n\tprotected void println(StringBuffer line);\n\t// For Exception.\n\tprotected void report(Exception e, boolean child);\n\t// For everything else.\n\tprotected void report(Throwable e, boolean child);\n}", "des": "Provides services for reporting compilation errors to the user."}
{"index": 16099, "repo": "groovy-4.0.13", "code": "public class Eval extends Object {\n\t// Evaluates the specified String expression and returns the result.\n\tstatic Object me(String expression);\n\t// Evaluates the specified String expression and makes the parameter available inside the script, returning the result.\n\tstatic Object me(String symbol, Object object, String expression);\n}", "des": "Allow easy integration from Groovy into Java through convenience methods."}
{"index": 16100, "repo": "groovy-4.0.13", "code": "public interface EvictableCache<K,V> extends MemoizeCache<K,V>, Map<K,V> {\n\t// Clear the cache\n\tdefault void clear();\n\t// Clear the cache\n\tMap<K,V> clearAll();\n\t// Determines if the cache contains an entry for the specified key.\n\tboolean containsKey(Object key);\n\t// Get all keys associated to cached values\n\tSet<K> keys();\n\t// Remove the cached value by the key\n\tV remove(Object key);\n\t// Get the size of the cache\n\tint size();\n\t// Get all cached values\n\tCollection<V> values();\n}", "des": "Represents an evictable memoize cache with its essential methods"}
{"index": 16101, "repo": "groovy-4.0.13", "code": "public static enum EvictableCache.EvictionStrategy extends Enum<EvictableCache.EvictionStrategy> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic EvictableCache.EvictionStrategy valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic EvictableCache.EvictionStrategy[] values();\n}", "des": "Represents an eviction strategy for the cache with limited size"}
{"index": 16102, "repo": "groovy-4.0.13", "code": "public class ExceptionMessage extends Message {\n\t// Returns the underlying Exception.\n\tException getCause();\n\t// Writes out a nicely formatted summary of the exception.\n\tvoid write(PrintWriter output, Janitor janitor);\n}", "des": "A class for error messages produced by the parser system."}
{"index": 16103, "repo": "groovy-4.0.13", "code": "public class Expando extends GroovyObjectSupport {\n\t// Factory method to create a new Map used to store the expando properties map\n\tprotected Map createMap();\n\t// This allows equals to be overridden by a closure field method attached to the expando object.\n\tboolean equals(Object obj);\n\tList getMetaPropertyValues();\n\tMap getProperties();\n\t// Retrieves a property value.\n\tObject getProperty(String property);\n\t// Invokes the given method.\n\tObject invokeMethod(String name, Object args);\n}", "des": "Represents a dynamically expandable bean."}
{"index": 16104, "repo": "groovy-4.0.13", "code": "public class ExpandoMetaClass extends MetaClassImpl implements GroovyObject {\n\tvoid addMixinClass(MixinInMetaClass mixin);\n\tObject castToMixedType(Object obj, Class type);\n\t// checks if the initialisation of the class id complete.\n\tprotected void checkInitalised();\n\t// Create a CallSite\n\tCallSite createConstructorSite(CallSite site, Object[] args);\n\tCallSite createPogoCallCurrentSite(CallSite site, Class sender, String name, Object[] args);\n}", "des": "ExpandoMetaClass is a MetaClass that behaves like an Expando, allowing the addition or replacement of methods, properties and constructors on the fly."}
{"index": 16105, "repo": "groovy-4.0.13", "code": "public class ExpandoMetaClassCreationHandle extends MetaClassRegistry.MetaClassCreationHandle {\n\tprotected MetaClass createNormalMetaClass(Class theClass, MetaClassRegistry registry);\n\tstatic void disable();\n\t// Enables the ExpandoMetaClassCreationHandle with the registry ExpandoMetaClassCreationHandle.enable();\n\tstatic void enable();\n\tboolean hasModifiedMetaClass(ExpandoMetaClass emc);\n}", "des": "A handle for the MetaClassRegistry that changes all classes loaded into the Grails VM to use ExpandoMetaClass instances"}
{"index": 16106, "repo": "groovy-4.0.13", "code": "public abstract class Expression extends AnnotatedNode {\n\tClassNode getType();\n\tvoid setType(ClassNode t);\n\t// Return a copy of the expression calling the transformer on any nested expressions\n\tabstract Expression transformExpression(ExpressionTransformer transformer);\n\t// Transforms the list of expressions\n\tprotected List<Expression> transformExpressions(List<? extends Expression> expressions, ExpressionTransformer transformer);\n}", "des": "Represents a base class for expressions which evaluate as an object"}
{"index": 16107, "repo": "groovy-4.0.13", "code": "public class ExtendedVerifier extends ClassCodeVisitorSupport {\n\tprotected SourceUnit getSourceUnit();\n\t// Deprecated.\n\tprotected boolean isAnnotationCompatible();\n\tprotected void visitAnnotations(AnnotatedNode node, int target);\n\t// Visit a ClassNode.\n\tvoid visitClass(ClassNode node);\n\t// Visit a ConstructorNode.\n\tvoid visitConstructor(ConstructorNode node);\n\tvoid visitDeclarationExpression(DeclarationExpression expression);\n\t// Visit a FieldNode.\n\tvoid visitField(FieldNode node);\n}", "des": "A specialized Groovy AST visitor meant to perform additional verifications upon the current AST."}
{"index": 16108, "repo": "groovy-4.0.13", "code": "public abstract class FactoryBuilderSupport extends Binding {\n\t// Add an attribute delegate so it can intercept attributes being set.\n\tClosure addAttributeDelegate(Closure attrDelegate);\n\tvoid addDisposalClosure(Closure closure);\n\t// Add a postInstantiate delegate so it can intercept nodes after they are created.\n\tClosure addPostInstantiateDelegate(Closure delegate);\n}", "des": "Mix of BuilderSupport and SwingBuilder's factory support."}
{"index": 16109, "repo": "groovy-4.0.13", "code": "public class FieldASTTransformation extends ClassCodeExpressionTransformer implements ASTTransformation, org.objectweb.asm.Opcodes {\n\tprotected SourceUnit getSourceUnit();\n\t// NOTE: This method does not visit Expressions within Closures, for performance and historical reasons.\n\tExpression transform(Expression expr);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n\tvoid visitClosureExpression(ClosureExpression expression);\n}", "des": "Handles transformation for the @Field annotation."}
{"index": 16110, "repo": "groovy-4.0.13", "code": "public class FieldNode extends AnnotatedNode implements Variable {\n\tboolean equals(Object obj);\n\t// expression used to initialize the variable or null of there is no initialization.\n\tExpression getInitialExpression();\n\tExpression getInitialValueExpression();\n\tint getModifiers();\n\t// the name of the variable\n\tString getName();\n\t// the type before wrapping primitives type of the variable\n\tClassNode getOriginType();\n\tClassNode getOwner();\n\t// the type of the variable\n\tClassNode getType();\n}", "des": "Represents a field (member variable)"}
{"index": 16111, "repo": "groovy-4.0.13", "code": "public class FileReaderSource extends AbstractReaderSource {\n\tFile getFile();\n\t// Returns a new Reader on the underlying source object.\n\tReader getReader();\n\t// Returns a URI for the file of this source.\n\tURI getURI();\n}", "des": "A ReaderSource for source files."}
{"index": 16112, "repo": "groovy-4.0.13", "code": "public class FileSystemCompiler extends Object {\n\tstatic int checkFiles(String[] filenames);\n\t// Same as main(args) except that exceptions are thrown out instead of causing the VM to exit.\n\tstatic void commandLineCompile(String[] args);\n\t// Same as main(args) except that exceptions are thrown out instead of causing the VM to exit and the lookup for .groovy files can be controlled\n\tstatic void commandLineCompile(String[] args, boolean lookupUnnamedFiles);\n}", "des": "Command-line compiler (aka."}
{"index": 16113, "repo": "groovy-4.0.13", "code": "public enum FileType extends Enum<FileType> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic FileType valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic FileType[] values();\n}", "des": "Represents particular files of interest."}
{"index": 16114, "repo": "groovy-4.0.13", "code": "public enum FileVisitResult extends Enum<FileVisitResult> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic FileVisitResult valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic FileVisitResult[] values();\n}", "des": "Represents special return values for the 'preDir', 'postDir' and 'visit'/supplied Closures used with ResourceGroovyMethods.traverse(java.io.File, java.util.Map, groovy.lang.Closure) and related methods to control subsequent traversal behavior."}
{"index": 16115, "repo": "groovy-4.0.13", "code": "public class ForStatement extends Statement implements LoopingStatement {\n\tExpression getCollectionExpression();\n\t// Gets the loop block.\n\tStatement getLoopBlock();\n\tParameter getVariable();\n\tVariableScope getVariableScope();\n\tClassNode getVariableType();\n\tvoid setCollectionExpression(Expression collectionExpression);\n\t// Sets the loop block.\n\tvoid setLoopBlock(Statement loopBlock);\n\tvoid setVariableScope(VariableScope variableScope);\n\tvoid visit(GroovyCodeVisitor visitor);\n}", "des": "Represents a standard for loop in Groovy"}
{"index": 16116, "repo": "groovy-4.0.13", "code": "public class GenericsUtils extends Object {\n\tstatic Map<String,ClassNode> addMethodGenerics(MethodNode current, Map<String,ClassNode> oldSpec);\n\t// Deprecated. You shouldn't call this method because it is inherently unreliable\n\tstatic GenericsType[] alignGenericTypes(GenericsType[] redirectGenericTypes, GenericsType[] parameterizedTypes, GenericsType[] alignmentTarget);\n}", "des": "Utility methods to deal with generic types."}
{"index": 16117, "repo": "groovy-4.0.13", "code": "public class GenericsVisitor extends ClassCodeVisitorSupport {\n\tprotected SourceUnit getSourceUnit();\n\tvoid visitArrayExpression(ArrayExpression expression);\n\tvoid visitCastExpression(CastExpression expression);\n\t// Visit a ClassNode.\n\tvoid visitClass(ClassNode node);\n\tvoid visitConstructorCallExpression(ConstructorCallExpression expression);\n\tprotected void visitConstructorOrMethod(MethodNode node, boolean isConstructor);\n\tvoid visitDeclarationExpression(DeclarationExpression expression);\n}", "des": "Verify correct usage of generics."}
{"index": 16118, "repo": "groovy-4.0.13", "code": "public class GrabAnnotationTransformation extends ClassCodeVisitorSupport implements ASTTransformation, CompilationUnitAware {\n\tSourceUnit getSourceUnit();\n\tvoid setCompilationUnit(CompilationUnit compilationUnit);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n\t// Adds the annotation to the internal target list if a match is found.\n\tvoid visitAnnotations(AnnotatedNode node);\n}", "des": "Transformation for declarative dependency management."}
{"index": 16119, "repo": "groovy-4.0.13", "code": "public class Grape extends Object {\n\tstatic void addResolver(Map<String,Object> args);\n\tstatic Map<String,Map<String,List<String>>> enumerateGrapes();\n\t// Global flag to ignore checksums.\n\tstatic boolean getDisableChecksums();\n\t// This is a static access auto download enabler.\n\tstatic boolean getEnableAutoDownload();\n\t// This is a static access kill-switch.\n\tstatic boolean getEnableGrapes();\n\tstatic GrapeEngine getInstance();\n\tstatic void grab(String endorsed);\n}", "des": "Facade to GrapeEngine."}
{"index": 16120, "repo": "groovy-4.0.13", "code": "public class GroovyBugError extends AssertionError {\n\t// Returns the bug text to describe this error\n\tString getBugText();\n\tThrowable getCause();\n\t// Returns the detail message string of this error.\n\tString getMessage();\n\t// Sets the bug text to describe this error\n\tvoid setBugText(String msg);\n}", "des": "This class represents an error that is thrown when a bug is recognized inside the runtime."}
{"index": 16121, "repo": "groovy-4.0.13", "code": "public class GroovyCategorySupport extends Object {\n\t// This method is used to pull all the new methods out of the local thread context with a particular name.\n\tstatic GroovyCategorySupport.CategoryMethodList getCategoryMethods(String name);\n\tstatic AtomicInteger getCategoryNameUsage(String name);\n\tstatic String getPropertyCategoryGetterName(String propertyName);\n\tstatic String getPropertyCategorySetterName(String propertyName);\n}", "des": "Support methods for Groovy category usage"}
{"index": 16122, "repo": "groovy-4.0.13", "code": "public class GroovyClassLoader extends URLClassLoader {\n\t// adds a classpath to this classloader.\n\tvoid addClasspath(String path);\n\t// adds a URL to the classloader.\n\tvoid addURL(URL url);\n\t// Removes all classes from the class cache.\n\tvoid clearCache();\n\t// Closes this GroovyClassLoader and clears any caches it maintains.\n\tvoid close();\n\t// creates a ClassCollector for a new compilation.\n\tprotected GroovyClassLoader.ClassCollector createCollector(CompilationUnit unit, SourceUnit su);\n}", "des": "A ClassLoader which can load Groovy classes."}
{"index": 16123, "repo": "groovy-4.0.13", "code": "public interface GroovyClassVisitor {\n\t// Visit a ClassNode.\n\tvoid visitClass(ClassNode node);\n\t// Visit a ConstructorNode.\n\tvoid visitConstructor(ConstructorNode node);\n\t// Visit a FieldNode.\n\tvoid visitField(FieldNode node);\n\t// Visit a MethodNode.\n\tvoid visitMethod(MethodNode node);\n\t// Visit a PropertyNode.\n\tvoid visitProperty(PropertyNode node);\n}", "des": "A special visitor for working with the structure of a class."}
{"index": 16124, "repo": "groovy-4.0.13", "code": "public class GroovyCollections extends Object {\n\t// Finds all combinations of items from the given Iterable aggregate of collections.\n\tstatic List combinations(Iterable collections);\n\t// Finds all combinations of items from the given collections.\n\tstatic List combinations(Object[] collections);\n\tstatic <T> List<List<T>> inits(Iterable<T> collections);\n\t// Selects the maximum value found in an Iterable.\n\tstatic <T> T max(Iterable<T> items);\n}", "des": "A Collections utility class"}
{"index": 16125, "repo": "groovy-4.0.13", "code": "public class Groovydoc extends Object {\n\tboolean equals(Object o);\n\t// Get the content of groovydoc\n\tString getContent();\n\t// Get the holder of the groovydoc\n\tGroovydocHolder getHolder();\n\t// TODO Get list of groovydoc tags\n\tList<GroovydocTag> getTagList();\n\t// Tests if groovydoc is present\n\tboolean isPresent();\n}", "des": "Represents groovydoc"}
{"index": 16126, "repo": "groovy-4.0.13", "code": "public interface GroovydocHolder<T> {\n\t// Get the groovydoc\n\tGroovydoc getGroovydoc();\n\t// Get GroovydocHolder instance\n\tT getInstance();\n}", "des": "Represents Groovydoc Holder"}
{"index": 16127, "repo": "groovy-4.0.13", "code": "public class GroovyMain extends Object {\n\tstatic String buildConfigScriptText(List<String> transforms);\n\t// Get a new GroovyCodeSource for a script which may be given as a location (isScript is true) or as text (isScript is false).\n\tprotected GroovyCodeSource getScriptSource(boolean isScriptFile, String script);\n\t// Deprecated.\n\tString getText(String uriOrFilename);\n\t// Hunt for the script file by calling searchForGroovyScriptFile(String).\n\tFile huntForTheScriptFile(String input);\n}", "des": "A Command line to execute groovy."}
{"index": 16128, "repo": "groovy-4.0.13", "code": "public interface GroovyObject {\n\t// Returns the metaclass for a given class.\n\tMetaClass getMetaClass();\n\t// Retrieves a property value.\n\tdefault Object getProperty(String propertyName);\n\t// Invokes the given method.\n\tdefault Object invokeMethod(String name, Object args);\n\t// Allows the MetaClass to be replaced with a derived implementation.\n\tvoid setMetaClass(MetaClass metaClass);\n\t// Sets the given property to the new value.\n\tdefault void setProperty(String propertyName, Object newValue);\n}", "des": "The interface implemented by all Groovy objects."}
{"index": 16129, "repo": "groovy-4.0.13", "code": "public abstract class GroovyObjectSupport extends Object implements GroovyObject {\n\t// Returns the metaclass for a given class.\n\tMetaClass getMetaClass();\n\t// Allows the MetaClass to be replaced with a derived implementation.\n\tvoid setMetaClass(MetaClass metaClass);\n}", "des": "Base class for Java objects wishing to be Groovy objects."}
{"index": 16130, "repo": "groovy-4.0.13", "code": "public class GroovyParserBaseVisitor<Result> extends org.antlr.v4.runtime.tree.AbstractParseTreeVisitor<Result> implements GroovyParserVisitor<Result> {\n\t// Visit a parse tree produced by the additiveExprAlt labeled alternative in GroovyParser.expression().\n\tResult visitAdditiveExprAlt(GroovyParser.AdditiveExprAltContext ctx);\n\t// Visit a parse tree produced by the andExprAlt labeled alternative in GroovyParser.expression().\n\tResult visitAndExprAlt(GroovyParser.AndExprAltContext ctx);\n}", "des": "This class provides an empty implementation of GroovyParserVisitor, which can be extended to create a visitor which only needs to handle a subset of the available methods."}
{"index": 16131, "repo": "groovy-4.0.13", "code": "public interface GroovyParserVisitor<Result> extends org.antlr.v4.runtime.tree.ParseTreeVisitor<Result> {\n\t// Visit a parse tree produced by the additiveExprAlt labeled alternative in GroovyParser.expression().\n\tResult visitAdditiveExprAlt(GroovyParser.AdditiveExprAltContext ctx);\n\t// Visit a parse tree produced by the andExprAlt labeled alternative in GroovyParser.expression().\n\tResult visitAndExprAlt(GroovyParser.AndExprAltContext ctx);\n}", "des": "This interface defines a complete generic visitor for a parse tree produced by GroovyParser."}
{"index": 16132, "repo": "groovy-4.0.13", "code": "public class GroovyPrintStream extends PrintStream {\n\t// Prints an object Groovy style.\n\tvoid print(Object obj);\n\t// Prints an object Groovy style followed by a newline.\n\tvoid println(Object obj);\n}", "des": "A PrintStream that outputs objects in Groovy style."}
{"index": 16133, "repo": "groovy-4.0.13", "code": "public interface GroovyRunner {\n\t// Returns true if this runner is able to run the given class.\n\tboolean canRun(Class<?> scriptClass, GroovyClassLoader loader);\n\t// Runs the given class.\n\tObject run(Class<?> scriptClass, GroovyClassLoader loader);\n}", "des": "Classes which can run scripts should implement this interface."}
{"index": 16134, "repo": "groovy-4.0.13", "code": "public class GroovyRunnerRegistry extends Object implements Map<String,GroovyRunner>, Iterable<GroovyRunner> {\n\t// Clears all registered runners from the registry and resets the registry so that it contains only the default set of runners.\n\tvoid clear();\n\t// Returns true if a runner was registered with the specified key.\n\tboolean containsKey(Object key);\n\t// Returns true if registry contains the given runner instance.\n\tboolean containsValue(Object runner);\n}", "des": "Registry of services that implement the GroovyRunner interface."}
{"index": 16135, "repo": "groovy-4.0.13", "code": "public class GroovyScriptEngine extends Object implements ResourceConnector {\n\t// Creates a Script with a given scriptName and binding.\n\tScript createScript(String scriptName, Binding binding);\n\tCompilerConfiguration getConfig();\n\tprotected long getCurrentTime();\n\t// Returns the GroovyClassLoader associated with this script engine instance.\n\tGroovyClassLoader getGroovyClassLoader();\n}", "des": "Specific script engine able to reload modified scripts as well as dealing properly with dependent scripts."}
{"index": 16136, "repo": "groovy-4.0.13", "code": "public class GroovyShell extends GroovyObjectSupport {\n\t// Evaluates some script against the current Binding and returns the result\n\tObject evaluate(GroovyCodeSource codeSource);\n\t// Evaluates some script against the current Binding and returns the result\n\tObject evaluate(File file);\n\t// Evaluates some script against the current Binding and returns the result\n\tObject evaluate(Reader in);\n}", "des": "Represents a groovy shell capable of running arbitrary groovy scripts"}
{"index": 16137, "repo": "groovy-4.0.13", "code": "public class GroovyTypeCheckingExtensionSupport extends AbstractTypeCheckingExtension {\n\t// Allows the extension to perform additional tasks after the type checker actually visits a method call.\n\tvoid afterMethodCall(MethodCall call);\n\t// Allows the extension to perform additional tasks after the type checker actually visited a class node.\n\tvoid afterVisitClass(ClassNode node);\n}", "des": "Base class for type checking extensions written in Groovy."}
{"index": 16138, "repo": "groovy-4.0.13", "code": "public abstract static class GroovyTypeCheckingExtensionSupport.TypeCheckingDSL extends Script {\n\t// Retrieves a property value.\n\tObject getProperty(String property);\n\t// Invoke a method (or closure in the binding) defined.\n\tObject invokeMethod(String name, Object args);\n\t// Sets the given property to the new value.\n\tvoid setProperty(String property, Object newValue);\n}", "des": "Event handler registration: setup Registers closure that runs after the type checker finishes initialization finish Registers closure that runs after the type checker completes type checking beforeVisitClass Registers closure that runs before type checking a class afterVisitClass Registers closure that runs after having finished the visit of a type checked class beforeVisitMethod Registers closure that runs before type checking a method body afterVisitMethod Registers closure that runs after type checking a method body beforeMethodCall Registers closure that runs before the type checker starts type checking a method call afterMethodCall Registers closure that runs once the type checker has finished type checking a method call methodNotFound Registers closure that runs when it fails to find an appropriate method for a method call ambiguousMethods Registers closure that runs when the type checker cannot choose between several candidate methods onMethodSelection Registers closure that runs when it finds a method appropriate for a method call unresolvedVariable Registers closure that runs when the type checker finds an unresolved variable unresolvedProperty Registers closure that runs when the type checker cannot find a property on the receiver unresolvedAttribute Registers closure that runs when the type checker cannot find an attribute on the receiver incompatibleAssignment Registers closure that runs when the type checker thinks that the right-hand side of an assignment is incompatible with the left-hand side incompatibleReturnType Registers closure that runs when the type checker thinks that a return value is incompatibe with the return type Expression categorization: isAnnotationConstantExpression Determines if argument is an AnnotationConstantExpression isArgumentListExpression Determines if argument is an ArgumentListExpression isArrayExpression Determines if argument is an ArrayExpression isAttributeExpression Determines if argument is an AttributeExpression isBinaryExpression Determines if argument is a BinaryExpression isBitwiseNegationExpression Determines if argument is a BitwiseNegationExpression isBooleanExpression Determines if argument is a BooleanExpression isCastExpression Determines if argument is a CastExpression isClassExpression Determines if argument is a ClassExpression isClosureExpression Determines if argument is a ClosureExpression isConstantExpression Determines if argument is a ConstantExpression isConstructorCallExpression Determines if argument is a ConstructorCallExpression isDeclarationExpression Determines if argument is a DeclarationExpression isElvisOperatorExpression Determines if argument is an ElvisOperatorExpression isEmptyExpression Determines if argument is an EmptyExpression isFieldExpression Determines if argument is a FieldExpression isGStringExpression Determines if argument is a GStringExpression isLambdaExpression Determines if argument is a LambdaExpression isListExpression Determines if argument is a ListExpression isMapExpression Determines if argument is a MapExpression isMapEntryExpression Determines if argument is a MapEntryExpression isMethodCallExpression Determines if argument is a MethodCallExpression isMethodPointerExpression Determines if argument is a MethodPointerExpression isMethodReferenceExpression Determines if argument is a MethodReferenceExpression isNamedArgumentListExpression Determines if argument is a NamedArgumentListExpression isNotExpression Determines if argument is a NotExpression isPostfixExpression Determines if argument is a PostfixExpression isPrefixExpression Determines if argument is a PrefixExpression isPropertyExpression Determines if argument is a PropertyExpression isRangeExpression Determines if argument is a RangeExpression isSpreadExpression Determines if argument is a SpreadExpression isSpreadMapExpression Determines if argument is a SpreadMapExpression isStaticMethodCallExpression Determines if argument is a StaticMethodCallExpression isTernaryExpression Determines if argument is a TernaryExpression isTupleExpression Determines if argument is a TupleExpression isUnaryMinusExpression Determines if argument is a UnaryMinusExpression isUnaryPlusExpression Determines if argument is a UnaryPlusExpression isVariableExpression Determines if argument is a VariableExpression General utility: Delegates to AbstractTypeCheckingExtension Imports static members of ClassHelper Imports static members of StaticTypeCheckingSupport"}
{"index": 16139, "repo": "groovy-4.0.13", "code": "public class ImmutableASTTransformation extends AbstractASTTransformation implements CompilationUnitAware {\n\t// For compatibility with pre 2.5 compiled classes\n\tstatic Object checkImmutable(Class<?> clazz, String fieldName, Object field);\n\tstatic Object checkImmutable(Class<?> clazz, String fieldName, Object field, List<String> knownImmutableFieldNames, List<Class> knownImmutableClasses);\n}", "des": "Handles generation of code for the @Immutable annotation."}
{"index": 16140, "repo": "groovy-4.0.13", "code": "public class ImportCustomizerFactory extends AbstractFactory {\n\t// Does this factory \"Own\" its child closure.\n\tboolean isHandlesNodeChildren();\n\tObject newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes);\n\t// Only called if it isLeaf is false and isHandlesNodeChildren is true\n\tboolean onNodeChildren(FactoryBuilderSupport builder, Object node, Closure childContent);\n}", "des": "This factory allows the generation of an import customizer."}
{"index": 16141, "repo": "groovy-4.0.13", "code": "public class IndentPrinter extends Object {\n\tvoid decrementIndent();\n\tvoid flush();\n\tboolean getAutoIndent();\n\tint getIndentLevel();\n\tvoid incrementIndent();\n\t// Prints a character.\n\tvoid print(char c);\n\t// Prints a string.\n\tvoid print(String text);\n\t// Prints the current indent level.\n\tvoid printIndent();\n\t// Prints an end-of-line character (if enabled via addNewLines property).\n\tvoid println();\n\t// Prints a string followed by an end of line character.\n\tvoid println(String text);\n}", "des": "A helper class for printing indented text."}
{"index": 16142, "repo": "groovy-4.0.13", "code": "public class IndyGuardsFiltersAndSignatures extends Object {\n\t// GroovyObject.invokeMethod(String, Object) path as fallback.\n\tstatic Object invokeGroovyObjectInvoker(MissingMethodException e, Object receiver, String name, Object[] args);\n\t// Guard to check if the argument is null.\n\tstatic boolean isNull(Object o);\n\t// called by handle\n\tstatic boolean isSameMetaClass(MetaClass mc, Object receiver);\n}", "des": "This class contains guards, runtime filters and MethodType signatures used by indy."}
{"index": 16143, "repo": "groovy-4.0.13", "code": "public class IndyInterface extends Object {\n\t// bootstrap method for method calls from Groovy compiled code with indy enabled.\n\tstatic CallSite bootstrap(MethodHandles.Lookup caller, String callType, MethodType type, String name, int flags);\n\t// Get the cached methodhandle.\n\tstatic Object fromCache(MutableCallSite callSite, Class<?> sender, String methodName, int callID, Boolean safeNavigation, Boolean thisCall, Boolean spreadCall, Object dummyReceiver, Object[] arguments);\n}", "des": "Bytecode level interface for bootstrap methods used by invokedynamic."}
{"index": 16144, "repo": "groovy-4.0.13", "code": "public static enum IndyInterface.CallType extends Enum<IndyInterface.CallType> {\n\tstatic IndyInterface.CallType fromCallSiteName(String callSiteName);\n\t// Returns the name of the call site type\n\tString getCallSiteName();\n\t// Returns the enum constant of this type with the specified name.\n\tstatic IndyInterface.CallType valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic IndyInterface.CallType[] values();\n}", "des": "Enum for easy differentiation between call types"}
{"index": 16145, "repo": "groovy-4.0.13", "code": "public static enum IndyInterface.CallType extends Enum<IndyInterface.CallType> {\n\tstatic IndyInterface.CallType fromCallSiteName(String callSiteName);\n\t// Returns the name of the call site type\n\tString getCallSiteName();\n\t// Returns the enum constant of this type with the specified name.\n\tstatic IndyInterface.CallType valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic IndyInterface.CallType[] values();\n}", "des": "Enum for easy differentiation between call types"}
{"index": 16146, "repo": "groovy-4.0.13", "code": "public class InlinedASTCustomizerFactory extends AbstractFactory implements PostCompletionFactory {\n\t// Does this factory \"Own\" its child closure.\n\tboolean isHandlesNodeChildren();\n\tObject newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes);\n\t// Only called if it isLeaf is false and isHandlesNodeChildren is true\n\tboolean onNodeChildren(FactoryBuilderSupport builder, Object node, Closure childContent);\n}", "des": "This factory lets a user define a compilation customizer without having to define an anonymous inner class."}
{"index": 16147, "repo": "groovy-4.0.13", "code": "public class InputStreamReaderSource extends AbstractReaderSource {\n\t// Returns true if the source can be restarted (ie.\n\tboolean canReopenSource();\n\t// Returns a new Reader on the underlying source object.\n\tReader getReader();\n\t// TODO: Should return the URI for this source, but we can't know what it is here.\n\tURI getURI();\n}", "des": "A ReaderSource for source strings."}
{"index": 16148, "repo": "groovy-4.0.13", "code": "public class Inspector extends Object {\n\tprotected String[] fieldInfo(PropertyValue pv);\n\tprotected String[] fieldInfo(Field field);\n\tprotected Tuple2<Object,String[]> fieldWithInfo(PropertyValue pv);\n\t// Get the Class Properties of the object under inspection.\n\tString[] getClassProps();\n\tprotected Class getClassUnderInspection();\n\t// Get info about instance and class Methods that are dynamically added through Groovy.\n\tObject[] getMetaMethods();\n}", "des": "The Inspector provides a unified access to an object's information that can be determined by introspection."}
{"index": 16149, "repo": "groovy-4.0.13", "code": "public interface Interceptor {\n\t// This code is executed after the method is optionally called.\n\tObject afterInvoke(Object object, String methodName, Object[] arguments, Object result);\n\t// This code is executed before the method is optionally called.\n\tObject beforeInvoke(Object object, String methodName, Object[] arguments);\n\tboolean doInvoke();\n}", "des": "Implementers of this interface can be registered in the ProxyMetaClass for notifications about method calls for objects managed by the ProxyMetaClass."}
{"index": 16150, "repo": "groovy-4.0.13", "code": "public class IntRange extends AbstractList<Integer> implements Range<Integer>, Serializable {\n\t// Creates a new NumberRange with the same from and to as this IntRange but with a step size of stepSize.\n\t<T extends Number & Comparable>NumberRange by(T stepSize);\n\tboolean contains(Object value);\n\tboolean containsAll(Collection other);\n\t// Indicates whether an object is greater than or equal to the from value for the range and less than or equal to the to value.\n\tboolean containsWithinBounds(Object o);\n}", "des": "Represents a list of Integer objects starting at and potentially including a specified from value up (or down) to and potentially including a given to value."}
{"index": 16151, "repo": "groovy-4.0.13", "code": "public class InvokerHelper extends Object {\n\t// Deprecated.\n\tstatic void append(Appendable out, Object object);\n\t// Converts the given object into an array; if it's an array then just cast otherwise wrap it in an array\n\tstatic Object[] asArray(Object arguments);\n\tstatic Iterator<Object> asIterator(Object o);\n\tstatic List asList(Object value);\n\tstatic void assertFailed(Object expression, Object message);\n\tstatic Object[] asUnwrappedArray(Object arguments);\n\tstatic Object bitwiseNegate(Object value);\n}", "des": "A static helper class to make bytecode generation easier and act as a facade over the Invoker"}
{"index": 16152, "repo": "groovy-4.0.13", "code": "public class IO extends Object implements Closeable {\n\t// Close all streams.\n\tvoid close();\n\t// Flush both output streams.\n\tvoid flush();\n\t// Returns the verbosity level.\n\tIO.Verbosity getVerbosity();\n\t// Check if the verbosity level is set to IO.Verbosity.DEBUG.\n\tboolean isDebug();\n\t// Check if the verbosity level is set to IO.Verbosity.INFO.\n\tboolean isInfo();\n\t// Check if the verbosity level is set to IO.Verbosity.QUIET.\n\tboolean isQuiet();\n}", "des": "Container for input/output handles."}
{"index": 16153, "repo": "groovy-4.0.13", "code": "public class IOGroovyMethods extends DefaultGroovyMethodsSupport {\n\t// Traverse through each the specified stream reading bytes into a buffer and calling the 2 parameter closure with this buffer and the number of bytes.\n\tstatic void eachByte(InputStream is, int bufferLen, Closure closure);\n\t// Traverse through each byte of the specified stream.\n\tstatic void eachByte(InputStream is, Closure closure);\n}", "des": "This class defines new groovy methods for Readers, Writers, InputStreams and OutputStreams which appear on normal JDK classes inside the Groovy environment."}
{"index": 16154, "repo": "groovy-4.0.13", "code": "public class IteratorClosureAdapter<T> extends Closure {\n\tList<T> asList();\n\tprotected Object doCall(T argument);\n\t// Returns the metaclass for a given class.\n\tMetaClass getMetaClass();\n\t// Allows the MetaClass to be replaced with a derived implementation.\n\tvoid setMetaClass(MetaClass metaClass);\n}", "des": "A closure which stores calls in a List so that method calls can be iterated over in a 'yield' style way"}
{"index": 16155, "repo": "groovy-4.0.13", "code": "public class Java16 extends Java10 {\n\t// Returns a handle with bound receiver to invokeSpecial the given method.\n\tObject getInvokeSpecialHandle(Method method, Object receiver);\n\t// Gives the version the plugin is made for\n\tint getVersion();\n\t// Invokes a handle produced by #getInvokeSpecialdHandle\n\tObject invokeHandle(Object handle, Object[] args);\n\tprotected void makeRecordComponents(CompileUnit cu, ClassNode classNode, Class<?> clazz);\n\tprotected MethodHandles.Lookup newLookup(Class<?> declaringClass);\n}", "des": "Additional Java 16 based functions will be added here as needed."}
{"index": 16156, "repo": "groovy-4.0.13", "code": "public class Java8 extends Object implements VMPlugin {\n\t// check whether the member can be accessed or not\n\tboolean checkAccessible(Class<?> callerClass, Class<?> declaringClass, int memberModifiers, boolean allowIllegalAccess);\n\t// The following scenarios can not set accessible, i.e.\n\tboolean checkCanSetAccessible(AccessibleObject accessibleObject, Class<?> callerClass);\n\tvoid configureAnnotation(AnnotationNode node);\n\tprotected void configureAnnotation(AnnotationNode node, Annotation annotation);\n}", "des": "Java 8 based functions."}
{"index": 16157, "repo": "groovy-4.0.13", "code": "public class JavaAwareCompilationUnit extends CompilationUnit {\n\t// Adds a set of source files to the unit.\n\tvoid addSources(File[] files);\n\t// Adds a set of file paths to the unit.\n\tvoid addSources(String[] paths);\n\t// Configures its debugging mode and classloader classpath from a given compiler configuration.\n\tvoid configure(CompilerConfiguration configuration);\n\tJavaCompilerFactory getCompilerFactory();\n}", "des": "Compilation Unit capable of compiling Java source files."}
{"index": 16158, "repo": "groovy-4.0.13", "code": "@Incubating public class JavaShell extends Object {\n\t// Compile and return the main class\n\tClass<?> compile(String className, Iterable<String> options, String src);\n\t// Compile and return the main class\n\tClass<?> compile(String className, String src);\n\t// Compile and return all classes\n\tMap<String,Class<?>> compileAll(String className, Iterable<String> options, String src);\n\t// Compile and return all classes\n\tMap<String,Class<?>> compileAll(String className, String src);\n}", "des": "A shell for compiling or running pure Java code"}
{"index": 16159, "repo": "groovy-4.0.13", "code": "public class JavaStubCompilationUnit extends CompilationUnit {\n\t// Adds a source file to the unit.\n\tSourceUnit addSource(File file);\n\t// Adds a source file to the unit.\n\tSourceUnit addSource(URL url);\n\t// Synonym for compile(Phases.ALL).\n\tvoid compile();\n\t// Configures its debugging mode and classloader classpath from a given compiler configuration.\n\tvoid configure(CompilerConfiguration config);\n\tint getStubCount();\n}", "des": "Compilation unit to only generate stubs."}
{"index": 16160, "repo": "groovy-4.0.13", "code": "public interface LazyInitializable {\n\t// do initialization\n\tvoid doInit();\n\t// Check if the object is initialized.\n\tboolean isInitialized();\n\tdefault void lazyInit();\n\t// Mark the object initialized.\n\tvoid setInitialized(boolean initialized);\n}", "des": "A LazyInitializable is an object that can be initialized lazily."}
{"index": 16161, "repo": "groovy-4.0.13", "code": "public class LineColumnReader extends BufferedReader {\n\t// Closes the stream and releases any system resources associated with it.\n\tvoid close();\n\tlong getColumn();\n\tlong getColumnMark();\n\tlong getLine();\n\tlong getLineMark();\n\t// Marks the present position in the stream.\n\tvoid mark(int readAheadLimit);\n\t// Reads a single character.\n\tint read();\n\t// Reads characters into an array.\n\tint read(char[] chars);\n\t// Reads characters into a portion of an array.\n\tint read(char[] chars, int startOffset, int length);\n}", "des": "The LineColumnReader is an extension to BufferedReader that keeps track of the line and column information of where the cursor is."}
{"index": 16162, "repo": "groovy-4.0.13", "code": "public final class ListWithDefault<T> extends Object implements List<T> {\n\tvoid add(int i, T t);\n\tboolean add(T t);\n\tboolean addAll(int i, Collection<? extends T> ts);\n\tboolean addAll(Collection<? extends T> ts);\n\tvoid clear();\n\tboolean contains(Object o);\n\tboolean containsAll(Collection<?> objects);\n\tboolean equals(Object obj);\n\t// Returns the element at the given index but grows the list if needed.\n\tT get(int index);\n}", "des": "A wrapper for List which automatically grows the list when either ListWithDefault.get(int) or ListWithDefault.getAt(int) is called with an index greater than or equal to size()."}
{"index": 16163, "repo": "groovy-4.0.13", "code": "public class LoaderConfiguration extends Object {\n\t// Adds a classpath to this configuration.\n\tvoid addClassPath(String path);\n\t// Adds a file to the classpath if it exists.\n\tvoid addFile(File file);\n\t// Adds a file to the classpath if it exists.\n\tvoid addFile(String filename);\n\t// configures this loader with a stream\n\tvoid configure(InputStream is);\n\t// The classpath as URL[] from this configuration.\n\tURL[] getClassPathUrls();\n\t// The extra grab configuration.\n\tList<String> getGrabUrls();\n}", "des": "Class used to configure a RootLoader from a stream or by using its methods."}
{"index": 16164, "repo": "groovy-4.0.13", "code": "public interface LoopingStatement {\n\t// Gets the loop block.\n\tStatement getLoopBlock();\n\t// Sets the loop block.\n\tvoid setLoopBlock(Statement loopBlock);\n}", "des": "This is an AST Node that provides some sort of looping mechanism."}
{"index": 16165, "repo": "groovy-4.0.13", "code": "@ThreadSafe public final class LRUCache<K,V> extends Object implements MemoizeCache<K,V> {\n\t// Remove all entries holding SoftReferences to gc-evicted objects.\n\tvoid cleanUpNullReferences();\n\t// Gets a value from the cache\n\tV get(K key);\n\t// Try to get the value from cache.\n\tV getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider);\n\t// Associates the specified value with the specified key in the cache.\n\tV put(K key, V value);\n}", "des": "A cache backed by a ConcurrentLinkedHashMap"}
{"index": 16166, "repo": "groovy-4.0.13", "code": "public class ManagedConcurrentLinkedQueue<T> extends Object implements Iterable<T> {\n\t// Adds the specified value to the queue.\n\tvoid add(T value);\n\t// Returns true if this queue contains no elements.\n\tboolean isEmpty();\n\t// Returns an iterator over all non-null values in this queue.\n\tIterator<T> iterator();\n\t// Returns an array containing all values from this queue in the sequence they were added.\n\tT[] toArray(T[] tArray);\n}", "des": "A queue that stores values wrapped in a Reference, the type of which is determined by the provided ReferenceBundle."}
{"index": 16167, "repo": "groovy-4.0.13", "code": "public class ManagedConcurrentValueMap<K,V> extends Object {\n\t// Returns the value stored for the given key at the point of call.\n\tV get(K key);\n\t// Sets a new value for a given key.\n\tvoid put(K key, V value);\n\t// Sets a new bundle used for reference creation.\n\tvoid setBundle(ReferenceBundle bundle);\n}", "des": "This is a basic implementation of a map able to forget its values."}
{"index": 16168, "repo": "groovy-4.0.13", "code": "public class MapConstructorASTTransformation extends AbstractASTTransformation implements CompilationUnitAware {\n\t// If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tString getAnnotationName();\n\tvoid setCompilationUnit(CompilationUnit unit);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles generation of code for the @MapConstructor annotation."}
{"index": 16169, "repo": "groovy-4.0.13", "code": "public class Maps extends Object {\n\t// Returns the inverse view of this map, and duplicated key is not allowed\n\tstatic <K, V> Map<V,K> inverse(Map<K,V> map);\n\t// Returns the inverse view of this map\n\tstatic <K, V> Map<V,K> inverse(Map<K,V> map, boolean force);\n\tstatic <K, V> Map<K,V> of(K k1, V v1);\n\tstatic <K, V> Map<K,V> of(K k1, V v1, K k2, V v2);\n\tstatic <K, V> Map<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3);\n\tstatic <K, V> Map<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4);\n}", "des": "Map utilities."}
{"index": 16170, "repo": "groovy-4.0.13", "code": "public final class MapWithDefault<K,V> extends Object implements Map<K,V> {\n\tvoid clear();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\tSet<Map.Entry<K,V>> entrySet();\n\tboolean equals(Object obj);\n\t// Returns the value to which the specified key is mapped, or the default value as specified by the initializing closure if this map contains no mapping for the key.\n\tV get(Object key);\n\tboolean isEmpty();\n\tSet<K> keySet();\n}", "des": "A wrapper for Map which allows a default value to be specified using a closure."}
{"index": 16171, "repo": "groovy-4.0.13", "code": "public abstract class Memoize extends Object {\n\t// Creates a new closure delegating to the supplied one and memoizing all return values by the arguments.\n\tstatic <V> Closure<V> buildMemoizeFunction(MemoizeCache<Object,Object> cache, Closure<V> closure);\n}", "des": "Implements memoize for Closures."}
{"index": 16172, "repo": "groovy-4.0.13", "code": "public interface MemoizeCache<K,V> {\n\t// Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache.\n\tvoid cleanUpNullReferences();\n\t// Gets a value from the cache\n\tV get(K key);\n\t// Try to get the value from cache.\n\tdefault V getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider);\n\t// Associates the specified value with the specified key in the cache.\n\tV put(K key, V value);\n}", "des": "Represents a memoize cache with its essential methods"}
{"index": 16173, "repo": "groovy-4.0.13", "code": "public abstract class Message extends Object {\n\t// Creates a new Message from the specified text and data.\n\tstatic Message create(String text, Object data, ProcessingUnit owner);\n\t// Creates a new Message from the specified text.\n\tstatic Message create(String text, ProcessingUnit owner);\n\t// Creates a new Message from the specified SyntaxException.\n\tstatic Message create(SyntaxException error, SourceUnit owner);\n\t// Writes this message to the specified PrintWriter.\n\tfinal void write(PrintWriter writer);\n}", "des": "A base class for compilation messages."}
{"index": 16174, "repo": "groovy-4.0.13", "code": "public class MessageSource extends GroovyObjectSupport {\n\t// Format a message (based on MessageFormat) using the message from the resource bundles using the given code as a pattern and the given objects as arguments.\n\tString format(String code, Object[] args);\n\t// Get a raw message from the resource bundles using the given code.\n\tString getMessage(String code);\n\t// Retrieves a property value.\n\tObject getProperty(String name);\n}", "des": "Message source backed up by one or more ResourceBundle instances for simple i18n support."}
{"index": 16175, "repo": "groovy-4.0.13", "code": "public class MetaArrayLengthProperty extends MetaProperty {\n\t// Get this property from the given object.\n\tObject getProperty(Object object);\n\t// Sets the property on the given object to the new value\n\tvoid setProperty(Object object, Object newValue);\n}", "des": "Represents the length property of an array"}
{"index": 16176, "repo": "groovy-4.0.13", "code": "public class MetaBeanProperty extends MetaProperty {\n\t// Gets the field of this property\n\tCachedField getField();\n\t// Get the getter method.\n\tMetaMethod getGetter();\n\t// Gets the visibility modifiers for the property as defined by the getter and setter methods.\n\tint getModifiers();\n\t// Get the property of the given object.\n\tObject getProperty(Object object);\n\t// Get the setter method.\n\tMetaMethod getSetter();\n\t// Sets the field of this property\n\tvoid setField(CachedField field);\n}", "des": "Represents a property on a bean which may have a getter and/or a setter"}
{"index": 16177, "repo": "groovy-4.0.13", "code": "public interface MetaClass extends MetaObjectProtocol {\n\t// Retrieves the value of an attribute (field).\n\tObject getAttribute(Class sender, Object receiver, String messageName, boolean useSuper);\n\t// Obtains a reference to the original AST for the MetaClass if it is available at runtime\n\tClassNode getClassNode();\n\t// Retrieves a list of MetaMethods held by this class.\n\tList<MetaMethod> getMetaMethods();\n\t// Retrieves a list of MetaMethods held by the class.\n\tList<MetaMethod> getMethods();\n}", "des": "A MetaClass within Groovy defines the behaviour of any given Groovy or Java class."}
{"index": 16178, "repo": "groovy-4.0.13", "code": "public class MetaClassImpl extends Object implements MetaClass, MutableMetaClass {\n\t// Adds a new MetaBeanProperty to this MetaClass\n\tvoid addMetaBeanProperty(MetaBeanProperty mp);\n\t// adds a MetaMethod to this class.\n\tvoid addMetaMethod(MetaMethod method);\n\tprotected void addMetaMethodToIndex(MetaMethod method, MetaMethodIndex.Header header);\n\t// Adds an instance method to this metaclass.\n\tvoid addNewInstanceMethod(Method method);\n}", "des": "Allows methods to be dynamically added to existing classes at runtime"}
{"index": 16179, "repo": "groovy-4.0.13", "code": "public static final class MetaClassImpl.MetaConstructor extends MetaMethod {\n\tCachedConstructor getCachedConstrcutor();\n\t// Gets the class where this method is declared\n\tCachedClass getDeclaringClass();\n\t// Returns the modifiers for this method\n\tint getModifiers();\n\t// Returns the name of the method represented by this class\n\tString getName();\n\t// Access the return type for this method\n\tClass getReturnType();\n\t// Invoke this method\n\tObject invoke(Object object, Object[] arguments);\n}", "des": "This is a helper class introduced in Groovy 2.1.0, which is used only by indy."}
{"index": 16180, "repo": "groovy-4.0.13", "code": "public interface MetaClassRegistry {\n\t// Adds a metaclass change listener for constant metaclasses\n\tvoid addMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener);\n\t// Adds a metaclass change listener for constant metaclasses.\n\tvoid addNonRemovableMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener);\n}", "des": "A MetaClassRegistry is an object that is responsible for managing a cache of MetaClass instances."}
{"index": 16181, "repo": "groovy-4.0.13", "code": "public static class MetaClassRegistry.MetaClassCreationHandle extends Object {\n\t// Creates a metaclass implementation for theClass.\n\tfinal MetaClass create(Class theClass, MetaClassRegistry registry);\n\tprotected MetaClass createNormalMetaClass(Class theClass, MetaClassRegistry registry);\n\t// Returns whether custom metaclasses are disabled.\n\tboolean isDisableCustomMetaClassLookup();\n}", "des": "Class used as base for the creation of MetaClass implementations."}
{"index": 16182, "repo": "groovy-4.0.13", "code": "public class MetaClassRegistryChangeEvent extends EventObject {\n\t// Get the class that is updated.\n\tClass getClassToUpdate();\n\t// Returns the instance this event is for.\n\tObject getInstance();\n\t// Get the new MetaClass\n\tMetaClass getNewMetaClass();\n\t// Get the old MetaClass\n\tMetaClass getOldMetaClass();\n\t// Get the MetaClassRegistry that originates this change\n\tMetaClassRegistry getRegistry();\n}", "des": "An event used to propagate metaclass updates"}
{"index": 16183, "repo": "groovy-4.0.13", "code": "public class MetaClassRegistryImpl extends Object implements MetaClassRegistry {\n\t// Adds a listener for constant metaclasses.\n\tvoid addMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener);\n\t// Adds a listener for constant metaclasses.\n\tvoid addNonRemovableMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener);\n}", "des": "A registry of MetaClass instances which caches introspection and reflection information and allows methods to be dynamically added to existing classes at runtime"}
{"index": 16184, "repo": "groovy-4.0.13", "code": "public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n\t// Checks that the given parameters are valid to call this method\n\tvoid checkParameters(Class[] arguments);\n\tObject clone();\n\t// Invokes the method this object represents.\n\tObject doMethodInvoke(Object object, Object[] argumentArray);\n\tprotected static boolean equal(CachedClass[] a, Class[] b);\n\tprotected static boolean equal(CachedClass[] a, CachedClass[] b);\n}", "des": "Represents a Method on a Java object a little like Method except without using reflection to invoke the method"}
{"index": 16185, "repo": "groovy-4.0.13", "code": "public interface MetaObjectProtocol {\n\t// Retrieves an attribute of an instance of the class returned by the getTheClass() method.\n\tObject getAttribute(Object object, String attribute);\n\t// Retrieves an instance MetaMethod for the given name and argument values, using the types of the argument values to establish the chosen MetaMethod\n\tMetaMethod getMetaMethod(String name, Object[] args);\n\t// Returns a MetaProperty for the given name or null if it doesn't exist\n\tMetaProperty getMetaProperty(String name);\n}", "des": "An interface that defines the API usable by clients of Groovy's Meta Object Protocol (MOP)."}
{"index": 16186, "repo": "groovy-4.0.13", "code": "public abstract class MetaProperty extends Object {\n\t// Gets the name for the getter for this property\n\tstatic String getGetterName(String propertyName, Class type);\n\t// Returns the access modifier.\n\tint getModifiers();\n\t// Return the name of the property\n\tString getName();\n\tabstract Object getProperty(Object object);\n\t// Gets the setter for the getter for this property.\n\tstatic String getSetterName(String propertyName);\n\tClass getType();\n}", "des": "Represents a property on a bean which may have a getter and/or a setter"}
{"index": 16187, "repo": "groovy-4.0.13", "code": "public class MethodNode extends AnnotatedNode {\n\tStatement getCode();\n\tClassNode[] getExceptions();\n\tStatement getFirstStatement();\n\tGenericsType[] getGenericsTypes();\n\tint getModifiers();\n\tString getName();\n\tParameter[] getParameters();\n\tClassNode getReturnType();\n\tString getText();\n\t// The type descriptor for a method node is a string containing the name of the method, its return type, and its parameter types in a canonical form.\n\tString getTypeDescriptor();\n}", "des": "Represents a method declaration."}
{"index": 16188, "repo": "groovy-4.0.13", "code": "public class MethodNodeUtils extends Object {\n\t// Gets the code for a method (or constructor) as a block.\n\tstatic BlockStatement getCodeAsBlock(MethodNode mNode);\n\t// For a method node potentially representing a property, returns the name of the property.\n\tstatic String getPropertyName(MethodNode mNode);\n\t// Determines if given method is a getter candidate.\n\tstatic boolean isGetterCandidate(MethodNode mNode);\n}", "des": "Utility class for working with MethodNodes"}
{"index": 16189, "repo": "groovy-4.0.13", "code": "public class MethodRankHelper extends Object {\n\t// If c is a primitive class this method returns a boxed version otherwise c is returned.\n\tprotected static Class boxVar(Class c);\n\t// This is an implementation of DL distance between two Object arrays instead of character streams.\n\tstatic int damerauLevenshteinDistance(Object[] s, Object[] t);\n\t// This is a slightly modified version of the Damerau Levenshtein distance algorithm.\n\tstatic int delDistance(CharSequence s, CharSequence t);\n}", "des": "Utility class for MissingMethodException, MissingPropertyException etc."}
{"index": 16190, "repo": "groovy-4.0.13", "code": "public class MixinInstanceMetaMethod extends MetaMethod {\n\t// Gets the class where this method is declared\n\tCachedClass getDeclaringClass();\n\t// Returns the modifiers for this method\n\tint getModifiers();\n\t// Returns the name of the method represented by this class\n\tString getName();\n\tprotected Class[] getPT();\n\t// Access the return type for this method\n\tClass getReturnType();\n\t// Invoke this method\n\tObject invoke(Object object, Object[] arguments);\n}", "des": "MetaMethod for mixed in classes"}
{"index": 16191, "repo": "groovy-4.0.13", "code": "public interface MutableMetaClass extends MetaClass {\n\t// Adds a new MetaBeanProperty to the MetaClass\n\tvoid addMetaBeanProperty(MetaBeanProperty metaBeanProperty);\n\t// Adds a new MetaMethod to the MetaClass\n\tvoid addMetaMethod(MetaMethod metaMethod);\n\t// adds a new instance method to this MetaClass.\n\tvoid addNewInstanceMethod(Method method);\n\t// adds a new static method to this MetaClass.\n\tvoid addNewStaticMethod(Method method);\n}", "des": "An interface that defines methods that implementers of mutable Meta classes should specify."}
{"index": 16192, "repo": "groovy-4.0.13", "code": "public class NewifyASTTransformation extends ClassCodeExpressionTransformer implements ASTTransformation {\n\tstatic String extractName(String s);\n\tprotected SourceUnit getSourceUnit();\n\t// NOTE: This method does not visit Expressions within Closures, for performance and historical reasons.\n\tExpression transform(Expression expr);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles generation of code for the @Newify AST transform."}
{"index": 16193, "repo": "groovy-4.0.13", "code": "public class NewInstanceMetaMethod extends NewMetaMethod {\n\t// Returns the modifiers for this method\n\tint getModifiers();\n\t// Invoke this method\n\tObject invoke(Object object, Object[] arguments);\n\t// Returns whether this method is static.\n\tboolean isStatic();\n}", "des": "A MetaMethod implementation where the underlying method is really a static helper method on some class but it appears to be an instance method on a class."}
{"index": 16194, "repo": "groovy-4.0.13", "code": "public class NewStaticMetaMethod extends NewMetaMethod {\n\t// Returns the modifiers for this method\n\tint getModifiers();\n\t// Invoke this method\n\tObject invoke(Object object, Object[] arguments);\n\t// Returns whether this method is static.\n\tboolean isStatic();\n}", "des": "A MetaMethod implementation where the underlying method is really a static helper method on some class."}
{"index": 16195, "repo": "groovy-4.0.13", "code": "public class Node extends Object implements Serializable, Cloneable {\n\t// Appends a child to the current node.\n\tboolean append(Node child);\n\t// Creates a new node as a child of the current node.\n\tNode appendNode(Object name);\n\t// Creates a new node as a child of the current node.\n\tNode appendNode(Object name, Object value);\n\t// Creates a new node as a child of the current node.\n\tNode appendNode(Object name, Map attributes);\n}", "des": "Represents an arbitrary tree node which can be used for structured metadata or any arbitrary XML-like tree."}
{"index": 16196, "repo": "groovy-4.0.13", "code": "public class NodeList extends ArrayList {\n\t// Creates a new NodeList containing the same elements as the original (but cloned in the case of Nodes).\n\tObject clone();\n\t// Provides lookup of elements by QName.\n\tNodeList getAt(QName name);\n\t// Provides lookup of elements by non-namespaced name.\n\tNodeList getAt(String name);\n\tvoid plus(Closure c);\n\tNode replaceNode(Closure c);\n\tprotected static void setMetaClass(Class nodelistClass, MetaClass metaClass);\n}", "des": "A List implementation which is returned by queries on a Node which provides some XPath like helper methods for GPath."}
{"index": 16197, "repo": "groovy-4.0.13", "code": "public interface NodeMetaDataHandler {\n\t// Copies all node metadata from the other node to this one\n\tdefault void copyNodeMetaData(NodeMetaDataHandler other);\n\tMap<?,?> getMetaDataMap();\n\t// Returns an unmodifiable view of the current node metadata.\n\tdefault Map<?,?> getNodeMetaData();\n\t// Gets the node metadata.\n\tdefault <T> T getNodeMetaData(Object key);\n\t// Gets the node metadata.\n\tdefault <T> T getNodeMetaData(Object key, Function<?,? extends T> valFn);\n}", "des": "An interface to mark a node being able to handle metadata."}
{"index": 16198, "repo": "groovy-4.0.13", "code": "public class NullCheckASTTransformation extends AbstractASTTransformation {\n\tstatic boolean hasIncludeGenerated(ClassNode cNode);\n\tstatic ThrowStatement makeThrowStmt(String variableName);\n\t// Mark a method as already processed.\n\tstatic void markAsProcessed(MethodNode mn);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles generation of code for the @NullCheck annotation."}
{"index": 16199, "repo": "groovy-4.0.13", "code": "public class NumberRange extends AbstractList<Comparable> implements Range<Comparable>, Serializable {\n\t// For a NumberRange with step size 1, creates a new NumberRange with the same from and to as this NumberRange but with a step size of stepSize.\n\t<T extends Number & Comparable>NumberRange by(T stepSize);\n\t// iterates over all values and returns true if one value matches.\n\tboolean contains(Object value);\n}", "des": "Represents an immutable list of Numbers from a value to a value with a particular step size."}
{"index": 16200, "repo": "groovy-4.0.13", "code": "public class Numbers extends Object {\n\t// Returns true if the specified character is a base-10 digit.\n\tstatic boolean isDigit(char c);\n\t// Returns true if the specified character is a base-16 digit.\n\tstatic boolean isHexDigit(char c);\n\t// Returns true if the specified character is a valid type specifier for a numeric value.\n\tstatic boolean isNumericTypeSpecifier(char c, boolean isDecimal);\n\t// Returns true if the specific character is a base-8 digit.\n\tstatic boolean isOctalDigit(char c);\n}", "des": "Helper class for processing Groovy numeric literals."}
{"index": 16201, "repo": "groovy-4.0.13", "code": "public class ObjectGraphBuilder extends FactoryBuilderSupport {\n\t// Returns the current name of the 'bean' node.\n\tString getBeanFactoryName();\n\t// Returns the current ChildPropertySetter.\n\tObjectGraphBuilder.ChildPropertySetter getChildPropertySetter();\n\t// Returns the classLoader used to load a node's class.\n\tClassLoader getClassLoader();\n\t// Returns the current ClassNameResolver.\n\tObjectGraphBuilder.ClassNameResolver getClassNameResolver();\n}", "des": "A builder for creating object graphs. Each node defines the class to be created and the property on its parent (if any) at the same time."}
{"index": 16202, "repo": "groovy-4.0.13", "code": "public static class ObjectGraphBuilder.DefaultRelationNameResolver extends Object implements ObjectGraphBuilder.RelationNameResolver {\n\t// Handles the common English regular plurals with the following rules.\n\tString resolveChildRelationName(String parentName, Object parent, String childName, Object child);\n\t// Follow the most conventional pattern, returns the parentName unchanged.\n\tString resolveParentRelationName(String parentName, Object parent, String childName, Object child);\n}", "des": "Default impl that returns parentName and childName accordingly."}
{"index": 16203, "repo": "groovy-4.0.13", "code": "public static interface ObjectGraphBuilder.RelationNameResolver {\n\t// Returns the mapping name of child -> parent\n\tString resolveChildRelationName(String parentName, Object parent, String childName, Object child);\n\t// Returns the mapping name of parent -> child\n\tString resolveParentRelationName(String parentName, Object parent, String childName, Object child);\n}", "des": "Strategy for resolving a relationship property name."}
{"index": 16204, "repo": "groovy-4.0.13", "code": "public class ObjectRange extends AbstractList<Comparable> implements Range<Comparable> {\n\t// throws IllegalArgumentException if to and from are incompatible, meaning they e.g.\n\tprotected void checkBoundaryCompatibility();\n\tprotected int compareTo(Comparable first, Comparable second);\n\t// Iterates over all values and returns true if one value matches.\n\tboolean contains(Object value);\n\t// Checks whether a value is between the from and to values of a Range\n\tboolean containsWithinBounds(Object value);\n}", "des": "Represents an inclusive list of objects from a value to a value using comparators."}
{"index": 16205, "repo": "groovy-4.0.13", "code": "public class ObjectUtil extends Object {\n\t// Clone the specified object\n\tstatic <T> T cloneObject(T object);\n\t// Returns the method handle of cloneObject(Object)\n\tstatic MethodHandle getCloneObjectMethodHandle();\n}", "des": "Util for object's operations with checks"}
{"index": 16206, "repo": "groovy-4.0.13", "code": "public enum PackageScopeTarget extends Enum<PackageScopeTarget> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic PackageScopeTarget valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic PackageScopeTarget[] values();\n}", "des": "Intended target when @PackageScope is placed at the class level."}
{"index": 16207, "repo": "groovy-4.0.13", "code": "public class Parameter extends AnnotatedNode implements Variable {\n\tExpression getDefaultValue();\n\t// expression used to initialize the variable or null of there is no initialization.\n\tExpression getInitialExpression();\n\tint getModifiers();\n\t// the name of the variable\n\tString getName();\n\t// the type before wrapping primitives type of the variable\n\tClassNode getOriginType();\n\t// the type of the variable\n\tClassNode getType();\n}", "des": "Represents a parameter on a constructor or method call."}
{"index": 16208, "repo": "groovy-4.0.13", "code": "public abstract class ParserPluginFactory extends Object {\n\t// Deprecated.\n\tstatic ParserPluginFactory antlr2();\n\t// Creates the ANTLR 4 parser.\n\tstatic ParserPluginFactory antlr4();\n\tabstract ParserPlugin createParserPlugin();\n}", "des": "A factory of parser plugin instances."}
{"index": 16209, "repo": "groovy-4.0.13", "code": "public class PluginDefaultGroovyMethods extends DefaultGroovyMethodsSupport {\n\t// Coerce an Optional instance to a boolean value.\n\tstatic boolean asBoolean(Optional<?> optional);\n\t// Returns a Future asynchronously returning a transformed result.\n\tstatic <S, T> Future<T> collect(Future<S> self, Closure<T> transform);\n}", "des": "Defines new Groovy methods which appear on standard Java 8 classes within the Groovy environment."}
{"index": 16210, "repo": "groovy-4.0.13", "code": "public class PluginDefaultGroovyMethods extends DefaultGroovyMethodsSupport {\n\t// Convenience method for logging debug level messages with the platform logger.\n\tstatic void debug(System.Logger logger, String msg);\n\t// Convenience method for logging debug level messages with the platform logger.\n\tstatic void debug(System.Logger logger, String format, Object... params);\n}", "des": "Defines new Groovy methods which appear on normal JDK 9 classes inside the Groovy environment."}
{"index": 16211, "repo": "groovy-4.0.13", "code": "public class ProcessGroovyMethods extends DefaultGroovyMethodsSupport {\n\t// Closes all the streams associated with the process (ignoring any IOExceptions).\n\tstatic void closeStreams(Process self);\n\t// Gets the error stream from a process and reads it to keep the process from blocking due to a full buffer.\n\tstatic Thread consumeProcessErrorStream(Process self, OutputStream err);\n}", "des": "This class defines new groovy methods which appear on normal JDK classes related to process management."}
{"index": 16212, "repo": "groovy-4.0.13", "code": "public abstract class ProcessingUnit extends Object {\n\t// Marks the current phase complete and processes any errors.\n\tvoid completePhase();\n\t// Reconfigures the ProcessingUnit.\n\tvoid configure(CompilerConfiguration configuration);\n\t// Returns the class loader in use by this ProcessingUnit.\n\tGroovyClassLoader getClassLoader();\n\t// Gets the CompilerConfiguration for this ProcessingUnit.\n\tCompilerConfiguration getConfiguration();\n}", "des": "A base class for data structures that can collect messages and errors during processing."}
{"index": 16213, "repo": "groovy-4.0.13", "code": "public interface PropertyAccessInterceptor extends Interceptor {\n\t// Intercepts a getXXX call and returns a result.\n\tObject beforeGet(Object object, String property);\n\t// Intercepts a setXXX call\n\tvoid beforeSet(Object object, String property, Object newValue);\n}", "des": "An interface that adds the ability to intercept property getters/setters"}
{"index": 16214, "repo": "groovy-4.0.13", "code": "@Incubating public abstract class PropertyHandler extends Object {\n\tstatic PropertyHandler createPropertyHandler(AbstractASTTransformation xform, GroovyClassLoader loader, ClassNode cNode);\n\t// Create the getter block used when reading the property including any defensive copying.\n\tStatement createPropGetter(PropertyNode pNode);\n}", "des": "Used to provide custom property handling when getting, setting or initializing properties."}
{"index": 16215, "repo": "groovy-4.0.13", "code": "public class PropertyNode extends AnnotatedNode implements Variable {\n\tFieldNode getField();\n\tStatement getGetterBlock();\n\tString getGetterName();\n\t// If an explicit getterName has been set, return that, otherwise return the default name for the property.\n\tString getGetterNameOrDefault();\n\t// expression used to initialize the variable or null of there is no initialization.\n\tExpression getInitialExpression();\n\tint getModifiers();\n\t// the name of the variable\n\tString getName();\n}", "des": "Represents a property (member variable, a getter and setter)"}
{"index": 16216, "repo": "groovy-4.0.13", "code": "public class Proxy extends GroovyObjectSupport {\n\tObject getAdaptee();\n\t// Invokes the given method.\n\tObject invokeMethod(String name, Object args);\n\tIterator iterator();\n\tvoid setAdaptee(Object adaptee);\n\t// This method is for convenience.\n\tProxy wrap(Object adaptee);\n}", "des": "Dynamic groovy proxy for another object."}
{"index": 16217, "repo": "groovy-4.0.13", "code": "public class ProxyGeneratorAdapter extends org.objectweb.asm.ClassVisitor {\n\tGroovyObject delegatingProxy(Object delegate, Map<Object,Object> map, Object... constructorArgs);\n\t// Ensures that the provided object is wrapped into a closure if it's not a closure.\n\tstatic Closure ensureClosure(Object o);\n\t// Generate a call to the delegate object.\n\tprotected org.objectweb.asm.MethodVisitor makeDelegateCall(String name, String desc, String signature, String[] exceptions, int accessFlags);\n}", "des": "A proxy generator responsible for mapping a map of closures to a class implementing a list of interfaces."}
{"index": 16218, "repo": "groovy-4.0.13", "code": "public class ProxyMetaClass extends MetaClassImpl implements AdaptingMetaClass {\n\t// Returns the MetaClass that this adapter adapts\n\tMetaClass getAdaptee();\n\t// convenience factory method for the most usual case.\n\tstatic ProxyMetaClass getInstance(Class theClass);\n\tInterceptor getInterceptor();\n\t// Interceptors the call to getProperty if a PropertyAccessInterceptor is available\n\tObject getProperty(Class aClass, Object object, String property, boolean useSuper, boolean fromInsideClass);\n}", "des": "As subclass of MetaClass, ProxyMetaClass manages calls from Groovy Objects to POJOs."}
{"index": 16219, "repo": "groovy-4.0.13", "code": "public class QName extends Object implements Serializable {\n\t// Tests this QName for equality with another object.\n\tboolean equals(Object o);\n\t// Gets the Local part for this QName\n\tString getLocalPart();\n\t// Gets the Namespace URI for this QName\n\tString getNamespaceURI();\n\t// Gets the Prefix for this QName\n\tString getPrefix();\n\t// Returns the fully qualified name of this QName\n\tString getQualifiedName();\n\t// Tests if this QName matches another object.\n\tboolean matches(Object o);\n}", "des": "QName class represents the value of a qualified name as specified in XML Schema Part2: Datatypes specification."}
{"index": 16220, "repo": "groovy-4.0.13", "code": "public interface Range<T extends Comparable> extends List<T> {\n\t// Indicates whether an object is greater than or equal to the from value for the range and less than or equal to the to value.\n\tboolean containsWithinBounds(Object o);\n\t// The lower value in the range.\n\tT getFrom();\n\t// The upper value in the range.\n\tT getTo();\n\tString inspect();\n\t// Indicates whether this is a reverse range which iterates backwards starting from the to value and ending on the from value\n\tboolean isReverse();\n}", "des": "A Range represents the list of discrete items between some starting (or from) value and working up towards some ending (or to) value."}
{"index": 16221, "repo": "groovy-4.0.13", "code": "public interface ReaderSource extends HasCleanup {\n\t// Returns true if the source can be restarted (ie.\n\tboolean canReopenSource();\n\t// Cleans up any cached resources used by getLine().\n\tvoid cleanup();\n\t// Returns a line from the source, or null, if unavailable.\n\tString getLine(int lineNumber, Janitor janitor);\n\t// Returns a new Reader on the underlying source object.\n\tReader getReader();\n\t// Returns a URI for this source.\n\tURI getURI();\n}", "des": "An interface for things that can supply (and potentially resupply) a Reader on a source stream."}
{"index": 16222, "repo": "groovy-4.0.13", "code": "public class RecordCompletionASTTransformation extends AbstractASTTransformation {\n\t// If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tString getAnnotationName();\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles completion of code for the @RecordType annotation."}
{"index": 16223, "repo": "groovy-4.0.13", "code": "public class RecordTypeASTTransformation extends AbstractASTTransformation implements CompilationUnitAware {\n\t// If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tString getAnnotationName();\n\tprotected GroovyClassLoader getTransformLoader();\n\t// Indicates that the given classnode is a native JVM record class.\n\tstatic boolean recordNative(ClassNode node);\n\tvoid setCompilationUnit(CompilationUnit unit);\n}", "des": "Handles generation of code for the @RecordType annotation."}
{"index": 16224, "repo": "groovy-4.0.13", "code": "public enum RecordTypeMode extends Enum<RecordTypeMode> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic RecordTypeMode valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic RecordTypeMode[] values();\n}", "des": "Intended mode to use for records when using the @RecordType annotation (or record keyword)."}
{"index": 16225, "repo": "groovy-4.0.13", "code": "public class Reduction extends CSTNode {\n\t// Adds an element to the node.\n\tCSTNode add(CSTNode element);\n\t// Creates a Reduction from this node.\n\tReduction asReduction();\n\t// Returns the specified element, or null.\n\tCSTNode get(int index);\n\t// Returns the root of the node, the Token that indicates its type.\n\tToken getRoot();\n\t// Returns true if the node is a complete expression.\n\tboolean isAnExpression();\n\t// Returns true if the node is completely empty (no root, even).\n\tboolean isEmpty();\n}", "des": "A syntax reduction, produced by the Parser."}
{"index": 16226, "repo": "groovy-4.0.13", "code": "public class Reference<T> extends GroovyObjectSupport implements Serializable {\n\tT get();\n\t// Retrieves a property value.\n\tObject getProperty(String property);\n\t// Invokes the given method.\n\tObject invokeMethod(String name, Object args);\n\tvoid set(T value);\n\t// Sets the given property to the new value.\n\tvoid setProperty(String property, Object newValue);\n}", "des": "Represents a reference to a value"}
{"index": 16227, "repo": "groovy-4.0.13", "code": "public class ReflectionUtils extends Object {\n\tstatic boolean checkAccessible(Class<?> callerClass, Class<?> declaringClass, int memberModifiers, boolean allowIllegalAccess);\n\tstatic boolean checkCanSetAccessible(AccessibleObject accessibleObject, Class<?> caller);\n\t// Gets the immediate calling class, ignoring MOP frames.\n\tstatic Class getCallingClass();\n\t// Gets the called that is matchLevel stack frames before the call, ignoring MOP frames.\n\tstatic Class getCallingClass(int matchLevel);\n}", "des": "This class contains utility methods to determine which class called the current class to multiple levels of depth."}
{"index": 16228, "repo": "groovy-4.0.13", "code": "public class ReflectorLoader extends ClassLoader {\n\t// helper method to define Reflector classes.\n\tClass defineClass(String name, byte[] bytecode, ProtectionDomain domain);\n\t// Tries to find a Groovy class.\n\tprotected Class findClass(String name);\n\t// try to load one of the defined Reflector classes by name.\n\tClass getLoadedClass(String name);\n\t// Loads a class per name.\n\tprotected Class loadClass(String name, boolean resolve);\n}", "des": "Reflector creation helper."}
{"index": 16229, "repo": "groovy-4.0.13", "code": "public class ResourceGroovyMethods extends DefaultGroovyMethodsSupport {\n\t// Append bytes to the end of a File.\n\tstatic void append(File file, byte[] bytes);\n\t// Append binary data to the file.\n\tstatic void append(File self, InputStream stream);\n\t// Append the text supplied by the Writer at the end of the File without writing a BOM.\n\tstatic void append(File file, Reader reader);\n}", "des": "This class defines new groovy methods for Files, URLs, URIs which appear on normal JDK classes inside the Groovy environment."}
{"index": 16230, "repo": "groovy-4.0.13", "code": "public class ReturnAdder extends Object {\n\t// Deprecated. Use visitMethod(MethodNode) instead.\n\tstatic void addReturnIfNeeded(MethodNode node);\n\t// Adds return statements to given method whenever an implicit return is detected.\n\tvoid visitMethod(MethodNode node);\n}", "des": "Utility class to add return statements."}
{"index": 16231, "repo": "groovy-4.0.13", "code": "public abstract class Script extends GroovyObjectSupport {\n\t// A helper method to allow the dynamic evaluation of groovy expressions using this scripts binding as the variable scope\n\tObject evaluate(File file);\n\t// A helper method to allow the dynamic evaluation of groovy expressions using this scripts binding as the variable scope\n\tObject evaluate(String expression);\n\tBinding getBinding();\n\t// Retrieves a property value.\n\tObject getProperty(String property);\n}", "des": "This object represents a Groovy script"}
{"index": 16232, "repo": "groovy-4.0.13", "code": "public class ScriptBytecodeAdapter extends Object {\n\tstatic void assertFailed(Object expression, Object message);\n\t// Provides a hook for type coercion of the given object to the required type\n\tstatic Object asType(Object object, Class type);\n\tstatic Object bitwiseNegate(Object value);\n\t// Provides a hook for type casting of the given object to the required type\n\tstatic Object castToType(Object object, Class type);\n\tstatic boolean compareEqual(Object left, Object right);\n}", "des": "A static helper class to interface bytecode and runtime"}
{"index": 16233, "repo": "groovy-4.0.13", "code": "public class ScriptRunner extends Object {\n\t// Run the script file specified by the file path\n\tstatic void runScript(File path);\n\t// Run the script file specified by the classpath\n\tstatic void runScript(String cp);\n}", "des": "The tool to simulate running script files via groovy command"}
{"index": 16234, "repo": "groovy-4.0.13", "code": "public class SealedASTTransformation extends AbstractASTTransformation {\n\t// Reports true if native sealed class information should be written into the bytecode.\n\tstatic boolean sealedNative(AnnotatedNode node);\n\t// Reports true if the Sealed annotation should not be included in the bytecode for a sealed or emulated-sealed class.\n\tstatic boolean sealedSkipAnnotation(AnnotatedNode node);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles generation of code for the @Sealed annotation."}
{"index": 16235, "repo": "groovy-4.0.13", "code": "public enum SealedMode extends Enum<SealedMode> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic SealedMode valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic SealedMode[] values();\n}", "des": "Intended mode to use for sealed classes when using the @Sealed annotation (or sealed keyword)."}
{"index": 16236, "repo": "groovy-4.0.13", "code": "public class SecureASTCustomizerFactory extends AbstractFactory {\n\t// Does this factory \"Own\" its child closure.\n\tboolean isHandlesNodeChildren();\n\tObject newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes);\n\t// Only called if it isLeaf is false and isHandlesNodeChildren is true\n\tboolean onNodeChildren(FactoryBuilderSupport builder, Object node, Closure childContent);\n}", "des": "This factory allows the generation of a SecureASTCustomizer."}
{"index": 16237, "repo": "groovy-4.0.13", "code": "public class SemanticPredicates extends Object {\n\tstatic boolean isFollowedBy(org.antlr.v4.runtime.CharStream cs, char... chars);\n\tstatic boolean isFollowedByJavaLetterInGString(org.antlr.v4.runtime.CharStream cs);\n\tstatic boolean isFollowedByWhiteSpaces(org.antlr.v4.runtime.CharStream cs);\n\t// Check whether following a method name of command expression.\n\tstatic boolean isFollowingArgumentsOrClosure(GroovyParser.ExpressionContext context);\n}", "des": "Some semantic predicates for altering the behaviour of the lexer and parser"}
{"index": 16238, "repo": "groovy-4.0.13", "code": "public class Sequence extends ArrayList implements GroovyObject {\n\tvoid add(int index, Object element);\n\tboolean add(Object element);\n\tboolean addAll(int index, Collection c);\n\tboolean addAll(Collection c);\n\t// Checks that each member of the given collection are of the correct type\n\tprotected void checkCollectionType(Collection c);\n\t// Checks that the given object instance is of the correct type otherwise a runtime exception is thrown\n\tprotected void checkType(Object object);\n\tvoid clear();\n}", "des": "Represents a sequence of zero or more objects of a given type."}
{"index": 16239, "repo": "groovy-4.0.13", "code": "public class SocketGroovyMethods extends DefaultGroovyMethodsSupport {\n\t// Accepts a connection and passes the resulting Socket to the closure which runs in a new Thread or the calling thread, as needed.\n\tstatic Socket accept(ServerSocket serverSocket, boolean runInANewThread, Closure closure);\n\t// Accepts a connection and passes the resulting Socket to the closure which runs in a new Thread.\n\tstatic Socket accept(ServerSocket serverSocket, Closure closure);\n}", "des": "This class defines new groovy methods for Sockets which enhance JDK classes inside the Groovy environment."}
{"index": 16240, "repo": "groovy-4.0.13", "code": "public class SourceText extends Object {\n\t// Returns the column in getNormalizedText() corresponding to the given line and column in the original source text.\n\tint getNormalizedColumn(int line, int column);\n\t// Returns the assertion's source text after removing line breaks.\n\tString getNormalizedText();\n}", "des": "Provides the source text for an assertion statement and translates coordinates in the original source text to coordinates relative to the assertion's (normalized) source text."}
{"index": 16241, "repo": "groovy-4.0.13", "code": "public class SourceUnit extends ProcessingUnit {\n\t// This method adds a SyntaxException to the error collector.\n\tvoid addError(SyntaxException se);\n\tvoid addErrorAndContinue(SyntaxException se);\n\t// This method adds an exception to the error collector.\n\tvoid addException(Exception e);\n\t// Convenience wrapper for ErrorCollector.addFatalError(org.codehaus.groovy.control.messages.Message).\n\tvoid addFatalError(String text, ASTNode node);\n\tvoid addWarning(String text, ASTNode node);\n}", "des": "Provides an anchor for a single source unit (usually a script file) as it passes through the compiler system."}
{"index": 16242, "repo": "groovy-4.0.13", "code": "public class StackTraceUtils extends Object {\n\t// Adds a groovy.lang.Closure to test whether the stack trace element should be added or not.\n\tstatic void addClassTest(Closure test);\n\t// Sanitize the exception and ALL nested causes\n\tstatic Throwable deepSanitize(Throwable t);\n\t// Extracts the root cause of the exception, no matter how nested it is\n\tstatic Throwable extractRootCause(Throwable t);\n\tstatic boolean isApplicationClass(String className);\n\tstatic void printSanitizedStackTrace(Throwable t);\n}", "des": "Originally was grails.utils.GrailsUtils, removed some grails specific stuff."}
{"index": 16243, "repo": "groovy-4.0.13", "code": "@ThreadSafe public class StampedCommonCache<K,V> extends Object implements EvictableCache<K,V>, ValueConvertable<V,Object>, Serializable {\n\t// Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache.\n\tvoid cleanUpNullReferences();\n\t// Clear the cache\n\tMap<K,V> clearAll();\n\t// Determines if the cache contains an entry for the specified key.\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n}", "des": "Represents a simple key-value cache, which is thread safe and backed by a Map instance."}
{"index": 16244, "repo": "groovy-4.0.13", "code": "public enum StaticCompilationMetadataKeys extends Enum<StaticCompilationMetadataKeys> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic StaticCompilationMetadataKeys valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic StaticCompilationMetadataKeys[] values();\n}", "des": "Static compilation AST node metadata keys."}
{"index": 16245, "repo": "groovy-4.0.13", "code": "public class StaticCompilationTransformer extends ClassCodeExpressionTransformer {\n\tClassNode getClassNode();\n\tprotected SourceUnit getSourceUnit();\n\tStaticTypesTypeChooser getTypeChooser();\n\t// NOTE: This method does not visit Expressions within Closures, for performance and historical reasons.\n\tExpression transform(Expression expr);\n\t// Visit a ClassNode.\n\tvoid visitClass(ClassNode node);\n\tvoid visitClassCodeContainer(Statement code);\n}", "des": "Some expressions use symbols as aliases to method calls (<<, +=, ...)."}
{"index": 16246, "repo": "groovy-4.0.13", "code": "public class StaticCompilationVisitor extends StaticTypeCheckingVisitor {\n\t// Checks whether a property exists on the receiver, or on any of the possible receiver classes (found in the temporary type information table)\n\tprotected boolean existsProperty(PropertyExpression pexp, boolean checkForReadOnly, ClassCodeVisitorSupport visitor);\n\tprotected MethodNode findMethodOrFail(Expression expr, ClassNode receiver, String name, ClassNode... args);\n}", "des": "This visitor is responsible for amending the AST with static compilation metadata or transform the AST so that a class or a method can be statically compiled."}
{"index": 16247, "repo": "groovy-4.0.13", "code": "public class StaticCompileTransformation extends StaticTypesTransformation {\n\t// Allows subclasses to provide their own visitor.\n\tprotected StaticTypeCheckingVisitor newVisitor(SourceUnit unit, ClassNode node);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles the implementation of the CompileStatic transformation."}
{"index": 16248, "repo": "groovy-4.0.13", "code": "public abstract class StaticTypeCheckingSupport extends Object {\n\t// Determines if the specific argument types fit the parameters.\n\tstatic int allParametersAndArgumentsMatch(Parameter[] parameters, ClassNode[] argumentTypes);\n\t// Returns true or false depending on whether the right classnode can be assigned to the left classnode.\n\tstatic boolean checkCompatibleAssignmentTypes(ClassNode left, ClassNode right);\n}", "des": "Support methods for StaticTypeCheckingVisitor."}
{"index": 16249, "repo": "groovy-4.0.13", "code": "public enum StaticTypesMarker extends Enum<StaticTypesMarker> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic StaticTypesMarker valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic StaticTypesMarker[] values();\n}", "des": "This enumeration is used by the AST transformations which rely on static type checking, either to store or to retrieve information from AST node metadata."}
{"index": 16250, "repo": "groovy-4.0.13", "code": "public class StaticTypesTransformation extends Object implements ASTTransformation, CompilationUnitAware {\n\tprotected void addTypeCheckingExtensions(StaticTypeCheckingVisitor visitor, Expression extensions);\n\t// Allows subclasses to provide their own visitor.\n\tprotected StaticTypeCheckingVisitor newVisitor(SourceUnit unit, ClassNode node);\n\tvoid setCompilationUnit(CompilationUnit unit);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles the implementation of the TypeChecked transformation."}
{"index": 16251, "repo": "groovy-4.0.13", "code": "public class StringBufferWriter extends Writer {\n\t// Closing a StringWriter has no effect.\n\tvoid close();\n\t// Flush the stream.\n\tvoid flush();\n\t// Write a portion of an array of characters.\n\tvoid write(char[] text, int offset, int length);\n\t// Write a single character.\n\tvoid write(int c);\n\t// Write a string.\n\tvoid write(String text);\n\t// Write a portion of a string.\n\tvoid write(String text, int offset, int length);\n}", "des": "This class codes around a silly limitation of StringWriter which doesn't allow a StringBuffer to be passed in as a constructor for some bizarre reason."}
{"index": 16252, "repo": "groovy-4.0.13", "code": "public class StringBuilderWriter extends Writer implements Serializable {\n\t// Appends a single character to this Writer.\n\tWriter append(char value);\n\t// Appends a character sequence to this Writer.\n\tWriter append(CharSequence value);\n\t// Appends a portion of a character sequence to the StringBuilder.\n\tWriter append(CharSequence value, int start, int end);\n\t// Closing this writer has no effect.\n\tvoid close();\n\t// Flushing this writer has no effect.\n\tvoid flush();\n}", "des": "Copied from https://github.com/apache/commons-io/blob/master/src/main/java/org/apache/commons/io/output/StringBuilderWriter.java Writer implementation that outputs to a StringBuilder."}
{"index": 16253, "repo": "groovy-4.0.13", "code": "public class StringGroovyMethods extends DefaultGroovyMethodsSupport {\n\t// Append the GString to the StringBuilder using a more efficient approach than Java's default approach for a CharSequence.\n\tstatic StringBuilder append(StringBuilder sb, GStringImpl gs);\n\t// Coerces a CharSequence to a boolean value.\n\tstatic boolean asBoolean(CharSequence chars);\n\t// Coerces a Matcher instance to a boolean value.\n\tstatic boolean asBoolean(Matcher matcher);\n}", "des": "This class defines new groovy methods which appear on String-related JDK classes (String, CharSequence, Matcher) inside the Groovy environment."}
{"index": 16254, "repo": "groovy-4.0.13", "code": "public class StringReaderSource extends AbstractReaderSource {\n\t// Returns a new Reader on the underlying source object.\n\tReader getReader();\n\t// Returns a Data URI (RFC 2397) containing the literal value of this source string.\n\tURI getURI();\n}", "des": "A ReaderSource for source strings."}
{"index": 16255, "repo": "groovy-4.0.13", "code": "public class StringUtils extends Object {\n\tstatic long countChar(String text, char c);\n\t// Copied from Apache commons-lang3-3.6\n\tstatic boolean isEmpty(CharSequence cs);\n\tstatic boolean matches(String text, Pattern pattern);\n\tstatic String removeCR(String text);\n\t// The modified implementation is based on StringUtils#replace(String text, String searchString, String replacement, int max), Apache commons-lang3-3.6\n\tstatic String replace(String text, String searchString, String replacement);\n}", "des": "Utilities for handling strings"}
{"index": 16256, "repo": "groovy-4.0.13", "code": "public class SyntaxErrorMessage extends Message {\n\t// Returns the underlying SyntaxException.\n\tSyntaxException getCause();\n\t// Writes out a nicely formatted summary of the syntax error.\n\tvoid write(PrintWriter output, Janitor janitor);\n}", "des": "A class for error messages produced by the parser system."}
{"index": 16257, "repo": "groovy-4.0.13", "code": "public class SyntaxException extends GroovyException {\n\tint getEndColumn();\n\tint getEndLine();\n\t// Retrieve the line upon which the error occurred.\n\tint getLine();\n\tString getMessage();\n\tString getOriginalMessage();\n\tString getSourceLocator();\n\t// Retrieve the column upon which the error occurred.\n\tint getStartColumn();\n\tint getStartLine();\n\tvoid setSourceLocator(String sourceLocator);\n}", "des": "Base exception indicating a syntax error."}
{"index": 16258, "repo": "groovy-4.0.13", "code": "public class ThreadManagedMetaBeanProperty extends MetaBeanProperty {\n\t// Get the getter method.\n\tMetaMethod getGetter();\n\t// Retrieves the initial value of the ThreadBound property\n\tObject getInitialValue();\n\tObject getInitialValue(Object object);\n\t// Get the setter method.\n\tMetaMethod getSetter();\n\t// Closure responsible for creating the initial value of thread-managed bean properties\n\tvoid setInitialValueCreator(Closure callable);\n}", "des": "This MetaBeanProperty will create a pseudo property whose value is bound to an object using weak references."}
{"index": 16259, "repo": "groovy-4.0.13", "code": "public class Token extends CSTNode {\n\t// Creates a Reduction from this token.\n\tReduction asReduction();\n\t// Creates a Reduction from this token, adding the supplied node as the second element.\n\tReduction asReduction(CSTNode second);\n\t// Creates a Reduction from this token, adding the supplied nodes as the second and third element, respectively.\n\tReduction asReduction(CSTNode second, CSTNode third);\n}", "des": "A CSTNode produced by the Lexer."}
{"index": 16260, "repo": "groovy-4.0.13", "code": "public abstract class Traits extends Object {\n\t// Collects all interfaces of a class node, but reverses the order of the declaration of direct interfaces of this class node.\n\tstatic LinkedHashSet<ClassNode> collectAllInterfacesReverseOrder(ClassNode cNode, LinkedHashSet<ClassNode> interfaces);\n\t// Collects all the self types that a type should extend or implement, given the traits is implements.\n\tstatic LinkedHashSet<ClassNode> collectSelfTypes(ClassNode receiver, LinkedHashSet<ClassNode> selfTypes);\n}", "des": "A collection of utility methods used to deal with traits."}
{"index": 16261, "repo": "groovy-4.0.13", "code": "public class TraitTypeCheckingExtension extends AbstractTypeCheckingExtension {\n\t// This method is called by the type checker when a method call cannot be resolved.\n\tList<MethodNode> handleMissingMethod(ClassNode receiver, String name, ArgumentListExpression argumentList, ClassNode[] argumentTypes, MethodCall call);\n\t// Subclasses should implement this method whenever they need to perform special checks before the type checker starts working.\n\tvoid setup();\n}", "des": "A type checking extension that will take care of handling errors which are specific to traits."}
{"index": 16262, "repo": "groovy-4.0.13", "code": "public class TransformMetaMethod extends MetaMethod {\n\t// Invokes the method this object represents.\n\tObject doMethodInvoke(Object object, Object[] arguments);\n\t// Gets the class where this method is declared\n\tCachedClass getDeclaringClass();\n\t// Returns the modifiers for this method\n\tint getModifiers();\n\t// Returns the name of the method represented by this class\n\tString getName();\n\t// Access the return type for this method\n\tClass getReturnType();\n}", "des": "A MetaMethod implementation useful for implementing coercion based invocations"}
{"index": 16263, "repo": "groovy-4.0.13", "code": "public class TryWithResourcesASTTransformation extends Object {\n\t// Reference JLS \"14.20.3.\n\tStatement transform(TryCatchStatement tryCatchStatement);\n\t// See https://docs.oracle.com/javase/specs/jls/se9/html/jls-14.html 14.20.3.1.\n\tBinaryExpression transformResourceAccess(Expression variableAccessExpression);\n}", "des": "Transform try-with-resources to try-catch-finally Reference JLS \"14.20.3."}
{"index": 16264, "repo": "groovy-4.0.13", "code": "public class Tuple<E> extends AbstractList<E> implements Serializable, Cloneable, Comparable<Tuple<E>> {\n\tTuple<E> clone();\n\tint compareTo(Tuple<E> other);\n\tboolean equals(Object o);\n\tE get(int index);\n\tint size();\n\tList<E> subList(int fromIndex, int toIndex);\n\tTuple<E> subTuple(int fromIndex, int toIndex);\n\tE[] toArray();\n\t// Construct a tuple of degree 0.\n\tstatic Tuple0 tuple();\n\t// Construct a tuple of degree 1.\n\tstatic <T1> Tuple1<T1> tuple(T1 v1);\n}", "des": "Represents a list of Objects."}
{"index": 16265, "repo": "groovy-4.0.13", "code": "public final class Tuple2<T1,T2> extends Tuple {\n\tTuple2<T1,T2> clone();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT2 getSecond();\n\tT1 getV1();\n\tT2 getV2();\n}", "des": "Represents a list of 2 typed Objects."}
{"index": 16266, "repo": "groovy-4.0.13", "code": "public final class Tuple3<T1,T2,T3> extends Tuple {\n\tTuple3<T1,T2,T3> clone();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n}", "des": "Represents a list of 3 typed Objects."}
{"index": 16267, "repo": "groovy-4.0.13", "code": "public final class Tuple4<T1,T2,T3,T4> extends Tuple {\n\tTuple4<T1,T2,T3,T4> clone();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT4 getFourth();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n\tT4 getV4();\n}", "des": "Represents a list of 4 typed Objects."}
{"index": 16268, "repo": "groovy-4.0.13", "code": "public final class Tuple5<T1,T2,T3,T4,T5> extends Tuple {\n\tTuple5<T1,T2,T3,T4,T5> clone();\n\t// Deprecated.\n\tT5 getFifth();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT4 getFourth();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n\tT4 getV4();\n\tT5 getV5();\n}", "des": "Represents a list of 5 typed Objects."}
{"index": 16269, "repo": "groovy-4.0.13", "code": "public final class Tuple6<T1,T2,T3,T4,T5,T6> extends Tuple {\n\tTuple6<T1,T2,T3,T4,T5,T6> clone();\n\t// Deprecated.\n\tT5 getFifth();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT4 getFourth();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT6 getSixth();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n\tT4 getV4();\n\tT5 getV5();\n\tT6 getV6();\n}", "des": "Represents a list of 6 typed Objects."}
{"index": 16270, "repo": "groovy-4.0.13", "code": "public final class Tuple7<T1,T2,T3,T4,T5,T6,T7> extends Tuple {\n\tTuple7<T1,T2,T3,T4,T5,T6,T7> clone();\n\t// Deprecated.\n\tT5 getFifth();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT4 getFourth();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT7 getSeventh();\n\t// Deprecated.\n\tT6 getSixth();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n\tT4 getV4();\n\tT5 getV5();\n\tT6 getV6();\n\tT7 getV7();\n}", "des": "Represents a list of 7 typed Objects."}
{"index": 16271, "repo": "groovy-4.0.13", "code": "public final class Tuple8<T1,T2,T3,T4,T5,T6,T7,T8> extends Tuple {\n\tTuple8<T1,T2,T3,T4,T5,T6,T7,T8> clone();\n\t// Deprecated.\n\tT8 getEighth();\n\t// Deprecated.\n\tT5 getFifth();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT4 getFourth();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT7 getSeventh();\n\t// Deprecated.\n\tT6 getSixth();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n\tT4 getV4();\n\tT5 getV5();\n\tT6 getV6();\n\tT7 getV7();\n\tT8 getV8();\n}", "des": "Represents a list of 8 typed Objects."}
{"index": 16272, "repo": "groovy-4.0.13", "code": "public final class Tuple9<T1,T2,T3,T4,T5,T6,T7,T8,T9> extends Tuple {\n\tTuple9<T1,T2,T3,T4,T5,T6,T7,T8,T9> clone();\n\t// Deprecated.\n\tT8 getEighth();\n\t// Deprecated.\n\tT5 getFifth();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT4 getFourth();\n\t// Deprecated.\n\tT9 getNinth();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT7 getSeventh();\n\t// Deprecated.\n\tT6 getSixth();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n\tT4 getV4();\n\tT5 getV5();\n\tT6 getV6();\n\tT7 getV7();\n}", "des": "Represents a list of 9 typed Objects."}
{"index": 16273, "repo": "groovy-4.0.13", "code": "public class TupleConstructorASTTransformation extends AbstractASTTransformation implements CompilationUnitAware, TransformWithPriority {\n\tstatic void addSpecialMapConstructors(int modifiers, ClassNode cNode, String message, boolean addNoArg);\n\t// If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tString getAnnotationName();\n\tint priority();\n\tvoid setCompilationUnit(CompilationUnit unit);\n}", "des": "Handles generation of code for the @TupleConstructor annotation."}
{"index": 16274, "repo": "groovy-4.0.13", "code": "public class TypeCheckingExtension extends Object {\n\t// Adds a type checking error, which will be displayed to the user during compilation.\n\tvoid addStaticTypeError(String msg, ASTNode expr);\n\t// Allows the extension to perform additional tasks after the type checker actually visits a method call.\n\tvoid afterMethodCall(MethodCall call);\n\t// Allows the extension to perform additional tasks after the type checker actually visited a class node.\n\tvoid afterVisitClass(ClassNode node);\n}", "des": "This interface defines a high-level API for handling type checking errors."}
{"index": 16275, "repo": "groovy-4.0.13", "code": "public enum TypeCheckingMode extends Enum<TypeCheckingMode> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic TypeCheckingMode valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic TypeCheckingMode[] values();\n}", "des": "This enumeration can be used whenever it is preferred to annotate a class as TypeChecked in general, but where only one or more methods are \"dynamic\"."}
{"index": 16276, "repo": "groovy-4.0.13", "code": "public class TypeHelper extends Object {\n\t// Realizes an unsharp equal for the class.\n\tprotected static boolean argumentClassIsParameterClass(Class<?> argumentClass, Class<?> parameterClass);\n\t// Get wrapper class for a given class.\n\tprotected static Class<?> getWrapperClass(Class<?> c);\n\tprotected static boolean isBigDecCategory(Class<?> x);\n\tprotected static boolean isDoubleCategory(Class<?> x);\n\tprotected static boolean isIntCategory(Class<?> x);\n\tprotected static boolean isLongCategory(Class<?> x);\n}", "des": "This class contains helper methods for converting and comparing types."}
{"index": 16277, "repo": "groovy-4.0.13", "code": "public class Types extends Object {\n\t// Given two types, returns true if the first can be viewed as the second.\n\tstatic boolean canMean(int actual, int preferred);\n\t// Gets the description for the specified type.\n\tstatic String getDescription(int type);\n\tstatic Collection<String> getKeywords();\n\t// Returns the precedence of the specified operator.\n\tstatic int getPrecedence(int type, boolean throwIfInvalid);\n\t// Returns the text for the specified type.\n\tstatic String getText(int type);\n}", "des": "Typing information for the CST system."}
{"index": 16278, "repo": "groovy-4.0.13", "code": "public class TypeTransformers extends Object {\n\t// Adds a type transformer applied at runtime.\n\tprotected static MethodHandle addTransformer(MethodHandle handle, int pos, Object arg, Class<?> parameter);\n\t// Apply a transformer as filter.\n\tstatic MethodHandle applyUnsharpFilter(MethodHandle handle, int pos, MethodHandle transformer);\n}", "des": "This class contains several transformers for used during method invocation."}
{"index": 16279, "repo": "groovy-4.0.13", "code": "@ThreadSafe public final class UnlimitedConcurrentCache<K,V> extends Object implements EvictableCache<K,V>, Serializable {\n\t// Replying on the ConcurrentHashMap thread-safe iteration implementation the method will remove all entries holding SoftReferences to gc-evicted objects.\n\tvoid cleanUpNullReferences();\n\t// Clear the cache\n\tMap<K,V> clearAll();\n\t// Determines if the cache contains an entry for the specified key.\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n}", "des": "A cache backed by a ConcurrentHashMap"}
{"index": 16280, "repo": "groovy-4.0.13", "code": "public class URLReaderSource extends AbstractReaderSource {\n\t// Returns a new Reader on the underlying source object.\n\tReader getReader();\n\t// Returns a URI for the URL of this source.\n\tURI getURI();\n}", "des": "A ReaderSource for source files hosted at a URL."}
{"index": 16281, "repo": "groovy-4.0.13", "code": "public abstract class Utilities extends Object {\n\t// Returns the end-of-line marker.\n\tstatic String eol();\n\t// Tells if the given string is a valid Java identifier.\n\tstatic boolean isJavaIdentifier(String name);\n\t// Returns a string made up of repetitions of the specified string.\n\tstatic String repeatString(String pattern, int repeats);\n}", "des": "Various utility functions for use in the compiler."}
{"index": 16282, "repo": "groovy-4.0.13", "code": "public interface Variable {\n\t// expression used to initialize the variable or null of there is no initialization.\n\tExpression getInitialExpression();\n\tint getModifiers();\n\t// the name of the variable\n\tString getName();\n\t// the type before wrapping primitives type of the variable\n\tClassNode getOriginType();\n\t// the type of the variable\n\tClassNode getType();\n\t// returns true if there is an initialization expression\n\tboolean hasInitialExpression();\n\tboolean isClosureSharedVariable();\n}", "des": "interface to mark a AstNode as Variable."}
{"index": 16283, "repo": "groovy-4.0.13", "code": "public class VariableExpression extends Expression implements Variable {\n\tVariable getAccessedVariable();\n\t// expression used to initialize the variable or null of there is no initialization.\n\tExpression getInitialExpression();\n\tint getModifiers();\n\t// the name of the variable\n\tString getName();\n\t// Returns the type which was used when this variable expression was created.\n\tClassNode getOriginType();\n\tString getText();\n\t// the type of the variable\n\tClassNode getType();\n}", "des": "Represents a local variable name, the simplest form of expression."}
{"index": 16284, "repo": "groovy-4.0.13", "code": "public class VariableScope extends Object {\n\tVariableScope copy();\n\t// Non-null iff this scope corresponds to a class; as opposed to a method, \"if\" statement, block statement, etc.\n\tClassNode getClassScope();\n\tVariable getDeclaredVariable(String name);\n\t// Gets a map containing the variables declared in this scope.\n\tMap<String,Variable> getDeclaredVariables();\n\t// Gets an iterator for the declared class variables.\n\tIterator<Variable> getDeclaredVariablesIterator();\n\tVariableScope getParent();\n}", "des": "Records declared and referenced variables for a given scope."}
{"index": 16285, "repo": "groovy-4.0.13", "code": "public class VariableScopeVisitor extends ClassCodeVisitorSupport {\n\tprotected SourceUnit getSourceUnit();\n\t// Sets the current class node context.\n\tvoid prepareVisit(ClassNode node);\n\tvoid visitBinaryExpression(BinaryExpression expression);\n\tvoid visitBlockStatement(BlockStatement statement);\n\tvoid visitCatchStatement(CatchStatement statement);\n\t// Visit a ClassNode.\n\tvoid visitClass(ClassNode node);\n\tvoid visitClosureExpression(ClosureExpression expression);\n}", "des": "Initializes the variable scopes for an AST."}
{"index": 16286, "repo": "groovy-4.0.13", "code": "public class VetoableASTTransformation extends BindableASTTransformation {\n\t// Adds the necessary field and methods to support vetoable change support.\n\tprotected void addVetoableChangeSupport(ClassNode declaringClass);\n\t// Creates a statement body similar to: this.fireVetoableChange(\"field\", field, field = value)\n\tprotected Statement createConstrainedStatement(PropertyNode propertyNode, Expression fieldExpression);\n}", "des": "Handles generation of code for the @Vetoable annotation, and @Bindable if also present."}
{"index": 16287, "repo": "groovy-4.0.13", "code": "public enum Visibility extends Enum<Visibility> {\n\tint getModifier();\n\t// Returns the enum constant of this type with the specified name.\n\tstatic Visibility valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic Visibility[] values();\n}", "des": "Indicates the visibility of a node."}
{"index": 16288, "repo": "groovy-4.0.13", "code": "public interface VMPlugin {\n\t// check whether the member can be accessed or not\n\tboolean checkAccessible(Class<?> callerClass, Class<?> declaringClass, int memberModifiers, boolean allowIllegalAccess);\n\t// Check whether invoking AccessibleObject.setAccessible(boolean) on the accessible object will be completed successfully\n\tboolean checkCanSetAccessible(AccessibleObject accessibleObject, Class<?> callerClass);\n\tvoid configureAnnotation(AnnotationNode an);\n}", "des": "Interface to access VM version based actions."}
{"index": 16289, "repo": "groovy-4.0.13", "code": "public class WarningMessage extends LocatedMessage {\n\t// Returns true if this message is as or more important than the specified importance level.\n\tboolean isRelevant(int importance);\n\t// Returns true if a warning would be relevant to the specified level.\n\tstatic boolean isRelevant(int actual, int limit);\n\t// Writes this message to the specified PrintWriter.\n\tvoid write(PrintWriter writer, Janitor janitor);\n}", "des": "A class for warning messages."}
{"index": 16290, "repo": "groovy-4.0.13", "code": "public final class Weighers extends Object {\n\t// An entry weigher backed by the specified weigher.\n\tstatic <K, V> EntryWeigher<K,V> asEntryWeigher(Weigher<? super V> weigher);\n\t// A weigher where the value is a byte array and its weight is the number of bytes.\n\tstatic Weigher<byte[]> byteArray();\n\t// A weigher where the value is a Collection and its weight is the number of elements.\n\tstatic <E> Weigher<? super Collection<E>> collection();\n}", "des": "A common set of Weigher and EntryWeigher implementations."}
{"index": 16291, "repo": "groovy-4.0.13", "code": "public class WhileStatement extends Statement implements LoopingStatement {\n\tBooleanExpression getBooleanExpression();\n\t// Gets the loop block.\n\tStatement getLoopBlock();\n\tvoid setBooleanExpression(BooleanExpression booleanExpression);\n\t// Sets the loop block.\n\tvoid setLoopBlock(Statement loopBlock);\n\tvoid visit(GroovyCodeVisitor visitor);\n}", "des": "Represents a while (condition) { ..."}
{"index": 16292, "repo": "groovy-4.0.13", "code": "public class WideningCategories extends Object {\n\t// Determines if the source class implements an interface or subclasses the target type.\n\tstatic boolean implementsInterfaceOrSubclassOf(ClassNode source, ClassNode targetType);\n\t// It is of a BigDecimal category, if the provided type is a BigInteger category or a BigDecimal.\n\tstatic boolean isBigDecCategory(ClassNode type);\n}", "des": "This class provides helper methods to determine the type from a widening operation for example for a plus operation."}
{"index": 16293, "repo": "spring-security-config-6.1.2", "code": "public abstract class AbstractConfigAttributeRequestMatcherRegistry<C> extends AbstractRequestMatcherRegistry<C> {\n\t// Marks the RequestMatcher's as unmapped and then calls chainRequestMatchersInternal(List).\n\tprotected final C chainRequestMatchers(List<org.springframework.security.web.util.matcher.RequestMatcher> requestMatchers);\n}", "des": "A base class for registering RequestMatcher's."}
{"index": 16294, "repo": "spring-security-config-6.1.2", "code": "public abstract class AbstractConfiguredSecurityBuilder<O,B extends SecurityBuilder<O>> extends AbstractSecurityBuilder<O> {\n\t// Applies a SecurityConfigurerAdapter to this SecurityBuilder and invokes SecurityConfigurerAdapter.setBuilder(SecurityBuilder).\n\t<C extends SecurityConfigurerAdapter<O, B>>C apply(C configurer);\n\t// Invoked prior to invoking each SecurityConfigurer.configure(SecurityBuilder) method.\n\tprotected void beforeConfigure();\n}", "des": "A base SecurityBuilder that allows SecurityConfigurer to be applied to it."}
{"index": 16295, "repo": "spring-security-config-6.1.2", "code": "public abstract class AbstractDaoAuthenticationConfigurer<B extends ProviderManagerBuilder<B>,C extends AbstractDaoAuthenticationConfigurer<B,C,U>,U extends org.springframework.security.core.userdetails.UserDetailsService> extends UserDetailsAwareConfigurer<B,U> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(B builder);\n\t// Gets the UserDetailsService that is used with the DaoAuthenticationProvider\n\tU getUserDetailsService();\n}", "des": "Allows configuring a DaoAuthenticationProvider"}
{"index": 16296, "repo": "spring-security-config-6.1.2", "code": "public abstract class AbstractLdapAuthenticationManagerFactory<T extends org.springframework.security.ldap.authentication.AbstractLdapAuthenticator> extends Object {\n\t// Returns the configured AuthenticationManager that can be used to perform LDAP authentication.\n\tfinal org.springframework.security.authentication.AuthenticationManager createAuthenticationManager();\n\t// Allows subclasses to supply the default AbstractLdapAuthenticator.\n\tprotected abstract T createDefaultLdapAuthenticator();\n}", "des": "Creates an AuthenticationManager that can perform LDAP authentication."}
{"index": 16297, "repo": "spring-security-config-6.1.2", "code": "public abstract class AbstractRequestMatcherRegistry<C> extends Object {\n\t// Maps any request.\n\tC anyRequest();\n\t// Subclasses should implement this method for returning the object that is chained to the creation of the RequestMatcher instances.\n\tprotected abstract C chainRequestMatchers(List<org.springframework.security.web.util.matcher.RequestMatcher> requestMatchers);\n}", "des": "A base class for registering RequestMatcher's."}
{"index": 16298, "repo": "spring-security-config-6.1.2", "code": "public abstract class AbstractSecurityBuilder<O> extends Object implements SecurityBuilder<O> {\n\t// Builds the object and returns it or null.\n\tfinal O build();\n\t// Subclasses should implement this to perform the build.\n\tprotected abstract O doBuild();\n\t// Gets the object that was built.\n\tfinal O getObject();\n}", "des": "A base SecurityBuilder that ensures the object being built is only built one time."}
{"index": 16299, "repo": "spring-security-config-6.1.2", "code": "public final class AnonymousConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<AnonymousConfigurer<H>,H> {\n\t// Sets the AnonymousAuthenticationFilter used to populate an anonymous user.\n\tAnonymousConfigurer<H> authenticationFilter(org.springframework.security.web.authentication.AnonymousAuthenticationFilter authenticationFilter);\n}", "des": "Configures Anonymous authentication (i.e."}
{"index": 16300, "repo": "spring-security-config-6.1.2", "code": "public class AuthenticationManagerBuilder extends AbstractConfiguredSecurityBuilder<org.springframework.security.authentication.AuthenticationManager,AuthenticationManagerBuilder> implements ProviderManagerBuilder<AuthenticationManagerBuilder> {\n\t// Sets the AuthenticationEventPublisher\n\tAuthenticationManagerBuilder authenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher eventPublisher);\n}", "des": "SecurityBuilder used to create an AuthenticationManager."}
{"index": 16301, "repo": "spring-security-config-6.1.2", "code": "public final class AuthorizeHttpRequestsConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<AuthorizeHttpRequestsConfigurer<H>,H> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(H http);\n}", "des": "Adds a URL based authorization using AuthorizationManager."}
{"index": 16302, "repo": "spring-security-config-6.1.2", "code": "public final class CsrfConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<CsrfConfigurer<H>,H> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(H http);\n\t// Specify the CsrfTokenRepository to use.\n\tCsrfConfigurer<H> csrfTokenRepository(org.springframework.security.web.csrf.CsrfTokenRepository csrfTokenRepository);\n}", "des": "Adds CSRF protection for the methods as specified by CsrfConfigurer.requireCsrfProtectionMatcher(RequestMatcher)."}
{"index": 16303, "repo": "spring-security-config-6.1.2", "code": "@FunctionalInterface public interface Customizer<T> {\n\t// Performs the customizations on the input argument.\n\tvoid customize(T t);\n\t// Returns a Customizer that does not alter the input argument.\n\tstatic <T> Customizer<T> withDefaults();\n}", "des": "Callback interface that accepts a single input argument and returns no result."}
{"index": 16304, "repo": "spring-security-config-6.1.2", "code": "public final class DefaultLoginPageConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<DefaultLoginPageConfigurer<H>,H> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(H http);\n\t// Initialize the SecurityBuilder.\n\tvoid init(H http);\n}", "des": "Adds a Filter that will generate a login page if one is not specified otherwise when using EnableWebSecurity."}
{"index": 16305, "repo": "spring-security-config-6.1.2", "code": "public final class ExceptionHandlingConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<ExceptionHandlingConfigurer<H>,H> {\n\t// Specifies the AccessDeniedHandler to be used\n\tExceptionHandlingConfigurer<H> accessDeniedHandler(org.springframework.security.web.access.AccessDeniedHandler accessDeniedHandler);\n\t// Shortcut to specify the AccessDeniedHandler to be used is a specific error page\n\tExceptionHandlingConfigurer<H> accessDeniedPage(String accessDeniedUrl);\n}", "des": "Adds exception handling for Spring Security related exceptions to an application."}
{"index": 16306, "repo": "spring-security-config-6.1.2", "code": "public final class FormLoginConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractAuthenticationFilterConfigurer<H,FormLoginConfigurer<H>,org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter> {\n\t// Create the RequestMatcher given a loginProcessingUrl\n\tprotected org.springframework.security.web.util.matcher.RequestMatcher createLoginProcessingUrlMatcher(String loginProcessingUrl);\n}", "des": "Adds form based authentication."}
{"index": 16307, "repo": "spring-security-config-6.1.2", "code": "@Order(100) public abstract class GlobalAuthenticationConfigurerAdapter extends Object implements SecurityConfigurer<org.springframework.security.authentication.AuthenticationManager,AuthenticationManagerBuilder> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(AuthenticationManagerBuilder auth);\n\t// Initialize the SecurityBuilder.\n\tvoid init(AuthenticationManagerBuilder auth);\n}", "des": "A SecurityConfigurer that can be exposed as a bean to configure the global AuthenticationManagerBuilder."}
{"index": 16308, "repo": "spring-security-config-6.1.2", "code": "public class HeadersConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<HeadersConfigurer<H>,H> {\n\t// Adds a HeaderWriter instance\n\tHeadersConfigurer<H> addHeaderWriter(org.springframework.security.web.header.HeaderWriter headerWriter);\n\t// Deprecated, for removal: This API element is subject to removal in a future version. For removal in 7.0.\n\tHeadersConfigurer<H>.CacheControlConfig cacheControl();\n}", "des": "Adds the Security HTTP headers to the response."}
{"index": 16309, "repo": "spring-security-config-6.1.2", "code": "public final class HttpBasicConfigurer<B extends HttpSecurityBuilder<B>> extends AbstractHttpConfigurer<HttpBasicConfigurer<B>,B> {\n\t// Specifies a custom AuthenticationDetailsSource to use for basic authentication.\n\tHttpBasicConfigurer<B> authenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,?> authenticationDetailsSource);\n}", "des": "Adds HTTP basic based authentication."}
{"index": 16310, "repo": "spring-security-config-6.1.2", "code": "public final class HttpSecurity extends AbstractConfiguredSecurityBuilder<org.springframework.security.web.DefaultSecurityFilterChain,HttpSecurity> implements SecurityBuilder<org.springframework.security.web.DefaultSecurityFilterChain>, HttpSecurityBuilder<HttpSecurity> {\n\t// Adds a Filter that must be an instance of or extend one of the Filters provided within the Security framework.\n\tHttpSecurity addFilter(jakarta.servlet.Filter filter);\n}", "des": "A HttpSecurity is similar to Spring Security's XML <http> element in the namespace configuration."}
{"index": 16311, "repo": "spring-security-config-6.1.2", "code": "public class JdbcUserDetailsManagerConfigurer<B extends ProviderManagerBuilder<B>> extends UserDetailsManagerConfigurer<B,JdbcUserDetailsManagerConfigurer<B>> {\n\t// Sets the query to be used for finding a user's authorities by their username.\n\tJdbcUserDetailsManagerConfigurer<B> authoritiesByUsernameQuery(String query);\n\t// Populates the DataSource to be used.\n\tJdbcUserDetailsManagerConfigurer<B> dataSource(DataSource dataSource);\n}", "des": "Configures an AuthenticationManagerBuilder to have JDBC authentication."}
{"index": 16312, "repo": "spring-security-config-6.1.2", "code": "public final class JeeConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<JeeConfigurer<H>,H> {\n\t// Specifies the AuthenticationUserDetailsService that is used with the PreAuthenticatedAuthenticationProvider.\n\tJeeConfigurer<H> authenticatedUserDetailsService(org.springframework.security.core.userdetails.AuthenticationUserDetailsService<org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken> authenticatedUserDetailsService);\n}", "des": "Adds support for J2EE pre authentication."}
{"index": 16313, "repo": "spring-security-config-6.1.2", "code": "public class LdapAuthenticationProviderConfigurer<B extends ProviderManagerBuilder<B>> extends SecurityConfigurerAdapter<org.springframework.security.authentication.AuthenticationManager,B> {\n\t// Specifies the GrantedAuthoritiesMapper.\n\tLdapAuthenticationProviderConfigurer<B> authoritiesMapper(org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper grantedAuthoritiesMapper);\n}", "des": "Configures LDAP AuthenticationProvider in the ProviderManagerBuilder."}
{"index": 16314, "repo": "spring-security-config-6.1.2", "code": "public class LdapPasswordComparisonAuthenticationManagerFactory extends AbstractLdapAuthenticationManagerFactory<org.springframework.security.ldap.authentication.PasswordComparisonAuthenticator> {\n\t// Allows subclasses to supply the default AbstractLdapAuthenticator.\n\tprotected org.springframework.security.ldap.authentication.PasswordComparisonAuthenticator createDefaultLdapAuthenticator();\n}", "des": "Creates an AuthenticationManager that can perform LDAP authentication using password comparison."}
{"index": 16315, "repo": "spring-security-config-6.1.2", "code": "public final class LogoutConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<LogoutConfigurer<H>,H> {\n\t// Adds a LogoutHandler.\n\tLogoutConfigurer<H> addLogoutHandler(org.springframework.security.web.authentication.logout.LogoutHandler logoutHandler);\n\t// Specifies if SecurityContextLogoutHandler should clear the Authentication at the time of logout.\n\tLogoutConfigurer<H> clearAuthentication(boolean clearAuthentication);\n}", "des": "Adds logout support."}
{"index": 16316, "repo": "spring-security-config-6.1.2", "code": "public enum MatcherType extends Enum<MatcherType> {\n\torg.springframework.beans.factory.config.BeanDefinition createMatcher(org.springframework.beans.factory.xml.ParserContext pc, String path, String method);\n\torg.springframework.beans.factory.config.BeanDefinition createMatcher(org.springframework.beans.factory.xml.ParserContext pc, String path, String method, String servletPath);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MatcherType valueOf(String name);\n}", "des": "Defines the RequestMatcher types supported by the namespace."}
{"index": 16317, "repo": "spring-security-config-6.1.2", "code": "public final class OAuth2ClientConfigurer<B extends HttpSecurityBuilder<B>> extends AbstractHttpConfigurer<OAuth2ClientConfigurer<B>,B> {\n\t// Deprecated, for removal: This API element is subject to removal in a future version. For removal in 7.0.\n\tOAuth2ClientConfigurer<B>.AuthorizationCodeGrantConfigurer authorizationCodeGrant();\n}", "des": "An AbstractHttpConfigurer for OAuth 2.0 Client support."}
{"index": 16318, "repo": "spring-security-config-6.1.2", "code": "public final class OAuth2LoginConfigurer<B extends HttpSecurityBuilder<B>> extends AbstractAuthenticationFilterConfigurer<B,OAuth2LoginConfigurer<B>,org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter> {\n\t// Deprecated, for removal: This API element is subject to removal in a future version. For removal in 7.0.\n\tOAuth2LoginConfigurer<B>.AuthorizationEndpointConfig authorizationEndpoint();\n}", "des": "An AbstractHttpConfigurer for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow."}
{"index": 16319, "repo": "spring-security-config-6.1.2", "code": "public final class PasswordManagementConfigurer<B extends HttpSecurityBuilder<B>> extends AbstractHttpConfigurer<PasswordManagementConfigurer<B>,B> {\n\t// Sets the change password page.\n\tPasswordManagementConfigurer<B> changePasswordPage(String changePasswordPage);\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(B http);\n}", "des": "Adds password management support."}
{"index": 16320, "repo": "spring-security-config-6.1.2", "code": "public enum PayloadInterceptorOrder extends Enum<PayloadInterceptorOrder> implements org.springframework.core.Ordered {\n\tint getOrder();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PayloadInterceptorOrder valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PayloadInterceptorOrder[] values();\n}", "des": "The standard order for PayloadInterceptor to be sorted."}
{"index": 16321, "repo": "spring-security-config-6.1.2", "code": "public final class PortMapperConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<PortMapperConfigurer<H>,H> {\n\t// Adds a port mapping\n\tPortMapperConfigurer<H>.HttpPortMapping http(int httpPort);\n\t// Initialize the SecurityBuilder.\n\tvoid init(H http);\n\t// Allows specifying the PortMapper instance.\n\tPortMapperConfigurer<H> portMapper(org.springframework.security.web.PortMapper portMapper);\n}", "des": "Allows configuring a shared PortMapper instance used to determine the ports when redirecting between HTTP and HTTPS."}
{"index": 16322, "repo": "spring-security-config-6.1.2", "code": "public final class RememberMeConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<RememberMeConfigurer<H>,H> {\n\t// Whether the cookie should always be created even if the remember-me parameter is not set.\n\tRememberMeConfigurer<H> alwaysRemember(boolean alwaysRemember);\n}", "des": "Configures Remember Me authentication."}
{"index": 16323, "repo": "spring-security-config-6.1.2", "code": "public final class RequestCacheConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<RequestCacheConfigurer<H>,H> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(H http);\n\t// Disables the AbstractHttpConfigurer by removing it.\n\tH disable();\n\t// Initialize the SecurityBuilder.\n\tvoid init(H http);\n}", "des": "Adds request cache for Spring Security."}
{"index": 16324, "repo": "spring-security-config-6.1.2", "code": "public class RSocketSecurity extends Object {\n\t// Adds a PayloadInterceptor to be used.\n\tRSocketSecurity addPayloadInterceptor(org.springframework.security.rsocket.api.PayloadInterceptor interceptor);\n\tRSocketSecurity authenticationManager(org.springframework.security.authentication.ReactiveAuthenticationManager authenticationManager);\n\tRSocketSecurity authorizePayload(Customizer<RSocketSecurity.AuthorizePayloadsSpec> authorize);\n}", "des": "Allows configuring RSocket based security."}
{"index": 16325, "repo": "spring-security-config-6.1.2", "code": "public final class Saml2LoginConfigurer<B extends HttpSecurityBuilder<B>> extends AbstractAuthenticationFilterConfigurer<B,Saml2LoginConfigurer<B>,org.springframework.security.saml2.provider.service.web.authentication.Saml2WebSsoAuthenticationFilter> {\n\t// Use this AuthenticationConverter when converting incoming requests to an Authentication.\n\tSaml2LoginConfigurer<B> authenticationConverter(org.springframework.security.web.authentication.AuthenticationConverter authenticationConverter);\n}", "des": "An AbstractHttpConfigurer for SAML 2.0 Login, which leverages the SAML 2.0 Web Browser Single Sign On (WebSSO) Flow."}
{"index": 16326, "repo": "spring-security-config-6.1.2", "code": "public final class Saml2LogoutConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<Saml2LogoutConfigurer<H>,H> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(H http);\n\t// Deprecated, for removal: This API element is subject to removal in a future version. For removal in 7.0.\n\tSaml2LogoutConfigurer<H>.LogoutRequestConfigurer logoutRequest();\n}", "des": "Adds SAML 2.0 logout support."}
{"index": 16327, "repo": "spring-security-config-6.1.2", "code": "public class Saml2MetadataConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<Saml2LogoutConfigurer<H>,H> {\n\t// Return the SecurityBuilder when done using the SecurityConfigurer.\n\tH and();\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(H http);\n}", "des": "An AbstractHttpConfigurer for SAML 2.0 Metadata."}
{"index": 16328, "repo": "spring-security-config-6.1.2", "code": "public interface SecurityConfigurer<O,B extends SecurityBuilder<O>> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(B builder);\n\t// Initialize the SecurityBuilder.\n\tvoid init(B builder);\n}", "des": "Allows for configuring a SecurityBuilder."}
{"index": 16329, "repo": "spring-security-config-6.1.2", "code": "public abstract class SecurityConfigurerAdapter<O,B extends SecurityBuilder<O>> extends Object implements SecurityConfigurer<O,B> {\n\t// Adds an ObjectPostProcessor to be used for this SecurityConfigurerAdapter.\n\tvoid addObjectPostProcessor(ObjectPostProcessor<?> objectPostProcessor);\n\t// Deprecated, for removal: This API element is subject to removal in a future version. For removal in 7.0.\n\tB and();\n}", "des": "A base class for SecurityConfigurer that allows subclasses to only implement the methods they are interested in."}
{"index": 16330, "repo": "spring-security-config-6.1.2", "code": "public final class SecurityContextConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<SecurityContextConfigurer<H>,H> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(H http);\n\tSecurityContextConfigurer<H> requireExplicitSave(boolean requireExplicitSave);\n}", "des": "Allows persisting and restoring of the SecurityContext found on the SecurityContextHolder for each request by configuring the SecurityContextPersistenceFilter."}
{"index": 16331, "repo": "spring-security-config-6.1.2", "code": "public class ServerHttpSecurity extends Object {\n\t// Adds a WebFilter after specific position.\n\tServerHttpSecurity addFilterAfter(org.springframework.web.server.WebFilter webFilter, SecurityWebFiltersOrder order);\n\t// Adds a WebFilter at a specific position.\n\tServerHttpSecurity addFilterAt(org.springframework.web.server.WebFilter webFilter, SecurityWebFiltersOrder order);\n}", "des": "A ServerHttpSecurity is similar to Spring Security's HttpSecurity but for WebFlux."}
{"index": 16332, "repo": "spring-security-config-6.1.2", "code": "public enum SessionCreationPolicy extends Enum<SessionCreationPolicy> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SessionCreationPolicy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SessionCreationPolicy[] values();\n}", "des": "Specifies the various session creation policies for Spring Security."}
{"index": 16333, "repo": "spring-security-config-6.1.2", "code": "public final class SessionManagementConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<SessionManagementConfigurer<H>,H> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(H http);\n}", "des": "Allows configuring session management."}
{"index": 16334, "repo": "spring-security-config-6.1.2", "code": "public class UserDetailsManagerConfigurer<B extends ProviderManagerBuilder<B>,C extends UserDetailsManagerConfigurer<B,C>> extends UserDetailsServiceConfigurer<B,C,org.springframework.security.provisioning.UserDetailsManager> {\n\t// Populates the users that have been added.\n\tprotected void initUserDetailsService();\n\t// Allows adding a user to the UserDetailsManager that is being created.\n\tfinal UserDetailsManagerConfigurer<B,C>.UserDetailsBuilder withUser(String username);\n}", "des": "Base class for populating an AuthenticationManagerBuilder with a UserDetailsManager."}
{"index": 16335, "repo": "spring-security-config-6.1.2", "code": "public class UserDetailsManagerResourceFactoryBean extends Object implements org.springframework.context.ResourceLoaderAware, org.springframework.beans.factory.FactoryBean<org.springframework.security.provisioning.InMemoryUserDetailsManager> {\n\t// Create a UserDetailsManagerResourceFactoryBean with a Resource that is a Properties file in the format defined in UserDetailsResourceFactoryBean.\n\tstatic UserDetailsManagerResourceFactoryBean fromResource(org.springframework.core.io.Resource resource);\n}", "des": "Constructs an InMemoryUserDetailsManager from a resource using UserDetailsResourceFactoryBean."}
{"index": 16336, "repo": "spring-security-config-6.1.2", "code": "public class UserDetailsResourceFactoryBean extends Object implements org.springframework.context.ResourceLoaderAware, org.springframework.beans.factory.FactoryBean<Collection<org.springframework.security.core.userdetails.UserDetails>> {\n\t// Create a UserDetailsResourceFactoryBean with a Resource that is a Properties file in the format defined in UserDetailsResourceFactoryBean.\n\tstatic UserDetailsResourceFactoryBean fromResource(org.springframework.core.io.Resource propertiesResource);\n}", "des": "Parses a Resource that is a Properties file in the format of: username=password[,enabled|disabled],roles..."}
{"index": 16337, "repo": "spring-security-config-6.1.2", "code": "public class UserDetailsServiceConfigurer<B extends ProviderManagerBuilder<B>,C extends UserDetailsServiceConfigurer<B,C,U>,U extends org.springframework.security.core.userdetails.UserDetailsService> extends AbstractDaoAuthenticationConfigurer<B,C,U> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(B builder);\n\t// Allows subclasses to initialize the UserDetailsService.\n\tprotected void initUserDetailsService();\n}", "des": "Allows configuring a UserDetailsService within a AuthenticationManagerBuilder."}
{"index": 16338, "repo": "spring-security-config-6.1.2", "code": "public final class WebSecurity extends AbstractConfiguredSecurityBuilder<jakarta.servlet.Filter,WebSecurity> implements SecurityBuilder<jakarta.servlet.Filter>, org.springframework.context.ApplicationContextAware, org.springframework.web.context.ServletContextAware {\n\t// Adds builders to create SecurityFilterChain instances.\n\tWebSecurity addSecurityFilterChainBuilder(SecurityBuilder<? extends org.springframework.security.web.SecurityFilterChain> securityFilterChainBuilder);\n}", "des": "The WebSecurity is created by WebSecurityConfiguration to create the FilterChainProxy known as the Spring Security Filter Chain (springSecurityFilterChain)."}
{"index": 16339, "repo": "spring-security-config-6.1.2", "code": "public final class X509Configurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<X509Configurer<H>,H> {\n\t// Specifies the AuthenticationDetailsSource\n\tX509Configurer<H> authenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails> authenticationDetailsSource);\n}", "des": "Adds X509 based pre authentication to an application."}
{"index": 16340, "repo": "spring-integration-xml-6.1.2", "code": "public class StringValueTestXPathMessageSelector extends AbstractXPathMessageSelector {\n\t// Evaluate the payload and return true if the value returned by the XPathExpression is equal to the valueToTestFor.\n\tboolean accept(org.springframework.messaging.Message<?> message);\n\t// Specify whether comparison of value returned by XPathExpression to test value should be case sensitive.\n\tvoid setCaseSensitive(boolean caseSensitive);\n}", "des": "XPath MessageSelector that tests if a provided value supports payloads of type Document or String."}
{"index": 16341, "repo": "spring-integration-xml-6.1.2", "code": "public class UnmarshallingTransformer extends org.springframework.integration.transformer.AbstractPayloadTransformer<Object,Object> {\n\tString getComponentType();\n\t// If true always delegate to the SourceFactory.\n\tvoid setAlwaysUseSourceFactory(boolean alwaysUseSourceFactory);\n\t// Provide the SourceFactory to be used.\n\tvoid setSourceFactory(SourceFactory sourceFactory);\n\tObject transformPayload(Object payload);\n}", "des": "An implementation of Transformer that delegates to an OXM Unmarshaller."}
{"index": 16342, "repo": "spring-integration-xml-6.1.2", "code": "public enum XPathEvaluationType extends Enum<XPathEvaluationType> {\n\tabstract Object evaluateXPath(org.springframework.xml.xpath.XPathExpression expression, Node node);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic XPathEvaluationType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic XPathEvaluationType[] values();\n}", "des": "Enumeration of different types of XPath evaluation used to indicate the type of evaluation that should be carried out using a provided XPath expression."}
{"index": 16343, "repo": "spring-integration-xml-6.1.2", "code": "public class XPathMessageSplitter extends org.springframework.integration.splitter.AbstractMessageSplitter {\n\tprotected void doInit();\n\tString getComponentType();\n\tprotected int obtainSizeIfPossible(Iterator<?> iterator);\n\tvoid setCreateDocuments(boolean createDocuments);\n\tvoid setDocumentBuilder(DocumentBuilderFactory documentBuilderFactory);\n\t// The iterator mode: true (default) to return an Iterator for splitting payload, false to return a List.\n\tvoid setIterator(boolean iterator);\n}", "des": "Message Splitter that uses an XPathExpression to split a Document, File or String payload into a NodeList."}
{"index": 16344, "repo": "spring-integration-xml-6.1.2", "code": "public class XPathTransformer extends org.springframework.integration.transformer.AbstractTransformer {\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message);\n\tString getComponentType();\n\t// Specify the XmlPayloadConverter to use when converting a Message payload prior to XPath evaluation.\n\tvoid setConverter(XmlPayloadConverter converter);\n\t// Specify the expected XPathEvaluationType.\n\tvoid setEvaluationType(XPathEvaluationType evaluationType);\n}", "des": "Transformer implementation that evaluates an XPath expression against the inbound Message payload and returns a Message whose payload is the result of that evaluation."}
{"index": 16345, "repo": "spring-integration-xml-6.1.2", "code": "public class XsltPayloadTransformer extends AbstractXmlTransformer implements org.springframework.beans.factory.BeanClassLoaderAware {\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message);\n\tString getComponentType();\n\tprotected void onInit();\n\t// Specify whether to always use result factory even for directly supported payload types\n\tvoid setAlwaysUseResultFactory(boolean alwaysUseResultFactory);\n}", "des": "Thread safe XSLT transformer implementation which returns a transformed Source, Document, or String."}
{"index": 16346, "repo": "spring-cloud-openfeign-core-3.1.8", "code": "public interface AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "Feign contract method parameter processor."}
{"index": 16347, "repo": "spring-cloud-openfeign-core-3.1.8", "code": "public static interface AnnotatedParameterProcessor.AnnotatedParameterContext {\n\t// Retrieves the method metadata.\n\tfeign.MethodMetadata getMethodMetadata();\n\t// Retrieves the index of the parameter.\n\tint getParameterIndex();\n\t// Sets the parameter name.\n\tvoid setParameterName(String name);\n\t// Sets the template parameter.\n\tCollection<String> setTemplateParameter(String name, Collection<String> rest);\n}", "des": "Specifies the parameter context."}
{"index": 16348, "repo": "spring-cloud-openfeign-core-3.1.8", "code": "public class CookieValueParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "CookieValue annotation processor."}
{"index": 16349, "repo": "spring-cloud-openfeign-core-3.1.8", "code": "public static enum FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy extends Enum<FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy[] values();\n}", "des": "Enumeration of pool concurrency policies."}
{"index": 16350, "repo": "spring-cloud-openfeign-core-3.1.8", "code": "public static enum FeignHttpClientProperties.Hc5Properties.PoolReusePolicy extends Enum<FeignHttpClientProperties.Hc5Properties.PoolReusePolicy> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic FeignHttpClientProperties.Hc5Properties.PoolReusePolicy valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic FeignHttpClientProperties.Hc5Properties.PoolReusePolicy[] values();\n}", "des": "Enumeration of pooled connection re-use policies."}
{"index": 16351, "repo": "spring-cloud-openfeign-core-3.1.8", "code": "public class MatrixVariableParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "MatrixVariable annotation processor."}
{"index": 16352, "repo": "spring-cloud-openfeign-core-3.1.8", "code": "public class PathVariableParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "PathVariable parameter processor."}
{"index": 16353, "repo": "spring-cloud-openfeign-core-3.1.8", "code": "public class QueryMapParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "SpringQueryMap parameter processor."}
{"index": 16354, "repo": "spring-cloud-openfeign-core-3.1.8", "code": "public class RequestHeaderParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "RequestHeader parameter processor."}
{"index": 16355, "repo": "spring-cloud-openfeign-core-3.1.8", "code": "public class RequestParamParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "RequestParam parameter processor."}
{"index": 16356, "repo": "spring-cloud-openfeign-core-3.1.8", "code": "public class RequestPartParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "RequestPart parameter processor."}
{"index": 16357, "repo": "spring-integration-redis-6.1.2", "code": "public class ReactiveRedisStreamMessageHandler extends org.springframework.integration.handler.AbstractReactiveMessageHandler {\n\tString getComponentType();\n\tprotected reactor.core.publisher.Mono<Void> handleMessageInternal(org.springframework.messaging.Message<?> message);\n\tprotected void onInit();\n\t// Set to true to extract the payload; otherwise the entire message is sent.\n\tvoid setExtractPayload(boolean extractPayload);\n}", "des": "Implementation of ReactiveMessageHandler which writes Message payload or Message itself (see ReactiveRedisStreamMessageHandler.extractPayload) into a Redis stream using Reactive Stream operations."}
{"index": 16358, "repo": "spring-integration-redis-6.1.2", "code": "public class ReactiveRedisStreamMessageProducer extends org.springframework.integration.endpoint.MessageProducerSupport {\n\tprotected void doStart();\n\tString getComponentType();\n\tprotected void onInit();\n\t// Set whether or not acknowledge message read in the Consumer Group.\n\tvoid setAutoAck(boolean autoAck);\n\t// Configure a batch size for the COUNT option during reading.\n\tvoid setBatchSize(int recordsPerPoll);\n\t// Set the name of the Consumer Group.\n\tvoid setConsumerGroup(String consumerGroup);\n}", "des": "A MessageProducerSupport for reading messages from a Redis Stream and publishing them into the provided output channel."}
{"index": 16359, "repo": "spring-integration-redis-6.1.2", "code": "public final class RedisLockRegistry extends Object implements org.springframework.integration.support.locks.ExpirableLockRegistry, org.springframework.beans.factory.DisposableBean {\n\tvoid destroy();\n\tvoid expireUnusedOlderThan(long age);\n\tLock obtain(Object lockKey);\n\t// Set the capacity of cached locks.\n\tvoid setCacheCapacity(int cacheCapacity);\n\t// Set the Executor, where is not provided then a default of cached thread pool Executor will be used.\n\tvoid setExecutor(Executor executor);\n}", "des": "Implementation of ExpirableLockRegistry providing a distributed lock using Redis."}
{"index": 16360, "repo": "spring-integration-redis-6.1.2", "code": "public static enum RedisLockRegistry.RedisLockType extends Enum<RedisLockRegistry.RedisLockType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RedisLockRegistry.RedisLockType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RedisLockRegistry.RedisLockType[] values();\n}", "des": "The mode in which this registry is going to work with locks."}
{"index": 16361, "repo": "spring-integration-redis-6.1.2", "code": "public class RedisMetadataStore extends Object implements org.springframework.integration.metadata.ConcurrentMetadataStore {\n\t// Retrieve the persisted value for the provided key.\n\tString get(String key);\n\t// Persists the provided key and value to Redis.\n\tvoid put(String key, String value);\n\tString putIfAbsent(String key, String value);\n\tString remove(String key);\n\tboolean replace(String key, String oldValue, String newValue);\n}", "des": "Redis implementation of ConcurrentMetadataStore."}
{"index": 16362, "repo": "spring-integration-redis-6.1.2", "code": "public class RedisStoreWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler {\n\tString getComponentType();\n\t// Will extract the payload from the Message and store it in the collection identified by the key (which may be determined by an expression).\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> message);\n\tprotected void onInit();\n}", "des": "Implementation of MessageHandler which writes Message data into a Redis store identified by a key String."}
{"index": 16363, "repo": "pulsar-broker-3.0.0", "code": "public class AntiAffinityGroupPolicyFilter extends Object implements BrokerFilter {\n\t// Filter out unqualified brokers based on implementation.\n\tMap<String,BrokerLookupData> filter(Map<String,BrokerLookupData> brokers, org.apache.pulsar.common.naming.ServiceUnitId serviceUnitId, LoadManagerContext context);\n\t// The broker filter name.\n\tString name();\n}", "des": "Filter by anti-affinity-group-policy."}
{"index": 16364, "repo": "pulsar-broker-3.0.0", "code": "public interface BrokerFilter {\n\t// Filter out unqualified brokers based on implementation.\n\tMap<String,BrokerLookupData> filter(Map<String,BrokerLookupData> brokers, org.apache.pulsar.common.naming.ServiceUnitId serviceUnit, LoadManagerContext context);\n\t// The broker filter name.\n\tString name();\n}", "des": "Filter out unqualified Brokers, which are not entered into LoadBalancer for decision-making."}
{"index": 16365, "repo": "pulsar-broker-3.0.0", "code": "public interface BrokerHostUsage {\n\t// Calculate the host usage information.\n\tvoid calculateBrokerHostUsage();\n\t// Returns the host usage information.\n\torg.apache.pulsar.policies.data.loadbalancer.SystemResourceUsage getBrokerHostUsage();\n}", "des": "Class that will return the broker host usage."}
{"index": 16366, "repo": "pulsar-broker-3.0.0", "code": "@LimitedPrivate @Evolving public interface BrokerInterceptor extends AutoCloseable {\n\t// Deprecated.\n\tdefault void beforeSendMessage(Subscription subscription, Entry entry, long[] ackSet, org.apache.pulsar.common.api.proto.MessageMetadata msgMetadata);\n\t// Intercept messages before sending them to the consumers.\n\tdefault void beforeSendMessage(Subscription subscription, Entry entry, long[] ackSet, org.apache.pulsar.common.api.proto.MessageMetadata msgMetadata, Consumer consumer);\n}", "des": "A plugin interface that allows you to intercept the client requests to the Pulsar brokers."}
{"index": 16367, "repo": "pulsar-broker-3.0.0", "code": "public class BrokerInterceptors extends Object implements BrokerInterceptor {\n\t// Intercept messages before sending them to the consumers.\n\tvoid beforeSendMessage(Subscription subscription, Entry entry, long[] ackSet, org.apache.pulsar.common.api.proto.MessageMetadata msgMetadata);\n\t// Intercept messages before sending them to the consumers.\n\tvoid beforeSendMessage(Subscription subscription, Entry entry, long[] ackSet, org.apache.pulsar.common.api.proto.MessageMetadata msgMetadata, Consumer consumer);\n}", "des": "A collection of broker interceptor."}
{"index": 16368, "repo": "pulsar-broker-3.0.0", "code": "public class BrokerInterceptorUtils extends Object {\n\t// Retrieve the broker interceptor definition from the provided handler nar package.\n\tBrokerInterceptorDefinition getBrokerInterceptorDefinition(String narPath, String narExtractionDirectory);\n\t// Search and load the available broker interceptors.\n\tBrokerInterceptorDefinitions searchForInterceptors(String interceptorsDirectory, String narExtractionDirectory);\n}", "des": "Util class to search and load BrokerInterceptors."}
{"index": 16369, "repo": "pulsar-broker-3.0.0", "code": "public class BrokerInterceptorWithClassLoader extends Object implements BrokerInterceptor {\n\t// Intercept messages before sending them to the consumers.\n\tvoid beforeSendMessage(Subscription subscription, Entry entry, long[] ackSet, org.apache.pulsar.common.api.proto.MessageMetadata msgMetadata);\n}", "des": "A broker interceptor with it's classloader."}
{"index": 16370, "repo": "pulsar-broker-3.0.0", "code": "public class BrokerLoadData extends Object {\n\tvoid clear();\n\tList<org.apache.pulsar.common.stats.Metrics> toMetrics(String advertisedBrokerAddress);\n\tString toString(ServiceConfiguration conf);\n\t// Using another BrokerLoadData, update this.\n\tvoid update(BrokerLoadData other);\n}", "des": "Contains all the data that is maintained locally on each broker."}
{"index": 16371, "repo": "pulsar-broker-3.0.0", "code": "public class BrokerLoadDataReporter extends Object implements LoadDataReporter<BrokerLoadData>, StateChangeListener {\n\t// Generate the load data.\n\tBrokerLoadData generateLoadData();\n\t// Handle the service unit state change.\n\tvoid handleEvent(String serviceUnit, ServiceUnitStateData data, Throwable t);\n\tprotected double percentChange(double oldValue, double newValue);\n\t// Report the load data to load data store async.\n\tCompletableFuture<Void> reportAsync(boolean force);\n\tprotected void tombstone();\n}", "des": "The broker load data reporter."}
{"index": 16372, "repo": "pulsar-broker-3.0.0", "code": "public interface BrokerRegistry extends AutoCloseable {\n\t// Add listener to listen the broker register change.\n\tvoid addListener(BiConsumer<String,org.apache.pulsar.metadata.api.NotificationType> listener);\n\t// Close the broker registry.\n\tvoid close();\n\t// Get the map of brokerId->brokerLookupData.\n\tCompletableFuture<Map<String,BrokerLookupData>> getAvailableBrokerLookupDataAsync();\n\t// Async get available brokers.\n\tCompletableFuture<List<String>> getAvailableBrokersAsync();\n}", "des": "Responsible for registering the current Broker lookup info to the distributed store (e.g."}
{"index": 16373, "repo": "pulsar-broker-3.0.0", "code": "public class BrokerRegistryImpl extends Object implements BrokerRegistry {\n\t// Add listener to listen the broker register change.\n\tvoid addListener(BiConsumer<String,org.apache.pulsar.metadata.api.NotificationType> listener);\n\t// Close the broker registry.\n\tvoid close();\n\t// Get the map of brokerId->brokerLookupData.\n\tCompletableFuture<Map<String,BrokerLookupData>> getAvailableBrokerLookupDataAsync();\n\t// Async get available brokers.\n\tCompletableFuture<List<String>> getAvailableBrokersAsync();\n}", "des": "The broker registry impl, base on the LockManager."}
{"index": 16374, "repo": "pulsar-broker-3.0.0", "code": "public class BrokerVersionFilter extends Object implements BrokerFilter {\n\t// From the given set of available broker candidates, filter those old brokers using the version numbers.\n\tMap<String,BrokerLookupData> filter(Map<String,BrokerLookupData> brokers, org.apache.pulsar.common.naming.ServiceUnitId serviceUnit, LoadManagerContext context);\n}", "des": "Filter by broker version."}
{"index": 16375, "repo": "pulsar-broker-3.0.0", "code": "@LimitedPrivate @Stable public interface CompactorMXBean {\n\t// Get the compaction record of the topic.\n\tOptional<CompactionRecord> getCompactionRecordForTopic(String topic);\n\t// Remove metrics about this topic.\n\tvoid removeTopic(String topic);\n}", "des": "JMX Bean interface for Compactor stats."}
{"index": 16376, "repo": "pulsar-broker-3.0.0", "code": "public class ConsistentHashingStickyKeyConsumerSelector extends Object implements StickyKeyConsumerSelector {\n\t// Add a new consumer.\n\tCompletableFuture<Void> addConsumer(Consumer consumer);\n\t// Get key hash ranges handled by each consumer.\n\tMap<Consumer,List<org.apache.pulsar.client.api.Range>> getConsumerKeyHashRanges();\n\t// Remove the consumer.\n\tvoid removeConsumer(Consumer consumer);\n\t// Select a consumer by hash.\n\tConsumer select(int hash);\n}", "des": "This is a consumer selector based fixed hash range."}
{"index": 16377, "repo": "pulsar-broker-3.0.0", "code": "public class Consumer extends Object {\n\tCompletableFuture<Void> checkPermissionsAsync();\n\t// Close the consumer if: a.\n\tvoid close();\n\tvoid close(boolean isResetCursor);\n\tTransportCnx cnx();\n\tlong consumerId();\n\tString consumerName();\n\tvoid disconnect();\n\tvoid disconnect(boolean isResetCursor);\n\tvoid doUnsubscribe(long requestId);\n\tboolean equals(Object obj);\n\tvoid flowPermits(int additionalNumberOfMessages);\n\tint getAvailablePermits();\n}", "des": "A Consumer is a consumer currently connected and associated with a Subscription."}
{"index": 16378, "repo": "pulsar-broker-3.0.0", "code": "@Beta public interface DelayedDeliveryTracker extends AutoCloseable {\n\t// Add a message to the tracker.\n\tboolean addMessage(long ledgerId, long entryId, long deliveryAt);\n\t// Clear all delayed messages from the tracker.\n\tCompletableFuture<Void> clear();\n\t// Close the subscription tracker and release all resources.\n\tvoid close();\n\t// The amount of memory used to back the delayed message index.\n\tlong getBufferMemoryUsage();\n\tlong getNumberOfDelayedMessages();\n}", "des": "Represent the tracker for the delayed delivery of messages for a particular subscription."}
{"index": 16379, "repo": "pulsar-broker-3.0.0", "code": "@Beta public interface DelayedDeliveryTrackerFactory extends AutoCloseable {\n\t// Close the factory and release all the resources.\n\tvoid close();\n\t// Initialize the factory implementation from the broker service configuration.\n\tvoid initialize(PulsarService pulsarService);\n\t// Create a new tracker instance.\n\tDelayedDeliveryTracker newTracker(PersistentDispatcherMultipleConsumers dispatcher);\n}", "des": "Factory of InMemoryDelayedDeliveryTracker objects."}
{"index": 16380, "repo": "pulsar-broker-3.0.0", "code": "public static final class DelayedMessageIndexBucketSnapshotFormat.SnapshotSegment.Builder extends com.google.protobuf.GeneratedMessageV3.Builder<DelayedMessageIndexBucketSnapshotFormat.SnapshotSegment.Builder> implements DelayedMessageIndexBucketSnapshotFormat.SnapshotSegmentOrBuilder {\n\t// repeated .pulsar.delay.DelayedIndex indexes = 1;\n\tDelayedMessageIndexBucketSnapshotFormat.SnapshotSegment.Builder addAllIndexes(Iterable<? extends DelayedMessageIndexBucketSnapshotFormat.DelayedIndex> values);\n}", "des": "Protobuf type pulsar.delay.SnapshotSegment"}
{"index": 16381, "repo": "pulsar-broker-3.0.0", "code": "public interface ExtensibleLoadManager extends Closeable {\n\t// The incoming service unit (e.g.\n\tCompletableFuture<Optional<BrokerLookupData>> assign(Optional<org.apache.pulsar.common.naming.ServiceUnitId> topic, org.apache.pulsar.common.naming.ServiceUnitId serviceUnit);\n\t// Check the incoming service unit is owned by the current broker.\n\tCompletableFuture<Boolean> checkOwnershipAsync(Optional<org.apache.pulsar.common.naming.ServiceUnitId> topic, org.apache.pulsar.common.naming.ServiceUnitId serviceUnit);\n}", "des": "Find the appropriate broker for service unit (e.g."}
{"index": 16382, "repo": "pulsar-broker-3.0.0", "code": "public class GenericBrokerHostUsageImpl extends Object implements BrokerHostUsage {\n\t// Calculate the host usage information.\n\tvoid calculateBrokerHostUsage();\n\t// Returns the host usage information.\n\torg.apache.pulsar.policies.data.loadbalancer.SystemResourceUsage getBrokerHostUsage();\n}", "des": "Class that will return the broker host usage."}
{"index": 16383, "repo": "pulsar-broker-3.0.0", "code": "public class HashRangeAutoSplitStickyKeyConsumerSelector extends Object implements StickyKeyConsumerSelector {\n\t// Add a new consumer.\n\tCompletableFuture<Void> addConsumer(Consumer consumer);\n\t// Get key hash ranges handled by each consumer.\n\tMap<Consumer,List<org.apache.pulsar.client.api.Range>> getConsumerKeyHashRanges();\n\t// Remove the consumer.\n\tvoid removeConsumer(Consumer consumer);\n\t// Select a consumer by hash.\n\tConsumer select(int hash);\n}", "des": "This is a consumer selector based fixed hash range."}
{"index": 16384, "repo": "pulsar-broker-3.0.0", "code": "public class HashRangeExclusiveStickyKeyConsumerSelector extends Object implements StickyKeyConsumerSelector {\n\t// Add a new consumer.\n\tCompletableFuture<Void> addConsumer(Consumer consumer);\n\t// Get key hash ranges handled by each consumer.\n\tMap<Consumer,List<org.apache.pulsar.client.api.Range>> getConsumerKeyHashRanges();\n\t// Remove the consumer.\n\tvoid removeConsumer(Consumer consumer);\n\t// Select a consumer by hash.\n\tConsumer select(int hash);\n}", "des": "This is a sticky-key consumer selector based user provided range."}
{"index": 16385, "repo": "pulsar-broker-3.0.0", "code": "public class InMemoryPendingAckStore extends Object implements PendingAckStore {\n\t// Append the pending ack abort mark to the ack persistent store.\n\tCompletableFuture<Void> appendAbortMark(org.apache.pulsar.client.api.transaction.TxnID txnID, org.apache.pulsar.common.api.proto.CommandAck.AckType ackType);\n}", "des": "In memory implementation of PendingAckStore."}
{"index": 16386, "repo": "pulsar-broker-3.0.0", "code": "public class LeastResourceUsageWithWeight extends Object implements ModularLoadManagerStrategy {\n\t// Triggered when active brokers change.\n\tvoid onActiveBrokersChange(Set<String> activeBrokers);\n\t// Find a suitable broker to assign the given bundle to.\n\tOptional<String> selectBroker(Set<String> candidates, org.apache.pulsar.policies.data.loadbalancer.BundleData bundleToAssign, LoadData loadData, ServiceConfiguration conf);\n}", "des": "Placement strategy which selects a broker based on which one has the least resource usage with weight."}
{"index": 16387, "repo": "pulsar-broker-3.0.0", "code": "public class LinuxBrokerHostUsageImpl extends Object implements BrokerHostUsage {\n\t// Calculate the host usage information.\n\tvoid calculateBrokerHostUsage();\n\t// Returns the host usage information.\n\torg.apache.pulsar.policies.data.loadbalancer.SystemResourceUsage getBrokerHostUsage();\n}", "des": "Class that will return the broker host usage."}
{"index": 16388, "repo": "pulsar-broker-3.0.0", "code": "public interface LoadDataReporter<T> {\n\t// Generate the load data.\n\tT generateLoadData();\n\t// Report the load data to load data store async.\n\tCompletableFuture<Void> reportAsync(boolean force);\n}", "des": "The load data reporter, it publish the load data to load data storage."}
{"index": 16389, "repo": "pulsar-broker-3.0.0", "code": "public interface LoadDataStore<T> extends Closeable {\n\t// Closes the table view.\n\tvoid closeTableView();\n\t// Returns a Set view of the mappings contained in this map.\n\tSet<Map.Entry<String,T>> entrySet();\n\t// Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.\n\tvoid forEach(BiConsumer<String,T> action);\n\t// Get load data by key.\n\tOptional<T> get(String key);\n}", "des": "The load data store interface."}
{"index": 16390, "repo": "pulsar-broker-3.0.0", "code": "public interface LoadManager {\n\tdefault CompletableFuture<Boolean> checkOwnershipAsync(Optional<org.apache.pulsar.common.naming.ServiceUnitId> topic, org.apache.pulsar.common.naming.ServiceUnitId bundle);\n\tstatic LoadManager create(PulsarService pulsar);\n\t// Removes visibility of current broker from loadbalancer list so, other brokers can't redirect any request to this broker and this broker won't accept new connection requests.\n\tvoid disableBroker();\n}", "des": "LoadManager runs through set of load reports collected from different brokers and generates a recommendation of namespace/ServiceUnit placement on machines/ResourceUnit."}
{"index": 16391, "repo": "pulsar-broker-3.0.0", "code": "public interface LoadManagerContext {\n\t// The broker configuration.\n\tServiceConfiguration brokerConfiguration();\n\t// Broker load data store, each component use the context to access the load data store.\n\tLoadDataStore<BrokerLoadData> brokerLoadDataStore();\n\t// The broker register.\n\tBrokerRegistry brokerRegistry();\n\t// Top bundle load data store.\n\tLoadDataStore<TopBundlesLoadData> topBundleLoadDataStore();\n}", "des": "The filter and load balance context, use for delivering context between filter, scheduler and strategy."}
{"index": 16392, "repo": "pulsar-broker-3.0.0", "code": "public interface LoadManagerScheduler extends Closeable {\n\t// Close the load manager scheduler.\n\tvoid close();\n\t// Execute the schedule task.\n\tvoid execute();\n\t// Start the load manager scheduler.\n\tvoid start();\n}", "des": "The base interface to schedule execute task in load manager."}
{"index": 16393, "repo": "pulsar-broker-3.0.0", "code": "public interface LoadSheddingStrategy {\n\t// Recommend that all of the returned bundles be unloaded.\n\tcom.google.common.collect.Multimap<String,String> findBundlesForUnloading(LoadData loadData, ServiceConfiguration conf);\n\t// Triggered when active broker changes.\n\tdefault void onActiveBrokersChange(Set<String> activeBrokers);\n}", "des": "Load management component which determines the criteria for unloading bundles."}
{"index": 16394, "repo": "pulsar-broker-3.0.0", "code": "@Private @Unstable public interface ManagedLedgerStorage extends AutoCloseable {\n\t// Close the storage.\n\tvoid close();\n\t// Initialize the ManagedLedgerStorage from the provided resources.\n\tstatic ManagedLedgerStorage create(ServiceConfiguration conf, org.apache.pulsar.metadata.api.extended.MetadataStoreExtended metadataStore, BookKeeperClientFactory bkProvider, io.netty.channel.EventLoopGroup eventLoopGroup);\n\t// Return the default bookkeeper client.\n\tBookKeeper getBookKeeperClient();\n}", "des": "Storage to access ManagedLedgers."}
{"index": 16395, "repo": "pulsar-broker-3.0.0", "code": "public class MessageDeduplication extends Object {\n\t// Check the status of deduplication.\n\tCompletableFuture<Void> checkStatus();\n\tlong getLastPublishedSequenceId(String producerName);\n\torg.apache.pulsar.broker.service.persistent.MessageDeduplication.Status getStatus();\n\t// Assess whether the message was already stored in the topic.\n\tMessageDeduplication.MessageDupStatus isDuplicate(Topic.PublishContext publishContext, io.netty.buffer.ByteBuf headersAndPayload);\n\tboolean isEnabled();\n}", "des": "Class that contains all the logic to control and perform the deduplication on the broker side."}
{"index": 16396, "repo": "pulsar-broker-3.0.0", "code": "public class MLPendingAckReplyCallBack extends Object implements PendingAckReplyCallBack {\n\t// Handle metadata entry.\n\tvoid handleMetadataEntry(PendingAckMetadataEntry pendingAckMetadataEntry);\n\t// Pending ack replay complete callback for pending ack store.\n\tvoid replayComplete();\n\t// Pending ack replay failed callback for pending ack store.\n\tvoid replayFailed(Throwable t);\n}", "des": "MLPendingAckStore reply call back."}
{"index": 16397, "repo": "pulsar-broker-3.0.0", "code": "public class MLPendingAckStore extends Object implements PendingAckStore {\n\t// Append the pending ack abort mark to the ack persistent store.\n\tCompletableFuture<Void> appendAbortMark(org.apache.pulsar.client.api.transaction.TxnID txnID, org.apache.pulsar.common.api.proto.CommandAck.AckType ackType);\n}", "des": "The implement of the pending ack store by manageLedger."}
{"index": 16398, "repo": "pulsar-broker-3.0.0", "code": "public class MLPendingAckStoreProvider extends Object implements TransactionPendingAckStoreProvider {\n\t// Check pending ack store has been initialized before.\n\tCompletableFuture<Boolean> checkInitializedBefore(PersistentSubscription subscription);\n\tstatic void closeBufferedWriterMetrics();\n\tstatic void initBufferedWriterMetrics(String brokerAdvertisedAddress);\n\t// Open the pending ack store.\n\tCompletableFuture<PendingAckStore> newPendingAckStore(PersistentSubscription subscription);\n}", "des": "Provider is for MLPendingAckStore."}
{"index": 16399, "repo": "pulsar-broker-3.0.0", "code": "public interface ModularLoadManager {\n\t// As the leader broker, attempt to automatically detect and split hot namespace bundles.\n\tvoid checkNamespaceBundleSplit();\n\t// As any broker, disable the broker this manager is running on.\n\tvoid disableBroker();\n\t// As the leader broker, select bundles for the namespace service to unload so that they may be reassigned to new brokers.\n\tvoid doLoadShedding();\n\t// Get available broker list in cluster.\n\tSet<String> getAvailableBrokers();\n}", "des": "New proposal for a load manager interface which attempts to use more intuitive method names and provide a starting place for new load manager proposals."}
{"index": 16400, "repo": "pulsar-broker-3.0.0", "code": "public interface ModularLoadManagerStrategy {\n\t// Create a placement strategy using the configuration.\n\tstatic ModularLoadManagerStrategy create(ServiceConfiguration conf);\n\t// Triggered when active brokers change.\n\tdefault void onActiveBrokersChange(Set<String> activeBrokers);\n\t// Find a suitable broker to assign the given bundle to.\n\tOptional<String> selectBroker(Set<String> candidates, org.apache.pulsar.policies.data.loadbalancer.BundleData bundleToAssign, LoadData loadData, ServiceConfiguration conf);\n}", "des": "Interface which serves as a component for ModularLoadManagerImpl, flexibly allowing the injection of potentially complex strategies."}
{"index": 16401, "repo": "pulsar-broker-3.0.0", "code": "public class ModularLoadManagerWrapper extends Object implements LoadManager {\n\t// Removes visibility of current broker from loadbalancer list so, other brokers can't redirect any request to this broker and this broker won't accept new connection requests.\n\tvoid disableBroker();\n\t// Unload a candidate service unit to balance the load.\n\tvoid doLoadShedding();\n\t// Namespace bundle split.\n\tvoid doNamespaceBundleSplit();\n}", "des": "Wrapper class allowing classes of instance ModularLoadManager to be compatible with the interface LoadManager."}
{"index": 16402, "repo": "pulsar-broker-3.0.0", "code": "public interface NamespaceBundleOwnershipListener extends Predicate<NamespaceBundle> {\n\t// Will be call after a NamespaceBundle owned by broker.\n\tvoid onLoad(NamespaceBundle bundle);\n\t// Will be call after a NamespaceBundle unloaded from broker.\n\tvoid unLoad(NamespaceBundle bundle);\n}", "des": "Listener for NamespaceBundle ownership changes."}
{"index": 16403, "repo": "pulsar-broker-3.0.0", "code": "public interface NamespaceUnloadStrategy {\n\t// Recommend that all the returned bundles be unloaded.\n\tSet<UnloadDecision> findBundlesForUnloading(LoadManagerContext context, Map<String,Long> recentlyUnloadedBundles, Map<String,Long> recentlyUnloadedBrokers);\n\t// Initializes the internals.\n\tvoid initialize(PulsarService pulsar);\n}", "des": "The namespace unload strategy."}
{"index": 16404, "repo": "pulsar-broker-3.0.0", "code": "public class OwnershipCache extends Object {\n\t// Check whether this broker owns given namespace bundle.\n\tCompletableFuture<Boolean> checkOwnershipAsync(NamespaceBundle bundle);\n\t// Disable bundle in local cache and on zk.\n\tCompletableFuture<Void> disableOwnership(NamespaceBundle bundle);\n\tMap<NamespaceBundle,org.apache.pulsar.metadata.api.coordination.ResourceLock<NamespaceEphemeralData>> getLocallyAcquiredLocks();\n}", "des": "This class provides a cache service for all the service unit ownership among the brokers."}
{"index": 16405, "repo": "pulsar-broker-3.0.0", "code": "public interface PendingAckHandle {\n\t// Abort a transaction.\n\tCompletableFuture<Void> abortTxn(org.apache.pulsar.client.api.transaction.TxnID txnId, Consumer consumer, long lowWaterMark);\n\t// Check if the PendingAckStore is init.\n\tboolean checkIfPendingAckStoreInit();\n\t// Judge the all ack set point have acked by normal ack and transaction pending ack.\n\tboolean checkIsCanDeleteConsumerPendingAck(PositionImpl position);\n}", "des": "Handle for processing pending acks for transactions."}
{"index": 16406, "repo": "pulsar-broker-3.0.0", "code": "public class PendingAckHandleDisabled extends Object implements PendingAckHandle {\n\t// Abort a transaction.\n\tCompletableFuture<Void> abortTxn(org.apache.pulsar.client.api.transaction.TxnID txnId, Consumer consumer, long lowWaterMark);\n\t// Check if the PendingAckStore is init.\n\tboolean checkIfPendingAckStoreInit();\n\t// Judge the all ack set point have acked by normal ack and transaction pending ack.\n\tboolean checkIsCanDeleteConsumerPendingAck(PositionImpl position);\n}", "des": "The disabled implementation of PendingAckHandle."}
{"index": 16407, "repo": "pulsar-broker-3.0.0", "code": "public class PendingAckHandleImpl extends PendingAckHandleState implements PendingAckHandle {\n\t// Abort a transaction.\n\tCompletableFuture<Void> abortTxn(org.apache.pulsar.client.api.transaction.TxnID txnId, Consumer consumer, long lowWaterMark);\n\t// Check if the PendingAckStore is init.\n\tboolean checkIfPendingAckStoreInit();\n\t// Judge the all ack set point have acked by normal ack and transaction pending ack.\n\tboolean checkIsCanDeleteConsumerPendingAck(PositionImpl position);\n}", "des": "The default implementation of PendingAckHandle."}
{"index": 16408, "repo": "pulsar-broker-3.0.0", "code": "public static enum PendingAckHandleState.State extends Enum<PendingAckHandleState.State> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PendingAckHandleState.State valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PendingAckHandleState.State[] values();\n}", "des": "The state of the pending ack handle PendingAckHandleState."}
{"index": 16409, "repo": "pulsar-broker-3.0.0", "code": "public interface PendingAckReplyCallBack {\n\t// Handle metadata entry.\n\tvoid handleMetadataEntry(PendingAckMetadataEntry pendingAckMetadataEntry);\n\t// Pending ack replay complete callback for pending ack store.\n\tvoid replayComplete();\n\t// Pending ack replay failed callback for pending ack store.\n\tvoid replayFailed(Throwable t);\n}", "des": "Call back for pending ack reply."}
{"index": 16410, "repo": "pulsar-broker-3.0.0", "code": "public interface PendingAckStore {\n\t// Append the pending ack abort mark to the ack persistent store.\n\tCompletableFuture<Void> appendAbortMark(org.apache.pulsar.client.api.transaction.TxnID txnID, org.apache.pulsar.common.api.proto.CommandAck.AckType ackType);\n\t// Append the pending ack commit mark to the ack persistent store.\n\tCompletableFuture<Void> appendCommitMark(org.apache.pulsar.client.api.transaction.TxnID txnID, org.apache.pulsar.common.api.proto.CommandAck.AckType ackType);\n}", "des": "To store transaction pending ack."}
{"index": 16411, "repo": "pulsar-broker-3.0.0", "code": "public class PersistentStreamingDispatcherMultipleConsumers extends PersistentDispatcherMultipleConsumers implements StreamingDispatcher {\n\tprotected void acquireSendInProgress();\n\tprotected void cancelPendingRead();\n\t// Notify dispatcher can issue next read request.\n\tvoid canReadMoreEntries(boolean withBackoff);\n\tprotected boolean isSendInProgress();\n\t// Notify dispatcher to inform consumers reached end of topic.\n\tvoid notifyConsumersEndOfTopic();\n}", "des": "A PersistentDispatcherMultipleConsumers implemented StreamingDispatcher."}
{"index": 16412, "repo": "pulsar-broker-3.0.0", "code": "public class PersistentStreamingDispatcherSingleActiveConsumer extends PersistentDispatcherSingleActiveConsumer implements StreamingDispatcher {\n\tprotected void cancelPendingRead();\n\t// Notify dispatcher can issue next read request.\n\tvoid canReadMoreEntries(boolean withBackoff);\n\tString getName();\n\tvoid internalReadEntryComplete(Entry entry, PendingReadEntryRequest ctx);\n\t// Notify dispatcher to inform consumers reached end of topic.\n\tvoid notifyConsumersEndOfTopic();\n}", "des": "A PersistentDispatcherSingleActiveConsumer implemented StreamingDispatcher."}
{"index": 16413, "repo": "pulsar-broker-3.0.0", "code": "public class Producer extends Object {\n\tboolean checkAndStartPublish(long producerId, long sequenceId, io.netty.buffer.ByteBuf headersAndPayload, long batchSize, Position position);\n\tvoid checkEncryption();\n\tCompletableFuture<Void> checkPermissionsAsync();\n\t// Close the producer immediately if: a.\n\tCompletableFuture<Void> close(boolean removeFromTopic);\n\tvoid closeNow(boolean removeFromTopic);\n}", "des": "Represents a currently connected producer."}
{"index": 16414, "repo": "pulsar-broker-3.0.0", "code": "@LimitedPrivate @Evolving public interface ProtocolHandler extends AutoCloseable {\n\t// Verify if the protocol can speak the given protocol.\n\tboolean accept(String protocol);\n\tvoid close();\n\t// Retrieve the protocol related data to advertise as part of LocalBrokerData.\n\tString getProtocolDataToAdvertise();\n\t// Initialize the protocol handler when the protocol is constructed from reflection.\n\tvoid initialize(ServiceConfiguration conf);\n}", "des": "The protocol handler interface for support additional protocols on Pulsar brokers."}
{"index": 16415, "repo": "pulsar-broker-3.0.0", "code": "public class ProtocolHandlers extends Object implements AutoCloseable {\n\tvoid close();\n\tMap<String,String> getProtocolDataToAdvertise();\n\tvoid initialize(ServiceConfiguration conf);\n\t// Load the protocol handlers for the given protocol list.\n\tstatic ProtocolHandlers load(ServiceConfiguration conf);\n\tMap<String,Map<InetSocketAddress,io.netty.channel.ChannelInitializer<io.netty.channel.socket.SocketChannel>>> newChannelInitializers();\n}", "des": "A collection of loaded handlers."}
{"index": 16416, "repo": "pulsar-broker-3.0.0", "code": "public class PulsarService extends Object implements AutoCloseable, ShutdownService {\n\tprotected void acquireSLANamespace();\n\tvoid addPrometheusRawMetricsProvider(PrometheusRawMetricsProvider metricsProvider);\n\tstatic String brokerUrl(String host, int port);\n\t// Gets the broker service URL (non-TLS) associated with the internal listener.\n\tprotected String brokerUrl(ServiceConfiguration config);\n\tstatic String brokerUrlTls(String host, int port);\n}", "des": "Main class for Pulsar broker service."}
{"index": 16417, "repo": "pulsar-broker-3.0.0", "code": "public interface RawMessage extends AutoCloseable {\n\tvoid close();\n\t// Get a ByteBuf which contains the headers and payload of the message.\n\tio.netty.buffer.ByteBuf getHeadersAndPayload();\n\t// Get the message ID of this message.\n\torg.apache.pulsar.client.api.MessageId getMessageId();\n\t// Get the protobuf representation of the message ID of this message.\n\torg.apache.pulsar.common.api.proto.MessageIdData getMessageIdData();\n\t// Serialize a raw message to a ByteBuf.\n\tio.netty.buffer.ByteBuf serialize();\n}", "des": "A representation of a message in a topic in its raw form (i.e."}
{"index": 16418, "repo": "pulsar-broker-3.0.0", "code": "public interface RawReader {\n\t// Acknowledge all messages as read up until messageId.\n\tCompletableFuture<Void> acknowledgeCumulativeAsync(org.apache.pulsar.client.api.MessageId messageId, Map<String,Long> properties);\n\t// Close the raw reader.\n\tCompletableFuture<Void> closeAsync();\n\t// Create a raw reader for a topic.\n\tstatic CompletableFuture<RawReader> create(org.apache.pulsar.client.api.PulsarClient client, String topic, String subscription);\n}", "des": "Topic reader which receives raw messages (i.e."}
{"index": 16419, "repo": "pulsar-broker-3.0.0", "code": "public static enum ResourceGroup.ResourceGroupMonitoringClass extends Enum<ResourceGroup.ResourceGroupMonitoringClass> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ResourceGroup.ResourceGroupMonitoringClass valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ResourceGroup.ResourceGroupMonitoringClass[] values();\n}", "des": "Usage \"sense\" for resource groups: publish and dispatch for now; may be more later (e.g., storage-monitoring) ToDo: \"class\" is vague; is there a better term to call this?"}
{"index": 16420, "repo": "pulsar-broker-3.0.0", "code": "public static enum ResourceGroup.ResourceGroupRefTypes extends Enum<ResourceGroup.ResourceGroupRefTypes> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ResourceGroup.ResourceGroupRefTypes valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ResourceGroup.ResourceGroupRefTypes[] values();\n}", "des": "The entities that might reference RGs are tenants, namespaces (and maybe topics, later)."}
{"index": 16421, "repo": "pulsar-broker-3.0.0", "code": "public class ResourceGroupService extends Object implements AutoCloseable {\n\tprotected void aggregateResourceGroupLocalUsages();\n\tprotected void calculateQuotaForAllResourceGroups();\n\tvoid close();\n\t// Return the resource group associated with a namespace.\n\tResourceGroup getNamespaceResourceGroup(org.apache.pulsar.common.naming.NamespaceName namespaceName);\n\t// Get the current number of RGs.\n\tprotected long getNumResourceGroups();\n}", "des": "The ResourceGroupService contains APIs to manipulate resource groups."}
{"index": 16422, "repo": "pulsar-broker-3.0.0", "code": "public interface SchemaDataValidator {\n\t// Validate a schema data is in a valid form.\n\tvoid validate(org.apache.pulsar.common.protocol.schema.SchemaData schemaData);\n\t// Validate if the schema data is well formed.\n\tstatic void validateSchemaData(org.apache.pulsar.common.protocol.schema.SchemaData schemaData);\n}", "des": "A validator to validate the schema data is well formed."}
{"index": 16423, "repo": "pulsar-broker-3.0.0", "code": "public static final class SchemaRegistryFormat.SchemaInfo.Builder extends com.google.protobuf.GeneratedMessageV3.Builder<SchemaRegistryFormat.SchemaInfo.Builder> implements SchemaRegistryFormat.SchemaInfoOrBuilder {\n\t// repeated .pulsar.schema.SchemaInfo.KeyValuePair props = 7;\n\tSchemaRegistryFormat.SchemaInfo.Builder addAllProps(Iterable<? extends SchemaRegistryFormat.SchemaInfo.KeyValuePair> values);\n}", "des": "Protobuf type pulsar.schema.SchemaInfo"}
{"index": 16424, "repo": "pulsar-broker-3.0.0", "code": "public static final class SchemaRegistryFormat.SchemaInfo.KeyValuePair extends com.google.protobuf.GeneratedMessageV3 implements SchemaRegistryFormat.SchemaInfo.KeyValuePairOrBuilder {\n\tboolean equals(Object obj);\n\tstatic SchemaRegistryFormat.SchemaInfo.KeyValuePair getDefaultInstance();\n\tSchemaRegistryFormat.SchemaInfo.KeyValuePair getDefaultInstanceForType();\n\tstatic final com.google.protobuf.Descriptors.Descriptor getDescriptor();\n\t// required string key = 1;\n\tString getKey();\n}", "des": "Protobuf type pulsar.schema.SchemaInfo.KeyValuePair"}
{"index": 16425, "repo": "pulsar-broker-3.0.0", "code": "public static final class SchemaStorageFormat.PositionInfo extends com.google.protobuf.GeneratedMessageV3 implements SchemaStorageFormat.PositionInfoOrBuilder {\n\tboolean equals(Object obj);\n\tstatic SchemaStorageFormat.PositionInfo getDefaultInstance();\n\tSchemaStorageFormat.PositionInfo getDefaultInstanceForType();\n\tstatic final com.google.protobuf.Descriptors.Descriptor getDescriptor();\n\t// required int64 entryId = 2;\n\tlong getEntryId();\n\t// required int64 ledgerId = 1;\n\tlong getLedgerId();\n}", "des": "Protobuf type pulsar.schema.PositionInfo"}
{"index": 16426, "repo": "pulsar-broker-3.0.0", "code": "public static final class SchemaStorageFormat.SchemaEntry extends com.google.protobuf.GeneratedMessageV3 implements SchemaStorageFormat.SchemaEntryOrBuilder {\n\tboolean equals(Object obj);\n\tstatic SchemaStorageFormat.SchemaEntry getDefaultInstance();\n\tSchemaStorageFormat.SchemaEntry getDefaultInstanceForType();\n\tstatic final com.google.protobuf.Descriptors.Descriptor getDescriptor();\n\t// repeated .pulsar.schema.IndexEntry index = 5;\n\tSchemaStorageFormat.IndexEntry getIndex(int index);\n}", "des": "Protobuf type pulsar.schema.SchemaEntry"}
{"index": 16427, "repo": "pulsar-broker-3.0.0", "code": "public static final class SchemaStorageFormat.SchemaEntry.Builder extends com.google.protobuf.GeneratedMessageV3.Builder<SchemaStorageFormat.SchemaEntry.Builder> implements SchemaStorageFormat.SchemaEntryOrBuilder {\n\t// repeated .pulsar.schema.IndexEntry index = 5;\n\tSchemaStorageFormat.SchemaEntry.Builder addAllIndex(Iterable<? extends SchemaStorageFormat.IndexEntry> values);\n}", "des": "Protobuf type pulsar.schema.SchemaEntry"}
{"index": 16428, "repo": "pulsar-broker-3.0.0", "code": "public static final class SchemaStorageFormat.SchemaLocator extends com.google.protobuf.GeneratedMessageV3 implements SchemaStorageFormat.SchemaLocatorOrBuilder {\n\tboolean equals(Object obj);\n\tstatic SchemaStorageFormat.SchemaLocator getDefaultInstance();\n\tSchemaStorageFormat.SchemaLocator getDefaultInstanceForType();\n\tstatic final com.google.protobuf.Descriptors.Descriptor getDescriptor();\n\t// repeated .pulsar.schema.IndexEntry index = 2;\n\tSchemaStorageFormat.IndexEntry getIndex(int index);\n}", "des": "Protobuf type pulsar.schema.SchemaLocator"}
{"index": 16429, "repo": "pulsar-broker-3.0.0", "code": "public static final class SchemaStorageFormat.SchemaLocator.Builder extends com.google.protobuf.GeneratedMessageV3.Builder<SchemaStorageFormat.SchemaLocator.Builder> implements SchemaStorageFormat.SchemaLocatorOrBuilder {\n\t// repeated .pulsar.schema.IndexEntry index = 2;\n\tSchemaStorageFormat.SchemaLocator.Builder addAllIndex(Iterable<? extends SchemaStorageFormat.IndexEntry> values);\n}", "des": "Protobuf type pulsar.schema.SchemaLocator"}
{"index": 16430, "repo": "pulsar-broker-3.0.0", "code": "public enum ServiceUnitState extends Enum<ServiceUnitState> {\n\tstatic boolean isActiveState(ServiceUnitState state);\n\tstatic boolean isInFlightState(ServiceUnitState state);\n\tstatic boolean isValidTransition(ServiceUnitState from, ServiceUnitState to);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ServiceUnitState valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ServiceUnitState[] values();\n}", "des": "Defines the possible states for service units."}
{"index": 16431, "repo": "pulsar-broker-3.0.0", "code": "public interface ServiceUnitStateChannel extends Closeable {\n\t// Cancels the ownership monitor.\n\tvoid cancelOwnershipMonitor();\n\t// Closes the ServiceUnitStateChannel.\n\tvoid close();\n\t// Asynchronously gets the current owner broker of the system topic in this channel.\n\tCompletableFuture<Optional<String>> getChannelOwnerAsync();\n\t// Generates the metrics to monitor.\n\tList<org.apache.pulsar.common.stats.Metrics> getMetrics();\n}", "des": "Defines the ServiceUnitStateChannel interface."}
{"index": 16432, "repo": "pulsar-broker-3.0.0", "code": "public record ServiceUnitStateData(ServiceUnitState state, String dstBroker, String sourceBroker, Map<String,Optional<String>> splitServiceUnitToDestBroker, boolean force, long timestamp, long versionId) extends Record {\n\t// Returns the value of the dstBroker record component.\n\tString dstBroker();\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the force record component.\n\tboolean force();\n}", "des": "Defines data for the service unit state changes."}
{"index": 16433, "repo": "pulsar-broker-3.0.0", "code": "public record Split(String serviceUnit, String sourceBroker, Map<String,Optional<String>> splitServiceUnitToDestBroker) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the serviceUnit record component.\n\tString serviceUnit();\n\t// Returns the value of the sourceBroker record component.\n\tString sourceBroker();\n}", "des": "Defines the information required for a service unit split(e.g."}
{"index": 16434, "repo": "pulsar-broker-3.0.0", "code": "public class SplitScheduler extends Object implements LoadManagerScheduler {\n\t// Close the load manager scheduler.\n\tvoid close();\n\t// Execute the schedule task.\n\tvoid execute();\n\t// Start the load manager scheduler.\n\tvoid start();\n}", "des": "Service Unit(e.g."}
{"index": 16435, "repo": "pulsar-broker-3.0.0", "code": "@Unstable public interface StreamingDispatcher extends Dispatcher {\n\t// Notify dispatcher can issue next read request.\n\tvoid canReadMoreEntries(boolean withBackoff);\n\tString getName();\n\t// Notify dispatcher to inform consumers reached end of topic.\n\tvoid notifyConsumersEndOfTopic();\n\t// Notify dispatcher issued read entry request has complete.\n\tvoid readEntryComplete(Entry entry, PendingReadEntryRequest ctx);\n}", "des": "A Dispatcher that'll use StreamingEntryReader to read entries from ManagedLedger."}
{"index": 16436, "repo": "pulsar-broker-3.0.0", "code": "public class SystemTopicBasedTopicPoliciesService extends Object implements TopicPoliciesService {\n\t// Add owned namespace bundle async.\n\tCompletableFuture<Void> addOwnedNamespaceBundleAsync(NamespaceBundle namespaceBundle);\n\tprotected CompletableFuture<SystemTopicClient.Reader<org.apache.pulsar.common.events.PulsarEvent>> createSystemTopicClientWithRetry(org.apache.pulsar.common.naming.NamespaceName namespace);\n}", "des": "Cached topic policies service will cache the system topic reader and the topic policies While reader cache for the namespace was removed, the topic policies will remove automatically."}
{"index": 16437, "repo": "pulsar-broker-3.0.0", "code": "public interface SystemTopicClient<T> {\n\t// Close the system topic.\n\tvoid close();\n\t// Close the system topic asynchronously.\n\tCompletableFuture<Void> closeAsync();\n\t// Get all readers of the system topic.\n\tList<SystemTopicClient.Reader<T>> getReaders();\n\t// Get topic name of the system topic.\n\torg.apache.pulsar.common.naming.TopicName getTopicName();\n\t// Get all writers of the system topic.\n\tList<SystemTopicClient.Writer<T>> getWriters();\n}", "des": "Pulsar system topic."}
{"index": 16438, "repo": "pulsar-broker-3.0.0", "code": "public static interface SystemTopicClient.Reader<T> {\n\t// Close the system topic reader.\n\tvoid close();\n\t// Close the reader of the system topic asynchronously.\n\tCompletableFuture<Void> closeAsync();\n\t// Get the system topic of the reader.\n\tSystemTopicClient<T> getSystemTopic();\n\t// Check has more events available for the reader.\n\tboolean hasMoreEvents();\n\t// Check has more events available for the reader asynchronously.\n\tCompletableFuture<Boolean> hasMoreEventsAsync();\n}", "des": "Reader for system topic."}
{"index": 16439, "repo": "pulsar-broker-3.0.0", "code": "public static interface SystemTopicClient.Writer<T> {\n\t// Close the system topic writer.\n\tvoid close();\n\t// Close the writer of the system topic asynchronously.\n\tCompletableFuture<Void> closeAsync();\n\t// Delete event in the system topic.\n\tdefault org.apache.pulsar.client.api.MessageId delete(String key, T t);\n\t// Async delete event in the system topic.\n\tdefault CompletableFuture<org.apache.pulsar.client.api.MessageId> deleteAsync(String key, T t);\n}", "des": "Writer for system topic."}
{"index": 16440, "repo": "pulsar-broker-3.0.0", "code": "public class TableViewLoadDataStoreImpl<T> extends Object implements LoadDataStore<T> {\n\tvoid close();\n\t// Closes the table view.\n\tvoid closeTableView();\n\t// Returns a Set view of the mappings contained in this map.\n\tSet<Map.Entry<String,T>> entrySet();\n\t// Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.\n\tvoid forEach(BiConsumer<String,T> action);\n\t// Get load data by key.\n\tOptional<T> get(String key);\n}", "des": "The load data store, base on ."}
{"index": 16441, "repo": "pulsar-broker-3.0.0", "code": "public class ThresholdShedder extends Object implements LoadSheddingStrategy {\n\t// Recommend that all of the returned bundles be unloaded.\n\tcom.google.common.collect.Multimap<String,String> findBundlesForUnloading(LoadData loadData, ServiceConfiguration conf);\n\t// Triggered when active broker changes.\n\tvoid onActiveBrokersChange(Set<String> newBrokers);\n}", "des": "Load shedding strategy that unloads any broker that exceeds the average resource utilization of all brokers by a configured threshold."}
{"index": 16442, "repo": "pulsar-broker-3.0.0", "code": "public class TopBundleLoadDataReporter extends Object implements LoadDataReporter<TopBundlesLoadData>, StateChangeListener {\n\t// Generate the load data.\n\tTopBundlesLoadData generateLoadData();\n\t// Handle the service unit state change.\n\tvoid handleEvent(String serviceUnit, ServiceUnitStateData data, Throwable t);\n\t// Report the load data to load data store async.\n\tCompletableFuture<Void> reportAsync(boolean force);\n\tprotected void tombstone();\n}", "des": "The top k highest-loaded bundles' load data reporter."}
{"index": 16443, "repo": "pulsar-broker-3.0.0", "code": "public class TopicEventsDispatcher extends Object {\n\t// Adds listeners, ignores null listeners.\n\tvoid addTopicEventListener(TopicEventsListener... listeners);\n\t// Dispatches notification to all currently added listeners.\n\tvoid notify(String topic, TopicEventsListener.TopicEvent event, TopicEventsListener.EventStage stage);\n\t// Dispatches notification to all currently added listeners.\n\tvoid notify(String topic, TopicEventsListener.TopicEvent event, TopicEventsListener.EventStage stage, Throwable t);\n}", "des": "Utility class to dispatch topic events."}
{"index": 16444, "repo": "pulsar-broker-3.0.0", "code": "public static enum TopicEventsListener.EventStage extends Enum<TopicEventsListener.EventStage> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TopicEventsListener.EventStage valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TopicEventsListener.EventStage[] values();\n}", "des": "Stages of events currently supported."}
{"index": 16445, "repo": "pulsar-broker-3.0.0", "code": "public static enum TopicEventsListener.TopicEvent extends Enum<TopicEventsListener.TopicEvent> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TopicEventsListener.TopicEvent valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TopicEventsListener.TopicEvent[] values();\n}", "des": "Types of events currently supported."}
{"index": 16446, "repo": "pulsar-broker-3.0.0", "code": "@Evolving public interface TopicPoliciesService {\n\t// Add owned namespace bundle async.\n\tCompletableFuture<Void> addOwnedNamespaceBundleAsync(NamespaceBundle namespaceBundle);\n\t// Delete policies for a topic async.\n\tCompletableFuture<Void> deleteTopicPoliciesAsync(org.apache.pulsar.common.naming.TopicName topicName);\n\t// Get policies for a topic async.\n\torg.apache.pulsar.common.policies.data.TopicPolicies getTopicPolicies(org.apache.pulsar.common.naming.TopicName topicName);\n}", "des": "Topic policies service."}
{"index": 16447, "repo": "pulsar-broker-3.0.0", "code": "public class TopicTransactionBuffer extends TopicTransactionBufferState implements TransactionBuffer, io.netty.util.TimerTask {\n\t// Abort the transaction and all the entries of this transaction will be discarded.\n\tCompletableFuture<Void> abortTxn(org.apache.pulsar.client.api.transaction.TxnID txnID, long lowWaterMark);\n}", "des": "Transaction buffer based on normal persistent topic."}
{"index": 16448, "repo": "pulsar-broker-3.0.0", "code": "public static enum TopicTransactionBufferState.State extends Enum<TopicTransactionBufferState.State> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TopicTransactionBufferState.State valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TopicTransactionBufferState.State[] values();\n}", "des": "The state of the topicTransactionBuffer TopicTransactionBuffer."}
{"index": 16449, "repo": "pulsar-broker-3.0.0", "code": "@Beta public interface TransactionBuffer {\n\t// Abort the transaction and all the entries of this transaction will be discarded.\n\tCompletableFuture<Void> abortTxn(org.apache.pulsar.client.api.transaction.TxnID txnID, long lowWaterMark);\n\t// Append the buffer to the transaction buffer.\n\tCompletableFuture<Position> appendBufferToTxn(org.apache.pulsar.client.api.transaction.TxnID txnId, long sequenceId, io.netty.buffer.ByteBuf buffer);\n}", "des": "A class represent a transaction buffer."}
{"index": 16450, "repo": "pulsar-broker-3.0.0", "code": "public class TransactionBufferDisable extends Object implements TransactionBuffer {\n\t// Abort the transaction and all the entries of this transaction will be discarded.\n\tCompletableFuture<Void> abortTxn(org.apache.pulsar.client.api.transaction.TxnID txnID, long lowWaterMark);\n\t// Append the buffer to the transaction buffer.\n\tCompletableFuture<Position> appendBufferToTxn(org.apache.pulsar.client.api.transaction.TxnID txnId, long sequenceId, io.netty.buffer.ByteBuf buffer);\n}", "des": "Transaction buffer disable."}
{"index": 16451, "repo": "pulsar-broker-3.0.0", "code": "@Beta public interface TransactionBufferProvider {\n\t// Construct a provider from the provided class.\n\tstatic TransactionBufferProvider newProvider(String providerClassName);\n\t// Open the persistent transaction buffer.\n\tTransactionBuffer newTransactionBuffer(Topic originTopic);\n}", "des": "A provider that provides TransactionBuffer."}
{"index": 16452, "repo": "pulsar-broker-3.0.0", "code": "public interface TransactionCursor {\n\t// Abort transaction.\n\tCompletableFuture<Void> abortTxn(org.apache.pulsar.client.api.transaction.TxnID txnID);\n\t// Commit transaction.\n\tCompletableFuture<Void> commitTxn(long committedLedgerId, long committedEntryId, org.apache.pulsar.client.api.transaction.TxnID txnID, Position position);\n\t// Get all the transaction id on the specified ledger.\n\tCompletableFuture<Set<org.apache.pulsar.client.api.transaction.TxnID>> getAllTxnsCommittedAtLedger(long ledgerId);\n}", "des": "The transaction Cursor maintains the index of all transactions."}
{"index": 16453, "repo": "pulsar-broker-3.0.0", "code": "@Beta public interface TransactionEntry extends Entry, AutoCloseable {\n\t// Close the entry to release the resource that it holds.\n\tvoid close();\n\t// The entry id that the transaction is committed to.\n\tlong committedAtEntryId();\n\t// The ledger id that the transaction is committed to.\n\tlong committedAtLedgerId();\n\t// Returns the entry saved in the TransactionBuffer.\n\tEntry getEntry();\n\tint numMessageInTxn();\n\t// The sequence id of this entry in this transaction.\n\tlong sequenceId();\n}", "des": "A class represents an entry appended to a transaction."}
{"index": 16454, "repo": "pulsar-broker-3.0.0", "code": "public class TransactionEntryImpl extends Object implements TransactionEntry {\n\t// Close the entry to release the resource that it holds.\n\tvoid close();\n\t// The entry id that the transaction is committed to.\n\tlong committedAtEntryId();\n\t// The ledger id that the transaction is committed to.\n\tlong committedAtLedgerId();\n\tbyte[] getData();\n\tbyte[] getDataAndRelease();\n\tio.netty.buffer.ByteBuf getDataBuffer();\n\t// Returns the entry saved in the TransactionBuffer.\n\tEntry getEntry();\n\tlong getEntryId();\n}", "des": "A simple implementation of TransactionEntry."}
{"index": 16455, "repo": "pulsar-broker-3.0.0", "code": "@Beta public interface TransactionMeta {\n\t// Mark the transaction is aborted.\n\tCompletableFuture<TransactionMeta> abortTxn();\n\t// Add transaction entry into the transaction.\n\tCompletableFuture<Position> appendEntry(long sequenceId, Position position, int batchSize);\n\t// Return the committed entry id at data ledger.\n\tlong committedAtEntryId();\n\t// Return the committed ledger id at data ledger.\n\tlong committedAtLedgerId();\n}", "des": "The metadata for the transaction in the transaction buffer."}
{"index": 16456, "repo": "pulsar-broker-3.0.0", "code": "public interface TransactionPendingAckStoreProvider {\n\t// Check pending ack store has been initialized before.\n\tCompletableFuture<Boolean> checkInitializedBefore(PersistentSubscription subscription);\n\t// Open the pending ack store.\n\tCompletableFuture<PendingAckStore> newPendingAckStore(PersistentSubscription subscription);\n\t// Construct a provider from the provided class.\n\tstatic TransactionPendingAckStoreProvider newProvider(String providerClassName);\n}", "des": "Provider of transaction pending ack store."}
{"index": 16457, "repo": "pulsar-broker-3.0.0", "code": "public class TransferShedder extends Object implements NamespaceUnloadStrategy {\n\t// Recommend that all the returned bundles be unloaded.\n\tSet<UnloadDecision> findBundlesForUnloading(LoadManagerContext context, Map<String,Long> recentlyUnloadedBundles, Map<String,Long> recentlyUnloadedBrokers);\n\t// Initializes the internals.\n\tvoid initialize(PulsarService pulsar);\n\tprotected boolean isLoadBalancerSheddingBundlesWithPoliciesEnabled(LoadManagerContext context, NamespaceBundle namespaceBundle);\n}", "des": "Load shedding strategy that unloads bundles from the highest loaded brokers."}
{"index": 16458, "repo": "pulsar-broker-3.0.0", "code": "public record Unload(String sourceBroker, String serviceUnit, Optional<String> destBroker, boolean force) extends Record {\n\t// Returns the value of the destBroker record component.\n\tOptional<String> destBroker();\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the force record component.\n\tboolean force();\n\t// Returns the value of the serviceUnit record component.\n\tString serviceUnit();\n}", "des": "Defines the information required to unload or transfer a service unit(e.g."}
{"index": 16459, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public abstract class AbstractOAuth2TokenAuthenticationToken<T extends org.springframework.security.oauth2.core.OAuth2Token> extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\tObject getCredentials();\n\tObject getPrincipal();\n\t// Get the token bound to this Authentication.\n\tfinal T getToken();\n\t// Returns the attributes of the access token.\n\tabstract Map<String,Object> getTokenAttributes();\n}", "des": "Base class for AbstractAuthenticationToken implementations that expose common attributes between different OAuth 2.0 Access Token Formats."}
{"index": 16460, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public final class BearerTokenAccessDeniedHandler extends Object implements org.springframework.security.web.access.AccessDeniedHandler {\n\t// Collect error details from the provided parameters and format according to RFC 6750, specifically error, error_description, error_uri, and scope.\n\tvoid handle(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.access.AccessDeniedException accessDeniedException);\n}", "des": "Translates any AccessDeniedException into an HTTP response in accordance with RFC 6750 Section 3: The WWW-Authenticate."}
{"index": 16461, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public final class BearerTokenAuthenticationEntryPoint extends Object implements org.springframework.security.web.AuthenticationEntryPoint {\n\t// Collect error details from the provided parameters and format according to RFC 6750, specifically error, error_description, error_uri, and scope.\n\tvoid commence(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.AuthenticationException authException);\n}", "des": "An AuthenticationEntryPoint implementation used to commence authentication of protected resource requests using BearerTokenAuthenticationFilter."}
{"index": 16462, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public class BearerTokenAuthenticationFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\t// Extract any Bearer Token from the request and attempt an authentication.\n\tprotected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain);\n}", "des": "Authenticates requests that contain an OAuth 2.0 Bearer Token."}
{"index": 16463, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public final class BearerTokenError extends org.springframework.security.oauth2.core.OAuth2Error {\n\t// Return the HTTP status.\n\torg.springframework.http.HttpStatus getHttpStatus();\n\t// Return the scope.\n\tString getScope();\n}", "des": "A representation of a Bearer Token Error."}
{"index": 16464, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public final class BearerTokenErrors extends Object {\n\t// Create a BearerTokenError caused by an invalid token\n\tstatic BearerTokenError insufficientScope(String message, String scope);\n\t// Create a BearerTokenError caused by an invalid request\n\tstatic BearerTokenError invalidRequest(String message);\n\t// Create a BearerTokenError caused by an invalid token\n\tstatic BearerTokenError invalidToken(String message);\n}", "des": "A factory for creating BearerTokenError instances that correspond to the registered Bearer Token Error Codes."}
{"index": 16465, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public final class DefaultBearerTokenResolver extends Object implements BearerTokenResolver {\n\t// Resolve any Bearer Token value from the request.\n\tString resolve(jakarta.servlet.http.HttpServletRequest request);\n\t// Set if transport of access token using form-encoded body parameter is supported.\n\tvoid setAllowFormEncodedBodyParameter(boolean allowFormEncodedBodyParameter);\n}", "des": "The default BearerTokenResolver implementation based on RFC 6750."}
{"index": 16466, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "@Transient public class JwtAuthenticationToken extends AbstractOAuth2TokenAuthenticationToken<org.springframework.security.oauth2.jwt.Jwt> {\n\t// The principal name which is, by default, the Jwt's subject\n\tString getName();\n\t// Returns the attributes of the access token.\n\tMap<String,Object> getTokenAttributes();\n}", "des": "An implementation of an AbstractOAuth2TokenAuthenticationToken representing a Jwt Authentication."}
{"index": 16467, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public final class JwtGrantedAuthoritiesConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,Collection<org.springframework.security.core.GrantedAuthority>> {\n\t// Extract GrantedAuthoritys from the given Jwt.\n\tCollection<org.springframework.security.core.GrantedAuthority> convert(org.springframework.security.oauth2.jwt.Jwt jwt);\n}", "des": "Extracts the GrantedAuthoritys from scope attributes typically found in a Jwt."}
{"index": 16468, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public class NimbusOpaqueTokenIntrospector extends Object implements OpaqueTokenIntrospector {\n\t// Introspect and verify the given token, returning its attributes.\n\torg.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal introspect(String token);\n}", "des": "A Nimbus implementation of OpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint."}
{"index": 16469, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public final class OAuth2IntrospectionAuthenticatedPrincipal extends Object implements org.springframework.security.oauth2.core.OAuth2TokenIntrospectionClaimAccessor, org.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal, Serializable {\n\t// Gets the attributes of the OAuth 2.0 Token Introspection in map form.\n\tMap<String,Object> getAttributes();\n}", "des": "A domain object that wraps the attributes of OAuth 2.0 Token Introspection."}
{"index": 16470, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public final class OpaqueTokenAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider {\n\t// Introspect and validate the opaque Bearer Token and then delegates Authentication instantiation to OpaqueTokenAuthenticationConverter.\n\torg.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication authentication);\n}", "des": "An AuthenticationProvider implementation for opaque Bearer Tokens, using an OAuth 2.0 Introspection Endpoint to check the token's validity and reveal its attributes."}
{"index": 16471, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public class OpaqueTokenReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager {\n\t// Introspect and validate the opaque Bearer Token and then delegates Authentication instantiation to ReactiveOpaqueTokenAuthenticationConverter.\n\treactor.core.publisher.Mono<org.springframework.security.core.Authentication> authenticate(org.springframework.security.core.Authentication authentication);\n}", "des": "An ReactiveAuthenticationManager implementation for opaque Bearer Tokens, using an OAuth 2.0 Introspection Endpoint to check the token's validity and reveal its attributes."}
{"index": 16472, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public class ServerBearerTokenAuthenticationConverter extends Object implements org.springframework.security.web.server.authentication.ServerAuthenticationConverter {\n\treactor.core.publisher.Mono<org.springframework.security.core.Authentication> convert(org.springframework.web.server.ServerWebExchange exchange);\n\t// Set if transport of access token using URI query parameter is supported.\n\tvoid setAllowUriQueryParameter(boolean allowUriQueryParameter);\n}", "des": "A strategy for resolving Bearer Tokens from the ServerWebExchange."}
{"index": 16473, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "public class SpringOpaqueTokenIntrospector extends Object implements OpaqueTokenIntrospector {\n\t// Introspect and verify the given token, returning its attributes.\n\torg.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal introspect(String token);\n}", "des": "A Spring implementation of OpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint."}
{"index": 16474, "repo": "spring-ldap-core-3.1.0", "code": "public abstract class AbstractContextMapper<T> extends Object implements ContextMapper<T> {\n\t// Map a single DirContextOperation to an object.\n\tprotected abstract T doMapFromContext(DirContextOperations ctx);\n\t// Map a single LDAP Context to an object.\n\tfinal T mapFromContext(Object ctx);\n}", "des": "Abstract superclass that may be used instead of implementing ContextMapper directly."}
{"index": 16475, "repo": "spring-ldap-core-3.1.0", "code": "public abstract class AbstractContextSource extends Object implements BaseLdapPathContextSource, org.springframework.beans.factory.InitializingBean {\n\t// Checks that all necessary data is set and that there is no compatibility issues, after which the instance is initialized.\n\tvoid afterPropertiesSet();\n\t// Assemble a valid url String from all registered urls to add as PROVIDER_URL to the environment.\n\tString assembleProviderUrlString(String[] ldapUrls);\n}", "des": "Abstract implementation of the ContextSource interface."}
{"index": 16476, "repo": "spring-ldap-core-3.1.0", "code": "public abstract class AbstractFallbackRequestAndResponseControlDirContextProcessor extends AbstractRequestControlDirContextProcessor {\n\t// Creates a request control using the constructor parameters given in params.\n\tControl createRequestControl(Class<?>[] paramTypes, Object[] params);\n\tprotected abstract void handleResponse(Object control);\n\t// Utility method for invoking a method on a Control.\n\tprotected Object invokeMethod(String method, Class<?> clazz, Object control);\n}", "des": "Convenient base class useful when implementing a standard DirContextProcessor which has a request control and a response control."}
{"index": 16477, "repo": "spring-ldap-core-3.1.0", "code": "public abstract class AbstractRequestControlDirContextProcessor extends Object implements DirContextProcessor {\n\t// Create an instance of the appropriate RequestControl.\n\tabstract Control createRequestControl();\n\t// If there already exists a request control of the same class as the one created by createRequestControl() in the context, the new control can either replace the existing one (default behavior) or be added.\n\tboolean isReplaceSameControlEnabled();\n}", "des": "Abstract superclass with responsibility to apply a single RequestControl on an LdapContext, preserving any existing controls."}
{"index": 16478, "repo": "spring-ldap-core-3.1.0", "code": "public abstract class AbstractTlsDirContextAuthenticationStrategy extends Object implements DirContextAuthenticationStrategy {\n\t// Apply the actual authentication to the specified LdapContext .\n\tprotected abstract void applyAuthentication(LdapContext ctx, String userDn, String password);\n\t// This method is responsible for post-processing the DirContext instance after it has been created.\n\tfinal DirContext processContextAfterCreation(DirContext ctx, String userDn, String password);\n}", "des": "Abstract superclass for DirContextAuthenticationStrategy implementations that apply TLS security to the connections."}
{"index": 16479, "repo": "spring-ldap-core-3.1.0", "code": "public class AggregateDirContextProcessor extends Object implements DirContextProcessor {\n\t// Add the supplied DirContextProcessor to the list of managed objects.\n\tvoid addDirContextProcessor(DirContextProcessor processor);\n\t// Get the list of managed DirContextProcessor instances.\n\tList<DirContextProcessor> getDirContextProcessors();\n\t// Perform post-processing on the supplied DirContext.\n\tvoid postProcess(DirContext ctx);\n}", "des": "Manages a sequence of DirContextProcessor instances."}
{"index": 16480, "repo": "spring-ldap-core-3.1.0", "code": "public class AndFilter extends BinaryLogicalFilter {\n\t// Add a query to the AND expression.\n\tAndFilter and(Filter query);\n\t// Implement this in subclass to return the logical operator, for example \"&\".\n\tprotected String getLogicalOperator();\n}", "des": "A filter for a logical AND."}
{"index": 16481, "repo": "spring-ldap-core-3.1.0", "code": "public static enum Attribute.Type extends Enum<Attribute.Type> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Attribute.Type valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Attribute.Type[] values();\n}", "des": "The Type attribute indicates whether a field is regarded as binary based or string based by the LDAP JNDI provider."}
{"index": 16482, "repo": "spring-ldap-core-3.1.0", "code": "public interface AuthenticationSource {\n\t// Get the credentials to use when creating an authenticated context.\n\tString getCredentials();\n\t// Get the principal to use when creating an authenticated context.\n\tString getPrincipal();\n}", "des": "An AuthenticationSource is responsible for providing the principal (user DN) and credentials to be used when creating a new context."}
{"index": 16483, "repo": "spring-ldap-core-3.1.0", "code": "public interface BaseLdapPathSource {\n\t// Get the base LDAP path as a LdapName.\n\tLdapName getBaseLdapName();\n\t// Deprecated. DistinguishedName and associated classes and methods are deprecated as of 2.0.\n\tDistinguishedName getBaseLdapPath();\n\t// Get the base LDAP path as a String.\n\tString getBaseLdapPathAsString();\n}", "des": "Implementations of this interface are capable of providing a base LDAP path."}
{"index": 16484, "repo": "spring-ldap-core-3.1.0", "code": "public abstract class BinaryLogicalFilter extends AbstractFilter {\n\t// Add a query to this logical operation.\n\tfinal BinaryLogicalFilter append(Filter query);\n\tfinal BinaryLogicalFilter appendAll(Collection<Filter> subQueries);\n\t// Encodes the filter to a StringBuffer.\n\tStringBuffer encode(StringBuffer buff);\n\t// All filters must implement equals.\n\tboolean equals(Object o);\n\t// Implement this in subclass to return the logical operator, for example \"&\".\n\tprotected abstract String getLogicalOperator();\n}", "des": "Abstract superclass for binary logical operations, that is \"AND\" and \"OR\" operations."}
{"index": 16485, "repo": "spring-ldap-core-3.1.0", "code": "public class BindOperationExecutor extends Object implements CompensatingTransactionOperationExecutor {\n\t// Commit the operation.\n\tvoid commit();\n\t// Perform the operation.\n\tvoid performOperation();\n\t// Rollback the operation, restoring state of the target as it was before the operation was performed using the information supplied on creation of this instance.\n\tvoid rollback();\n}", "des": "A CompensatingTransactionOperationExecutor to manage a bind operation."}
{"index": 16486, "repo": "spring-ldap-core-3.1.0", "code": "public final class CollectingAuthenticationErrorCallback extends Object implements AuthenticationErrorCallback {\n\t// This method will be called with the authentication exception in case there is a problem with the authentication.\n\tvoid execute(Exception e);\n\tException getError();\n\t// Check whether this callback has collected an error.\n\tboolean hasError();\n}", "des": "Convenience implementation of AuthenticationErrorCallback that stores the given exception and provides a method for retrieving it."}
{"index": 16487, "repo": "spring-ldap-core-3.1.0", "code": "public abstract class CollectingNameClassPairCallbackHandler<T> extends Object implements NameClassPairCallbackHandler {\n\t// Get the assembled list.\n\tList<T> getList();\n\t// Handle a NameClassPair and transform it to an Object of the desired type and with data from the NameClassPair.\n\tabstract T getObjectFromNameClassPair(NameClassPair nameClassPair);\n}", "des": "A NameClassPairCallbackHandler to collect all results in an internal List."}
{"index": 16488, "repo": "spring-ldap-core-3.1.0", "code": "public abstract class CompareFilter extends AbstractFilter {\n\t// Encodes the filter to a StringBuffer.\n\tStringBuffer encode(StringBuffer buff);\n\t// Override to perform special encoding in subclass.\n\tprotected String encodeValue(String value);\n\t// All filters must implement equals.\n\tboolean equals(Object o);\n\t// Implement this method in subclass to return a String representing the operator.\n\tprotected abstract String getCompareString();\n}", "des": "Abstract superclass for filters that compare values."}
{"index": 16489, "repo": "spring-ldap-core-3.1.0", "code": "public abstract class CompensatingTransactionHolderSupport extends org.springframework.transaction.support.ResourceHolderSupport {\n\tvoid clear();\n\t// Get the actual transacted resource.\n\tprotected abstract Object getTransactedResource();\n\t// Get the CompensatingTransactionOperationManager to handle the data for the current transaction.\n\tCompensatingTransactionOperationManager getTransactionOperationManager();\n}", "des": "Base class for compensating transaction resource holders."}
{"index": 16490, "repo": "spring-ldap-core-3.1.0", "code": "public class CompensatingTransactionObject extends Object {\n\t// Get the DirContextHolder.\n\tCompensatingTransactionHolderSupport getHolder();\n\t// Set the CompensatingTransactionHolderSupport associated with the current transaction.\n\tvoid setHolder(CompensatingTransactionHolderSupport holder);\n}", "des": "Transaction object used by AbstractCompensatingTransactionManagerDelegate."}
{"index": 16491, "repo": "spring-ldap-core-3.1.0", "code": "public interface CompensatingTransactionOperationExecutor {\n\t// Commit the operation.\n\tvoid commit();\n\t// Perform the operation.\n\tvoid performOperation();\n\t// Rollback the operation, restoring state of the target as it was before the operation was performed using the information supplied on creation of this instance.\n\tvoid rollback();\n}", "des": "Responsible for executing a single recorded operation as well as committing or rolling it back, depending on the transaction outcome."}
{"index": 16492, "repo": "spring-ldap-core-3.1.0", "code": "public interface CompensatingTransactionOperationManager {\n\t// Commit all recorded operations.\n\tvoid commit();\n\t// Indicates that the supplied operation (method name) is to be performed.\n\tvoid performOperation(Object resource, String operation, Object[] args);\n\t// Rollback all recorded operations by performing each of the recorded rollback operations.\n\tvoid rollback();\n}", "des": "A CompensatingTransactionOperationManager implementation records and performs operations that are to be performed within a compensating transaction."}
{"index": 16493, "repo": "spring-ldap-core-3.1.0", "code": "public interface ConditionCriteria {\n\t// Appends an GreaterThanOrEqualsFilter.\n\tContainerCriteria gte(String value);\n\t// Appends an EqualsFilter.\n\tContainerCriteria is(String value);\n\t// Appends a PresentFilter.\n\tContainerCriteria isPresent();\n\t// Appends a LikeFilter.\n\tContainerCriteria like(String value);\n\t// Appends a LessThanOrEqualsFilter.\n\tContainerCriteria lte(String value);\n\t// Negates the currently constructed operation.\n\tConditionCriteria not();\n}", "des": "Constructs a conditional LDAP filter based on the attribute specified in the previous builder step."}
{"index": 16494, "repo": "spring-ldap-core-3.1.0", "code": "public interface ContainerCriteria extends LdapQuery {\n\t// Append a logical And condition to the currently built filter.\n\tConditionCriteria and(String attribute);\n\t// Append an And condition for a nested criterion.\n\tContainerCriteria and(ContainerCriteria nested);\n\t// Append a logical Or condition to the currently built filter.\n\tConditionCriteria or(String attribute);\n\t// Append an Or condition for a nested criterion.\n\tContainerCriteria or(ContainerCriteria nested);\n}", "des": "And/or filter builder support for LdapQuery."}
{"index": 16495, "repo": "spring-ldap-core-3.1.0", "code": "public interface ContextSource {\n\t// Gets a DirContext instance authenticated using the supplied principal and credentials.\n\tDirContext getContext(String principal, String credentials);\n\t// Gets a read-only DirContext.\n\tDirContext getReadOnlyContext();\n\t// Gets a read-write DirContext instance.\n\tDirContext getReadWriteContext();\n}", "des": "A ContextSource is responsible for configuring and creating DirContext instances."}
{"index": 16496, "repo": "spring-ldap-core-3.1.0", "code": "public class ContextSourceTransactionManagerDelegate extends AbstractCompensatingTransactionManagerDelegate {\n\t// Close the target resource - the implementation specific resource held in the specified CompensatingTransactionHolderSupport.\n\tprotected void closeTargetResource(CompensatingTransactionHolderSupport transactionHolderSupport);\n\tContextSource getContextSource();\n}", "des": "This delegate performs all the work for the ContextSourceTransactionManager."}
{"index": 16497, "repo": "spring-ldap-core-3.1.0", "code": "public interface ConverterManager {\n\t// Determine whether this converter manager is able to carry out a specified conversion.\n\tboolean canConvert(Class<?> fromClass, String syntax, Class<?> toClass);\n\t// Convert a given source object with an optional LDAP syntax to an instance of a given class.\n\t<T> T convert(Object source, String syntax, Class<T> toClass);\n}", "des": "A simple interface to be implemented to provide type conversion functionality."}
{"index": 16498, "repo": "spring-ldap-core-3.1.0", "code": "public final class ConverterManagerImpl extends Object implements ConverterManager {\n\t// Add a Converter to this ConverterManager.\n\tvoid addConverter(Class<?> fromClass, String syntax, Class<?> toClass, Converter converter);\n\t// Determine whether this converter manager is able to carry out a specified conversion.\n\tboolean canConvert(Class<?> fromClass, String syntax, Class<?> toClass);\n}", "des": "An implementation of ConverterManager."}
{"index": 16499, "repo": "spring-ldap-core-3.1.0", "code": "public class CountNameClassPairCallbackHandler extends Object implements NameClassPairCallbackHandler {\n\t// Get the number of rows that was returned by the search.\n\tint getNoOfRows();\n\t// Handle one entry.\n\tvoid handleNameClassPair(NameClassPair nameClassPair);\n}", "des": "A NameClassPairCallbackHandler for counting all returned entries."}
{"index": 16500, "repo": "spring-ldap-core-3.1.0", "code": "public class DefaultCompensatingTransactionOperationManager extends Object implements CompensatingTransactionOperationManager {\n\t// Commit all recorded operations.\n\tvoid commit();\n\t// Get the rollback operations.\n\tprotected Stack<CompensatingTransactionOperationExecutor> getOperationExecutors();\n\t// Indicates that the supplied operation (method name) is to be performed.\n\tvoid performOperation(Object resource, String operation, Object[] args);\n}", "des": "Default implementation of CompensatingTransactionOperationManager."}
