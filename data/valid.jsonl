{"index": 5118, "code": "public static interface ReactiveRemoveOperation.TerminatingRemove<T> {\n\t// Remove all documents matching.\n\treactor.core.publisher.Mono<com.mongodb.client.result.DeleteResult> all();\n\t// Remove and return all matching documents.\n\treactor.core.publisher.Flux<T> findAndRemove();\n}", "des": "Compose remove execution by calling one of the terminating methods."}
{"index": 5119, "code": "public interface ReactiveSessionScoped {\n\t// Executes the given ReactiveSessionCallback within the ClientSession.\n\tdefault <T> reactor.core.publisher.Flux<T> execute(ReactiveSessionCallback<T> action);\n\t// Executes the given ReactiveSessionCallback within the ClientSession.\n\t<T> reactor.core.publisher.Flux<T> execute(ReactiveSessionCallback<T> action, Consumer<com.mongodb.reactivestreams.client.ClientSession> doFinally);\n}", "des": "Gateway interface to execute ClientSession bound operations against MongoDB via a ReactiveSessionCallback."}
{"index": 5120, "code": "public static interface ReactiveUpdateOperation.UpdateWithQuery<T> extends ReactiveUpdateOperation.UpdateWithUpdate<T> {\n\t// Set the filter criteria to be used.\n\tdefault ReactiveUpdateOperation.UpdateWithUpdate<T> matching(CriteriaDefinition criteria);\n\t// Filter documents by given query.\n\tReactiveUpdateOperation.UpdateWithUpdate<T> matching(Query query);\n}", "des": "Define a filter query for the Update (optional)."}
{"index": 5121, "code": "public static interface ReactiveUpdateOperation.UpdateWithUpdate<T> {\n\t// Set the UpdateDefinition to be applied.\n\tReactiveUpdateOperation.TerminatingUpdate<T> apply(UpdateDefinition update);\n\t// Specify replacement object.\n\tReactiveUpdateOperation.FindAndReplaceWithProjection<T> replaceWith(T replacement);\n}", "des": "Declare the Update to apply."}
{"index": 5122, "code": "public interface ReferenceLoader {\n\t// Obtain multiple Document matching the given referenceQuery in the context.\n\tIterable<org.bson.Document> fetchMany(ReferenceLoader.DocumentReferenceQuery referenceQuery, ReferenceResolver.ReferenceCollection context);\n\t// Obtain a single Document matching the given referenceQuery in the context.\n\tdefault org.bson.Document fetchOne(ReferenceLoader.DocumentReferenceQuery referenceQuery, ReferenceResolver.ReferenceCollection context);\n}", "des": "The ReferenceLoader obtains raw documents for linked entities via a ReferenceLoader.DocumentReferenceQuery."}
{"index": 5123, "code": "public static class ReferenceResolver.ReferenceCollection extends Object {\n\t// Create a new instance of ReferenceResolver.ReferenceCollection from the given DBRef.\n\tstatic ReferenceResolver.ReferenceCollection fromDBRef(com.mongodb.DBRef dbRef);\n\t// Get the target collection name.\n\tString getCollection();\n\t// Get the target database name.\n\tString getDatabase();\n}", "des": "ReferenceResolver.ReferenceCollection is a value object that contains information about the target database and collection name of an association."}
{"index": 5124, "code": "public abstract class RegexFlags extends Object {\n\t// Lookup the MongoDB specific flags for a given character.\n\tstatic int toRegexFlag(char c);\n\t// Lookup the MongoDB specific flags for a given regex option string.\n\tstatic int toRegexFlags(String s);\n\t// Lookup the MongoDB specific options from given flags.\n\tstatic String toRegexOptions(int flags);\n}", "des": "Utility to translate regex flags to MongoDB regex options and vice versa."}
{"index": 5125, "code": "public class ReplaceWithOperation extends ReplaceRootOperation {\n\t// Creates new instance of ReplaceWithOperation.\n\tstatic ReplaceWithOperation replaceWithValue(Object value);\n\t// Creates new instance of ReplaceWithOperation treating a given String value as a field reference.\n\tstatic ReplaceWithOperation replaceWithValueOf(Object value);\n\t// Turns the AggregationOperation into a Document by using the given AggregationOperationContext.\n\torg.bson.Document toDocument(AggregationOperationContext context);\n}", "des": "Encapsulates the aggregation framework $replaceRoot-operation."}
{"index": 5126, "code": "public class SampleOperation extends Object implements AggregationOperation {\n\t// Return the MongoDB operator that is used for this AggregationOperation.\n\tString getOperator();\n\t// Turns the AggregationOperation into a Document by using the given AggregationOperationContext.\n\torg.bson.Document toDocument(AggregationOperationContext context);\n}", "des": "Encapsulates the $sample-operation."}
{"index": 5127, "code": "public class ScriptOperators extends Object {\n\t// Create a custom $accumulator operator in Javascript.\n\tstatic ScriptOperators.Accumulator.AccumulatorInitBuilder accumulatorBuilder();\n\t// Create a custom aggregation $function in JavaScript.\n\tstatic ScriptOperators.Function function(String body);\n}", "des": "Gateway to $function and $accumulator aggregation operations."}
{"index": 5128, "code": "public abstract class SerializationUtils extends Object {\n\t// Flattens out a given Document.\n\tstatic Map<String,Object> flattenMap(org.bson.Document source);\n\t// Serializes the given object into pseudo-JSON meaning it's trying to create a JSON representation as far as possible but falling back to the given object's Object.toString() method if it's not serializable.\n\tstatic String serializeToJsonSafely(Object value);\n\tstatic String serializeValue(Object value);\n}", "des": "Utility methods for JSON serialization."}
{"index": 5129, "code": "public interface SessionScoped {\n\t// Executes the given SessionCallback within the ClientSession.\n\tdefault <T> T execute(SessionCallback<T> action);\n\t// Executes the given SessionCallback within the ClientSession.\n\t<T> T execute(SessionCallback<T> action, Consumer<com.mongodb.client.ClientSession> doFinally);\n}", "des": "Gateway interface to execute ClientSession bound operations against MongoDB via a SessionCallback."}
{"index": 5130, "code": "public enum SessionSynchronization extends Enum<SessionSynchronization> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SessionSynchronization valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SessionSynchronization[] values();\n}", "des": "SessionSynchronization is used along with MongoTemplate to define in which type of transactions to participate if any."}
{"index": 5131, "code": "public class SetOperators extends Object {\n\t// Take the array referenced by given fieldReference.\n\tstatic SetOperators.SetOperatorFactory arrayAsSet(String fieldReference);\n\t// Take the array resulting from the given AggregationExpression.\n\tstatic SetOperators.SetOperatorFactory arrayAsSet(AggregationExpression expression);\n}", "des": "Gateway to Set expressions which perform set operation on arrays, treating arrays as sets."}
{"index": 5132, "code": "public static class SetWindowFieldsOperation.ComputedField extends Object implements Field {\n\t// Returns the name of the field.\n\tString getName();\n\t// Returns the target of the field.\n\tString getTarget();\n\tSetWindowFieldsOperation.Window getWindow();\n\tAggregationExpression getWindowOperator();\n\t// Returns whether the Field is aliased, which means it has a name set different from the target.\n\tboolean isAliased();\n}", "des": "A Field that the result of a computation done via an AggregationExpression."}
{"index": 5133, "code": "public static class SetWindowFieldsOperation.DocumentWindow extends Object {\n\t// The lower (inclusive) boundary.\n\tObject getLower();\n\t// The upper (inclusive) boundary.\n\tObject getUpper();\n\t// Obtain the document representation of the window in the given context.\n\torg.bson.Document toDocument(AggregationOperationContext ctx);\n}", "des": "SetWindowFieldsOperation.Window implementation based on the current document."}
{"index": 5134, "code": "public static class SetWindowFieldsOperation.RangeWindow extends Object {\n\t// The lower (inclusive) boundary.\n\tObject getLower();\n\t// The upper (inclusive) boundary.\n\tObject getUpper();\n\t// Obtain the document representation of the window in the given context.\n\torg.bson.Document toDocument(AggregationOperationContext ctx);\n}", "des": "SetWindowFieldsOperation.Window implementation based on the sort fields."}
{"index": 5135, "code": "public static interface SetWindowFieldsOperation.Window {\n\t// The lower (inclusive) boundary.\n\tObject getLower();\n\t// The upper (inclusive) boundary.\n\tObject getUpper();\n\t// Obtain the document representation of the window in a default context.\n\tdefault org.bson.Document toDocument();\n\t// Obtain the document representation of the window in the given context.\n\torg.bson.Document toDocument(AggregationOperationContext ctx);\n}", "des": "A SetWindowFieldsOperation.Window to be used for ComputedField."}
{"index": 5136, "code": "public static class SetWindowFieldsOperation.WindowOutput extends Object {\n\t// Append the given AggregationExpression as a field in a fluent way.\n\torg.springframework.data.mongodb.core.aggregation.SetWindowFieldsOperation.WindowOutput.ComputedFieldAppender append(AggregationExpression expression);\n\t// Append the given field to the outptut.\n\tSetWindowFieldsOperation.WindowOutput append(SetWindowFieldsOperation.ComputedField field);\n}", "des": "SetWindowFieldsOperation.WindowOutput defines output of $setWindowFields stage by defining the field(s) to append to the documents in the output."}
{"index": 5137, "code": "public static interface SetWindowFieldsOperation.WindowUnit {\n\t// Converts the given chrono unit into a SetWindowFieldsOperation.WindowUnit.\n\tstatic SetWindowFieldsOperation.WindowUnit from(ChronoUnit chronoUnit);\n\t// Converts the given time unit into a SetWindowFieldsOperation.WindowUnit.\n\tstatic SetWindowFieldsOperation.WindowUnit from(TimeUnit timeUnit);\n\tString name();\n}", "des": "The actual time unit to apply to a SetWindowFieldsOperation.Window."}
{"index": 5138, "code": "public static enum SetWindowFieldsOperation.WindowUnits extends Enum<SetWindowFieldsOperation.WindowUnits> implements SetWindowFieldsOperation.WindowUnit {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SetWindowFieldsOperation.WindowUnits valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SetWindowFieldsOperation.WindowUnits[] values();\n}", "des": "Quick access to available units."}
{"index": 5139, "code": "public class SimpleMongoClientDatabaseFactory extends MongoDatabaseFactorySupport<com.mongodb.client.MongoClient> implements DisposableBean {\n\t// Close the client instance.\n\tprotected void closeClient();\n\t// Get the actual MongoDatabase from the client.\n\tprotected com.mongodb.client.MongoDatabase doGetMongoDatabase(String dbName);\n\t// Obtain a ClientSession for given ClientSessionOptions.\n\tcom.mongodb.client.ClientSession getSession(com.mongodb.ClientSessionOptions options);\n}", "des": "Factory to create MongoDatabase instances from a MongoClient instance."}
{"index": 5140, "code": "public class SkipOperation extends Object implements AggregationOperation {\n\t// Return the MongoDB operator that is used for this AggregationOperation.\n\tString getOperator();\n\t// Turns the AggregationOperation into a Document by using the given AggregationOperationContext.\n\torg.bson.Document toDocument(AggregationOperationContext context);\n}", "des": "Encapsulates the aggregation framework $skip-operation."}
{"index": 5141, "code": "public class SortByCountOperation extends Object implements AggregationOperation {\n\t// Return the MongoDB operator that is used for this AggregationOperation.\n\tString getOperator();\n\t// Turns the AggregationOperation into a Document by using the given AggregationOperationContext.\n\torg.bson.Document toDocument(AggregationOperationContext context);\n}", "des": "Encapsulates the aggregation framework $sortByCount-operation."}
{"index": 5142, "code": "public class SortOperation extends Object implements AggregationOperation {\n\tSortOperation and(Sort sort);\n\tSortOperation and(Sort.Direction direction, String... fields);\n\t// Return the MongoDB operator that is used for this AggregationOperation.\n\tString getOperator();\n\t// Turns the AggregationOperation into a Document by using the given AggregationOperationContext.\n\torg.bson.Document toDocument(AggregationOperationContext context);\n}", "des": "Encapsulates the aggregation framework $sort-operation."}
{"index": 5143, "code": "public class Sphere extends Object implements Shape {\n\t// Returns the Shape as a list of usually Double or Lists of Doubles.\n\tList<? extends Object> asList();\n\tboolean equals(Object obj);\n\t// Returns the center of the Circle.\n\tPoint getCenter();\n\t// Returns the command to be used to create the $within criterion.\n\tString getCommand();\n\t// Returns the radius of the Circle.\n\tDistance getRadius();\n}", "des": "Represents a geospatial sphere value."}
{"index": 5144, "code": "public class SpringDataMongoDB extends Object {\n\t// Obtain the SpringData MongoDB specific driver information.\n\tstatic com.mongodb.MongoDriverInformation driverInformation();\n\t// Fetches the \"Implementation-Version\" manifest attribute from the jar file.\n\tstatic Version version();\n}", "des": "Class that exposes the SpringData MongoDB specific information like the current Version or driver information."}
{"index": 5145, "code": "public class StringOperators extends Object {\n\t// Take the array referenced by given fieldReference.\n\tstatic StringOperators.StringOperatorFactory valueOf(String fieldReference);\n\t// Take the array referenced by given fieldReference.\n\tstatic StringOperators.StringOperatorFactory valueOf(AggregationExpression fieldReference);\n}", "des": "Gateway to String aggregation operations."}
{"index": 5146, "code": "public interface SubscriptionRequest<S,T,O extends SubscriptionRequest.RequestOptions> {\n\t// Obtain the MessageListener to publish messages to.\n\tMessageListener<S,? super T> getMessageListener();\n\t// Get the SubscriptionRequest.RequestOptions specifying the requests behaviour.\n\tO getRequestOptions();\n}", "des": "The actual SubscriptionRequest sent to the MessageListenerContainer."}
{"index": 5147, "code": "public enum SystemVariable extends Enum<SystemVariable> {\n\t// Return true if the given fieldRef denotes a well-known system variable, false otherwise.\n\tstatic boolean isReferingToSystemVariable(String fieldRef);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SystemVariable valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SystemVariable[] values();\n}", "des": "Describes the system variables available in MongoDB aggregation framework pipeline expressions."}
{"index": 5148, "code": "public static class TailableCursorRequest.TailableCursorRequestOptions.TailableCursorRequestOptionsBuilder extends Object {\n\tTailableCursorRequest.TailableCursorRequestOptions build();\n\t// Set the collection name to tail.\n\tTailableCursorRequest.TailableCursorRequestOptions.TailableCursorRequestOptionsBuilder collection(String collection);\n\t// Set the filter to apply.\n\tTailableCursorRequest.TailableCursorRequestOptions.TailableCursorRequestOptionsBuilder filter(Query filter);\n}", "des": "Builder for creating TailableCursorRequest.TailableCursorRequestOptions."}
{"index": 5149, "code": "public interface Task extends SchedulingAwareRunnable, Cancelable {\n\t// Synchronous, blocking call that awaits until this Task becomes active.\n\tboolean awaitStart(Duration timeout);\n\t// Get the current lifecycle phase.\n\tTask.State getState();\n\tdefault boolean isActive();\n}", "des": "The actual Task to run within the MessageListenerContainer."}
{"index": 5150, "code": "public static enum Task.State extends Enum<Task.State> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Task.State valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Task.State[] values();\n}", "des": "The Task.State defining the lifecycle phase the actual Task."}
{"index": 5151, "code": "public class Term extends Object {\n\tboolean equals(Object o);\n\t// Get formatted representation of term.\n\tString getFormatted();\n\tTerm.Type getType();\n\tboolean isNegated();\n\t// Negates the term.\n\tTerm negate();\n\tprotected String negateRaw(String raw);\n\tprotected String quotePhrase(String raw);\n}", "des": "A Term defines one or multiple words Term.Type.WORD or phrases Term.Type.PHRASE to be used in the context of full text search."}
{"index": 5152, "code": "public class TypedAggregation<I> extends Aggregation {\n\t// Returns the input type for the Aggregation.\n\tClass<I> getInputType();\n\t// Returns a copy of this Aggregation with the given AggregationOptions set.\n\tTypedAggregation<I> withOptions(AggregationOptions options);\n}", "des": "A TypedAggregation is a special Aggregation that holds information of the input aggregation type."}
{"index": 5153, "code": "public static enum Unwrapped.OnEmpty extends Enum<Unwrapped.OnEmpty> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Unwrapped.OnEmpty valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Unwrapped.OnEmpty[] values();\n}", "des": "Load strategy to be used Unwrapped.onEmpty()."}
{"index": 5154, "code": "public enum WriteResultChecking extends Enum<WriteResultChecking> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic WriteResultChecking valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic WriteResultChecking[] values();\n}", "des": "Enum to represent how strict the check of WriteConcernResult shall be."}
{"index": 5155, "code": "public abstract class AbstractFileListFilter<F> extends Object implements FileListFilter<F> {\n\t// Subclasses must implement this method.\n\tabstract boolean accept(F file);\n\t// Filters out files and returns the files that are left in a list, or an empty list when a null is passed in.\n\tfinal List<F> filterFiles(F[] files);\n\t// Indicates that this filter supports filtering a single file.\n\tboolean supportsSingleFileFiltering();\n}", "des": "A convenience base class for any FileListFilter whose criteria can be evaluated against each File in isolation."}
{"index": 5156, "code": "public abstract class AbstractRegexPatternFileListFilter<F> extends AbstractDirectoryAwareFileListFilter<F> {\n\t// Subclasses must implement this method.\n\tboolean accept(F file);\n\t// Subclasses must implement this method to extract the file's name.\n\tprotected abstract String getFilename(F file);\n\tvoid setPattern(String pattern);\n\tvoid setPattern(Pattern pattern);\n}", "des": "Filters a listing of files by qualifying their 'name' against a regular expression (an instance of Pattern)."}
{"index": 5157, "code": "public static enum AbstractRemoteFileOutboundGateway.Option extends Enum<AbstractRemoteFileOutboundGateway.Option> {\n\tString getOption();\n\tstatic AbstractRemoteFileOutboundGateway.Option toOption(String opt);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AbstractRemoteFileOutboundGateway.Option valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AbstractRemoteFileOutboundGateway.Option[] values();\n}", "des": "Enumeration of options supported by various commands."}
{"index": 5158, "code": "public abstract class AbstractSimplePatternFileListFilter<F> extends AbstractDirectoryAwareFileListFilter<F> {\n\t// Accept the given file if its name matches the pattern.\n\tfinal boolean accept(F file);\n\t// Subclasses must implement this method to extract the file's name.\n\tprotected abstract String getFilename(F file);\n}", "des": "Base class for filters that support ant style path expressions, which are less powerful but more readable than regular expressions."}
{"index": 5159, "code": "public class ChainFileListFilter<F> extends CompositeFileListFilter<F> {\n\t// Filter a single file; only called externally if FileListFilter.supportsSingleFileFiltering() returns true.\n\tboolean accept(F file);\n\t// Filters out files and returns the files that are left in a list, or an empty list when a null is passed in.\n\tList<F> filterFiles(F[] files);\n}", "des": "The CompositeFileListFilter extension which chains the result of the previous filter to the next one."}
{"index": 5160, "code": "@FunctionalInterface public interface ClientCallbackWithoutResult<C> extends ClientCallback<C,Object> {\n\t// Called within the context of a Session.\n\tdefault Object doWithClient(C client);\n\t// Called within the context of a session.\n\tvoid doWithClientWithoutResult(C client);\n}", "des": "RemoteFileTemplate callback with the underlying client instance providing access to lower level methods where no result is returned."}
{"index": 5161, "code": "public class DefaultFileNameGenerator extends org.springframework.integration.util.AbstractExpressionEvaluator implements FileNameGenerator {\n\tString generateFileName(org.springframework.messaging.Message<?> message);\n\t// Specify an expression to be evaluated against the Message in order to generate a file name.\n\tvoid setExpression(String expression);\n\t// Specify a custom header name to check for the file name.\n\tvoid setHeaderName(String headerName);\n}", "des": "Default implementation of the filename generator strategy."}
{"index": 5162, "code": "public class DefaultSessionFactoryLocator<F> extends Object implements SessionFactoryLocator<F> {\n\t// Add a session factory.\n\tvoid addSessionFactory(Object key, SessionFactory<F> factory);\n\t// Return a SessionFactory for the key.\n\tSessionFactory<F> getSessionFactory(Object key);\n\t// Remove a session factory.\n\tSessionFactory<F> removeSessionFactory(Object key);\n}", "des": "The default implementation of SessionFactoryLocator using a simple map lookup and an optional default to fall back on."}
{"index": 5163, "code": "public interface DirectoryScanner {\n\t// Scans the directory according to the strategy particular to this implementation and returns the selected files as a File array.\n\tList<File> listFiles(File directory);\n\t// Sets a custom filter to be used by this scanner.\n\tvoid setFilter(FileListFilter<File> filter);\n\t// Sets a custom locker to be used by this scanner.\n\tvoid setLocker(FileLocker locker);\n\t// Claim the file to process.\n\tboolean tryClaim(File file);\n}", "des": "Strategy for scanning directories."}
{"index": 5164, "code": "public enum FileExistsMode extends Enum<FileExistsMode> {\n\t// For a given non-null and not-empty input string, this method returns the corresponding FileExistsMode.\n\tstatic FileExistsMode getForString(String fileExistsModeAsString);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic FileExistsMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic FileExistsMode[] values();\n}", "des": "When writing file, this enumeration indicates what action shall be taken in case the destination file already exists."}
{"index": 5165, "code": "public interface FileLocker {\n\t// Checks whether the file passed in can be locked by this locker.\n\tboolean isLockable(File file);\n\t// Tries to lock the given file and returns true if it was successful, false otherwise.\n\tboolean lock(File fileToLock);\n\t// Unlocks the given file.\n\tvoid unlock(File fileToUnlock);\n}", "des": "A FileLocker is a strategy that can ensure that files are only processed a single time."}
{"index": 5166, "code": "public class FileToStringTransformer extends AbstractFilePayloadTransformer<String> {\n\t// Set the charset name to use when copying the File to a String.\n\tvoid setCharset(String charset);\n\t// Subclasses must implement this method to transform the File contents.\n\tprotected final String transformFile(File file);\n}", "des": "A payload transformer that copies a File's contents to a String."}
{"index": 5167, "code": "@FunctionalInterface public interface InboundFileSynchronizer {\n\t// Synchronize all available files to the local directory.\n\tvoid synchronizeToLocalDirectory(File localDirectory);\n\t// Synchronize up to maxFetchSize files to the local directory.\n\tdefault void synchronizeToLocalDirectory(File localDirectory, int maxFetchSize);\n}", "des": "Strategy for synchronizing from a remote File system to a local directory."}
{"index": 5168, "code": "public class NioFileLocker extends AbstractFileLockerFilter {\n\t// Checks whether the file passed in can be locked by this locker.\n\tboolean isLockable(File file);\n\t// Tries to lock the given file and returns true if it was successful, false otherwise.\n\tboolean lock(File fileToLock);\n\t// Unlocks the given file.\n\tvoid unlock(File fileToUnlock);\n}", "des": "File locking strategy that uses java.nio."}
{"index": 5169, "code": "public class RecursiveDirectoryScanner extends DefaultDirectoryScanner {\n\t// Scans the directory according to the strategy particular to this implementation and returns the selected files as a File array.\n\tList<File> listFiles(File directory);\n\t// The options to configure the traversal.\n\tvoid setFileVisitOptions(FileVisitOption... fileVisitOptions);\n\t// The maximum number of directory levels to visit.\n\tvoid setMaxDepth(int maxDepth);\n}", "des": "The DefaultDirectoryScanner extension which walks through the directory tree using Files.walk(Path, int, FileVisitOption...)."}
{"index": 5170, "code": "public class RegexPatternFileListFilter extends AbstractRegexPatternFileListFilter<File> {\n\t// Subclasses must implement this method to extract the file's name.\n\tprotected String getFilename(File file);\n\t// Subclasses must implement this method to indicate whether the file is a directory or not.\n\tprotected boolean isDirectory(File file);\n}", "des": "Implementation of AbstractRegexPatternMatchingFileListFilter for java.io.File instances."}
{"index": 5171, "code": "public interface RotationPolicy {\n\t// Invoked after the message source receive() method.\n\tvoid afterReceive(boolean messageReceived, org.springframework.integration.core.MessageSource<?> source);\n\t// Invoked before the message source receive() method.\n\tvoid beforeReceive(org.springframework.integration.core.MessageSource<?> source);\n\t// Return the current RotationPolicy.KeyDirectory.\n\tRotationPolicy.KeyDirectory getCurrent();\n}", "des": "A strategy for rotating advices to allow reconfiguring the message source before and/or after a poll."}
{"index": 5172, "code": "@FunctionalInterface public interface SessionCallbackWithoutResult<F> extends SessionCallback<F,Object> {\n\t// Called within the context of a session.\n\tdefault Object doInSession(Session<F> session);\n\t// Called within the context of a session.\n\tvoid doInSessionWithoutResult(Session<F> session);\n}", "des": "Simple convenience implementation of SessionCallback for cases where no result is returned."}
{"index": 5173, "code": "public class SimplePatternFileListFilter extends AbstractSimplePatternFileListFilter<File> {\n\t// Subclasses must implement this method to extract the file's name.\n\tprotected String getFilename(File file);\n\t// Subclasses must implement this method to indicate whether the file is a directory or not.\n\tprotected boolean isDirectory(File file);\n}", "des": "Filter that supports ant style path expressions, which are less powerful but more readable than regular expressions."}
{"index": 5174, "code": "protected static enum AbstractAspectJAdvisorFactory.AspectJAnnotationType extends Enum<AbstractAspectJAdvisorFactory.AspectJAnnotationType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AbstractAspectJAdvisorFactory.AspectJAnnotationType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AbstractAspectJAdvisorFactory.AspectJAnnotationType[] values();\n}", "des": "Enum for AspectJ annotation types."}
{"index": 5175, "code": "public abstract class AbstractExpressionPointcut extends Object implements ExpressionPointcut, Serializable {\n\t// Return this pointcut's expression.\n\tString getExpression();\n\t// Return location information about the pointcut expression if available.\n\tString getLocation();\n\t// Called when a new pointcut expression is set.\n\tprotected void onSetExpression(String expression);\n\tvoid setExpression(String expression);\n\t// Set the location for debugging.\n\tvoid setLocation(String location);\n}", "des": "Abstract superclass for expression pointcuts, offering location and expression properties."}
{"index": 5176, "code": "public abstract class AbstractGenericPointcutAdvisor extends AbstractPointcutAdvisor {\n\t// Return the advice part of this aspect.\n\tAdvice getAdvice();\n\t// Specify the advice that this advisor should apply.\n\tvoid setAdvice(Advice advice);\n}", "des": "Abstract generic PointcutAdvisor that allows for any Advice to be configured."}
{"index": 5177, "code": "public interface AdvisedSupportListener {\n\t// Invoked when the first proxy is created.\n\tvoid activated(AdvisedSupport advised);\n\t// Invoked when advice is changed after a proxy is created.\n\tvoid adviceChanged(AdvisedSupport advised);\n}", "des": "Listener to be registered on ProxyCreatorSupport objects Allows for receiving callbacks on activation and change of advice."}
{"index": 5178, "code": "public interface Advisor {\n\t// Return the advice part of this aspect.\n\tAdvice getAdvice();\n\t// Return whether this advice is associated with a particular instance (for example, creating a mixin) or shared with all instances of the advised class obtained from the same Spring bean factory.\n\tdefault boolean isPerInstance();\n}", "des": "Base interface holding AOP advice (action to take at a joinpoint) and a filter determining the applicability of the advice (such as a pointcut)."}
{"index": 5179, "code": "public interface AdvisorAdapter {\n\t// Return an AOP Alliance MethodInterceptor exposing the behavior of the given advice to an interception-based AOP framework.\n\tMethodInterceptor getInterceptor(Advisor advisor);\n\t// Does this adapter understand this advice object? Is it valid to invoke the getInterceptors method with an Advisor that contains this advice as an argument?\n\tboolean supportsAdvice(Advice advice);\n}", "des": "Interface allowing extension to the Spring AOP framework to allow handling of new Advisors and Advice types."}
{"index": 5180, "code": "public interface AdvisorAdapterRegistry {\n\t// Return an array of AOP Alliance MethodInterceptors to allow use of the given Advisor in an interception-based framework.\n\tMethodInterceptor[] getInterceptors(Advisor advisor);\n\t// Register the given AdvisorAdapter.\n\tvoid registerAdvisorAdapter(AdvisorAdapter adapter);\n\t// Return an Advisor wrapping the given advice.\n\tAdvisor wrap(Object advice);\n}", "des": "Interface for registries of Advisor adapters."}
{"index": 5181, "code": "public interface AopProxy {\n\t// Create a new proxy object.\n\tObject getProxy();\n\t// Create a new proxy object.\n\tObject getProxy(ClassLoader classLoader);\n\t// Determine the proxy class.\n\tClass<?> getProxyClass(ClassLoader classLoader);\n}", "des": "Delegate interface for a configured AOP proxy, allowing for the creation of actual proxy objects."}
{"index": 5182, "code": "public interface AspectInstanceFactory extends org.springframework.core.Ordered {\n\t// Expose the aspect class loader that this factory uses.\n\tClassLoader getAspectClassLoader();\n\t// Create an instance of this factory's aspect.\n\tObject getAspectInstance();\n}", "des": "Interface implemented to provide an instance of an AspectJ aspect."}
{"index": 5183, "code": "public class AspectJAfterAdvice extends AbstractAspectJAdvice implements MethodInterceptor, AfterAdvice, Serializable {\n\t// Implement this method to perform extra treatments before and after the invocation.\n\tObject invoke(MethodInvocation mi);\n\t// Return whether this is an after advice.\n\tboolean isAfterAdvice();\n\t// Return whether this is a before advice.\n\tboolean isBeforeAdvice();\n}", "des": "Spring AOP advice wrapping an AspectJ after advice method."}
{"index": 5184, "code": "public class AspectJAfterReturningAdvice extends AbstractAspectJAdvice implements AfterReturningAdvice, AfterAdvice, Serializable {\n\t// Callback after a given method successfully returned.\n\tvoid afterReturning(Object returnValue, Method method, Object[] args, Object target);\n\t// Return whether this is an after advice.\n\tboolean isAfterAdvice();\n\t// Return whether this is a before advice.\n\tboolean isBeforeAdvice();\n\tvoid setReturningName(String name);\n}", "des": "Spring AOP advice wrapping an AspectJ after-returning advice method."}
{"index": 5185, "code": "public class AspectJAfterThrowingAdvice extends AbstractAspectJAdvice implements MethodInterceptor, AfterAdvice, Serializable {\n\t// Implement this method to perform extra treatments before and after the invocation.\n\tObject invoke(MethodInvocation mi);\n\t// Return whether this is an after advice.\n\tboolean isAfterAdvice();\n\t// Return whether this is a before advice.\n\tboolean isBeforeAdvice();\n\tvoid setThrowingName(String name);\n}", "des": "Spring AOP advice wrapping an AspectJ after-throwing advice method."}
{"index": 5186, "code": "public abstract class AspectJAopUtils extends Object {\n\t// Return the AspectJPrecedenceInformation provided by this advisor or its advice.\n\tstatic AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(Advisor anAdvisor);\n\t// Return true if the advisor is a form of after advice.\n\tstatic boolean isAfterAdvice(Advisor anAdvisor);\n\t// Return true if the advisor is a form of before advice.\n\tstatic boolean isBeforeAdvice(Advisor anAdvisor);\n}", "des": "Utility methods for dealing with AspectJ advisors."}
{"index": 5187, "code": "public class AspectJMethodBeforeAdvice extends AbstractAspectJAdvice implements MethodBeforeAdvice, Serializable {\n\t// Callback before a given method is invoked.\n\tvoid before(Method method, Object[] args, Object target);\n\t// Return whether this is an after advice.\n\tboolean isAfterAdvice();\n\t// Return whether this is a before advice.\n\tboolean isBeforeAdvice();\n}", "des": "Spring AOP advice that wraps an AspectJ before method."}
{"index": 5188, "code": "public class AspectJPointcutAdvisor extends Object implements PointcutAdvisor, org.springframework.core.Ordered {\n\tboolean equals(Object other);\n\t// Return the advice part of this aspect.\n\tAdvice getAdvice();\n\t// Return the name of the aspect (bean) in which the advice was declared.\n\tString getAspectName();\n\tint getOrder();\n\t// Get the Pointcut that drives this advisor.\n\tPointcut getPointcut();\n\tvoid setOrder(int order);\n}", "des": "AspectJPointcutAdvisor that adapts an AbstractAspectJAdvice to the PointcutAdvisor interface."}
{"index": 5189, "code": "public interface AspectJPrecedenceInformation extends org.springframework.core.Ordered {\n\t// Return the name of the aspect (bean) in which the advice was declared.\n\tString getAspectName();\n\t// Return the declaration order of the advice member within the aspect.\n\tint getDeclarationOrder();\n\t// Return whether this is an after advice.\n\tboolean isAfterAdvice();\n\t// Return whether this is a before advice.\n\tboolean isBeforeAdvice();\n}", "des": "Interface to be implemented by types that can supply the information needed to sort advice/advisors by AspectJ's precedence rules."}
{"index": 5190, "code": "public class AspectJProxyFactory extends ProxyCreatorSupport {\n\t// Add an aspect of the supplied type to the end of the advice chain.\n\tvoid addAspect(Class<?> aspectClass);\n\t// Add the supplied aspect instance to the chain.\n\tvoid addAspect(Object aspectInstance);\n\t// Create a new proxy according to the settings in this factory.\n\t<T> T getProxy();\n\t// Create a new proxy according to the settings in this factory.\n\t<T> T getProxy(ClassLoader classLoader);\n}", "des": "AspectJ-based proxy factory, allowing for programmatic building of proxies which include AspectJ aspects (code style as well annotation style)."}
{"index": 5191, "code": "public class BeanFactoryAdvisorRetrievalHelper extends Object {\n\t// Find all eligible Advisor beans in the current bean factory, ignoring FactoryBeans and excluding beans that are currently in creation.\n\tList<Advisor> findAdvisorBeans();\n\t// Determine whether the aspect bean with the given name is eligible.\n\tprotected boolean isEligibleBean(String beanName);\n}", "des": "Helper for retrieving standard Spring Advisors from a BeanFactory, for use with auto-proxying."}
{"index": 5192, "code": "public class BeanFactoryAspectJAdvisorsBuilder extends Object {\n\t// Look for AspectJ-annotated aspect beans in the current bean factory, and return to a list of Spring AOP Advisors representing them.\n\tList<Advisor> buildAspectJAdvisors();\n\t// Return whether the aspect bean with the given name is eligible.\n\tprotected boolean isEligibleBean(String beanName);\n}", "des": "Helper for retrieving @AspectJ beans from a BeanFactory and building Spring Advisors based on them, for use with auto-proxying."}
{"index": 5193, "code": "public class BeanFactoryRefreshableTargetSource extends AbstractRefreshableTargetSource {\n\t// Retrieve a fresh target object.\n\tprotected final Object freshTarget();\n\t// A template method that subclasses may override to provide a fresh target object for the given bean factory and bean name.\n\tprotected Object obtainFreshBean(org.springframework.beans.factory.BeanFactory beanFactory, String beanName);\n}", "des": "Refreshable TargetSource that fetches fresh target beans from a BeanFactory."}
{"index": 5194, "code": "public class DebugInterceptor extends SimpleTraceInterceptor {\n\t// Return the number of times this interceptor has been invoked.\n\tlong getCount();\n\t// Return a description for the given method invocation.\n\tprotected String getInvocationDescription(MethodInvocation invocation);\n\t// Determines whether logging is enabled for the particular MethodInvocation.\n\tObject invoke(MethodInvocation invocation);\n\t// Reset the invocation count to zero.\n\tvoid resetCount();\n}", "des": "AOP Alliance MethodInterceptor that can be introduced in a chain to display verbose information about intercepted invocations to the logger."}
{"index": 5195, "code": "public class DefaultAdvisorAdapterRegistry extends Object implements AdvisorAdapterRegistry, Serializable {\n\t// Return an array of AOP Alliance MethodInterceptors to allow use of the given Advisor in an interception-based framework.\n\tMethodInterceptor[] getInterceptors(Advisor advisor);\n\t// Register the given AdvisorAdapter.\n\tvoid registerAdvisorAdapter(AdvisorAdapter adapter);\n\t// Return an Advisor wrapping the given advice.\n\tAdvisor wrap(Object adviceObject);\n}", "des": "Default implementation of the AdvisorAdapterRegistry interface."}
{"index": 5196, "code": "public class DefaultBeanFactoryPointcutAdvisor extends AbstractBeanFactoryPointcutAdvisor {\n\t// Get the Pointcut that drives this advisor.\n\tPointcut getPointcut();\n\t// Specify the pointcut targeting the advice.\n\tvoid setPointcut(Pointcut pointcut);\n}", "des": "Concrete BeanFactory-based PointcutAdvisor that allows for any Advice to be configured as reference to an Advice bean in the BeanFactory, as well as the Pointcut to be configured through a bean property."}
{"index": 5197, "code": "public class DefaultPointcutAdvisor extends AbstractGenericPointcutAdvisor implements Serializable {\n\t// Get the Pointcut that drives this advisor.\n\tPointcut getPointcut();\n\t// Specify the pointcut targeting the advice.\n\tvoid setPointcut(Pointcut pointcut);\n}", "des": "Convenient Pointcut-driven Advisor implementation."}
{"index": 5198, "code": "public class DefaultScopedObject extends Object implements ScopedObject, Serializable {\n\t// Return the current target object behind this scoped object proxy, in its raw form (as stored in the target scope).\n\tObject getTargetObject();\n\t// Remove this object from its target scope, for example from the backing session.\n\tvoid removeFromScope();\n}", "des": "Default implementation of the ScopedObject interface."}
{"index": 5199, "code": "public class DelegatePerTargetObjectIntroductionInterceptor extends IntroductionInfoSupport implements IntroductionInterceptor {\n\t// Proceed with the supplied MethodInterceptor.\n\tprotected Object doProceed(MethodInvocation mi);\n\t// Subclasses may need to override this if they want to perform custom behaviour in around advice.\n\tObject invoke(MethodInvocation mi);\n}", "des": "Convenient implementation of the IntroductionInterceptor interface."}
{"index": 5200, "code": "public class DelegatingIntroductionInterceptor extends IntroductionInfoSupport implements IntroductionInterceptor {\n\t// Proceed with the supplied MethodInterceptor.\n\tprotected Object doProceed(MethodInvocation mi);\n\t// Subclasses may need to override this if they want to perform custom behaviour in around advice.\n\tObject invoke(MethodInvocation mi);\n}", "des": "Convenient implementation of the IntroductionInterceptor interface."}
{"index": 5201, "code": "public abstract class DynamicMethodMatcher extends Object implements MethodMatcher {\n\t// Is this MethodMatcher dynamic, that is, must a final call be made on the MethodMatcher.matches(java.lang.reflect.Method, Class, Object[]) method at runtime even if the 2-arg matches method returns true?\n\tfinal boolean isRuntime();\n\t// Can override to add preconditions for dynamic matching.\n\tboolean matches(Method method, Class<?> targetClass);\n}", "des": "Convenient abstract superclass for dynamic method matchers, which do care about arguments at runtime."}
{"index": 5202, "code": "public abstract class DynamicMethodMatcherPointcut extends DynamicMethodMatcher implements Pointcut {\n\t// Return the ClassFilter for this pointcut.\n\tClassFilter getClassFilter();\n\t// Return the MethodMatcher for this pointcut.\n\tfinal MethodMatcher getMethodMatcher();\n}", "des": "Convenient superclass when we want to force subclasses to implement MethodMatcher interface, but subclasses will want to be pointcuts."}
{"index": 5203, "code": "public final class ExposeInvocationInterceptor extends Object implements MethodInterceptor, org.springframework.core.PriorityOrdered, Serializable {\n\t// Return the AOP Alliance MethodInvocation object associated with the current invocation.\n\tstatic MethodInvocation currentInvocation();\n\tint getOrder();\n\t// Implement this method to perform extra treatments before and after the invocation.\n\tObject invoke(MethodInvocation mi);\n}", "des": "Interceptor that exposes the current MethodInvocation as a thread-local object."}
{"index": 5204, "code": "public interface InstantiationModelAwarePointcutAdvisor extends PointcutAdvisor {\n\t// Return whether this advisor has already instantiated its advice.\n\tboolean isAdviceInstantiated();\n\t// Return whether this advisor is lazily initializing its underlying advice.\n\tboolean isLazy();\n}", "des": "Interface to be implemented by Spring AOP Advisors wrapping AspectJ aspects that may have a lazy initialization strategy."}
{"index": 5205, "code": "public interface IntroductionAdvisor extends Advisor, IntroductionInfo {\n\t// Return the filter determining which target classes this introduction should apply to.\n\tClassFilter getClassFilter();\n\t// Can the advised interfaces be implemented by the introduction advice? Invoked before adding an IntroductionAdvisor.\n\tvoid validateInterfaces();\n}", "des": "Superinterface for advisors that perform one or more AOP introductions."}
{"index": 5206, "code": "public interface Joinpoint {\n\t// Return the static part of this joinpoint.\n\tAccessibleObject getStaticPart();\n\t// Return the object that holds the current joinpoint's static part.\n\tObject getThis();\n\t// Proceed to the next interceptor in the chain.\n\tObject proceed();\n}", "des": "This interface represents a generic runtime joinpoint (in the AOP terminology)."}
{"index": 5207, "code": "public class LazyInitTargetSource extends AbstractBeanFactoryBasedTargetSource {\n\t// Return a target instance.\n\tObject getTarget();\n\t// Subclasses may override this method to perform additional processing on the target object when it is first loaded.\n\tprotected void postProcessTargetObject(Object targetObject);\n}", "des": "TargetSource that lazily accesses a singleton bean from a BeanFactory."}
{"index": 5208, "code": "public interface MetadataAwareAspectInstanceFactory extends AspectInstanceFactory {\n\t// Get the best possible creation mutex for this factory.\n\tObject getAspectCreationMutex();\n\t// Get the AspectJ AspectMetadata for this factory's aspect.\n\tAspectMetadata getAspectMetadata();\n}", "des": "Subinterface of AspectInstanceFactory that returns AspectMetadata associated with AspectJ-annotated classes."}
{"index": 5209, "code": "public interface Pointcut {\n\t// Return the ClassFilter for this pointcut.\n\tClassFilter getClassFilter();\n\t// Return the MethodMatcher for this pointcut.\n\tMethodMatcher getMethodMatcher();\n}", "des": "Core Spring pointcut abstraction."}
{"index": 5210, "code": "public abstract class Pointcuts extends Object {\n\t// Match all methods that both the given pointcuts match.\n\tstatic Pointcut intersection(Pointcut pc1, Pointcut pc2);\n\t// Perform the least expensive check for a pointcut match.\n\tstatic boolean matches(Pointcut pointcut, Method method, Class<?> targetClass, Object... args);\n\t// Match all methods that either (or both) of the given pointcuts matches.\n\tstatic Pointcut union(Pointcut pc1, Pointcut pc2);\n}", "des": "Pointcut constants for matching getters and setters, and static methods useful for manipulating and evaluating pointcuts."}
{"index": 5211, "code": "public interface PoolingConfig {\n\t// Return the number of active objects in the pool.\n\tint getActiveCount();\n\t// Return the number of idle objects in the pool.\n\tint getIdleCount();\n\t// Return the maximum size of the pool.\n\tint getMaxSize();\n}", "des": "Config interface for a pooling target source."}
{"index": 5212, "code": "public class PrototypeTargetSource extends AbstractPrototypeBasedTargetSource {\n\t// Obtain a new prototype instance for every call.\n\tObject getTarget();\n\t// Destroy the given independent instance.\n\tvoid releaseTarget(Object target);\n}", "des": "TargetSource implementation that creates a new instance of the target bean for each request, destroying each instance on release (after each request)."}
{"index": 5213, "code": "public interface Refreshable {\n\t// Return the last time an actual refresh happened (as timestamp).\n\tlong getLastRefreshTime();\n\t// Return the number of actual refreshes since startup.\n\tlong getRefreshCount();\n\t// Refresh the underlying target object.\n\tvoid refresh();\n}", "des": "Interface to be implemented by dynamic target objects, which support reloading and optionally polling for updates."}
{"index": 5214, "code": "public class RegexpMethodPointcutAdvisor extends AbstractGenericPointcutAdvisor {\n\t// Create the actual pointcut: By default, a JdkRegexpMethodPointcut will be used.\n\tprotected AbstractRegexpMethodPointcut createPointcut();\n\t// Initialize the singleton Pointcut held within this Advisor.\n\tPointcut getPointcut();\n\t// Set the regular expression defining methods to match.\n\tvoid setPattern(String pattern);\n\t// Set the regular expressions defining methods to match.\n\tvoid setPatterns(String... patterns);\n}", "des": "Convenient class for regexp method pointcuts that hold an Advice, making them an Advisor."}
{"index": 5215, "code": "public interface ScopedObject extends RawTargetAccess {\n\t// Return the current target object behind this scoped object proxy, in its raw form (as stored in the target scope).\n\tObject getTargetObject();\n\t// Remove this object from its target scope, for example from the backing session.\n\tvoid removeFromScope();\n}", "des": "An AOP introduction interface for scoped objects."}
{"index": 5216, "code": "public class SimpleTraceInterceptor extends AbstractTraceInterceptor {\n\t// Return a description for the given method invocation.\n\tprotected String getInvocationDescription(MethodInvocation invocation);\n\t// Subclasses must override this method to perform any tracing around the supplied MethodInvocation.\n\tprotected Object invokeUnderTrace(MethodInvocation invocation, org.apache.commons.logging.Log logger);\n}", "des": "Simple AOP Alliance MethodInterceptor that can be introduced in a chain to display verbose trace information about intercepted method invocations, with method entry and method exit info."}
{"index": 5217, "code": "public abstract class StaticMethodMatcher extends Object implements MethodMatcher {\n\t// Is this MethodMatcher dynamic, that is, must a final call be made on the MethodMatcher.matches(java.lang.reflect.Method, Class, Object[]) method at runtime even if the 2-arg matches method returns true?\n\tfinal boolean isRuntime();\n\t// Check whether there a runtime (dynamic) match for this method, which must have matched statically.\n\tfinal boolean matches(Method method, Class<?> targetClass, Object... args);\n}", "des": "Convenient abstract superclass for static method matchers, which don't care about arguments at runtime."}
{"index": 5218, "code": "public abstract class StaticMethodMatcherPointcut extends StaticMethodMatcher implements Pointcut {\n\t// Return the ClassFilter for this pointcut.\n\tClassFilter getClassFilter();\n\t// Return the MethodMatcher for this pointcut.\n\tfinal MethodMatcher getMethodMatcher();\n\t// Set the ClassFilter to use for this pointcut.\n\tvoid setClassFilter(ClassFilter classFilter);\n}", "des": "Convenient superclass when we want to force subclasses to implement the MethodMatcher interface but subclasses will want to be pointcuts."}
{"index": 5219, "code": "public abstract class StaticMethodMatcherPointcutAdvisor extends StaticMethodMatcherPointcut implements PointcutAdvisor, org.springframework.core.Ordered, Serializable {\n\t// Return the advice part of this aspect.\n\tAdvice getAdvice();\n\tint getOrder();\n\t// Get the Pointcut that drives this advisor.\n\tPointcut getPointcut();\n\tvoid setAdvice(Advice advice);\n\tvoid setOrder(int order);\n}", "des": "Convenient base class for Advisors that are also static pointcuts."}
{"index": 5220, "code": "public interface TargetSource extends TargetClassAware {\n\t// Return a target instance.\n\tObject getTarget();\n\t// Return the type of targets returned by this TargetSource.\n\tClass<?> getTargetClass();\n\t// Will all calls to getTarget() return the same object?\n\tboolean isStatic();\n\t// Release the given target object obtained from the getTarget() method, if any.\n\tvoid releaseTarget(Object target);\n}", "des": "A TargetSource is used to obtain the current \"target\" of an AOP invocation, which will be invoked via reflection if no around advice chooses to end the interceptor chain itself."}
{"index": 5221, "code": "public interface ThreadLocalTargetSourceStats {\n\t// Return the number of hits that were satisfied by a thread-bound object.\n\tint getHitCount();\n\t// Return the number of client invocations.\n\tint getInvocationCount();\n\t// Return the number of thread-bound objects created.\n\tint getObjectCount();\n}", "des": "Statistics for a ThreadLocal TargetSource."}
{"index": 5222, "code": "public class ThrowsAdviceInterceptor extends Object implements MethodInterceptor, AfterAdvice {\n\t// Return the number of handler methods in this advice.\n\tint getHandlerMethodCount();\n\t// Implement this method to perform extra treatments before and after the invocation.\n\tObject invoke(MethodInvocation mi);\n}", "des": "Interceptor to wrap an after-throwing advice."}
{"index": 5223, "code": "public class TypePatternClassFilter extends Object implements ClassFilter {\n\tboolean equals(Object obj);\n\t// Return the AspectJ type pattern to match.\n\tString getTypePattern();\n\t// Should the pointcut apply to the given interface or target class?\n\tboolean matches(Class<?> clazz);\n\t// Set the AspectJ type pattern to match.\n\tvoid setTypePattern(String typePattern);\n}", "des": "Spring AOP ClassFilter implementation using AspectJ type matching."}
{"index": 5224, "code": "public class ImapMailInboundChannelAdapterSpec extends MailInboundChannelAdapterSpec<ImapMailInboundChannelAdapterSpec,ImapMailReceiver> {\n\t// A SearchTermStrategy to use.\n\tImapMailInboundChannelAdapterSpec searchTermStrategy(SearchTermStrategy searchTermStrategy);\n\t// A flag to determine if message should be marked as read.\n\tImapMailInboundChannelAdapterSpec shouldMarkMessagesAsRead(boolean shouldMarkMessagesAsRead);\n}", "des": "A MailInboundChannelAdapterSpec for IMAP."}
{"index": 5225, "code": "public abstract class MailTransportUtils extends Object {\n\t// Close the given JavaMail Folder and ignore any thrown exception.\n\tstatic void closeFolder(jakarta.mail.Folder folder, boolean expunge);\n\t// Close the given JavaMail Service and ignore any thrown exception.\n\tstatic void closeService(jakarta.mail.Service service);\n\t// Returns a string representation of the given URLName, where the password has been protected.\n\tstatic String toPasswordProtectedString(jakarta.mail.URLName name);\n}", "des": "Collection of utility methods to work with Mail transports."}
{"index": 5226, "code": "public class Pop3MailReceiver extends AbstractMailReceiver {\n\t// Deletes the given messages from this receiver's folder, and closes it to expunge deleted messages.\n\tprotected void deleteMessages(jakarta.mail.Message[] messages);\n\t// Subclasses must implement this method to return new mail messages.\n\tprotected jakarta.mail.Message[] searchForNewMessages();\n}", "des": "A MailReceiver implementation that polls a mail server using the POP3 protocol."}
{"index": 5227, "code": "public final class AuthenticationFactoryOAuth2 extends Object {\n\t// Authenticate with client credentials.\n\tstatic Authentication clientCredentials(URL issuerUrl, URL credentialsUrl, String audience);\n\t// Authenticate with client credentials.\n\tstatic Authentication clientCredentials(URL issuerUrl, URL credentialsUrl, String audience, String scope);\n}", "des": "Factory class that allows to create Authentication instances for OAuth 2.0 authentication methods."}
{"index": 5228, "code": "public static enum ClientCnxIdleState.State extends Enum<ClientCnxIdleState.State> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClientCnxIdleState.State valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClientCnxIdleState.State[] values();\n}", "des": "Indicates the usage status of the connection and whether it has been released."}
{"index": 5229, "code": "public abstract class GenericSchemaImpl extends AvroBaseStructSchema<GenericRecord> implements GenericSchema<GenericRecord> {\n\tList<Field> getFields();\n\t// Create a generic schema out of a SchemaInfo.\n\tstatic GenericSchemaImpl of(SchemaInfo schemaInfo);\n\t// warning : we suggest migrate GenericSchemaImpl.of() to .of() method (e.g.\n\tstatic GenericSchemaImpl of(SchemaInfo schemaInfo, boolean useProvidedSchemaAsReaderSchema);\n}", "des": "A generic schema representation for AvroBasedGenericSchema ."}
{"index": 5230, "code": "public class JSONSchema<T> extends AvroBaseStructSchema<T> {\n\t// Clears the caches tied to the ObjectMapper instances and replaces the singleton ObjectMapper instance.\n\tstatic void clearCaches();\n\t// Implemented for backwards compatibility reasons.\n\tSchemaInfo getBackwardsCompatibleJsonSchemaInfo();\n\tstatic <T> JSONSchema<T> of(Class<T> pojo);\n\tstatic <T> JSONSchema<T> of(Class<T> pojo, Map<String,String> properties);\n\tstatic <T> JSONSchema<T> of(SchemaDefinition<T> schemaDefinition);\n}", "des": "A schema implementation to deal with json data."}
{"index": 5231, "code": "public class PulsarServiceNameResolver extends Object implements ServiceNameResolver {\n\t// Get service uri.\n\tServiceURI getServiceUri();\n\t// Get service url.\n\tString getServiceUrl();\n\t// Resolve pulsar service url.\n\tInetSocketAddress resolveHost();\n\t// Resolve pulsar service url.\n\tURI resolveHostUri();\n\t// Update service url.\n\tvoid updateServiceUrl(String serviceUrl);\n}", "des": "The default implementation of ServiceNameResolver."}
{"index": 5232, "code": "public interface ServiceNameResolver {\n\t// Get service uri.\n\tServiceURI getServiceUri();\n\t// Get service url.\n\tString getServiceUrl();\n\t// Resolve pulsar service url.\n\tInetSocketAddress resolveHost();\n\t// Resolve pulsar service url.\n\tURI resolveHostUri();\n\t// Update service url.\n\tvoid updateServiceUrl(String serviceUrl);\n}", "des": "A service name resolver to resolve real socket address."}
{"index": 5233, "code": "public abstract class AopTestUtils extends Object {\n\t// Get the target object of the supplied candidate object.\n\tstatic <T> T getTargetObject(Object candidate);\n\t// Get the ultimate target object of the supplied candidate object, unwrapping not only a top-level proxy but also any number of nested proxies.\n\tstatic <T> T getUltimateTargetObject(Object candidate);\n}", "des": "AopTestUtils is a collection of AOP-related utility methods for use in unit and integration testing scenarios."}
{"index": 5234, "code": "public interface ApplicationEvents {\n\t// Clear all application events recorded by this ApplicationEvents instance.\n\tvoid clear();\n\t// Stream all application events that were fired during test execution.\n\tStream<org.springframework.context.ApplicationEvent> stream();\n\t// Stream all application events or event payloads of the given type that were fired during test execution.\n\t<T> Stream<T> stream(Class<T> type);\n}", "des": "ApplicationEvents encapsulates all application events that were fired during the execution of a single test method."}
{"index": 5235, "code": "public abstract class ApplicationEventsHolder extends Object {\n\t// Get the ApplicationEvents for the current thread.\n\tstatic ApplicationEvents getApplicationEvents();\n\t// Get the ApplicationEvents for the current thread.\n\tstatic ApplicationEvents getRequiredApplicationEvents();\n}", "des": "Holder class to expose the application events published during the execution of a test in the form of a thread-bound ApplicationEvents object."}
{"index": 5236, "code": "public class ApplicationEventsTestExecutionListener extends AbstractTestExecutionListener {\n\t// The default implementation is empty.\n\tvoid afterTestMethod(TestContext testContext);\n\t// The default implementation is empty.\n\tvoid beforeTestMethod(TestContext testContext);\n\t// Returns 1800.\n\tfinal int getOrder();\n\t// The default implementation is empty.\n\tvoid prepareTestInstance(TestContext testContext);\n}", "des": "TestExecutionListener which provides support for ApplicationEvents."}
{"index": 5237, "code": "public interface BootstrapContext {\n\t// Get the CacheAwareContextLoaderDelegate to use for transparent interaction with the ContextCache.\n\tCacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();\n\t// Get the test class for this bootstrap context.\n\tClass<?> getTestClass();\n}", "des": "BootstrapContext encapsulates the context in which the Spring TestContext Framework is bootstrapped."}
{"index": 5238, "code": "public interface ContextLoader {\n\t// Deprecated. as of Spring Framework 6.0, in favor of methods defined in the SmartContextLoader SPI\n\torg.springframework.context.ApplicationContext loadContext(String... locations);\n\t// Deprecated. as of Spring Framework 6.0, in favor of methods defined in the SmartContextLoader SPI\n\tString[] processLocations(Class<?> clazz, String... locations);\n}", "des": "Strategy interface for loading an ApplicationContext for an integration test managed by the Spring TestContext Framework."}
{"index": 5239, "code": "public class DefaultBootstrapContext extends Object implements BootstrapContext {\n\t// Get the CacheAwareContextLoaderDelegate to use for transparent interaction with the ContextCache.\n\tCacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();\n\t// Get the test class for this bootstrap context.\n\tClass<?> getTestClass();\n}", "des": "Default implementation of the BootstrapContext interface."}
{"index": 5240, "code": "public class DelegatingSmartContextLoader extends AbstractDelegatingSmartContextLoader {\n\t// Get the delegate SmartContextLoader that supports annotated classes.\n\tprotected SmartContextLoader getAnnotationConfigLoader();\n\t// Get the delegate SmartContextLoader that supports XML configuration files and/or Groovy scripts.\n\tprotected SmartContextLoader getXmlLoader();\n}", "des": "DelegatingSmartContextLoader is a concrete implementation of AbstractDelegatingSmartContextLoader that delegates to a GenericXmlContextLoader (or a GenericGroovyXmlContextLoader if Groovy is present in the classpath) and an AnnotationConfigContextLoader."}
{"index": 5241, "code": "public static enum DirtiesContext.ClassMode extends Enum<DirtiesContext.ClassMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DirtiesContext.ClassMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DirtiesContext.ClassMode[] values();\n}", "des": "Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test class."}
{"index": 5242, "code": "public static enum DirtiesContext.HierarchyMode extends Enum<DirtiesContext.HierarchyMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DirtiesContext.HierarchyMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DirtiesContext.HierarchyMode[] values();\n}", "des": "Defines modes which determine how the context cache is cleared when @DirtiesContext is used in a test whose context is configured as part of a hierarchy via @ContextHierarchy."}
{"index": 5243, "code": "public static enum DirtiesContext.MethodMode extends Enum<DirtiesContext.MethodMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DirtiesContext.MethodMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DirtiesContext.MethodMode[] values();\n}", "des": "Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test method."}
{"index": 5244, "code": "public class ExceptionCollector extends Object {\n\t// Assert that this ExceptionCollector does not contain any exceptions.\n\tvoid assertEmpty();\n\t// Execute the supplied ExceptionCollector.Executable and track any exception thrown.\n\tvoid execute(ExceptionCollector.Executable executable);\n\t// Get the list of exceptions encountered in execute(Executable).\n\tList<Throwable> getExceptions();\n}", "des": "ExceptionCollector is a test utility for executing code blocks, collecting exceptions, and generating a single AssertionError containing any exceptions encountered as suppressed exceptions."}
{"index": 5245, "code": "public class FlashAttributeResultMatchers extends Object {\n\t// Assert a flash attribute's value.\n\tResultMatcher attribute(String name, Object value);\n\t// Assert a flash attribute's value with the given Hamcrest Matcher.\n\t<T> ResultMatcher attribute(String name, Matcher<? super T> matcher);\n\t// Assert the number of flash attributes.\n\tResultMatcher attributeCount(int count);\n\t// Assert the existence of the given flash attributes.\n\tResultMatcher attributeExists(String... names);\n}", "des": "Factory for \"output\" flash attribute assertions."}
{"index": 5246, "code": "public class FluxExchangeResult<T> extends ExchangeResult {\n\t// Invoke the given consumer within ExchangeResult.assertWithDiagnostics(Runnable) passing \"this\" instance to it.\n\tvoid consumeWith(Consumer<FluxExchangeResult<T>> consumer);\n\t// Return the response body as a Flux<T> of decoded elements.\n\treactor.core.publisher.Flux<T> getResponseBody();\n}", "des": "ExchangeResult variant with the response body decoded as Flux<T> but not yet consumed."}
{"index": 5247, "code": "public class MockEnvironment extends org.springframework.core.env.AbstractEnvironment {\n\t// Set a property on the underlying MockPropertySource for this environment.\n\tvoid setProperty(String key, String value);\n\t// Convenient synonym for setProperty(java.lang.String, java.lang.String) that returns the current instance.\n\tMockEnvironment withProperty(String key, String value);\n}", "des": "Simple ConfigurableEnvironment implementation exposing MockEnvironment.setProperty(String, String) and MockEnvironment.withProperty(String, String) methods for testing purposes."}
{"index": 5248, "code": "public class MockHttpOutputMessage extends Object implements org.springframework.http.HttpOutputMessage {\n\tOutputStream getBody();\n\t// Return the body content as a byte array.\n\tbyte[] getBodyAsBytes();\n\t// Return the body content interpreted as a UTF-8 string.\n\tString getBodyAsString();\n\t// Return the body content interpreted as a string using the supplied character set.\n\tString getBodyAsString(Charset charset);\n\torg.springframework.http.HttpHeaders getHeaders();\n}", "des": "Mock implementation of HttpOutputMessage."}
{"index": 5249, "code": "public final class MockMvc extends Object {\n\t// Return the underlying DispatcherServlet instance that this MockMvc was initialized with.\n\torg.springframework.web.servlet.DispatcherServlet getDispatcherServlet();\n\t// Perform a request and return a type that allows chaining further actions, such as asserting expectations, on the result.\n\tResultActions perform(RequestBuilder requestBuilder);\n}", "des": "Main entry point for server-side Spring MVC test support."}
{"index": 5250, "code": "public final class MockMvcBuilders extends Object {\n\t// Build a MockMvc instance by registering one or more @Controller instances and configuring Spring MVC infrastructure programmatically.\n\tstatic StandaloneMockMvcBuilder standaloneSetup(Object... controllers);\n\t// Build a MockMvc instance using the given, fully initialized (i.e., refreshed) WebApplicationContext.\n\tstatic DefaultMockMvcBuilder webAppContextSetup(org.springframework.web.context.WebApplicationContext context);\n}", "des": "The main class to import in order to access all available MockMvcBuilders."}
{"index": 5251, "code": "public class MockPropertySource extends org.springframework.core.env.PropertiesPropertySource {\n\t// Set the given property on the underlying Properties object.\n\tvoid setProperty(String name, Object value);\n\t// Convenient synonym for setProperty(java.lang.String, java.lang.Object) that returns the current instance.\n\tMockPropertySource withProperty(String name, Object value);\n}", "des": "Simple PropertySource implementation for use in testing."}
{"index": 5252, "code": "public interface MockServerConfigurer {\n\t// Invoked immediately, i.e.\n\tdefault void afterConfigureAdded(WebTestClient.MockServerSpec<?> serverSpec);\n\t// Invoked just before the mock server is built.\n\tdefault void beforeServerCreated(org.springframework.web.server.adapter.WebHttpHandlerBuilder builder);\n}", "des": "Contract that frameworks or applications can use to pre-package a set of customizations to a WebTestClient.MockServerSpec and expose that as a shortcut."}
{"index": 5253, "code": "public static class MockServerWebExchange.Builder extends Object {\n\t// Build the MockServerWebExchange instance.\n\tMockServerWebExchange build();\n\t// Set the session to use for the exchange.\n\tMockServerWebExchange.Builder session(org.springframework.web.server.WebSession session);\n\t// Provide a WebSessionManager instance to use with the exchange.\n\tMockServerWebExchange.Builder sessionManager(org.springframework.web.server.session.WebSessionManager sessionManager);\n}", "des": "Builder for a MockServerWebExchange."}
{"index": 5254, "code": "public interface RequestExpectation extends ResponseActions, RequestMatcher, ResponseCreator {\n\t// Whether there is a remaining count of invocations for this expectation.\n\tboolean hasRemainingCount();\n\t// Increase the matched request count and check we haven't passed the max count.\n\tvoid incrementAndValidate();\n\t// Whether the requirements for this request expectation have been met.\n\tboolean isSatisfied();\n}", "des": "An extension of ResponseActions that also implements RequestMatcher and ResponseCreator"}
{"index": 5255, "code": "public interface ResponseActions {\n\t// Add a request expectation.\n\tResponseActions andExpect(RequestMatcher requestMatcher);\n\t// Define the response.\n\tvoid andRespond(ResponseCreator responseCreator);\n}", "des": "A contract for setting up request expectations and defining a response."}
{"index": 5256, "code": "public interface ResultActions {\n\t// Perform a general action.\n\tResultActions andDo(ResultHandler handler);\n\t// Perform an expectation.\n\tResultActions andExpect(ResultMatcher matcher);\n\t// Perform multiple expectations, with the guarantee that all expectations will be asserted even if one or more expectations fail with an exception.\n\tdefault ResultActions andExpectAll(ResultMatcher... matchers);\n\t// Return the result of the executed request for direct access to the results.\n\tMvcResult andReturn();\n}", "des": "Allows applying actions, such as expectations, on the result of an executed request."}
{"index": 5257, "code": "@FunctionalInterface public interface ResultMatcher {\n\t// Assert the result of an executed request.\n\tvoid match(MvcResult result);\n\t// Deprecated. as of Spring Framework 5.3.10, in favor of ResultActions.andExpectAll(ResultMatcher...)\n\tstatic ResultMatcher matchAll(ResultMatcher... matchers);\n}", "des": "A ResultMatcher matches the result of an executed request against some expectation."}
{"index": 5258, "code": "public static enum Sql.ExecutionPhase extends Enum<Sql.ExecutionPhase> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Sql.ExecutionPhase valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Sql.ExecutionPhase[] values();\n}", "des": "Enumeration of phases that dictate when SQL scripts are executed."}
{"index": 5259, "code": "public static enum SqlConfig.ErrorMode extends Enum<SqlConfig.ErrorMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SqlConfig.ErrorMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SqlConfig.ErrorMode[] values();\n}", "des": "Enumeration of modes that dictate how errors are handled while executing SQL statements."}
{"index": 5260, "code": "public static enum SqlConfig.TransactionMode extends Enum<SqlConfig.TransactionMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SqlConfig.TransactionMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SqlConfig.TransactionMode[] values();\n}", "des": "Enumeration of modes that dictate whether SQL scripts should be executed within a transaction and what the transaction propagation behavior should be."}
{"index": 5261, "code": "public static enum SqlMergeMode.MergeMode extends Enum<SqlMergeMode.MergeMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SqlMergeMode.MergeMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SqlMergeMode.MergeMode[] values();\n}", "des": "Enumeration of modes that dictate whether method-level @Sql declarations are merged with class-level @Sql declarations."}
{"index": 5262, "code": "public final class SystemProfileValueSource extends Object implements ProfileValueSource {\n\t// Get the profile value indicated by the specified key from the system properties.\n\tString get(String key);\n\t// Obtain the canonical instance of this ProfileValueSource.\n\tstatic final SystemProfileValueSource getInstance();\n}", "des": "Implementation of ProfileValueSource which uses system properties as the underlying source."}
{"index": 5263, "code": "public abstract class TestAnnotationUtils extends Object {\n\t// Get the repeat count configured via the @Repeat annotation on the supplied method.\n\tstatic int getRepeatCount(Method method);\n\t// Get the timeout configured via the @Timed annotation on the supplied method.\n\tstatic long getTimeout(Method method);\n}", "des": "Collection of utility methods for working with Spring's core testing annotations."}
{"index": 5264, "code": "public static enum TestConstructor.AutowireMode extends Enum<TestConstructor.AutowireMode> {\n\t// Get the AutowireMode enum constant with the supplied name, ignoring case.\n\tstatic TestConstructor.AutowireMode from(String name);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TestConstructor.AutowireMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TestConstructor.AutowireMode[] values();\n}", "des": "Defines autowiring modes for parameters in a test constructor."}
{"index": 5265, "code": "public class TestContextAotGenerator extends Object {\n\t// Get the RuntimeHints gathered during AOT processing.\n\tfinal org.springframework.aot.hint.RuntimeHints getRuntimeHints();\n\t// Process each of the supplied Spring integration test classes and generate AOT artifacts.\n\tvoid processAheadOfTime(Stream<Class<?>> testClasses);\n}", "des": "TestContextAotGenerator generates AOT artifacts for integration tests that depend on support from the Spring TestContext Framework."}
{"index": 5266, "code": "public abstract class TestContextEvent extends org.springframework.context.ApplicationEvent {\n\t// Get the TestContext associated with this event.\n\tfinal TestContext getSource();\n\t// Alias for getSource().\n\tfinal TestContext getTestContext();\n}", "des": "Base class for events published by the EventPublishingTestExecutionListener."}
{"index": 5267, "code": "public static enum TestExecutionListeners.MergeMode extends Enum<TestExecutionListeners.MergeMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TestExecutionListeners.MergeMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TestExecutionListeners.MergeMode[] values();\n}", "des": "Enumeration of modes that dictate whether explicitly declared listeners are merged with the default listeners when @TestExecutionListeners is declared on a class that does not inherit listeners from a superclass or enclosing class."}
{"index": 5268, "code": "public class ViewResultMatchers extends Object {\n\t// Assert the selected view name.\n\tResultMatcher name(String expectedViewName);\n\t// Assert the selected view name with the given Hamcrest Matcher.\n\tResultMatcher name(Matcher<? super String> matcher);\n}", "des": "Factory for assertions on the selected view."}
{"index": 5269, "code": "public class WebDelegatingSmartContextLoader extends AbstractDelegatingSmartContextLoader {\n\t// Get the delegate SmartContextLoader that supports annotated classes.\n\tprotected SmartContextLoader getAnnotationConfigLoader();\n\t// Get the delegate SmartContextLoader that supports XML configuration files and/or Groovy scripts.\n\tprotected SmartContextLoader getXmlLoader();\n}", "des": "WebDelegatingSmartContextLoader is a concrete implementation of AbstractDelegatingSmartContextLoader that delegates to a GenericXmlWebContextLoader (or a GenericGroovyXmlWebContextLoader if Groovy is present on the classpath) and an AnnotationConfigWebContextLoader."}
{"index": 5270, "code": "public static interface WebTestClient.ListBodySpec<E> extends WebTestClient.BodySpec<List<E>,WebTestClient.ListBodySpec<E>> {\n\t// Assert the extracted list of values contains the given elements.\n\tWebTestClient.ListBodySpec<E> contains(E... elements);\n\t// Assert the extracted list of values doesn't contain the given elements.\n\tWebTestClient.ListBodySpec<E> doesNotContain(E... elements);\n\t// Assert the extracted list of values is of the given size.\n\tWebTestClient.ListBodySpec<E> hasSize(int size);\n}", "des": "Spec for expectations on the response body decoded to a List."}
{"index": 5271, "code": "public class XmlExpectationsHelper extends Object {\n\t// Parse the content as Node and apply a Matcher.\n\tvoid assertNode(String content, Matcher<? super Node> matcher);\n\t// Parse the content as DOMSource and apply a Matcher.\n\tvoid assertSource(String content, Matcher<? super Source> matcher);\n\t// Parse the expected and actual content strings as XML and assert that the two are \"similar\" -- i.e.\n\tvoid assertXmlEqual(String expected, String actual);\n}", "des": "A helper class for assertions on XML content."}
{"index": 5272, "code": "public final class GrantedAuthorityFromAssertionAttributesUserDetailsService extends AbstractCasAssertionUserDetailsService {\n\t// Protected template method for construct a UserDetails via the supplied CAS assertion.\n\tprotected org.springframework.security.core.userdetails.UserDetails loadUserDetails(org.apereo.cas.client.validation.Assertion assertion);\n\t// Converts the returned attribute values to uppercase values.\n\tvoid setConvertToUpperCase(boolean convertToUpperCase);\n}", "des": "Populates the GrantedAuthoritys for a user by reading a list of attributes that were returned as part of the CAS response."}
{"index": 5273, "code": "public enum PayloadExchangeType extends Enum<PayloadExchangeType> {\n\t// Determines if this exchange is a type of request (i.e.\n\tboolean isRequest();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PayloadExchangeType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PayloadExchangeType[] values();\n}", "des": "The PayloadExchange type"}
{"index": 5274, "code": "public enum ArtemisMode extends Enum<ArtemisMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ArtemisMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ArtemisMode[] values();\n}", "des": "Define the mode in which Artemis can operate."}
{"index": 5275, "code": "public class AutoConfigurationImportEvent extends EventObject {\n\t// Return the auto-configuration candidate configurations that are going to be imported.\n\tList<String> getCandidateConfigurations();\n\t// Return the exclusions that were applied.\n\tSet<String> getExclusions();\n}", "des": "Event fired when auto-configuration classes are imported."}
{"index": 5276, "code": "public enum CacheType extends Enum<CacheType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CacheType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CacheType[] values();\n}", "des": "Supported cache types (defined in order of precedence)."}
{"index": 5277, "code": "public interface CassandraConnectionDetails extends ConnectionDetails {\n\t// Cluster node addresses.\n\tList<CassandraConnectionDetails.Node> getContactPoints();\n\t// Datacenter that is considered \"local\".\n\tString getLocalDatacenter();\n\t// Login password of the server.\n\tdefault String getPassword();\n\t// Login user of the server.\n\tdefault String getUsername();\n}", "des": "Details required to establish a connection to a Cassandra service."}
{"index": 5278, "code": "public static record CassandraConnectionDetails.Node(String host, int port) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the host record component.\n\tString host();\n\t// Returns the value of the port record component.\n\tint port();\n}", "des": "A Cassandra node."}
{"index": 5279, "code": "public static enum CassandraProperties.Compression extends Enum<CassandraProperties.Compression> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CassandraProperties.Compression valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CassandraProperties.Compression[] values();\n}", "des": "Name of the algorithm used to compress protocol frames."}
{"index": 5280, "code": "public class ConcurrentKafkaListenerContainerFactoryConfigurer extends Object {\n\t// Configure the specified Kafka listener container factory.\n\tvoid configure(org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory<Object,Object> listenerFactory, org.springframework.kafka.core.ConsumerFactory<Object,Object> consumerFactory);\n\t// Set the CommonErrorHandler to use.\n\tvoid setCommonErrorHandler(org.springframework.kafka.listener.CommonErrorHandler commonErrorHandler);\n}", "des": "Configure ConcurrentKafkaListenerContainerFactory with sensible defaults."}
{"index": 5281, "code": "public static enum ConditionalOnJava.Range extends Enum<ConditionalOnJava.Range> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConditionalOnJava.Range valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConditionalOnJava.Range[] values();\n}", "des": "Range options."}
{"index": 5282, "code": "public static enum ConditionalOnWebApplication.Type extends Enum<ConditionalOnWebApplication.Type> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConditionalOnWebApplication.Type valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConditionalOnWebApplication.Type[] values();\n}", "des": "Available application types."}
{"index": 5283, "code": "public static enum ConditionMessage.Style extends Enum<ConditionMessage.Style> {\n\tCollection<?> applyTo(Collection<?> items);\n\tprotected abstract Object applyToItem(Object item);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConditionMessage.Style valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConditionMessage.Style[] values();\n}", "des": "Render styles."}
{"index": 5284, "code": "public interface CouchbaseConnectionDetails extends ConnectionDetails {\n\t// Connection string used to locate the Couchbase cluster.\n\tString getConnectionString();\n\t// Cluster password.\n\tString getPassword();\n\t// Cluster username.\n\tString getUsername();\n}", "des": "Details required to establish a connection to a Couchbase service."}
{"index": 5285, "code": "public class DateTimeFormatters extends Object {\n\t// Configures the date format using the given pattern.\n\tDateTimeFormatters dateFormat(String pattern);\n\t// Configures the date-time format using the given pattern.\n\tDateTimeFormatters dateTimeFormat(String pattern);\n\t// Configures the time format using the given pattern.\n\tDateTimeFormatters timeFormat(String pattern);\n}", "des": "Formatters for dates, times, and date-times."}
{"index": 5286, "code": "public interface ElasticsearchConnectionDetails extends ConnectionDetails {\n\t// List of the Elasticsearch nodes to use.\n\tList<ElasticsearchConnectionDetails.Node> getNodes();\n\t// Password for authentication with Elasticsearch.\n\tdefault String getPassword();\n\t// Prefix added to the path of every request sent to Elasticsearch.\n\tdefault String getPathPrefix();\n\t// Username for authentication with Elasticsearch.\n\tdefault String getUsername();\n}", "des": "Details required to establish a connection to an Elasticsearch service."}
{"index": 5287, "code": "public static enum ElasticsearchConnectionDetails.Node.Protocol extends Enum<ElasticsearchConnectionDetails.Node.Protocol> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ElasticsearchConnectionDetails.Node.Protocol valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ElasticsearchConnectionDetails.Node.Protocol[] values();\n}", "des": "Connection protocol."}
{"index": 5288, "code": "public class EntityScanner extends Object {\n\t// Create a ClassPathScanningCandidateComponentProvider to scan entities based on the specified ApplicationContext.\n\tprotected org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider createClassPathScanningCandidateComponentProvider(org.springframework.context.ApplicationContext context);\n\t// Scan for entities with the specified annotations.\n\tfinal Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes);\n}", "des": "An entity scanner that searches the classpath from an @EntityScan specified packages."}
{"index": 5289, "code": "public static enum ErrorProperties.IncludeAttribute extends Enum<ErrorProperties.IncludeAttribute> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ErrorProperties.IncludeAttribute valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ErrorProperties.IncludeAttribute[] values();\n}", "des": "Include error attributes options."}
{"index": 5290, "code": "public static enum ErrorProperties.IncludeStacktrace extends Enum<ErrorProperties.IncludeStacktrace> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ErrorProperties.IncludeStacktrace valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ErrorProperties.IncludeStacktrace[] values();\n}", "des": "Include Stacktrace attribute options."}
{"index": 5291, "code": "public interface FlywayConnectionDetails extends ConnectionDetails {\n\t// The name of the JDBC driver class.\n\tdefault String getDriverClassName();\n\t// JDBC URL for the database or null if no Flyway-specific configuration is required.\n\tString getJdbcUrl();\n\t// Password for the database or null if no Flyway-specific configuration is required.\n\tString getPassword();\n\t// Username for the database or null if no Flyway-specific configuration is required.\n\tString getUsername();\n}", "des": "Details required for Flyway to establish a connection to an SQL service using JDBC."}
{"index": 5292, "code": "public interface JdbcConnectionDetails extends ConnectionDetails {\n\t// The name of the JDBC driver class.\n\tdefault String getDriverClassName();\n\t// JDBC url for the database.\n\tString getJdbcUrl();\n\t// Password for the database.\n\tString getPassword();\n\t// Username for the database.\n\tString getUsername();\n\t// Returns the name of the XA DataSource class.\n\tdefault String getXaDataSourceClassName();\n}", "des": "Details required to establish a connection to an SQL service using JDBC."}
{"index": 5293, "code": "public static enum JmsProperties.AcknowledgeMode extends Enum<JmsProperties.AcknowledgeMode> {\n\tint getMode();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic JmsProperties.AcknowledgeMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic JmsProperties.AcknowledgeMode[] values();\n}", "des": "Translate the acknowledge modes defined on the Session."}
{"index": 5294, "code": "public enum JobStoreType extends Enum<JobStoreType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic JobStoreType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic JobStoreType[] values();\n}", "des": "Define the supported Quartz JobStore."}
{"index": 5295, "code": "public interface LiquibaseConnectionDetails extends ConnectionDetails {\n\t// The name of the JDBC driver class.\n\tdefault String getDriverClassName();\n\t// JDBC URL for the database or null if no Liquibase-specific configuration is required.\n\tString getJdbcUrl();\n\t// Password for the database or null if no Liquibase-specific configuration is required.\n\tString getPassword();\n\t// Username for the database or null if no Liquibase-specific configuration is required.\n\tString getUsername();\n}", "des": "Details required for Liquibase to establish a connection to an SQL service using JDBC."}
{"index": 5296, "code": "public interface MongoConnectionDetails extends ConnectionDetails {\n\t// The ConnectionString for MongoDB.\n\tcom.mongodb.ConnectionString getConnectionString();\n\t// GridFS configuration.\n\tdefault MongoConnectionDetails.GridFs getGridFs();\n}", "des": "Details required to establish a connection to a MongoDB service."}
{"index": 5297, "code": "public static interface MongoConnectionDetails.GridFs {\n\t// GridFS bucket name.\n\tString getBucket();\n\t// GridFS database name.\n\tString getDatabase();\n\t// Factory method to create a new MongoConnectionDetails.GridFs instance.\n\tstatic MongoConnectionDetails.GridFs of(String database, String bucket);\n}", "des": "GridFS configuration."}
{"index": 5298, "code": "public class MustacheResourceTemplateLoader extends Object implements com.samskivert.mustache.Mustache.TemplateLoader, org.springframework.context.ResourceLoaderAware {\n\t// Returns a reader for the template with the supplied name.\n\tReader getTemplate(String name);\n\t// Set the charset.\n\tvoid setCharset(String charSet);\n\t// Set the resource loader.\n\tvoid setResourceLoader(org.springframework.core.io.ResourceLoader resourceLoader);\n}", "des": "Mustache TemplateLoader implementation that uses a prefix, suffix and the Spring Resource abstraction to load a template from a file, classpath, URL etc."}
{"index": 5299, "code": "public interface Neo4jConnectionDetails extends ConnectionDetails {\n\t// Returns the token to use for authentication.\n\tdefault org.neo4j.driver.AuthToken getAuthToken();\n\t// Returns the URI of the Neo4j server.\n\tdefault URI getUri();\n}", "des": "Details required to establish a connection to a Neo4j service."}
{"index": 5300, "code": "public final class PathRequest extends Object {\n\t// Returns a matcher that includes the H2 console location.\n\tstatic PathRequest.H2ConsoleRequestMatcher toH2Console();\n\t// Returns a StaticResourceRequest that can be used to create a matcher for locations.\n\tstatic StaticResourceRequest toStaticResources();\n}", "des": "Factory that can be used to create a RequestMatcher for commonly used paths."}
{"index": 5301, "code": "public class PropertiesMongoConnectionDetails extends Object implements MongoConnectionDetails {\n\t// The ConnectionString for MongoDB.\n\tcom.mongodb.ConnectionString getConnectionString();\n\t// GridFS configuration.\n\tMongoConnectionDetails.GridFs getGridFs();\n}", "des": "Adapts MongoProperties to MongoConnectionDetails."}
{"index": 5302, "code": "public static record RabbitConnectionDetails.Address(String host, int port) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the host record component.\n\tString host();\n\t// Returns the value of the port record component.\n\tint port();\n}", "des": "A RabbitMQ address."}
{"index": 5303, "code": "public static enum RabbitRetryTemplateCustomizer.Target extends Enum<RabbitRetryTemplateCustomizer.Target> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RabbitRetryTemplateCustomizer.Target valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RabbitRetryTemplateCustomizer.Target[] values();\n}", "des": "Define the available target for a RetryTemplate."}
{"index": 5304, "code": "public interface RedisConnectionDetails extends ConnectionDetails {\n\t// Redis cluster configuration.\n\tdefault RedisConnectionDetails.Cluster getCluster();\n\t// Login password of the redis server.\n\tdefault String getPassword();\n\t// Redis sentinel configuration.\n\tdefault RedisConnectionDetails.Sentinel getSentinel();\n\t// Redis standalone configuration.\n\tdefault RedisConnectionDetails.Standalone getStandalone();\n\t// Login username of the redis server.\n\tdefault String getUsername();\n}", "des": "Details required to establish a connection to a Redis service."}
{"index": 5305, "code": "public static record RedisConnectionDetails.Node(String host, int port) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the host record component.\n\tString host();\n\t// Returns the value of the port record component.\n\tint port();\n}", "des": "A node in a sentinel or cluster configuration."}
{"index": 5306, "code": "public static interface RedisConnectionDetails.Sentinel {\n\t// Database index used by the connection factory.\n\tint getDatabase();\n\t// Name of the Redis server.\n\tString getMaster();\n\t// List of nodes.\n\tList<RedisConnectionDetails.Node> getNodes();\n\t// Password for authenticating with sentinel(s).\n\tString getPassword();\n\t// Login username for authenticating with sentinel(s).\n\tString getUsername();\n}", "des": "Redis sentinel configuration."}
{"index": 5307, "code": "public static interface RedisConnectionDetails.Standalone {\n\t// Database index used by the connection factory.\n\tdefault int getDatabase();\n\t// Redis server host.\n\tString getHost();\n\t// Redis server port.\n\tint getPort();\n\tstatic RedisConnectionDetails.Standalone of(String host, int port);\n\tstatic RedisConnectionDetails.Standalone of(String host, int port, int database);\n}", "des": "Redis standalone configuration."}
{"index": 5308, "code": "public static enum RedisProperties.ClientType extends Enum<RedisProperties.ClientType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RedisProperties.ClientType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RedisProperties.ClientType[] values();\n}", "des": "Type of Redis client to use."}
{"index": 5309, "code": "public static enum RedisSessionProperties.ConfigureAction extends Enum<RedisSessionProperties.ConfigureAction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RedisSessionProperties.ConfigureAction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RedisSessionProperties.ConfigureAction[] values();\n}", "des": "Strategies for configuring and validating Redis."}
{"index": 5310, "code": "public static enum RedisSessionProperties.RepositoryType extends Enum<RedisSessionProperties.RepositoryType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RedisSessionProperties.RepositoryType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RedisSessionProperties.RepositoryType[] values();\n}", "des": "Type of Redis session repository to auto-configure."}
{"index": 5311, "code": "public enum RepositoryType extends Enum<RepositoryType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RepositoryType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RepositoryType[] values();\n}", "des": "Type of Spring Data repositories to enable."}
{"index": 5312, "code": "@FunctionalInterface public interface RestClientBuilderCustomizer {\n\t// Customize the RequestConfig.Builder.\n\tdefault void customize(org.apache.http.client.config.RequestConfig.Builder builder);\n\t// Customize the HttpAsyncClientBuilder.\n\tdefault void customize(org.apache.http.impl.nio.client.HttpAsyncClientBuilder builder);\n\t// Customize the RestClientBuilder.\n\tvoid customize(org.elasticsearch.client.RestClientBuilder builder);\n}", "des": "Callback interface that can be implemented by beans wishing to further customize the RestClient through a RestClientBuilder whilst retaining default auto-configuration."}
{"index": 5313, "code": "public enum SearchStrategy extends Enum<SearchStrategy> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SearchStrategy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SearchStrategy[] values();\n}", "des": "Some named search strategies for beans in the bean factory hierarchy."}
{"index": 5314, "code": "public static enum ServerProperties.ForwardHeadersStrategy extends Enum<ServerProperties.ForwardHeadersStrategy> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ServerProperties.ForwardHeadersStrategy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ServerProperties.ForwardHeadersStrategy[] values();\n}", "des": "Strategies for supporting forward headers."}
{"index": 5315, "code": "public static enum ServerProperties.Jetty.Accesslog.FORMAT extends Enum<ServerProperties.Jetty.Accesslog.FORMAT> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ServerProperties.Jetty.Accesslog.FORMAT valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ServerProperties.Jetty.Accesslog.FORMAT[] values();\n}", "des": "Log format for Jetty access logs."}
{"index": 5316, "code": "public class StandardMongoClientSettingsBuilderCustomizer extends Object implements MongoClientSettingsBuilderCustomizer, org.springframework.core.Ordered {\n\t// Customize the MongoClientSettings.Builder.\n\tvoid customize(com.mongodb.MongoClientSettings.Builder settingsBuilder);\n\tint getOrder();\n\t// Set the order value of this object.\n\tvoid setOrder(int order);\n}", "des": "A MongoClientSettingsBuilderCustomizer that applies standard settings to a MongoClientSettings."}
{"index": 5317, "code": "public enum StaticResourceLocation extends Enum<StaticResourceLocation> {\n\tStream<String> getPatterns();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic StaticResourceLocation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic StaticResourceLocation[] values();\n}", "des": "Common locations for static resources."}
{"index": 5318, "code": "public interface WebClientSsl {\n\t// Return a Consumer that will apply SSL configuration for the named SslBundle to a WebClient.Builder.\n\tConsumer<org.springframework.web.reactive.function.client.WebClient.Builder> fromBundle(String bundleName);\n\t// Return a Consumer that will apply SSL configuration for the SslBundle to a WebClient.Builder.\n\tConsumer<org.springframework.web.reactive.function.client.WebClient.Builder> fromBundle(org.springframework.boot.ssl.SslBundle bundle);\n}", "des": "Interface that can be used to apply SSL configuration to a WebClient.Builder."}
{"index": 5319, "code": "public static enum WebMvcProperties.MatchingStrategy extends Enum<WebMvcProperties.MatchingStrategy> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic WebMvcProperties.MatchingStrategy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic WebMvcProperties.MatchingStrategy[] values();\n}", "des": "Matching strategy options."}
{"index": 5320, "code": "public class MarshallingWsInboundGatewaySpec extends BaseWsInboundGatewaySpec<MarshallingWsInboundGatewaySpec,MarshallingWebServiceInboundGateway> {\n\t// Specify a marshaller to use.\n\tMarshallingWsInboundGatewaySpec marshaller(org.springframework.oxm.Marshaller marshaller);\n\t// Specify an unmarshaller to use.\n\tMarshallingWsInboundGatewaySpec unmarshaller(org.springframework.oxm.Unmarshaller unmarshaller);\n}", "des": "The spec for a MarshallingWebServiceInboundGateway."}
{"index": 5321, "code": "public final class ChangedFile extends Object {\n\tboolean equals(Object obj);\n\t// Return the file that was changed.\n\tFile getFile();\n\t// Return the name of the file relative to the source directory.\n\tString getRelativeName();\n\t// Return the type of change.\n\tChangedFile.Type getType();\n}", "des": "A single file that has changed."}
{"index": 5322, "code": "public static enum ChangedFile.Type extends Enum<ChangedFile.Type> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ChangedFile.Type valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ChangedFile.Type[] values();\n}", "des": "Change types."}
{"index": 5323, "code": "public final class ChangedFiles extends Object implements Iterable<ChangedFile> {\n\tboolean equals(Object obj);\n\t// The files that have been changed.\n\tSet<ChangedFile> getFiles();\n\t// The source directory being watched.\n\tFile getSourceDirectory();\n\tIterator<ChangedFile> iterator();\n}", "des": "A collections of files from a specific source directory that have changed."}
{"index": 5324, "code": "public class ClassLoaderFile extends Object implements Serializable {\n\t// Return the contents of the file as a byte array or null if getKind() is ClassLoaderFile.Kind.DELETED.\n\tbyte[] getContents();\n\t// Return the file ClassLoaderFile.Kind (added, modified, deleted).\n\tClassLoaderFile.Kind getKind();\n\t// Return the time that the file was last modified.\n\tlong getLastModified();\n}", "des": "A single file that may be served from a ClassLoader."}
{"index": 5325, "code": "public static enum ClassLoaderFile.Kind extends Enum<ClassLoaderFile.Kind> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClassLoaderFile.Kind valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClassLoaderFile.Kind[] values();\n}", "des": "The kinds of class load files."}
{"index": 5326, "code": "public static class ClassLoaderFiles.SourceDirectory extends Object implements Serializable {\n\tprotected final void add(String name, ClassLoaderFile file);\n\tprotected final ClassLoaderFile get(String name);\n\t// Return all ClassLoaderFiles in the collection that are contained in this source directory.\n\tCollection<ClassLoaderFile> getFiles();\n\tSet<Map.Entry<String,ClassLoaderFile>> getFilesEntrySet();\n\t// Return the name of the source directory.\n\tString getName();\n\tprotected final void remove(String name);\n}", "des": "An individual source directory that is being managed by the collection."}
{"index": 5327, "code": "public class ClassPathChangedEvent extends org.springframework.context.ApplicationEvent {\n\t// Return details of the files that changed.\n\tSet<ChangedFiles> getChangeSet();\n\t// Return if an application restart is required due to the change.\n\tboolean isRestartRequired();\n\t// Return an overview of the changes that triggered this event.\n\tString overview();\n}", "des": "ApplicationEvent containing details of a classpath change."}
{"index": 5328, "code": "public static enum FailureHandler.Outcome extends Enum<FailureHandler.Outcome> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic FailureHandler.Outcome valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic FailureHandler.Outcome[] values();\n}", "des": "Various outcomes for the handler."}
{"index": 5329, "code": "public class RestartServer extends Object {\n\t// Called to restart the application.\n\tprotected void restart(Set<URL> urls, ClassLoaderFiles files);\n\t// Update the current running application with the specified ClassLoaderFiles and trigger a reload.\n\tvoid updateAndRestart(ClassLoaderFiles files);\n}", "des": "Server used to restart the current application with updated ClassLoaderFiles."}
{"index": 5330, "code": "public interface SnapshotStateRepository {\n\t// Restore any previously saved state.\n\tObject restore();\n\t// Save the given state in the repository.\n\tvoid save(Object state);\n}", "des": "Repository used by FileSystemWatcher to save file/directory snapshots across restarts."}
{"index": 5331, "code": "public class TunnelClient extends Object implements org.springframework.beans.factory.SmartInitializingSingleton {\n\tvoid addListener(TunnelClientListener listener);\n\tvoid afterSingletonsInstantiated();\n\tprotected final TunnelClient.ServerThread getServerThread();\n\tvoid removeListener(TunnelClientListener listener);\n\t// Start the client and accept incoming connections.\n\tint start();\n\t// Stop the client, disconnecting any servers.\n\tvoid stop();\n}", "des": "The client side component of a socket tunnel."}
{"index": 5332, "code": "public interface TunnelClientListener {\n\t// Called when a socket channel is closed.\n\tvoid onClose(SocketChannel socket);\n\t// Called when a socket channel is opened.\n\tvoid onOpen(SocketChannel socket);\n}", "des": "Listener that can be used to receive TunnelClient events."}
{"index": 5333, "code": "public abstract class AbstractAsyncReturnValueHandler extends Object implements AsyncHandlerMethodReturnValueHandler {\n\t// Handle the given return value.\n\tvoid handleReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType, Message<?> message);\n\t// Whether the return value represents an asynchronous, Future-like type with success and error callbacks.\n\tboolean isAsyncReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType);\n}", "des": "Convenient base class for AsyncHandlerMethodReturnValueHandler implementations that support only asynchronous (Future-like) return values and merely serve as adapters of such types to Spring's ListenableFuture."}
{"index": 5334, "code": "public abstract class AbstractMessageCondition<T extends AbstractMessageCondition<T>> extends Object implements MessageCondition<T> {\n\tboolean equals(Object other);\n\t// Return the collection of objects the message condition is composed of (e.g.\n\tprotected abstract Collection<?> getContent();\n\t// The notation to use when printing discrete items of content.\n\tprotected abstract String getToStringInfix();\n}", "des": "Base class for MessageCondition's that pre-declares abstract methods AbstractMessageCondition.getContent() and AbstractMessageCondition.getToStringInfix() in order to provide implementations of AbstractMessageCondition.equals(Object), AbstractMessageCondition.hashCode(), and AbstractMessageCondition.toString()."}
{"index": 5335, "code": "public abstract class AbstractNioBufferReactorNettyCodec<P> extends Object implements ReactorNettyCodec<P> {\n\t// Decode the input ByteBuf into one or more Messages.\n\tCollection<Message<P>> decode(io.netty.buffer.ByteBuf inputBuffer);\n\tprotected abstract List<Message<P>> decodeInternal(ByteBuffer nioBuffer);\n\t// Encode the given Message to the output ByteBuf.\n\tvoid encode(Message<P> message, io.netty.buffer.ByteBuf outputBuffer);\n\tprotected abstract ByteBuffer encodeInternal(Message<P> message);\n}", "des": "Convenient base class for ReactorNettyCodec implementations that need to work with NIO ByteBuffers."}
{"index": 5336, "code": "public abstract class AbstractSubscribableChannel extends AbstractMessageChannel implements SubscribableChannel {\n\tSet<MessageHandler> getSubscribers();\n\tboolean hasSubscription(MessageHandler handler);\n\t// Register a message handler.\n\tboolean subscribe(MessageHandler handler);\n\t// Un-register a message handler.\n\tboolean unsubscribe(MessageHandler handler);\n}", "des": "Abstract base class for SubscribableChannel implementations."}
{"index": 5337, "code": "public class ByteArrayMessageConverter extends AbstractMessageConverter {\n\t// Convert the message payload from serialized form to an Object.\n\tprotected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint);\n\t// Convert the payload object to serialized form.\n\tprotected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint);\n\t// Whether the given class is supported by this converter.\n\tprotected boolean supports(Class<?> clazz);\n}", "des": "A MessageConverter that supports MIME type \"application/octet-stream\" with the payload converted to and from a byte[]."}
{"index": 5338, "code": "public class CachingDestinationResolverProxy<D> extends Object implements DestinationResolver<D>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Resolves and caches destinations if successfully resolved by the target DestinationResolver implementation.\n\tD resolveDestination(String name);\n\t// Set the target DestinationResolver to delegate to.\n\tvoid setTargetDestinationResolver(DestinationResolver<D> targetDestinationResolver);\n}", "des": "DestinationResolver implementation that proxies a target DestinationResolver, caching its CachingDestinationResolverProxy.resolveDestination(java.lang.String) results."}
{"index": 5339, "code": "public class CompletableFutureReturnValueHandler extends AbstractAsyncReturnValueHandler {\n\t// Whether the given method return type is supported by this handler.\n\tboolean supportsReturnType(org.springframework.core.MethodParameter returnType);\n\t// Adapt the asynchronous return value to a CompletableFuture.\n\tCompletableFuture<?> toCompletableFuture(Object returnValue, org.springframework.core.MethodParameter returnType);\n}", "des": "Support for CompletableFuture (and as of 4.3.7 also CompletionStage) as a return value type."}
{"index": 5340, "code": "public interface ConnectionHandlingStompSession extends StompSession, StompTcpConnectionHandler<byte[]> {\n\t// Return a future that will complete when the session is ready for use.\n\tCompletableFuture<StompSession> getSession();\n\t// Deprecated. as of 6.0, in favor of getSession()\n\tdefault org.springframework.util.concurrent.ListenableFuture<StompSession> getSessionFuture();\n}", "des": "A StompSession that implements TcpConnectionHandler in order to send and receive messages."}
{"index": 5341, "code": "public class ContinuationHandlerMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\t// Resolves a method parameter into an argument value from a given message.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message);\n\t// Whether the given method parameter is supported by this resolver.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "No-op resolver for method arguments of type Continuation."}
{"index": 5342, "code": "public interface DestinationResolvingMessageReceivingOperations<D> extends MessageReceivingOperations<D> {\n\t// Resolve the given destination name and receive a message from it.\n\tMessage<?> receive(String destinationName);\n\t// Resolve the given destination name, receive a message from it, convert the payload to the specified target type.\n\t<T> T receiveAndConvert(String destinationName, Class<T> targetClass);\n}", "des": "Extends MessageReceivingOperations and adds operations for receiving messages from a destination specified as a (resolvable) String name."}
{"index": 5343, "code": "public class GenericMessage<T> extends Object implements Message<T>, Serializable {\n\tboolean equals(Object other);\n\t// Return message headers for the message (never null but may be empty).\n\tMessageHeaders getHeaders();\n\t// Return the message payload.\n\tT getPayload();\n}", "des": "An implementation of Message with a generic payload."}
{"index": 5344, "code": "public class GsonMessageConverter extends AbstractJsonMessageConverter {\n\tprotected Object fromJson(Reader reader, Type resolvedType);\n\tprotected Object fromJson(String payload, Type resolvedType);\n\t// Return the configured Gson instance for this converter.\n\tcom.google.gson.Gson getGson();\n\t// Set the Gson instance to use.\n\tvoid setGson(com.google.gson.Gson gson);\n\tprotected String toJson(Object payload, Type resolvedType);\n\tprotected void toJson(Object payload, Type resolvedType, Writer writer);\n}", "des": "Implementation of MessageConverter that can read and write JSON using Google Gson."}
{"index": 5345, "code": "public interface HandlerMethodArgumentResolver {\n\t// Resolves a method parameter into an argument value from a given message.\n\tObject resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message);\n\t// Whether the given method parameter is supported by this resolver.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Strategy interface for resolving method parameters into argument values in the context of a given Message."}
{"index": 5346, "code": "public interface HandlerMethodArgumentResolver {\n\t// Resolves a method parameter into an argument value from a given message.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message);\n\t// Whether the given method parameter is supported by this resolver.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Strategy interface for resolving method parameters into argument values in the context of a given Message."}
{"index": 5347, "code": "public interface HandlerMethodReturnValueHandler {\n\t// Handle the given return value.\n\tvoid handleReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType, Message<?> message);\n\t// Whether the given method return type is supported by this handler.\n\tboolean supportsReturnType(org.springframework.core.MethodParameter returnType);\n}", "des": "Strategy interface to handle the value returned from the invocation of a method handling a Message."}
{"index": 5348, "code": "public interface HandlerMethodReturnValueHandler {\n\t// Handle the given return value.\n\treactor.core.publisher.Mono<Void> handleReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType, Message<?> message);\n\t// Whether the given method return type is supported by this handler.\n\tboolean supportsReturnType(org.springframework.core.MethodParameter returnType);\n}", "des": "Handle the return value from the invocation of an annotated Message handling method."}
{"index": 5349, "code": "public interface HeaderMapper<T> {\n\t// Map from the given MessageHeaders to the specified target message.\n\tvoid fromHeaders(MessageHeaders headers, T target);\n\t// Map from the given target message to abstracted MessageHeaders.\n\tMessageHeaders toHeaders(T source);\n}", "des": "Generic strategy interface for mapping MessageHeaders to and from other types of objects."}
{"index": 5350, "code": "public class HeadersMethodArgumentResolver extends Object implements SyncHandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter parameter, Message<?> message);\n\t// Whether the given method parameter is supported by this resolver.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Argument resolver for headers."}
{"index": 5351, "code": "public class HeadersMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\t// Resolves a method parameter into an argument value from a given message.\n\tObject resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message);\n\t// Whether the given method parameter is supported by this resolver.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Argument resolver for headers."}
{"index": 5352, "code": "public class JsonbMessageConverter extends AbstractJsonMessageConverter {\n\tprotected Object fromJson(Reader reader, Type resolvedType);\n\tprotected Object fromJson(String payload, Type resolvedType);\n\t// Return the configured Jsonb instance for this converter.\n\tJsonb getJsonb();\n\t// Set the Jsonb instance to use.\n\tvoid setJsonb(Jsonb jsonb);\n\tprotected String toJson(Object payload, Type resolvedType);\n\tprotected void toJson(Object payload, Type resolvedType, Writer writer);\n}", "des": "Implementation of MessageConverter that can read and write JSON using the JSON Binding API."}
{"index": 5353, "code": "public interface Message<T> {\n\t// Return message headers for the message (never null but may be empty).\n\tMessageHeaders getHeaders();\n\t// Return the message payload.\n\tT getPayload();\n}", "des": "A generic message representation with headers and body."}
{"index": 5354, "code": "@FunctionalInterface public interface MessageChannel {\n\t// Send a Message to this channel.\n\tdefault boolean send(Message<?> message);\n\t// Send a message, blocking until either the message is accepted or the specified timeout period elapses.\n\tboolean send(Message<?> message, long timeout);\n}", "des": "Defines methods for sending messages."}
{"index": 5355, "code": "public interface MessageCondition<T> {\n\t// Define the rules for combining this condition with another.\n\tT combine(T other);\n\t// Compare this condition to another in the context of a specific message.\n\tint compareTo(T other, Message<?> message);\n\t// Check if this condition matches the given Message and returns a potentially new condition with content tailored to the current message.\n\tT getMatchingCondition(Message<?> message);\n}", "des": "Contract for mapping conditions to messages."}
{"index": 5356, "code": "public interface MessageConverter {\n\t// Convert the payload of a Message from a serialized form to a typed Object of the specified target class.\n\tObject fromMessage(Message<?> message, Class<?> targetClass);\n\t// Create a Message whose payload is the result of converting the given payload Object to serialized form.\n\tMessage<?> toMessage(Object payload, MessageHeaders headers);\n}", "des": "A converter to turn the payload of a Message from serialized form to a typed Object and vice versa."}
{"index": 5357, "code": "public interface MessageHandlingRunnable extends Runnable {\n\t// Return the Message that will be handled.\n\tMessage<?> getMessage();\n\t// Return the MessageHandler that will be used to handle the message.\n\tMessageHandler getMessageHandler();\n}", "des": "Extension of the Runnable interface with methods to obtain the MessageHandler and Message to be handled."}
{"index": 5358, "code": "public interface MessagingAdviceBean extends org.springframework.core.Ordered {\n\t// Return the type of the contained advice bean.\n\tClass<?> getBeanType();\n\t// Whether this MessagingAdviceBean applies to the given bean type.\n\tboolean isApplicableToBeanType(Class<?> beanType);\n\t// Return the advice bean instance, if necessary resolving a bean specified by name through the BeanFactory.\n\tObject resolveBean();\n}", "des": "Represents a Spring-managed bean with cross-cutting functionality to be applied to one or more Spring beans with annotation-based message handling methods."}
{"index": 5359, "code": "public interface PollableChannel extends MessageChannel {\n\t// Receive a message from this channel, blocking indefinitely if necessary.\n\tMessage<?> receive();\n\t// Receive a message from this channel, blocking until either a message is available or the specified timeout period elapses.\n\tMessage<?> receive(long timeout);\n}", "des": "A MessageChannel from which messages may be actively received through polling."}
{"index": 5360, "code": "public class PrincipalMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\t// Resolves a method parameter into an argument value from a given message.\n\tObject resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message);\n\t// Whether the given method parameter is supported by this resolver.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolver for arguments of type Principal, including Optional<Principal>."}
{"index": 5361, "code": "public class ReactorNetty2TcpConnection<P> extends Object implements TcpConnection<P> {\n\t// Close the connection.\n\tvoid close();\n\t// Register a task to invoke after a period of read inactivity.\n\tvoid onReadInactivity(Runnable runnable, long inactivityDuration);\n\t// Register a task to invoke after a period of write inactivity.\n\tvoid onWriteInactivity(Runnable runnable, long inactivityDuration);\n\t// Send the given message.\n\tCompletableFuture<Void> sendAsync(Message<P> message);\n}", "des": "Reactor Netty based implementation of TcpConnection."}
{"index": 5362, "code": "public interface ReactorNettyCodec<P> {\n\t// Decode the input ByteBuf into one or more Messages.\n\tCollection<Message<P>> decode(io.netty.buffer.ByteBuf inputBuffer);\n\t// Encode the given Message to the output ByteBuf.\n\tvoid encode(Message<P> message, io.netty.buffer.ByteBuf outputBuffer);\n}", "des": "Simple holder for a decoding Function and an encoding BiConsumer to use with Reactor Netty."}
{"index": 5363, "code": "public class ReactorNettyTcpConnection<P> extends Object implements TcpConnection<P> {\n\t// Close the connection.\n\tvoid close();\n\t// Register a task to invoke after a period of read inactivity.\n\tvoid onReadInactivity(Runnable runnable, long inactivityDuration);\n\t// Register a task to invoke after a period of write inactivity.\n\tvoid onWriteInactivity(Runnable runnable, long inactivityDuration);\n\t// Send the given message.\n\tCompletableFuture<Void> sendAsync(Message<P> message);\n}", "des": "Reactor Netty based implementation of TcpConnection."}
{"index": 5364, "code": "public class RSocketRequesterMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\t// Resolves a method parameter into an argument value from a given message.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message);\n\t// Whether the given method parameter is supported by this resolver.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves arguments of type RSocket that can be used for making requests to the remote peer."}
{"index": 5365, "code": "public class SimpleMessageConverter extends Object implements MessageConverter {\n\t// Convert the payload of a Message from a serialized form to a typed Object of the specified target class.\n\tObject fromMessage(Message<?> message, Class<?> targetClass);\n\t// Create a Message whose payload is the result of converting the given payload Object to serialized form.\n\tMessage<?> toMessage(Object payload, MessageHeaders headers);\n}", "des": "A simple converter that simply unwraps the message payload as long as it matches the expected target class."}
{"index": 5366, "code": "public enum SimpMessageType extends Enum<SimpMessageType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SimpMessageType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SimpMessageType[] values();\n}", "des": "A generic representation of different kinds of messages found in simple messaging protocols like STOMP."}
{"index": 5367, "code": "public interface SimpSession {\n\t// Return the session id.\n\tString getId();\n\t// Return the subscriptions for this session.\n\tSet<SimpSubscription> getSubscriptions();\n\t// Return the user associated with the session.\n\tSimpUser getUser();\n}", "des": "Represents a session of connected user."}
{"index": 5368, "code": "public interface SimpSubscription {\n\t// Return the subscription's destination.\n\tString getDestination();\n\t// Return the id associated of the subscription.\n\tString getId();\n\t// Return the session of the subscription.\n\tSimpSession getSession();\n}", "des": "Represents a subscription within a user session."}
{"index": 5369, "code": "public interface SimpUser {\n\t// The unique user name.\n\tString getName();\n\t// Return the user associated with the session, if available.\n\tPrincipal getPrincipal();\n\t// Look up the session for the given id.\n\tSimpSession getSession(String sessionId);\n\t// Return the sessions for the user.\n\tSet<SimpSession> getSessions();\n\t// Whether the user has any sessions.\n\tboolean hasSessions();\n}", "des": "Represents a connected user."}
{"index": 5370, "code": "public interface SimpUserRegistry {\n\t// Find subscriptions with the given matcher.\n\tSet<SimpSubscription> findSubscriptions(SimpSubscriptionMatcher matcher);\n\t// Get the user for the given name.\n\tSimpUser getUser(String userName);\n\t// Return the count of all connected users.\n\tint getUserCount();\n\t// Return a snapshot of all connected users.\n\tSet<SimpUser> getUsers();\n}", "des": "A registry of currently connected users."}
{"index": 5371, "code": "public static interface StompBrokerRelayMessageHandler.Stats {\n\t// The number of CONNECT frames processed.\n\tint getTotalConnect();\n\t// The number of CONNECTED frames processed.\n\tint getTotalConnected();\n\t// The number of DISCONNECT frames processed.\n\tint getTotalDisconnect();\n\t// The number of connection handlers.\n\tint getTotalHandlers();\n}", "des": "Contract for access to session counters."}
{"index": 5372, "code": "public enum StompCommand extends Enum<StompCommand> {\n\tSimpMessageType getMessageType();\n\tboolean isBodyAllowed();\n\tboolean requiresContentLength();\n\tboolean requiresDestination();\n\tboolean requiresSubscriptionId();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic StompCommand valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic StompCommand[] values();\n}", "des": "Represents a STOMP command."}
{"index": 5373, "code": "public class StompEncoder extends Object {\n\t// Encodes the given payload and headers into a byte[].\n\tbyte[] encode(Map<String,Object> headers, byte[] payload);\n\t// Encodes the given STOMP message into a byte[].\n\tbyte[] encode(Message<byte[]> message);\n}", "des": "An encoder for STOMP frames."}
{"index": 5374, "code": "public interface StompFrameHandler {\n\t// Invoked before handleFrame(StompHeaders, Object) to determine the type of Object the payload should be converted to.\n\tType getPayloadType(StompHeaders headers);\n\t// Handle a STOMP frame with the payload converted to the target type returned from getPayloadType(StompHeaders).\n\tvoid handleFrame(StompHeaders headers, Object payload);\n}", "des": "Contract to handle a STOMP frame."}
{"index": 5375, "code": "public static interface StompSession.Subscription extends StompSession.Receiptable {\n\t// Return the headers used on the SUBSCRIBE frame.\n\tStompHeaders getSubscriptionHeaders();\n\t// Return the id for the subscription.\n\tString getSubscriptionId();\n\t// Remove the subscription by sending an UNSUBSCRIBE frame.\n\tvoid unsubscribe();\n\t// Alternative to unsubscribe() with additional custom headers to send to the server.\n\tvoid unsubscribe(StompHeaders headers);\n}", "des": "A handle to use to unsubscribe or to track a receipt."}
{"index": 5376, "code": "public interface StompTcpConnectionHandler<P> extends TcpConnectionHandler<P> {\n\t// Return the headers that will be sent in the STOMP CONNECT frame.\n\tStompHeaderAccessor getConnectHeaders();\n\t// Return the sessionId associated with the STOMP connection.\n\tString getSessionId();\n}", "des": "A TcpConnectionHandler for use with STOMP connections, exposing further information about the connection."}
{"index": 5377, "code": "public class StompTcpMessageCodec extends Object implements TcpMessageCodec<byte[]> {\n\t// Decode the input ByteBuffer into one or more Messages.\n\tList<Message<byte[]>> decode(ByteBuffer nioBuffer);\n\t// Encode the given Message to the output ByteBuffer.\n\tByteBuffer encode(Message<byte[]> message);\n}", "des": "TcpMessageCodec for STOMP, delegating to StompDecoder and StompEncoder."}
{"index": 5378, "code": "public class StringMessageConverter extends AbstractMessageConverter {\n\t// Convert the message payload from serialized form to an Object.\n\tprotected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint);\n\t// Convert the payload object to serialized form.\n\tprotected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint);\n\t// Whether the given class is supported by this converter.\n\tprotected boolean supports(Class<?> clazz);\n}", "des": "A MessageConverter that supports MIME type \"text/plain\" with the payload converted to and from a String."}
{"index": 5379, "code": "public interface SubscribableChannel extends MessageChannel {\n\t// Register a message handler.\n\tboolean subscribe(MessageHandler handler);\n\t// Un-register a message handler.\n\tboolean unsubscribe(MessageHandler handler);\n}", "des": "A MessageChannel that maintains a registry of subscribers and invokes them to handle messages sent through this channel."}
{"index": 5380, "code": "public interface SyncHandlerMethodArgumentResolver extends HandlerMethodArgumentResolver {\n\t// Resolves a method parameter into an argument value from a given message.\n\tdefault reactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message);\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter parameter, Message<?> message);\n}", "des": "An extension of HandlerMethodArgumentResolver for implementations that are synchronous in nature and do not block to resolve values."}
{"index": 5381, "code": "public interface TcpConnectionHandler<P> {\n\t// Invoked after a connection is successfully established.\n\tvoid afterConnected(TcpConnection<P> connection);\n\t// Invoked on failure to connect.\n\tvoid afterConnectFailure(Throwable ex);\n\t// Invoked after the connection is closed.\n\tvoid afterConnectionClosed();\n\t// Handle a failure on the connection.\n\tvoid handleFailure(Throwable ex);\n\t// Handle a message received from the remote host.\n\tvoid handleMessage(Message<P> message);\n}", "des": "A contract for managing lifecycle events for a TCP connection including the handling of incoming messages."}
{"index": 5382, "code": "public interface TcpMessageCodec<P> {\n\t// Decode the input ByteBuffer into one or more Messages.\n\tList<Message<P>> decode(ByteBuffer buffer);\n\t// Encode the given Message to the output ByteBuffer.\n\tByteBuffer encode(Message<P> message);\n}", "des": "Contract to encode and decode a Message to and from a ByteBuffer allowing a higher-level protocol (e.g."}
{"index": 5383, "code": "public class UserDestinationResult extends Object {\n\t// The \"user\" destination from the source message.\n\tString getSourceDestination();\n\t// The user destination in the form expected when a client subscribes, e.g.\n\tString getSubscribeDestination();\n\t// The target destinations that the source destination was translated to, one per active user session, e.g.\n\tSet<String> getTargetDestinations();\n\t// The user for this user destination.\n\tString getUser();\n}", "des": "Contains the result from parsing a \"user\" destination from a source message and translating it to target destinations (one per active user session)."}
{"index": 5384, "code": "public static interface Archive.Entry {\n\t// Returns the name of the entry.\n\tString getName();\n\t// Returns true if the entry represents a directory.\n\tboolean isDirectory();\n}", "des": "Represents a single entry in the archive."}
{"index": 5385, "code": "public class JarLauncher extends ExecutableArchiveLauncher {\n\t// Return the path prefix for entries in the archive.\n\tprotected String getArchiveEntryPathPrefix();\n\t// Determine if the specified entry is a nested item that should be added to the classpath.\n\tprotected boolean isNestedArchive(Archive.Entry entry);\n\t// Return if post-processing needs to be applied to the archives.\n\tprotected boolean isPostProcessingClassPathArchives();\n\tstatic void main(String[] args);\n}", "des": "Launcher for JAR based archives."}
{"index": 5386, "code": "public interface JarMode {\n\t// Returns if this accepts and can run the given mode.\n\tboolean accepts(String mode);\n\t// Run the jar in the given mode.\n\tvoid run(String mode, String[] args);\n}", "des": "Interface registered in spring.factories to provides extended 'jarmode' support."}
{"index": 5387, "code": "public interface RandomAccessData {\n\t// Returns an InputStream that can be used to read the underlying data.\n\tInputStream getInputStream();\n\t// Returns the size of the data.\n\tlong getSize();\n\t// Returns a new RandomAccessData for a specific subsection of this data.\n\tRandomAccessData getSubsection(long offset, long length);\n\t// Reads all the data and returns it as a byte array.\n\tbyte[] read();\n\t// Reads the length bytes of data starting at the given offset.\n\tbyte[] read(long offset, long length);\n}", "des": "Interface that provides read-only random access to some underlying data."}
{"index": 5388, "code": "public class WarLauncher extends ExecutableArchiveLauncher {\n\t// Return the path prefix for entries in the archive.\n\tprotected String getArchiveEntryPathPrefix();\n\t// Determine if the specified entry is a nested item that should be added to the classpath.\n\tboolean isNestedArchive(Archive.Entry entry);\n\t// Return if post-processing needs to be applied to the archives.\n\tprotected boolean isPostProcessingClassPathArchives();\n\tstatic void main(String[] args);\n}", "des": "Launcher for WAR based archives."}
{"index": 5389, "code": "public abstract class AbstractCallbackHandler extends Object implements CallbackHandler {\n\t// Iterates over the given callbacks, and calls handleInternal for each of them.\n\tfinal void handle(Callback[] callbacks);\n\t// Template method that should be implemented by subclasses.\n\tprotected abstract void handleInternal(Callback callback);\n}", "des": "Abstract implementation of a CallbackHandler."}
{"index": 5390, "code": "public abstract class KeyStoreUtils extends Object {\n\t// Loads the key store indicated by system properties.\n\tstatic KeyStore loadDefaultKeyStore();\n\t// Loads a default trust store.\n\tstatic KeyStore loadDefaultTrustStore();\n}", "des": "Generic utility methods for dealing with KeyStore objects."}
{"index": 5391, "code": "public class SimplePasswordValidationCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Invoked when the callback has a WSPasswordCallback.USERNAME_TOKEN usage.\n\tvoid handleUsernameToken(org.apache.wss4j.common.ext.WSPasswordCallback callback);\n\t// Sets the users to validate against.\n\tvoid setUsers(Properties users);\n\tvoid setUsersMap(Map<String,String> users);\n}", "des": "Simple callback handler that validates passwords against a in-memory Properties object."}
{"index": 5392, "code": "public abstract class WsSecurityFaultException extends WsSecurityException {\n\t// Returns the fault actor for the exception.\n\tString getFaultActor();\n\t// Returns the fault code for the exception.\n\tQName getFaultCode();\n\t// Returns the fault string for the exception.\n\tString getFaultString();\n}", "des": "Exception indicating that a WS-Security executions should result in a SOAP Fault."}
{"index": 5393, "code": "public abstract class AbstractLocaleContextResolver extends AbstractLocaleResolver implements LocaleContextResolver {\n\t// Get the default TimeZone that this resolver is supposed to fall back to, if any.\n\tTimeZone getDefaultTimeZone();\n\t// Set a default TimeZone that this resolver will return if no other time zone is found.\n\tvoid setDefaultTimeZone(TimeZone defaultTimeZone);\n}", "des": "Abstract base class for LocaleContextResolver implementations."}
{"index": 5394, "code": "public abstract class AbstractLocaleResolver extends Object implements LocaleResolver {\n\t// Get the default Locale that this resolver is supposed to fall back to, if any.\n\tprotected Locale getDefaultLocale();\n\t// Set a default Locale that this resolver will return if no other locale is found.\n\tvoid setDefaultLocale(Locale defaultLocale);\n}", "des": "Abstract base class for LocaleResolver implementations."}
{"index": 5395, "code": "public abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> extends Object implements RequestCondition<T> {\n\tboolean equals(Object other);\n\t// Return the discrete items a request condition is composed of.\n\tprotected abstract Collection<?> getContent();\n\t// The notation to use when printing discrete items of content.\n\tprotected abstract String getToStringInfix();\n\t// Indicates whether this condition is empty, i.e.\n\tboolean isEmpty();\n}", "des": "A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString()."}
{"index": 5396, "code": "public abstract class AbstractVersionStrategy extends Object implements VersionStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String requestPath, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\tVersionPathStrategy getVersionPathStrategy();\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "Abstract base class for VersionStrategy implementations."}
{"index": 5397, "code": "protected static class AbstractVersionStrategy.FileNameVersionPathStrategy extends Object implements VersionPathStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String requestPath, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "File name-based VersionPathStrategy, e.g."}
{"index": 5398, "code": "protected static class AbstractVersionStrategy.PrefixVersionPathStrategy extends Object implements VersionPathStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String path, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "A prefix-based VersionPathStrategy, e.g."}
{"index": 5399, "code": "public abstract class AbstractXlsxStreamingView extends AbstractXlsxView {\n\t// This implementation creates a SXSSFWorkbook for streaming the XLSX format.\n\tprotected org.apache.poi.xssf.streaming.SXSSFWorkbook createWorkbook(Map<String,Object> model, HttpServletRequest request);\n\t// This implementation disposes of the SXSSFWorkbook when done with rendering.\n\tprotected void renderWorkbook(org.apache.poi.ss.usermodel.Workbook workbook, HttpServletResponse response);\n}", "des": "Convenient superclass for Excel document views in the Office 2007 XLSX format, using POI's streaming variant."}
{"index": 5400, "code": "public interface AsyncServerResponse extends ServerResponse {\n\t// Blocks indefinitely until the future response is obtained.\n\tServerResponse block();\n\t// Create a AsyncServerResponse with the given asynchronous response.\n\tstatic AsyncServerResponse create(Object asyncResponse);\n\t// Create a (built) response with the given asynchronous response.\n\tstatic AsyncServerResponse create(Object asyncResponse, Duration timeout);\n}", "des": "Asynchronous subtype of ServerResponse that exposes the future response."}
{"index": 5401, "code": "public class BeanNameViewResolver extends org.springframework.web.context.support.WebApplicationObjectSupport implements ViewResolver, org.springframework.core.Ordered {\n\tint getOrder();\n\t// Resolve the given view by name.\n\tView resolveViewName(String viewName, Locale locale);\n\t// Specify the order value for this ViewResolver bean.\n\tvoid setOrder(int order);\n}", "des": "A simple implementation of ViewResolver that interprets a view name as a bean name in the current application context, i.e."}
{"index": 5402, "code": "public class BindErrorsTag extends HtmlEscapingAwareTag {\n\tint doEndTag();\n\tvoid doFinally();\n\t// Called by doStartTag to perform the actual work.\n\tprotected final int doStartTagInternal();\n\t// Retrieve the Errors instance that this tag is currently bound to.\n\tfinal org.springframework.validation.Errors getErrors();\n\t// Return the name of the bean that this tag checks.\n\tString getName();\n\t// Set the name of the bean that this tag should check.\n\tvoid setName(String name);\n}", "des": "This <hasBindErrors> tag provides an Errors instance in case of bind errors."}
{"index": 5403, "code": "public class CachingResourceTransformer extends Object implements ResourceTransformer {\n\t// Return the configured Cache.\n\torg.springframework.cache.Cache getCache();\n\t// Transform the given resource.\n\torg.springframework.core.io.Resource transform(HttpServletRequest request, org.springframework.core.io.Resource resource, ResourceTransformerChain transformerChain);\n}", "des": "A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, and otherwise delegates to the resolver chain and saves the result in the cache."}
{"index": 5404, "code": "public class CheckboxesTag extends AbstractMultiCheckedElementTag {\n\t// Return the type of the HTML input element to generate: \"checkbox\" or \"radio\".\n\tprotected String getInputType();\n\t// Renders the 'input type=\"radio\"' element with the configured AbstractMultiCheckedElementTag.setItems(Object) values.\n\tprotected int writeTagContent(TagWriter tagWriter);\n}", "des": "The <checkboxes> tag renders multiple HTML 'input' tags with type 'checkbox'."}
{"index": 5405, "code": "public class CheckboxTag extends AbstractSingleCheckedElementTag {\n\t// Return the type of the HTML input element to generate: \"checkbox\" or \"radio\".\n\tprotected String getInputType();\n\t// Renders the 'input(radio)' element with the configured value.\n\tprotected int writeTagContent(TagWriter tagWriter);\n\t// Write the details for the given primary tag: i.e.\n\tprotected void writeTagDetails(TagWriter tagWriter);\n}", "des": "The <checkbox> tag renders an HTML 'input' tag with type 'checkbox'."}
{"index": 5406, "code": "public class CorsRegistry extends Object {\n\t// Enable cross-origin request handling for the specified path pattern.\n\tCorsRegistration addMapping(String pathPattern);\n\t// Return the registered CorsConfiguration objects, keyed by path pattern.\n\tprotected Map<String,org.springframework.web.cors.CorsConfiguration> getCorsConfigurations();\n}", "des": "Assists with the registration of global, URL pattern based CorsConfiguration mappings."}
{"index": 5407, "code": "public class DefaultServletHandlerConfigurer extends Object {\n\t// Return a handler mapping instance ordered at Ordered.LOWEST_PRECEDENCE containing the DefaultServletHttpRequestHandler instance mapped to \"/**\"; or null if default servlet handling was not enabled.\n\tprotected SimpleUrlHandlerMapping buildHandlerMapping();\n\t// Enable forwarding to the \"default\" Servlet.\n\tvoid enable();\n\t// Enable forwarding to the \"default\" Servlet identified by the given name.\n\tvoid enable(String defaultServletName);\n}", "des": "Configures a request handler for serving static resources by forwarding the request to the Servlet container's \"default\" Servlet."}
{"index": 5408, "code": "public interface EntityResponse<T> extends ServerResponse {\n\t// Return the entity that makes up this response.\n\tT entity();\n\t// Create a builder with the given object.\n\tstatic <T> EntityResponse.Builder<T> fromObject(T t);\n\t// Create a builder with the given object and type reference.\n\tstatic <T> EntityResponse.Builder<T> fromObject(T t, org.springframework.core.ParameterizedTypeReference<T> entityType);\n}", "des": "Entity-specific subtype of ServerResponse that exposes entity data."}
{"index": 5409, "code": "public interface FlashMapManager {\n\t// Find a FlashMap saved by a previous request that matches to the current request, remove it from underlying storage, and also remove other expired FlashMap instances.\n\tFlashMap retrieveAndUpdate(HttpServletRequest request, HttpServletResponse response);\n\t// Save the given FlashMap, in some underlying storage and set the start of its expiration period.\n\tvoid saveOutputFlashMap(FlashMap flashMap, HttpServletRequest request, HttpServletResponse response);\n}", "des": "A strategy interface for retrieving and saving FlashMap instances."}
{"index": 5410, "code": "public class FreeMarkerViewResolver extends AbstractTemplateViewResolver {\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Requires FreeMarkerView.\n\tprotected Class<?> requiredViewClass();\n}", "des": "Convenience subclass of UrlBasedViewResolver that supports FreeMarkerView (i.e."}
{"index": 5411, "code": "public class GroovyMarkupViewResolver extends AbstractTemplateViewResolver {\n\t// This resolver supports i18n, so cache keys should contain the locale.\n\tprotected Object getCacheKey(String viewName, Locale locale);\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Return the required type of view for this resolver.\n\tprotected Class<?> requiredViewClass();\n}", "des": "Convenience subclass of AbstractTemplateViewResolver that supports GroovyMarkupView (i.e."}
{"index": 5412, "code": "public interface HandlerAdapter {\n\t// Deprecated. as of 5.3.9 along with LastModified.\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\t// Use the given handler to handle this request.\n\tModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler);\n\t// Given a handler instance, return whether this HandlerAdapter can support it.\n\tboolean supports(Object handler);\n}", "des": "MVC framework SPI, allowing parameterization of the core MVC workflow."}
{"index": 5413, "code": "public interface HandlerMapping {\n\t// Return a handler and any interceptors for this request.\n\tHandlerExecutionChain getHandler(HttpServletRequest request);\n\t// Whether this HandlerMapping instance has been enabled to use parsed PathPatterns in which case the DispatcherServlet automatically parses the RequestPath to make it available for access in HandlerMappings, HandlerInterceptors, and other components.\n\tdefault boolean usesPathPatterns();\n}", "des": "Interface to be implemented by objects that define a mapping between requests and handler objects."}
{"index": 5414, "code": "public class HiddenInputTag extends AbstractHtmlElementTag {\n\t// Get the value of the 'disabled' attribute.\n\tboolean isDisabled();\n\t// Flags \"type\" as an illegal dynamic attribute.\n\tprotected boolean isValidDynamicAttribute(String localName, Object value);\n\t// Set the value of the 'disabled' attribute.\n\tvoid setDisabled(boolean disabled);\n\t// Writes the HTML 'input' tag to the supplied TagWriter including the databound value.\n\tprotected int writeTagContent(TagWriter tagWriter);\n}", "des": "The <hidden> tag renders an HTML 'input' tag with type 'hidden' using the bound value."}
{"index": 5415, "code": "public class HtmlEscapeTag extends RequestContextAwareTag {\n\t// Called by doStartTag to perform the actual work.\n\tprotected int doStartTagInternal();\n\t// Set the default value for HTML escaping, to be put into the current PageContext.\n\tvoid setDefaultHtmlEscape(boolean defaultHtmlEscape);\n}", "des": "The <htmlEscape> tag sets default HTML escape value for the current page."}
{"index": 5416, "code": "public class HttpRequestHandlerAdapter extends Object implements HandlerAdapter {\n\t// Same contract as for HttpServlet's getLastModified method.\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\t// Use the given handler to handle this request.\n\tModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler);\n\t// Given a handler instance, return whether this HandlerAdapter can support it.\n\tboolean supports(Object handler);\n}", "des": "Adapter to use the plain HttpRequestHandler interface with the generic DispatcherServlet."}
{"index": 5417, "code": "public class InterceptorRegistry extends Object {\n\t// Adds the provided HandlerInterceptor.\n\tInterceptorRegistration addInterceptor(HandlerInterceptor interceptor);\n\t// Adds the provided WebRequestInterceptor.\n\tInterceptorRegistration addWebRequestInterceptor(org.springframework.web.context.request.WebRequestInterceptor interceptor);\n\t// Return all registered interceptors.\n\tprotected List<Object> getInterceptors();\n}", "des": "Helps with configuring a list of mapped interceptors."}
{"index": 5418, "code": "public class JstlView extends InternalResourceView {\n\t// Exposes a JSTL LocalizationContext for Spring's locale and MessageSource.\n\tprotected void exposeHelpers(HttpServletRequest request);\n\t// Wraps the MessageSource with a JSTL-aware MessageSource that is aware of JSTL's jakarta.servlet.jsp.jstl.fmt.localizationContext context-param.\n\tprotected void initServletContext(ServletContext servletContext);\n}", "des": "Specialization of InternalResourceView for JSTL pages, i.e."}
{"index": 5419, "code": "public interface LocaleResolver {\n\t// Resolve the current locale via the given request.\n\tLocale resolveLocale(HttpServletRequest request);\n\t// Set the current locale to the given one.\n\tvoid setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale);\n}", "des": "Interface for web-based locale resolution strategies that allows for both locale resolution via the request and locale modification via request and response."}
{"index": 5420, "code": "public class MappingJackson2XmlView extends AbstractJackson2View {\n\t// Filter out undesired attributes from the given model.\n\tprotected Object filterModel(Map<String,Object> model);\n\t// Set the attribute in the model that should be rendered by this view.\n\tvoid setModelKey(String modelKey);\n}", "des": "Spring MVC View that renders XML content by serializing the model for the current request using Jackson 2's XmlMapper."}
{"index": 5421, "code": "public interface MatchableHandlerMapping extends HandlerMapping {\n\t// Return the parser of this HandlerMapping, if configured in which case pre-parsed patterns are used.\n\tdefault org.springframework.web.util.pattern.PathPatternParser getPatternParser();\n\t// Determine whether the request matches the given pattern.\n\tRequestMatchResult match(HttpServletRequest request, String pattern);\n}", "des": "Additional interface that a HandlerMapping can implement to expose a request matching API aligned with its internal request matching configuration and implementation."}
{"index": 5422, "code": "public static interface MvcUriComponentsBuilder.MethodInvocationInfo {\n\t// Return the argument values.\n\tObject[] getArgumentValues();\n\t// Return the controller method.\n\tMethod getControllerMethod();\n\t// Return the controller types.\n\tClass<?> getControllerType();\n}", "des": "Method invocation information."}
{"index": 5423, "code": "public class NestedPathTag extends TagSupport implements TryCatchFinally {\n\tvoid doCatch(Throwable throwable);\n\t// Reset any previous nestedPath value.\n\tint doEndTag();\n\tvoid doFinally();\n\tint doStartTag();\n\t// Return the path that this tag applies to.\n\tString getPath();\n\t// Set the path that this tag should apply.\n\tvoid setPath(String path);\n}", "des": "The <nestedPath> tag supports and assists with nested beans or bean properties in the model."}
{"index": 5424, "code": "public class NoHandlerFoundException extends ServletException implements org.springframework.web.ErrorResponse {\n\torg.springframework.http.ProblemDetail getBody();\n\t// Return headers to use for the response.\n\torg.springframework.http.HttpHeaders getHeaders();\n\tString getHttpMethod();\n\t// Return the headers of the request.\n\torg.springframework.http.HttpHeaders getRequestHeaders();\n\tString getRequestURL();\n\torg.springframework.http.HttpStatusCode getStatusCode();\n}", "des": "By default, when the DispatcherServlet can't find a handler for a request it sends a 404 response."}
{"index": 5425, "code": "public class Param extends Object {\n\t// Return the raw parameter name.\n\tString getName();\n\t// Return the raw parameter value.\n\tString getValue();\n\t// Set the raw name of the parameter.\n\tvoid setName(String name);\n\t// Set the raw value of the parameter.\n\tvoid setValue(String value);\n}", "des": "Bean used to pass name-value pair parameters from a ParamTag to a ParamAware tag."}
{"index": 5426, "code": "public class ParamTag extends BodyTagSupport {\n\tint doEndTag();\n\tvoid release();\n\t// Set the name of the parameter (required).\n\tvoid setName(String name);\n\t// Set the value of the parameter (optional).\n\tvoid setValue(String value);\n}", "des": "The <param> tag collects name-value parameters and passes them to a ParamAware ancestor in the tag hierarchy."}
{"index": 5427, "code": "public class RadioButtonTag extends AbstractSingleCheckedElementTag {\n\t// Return the type of the HTML input element to generate: \"checkbox\" or \"radio\".\n\tprotected String getInputType();\n\t// Write the details for the given primary tag: i.e.\n\tprotected void writeTagDetails(TagWriter tagWriter);\n}", "des": "The <radiobutton> tag renders an HTML 'input' tag with type 'radio'."}
{"index": 5428, "code": "public class RenderingContext extends Object {\n\t// Return the application context.\n\torg.springframework.context.ApplicationContext getApplicationContext();\n\t// Return the locale of the rendered template.\n\tLocale getLocale();\n\t// Return a function that takes a template path as input and returns the template content as a String.\n\tFunction<String,String> getTemplateLoader();\n\t// Return the URL of the rendered template.\n\tString getUrl();\n}", "des": "Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side."}
{"index": 5429, "code": "public interface RenderingResponse extends ServerResponse {\n\t// Create a builder with the given template name.\n\tstatic RenderingResponse.Builder create(String name);\n\t// Create a builder with the template name, status code, headers and model of the given response.\n\tstatic RenderingResponse.Builder from(RenderingResponse other);\n\t// Return the unmodifiable model map.\n\tMap<String,Object> model();\n\t// Return the name of the template to be rendered.\n\tString name();\n}", "des": "Rendering-specific subtype of ServerResponse that exposes model and template data."}
{"index": 5430, "code": "public interface RequestCondition<T> {\n\t// Combine this condition with another such as conditions from a type-level and method-level @RequestMapping annotation.\n\tT combine(T other);\n\t// Compare this condition to another condition in the context of a specific request.\n\tint compareTo(T other, HttpServletRequest request);\n\t// Check if the condition matches the request returning a potentially new instance created for the current request.\n\tT getMatchingCondition(HttpServletRequest request);\n}", "des": "Contract for request mapping conditions."}
{"index": 5431, "code": "public abstract class RequestContextAwareTag extends TagSupport implements TryCatchFinally {\n\tvoid doCatch(Throwable throwable);\n\tvoid doFinally();\n\t// Create and expose the current RequestContext.\n\tfinal int doStartTag();\n\t// Called by doStartTag to perform the actual work.\n\tprotected abstract int doStartTagInternal();\n\t// Return the current RequestContext.\n\tprotected final RequestContext getRequestContext();\n}", "des": "Superclass for all tags that require a RequestContext."}
{"index": 5432, "code": "public class ResourceChainRegistration extends Object {\n\t// Add a resource resolver to the chain.\n\tResourceChainRegistration addResolver(ResourceResolver resolver);\n\t// Add a resource transformer to the chain.\n\tResourceChainRegistration addTransformer(ResourceTransformer transformer);\n\tprotected List<ResourceResolver> getResourceResolvers();\n\tprotected List<ResourceTransformer> getResourceTransformers();\n}", "des": "Assists with the registration of resource resolvers and transformers."}
{"index": 5433, "code": "public interface ResourceTransformerChain {\n\t// Return the ResourceResolverChain that was used to resolve the Resource being transformed.\n\tResourceResolverChain getResolverChain();\n\t// Transform the given resource.\n\torg.springframework.core.io.Resource transform(HttpServletRequest request, org.springframework.core.io.Resource resource);\n}", "des": "A contract for invoking a chain of ResourceTransformers where each resolver is given a reference to the chain allowing it to delegate when necessary."}
{"index": 5434, "code": "public class ScriptTemplateViewResolver extends UrlBasedViewResolver {\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Return the required type of view for this resolver.\n\tprotected Class<?> requiredViewClass();\n}", "des": "Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it."}
{"index": 5435, "code": "public class SessionFlashMapManager extends AbstractFlashMapManager {\n\t// Exposes the best available session mutex.\n\tprotected Object getFlashMapsMutex(HttpServletRequest request);\n\t// Retrieves saved FlashMap instances from the HTTP session, if any.\n\tprotected List<FlashMap> retrieveFlashMaps(HttpServletRequest request);\n\t// Saves the given FlashMap instances in the HTTP session.\n\tprotected void updateFlashMaps(List<FlashMap> flashMaps, HttpServletRequest request, HttpServletResponse response);\n}", "des": "Store and retrieve FlashMap instances to and from the HTTP session."}
{"index": 5436, "code": "public class SimpleControllerHandlerAdapter extends Object implements HandlerAdapter {\n\t// Same contract as for HttpServlet's getLastModified method.\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\t// Use the given handler to handle this request.\n\tModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler);\n\t// Given a handler instance, return whether this HandlerAdapter can support it.\n\tboolean supports(Object handler);\n}", "des": "Adapter to use the plain Controller workflow interface with the generic DispatcherServlet."}
{"index": 5437, "code": "public class SimpleServletHandlerAdapter extends Object implements HandlerAdapter {\n\t// Same contract as for HttpServlet's getLastModified method.\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\t// Use the given handler to handle this request.\n\tModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler);\n\t// Given a handler instance, return whether this HandlerAdapter can support it.\n\tboolean supports(Object handler);\n}", "des": "Adapter to use the Servlet interface with the generic DispatcherServlet."}
{"index": 5438, "code": "public class TransformTag extends HtmlEscapingAwareTag {\n\t// Called by doStartTag to perform the actual work.\n\tprotected final int doStartTagInternal();\n\t// Set the scope to export the variable to.\n\tvoid setScope(String scope);\n\t// Set the value to transform, using the appropriate PropertyEditor from the enclosing BindTag.\n\tvoid setValue(Object value);\n\t// Set PageContext attribute name under which to expose a variable that contains the result of the transformation.\n\tvoid setVar(String var);\n}", "des": "The <transform> tag provides transformation for reference data values from controllers and other objects inside a spring:bind tag (or a data-bound form element tag from Spring's form tag library)."}
{"index": 5439, "code": "public interface VersionPathStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String requestPath, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "A strategy for extracting and embedding a resource version in its URL path."}
{"index": 5440, "code": "public interface View {\n\t// Return the content type of the view, if predetermined.\n\tdefault String getContentType();\n\t// Render the view given the specified model.\n\tvoid render(Map<String,?> model, HttpServletRequest request, HttpServletResponse response);\n}", "des": "MVC View for a web interaction."}
{"index": 5441, "code": "public class ViewControllerRegistration extends Object {\n\tprotected String getUrlPath();\n\tprotected ParameterizableViewController getViewController();\n\tprotected void setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\t// Set the status code to set on the response.\n\tViewControllerRegistration setStatusCode(org.springframework.http.HttpStatusCode statusCode);\n\t// Set the view name to return.\n\tvoid setViewName(String viewName);\n}", "des": "Assist with the registration of a single view controller."}
{"index": 5442, "code": "public static enum ConfigClientProperties.MultipleUriStrategy extends Enum<ConfigClientProperties.MultipleUriStrategy> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic ConfigClientProperties.MultipleUriStrategy valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic ConfigClientProperties.MultipleUriStrategy[] values();\n}", "des": "Enumerates possible strategies to use when multiple URLs are provided and an error occurs."}
{"index": 5443, "code": "public abstract class AbstractFileNameVersionStrategy extends Object implements VersionStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String requestPath, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "Abstract base class for filename suffix based VersionStrategy implementations, e.g."}
{"index": 5444, "code": "public abstract class AbstractPrefixVersionStrategy extends Object implements VersionStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String path, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "Abstract base class for VersionStrategy implementations that insert a prefix into the URL path, e.g."}
{"index": 5445, "code": "public abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> extends Object implements RequestCondition<T> {\n\tboolean equals(Object other);\n\t// Return the discrete items a request condition is composed of.\n\tprotected abstract Collection<?> getContent();\n\t// The notation to use when printing discrete items of content.\n\tprotected abstract String getToStringInfix();\n\t// Indicates whether this condition is empty, i.e.\n\tboolean isEmpty();\n}", "des": "A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString()."}
{"index": 5446, "code": "public abstract class AbstractUrlBasedView extends AbstractView implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Check whether the resource for the configured URL actually exists.\n\tabstract boolean checkResourceExists(Locale locale);\n\t// Return the URL of the resource that this view wraps.\n\tString getUrl();\n\t// Set the URL of the resource that this view wraps.\n\tvoid setUrl(String url);\n}", "des": "Abstract base class for URL-based views."}
{"index": 5447, "code": "public static interface BodyExtractor.Context {\n\t// Return the map of hints to use to customize body extraction.\n\tMap<String,Object> hints();\n\t// Return the HttpMessageReaders to be used for body extraction.\n\tList<org.springframework.http.codec.HttpMessageReader<?>> messageReaders();\n\t// Optionally return the ServerHttpResponse, if present.\n\tOptional<org.springframework.http.server.reactive.ServerHttpResponse> serverResponse();\n}", "des": "Defines the context used during the extraction."}
{"index": 5448, "code": "public static interface BodyInserter.Context {\n\t// Return the map of hints to use for response body conversion.\n\tMap<String,Object> hints();\n\t// Return the HttpMessageWriters to be used for response body conversion.\n\tList<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters();\n\t// Optionally return the ServerHttpRequest, if present.\n\tOptional<org.springframework.http.server.reactive.ServerHttpRequest> serverRequest();\n}", "des": "Defines the context used during the insertion."}
{"index": 5449, "code": "public static interface BodyInserters.FormInserter<T> extends BodyInserter<org.springframework.util.MultiValueMap<String,T>,org.springframework.http.client.reactive.ClientHttpRequest> {\n\t// Adds the specified key-value pair to the form.\n\tBodyInserters.FormInserter<T> with(String key, T value);\n\t// Adds the specified values to the form.\n\tBodyInserters.FormInserter<T> with(org.springframework.util.MultiValueMap<String,T> values);\n}", "des": "Extension of BodyInserter that allows for adding form data or multipart form data."}
{"index": 5450, "code": "public class CachingResourceTransformer extends Object implements ResourceTransformer {\n\t// Return the configured Cache.\n\torg.springframework.cache.Cache getCache();\n\t// Transform the given resource.\n\treactor.core.publisher.Mono<org.springframework.core.io.Resource> transform(org.springframework.web.server.ServerWebExchange exchange, org.springframework.core.io.Resource resource, ResourceTransformerChain transformerChain);\n}", "des": "A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, or otherwise delegates to the resolver chain and caches the result."}
{"index": 5451, "code": "public enum ClientHttpObservationDocumentation extends Enum<ClientHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClientHttpObservationDocumentation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClientHttpObservationDocumentation[] values();\n}", "des": "Documented KeyValues for the HTTP client observations."}
{"index": 5452, "code": "public class ContinuationHandlerMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "No-op resolver for method arguments of type Continuation."}
{"index": 5453, "code": "public class CorsRegistry extends Object {\n\t// Enable cross-origin request handling for the specified path pattern.\n\tCorsRegistration addMapping(String pathPattern);\n\t// Return the registered CorsConfiguration objects, keyed by path pattern.\n\tprotected Map<String,org.springframework.web.cors.CorsConfiguration> getCorsConfigurations();\n}", "des": "Assists with the registration of global, URL pattern based CorsConfiguration mappings."}
{"index": 5454, "code": "public class ErrorsMethodArgumentResolver extends HandlerMethodArgumentResolverSupport {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolve Errors or BindingResult method arguments."}
{"index": 5455, "code": "@FunctionalInterface public interface ExchangeFunction {\n\t// Exchange the given request for a ClientResponse promise.\n\treactor.core.publisher.Mono<ClientResponse> exchange(ClientRequest request);\n\t// Filter the exchange function with the given ExchangeFilterFunction, resulting in a filtered ExchangeFunction.\n\tdefault ExchangeFunction filter(ExchangeFilterFunction filter);\n}", "des": "Represents a function that exchanges a request for a (delayed) ClientResponse."}
{"index": 5456, "code": "public abstract class ExchangeFunctions extends Object {\n\t// Create an ExchangeFunction with the given ClientHttpConnector.\n\tstatic ExchangeFunction create(org.springframework.http.client.reactive.ClientHttpConnector connector);\n\t// Create an ExchangeFunction with the given ClientHttpConnector and ExchangeStrategies.\n\tstatic ExchangeFunction create(org.springframework.http.client.reactive.ClientHttpConnector connector, ExchangeStrategies strategies);\n}", "des": "Static factory methods to create an ExchangeFunction."}
{"index": 5457, "code": "public static interface ExchangeStrategies.Builder {\n\t// Builds the ExchangeStrategies.\n\tExchangeStrategies build();\n\t// Customize the list of client-side HTTP message readers and writers.\n\tExchangeStrategies.Builder codecs(Consumer<org.springframework.http.codec.ClientCodecConfigurer> consumer);\n}", "des": "A mutable builder for an ExchangeStrategies."}
{"index": 5458, "code": "public class FixedContentTypeResolver extends Object implements RequestedContentTypeResolver {\n\t// Return the configured list of media types.\n\tList<org.springframework.http.MediaType> getContentTypes();\n\t// Resolve the given request to a list of requested media types.\n\tList<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Resolver that always resolves to a fixed list of media types."}
{"index": 5459, "code": "public class FreeMarkerViewResolver extends UrlBasedViewResolver {\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Requires FreeMarkerView.\n\tprotected Class<?> requiredViewClass();\n}", "des": "A ViewResolver for resolving FreeMarkerView instances, i.e."}
{"index": 5460, "code": "public interface HandlerAdapter {\n\t// Handle the request with the given handler, previously checked via supports(Object).\n\treactor.core.publisher.Mono<HandlerResult> handle(org.springframework.web.server.ServerWebExchange exchange, Object handler);\n\t// Whether this HandlerAdapter supports the given handler.\n\tboolean supports(Object handler);\n}", "des": "Contract to abstract the details of invoking a handler of a given type."}
{"index": 5461, "code": "public class HandlerFunctionAdapter extends Object implements HandlerAdapter {\n\t// Handle the request with the given handler, previously checked via HandlerAdapter.supports(Object).\n\treactor.core.publisher.Mono<HandlerResult> handle(org.springframework.web.server.ServerWebExchange exchange, Object handler);\n\t// Whether this HandlerAdapter supports the given handler.\n\tboolean supports(Object handler);\n}", "des": "HandlerAdapter implementation that supports HandlerFunctions."}
{"index": 5462, "code": "public interface HandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Strategy to resolve the argument value for a method parameter in the context of the current HTTP request."}
{"index": 5463, "code": "public interface HandlerResultHandler {\n\t// Process the given result modifying response headers and/or writing data to the response.\n\treactor.core.publisher.Mono<Void> handleResult(org.springframework.web.server.ServerWebExchange exchange, HandlerResult result);\n\t// Whether this handler supports the given HandlerResult.\n\tboolean supports(HandlerResult result);\n}", "des": "Process the HandlerResult, usually returned by a HandlerAdapter."}
{"index": 5464, "code": "public class HttpEntityMethodArgumentResolver extends AbstractMessageReaderArgumentResolver {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method arguments of type HttpEntity or RequestEntity by reading the body of the request through a compatible HttpMessageReader."}
{"index": 5465, "code": "public class ModelMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter parameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter param);\n}", "des": "Resolver for a controller method argument of type Model that can also be resolved as a Map."}
{"index": 5466, "code": "public class ParameterContentTypeResolver extends Object implements RequestedContentTypeResolver {\n\tString getParameterName();\n\t// Resolve the given request to a list of requested media types.\n\tList<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.server.ServerWebExchange exchange);\n\t// Set the name of the parameter to use to determine requested media types.\n\tvoid setParameterName(String parameterName);\n}", "des": "Resolver that checks a query parameter and uses it to look up a matching MediaType."}
{"index": 5467, "code": "public class PrincipalMethodArgumentResolver extends HandlerMethodArgumentResolverSupport {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method argument value of type Principal."}
{"index": 5468, "code": "public static interface Rendering.RedirectBuilder extends Rendering.Builder<Rendering.RedirectBuilder> {\n\t// Whether to the provided redirect URL should be prepended with the application context path (if any).\n\tRendering.RedirectBuilder contextRelative(boolean contextRelative);\n\t// Whether to append the query string of the current URL to the target redirect URL or not.\n\tRendering.RedirectBuilder propagateQuery(boolean propagate);\n}", "des": "Extends Rendering.Builder with extra options for redirect scenarios."}
{"index": 5469, "code": "public class RenderingContext extends Object {\n\t// Return the application context.\n\torg.springframework.context.ApplicationContext getApplicationContext();\n\t// Return the locale of the rendered template.\n\tLocale getLocale();\n\t// Return a function that takes a template path as input and returns the template content as a String.\n\tFunction<String,String> getTemplateLoader();\n\t// Return the URL of the rendered template.\n\tString getUrl();\n}", "des": "Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side."}
{"index": 5470, "code": "public interface RenderingResponse extends ServerResponse {\n\t// Create a builder with the given template name.\n\tstatic RenderingResponse.Builder create(String name);\n\t// Create a builder with the template name, status code, headers and model of the given response.\n\tstatic RenderingResponse.Builder from(RenderingResponse other);\n\t// Return the unmodifiable model map.\n\tMap<String,Object> model();\n\t// Return the name of the template to be rendered.\n\tString name();\n}", "des": "Rendering-specific subtype of ServerResponse that exposes model and template data."}
{"index": 5471, "code": "public class RequestBodyMethodArgumentResolver extends AbstractMessageReaderArgumentResolver {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter param, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method arguments annotated with @RequestBody by reading the body of the request through a compatible HttpMessageReader."}
{"index": 5472, "code": "public class ResourceChainRegistration extends Object {\n\t// Add a resource resolver to the chain.\n\tResourceChainRegistration addResolver(ResourceResolver resolver);\n\t// Add a resource transformer to the chain.\n\tResourceChainRegistration addTransformer(ResourceTransformer transformer);\n\tprotected List<ResourceResolver> getResourceResolvers();\n\tprotected List<ResourceTransformer> getResourceTransformers();\n}", "des": "Assists with the registration of resource resolvers and transformers."}
{"index": 5473, "code": "public interface ResourceTransformerChain {\n\t// Return the ResourceResolverChain that was used to resolve the Resource being transformed.\n\tResourceResolverChain getResolverChain();\n\t// Transform the given resource.\n\treactor.core.publisher.Mono<org.springframework.core.io.Resource> transform(org.springframework.web.server.ServerWebExchange exchange, org.springframework.core.io.Resource resource);\n}", "des": "A contract for invoking a chain of ResourceTransformers where each resolver is given a reference to the chain allowing it to delegate when necessary."}
{"index": 5474, "code": "public class ResponseBodyResultHandler extends AbstractMessageWriterResultHandler implements HandlerResultHandler {\n\t// Process the given result modifying response headers and/or writing data to the response.\n\treactor.core.publisher.Mono<Void> handleResult(org.springframework.web.server.ServerWebExchange exchange, HandlerResult result);\n\t// Whether this handler supports the given HandlerResult.\n\tboolean supports(HandlerResult result);\n}", "des": "HandlerResultHandler that handles return values from methods annotated with @ResponseBody writing to the body of the request or response with an HttpMessageWriter."}
{"index": 5475, "code": "public class ResponseEntityResultHandler extends AbstractMessageWriterResultHandler implements HandlerResultHandler {\n\t// Process the given result modifying response headers and/or writing data to the response.\n\treactor.core.publisher.Mono<Void> handleResult(org.springframework.web.server.ServerWebExchange exchange, HandlerResult result);\n\t// Whether this handler supports the given HandlerResult.\n\tboolean supports(HandlerResult result);\n}", "des": "Handles return values of type HttpEntity, ResponseEntity, HttpHeaders, ErrorResponse, and ProblemDetail."}
{"index": 5476, "code": "public class ScriptTemplateViewResolver extends UrlBasedViewResolver {\n\t// Instantiate the specified view class.\n\tprotected AbstractUrlBasedView instantiateView();\n\t// Return the required type of view for this resolver.\n\tprotected Class<?> requiredViewClass();\n}", "des": "Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it."}
{"index": 5477, "code": "public static interface ServerResponse.Context {\n\t// Return the HttpMessageWriters to be used for response body conversion.\n\tList<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters();\n\t// Return the ViewResolvers to be used for view name resolution.\n\tList<ViewResolver> viewResolvers();\n}", "des": "Defines the context used during the ServerResponse.writeTo(ServerWebExchange, Context)."}
{"index": 5478, "code": "public class SessionStatusMethodArgumentResolver extends Object implements SyncHandlerMethodArgumentResolver {\n\t// Resolve the value for the method parameter synchronously.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolver for a SessionStatus argument obtaining it from the BindingContext."}
{"index": 5479, "code": "public class SimpleHandlerAdapter extends Object implements HandlerAdapter {\n\t// Handle the request with the given handler, previously checked via HandlerAdapter.supports(Object).\n\treactor.core.publisher.Mono<HandlerResult> handle(org.springframework.web.server.ServerWebExchange exchange, Object handler);\n\t// Whether this HandlerAdapter supports the given handler.\n\tboolean supports(Object handler);\n}", "des": "HandlerAdapter that allows using the plain WebHandler contract with the generic DispatcherHandler."}
{"index": 5480, "code": "public class TomcatWebSocketSession extends StandardWebSocketSession {\n\t// Whether the underlying WebSocket API has flow control and can suspend and resume the receiving of messages.\n\tprotected boolean canSuspendReceiving();\n\t// Resume receiving new message(s) after demand is generated by the downstream Subscriber.\n\tprotected void resumeReceiving();\n\t// Suspend receiving until received message(s) are processed and more demand is generated by the downstream Subscriber.\n\tprotected void suspendReceiving();\n}", "des": "Spring WebSocketSession adapter for Tomcat's Session."}
{"index": 5481, "code": "public interface VersionStrategy {\n\t// Add a version to the given request path.\n\tString addVersion(String requestPath, String version);\n\t// Extract the resource version from the request path.\n\tString extractVersion(String requestPath);\n\t// Determine the version for the given resource.\n\treactor.core.publisher.Mono<String> getResourceVersion(org.springframework.core.io.Resource resource);\n\t// Remove the version from the request path.\n\tString removeVersion(String requestPath, String version);\n}", "des": "A strategy to determine the version of a static resource and to apply and/or extract it from the URL path."}
{"index": 5482, "code": "public interface View {\n\t// Return the list of media types this View supports, or an empty list.\n\tdefault List<org.springframework.http.MediaType> getSupportedMediaTypes();\n\t// Whether this View does render by performing a redirect.\n\tdefault boolean isRedirectView();\n\t// Render the view based on the given HandlerResult.\n\treactor.core.publisher.Mono<Void> render(Map<String,?> model, org.springframework.http.MediaType contentType, org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Contract to render HandlerResult to the HTTP response."}
{"index": 5483, "code": "public class WebClientRequestException extends WebClientException {\n\t// Return the HTTP request headers.\n\torg.springframework.http.HttpHeaders getHeaders();\n\t// Return the HTTP request method.\n\torg.springframework.http.HttpMethod getMethod();\n\t// Return the request URI.\n\tURI getUri();\n}", "des": "Exceptions that contain actual HTTP request data."}
{"index": 5484, "code": "public class WebSessionMethodArgumentResolver extends HandlerMethodArgumentResolverSupport {\n\t// Resolve the value for the method parameter.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange);\n\t// Whether this resolver supports the given method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}", "des": "Resolves method argument value of type WebSession."}
{"index": 5485, "code": "public interface WebSocketClient {\n\t// A variant of execute(URI, WebSocketHandler) with custom headers.\n\treactor.core.publisher.Mono<Void> execute(URI url, org.springframework.http.HttpHeaders headers, WebSocketHandler handler);\n\t// Execute a handshake request to the given url and handle the resulting WebSocket session with the given handler.\n\treactor.core.publisher.Mono<Void> execute(URI url, WebSocketHandler handler);\n}", "des": "Contract for reactive-style handling of a WebSocket session."}
{"index": 5486, "code": "public interface WebSocketHandler {\n\t// Return the list of sub-protocols supported by this handler.\n\tdefault List<String> getSubProtocols();\n\t// Invoked when a new WebSocket connection is established, and allows handling of the session.\n\treactor.core.publisher.Mono<Void> handle(WebSocketSession session);\n}", "des": "Handler for a WebSocket session."}
{"index": 5487, "code": "public static enum WebSocketMessage.Type extends Enum<WebSocketMessage.Type> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic WebSocketMessage.Type valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic WebSocketMessage.Type[] values();\n}", "des": "WebSocket message types."}
{"index": 5488, "code": "public class AnnotationMethodResolver extends Object implements MethodResolver {\n\t// Find a single Method on the given Class that contains the annotation type for which this resolver is searching.\n\tMethod findMethod(Class<?> clazz);\n\t// Find a single Method on the Class of the given candidate object that contains the annotation type for which this resolver is searching.\n\tMethod findMethod(Object candidate);\n}", "des": "MethodResolver implementation that finds a single Method on the given Class that contains the specified annotation type."}
{"index": 5489, "code": "public interface BackOffPolicy {\n\t// Back off/pause in an implementation-specific fashion.\n\tvoid backOff(BackOffContext backOffContext);\n\t// Start a new block of back off operations.\n\tBackOffContext start(RetryContext context);\n}", "des": "Strategy interface to control back off between attempts in a single retry operation."}
{"index": 5490, "code": "public class BackToBackPatternClassifier<C,T> extends Object implements Classifier<C,T> {\n\t// Classify the input and map to a String, then take that and put it into a pattern matcher to match to an output value.\n\tT classify(C classifiable);\n\t// A convenience method for creating a pattern matching classifier for the matcher component.\n\tvoid setMatcherMap(Map<String,T> map);\n\t// A convenience method of creating a router classifier based on a plain old Java Object.\n\tvoid setRouterDelegate(Object delegate);\n}", "des": "A special purpose Classifier with easy configuration options for mapping from one arbitrary type of object to another via a pattern matcher."}
{"index": 5491, "code": "public class BinaryExceptionClassifierRetryPolicy extends Object implements RetryPolicy {\n\tboolean canRetry(RetryContext context);\n\tvoid close(RetryContext status);\n\tBinaryExceptionClassifier getExceptionClassifier();\n\t// Acquire resources needed for the retry operation.\n\tRetryContext open(RetryContext parent);\n\t// Called once per retry attempt, after the callback fails.\n\tvoid registerThrowable(RetryContext context, Throwable throwable);\n}", "des": "A policy, that is based on BinaryExceptionClassifier."}
{"index": 5492, "code": "public class ClassifierAdapter<C,T> extends Object implements Classifier<C,T> {\n\t// Classify the given object and return an object of a different type, possibly an enumerated type.\n\tT classify(C classifiable);\n\t// Search for the Classifier annotation on a method in the supplied delegate and use that to create a Classifier from the parameter type to the return type.\n\tfinal void setDelegate(Object delegate);\n\tvoid setDelegate(Classifier<C,T> delegate);\n}", "des": "Wrapper for an object to adapt it to the Classifier interface."}
{"index": 5493, "code": "public class ExpressionRetryPolicy extends SimpleRetryPolicy implements org.springframework.beans.factory.BeanFactoryAware {\n\t// Test for retryable operation based on the status.\n\tboolean canRetry(RetryContext context);\n\t// Check if the expression is a template\n\tstatic boolean isTemplate(String expression);\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tExpressionRetryPolicy withBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}", "des": "Subclass of SimpleRetryPolicy that delegates to super.canRetry() and, if true, further evaluates an expression against the last thrown exception."}
{"index": 5494, "code": "public interface MethodResolver {\n\t// Find a single Method on the given Class that matches this resolver's criteria.\n\tMethod findMethod(Class<?> clazz);\n\t// Find a single Method on the provided Object that matches this resolver's criteria.\n\tMethod findMethod(Object candidate);\n}", "des": "Strategy interface for detecting a single Method on a Class."}
{"index": 5495, "code": "public class NeverRetryPolicy extends Object implements RetryPolicy {\n\t// Returns false after the first exception.\n\tboolean canRetry(RetryContext context);\n\t// Do nothing.\n\tvoid close(RetryContext context);\n\t// Return a context that can respond to early termination requests, but does nothing else.\n\tRetryContext open(RetryContext parent);\n\t// Make the throwable available for downstream use through the context.\n\tvoid registerThrowable(RetryContext context, Throwable throwable);\n}", "des": "A RetryPolicy that allows the first attempt but never permits a retry."}
{"index": 5496, "code": "public class PatternMatchingClassifier<T> extends Object implements Classifier<String,T> {\n\t// Classify the input by matching it against the patterns provided in setPatternMap(Map).\n\tT classify(String classifiable);\n\t// A map from pattern to value\n\tvoid setPatternMap(Map<String,T> values);\n}", "des": "A Classifier that maps from String patterns with wildcards to a set of values of a given type."}
{"index": 5497, "code": "public interface RetryPolicy extends Serializable {\n\tboolean canRetry(RetryContext context);\n\tvoid close(RetryContext context);\n\t// Acquire resources needed for the retry operation.\n\tRetryContext open(RetryContext parent);\n\t// Called once per retry attempt, after the callback fails.\n\tvoid registerThrowable(RetryContext context, Throwable throwable);\n}", "des": "A RetryPolicy is responsible for allocating and managing resources needed by RetryOperations."}
{"index": 5498, "code": "public class RetrySimulator extends Object {\n\t// Execute the simulator for a give # of iterations.\n\tRetrySimulation executeSimulation(int numSimulations);\n\t// Execute a single simulation\n\tList<Long> executeSingleSimulation();\n}", "des": "A RetrySimulator is a tool for exercising retry + backoff operations."}
{"index": 5499, "code": "public interface RetryState {\n\t// Key representing the state for a retry attempt.\n\tObject getKey();\n\t// Indicate whether a cache lookup can be avoided.\n\tboolean isForceRefresh();\n\t// Check whether this exception requires a rollback.\n\tboolean rollbackFor(Throwable exception);\n}", "des": "Stateful retry is characterised by having to recognise the items that are being processed, so this interface is used primarily to provide a cache key in between failed attempts."}
{"index": 5500, "code": "public final class RetrySynchronizationManager extends Object {\n\t// Clear the current context at the end of a batch - should only be used by RetryOperations implementations.\n\tstatic RetryContext clear();\n\t// Public accessor for the locally enclosing RetryContext.\n\tstatic RetryContext getContext();\n\t// Method for registering a context - should only be used by RetryOperations implementations to ensure that getContext() always returns the correct value.\n\tstatic RetryContext register(RetryContext context);\n}", "des": "Global variable support for retry clients."}
{"index": 5501, "code": "public abstract class StatelessBackOffPolicy extends Object implements BackOffPolicy {\n\t// Delegates directly to the doBackOff() method without passing on the BackOffContext argument which is not needed for stateless implementations.\n\tfinal void backOff(BackOffContext backOffContext);\n\t// Sub-classes should implement this method to perform the actual back off.\n\tprotected abstract void doBackOff();\n\t// Returns 'null'.\n\tBackOffContext start(RetryContext status);\n}", "des": "Simple base class for BackOffPolicy implementations that maintain no state across invocations."}
{"index": 5502, "code": "@DisableCachingByDefault(because=\"Application should always run\") public abstract class BootRun extends JavaExec {\n\tvoid exec();\n\t// Returns the property for whether the JVM's launch should be optimized.\n\tabstract Property<Boolean> getOptimizedLaunch();\n\t// Adds the source directories of the given sourceSet's resources to the start of the classpath in place of the output's resources directory.\n\tvoid sourceResources(SourceSet sourceSet);\n}", "des": "Custom JavaExec task for running a Spring Boot application."}
{"index": 5503, "code": "public static class LayeredSpec.DependenciesIntoLayerSpec extends LayeredSpec.IntoLayerSpec {\n\t// Configures the layer to exclude project dependencies.\n\tvoid excludeProjectDependencies();\n\t// Configures the layer to include project dependencies.\n\tvoid includeProjectDependencies();\n}", "des": "Spec that controls the dependencies that should be part of a particular layer."}
{"index": 5504, "code": "public static class LayeredSpec.IntoLayerSpec extends Object implements Serializable {\n\t// Adds patterns that control the content that is excluded from the layer.\n\tvoid exclude(String... patterns);\n\t// Adds patterns that control the content that is included in the layer.\n\tvoid include(String... patterns);\n}", "des": "Spec that controls the content that should be part of a particular layer."}
{"index": 5505, "code": "@CacheableTask public class ProcessTestAot extends AbstractAot {\n\tvoid exec();\n\t// Returns the classpath roots that should be scanned for test classes to process.\n\tfinal FileCollection getClasspathRoots();\n\t// Sets the classpath roots that should be scanned for test classes to process.\n\tvoid setClasspathRoots(FileCollection classpathRoots);\n}", "des": "Custom JavaExec task for ahead-of-time processing of a Spring Boot application's tests."}
{"index": 5506, "code": "public class SpringBootExtension extends Object {\n\t// Creates a new BuildInfo task named bootBuildInfo and configures the Java plugin's classes task to depend upon it.\n\tvoid buildInfo();\n\t// Creates a new BuildInfo task named bootBuildInfo and configures the Java plugin's classes task to depend upon it.\n\tvoid buildInfo(Action<BuildInfo> configurer);\n\t// Returns the fully-qualified name of the application's main class.\n\tProperty<String> getMainClass();\n}", "des": "Entry point to Spring Boot's Gradle DSL."}
{"index": 5507, "code": "public enum ZipCompression extends Enum<ZipCompression> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ZipCompression valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ZipCompression[] values();\n}", "des": "An enumeration of supported compression options for an entry in a ZIP archive."}
{"index": 5508, "code": "public abstract class AbstractTransactionSupportingCacheManager extends org.springframework.cache.support.AbstractCacheManager {\n\tprotected org.springframework.cache.Cache decorateCache(org.springframework.cache.Cache cache);\n\t// Return whether this CacheManager has been configured to be transaction-aware.\n\tboolean isTransactionAware();\n\t// Set whether this CacheManager should expose transaction-aware Cache objects.\n\tvoid setTransactionAware(boolean transactionAware);\n}", "des": "Base class for CacheManager implementations that want to support built-in awareness of Spring-managed transactions."}
{"index": 5509, "code": "public class AdaptableJobFactory extends Object implements JobFactory {\n\t// Adapt the given job object to the Quartz Job interface.\n\tprotected Job adaptJob(Object jobObject);\n\t// Create an instance of the specified job class.\n\tprotected Object createJobInstance(TriggerFiredBundle bundle);\n\tJob newJob(TriggerFiredBundle bundle, Scheduler scheduler);\n}", "des": "JobFactory implementation that supports Runnable objects as well as standard Quartz Job instances."}
{"index": 5510, "code": "public class BeanFactoryJCacheOperationSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor {\n\torg.springframework.aop.Pointcut getPointcut();\n\t// Set the cache operation attribute source which is used to find cache attributes.\n\tvoid setCacheOperationSource(JCacheOperationSource cacheOperationSource);\n\t// Set the ClassFilter to use for this pointcut.\n\tvoid setClassFilter(org.springframework.aop.ClassFilter classFilter);\n}", "des": "Advisor driven by a JCacheOperationSource, used to include a cache advice bean for methods that are cacheable."}
{"index": 5511, "code": "public class DelegatingJob extends Object implements Job {\n\t// Delegates execution to the underlying Runnable.\n\tvoid execute(JobExecutionContext context);\n\t// Return the wrapped Runnable implementation.\n\tfinal Runnable getDelegate();\n}", "des": "Simple Quartz Job adapter that delegates to a given Runnable instance."}
{"index": 5512, "code": "public interface JCacheOperation<A extends Annotation> extends org.springframework.cache.interceptor.BasicOperation, javax.cache.annotation.CacheMethodDetails<A> {\n\t// Return the CacheInvocationParameter instances based on the specified method arguments.\n\tjavax.cache.annotation.CacheInvocationParameter[] getAllParameters(Object... values);\n\t// Return the CacheResolver instance to use to resolve the cache to use for this operation.\n\torg.springframework.cache.interceptor.CacheResolver getCacheResolver();\n}", "des": "Model the base of JSR-107 cache operation through an interface contract."}
{"index": 5513, "code": "public interface MailSender {\n\t// Send the given simple mail message.\n\tvoid send(SimpleMailMessage simpleMessage);\n\t// Send the given array of simple mail messages in batch.\n\tvoid send(SimpleMailMessage... simpleMessages);\n}", "des": "This interface defines a strategy for sending simple mails."}
{"index": 5514, "code": "public class MailSendException extends MailException {\n\t// Return a Map with the failed messages as keys, and the thrown exceptions as values.\n\tfinal Map<Object,Exception> getFailedMessages();\n\tString getMessage();\n\t// Return an array with thrown message exceptions.\n\tfinal Exception[] getMessageExceptions();\n\tvoid printStackTrace(PrintStream ps);\n\tvoid printStackTrace(PrintWriter pw);\n}", "des": "Exception thrown when a mail sending error is encountered."}
{"index": 5515, "code": "public static class MethodInvokingJobDetailFactoryBean.MethodInvokingJob extends QuartzJobBean {\n\t// Invoke the method via the MethodInvoker.\n\tprotected void executeInternal(JobExecutionContext context);\n\t// Set the MethodInvoker to use.\n\tvoid setMethodInvoker(org.springframework.util.MethodInvoker methodInvoker);\n}", "des": "Quartz Job implementation that invokes a specified method."}
{"index": 5516, "code": "public abstract class QuartzJobBean extends Object implements Job {\n\t// This implementation applies the passed-in job data map as bean property values, and delegates to executeInternal afterwards.\n\tfinal void execute(JobExecutionContext context);\n\t// Execute the actual job.\n\tprotected abstract void executeInternal(JobExecutionContext context);\n}", "des": "Simple implementation of the Quartz Job interface, applying the passed-in JobDataMap and also the SchedulerContext as bean property values."}
{"index": 5517, "code": "public final class MessageAuthorizationContext<T> extends Object {\n\t// Returns the HttpServletRequest.\n\torg.springframework.messaging.Message<T> getMessage();\n\t// Returns the extracted variable values where the key is the variable name and the value is the variable value.\n\tMap<String,String> getVariables();\n}", "des": "An Message authorization context."}
{"index": 5518, "code": "public class AccessDeniedHandlerImpl extends Object implements AccessDeniedHandler {\n\t// Handles an access denied failure.\n\tvoid handle(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.access.AccessDeniedException accessDeniedException);\n\t// The error page to use.\n\tvoid setErrorPage(String errorPage);\n}", "des": "Base implementation of AccessDeniedHandler."}
{"index": 5519, "code": "public final class AndRequestMatcher extends Object implements RequestMatcher {\n\t// Returns a RequestMatcher.MatchResult for this HttpServletRequest.\n\tRequestMatcher.MatchResult matcher(jakarta.servlet.http.HttpServletRequest request);\n\t// Decides whether the rule implemented by the strategy matches the supplied request.\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "RequestMatcher that will return true if all of the passed in RequestMatcher instances match."}
{"index": 5520, "code": "public interface ChannelDecisionManager {\n\t// Decided whether the presented FilterInvocation provides the appropriate level of channel security based on the requested list of ConfigAttributes.\n\tvoid decide(FilterInvocation invocation, Collection<org.springframework.security.access.ConfigAttribute> config);\n\t// Indicates whether this ChannelDecisionManager is able to process the passed ConfigAttribute.\n\tboolean supports(org.springframework.security.access.ConfigAttribute attribute);\n}", "des": "Decides whether a web channel provides sufficient security."}
{"index": 5521, "code": "public interface ChannelProcessor {\n\t// Decided whether the presented FilterInvocation provides the appropriate level of channel security based on the requested list of ConfigAttributes.\n\tvoid decide(FilterInvocation invocation, Collection<org.springframework.security.access.ConfigAttribute> config);\n\t// Indicates whether this ChannelProcessor is able to process the passed ConfigAttribute.\n\tboolean supports(org.springframework.security.access.ConfigAttribute attribute);\n}", "des": "Decides whether a web channel meets a specific security condition."}
{"index": 5522, "code": "public static enum ClearSiteDataHeaderWriter.Directive extends Enum<ClearSiteDataHeaderWriter.Directive> {\n\tString getHeaderValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClearSiteDataHeaderWriter.Directive valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClearSiteDataHeaderWriter.Directive[] values();\n}", "des": "Represents the directive values expected by the ClearSiteDataHeaderWriter."}
{"index": 5523, "code": "public static enum ClearSiteDataServerHttpHeadersWriter.Directive extends Enum<ClearSiteDataServerHttpHeadersWriter.Directive> {\n\tString getHeaderValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClearSiteDataServerHttpHeadersWriter.Directive valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClearSiteDataServerHttpHeadersWriter.Directive[] values();\n}", "des": "Represents the directive values expected by the ClearSiteDataServerHttpHeadersWriter"}
{"index": 5524, "code": "public final class CrossOriginEmbedderPolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the CrossOriginEmbedderPolicyHeaderWriter.CrossOriginEmbedderPolicy value to be used in the Cross-Origin-Embedder-Policy header\n\tvoid setPolicy(CrossOriginEmbedderPolicyHeaderWriter.CrossOriginEmbedderPolicy embedderPolicy);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Inserts Cross-Origin-Embedder-Policy header."}
{"index": 5525, "code": "public final class CrossOriginOpenerPolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the CrossOriginOpenerPolicyHeaderWriter.CrossOriginOpenerPolicy value to be used in the Cross-Origin-Opener-Policy header\n\tvoid setPolicy(CrossOriginOpenerPolicyHeaderWriter.CrossOriginOpenerPolicy openerPolicy);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Inserts the Cross-Origin-Opener-Policy header"}
{"index": 5526, "code": "public final class CrossOriginResourcePolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the CrossOriginResourcePolicyHeaderWriter.CrossOriginResourcePolicy value to be used in the Cross-Origin-Resource-Policy header\n\tvoid setPolicy(CrossOriginResourcePolicyHeaderWriter.CrossOriginResourcePolicy resourcePolicy);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Inserts Cross-Origin-Resource-Policy header"}
{"index": 5527, "code": "public interface CsrfToken extends Serializable {\n\t// Gets the HTTP header that the CSRF is populated on the response and can be placed on requests instead of the parameter.\n\tString getHeaderName();\n\t// Gets the HTTP parameter name that should contain the token.\n\tString getParameterName();\n\t// Gets the token value.\n\tString getToken();\n}", "des": "Provides the information about an expected CSRF token."}
{"index": 5528, "code": "public class CsrfTokenRequestAttributeHandler extends Object implements CsrfTokenRequestHandler {\n\t// Handles a request using a CsrfToken.\n\tvoid handle(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, Supplier<CsrfToken> deferredCsrfToken);\n\t// The CsrfToken is available as a request attribute named CsrfToken.class.getName().\n\tfinal void setCsrfRequestAttributeName(String csrfRequestAttributeName);\n}", "des": "An implementation of the CsrfTokenRequestHandler interface that is capable of making the CsrfToken available as a request attribute and resolving the token value as either a header or parameter value of the request."}
{"index": 5529, "code": "@FunctionalInterface public interface CsrfTokenRequestHandler extends CsrfTokenRequestResolver {\n\t// Handles a request using a CsrfToken.\n\tvoid handle(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, Supplier<CsrfToken> csrfToken);\n\t// Returns the token value resolved from the provided HttpServletRequest and CsrfToken or null if not available.\n\tdefault String resolveCsrfTokenValue(jakarta.servlet.http.HttpServletRequest request, CsrfToken csrfToken);\n}", "des": "A callback interface that is used to make the CsrfToken created by the CsrfTokenRepository available as a request attribute."}
{"index": 5530, "code": "public final class DefaultCsrfToken extends Object implements CsrfToken {\n\t// Gets the HTTP header that the CSRF is populated on the response and can be placed on requests instead of the parameter.\n\tString getHeaderName();\n\t// Gets the HTTP parameter name that should contain the token.\n\tString getParameterName();\n\t// Gets the token value.\n\tString getToken();\n}", "des": "A CSRF token that is used to protect against CSRF attacks."}
{"index": 5531, "code": "public final class DefaultCsrfToken extends Object implements CsrfToken {\n\tboolean equals(Object obj);\n\t// Gets the HTTP header that the CSRF is populated on the response and can be placed on requests instead of the parameter.\n\tString getHeaderName();\n\t// Gets the HTTP parameter name that should contain the token.\n\tString getParameterName();\n\t// Gets the token value.\n\tString getToken();\n}", "des": "A CSRF token that is used to protect against CSRF attacks."}
{"index": 5532, "code": "public class DefaultServerRedirectStrategy extends Object implements ServerRedirectStrategy {\n\t// Performs a redirect based upon the provided ServerWebExchange and URI\n\treactor.core.publisher.Mono<Void> sendRedirect(org.springframework.web.server.ServerWebExchange exchange, URI location);\n\t// Sets if the location is relative to the context.\n\tvoid setContextRelative(boolean contextRelative);\n\t// The HttpStatus to use for the redirect.\n\tvoid setHttpStatus(org.springframework.http.HttpStatus httpStatus);\n}", "des": "The default ServerRedirectStrategy to use."}
{"index": 5533, "code": "public interface DeferredCsrfToken {\n\t// Gets the CsrfToken\n\tCsrfToken get();\n\t// Returns true if get() refers to a generated CsrfToken or false if it already existed.\n\tboolean isGenerated();\n}", "des": "An interface that allows delayed access to a CsrfToken that may be generated."}
{"index": 5534, "code": "public class DelegatingServerAuthenticationEntryPoint extends Object implements ServerAuthenticationEntryPoint {\n\t// Initiates the authentication flow\n\treactor.core.publisher.Mono<Void> commence(org.springframework.web.server.ServerWebExchange exchange, org.springframework.security.core.AuthenticationException ex);\n\t// EntryPoint which is used when no RequestMatcher returned true\n\tvoid setDefaultEntryPoint(ServerAuthenticationEntryPoint defaultEntryPoint);\n}", "des": "A ServerAuthenticationEntryPoint which delegates to multiple ServerAuthenticationEntryPoint based on a ServerWebExchangeMatcher"}
{"index": 5535, "code": "public class ELRequestMatcher extends Object implements RequestMatcher {\n\t// Subclasses can override this methode if they want to use a different EL root context\n\torg.springframework.expression.EvaluationContext createELContext(jakarta.servlet.http.HttpServletRequest request);\n\t// Decides whether the rule implemented by the strategy matches the supplied request.\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "A RequestMatcher implementation which uses a SpEL expression"}
{"index": 5536, "code": "public class Enumerator<T> extends Object implements Enumeration<T> {\n\t// Tests if this enumeration contains more elements.\n\tboolean hasMoreElements();\n\t// Returns the next element of this enumeration if this enumeration has at least one more element to provide.\n\tT nextElement();\n}", "des": "Adapter that wraps an Enumeration around a Java 2 collection Iterator."}
{"index": 5537, "code": "public final class FastHttpDateFormat extends Object {\n\t// Formats a specified date to HTTP format.\n\tstatic String formatDate(long value, DateFormat threadLocalformat);\n\t// Gets the current date in HTTP format.\n\tstatic String getCurrentDate();\n\t// Tries to parse the given date as an HTTP date.\n\tstatic long parseDate(String value, DateFormat[] threadLocalformats);\n}", "des": "Utility class to generate HTTP dates."}
{"index": 5538, "code": "public final class FeaturePolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Set the security policy directive(s) to be used in the response header.\n\tvoid setPolicyDirectives(String policyDirectives);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Provides support for Feature Policy."}
{"index": 5539, "code": "public final class FeaturePolicyServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Set the policy directive(s) to be used in the response header.\n\tvoid setPolicyDirectives(String policyDirectives);\n\t// Write the headers to the response.\n\treactor.core.publisher.Mono<Void> writeHttpHeaders(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Writes the Feature-Policy response header with configured policy directives."}
{"index": 5540, "code": "public static interface FilterChainProxy.FilterChainDecorator {\n\t// Provide a new FilterChain that accounts for needed security considerations when there are no security filters.\n\tdefault jakarta.servlet.FilterChain decorate(jakarta.servlet.FilterChain original);\n\t// Provide a new FilterChain that accounts for the provided filters as well as teh original filter chain.\n\tjakarta.servlet.FilterChain decorate(jakarta.servlet.FilterChain original, List<jakarta.servlet.Filter> filters);\n}", "des": "A strategy for decorating the provided filter chain with one that accounts for the SecurityFilterChain for a given request."}
{"index": 5541, "code": "public class FilterInvocation extends Object {\n\tjakarta.servlet.FilterChain getChain();\n\t// Indicates the URL that the user agent used for this request.\n\tString getFullRequestUrl();\n\tjakarta.servlet.http.HttpServletRequest getHttpRequest();\n\tjakarta.servlet.http.HttpServletResponse getHttpResponse();\n\tjakarta.servlet.http.HttpServletRequest getRequest();\n\t// Obtains the web application-specific fragment of the URL.\n\tString getRequestUrl();\n\tjakarta.servlet.http.HttpServletResponse getResponse();\n}", "des": "Holds objects associated with a HTTP filter."}
{"index": 5542, "code": "public final class Header extends Object {\n\tboolean equals(Object obj);\n\t// Gets the name of the header.\n\tString getName();\n\t// Gets the values of the header.\n\tList<String> getValues();\n}", "des": "Represents a Header to be added to the HttpServletResponse"}
{"index": 5543, "code": "public class HttpBasicServerAuthenticationEntryPoint extends Object implements ServerAuthenticationEntryPoint {\n\t// Initiates the authentication flow\n\treactor.core.publisher.Mono<Void> commence(org.springframework.web.server.ServerWebExchange exchange, org.springframework.security.core.AuthenticationException ex);\n\t// Sets the realm to be used\n\tvoid setRealm(String realm);\n}", "des": "Prompts a user for HTTP Basic authentication."}
{"index": 5544, "code": "public interface HttpFirewall {\n\t// Provides the request object which will be passed through the filter chain.\n\tFirewalledRequest getFirewalledRequest(jakarta.servlet.http.HttpServletRequest request);\n\t// Provides the response which will be passed through the filter chain.\n\tjakarta.servlet.http.HttpServletResponse getFirewalledResponse(jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Interface which can be used to reject potentially dangerous requests and/or wrap them to control their behaviour."}
{"index": 5545, "code": "public class J2eePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter {\n\t// For J2EE container-based authentication there is no generic way to retrieve the credentials, as such this method returns a fixed dummy value.\n\tprotected Object getPreAuthenticatedCredentials(jakarta.servlet.http.HttpServletRequest httpRequest);\n\t// Return the J2EE user name.\n\tprotected Object getPreAuthenticatedPrincipal(jakarta.servlet.http.HttpServletRequest httpRequest);\n}", "des": "This AbstractPreAuthenticatedProcessingFilter implementation is based on the J2EE container-based authentication mechanism."}
{"index": 5546, "code": "public class MatcherSecurityWebFilterChain extends Object implements SecurityWebFilterChain {\n\t// The WebFilter to use\n\treactor.core.publisher.Flux<org.springframework.web.server.WebFilter> getWebFilters();\n\t// Determines if this SecurityWebFilterChain matches the provided ServerWebExchange\n\treactor.core.publisher.Mono<Boolean> matches(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "A SecurityWebFilterChain that leverages a ServerWebExchangeMatcher to determine which WebFilter to execute."}
{"index": 5547, "code": "public static final class MvcRequestMatcher.Builder extends Object {\n\t// Creates an MvcRequestMatcher that uses the provided pattern to match\n\tMvcRequestMatcher pattern(String pattern);\n\t// Creates an MvcRequestMatcher that uses the provided pattern and HTTP method to match\n\tMvcRequestMatcher pattern(org.springframework.http.HttpMethod method, String pattern);\n\t// Sets the servlet path to be used by the MvcRequestMatcher generated by this builder\n\tMvcRequestMatcher.Builder servletPath(String servletPath);\n}", "des": "A builder for MvcRequestMatcher"}
{"index": 5548, "code": "public final class OrRequestMatcher extends Object implements RequestMatcher {\n\t// Returns a RequestMatcher.MatchResult for this HttpServletRequest.\n\tRequestMatcher.MatchResult matcher(jakarta.servlet.http.HttpServletRequest request);\n\t// Decides whether the rule implemented by the strategy matches the supplied request.\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "RequestMatcher that will return true if any of the passed in RequestMatcher instances match."}
{"index": 5549, "code": "public final class PermissionsPolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the policy to be used in the response header.\n\tvoid setPolicy(String policy);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Provides support for Permisisons Policy."}
{"index": 5550, "code": "public final class PermissionsPolicyServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Set the policy to be used in the response header.\n\tvoid setPolicy(String policy);\n\t// Write the headers to the response.\n\treactor.core.publisher.Mono<Void> writeHttpHeaders(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Writes the Permissions-Policy response header with configured policy directives."}
{"index": 5551, "code": "public interface PortMapper {\n\t// Locates the HTTP port associated with the specified HTTPS port.\n\tInteger lookupHttpPort(Integer httpsPort);\n\t// Locates the HTTPS port associated with the specified HTTP port.\n\tInteger lookupHttpsPort(Integer httpPort);\n}", "des": "PortMapper implementations provide callers with information about which HTTP ports are associated with which HTTPS ports on the system, and vice versa."}
{"index": 5552, "code": "public class PreAuthenticatedAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Get the credentials\n\tObject getCredentials();\n\t// Get the principal\n\tObject getPrincipal();\n}", "des": "Authentication implementation for pre-authenticated authentication."}
{"index": 5553, "code": "public class RedirectServerAuthenticationFailureHandler extends Object implements ServerAuthenticationFailureHandler {\n\t// Invoked when authentication attempt fails\n\treactor.core.publisher.Mono<Void> onAuthenticationFailure(WebFilterExchange webFilterExchange, org.springframework.security.core.AuthenticationException exception);\n\t// Sets the RedirectStrategy to use.\n\tvoid setRedirectStrategy(ServerRedirectStrategy redirectStrategy);\n}", "des": "Performs a redirect to a specified location."}
{"index": 5554, "code": "public class RedirectServerLogoutSuccessHandler extends Object implements ServerLogoutSuccessHandler {\n\t// Invoked after log out was successful\n\treactor.core.publisher.Mono<Void> onLogoutSuccess(WebFilterExchange exchange, org.springframework.security.core.Authentication authentication);\n\t// The URL to redirect to after successfully logging out.\n\tvoid setLogoutSuccessUrl(URI logoutSuccessUrl);\n}", "des": "Performs a redirect on log out success."}
{"index": 5555, "code": "public class ReferrerPolicyHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the policy to be used in the response header.\n\tvoid setPolicy(ReferrerPolicyHeaderWriter.ReferrerPolicy policy);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Provides support for Referrer Policy."}
{"index": 5556, "code": "public final class ReferrerPolicyServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Set the policy to be used in the response header.\n\tvoid setPolicy(ReferrerPolicyServerHttpHeadersWriter.ReferrerPolicy policy);\n\t// Write the headers to the response.\n\treactor.core.publisher.Mono<Void> writeHttpHeaders(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Writes the Referrer-Policy response header."}
{"index": 5557, "code": "public final class RequestAuthorizationContext extends Object {\n\t// Returns the HttpServletRequest.\n\tjakarta.servlet.http.HttpServletRequest getRequest();\n\t// Returns the extracted variable values where the key is the variable name and the value is the variable value.\n\tMap<String,String> getVariables();\n}", "des": "An HttpServletRequest authorization context."}
{"index": 5558, "code": "public interface RequestMatcher {\n\t// Returns a MatchResult for this RequestMatcher The default implementation returns Collections.emptyMap() when RequestMatcher.MatchResult.getVariables() is invoked.\n\tdefault RequestMatcher.MatchResult matcher(jakarta.servlet.http.HttpServletRequest request);\n\t// Decides whether the rule implemented by the strategy matches the supplied request.\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request);\n}", "des": "Simple strategy to match an HttpServletRequest."}
{"index": 5559, "code": "public static final class RequestMatcherDelegatingAuthenticationManagerResolver.Builder extends Object {\n\t// Maps a RequestMatcher to an AuthorizationManager.\n\tRequestMatcherDelegatingAuthenticationManagerResolver.Builder add(RequestMatcher matcher, org.springframework.security.authentication.AuthenticationManager manager);\n\t// Creates a RequestMatcherDelegatingAuthenticationManagerResolver instance.\n\tRequestMatcherDelegatingAuthenticationManagerResolver build();\n}", "des": "A builder for RequestMatcherDelegatingAuthenticationManagerResolver."}
{"index": 5560, "code": "public class SavedCookie extends Object implements Serializable {\n\t// Deprecated, for removal: This API element is subject to removal in a future version.\n\tString getComment();\n\tjakarta.servlet.http.Cookie getCookie();\n\tString getDomain();\n\tint getMaxAge();\n\tString getName();\n\tString getPath();\n\tString getValue();\n\t// Deprecated, for removal: This API element is subject to removal in a future version.\n\tint getVersion();\n\tboolean isSecure();\n}", "des": "Stores off the values of a cookie in a serializable holder"}
{"index": 5561, "code": "public class SecurityContextServerLogoutHandler extends Object implements ServerLogoutHandler {\n\t// Invoked when log out is requested\n\treactor.core.publisher.Mono<Void> logout(WebFilterExchange exchange, org.springframework.security.core.Authentication authentication);\n\t// Sets the ServerSecurityContextRepository that should be used for logging out.\n\tvoid setSecurityContextRepository(ServerSecurityContextRepository securityContextRepository);\n}", "des": "A ServerLogoutHandler which removes the SecurityContext using the provided ServerSecurityContextRepository"}
{"index": 5562, "code": "public interface SecurityWebFilterChain {\n\t// The WebFilter to use\n\treactor.core.publisher.Flux<org.springframework.web.server.WebFilter> getWebFilters();\n\t// Determines if this SecurityWebFilterChain matches the provided ServerWebExchange\n\treactor.core.publisher.Mono<Boolean> matches(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Defines a filter chain which is capable of being matched against a ServerWebExchange in order to decide whether it applies to that request."}
{"index": 5563, "code": "public class ServerAuthenticationEntryPointFailureHandler extends Object implements ServerAuthenticationFailureHandler {\n\t// Invoked when authentication attempt fails\n\treactor.core.publisher.Mono<Void> onAuthenticationFailure(WebFilterExchange webFilterExchange, org.springframework.security.core.AuthenticationException exception);\n\t// Set whether to rethrow AuthenticationServiceExceptions (defaults to true)\n\tvoid setRethrowAuthenticationServiceException(boolean rethrowAuthenticationServiceException);\n}", "des": "Adapts a ServerAuthenticationEntryPoint into a ServerAuthenticationFailureHandler"}
{"index": 5564, "code": "public interface ServerSecurityContextRepository {\n\t// Loads the SecurityContext associated with the ServerWebExchange\n\treactor.core.publisher.Mono<org.springframework.security.core.context.SecurityContext> load(org.springframework.web.server.ServerWebExchange exchange);\n\t// Saves the SecurityContext\n\treactor.core.publisher.Mono<Void> save(org.springframework.web.server.ServerWebExchange exchange, org.springframework.security.core.context.SecurityContext context);\n}", "des": "Strategy used for persisting a SecurityContext between requests."}
{"index": 5565, "code": "public class SessionFixationProtectionEvent extends org.springframework.security.authentication.event.AbstractAuthenticationEvent {\n\t// Getter for the session ID after it was changed.\n\tString getNewSessionId();\n\t// Getter for the session ID before it was changed.\n\tString getOldSessionId();\n}", "des": "Indicates a session ID was changed for the purposes of session fixation protection."}
{"index": 5566, "code": "public class SessionFixationProtectionStrategy extends AbstractSessionFixationProtectionStrategy {\n\t// Called to extract the existing attributes from the session, prior to invalidating it.\n\tprotected Map<String,Object> extractAttributes(jakarta.servlet.http.HttpSession session);\n\t// Defines whether attributes should be migrated to a new session or not.\n\tvoid setMigrateSessionAttributes(boolean migrateSessionAttributes);\n}", "des": "Uses HttpServletRequest.invalidate() to protect against session fixation attacks."}
{"index": 5567, "code": "public class SubjectDnX509PrincipalExtractor extends Object implements X509PrincipalExtractor, org.springframework.context.MessageSourceAware {\n\t// Returns the principal (usually a String) for the given certificate.\n\tObject extractPrincipal(X509Certificate clientCert);\n\tvoid setMessageSource(org.springframework.context.MessageSource messageSource);\n\t// Sets the regular expression which will by used to extract the user name from the certificate's Subject DN.\n\tvoid setSubjectDnRegex(String subjectDnRegex);\n}", "des": "Obtains the principal from a certificate using a regular expression match against the Subject (as returned by a call to X509Certificate.getSubjectDN())."}
{"index": 5568, "code": "public class WebAuthenticationDetails extends Object implements Serializable {\n\tboolean equals(Object o);\n\t// Indicates the TCP/IP address the authentication request was received from.\n\tString getRemoteAddress();\n\t// Indicates the HttpSession id the authentication request was received from.\n\tString getSessionId();\n}", "des": "A holder of selected HTTP details related to a web authentication request."}
{"index": 5569, "code": "public class WebFilterExchange extends Object {\n\t// The filter chain\n\torg.springframework.web.server.WebFilterChain getChain();\n\t// Get the exchange\n\torg.springframework.web.server.ServerWebExchange getExchange();\n}", "des": "A composite of the ServerWebExchange and the WebFilterChain."}
{"index": 5570, "code": "public class WebSpherePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter {\n\t// For J2EE container-based authentication there is no generic way to retrieve the credentials, as such this method returns a fixed dummy value.\n\tprotected Object getPreAuthenticatedCredentials(jakarta.servlet.http.HttpServletRequest httpRequest);\n\t// Return the WebSphere user name.\n\tprotected Object getPreAuthenticatedPrincipal(jakarta.servlet.http.HttpServletRequest httpRequest);\n}", "des": "This AbstractPreAuthenticatedProcessingFilter implementation is based on WebSphere authentication."}
{"index": 5571, "code": "public static enum XFrameOptionsHeaderWriter.XFrameOptionsMode extends Enum<XFrameOptionsHeaderWriter.XFrameOptionsMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic XFrameOptionsHeaderWriter.XFrameOptionsMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic XFrameOptionsHeaderWriter.XFrameOptionsMode[] values();\n}", "des": "The possible values for the X-Frame-Options header."}
{"index": 5572, "code": "public class XFrameOptionsServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Sets the X-Frame-Options mode.\n\tvoid setMode(XFrameOptionsServerHttpHeadersWriter.Mode mode);\n\t// Write the headers to the response.\n\treactor.core.publisher.Mono<Void> writeHttpHeaders(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "ServerHttpHeadersWriter implementation for the X-Frame-Options headers."}
{"index": 5573, "code": "public static enum XFrameOptionsServerHttpHeadersWriter.Mode extends Enum<XFrameOptionsServerHttpHeadersWriter.Mode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic XFrameOptionsServerHttpHeadersWriter.Mode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic XFrameOptionsServerHttpHeadersWriter.Mode[] values();\n}", "des": "The X-Frame-Options values."}
{"index": 5574, "code": "public final class XXssProtectionHeaderWriter extends Object implements HeaderWriter {\n\t// Sets the value of the X-XSS-PROTECTION header.\n\tvoid setHeaderValue(XXssProtectionHeaderWriter.HeaderValue headerValue);\n\t// Create a Header instance.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n}", "des": "Renders the X-XSS-Protection header."}
{"index": 5575, "code": "public static enum XXssProtectionHeaderWriter.HeaderValue extends Enum<XXssProtectionHeaderWriter.HeaderValue> {\n\tstatic XXssProtectionHeaderWriter.HeaderValue from(String headerValue);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic XXssProtectionHeaderWriter.HeaderValue valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic XXssProtectionHeaderWriter.HeaderValue[] values();\n}", "des": "The value of the x-xss-protection header."}
{"index": 5576, "code": "public class XXssProtectionServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\t// Sets the value of the X-XSS-PROTECTION header.\n\tvoid setHeaderValue(XXssProtectionServerHttpHeadersWriter.HeaderValue headerValue);\n\t// Write the headers to the response.\n\treactor.core.publisher.Mono<Void> writeHttpHeaders(org.springframework.web.server.ServerWebExchange exchange);\n}", "des": "Add the x-xss-protection header."}
{"index": 5577, "code": "public static enum XXssProtectionServerHttpHeadersWriter.HeaderValue extends Enum<XXssProtectionServerHttpHeadersWriter.HeaderValue> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic XXssProtectionServerHttpHeadersWriter.HeaderValue valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic XXssProtectionServerHttpHeadersWriter.HeaderValue[] values();\n}", "des": "The value of the x-xss-protection header."}
{"index": 5578, "code": "public abstract class AbstractBindingTargetFactory<T> extends Object implements BindingTargetFactory {\n\t// Checks whether a specific binding target type can be created by this factory.\n\tfinal boolean canCreate(Class<?> clazz);\n\t// Create an input binding target that will be bound via a corresponding Binder.\n\tabstract T createInput(String name);\n\t// Create an output binding target that will be bound via a corresponding Binder.\n\tabstract T createOutput(String name);\n}", "des": "A BindingTargetFactory implementation that restricts the type of binding target to a specified class and its supertypes."}
{"index": 5579, "code": "public static enum BindingsLifecycleController.State extends Enum<BindingsLifecycleController.State> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic BindingsLifecycleController.State valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic BindingsLifecycleController.State[] values();\n}", "des": "Binding states."}
{"index": 5580, "code": "public interface BindingTargetFactory {\n\t// Checks whether a specific binding target type can be created by this factory.\n\tboolean canCreate(Class<?> clazz);\n\t// Create an input binding target that will be bound via a corresponding Binder.\n\tObject createInput(String name);\n\t// Create an output binding target that will be bound via a corresponding Binder.\n\tObject createOutput(String name);\n}", "des": "Defines methods to create/configure the binding targets defined by org.springframework.cloud.stream.annotation.EnableBinding."}
{"index": 5581, "code": "public final class DynamicDestinationsBindable extends Object implements Bindable {\n\tvoid addOutputBinding(String name, Binding<?> binding);\n\t// Enumerates all the output binding names.\n\tSet<String> getOutputs();\n\t// Unbinds all the outputs associated with this instance.\n\tvoid unbindOutputs(BindingService adapter);\n}", "des": "A Bindable that stores the dynamic destination names and handles their unbinding."}
{"index": 5582, "code": "public final class GenericsUtils extends Object {\n\t// Return the generic type of PollableSource to determine if it is appropriate for the binder.\n\tstatic boolean checkCompatiblePollableBinder(Binder binderInstance, Class<?> bindingTargetType);\n\t// For a specific class that implements or extends a parameterized type, return the parameter of that interface at a given position.\n\tstatic Class<?> getParameterType(Class<?> evaluatedClass, Class<?> interfaceClass, int position);\n}", "des": "Internal utilities for handling generics."}
{"index": 5583, "code": "public interface MessageChannelConfigurer {\n\t// Configure the given input message channel.\n\tvoid configureInputChannel(org.springframework.messaging.MessageChannel messageChannel, String channelName);\n\t// Configure the given output message channel.\n\tvoid configureOutputChannel(org.springframework.messaging.MessageChannel messageChannel, String channelName);\n}", "des": "Interface to be implemented by the classes that configure the Bindable message channels."}
{"index": 5584, "code": "public class MessageSourceBindingTargetFactory extends AbstractBindingTargetFactory<PollableMessageSource> {\n\t// Create an input binding target that will be bound via a corresponding Binder.\n\tPollableMessageSource createInput(String name);\n\t// Create an output binding target that will be bound via a corresponding Binder.\n\tPollableMessageSource createOutput(String name);\n}", "des": "An implementation of BindingTargetFactory for creating DefaultPollableMessageSources."}
{"index": 5585, "code": "public class PartitionHandler extends Object {\n\t// Determine the partition to which to send this message.\n\tint determinePartition(org.springframework.messaging.Message<?> message);\n\t// Set the actual partition count (if different to the configured count).\n\tvoid setPartitionCount(int partitionCount);\n}", "des": "Utility class to determine if a binding is configured for partitioning (based on the binder properties provided in the constructor) and what partition a message should be delivered to."}
{"index": 5586, "code": "@FunctionalInterface public interface PollableSource<H> {\n\t// Poll the consumer.\n\tboolean poll(H handler);\n\t// Poll the consumer and convert the payload to the type.\n\tdefault boolean poll(H handler, org.springframework.core.ParameterizedTypeReference<?> type);\n}", "des": "A mechanism to poll a consumer."}
{"index": 5587, "code": "public interface ProducerDestination {\n\t// Provides the destination name.\n\tString getName();\n\t// Provides the destination name for a given partition.\n\tString getNameForPartition(int partition);\n}", "des": "Represents a ProducerDestination that provides the information about the destination that is physically provisioned through ProvisioningProvider.provisionProducerDestination(String, ProducerProperties)."}
{"index": 5588, "code": "public interface ProvisioningProvider<C extends ConsumerProperties,P extends ProducerProperties> {\n\t// Creates the middleware destination on the physical broker for the consumer to consume data.\n\tConsumerDestination provisionConsumerDestination(String name, String group, C properties);\n\t// Creates middleware destination on the physical broker for the producer to send data.\n\tProducerDestination provisionProducerDestination(String name, P properties);\n}", "des": "Provisioning SPI that allows the users to provision destinations such as queues and topics."}
{"index": 5589, "code": "public class SubscribableChannelBindingTargetFactory extends AbstractBindingTargetFactory<org.springframework.messaging.SubscribableChannel> {\n\t// Create an input binding target that will be bound via a corresponding Binder.\n\torg.springframework.messaging.SubscribableChannel createInput(String name);\n\t// Create an output binding target that will be bound via a corresponding Binder.\n\torg.springframework.messaging.SubscribableChannel createOutput(String name);\n}", "des": "An implementation of BindingTargetFactory for creating SubscribableChannels."}
{"index": 5590, "code": "public enum SerfStatusEnum extends Enum<SerfStatusEnum> {\n\tint getCode();\n\t// Returns the enum constant of this type with the specified name.\n\tstatic SerfStatusEnum valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic SerfStatusEnum[] values();\n}", "des": "Gossip pool (serf) statuses."}
{"index": 5591, "code": "public abstract class AbstractEntityInformation<T,ID> extends Object implements EntityInformation<T,ID> {\n\t// Returns the actual domain class type.\n\tClass<T> getJavaType();\n\t// Returns whether the given entity is considered to be new.\n\tboolean isNew(T entity);\n}", "des": "Base class for implementations of EntityInformation."}
{"index": 5592, "code": "public class AccessOptions extends Object {\n\t// Returns the default AccessOptions.GetOptions rejecting intermediate null values when accessing property paths.\n\tstatic AccessOptions.GetOptions defaultGetOptions();\n\t// Returns the default AccessOptions.SetOptions rejecting setting values when finding an intermediate property value to be null.\n\tstatic AccessOptions.SetOptions defaultSetOptions();\n}", "des": "Access options when using PersistentPropertyPathAccessor to get and set properties."}
{"index": 5593, "code": "public static enum AccessOptions.GetOptions.GetNulls extends Enum<AccessOptions.GetOptions.GetNulls> {\n\tAccessOptions.SetOptions.SetNulls toNullHandling();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AccessOptions.GetOptions.GetNulls valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AccessOptions.GetOptions.GetNulls[] values();\n}", "des": "How to handle null values during a PersistentPropertyPath traversal."}
{"index": 5594, "code": "public static enum AccessOptions.SetOptions.Propagation extends Enum<AccessOptions.SetOptions.Propagation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AccessOptions.SetOptions.Propagation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AccessOptions.SetOptions.Propagation[] values();\n}", "des": "How to propagate setting values that cross collection and map properties."}
{"index": 5595, "code": "public static enum AccessOptions.SetOptions.SetNulls extends Enum<AccessOptions.SetOptions.SetNulls> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AccessOptions.SetOptions.SetNulls valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AccessOptions.SetOptions.SetNulls[] values();\n}", "des": "How to handle intermediate null values when setting"}
{"index": 5596, "code": "public final class Accessor extends Object {\n\t// Returns the name of the property this accessor handles.\n\tString getPropertyName();\n\t// Returns whether the accessor is a getter.\n\tboolean isGetter();\n\t// Returns whether the accessor is a setter.\n\tboolean isSetter();\n}", "des": "Helper value to abstract an accessor."}
{"index": 5597, "code": "public class AnnotationAuditingConfiguration extends Object implements AuditingConfiguration {\n\t// Returns the bean name of the AuditorAware instance to be used..\n\tString getAuditorAwareRef();\n\t// Returns the bean name of the DateTimeProvider to be used.\n\tString getDateTimeProviderRef();\n\t// Returns whether the entity shall be marked as modified on creation.\n\tboolean isModifyOnCreate();\n\t// Returns whether the creation and modification dates shall be set.\n\tboolean isSetDates();\n}", "des": "Default implementation for AuditingConfiguration."}
{"index": 5598, "code": "public class AnnotationDetectionMethodCallback<A extends Annotation> extends Object implements ReflectionUtils.MethodCallback {\n\tvoid doWith(Method method);\n\tA getAnnotation();\n\tMethod getMethod();\n\t// Returns the method with the configured annotation.\n\tMethod getRequiredMethod();\n\t// Returns whether an annotation was found.\n\tboolean hasFoundAnnotation();\n\t// Invokes the method using reflection.\n\t<T> T invoke(Object target, Object... args);\n}", "des": "ReflectionUtils.MethodCallback to find annotations of a given type."}
{"index": 5599, "code": "public class AnnotationRepositoryMetadata extends AbstractRepositoryMetadata {\n\t// Returns the TypeInformationof the domain type the repository is declared to manage.\n\tTypeInformation<?> getDomainTypeInformation();\n\tSet<RepositoryFragment<?>> getFragments();\n\t// Returns the TypeInformation of the id type of the repository.\n\tTypeInformation<?> getIdTypeInformation();\n}", "des": "RepositoryMetadata implementation inspecting the given repository interface for a RepositoryDefinition annotation."}
{"index": 5600, "code": "public interface AuditingConfiguration {\n\t// Returns the bean name of the AuditorAware instance to be used..\n\tString getAuditorAwareRef();\n\t// Returns the bean name of the DateTimeProvider to be used.\n\tString getDateTimeProviderRef();\n\t// Returns whether the entity shall be marked as modified on creation.\n\tboolean isModifyOnCreate();\n\t// Returns whether the creation and modification dates shall be set.\n\tboolean isSetDates();\n}", "des": "Configuration information for auditing."}
{"index": 5601, "code": "public enum BootstrapMode extends Enum<BootstrapMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BootstrapMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BootstrapMode[] values();\n}", "des": "Enumeration to define in which way repositories are bootstrapped."}
{"index": 5602, "code": "public class Box extends Object implements Shape {\n\tboolean equals(Object obj);\n\t// Returns the first Point making up the Box.\n\tPoint getFirst();\n\t// Returns the second Point making up the Box.\n\tPoint getSecond();\n}", "des": "Represents a geospatial box value"}
{"index": 5603, "code": "public class CamelCaseSplittingFieldNamingStrategy extends Object implements FieldNamingStrategy {\n\t// Returns the field name to be used for the given PersistentProperty.\n\tString getFieldName(PersistentProperty<?> property);\n\t// Callback to prepare the uncapitalized part obtained from the split up of the camel case source.\n\tprotected String preparePart(String part);\n}", "des": "Configurable FieldNamingStrategy that splits up camel-case property names and reconcatenates them using a configured delimiter."}
{"index": 5604, "code": "public interface ChangeSetPersister<K> {\n\t// Return id\n\tK getPersistentId(ChangeSetBacked entity, ChangeSet cs);\n\t// TODO how to tell when not found?\n\tvoid getPersistentState(Class<? extends ChangeSetBacked> entityClass, K key, ChangeSet changeSet);\n\t// Return key\n\tK persistState(ChangeSetBacked entity, ChangeSet cs);\n}", "des": "Interface to be implemented by classes that can synchronize between data stores and ChangeSets."}
{"index": 5605, "code": "public class Circle extends Object implements Shape {\n\tboolean equals(Object o);\n\t// Returns the center of the Circle.\n\tPoint getCenter();\n\t// Returns the radius of the Circle.\n\tDistance getRadius();\n}", "des": "Represents a geospatial circle value"}
{"index": 5606, "code": "public class ClassGeneratingPropertyAccessorFactory extends Object implements PersistentPropertyAccessorFactory {\n\t// Returns a PersistentPropertyAccessor for a given PersistentEntity and bean.\n\t<T> PersistentPropertyAccessor<T> getPropertyAccessor(PersistentEntity<?,?> entity, T bean);\n\t// Checks whether an accessor class can be generated.\n\tboolean isSupported(PersistentEntity<?,?> entity);\n}", "des": "A factory that can generate byte code to speed-up dynamic property access."}
{"index": 5607, "code": "public interface CloseableIterator<T> extends Iterator<T>, Closeable {\n\tvoid close();\n\t// Create a Spliterator over the elements provided by this Iterator.\n\tdefault Spliterator<T> spliterator();\n\t// Return a sequential Stream with this Iterator as its source.\n\tdefault Stream<T> stream();\n}", "des": "A CloseableIterator serves as a bridging data structure for the underlying data store specific results that can be wrapped in a Java 8 java.util.stream.Stream."}
{"index": 5608, "code": "public class ConfigurableTypeInformationMapper extends Object implements TypeInformationMapper {\n\t// Returns the alias to be used for the given TypeInformation.\n\tAlias createAliasFor(TypeInformation<?> type);\n\t// Returns the actual TypeInformation to be used for the given alias.\n\tTypeInformation<?> resolveTypeFrom(Alias alias);\n}", "des": "TypeInformationMapper implementation that can be either set up using a MappingContext or manually set up Map of String aliases to types."}
{"index": 5609, "code": "public enum CurrentDateTimeProvider extends Enum<CurrentDateTimeProvider> implements DateTimeProvider {\n\t// Returns the current time to be used as modification or creation date.\n\tOptional<TemporalAccessor> getNow();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CurrentDateTimeProvider valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CurrentDateTimeProvider[] values();\n}", "des": "Default DateTimeProvider simply creating new LocalDateTime instances for each method call."}
{"index": 5610, "code": "public class CustomMetric extends Object implements Metric {\n\t// Returns the scientific abbreviation of the unit the Metric is in.\n\tString getAbbreviation();\n\t// Returns the multiplier to calculate metrics values from a base scale.\n\tdouble getMultiplier();\n}", "des": "Value object to create custom Metrics on the fly."}
{"index": 5611, "code": "public class DefaultRepositoryMetadata extends AbstractRepositoryMetadata {\n\t// Returns the TypeInformationof the domain type the repository is declared to manage.\n\tTypeInformation<?> getDomainTypeInformation();\n\tSet<RepositoryFragment<?>> getFragments();\n\t// Returns the TypeInformation of the id type of the repository.\n\tTypeInformation<?> getIdTypeInformation();\n}", "des": "Default implementation of RepositoryMetadata."}
{"index": 5612, "code": "public class DelegatingEntityInformation<T,ID> extends Object implements EntityInformation<T,ID> {\n\t// Returns the id of the given entity or null if none can be obtained.\n\tID getId(T entity);\n\t// Returns the type of the id of the entity.\n\tClass<ID> getIdType();\n\t// Returns the actual domain class type.\n\tClass<T> getJavaType();\n\t// Returns whether the given entity is considered to be new.\n\tboolean isNew(T entity);\n}", "des": "Useful base class to implement custom EntityInformations and delegate execution of standard methods from EntityInformation to a special implementation."}
{"index": 5613, "code": "public enum DistanceFormatter extends Enum<DistanceFormatter> implements Converter<String,Distance>, Formatter<Distance> {\n\tfinal Distance convert(String source);\n\tDistance parse(String text, Locale locale);\n\tString print(Distance distance, Locale locale);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DistanceFormatter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DistanceFormatter[] values();\n}", "des": "Converter to create Distance instances from String representations."}
{"index": 5614, "code": "public interface EntityConverter<E extends PersistentEntity<?,P>,P extends PersistentProperty<P>,T,S> extends EntityReader<T,S>, EntityWriter<T,S> {\n\t// Returns the underlying ConversionService used by the converter.\n\tConversionService getConversionService();\n\t// Returns the underlying MappingContext used by the converter.\n\tMappingContext<? extends E,P> getMappingContext();\n}", "des": "Combined EntityReader and EntityWriter and add the ability to access a MappingContext and ConversionService."}
{"index": 5615, "code": "public interface EntityInformation<T,ID> extends EntityMetadata<T> {\n\t// Returns the id of the given entity or null if none can be obtained.\n\tID getId(T entity);\n\t// Returns the type of the id of the entity.\n\tClass<ID> getIdType();\n\t// Returns the identifier of the given entity.\n\tdefault ID getRequiredId(T entity);\n\t// Returns whether the given entity is considered to be new.\n\tboolean isNew(T entity);\n}", "des": "Extension of EntityMetadata to add functionality to query information of entity instances."}
{"index": 5616, "code": "public interface EvaluationContextExtension extends ExtensionIdAware {\n\t// Return the functions exposed by the extension.\n\tdefault Map<String,Function> getFunctions();\n\t// Return the properties exposed by the extension.\n\tdefault Map<String,Object> getProperties();\n\t// Return the root object to be exposed by the extension.\n\tdefault Object getRootObject();\n}", "des": "SPI to allow adding a set of properties and function definitions accessible via the root of an EvaluationContext provided by an ExtensionAwareQueryMethodEvaluationContextProvider."}
{"index": 5617, "code": "@FunctionalInterface public interface EvaluationContextProvider {\n\t// Return a EvaluationContext built using the given parameter values.\n\tEvaluationContext getEvaluationContext(Object rootObject);\n\t// Return a tailored EvaluationContext built using the given parameter values and considering expression dependencies.\n\tdefault EvaluationContext getEvaluationContext(Object rootObject, ExpressionDependencies dependencies);\n}", "des": "Provides a way to access a centrally defined potentially shared StandardEvaluationContext."}
{"index": 5618, "code": "public interface Example<T> {\n\t// Get the ExampleMatcher used.\n\tExampleMatcher getMatcher();\n\t// Get the example used.\n\tT getProbe();\n\t// Get the actual type for the probe used.\n\tdefault Class<T> getProbeType();\n\t// Create a new Example including all non-null properties by default.\n\tstatic <T> Example<T> of(T probe);\n\t// Create a new Example using the given ExampleMatcher.\n\tstatic <T> Example<T> of(T probe, ExampleMatcher matcher);\n}", "des": "Support for query by example (QBE)."}
{"index": 5619, "code": "public static enum ExampleMatcher.MatchMode extends Enum<ExampleMatcher.MatchMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ExampleMatcher.MatchMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ExampleMatcher.MatchMode[] values();\n}", "des": "The match modes to expose so that clients can find about how to concatenate the predicates."}
{"index": 5620, "code": "public static enum ExampleMatcher.NullHandler extends Enum<ExampleMatcher.NullHandler> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ExampleMatcher.NullHandler valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ExampleMatcher.NullHandler[] values();\n}", "des": "Null handling for creating criterion out of an Example."}
{"index": 5621, "code": "public static enum ExampleMatcher.StringMatcher extends Enum<ExampleMatcher.StringMatcher> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ExampleMatcher.StringMatcher valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ExampleMatcher.StringMatcher[] values();\n}", "des": "Match modes for treatment of String values."}
{"index": 5622, "code": "public class ExtensionAwareEvaluationContextProvider extends Object implements EvaluationContextProvider {\n\t// Return a EvaluationContext built using the given parameter values.\n\tStandardEvaluationContext getEvaluationContext(Object rootObject);\n\t// Return a tailored EvaluationContext built using the given parameter values and considering expression dependencies.\n\tStandardEvaluationContext getEvaluationContext(Object rootObject, ExpressionDependencies dependencies);\n}", "des": "An EvaluationContextProvider that assembles an EvaluationContext from a list of EvaluationContextExtension instances."}
{"index": 5623, "code": "public final class FactoryMethod<T,P extends PersistentProperty<P>> extends Object {\n\t// Returns the underlying Constructor.\n\tMethod getFactoryMethod();\n\t// Returns the Parameters of the executable.\n\tList<Parameter<Object,P>> getParameters();\n\t// Returns whether the given PersistentProperty is referenced in a creator argument of the PersistentEntity backing this InstanceCreatorMetadataSupport.\n\tboolean isCreatorParameter(PersistentProperty<?> property);\n}", "des": "Value object to encapsulate the factory method to be used when mapping persistent data to objects."}
{"index": 5624, "code": "public class GeoResults<T> extends Object implements Iterable<GeoResult<T>>, Serializable {\n\tboolean equals(Object o);\n\t// Returns the average distance of all GeoResults in this list.\n\tDistance getAverageDistance();\n\t// Returns the actual content of the GeoResults.\n\tList<GeoResult<T>> getContent();\n\tIterator<GeoResult<T>> iterator();\n}", "des": "Value object to capture GeoResults as well as the average distance they have."}
{"index": 5625, "code": "public interface IdentifierAccessor {\n\t// Returns the value of the identifier.\n\tObject getIdentifier();\n\t// Returns the identifier of the underlying instance.\n\tdefault Object getRequiredIdentifier();\n}", "des": "Interface for a component allowing the access of identifier values."}
{"index": 5626, "code": "public class InstantiationAwarePropertyAccessor<T> extends Object implements PersistentPropertyAccessor<T> {\n\t// Returns the underlying bean.\n\tT getBean();\n\t// Returns the value of the given PersistentProperty of the underlying bean instance.\n\tObject getProperty(PersistentProperty<?> property);\n\t// Sets the given PersistentProperty to the given value.\n\tvoid setProperty(PersistentProperty<?> property, Object value);\n}", "des": "A PersistentPropertyAccessor that will use an entity's PersistenceCreator to create a new instance of it to apply a new value for a given PersistentProperty."}
{"index": 5627, "code": "public class InstantiationAwarePropertyAccessorFactory extends Object implements PersistentPropertyAccessorFactory {\n\t// Returns a PersistentPropertyAccessor for a given PersistentEntity and bean.\n\t<T> PersistentPropertyAccessor<T> getPropertyAccessor(PersistentEntity<?,?> entity, T bean);\n\t// Returns whether given PersistentEntity is supported by this PersistentPropertyAccessorFactory.\n\tboolean isSupported(PersistentEntity<?,?> entity);\n}", "des": "Delegating PersistentPropertyAccessorFactory decorating the PersistentPropertyAccessors created with an InstantiationAwarePropertyAccessor to allow the handling of purely immutable types."}
{"index": 5628, "code": "public class InvalidPersistentPropertyPath extends MappingException {\n\t// Returns the part of the source path until which the source property path could be resolved.\n\tString getResolvedPath();\n\t// Returns the source property path.\n\tString getSource();\n\t// Returns the type the source property path was attempted to be resolved on.\n\tTypeInformation<?> getType();\n\t// Returns the segment of the source property path that could not be resolved.\n\tString getUnresolvableSegment();\n}", "des": "Exception to indicate a source path couldn't be resolved into a PersistentPropertyPath completely."}
{"index": 5629, "code": "public class IsNewAwareAuditingHandler extends AuditingHandler {\n\t// Factory method that creates a new IsNewAwareAuditingHandler for the given MappingContext.\n\tstatic IsNewAwareAuditingHandler from(MappingContext<?,?> mappingContext);\n\t// Marks the given object created or modified based on PersistentEntity.isNew(Object).\n\tObject markAudited(Object object);\n}", "des": "AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic IsNewAwareAuditingHandler.markAudited(Object) method that will route calls to AuditingHandler.markCreated(Object) or AuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory."}
{"index": 5630, "code": "public class Jackson2ResourceReader extends Object implements ResourceReader {\n\t// Reads a single or Collection of target objects from the given Resource.\n\tObject readFrom(Resource resource, ClassLoader classLoader);\n\t// Configures the JSON document's key to lookup the type to instantiate the object.\n\tvoid setTypeKey(String typeKey);\n}", "des": "A ResourceReader using Jackson to read JSON into objects."}
{"index": 5631, "code": "public class JsonProjectingMethodInterceptorFactory extends Object implements MethodInterceptorFactory {\n\t// Returns the MethodInterceptor to be used for the given source object and target type.\n\tMethodInterceptor createMethodInterceptor(Object source, Class<?> targetType);\n\t// Returns whether the current factory is supposed to be used to create a MethodInterceptor for proxy of the given target type.\n\tboolean supports(Object source, Class<?> targetType);\n}", "des": "MethodInterceptorFactory to create a MethodInterceptor that will"}
{"index": 5632, "code": "@NoRepositoryBean public interface ListCrudRepository<T,ID> extends CrudRepository<T,ID> {\n\t// Returns all instances of the type.\n\tList<T> findAll();\n\t// Returns all instances of the type T with the given IDs.\n\tList<T> findAllById(Iterable<ID> ids);\n\t// Saves all given entities.\n\t<S extends T>List<S> saveAll(Iterable<S> entities);\n}", "des": "Interface for generic CRUD operations on a repository for a specific type."}
{"index": 5633, "code": "public interface ListQueryByExampleExecutor<T> extends QueryByExampleExecutor<T> {\n\t// Returns all entities matching the given Example.\n\t<S extends T>List<S> findAll(Example<S> example);\n\t// Returns all entities matching the given Example applying the given Sort.\n\t<S extends T>List<S> findAll(Example<S> example, Sort sort);\n}", "des": "Interface to allow execution of Query by Example Example instances."}
{"index": 5634, "code": "public class MappingContextEvent<E extends PersistentEntity<?,P>,P extends PersistentProperty<P>> extends ApplicationEvent {\n\t// Returns the PersistentEntity the event was created for.\n\tE getPersistentEntity();\n\t// Returns whether the MappingContextEvent was triggered by the given MappingContext.\n\tboolean wasEmittedBy(MappingContext<?,?> context);\n}", "des": "Base implementation of an ApplicationEvent refering to a PersistentEntity."}
{"index": 5635, "code": "public class MappingContextTypeInformationMapper extends Object implements TypeInformationMapper {\n\t// Returns the alias to be used for the given TypeInformation.\n\tAlias createAliasFor(TypeInformation<?> type);\n\t// Returns the actual TypeInformation to be used for the given alias.\n\tTypeInformation<?> resolveTypeFrom(Alias alias);\n}", "des": "TypeInformationMapper implementation that can be either set up using a MappingContext or manually set up Map of String aliases to types."}
{"index": 5636, "code": "public class MappingInstantiationException extends RuntimeException {\n\t// Deprecated. since 3.0, use getEntityCreator() instead.\n\tOptional<Constructor<?>> getConstructor();\n\t// The constructor arguments used to invoke the constructor.\n\tList<Object> getConstructorArguments();\n\t// The entity creator used during the instantiation attempt.\n\tOptional<InstanceCreatorMetadata<?>> getEntityCreator();\n\t// Returns the type of the entity that was attempted to instantiate.\n\tOptional<Class<?>> getEntityType();\n}", "des": "Exception being thrown in case an entity could not be instantiated in the process of a to-object-mapping."}
{"index": 5637, "code": "public interface MethodInterceptorFactory {\n\t// Returns the MethodInterceptor to be used for the given source object and target type.\n\tMethodInterceptor createMethodInterceptor(Object source, Class<?> targetType);\n\t// Returns whether the current factory is supposed to be used to create a MethodInterceptor for proxy of the given target type.\n\tboolean supports(Object source, Class<?> targetType);\n}", "des": "SPI to create MethodInterceptor instances based on the given source object and the target type to produce."}
{"index": 5638, "code": "@FunctionalInterface public interface MethodLookup {\n\t// Returns a composed MethodLookup that represents a concatenation of this predicate and another.\n\tdefault MethodLookup and(MethodLookup other);\n\t// Return an ordered List of MethodLookup.MethodPredicate.\n\tList<MethodLookup.MethodPredicate> getLookups();\n}", "des": "Strategy interface providing predicates to resolve a method called on a composite to its implementation method."}
{"index": 5639, "code": "public interface Metric extends Serializable {\n\t// Returns the scientific abbreviation of the unit the Metric is in.\n\tString getAbbreviation();\n\t// Returns the multiplier to calculate metrics values from a base scale.\n\tdouble getMultiplier();\n}", "des": "Interface for Metrics that can be applied to a base scale."}
{"index": 5640, "code": "public enum Metrics extends Enum<Metrics> implements Metric {\n\t// Returns the scientific abbreviation of the unit the Metric is in.\n\tString getAbbreviation();\n\t// Returns the multiplier to calculate metrics values from a base scale.\n\tdouble getMultiplier();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Metrics valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Metrics[] values();\n}", "des": "Commonly used Metrics."}
{"index": 5641, "code": "public interface NamedQueries {\n\t// Returns the named query with the given name.\n\tString getQuery(String queryName);\n\t// Returns whether the map contains a named query for the given name.\n\tboolean hasQuery(String queryName);\n}", "des": "Abstraction of a map of NamedQueries that can be looked up by their names."}
{"index": 5642, "code": "public class NamedQueriesBeanDefinitionBuilder extends Object {\n\t// Builds a new BeanDefinition from the given source.\n\tBeanDefinition build(Object source);\n\t// Sets the (comma-separated) locations to load the properties files from to back the NamedQueries instance.\n\tvoid setLocations(String locations);\n}", "des": "Builder to create a BeanDefinition for a NamedQueries instance using properties."}
{"index": 5643, "code": "public class NullableWrapper extends Object {\n\t// Returns the backing value.\n\tObject getValue();\n\t// Returns the type of the contained value.\n\tClass<?> getValueType();\n}", "des": "Simple value object to wrap a nullable delegate."}
{"index": 5644, "code": "public final class OffsetScrollPosition extends Object implements ScrollPosition {\n\t// Returns a new OffsetScrollPosition that has been advanced by the given value.\n\tOffsetScrollPosition advanceBy(long delta);\n\tboolean equals(Object o);\n\t// The zero or positive offset.\n\tlong getOffset();\n\t// Returns whether the current scroll position is the initial one.\n\tboolean isInitial();\n\t// Returns the position function to calculate.\n\tstatic IntFunction<OffsetScrollPosition> positionFunction(long startOffset);\n}", "des": "A ScrollPosition based on the offsets within query results."}
{"index": 5645, "code": "public interface Page<T> extends Slice<T> {\n\t// Creates a new empty Page.\n\tstatic <T> Page<T> empty();\n\t// Creates a new empty Page for the given Pageable.\n\tstatic <T> Page<T> empty(Pageable pageable);\n\t// Returns the total amount of elements.\n\tlong getTotalElements();\n\t// Returns the number of total pages.\n\tint getTotalPages();\n\t// Returns a new Page with the content of the current one mapped by the given Function.\n\t<U> Page<U> map(Function<? super T,? extends U> converter);\n}", "des": "A page is a sublist of a list of objects."}
{"index": 5646, "code": "@NoRepositoryBean public interface PagingAndSortingRepository<T,ID> extends Repository<T,ID> {\n\t// Returns a Page of entities meeting the paging restriction provided in the Pageable object.\n\tPage<T> findAll(Pageable pageable);\n\t// Returns all entities sorted by the given options.\n\tIterable<T> findAll(Sort sort);\n}", "des": "Repository fragment to provide methods to retrieve entities using the pagination and sorting abstraction."}
{"index": 5647, "code": "public final class Pair<S,T> extends Object {\n\tboolean equals(Object o);\n\t// Returns the first element of the Pair.\n\tS getFirst();\n\t// Returns the second element of the Pair.\n\tT getSecond();\n\t// Creates a new Pair for the given elements.\n\tstatic <S, T> Pair<S,T> of(S first, T second);\n\t// A collector to create a Map from a Stream of Pairs.\n\tstatic <S, T> Collector<Pair<S,T>,?,Map<S,T>> toMap();\n}", "des": "A tuple of things."}
{"index": 5648, "code": "public abstract class ParsingUtils extends Object {\n\t// Reconcatenates the given camel-case source String using the given delimiter.\n\tstatic String reconcatenateCamelCase(String source, String delimiter);\n\t// Splits up the given camel-case String.\n\tstatic List<String> splitCamelCase(String source);\n\t// Splits up the given camel-case String and returns the parts in lower case.\n\tstatic List<String> splitCamelCaseToLower(String source);\n}", "des": "Utility methods for String parsing."}
{"index": 5649, "code": "public class Part extends Object {\n\tboolean equals(Object o);\n\t// Returns how many method parameters are bound by this part.\n\tint getNumberOfArguments();\n\tPropertyPath getProperty();\n\tPart.Type getType();\n\t// Returns whether the PropertyPath referenced should be matched ignoring case.\n\tPart.IgnoreCaseType shouldIgnoreCase();\n}", "des": "A single part of a method name that has to be transformed into a query part."}
{"index": 5650, "code": "public static enum Part.IgnoreCaseType extends Enum<Part.IgnoreCaseType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Part.IgnoreCaseType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Part.IgnoreCaseType[] values();\n}", "des": "The various types of ignore case that are supported."}
{"index": 5651, "code": "public interface Persistable<ID> {\n\t// Returns the id of the entity.\n\tID getId();\n\t// Returns if the Persistable is new or was persisted already.\n\tboolean isNew();\n}", "des": "Simple interface for entities."}
{"index": 5652, "code": "public enum PersistableIsNewStrategy extends Enum<PersistableIsNewStrategy> implements IsNewStrategy {\n\t// Returns whether the given entity is new, i.e. has never been persisted before or not.\n\tboolean isNew(Object entity);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PersistableIsNewStrategy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PersistableIsNewStrategy[] values();\n}", "des": "IsNewStrategy that invokes Persistable.isNew() on the given object."}
{"index": 5653, "code": "public class PersistentEntityInformation<T,ID> extends Object implements EntityInformation<T,ID> {\n\t// Returns the id of the given entity or null if none can be obtained.\n\tID getId(T entity);\n\t// Returns the type of the id of the entity.\n\tClass<ID> getIdType();\n\t// Returns the actual domain class type.\n\tClass<T> getJavaType();\n\t// Returns whether the given entity is considered to be new.\n\tboolean isNew(T entity);\n}", "des": "EntityInformation implementation that uses a PersistentEntity to obtain id type information and uses a IdentifierAccessor to access the property value if requested."}
{"index": 5654, "code": "public interface PersistentPropertyAccessor<T> {\n\t// Returns the underlying bean.\n\tT getBean();\n\t// Returns the value of the given PersistentProperty of the underlying bean instance.\n\tObject getProperty(PersistentProperty<?> property);\n\t// Sets the given PersistentProperty to the given value.\n\tvoid setProperty(PersistentProperty<?> property, Object value);\n}", "des": "Domain service to allow accessing and setting PersistentPropertys of an entity."}
{"index": 5655, "code": "public interface PersistentPropertyAccessorFactory {\n\t// Returns a PersistentPropertyAccessor for a given PersistentEntity and bean.\n\t<T> PersistentPropertyAccessor<T> getPropertyAccessor(PersistentEntity<?,?> entity, T bean);\n\t// Returns whether given PersistentEntity is supported by this PersistentPropertyAccessorFactory.\n\tboolean isSupported(PersistentEntity<?,?> entity);\n}", "des": "Factory to create PersistentPropertyAccessor for a given PersistentEntity and bean instance."}
{"index": 5656, "code": "public class Point extends Object implements Serializable {\n\tboolean equals(Object obj);\n\t// Returns the x-coordinate of the Point.\n\tdouble getX();\n\t// Returns the y-coordinate of the Point.\n\tdouble getY();\n}", "des": "Represents a geospatial point value."}
{"index": 5657, "code": "public enum PointFormatter extends Enum<PointFormatter> implements Converter<String,Point>, Formatter<Point> {\n\tPoint convert(String source);\n\tPoint parse(String text, Locale locale);\n\tString print(Point point, Locale locale);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PointFormatter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PointFormatter[] values();\n}", "des": "Converter to parse two comma-separated doubles into a Point."}
{"index": 5658, "code": "public interface Predicates {\n\t// Whether to not consider a Constructor.\n\tstatic boolean isExcluded(Constructor<?> candidate);\n\t// A Predicate that yields always false.\n\tstatic <T> Predicate<T> isFalse();\n\t// Whether to consider a Constructor.\n\tstatic boolean isIncluded(Constructor<?> candidate);\n\t// A Predicate that yields always true.\n\tstatic <T> Predicate<T> isTrue();\n\t// Returns a Predicate that represents the logical negation of predicate.\n\tstatic <T> Predicate<T> negate(Predicate<T> predicate);\n}", "des": "Utility methods to work with Predicates."}
{"index": 5659, "code": "public interface PreferredConstructorDiscoverer {\n\t// Discovers the PreferredConstructor for the given type.\n\tstatic <T, P extends PersistentProperty<P>>PreferredConstructor<T,P> discover(Class<T> type);\n\t// Discovers the PreferredConstructorDiscoverer for the given PersistentEntity.\n\tstatic <T, P extends PersistentProperty<P>>PreferredConstructor<T,P> discover(PersistentEntity<T,P> entity);\n}", "des": "Helper class to find a PreferredConstructor."}
{"index": 5660, "code": "public static enum PreferredConstructorDiscoverer.Discoverers extends Enum<PreferredConstructorDiscoverer.Discoverers> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PreferredConstructorDiscoverer.Discoverers valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PreferredConstructorDiscoverer.Discoverers[] values();\n}", "des": "Helper class to find a PreferredConstructor."}
{"index": 5661, "code": "public interface ProjectionInformation {\n\t// Returns the properties that will be consumed by the projection type.\n\tList<PropertyDescriptor> getInputProperties();\n\t// Returns the projection type.\n\tClass<?> getType();\n\t// Returns whether supplying values for the properties returned via getInputProperties() is sufficient to create a working proxy instance.\n\tboolean isClosed();\n}", "des": "Information about a projection type."}
{"index": 5662, "code": "public class PropertiesBasedNamedQueries extends Object implements NamedQueries {\n\t// Returns the named query with the given name.\n\tString getQuery(String queryName);\n\t// Returns whether the map contains a named query for the given name.\n\tboolean hasQuery(String queryName);\n}", "des": "NamedQueries implementation backed by a Properties instance."}
{"index": 5663, "code": "public abstract class ProxyUtils extends Object {\n\t// Returns the user class for the given type.\n\tstatic Class<?> getUserClass(Class<?> type);\n\t// Returns the user class for the given source object.\n\tstatic Class<?> getUserClass(Object source);\n}", "des": "Proxy type detection utilities, extensible via ProxyUtils.ProxyDetector registered via Spring factories."}
{"index": 5664, "code": "public class QuerydslPredicateBuilder extends Object {\n\t// Creates a Querydsl Predicate for the given values, QuerydslBindings on the given TypeInformation.\n\tcom.querydsl.core.types.Predicate getPredicate(TypeInformation<?> type, MultiValueMap<String,?> values, QuerydslBindings bindings);\n\t// Returns whether the given Predicate represents an empty predicate instance.\n\tstatic boolean isEmpty(com.querydsl.core.types.Predicate predicate);\n}", "des": "Builder assembling Predicate out of PropertyValues."}
{"index": 5665, "code": "public interface QueryMethodEvaluationContextProvider {\n\t// Returns an EvaluationContext built using the given Parameters and parameter values.\n\t<T extends Parameters<?, ?>>EvaluationContext getEvaluationContext(T parameters, Object[] parameterValues);\n\t// Returns an EvaluationContext built using the given Parameters and parameter values.\n\t<T extends Parameters<?, ?>>EvaluationContext getEvaluationContext(T parameters, Object[] parameterValues, ExpressionDependencies dependencies);\n}", "des": "Provides a way to access a centrally defined potentially shared EvaluationContext."}
{"index": 5666, "code": "public class QueryMethodParameterConversionException extends RuntimeException {\n\t// Returns the MethodParameter we tried to convert the source value for.\n\tMethodParameter getParameter();\n\t// Returns the source value that we failed converting.\n\tObject getSource();\n}", "des": "Exception to represent a failed attempt to convert a source value into a query method parameter."}
{"index": 5667, "code": "public class ReactiveIsNewAwareAuditingHandler extends ReactiveAuditingHandler {\n\t// Factory method that creates a new ReactiveIsNewAwareAuditingHandler for the given MappingContext.\n\tstatic ReactiveIsNewAwareAuditingHandler from(MappingContext<?,?> mappingContext);\n\t// Marks the given object created or modified based on PersistentEntity.isNew(Object).\n\treactor.core.publisher.Mono<Object> markAudited(Object object);\n}", "des": "AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic ReactiveIsNewAwareAuditingHandler.markAudited(Object) method that will route calls to ReactiveAuditingHandler.markCreated(Object) or ReactiveAuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory."}
{"index": 5668, "code": "public static enum ReactiveWrappers.ReactiveLibrary extends Enum<ReactiveWrappers.ReactiveLibrary> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ReactiveWrappers.ReactiveLibrary valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ReactiveWrappers.ReactiveLibrary[] values();\n}", "des": "Enumeration of supported reactive libraries."}
{"index": 5669, "code": "public interface RepositoryInvocationInformation {\n\t// Returns whether the repository has a method to delete objects.\n\tboolean hasDeleteMethod();\n\t// Returns whether the repository has a method to find all objects.\n\tboolean hasFindAllMethod();\n\t// Returns whether the repository has a method to find a single object.\n\tboolean hasFindOneMethod();\n\t// Returns whether the repository has a method to save objects.\n\tboolean hasSaveMethod();\n}", "des": "Meta-information about the methods a repository exposes."}
{"index": 5670, "code": "public interface RepositoryQuery {\n\t// Executes the RepositoryQuery with the given parameters.\n\tObject execute(Object[] parameters);\n\t// Returns the related QueryMethod.\n\tQueryMethod getQueryMethod();\n}", "des": "Interface for a query abstraction."}
{"index": 5671, "code": "public static enum RevisionMetadata.RevisionType extends Enum<RevisionMetadata.RevisionType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RevisionMetadata.RevisionType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RevisionMetadata.RevisionType[] values();\n}", "des": "The type of a Revision."}
{"index": 5672, "code": "public class RevisionSort extends Sort {\n\t// Creates a RevisionSort with ascending order for the revision number property, i.e. more recent revisions will come last.\n\tstatic RevisionSort asc();\n\t// Creates a RevisionSort with descending order for the revision number property, i.e. more recent revisions will come first.\n\tstatic RevisionSort desc();\n\t// Returns in which direction to sort revisions for the given Sort instance.\n\tstatic Sort.Direction getRevisionDirection(Sort sort);\n}", "des": "A dedicated Sort implementation that allows the definition of the ordering of revisions independently of the property name the revision number is held in."}
{"index": 5673, "code": "public static enum ScrollPosition.Direction extends Enum<ScrollPosition.Direction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ScrollPosition.Direction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ScrollPosition.Direction[] values();\n}", "des": "Keyset scrolling direction."}
{"index": 5674, "code": "public class SimpleTypeInformationMapper extends Object implements TypeInformationMapper, BeanClassLoaderAware {\n\t// Turn the given type information into the String representation that shall be stored.\n\tAlias createAliasFor(TypeInformation<?> type);\n\t// Returns the TypeInformation that shall be used when the given String value is found as type hint.\n\tTypeInformation<?> resolveTypeFrom(Alias alias);\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n}", "des": "Basic TypeInformationMapper implementation that interprets the alias handles as fully qualified class name and tries to load a class with the given name to build TypeInformation."}
{"index": 5675, "code": "public static enum Sort.NullHandling extends Enum<Sort.NullHandling> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Sort.NullHandling valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Sort.NullHandling[] values();\n}", "des": "Enumeration for null handling hints that can be used in Sort.Order expressions."}
{"index": 5676, "code": "public class SpelEvaluator extends Object {\n\t// Evaluate all the SpEL expressions in SpelQueryContext.SpelExtractor based on values provided as an argument.\n\tMap<String,Object> evaluate(Object[] values);\n\t// Returns the query string produced by the intermediate SpEL expression collection step.\n\tString getQueryString();\n}", "des": "Evaluates SpEL expressions as extracted by the SpelQueryContext.SpelExtractor based on parameter information from a method and parameter values from a method call."}
{"index": 5677, "code": "public class SpELExpressionParameterValueProvider<P extends PersistentProperty<P>> extends Object implements ParameterValueProvider<P> {\n\t// Returns the value to be used for the given Parameter (usually when entity instances are created).\n\t<T> T getParameterValue(Parameter<T,P> parameter);\n\t// Hook to allow to massage the value resulting from the Spel expression evaluation.\n\tprotected <T> T potentiallyConvertSpelValue(Object object, Parameter<T,P> parameter);\n}", "des": "ParameterValueProvider that can be used to front a ParameterValueProvider delegate to prefer a SpEL expression evaluation over directly resolving the parameter value with the delegate."}
{"index": 5678, "code": "public abstract class SpringDataJaxb extends Object {\n\t// Marshals each of the elements of the given Iterable using the given XmlAdapter.\n\tstatic <T, S> List<S> marshal(Iterable<T> source, jakarta.xml.bind.annotation.adapters.XmlAdapter<S,T> adapter);\n\t// Unmarshals each element of the given Collection using the given XmlAdapter.\n\tstatic <T, S> List<T> unmarshal(Collection<S> source, jakarta.xml.bind.annotation.adapters.XmlAdapter<S,T> adapter);\n}", "des": "Helper class containing utility methods to implement JAXB XmlAdapters as well as the DTO types to be marshalled by JAXB."}
{"index": 5679, "code": "public interface TargetAware extends TargetClassAware, RawTargetAccess {\n\t// Re-declaration of Spring Framework 4.3's DecoratingProxy.getDecoratedClass() so that we can exclude it from Jackson serialization.\n\tClass<?> getDecoratedClass();\n\t// Returns the proxy target.\n\tObject getTarget();\n\t// Returns the type of the proxy target.\n\tClass<?> getTargetClass();\n}", "des": "Extension of TargetClassAware to be able to ignore the getter on JSON rendering."}
{"index": 5680, "code": "public interface TypeAliasAccessor<S> {\n\t// Reads the type alias to be used from the given source.\n\tAlias readAliasFrom(S source);\n\t// Writes the given type alias to the given sink.\n\tvoid writeTypeTo(S sink, Object alias);\n}", "des": "Interface to abstract implementations of how to access a type alias from a given source or sink."}
{"index": 5681, "code": "public class TypeFilterParser extends Object {\n\t// Creates a TypeFilter instance from the given Element and ClassLoader.\n\tprotected TypeFilter createTypeFilter(Element element, ClassLoader classLoader);\n\t// Returns all TypeFilter declared in nested elements of the given Element.\n\tCollection<TypeFilter> parseTypeFilters(Element element, TypeFilterParser.Type type);\n}", "des": "Parser to populate the given ClassPathScanningCandidateComponentProvider with TypeFilters parsed from the given Element's children."}
{"index": 5682, "code": "public interface TypeInformationMapper {\n\t// Returns the alias to be used for the given TypeInformation.\n\tAlias createAliasFor(TypeInformation<?> type);\n\t// Returns the actual TypeInformation to be used for the given alias.\n\tTypeInformation<?> resolveTypeFrom(Alias alias);\n}", "des": "Interface to abstract the mapping from a type alias to the actual type."}
{"index": 5683, "code": "public abstract class AbstractPermission extends Object implements Permission {\n\tfinal boolean equals(Object obj);\n\t// Returns the bits that represents the permission.\n\tfinal int getMask();\n\t// Returns a 32-character long bit pattern String representing this permission.\n\tString getPattern();\n}", "des": "Provides an abstract superclass for Permission implementations."}
{"index": 5684, "code": "public interface AccessControlEntry extends Serializable {\n\tAcl getAcl();\n\t// Obtains an identifier that represents this ACE.\n\tSerializable getId();\n\tPermission getPermission();\n\tSid getSid();\n\t// Indicates the permission is being granted to the relevant Sid.\n\tboolean isGranting();\n}", "des": "Represents an individual permission assignment within an Acl."}
{"index": 5685, "code": "public class AccessControlEntryImpl extends Object implements AccessControlEntry, AuditableAccessControlEntry {\n\tboolean equals(Object arg0);\n\tAcl getAcl();\n\t// Obtains an identifier that represents this ACE.\n\tSerializable getId();\n\tPermission getPermission();\n\tSid getSid();\n\tboolean isAuditFailure();\n\tboolean isAuditSuccess();\n\t// Indicates the permission is being granted to the relevant Sid.\n\tboolean isGranting();\n}", "des": "An immutable default implementation of AccessControlEntry."}
{"index": 5686, "code": "public interface MutableAclService extends AclService {\n\t// Creates an empty Acl object in the database.\n\tMutableAcl createAcl(ObjectIdentity objectIdentity);\n\t// Removes the specified entry from the database.\n\tvoid deleteAcl(ObjectIdentity objectIdentity, boolean deleteChildren);\n\t// Changes an existing Acl in the database.\n\tMutableAcl updateAcl(MutableAcl acl);\n}", "des": "Provides support for creating and storing Acl instances."}
{"index": 5687, "code": "public interface ObjectIdentity extends Serializable {\n\tboolean equals(Object obj);\n\t// Obtains the actual identifier.\n\tSerializable getIdentifier();\n\t// Obtains the \"type\" metadata for the domain object.\n\tString getType();\n}", "des": "Represents the identity of an individual domain object instance."}
{"index": 5688, "code": "public class ObjectIdentityImpl extends Object implements ObjectIdentity {\n\t// Important so caching operates properly.\n\tboolean equals(Object obj);\n\t// Obtains the actual identifier.\n\tSerializable getIdentifier();\n\t// Obtains the \"type\" metadata for the domain object.\n\tString getType();\n}", "des": "Simple implementation of ObjectIdentity."}
{"index": 5689, "code": "public interface Permission extends Serializable {\n\t// Returns the bits that represents the permission.\n\tint getMask();\n\t// Returns a 32-character long bit pattern String representing this permission.\n\tString getPattern();\n}", "des": "Represents a permission granted to a Sid for a given domain object."}
{"index": 5690, "code": "public enum AnnotationBasedKeySpaceResolver extends Enum<AnnotationBasedKeySpaceResolver> implements KeySpaceResolver {\n\t// Determine the keySpace to use for a given type.\n\tString resolveKeySpace(Class<?> type);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AnnotationBasedKeySpaceResolver valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AnnotationBasedKeySpaceResolver[] values();\n}", "des": "AnnotationBasedKeySpaceResolver looks up Persistent and checks for presence of either meta or direct usage of KeySpace."}
{"index": 5691, "code": "public enum ClassNameKeySpaceResolver extends Enum<ClassNameKeySpaceResolver> implements KeySpaceResolver {\n\t// Determine the keySpace to use for a given type.\n\tString resolveKeySpace(Class<?> type);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClassNameKeySpaceResolver valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClassNameKeySpaceResolver[] values();\n}", "des": "Most trivial implementation of KeySpaceResolver returning the Class.getName()."}
{"index": 5692, "code": "public static class KeyValueEvent.AfterDeleteEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent after removing an object by with a given key."}
{"index": 5693, "code": "public static class KeyValueEvent.AfterGetEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent after loading an object by its key."}
{"index": 5694, "code": "public static class KeyValueEvent.AfterInsertEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent after inserting an object by with a given key."}
{"index": 5695, "code": "public static class KeyValueEvent.AfterUpdateEvent<T> extends KeyValueEvent<T> {\n\t// Get the current value.\n\tT after();\n\t// Get the value before update.\n\tObject before();\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent after updating an object by with a given key."}
{"index": 5696, "code": "public static class KeyValueEvent.BeforeInsertEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent before inserting an object by with a given key."}
{"index": 5697, "code": "public static class KeyValueEvent.BeforeUpdateEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\t// Get the value of the element the KeyValueEvent refers to.\n\tT getPayload();\n\tObject getSource();\n\t// Get the type of the element the KeyValueEvent refers to.\n\tClass<? extends T> getType();\n}", "des": "KeyValueEvent before updating an object by with a given key."}
{"index": 5698, "code": "public final class SecurityMockMvcConfigurers extends Object {\n\t// Configures the MockMvcBuilder for use with Spring Security.\n\tstatic org.springframework.test.web.servlet.setup.MockMvcConfigurer springSecurity();\n\t// Configures the MockMvcBuilder for use with Spring Security.\n\tstatic org.springframework.test.web.servlet.setup.MockMvcConfigurer springSecurity(jakarta.servlet.Filter springSecurityFilterChain);\n}", "des": "Provides Security related MockMvcConfigurer implementations."}
{"index": 5699, "code": "public final class SecurityMockMvcResultMatchers extends Object {\n\t// ResultMatcher that verifies that a specified user is authenticated.\n\tstatic SecurityMockMvcResultMatchers.AuthenticatedMatcher authenticated();\n\t// ResultMatcher that verifies that no user is authenticated.\n\tstatic org.springframework.test.web.servlet.ResultMatcher unauthenticated();\n}", "des": "Security related MockMvc ResultMatchers."}
{"index": 5700, "code": "public enum TestExecutionEvent extends Enum<TestExecutionEvent> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TestExecutionEvent valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TestExecutionEvent[] values();\n}", "des": "Represents the events on the methods of TestExecutionListener"}
{"index": 5701, "code": "public abstract class AbstractSettings extends Object implements Serializable {\n\tboolean equals(Object obj);\n\t// Returns a configuration setting.\n\t<T> T getSetting(String name);\n\t// Returns a Map of the configuration settings.\n\tMap<String,Object> getSettings();\n}", "des": "Base implementation for configuration settings."}
{"index": 5702, "code": "protected abstract static class AbstractSettings.AbstractBuilder<T extends AbstractSettings,B extends AbstractSettings.AbstractBuilder<T,B>> extends Object {\n\tabstract T build();\n\tprotected final Map<String,Object> getSettings();\n\tprotected final B getThis();\n\t// Sets a configuration setting.\n\tB setting(String name, Object value);\n\t// A Consumer of the configuration settings Map allowing the ability to add, replace, or remove.\n\tB settings(Consumer<Map<String,Object>> settingsConsumer);\n}", "des": "A builder for subclasses of AbstractSettings."}
{"index": 5703, "code": "public interface AuthorizationServerContext {\n\t// Returns the AuthorizationServerSettings.\n\tAuthorizationServerSettings getAuthorizationServerSettings();\n\t// Returns the URL of the Authorization Server's issuer identifier.\n\tString getIssuer();\n}", "des": "A context that holds information of the Authorization Server runtime environment."}
{"index": 5704, "code": "public final class AuthorizationServerContextHolder extends Object {\n\t// Returns the AuthorizationServerContext bound to the current thread.\n\tstatic AuthorizationServerContext getContext();\n\t// Reset the AuthorizationServerContext bound to the current thread.\n\tstatic void resetContext();\n\t// Bind the given AuthorizationServerContext to the current thread.\n\tstatic void setContext(AuthorizationServerContext authorizationServerContext);\n}", "des": "A holder of the AuthorizationServerContext that associates it with the current thread using a ThreadLocal."}
{"index": 5705, "code": "public interface Context {\n\t// Returns the value of the attribute associated to the key.\n\tdefault <V> V get(Class<V> key);\n\t// Returns the value of the attribute associated to the key.\n\t<V> V get(Object key);\n\t// Returns true if an attribute associated to the key exists, false otherwise.\n\tboolean hasKey(Object key);\n}", "des": "A facility for holding information associated to a specific context."}
{"index": 5706, "code": "public final class DefaultOAuth2TokenContext extends Object implements OAuth2TokenContext {\n\t// Returns a new DefaultOAuth2TokenContext.Builder.\n\tstatic DefaultOAuth2TokenContext.Builder builder();\n\t// Returns the value of the attribute associated to the key.\n\t<V> V get(Object key);\n\t// Returns true if an attribute associated to the key exists, false otherwise.\n\tboolean hasKey(Object key);\n}", "des": "Default implementation of OAuth2TokenContext."}
{"index": 5707, "code": "public final class InMemoryRegisteredClientRepository extends Object implements RegisteredClientRepository {\n\t// Returns the registered client identified by the provided clientId, or null if not found.\n\tRegisteredClient findByClientId(String clientId);\n\t// Returns the registered client identified by the provided id, or null if not found.\n\tRegisteredClient findById(String id);\n\t// Saves the registered client.\n\tvoid save(RegisteredClient registeredClient);\n}", "des": "A RegisteredClientRepository that stores RegisteredClient(s) in-memory."}
{"index": 5708, "code": "public class OAuth2AuthorizationCodeAuthenticationToken extends OAuth2AuthorizationGrantAuthenticationToken {\n\t// Returns the authorization code.\n\tString getCode();\n\t// Returns the redirect uri.\n\tString getRedirectUri();\n}", "des": "An Authentication implementation used for the OAuth 2.0 Authorization Code Grant."}
{"index": 5709, "code": "public interface OAuth2AuthorizationConsentService {\n\t// Returns the OAuth2AuthorizationConsent identified by the provided registeredClientId and principalName, or null if not found.\n\tOAuth2AuthorizationConsent findById(String registeredClientId, String principalName);\n\t// Removes the OAuth2AuthorizationConsent.\n\tvoid remove(OAuth2AuthorizationConsent authorizationConsent);\n\t// Saves the OAuth2AuthorizationConsent.\n\tvoid save(OAuth2AuthorizationConsent authorizationConsent);\n}", "des": "Implementations of this interface are responsible for the management of OAuth 2.0 Authorization Consent(s)."}
{"index": 5710, "code": "public class OAuth2AuthorizationGrantAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the additional parameters.\n\tMap<String,Object> getAdditionalParameters();\n\tObject getCredentials();\n\t// Returns the authorization grant type.\n\torg.springframework.security.oauth2.core.AuthorizationGrantType getGrantType();\n\tObject getPrincipal();\n}", "des": "Base implementation of an Authentication representing an OAuth 2.0 Authorization Grant."}
{"index": 5711, "code": "public final class OAuth2AuthorizationServerMetadata extends AbstractOAuth2AuthorizationServerMetadata {\n\t// Constructs a new OAuth2AuthorizationServerMetadata.Builder with empty claims.\n\tstatic OAuth2AuthorizationServerMetadata.Builder builder();\n\t// Constructs a new OAuth2AuthorizationServerMetadata.Builder with the provided claims.\n\tstatic OAuth2AuthorizationServerMetadata.Builder withClaims(Map<String,Object> claims);\n}", "des": "A representation of an OAuth 2.0 Authorization Server Metadata response, which is returned from an OAuth 2.0 Authorization Server's Metadata Endpoint, and contains a set of claims about the Authorization Server's configuration."}
{"index": 5712, "code": "public interface OAuth2AuthorizationService {\n\t// Returns the OAuth2Authorization identified by the provided id, or null if not found.\n\tOAuth2Authorization findById(String id);\n\t// Returns the OAuth2Authorization containing the provided token, or null if not found.\n\tOAuth2Authorization findByToken(String token, OAuth2TokenType tokenType);\n\t// Removes the OAuth2Authorization.\n\tvoid remove(OAuth2Authorization authorization);\n\t// Saves the OAuth2Authorization.\n\tvoid save(OAuth2Authorization authorization);\n}", "des": "Implementations of this interface are responsible for the management of OAuth 2.0 Authorization(s)."}
{"index": 5713, "code": "public class OAuth2DeviceAuthorizationConsentAuthenticationToken extends OAuth2AuthorizationConsentAuthenticationToken {\n\t// Returns the requested scopes.\n\tSet<String> getRequestedScopes();\n\t// Returns the user code.\n\tString getUserCode();\n}", "des": "An Authentication implementation for the Device Authorization Consent used in the OAuth 2.0 Device Authorization Grant."}
{"index": 5714, "code": "public class OAuth2DeviceVerificationAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the additional parameters.\n\tMap<String,Object> getAdditionalParameters();\n\t// Returns the client identifier.\n\tString getClientId();\n\tObject getCredentials();\n\tObject getPrincipal();\n\t// Returns the user code.\n\tString getUserCode();\n}", "des": "An Authentication implementation for the Device Verification Request (submission of the user code) used in the OAuth 2.0 Device Authorization Grant."}
{"index": 5715, "code": "public class OAuth2RefreshTokenAuthenticationToken extends OAuth2AuthorizationGrantAuthenticationToken {\n\t// Returns the refresh token.\n\tString getRefreshToken();\n\t// Returns the requested scope(s).\n\tSet<String> getScopes();\n}", "des": "An Authentication implementation used for the OAuth 2.0 Refresh Token Grant."}
{"index": 5716, "code": "public class OAuth2TokenIntrospectionAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the additional parameters.\n\tMap<String,Object> getAdditionalParameters();\n\tObject getCredentials();\n\tObject getPrincipal();\n\t// Returns the token.\n\tString getToken();\n\t// Returns the token claims.\n\tOAuth2TokenIntrospection getTokenClaims();\n\t// Returns the token type hint.\n\tString getTokenTypeHint();\n}", "des": "An Authentication implementation used for OAuth 2.0 Token Introspection."}
{"index": 5717, "code": "public class OAuth2TokenRevocationAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\tObject getCredentials();\n\tObject getPrincipal();\n\t// Returns the token.\n\tString getToken();\n\t// Returns the token type hint.\n\tString getTokenTypeHint();\n}", "des": "An Authentication implementation used for OAuth 2.0 Token Revocation."}
{"index": 5718, "code": "public final class OidcClientRegistration extends Object implements OidcClientMetadataClaimAccessor, Serializable {\n\t// Constructs a new OidcClientRegistration.Builder with empty claims.\n\tstatic OidcClientRegistration.Builder builder();\n\t// Returns the metadata as claims.\n\tMap<String,Object> getClaims();\n\t// Constructs a new OidcClientRegistration.Builder with the provided claims.\n\tstatic OidcClientRegistration.Builder withClaims(Map<String,Object> claims);\n}", "des": "A representation of an OpenID Client Registration Request and Response, which is sent to and returned from the Client Registration Endpoint, and contains a set of claims about the Client's Registration information."}
{"index": 5719, "code": "public class OidcClientRegistrationAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\t// Returns the client identifier.\n\tString getClientId();\n\t// Returns the client registration.\n\tOidcClientRegistration getClientRegistration();\n\tObject getCredentials();\n\tObject getPrincipal();\n}", "des": "An Authentication implementation used for OpenID Connect 1.0 Dynamic Client Registration (and Configuration) Endpoint."}
{"index": 5720, "code": "public final class OidcProviderConfiguration extends AbstractOAuth2AuthorizationServerMetadata implements OidcProviderMetadataClaimAccessor {\n\t// Constructs a new OidcProviderConfiguration.Builder with empty claims.\n\tstatic OidcProviderConfiguration.Builder builder();\n\t// Constructs a new OidcProviderConfiguration.Builder with the provided claims.\n\tstatic OidcProviderConfiguration.Builder withClaims(Map<String,Object> claims);\n}", "des": "A representation of an OpenID Provider Configuration Response, which is returned from an Issuer's Discovery Endpoint, and contains a set of claims about the OpenID Provider's configuration."}
{"index": 5721, "code": "public interface RegisteredClientRepository {\n\t// Returns the registered client identified by the provided clientId, or null if not found.\n\tRegisteredClient findByClientId(String clientId);\n\t// Returns the registered client identified by the provided id, or null if not found.\n\tRegisteredClient findById(String id);\n\t// Saves the registered client.\n\tvoid save(RegisteredClient registeredClient);\n}", "des": "A repository for OAuth 2.0 RegisteredClient(s)."}
{"index": 5722, "code": "public abstract class AbstractResult<V> extends Object {\n\t// Return the result or throw a VaultException if the operation completed with an error.\n\tV get();\n\tprotected abstract V get0();\n\t// Returns the cause of the failed operation if the operation completed with an error.\n\tException getCause();\n\t// Returns true if and only if the batch operation was completed successfully.\n\tboolean isSuccessful();\n}", "des": "Supporting class for computation results allowing introspection of the result value."}
{"index": 5723, "code": "public abstract class AbstractVaultConverter extends Object implements VaultConverter, InitializingBean {\n\tvoid afterPropertiesSet();\n\tConversionService getConversionService();\n\t// Registers the given custom conversions with the converter.\n\tvoid setCustomConversions(CustomConversions conversions);\n\t// Registers EntityInstantiators to customize entity instantiation.\n\tvoid setInstantiators(EntityInstantiators instantiators);\n}", "des": "Base class for VaultConverter implementations."}
{"index": 5724, "code": "public class AppRoleAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for AppRole authentication given AppRoleAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(AppRoleAuthenticationOptions options);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "AppRole implementation of ClientAuthentication."}
{"index": 5725, "code": "public abstract class AuthenticationEventPublisher extends Object {\n\t// Add a AuthenticationListener.\n\tvoid addAuthenticationListener(AuthenticationListener listener);\n\t// Add a AuthenticationErrorListener.\n\tvoid addErrorListener(AuthenticationErrorListener listener);\n\t// Remove a AuthenticationListener.\n\tvoid removeAuthenticationListener(AuthenticationListener listener);\n\t// Remove a AuthenticationErrorListener.\n\tvoid removeErrorListener(AuthenticationErrorListener listener);\n}", "des": "Publisher for AuthenticationEvents."}
{"index": 5726, "code": "public static class AuthenticationSteps.Pair<L,R> extends Object {\n\tboolean equals(Object o);\n\t// Type-safe way to get the fist object of this AuthenticationSteps.Pair.\n\tL getLeft();\n\t// Type-safe way to get the second object of this AuthenticationSteps.Pair.\n\tR getRight();\n\t// Create a new AuthenticationSteps.Pair given left and right values.\n\tstatic <L, R> AuthenticationSteps.Pair<L,R> of(L left, R right);\n}", "des": "A tuple of two things."}
{"index": 5727, "code": "public static class AwsEc2AuthenticationOptions.Nonce extends Object {\n\t// Create a new generated AwsEc2AuthenticationOptions.Nonce using UUID.\n\tstatic AwsEc2AuthenticationOptions.Nonce generated();\n\tchar[] getValue();\n\t// Create a wrapped AwsEc2AuthenticationOptions.Nonce given a nonce value.\n\tstatic AwsEc2AuthenticationOptions.Nonce provided(char[] nonce);\n}", "des": "Value object for an authentication nonce."}
{"index": 5728, "code": "public class CachingVaultTokenSupplier extends Object implements VaultTokenSupplier, ReactiveSessionManager {\n\t// Return a VaultToken.\n\tMono<VaultToken> getVaultToken();\n\t// Creates a new CachingVaultTokenSupplier given a delegate supplier.\n\tstatic CachingVaultTokenSupplier of(VaultTokenSupplier delegate);\n}", "des": "Default implementation of VaultTokenSupplier caching the VaultToken from a delegate VaultTokenSupplier."}
{"index": 5729, "code": "public class Ciphertext extends Object {\n\tboolean equals(Object o);\n\tString getCiphertext();\n\tVaultTransitContext getContext();\n\t// Factory method to create Ciphertext from the given ciphertext.\n\tstatic Ciphertext of(String ciphertext);\n\t// Create a new Ciphertext object from this ciphertext associated with the given VaultTransitContext.\n\tCiphertext with(VaultTransitContext context);\n}", "des": "Value object representing cipher text with an optional VaultTransitContext."}
{"index": 5730, "code": "@FunctionalInterface public interface CredentialSupplier extends Supplier<String> {\n\t// Retrieve a cached CredentialSupplier that obtains the credential early and reuses the token for each get() call.\n\tdefault CredentialSupplier cached();\n\t// Get a credential to be used with an authentication mechanism.\n\tString get();\n}", "des": "Interface to obtain an arbitrary credential that is uses in ClientAuthentication or AuthenticationSteps methods."}
{"index": 5731, "code": "public class CubbyholeAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for cubbyhole authentication given CubbyholeAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(CubbyholeAuthenticationOptions options);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "Cubbyhole ClientAuthentication implementation."}
{"index": 5732, "code": "public class DurationParser extends Object {\n\t// Format a Duration into the Go format representation.\n\tstatic String formatDuration(Duration duration);\n\t// Parse a Go format duration into a Duration object.\n\tstatic Duration parseDuration(String duration);\n}", "des": "Utility to parse a Go format duration into Duration."}
{"index": 5733, "code": "@FunctionalInterface public interface GcpCredentialSupplier extends Supplier<com.google.api.client.googleapis.auth.oauth2.GoogleCredential> {\n\t// Exception-safe helper to get GoogleCredential from getCredential().\n\tdefault com.google.api.client.googleapis.auth.oauth2.GoogleCredential get();\n\t// Get a GoogleCredential for GCP IAM authentication via JWT signing.\n\tcom.google.api.client.googleapis.auth.oauth2.GoogleCredential getCredential();\n}", "des": "Interface to obtain a GoogleCredential for GCP IAM authentication."}
{"index": 5734, "code": "@FunctionalInterface public interface GoogleCredentialsSupplier extends Supplier<com.google.auth.oauth2.GoogleCredentials> {\n\t// Exception-safe helper to get ServiceAccountCredentials from getCredentials().\n\tdefault com.google.auth.oauth2.GoogleCredentials get();\n\t// Get a GoogleCredentials for GCP IAM credentials authentication via JWT signing.\n\tcom.google.auth.oauth2.GoogleCredentials getCredentials();\n}", "des": "Interface to obtain a ServiceAccountCredentials for GCP IAM credentials authentication."}
{"index": 5735, "code": "public abstract class JsonMapFlattener extends Object {\n\t// Flatten a hierarchical Map into a flat Map with key names using property dot notation.\n\tstatic Map<String,Object> flatten(Map<String,? extends Object> inputMap);\n\t// Flatten a hierarchical Map into a flat Map with key names using property dot notation.\n\tstatic Map<String,String> flattenToStringMap(Map<String,? extends Object> inputMap);\n}", "des": "Flattens a hierarchical Map of objects into a property Map."}
{"index": 5736, "code": "public class KeyValueDelegate extends Object {\n\tKeyValueDelegate.MountInfo getMountInfo(String path);\n\t// Read a secret from a key-value backend.\n\tVaultResponse getSecret(String path);\n\t// Determine whether the path belongs to a versioned Key-Value mount.\n\tboolean isVersioned(String path);\n}", "des": "Key-Value utility to retrieve secrets from a versioned key-value backend."}
{"index": 5737, "code": "public class KubernetesAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for kubernetes authentication given KubernetesAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(KubernetesAuthenticationOptions options);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "Kubernetes implementation of ClientAuthentication."}
{"index": 5738, "code": "public class Lease extends Object {\n\tboolean equals(Object o);\n\t// Create a new non-renewable Lease, without a leaseId and specified duration.\n\tstatic Lease fromTimeToLive(Duration leaseDuration);\n\tDuration getLeaseDuration();\n\tString getLeaseId();\n\tboolean hasLeaseId();\n\tboolean isRenewable();\n\t// Factory method to return a non-renewable, zero-duration Lease.\n\tstatic Lease none();\n\t// Create a new Lease.\n\tstatic Lease of(String leaseId, Duration leaseDuration, boolean renewable);\n}", "des": "A lease abstracting the lease Id, duration and its renewability."}
{"index": 5739, "code": "public enum LeaseEndpoints extends Enum<LeaseEndpoints> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic LeaseEndpoints valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic LeaseEndpoints[] values();\n}", "des": "Version-specific endpoint implementations that use either legacy or sys/leases endpoints."}
{"index": 5740, "code": "public abstract class LeaseListenerAdapter extends Object implements LeaseListener, LeaseErrorListener {\n\t// Callback for a SecretLeaseEvent.\n\tvoid onLeaseError(SecretLeaseEvent leaseEvent, Exception exception);\n\t// Callback for a SecretLeaseEvent\n\tvoid onLeaseEvent(SecretLeaseEvent leaseEvent);\n}", "des": "Empty listener adapter implementing LeaseListener and LeaseErrorListener."}
{"index": 5741, "code": "@FunctionalInterface public interface LeaseStrategy {\n\t// Predefined strategy to drop leases on error.\n\tstatic LeaseStrategy dropOnError();\n\t// Predefined strategy to retain leases on error.\n\tstatic LeaseStrategy retainOnError();\n\t// Predefined strategy to retain leases on I/O errors.\n\tstatic LeaseStrategy retainOnIoError();\n\t// Return true to drop the lease after error happened.\n\tboolean shouldDrop(Throwable error);\n}", "des": "Strategy interface to control whether to retain or drop a Lease after a failure."}
{"index": 5742, "code": "public static class LifecycleAwareSessionManagerSupport.FixedTimeoutRefreshTrigger extends Object implements LifecycleAwareSessionManagerSupport.RefreshTrigger {\n\t// Returns the minimum TTL duration to consider a token valid after renewal.\n\tDuration getValidTtlThreshold(LoginToken loginToken);\n\t// Determine the next execution time according to the given trigger context.\n\tDate nextExecutionTime(LoginToken loginToken);\n}", "des": "LifecycleAwareSessionManagerSupport.RefreshTrigger implementation using a fixed timeout to schedule renewal before a LoginToken expires."}
{"index": 5743, "code": "public static interface LifecycleAwareSessionManagerSupport.RefreshTrigger {\n\t// Returns the minimum TTL duration to consider a token valid after renewal.\n\tDuration getValidTtlThreshold(LoginToken loginToken);\n\t// Determine the next execution time according to the given trigger context.\n\tDate nextExecutionTime(LoginToken loginToken);\n}", "des": "Common interface for trigger objects that determine the next execution time of a refresh task."}
{"index": 5744, "code": "public class PcfAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for pcf authentication given PcfAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(PcfAuthenticationOptions options);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "PCF implementation of ClientAuthentication."}
{"index": 5745, "code": "@FunctionalInterface public interface PropertyTransformer {\n\t// Return a composed transformer function that first applies this filter, and then applies the after transformer.\n\tdefault PropertyTransformer andThen(PropertyTransformer after);\n\t// Transform properties by creating a new map using the transformed property set.\n\tMap<String,Object> transformProperties(Map<String,? extends Object> input);\n}", "des": "Strategy interface to transform properties to a new key-value Map in a functional style."}
{"index": 5746, "code": "public static class PropertyTransformers.KeyPrefixPropertyTransformer extends Object implements PropertyTransformer {\n\t// Create a new PropertyTransformers.KeyPrefixPropertyTransformer that adds a prefix to each key name.\n\tstatic PropertyTransformer forPrefix(String propertyNamePrefix);\n\tString getPropertyNamePrefix();\n\t// Transform properties by creating a new map using the transformed property set.\n\tMap<String,Object> transformProperties(Map<String,? extends Object> input);\n}", "des": "PropertyTransformer that adds a prefix to each key name."}
{"index": 5747, "code": "public class RequestedSecret extends Object {\n\tboolean equals(Object o);\n\t// Create a RequestedSecret given RequestedSecret.Mode at path.\n\tstatic RequestedSecret from(RequestedSecret.Mode mode, String path);\n\tRequestedSecret.Mode getMode();\n\tString getPath();\n\t// Create a renewable RequestedSecret at path.\n\tstatic RequestedSecret renewable(String path);\n\t// Create a rotating RequestedSecret at path.\n\tstatic RequestedSecret rotating(String path);\n}", "des": "Represents a requested secret from a specific Vault path associated with a lease RequestedSecret.Mode."}
{"index": 5748, "code": "@FunctionalInterface public interface RestTemplateFactory {\n\t// Create a RestTemplate instance.\n\tdefault RestTemplate create();\n\t// Create a RestTemplate instance by applying customizer to the underlying RestTemplateBuilder.\n\tRestTemplate create(Consumer<RestTemplateBuilder> customizer);\n}", "des": "Factory interface that produces a RestTemplate object."}
{"index": 5749, "code": "public class SignatureValidation extends Object {\n\tboolean equals(Object o);\n\t// Factory method to create a SignatureValidation object representing a failed signature validation.\n\tstatic SignatureValidation invalid();\n\tboolean isValid();\n\t// Factory method to create a SignatureValidation object representing a successfully validated signature.\n\tstatic SignatureValidation valid();\n}", "des": "Value object representing the result of a Signature validation."}
{"index": 5750, "code": "public class SimpleVaultEndpointProvider extends Object implements VaultEndpointProvider {\n\t// Provides access to VaultEndpoint.\n\tVaultEndpoint getVaultEndpoint();\n\t// Creates a new VaultEndpointProvider given VaultEndpoint.\n\tstatic VaultEndpointProvider of(VaultEndpoint endpoint);\n}", "des": "VaultEndpointProvider returning a static VaultEndpoint."}
{"index": 5751, "code": "public static class SslConfiguration.KeyConfiguration extends Object {\n\tString getKeyAlias();\n\tchar[] getKeyPassword();\n\t// Create a SslConfiguration.KeyConfiguration to configure a specific key within a KeyStore.\n\tstatic SslConfiguration.KeyConfiguration of(char[] keyPassword, String keyAlias);\n\t// Create an unconfigured, empty SslConfiguration.KeyConfiguration.\n\tstatic SslConfiguration.KeyConfiguration unconfigured();\n}", "des": "Configuration for a key in a keystore."}
{"index": 5752, "code": "public class TokenAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for token authentication given VaultToken.\n\tstatic AuthenticationSteps createAuthenticationSteps(VaultToken token, boolean selfLookup);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "Static Token-based ClientAuthentication method."}
{"index": 5753, "code": "public class TransformCiphertext extends Object {\n\tboolean equals(Object o);\n\tString getCiphertext();\n\tVaultTransformContext getContext();\n\t// Factory method to create TransformCiphertext from the given ciphertext.\n\tstatic TransformCiphertext of(String ciphertext);\n\t// Create a new TransformCiphertext object from this ciphertext associated with the given VaultTransformContext.\n\tTransformCiphertext with(VaultTransformContext context);\n}", "des": "Value object representing cipher text with an optional VaultTransformContext."}
{"index": 5754, "code": "public enum TransitKeyType extends Enum<TransitKeyType> {\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TransitKeyType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TransitKeyType[] values();\n}", "des": "Enumeration to specify the type of the transit key."}
{"index": 5755, "code": "public enum UnwrappingEndpoints extends Enum<UnwrappingEndpoints> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic UnwrappingEndpoints valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic UnwrappingEndpoints[] values();\n}", "des": "Version-specific endpoint implementations for response unwrapping."}
{"index": 5756, "code": "public class UsernamePasswordAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\t// Creates a AuthenticationSteps for username/password authentication given UsernamePasswordAuthenticationOptions.\n\tstatic AuthenticationSteps createAuthenticationSteps(UsernamePasswordAuthenticationOptions options);\n\t// Get the AuthenticationSteps describing an authentication flow.\n\tAuthenticationSteps getAuthenticationSteps();\n\t// Return a VaultToken.\n\tVaultToken login();\n}", "des": "Username and password implementation of ClientAuthentication."}
{"index": 5757, "code": "public interface VaultKeyValueMetadataOperations {\n\t// Permanently delete the key metadata and all version data for the specified key.\n\tvoid delete(String path);\n\t// Retrieve the metadata and versions for the secret at the specified path.\n\tVaultMetadataResponse get(String path);\n\t// Update the secret metadata, or creates new metadata if not present.\n\tvoid put(String path, VaultMetadataRequest body);\n}", "des": "Interface that specifies kv metadata related operations."}
{"index": 5758, "code": "public interface VaultKeyValueOperations extends VaultKeyValueOperationsSupport {\n\t// Read the secret at path.\n\tVaultResponse get(String path);\n\t// Read the secret at path.\n\t<T> VaultResponseSupport<T> get(String path, Class<T> responseType);\n\t// Update the secret at path without removing the existing secrets.\n\tboolean patch(String path, Map<String,?> patch);\n\t// Write the secret at path.\n\tvoid put(String path, Object body);\n}", "des": "Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend."}
{"index": 5759, "code": "public interface VaultKeyValueOperationsSupport {\n\t// Delete the secret at path.\n\tvoid delete(String path);\n\t// Read the secret at path.\n\tObject get(String path);\n\tVaultKeyValueOperationsSupport.KeyValueBackend getApiVersion();\n\t// Enumerate keys from a Vault path.\n\tList<String> list(String path);\n}", "des": "Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend."}
{"index": 5760, "code": "public class VaultSignRequest extends Object {\n\tstatic VaultSignRequest.VaultSignRequestBuilder builder();\n\t// Create a new VaultSignRequest given Plaintext.\n\tstatic VaultSignRequest create(Plaintext input);\n\t// Deprecated. since 2.4, use getSignatureAlgorithm() instead.\n\tString getAlgorithm();\n\tString getHashAlgorithm();\n\tPlaintext getPlaintext();\n\tString getSignatureAlgorithm();\n}", "des": "Request for a signature creation request."}
{"index": 5761, "code": "public class VaultToken extends Object {\n\tboolean equals(Object o);\n\tString getToken();\n\t// Create a new VaultToken.\n\tstatic VaultToken of(char[] token);\n\t// Create a new VaultToken.\n\tstatic VaultToken of(String token);\n\tchar[] toCharArray();\n}", "des": "Value object for a Vault token."}
{"index": 5762, "code": "public static class VaultTransformContext.VaultTransformRequestBuilder extends Object {\n\t// Build a new VaultTransformContext instance.\n\tVaultTransformContext build();\n\t// Configure a transformation to be used with the transform operation.\n\tVaultTransformContext.VaultTransformRequestBuilder transformation(String transformation);\n\t// Configure the tweak value for a transform operation.\n\tVaultTransformContext.VaultTransformRequestBuilder tweak(byte[] tweak);\n}", "des": "Builder for VaultTransformContext."}
{"index": 5763, "code": "public class VaultTransitContext extends Object {\n\tstatic VaultTransitContext.VaultTransitRequestBuilder builder();\n\tstatic VaultTransitContext empty();\n\tboolean equals(Object o);\n\t// Create a VaultTransitContext given context bytes.\n\tstatic VaultTransitContext fromContext(byte[] context);\n\t// Create a VaultTransitContext given nonce bytes.\n\tstatic VaultTransitContext fromNonce(byte[] nonce);\n\tbyte[] getContext();\n\tint getKeyVersion();\n\tbyte[] getNonce();\n}", "des": "Transit backend encryption/decryption/rewrapping context."}
{"index": 5764, "code": "@FunctionalInterface public interface WebClientFactory {\n\t// Create a WebClient instance.\n\tdefault WebClient create();\n\t// Create a WebClient instance by applying customizer to the underlying WebClientBuilder.\n\tWebClient create(Consumer<WebClientBuilder> customizer);\n}", "des": "Factory interface that produces a WebClient object."}
{"index": 5765, "code": "protected static interface AbstractReactiveElasticsearchTemplate.SearchDocumentCallback<T> {\n\t// converts a SearchDocument to an entity\n\treactor.core.publisher.Mono<T> toEntity(SearchDocument searchDocument);\n\t// converts a SearchDocument into a SearchHit\n\treactor.core.publisher.Mono<SearchHit<T>> toSearchHit(SearchDocument searchDocument);\n}", "des": "Callback to convert a SearchDocument into different other classes"}
{"index": 5766, "code": "public record ActiveShardCount(int value) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the value record component.\n\tint value();\n}", "des": "Class corresponding to the Elasticsearch class, but in the org.springframework.data.elasticsearch package"}
{"index": 5767, "code": "public class BulkOptions extends Object {\n\t// Create a new BulkOptions.BulkOptionsBuilder to build BulkOptions.\n\tstatic BulkOptions.BulkOptionsBuilder builder();\n\t// Return default BulkOptions.\n\tstatic BulkOptions defaultOptions();\n\tString getPipeline();\n\tRefreshPolicy getRefreshPolicy();\n\tString getRoutingId();\n\tDuration getTimeout();\n\tActiveShardCount getWaitForActiveShards();\n}", "des": "Options that may be passed to an DocumentOperations.bulkIndex(List, BulkOptions, IndexCoordinates) or DocumentOperations.bulkUpdate(List, BulkOptions, IndexCoordinates) call."}
{"index": 5768, "code": "public enum CompletionContextType extends Enum<CompletionContextType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CompletionContextType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CompletionContextType[] values();\n}", "des": "Based on reference doc - https://www.elastic.co/guide/en/elasticsearch/reference/current/suggester-context.html"}
{"index": 5769, "code": "public static enum Criteria.Operator extends Enum<Criteria.Operator> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Criteria.Operator valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Criteria.Operator[] values();\n}", "des": "Operator to join the entries of the criteria chain"}
{"index": 5770, "code": "public enum DateFormat extends Enum<DateFormat> {\n\tString getPattern();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DateFormat valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DateFormat[] values();\n}", "des": "Values based on Elasticsearch reference documentation."}
{"index": 5771, "code": "public interface DateFormatter {\n\t// Formats a TemporalAccessor into a String.\n\tString format(TemporalAccessor accessor);\n\t// Parses a String into a TemporalAccessor.\n\t<T extends TemporalAccessor>T parse(String input, Class<T> type);\n}", "des": "Interface to convert from and to TemporalAccessors."}
{"index": 5772, "code": "public class DefaultRoutingResolver extends Object implements RoutingResolver {\n\t// returns the routing when no entity is available.\n\tString getRouting();\n\t// Returns the routing for a bean.\n\t<T> String getRouting(T bean);\n}", "des": "Default implementation of the RoutingResolver interface."}
{"index": 5773, "code": "public record DocValueField(String field, String format) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the field record component.\n\tString field();\n\t// Returns the value of the format record component.\n\tString format();\n}", "des": "Record defining a docvalue_field to be used in a query."}
{"index": 5774, "code": "public enum Dynamic extends Enum<Dynamic> {\n\tString getMappedName();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Dynamic valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Dynamic[] values();\n}", "des": "Values for the dynamic mapping parameter."}
{"index": 5775, "code": "public interface ElasticsearchTypeMapper extends TypeMapper<Map<String,Object>> {\n\tdefault boolean containsTypeInformation(Map<String,Object> source);\n\t// Creates a new default ElasticsearchTypeMapper.\n\tstatic ElasticsearchTypeMapper create(MappingContext<? extends ElasticsearchPersistentEntity<?>,ElasticsearchPersistentProperty> mappingContext);\n\tString getTypeKey();\n\t// Returns whether the given key is the type key.\n\tboolean isTypeKey(String key);\n}", "des": "Elasticsearch specific TypeMapper definition."}
{"index": 5776, "code": "@ReadingConverter public static enum GeoConverters.MapToPointConverter extends Enum<GeoConverters.MapToPointConverter> implements Converter<Map<String,Object>,Point> {\n\tPoint convert(Map<String,Object> source);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic GeoConverters.MapToPointConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic GeoConverters.MapToPointConverter[] values();\n}", "des": "Converter to read a Point from Map using lat/long properties."}
{"index": 5777, "code": "@WritingConverter public static enum GeoConverters.PointToMapConverter extends Enum<GeoConverters.PointToMapConverter> implements Converter<Point,Map<String,Object>> {\n\tMap<String,Object> convert(Point source);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic GeoConverters.PointToMapConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic GeoConverters.PointToMapConverter[] values();\n}", "des": "Converter to write a Point to Map using lat/long properties."}
{"index": 5778, "code": "public interface GeoJson<T extends Iterable<?>> {\n\t// The value of the coordinates member is always an Iterable.\n\tT getCoordinates();\n\t// String value representing the type of the GeoJson object.\n\tString getType();\n\tstatic GeoJson<?> of(String json);\n\tdefault String toJson();\n}", "des": "Interface definition for structures defined in GeoJSON format. copied from Spring Data Mongodb"}
{"index": 5779, "code": "public class GeoJsonGeometryCollection extends Object implements GeoJson<Iterable<GeoJson<?>>> {\n\tboolean equals(Object o);\n\t// The value of the coordinates member is always an Iterable.\n\tIterable<GeoJson<?>> getCoordinates();\n\tList<GeoJson<?>> getGeometries();\n\t// String value representing the type of the GeoJson object.\n\tString getType();\n\t// Creates a new GeoJsonGeometryCollection for the given GeoJson instances.\n\tstatic GeoJsonGeometryCollection of(List<GeoJson<?>> geometries);\n}", "des": "Defines a GeoJsonGeometryCollection that consists of a List of GeoJson objects. Copied from Spring Data Mongodb"}
{"index": 5780, "code": "public class GeoJsonMultiPolygon extends Object implements GeoJson<Iterable<GeoJsonPolygon>> {\n\tboolean equals(Object o);\n\t// The value of the coordinates member is always an Iterable.\n\tList<GeoJsonPolygon> getCoordinates();\n\t// String value representing the type of the GeoJson object.\n\tString getType();\n\t// Creates a new GeoJsonMultiPolygon for the given GeoJsonPolygons.\n\tstatic GeoJsonMultiPolygon of(List<GeoJsonPolygon> polygons);\n}", "des": "GeoJsonMultiPolygon is defined as a list of GeoJsonPolygons. Copied fro Spring Data Mongodb."}
{"index": 5781, "code": "public static enum HostProvider.Verification extends Enum<HostProvider.Verification> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic HostProvider.Verification valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic HostProvider.Verification[] values();\n}", "des": "HostProvider.Verification allows to influence the lookup strategy for active hosts."}
{"index": 5782, "code": "public static enum IndexQuery.OpType extends Enum<IndexQuery.OpType> {\n\tString getEsName();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IndexQuery.OpType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IndexQuery.OpType[] values();\n}", "des": "OpType for the index operation."}
{"index": 5783, "code": "public final class MappingParameters extends Object {\n\t// extracts the mapping parameters from the relevant annotations.\n\tstatic MappingParameters from(Annotation annotation);\n\tboolean isStore();\n\t// writes the different fields to an ObjectNode.\n\tvoid writeTypeAndParametersTo(com.fasterxml.jackson.databind.node.ObjectNode objectNode);\n}", "des": "A class to hold the mapping parameters that might be set on Field or InnerField annotation."}
{"index": 5784, "code": "public interface PropertyValueConverter {\n\t// Converts an elasticsearch property value to a property value.\n\tObject read(Object value);\n\t// Converts a property value to an elasticsearch value.\n\tObject write(Object value);\n}", "des": "Interface defining methods to convert the value of an entity-property to a value in Elasticsearch and back."}
{"index": 5785, "code": "public static record Query.IdWithRouting(String id, String routing) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the id record component.\n\tString id();\n\t// Returns the value of the routing record component.\n\tString routing();\n}", "des": "Value class combining an id with a routing value."}
{"index": 5786, "code": "public static record Query.PointInTime(String id, Duration keepAlive) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the id record component.\n\tString id();\n\t// Returns the value of the keepAlive record component.\n\tDuration keepAlive();\n}", "des": "Desscribes the point in time parameters for a query"}
{"index": 5787, "code": "public abstract class ReactiveResourceUtil extends Object {\n\t// loads a Document initialized with data from a given resource path.\n\tstatic reactor.core.publisher.Mono<Document> loadDocument(String path, String annotation);\n\t// Read a ClassPathResource into a reactor.core.publisher.Mono<String>.\n\tstatic reactor.core.publisher.Mono<String> readFileFromClasspath(String url);\n}", "des": "Utility to reactively read Resources."}
{"index": 5788, "code": "public interface ReactiveScriptOperations {\n\t// Deletes the script with the given name\n\treactor.core.publisher.Mono<Boolean> deleteScript(String name);\n\t// Gest the script with the given name.\n\treactor.core.publisher.Mono<Script> getScript(String name);\n\t// Stores the given script in the Elasticsearch cluster.\n\treactor.core.publisher.Mono<Boolean> putScript(Script script);\n}", "des": "This interfaces defines the operations to access the Elasticsearch script API."}
{"index": 5789, "code": "public enum RefreshPolicy extends Enum<RefreshPolicy> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RefreshPolicy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RefreshPolicy[] values();\n}", "des": "Enum defining the refresh policy."}
{"index": 5790, "code": "public interface ScriptOperations {\n\t// Deletes the script with the given name\n\tboolean deleteScript(String name);\n\t// Gest the script with the given name.\n\tScript getScript(String name);\n\t// Stores the given script in the Elasticsearch cluster.\n\tboolean putScript(Script script);\n}", "des": "This interfaces defines the operations to access the Elasticsearch script API."}
{"index": 5791, "code": "public enum ScriptType extends Enum<ScriptType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ScriptType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ScriptType[] values();\n}", "des": "Define script types for update queries."}
{"index": 5792, "code": "public record SeqNoPrimaryTerm(long sequenceNumber, long primaryTerm) extends Record {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the primaryTerm record component.\n\tlong primaryTerm();\n\t// Returns the value of the sequenceNumber record component.\n\tlong sequenceNumber();\n}", "des": "A container for seq_no and primary_term values."}
{"index": 5793, "code": "public class Settings extends DefaultStringObjectMap<Settings> {\n\t// flattens the nested structure (JSON fields index/foo/bar/: value) into a flat structure (index.foo.bar: value)\n\tSettings flatten();\n\tObject get(Object key);\n\t// Merges some other settings onto this one.\n\tvoid merge(Settings other);\n\t// Creates a Settings object from the given JSON String\n\tstatic Settings parse(String json);\n}", "des": "class defining the settings for an index."}
{"index": 5794, "code": "public enum TotalHitsRelation extends Enum<TotalHitsRelation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TotalHitsRelation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TotalHitsRelation[] values();\n}", "des": "Enum to represent the relation that Elasticsearch returns for the totalHits value"}
{"index": 5795, "code": "public enum WriteTypeHint extends Enum<WriteTypeHint> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic WriteTypeHint valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic WriteTypeHint[] values();\n}", "des": "Defines if type hints should be written."}
{"index": 5796, "code": "public abstract class AbstractBeansOfTypeDatabaseInitializerDetector extends Object implements DatabaseInitializerDetector {\n\t// Detect beans defined in the given beanFactory that initialize a DataSource.\n\tSet<String> detect(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory);\n\t// Returns the bean types that should be detected as being database initializers.\n\tprotected abstract Set<Class<?>> getDatabaseInitializerBeanTypes();\n}", "des": "Base class for DatabaseInitializerDetectors that detect database initializer beans by type."}
{"index": 5797, "code": "public abstract class AbstractInjectionFailureAnalyzer<T extends Throwable> extends AbstractFailureAnalyzer<T> {\n\t// Returns an analysis of the given rootFailure, or null if no analysis was possible.\n\tprotected final FailureAnalysis analyze(Throwable rootFailure, T cause);\n\t// Returns an analysis of the given rootFailure, or null if no analysis was possible.\n\tprotected abstract FailureAnalysis analyze(Throwable rootFailure, T cause, String description);\n}", "des": "Abstract base class for a FailureAnalyzer that handles some kind of injection failure."}
{"index": 5798, "code": "public final class Ansi8BitColor extends Object implements AnsiElement {\n\t// Return a background ANSI color code instance for the given code.\n\tstatic Ansi8BitColor background(int code);\n\tboolean equals(Object obj);\n\t// Return a foreground ANSI color code instance for the given code.\n\tstatic Ansi8BitColor foreground(int code);\n}", "des": "AnsiElement implementation for ANSI 8-bit foreground or background color codes."}
{"index": 5799, "code": "public enum AnsiBackground extends Enum<AnsiBackground> implements AnsiElement {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AnsiBackground valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AnsiBackground[] values();\n}", "des": "Ansi background colors."}
{"index": 5800, "code": "public enum AnsiColor extends Enum<AnsiColor> implements AnsiElement {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AnsiColor valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AnsiColor[] values();\n}", "des": "Ansi colors."}
{"index": 5801, "code": "public static enum AnsiOutput.Enabled extends Enum<AnsiOutput.Enabled> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AnsiOutput.Enabled valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AnsiOutput.Enabled[] values();\n}", "des": "Possible values to pass to AnsiOutput.setEnabled(org.springframework.boot.ansi.AnsiOutput.Enabled)."}
{"index": 5802, "code": "public enum AnsiStyle extends Enum<AnsiStyle> implements AnsiElement {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AnsiStyle valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AnsiStyle[] values();\n}", "des": "Ansi styles."}
{"index": 5803, "code": "public class ApplicationEnvironmentPreparedEvent extends SpringApplicationEvent {\n\t// Return the bootstrap context.\n\tConfigurableBootstrapContext getBootstrapContext();\n\t// Return the environment.\n\torg.springframework.core.env.ConfigurableEnvironment getEnvironment();\n}", "des": "Event published when a SpringApplication is starting up and the Environment is first available for inspection and modification."}
{"index": 5804, "code": "public class ApplicationFailedEvent extends SpringApplicationEvent {\n\t// Return the application context.\n\torg.springframework.context.ConfigurableApplicationContext getApplicationContext();\n\t// Return the exception that caused the failure.\n\tThrowable getException();\n}", "des": "Event published by a SpringApplication when it fails to start."}
{"index": 5805, "code": "public class ApplicationHome extends Object {\n\t// Returns the application home directory.\n\tFile getDir();\n\t// Returns the underlying source used to find the home directory.\n\tFile getSource();\n}", "des": "Provides access to the application home directory."}
{"index": 5806, "code": "public class ApplicationReadyEvent extends SpringApplicationEvent {\n\t// Return the application context.\n\torg.springframework.context.ConfigurableApplicationContext getApplicationContext();\n\t// Return the time taken for the application to be ready to service requests, or null if unknown.\n\tDuration getTimeTaken();\n}", "des": "Event published as late as conceivably possible to indicate that the application is ready to service requests."}
{"index": 5807, "code": "public class ApplicationStartedEvent extends SpringApplicationEvent {\n\t// Return the application context.\n\torg.springframework.context.ConfigurableApplicationContext getApplicationContext();\n\t// Return the time taken to start the application, or null if unknown.\n\tDuration getTimeTaken();\n}", "des": "Event published once the application context has been refreshed but before any application and command line runners have been called."}
{"index": 5808, "code": "public class ApplicationTemp extends Object {\n\t// Return the directory to be used for application specific temp files.\n\tFile getDir();\n\t// Return a subdirectory of the application temp.\n\tFile getDir(String subDir);\n}", "des": "Provides access to an application specific temporary directory."}
{"index": 5809, "code": "public static enum Banner.Mode extends Enum<Banner.Mode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Banner.Mode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Banner.Mode[] values();\n}", "des": "An enumeration of possible values for configuring the Banner."}
{"index": 5810, "code": "public class BasicJsonParser extends AbstractJsonParser {\n\t// Parse the specified JSON string into a List.\n\tList<Object> parseList(String json);\n\t// Parse the specified JSON string into a Map.\n\tMap<String,Object> parseMap(String json);\n}", "des": "Really basic JSON parser for when you have nothing else available."}
{"index": 5811, "code": "public static enum Bindable.BindRestriction extends Enum<Bindable.BindRestriction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Bindable.BindRestriction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Bindable.BindRestriction[] values();\n}", "des": "Restrictions that can be applied when binding values."}
{"index": 5812, "code": "@FunctionalInterface public interface BindConstructorProvider {\n\t// Return the bind constructor to use for the given type, or null if constructor binding is not supported.\n\tdefault Constructor<?> getBindConstructor(Class<?> type, boolean isNestedConstructorBinding);\n\t// Return the bind constructor to use for the given bindable, or null if constructor binding is not supported.\n\tConstructor<?> getBindConstructor(Bindable<?> bindable, boolean isNestedConstructorBinding);\n}", "des": "Strategy interface used to determine a specific constructor to use when binding."}
{"index": 5813, "code": "public interface BindContext {\n\t// Return the source binder that is performing the bind operation.\n\tBinder getBinder();\n\t// Return the ConfigurationProperty actually being bound or null if the property has not yet been determined.\n\tConfigurationProperty getConfigurationProperty();\n\t// Return the current depth of the binding.\n\tint getDepth();\n\t// Return an Iterable of the sources being used by the Binder.\n\tIterable<ConfigurationPropertySource> getSources();\n}", "des": "Context information for use by BindHandlers."}
{"index": 5814, "code": "public class BindException extends RuntimeException implements OriginProvider {\n\t// Return the name of the configuration property being bound.\n\tConfigurationPropertyName getName();\n\t// Return the source origin or null if the origin is not known.\n\tOrigin getOrigin();\n\t// Return the configuration property name of the item that was being bound.\n\tConfigurationProperty getProperty();\n\t// Return the target being bound.\n\tBindable<?> getTarget();\n}", "des": "Exception thrown when binding fails."}
{"index": 5815, "code": "public enum BindMethod extends Enum<BindMethod> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BindMethod valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BindMethod[] values();\n}", "des": "Configuration property binding methods."}
{"index": 5816, "code": "public class BootstrapContextClosedEvent extends org.springframework.context.ApplicationEvent {\n\t// Return the prepared application context.\n\torg.springframework.context.ConfigurableApplicationContext getApplicationContext();\n\t// Return the BootstrapContext that was closed.\n\tBootstrapContext getBootstrapContext();\n}", "des": "ApplicationEvent published by a BootstrapContext when it's closed."}
{"index": 5817, "code": "public static enum BootstrapRegistry.Scope extends Enum<BootstrapRegistry.Scope> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BootstrapRegistry.Scope valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BootstrapRegistry.Scope[] values();\n}", "des": "The scope of an instance."}
{"index": 5818, "code": "public class BoundConfigurationProperties extends Object {\n\t// Get the configuration property bound to the given name.\n\tConfigurationProperty get(ConfigurationPropertyName name);\n\t// Return the BoundConfigurationProperties from the given ApplicationContext if it is available.\n\tstatic BoundConfigurationProperties get(org.springframework.context.ApplicationContext context);\n\t// Get all bound properties.\n\tMap<ConfigurationPropertyName,ConfigurationProperty> getAll();\n}", "des": "Bean to record and provide bound @ConfigurationProperties."}
{"index": 5819, "code": "@ImportRuntimeHints(org.springframework.boot.info.BuildProperties.BuildPropertiesRuntimeHints.class) public class BuildProperties extends InfoProperties {\n\t// Return the artifactId of the project or null.\n\tString getArtifact();\n\t// Return the groupId of the project or null.\n\tString getGroup();\n\t// Return the name of the project or null.\n\tString getName();\n\t// Return the timestamp of the build or null.\n\tInstant getTime();\n\t// Return the version of the project or null.\n\tString getVersion();\n}", "des": "Provide build-related information such as group and artifact."}
{"index": 5820, "code": "public final class ConfigData extends Object {\n\t// Return the config data options that apply to the given source.\n\tConfigData.Options getOptions(org.springframework.core.env.PropertySource<?> propertySource);\n\t// Return the configuration data property sources in ascending priority order.\n\tList<org.springframework.core.env.PropertySource<?>> getPropertySources();\n}", "des": "Configuration data that has been loaded from a ConfigDataResource and may ultimately contribute property sources to Spring's Environment."}
{"index": 5821, "code": "public static enum ConfigData.Option extends Enum<ConfigData.Option> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConfigData.Option valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConfigData.Option[] values();\n}", "des": "Option flags that can be applied."}
{"index": 5822, "code": "public interface ConfigDataEnvironmentUpdateListener extends EventListener {\n\t// Called when a new PropertySource is added to the Environment.\n\tdefault void onPropertySourceAdded(org.springframework.core.env.PropertySource<?> propertySource, ConfigDataLocation location, ConfigDataResource resource);\n\t// Called when Environment profiles are set.\n\tdefault void onSetProfiles(Profiles profiles);\n}", "des": "EventListener to listen to Environment updates triggered by the ConfigDataEnvironmentPostProcessor."}
{"index": 5823, "code": "public interface ConfigDataLoader<R extends ConfigDataResource> {\n\t// Returns if the specified resource can be loaded by this instance.\n\tdefault boolean isLoadable(ConfigDataLoaderContext context, R resource);\n\t// Load ConfigData for the given resource.\n\tConfigData load(ConfigDataLoaderContext context, R resource);\n}", "des": "Strategy class that can be used to load ConfigData for a given ConfigDataResource."}
{"index": 5824, "code": "public class ConfigDataLocationNotFoundException extends ConfigDataNotFoundException {\n\t// Return the location that could not be found.\n\tConfigDataLocation getLocation();\n\t// Return the source origin or null if the origin is not known.\n\tOrigin getOrigin();\n\t// Return a description of actual referenced item that could not be found.\n\tString getReferenceDescription();\n}", "des": "ConfigDataNotFoundException thrown when a ConfigDataLocation cannot be found."}
{"index": 5825, "code": "public interface ConfigDataLocationResolverContext {\n\t// Provides access to a binder that can be used to obtain previously contributed values.\n\tBinder getBinder();\n\t// Provides access to the ConfigurableBootstrapContext shared across all EnvironmentPostProcessors.\n\tConfigurableBootstrapContext getBootstrapContext();\n\t// Provides access to the parent ConfigDataResource that triggered the resolve or null if there is no available parent.\n\tConfigDataResource getParent();\n}", "des": "Context provided to ConfigDataLocationResolver methods."}
{"index": 5826, "code": "public enum ConfigDataNotFoundAction extends Enum<ConfigDataNotFoundAction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConfigDataNotFoundAction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConfigDataNotFoundAction[] values();\n}", "des": "Action to take when an uncaught ConfigDataNotFoundException is thrown."}
{"index": 5827, "code": "public class ConfigTreeConfigDataLocationResolver extends Object implements ConfigDataLocationResolver<ConfigTreeConfigDataResource> {\n\t// Returns if the specified location address can be resolved by this resolver.\n\tboolean isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location);\n\t// Resolve a ConfigDataLocation into one or more ConfigDataResource instances.\n\tList<ConfigTreeConfigDataResource> resolve(ConfigDataLocationResolverContext context, ConfigDataLocation location);\n}", "des": "ConfigDataLocationResolver for config tree locations."}
{"index": 5828, "code": "public class ConfigTreePropertySource extends org.springframework.core.env.EnumerablePropertySource<Path> implements OriginLookup<String> {\n\t// Return the origin of the given key or null if the origin cannot be determined.\n\tOrigin getOrigin(String name);\n\tConfigTreePropertySource.Value getProperty(String name);\n\tString[] getPropertyNames();\n\t// Return true if this lookup is immutable and has contents that will never change.\n\tboolean isImmutable();\n}", "des": "PropertySource backed by a directory tree that contains files for each value."}
{"index": 5829, "code": "public static enum ConfigTreePropertySource.Option extends Enum<ConfigTreePropertySource.Option> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConfigTreePropertySource.Option valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConfigTreePropertySource.Option[] values();\n}", "des": "Property source options."}
{"index": 5830, "code": "public class ConfigurationPropertiesBindException extends org.springframework.beans.factory.BeanCreationException {\n\t// Return the configuration properties annotation that triggered the binding.\n\tConfigurationProperties getAnnotation();\n\t// Return the bean type that was being bound.\n\tClass<?> getBeanType();\n}", "des": "Exception thrown when @ConfigurationProperties binding fails."}
{"index": 5831, "code": "public static enum ConfigurationPropertyName.Form extends Enum<ConfigurationPropertyName.Form> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConfigurationPropertyName.Form valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConfigurationPropertyName.Form[] values();\n}", "des": "The various forms that a non-indexed element value can take."}
{"index": 5832, "code": "public enum ConfigurationPropertyState extends Enum<ConfigurationPropertyState> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConfigurationPropertyState valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConfigurationPropertyState[] values();\n}", "des": "The state of content from a ConfigurationPropertySource."}
{"index": 5833, "code": "public static enum Cookie.SameSite extends Enum<Cookie.SameSite> {\n\tString attributeValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Cookie.SameSite valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Cookie.SameSite[] values();\n}", "des": "SameSite values."}
{"index": 5834, "code": "public enum DatabaseInitializationMode extends Enum<DatabaseInitializationMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DatabaseInitializationMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DatabaseInitializationMode[] values();\n}", "des": "Supported database initialization modes."}
{"index": 5835, "code": "public final class DataSourceUnwrapper extends Object {\n\t// Return an object that implements the given target type, unwrapping delegate or proxy if necessary using the specified unwrapInterface.\n\tstatic <I, T extends I>T unwrap(DataSource dataSource, Class<I> unwrapInterface, Class<T> target);\n\t// Return an object that implements the given target type, unwrapping delegate or proxy if necessary.\n\tstatic <T> T unwrap(DataSource dataSource, Class<T> target);\n}", "des": "Unwraps a DataSource that may have been proxied or wrapped in a custom Wrapper such as DelegatingDataSource."}
{"index": 5836, "code": "public class DefaultSslBundleRegistry extends Object implements SslBundleRegistry, SslBundles {\n\t// Return an SslBundle with the provided name.\n\tSslBundle getBundle(String name);\n\t// Register a named SslBundle.\n\tvoid registerBundle(String name, SslBundle bundle);\n}", "des": "Default SslBundleRegistry implementation."}
{"index": 5837, "code": "@FunctionalInterface public interface DeferredLogFactory {\n\t// Create a new DeferredLog for the given destination.\n\tdefault org.apache.commons.logging.Log getLog(Class<?> destination);\n\t// Create a new DeferredLog for the given destination.\n\torg.apache.commons.logging.Log getLog(Supplier<org.apache.commons.logging.Log> destination);\n\t// Create a new DeferredLog for the given destination.\n\tdefault org.apache.commons.logging.Log getLog(org.apache.commons.logging.Log destination);\n}", "des": "Factory that can be used to create multiple DeferredLog instances that will switch over when appropriate."}
{"index": 5838, "code": "public enum DispatcherType extends Enum<DispatcherType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DispatcherType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DispatcherType[] values();\n}", "des": "Enumeration of filter dispatcher types, identical to DispatcherType and used in configuration as the servlet API may not be present."}
{"index": 5839, "code": "public static enum Encoding.Type extends Enum<Encoding.Type> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Encoding.Type valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Encoding.Type[] values();\n}", "des": "Type of HTTP message to consider for encoding configuration."}
{"index": 5840, "code": "public static enum ErrorAttributeOptions.Include extends Enum<ErrorAttributeOptions.Include> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ErrorAttributeOptions.Include valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ErrorAttributeOptions.Include[] values();\n}", "des": "Error attributes that can be included in an error response."}
{"index": 5841, "code": "public interface ErrorAttributes {\n\t// Return the underlying cause of the error or null if the error cannot be extracted.\n\tThrowable getError(org.springframework.web.context.request.WebRequest webRequest);\n\t// Returns a Map of the error attributes.\n\tdefault Map<String,Object> getErrorAttributes(org.springframework.web.context.request.WebRequest webRequest, ErrorAttributeOptions options);\n}", "des": "Provides access to error attributes which can be logged or presented to the user."}
{"index": 5842, "code": "public class FailureAnalysis extends Object {\n\t// Returns the action, if any, to be taken to address the failure.\n\tString getAction();\n\t// Returns the cause of the failure.\n\tThrowable getCause();\n\t// Returns a description of the failure.\n\tString getDescription();\n}", "des": "The result of analyzing a failure."}
{"index": 5843, "code": "public class FilterRegistrationBean<T extends jakarta.servlet.Filter> extends AbstractFilterRegistrationBean<T> {\n\t// Return the Filter to be registered.\n\tT getFilter();\n\t// Set the filter to be registered.\n\tvoid setFilter(T filter);\n}", "des": "A ServletContextInitializer to register Filters in a Servlet 3.0+ container."}
{"index": 5844, "code": "@ImportRuntimeHints(org.springframework.boot.info.GitProperties.GitPropertiesRuntimeHints.class) public class GitProperties extends InfoProperties {\n\t// Return the name of the branch or null.\n\tString getBranch();\n\t// Return the full id of the commit or null.\n\tString getCommitId();\n\t// Return the timestamp of the commit or null.\n\tInstant getCommitTime();\n\t// Return the abbreviated id of the commit or null.\n\tString getShortCommitId();\n}", "des": "Provide git-related information such as commit id and time."}
{"index": 5845, "code": "public enum GracefulShutdownResult extends Enum<GracefulShutdownResult> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic GracefulShutdownResult valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic GracefulShutdownResult[] values();\n}", "des": "The result of a graceful shutdown request."}
{"index": 5846, "code": "public class GsonJsonParser extends AbstractJsonParser {\n\t// Parse the specified JSON string into a List.\n\tList<Object> parseList(String json);\n\t// Parse the specified JSON string into a Map.\n\tMap<String,Object> parseMap(String json);\n}", "des": "Thin wrapper to adapt Gson to a JsonParser."}
{"index": 5847, "code": "public final class ImportCandidates extends Object implements Iterable<String> {\n\t// Returns the list of loaded import candidates.\n\tList<String> getCandidates();\n\tIterator<String> iterator();\n\t// Loads the names of import candidates from the classpath.\n\tstatic ImportCandidates load(Class<?> annotation, ClassLoader classLoader);\n}", "des": "Contains @Configuration import candidates, usually auto-configurations."}
{"index": 5848, "code": "public class InactiveConfigDataAccessException extends ConfigDataException {\n\t// Return the ConfigDataResource of the property source or null if the source was not loaded from ConfigData.\n\tConfigDataResource getLocation();\n\t// Return the origin or the property or null.\n\tOrigin getOrigin();\n\t// Return the name of the property.\n\tString getPropertyName();\n\t// Return the inactive property source that contained the property.\n\torg.springframework.core.env.PropertySource<?> getPropertySource();\n}", "des": "Exception thrown when an attempt is made to resolve a property against an inactive ConfigData property source."}
{"index": 5849, "code": "public class InfoProperties extends Object implements Iterable<InfoProperties.Entry> {\n\t// Return the value of the specified property or null.\n\tString get(String key);\n\t// Return the value of the specified property as an Instant or null if the value is not a valid Long representation of an epoch time.\n\tInstant getInstant(String key);\n\tIterator<InfoProperties.Entry> iterator();\n\t// Return a PropertySource of this instance.\n\torg.springframework.core.env.PropertySource<?> toPropertySource();\n}", "des": "Base class for components exposing unstructured data with dedicated methods for well known keys."}
{"index": 5850, "code": "public class Instantiator<T> extends Object {\n\t// Instantiate the given set of class name, injecting constructor arguments as necessary.\n\tList<T> instantiate(ClassLoader classLoader, Collection<String> names);\n\t// Instantiate the given set of class name, injecting constructor arguments as necessary.\n\tList<T> instantiate(Collection<String> names);\n\t// Instantiate the given set of classes, injecting constructor arguments as necessary.\n\tList<T> instantiateTypes(Collection<Class<?>> types);\n}", "des": "Simple factory used to instantiate objects by injecting available parameters."}
{"index": 5851, "code": "public static interface Instantiator.AvailableParameters {\n\t// Add a parameter with an instance value.\n\tvoid add(Class<?> type, Object instance);\n\t// Add a parameter with an instance factory.\n\tvoid add(Class<?> type, Function<Class<?>,Object> factory);\n}", "des": "Callback used to register available parameters."}
{"index": 5852, "code": "public class InvalidConfigDataPropertyException extends ConfigDataException {\n\t// Return the ConfigDataResource of the invalid property or null if the source was not loaded from ConfigData.\n\tConfigDataResource getLocation();\n\t// Return source property that caused the exception.\n\tConfigurationProperty getProperty();\n\t// Return the replacement property that should be used instead or null if not replacement is available.\n\tConfigurationPropertyName getReplacement();\n}", "des": "Exception thrown if an invalid property is found when processing config data."}
{"index": 5853, "code": "public class InvalidConfigurationPropertyValueException extends RuntimeException {\n\t// Return the name of the property.\n\tString getName();\n\t// Return the reason why the value is invalid.\n\tString getReason();\n\t// Return the invalid value, can be null.\n\tObject getValue();\n}", "des": "Exception thrown when a configuration property value is invalid."}
{"index": 5854, "code": "public class JacksonJsonParser extends AbstractJsonParser {\n\t// Parse the specified JSON string into a List.\n\tList<Object> parseList(String json);\n\t// Parse the specified JSON string into a Map.\n\tMap<String,Object> parseMap(String json);\n}", "des": "Thin wrapper to adapt Jackson 2 ObjectMapper to JsonParser."}
{"index": 5855, "code": "public class JettyWebServer extends Object implements WebServer {\n\t// Return the port this server is listening on.\n\tint getPort();\n\t// Returns access to the underlying Jetty Server.\n\torg.eclipse.jetty.server.Server getServer();\n\t// Initiates a graceful shutdown of the web server.\n\tvoid shutDownGracefully(GracefulShutdownCallback callback);\n\t// Starts the web server.\n\tvoid start();\n\t// Stops the web server.\n\tvoid stop();\n}", "des": "WebServer that can be used to control a Jetty web server."}
{"index": 5856, "code": "public class JksSslStoreBundle extends Object implements SslStoreBundle {\n\t// Return a key store generated from the trust material or null.\n\tKeyStore getKeyStore();\n\t// Return the password for the key in the key store or null.\n\tString getKeyStorePassword();\n\t// Return a trust store generated from the trust material or null.\n\tKeyStore getTrustStore();\n}", "des": "SslStoreBundle backed by a Java keystore."}
{"index": 5857, "code": "public static enum JsonComponent.Scope extends Enum<JsonComponent.Scope> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic JsonComponent.Scope valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic JsonComponent.Scope[] values();\n}", "des": "The various scopes under which a serializer/deserializer can be registered."}
{"index": 5858, "code": "public static class JsonMixinModuleEntries.Builder extends Object {\n\t// Add a mapping for the specified classes.\n\tJsonMixinModuleEntries.Builder and(Class<?> type, Class<?> mixinClass);\n\t// Add a mapping for the specified class names.\n\tJsonMixinModuleEntries.Builder and(String typeClassName, String mixinClassName);\n}", "des": "Builder for JsonMixinModuleEntries."}
{"index": 5859, "code": "public interface JsonParser {\n\t// Parse the specified JSON string into a List.\n\tList<Object> parseList(String json);\n\t// Parse the specified JSON string into a Map.\n\tMap<String,Object> parseMap(String json);\n}", "des": "Parser that can read JSON formatted strings into Maps or Lists."}
{"index": 5860, "code": "public class Jsp extends Object {\n\t// Return the class name of the servlet to use for JSPs.\n\tString getClassName();\n\t// Return the init parameters used to configure the JSP servlet.\n\tMap<String,String> getInitParameters();\n\t// Return whether the JSP servlet is registered.\n\tboolean getRegistered();\n\tvoid setClassName(String className);\n\tvoid setInitParameters(Map<String,String> initParameters);\n\tvoid setRegistered(boolean registered);\n}", "des": "Configuration for the server's JSP servlet."}
{"index": 5861, "code": "public static final class LambdaSafe.Callback<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callback<C,A>> {\n\t// Invoke the callback instance where the callback method returns void.\n\tvoid invoke(Consumer<C> invoker);\n\t// Invoke the callback instance where the callback method returns a result.\n\t<R> LambdaSafe.InvocationResult<R> invokeAnd(Function<C,R> invoker);\n}", "des": "Represents a single callback that can be invoked in a lambda safe way."}
{"index": 5862, "code": "public static final class LambdaSafe.Callbacks<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callbacks<C,A>> {\n\t// Invoke the callback instances where the callback method returns void.\n\tvoid invoke(Consumer<C> invoker);\n\t// Invoke the callback instances where the callback method returns a result.\n\t<R> Stream<R> invokeAnd(Function<C,R> invoker);\n}", "des": "Represents a collection of callbacks that can be invoked in a lambda safe way."}
{"index": 5863, "code": "protected abstract static class LambdaSafe.LambdaSafeCallback<C,A,SELF extends LambdaSafe.LambdaSafeCallback<C,A,SELF>> extends Object {\n\tprotected final <R> LambdaSafe.InvocationResult<R> invoke(C callbackInstance, Supplier<R> supplier);\n\t// Use the specified logger source to report any lambda failures.\n\tSELF withLogger(Class<?> loggerSource);\n\t// Use the specified logger to report any lambda failures.\n\tSELF withLogger(org.apache.commons.logging.Log logger);\n}", "des": "Abstract base class for lambda safe callbacks."}
{"index": 5864, "code": "@FunctionalInterface public interface LazyInitializationExcludeFilter {\n\t// Factory method that creates a filter for the given bean types.\n\tstatic LazyInitializationExcludeFilter forBeanTypes(Class<?>... types);\n\t// Returns true if the specified bean definition should be excluded from having lazy-init automatically set.\n\tboolean isExcluded(String beanName, org.springframework.beans.factory.config.BeanDefinition beanDefinition, Class<?> beanType);\n}", "des": "Filter that can be used to exclude beans definitions from having their lazy-init set by the LazyInitializationBeanFactoryPostProcessor."}
{"index": 5865, "code": "public enum LivenessState extends Enum<LivenessState> implements AvailabilityState {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic LivenessState valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic LivenessState[] values();\n}", "des": "\"Liveness\" state of the application."}
{"index": 5866, "code": "public class LogFile extends Object {\n\t// Apply log file details to LOG_PATH and LOG_FILE map entries.\n\tvoid applyTo(Properties properties);\n\t// Apply log file details to LOG_PATH and LOG_FILE system properties.\n\tvoid applyToSystemProperties();\n\t// Get a LogFile from the given Spring Environment.\n\tstatic LogFile get(org.springframework.core.env.PropertyResolver propertyResolver);\n}", "des": "A reference to a log output file."}
{"index": 5867, "code": "public static enum LoggerConfiguration.ConfigurationScope extends Enum<LoggerConfiguration.ConfigurationScope> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic LoggerConfiguration.ConfigurationScope valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic LoggerConfiguration.ConfigurationScope[] values();\n}", "des": "Supported logger configurations scopes."}
{"index": 5868, "code": "public interface LoggingSystemFactory {\n\t// Return a LoggingSystemFactory backed by spring.factories.\n\tstatic LoggingSystemFactory fromSpringFactories();\n\t// Return a logging system implementation or null if no logging system is available.\n\tLoggingSystem getLoggingSystem(ClassLoader classLoader);\n}", "des": "Factory class used by LoggingSystem.get(ClassLoader) to find an actual implementation."}
{"index": 5869, "code": "public class MutuallyExclusiveConfigurationPropertiesException extends RuntimeException {\n\t// Return the names of the properties that have been configured.\n\tSet<String> getConfiguredNames();\n\t// Return the names of the properties that are mutually exclusive.\n\tSet<String> getMutuallyExclusiveNames();\n\t// Throw a new MutuallyExclusiveConfigurationPropertiesException if multiple non-null values are defined in a set of entries.\n\tstatic void throwIfMultipleNonNullValuesIn(Consumer<Map<String,Object>> entries);\n}", "des": "Exception thrown when more than one mutually exclusive configuration property has been configured."}
{"index": 5870, "code": "public class NettyRSocketServer extends Object implements RSocketServer {\n\t// Return the address this server is listening on.\n\tInetSocketAddress address();\n\t// Starts the RSocket server.\n\tvoid start();\n\t// Stops the RSocket server.\n\tvoid stop();\n}", "des": "RSocketServer that is based on a Reactor Netty server."}
{"index": 5871, "code": "public class NettyWebServer extends Object implements WebServer {\n\t// Return the port this server is listening on.\n\tint getPort();\n\tvoid setRouteProviders(List<NettyRouteProvider> routeProviders);\n\t// Initiates a graceful shutdown of the web server.\n\tvoid shutDownGracefully(GracefulShutdownCallback callback);\n\t// Starts the web server.\n\tvoid start();\n\t// Stops the web server.\n\tvoid stop();\n}", "des": "WebServer that can be used to control a Reactor Netty web server."}
{"index": 5872, "code": "public interface Origin {\n\t// Find the Origin that an object originated from.\n\tstatic Origin from(Object source);\n\t// Return the parent origin for this instance if there is one.\n\tdefault Origin getParent();\n\t// Find the parents of the Origin that an object originated from.\n\tstatic List<Origin> parentsFrom(Object source);\n}", "des": "Interface that uniquely represents the origin of an item."}
{"index": 5873, "code": "public final class OriginTrackedMapPropertySource extends org.springframework.core.env.MapPropertySource implements OriginLookup<String> {\n\t// Return the origin of the given key or null if the origin cannot be determined.\n\tOrigin getOrigin(String name);\n\tObject getProperty(String name);\n\t// Return true if this lookup is immutable and has contents that will never change.\n\tboolean isImmutable();\n}", "des": "OriginLookup backed by a Map containing OriginTrackedValues."}
{"index": 5874, "code": "public class OriginTrackedValue extends Object implements OriginProvider {\n\tboolean equals(Object obj);\n\t// Return the source origin or null if the origin is not known.\n\tOrigin getOrigin();\n\t// Return the tracked value.\n\tObject getValue();\n\tstatic OriginTrackedValue of(Object value);\n\t// Create an OriginTrackedValue containing the specified value and origin.\n\tstatic OriginTrackedValue of(Object value, Origin origin);\n}", "des": "A wrapper for an Object value and Origin."}
{"index": 5875, "code": "public class PemSslStoreBundle extends Object implements SslStoreBundle {\n\t// Return a key store generated from the trust material or null.\n\tKeyStore getKeyStore();\n\t// Return the password for the key in the key store or null.\n\tString getKeyStorePassword();\n\t// Return a trust store generated from the trust material or null.\n\tKeyStore getTrustStore();\n}", "des": "SslStoreBundle backed by PEM-encoded certificates and private keys."}
{"index": 5876, "code": "public class Profiles extends Object implements Iterable<String> {\n\t// Return the accepted profiles.\n\tList<String> getAccepted();\n\t// Return the active profiles.\n\tList<String> getActive();\n\t// Return the default profiles.\n\tList<String> getDefault();\n\t// Return if the given profile is active.\n\tboolean isAccepted(String profile);\n\t// Return an iterator for all accepted profiles.\n\tIterator<String> iterator();\n}", "des": "Provides access to environment profiles that have either been set directly on the Environment or will be set based on configuration data property values."}
{"index": 5877, "code": "public class PropertiesPropertySourceLoader extends Object implements PropertySourceLoader {\n\t// Returns the file extensions that the loader supports (excluding the '.').\n\tString[] getFileExtensions();\n\t// Load the resource into one or more property sources.\n\tList<org.springframework.core.env.PropertySource<?>> load(String name, org.springframework.core.io.Resource resource);\n}", "des": "Strategy to load '.properties' files into a PropertySource."}
{"index": 5878, "code": "public interface PropertySourceLoader {\n\t// Returns the file extensions that the loader supports (excluding the '.').\n\tString[] getFileExtensions();\n\t// Load the resource into one or more property sources.\n\tList<org.springframework.core.env.PropertySource<?>> load(String name, org.springframework.core.io.Resource resource);\n}", "des": "Strategy interface located through SpringFactoriesLoader and used to load a PropertySource."}
{"index": 5879, "code": "public class PropertySourceOrigin extends Object implements Origin {\n\t// Get an Origin for the given PropertySource and propertyName.\n\tstatic Origin get(org.springframework.core.env.PropertySource<?> propertySource, String name);\n\t// Return the property name that was used when obtaining the original value from the property source.\n\tString getPropertyName();\n\t// Return the origin PropertySource.\n\torg.springframework.core.env.PropertySource<?> getPropertySource();\n}", "des": "Origin from a PropertySource."}
{"index": 5880, "code": "public class R2dbcScriptDatabaseInitializer extends AbstractScriptDatabaseInitializer {\n\t// Returns whether the database that is to be initialized is embedded.\n\tprotected boolean isEmbeddedDatabase();\n\t// Initialize the database by running the given scripts.\n\tprotected void runScripts(AbstractScriptDatabaseInitializer.Scripts scripts);\n}", "des": "An InitializingBean that initializes a database represented by an R2DBC ConnectionFactory."}
{"index": 5881, "code": "public enum ReadinessState extends Enum<ReadinessState> implements AvailabilityState {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ReadinessState valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ReadinessState[] values();\n}", "des": "\"Readiness\" state of the application."}
{"index": 5882, "code": "public interface RSocketServer {\n\t// Return the address this server is listening on.\n\tInetSocketAddress address();\n\t// Starts the RSocket server.\n\tvoid start();\n\t// Stops the RSocket server.\n\tvoid stop();\n}", "des": "Simple interface that represents a fully configured RSocket server."}
{"index": 5883, "code": "public static enum RSocketServer.Transport extends Enum<RSocketServer.Transport> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RSocketServer.Transport valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RSocketServer.Transport[] values();\n}", "des": "Choice of transport protocol for the RSocket server."}
{"index": 5884, "code": "public class RSocketServerInitializedEvent extends org.springframework.context.ApplicationEvent {\n\t// Access the RSocketServer.\n\tRSocketServer getServer();\n\t// Access the source of the event (an RSocketServer).\n\tRSocketServer getSource();\n}", "des": "Event to be published after the application context is refreshed and the RSocketServer is ready."}
{"index": 5885, "code": "public enum SchemaManagement extends Enum<SchemaManagement> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SchemaManagement valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SchemaManagement[] values();\n}", "des": "An enumeration of the available schema management options."}
{"index": 5886, "code": "public static class Session.Cookie extends Cookie {\n\t// Deprecated, for removal: This API element is subject to removal in a future version. since 3.0.0 without replacement\n\tString getComment();\n\t// Deprecated, for removal: This API element is subject to removal in a future version.\n\tvoid setComment(String comment);\n}", "des": "Session cookie properties."}
{"index": 5887, "code": "public static enum Session.SessionTrackingMode extends Enum<Session.SessionTrackingMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Session.SessionTrackingMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Session.SessionTrackingMode[] values();\n}", "des": "Available session tracking modes (mirrors SessionTrackingMode."}
{"index": 5888, "code": "public enum Shutdown extends Enum<Shutdown> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Shutdown valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Shutdown[] values();\n}", "des": "Configuration for shutting down a WebServer."}
{"index": 5889, "code": "public static class SpringApplication.Augmented extends Object {\n\t// Run the application using the given args.\n\tSpringApplication.Running run(String... args);\n\t// Return a new SpringApplication.Augmented instance with additional sources that should be applied when the application runs.\n\tSpringApplication.Augmented with(Class<?>... sources);\n}", "des": "Used to configure and run an augmented SpringApplication where additional configuration should be applied."}
{"index": 5890, "code": "public interface SpringApplicationAdminMXBean {\n\t// Return the value of the specified key from the application Environment.\n\tString getProperty(String key);\n\t// Specify if the application runs in an embedded web container.\n\tboolean isEmbeddedWebApplication();\n\t// Specify if the application has fully started and is now ready.\n\tboolean isReady();\n\t// Shutdown the application.\n\tvoid shutdown();\n}", "des": "An MBean contract to control and monitor a running SpringApplication over JMX."}
{"index": 5891, "code": "public interface SpringApplicationShutdownHandlers {\n\t// Add an action to the handlers that will be run when the JVM exits.\n\tvoid add(Runnable action);\n\t// Remove a previously added an action so that it no longer runs when the JVM exits.\n\tvoid remove(Runnable action);\n}", "des": "Interface that can be used to add or remove code that should run when the JVM is shutdown."}
{"index": 5892, "code": "public static enum Ssl.ClientAuth extends Enum<Ssl.ClientAuth> {\n\t// Map an optional Ssl.ClientAuth value to a different type.\n\tstatic <R> R map(Ssl.ClientAuth clientAuth, R none, R want, R need);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Ssl.ClientAuth valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Ssl.ClientAuth[] values();\n}", "des": "Client authentication types."}
{"index": 5893, "code": "public interface SslStoreBundle {\n\t// Return a key store generated from the trust material or null.\n\tKeyStore getKeyStore();\n\t// Return the password for the key in the key store or null.\n\tString getKeyStorePassword();\n\t// Return a trust store generated from the trust material or null.\n\tKeyStore getTrustStore();\n\t// Factory method to create a new SslStoreBundle instance.\n\tstatic SslStoreBundle of(KeyStore keyStore, String keyStorePassword, KeyStore trustStore);\n}", "des": "A bundle of key and trust stores that can be used to establish an SSL connection."}
{"index": 5894, "code": "public class StandardConfigDataResource extends ConfigDataResource {\n\tboolean equals(Object obj);\n\t// Return the profile or null if the resource is not profile specific.\n\tString getProfile();\n\t// Return the underlying Spring Resource being loaded.\n\torg.springframework.core.io.Resource getResource();\n}", "des": "ConfigDataResource backed by a Resource."}
{"index": 5895, "code": "public class StartupTimeline extends Object {\n\t// Return the recorded events.\n\tList<StartupTimeline.TimelineEvent> getEvents();\n\t// Return the start time of this timeline.\n\tInstant getStartTime();\n}", "des": "Represent the timeline of steps recorded by BufferingApplicationStartup."}
{"index": 5896, "code": "public static class StartupTimeline.TimelineEvent extends Object {\n\t// Return the duration of this event, i.e.\n\tDuration getDuration();\n\t// Return the end time of this event.\n\tInstant getEndTime();\n\t// Return the start time of this event.\n\tInstant getStartTime();\n\t// Return the StartupStep information for this event.\n\torg.springframework.core.metrics.StartupStep getStartupStep();\n}", "des": "Event on the current StartupTimeline."}
{"index": 5897, "code": "public class TextResourceOrigin extends Object implements Origin {\n\tboolean equals(Object obj);\n\t// Return the location of the property within the source (if known).\n\tTextResourceOrigin.Location getLocation();\n\t// Return the parent origin for this instance if there is one.\n\tOrigin getParent();\n\t// Return the resource where the property originated.\n\torg.springframework.core.io.Resource getResource();\n}", "des": "Origin for an item loaded from a text resource."}
{"index": 5898, "code": "public static final class TextResourceOrigin.Location extends Object {\n\tboolean equals(Object obj);\n\t// Return the column of the text resource where the property originated.\n\tint getColumn();\n\t// Return the line of the text resource where the property originated.\n\tint getLine();\n}", "des": "A location (line and column number) within the resource."}
{"index": 5899, "code": "public class TomcatWebServer extends Object implements WebServer {\n\t// Return the port this server is listening on.\n\tint getPort();\n\t// Returns access to the underlying Tomcat server.\n\torg.apache.catalina.startup.Tomcat getTomcat();\n\t// Initiates a graceful shutdown of the web server.\n\tvoid shutDownGracefully(GracefulShutdownCallback callback);\n\t// Starts the web server.\n\tvoid start();\n\t// Stops the web server.\n\tvoid stop();\n}", "des": "WebServer that can be used to control a Tomcat web server."}
{"index": 5900, "code": "public class UndertowWebServer extends Object implements WebServer {\n\tprotected io.undertow.server.HttpHandler createHttpHandler();\n\t// Return the port this server is listening on.\n\tint getPort();\n\tprotected String getStartLogMessage();\n\t// Initiates a graceful shutdown of the web server.\n\tvoid shutDownGracefully(GracefulShutdownCallback callback);\n\t// Starts the web server.\n\tvoid start();\n\t// Stops the web server.\n\tvoid stop();\n}", "des": "WebServer that can be used to control an Undertow web server."}
{"index": 5901, "code": "public enum WebApplicationType extends Enum<WebApplicationType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic WebApplicationType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic WebApplicationType[] values();\n}", "des": "An enumeration of possible types of web application."}
{"index": 5902, "code": "public interface WebServer {\n\t// Return the port this server is listening on.\n\tint getPort();\n\t// Initiates a graceful shutdown of the web server.\n\tdefault void shutDownGracefully(GracefulShutdownCallback callback);\n\t// Starts the web server.\n\tvoid start();\n\t// Stops the web server.\n\tvoid stop();\n}", "des": "Simple interface that represents a fully configured web server (for example Tomcat, Jetty, Netty)."}
{"index": 5903, "code": "public abstract class WebServerInitializedEvent extends org.springframework.context.ApplicationEvent {\n\t// Access the application context that the server was created in.\n\tabstract WebServerApplicationContext getApplicationContext();\n\t// Access the source of the event (an WebServer).\n\tWebServer getSource();\n\t// Access the WebServer.\n\tWebServer getWebServer();\n}", "des": "Event to be published when the WebServer is ready."}
{"index": 5904, "code": "public class YamlPropertySourceLoader extends Object implements PropertySourceLoader {\n\t// Returns the file extensions that the loader supports (excluding the '.').\n\tString[] getFileExtensions();\n\t// Load the resource into one or more property sources.\n\tList<org.springframework.core.env.PropertySource<?>> load(String name, org.springframework.core.io.Resource resource);\n}", "des": "Strategy to load '.yml' (or '.yaml') files into a PropertySource."}
{"index": 5905, "code": "public interface PropertiesParser {\n\t// While parsing the uri using parseUri method each parsed property found invokes this callback.\n\tString parseProperty(String key, String value, PropertiesLookup properties);\n\t// Parses the string and replaces the property placeholders with values from the given properties.\n\tString parseUri(String text, PropertiesLookup properties, boolean fallback, boolean keepUnresolvedOptional, boolean nestedPlaceholder);\n}", "des": "A parser to parse properties for a given input"}
{"index": 5906, "code": "public final class AesBytesEncryptor extends Object implements BytesEncryptor {\n\t// Decrypt the byte array.\n\tbyte[] decrypt(byte[] encryptedBytes);\n\t// Encrypt the byte array.\n\tbyte[] encrypt(byte[] bytes);\n}", "des": "Encryptor that uses AES encryption."}
{"index": 5907, "code": "public class BCryptPasswordEncoder extends Object implements PasswordEncoder {\n\t// Encode the raw password.\n\tString encode(CharSequence rawPassword);\n\t// Verify the encoded password obtained from storage matches the submitted raw password after it too is encoded.\n\tboolean matches(CharSequence rawPassword, String encodedPassword);\n\t// Returns true if the encoded password should be encoded again for better security, else false.\n\tboolean upgradeEncoding(String encodedPassword);\n}", "des": "Implementation of PasswordEncoder that uses the BCrypt strong hashing function."}
{"index": 5908, "code": "public static enum BCryptPasswordEncoder.BCryptVersion extends Enum<BCryptPasswordEncoder.BCryptVersion> {\n\tString getVersion();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BCryptPasswordEncoder.BCryptVersion valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BCryptPasswordEncoder.BCryptVersion[] values();\n}", "des": "Stores the default bcrypt version for use in configuration."}
{"index": 5909, "code": "public class BouncyCastleAesCbcBytesEncryptor extends Object {\n\t// Decrypt the byte array.\n\tbyte[] decrypt(byte[] encryptedBytes);\n\t// Encrypt the byte array.\n\tbyte[] encrypt(byte[] bytes);\n}", "des": "An Encryptor equivalent to AesBytesEncryptor using AesBytesEncryptor.CipherAlgorithm.CBC that uses Bouncy Castle instead of JCE."}
{"index": 5910, "code": "public class BouncyCastleAesGcmBytesEncryptor extends Object {\n\t// Decrypt the byte array.\n\tbyte[] decrypt(byte[] encryptedBytes);\n\t// Encrypt the byte array.\n\tbyte[] encrypt(byte[] bytes);\n}", "des": "An Encryptor equivalent to AesBytesEncryptor using AesBytesEncryptor.CipherAlgorithm.GCM that uses Bouncy Castle instead of JCE."}
{"index": 5911, "code": "public interface BytesEncryptor {\n\t// Decrypt the byte array.\n\tbyte[] decrypt(byte[] encryptedByteArray);\n\t// Encrypt the byte array.\n\tbyte[] encrypt(byte[] byteArray);\n}", "des": "Service interface for symmetric data encryption."}
{"index": 5912, "code": "public interface BytesKeyGenerator {\n\t// Generate a new key.\n\tbyte[] generateKey();\n\t// Get the length, in bytes, of keys created by this generator.\n\tint getKeyLength();\n}", "des": "A generator for unique byte array-based keys."}
{"index": 5913, "code": "public final class EncodingUtils extends Object {\n\t// Combine the individual byte arrays into one array.\n\tstatic byte[] concatenate(byte[]... arrays);\n\t// Extract a sub array of bytes out of the byte array.\n\tstatic byte[] subArray(byte[] array, int beginIndex, int endIndex);\n}", "des": "Static helper for encoding data."}
{"index": 5914, "code": "public interface PasswordEncoder {\n\t// Encode the raw password.\n\tString encode(CharSequence rawPassword);\n\t// Verify the encoded password obtained from storage matches the submitted raw password after it too is encoded.\n\tboolean matches(CharSequence rawPassword, String encodedPassword);\n\t// Returns true if the encoded password should be encoded again for better security, else false.\n\tdefault boolean upgradeEncoding(String encodedPassword);\n}", "des": "Service interface for encoding passwords."}
{"index": 5915, "code": "public static enum Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm extends Enum<Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm[] values();\n}", "des": "The Algorithm used for creating the SecretKeyFactory"}
{"index": 5916, "code": "public interface TextEncryptor {\n\t// Decrypt the encrypted text string.\n\tString decrypt(String encryptedText);\n\t// Encrypt the raw text string.\n\tString encrypt(String text);\n}", "des": "Service interface for symmetric encryption of text strings."}
{"index": 5917, "code": "public final class Utf8 extends Object {\n\t// Decode the bytes in UTF-8 form into a String.\n\tstatic String decode(byte[] bytes);\n\t// Get the bytes of the String in UTF-8 encoded form.\n\tstatic byte[] encode(CharSequence string);\n}", "des": "UTF-8 Charset encoder/decoder."}
{"index": 5918, "code": "@Public @Stable public enum CompressionType extends Enum<CompressionType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CompressionType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CompressionType[] values();\n}", "des": "The compression type that can be specified on a Producer."}
{"index": 5919, "code": "@Public @Stable public enum ConsumerCryptoFailureAction extends Enum<ConsumerCryptoFailureAction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ConsumerCryptoFailureAction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ConsumerCryptoFailureAction[] values();\n}", "des": "The action a consumer should take when a consumer receives a message that it cannot decrypt."}
{"index": 5920, "code": "@Public @Stable public interface ConsumerEventListener extends Serializable {\n\t// Notified when the consumer group is changed, and the consumer becomes the active consumer.\n\tvoid becameActive(Consumer<?> consumer, int partitionId);\n\t// Notified when the consumer group is changed, and the consumer is still inactive or becomes inactive.\n\tvoid becameInactive(Consumer<?> consumer, int partitionId);\n}", "des": "Listener on the consumer state changes."}
{"index": 5921, "code": "public interface GenericObject {\n\t// Return the internal native representation of the Object, like a AVRO GenericRecord, a String or a byte[].\n\tObject getNativeObject();\n\t// Return the schema tyoe.\n\tSchemaType getSchemaType();\n}", "des": "This is an abstraction over the logical value that is store into a Message."}
{"index": 5922, "code": "@Public @Stable public interface GenericRecordBuilder {\n\t// Build a generic record.\n\tGenericRecord build();\n\t// Clears the value of the given field.\n\tGenericRecordBuilder clear(String fieldName);\n\t// Clears the value of the given field.\n\tGenericRecordBuilder clear(Field field);\n\t// Sets the value of a field.\n\tGenericRecordBuilder set(String fieldName, Object value);\n\t// Sets the value of a field.\n\tGenericRecordBuilder set(Field field, Object value);\n}", "des": "Generic Record Builder to build a GenericRecord."}
{"index": 5923, "code": "@Public @Stable public interface GenericSchema<T extends GenericRecord> extends Schema<T> {\n\t// Returns the list of fields.\n\tList<Field> getFields();\n\t// Create a builder to build GenericRecord.\n\tGenericRecordBuilder newRecordBuilder();\n\tstatic GenericSchema of(SchemaInfo schemaInfo);\n\tstatic GenericSchema of(SchemaInfo schemaInfo, boolean useProvidedSchemaAsReaderSchema);\n}", "des": "A schema that serializes and deserializes between GenericRecord and bytes."}
{"index": 5924, "code": "@Public @Stable public enum HashingScheme extends Enum<HashingScheme> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic HashingScheme valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic HashingScheme[] values();\n}", "des": "Standard hashing functions available when choosing the partition to use for a particular message."}
{"index": 5925, "code": "@Public @Stable public enum KeySharedMode extends Enum<KeySharedMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic KeySharedMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic KeySharedMode[] values();\n}", "des": "KeyShared mode of KeyShared subscription."}
{"index": 5926, "code": "@Public @Stable public class KeyValue<K,V> extends Object {\n\t// Decode the value into a key/value pair.\n\tstatic <K, V> KeyValue<K,V> decode(byte[] data, KeyValue.KeyValueDecoder<K,V> decoder);\n\t// Encode a key and value pair into a bytes array.\n\tstatic <K, V> byte[] encode(K key, Schema<K> keyWriter, V value, Schema<V> valueWriter);\n\tboolean equals(Object obj);\n\tK getKey();\n\tV getValue();\n}", "des": "A simple KeyValue class."}
{"index": 5927, "code": "@Public @Stable public enum KeyValueEncodingType extends Enum<KeyValueEncodingType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic KeyValueEncodingType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic KeyValueEncodingType[] values();\n}", "des": "Encoding types of supported KeyValueSchema for Pulsar messages."}
{"index": 5928, "code": "public interface KeyValueSchema<K,V> extends Schema<KeyValue<K,V>> {\n\t// Get the Schema of the Key.\n\tSchema<K> getKeySchema();\n\t// Get the KeyValueEncodingType.\n\tKeyValueEncodingType getKeyValueEncodingType();\n\t// Get the Schema of the Value.\n\tSchema<V> getValueSchema();\n}", "des": "This interface models a Schema that is composed of two parts."}
{"index": 5929, "code": "@Public @Stable public interface MessageId extends Comparable<MessageId>, Serializable {\n\t// De-serialize a message id from a byte array.\n\tstatic MessageId fromByteArray(byte[] data);\n\t// De-serialize a message id from a byte array with its topic information attached.\n\tstatic MessageId fromByteArrayWithTopic(byte[] data, String topicName);\n\t// Serialize the message ID into a byte array.\n\tbyte[] toByteArray();\n}", "des": "Opaque unique identifier of a single message"}
{"index": 5930, "code": "@Public @Stable public interface MessageListener<T> extends Serializable {\n\t// Get the notification when a topic is terminated.\n\tdefault void reachedEndOfTopic(Consumer<T> consumer);\n\t// This method is called whenever a new message is received.\n\tvoid received(Consumer<T> consumer, Message<T> msg);\n}", "des": "A listener that will be called in order for every message received."}
{"index": 5931, "code": "public interface MessagePayload {\n\t// Copy the bytes of the payload into the byte array.\n\tbyte[] copiedBuffer();\n\t// Release the resources if necessary.\n\tdefault void release();\n}", "des": "The abstraction of a message's payload."}
{"index": 5932, "code": "public interface MessagePayloadFactory {\n\t// Create a payload whose underlying buffer refers to a byte array.\n\tMessagePayload wrap(byte[] bytes);\n\t// Create a payload whose underlying buffer refers to a NIO buffer.\n\tMessagePayload wrap(ByteBuffer buffer);\n}", "des": "The factory class of MessagePayload."}
{"index": 5933, "code": "@Public @Stable public interface MessageRouter extends Serializable {\n\t// Deprecated. since 1.22.0.\n\tdefault int choosePartition(Message<?> msg);\n\t// Choose a partition based on msg and the topic metadata.\n\tdefault int choosePartition(Message<?> msg, TopicMetadata metadata);\n}", "des": "Interface for custom message router that can be passed to a producer to select the partition that a particular messsage should be published on."}
{"index": 5934, "code": "@Public @Stable public enum MessageRoutingMode extends Enum<MessageRoutingMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MessageRoutingMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MessageRoutingMode[] values();\n}", "des": "Default routing mode for messages to partition."}
{"index": 5935, "code": "public enum ProducerAccessMode extends Enum<ProducerAccessMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ProducerAccessMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ProducerAccessMode[] values();\n}", "des": "The type of access to the topic that the producer requires."}
{"index": 5936, "code": "@Public @Stable public enum ProducerCryptoFailureAction extends Enum<ProducerCryptoFailureAction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ProducerCryptoFailureAction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ProducerCryptoFailureAction[] values();\n}", "des": "The action the producer will take in case of encryption failures."}
{"index": 5937, "code": "@Public @Stable public enum ProxyProtocol extends Enum<ProxyProtocol> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ProxyProtocol valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ProxyProtocol[] values();\n}", "des": "Protcol type to determine type of proxy routing when client connects to proxy using {@link ClientBuilder::proxyServiceUrl}."}
{"index": 5938, "code": "@Public @Stable public interface ReaderInterceptor<T> {\n\t// This is called just before the message is returned by Reader.readNext(), ReaderListener.received(Reader, Message) or the CompletableFuture returned by Reader.readNextAsync() completes.\n\tMessage<T> beforeRead(Reader<T> reader, Message<T> message);\n\t// Close the interceptor.\n\tvoid close();\n\t// This method is called when partitions of the topic (partitioned-topic) changes.\n\tdefault void onPartitionsChange(String topicName, int partitions);\n}", "des": "Reader interceptor."}
{"index": 5939, "code": "@Public @Stable public interface ReaderListener<T> extends Serializable {\n\t// Get the notification when a topic is terminated.\n\tdefault void reachedEndOfTopic(Reader<T> reader);\n\t// This method is called whenever a new message is received.\n\tvoid received(Reader<T> reader, Message<T> msg);\n}", "des": "A listener that will be called in order for every message received."}
{"index": 5940, "code": "@Public @Stable public enum RegexSubscriptionMode extends Enum<RegexSubscriptionMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RegexSubscriptionMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RegexSubscriptionMode[] values();\n}", "des": "When subscribing to topics using a regular expression, one can specify to only pick a certain type of topics."}
{"index": 5941, "code": "@Public @Stable public interface SchemaInfo {\n\tstatic SchemaInfo.SchemaInfoBuilder builder();\n\tString getName();\n\t// Additional properties of the schema definition (implementation defined).\n\tMap<String,String> getProperties();\n\t// The schema data in AVRO JSON format.\n\tbyte[] getSchema();\n\tString getSchemaDefinition();\n\t// The created time of schema.\n\tlong getTimestamp();\n\t// The type of schema (AVRO, JSON, PROTOBUF, etc..).\n\tSchemaType getType();\n}", "des": "Information about the schema."}
{"index": 5942, "code": "@Private @Stable public interface SchemaInfoProvider {\n\t// Retrieve the latest schema info.\n\tCompletableFuture<SchemaInfo> getLatestSchema();\n\t// Retrieve the schema info of a given schemaVersion.\n\tCompletableFuture<SchemaInfo> getSchemaByVersion(byte[] schemaVersion);\n\t// Retrieve the topic name.\n\tString getTopicName();\n}", "des": "Schema Provider."}
{"index": 5943, "code": "@Public @Stable public interface ServiceUrlProvider extends AutoCloseable {\n\t// Close the resource that the provider allocated.\n\tdefault void close();\n\t// Get the current service URL the Pulsar client should connect to.\n\tString getServiceUrl();\n\t// Initialize the service url provider with Pulsar client instance.\n\tvoid initialize(PulsarClient client);\n}", "des": "The provider to provide the service url."}
{"index": 5944, "code": "public enum SizeUnit extends Enum<SizeUnit> {\n\tlong toBytes(long value);\n\tlong toGigaBytes(long value);\n\tlong toKiloBytes(long value);\n\tlong toMegaBytes(long value);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SizeUnit valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SizeUnit[] values();\n}", "des": "Size unit converter."}
{"index": 5945, "code": "@Public @Stable public enum SubscriptionInitialPosition extends Enum<SubscriptionInitialPosition> {\n\tfinal int getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SubscriptionInitialPosition valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SubscriptionInitialPosition[] values();\n}", "des": "When creating a consumer, if the subscription does not exist, a new subscription will be created."}
{"index": 5946, "code": "@Public @Stable public enum SubscriptionMode extends Enum<SubscriptionMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SubscriptionMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SubscriptionMode[] values();\n}", "des": "Types of subscription mode supported by Pulsar."}
{"index": 5947, "code": "@Public @Stable public enum SubscriptionType extends Enum<SubscriptionType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SubscriptionType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SubscriptionType[] values();\n}", "des": "Types of subscription supported by Pulsar."}
{"index": 5948, "code": "public interface TopicConsumerBuilder<T> {\n\t// Complete the configuration of the topic specific options and return control back to the ConsumerBuilder instance.\n\tConsumerBuilder<T> build();\n\t// Configure the priority level of this topic.\n\tTopicConsumerBuilder<T> priorityLevel(int priorityLevel);\n}", "des": "TopicConsumerBuilder is used to configure topic specific options to override those set at the ConsumerBuilder level."}
{"index": 5949, "code": "@Public @Evolving public interface Transaction {\n\t// Abort the transaction.\n\tCompletableFuture<Void> abort();\n\t// Commit the transaction.\n\tCompletableFuture<Void> commit();\n\t// Get transaction state.\n\tTransaction.State getState();\n\t// Get TxnID of the transaction.\n\tTxnID getTxnID();\n}", "des": "The class represents a transaction within Pulsar."}
{"index": 5950, "code": "@Public @Evolving public interface TransactionBuilder {\n\t// Build the transaction with the configured settings.\n\tCompletableFuture<Transaction> build();\n\t// Configure the maximum amount of time that the transaction coordinator will for a transaction to be completed by the client before proactively aborting the ongoing transaction.\n\tTransactionBuilder withTransactionTimeout(long timeout, TimeUnit timeoutUnit);\n}", "des": "The builder to build a transaction for Pulsar."}
{"index": 5951, "code": "public static enum TransactionCoordinatorClient.State extends Enum<TransactionCoordinatorClient.State> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TransactionCoordinatorClient.State valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TransactionCoordinatorClient.State[] values();\n}", "des": "State of the transaction coordinator client."}
{"index": 5952, "code": "public class ApplicationContextJobFactory extends Object implements JobFactory {\n\t// Create an ApplicationContext from the factory provided and pull out a bean with the name given during initialization.\n\tfinal Job createJob();\n\t// Return the name of the instance passed in on initialization.\n\tString getJobName();\n}", "des": "A JobFactory that creates its own ApplicationContext and pulls a bean out when asked to create a Job."}
{"index": 5953, "code": "public enum BatchJobObservation extends Enum<BatchJobObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BatchJobObservation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BatchJobObservation[] values();\n}", "des": "Observation created around a Job execution."}
{"index": 5954, "code": "public enum BatchStepObservation extends Enum<BatchStepObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic BatchStepObservation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic BatchStepObservation[] values();\n}", "des": "Observation created around a step execution."}
{"index": 5955, "code": "public class CallableTaskletAdapter extends Object implements Tasklet, org.springframework.beans.factory.InitializingBean {\n\t// Assert that the callable is set.\n\tvoid afterPropertiesSet();\n\t// Execute the provided Callable and return its RepeatStatus.\n\tRepeatStatus execute(StepContribution contribution, ChunkContext chunkContext);\n\t// Public setter for the Callable.\n\tvoid setCallable(Callable<RepeatStatus> callable);\n}", "des": "Adapts a Callable<RepeatStatus> to the Tasklet interface."}
{"index": 5956, "code": "public interface ChunkListener extends StepListener {\n\t// Callback after the chunk is executed, outside the transaction.\n\tdefault void afterChunk(ChunkContext context);\n\t// Callback after a chunk has been marked for rollback.\n\tdefault void afterChunkError(ChunkContext context);\n\t// Callback before the chunk is executed, but inside the transaction.\n\tdefault void beforeChunk(ChunkContext context);\n}", "des": "Listener interface for the lifecycle of a chunk."}
{"index": 5957, "code": "public class ChunkOrientedTasklet<I> extends Object implements Tasklet {\n\t// Given the current context in the form of a step contribution, do whatever is necessary to process this unit inside a transaction.\n\tRepeatStatus execute(StepContribution contribution, ChunkContext chunkContext);\n\t// Flag to indicate that items should be buffered once read.\n\tvoid setBuffering(boolean buffering);\n}", "des": "A Tasklet implementing variations on read-process-write item handling."}
{"index": 5958, "code": "public class CompositeJobParametersValidator extends Object implements JobParametersValidator, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Public setter for the validators\n\tvoid setValidators(List<JobParametersValidator> validators);\n\t// Validates the JobParameters according to the injected JobParameterValidators Validation stops and exception is thrown on first validation error\n\tvoid validate(JobParameters parameters);\n}", "des": "Composite JobParametersValidator that passes the job parameters through a sequence of injected JobParametersValidators"}
{"index": 5959, "code": "public class DecisionState extends AbstractState {\n\t// Handle some business or processing logic and return a status that can be used to drive a flow to the next State.\n\tFlowExecutionStatus handle(FlowExecutor executor);\n\t// Inquire as to whether a State is an end state.\n\tboolean isEndState();\n}", "des": "State that requires a decider to make the status decision."}
{"index": 5960, "code": "public class DefaultExecutionContextSerializer extends Object implements ExecutionContextSerializer {\n\t// Deserializes an execution context from the provided InputStream.\n\tMap<String,Object> deserialize(InputStream inputStream);\n\t// Serializes an execution context to the provided OutputStream.\n\tvoid serialize(Map<String,Object> context, OutputStream out);\n}", "des": "An implementation of the ExecutionContextSerializer that produces/consumes Base64 content."}
{"index": 5961, "code": "public class DefaultItemFailureHandler extends ItemListenerSupport<Object,Object> {\n\t// Called if an error occurs while trying to read.\n\tvoid onReadError(Exception ex);\n\t// Called if an error occurs while trying to write.\n\tvoid onWriteError(Exception ex, Chunk<? extends Object> item);\n}", "des": "Default implementation of the ItemListenerSupport class that writes all exceptions via commons logging."}
{"index": 5962, "code": "public class EndState extends AbstractState {\n\tprotected String getCode();\n\tprotected FlowExecutionStatus getStatus();\n\t// Return the FlowExecutionStatus stored.\n\tFlowExecutionStatus handle(FlowExecutor executor);\n\tprotected boolean isAbandon();\n\t// Inquire as to whether a State is an end state.\n\tboolean isEndState();\n\t// Performs any logic to update the exit status for the current flow.\n\tprotected void setExitStatus(FlowExecutor executor, String code);\n}", "des": "State implementation for ending a job if it is in progress and continuing if just starting."}
{"index": 5963, "code": "public class Entity extends Object implements Serializable {\n\t// Attempt to establish identity based on id if both exist.\n\tboolean equals(Object other);\n\tLong getId();\n\tInteger getVersion();\n\t// Increment the version number.\n\tvoid incrementVersion();\n\tvoid setId(Long id);\n\t// Public setter for the version.\n\tvoid setVersion(Integer version);\n}", "des": "Batch Domain Entity class."}
{"index": 5964, "code": "public class ExceptionClassifierSkipPolicy extends Object implements SkipPolicy {\n\t// The classifier that will be used to choose a delegate policy.\n\tvoid setExceptionClassifier(org.springframework.classify.SubclassClassifier<Throwable,SkipPolicy> classifier);\n\t// Setter for policy map.\n\tvoid setPolicyMap(Map<Class<? extends Throwable>,SkipPolicy> policyMap);\n\t// Consult the classifier and find a delegate policy, and then use that to determine the outcome.\n\tboolean shouldSkip(Throwable t, long skipCount);\n}", "des": "A SkipPolicy that depends on an exception classifier to make its decision, and then delegates to the classifier result."}
{"index": 5965, "code": "public class ExecutionContextPromotionListener extends Object implements StepExecutionListener, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Give a listener a chance to modify the exit status from a step.\n\tExitStatus afterStep(StepExecution stepExecution);\n\tvoid setKeys(String[] keys);\n\tvoid setStatuses(String[] statuses);\n\t// If set to TRUE, the listener will throw an exception if any 'key' is not found in the Step ExecutionContext.\n\tvoid setStrict(boolean strict);\n}", "des": "This class can be used to automatically promote items from the Step ExecutionContext to the Job ExecutionContext at the end of a step."}
{"index": 5966, "code": "public class FlowExecutionStatus extends Object implements Comparable<FlowExecutionStatus> {\n\t// Create an ordering on FlowExecutionStatus instances by comparing their statuses.\n\tint compareTo(FlowExecutionStatus other);\n\t// Check the equality of the statuses.\n\tboolean equals(Object object);\n\tString getName();\n\tboolean isEnd();\n\tboolean isFail();\n\tboolean isStop();\n}", "des": "Represents the status of FlowExecution."}
{"index": 5967, "code": "public class FlowJob extends AbstractJob {\n\t// Extension point for subclasses allowing them to concentrate on processing logic and ignore listeners and repository calls.\n\tprotected void doExecute(JobExecution execution);\n\t// Retrieve the step with the given name.\n\tStep getStep(String stepName);\n\t// Retrieve the step names.\n\tCollection<String> getStepNames();\n\t// Public setter for the flow.\n\tvoid setFlow(Flow flow);\n}", "des": "Implementation of the Job interface that allows for complex flows of steps, rather than requiring sequential execution."}
{"index": 5968, "code": "public class FlowState extends AbstractState implements FlowHolder {\n\tCollection<Flow> getFlows();\n\t// Handle some business or processing logic and return a status that can be used to drive a flow to the next State.\n\tFlowExecutionStatus handle(FlowExecutor executor);\n\t// Inquire as to whether a State is an end state.\n\tboolean isEndState();\n}", "des": "State that delegates to a Flow"}
{"index": 5969, "code": "public class FlowStep extends AbstractStep {\n\t// Ensure that the flow is set.\n\tvoid afterPropertiesSet();\n\t// Delegate to the flow provided for the execution of the step.\n\tprotected void doExecute(StepExecution stepExecution);\n\t// Public setter for the flow.\n\tvoid setFlow(Flow flow);\n}", "des": "A Step implementation that delegates to a Flow."}
{"index": 5970, "code": "public class FlowStepBuilder extends StepBuilderHelper<FlowStepBuilder> {\n\t// Build a step that executes the flow provided, normally composed of other steps.\n\tStep build();\n\t// Provide a flow to execute during the step.\n\tFlowStepBuilder flow(Flow flow);\n\tprotected FlowStepBuilder self();\n}", "des": "A step builder for FlowStep instances."}
{"index": 5971, "code": "public interface ItemProcessListener<T,S> extends StepListener {\n\t// Called after ItemProcessor.process(Object) returns.\n\tdefault void afterProcess(T item, S result);\n\t// Called before ItemProcessor.process(Object).\n\tdefault void beforeProcess(T item);\n\t// Called if an exception was thrown from ItemProcessor.process(Object).\n\tdefault void onProcessError(T item, Exception e);\n}", "des": "Listener interface for the processing of an item."}
{"index": 5972, "code": "public interface ItemReadListener<T> extends StepListener {\n\t// Called after ItemReader.read().\n\tdefault void afterRead(T item);\n\t// Called before ItemReader.read()\n\tdefault void beforeRead();\n\t// Called if an error occurs while trying to read.\n\tdefault void onReadError(Exception ex);\n}", "des": "Listener interface around the reading of an item."}
{"index": 5973, "code": "public interface ItemWriteListener<S> extends StepListener {\n\t// Called after ItemWriter.write(Chunk).\n\tdefault void afterWrite(Chunk<? extends S> items);\n\t// Called before ItemWriter.write(Chunk)\n\tdefault void beforeWrite(Chunk<? extends S> items);\n\t// Called if an error occurs while trying to write.\n\tdefault void onWriteError(Exception exception, Chunk<? extends S> items);\n}", "des": "Listener interface for the writing of items."}
{"index": 5974, "code": "public class JobBuilder extends JobBuilderHelper<JobBuilder> {\n\t// Create a new job builder that will execute a step or sequence of steps.\n\tJobFlowBuilder flow(Step step);\n\t// Create a new job builder that will execute a flow.\n\tJobFlowBuilder start(Flow flow);\n\t// Create a new job builder that will execute a step or sequence of steps.\n\tSimpleJobBuilder start(Step step);\n}", "des": "Convenience for building jobs of various kinds."}
{"index": 5975, "code": "public interface JobExecutionListener {\n\t// Callback after completion of a job.\n\tdefault void afterJob(JobExecution jobExecution);\n\t// Callback before a job executes.\n\tdefault void beforeJob(JobExecution jobExecution);\n}", "des": "Provide callbacks at specific points in the lifecycle of a Job."}
{"index": 5976, "code": "public class JobExecutionListenerParser extends AbstractListenerParser {\n\t// Gets the bean class.\n\tprotected Class<? extends AbstractListenerFactoryBean<?>> getBeanClass();\n\t// Gets the metadata values.\n\tprotected ListenerMetaData[] getMetaDataValues();\n}", "des": "Parser for a step listener element."}
{"index": 5977, "code": "public class JobFactoryRegistrationListener extends Object {\n\t// Take the JobFactory provided and register it with the JobRegistry.\n\tvoid bind(JobFactory jobFactory, Map<String,?> params);\n\t// Public setter for a JobRegistry to use for all the bind and unbind events.\n\tvoid setJobRegistry(JobRegistry jobRegistry);\n\t// Take the provided JobFactory and unregister it with the JobRegistry.\n\tvoid unbind(JobFactory jobFactory, Map<String,?> params);\n}", "des": "Generic service that can bind and unbind a JobFactory in a JobRegistry."}
{"index": 5978, "code": "public interface JobParametersConverter {\n\t// Get a new JobParameters instance.\n\tJobParameters getJobParameters(Properties properties);\n\t// The inverse operation: get a Properties instance.\n\tProperties getProperties(JobParameters params);\n}", "des": "A factory for JobParameters instances."}
{"index": 5979, "code": "public interface JobRegistry extends ListableJobLocator {\n\t// Registers a Job at runtime.\n\tvoid register(JobFactory jobFactory);\n\t// Unregisters a previously registered Job.\n\tvoid unregister(String jobName);\n}", "des": "A runtime service registry interface for registering job configurations by name."}
{"index": 5980, "code": "public class JobStepBuilder extends StepBuilderHelper<JobStepBuilder> {\n\t// Build a step from the job provided.\n\tStep build();\n\t// Provide a job to execute during the step.\n\tJobStepBuilder job(Job job);\n\t// Add a job launcher.\n\tJobStepBuilder launcher(JobLauncher jobLauncher);\n\t// Provide a job parameters extractor.\n\tJobStepBuilder parametersExtractor(JobParametersExtractor jobParametersExtractor);\n\tprotected JobStepBuilder self();\n}", "des": "A step builder for JobStep instances."}
{"index": 5981, "code": "public class JsonJobParametersConverter extends DefaultJobParametersConverter {\n\t// Decode a job parameter from a string.\n\tprotected JobParameter decode(String encodedJobParameter);\n\t// Encode a job parameter to a string.\n\tprotected String encode(JobParameter<?> jobParameter);\n}", "des": "Converter for JobParameters instances that uses a JSON naming convention for converting job parameters."}
{"index": 5982, "code": "public class MapJobRegistry extends Object implements JobRegistry {\n\t// Locates a Job at runtime.\n\tJob getJob(String name);\n\t// Provides an unmodifiable view of the job names.\n\tSet<String> getJobNames();\n\t// Registers a Job at runtime.\n\tvoid register(JobFactory jobFactory);\n\t// Unregisters a previously registered Job.\n\tvoid unregister(String name);\n}", "des": "Simple, thread-safe, map-based implementation of JobRegistry."}
{"index": 5983, "code": "public class MapStepRegistry extends Object implements StepRegistry {\n\t// Returns the Step of the specified job based on its name.\n\tStep getStep(String jobName, String stepName);\n\t// Registers all the step instances of the given job.\n\tvoid register(String jobName, Collection<Step> steps);\n\t// Unregisters all the steps instances of the given job.\n\tvoid unregisterStepsFromJob(String jobName);\n}", "des": "Simple map-based implementation of StepRegistry."}
{"index": 5984, "code": "public class MethodInvokingTaskletAdapter extends AbstractMethodInvokingDelegator<Object> implements Tasklet {\n\t// Delegate execution to the target object and translate the return value to an ExitStatus by invoking a method in the delegate POJO.\n\tRepeatStatus execute(StepContribution contribution, ChunkContext chunkContext);\n\t// If the result is an ExitStatus already just return that, otherwise return ExitStatus.COMPLETED.\n\tprotected ExitStatus mapResult(Object result);\n}", "des": "A Tasklet that wraps a method in a POJO."}
{"index": 5985, "code": "public class MultiResourcePartitioner extends Object implements Partitioner {\n\t// Assign the filename of each of the injected resources to an ExecutionContext.\n\tMap<String,ExecutionContext> partition(int gridSize);\n\t// The name of the key for the file name in each ExecutionContext.\n\tvoid setKeyName(String keyName);\n\t// The resources to assign to each partition.\n\tvoid setResources(org.springframework.core.io.Resource[] resources);\n}", "des": "Implementation of Partitioner that locates multiple resources and associates their file names with execution context keys."}
{"index": 5986, "code": "public class ReferenceJobFactory extends Object implements JobFactory {\n\t// Return the instance that was passed in on initialization.\n\tfinal Job createJob();\n\t// Return the name of the instance that was passed in on initialization.\n\tString getJobName();\n}", "des": "A JobFactory that keeps a reference to a Job."}
{"index": 5987, "code": "public class RunIdIncrementer extends Object implements JobParametersIncrementer {\n\t// Increment the run.id parameter (starting with 1).\n\tJobParameters getNext(JobParameters parameters);\n\t// The name of the run id in the job parameters.\n\tvoid setKey(String key);\n}", "des": "This incrementer increments a \"run.id\" parameter of type Long from the given job parameters."}
{"index": 5988, "code": "public static class SimpleFlowFactoryBean.DelegateState extends AbstractState implements FlowHolder {\n\tCollection<Flow> getFlows();\n\t// Gets the current state.\n\tState getState();\n\t// Handle some business or processing logic and return a status that can be used to drive a flow to the next State.\n\tFlowExecutionStatus handle(FlowExecutor executor);\n\t// Inquire as to whether a State is an end state.\n\tboolean isEndState();\n}", "des": "A State that proxies a delegate and changes its name but leaves its behavior unchanged."}
{"index": 5989, "code": "public class SimpleJvmExitCodeMapper extends Object implements ExitCodeMapper {\n\tMap<String,Integer> getMapping();\n\t// Get the operating system exit status that matches a certain Batch Framework exit code\n\tint intValue(String exitCode);\n\t// Supply the ExitCodeMappings\n\tvoid setMapping(Map<String,Integer> exitCodeMap);\n}", "des": "An implementation of ExitCodeMapper that can be configured through a map from batch exit codes (String) to integer results."}
{"index": 5990, "code": "public interface SkipListener<T,S> extends StepListener {\n\t// This item failed on processing with the given exception, and a skip was called for.\n\tdefault void onSkipInProcess(T item, Throwable t);\n\t// Callback for a failure on read that is legal and, consequently, is not going to be re-thrown.\n\tdefault void onSkipInRead(Throwable t);\n\t// This item failed on write with the given exception, and a skip was called for.\n\tdefault void onSkipInWrite(S item, Throwable t);\n}", "des": "Interface for listener to skipped items."}
{"index": 5991, "code": "public abstract class StepContextRepeatCallback extends Object implements RepeatCallback {\n\t// Do the work required for this chunk of the step.\n\tabstract RepeatStatus doInChunkContext(RepeatContext context, ChunkContext chunkContext);\n\t// Manage the StepContext lifecycle.\n\tRepeatStatus doInIteration(RepeatContext context);\n}", "des": "Convenient base class for clients who need to do something in a repeat callback inside a Step."}
{"index": 5992, "code": "public interface StepExecutionListener extends StepListener {\n\t// Give a listener a chance to modify the exit status from a step.\n\tdefault ExitStatus afterStep(StepExecution stepExecution);\n\t// Initialize the state of the listener with the StepExecution from the current scope.\n\tdefault void beforeStep(StepExecution stepExecution);\n}", "des": "Listener interface for the lifecycle of a Step."}
{"index": 5993, "code": "public interface StepExecutionSplitter {\n\t// The name of the step configuration that will be executed remotely.\n\tString getStepName();\n\t// Partition the provided StepExecution into a set of parallel executable instances with the same parent JobExecution.\n\tSet<StepExecution> split(StepExecution stepExecution, int gridSize);\n}", "des": "Strategy interface for generating input contexts for a partitioned step execution independent from the fabric they are going to run on."}
{"index": 5994, "code": "public class StepListenerParser extends AbstractListenerParser {\n\t// Gets the bean class.\n\tprotected Class<? extends AbstractListenerFactoryBean<?>> getBeanClass();\n\t// Gets the metadata values.\n\tprotected ListenerMetaData[] getMetaDataValues();\n\tvoid handleListenersElement(Element stepElement, org.springframework.beans.factory.config.BeanDefinition beanDefinition, org.springframework.beans.factory.xml.ParserContext parserContext);\n}", "des": "Parser for a step listener element."}
{"index": 5995, "code": "public class StepLocatorStepFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Step> {\n\tStep getObject();\n\t// Tell clients that we are a factory for Step instances.\n\tClass<? extends Step> getObjectType();\n\t// Always return true as optimization for bean factory.\n\tboolean isSingleton();\n\tvoid setStepLocator(StepLocator stepLocator);\n\tvoid setStepName(String stepName);\n}", "des": "Convenience factory for Step instances given a StepLocator."}
{"index": 5996, "code": "public interface StepRegistry {\n\t// Returns the Step of the specified job based on its name.\n\tStep getStep(String jobName, String stepName);\n\t// Registers all the step instances of the given job.\n\tvoid register(String jobName, Collection<Step> steps);\n\t// Unregisters all the steps instances of the given job.\n\tvoid unregisterStepsFromJob(String jobName);\n}", "des": "Registry keeping track of all the Step instances defined in a Job."}
{"index": 5997, "code": "public class StepState extends AbstractState implements StepLocator, StepHolder {\n\tStep getStep();\n\tStep getStep(String stepName);\n\tCollection<String> getStepNames();\n\t// Handle some business or processing logic and return a status that can be used to drive a flow to the next State.\n\tFlowExecutionStatus handle(FlowExecutor executor);\n\t// Inquire as to whether a State is an end state.\n\tboolean isEndState();\n}", "des": "State implementation that delegates to a FlowExecutor to execute the specified Step."}
{"index": 5998, "code": "public class TaskExecutorJobLauncher extends SimpleJobLauncher {\n\t// Ensure the required dependencies of a JobRepository have been set.\n\tvoid afterPropertiesSet();\n\t// Run the provided job with the given JobParameters.\n\tJobExecution run(Job job, JobParameters jobParameters);\n\t// Set the JobRepository.\n\tvoid setJobRepository(JobRepository jobRepository);\n\t// Set the TaskExecutor.\n\tvoid setTaskExecutor(org.springframework.core.task.TaskExecutor taskExecutor);\n}", "des": "Implementation of the JobLauncher interface based on a TaskExecutor."}
{"index": 5999, "code": "public enum AccessLevel extends Enum<AccessLevel> {\n\t// Returns if the access level should allow access to the specified ID.\n\tboolean isAccessAllowed(String id);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AccessLevel valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AccessLevel[] values();\n}", "des": "The specific access level granted to the cloud foundry user that's calling the endpoints."}
{"index": 6000, "code": "public class CloudFoundryAuthorizationException extends RuntimeException {\n\t// Return the reason why the authorization exception was thrown.\n\tCloudFoundryAuthorizationException.Reason getReason();\n\t// Return the status code that should be returned to the client.\n\torg.springframework.http.HttpStatus getStatusCode();\n}", "des": "Authorization exceptions thrown to limit access to the endpoints."}
{"index": 6001, "code": "public static enum CloudFoundryAuthorizationException.Reason extends Enum<CloudFoundryAuthorizationException.Reason> {\n\torg.springframework.http.HttpStatus getStatus();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CloudFoundryAuthorizationException.Reason valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CloudFoundryAuthorizationException.Reason[] values();\n}", "des": "Reasons why the exception can be thrown."}
{"index": 6002, "code": "public enum EndpointExposure extends Enum<EndpointExposure> {\n\t// Return the default set of include patterns.\n\tString[] getDefaultIncludes();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic EndpointExposure valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic EndpointExposure[] values();\n}", "des": "Technologies that can be used to expose an endpoint."}
{"index": 6003, "code": "public enum InfoContributorFallback extends Enum<InfoContributorFallback> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic InfoContributorFallback valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic InfoContributorFallback[] values();\n}", "des": "Controls the fallback behavior when the primary property that controls whether an info contributor is enabled is not set."}
{"index": 6004, "code": "public enum ManagementContextType extends Enum<ManagementContextType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ManagementContextType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ManagementContextType[] values();\n}", "des": "Enumeration of management context types."}
{"index": 6005, "code": "public final class MeterValue extends Object {\n\t// Return the underlying value in form suitable to apply to the given meter type.\n\tDouble getValue(io.micrometer.core.instrument.Meter.Type meterType);\n\t// Return a new MeterValue instance for the given double value.\n\tstatic MeterValue valueOf(double value);\n\t// Return a new MeterValue instance for the given String value.\n\tstatic MeterValue valueOf(String value);\n}", "des": "A meter value that is used when configuring micrometer."}
{"index": 6006, "code": "public class AnonymousAuthenticationToken extends AbstractAuthenticationToken implements Serializable {\n\tboolean equals(Object obj);\n\t// Always returns an empty String\n\tObject getCredentials();\n\tint getKeyHash();\n\t// The identity of the principal being authenticated.\n\tObject getPrincipal();\n}", "des": "Represents an anonymous Authentication."}
{"index": 6007, "code": "public class AuthenticatedReactiveAuthorizationManager<T> extends Object implements ReactiveAuthorizationManager<T> {\n\t// Gets an instance of AuthenticatedReactiveAuthorizationManager\n\tstatic <T> AuthenticatedReactiveAuthorizationManager<T> authenticated();\n\t// Determines if access is granted for a specific authentication and object.\n\treactor.core.publisher.Mono<AuthorizationDecision> check(reactor.core.publisher.Mono<Authentication> authentication, T object);\n}", "des": "A ReactiveAuthorizationManager that determines if the current user is authenticated."}
{"index": 6008, "code": "public interface AuthenticationProvider {\n\t// Performs authentication with the same contract as AuthenticationManager.authenticate(Authentication) .\n\tAuthentication authenticate(Authentication authentication);\n\t// Returns true if this AuthenticationProvider supports the indicated Authentication object.\n\tboolean supports(Class<?> authentication);\n}", "des": "Indicates a class can process a specific Authentication implementation."}
{"index": 6009, "code": "public final class AuthoritiesAuthorizationManager extends Object implements AuthorizationManager<Collection<String>> {\n\t// Determines if the current user is authorized by evaluating if the Authentication contains any of specified authorities.\n\tAuthorityAuthorizationDecision check(Supplier<Authentication> authentication, Collection<String> authorities);\n\t// Sets the RoleHierarchy to be used.\n\tvoid setRoleHierarchy(RoleHierarchy roleHierarchy);\n}", "des": "An AuthorizationManager that determines if the current user is authorized by evaluating if the Authentication contains any of the specified authorities."}
{"index": 6010, "code": "public class AuthorizationEvent extends org.springframework.context.ApplicationEvent {\n\t// Get the principal requiring access\n\tSupplier<Authentication> getAuthentication();\n\t// Get the response to the princpal's request\n\tAuthorizationDecision getAuthorizationDecision();\n\t// Get the object to which access was requested\n\tObject getObject();\n}", "des": "A parent class for AuthorizationGrantedEvent and AuthorizationDeniedEvent."}
{"index": 6011, "code": "public enum AuthorizationInterceptorsOrder extends Enum<AuthorizationInterceptorsOrder> {\n\tint getOrder();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AuthorizationInterceptorsOrder valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AuthorizationInterceptorsOrder[] values();\n}", "des": "Ordering of Spring Security's authorization Advisors"}
{"index": 6012, "code": "@FunctionalInterface public interface AuthorizationManager<T> {\n\t// Determines if access is granted for a specific authentication and object.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, T object);\n\t// Determines if access should be granted for a specific authentication and object.\n\tdefault void verify(Supplier<Authentication> authentication, T object);\n}", "des": "An Authorization manager which can determine if an Authentication has access to a specific object."}
{"index": 6013, "code": "public class DefaultJaasAuthenticationProvider extends AbstractJaasAuthenticationProvider {\n\t// Validates the required properties are set.\n\tvoid afterPropertiesSet();\n\t// Creates a LoginContext using the Configuration that was specified in setConfiguration(Configuration).\n\tprotected LoginContext createLoginContext(CallbackHandler handler);\n\tprotected Configuration getConfiguration();\n\t// Sets the Configuration to use for Authentication.\n\tvoid setConfiguration(Configuration configuration);\n}", "des": "Creates a LoginContext using the Configuration provided to it."}
{"index": 6014, "code": "public class DefaultToken extends Object implements Token {\n\tboolean equals(Object obj);\n\t// Obtains the extended information associated within the token, which was presented when the token was first created.\n\tString getExtendedInformation();\n\t// Obtains the randomised, secure key assigned to this token.\n\tString getKey();\n\t// The time the token key was initially created is available from this method.\n\tlong getKeyCreationTime();\n}", "des": "The default implementation of Token."}
{"index": 6015, "code": "public final class DelegatingSecurityContextRunnable extends Object implements Runnable {\n\t// Factory method for creating a DelegatingSecurityContextRunnable.\n\tstatic Runnable create(Runnable delegate, SecurityContext securityContext);\n\tvoid run();\n\t// Sets the SecurityContextHolderStrategy to use.\n\tvoid setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy);\n}", "des": "Wraps a delegate Runnable with logic for setting up a SecurityContext before invoking the delegate Runnable and then removing the SecurityContext after the delegate has completed."}
{"index": 6016, "code": "public final class FieldUtils extends Object {\n\t// Attempts to locate the specified field on the class.\n\tstatic Field getField(Class<?> clazz, String fieldName);\n\t// Returns the value of a (nested) field on a bean.\n\tstatic Object getFieldValue(Object bean, String fieldName);\n\tstatic Object getProtectedFieldValue(String protectedField, Object object);\n\tstatic void setProtectedFieldValue(String protectedField, Object object, Object newValue);\n}", "des": "Offers static methods for directly manipulating fields."}
{"index": 6017, "code": "public final class Jsr250AuthorizationManager extends Object implements AuthorizationManager<org.aopalliance.intercept.MethodInvocation> {\n\t// Determine if an Authentication has access to a method by evaluating the DenyAll, PermitAll, and RolesAllowed annotations that MethodInvocation specifies.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, org.aopalliance.intercept.MethodInvocation methodInvocation);\n\t// Sets the role prefix.\n\tvoid setRolePrefix(String rolePrefix);\n}", "des": "An AuthorizationManager which can determine if an Authentication may invoke the MethodInvocation by evaluating if the Authentication contains a specified authority from the JSR-250 security annotations."}
{"index": 6018, "code": "public class MapReactiveUserDetailsService extends Object implements ReactiveUserDetailsService, ReactiveUserDetailsPasswordService {\n\t// Find the UserDetails by username.\n\treactor.core.publisher.Mono<UserDetails> findByUsername(String username);\n\t// Modify the specified user's password.\n\treactor.core.publisher.Mono<UserDetails> updatePassword(UserDetails user, String newPassword);\n}", "des": "A Map based implementation of ReactiveUserDetailsService"}
{"index": 6019, "code": "public final class MethodExpressionAuthorizationManager extends Object implements AuthorizationManager<org.aopalliance.intercept.MethodInvocation> {\n\t// Determines the access by evaluating the provided expression.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, org.aopalliance.intercept.MethodInvocation context);\n\t// Sets the SecurityExpressionHandler to be used.\n\tvoid setExpressionHandler(SecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation> expressionHandler);\n}", "des": "An expression-based AuthorizationManager that determines the access by evaluating the provided expression against the MethodInvocation."}
{"index": 6020, "code": "public class MethodInvocationResult extends Object {\n\t// Return the already-invoked MethodInvocation\n\torg.aopalliance.intercept.MethodInvocation getMethodInvocation();\n\t// Return the result of the already-invoked MethodInvocation\n\tObject getResult();\n}", "des": "A context object that contains a MethodInvocation and the result of that MethodInvocation."}
{"index": 6021, "code": "public class NullUserCache extends Object implements UserCache {\n\t// Obtains a UserDetails from the cache.\n\tUserDetails getUserFromCache(String username);\n\t// Places a UserDetails in the cache.\n\tvoid putUserInCache(UserDetails user);\n\t// Removes the specified user from the cache.\n\tvoid removeUserFromCache(String username);\n}", "des": "Does not perform any caching."}
{"index": 6022, "code": "public final class ObservationAuthorizationManager<T> extends Object implements AuthorizationManager<T> {\n\t// Determines if access is granted for a specific authentication and object.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, T object);\n\t// Use the provided convention for reporting observation data\n\tvoid setObservationConvention(io.micrometer.observation.ObservationConvention<AuthorizationObservationContext<?>> convention);\n}", "des": "An AuthorizationManager that observes the authorization"}
{"index": 6023, "code": "public class ObservationReactiveAuthenticationManager extends Object implements ReactiveAuthenticationManager {\n\t// Attempts to authenticate the provided Authentication\n\treactor.core.publisher.Mono<Authentication> authenticate(Authentication authentication);\n\t// Use the provided convention for reporting observation data\n\tvoid setObservationConvention(io.micrometer.observation.ObservationConvention<AuthenticationObservationContext> convention);\n}", "des": "An ReactiveAuthenticationManager that observes the authentication"}
{"index": 6024, "code": "public final class PostAuthorizeAuthorizationManager extends Object implements AuthorizationManager<MethodInvocationResult> {\n\t// Determine if an Authentication has access to the returned object by evaluating the PostAuthorize annotation that the MethodInvocation specifies.\n\tAuthorizationDecision check(Supplier<Authentication> authentication, MethodInvocationResult mi);\n\t// Use this the MethodSecurityExpressionHandler.\n\tvoid setExpressionHandler(MethodSecurityExpressionHandler expressionHandler);\n}", "des": "An AuthorizationManager which can determine if an Authentication may return the result from an invoked MethodInvocation by evaluating an expression from the PostAuthorize annotation."}
{"index": 6025, "code": "public class ReactiveAuthenticationManagerAdapter extends Object implements ReactiveAuthenticationManager {\n\t// Attempts to authenticate the provided Authentication\n\treactor.core.publisher.Mono<Authentication> authenticate(Authentication token);\n\t// Set a scheduler that will be published on to perform the authentication logic.\n\tvoid setScheduler(reactor.core.scheduler.Scheduler scheduler);\n}", "des": "Adapts an AuthenticationManager to the reactive APIs."}
{"index": 6026, "code": "public interface ReactiveAuthorizationManager<T> {\n\t// Determines if access is granted for a specific authentication and object.\n\treactor.core.publisher.Mono<AuthorizationDecision> check(reactor.core.publisher.Mono<Authentication> authentication, T object);\n\t// Determines if access should be granted for a specific authentication and object\n\tdefault reactor.core.publisher.Mono<Void> verify(reactor.core.publisher.Mono<Authentication> authentication, T object);\n}", "des": "A reactive authorization manager which can determine if an Authentication has access to a specific object."}
{"index": 6027, "code": "public class RememberMeAuthenticationToken extends AbstractAuthenticationToken {\n\tboolean equals(Object obj);\n\t// Always returns an empty String\n\tObject getCredentials();\n\tint getKeyHash();\n\t// The identity of the principal being authenticated.\n\tObject getPrincipal();\n}", "des": "Represents a remembered Authentication."}
{"index": 6028, "code": "public class RoleHierarchyImpl extends Object implements RoleHierarchy {\n\t// Returns an array of all reachable authorities.\n\tCollection<GrantedAuthority> getReachableGrantedAuthorities(Collection<? extends GrantedAuthority> authorities);\n\t// Set the role hierarchy and pre-calculate for every role the set of all reachable roles, i.e.\n\tvoid setHierarchy(String roleHierarchyStringRepresentation);\n}", "des": "This class defines a role hierarchy for use with various access checking components."}
{"index": 6029, "code": "public final class RsaKeyConverters extends Object {\n\t// Construct a Converter for converting a PEM-encoded PKCS#8 RSA Private Key into a RSAPrivateKey.\n\tstatic org.springframework.core.convert.converter.Converter<InputStream,RSAPrivateKey> pkcs8();\n\t// Construct a Converter for converting a PEM-encoded X.509 RSA Public Key or X.509 Certificate into a RSAPublicKey.\n\tstatic org.springframework.core.convert.converter.Converter<InputStream,RSAPublicKey> x509();\n}", "des": "Used for creating Key converter instances"}
{"index": 6030, "code": "public class SecureRandomFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<SecureRandom> {\n\tSecureRandom getObject();\n\tClass<SecureRandom> getObjectType();\n\tboolean isSingleton();\n\t// Allows the Pseudo Random Number Generator (PRNG) algorithm to be nominated.\n\tvoid setAlgorithm(String algorithm);\n\t// Allows the user to specify a resource which will act as a seed for the SecureRandom instance.\n\tvoid setSeed(org.springframework.core.io.Resource seed);\n}", "des": "Creates a SecureRandom instance."}
{"index": 6031, "code": "public interface SecurityContext extends Serializable {\n\t// Obtains the currently authenticated principal, or an authentication request token.\n\tAuthentication getAuthentication();\n\t// Changes the currently authenticated principal, or removes the authentication information.\n\tvoid setAuthentication(Authentication authentication);\n}", "des": "Interface defining the minimum security information associated with the current thread of execution."}
{"index": 6032, "code": "public class SecurityContextChangedEvent extends org.springframework.context.ApplicationEvent {\n\t// Get the SecurityContext set on the SecurityContextHolder as of this event\n\tSecurityContext getNewContext();\n\t// Get the SecurityContext set on the SecurityContextHolder immediately previous to this event\n\tSecurityContext getOldContext();\n\t// Say whether the event is a context-clearing event.\n\tboolean isCleared();\n}", "des": "An event that represents a change in SecurityContext"}
{"index": 6033, "code": "public class SecurityContextImpl extends Object implements SecurityContext {\n\tboolean equals(Object obj);\n\t// Obtains the currently authenticated principal, or an authentication request token.\n\tAuthentication getAuthentication();\n\t// Changes the currently authenticated principal, or removes the authentication information.\n\tvoid setAuthentication(Authentication authentication);\n}", "des": "Base implementation of SecurityContext."}
{"index": 6034, "code": "public abstract class SessionIdChangedEvent extends AbstractSessionEvent {\n\t// Returns the new session ID.\n\tabstract String getNewSessionId();\n\t// Returns the old session ID.\n\tabstract String getOldSessionId();\n}", "des": "Generic \"session ID changed\" event which indicates that a session identifier (potentially represented by a security context) has changed."}
{"index": 6035, "code": "public abstract class Sha512DigestUtils extends Object {\n\t// Calculates the SHA digest and returns the value as a byte[].\n\tstatic byte[] sha(byte[] data);\n\t// Calculates the SHA digest and returns the value as a byte[].\n\tstatic byte[] sha(String data);\n\t// Calculates the SHA digest and returns the value as a hex string.\n\tstatic String shaHex(byte[] data);\n\t// Calculates the SHA digest and returns the value as a hex string.\n\tstatic String shaHex(String data);\n}", "des": "Provides SHA512 digest methods."}
{"index": 6036, "code": "public class SpringCacheBasedUserCache extends Object implements UserCache {\n\t// Obtains a UserDetails from the cache.\n\tUserDetails getUserFromCache(String username);\n\t// Places a UserDetails in the cache.\n\tvoid putUserInCache(UserDetails user);\n\t// Removes the specified user from the cache.\n\tvoid removeUserFromCache(String username);\n\tvoid removeUserFromCache(UserDetails user);\n}", "des": "Caches UserDetails instances in a Spring defined Cache."}
{"index": 6037, "code": "public class TestingAuthenticationProvider extends Object implements AuthenticationProvider {\n\t// Performs authentication with the same contract as AuthenticationManager.authenticate(Authentication) .\n\tAuthentication authenticate(Authentication authentication);\n\t// Returns true if this AuthenticationProvider supports the indicated Authentication object.\n\tboolean supports(Class<?> authentication);\n}", "des": "An AuthenticationProvider implementation for the TestingAuthenticationToken."}
{"index": 6038, "code": "public class TestingAuthenticationToken extends AbstractAuthenticationToken {\n\t// The credentials that prove the principal is correct.\n\tObject getCredentials();\n\t// The identity of the principal being authenticated.\n\tObject getPrincipal();\n}", "des": "An Authentication implementation that is designed for use whilst unit testing."}
{"index": 6039, "code": "public interface Token {\n\t// Obtains the extended information associated within the token, which was presented when the token was first created.\n\tString getExtendedInformation();\n\t// Obtains the randomised, secure key assigned to this token.\n\tString getKey();\n\t// The time the token key was initially created is available from this method.\n\tlong getKeyCreationTime();\n}", "des": "A token issued by TokenService."}
{"index": 6040, "code": "public interface TokenService {\n\t// Forces the allocation of a new Token.\n\tToken allocateToken(String extendedInformation);\n\t// Permits verification the Token.getKey() was issued by this TokenService and reconstructs the corresponding Token.\n\tToken verifyToken(String key);\n}", "des": "Provides a mechanism to allocate and rebuild secure, randomised tokens."}
{"index": 6041, "code": "public class UserAttribute extends Object {\n\tvoid addAuthority(GrantedAuthority newAuthority);\n\tList<GrantedAuthority> getAuthorities();\n\tString getPassword();\n\tboolean isEnabled();\n\tboolean isValid();\n\t// Set all authorities for this user.\n\tvoid setAuthorities(List<GrantedAuthority> authorities);\n\t// Set all authorities for this user from String values.\n\tvoid setAuthoritiesAsString(List<String> authoritiesAsStrings);\n\tvoid setEnabled(boolean enabled);\n\tvoid setPassword(String password);\n}", "des": "Used by InMemoryUserDetailsManager to temporarily store the attributes associated with a user."}
{"index": 6042, "code": "public interface UserCache {\n\t// Obtains a UserDetails from the cache.\n\tUserDetails getUserFromCache(String username);\n\t// Places a UserDetails in the cache.\n\tvoid putUserInCache(UserDetails user);\n\t// Removes the specified user from the cache.\n\tvoid removeUserFromCache(String username);\n}", "des": "Provides a cache of UserDetails objects."}
{"index": 6043, "code": "public enum ActionType extends Enum<ActionType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ActionType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ActionType[] values();\n}", "des": "Pulsar event action type."}
{"index": 6044, "code": "public class AppendBrokerTimestampMetadataInterceptor extends Object implements BrokerEntryMetadataInterceptor {\n\t// Called by ManagedLedger to intercept adding an entry.\n\tBrokerEntryMetadata intercept(BrokerEntryMetadata brokerMetadata);\n\t// Called by ManagedLedger to intercept adding an entry with numberOfMessages.\n\tBrokerEntryMetadata interceptWithNumberOfMessages(BrokerEntryMetadata brokerMetadata, int numberOfMessages);\n}", "des": "A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add timestamp from broker side metadata for each entry."}
{"index": 6045, "code": "@LimitedPrivate @Stable public interface BrokerEntryMetadataInterceptor {\n\t// Called by ManagedLedger to intercept adding an entry.\n\tBrokerEntryMetadata intercept(BrokerEntryMetadata brokerMetadata);\n\t// Called by ManagedLedger to intercept adding an entry with numberOfMessages.\n\tBrokerEntryMetadata interceptWithNumberOfMessages(BrokerEntryMetadata brokerMetadata, int numberOfMessages);\n}", "des": "A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add metadata for each entry from broker side."}
{"index": 6046, "code": "public static enum Commands.ChecksumType extends Enum<Commands.ChecksumType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Commands.ChecksumType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Commands.ChecksumType[] values();\n}", "des": "Definition of possible checksum types."}
{"index": 6047, "code": "public class CompletableFutureCancellationHandler extends Object {\n\t// Attaches the cancellation handler to handle cancels and timeouts.\n\tvoid attachToFuture(CompletableFuture<?> future);\n\t// Creates a new CompletableFuture and attaches the cancellation handler to handle cancels and timeouts.\n\t<T> CompletableFuture<T> createFuture();\n\t// Set the action to run when the future gets cancelled or timeouts.\n\tvoid setCancelAction(Runnable cancelAction);\n}", "des": "Implements cancellation and timeout support for CompletableFutures."}
{"index": 6048, "code": "public interface CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedSize);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf raw);\n}", "des": "Generic compression codec interface."}
{"index": 6049, "code": "public class CompressionCodecLZ4 extends Object implements CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedLength);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf source);\n}", "des": "LZ4 Compression."}
{"index": 6050, "code": "public class CompressionCodecNone extends Object implements CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedSize);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf raw);\n}", "des": "No compression."}
{"index": 6051, "code": "public class CompressionCodecSnappy extends Object implements CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedLength);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf source);\n}", "des": "Snappy Compression."}
{"index": 6052, "code": "public class CompressionCodecZLib extends Object implements CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedLength);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf source);\n}", "des": "ZLib Compression."}
{"index": 6053, "code": "public class CompressionCodecZstd extends Object implements CompressionCodec {\n\t// Decompress a buffer.\n\tio.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf encoded, int uncompressedLength);\n\t// Compress a buffer.\n\tio.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf source);\n}", "des": "Zstandard Compression."}
{"index": 6054, "code": "public enum DomainType extends Enum<DomainType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic DomainType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic DomainType[] values();\n}", "des": "Domain types differentiated by Mozilla Public Suffix List."}
{"index": 6055, "code": "public enum EventType extends Enum<EventType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic EventType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic EventType[] values();\n}", "des": "Pulsar system event type."}
{"index": 6056, "code": "public class JvmG1GCMetricsLogger extends Object implements JvmGCMetricsLogger {\n\t// JvmGCMetricsLogger should update the metrics with GC specific dimensions and value.\n\tvoid logMetrics(Metrics metrics);\n\t// It will be triggered by JvmMetrics periodically to refresh stats at interval (default = 1 min).\n\tvoid refresh();\n}", "des": "Logger for the JVM G1 GC metrics."}
{"index": 6057, "code": "public interface JvmGCMetricsLogger {\n\t// JvmGCMetricsLogger should update the metrics with GC specific dimensions and value.\n\tvoid logMetrics(Metrics metrics);\n\t// It will be triggered by JvmMetrics periodically to refresh stats at interval (default = 1 min).\n\tvoid refresh();\n}", "des": "JvmGCMetricsLogger can be implemented for each specific GC type which retrieves GC count and pause time and logs it into metrics."}
{"index": 6058, "code": "public static enum KeyStoreSSLContext.Mode extends Enum<KeyStoreSSLContext.Mode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic KeyStoreSSLContext.Mode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic KeyStoreSSLContext.Mode[] values();\n}", "des": "Connection Mode for TLS."}
{"index": 6059, "code": "public class LookupData extends Object {\n\tString getBrokerUrl();\n\t// Deprecated.\n\tString getBrokerUrlSsl();\n\tString getBrokerUrlTls();\n\tString getHttpUrl();\n\tString getHttpUrlTls();\n\t// Deprecated.\n\tString getNativeUrl();\n\tvoid setHttpUrlTls(String httpUrlTls);\n}", "des": "This class encapsulates lookup data."}
{"index": 6060, "code": "public enum NamespaceOperation extends Enum<NamespaceOperation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic NamespaceOperation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic NamespaceOperation[] values();\n}", "des": "Namespace authorization operations."}
{"index": 6061, "code": "public class NetSslContextBuilder extends SslContextAutoRefreshBuilder<SSLContext> {\n\t// Returns cached SSLContext.\n\tSSLContext getSslContext();\n\t// Returns whether the key files modified after a refresh time, and context need update.\n\tboolean needUpdate();\n\t// updates and returns cached SSLContext.\n\tSSLContext update();\n}", "des": "Similar to `DefaultSslContextBuilder`, which build `javax.net.ssl.SSLContext` for web service."}
{"index": 6062, "code": "public final class NettyChannelUtil extends Object {\n\t// Write and flush the message to the channel and the close the channel.\n\tstatic void writeAndFlushWithClosePromise(io.netty.channel.ChannelOutboundInvoker ctx, io.netty.buffer.ByteBuf msg);\n\t// Write and flush the message to the channel.\n\tstatic void writeAndFlushWithVoidPromise(io.netty.channel.ChannelOutboundInvoker ctx, io.netty.buffer.ByteBuf msg);\n}", "des": "Contains utility methods for working with Netty Channels."}
{"index": 6063, "code": "public class NettyClientSslContextRefresher extends SslContextAutoRefreshBuilder<io.netty.handler.ssl.SslContext> {\n\t// Returns cached SSLContext.\n\tio.netty.handler.ssl.SslContext getSslContext();\n\t// Returns whether the key files modified after a refresh time, and context need update.\n\tboolean needUpdate();\n\t// updates and returns cached SSLContext.\n\tio.netty.handler.ssl.SslContext update();\n}", "des": "SSL context builder for Netty Client side."}
{"index": 6064, "code": "public class NettyFutureUtil extends Object {\n\t// Converts a Netty Future to CompletableFuture.\n\tstatic <V> CompletableFuture<V> toCompletableFuture(io.netty.util.concurrent.Future<V> future);\n\t// Converts a Netty Future to CompletableFuture with Void type.\n\tstatic CompletableFuture<Void> toCompletableFutureVoid(io.netty.util.concurrent.Future<?> future);\n}", "des": "Contains utility methods for working with Netty Futures."}
{"index": 6065, "code": "public class NettyServerSslContextBuilder extends SslContextAutoRefreshBuilder<io.netty.handler.ssl.SslContext> {\n\t// Returns cached SSLContext.\n\tio.netty.handler.ssl.SslContext getSslContext();\n\t// Returns whether the key files modified after a refresh time, and context need update.\n\tboolean needUpdate();\n\t// updates and returns cached SSLContext.\n\tio.netty.handler.ssl.SslContext update();\n}", "des": "SSL context builder for Netty Server side."}
{"index": 6066, "code": "public class NettySSLContextAutoRefreshBuilder extends SslContextAutoRefreshBuilder<KeyStoreSSLContext> {\n\t// Returns cached SSLContext.\n\tKeyStoreSSLContext getSslContext();\n\t// Returns whether the key files modified after a refresh time, and context need update.\n\tboolean needUpdate();\n\t// updates and returns cached SSLContext.\n\tKeyStoreSSLContext update();\n}", "des": "SSL context builder for Netty."}
{"index": 6067, "code": "public enum PolicyName extends Enum<PolicyName> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PolicyName valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PolicyName[] values();\n}", "des": "PolicyName authorization operations."}
{"index": 6068, "code": "public enum PolicyOperation extends Enum<PolicyOperation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PolicyOperation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PolicyOperation[] values();\n}", "des": "PolicyOperation authorization operations."}
{"index": 6069, "code": "public class SchemaData extends Object {\n\t// Convert a schema info to a schema data.\n\tstatic SchemaData fromSchemaInfo(SchemaInfo schemaInfo);\n\t// Convert a schema data to a schema info.\n\tSchemaInfo toSchemaInfo();\n}", "des": "Schema data."}
{"index": 6070, "code": "public interface ServiceUnitId {\n\t// Return the namespace object that this ServiceUnitId belongs to.\n\tNamespaceName getNamespaceObject();\n\t// Check whether a fully-qualified topic is included in this ServiceUnitId object.\n\tboolean includes(TopicName topicName);\n}", "des": "Basic interface for service unit's identification."}
{"index": 6071, "code": "public class ServiceURI extends Object {\n\t// Create a service uri instance from a uri string.\n\tstatic ServiceURI create(String uriStr);\n\t// Create a service uri instance from a URI instance.\n\tstatic ServiceURI create(URI uri);\n\tString[] getServiceHosts();\n\tString[] getServiceInfos();\n\tString getServiceScheme();\n\t// Create a new URI from the service URI which only specifies one of the hosts.\n\tString selectOne();\n}", "des": "ServiceURI represents service uri within pulsar cluster."}
{"index": 6072, "code": "public abstract class SslContextAutoRefreshBuilder<T> extends Object {\n\t// It updates SSLContext at every configured refresh time and returns updated SSLContext.\n\tT get();\n\t// Returns cached SSLContext.\n\tprotected abstract T getSslContext();\n\t// Returns whether the key files modified after a refresh time, and context need update.\n\tprotected abstract boolean needUpdate();\n\t// updates and returns cached SSLContext.\n\tprotected abstract T update();\n}", "des": "Auto refresher and builder of SSLContext."}
{"index": 6073, "code": "public class SSLContextValidatorEngine extends Object {\n\t// Check if the given ByteBuffer capacity.\n\tstatic ByteBuffer ensureCapacity(ByteBuffer existingBuffer, int newLength);\n\t// Validates TLS handshake up to TLSv1.2.\n\tstatic void validate(SSLContextValidatorEngine.SSLEngineProvider clientSslEngineSupplier, SSLContextValidatorEngine.SSLEngineProvider serverSslEngineSupplier);\n}", "des": "SSLContextValidatorEngine to validate 2 SSlContext."}
{"index": 6074, "code": "public static enum SystemResourceUsage.ResourceType extends Enum<SystemResourceUsage.ResourceType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SystemResourceUsage.ResourceType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SystemResourceUsage.ResourceType[] values();\n}", "des": "Definition of possible resource types."}
{"index": 6075, "code": "public enum TenantOperation extends Enum<TenantOperation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TenantOperation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TenantOperation[] values();\n}", "des": "Tenant authorization operations."}
{"index": 6076, "code": "public interface TopicCompactionStrategy<T> {\n\t// Returns the schema object for this strategy.\n\tSchema<T> getSchema();\n\tstatic TopicCompactionStrategy load(String topicCompactionStrategyClassName);\n\t// Tests if the compaction needs to keep the left(previous message) compared to the right(current message) for the same key.\n\tboolean shouldKeepLeft(T prev, T cur);\n}", "des": "Defines a custom strategy to compact messages in a topic."}
{"index": 6077, "code": "public enum TopicOperation extends Enum<TopicOperation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TopicOperation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TopicOperation[] values();\n}", "des": "Topic authorization operations."}
{"index": 6078, "code": "public interface AsyncCallback extends Runnable {\n\t// This method is invoked once the Exchange is done.\n\tvoid done(boolean doneSync);\n\t// Optimized for the reactive executor engine to be able to schedule this callback in its engine.\n\tdefault void run();\n}", "des": "The callback interface for an AsyncProcessor so that it can notify you when an Exchange is done."}
{"index": 6079, "code": "public interface BatchConsumer extends Consumer {\n\t// Whether processing the batch is still allowed.\n\tboolean isBatchAllowed();\n\t// Processes the list of Exchange objects in a batch.\n\tint processBatch(Queue<Object> exchanges);\n\t// Sets a maximum number of messages as a limit to poll at each polling.\n\tvoid setMaxMessagesPerPoll(int maxMessagesPerPoll);\n}", "des": "A consumer of a batch of message exchanges from an Endpoint"}
{"index": 6080, "code": "public interface BeanProcessorFactory {\n\t// Creates the bean processor from the existing bean instance\n\tProcessor createBeanProcessor(CamelContext camelContext, Object bean, Method method);\n\t// Creates the bean processor from a given set of parameters that can refer to the bean via an existing bean, a reference to a bean, or its class name etc.\n\tProcessor createBeanProcessor(CamelContext camelContext, Object bean, String beanType, Class<?> beanClass, String ref, String method, BeanScope scope);\n}", "des": "Factory for creating a Processor that can invoke a method on a bean and supporting using Camel bean parameter bindings."}
{"index": 6081, "code": "public interface BinaryPredicate extends Predicate {\n\t// Gets the left hand side expression\n\tExpression getLeft();\n\t// Gets the operator\n\tString getOperator();\n\t// Gets the right hand side expression\n\tExpression getRight();\n\t// Evaluates the predicate on the message exchange and returns null if this exchange matches the predicate.\n\tString matchesReturningFailureMessage(Exchange exchange);\n}", "des": "A predicate which evaluates a binary expression."}
{"index": 6082, "code": "public static enum Breakpoint.State extends Enum<Breakpoint.State> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Breakpoint.State valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Breakpoint.State[] values();\n}", "des": "State of the breakpoint as either active or suspended."}
{"index": 6083, "code": "public interface Cacheable {\n\t// Adds an offset key and value to the cache\n\tboolean add(OffsetKey<?> key, Offset<?> offset);\n\t// Gets the cache in resume adapters and objects that cache their data\n\tResumeCache<?> getCache();\n\t// Gets the for this cache instance\n\tdefault Cacheable.FillPolicy getFillPolicy();\n\t// Sets the cache in resume adapters and objects that cache their data\n\tvoid setCache(ResumeCache<?> cache);\n}", "des": "Used to identify objects that can cache their resume state or data"}
{"index": 6084, "code": "public static enum Cacheable.FillPolicy extends Enum<Cacheable.FillPolicy> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Cacheable.FillPolicy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Cacheable.FillPolicy[] values();\n}", "des": "The cache fill policy can be used to determine how this cache should be filled with data."}
{"index": 6085, "code": "public interface CamelBeanPostProcessorInjector {\n\t// Field injection\n\tvoid onFieldInject(Field field, Object bean, String beanName);\n\t// Method injection\n\tvoid onMethodInject(Method method, Object bean, String beanName);\n}", "des": "Used for custom injection when doing CamelBeanPostProcessor bean post-processing."}
{"index": 6086, "code": "public interface CamelContextAware {\n\t// Get the CamelContext\n\tCamelContext getCamelContext();\n\t// Injects the CamelContext\n\tvoid setCamelContext(CamelContext camelContext);\n\t// Set the CamelContext context if the object is an instance of CamelContextAware.\n\tstatic <T> T trySetCamelContext(T object, CamelContext camelContext);\n}", "des": "An interface to represent an object which wishes to be injected with the CamelContext"}
{"index": 6087, "code": "@FunctionalInterface public interface CamelContextCustomizer extends Ordered, Comparable<CamelContextCustomizer> {\n\tdefault int compareTo(CamelContextCustomizer other);\n\t// Configure the CamelContext.\n\tvoid configure(CamelContext camelContext);\n\t// Gets the order.\n\tdefault int getOrder();\n}", "des": "To apply custom configurations to CamelContext instances."}
{"index": 6088, "code": "public interface CamelContextNameStrategy {\n\t// Gets the name\n\tString getName();\n\t// Gets the next calculated name, if this strategy is not using fixed names.\n\tString getNextName();\n\t// Whether the name will be fixed, or allow re-calculation such as by using an unique counter.\n\tboolean isFixedName();\n}", "des": "Strategy for assigning name to a CamelContext."}
{"index": 6089, "code": "public class CamelExchangeException extends CamelException {\n\t// Creates an exception message with the provided details.\n\tstatic String createExceptionMessage(String message, Exchange exchange, Throwable cause);\n\t// Returns the exchange which caused the exception\n\tExchange getExchange();\n}", "des": "An exception caused by a specific message Exchange"}
{"index": 6090, "code": "public interface CamelInternalProcessorAdvice<T> {\n\t// Callback executed after processing a step in the route.\n\tvoid after(Exchange exchange, T data);\n\t// Callback executed before processing a step in the route.\n\tT before(Exchange exchange);\n\t// Whether this advice has state or not.\n\tdefault boolean hasState();\n}", "des": "An advice (before and after) to execute cross cutting functionality in the Camel routing engine."}
{"index": 6091, "code": "public interface CamelPreemptiveClusterView extends CamelClusterView {\n\t// Check if the view is disabled.\n\tboolean isDisabled();\n\t// Enable or disables a view.\n\tvoid setDisabled(boolean disabled);\n}", "des": "A CamelPreemptiveClusterView is a CamelClusterView that can be externally disabled by another controller."}
{"index": 6092, "code": "public enum Category extends Enum<Category> {\n\t// Returns the string representation of this value\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Category valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Category[] values();\n}", "des": "This enum set various categories options into the UriEndpoint."}
{"index": 6093, "code": "public class CipherSuitesParameters extends Object {\n\t// Returns a live reference to the list of cipher suite names.\n\tList<String> getCipherSuite();\n\t// Sets the cipher suite.\n\tvoid setCipherSuite(List<String> cipherSuite);\n}", "des": "Represents a list of TLS/SSL cipher suite names."}
{"index": 6094, "code": "public enum ClientAuthentication extends Enum<ClientAuthentication> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ClientAuthentication valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ClientAuthentication[] values();\n}", "des": "Represents the options for the client authentication settings of a server socket."}
{"index": 6095, "code": "public interface ComponentAware {\n\t// Get the Component\n\tComponent getComponent();\n\t// Get the Component as the specified type.\n\tdefault <T extends Component>T getComponent(Class<T> type);\n\t// Injects the Component\n\tvoid setComponent(Component component);\n}", "des": "An interface to represent an object which wishes to be injected with a Component."}
{"index": 6096, "code": "@FunctionalInterface public static interface ComponentCustomizer.Policy extends BiPredicate<String,Component> {\n\t// A simple allow-all policy.\n\tstatic ComponentCustomizer.Policy any();\n\t// A simple deny-all policy.\n\tstatic ComponentCustomizer.Policy none();\n}", "des": "Used as additional filer mechanism to control if customizers need to be applied or not."}
{"index": 6097, "code": "public static interface ComponentVerifierExtension.Result extends Serializable {\n\t// Collection of errors happened for the verification.\n\tList<ComponentVerifierExtension.VerificationError> getErrors();\n\t// Scope of the verification.\n\tComponentVerifierExtension.Scope getScope();\n\t// Result of the validation as status.\n\tComponentVerifierExtension.Result.Status getStatus();\n}", "des": "The result of a verification"}
{"index": 6098, "code": "public static enum ComponentVerifierExtension.Result.Status extends Enum<ComponentVerifierExtension.Result.Status> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ComponentVerifierExtension.Result.Status valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ComponentVerifierExtension.Result.Status[] values();\n}", "des": "Status of the verification"}
{"index": 6099, "code": "public static interface ComponentVerifierExtension.VerificationError.Attribute extends Serializable {\n\t// Bean style accessor to name; This is required for framework like Jackson using bean convention for object serialization.\n\tdefault String getName();\n\t// Name of the attribute.\n\tString name();\n}", "des": "Interface defining an attribute which is a key for the detailed error messages."}
{"index": 6100, "code": "public static interface ComponentVerifierExtension.VerificationError.Code extends Serializable {\n\t// Bean style accessor to name.\n\tdefault String getName();\n\t// Name of the code.\n\tString name();\n}", "des": "Interface defining an error code."}
{"index": 6101, "code": "public interface Condition {\n\t// Does the condition match\n\tboolean matchEvent(Exchange exchange, CamelEvent.ExchangeEvent event);\n\t// Does the condition match\n\tboolean matchProcess(Exchange exchange, Processor processor, NamedNode definition);\n}", "des": "A condition to define when a given Exchange matches when is being routed."}
{"index": 6102, "code": "public interface ConsumerListener<C,P> {\n\t// This is an event that runs after data consumption.\n\tboolean afterConsume(C consumePayload);\n\t// This is an event that runs after data processing.\n\tboolean afterProcess(P processingPayload);\n\t// This sets the predicate responsible for evaluating whether the processing can resume or not.\n\tvoid setResumableCheck(Predicate<?> afterConsumeEval);\n}", "des": "An interface for listening to consumer events and allow proxying between a consumer predicate and the Camel component."}
{"index": 6103, "code": "public interface ConsumerListenerAware<T extends ConsumerListener<?,?>> {\n\t// Gets the ConsumerListener instance\n\tT getConsumerListener();\n\t// Injects the ConsumerListener instance into the object\n\tvoid setConsumerListener(T consumerListener);\n}", "des": "An interface to represent an object which wishes to support listening for consumer events using the ConsumerListener."}
{"index": 6104, "code": "public interface ContentTypeAware {\n\t// The content type.\n\tString getContentType();\n\t// Sets the content type.\n\tvoid setContentType(String contentType);\n}", "des": "Represents an object that can have an associated content type."}
{"index": 6105, "code": "public interface DataFormat extends Service {\n\t// Marshals the object to the given Stream.\n\tvoid marshal(Exchange exchange, Object graph, OutputStream stream);\n\t// Unmarshals the given stream into an object.\n\tObject unmarshal(Exchange exchange, InputStream stream);\n}", "des": "Represents a data format used to marshal objects to and from streams such as Java Serialization or using JAXB2 to encode/decode objects using XML or using SOAP encoding."}
{"index": 6106, "code": "@FunctionalInterface public static interface DataFormatCustomizer.Policy extends BiPredicate<String,DataFormat> {\n\t// A simple allow-all policy.\n\tstatic DataFormatCustomizer.Policy any();\n\t// A simple deny-all policy.\n\tstatic DataFormatCustomizer.Policy none();\n}", "des": "Used as additional filer mechanism to control if customizers need to be applied or not."}
{"index": 6107, "code": "public interface DataTypeAware {\n\t// Get the data type of the message.\n\tDataType getDataType();\n\t// Whether any data type has been configured\n\tboolean hasDataType();\n\t// Set the message body with data type.\n\tvoid setBody(Object body, DataType type);\n\t// Set the data type of the message.\n\tvoid setDataType(DataType type);\n}", "des": "Allows Message to store a DataType which represents the data type of the Message."}
{"index": 6108, "code": "public interface DevConsoleResolver extends CamelContextAware, StaticService {\n\t// Lookup existing resolved DevConsole.\n\tOptional<DevConsole> lookupDevConsole(String id);\n\t// Resolves the given DevConsole.\n\tDevConsole resolveDevConsole(String id);\n}", "des": "A pluggable strategy for resolving dev consoles in a loosely coupled manner"}
{"index": 6109, "code": "public interface EndpointConsumerResolver {\n\t// Resolves this object as an endpoint.\n\tEndpoint resolve(CamelContext context);\n\t// Resolves this object as an endpoint.\n\t<T extends Endpoint>T resolve(CamelContext context, Class<T> endpointType);\n}", "des": "An interface to represent an object that can be resolved as a consumer Endpoint"}
{"index": 6110, "code": "public interface EndpointProducerResolver {\n\t// Resolves this object as an endpoint.\n\tEndpoint resolve(CamelContext context);\n\t// Resolves this object as an endpoint.\n\t<T extends Endpoint>T resolve(CamelContext context, Class<T> endpointType);\n}", "des": "An interface to represent an object that can be resolved as a producer Endpoint"}
{"index": 6111, "code": "public interface ErrorHandlerAware {\n\t// Gets the error handler\n\tProcessor getErrorHandler();\n\t// Sets the error handler\n\tvoid setErrorHandler(Processor errorHandler);\n}", "des": "An interface for Processor aware of its ErrorHandler which are wrapped via the Channel during route initialization, or specially used by RecipientList EIP annotation."}
{"index": 6112, "code": "public interface ErrorHandlerFactory {\n\t// Clones this factory so each route has its private builder to use, to avoid changes from one route to influence the others.\n\tErrorHandlerFactory cloneBuilder();\n\t// Whether this error handler supports transacted exchanges.\n\tboolean supportTransacted();\n}", "des": "Factory for creating ErrorHandlers."}
{"index": 6113, "code": "public interface ErrorHandlerRedeliveryCustomizer {\n\t// Allows to change the output of the error handler which are used when optimising the JMX instrumentation to use either an advice or wrapped processor when calling a processor.\n\tvoid changeOutput(Processor output);\n\t// Determines if redelivery is enabled by checking if any of the redelivery policy settings may allow redeliveries.\n\tboolean determineIfRedeliveryIsEnabled();\n\t// Returns the output processor\n\tProcessor getOutput();\n}", "des": "Customizer for ErrorHandler which supports redeliveries."}
{"index": 6114, "code": "public interface ExceptionHandler {\n\t// Handles the given exception\n\tvoid handleException(String message, Throwable exception);\n\t// Handles the given exception\n\tvoid handleException(String message, Exchange exchange, Throwable exception);\n\t// Handles the given exception\n\tvoid handleException(Throwable exception);\n}", "des": "A Strategy pattern for handling exceptions; particularly in asynchronous processes such as consumers."}
{"index": 6115, "code": "public enum ExchangePattern extends Enum<ExchangePattern> {\n\tstatic ExchangePattern asEnum(String value);\n\t// Return true if there can be an IN message\n\tboolean isInCapable();\n\t// Return true if there can be an OUT message\n\tboolean isOutCapable();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ExchangePattern valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ExchangePattern[] values();\n}", "des": "Represents the kind of message exchange pattern"}
{"index": 6116, "code": "public enum ExchangePropertyKey extends Enum<ExchangePropertyKey> {\n\tstatic ExchangePropertyKey asExchangePropertyKey(String name);\n\tString getName();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ExchangePropertyKey valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ExchangePropertyKey[] values();\n}", "des": "An enum of common and known keys for exchange properties used by camel-core."}
{"index": 6117, "code": "public interface Expression {\n\t// Returns the value of the expression on the given exchange\n\t<T> T evaluate(Exchange exchange, Class<T> type);\n\t// Initialize the expression with the given camel context\n\tdefault void init(CamelContext context);\n}", "des": "An expression provides a plugin strategy for evaluating expressions on a message exchange."}
{"index": 6118, "code": "public interface ExpressionResultTypeAware {\n\t// Gets the expression or predicate as text\n\tString getExpressionText();\n\t// Gets the result type\n\tClass<?> getResultType();\n}", "des": "Represents an Expression or Predicate that supports a result type."}
{"index": 6119, "code": "public class HashicorpVaultConfiguration extends VaultConfiguration {\n\t// Engine to look at hashicorp vault\n\tString getEngine();\n\t// Host to access hashicorp vault\n\tString getHost();\n\t// Port to access hashicorp vault\n\tString getPort();\n\t// Scheme to access hashicorp vault\n\tString getScheme();\n\t// Token to access hashicorp vault\n\tString getToken();\n\tvoid setEngine(String engine);\n\tvoid setHost(String host);\n\tvoid setPort(String port);\n\tvoid setScheme(String scheme);\n\tvoid setToken(String token);\n}", "des": "Configuration for access to Hashicorp Vault Secrets."}
{"index": 6120, "code": "public interface HeaderFilterStrategy {\n\t// Applies filtering logic to Camel Message header that is going to be copied to target message such as CXF and JMS message.\n\tboolean applyFilterToCamelHeaders(String headerName, Object headerValue, Exchange exchange);\n\t// Applies filtering logic to an external message header such as CXF and JMS message that is going to be copied to Camel message header.\n\tboolean applyFilterToExternalHeaders(String headerName, Object headerValue, Exchange exchange);\n}", "des": "Interface to allow plug-able implementation to filter header to and from Camel message."}
{"index": 6121, "code": "public static enum HeaderFilterStrategy.Direction extends Enum<HeaderFilterStrategy.Direction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic HeaderFilterStrategy.Direction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic HeaderFilterStrategy.Direction[] values();\n}", "des": "The direction is either IN or OUT."}
{"index": 6122, "code": "public interface HeaderFilterStrategyAware {\n\t// Gets the header filter strategy used\n\tHeaderFilterStrategy getHeaderFilterStrategy();\n\t// Sets the header filter strategy to use\n\tvoid setHeaderFilterStrategy(HeaderFilterStrategy strategy);\n}", "des": "An interface to represent an object which can make use of injected HeaderFilterStrategy."}
{"index": 6123, "code": "public interface HeadersMapFactory {\n\t// Whether the created Map are case insensitive or not.\n\tboolean isCaseInsensitive();\n\t// Whether the given Map implementation is created by this factory?\n\tboolean isInstanceOf(Map<String,Object> map);\n\t// Creates a new empty Map\n\tMap<String,Object> newMap();\n\t// Creates a new Map and copies over all the content from the existing map.\n\tMap<String,Object> newMap(Map<String,Object> map);\n}", "des": "Factory to create the Map implementation to use for storing headers on Message."}
{"index": 6124, "code": "public interface HealthCheckAware {\n\t// Gets the HealthCheck\n\tHealthCheck getHealthCheck();\n\t// Injects the HealthCheck\n\tvoid setHealthCheck(HealthCheck healthCheck);\n}", "des": "An interface to represent an object which wishes to be injected with the HealthCheck"}
{"index": 6125, "code": "public interface HealthCheckRepository extends HasId, HasHealthChecks {\n\t// Returns the check identified by the given id if available.\n\tdefault Optional<HealthCheck> getCheck(String id);\n\t// Set if the checks associated to this repository is enabled or not.\n\tboolean isEnabled();\n\t// Set if the checks associated to this repository is enabled or not.\n\tvoid setEnabled(boolean enabled);\n}", "des": "A repository for health checks."}
{"index": 6126, "code": "public interface HealthCheckResolver extends CamelContextAware {\n\t// Resolves the given HealthCheck.\n\tHealthCheck resolveHealthCheck(String id);\n\t// Resolves the given HealthCheckRepository.\n\tHealthCheckRepository resolveHealthCheckRepository(String id);\n}", "des": "A pluggable strategy for resolving health checks in a loosely coupled manner"}
{"index": 6127, "code": "public interface HttpResponseAware {\n\t// The HTTP status code\n\tint getHttpResponseCode();\n\t// The HTTP status line\n\tString getHttpResponseStatus();\n\t// Sets the HTTP status code\n\tvoid setHttpResponseCode(int code);\n\t// Sets the HTTP status line\n\tvoid setHttpResponseStatus(String status);\n}", "des": "Represents an object which is aware of HTTP responses."}
{"index": 6128, "code": "public interface IdAware extends HasId {\n\t// Sets the id which has been auto generated\n\tdefault void setGeneratedId(String id);\n\t// Sets the id\n\tvoid setId(String id);\n}", "des": "To allow objects to be injected with an id, such as EIP Processors which has been defined from Camel routes."}
{"index": 6129, "code": "public interface IsSingleton {\n\t// Whether this class supports being singleton or not.\n\tboolean isSingleton();\n\t// Test if the given instance is a singleton or not.\n\tstatic boolean test(Object instance);\n}", "des": "Used for defining if a given class is singleton or not."}
{"index": 6130, "code": "@FunctionalInterface public static interface LanguageCustomizer.Policy extends BiPredicate<String,Language> {\n\t// A simple allow-all policy.\n\tstatic LanguageCustomizer.Policy any();\n\t// A simple deny-all policy.\n\tstatic LanguageCustomizer.Policy none();\n}", "des": "Used as additional filer mechanism to control if customizers need to be applied or not."}
{"index": 6131, "code": "public interface LineNumberAware {\n\t// The line number of this entity.\n\tint getLineNumber();\n\t// The location of the entity.\n\tString getLocation();\n\t// Sets the line number of this entity.\n\tvoid setLineNumber(int lineNumber);\n\t// Sets the location of the entity (source file name, i.e.\n\tvoid setLocation(String location);\n\t// Set the LineNumberAware if the object is an instance of LineNumberAware.\n\tstatic <T> T trySetLineNumberAware(T object, LineNumberAware source);\n}", "des": "An entity that can point to a given line number from a source Resource such as YAML and XML DSL parsers."}
{"index": 6132, "code": "public interface LoadablePropertiesSource extends PropertiesSource {\n\t// Loads the properties from the source\n\tProperties loadProperties();\n\t// Loads the properties from the source filtering them out according to a predicate.\n\tProperties loadProperties(Predicate<String> filter);\n\t// Re-loads the properties from the file location\n\tvoid reloadProperties(String location);\n}", "des": "A source for properties that can be loaded all at once during initialization, such as loading .properties files."}
{"index": 6133, "code": "public interface LocalBeanRepositoryAware {\n\t// Gets the local bean repository (if any in use)\n\tBeanRepository getLocalBeanRepository();\n\t// Sets a special local bean repository (ie thread local) that take precedence and will use first, if a bean exists.\n\tvoid setLocalBeanRepository(BeanRepository repository);\n}", "des": "Allows a BeanRepository to temporary have a local repository take precedence, such as when creating route templates to give more flexibility."}
{"index": 6134, "code": "public enum LoggingLevel extends Enum<LoggingLevel> {\n\t// Is the given logging level equal or higher than the current level.\n\tboolean isEnabled(LoggingLevel level);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic LoggingLevel valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic LoggingLevel[] values();\n}", "des": "Used to configure the logging levels"}
{"index": 6135, "code": "public enum ManagementMBeansLevel extends Enum<ManagementMBeansLevel> {\n\tboolean isProcessors();\n\tboolean isRoutes();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ManagementMBeansLevel valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ManagementMBeansLevel[] values();\n}", "des": "Level of mbeans for registration"}
{"index": 6136, "code": "public enum ManagementStatisticsLevel extends Enum<ManagementStatisticsLevel> {\n\tboolean isDefaultOrExtended();\n\tboolean isExtended();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ManagementStatisticsLevel valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ManagementStatisticsLevel[] values();\n}", "des": "Level of granularity for performance statistics enabled"}
{"index": 6137, "code": "public interface ManagementStrategyFactory {\n\t// Creates the ManagementStrategy.\n\tManagementStrategy create(CamelContext context, Map<String,Object> properties);\n\t// Creates the associated LifecycleStrategy that the management strategy uses.\n\tLifecycleStrategy createLifecycle(CamelContext context);\n\t// Setup the management on the CamelContext.\n\tvoid setupManagement(CamelContext camelContext, ManagementStrategy strategy, LifecycleStrategy lifecycle);\n}", "des": "Service Factory for ManagementStrategy"}
{"index": 6138, "code": "public enum MessageTrait extends Enum<MessageTrait> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MessageTrait valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MessageTrait[] values();\n}", "des": "Message traits are runtime traits that can be associated with a message (for instance, the redelivery state, a data type, etc)."}
{"index": 6139, "code": "public interface ModelToXMLDumper {\n\t// Dumps the definition as XML\n\tString dumpModelAsXml(CamelContext context, NamedNode definition);\n\t// Dumps the definition as XML\n\tString dumpModelAsXml(CamelContext context, NamedNode definition, boolean resolvePlaceholders);\n}", "des": "SPI for dumping model definitions into XML representation."}
{"index": 6140, "code": "public interface ModelToYAMLDumper {\n\t// Dumps the definition as YAML\n\tString dumpModelAsYaml(CamelContext context, NamedNode definition);\n\t// Dumps the definition as YAML\n\tString dumpModelAsYaml(CamelContext context, NamedNode definition, boolean resolvePlaceholders, boolean uriAsParameters);\n}", "des": "SPI for dumping model definitions into YAML representation."}
{"index": 6141, "code": "public interface NamedRoute {\n\t// Gets the route endpoint url.\n\tString getEndpointUrl();\n\t// Gets the route input\n\tNamedNode getInput();\n\t// Gets the route id.\n\tString getRouteId();\n\t// Is the route created from Rest DSL\n\tboolean isCreatedFromRest();\n\t// Is the route created from template;\n\tboolean isCreatedFromTemplate();\n}", "des": "Represents a node in the routes which is identified as a route."}
{"index": 6142, "code": "public interface NamespaceAware {\n\t// Gets the XML Namespaces\n\tMap<String,String> getNamespaces();\n\t// Injects the XML Namespaces of prefix -> uri mappings\n\tvoid setNamespaces(Map<String,String> namespaces);\n}", "des": "Represents an object which is aware of the namespaces in which its used such as XPath and XQuery type expressions so that the current namespace context can be injected"}
{"index": 6143, "code": "public interface Navigate<T> {\n\t// Are there more outputs?\n\tboolean hasNext();\n\t// Next group of outputs\n\tList<T> next();\n}", "des": "Implementations support navigating a graph where you can traverse forward and each next returns a List of outputs of type T that can contain 0..n nodes."}
{"index": 6144, "code": "public interface NotifyBuilderMatcher {\n\t// Whether the predicate matches\n\tboolean notifyBuilderMatches();\n\t// When an exchange was received\n\tvoid notifyBuilderOnExchange(Exchange exchange);\n\t// Reset state\n\tvoid notifyBuilderReset();\n}", "des": "Allows to be used in combination with NotifyBuilder as external predicate implementations to compute if the exchange matches."}
{"index": 6145, "code": "public interface Offset<T> extends Serializable {\n\t// Gets the offset value\n\tT getValue();\n\t// Gets the offset value converting it to the given type\n\tdefault <V> V getValue(Class<V> tClass);\n\t// Serializes this offset into a buffer of bytes\n\tdefault ByteBuffer serialize();\n\t// Sets the current offset value\n\tvoid update(T offset);\n}", "des": "Generic offset without a concrete type"}
{"index": 6146, "code": "public interface OffsetKey<K> extends Serializable {\n\t// Gets the key value\n\tK getValue();\n\t// Serializes this offset into a buffer of bytes\n\tdefault ByteBuffer serialize();\n\t// Sets the key value\n\tvoid setValue(K key);\n}", "des": "An interface to represent offset keys (addressable for an offset)"}
{"index": 6147, "code": "public interface OptimisticLockingAggregationRepository extends AggregationRepository {\n\t// Add the given Exchange under the correlation key.\n\tExchange add(CamelContext camelContext, String key, Exchange oldExchange, Exchange newExchange);\n\t// Removes the given Exchange when both the supplied key and Exchange are present in the repository.\n\tvoid remove(CamelContext camelContext, String key, Exchange exchange);\n}", "des": "A specialized AggregationRepository which also supports optimistic locking."}
{"index": 6148, "code": "public interface PeriodTaskResolver {\n\t// Creates a new class instance using the key to lookup\n\tOptional<Object> newInstance(String key);\n\t// Creates a new class instance using the key to lookup\n\t<T> Optional<T> newInstance(String key, Class<T> type);\n}", "des": "Finder to find PeriodicTask tasks."}
{"index": 6149, "code": "public interface PeriodTaskScheduler {\n\t// Gets an existing task by a given type, assuming there is only one task of the given type.\n\t<T> T getTaskByType(Class<T> type);\n\t// Schedules the period task.\n\tvoid schedulePeriodTask(Runnable task, long period);\n}", "des": "A shared scheduler to run small period tasks, such as updating internal statistics, or for custom components to have a background task."}
{"index": 6150, "code": "public interface PluginManager {\n\t// Allows installation of custom plugins to the Camel context.\n\t<T> void addContextPlugin(Class<T> type, T module);\n\t// Gets a plugin of the given type.\n\t<T> T getContextPlugin(Class<T> type);\n\t// Allows lazy installation of custom plugins to the Camel context.\n\t<T> void lazyAddContextPlugin(Class<T> type, Supplier<T> module);\n}", "des": "A manager for internal plugins."}
{"index": 6151, "code": "public interface Policy {\n\t// Hook invoked before the wrap.\n\tvoid beforeWrap(Route route, NamedNode definition);\n\t// Wraps any applicable interceptors around the given processor.\n\tProcessor wrap(Route route, Processor processor);\n}", "des": "A strategy capable of applying interceptors to a processor."}
{"index": 6152, "code": "public interface PollingConsumer extends Consumer {\n\t// Waits until a message is available and then returns it.\n\tExchange receive();\n\t// Attempts to receive a message exchange, waiting up to the given timeout to expire if a message is not yet available.\n\tExchange receive(long timeout);\n\t// Attempts to receive a message exchange immediately without waiting and returning null if a message exchange is not available yet.\n\tExchange receiveNoWait();\n}", "des": "Represents a Polling Consumer where the caller polls for messages when it is ready."}
{"index": 6153, "code": "public interface PollingConsumerPollingStrategy {\n\t// Callback invoked after the poll.\n\tvoid afterPoll();\n\t// Callback invoked before the poll.\n\tlong beforePoll(long timeout);\n\t// Callback invoked when the consumer is initialized such as when the PollingConsumer starts.\n\tvoid onInit();\n}", "des": "Strategy that allows Consumers to influence the PollingConsumer."}
{"index": 6154, "code": "public interface PollingConsumerPollStrategy {\n\t// Called when poll is about to begin\n\tboolean begin(Consumer consumer, Endpoint endpoint);\n\t// Called when poll is completed successfully\n\tvoid commit(Consumer consumer, Endpoint endpoint, int polledMessages);\n\t// Called when poll failed\n\tboolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception cause);\n}", "des": "Strategy for a PollingConsumer when polling an Endpoint."}
{"index": 6155, "code": "public static interface PooledObjectFactory.Statistics {\n\t// Number of exchanges acquired (reused) when using pooled factory.\n\tlong getAcquiredCounter();\n\t// Number of new exchanges created.\n\tlong getCreatedCounter();\n\t// Number of exchanges discarded (thrown away) such as if no space in cache pool.\n\tlong getDiscardedCounter();\n\t// Number of exchanges released back to pool\n\tlong getReleasedCounter();\n\t// Reset the counters\n\tvoid reset();\n}", "des": "Utilization statistics of the this factory."}
{"index": 6156, "code": "public interface Predicate {\n\t// Initialize the predicate with the given camel context\n\tdefault void init(CamelContext context);\n\t// Initialize as a predicate with the given camel context\n\tdefault void initPredicate(CamelContext context);\n\t// Evaluates the predicate on the message exchange and returns true if this exchange matches the predicate\n\tboolean matches(Exchange exchange);\n}", "des": "Evaluates a binary predicate on the message exchange."}
{"index": 6157, "code": "public interface ProcessorFactory {\n\t// Creates the child processor.\n\tProcessor createChildProcessor(Route route, NamedNode definition, boolean mandatory);\n\t// Creates a processor by the name of the definition.\n\tProcessor createProcessor(CamelContext camelContext, String definitionName, Object[] args);\n\t// Creates the processor.\n\tProcessor createProcessor(Route route, NamedNode definition);\n}", "des": "A factory to create Processor based on the definition."}
{"index": 6158, "code": "public interface PropertiesFunction {\n\t// Applies the function.\n\tString apply(String remainder);\n\t// Name of the function which is used as name: to let the properties component know it is a function.\n\tString getName();\n\t// Whether the value should be looked up as a regular properties first, before applying this function.\n\tdefault boolean lookupFirst(String remainder);\n}", "des": "A function that is applied instead of looking up a property placeholder."}
{"index": 6159, "code": "public interface PropertiesSource {\n\t// Name of properties source\n\tString getName();\n\t// Gets the property with the name\n\tString getProperty(String name);\n}", "des": "A source for properties."}
{"index": 6160, "code": "public interface PropertiesSourceFactory {\n\t// New classpath based PropertiesSource\n\tPropertiesSource newClasspathPropertiesSource(String location);\n\t// New file based PropertiesSource\n\tPropertiesSource newFilePropertiesSource(String location);\n\t// New ref based PropertiesSource\n\tPropertiesSource newRefPropertiesSource(String ref);\n}", "des": "Factory for creating out of the box PropertiesSource."}
{"index": 6161, "code": "public enum RedeliveryTraitPayload extends Enum<RedeliveryTraitPayload> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RedeliveryTraitPayload valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RedeliveryTraitPayload[] values();\n}", "des": "Some messages can carry redelivery details which might affect routing (i.e; JMS messages)."}
{"index": 6162, "code": "public interface ReloadStrategy extends StaticService, CamelContextAware {\n\t// Number of reloads failed.\n\tint getFailedCounter();\n\t// Number of reloads succeeded.\n\tint getReloadCounter();\n\t// Trigger reload.\n\tvoid onReload(Object source);\n\t// Reset the counters.\n\tvoid resetCounters();\n}", "des": "SPI strategy for reloading."}
{"index": 6163, "code": "public interface ResourceAware {\n\t// Gets the Resource.\n\tResource getResource();\n\t// Sets the Resource.\n\tvoid setResource(Resource resource);\n\t// Set the Resource resource if the object is an instance of ResourceAware.\n\tstatic <T> T trySetResource(T object, Resource resource);\n}", "des": "An interface to represent an object which wishes to be injected with the Resource"}
{"index": 6164, "code": "public interface ResourceReloadStrategy extends ReloadStrategy {\n\t// Gets the resource listener that is triggered on reload.\n\tResourceReload getResourceReload();\n\t// Sets the resource listener to trigger on reload.\n\tvoid setResourceReload(ResourceReload listener);\n}", "des": "SPI strategy for reloading Resource in an existing running CamelContext"}
{"index": 6165, "code": "public interface ResourceResolver extends StaticService, CamelContextAware {\n\t// The supported resource scheme.\n\tString getSupportedScheme();\n\t// Resolve a Resource from a give uri.\n\tResource resolve(String location);\n}", "des": "SPI for loading resources."}
{"index": 6166, "code": "public interface Resumable {\n\t// Gets the last offset\n\tOffset<?> getLastOffset();\n\t// Gets the offset key (i.e.: the addressable part of the resumable object)\n\tOffsetKey<?> getOffsetKey();\n}", "des": "This provides an interface for resumable objects."}
{"index": 6167, "code": "public interface ResumeAware<T extends ResumeStrategy> {\n\t// Allows the implementation to provide custom adapter factories.\n\tdefault String adapterFactoryService();\n\t// Gets the ResumeStrategy instance\n\tT getResumeStrategy();\n\t// Injects the ResumeStrategy instance into the object\n\tvoid setResumeStrategy(T resumeStrategy);\n}", "des": "An interface to represent an object which wishes to support resume operations using a ResumeStrategy."}
{"index": 6168, "code": "public interface ResumeStrategyConfigurationBuilder<T extends ResumeStrategyConfigurationBuilder,Y extends ResumeStrategyConfiguration> {\n\t// Builds the resume strategy configuration\n\tY build();\n\t// Sets the Cacheable.FillPolicy for the cache used in the strategy\n\tT withCacheFillPolicy(Cacheable.FillPolicy cacheFillPolicy);\n\t// Sets the local resume cache instance to use in the strategy\n\tT withResumeCache(ResumeCache<?> resumeCache);\n}", "des": "Provides a basic interface for implementing component-specific configuration builder"}
{"index": 6169, "code": "public interface RouteAware {\n\t// Gets the Route\n\tRoute getRoute();\n\t// Injects the Route\n\tvoid setRoute(Route route);\n}", "des": "An interface to represent an object which wishes to be injected with a Route such as Consumer which is the consumer for a route."}
{"index": 6170, "code": "public interface RouteConfigurationsBuilder {\n\t// Adds the route configurations from this builder to the CamelContext.\n\tvoid addRouteConfigurationsToCamelContext(CamelContext context);\n\t// Adds or updates the route configurations from this builder to the CamelContext.\n\tvoid updateRouteConfigurationsToCamelContext(CamelContext context);\n}", "des": "A route configurations builder is capable of building route configurations using the builder and model classes."}
{"index": 6171, "code": "public interface RouteError {\n\t// Gets the error.\n\tThrowable getException();\n\t// Gets the phase associated with the error.\n\tRouteError.Phase getPhase();\n\t// Whether the route is regarded as unhealthy.\n\tboolean isUnhealthy();\n}", "des": "The last error that happened during changing the route lifecycle, i.e."}
{"index": 6172, "code": "public interface RouteIdAware {\n\t// Gets the route id\n\tString getRouteId();\n\t// Sets the route id\n\tvoid setRouteId(String routeId);\n}", "des": "To allow objects to be injected with the route id"}
{"index": 6173, "code": "public interface RoutesBuilder {\n\t// Adds the routes from this Route Builder to the CamelContext.\n\tvoid addRoutesToCamelContext(CamelContext context);\n\t// Adds the templated routes from this Route Builder to the CamelContext.\n\tvoid addTemplatedRoutesToCamelContext(CamelContext context);\n\t// Adds or updates the routes from this Route Builder to the CamelContext.\n\tSet<String> updateRoutesToCamelContext(CamelContext context);\n}", "des": "A routes builder is capable of building routes using the builder and model classes."}
{"index": 6174, "code": "public interface RoutesBuilderLoader extends StaticService, CamelContextAware {\n\t// The supported file extension.\n\tString getSupportedExtension();\n\t// Loads RoutesBuilder from Resource.\n\tRoutesBuilder loadRoutesBuilder(Resource resource);\n\t// Pre-parses the RoutesBuilder from Resource.\n\tdefault void preParseRoute(Resource resource);\n}", "des": "SPI for loading RoutesBuilder from a Resource."}
{"index": 6175, "code": "public interface RouteStartupOrder {\n\t// Gets the input to this route\n\tConsumer getInput();\n\t// Gets the route\n\tRoute getRoute();\n\t// Gets the services to this route.\n\tList<Service> getServices();\n\t// Get the order this route should be started.\n\tint getStartupOrder();\n}", "des": "Information about a route to be started where we want to control the order in which they are started by CamelContext."}
{"index": 6176, "code": "public interface RouteTemplateParameterSource {\n\t// The parameters for the given route\n\tMap<String,Object> parameters(String routeId);\n\t// Gets the route id's as a set.\n\tSet<String> routeIds();\n}", "des": "Source for parameters used when creating routes from route templates."}
{"index": 6177, "code": "public class RuntimeCamelException extends RuntimeException {\n\t// Wraps the caused exception in a RuntimeCamelException if its not already such an exception.\n\tstatic RuntimeCamelException wrapRuntimeCamelException(Throwable e);\n\t// Wraps the caused exception in a RuntimeCamelException if its not already a runtime exception.\n\tstatic RuntimeException wrapRuntimeException(Throwable e);\n}", "des": "Base class for all Camel unchecked exceptions."}
{"index": 6178, "code": "public static interface RuntimeEndpointRegistry.Statistic {\n\t// Whether the endpoint is used as input our output\n\tString getDirection();\n\t// Usage of the endpoint, such as how many messages it has received / sent to\n\tlong getHits();\n\t// The route id (if the endpoint is associated with a route)\n\tString getRouteId();\n\t// The endpoint uri\n\tString getUri();\n}", "des": "Statistics gathered about the endpoint."}
{"index": 6179, "code": "public interface ScheduledPollConsumerScheduler extends ShutdownableService, CamelContextAware {\n\t// Whether the scheduler has been started.\n\tboolean isSchedulerStarted();\n\t// Initializes this ScheduledPollConsumerScheduler with the associated Consumer.\n\tvoid onInit(Consumer consumer);\n\t// Schedules the task to run.\n\tvoid scheduleTask(Runnable task);\n\t// Starts the scheduler.\n\tvoid startScheduler();\n\t// Attempts to unschedules the last task which was scheduled.\n\tvoid unscheduleTask();\n}", "des": "A pluggable scheduler for org.apache.camel.support.ScheduledPollConsumer consumers."}
{"index": 6180, "code": "public class SecureSocketProtocolsParameters extends Object {\n\t// Returns a live reference to the list of secure socket protocol names.\n\tList<String> getSecureSocketProtocol();\n\t// Sets the list of secure socket protocol names.\n\tvoid setSecureSocketProtocol(List<String> secureSocketProtocol);\n}", "des": "Represents a list of TLS/SSL cipher suite names."}
{"index": 6181, "code": "@FunctionalInterface public interface Serializable {\n\t// Serializes this offset into a buffer of bytes\n\tByteBuffer serialize();\n\t// Serializes this offset into a buffer of bytes\n\tdefault ByteBuffer serialize(Object obj);\n}", "des": "An interface that represents resumable objects that can be serialized to a medium"}
{"index": 6182, "code": "public interface Service extends AutoCloseable {\n\t// Optional build phase which is executed by frameworks that supports pre-building projects (pre-compile) which allows special optimizations such as camel-quarkus.\n\tdefault void build();\n\t// Delegates to stop() so it can be used in try-with-resources expression.\n\tdefault void close();\n\t// Initialize the service\n\tdefault void init();\n\t// Starts the service\n\tvoid start();\n\t// Stops the service\n\tvoid stop();\n}", "des": "Represents the core lifecycle API for services which can be initialized, started and stopped"}
{"index": 6183, "code": "public interface ServiceChooserAware {\n\t// Get the ServiceChooser\n\tServiceChooser getServiceChooser();\n\t// Injects the ServiceChooser\n\tvoid setServiceChooser(ServiceChooser serviceChooser);\n}", "des": "An interface to represent an object which wishes to be injected with a ServiceChooser"}
{"index": 6184, "code": "public interface ServiceDiscoveryAware {\n\t// Get the ServiceDiscovery\n\tServiceDiscovery getServiceDiscovery();\n\t// Injects the ServiceDiscovery\n\tvoid setServiceDiscovery(ServiceDiscovery serviceDiscovery);\n}", "des": "An interface to represent an object which wishes to be injected with a ServiceDiscovery"}
{"index": 6185, "code": "public interface ServiceFilterAware {\n\t// Get the ServiceFilter\n\tServiceFilter getServiceFilter();\n\t// Injects the ServiceFilter\n\tvoid setServiceFilter(ServiceFilter serviceFilter);\n}", "des": "An interface to represent an object which wishes to be injected with a ServiceFilter"}
{"index": 6186, "code": "public interface SharedInternalProcessor extends Processor {\n\t// Processes the message exchange\n\tdefault void process(Exchange exchange);\n\t// Asynchronous API\n\tboolean process(Exchange exchange, AsyncCallback originalCallback, AsyncProcessor processor, Processor resultProcessor);\n\t// Synchronous API\n\tvoid process(Exchange exchange, AsyncProcessor processor, Processor resultProcessor);\n}", "des": "A Shared (thread safe) internal Processor that Camel routing engine used during routing for cross cutting functionality such as: Execute UnitOfWork Keeping track which route currently is being routed Execute RoutePolicy Gather JMX performance statics Tracing Debugging Message History Stream Caching Transformer ..."}
{"index": 6187, "code": "public interface ShutdownAware extends ShutdownPrepared {\n\t// To defer shutdown during first phase of shutdown.\n\tboolean deferShutdown(ShutdownRunningTask shutdownRunningTask);\n\t// Gets the number of pending exchanges.\n\tint getPendingExchangesSize();\n}", "des": "Allows Consumer to fine grained control on shutdown which mostly have to cater for in-memory based components."}
{"index": 6188, "code": "public enum ShutdownRoute extends Enum<ShutdownRoute> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ShutdownRoute valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ShutdownRoute[] values();\n}", "des": "Represents the options available when shutting down routes."}
{"index": 6189, "code": "public enum ShutdownRunningTask extends Enum<ShutdownRunningTask> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ShutdownRunningTask valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ShutdownRunningTask[] values();\n}", "des": "Represents the kind of options for what to do with the current task when shutting down."}
{"index": 6190, "code": "public interface SSLContextParametersAware extends CamelContextAware {\n\t// Determine if the implementing object is using global SSL context parameters.\n\tboolean isUseGlobalSslContextParameters();\n\t// Returns the global SSLContextParameters if enabled on the implementing object, null otherwise.\n\tdefault SSLContextParameters retrieveGlobalSslContextParameters();\n\t// Enable usage of global SSL context parameters.\n\tvoid setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);\n}", "des": "Indicates that an object is able to use the global SSLContextParameters if configured."}
{"index": 6191, "code": "public interface StartupListener {\n\t// Callback invoked when the CamelContext has been fully started.\n\tdefault void onCamelContextFullyStarted(CamelContext context, boolean alreadyStarted);\n\t// Callback invoked when the CamelContext is about to be fully started (not started yet).\n\tvoid onCamelContextStarted(CamelContext context, boolean alreadyStarted);\n\t// Callback invoked when the CamelContext is being started.\n\tdefault void onCamelContextStarting(CamelContext context, boolean alreadyStarted);\n}", "des": "Allows objects to be notified when CamelContext has almost done all work when starting."}
{"index": 6192, "code": "public interface StartupStep {\n\t// Ends the step.\n\tvoid endStep();\n\t// Gets the begin time (optional).\n\tlong getBeginTime();\n\t// Description of the step\n\tString getDescription();\n\t// The id of the step\n\tint getId();\n\t// The step level (sub step of previous steps)\n\tint getLevel();\n\t// Name of the step\n\tString getName();\n\t// The id of the parent step\n\tint getParentId();\n\t// The source class type of the step\n\tString getType();\n}", "des": "Recording state of steps during startup to capture execution time, and being able to emit events to diagnostic tools such as Java Flight Recorder."}
{"index": 6193, "code": "public enum StartupSummaryLevel extends Enum<StartupSummaryLevel> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic StartupSummaryLevel valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic StartupSummaryLevel[] values();\n}", "des": "Controls the level of information logged during startup (and shutdown) of CamelContext."}
{"index": 6194, "code": "public interface StateRepository<K,V> extends Service {\n\t// Gets the state value for the given key.\n\tV getState(K key);\n\t// Sets the state value for the given key.\n\tvoid setState(K key, V value);\n}", "des": "This StateRepository holds a set of key/value pairs for defining a particular state of a component."}
{"index": 6195, "code": "public interface StaticExpression extends Expression {\n\t// Gets the constant value\n\tObject getValue();\n\t// Sets the constant value\n\tvoid setValue(Object value);\n}", "des": "Marked if the Expression or Predicate is based from a constant value (ie is static)."}
{"index": 6196, "code": "public interface StreamCache {\n\t// Create a copy of the stream.\n\tStreamCache copy(Exchange exchange);\n\t// Whether this StreamCache is in memory only or spooled to persistent storage such as files.\n\tboolean inMemory();\n\t// Gets the length of the cached stream.\n\tlong length();\n\t// Read position\n\tlong position();\n\t// Resets the StreamCache for a new stream consumption.\n\tvoid reset();\n\t// Writes the stream to the given output\n\tvoid writeTo(OutputStream os);\n}", "des": "Tagging interface to indicate that a type is capable of caching the underlying data stream."}
{"index": 6197, "code": "public static enum StreamCachingStrategy.SpoolUsedHeapMemoryLimit extends Enum<StreamCachingStrategy.SpoolUsedHeapMemoryLimit> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic StreamCachingStrategy.SpoolUsedHeapMemoryLimit valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic StreamCachingStrategy.SpoolUsedHeapMemoryLimit[] values();\n}", "des": "Used for selecting if the memory limit is committed or maximum heap memory setting."}
{"index": 6198, "code": "public interface SuspendableService extends Service {\n\t// Tests whether the service is suspended or not.\n\tboolean isSuspended();\n\t// Resumes the service.\n\tvoid resume();\n\t// Suspends the service.\n\tvoid suspend();\n}", "des": "A Service which is also capable of suspending and resuming."}
{"index": 6199, "code": "public interface Synchronization {\n\t// Get an optional SynchronizationRouteAware for this synchronization\n\tdefault SynchronizationRouteAware getRouteSynchronization();\n\t// Called when the processing of the message exchange is complete\n\tvoid onComplete(Exchange exchange);\n\t// Called when the processing of the message exchange has failed for some reason.\n\tvoid onFailure(Exchange exchange);\n}", "des": "Provides a hook for custom Processor or Component instances to respond to completed or failed processing of an Exchange rather like Spring's TransactionSynchronization"}
{"index": 6200, "code": "public interface SynchronizationRouteAware {\n\t// Invoked after the Exchange has been routed by the given route.\n\tvoid onAfterRoute(Route route, Exchange exchange);\n\t// Invoked before the Exchange is being routed by the given route.\n\tvoid onBeforeRoute(Route route, Exchange exchange);\n}", "des": "An extension to Synchronization which provides route awareness capabilities."}
{"index": 6201, "code": "public interface SynchronizationVetoable extends Synchronization {\n\t// Whether or not handover this synchronization is allowed.\n\tboolean allowHandover();\n\t// A method to perform optional housekeeping when a Synchronization is being handed over.\n\tvoid beforeHandover(Exchange target);\n}", "des": "A vetoable Synchronization."}
{"index": 6202, "code": "public interface ThreadPoolFactory {\n\t// Creates a new cached thread pool\n\tExecutorService newCachedThreadPool(ThreadFactory threadFactory);\n\t// Create a scheduled thread pool using the given thread pool profile\n\tScheduledExecutorService newScheduledThreadPool(ThreadPoolProfile profile, ThreadFactory threadFactory);\n\t// Create a thread pool using the given thread pool profile\n\tExecutorService newThreadPool(ThreadPoolProfile profile, ThreadFactory threadFactory);\n}", "des": "Creates ExecutorService and ScheduledExecutorService objects that work with a thread pool for a given ThreadPoolProfile and ThreadFactory."}
{"index": 6203, "code": "public class TypeConversionException extends RuntimeCamelException {\n\t// Returns an error message for type conversion failed.\n\tstatic String createMessage(Object value, Class<?> type, Throwable cause);\n\t// Returns the required from type.\n\tClass<?> getFromType();\n\t// Returns the required to type\n\tClass<?> getToType();\n\t// Returns the value which could not be converted\n\tObject getValue();\n}", "des": "Exception when failing during type conversion."}
{"index": 6204, "code": "public enum TypeConverterExists extends Enum<TypeConverterExists> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TypeConverterExists valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TypeConverterExists[] values();\n}", "des": "What to do if attempting to add a duplicate type converter"}
{"index": 6205, "code": "public interface UnitOfWorkFactory extends AfterPropertiesConfigured {\n\t// Callback invoked after the element have configured its properties.\n\tdefault void afterPropertiesConfigured(CamelContext camelContext);\n\t// Creates a new UnitOfWork\n\tUnitOfWork createUnitOfWork(Exchange exchange);\n}", "des": "Factory to create UnitOfWork."}
{"index": 6206, "code": "public interface UuidGenerator {\n\t// Generates an UUID string representation to be used as exchange id.\n\tdefault String generateExchangeUuid();\n\t// Generates an UUID string representation.\n\tString generateUuid();\n}", "des": "Generator to generate UUID strings."}
{"index": 6207, "code": "public enum WaitForTaskToComplete extends Enum<WaitForTaskToComplete> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic WaitForTaskToComplete valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic WaitForTaskToComplete[] values();\n}", "des": "Represent the kinds of options for wait for tasks to complete."}
{"index": 6208, "code": "public interface WrappedFile<T> {\n\t// Gets the content of the file.\n\tObject getBody();\n\t// Gets the file.\n\tT getFile();\n}", "des": "Wraps a file."}
{"index": 6209, "code": "public interface WritableHealthCheckRepository extends HealthCheckRepository {\n\t// Adds a HealthCheck to the repository.\n\tvoid addHealthCheck(HealthCheck healthCheck);\n\t// Removes a HealthCheck from the repository.\n\tvoid removeHealthCheck(HealthCheck healthCheck);\n}", "des": "An interface to represent an object which wishes to be injected with the HealthCheck"}
{"index": 6210, "code": "public static enum AbstractConnectionFactory.AddressShuffleMode extends Enum<AbstractConnectionFactory.AddressShuffleMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AbstractConnectionFactory.AddressShuffleMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AbstractConnectionFactory.AddressShuffleMode[] values();\n}", "des": "The mode used to shuffle the addresses."}
{"index": 6211, "code": "protected static class AmqpAppender.AmqpManager extends org.apache.logging.log4j.core.appender.AbstractManager {\n\t// Configure the RabbitConnectionFactoryBean.\n\tprotected void configureRabbitConnectionFactory(RabbitConnectionFactoryBean factoryBean);\n\t// Create the ConnectionFactory.\n\tprotected com.rabbitmq.client.ConnectionFactory createRabbitConnectionFactory();\n\tprotected boolean releaseSub(long timeout, TimeUnit timeUnit);\n\tprotected void setUpExchangeDeclaration();\n}", "des": "Manager class for the appender."}
{"index": 6212, "code": "public class BatchingRabbitTemplate extends RabbitTemplate {\n\t// Perform additional start actions.\n\tvoid doStart();\n\t// Perform additional stop actions.\n\tvoid doStop();\n\t// Flush any partial in-progress batches.\n\tvoid flush();\n\tboolean isRunning();\n\t// Send a message to a specific exchange with a specific routing key.\n\tvoid send(String exchange, String routingKey, org.springframework.amqp.core.Message message, CorrelationData correlationData);\n}", "des": "A RabbitTemplate that permits batching individual messages into a larger message."}
{"index": 6213, "code": "public class BrokerEvent extends org.springframework.amqp.event.AmqpEvent {\n\t// Properties of the event MessageProperties.getHeaders().\n\tMap<String,Object> getEventProperties();\n\t// The event type (MessageProperties.getReceivedRoutingKey()).\n\tString getEventType();\n\t// The complete MessageProperties from the event representing the event.\n\torg.springframework.amqp.core.MessageProperties getMessageProperties();\n}", "des": "Represents a broker event generated by the Event Exchange Plugin (https://www.rabbitmq.com/event-exchange.html)."}
{"index": 6214, "code": "public static enum CachingConnectionFactory.CacheMode extends Enum<CachingConnectionFactory.CacheMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CachingConnectionFactory.CacheMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CachingConnectionFactory.CacheMode[] values();\n}", "des": "The cache mode."}
{"index": 6215, "code": "public static enum CachingConnectionFactory.ConfirmType extends Enum<CachingConnectionFactory.ConfirmType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CachingConnectionFactory.ConfirmType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CachingConnectionFactory.ConfirmType[] values();\n}", "des": "The type of publisher confirms to use."}
{"index": 6216, "code": "@FunctionalInterface public interface ChannelListener {\n\t// Called when a new channel is created.\n\tvoid onCreate(com.rabbitmq.client.Channel channel, boolean transactional);\n\t// Called when the underlying RabbitMQ channel is closed for any reason.\n\tdefault void onShutDown(com.rabbitmq.client.ShutdownSignalException signal);\n}", "des": "A listener for new channel creation and destruction."}
{"index": 6217, "code": "public interface ChannelProxy extends com.rabbitmq.client.Channel, org.springframework.aop.RawTargetAccess {\n\t// Return the target Channel of this proxy.\n\tcom.rabbitmq.client.Channel getTargetChannel();\n\t// Return true if confirms are selected on this channel.\n\tdefault boolean isConfirmSelected();\n\t// Return true if publisher confirms are enabled.\n\tdefault boolean isPublisherConfirms();\n\t// Return whether this channel has transactions enabled txSelect().\n\tboolean isTransactional();\n}", "des": "Subinterface of Channel to be implemented by Channel proxies."}
{"index": 6218, "code": "public static class ConditionalRejectingErrorHandler.DefaultExceptionStrategy extends Object implements FatalExceptionStrategy {\n\tboolean isFatal(Throwable t);\n\t// Subclasses can override this to add custom exceptions.\n\tprotected boolean isUserCauseFatal(Throwable cause);\n\t// Log the fatal ListenerExecutionFailedException at WARN level, excluding stack trace.\n\tprotected void logFatalException(ListenerExecutionFailedException t, Throwable cause);\n}", "des": "Default implementation of FatalExceptionStrategy."}
{"index": 6219, "code": "@FunctionalInterface public interface ConnectionListener {\n\t// Called when a connection is closed.\n\tdefault void onClose(Connection connection);\n\t// Called when a new connection is established.\n\tvoid onCreate(Connection connection);\n\t// Called when a connection couldn't be established.\n\tdefault void onFailed(Exception exception);\n\t// Called when a connection is force closed.\n\tdefault void onShutDown(com.rabbitmq.client.ShutdownSignalException signal);\n}", "des": "A listener for connection creation and closing."}
{"index": 6220, "code": "public class ConsumeOkEvent extends org.springframework.amqp.event.AmqpEvent {\n\t// Obtain the consumer tag assigned to the consumer.\n\tString getConsumerTag();\n\t// Obtain the queue name a consumer has been subscribed.\n\tString getQueue();\n}", "des": "An AmqpEvent emitted by the listener container when consumer is subscribed to the queue."}
{"index": 6221, "code": "public final class DeclareExchangeConnectionListener extends Object implements ConnectionListener {\n\t// Called when a connection is closed.\n\tvoid onClose(Connection connection);\n\t// Called when a new connection is established.\n\tvoid onCreate(Connection connection);\n}", "des": "A ConnectionListener that will declare a single exchange when the connection is established."}
{"index": 6222, "code": "public class Delivery extends Object {\n\t// Retrieve the message body.\n\tbyte[] getBody();\n\t// Retrieve the consumer tag.\n\tString getConsumerTag();\n\t// Retrieve the message envelope.\n\tcom.rabbitmq.client.Envelope getEnvelope();\n\t// Retrieve the message properties.\n\tcom.rabbitmq.client.AMQP.BasicProperties getProperties();\n\t// Retrieve the queue.\n\tString getQueue();\n}", "des": "Encapsulates an arbitrary message - simple \"bean\" holder structure."}
{"index": 6223, "code": "public static enum ListenerContainerFactoryBean.Type extends Enum<ListenerContainerFactoryBean.Type> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic ListenerContainerFactoryBean.Type valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic ListenerContainerFactoryBean.Type[] values();\n}", "des": "The container type."}
{"index": 6224, "code": "public class ListenerContainerIdleEvent extends org.springframework.amqp.event.AmqpEvent {\n\t// How long the container has been idle.\n\tlong getIdleTime();\n\t// The id of the listener (if @RabbitListener) or the container bean name.\n\tString getListenerId();\n\t// The queues the container is listening to.\n\tString[] getQueueNames();\n}", "des": "An event that is emitted when a container is idle if the container is configured to do so."}
{"index": 6225, "code": "@FunctionalInterface public interface MessageBatchRecoverer extends MessageRecoverer {\n\t// Callback for message batch that was consumed but failed all retry attempts.\n\tvoid recover(List<org.springframework.amqp.core.Message> messages, Throwable cause);\n\t// Callback for message that was consumed but failed all retry attempts.\n\tdefault void recover(org.springframework.amqp.core.Message message, Throwable cause);\n}", "des": "A retry recoverer for use with a batch listener."}
{"index": 6226, "code": "public abstract class RabbitFuture<T> extends CompletableFuture<T> {\n\tboolean cancel(boolean mayInterruptIfRunning);\n\t// When confirms are enabled contains a CompletableFuture for the confirmation.\n\tCompletableFuture<Boolean> getConfirm();\n\t// When confirms are enabled and a nack is received, contains the cause for the nack, if any.\n\tString getNackCause();\n}", "des": "Base class for CompletableFutures returned by AsyncRabbitTemplate."}
{"index": 6227, "code": "@FunctionalInterface public interface RabbitListenerContainerFactory<C extends MessageListenerContainer> {\n\t// Create a MessageListenerContainer with no MessageListener or queues; the listener must be added later before the container is started.\n\tdefault C createListenerContainer();\n\t// Create a MessageListenerContainer for the given RabbitListenerEndpoint.\n\tC createListenerContainer(RabbitListenerEndpoint endpoint);\n}", "des": "Factory of MessageListenerContainers."}
{"index": 6228, "code": "public enum RabbitListenerObservation extends Enum<RabbitListenerObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RabbitListenerObservation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RabbitListenerObservation[] values();\n}", "des": "Spring Rabbit Observation for listeners."}
{"index": 6229, "code": "public static enum RabbitListenerObservation.ListenerLowCardinalityTags extends Enum<RabbitListenerObservation.ListenerLowCardinalityTags> implements io.micrometer.common.docs.KeyName {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RabbitListenerObservation.ListenerLowCardinalityTags valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RabbitListenerObservation.ListenerLowCardinalityTags[] values();\n}", "des": "Low cardinality tags."}
{"index": 6230, "code": "public enum RabbitTemplateObservation extends Enum<RabbitTemplateObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RabbitTemplateObservation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RabbitTemplateObservation[] values();\n}", "des": "Spring RabbitMQ Observation for RabbitTemplate."}
{"index": 6231, "code": "public static enum RabbitTemplateObservation.TemplateLowCardinalityTags extends Enum<RabbitTemplateObservation.TemplateLowCardinalityTags> implements io.micrometer.common.docs.KeyName {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RabbitTemplateObservation.TemplateLowCardinalityTags valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RabbitTemplateObservation.TemplateLowCardinalityTags[] values();\n}", "des": "Low cardinality tags."}
{"index": 6232, "code": "public class RepublishMessageRecovererWithConfirms extends RepublishMessageRecoverer {\n\t// Send the message.\n\tprotected void doSend(String exchange, String routingKey, org.springframework.amqp.core.Message message);\n\t// Set the confirm timeout; default 10 seconds.\n\tvoid setConfirmTimeout(long confirmTimeout);\n}", "des": "A RepublishMessageRecoverer supporting publisher confirms and returns."}
{"index": 6233, "code": "@FunctionalInterface public interface ShutDownChannelListener extends ChannelListener {\n\t// Called when a new channel is created.\n\tdefault void onCreate(com.rabbitmq.client.Channel channel, boolean transactional);\n\t// Called when the underlying RabbitMQ channel is closed for any reason.\n\tvoid onShutDown(com.rabbitmq.client.ShutdownSignalException signal);\n}", "des": "Functional sub interface enabling a lambda for the onShutDown method."}
{"index": 6234, "code": "public class WebFluxNodeLocator extends Object implements NodeLocator<org.springframework.web.reactive.function.client.WebClient> {\n\t// Create a client instance.\n\torg.springframework.web.reactive.function.client.WebClient createClient(String username, String password);\n\t// Retrieve a map of queue properties using the RabbitMQ Management REST API.\n\tMap<String,Object> restCall(org.springframework.web.reactive.function.client.WebClient client, String baseUri, String vhost, String queue);\n}", "des": "A NodeLocator using the Spring WebFlux WebClient."}
{"index": 6235, "code": "public interface ScopeCache {\n\t// Clears the cache and returns all objects in an unmodifiable collection.\n\tCollection<Object> clear();\n\t// Gets the named object from the cache.\n\tObject get(String name);\n\t// Put a value in the cache if the key is not already used.\n\tObject put(String name, Object value);\n\t// Removes the object with this name from the cache.\n\tObject remove(String name);\n}", "des": "A special-purpose cache interface specifically for the GenericScope to use to manage cached bean instances."}
{"index": 6236, "code": "public class StandardScopeCache extends Object implements ScopeCache {\n\t// Clears the cache and returns all objects in an unmodifiable collection.\n\tCollection<Object> clear();\n\t// Gets the named object from the cache.\n\tObject get(String name);\n\t// Put a value in the cache if the key is not already used.\n\tObject put(String name, Object value);\n\t// Removes the object with this name from the cache.\n\tObject remove(String name);\n}", "des": "A simple cache implementation backed by a concurrent map."}
{"index": 6237, "code": "public class AddColumnSpecification extends ColumnTypeChangeSpecification {\n\t// Create a new AddColumnSpecification for the given name and DataType.\n\tstatic AddColumnSpecification addColumn(com.datastax.oss.driver.api.core.CqlIdentifier name, com.datastax.oss.driver.api.core.type.DataType type);\n\t// Create a new AddColumnSpecification for the given name and DataType.\n\tstatic AddColumnSpecification addColumn(String name, com.datastax.oss.driver.api.core.type.DataType type);\n}", "des": "Value object representing a specification to add a column."}
{"index": 6238, "code": "public class AlterKeyspaceSpecification extends KeyspaceOptionsSpecification<AlterKeyspaceSpecification> {\n\t// Entry point into the AlterKeyspaceSpecification's fluent API given name to alter a keyspace.\n\tstatic AlterKeyspaceSpecification alterKeyspace(com.datastax.oss.driver.api.core.CqlIdentifier name);\n\t// Entry point into the AlterKeyspaceSpecification's fluent API given name to alter a keyspace.\n\tstatic AlterKeyspaceSpecification alterKeyspace(String name);\n}", "des": "Object to configure a ALTER KEYSPACE specification."}
{"index": 6239, "code": "public interface CassandraColumnType extends ColumnType {\n\t// Returns the DataType associated with this column type.\n\tcom.datastax.oss.driver.api.core.type.DataType getDataType();\n\t// Returns whether the associated DataType is a TupleType.\n\tdefault boolean isTupleType();\n\t// Returns whether the associated DataType is a UserDefinedType.\n\tdefault boolean isUserDefinedType();\n}", "des": "Descriptor for a Cassandra column type exposing a DataType."}
{"index": 6240, "code": "public class CassandraCqlTemplateFactoryBean extends Object implements FactoryBean<CqlTemplate>, InitializingBean {\n\tvoid afterPropertiesSet();\n\tCqlTemplate getObject();\n\tClass<CqlTemplate> getObjectType();\n\tboolean isSingleton();\n\t// Sets the Cassandra CqlSession to use.\n\tvoid setSession(com.datastax.oss.driver.api.core.CqlSession session);\n\t// Sets the Cassandra SessionFactory to use.\n\tvoid setSessionFactory(SessionFactory sessionFactory);\n}", "des": "Factory for configuring a CqlTemplate."}
{"index": 6241, "code": "public class CassandraExceptionTranslator extends Object implements CqlExceptionTranslator {\n\t// Build a message String for the given DriverException.\n\tprotected String buildMessage(String task, String cql, RuntimeException ex);\n\t// Translate the given RuntimeException into a generic DataAccessException.\n\tDataAccessException translate(String task, String cql, RuntimeException exception);\n\tDataAccessException translateExceptionIfPossible(RuntimeException exception);\n}", "des": "Simple PersistenceExceptionTranslator for Cassandra."}
{"index": 6242, "code": "public class CassandraPersistentEntitySchemaDropper extends Object {\n\t// Drop tables that exist in the keyspace.\n\tvoid dropTables(boolean dropUnused);\n\t// Drop user types that exist in the keyspace.\n\tvoid dropUserTypes(boolean dropUnused);\n}", "des": "Schema drop support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity."}
{"index": 6243, "code": "@NoRepositoryBean public interface CassandraRepository<T,ID> extends ListCrudRepository<T,ID> {\n\t// Returns a Slice of entities meeting the paging restriction provided in the Pageable object.\n\tSlice<T> findAll(Pageable pageable);\n\tList<T> findAllById(Iterable<ID> ids);\n\t// Inserts the given entities.\n\t<S extends T>List<S> insert(Iterable<S> entities);\n\t// Inserts the given entity.\n\t<S extends T>S insert(S entity);\n}", "des": "Cassandra-specific extension of the CrudRepository interface that allows the specification of a type for the identity of the @Table (or @Persistable) type."}
{"index": 6244, "code": "public class CassandraSchemaElementExistsException extends NonTransientDataAccessException {\n\t// Deprecated.\n\tString getElementName();\n\t// Deprecated.\n\tCassandraSchemaElementExistsException.ElementType getElementType();\n}", "des": "Spring data access exception for when Cassandra schema element being created already exists."}
{"index": 6245, "code": "public static enum CassandraType.Name extends Enum<CassandraType.Name> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CassandraType.Name valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CassandraType.Name[] values();\n}", "des": "Cassandra Protocol types."}
{"index": 6246, "code": "public interface CassandraValueProvider extends PropertyValueProvider<CassandraPersistentProperty> {\n\t// Returns whether the underlying source.\n\tObject getSource();\n\t// Returns whether the underlying source contains a data source for the given CassandraPersistentProperty.\n\tboolean hasProperty(CassandraPersistentProperty property);\n}", "des": "PropertyValueProvider for CassandraPersistentProperty."}
{"index": 6247, "code": "public abstract class ColumnName extends Object {\n\tboolean equals(Object obj);\n\t// Create a ColumnName given CqlIdentifier.\n\tstatic ColumnName from(com.datastax.oss.driver.api.core.CqlIdentifier cqlIdentifier);\n\t// Create a ColumnName given a string columnName.\n\tstatic ColumnName from(String columnName);\n\tabstract Optional<String> getColumnName();\n\tabstract Optional<com.datastax.oss.driver.api.core.CqlIdentifier> getCqlIdentifier();\n\t// Represent the column name as CQL.\n\tabstract String toCql();\n}", "des": "Value object representing a column name."}
{"index": 6248, "code": "public interface ColumnTypeResolver {\n\t// Resolve a ColumnType from a value.\n\tColumnType resolve(Object value);\n\t// Resolve a CassandraColumnType from a CassandraPersistentProperty.\n\tdefault CassandraColumnType resolve(CassandraPersistentProperty property);\n\t// Resolve a CassandraColumnType from a CassandraType annotation.\n\tCassandraColumnType resolve(CassandraType annotation);\n\t// Resolve a CassandraColumnType from TypeInformation.\n\tCassandraColumnType resolve(TypeInformation<?> typeInformation);\n}", "des": "Resolves ColumnType for properties, TypeInformation, and values."}
{"index": 6249, "code": "public class CompositeKeyspacePopulator extends Object implements KeyspacePopulator {\n\t// Add one or more populators to the list of delegates.\n\tvoid addPopulators(KeyspacePopulator... populators);\n\t// Populate, initialize, or clean up the database using the provided CqlSession connection.\n\tvoid populate(com.datastax.oss.driver.api.core.CqlSession session);\n\t// Specify one or more populators to delegate to.\n\tvoid setPopulators(KeyspacePopulator... populators);\n}", "des": "Composite KeyspacePopulator that delegates to a list of given KeyspacePopulator implementations, executing all scripts."}
{"index": 6250, "code": "public enum CompressionType extends Enum<CompressionType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CompressionType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CompressionType[] values();\n}", "des": "Simple enumeration for the various compression types."}
{"index": 6251, "code": "public static enum CreateIndexSpecification.ColumnFunction extends Enum<CreateIndexSpecification.ColumnFunction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CreateIndexSpecification.ColumnFunction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CreateIndexSpecification.ColumnFunction[] values();\n}", "des": "Column functions to specify indexing behavior."}
{"index": 6252, "code": "public interface CriteriaDefinition {\n\t// Get the identifying key.\n\tColumnName getColumnName();\n\t// Get CriteriaDefinition.Predicate.\n\tCriteriaDefinition.Predicate getPredicate();\n}", "des": "Criteria definition for a ColumnName exposing a CriteriaDefinition.Predicate."}
{"index": 6253, "code": "public static enum CriteriaDefinition.Operators extends Enum<CriteriaDefinition.Operators> implements CriteriaDefinition.Operator {\n\tstatic Optional<CriteriaDefinition.Operators> from(String operator);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic CriteriaDefinition.Operators valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic CriteriaDefinition.Operators[] values();\n}", "des": "Commonly used CQL operators."}
{"index": 6254, "code": "public class DeleteOptions extends WriteOptions {\n\t// Create a new DeleteOptions.DeleteOptionsBuilder.\n\tstatic DeleteOptions.DeleteOptionsBuilder builder();\n\t// Create default DeleteOptions.\n\tstatic DeleteOptions empty();\n\tboolean equals(Object o);\n\tFilter getIfCondition();\n\tboolean isIfExists();\n\t// Create a new DeleteOptions.DeleteOptionsBuilder to mutate properties of this DeleteOptions.\n\tDeleteOptions.DeleteOptionsBuilder mutate();\n}", "des": "Extension to WriteOptions for use with DELETE operations."}
{"index": 6255, "code": "public class DropColumnSpecification extends ColumnChangeSpecification {\n\t// Create a new DropColumnSpecification for the given name.\n\tstatic DropColumnSpecification dropColumn(com.datastax.oss.driver.api.core.CqlIdentifier name);\n\t// Create a new DropColumnSpecification for the given name.\n\tstatic DropColumnSpecification dropColumn(String name);\n}", "des": "Value object representing a specification to drop a column."}
{"index": 6256, "code": "public class DropIndexSpecification extends IndexNameSpecification<DropIndexSpecification> {\n\t// Create a new DropIndexSpecification for the given indexName.\n\tstatic DropIndexSpecification dropIndex(com.datastax.oss.driver.api.core.CqlIdentifier indexName);\n\t// Create a new DropIndexSpecification for the given indexName.\n\tstatic DropIndexSpecification dropIndex(String indexName);\n}", "des": "Value object representing a DROP INDEX specification."}
{"index": 6257, "code": "public static enum Embedded.OnEmpty extends Enum<Embedded.OnEmpty> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Embedded.OnEmpty valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Embedded.OnEmpty[] values();\n}", "des": "Load strategy to be used Embedded.onEmpty()."}
{"index": 6258, "code": "public class EntityMapping extends Object {\n\tboolean equals(Object obj);\n\tString getEntityClassName();\n\t// Deprecated. since 3.0.\n\tString getForceQuote();\n\tMap<String,PropertyMapping> getPropertyMappings();\n\tString getTableName();\n\tvoid setEntityClassName(String entityClassName);\n\t// Deprecated.\n\tvoid setForceQuote(String forceQuote);\n\tvoid setPropertyMappings(Map<String,PropertyMapping> propertyMappings);\n\tvoid setTableName(String tableName);\n}", "des": "Mapping information for an individual entity class."}
{"index": 6259, "code": "public static interface ExecutableDeleteOperation.DeleteWithTable {\n\t// Explicitly set the name of the table on which to execute the delete.\n\tExecutableDeleteOperation.DeleteWithQuery inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to execute the delete.\n\tdefault ExecutableDeleteOperation.DeleteWithQuery inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 6260, "code": "public static interface ExecutableInsertOperation.InsertWithTable<T> extends ExecutableInsertOperation.InsertWithOptions<T> {\n\t// Explicitly set the name of the table.\n\tExecutableInsertOperation.InsertWithOptions<T> inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table.\n\tdefault ExecutableInsertOperation.InsertWithOptions<T> inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 6261, "code": "public static interface ExecutableSelectOperation.SelectWithTable<T> extends ExecutableSelectOperation.SelectWithQuery<T> {\n\t// Explicitly set the name of the table on which to execute the query.\n\tExecutableSelectOperation.SelectWithProjection<T> inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to execute the query.\n\tdefault ExecutableSelectOperation.SelectWithProjection<T> inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 6262, "code": "public static interface ExecutableUpdateOperation.UpdateWithTable {\n\t// Explicitly set the name of the table on which to execute the update.\n\tExecutableUpdateOperation.UpdateWithQuery inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to execute the update.\n\tdefault ExecutableUpdateOperation.UpdateWithQuery inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 6263, "code": "public class FieldSpecification extends Object {\n\t// Create a new FieldSpecification given name and DataType.\n\tstatic FieldSpecification of(com.datastax.oss.driver.api.core.CqlIdentifier name, com.datastax.oss.driver.api.core.type.DataType type);\n\t// Create a new FieldSpecification for the given name and DataType\n\tstatic FieldSpecification of(String name, com.datastax.oss.driver.api.core.type.DataType type);\n\tString toCql();\n\tStringBuilder toCql(StringBuilder cql);\n}", "des": "Base value object class to specify user type fields."}
{"index": 6264, "code": "@FunctionalInterface public interface Filter extends Streamable<CriteriaDefinition> {\n\t// Create a simple Filter given CriteriaDefinitions.\n\tstatic Filter from(Iterable<? extends CriteriaDefinition> criteriaDefinitions);\n\t// Create a simple Filter given CriteriaDefinitions.\n\tstatic Filter from(CriteriaDefinition... criteriaDefinitions);\n\tIterable<CriteriaDefinition> getCriteriaDefinitions();\n\tdefault Iterator<CriteriaDefinition> iterator();\n}", "des": "Filter consisting of CriteriaDefinitions to be used with SELECT, UPDATE and DELETE queries."}
{"index": 6265, "code": "public class IdInterfaceExceptions extends MappingException {\n\tvoid add(IdInterfaceException e);\n\t// Returns the number of exceptions aggregated in this exception.\n\tint getCount();\n\t// Returns a list of the IdInterfaceExceptions aggregated within.\n\tCollection<MappingException> getExceptions();\n\tString getIdInterfaceName();\n\tString getMessage();\n\t// Returns a list of the IdInterfaceException messages aggregated within.\n\tCollection<String> getMessages();\n}", "des": "Aggregator of multiple violations for convenience when verifying id interfaces."}
{"index": 6266, "code": "public class IncorrectResultSetColumnCountException extends DataRetrievalFailureException {\n\t// Return the actual column count.\n\tint getActualCount();\n\t// Return the expected column count.\n\tint getExpectedCount();\n}", "des": "Data access exception thrown when a result set did not have the correct column count, for example when expecting a single column but getting 0 or more than 1 columns."}
{"index": 6267, "code": "public interface IndexDescriptor {\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getColumnName();\n\t// Returns the name of the index.\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getName();\n\t// Returns the table name for the index\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getTableName();\n\tString getUsing();\n\tboolean isCustom();\n}", "des": "Describes an index."}
{"index": 6268, "code": "public class InsertOptions extends WriteOptions {\n\t// Create a new InsertOptions.InsertOptionsBuilder.\n\tstatic InsertOptions.InsertOptionsBuilder builder();\n\t// Create default InsertOptions.\n\tstatic InsertOptions empty();\n\tboolean equals(Object o);\n\tboolean isIfNotExists();\n\tboolean isInsertNulls();\n\t// Create a new InsertOptions.InsertOptionsBuilder to mutate properties of this InsertOptions.\n\tInsertOptions.InsertOptionsBuilder mutate();\n}", "des": "Extension to WriteOptions for use with INSERT operations."}
{"index": 6269, "code": "public enum KeyspaceAction extends Enum<KeyspaceAction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic KeyspaceAction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic KeyspaceAction[] values();\n}", "des": "Available actions for Keyspace Specifications."}
{"index": 6270, "code": "public interface KeyspaceDescriptor {\n\t// Returns the name of the table.\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getName();\n\t// Returns an unmodifiable Map of keyspace options.\n\tMap<String,Object> getOptions();\n}", "des": "Describes a Keyspace."}
{"index": 6271, "code": "public static enum KeyspaceOption.ReplicationStrategy extends Enum<KeyspaceOption.ReplicationStrategy> {\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic KeyspaceOption.ReplicationStrategy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic KeyspaceOption.ReplicationStrategy[] values();\n}", "des": "Known Replication Strategy options."}
{"index": 6272, "code": "public abstract class KeyspaceOptionsSpecification<T extends KeyspaceOptionsSpecification<T>> extends KeyspaceActionSpecification {\n\tboolean equals(Object o);\n\tMap<String,Object> getOptions();\n\t// Adds the given option by name to this keyspaces's options.\n\tT with(String name, Object value, boolean escape, boolean quote);\n\t// Convenience method that calls with(option, null).\n\tT with(KeyspaceOption option);\n\t// Sets the given table option.\n\tT with(KeyspaceOption option, Object value);\n}", "des": "Abstract builder class to support the construction of table specifications that have table options, that is, those options normally specified by WITH ... AND ...."}
{"index": 6273, "code": "public class MapIdFactory extends Object {\n\t// Produces an implementation of the given id interface type using the type's class loader.\n\tstatic <T> T id(Class<T> idInterface);\n\t// Produces an implementation of the given class loader.\n\tstatic <T> T id(Class<T> idInterface, ClassLoader loader);\n}", "des": "Factory class for producing implementations of given id interfaces."}
{"index": 6274, "code": "public class MappingCassandraEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements CassandraEntityInformation<T,ID> {\n\tID getId(T entity);\n\t// Returns the attribute that the id will be persisted to.\n\tString getIdAttribute();\n\tClass<ID> getIdType();\n\t// Returns the name of the table the entity shall be persisted to.\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getTableName();\n}", "des": "CassandraEntityInformation implementation using a CassandraPersistentEntity instance to lookup the necessary information."}
{"index": 6275, "code": "public final class ObservableReactiveSessionFactory extends Object {\n\t// Wrap the CqlSession with a CqlSessionObservationInterceptor.\n\tstatic ReactiveSession wrap(ReactiveSession session, io.micrometer.observation.ObservationRegistry observationRegistry);\n\t// Wrap the CqlSession with a CqlSessionObservationInterceptor.\n\tstatic ReactiveSession wrap(ReactiveSession session, String remoteServiceName, io.micrometer.observation.ObservationRegistry observationRegistry);\n}", "des": "Factory to wrap a ReactiveSession with ObservableReactiveSession."}
{"index": 6276, "code": "public enum Ordering extends Enum<Ordering> {\n\t// Returns the CQL keyword of this Ordering.\n\tString cql();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Ordering valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Ordering[] values();\n}", "des": "Enum for Cassandra primary key column ordering."}
{"index": 6277, "code": "public enum PrimaryKeyType extends Enum<PrimaryKeyType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PrimaryKeyType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PrimaryKeyType[] values();\n}", "des": "Values representing primary key column types."}
{"index": 6278, "code": "public class PropertyMapping extends Object {\n\tboolean equals(Object o);\n\tString getColumnName();\n\t// Deprecated.\n\tString getForceQuote();\n\tString getPropertyName();\n\tvoid setColumnName(String columnName);\n\t// Deprecated.\n\tvoid setForceQuote(String forceQuote);\n}", "des": "Mapping between a persistent entity's property and its column."}
{"index": 6279, "code": "public static enum Query.Idempotency extends Enum<Query.Idempotency> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Query.Idempotency valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Query.Idempotency[] values();\n}", "des": "Enumeration to define statement idempotency."}
{"index": 6280, "code": "protected static class QueryMapper.Field extends Object {\n\t// Returns the key to be used in the mapped document eventually.\n\tColumnName getMappedKey();\n\t// Returns the underlying CassandraPersistentProperty backing the field.\n\tOptional<CassandraPersistentProperty> getProperty();\n\t// Returns a new QueryMapper.Field with the given name.\n\tQueryMapper.Field with(ColumnName name);\n}", "des": "Value object to represent a field and its meta-information."}
{"index": 6281, "code": "protected static class QueryMapper.MetadataBackedField extends QueryMapper.Field {\n\t// Returns the key to be used in the mapped document eventually.\n\tColumnName getMappedKey();\n\t// Returns the underlying CassandraPersistentProperty backing the field.\n\tOptional<CassandraPersistentProperty> getProperty();\n\t// Returns a new QueryMapper.Field with the given name.\n\tQueryMapper.MetadataBackedField with(ColumnName name);\n}", "des": "Extension of QueryMapper.Field to be backed with mapping metadata."}
{"index": 6282, "code": "public static interface ReactiveDeleteOperation.DeleteWithTable {\n\t// Explicitly set the name of the table on which to perform the delete.\n\tReactiveDeleteOperation.DeleteWithQuery inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to perform the delete.\n\tdefault ReactiveDeleteOperation.DeleteWithQuery inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 6283, "code": "public static interface ReactiveInsertOperation.InsertWithTable<T> extends ReactiveInsertOperation.InsertWithOptions<T> {\n\t// Explicitly set the name of the table.\n\tReactiveInsertOperation.InsertWithOptions<T> inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table.\n\tdefault ReactiveInsertOperation.InsertWithOptions<T> inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 6284, "code": "public static interface ReactiveSelectOperation.SelectWithTable<T> extends ReactiveSelectOperation.SelectWithQuery<T> {\n\t// Explicitly set the name of the table on which to perform the query.\n\tReactiveSelectOperation.SelectWithProjection<T> inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to perform the query.\n\tdefault ReactiveSelectOperation.SelectWithProjection<T> inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 6285, "code": "public static interface ReactiveSelectOperation.TerminatingSelect<T> {\n\t// Get all matching elements.\n\treactor.core.publisher.Flux<T> all();\n\t// Get the number of matching elements.\n\treactor.core.publisher.Mono<Long> count();\n\t// Check for the presence of matching elements.\n\treactor.core.publisher.Mono<Boolean> exists();\n\t// Get the first result or no result.\n\treactor.core.publisher.Mono<T> first();\n\t// Get exactly zero or one result.\n\treactor.core.publisher.Mono<T> one();\n}", "des": "Trigger SELECT execution by calling one of the terminating methods."}
{"index": 6286, "code": "public static interface ReactiveUpdateOperation.UpdateWithTable {\n\t// Explicitly set the name of the table to on which to perform the update.\n\tReactiveUpdateOperation.UpdateWithQuery inTable(com.datastax.oss.driver.api.core.CqlIdentifier table);\n\t// Explicitly set the name of the table on which to perform the update.\n\tdefault ReactiveUpdateOperation.UpdateWithQuery inTable(String table);\n}", "des": "Table override (optional)."}
{"index": 6287, "code": "public enum RowToArrayConverter extends Enum<RowToArrayConverter> implements Converter<com.datastax.oss.driver.api.core.cql.Row,Object[]> {\n\tObject[] convert(com.datastax.oss.driver.api.core.cql.Row row);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RowToArrayConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RowToArrayConverter[] values();\n}", "des": "Converter to convert Row to Object array."}
{"index": 6288, "code": "@ReadingConverter public enum RowToListConverter extends Enum<RowToListConverter> implements Converter<com.datastax.oss.driver.api.core.cql.Row,List<Object>> {\n\tList<Object> convert(com.datastax.oss.driver.api.core.cql.Row row);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RowToListConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RowToListConverter[] values();\n}", "des": "Converter to convert Rows to a List of Object representation."}
{"index": 6289, "code": "@ReadingConverter public enum RowToMapConverter extends Enum<RowToMapConverter> implements Converter<com.datastax.oss.driver.api.core.cql.Row,Map<String,Object>> {\n\tMap<String,Object> convert(com.datastax.oss.driver.api.core.cql.Row row);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RowToMapConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RowToMapConverter[] values();\n}", "des": "Converter to convert Rows to a Map of String/Object representation."}
{"index": 6290, "code": "public class RowValueProvider extends Object implements CassandraValueProvider {\n\t<T> T getPropertyValue(CassandraPersistentProperty property);\n\t// Returns whether the underlying source.\n\tObject getSource();\n\t// Returns whether the underlying source contains a data source for the given CassandraPersistentProperty.\n\tboolean hasProperty(CassandraPersistentProperty property);\n}", "des": "CassandraValueProvider to read property values from a Row."}
{"index": 6291, "code": "public enum SchemaAction extends Enum<SchemaAction> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SchemaAction valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SchemaAction[] values();\n}", "des": "Enum identifying any schema actions to take at startup."}
{"index": 6292, "code": "public class SimplePreparedStatementCreator extends Object implements PreparedStatementCreator, CqlProvider {\n\t// Create a statement in this session.\n\tcom.datastax.oss.driver.api.core.cql.PreparedStatement createPreparedStatement(com.datastax.oss.driver.api.core.CqlSession session);\n\t// Return the CQL string for this object, i.e. typically the CQL used for creating statements.\n\tString getCql();\n}", "des": "Trivial implementation of PreparedStatementCreator."}
{"index": 6293, "code": "public class SnakeCaseNamingStrategy extends Object implements NamingStrategy {\n\t// Uses PersistentProperty.getName() and separates camel case parts with '_'.\n\tString getColumnName(CassandraPersistentProperty property);\n\t// Uses Class.getSimpleName() and separates camel case parts with '_'.\n\tString getTableName(CassandraPersistentEntity<?> entity);\n\t// Uses Class.getSimpleName() and separates camel case parts with '_'.\n\tString getUserDefinedTypeName(CassandraPersistentEntity<?> entity);\n}", "des": "Naming strategy that renders CamelCase name parts to snake_case."}
{"index": 6294, "code": "public static enum StatementBuilder.ParameterHandling extends Enum<StatementBuilder.ParameterHandling> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic StatementBuilder.ParameterHandling valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic StatementBuilder.ParameterHandling[] values();\n}", "des": "Enumeration to represent how parameters are rendered."}
{"index": 6295, "code": "public static enum TableOption.KeyCachingOption extends Enum<TableOption.KeyCachingOption> {\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TableOption.KeyCachingOption valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TableOption.KeyCachingOption[] values();\n}", "des": "Known KeyCaching Options"}
{"index": 6296, "code": "public abstract class TableOptionsSpecification<T extends TableOptionsSpecification<T>> extends TableNameSpecification {\n\tMap<String,Object> getOptions();\n\t// Adds the given option by name to this table's options.\n\tT with(String name, Object value, boolean escape, boolean quote);\n\t// Convenience method that calls with(option, null).\n\tT with(TableOption option);\n\t// Sets the given table option.\n\tT with(TableOption option, Object value);\n}", "des": "Abstract builder class to support the construction of table specifications that have table options, that is, those options normally specified by WITH ... AND ...."}
{"index": 6297, "code": "@FunctionalInterface public interface TermFactory {\n\t// Check whether the term factory accepts Collection values to be created as Term.\n\tdefault boolean canBindCollection();\n\t// Create a Term for the given value.\n\tcom.datastax.oss.driver.api.querybuilder.term.Term create(Object value);\n}", "des": "Factory for Term objects encapsulating a binding value."}
{"index": 6298, "code": "public class TransformingNamingStrategy extends Object implements NamingStrategy {\n\t// Create a column name from the given property.\n\tString getColumnName(CassandraPersistentProperty property);\n\t// Create a table name from the given CassandraPersistentEntity.\n\tString getTableName(CassandraPersistentEntity<?> entity);\n\t// Create a user-defined type name from the given CassandraPersistentEntity.\n\tString getUserDefinedTypeName(CassandraPersistentEntity<?> entity);\n}", "des": "NamingStrategy that applies a transformation Function after invoking a delegate NamingStrategy."}
{"index": 6299, "code": "public class TupleValueProvider extends Object implements CassandraValueProvider {\n\t<T> T getPropertyValue(CassandraPersistentProperty property);\n\t// Returns whether the underlying source.\n\tObject getSource();\n\t// Returns whether the underlying source contains a data source for the given CassandraPersistentProperty.\n\tboolean hasProperty(CassandraPersistentProperty property);\n}", "des": "CassandraValueProvider to read property values from a TupleValue."}
{"index": 6300, "code": "public class UdtValueProvider extends Object implements CassandraValueProvider {\n\t<T> T getPropertyValue(CassandraPersistentProperty property);\n\t// Returns whether the underlying source.\n\tObject getSource();\n\t// Returns whether the underlying source contains a data source for the given CassandraPersistentProperty.\n\tboolean hasProperty(CassandraPersistentProperty property);\n}", "des": "CassandraValueProvider to read property values from a UdtValue."}
{"index": 6301, "code": "public static interface Update.RemoveFromBuilder {\n\t// Remove all entries matching value from a set, list or map (map key).\n\tUpdate value(Object value);\n\t// Remove all entries matching values from a set, list or map (map key).\n\tUpdate values(Iterable<? extends Object> values);\n\t// Remove all entries matching values from a set, list or map (map key).\n\tdefault Update values(Object... values);\n}", "des": "Builder to remove a single element/multiple elements from a collection associated with a ColumnName."}
{"index": 6302, "code": "public static interface Update.SetBuilder {\n\t// Create a Update.SetValueBuilder to set a value at a numeric index.\n\tUpdate.SetValueBuilder atIndex(int index);\n\t// Create a Update.SetValueBuilder to set a value at index.\n\tUpdate.SetValueBuilder atKey(Object key);\n}", "des": "Builder to associate a single value with a collection at a given index at ColumnName."}
{"index": 6303, "code": "public class UpdateOptions extends WriteOptions {\n\t// Create a new UpdateOptions.UpdateOptionsBuilder.\n\tstatic UpdateOptions.UpdateOptionsBuilder builder();\n\t// Create default UpdateOptions.\n\tstatic UpdateOptions empty();\n\tboolean equals(Object o);\n\tFilter getIfCondition();\n\tboolean isIfExists();\n\t// Create a new UpdateOptions.UpdateOptionsBuilder to mutate properties of this UpdateOptions.\n\tUpdateOptions.UpdateOptionsBuilder mutate();\n}", "des": "Extension to WriteOptions for use with UPDATE operations."}
{"index": 6304, "code": "public class UserTypeSpecification<T extends UserTypeSpecification<T>> extends UserTypeNameSpecification {\n\t// Adds an ADD to the list of field changes.\n\tT field(com.datastax.oss.driver.api.core.CqlIdentifier name, com.datastax.oss.driver.api.core.type.DataType type);\n\t// Adds the given field to the type.\n\tT field(String name, com.datastax.oss.driver.api.core.type.DataType type);\n\tList<FieldSpecification> getFields();\n}", "des": "Object to support the configuration of user type specifications that have columns."}
{"index": 6305, "code": "public class VerifierMappingExceptions extends MappingException {\n\t// Returns a list of the MappingExceptions aggregated within.\n\tCollection<MappingException> getMappingExceptions();\n\tString getMessage();\n\t// Returns a list of the MappingException messages aggregated within.\n\tCollection<String> getMessages();\n}", "des": "Aggregator of multiple MappingException for convenience when verifying persistent entities."}
{"index": 6306, "code": "public class WriteOptions extends QueryOptions {\n\t// Create a new WriteOptions.WriteOptionsBuilder.\n\tstatic WriteOptions.WriteOptionsBuilder builder();\n\t// Create default WriteOptions.\n\tstatic WriteOptions empty();\n\tboolean equals(Object o);\n\tLong getTimestamp();\n\tDuration getTtl();\n\t// Create a new WriteOptions.WriteOptionsBuilder to mutate properties of this WriteOptions.\n\tWriteOptions.WriteOptionsBuilder mutate();\n}", "des": "Cassandra Write Options are an extension to QueryOptions for write operations."}
{"index": 6307, "code": "public enum JdbcColumnTypes extends Enum<JdbcColumnTypes> {\n\tabstract Class<?> resolvePrimitiveType(Class<?> type);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic JdbcColumnTypes valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic JdbcColumnTypes[] values();\n}", "des": "Utility that determines the necessary type conversions between Java types used in the domain model and types compatible with JDBC drivers."}
{"index": 6308, "code": "public class JdbcIdentifierBuilder extends Object {\n\tIdentifier build();\n\tstatic JdbcIdentifierBuilder empty();\n\t// Creates ParentKeys with backreference for the given path and value of the parents id.\n\tstatic JdbcIdentifierBuilder forBackReferences(JdbcConverter converter, PersistentPropertyPathExtension path, Object value);\n\t// Adds a qualifier to the identifier to build.\n\tJdbcIdentifierBuilder withQualifier(PersistentPropertyPathExtension path, Object value);\n}", "des": "Builder for Identifier."}
{"index": 6309, "code": "public interface JdbcTypeFactory {\n\t// Converts the provided value in a Array instance.\n\tArray createArray(Object[] value);\n\t// An implementation used in places where a proper JdbcTypeFactory can not be provided but an instance needs to be provided anyway, mostly for providing backward compatibility.\n\tstatic JdbcTypeFactory unsupported();\n}", "des": "Allows the creation of instances of database dependent types, e.g."}
{"index": 6310, "code": "public class MyBatisContext extends Object {\n\t// Returns a value for the given key.\n\tObject get(String key);\n\t// The domain type of the entity to query or act upon.\n\tClass getDomainType();\n\t// The ID of the entity to query/act upon.\n\tObject getId();\n\t// The Identifier for a path to query.\n\tIdentifier getIdentifier();\n\t// The entity to act upon.\n\tObject getInstance();\n}", "des": "MyBatisContext instances get passed to MyBatis mapped statements as arguments, making Ids, instances, domainType and other attributes available to the statements."}
{"index": 6311, "code": "public class BadSqlGrammarException extends org.springframework.dao.InvalidDataAccessResourceUsageException {\n\t// Return the wrapped R2dbcException.\n\tR2dbcException getR2dbcException();\n\t// Return the SQL that caused the problem.\n\tString getSql();\n}", "des": "Exception thrown when SQL specified is invalid."}
{"index": 6312, "code": "public abstract static class Bindings.Binding extends Object {\n\t// Apply the binding to a BindTarget.\n\tabstract void apply(BindTarget bindTarget);\n\t// Return the associated BindMarker.\n\tBindMarker getBindMarker();\n\t// Return the binding value.\n\tabstract Object getValue();\n\t// Return whether the binding has a value associated with it.\n\tabstract boolean hasValue();\n\t// Return whether the binding is empty.\n\tboolean isNull();\n}", "des": "Base class for value objects representing a value or a NULL binding."}
{"index": 6313, "code": "public interface BindMarker {\n\t// Bind the given value to the Statement using the underlying binding strategy.\n\tvoid bind(BindTarget bindTarget, Object value);\n\t// Bind a null value to the Statement using the underlying binding strategy.\n\tvoid bindNull(BindTarget bindTarget, Class<?> valueType);\n\t// Return the database-specific placeholder for a given substitution.\n\tString getPlaceholder();\n}", "des": "A bind marker represents a single bindable parameter within a query."}
{"index": 6314, "code": "@FunctionalInterface public interface BindMarkers {\n\t// Create a new BindMarker.\n\tBindMarker next();\n\t// Create a new BindMarker that accepts a hint.\n\tdefault BindMarker next(String hint);\n}", "des": "Bind markers represent placeholders in SQL queries for substitution for an actual parameter."}
{"index": 6315, "code": "public interface BindTarget {\n\t// Bind a value to an index.\n\tvoid bind(int index, Object value);\n\t// Bind a value.\n\tvoid bind(String identifier, Object value);\n\t// Bind a null value.\n\tvoid bindNull(int index, Class<?> type);\n\t// Bind a null value.\n\tvoid bindNull(String identifier, Class<?> type);\n}", "des": "Target to apply bindings to."}
{"index": 6316, "code": "public class CompositeDatabasePopulator extends Object implements DatabasePopulator {\n\t// Add one or more populators to the list of delegates.\n\tvoid addPopulators(DatabasePopulator... populators);\n\t// Populate, initialize, or clean up the database using the provided R2DBC Connection.\n\treactor.core.publisher.Mono<Void> populate(Connection connection);\n\t// Specify one or more populators to delegate to.\n\tvoid setPopulators(DatabasePopulator... populators);\n}", "des": "Composite DatabasePopulator that delegates to a list of given DatabasePopulator implementations, executing all scripts."}
{"index": 6317, "code": "public interface ConnectionAccessor {\n\t// Execute a callback Function within a Connection scope.\n\t<T> reactor.core.publisher.Mono<T> inConnection(Function<Connection,reactor.core.publisher.Mono<T>> action);\n\t// Execute a callback Function within a Connection scope.\n\t<T> reactor.core.publisher.Flux<T> inConnectionMany(Function<Connection,reactor.core.publisher.Flux<T>> action);\n}", "des": "Interface declaring methods that accept callback Function to operate within the scope of a Connection."}
{"index": 6318, "code": "@FunctionalInterface public interface DatabasePopulator {\n\t// Populate, initialize, or clean up the database using the provided R2DBC Connection.\n\treactor.core.publisher.Mono<Void> populate(Connection connection);\n\t// Execute the given DatabasePopulator against the given ConnectionFactory.\n\tdefault reactor.core.publisher.Mono<Void> populate(ConnectionFactory connectionFactory);\n}", "des": "Strategy used to populate, initialize, or clean up a database."}
{"index": 6319, "code": "public interface PreparedOperation<T> extends QueryOperation {\n\t// Apply bindings to the supplied BindTarget.\n\tvoid bindTo(BindTarget target);\n\t// Get the underlying query source.\n\tT getSource();\n}", "des": "Extension to QueryOperation for a prepared SQL query Supplier with bound parameters."}
{"index": 6320, "code": "public interface RowsFetchSpec<T> {\n\t// Get all matching elements.\n\treactor.core.publisher.Flux<T> all();\n\t// Get the first or no result.\n\treactor.core.publisher.Mono<T> first();\n\t// Get exactly zero or one result.\n\treactor.core.publisher.Mono<T> one();\n}", "des": "Contract for fetching tabular results."}
{"index": 6321, "code": "@FunctionalInterface public interface StatementFilterFunction {\n\t// Return a composed filter function that first applies this filter and then applies the given afterFilter.\n\tdefault StatementFilterFunction andThen(StatementFilterFunction afterFilter);\n\t// Apply this filter to the given Statement and ExecuteFunction.\n\tPublisher<? extends Result> filter(Statement statement, ExecuteFunction next);\n}", "des": "Represents a function that filters an ExecuteFunction."}
{"index": 6322, "code": "public class UncategorizedR2dbcException extends org.springframework.dao.UncategorizedDataAccessException {\n\t// Return the wrapped R2dbcException.\n\tR2dbcException getR2dbcException();\n\t// Return the SQL that led to the problem (if known).\n\tString getSql();\n}", "des": "Exception thrown when we can't classify a R2dbcException into one of our generic data access exceptions."}
{"index": 6323, "code": "public interface CookieSerializer {\n\t// Reads all the matching cookies from the HttpServletRequest.\n\tList<String> readCookieValues(jakarta.servlet.http.HttpServletRequest request);\n\t// Writes a given CookieSerializer.CookieValue to the provided HttpServletResponse.\n\tvoid writeCookieValue(CookieSerializer.CookieValue cookieValue);\n}", "des": "Strategy for reading and writing a cookie value to the HttpServletResponse."}
{"index": 6324, "code": "public static class CookieSerializer.CookieValue extends Object {\n\t// Get the cookie max age.\n\tint getCookieMaxAge();\n\t// The value to be written.\n\tString getCookieValue();\n\t// Gets the request to use.\n\tjakarta.servlet.http.HttpServletRequest getRequest();\n\t// Gets the response to write to.\n\tjakarta.servlet.http.HttpServletResponse getResponse();\n\t// Set the cookie max age.\n\tvoid setCookieMaxAge(int cookieMaxAge);\n}", "des": "Contains the information necessary to write a value to the HttpServletResponse."}
{"index": 6325, "code": "public enum FlushMode extends Enum<FlushMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic FlushMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic FlushMode[] values();\n}", "des": "Supported modes of writing the session to session store."}
{"index": 6326, "code": "public enum SaveMode extends Enum<SaveMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SaveMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SaveMode[] values();\n}", "des": "Supported modes of tracking and saving session changes to session store."}
{"index": 6327, "code": "public interface SessionRepository<S extends Session> {\n\t// Creates a new Session that is capable of being persisted by this SessionRepository.\n\tS createSession();\n\t// Deletes the Session with the given Session.getId() or does nothing if the Session is not found.\n\tvoid deleteById(String id);\n\t// Gets the Session by the Session.getId() or null if no Session is found.\n\tS findById(String id);\n\t// Ensures the Session created by createSession() is saved.\n\tvoid save(S session);\n}", "des": "A repository interface for managing Session instances."}
{"index": 6328, "code": "@MappedSuperclass public abstract class AbstractPersistable<PK extends Serializable> extends Object implements Persistable<PK> {\n\tboolean equals(Object obj);\n\tPK getId();\n\t// Must be Transient in order to ensure that no JPA provider complains because of a missing setter.\n\tboolean isNew();\n\t// Sets the id of the entity.\n\tprotected void setId(PK id);\n}", "des": "Abstract base class for entities."}
{"index": 6329, "code": "public static class BeanDefinitionUtils.EntityManagerFactoryBeanDefinition extends Object {\n\tboolean equals(Object o);\n\t// Returns the BeanDefinition for the EntityManagerFactory.\n\tBeanDefinition getBeanDefinition();\n\t// Returns the underlying BeanFactory.\n\tBeanFactory getBeanFactory();\n\t// Returns the bean name of the BeanDefinition for the EntityManagerFactory.\n\tString getBeanName();\n}", "des": "Value object to represent a BeanDefinition for an EntityManagerFactory with a dedicated bean name."}
{"index": 6330, "code": "public class DelegatingQueryRewriter extends Object implements QueryRewriter {\n\t// Rewrite the assembled query with the given Pageable.\n\tString rewrite(String query, Pageable pageRequest);\n\t// Rewrite the assembled query with the given Sort.\n\tString rewrite(String query, Sort sort);\n}", "des": "Delegating QueryRewriter that delegates rewrite calls to a delegate provided by a Supplier."}
{"index": 6331, "code": "public static enum EntityGraph.EntityGraphType extends Enum<EntityGraph.EntityGraphType> {\n\tString getKey();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic EntityGraph.EntityGraphType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic EntityGraph.EntityGraphType[] values();\n}", "des": "Enum for JPA 2.1 EntityGraph types."}
{"index": 6332, "code": "public class JpaEntityGraph extends Object {\n\t// Returns the attribute node names to be used for this JpaEntityGraph.\n\tList<String> getAttributePaths();\n\t// Returns the name of the EntityGraph configuration to use.\n\tString getName();\n\t// Returns the EntityGraph.EntityGraphType of the EntityGraph to use.\n\tEntityGraph.EntityGraphType getType();\n\t// Return true if this JpaEntityGraph needs to be generated on-the-fly.\n\tboolean isAdHocEntityGraph();\n}", "des": "EntityGraph configuration for JPA 2.1 EntityGraphs."}
{"index": 6333, "code": "public abstract class JpaEntityInformationSupport<T,ID> extends AbstractEntityInformation<T,ID> implements JpaEntityInformation<T,ID> {\n\t// Creates a JpaEntityInformation for the given domain class and EntityManager.\n\tstatic <T> JpaEntityInformation<T,?> getEntityInformation(Class<T> domainClass, jakarta.persistence.EntityManager em);\n\t// Returns the name of the entity.\n\tString getEntityName();\n}", "des": "Base class for JpaEntityInformation implementations to share common method implementations."}
{"index": 6334, "code": "public abstract class JpaQueryExecution extends Object {\n\t// Method to implement AbstractStringBasedJpaQuery executions by single enum values.\n\tprotected abstract Object doExecute(AbstractJpaQuery query, JpaParametersParameterAccessor accessor);\n\t// Executes the given AbstractStringBasedJpaQuery with the given ParameterBinder.\n\tObject execute(AbstractJpaQuery query, JpaParametersParameterAccessor accessor);\n}", "des": "Set of classes to contain query execution strategies."}
{"index": 6335, "code": "@NoRepositoryBean public interface JpaRepositoryImplementation<T,ID> extends JpaRepository<T,ID>, JpaSpecificationExecutor<T> {\n\t// Configures the EscapeCharacter to be used with the repository.\n\tdefault void setEscapeCharacter(EscapeCharacter escapeCharacter);\n\t// Configures the CrudMethodMetadata to be used with the repository.\n\tvoid setRepositoryMethodMetadata(CrudMethodMetadata crudMethodMetadata);\n}", "des": "SPI interface to be implemented by JpaRepository implementations."}
{"index": 6336, "code": "public static class JpaSort.Path<T,S> extends Object {\n\t// Collects the given Attribute and returning a new JpaSort.Path pointing to the attribute type.\n\t<A extends jakarta.persistence.metamodel.Attribute<S, U>, U>JpaSort.Path<S,U> dot(A attribute);\n\t// Collects the given PluralAttribute and returning a new JpaSort.Path pointing to the attribute type.\n\t<P extends jakarta.persistence.metamodel.PluralAttribute<S, ?, U>, U>JpaSort.Path<S,U> dot(P attribute);\n}", "des": "Value object to abstract a collection of Attributes."}
{"index": 6337, "code": "public final class JSqlParserUtils extends Object {\n\t// Generates a count function call, based on the countFields.\n\tstatic net.sf.jsqlparser.expression.Function getJSqlCount(List<String> countFields, boolean distinct);\n\t// Generates a lower function call, based on the column.\n\tstatic net.sf.jsqlparser.expression.Function getJSqlLower(String column);\n}", "des": "A utility class for JSqlParser."}
{"index": 6338, "code": "public class Meta extends Object {\n\tString getComment();\n\tboolean hasValues();\n\t// Add a comment to the query that is propagated to the profile log.\n\tvoid setComment(String comment);\n\t// Get Iterable of set meta values.\n\tIterable<Map.Entry<String,Object>> values();\n}", "des": "Value object to hold metadata about repository methods."}
{"index": 6339, "code": "public class PartTreeJpaQuery extends AbstractJpaQuery {\n\t// Creates a TypedQuery for counting using the given values.\n\tjakarta.persistence.TypedQuery<Long> doCreateCountQuery(JpaParametersParameterAccessor accessor);\n\t// Creates a Query instance for the given values.\n\tjakarta.persistence.Query doCreateQuery(JpaParametersParameterAccessor accessor);\n\tprotected JpaQueryExecution getExecution();\n}", "des": "A AbstractJpaQuery implementation based on a PartTree."}
{"index": 6340, "code": "public interface ProxyIdAccessor {\n\t// Returns the identifier of the given entity by leniently inspecting it for the identifier value.\n\tObject getIdentifierFrom(Object entity);\n\t// Returns whether the ProxyIdAccessor should be used for the given entity.\n\tboolean shouldUseAccessorFor(Object entity);\n}", "des": "Interface for a persistence provider specific accessor of identifiers held in proxies."}
{"index": 6341, "code": "public interface QueryExtractor {\n\t// Returns whether the extractor is able to extract the original query string from a given Query.\n\tboolean canExtractQuery();\n\t// Reverse engineers the query string from the Query object.\n\tString extractQueryString(jakarta.persistence.Query query);\n}", "des": "Interface to hide different implementations to extract the original JPA query string from a Query."}
{"index": 6342, "code": "@FunctionalInterface public interface QueryRewriter {\n\t// Rewrite the assembled query with the given Pageable.\n\tdefault String rewrite(String query, Pageable pageRequest);\n\t// Rewrite the assembled query with the given Sort.\n\tString rewrite(String query, Sort sort);\n}", "des": "Callback to rewrite a query and apply sorting and pagination settings that cannot be applied based on a regularly detectable scheme."}
{"index": 6343, "code": "public interface QueryRewriterProvider {\n\t// Obtain an instance of QueryRewriter for a JpaQueryMethod.\n\tQueryRewriter getQueryRewriter(JpaQueryMethod method);\n\t// Return a simple QueryRewriterProvider that uses BeanUtils.instantiateClass(Class) to obtain a QueryRewriter instance.\n\tstatic QueryRewriterProvider simple();\n}", "des": "Provide a QueryRewriter based upon the JpaQueryMethod."}
{"index": 6344, "code": "public class FileCopyingMultipartFileReader extends Object implements MultipartFileReader<org.springframework.web.multipart.MultipartFile> {\n\t// Read MultipartFile content.\n\torg.springframework.web.multipart.MultipartFile readMultipartFile(org.springframework.web.multipart.MultipartFile multipartFile);\n\t// Specify the prefix to use for temporary files.\n\tvoid setPrefix(String prefix);\n\t// Specify the suffix to use for temporary files.\n\tvoid setSuffix(String suffix);\n}", "des": "MultipartFileReader implementation that copies the MultipartFile's content to a new temporary File in the specified directory."}
{"index": 6345, "code": "public class SimpleMultipartFileReader extends Object implements MultipartFileReader<Object> {\n\t// Read MultipartFile content.\n\tObject readMultipartFile(org.springframework.web.multipart.MultipartFile multipartFile);\n\t// Specify the default charset name to use when converting multipart file content into Strings if the multipart itself does not provide a charset.\n\tvoid setDefaultMultipartCharset(String defaultCharset);\n}", "des": "MultipartFileReader implementation that does not maintain metadata from the original MultipartFile instance."}
{"index": 6346, "code": "public class FtpInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpInboundChannelAdapterSpec,FtpInboundFileSynchronizingMessageSource> {\n\t// Specify a simple pattern to match remote files.\n\tFtpInboundChannelAdapterSpec patternFilter(String pattern);\n\t// Specify a regular expression to match remote files.\n\tFtpInboundChannelAdapterSpec regexFilter(String regex);\n}", "des": "A RemoteFileInboundChannelAdapterSpec for an FtpInboundFileSynchronizingMessageSource."}
{"index": 6347, "code": "public static enum FtpRemoteFileTemplate.ExistsMode extends Enum<FtpRemoteFileTemplate.ExistsMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic FtpRemoteFileTemplate.ExistsMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic FtpRemoteFileTemplate.ExistsMode[] values();\n}", "des": "The FtpRemoteFileTemplate.exists(String) operation mode."}
{"index": 6348, "code": "public class FtpStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpStreamingInboundChannelAdapterSpec,FtpStreamingMessageSource> {\n\t// Specify a simple pattern to match remote files (e.g.\n\tFtpStreamingInboundChannelAdapterSpec patternFilter(String pattern);\n\t// Specify a regular expression to match remote files (e.g.\n\tFtpStreamingInboundChannelAdapterSpec regexFilter(String regex);\n}", "des": "A RemoteFileStreamingInboundChannelAdapterSpec for a FtpStreamingMessageSource."}
{"index": 6349, "code": "public abstract class AbstractJpaQueryProvider extends Object implements JpaQueryProvider, org.springframework.beans.factory.InitializingBean {\n\t// Getter for EntityManager\n\tprotected jakarta.persistence.EntityManager getEntityManager();\n\t// Public setter to override the entityManager that was created by this HibernateQueryProvider.\n\tvoid setEntityManager(jakarta.persistence.EntityManager entityManager);\n}", "des": "Abstract JPA Query Provider to serve as a base class for all JPA Query providers."}
{"index": 6350, "code": "public class AmqpItemReader<T> extends Object implements ItemReader<T> {\n\t// Reads a piece of input data and advance to the next one.\n\tT read();\n\t// Establish the itemType for the reader.\n\tvoid setItemType(Class<? extends T> itemType);\n}", "des": "AMQP ItemReader implementation using an AmqpTemplate to receive and/or convert messages."}
{"index": 6351, "code": "public class AmqpItemReaderBuilder<T> extends Object {\n\t// Establish the amqpTemplate to be used by the AmqpItemReader.\n\tAmqpItemReaderBuilder<T> amqpTemplate(org.springframework.amqp.core.AmqpTemplate amqpTemplate);\n\t// Validates and builds a AmqpItemReader.\n\tAmqpItemReader<T> build();\n\t// Establish the itemType for the reader.\n\tAmqpItemReaderBuilder<T> itemType(Class<? extends T> itemType);\n}", "des": "A builder implementation for the AmqpItemReader"}
{"index": 6352, "code": "public class AmqpItemWriterBuilder<T> extends Object {\n\t// Establish the amqpTemplate to be used by the AmqpItemWriter.\n\tAmqpItemWriterBuilder<T> amqpTemplate(org.springframework.amqp.core.AmqpTemplate amqpTemplate);\n\t// Validates and builds a AmqpItemWriter.\n\tAmqpItemWriter<T> build();\n}", "des": "A builder implementation for the AmqpItemWriter"}
{"index": 6353, "code": "public class AnnotationMethodResolver extends Object implements MethodResolver {\n\t// Find a single Method on the given Class that contains the annotation type for which this resolver is searching.\n\tMethod findMethod(Class<?> clazz);\n\t// Find a single Method on the Class of the given candidate object that contains the annotation type for which this resolver is searching.\n\tMethod findMethod(Object candidate);\n}", "des": "MethodResolver implementation that finds a single Method on the given Class that contains the specified annotation type."}
{"index": 6354, "code": "public class AvroItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> {\n\t// Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doClose();\n\t// Open resources necessary to start reading input.\n\tprotected void doOpen();\n\t// Read next item from input.\n\tprotected T doRead();\n\t// Disable or enable reading an embedded Avro schema.\n\tvoid setEmbeddedSchema(boolean embeddedSchema);\n}", "des": "An ItemReader that deserializes data from a Resource containing serialized Avro objects."}
{"index": 6355, "code": "public class AvroItemWriter<T> extends AbstractItemStreamItemWriter<T> {\n\t// No-op.\n\tvoid close();\n\t// No-op.\n\tvoid open(ExecutionContext executionContext);\n\t// Process the supplied data element.\n\tvoid write(Chunk<? extends T> items);\n}", "des": "An ItemWriter that serializes data to an WritableResource using Avro."}
{"index": 6356, "code": "public class AvroItemWriterBuilder<T> extends Object {\n\t// Build an instance of AvroItemWriter.\n\tAvroItemWriter<T> build();\n\t// The name used to calculate the key within the ExecutionContext.\n\tAvroItemWriterBuilder<T> name(String name);\n\tAvroItemWriterBuilder<T> resource(org.springframework.core.io.WritableResource resource);\n\tAvroItemWriterBuilder<T> schema(String schemaString);\n\tAvroItemWriterBuilder<T> schema(org.springframework.core.io.Resource schema);\n\tAvroItemWriterBuilder<T> type(Class<T> type);\n}", "des": "A builder implementation for the AvroItemWriter."}
{"index": 6357, "code": "public class ClassifierCompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O> {\n\t// Delegates to injected ItemProcessor instances according to the classification by the Classifier.\n\tO process(I item);\n\t// Establishes the classifier that will determine which ItemProcessor to use.\n\tvoid setClassifier(org.springframework.classify.Classifier<? super I,ItemProcessor<?,? extends O>> classifier);\n}", "des": "Calls one of a collection of ItemProcessors, based on a router pattern implemented through the provided Classifier."}
{"index": 6358, "code": "public class ClassifierCompositeItemProcessorBuilder<I,O> extends Object {\n\t// Returns a fully constructed ClassifierCompositeItemProcessor.\n\tClassifierCompositeItemProcessor<I,O> build();\n\t// Establishes the classifier that will determine which ItemProcessor to use.\n\tClassifierCompositeItemProcessorBuilder<I,O> classifier(org.springframework.classify.Classifier<? super I,ItemProcessor<?,? extends O>> classifier);\n}", "des": "Creates a fully qualified ClassifierCompositeItemProcessor."}
{"index": 6359, "code": "public class ClassifierCompositeItemWriterBuilder<T> extends Object {\n\t// Returns a fully constructed ClassifierCompositeItemWriter.\n\tClassifierCompositeItemWriter<T> build();\n\t// Establish the classifier to be used for the selection of which ItemWriter to use.\n\tClassifierCompositeItemWriterBuilder<T> classifier(org.springframework.classify.Classifier<T,ItemWriter<? super T>> classifier);\n}", "des": "Creates a fully qualified ClassifierCompositeItemWriter."}
{"index": 6360, "code": "public class CompletionPolicySupport extends Object implements CompletionPolicy {\n\t// Always true.\n\tboolean isComplete(RepeatContext context);\n\t// If exit status is not continuable return true, otherwise delegate to isComplete(RepeatContext).\n\tboolean isComplete(RepeatContext context, RepeatStatus result);\n\t// Build a new RepeatContextSupport and return it.\n\tRepeatContext start(RepeatContext context);\n\t// Increment the context so the counter is up to date.\n\tvoid update(RepeatContext context);\n}", "des": "Very simple base class for CompletionPolicy implementations."}
{"index": 6361, "code": "public class CompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Process the provided item, returning a potentially modified or new item for continued processing.\n\tO process(I item);\n\t// Establishes the ItemProcessor delegates that will work on the item to be processed.\n\tvoid setDelegates(List<? extends ItemProcessor<?,?>> delegates);\n}", "des": "Composite ItemProcessor that passes the item through a sequence of injected ItemTransformers (return value of previous transformation is the entry value of the next). Note the user is responsible for injecting a chain of ItemProcessors that conforms to declared input and output types."}
{"index": 6362, "code": "public class CompositeItemProcessorBuilder<I,O> extends Object {\n\t// Returns a fully constructed CompositeItemProcessor.\n\tCompositeItemProcessor<I,O> build();\n\t// Establishes the ItemProcessor delegates that will work on the item to be processed.\n\tCompositeItemProcessorBuilder<I,O> delegates(List<? extends ItemProcessor<?,?>> delegates);\n\t// Establishes the ItemProcessor delegates that will work on the item to be processed.\n\tCompositeItemProcessorBuilder<I,O> delegates(ItemProcessor<?,?>... delegates);\n}", "des": "Creates a fully qualified CompositeItemProcessorBuilder."}
{"index": 6363, "code": "public class Db2PagingQueryProvider extends SqlWindowingPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n\tprotected Object getSubQueryAlias();\n}", "des": "DB2 implementation of a PagingQueryProvider using database specific features."}
{"index": 6364, "code": "public class DefaultFieldSetFactory extends Object implements FieldSetFactory {\n\t// Create a FieldSet with anonymous tokens.\n\tFieldSet create(String[] values);\n\t// Create a FieldSet with named tokens.\n\tFieldSet create(String[] values, String[] names);\n\t// The DateFormat to use for parsing numbers.\n\tvoid setDateFormat(DateFormat dateFormat);\n\t// The NumberFormat to use for parsing numbers.\n\tvoid setNumberFormat(NumberFormat numberFormat);\n}", "des": "Default implementation of FieldSetFactory with no special knowledge of the FieldSet required."}
{"index": 6365, "code": "public class DefaultMailErrorHandler extends Object implements MailErrorHandler {\n\t// Wraps the input exception with a runtime MailException.\n\tvoid handle(org.springframework.mail.MailMessage message, Exception exception);\n\t// The limit for the size of message that will be copied to the exception message.\n\tvoid setMaxMessageLength(int maxMessageLength);\n}", "des": "This MailErrorHandler implementation simply rethrows the exception it receives."}
{"index": 6366, "code": "public class DefaultPropertyEditorRegistrar extends Object implements org.springframework.beans.PropertyEditorRegistrar {\n\t// Register the custom editors with the given registry.\n\tvoid registerCustomEditors(org.springframework.beans.PropertyEditorRegistry registry);\n\t// Specify the custom editors to register.\n\tvoid setCustomEditors(Map<? extends Object,? extends PropertyEditor> customEditors);\n}", "des": "A re-usable PropertyEditorRegistrar that can be used wherever one needs to register custom PropertyEditor instances with a PropertyEditorRegistry (like a bean wrapper, or a type converter)."}
{"index": 6367, "code": "public class DefaultResultCompletionPolicy extends CompletionPolicySupport {\n\t// Always false.\n\tboolean isComplete(RepeatContext context);\n\t// True if the result is null, or a RepeatStatus indicating completion.\n\tboolean isComplete(RepeatContext context, RepeatStatus result);\n}", "des": "Very simple CompletionPolicy that bases its decision on the result of a batch operation."}
{"index": 6368, "code": "public class DelimitedLineAggregator<T> extends ExtractorLineAggregator<T> {\n\t// Aggregate provided fields into single String.\n\tString doAggregate(Object[] fields);\n\t// Public setter for the delimiter.\n\tvoid setDelimiter(String delimiter);\n}", "des": "A LineAggregator implementation that converts an object into a delimited list of strings."}
{"index": 6369, "code": "public abstract class ExtractorLineAggregator<T> extends Object implements LineAggregator<T> {\n\t// Extract fields from the given item using the FieldExtractor and then aggregate them.\n\tString aggregate(T item);\n\t// Aggregate provided fields into single String.\n\tprotected abstract String doAggregate(Object[] fields);\n\t// Public setter for the field extractor responsible for splitting an input object up into an array of objects.\n\tvoid setFieldExtractor(FieldExtractor<T> fieldExtractor);\n}", "des": "An abstract LineAggregator implementation that utilizes a FieldExtractor to convert the incoming object to an array of its parts."}
{"index": 6370, "code": "public interface FieldSetFactory {\n\t// Create a FieldSet with anonymous tokens.\n\tFieldSet create(String[] values);\n\t// Create a FieldSet with named tokens.\n\tFieldSet create(String[] values, String[] names);\n}", "des": "Factory interface for creating FieldSet instances."}
{"index": 6371, "code": "public final class FileUtils extends Object {\n\t// Create a new file if it doesn't already exist.\n\tstatic boolean createNewFile(File file);\n\t// Set up output file for batch processing.\n\tstatic void setUpOutputFile(File file, boolean restarted, boolean append, boolean overwriteOutputFile);\n}", "des": "Utility methods for files used in batch processing."}
{"index": 6372, "code": "public class FixedLengthTokenizer extends AbstractLineTokenizer {\n\t// Yields the tokens resulting from the splitting of the supplied line.\n\tprotected List<String> doTokenize(String line);\n\t// Set the column ranges.\n\tvoid setColumns(Range... ranges);\n}", "des": "Tokenizer used to process data obtained from files with fixed-length format."}
{"index": 6373, "code": "public class FlatFileItemWriter<T> extends AbstractFileItemWriter<T> {\n\t// Assert that mandatory properties (lineAggregator) are set.\n\tvoid afterPropertiesSet();\n\t// Write out a string of items followed by a \"new line\", where the format of the new line separator is determined by the underlying operating system.\n\tString doWrite(Chunk<? extends T> items);\n\t// Public setter for the LineAggregator.\n\tvoid setLineAggregator(LineAggregator<T> lineAggregator);\n}", "des": "This class is an item writer that writes data to a file or stream."}
{"index": 6374, "code": "public interface FragmentEventReader extends XMLEventReader {\n\t// Tells the event reader the current fragment has been processed.\n\tvoid markFragmentProcessed();\n\t// Tells the event reader its cursor position is exactly before the fragment.\n\tvoid markStartFragment();\n\t// Reset the state of the fragment reader - make it forget it assumptions about current position of cursor (e.g.\n\tvoid reset();\n}", "des": "Interface for event readers which support treating XML fragments as standalone XML documents by wrapping the fragments with StartDocument and EndDocument events."}
{"index": 6375, "code": "public class GsonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T> {\n\t// Marshal an object into a json representation.\n\tString marshal(T item);\n\t// Set the Gson object to use.\n\tvoid setGson(com.google.gson.Gson gson);\n}", "des": "A json object marshaller that uses Google Gson to marshal an object into a json representation."}
{"index": 6376, "code": "public class GsonJsonObjectReader<T> extends Object implements JsonObjectReader<T> {\n\t// Close the input resource.\n\tvoid close();\n\t// Open the Json resource for reading.\n\tvoid open(org.springframework.core.io.Resource resource);\n\t// Read the next object in the Json resource if any.\n\tT read();\n\t// Set the object mapper to use to map Json objects to domain objects.\n\tvoid setMapper(com.google.gson.Gson mapper);\n}", "des": "Implementation of JsonObjectReader based on Google Gson."}
{"index": 6377, "code": "public class H2PagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "H2 implementation of a PagingQueryProvider using database specific features."}
{"index": 6378, "code": "public class HanaPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "SAP HANA implementation of a PagingQueryProvider using database specific features."}
{"index": 6379, "code": "public class HsqlPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "HSQLDB implementation of a PagingQueryProvider using database specific features."}
{"index": 6380, "code": "public class IncorrectLineLengthException extends FlatFileFormatException {\n\t// Retrieves the actual length that was recorded for this exception.\n\tint getActualLength();\n\t// Retrieves the expected length that was recorded for this exception.\n\tint getExpectedLength();\n}", "des": "Exception indicating that the line size expected is different from what is expected."}
{"index": 6381, "code": "public interface ItemStream {\n\t// If any resources are needed for the stream to operate they need to be destroyed here.\n\tdefault void close();\n\t// Open the stream for the provided ExecutionContext.\n\tdefault void open(ExecutionContext executionContext);\n\t// Indicates that the execution context provided during open is about to be saved.\n\tdefault void update(ExecutionContext executionContext);\n}", "des": "Marker interface defining a contract for periodically storing state and restoring from that state should an error occur."}
{"index": 6382, "code": "public class JacksonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T> {\n\t// Marshal an object into a json representation.\n\tString marshal(T item);\n\t// Set the ObjectMapper to use.\n\tvoid setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper objectMapper);\n}", "des": "A json object marshaller that uses Jackson to marshal an object into a json representation."}
{"index": 6383, "code": "public class JacksonJsonObjectReader<T> extends Object implements JsonObjectReader<T> {\n\t// Close the input resource.\n\tvoid close();\n\t// Open the Json resource for reading.\n\tvoid open(org.springframework.core.io.Resource resource);\n\t// Read the next object in the Json resource if any.\n\tT read();\n\t// Set the object mapper to use to map Json objects to domain objects.\n\tvoid setMapper(com.fasterxml.jackson.databind.ObjectMapper mapper);\n}", "des": "Implementation of JsonObjectReader based on Jackson."}
{"index": 6384, "code": "public class JmsItemReader<T> extends Object implements ItemReader<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Reads a piece of input data and advance to the next one.\n\tT read();\n\t// Set the expected type of incoming message payloads.\n\tvoid setItemType(Class<? extends T> itemType);\n\t// Setter for JMS template.\n\tvoid setJmsTemplate(org.springframework.jms.core.JmsOperations jmsTemplate);\n}", "des": "An ItemReader for JMS using a JmsTemplate."}
{"index": 6385, "code": "public class JmsItemReaderBuilder<T> extends Object {\n\t// Returns a fully constructed JmsItemReader.\n\tJmsItemReader<T> build();\n\t// Set the expected type of incoming message payloads.\n\tJmsItemReaderBuilder<T> itemType(Class<? extends T> itemType);\n\t// Establish the JMS template that will be used by the JmsItemReader.\n\tJmsItemReaderBuilder<T> jmsTemplate(org.springframework.jms.core.JmsOperations jmsTemplate);\n}", "des": "Creates a fully qualified JmsItemReader."}
{"index": 6386, "code": "public class JmsItemWriter<T> extends Object implements ItemWriter<T> {\n\t// Setter for JMS template.\n\tvoid setJmsTemplate(org.springframework.jms.core.JmsOperations jmsTemplate);\n\t// Send the items one-by-one to the default destination of the JMS template.\n\tvoid write(Chunk<? extends T> items);\n}", "des": "An ItemWriter for JMS using a JmsTemplate."}
{"index": 6387, "code": "public class JmsItemWriterBuilder<T> extends Object {\n\t// Returns a fully constructed JmsItemWriter.\n\tJmsItemWriter<T> build();\n\t// Establish the JMS template that will be used by the JmsItemWriter.\n\tJmsItemWriterBuilder<T> jmsTemplate(org.springframework.jms.core.JmsOperations jmsTemplate);\n}", "des": "Creates a fully qualified JmsItemWriter."}
{"index": 6388, "code": "public class JpaItemWriterBuilder<T> extends Object {\n\t// Returns a fully built JpaItemWriter.\n\tJpaItemWriter<T> build();\n\t// The JPA EntityManagerFactory to obtain an entity manager from.\n\tJpaItemWriterBuilder<T> entityManagerFactory(jakarta.persistence.EntityManagerFactory entityManagerFactory);\n\t// Set whether the entity manager should perform a persist instead of a merge.\n\tJpaItemWriterBuilder<T> usePersist(boolean usePersist);\n}", "des": "A builder for the JpaItemWriter."}
{"index": 6389, "code": "public interface JpaQueryProvider {\n\t// Create the query object.\n\tjakarta.persistence.Query createQuery();\n\t// Provide an EntityManager for the query to be built.\n\tvoid setEntityManager(jakarta.persistence.EntityManager entityManager);\n}", "des": "Interface defining the functionality to be provided for generating queries for use with JPA ItemReaders or other custom built artifacts."}
{"index": 6390, "code": "public class JsonFileItemWriter<T> extends AbstractFileItemWriter<T> {\n\t// Assert that mandatory properties (jsonObjectMarshaller) are set.\n\tvoid afterPropertiesSet();\n\t// Write out a string of items followed by a \"new line\", where the format of the new line separator is determined by the underlying operating system.\n\tString doWrite(Chunk<? extends T> items);\n\t// Set the JsonObjectMarshaller to use to marshal object to json.\n\tvoid setJsonObjectMarshaller(JsonObjectMarshaller<T> jsonObjectMarshaller);\n}", "des": "Item writer that writes data in json format to an output file."}
{"index": 6391, "code": "public interface JsonObjectReader<T> {\n\t// Close the input resource.\n\tdefault void close();\n\t// Open the Json resource for reading.\n\tdefault void open(org.springframework.core.io.Resource resource);\n\t// Read the next object in the Json resource if any.\n\tT read();\n}", "des": "Strategy interface for Json readers."}
{"index": 6392, "code": "public class LogOrRethrowExceptionHandler extends Object implements ExceptionHandler {\n\t// Classify the throwables and decide whether to rethrow based on the result.\n\tvoid handleException(RepeatContext context, Throwable throwable);\n\t// Setter for the Classifier used by this handler.\n\tvoid setExceptionClassifier(org.springframework.classify.Classifier<Throwable,LogOrRethrowExceptionHandler.Level> exceptionClassifier);\n}", "des": "Implementation of ExceptionHandler based on an Classifier."}
{"index": 6393, "code": "public static enum LogOrRethrowExceptionHandler.Level extends Enum<LogOrRethrowExceptionHandler.Level> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic LogOrRethrowExceptionHandler.Level valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic LogOrRethrowExceptionHandler.Level[] values();\n}", "des": "Logging levels for the handler."}
{"index": 6394, "code": "public class MariaDBPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "MariaDB implementation of a PagingQueryProvider using database specific features."}
{"index": 6395, "code": "public interface MethodResolver {\n\t// Find a single Method on the given Class that matches this resolver's criteria.\n\tMethod findMethod(Class<?> clazz);\n\t// Find a single Method on the provided Object that matches this resolver's criteria.\n\tMethod findMethod(Object candidate);\n}", "des": "Strategy interface for detecting a single Method on a Class."}
{"index": 6396, "code": "public class MySqlPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "MySQL implementation of a PagingQueryProvider using database specific features."}
{"index": 6397, "code": "public class OraclePagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "Oracle implementation of a PagingQueryProvider using database specific features."}
{"index": 6398, "code": "public enum Order extends Enum<Order> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Order valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Order[] values();\n}", "des": "The direction of the sort in an ORDER BY clause."}
{"index": 6399, "code": "public class PostgresPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "Postgres implementation of a PagingQueryProvider using database specific features."}
{"index": 6400, "code": "public final class PropertiesConverter extends Object {\n\t// Convert a Properties object to a String.\n\tstatic String propertiesToString(Properties propertiesToParse);\n\t// Parse a String to a Properties object.\n\tstatic Properties stringToProperties(String stringToParse);\n}", "des": "Utility to convert a Properties object to a String and back."}
{"index": 6401, "code": "public interface RecordSeparatorPolicy {\n\t// Signal the end of a record based on the content of the current record.\n\tboolean isEndOfRecord(String record);\n\t// Give the policy a chance to post-process a complete record, e.g.\n\tString postProcess(String record);\n\t// Pre-process a record before another line is appended, in the case of a multi-line record.\n\tString preProcess(String record);\n}", "des": "Policy for text file-based input sources to determine the end of a record, e.g."}
{"index": 6402, "code": "public class RecursiveCollectionLineAggregator<T> extends Object implements LineAggregator<Collection<T>> {\n\t// Create a string from the value provided.\n\tString aggregate(Collection<T> items);\n\t// Public setter for the LineAggregator to use on single items, that are not Strings.\n\tvoid setDelegate(LineAggregator<T> delegate);\n}", "des": "An implementation of LineAggregator that concatenates a collection of items of a common type with the system line separator."}
{"index": 6403, "code": "public class RegexLineTokenizer extends AbstractLineTokenizer {\n\tprotected List<String> doTokenize(String line);\n\t// Sets the regex pattern to use.\n\tvoid setPattern(Pattern pattern);\n\t// Sets the regular expression to use.\n\tvoid setRegex(String regex);\n}", "des": "Line-tokenizer using a regular expression to filter out data (by using matching and non-matching groups)."}
{"index": 6404, "code": "public class RepeatContextCounter extends Object {\n\tint getCount();\n\t// Increment by 1.\n\tfinal void increment();\n\t// Increment the counter.\n\tfinal void increment(int delta);\n}", "des": "Helper class for policies that need to count the number of occurrences of some event (e.g."}
{"index": 6405, "code": "public class RepeatOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor {\n\t// Invoke the proceeding method call repeatedly, according to the properties of the injected RepeatOperations.\n\tObject invoke(org.aopalliance.intercept.MethodInvocation invocation);\n\t// Setter for the RepeatOperations.\n\tvoid setRepeatOperations(RepeatOperations batchTemplate);\n}", "des": "A MethodInterceptor that can be used to automatically repeat calls to a method on a service."}
{"index": 6406, "code": "public class SimpleCompletionPolicy extends DefaultResultCompletionPolicy {\n\tint getChunkSize();\n\t// Terminate if the chunk size has been reached.\n\tboolean isComplete(RepeatContext context);\n\t// Terminate if the chunk size has been reached, or the result is null.\n\tboolean isComplete(RepeatContext context, RepeatStatus result);\n\tvoid setChunkSize(int chunkSize);\n\t// Reset the counter.\n\tRepeatContext start(RepeatContext context);\n\t// Increment the counter in the context.\n\tvoid update(RepeatContext context);\n}", "des": "Policy for terminating a batch after a fixed number of operations."}
{"index": 6407, "code": "public class SimpleMailMessageItemWriterBuilder extends Object {\n\t// Returns a fully constructed SimpleMailMessageItemWriter.\n\tSimpleMailMessageItemWriter build();\n\t// The handler for failed messages.\n\tSimpleMailMessageItemWriterBuilder mailErrorHandler(MailErrorHandler mailErrorHandler);\n\t// A MailSender to be used to send messages in SimpleMailMessageItemWriter.write(Chunk).\n\tSimpleMailMessageItemWriterBuilder mailSender(org.springframework.mail.MailSender mailSender);\n}", "des": "Creates a fully qualified SimpleMailMessageItemWriter."}
{"index": 6408, "code": "public class SimpleRecordSeparatorPolicy extends Object implements RecordSeparatorPolicy {\n\t// Always returns true.\n\tboolean isEndOfRecord(String line);\n\t// Pass the record through.\n\tString postProcess(String record);\n\t// Pass the line through.\n\tString preProcess(String line);\n}", "des": "Simplest possible RecordSeparatorPolicy - treats all lines as record endings."}
{"index": 6409, "code": "public class SingleItemPeekableItemReaderBuilder<T> extends Object {\n\t// Returns a fully constructed SingleItemPeekableItemReader.\n\tSingleItemPeekableItemReader<T> build();\n\t// The item reader to use as a delegate.\n\tSingleItemPeekableItemReaderBuilder<T> delegate(ItemReader<T> delegate);\n}", "des": "Creates a fully qualified SingleItemPeekeableItemReader."}
{"index": 6410, "code": "public class SkipWrapper<T> extends Object {\n\t// Public getter for the exception.\n\tThrowable getException();\n\t// Public getter for the item.\n\tT getItem();\n}", "des": "Wrapper for an item and its exception if it failed processing."}
{"index": 6411, "code": "public class SqlitePagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n}", "des": "SQLite implementation of a PagingQueryProvider using database specific features."}
{"index": 6412, "code": "public class SqlServerPagingQueryProvider extends SqlWindowingPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n\tprotected Object getSubQueryAlias();\n}", "des": "SQL Server implementation of a PagingQueryProvider using database specific features."}
{"index": 6413, "code": "public class SybasePagingQueryProvider extends SqlWindowingPagingQueryProvider {\n\t// Method generating the query string to be used for retrieving the first page.\n\tString generateFirstPageQuery(int pageSize);\n\t// Method generating the query string to be used for retrieving the pages following the first page.\n\tString generateRemainingPagesQuery(int pageSize);\n\tprotected Object getSubQueryAlias();\n}", "des": "Sybase implementation of a PagingQueryProvider using database specific features."}
{"index": 6414, "code": "public class SynchronizedItemStreamReaderBuilder<T> extends Object {\n\t// Returns a fully constructed SynchronizedItemStreamReader.\n\tSynchronizedItemStreamReader<T> build();\n\t// The item stream reader to use as a delegate.\n\tSynchronizedItemStreamReaderBuilder<T> delegate(ItemStreamReader<T> delegate);\n}", "des": "Creates a fully qualified SynchronizedItemStreamReader."}
{"index": 6415, "code": "public class SynchronizedItemStreamWriterBuilder<T> extends Object {\n\t// Returns a fully constructed SynchronizedItemStreamWriter.\n\tSynchronizedItemStreamWriter<T> build();\n\t// Set the delegate ItemStreamWriter.\n\tSynchronizedItemStreamWriterBuilder<T> delegate(ItemStreamWriter<T> delegate);\n}", "des": "Creates a fully qualified SynchronizedItemStreamWriter."}
{"index": 6416, "code": "public class SystemPropertyInitializer extends Object implements org.springframework.beans.factory.InitializingBean {\n\t// Sets the System property with the provided name and default value.\n\tvoid afterPropertiesSet();\n\t// Mandatory property specifying the default value of the System property.\n\tvoid setDefaultValue(String defaultValue);\n\t// Set the key name for the System property that is created.\n\tvoid setKeyName(String keyName);\n}", "des": "Helper class that sets up a System property with a default value."}
{"index": 6417, "code": "public class TimeoutTerminationPolicy extends CompletionPolicySupport {\n\t// Check the timeout and complete gracefully if it has expires.\n\tboolean isComplete(RepeatContext context);\n\t// Start the clock on the timeout.\n\tRepeatContext start(RepeatContext context);\n}", "des": "Termination policy that times out after a fixed period."}
{"index": 6418, "code": "public class TransactionAwareBufferedWriter extends Writer {\n\tvoid close();\n\tvoid flush();\n\t// Convenience method for clients to determine if there is any unflushed data.\n\tlong getBufferSize();\n\tvoid setEncoding(String encoding);\n\t// Flag to indicate that changes should be force-synced to disk on flush.\n\tvoid setForceSync(boolean forceSync);\n\tvoid write(char[] cbuf, int off, int len);\n\tvoid write(String str, int off, int len);\n}", "des": "Wrapper for a FileChannel that delays actually writing to or closing the buffer if a transaction is active."}
{"index": 6419, "code": "public class ValidatingItemProcessor<T> extends Object implements ItemProcessor<T,T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\t// Validate the item and return it unmodified\n\tT process(T item);\n\t// Should the processor filter invalid records instead of skipping them?\n\tvoid setFilter(boolean filter);\n\t// Set the validator used to validate each item.\n\tvoid setValidator(Validator<? super T> validator);\n}", "des": "Simple implementation of ItemProcessor that validates input and returns it without modifications."}
{"index": 6420, "code": "public abstract class AbstractComponentDefinition extends Object implements ComponentDefinition {\n\t// Returns an empty array.\n\tBeanDefinition[] getBeanDefinitions();\n\t// Returns an empty array.\n\tBeanReference[] getBeanReferences();\n\t// Delegates to ComponentDefinition.getName().\n\tString getDescription();\n\t// Returns an empty array.\n\tBeanDefinition[] getInnerBeanDefinitions();\n}", "des": "Base implementation of ComponentDefinition that provides a basic implementation of AbstractComponentDefinition.getDescription() which delegates to ComponentDefinition.getName()."}
{"index": 6421, "code": "public class AliasDefinition extends Object implements BeanMetadataElement {\n\t// Return the alias registered for the bean.\n\tfinal String getAlias();\n\t// Return the canonical name of the bean.\n\tfinal String getBeanName();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tfinal Object getSource();\n}", "des": "Representation of an alias that has been registered during the parsing process."}
{"index": 6422, "code": "public interface AnnotatedBeanDefinition extends BeanDefinition {\n\t// Obtain metadata for this bean definition's factory method, if any.\n\torg.springframework.core.type.MethodMetadata getFactoryMethodMetadata();\n\t// Obtain the annotation metadata (as well as basic class metadata) for this bean definition's bean class.\n\torg.springframework.core.type.AnnotationMetadata getMetadata();\n}", "des": "Extended BeanDefinition interface that exposes AnnotationMetadata about its bean class - without requiring the class to be loaded yet."}
{"index": 6423, "code": "public class AnnotatedGenericBeanDefinition extends GenericBeanDefinition implements AnnotatedBeanDefinition {\n\t// Obtain metadata for this bean definition's factory method, if any.\n\tfinal org.springframework.core.type.MethodMetadata getFactoryMethodMetadata();\n\t// Obtain the annotation metadata (as well as basic class metadata) for this bean definition's bean class.\n\tfinal org.springframework.core.type.AnnotationMetadata getMetadata();\n}", "des": "Extension of the GenericBeanDefinition class, adding support for annotation metadata exposed through the AnnotatedBeanDefinition interface."}
{"index": 6424, "code": "public class AnnotationBeanWiringInfoResolver extends Object implements BeanWiringInfoResolver {\n\t// Build the BeanWiringInfo for the given Configurable annotation.\n\tprotected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation);\n\t// Determine the default bean name for the specified bean instance.\n\tprotected String getDefaultBeanName(Object beanInstance);\n\t// Resolve the BeanWiringInfo for the given bean instance.\n\tBeanWiringInfo resolveWiringInfo(Object beanInstance);\n}", "des": "BeanWiringInfoResolver that uses the Configurable annotation to identify which classes need autowiring."}
{"index": 6425, "code": "public static enum AotServices.Source extends Enum<AotServices.Source> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AotServices.Source valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AotServices.Source[] values();\n}", "des": "Sources from which services were obtained."}
{"index": 6426, "code": "public enum Autowire extends Enum<Autowire> {\n\t// Return whether this represents an actual autowiring value.\n\tboolean isAutowire();\n\tint value();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Autowire valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Autowire[] values();\n}", "des": "Enumeration determining autowiring status: that is, whether a bean should have its dependencies automatically injected by the Spring container using setter injection."}
{"index": 6427, "code": "public class BeanDefinitionOverrideException extends BeanDefinitionStoreException {\n\t// Return the newly registered bean definition.\n\tBeanDefinition getBeanDefinition();\n\t// Return the name of the bean.\n\tString getBeanName();\n\t// Return the existing bean definition for the same name.\n\tBeanDefinition getExistingDefinition();\n\t// Return the description of the resource that the bean definition came from.\n\tString getResourceDescription();\n}", "des": "Subclass of BeanDefinitionStoreException indicating an invalid override attempt: typically registering a new definition for the same bean name while DefaultListableBeanFactory.isAllowBeanDefinitionOverriding() is false."}
{"index": 6428, "code": "public class BeanDefinitionStoreException extends FatalBeanException {\n\t// Return the name of the bean, if available.\n\tString getBeanName();\n\t// Return the description of the resource that the bean definition came from, if available.\n\tString getResourceDescription();\n}", "des": "Exception thrown when a BeanFactory encounters an invalid bean definition: e.g."}
{"index": 6429, "code": "public interface BeanFactoryInitializationCode {\n\t// Add an initializer method call.\n\tvoid addInitializer(org.springframework.aot.generate.MethodReference methodReference);\n\t// Get the GeneratedMethods used by the initializing code.\n\torg.springframework.aot.generate.GeneratedMethods getMethods();\n}", "des": "Interface that can be used to configure the code that will be generated to perform bean factory initialization."}
{"index": 6430, "code": "public class BeanInstantiationException extends FatalBeanException {\n\t// Return the offending bean class (never null).\n\tClass<?> getBeanClass();\n\t// Return the delegate for bean construction purposes, if known.\n\tMethod getConstructingMethod();\n\t// Return the offending constructor, if known.\n\tConstructor<?> getConstructor();\n}", "des": "Exception thrown when instantiation of a bean failed."}
{"index": 6431, "code": "public class BeanMetadataAttribute extends Object implements BeanMetadataElement {\n\tboolean equals(Object other);\n\t// Return the name of the attribute.\n\tString getName();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n\t// Return the value of the attribute.\n\tObject getValue();\n\t// Set the configuration source Object for this metadata element.\n\tvoid setSource(Object source);\n}", "des": "Holder for a key-value style attribute that is part of a bean definition."}
{"index": 6432, "code": "public class BeanNotOfRequiredTypeException extends BeansException {\n\t// Return the actual type of the instance found.\n\tClass<?> getActualType();\n\t// Return the name of the instance that was of the wrong type.\n\tString getBeanName();\n\t// Return the expected type for the bean.\n\tClass<?> getRequiredType();\n}", "des": "Thrown when a bean doesn't match the expected type."}
{"index": 6433, "code": "@FunctionalInterface public interface BeanRegistrationAotProcessor {\n\t// Return if the bean instance associated with this processor should be excluded from AOT processing itself.\n\tdefault boolean isBeanExcludedFromAotProcessing();\n\t// Process the given RegisteredBean instance ahead-of-time and return a contribution or null.\n\tBeanRegistrationAotContribution processAheadOfTime(RegisteredBean registeredBean);\n}", "des": "AOT processor that makes bean registration contributions by processing RegisteredBean instances."}
{"index": 6434, "code": "public interface BeanRegistrationCode {\n\t// Add an instance post processor method call to the registration code.\n\tvoid addInstancePostProcessor(org.springframework.aot.generate.MethodReference methodReference);\n\t// Return the name of the class being used for registrations.\n\torg.springframework.javapoet.ClassName getClassName();\n\t// Return a GeneratedMethods being used by the registrations code.\n\torg.springframework.aot.generate.GeneratedMethods getMethods();\n}", "des": "Interface that can be used to configure the code that will be generated to perform registration of a single bean."}
{"index": 6435, "code": "public interface BeanRegistrationsCode {\n\t// Return the name of the class being used for registrations.\n\torg.springframework.javapoet.ClassName getClassName();\n\t// Return a GeneratedMethods being used by the registrations code.\n\torg.springframework.aot.generate.GeneratedMethods getMethods();\n}", "des": "Interface that can be used to configure the code that will be generated to register beans."}
{"index": 6436, "code": "public class CannotLoadBeanClassException extends FatalBeanException {\n\t// Return the name of the class we were trying to load.\n\tString getBeanClassName();\n\t// Return the name of the bean requested.\n\tString getBeanName();\n\t// Return the description of the resource that the bean definition came from.\n\tString getResourceDescription();\n}", "des": "Exception thrown when the BeanFactory cannot load the specified class of a given bean."}
{"index": 6437, "code": "public class ChildBeanDefinition extends AbstractBeanDefinition {\n\t// Clone this bean definition.\n\tAbstractBeanDefinition cloneBeanDefinition();\n\tboolean equals(Object other);\n\t// Return the name of the parent definition of this bean definition, if any.\n\tString getParentName();\n\t// Set the name of the parent definition of this bean definition, if any.\n\tvoid setParentName(String parentName);\n\t// Validate this bean definition.\n\tvoid validate();\n}", "des": "Bean definition for beans which inherit settings from their parent."}
{"index": 6438, "code": "public class CompositeComponentDefinition extends AbstractComponentDefinition {\n\t// Add the given component as nested element of this composite component.\n\tvoid addNestedComponent(ComponentDefinition component);\n\t// Get the user-visible name of this ComponentDefinition.\n\tString getName();\n\t// Return the nested components that this composite component holds.\n\tComponentDefinition[] getNestedComponents();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n}", "des": "ComponentDefinition implementation that holds one or more nested ComponentDefinition instances, aggregating them into a named group of components."}
{"index": 6439, "code": "public class CustomDateEditor extends PropertyEditorSupport {\n\t// Format the Date as String, using the specified DateFormat.\n\tString getAsText();\n\t// Parse the Date from the given text, using the specified DateFormat.\n\tvoid setAsText(String text);\n}", "des": "Property editor for java.util.Date, supporting a custom java.text.DateFormat."}
{"index": 6440, "code": "public class CustomNumberEditor extends PropertyEditorSupport {\n\t// Format the Number as String, using the specified NumberFormat.\n\tString getAsText();\n\t// Parse the Number from the given text, using the specified NumberFormat.\n\tvoid setAsText(String text);\n\t// Coerce a Number value into the required target class, if necessary.\n\tvoid setValue(Object value);\n}", "des": "Property editor for any Number subclass such as Short, Integer, Long, BigInteger, Float, Double, BigDecimal."}
{"index": 6441, "code": "public interface DestructionAwareBeanPostProcessor extends BeanPostProcessor {\n\t// Apply this BeanPostProcessor to the given bean instance before its destruction, e.g.\n\tvoid postProcessBeforeDestruction(Object bean, String beanName);\n\t// Determine whether the given bean instance requires destruction by this post-processor.\n\tdefault boolean requiresDestruction(Object bean);\n}", "des": "Subinterface of BeanPostProcessor that adds a before-destruction callback."}
{"index": 6442, "code": "public interface FactoryBean<T> {\n\t// Return an instance (possibly shared or independent) of the object managed by this factory.\n\tT getObject();\n\t// Return the type of object that this FactoryBean creates, or null if not known in advance.\n\tClass<?> getObjectType();\n\t// Is the object managed by this factory a singleton? That is, will getObject() always return the same object (a reference that can be cached)?\n\tdefault boolean isSingleton();\n}", "des": "Interface to be implemented by objects used within a BeanFactory which are themselves factories for individual objects."}
{"index": 6443, "code": "public class FailFastProblemReporter extends Object implements ProblemReporter {\n\t// Throws a BeanDefinitionParsingException detailing the error that has occurred.\n\tvoid error(Problem problem);\n\t// Throws a BeanDefinitionParsingException detailing the error that has occurred.\n\tvoid fatal(Problem problem);\n\t// Set the logger that is to be used to report warnings.\n\tvoid setLogger(org.apache.commons.logging.Log logger);\n\t// Writes the supplied Problem to the Log at WARN level.\n\tvoid warning(Problem problem);\n}", "des": "Simple ProblemReporter implementation that exhibits fail-fast behavior when errors are encountered."}
{"index": 6444, "code": "public class GenericBeanDefinition extends AbstractBeanDefinition {\n\t// Clone this bean definition.\n\tAbstractBeanDefinition cloneBeanDefinition();\n\tboolean equals(Object other);\n\t// Return the name of the parent definition of this bean definition, if any.\n\tString getParentName();\n\t// Set the name of the parent definition of this bean definition, if any.\n\tvoid setParentName(String parentName);\n}", "des": "GenericBeanDefinition is a one-stop shop for declarative bean definition purposes."}
{"index": 6445, "code": "public interface HierarchicalBeanFactory extends BeanFactory {\n\t// Return whether the local bean factory contains a bean of the given name, ignoring beans defined in ancestor contexts.\n\tboolean containsLocalBean(String name);\n\t// Return the parent bean factory, or null if there is none.\n\tBeanFactory getParentBeanFactory();\n}", "des": "Sub-interface implemented by bean factories that can be part of a hierarchy."}
{"index": 6446, "code": "public class ImportDefinition extends Object implements BeanMetadataElement {\n\tfinal org.springframework.core.io.Resource[] getActualResources();\n\t// Return the location of the imported resource.\n\tfinal String getImportedResource();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tfinal Object getSource();\n}", "des": "Representation of an import that has been processed during the parsing process."}
{"index": 6447, "code": "public class InvalidPropertyException extends FatalBeanException {\n\t// Return the offending bean class.\n\tClass<?> getBeanClass();\n\t// Return the name of the offending property.\n\tString getPropertyName();\n}", "des": "Exception thrown when referring to an invalid bean property."}
{"index": 6448, "code": "public class Location extends Object {\n\t// Get the resource with which this location is associated.\n\torg.springframework.core.io.Resource getResource();\n\t// Get the actual location within the associated resource (may be null).\n\tObject getSource();\n}", "des": "Class that models an arbitrary location in a resource."}
{"index": 6449, "code": "public class LookupOverride extends MethodOverride {\n\tboolean equals(Object other);\n\t// Return the name of the bean that should be returned by this method.\n\tString getBeanName();\n\t// Match the specified method by Method reference or method name.\n\tboolean matches(Method method);\n}", "des": "Represents an override of a method that looks up an object in the same IoC context, either by bean name or by bean type (based on the declared method return type)."}
{"index": 6450, "code": "public interface Mergeable {\n\t// Is merging enabled for this particular instance?\n\tboolean isMergeEnabled();\n\t// Merge the current value set with that of the supplied object.\n\tObject merge(Object parent);\n}", "des": "Interface representing an object whose value set can be merged with that of a parent object."}
{"index": 6451, "code": "public interface MergedBeanDefinitionPostProcessor extends BeanPostProcessor {\n\t// Post-process the given merged bean definition for the specified bean.\n\tvoid postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName);\n\t// A notification that the bean definition for the specified name has been reset, and that this post-processor should clear any metadata for the affected bean.\n\tdefault void resetBeanDefinition(String beanName);\n}", "des": "Post-processor callback interface for merged bean definitions at runtime."}
{"index": 6452, "code": "public class NamedBeanHolder<T> extends Object implements NamedBean {\n\t// Return the corresponding bean instance.\n\tT getBeanInstance();\n\t// Return the name of the bean.\n\tString getBeanName();\n}", "des": "A simple holder for a given bean name plus bean instance."}
{"index": 6453, "code": "public class NoUniqueBeanDefinitionException extends NoSuchBeanDefinitionException {\n\t// Return the names of all beans found when only one matching bean was expected.\n\tCollection<String> getBeanNamesFound();\n\t// Return the number of beans found when only one matching bean was expected.\n\tint getNumberOfBeansFound();\n}", "des": "Exception thrown when a BeanFactory is asked for a bean instance for which multiple matching candidates have been found when only one matching bean was expected."}
{"index": 6454, "code": "public final class ParameterResolutionDelegate extends Object {\n\t// Determine if the supplied Parameter can potentially be autowired from an AutowireCapableBeanFactory.\n\tstatic boolean isAutowirable(Parameter parameter, int parameterIndex);\n\t// Resolve the dependency for the supplied Parameter from the supplied AutowireCapableBeanFactory.\n\tstatic Object resolveDependency(Parameter parameter, int parameterIndex, Class<?> containingClass, AutowireCapableBeanFactory beanFactory);\n}", "des": "Public delegate for resolving autowirable parameters on externally managed constructors and methods."}
{"index": 6455, "code": "public final class ParseState extends Object {\n\t// Return the ParseState.Entry currently at the top of the ArrayDeque or null if the ArrayDeque is empty.\n\tParseState.Entry peek();\n\t// Remove an ParseState.Entry from the ArrayDeque.\n\tvoid pop();\n\t// Add a new ParseState.Entry to the ArrayDeque.\n\tvoid push(ParseState.Entry entry);\n\t// Create a new instance of ParseState which is an independent snapshot of this instance.\n\tParseState snapshot();\n}", "des": "Simple ArrayDeque-based structure for tracking the logical position during a parsing process."}
{"index": 6456, "code": "public interface ProblemReporter {\n\t// Called when an error is encountered during the parsing process.\n\tvoid error(Problem problem);\n\t// Called when a fatal error is encountered during the parsing process.\n\tvoid fatal(Problem problem);\n\t// Called when a warning is raised during the parsing process.\n\tvoid warning(Problem problem);\n}", "des": "SPI interface allowing tools and other external processes to handle errors and warnings reported during bean definition parsing."}
{"index": 6457, "code": "public class PropertiesEditor extends PropertyEditorSupport {\n\t// Convert String into Properties, considering it as properties content.\n\tvoid setAsText(String text);\n\t// Take Properties as-is; convert Map into Properties.\n\tvoid setValue(Object value);\n}", "des": "Custom PropertyEditor for Properties objects."}
{"index": 6458, "code": "public abstract class PropertyAccessException extends BeansException {\n\t// Return a corresponding error code for this type of exception.\n\tabstract String getErrorCode();\n\t// Return the PropertyChangeEvent that resulted in the problem.\n\tPropertyChangeEvent getPropertyChangeEvent();\n\t// Return the name of the affected property, if available.\n\tString getPropertyName();\n\t// Return the affected value that was about to be set, if any.\n\tObject getValue();\n}", "des": "Superclass for exceptions related to a property access, such as type mismatch or invocation target exception."}
{"index": 6459, "code": "public final class PropertyAccessorFactory extends Object {\n\t// Obtain a BeanWrapper for the given target object, accessing properties in JavaBeans style.\n\tstatic BeanWrapper forBeanPropertyAccess(Object target);\n\t// Obtain a PropertyAccessor for the given target object, accessing properties in direct field style.\n\tstatic ConfigurablePropertyAccessor forDirectFieldAccess(Object target);\n}", "des": "Simple factory facade for obtaining PropertyAccessor instances, in particular for BeanWrapper instances."}
{"index": 6460, "code": "public class PropertyComparator<T> extends Object implements Comparator<T> {\n\tint compare(T o1, T o2);\n\t// Return the SortDefinition that this comparator uses.\n\tfinal SortDefinition getSortDefinition();\n\t// Sort the given source according to the given sort definition.\n\tstatic void sort(Object[] source, SortDefinition sortDefinition);\n\t// Sort the given List according to the given sort definition.\n\tstatic void sort(List<?> source, SortDefinition sortDefinition);\n}", "des": "PropertyComparator performs a comparison of two beans, evaluating the specified bean property via a BeanWrapper."}
{"index": 6461, "code": "public class ReplaceOverride extends MethodOverride {\n\t// Add a fragment of a class string, like \"Exception\" or \"java.lang.Exc\", to identify a parameter type.\n\tvoid addTypeIdentifier(String identifier);\n\tboolean equals(Object other);\n\t// Return the name of the bean implementing MethodReplacer.\n\tString getMethodReplacerBeanName();\n\t// Subclasses must override this to indicate whether they match the given method.\n\tboolean matches(Method method);\n}", "des": "Extension of MethodOverride that represents an arbitrary override of a method by the IoC container."}
{"index": 6462, "code": "public class RuntimeBeanNameReference extends Object implements BeanReference {\n\tboolean equals(Object other);\n\t// Return the target bean name that this reference points to (never null).\n\tString getBeanName();\n\t// Return the configuration source Object for this metadata element (may be null).\n\tObject getSource();\n\t// Set the configuration source Object for this metadata element.\n\tvoid setSource(Object source);\n}", "des": "Immutable placeholder class used for a property value object when it's a reference to another bean name in the factory, to be resolved at runtime."}
{"index": 6463, "code": "public class ServiceFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware {\n\t// Determine the actual object to expose for the given ServiceLoader.\n\tprotected Object getObjectToExpose(ServiceLoader<?> serviceLoader);\n\t// This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tClass<?> getObjectType();\n}", "des": "FactoryBean that exposes the 'primary' service for the configured service class, obtained through the JDK 1.6 ServiceLoader facility."}
{"index": 6464, "code": "public class ServiceListFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware {\n\t// Determine the actual object to expose for the given ServiceLoader.\n\tprotected Object getObjectToExpose(ServiceLoader<?> serviceLoader);\n\t// This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tClass<?> getObjectType();\n}", "des": "FactoryBean that exposes all services for the configured service class, represented as a List of service objects, obtained through the JDK 1.6 ServiceLoader facility."}
{"index": 6465, "code": "public class ServiceLoaderFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware {\n\t// Determine the actual object to expose for the given ServiceLoader.\n\tprotected Object getObjectToExpose(ServiceLoader<?> serviceLoader);\n\t// This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tClass<?> getObjectType();\n}", "des": "FactoryBean that exposes the JDK 1.6 ServiceLoader for the configured service class."}
{"index": 6466, "code": "public interface SmartFactoryBean<T> extends FactoryBean<T> {\n\t// Does this FactoryBean expect eager initialization, that is, eagerly initialize itself as well as expect eager initialization of its singleton object (if any)?\n\tdefault boolean isEagerInit();\n\t// Is the object managed by this factory a prototype? That is, will FactoryBean.getObject() always return an independent instance?\n\tdefault boolean isPrototype();\n}", "des": "Extension of the FactoryBean interface."}
{"index": 6467, "code": "public interface SortDefinition {\n\t// Return the name of the bean property to compare.\n\tString getProperty();\n\t// Return whether to sort ascending (true) or descending (false).\n\tboolean isAscending();\n\t// Return whether upper and lower case in String values should be ignored.\n\tboolean isIgnoreCase();\n}", "des": "Definition for sorting bean instances by a property."}
{"index": 6468, "code": "public static enum YamlProcessor.ResolutionMethod extends Enum<YamlProcessor.ResolutionMethod> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic YamlProcessor.ResolutionMethod valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic YamlProcessor.ResolutionMethod[] values();\n}", "des": "Method to use for resolving resources."}
{"index": 6469, "code": "public interface CachingDestinationResolver extends DestinationResolver {\n\t// Clear the entire destination cache.\n\tvoid clearCache();\n\t// Remove the destination with the given name from the cache (if cached by this resolver in the first place).\n\tvoid removeFromCache(String destinationName);\n}", "des": "Extension of the DestinationResolver interface, exposing methods for clearing the cache."}
{"index": 6470, "code": "public class ChainedExceptionListener extends Object implements ExceptionListener {\n\t// Add an ExceptionListener to the chained delegate list.\n\tfinal void addDelegate(ExceptionListener listener);\n\t// Return all registered ExceptionListener delegates (as array).\n\tfinal ExceptionListener[] getDelegates();\n\tvoid onException(JMSException ex);\n}", "des": "Implementation of the JMS ExceptionListener interface that supports chaining, allowing the addition of multiple ExceptionListener instances in order."}
{"index": 6471, "code": "public class DynamicDestinationResolver extends Object implements DestinationResolver {\n\t// Resolve the specified destination name as a dynamic destination.\n\tDestination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain);\n\t// Resolve the given destination name to a Queue.\n\tprotected Queue resolveQueue(Session session, String queueName);\n\t// Resolve the given destination name to a Topic.\n\tprotected Topic resolveTopic(Session session, String topicName);\n}", "des": "Simple DestinationResolver implementation resolving destination names as dynamic destinations."}
{"index": 6472, "code": "public abstract class JmsException extends org.springframework.core.NestedRuntimeException {\n\t// Convenience method to get the vendor specific error code if the root cause was an instance of JMSException.\n\tString getErrorCode();\n\t// Return the detail message, including the message from the linked exception if there is one.\n\tString getMessage();\n}", "des": "Base class for exception thrown by the framework whenever it encounters a problem related to JMS."}
{"index": 6473, "code": "public interface JmsListenerEndpoint {\n\t// Return the id of this endpoint.\n\tString getId();\n\t// Set up the specified message listener container with the model defined by this endpoint.\n\tvoid setupListenerContainer(MessageListenerContainer listenerContainer);\n}", "des": "Model for a JMS listener endpoint."}
{"index": 6474, "code": "public interface MessageConverter {\n\t// Convert from a JMS Message to a Java object.\n\tObject fromMessage(Message message);\n\t// Convert a Java object to a JMS Message using the supplied session to create the message object.\n\tMessage toMessage(Object object, Session session);\n}", "des": "Strategy interface that specifies a converter between Java objects and JMS messages."}
{"index": 6475, "code": "public enum MessageType extends Enum<MessageType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MessageType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MessageType[] values();\n}", "des": "Constants that indicate a target message type to convert to: a TextMessage, a BytesMessage, a MapMessage or an ObjectMessage."}
{"index": 6476, "code": "public class SimpleJmsHeaderMapper extends org.springframework.messaging.support.AbstractHeaderMapper<Message> implements JmsHeaderMapper {\n\t// Add the outbound prefix if necessary.\n\tprotected String fromHeaderName(String headerName);\n\tvoid fromHeaders(org.springframework.messaging.MessageHeaders headers, Message jmsMessage);\n\t// Add the inbound prefix if necessary.\n\tprotected String toHeaderName(String propertyName);\n\torg.springframework.messaging.MessageHeaders toHeaders(Message jmsMessage);\n}", "des": "Simple implementation of JmsHeaderMapper."}
{"index": 6477, "code": "public class BindAuthenticator extends AbstractLdapAuthenticator {\n\t// Authenticates as a user and obtains additional user information from the directory.\n\torg.springframework.ldap.core.DirContextOperations authenticate(org.springframework.security.core.Authentication authentication);\n\t// Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN.\n\tprotected void handleBindException(String userDn, String username, Throwable cause);\n}", "des": "An authenticator which binds as a user."}
{"index": 6478, "code": "public interface EmbeddedLdapServerContainer {\n\t// Returns the embedded LDAP server port.\n\tint getPort();\n\t// The embedded LDAP server port to connect to.\n\tvoid setPort(int port);\n}", "des": "Provides lifecycle services for an embedded LDAP server."}
{"index": 6479, "code": "public class NestedLdapAuthoritiesPopulator extends DefaultLdapAuthoritiesPopulator {\n\tSet<org.springframework.security.core.GrantedAuthority> getGroupMembershipRoles(String userDn, String username);\n\t// Sets the attribute names to retrieve for each ldap groups.\n\tvoid setAttributeNames(Set<String> attributeNames);\n\t// How far should a nested search go.\n\tvoid setMaxSearchDepth(int maxSearchDepth);\n}", "des": "A LDAP authority populator that can recursively search static nested groups."}
{"index": 6480, "code": "public class PasswordPolicyControl extends Object implements Control {\n\t// Retrieves the ASN.1 BER encoded value of the LDAP control.\n\tbyte[] getEncodedValue();\n\t// Returns the OID of the Password Policy Control (\"1.3.6.1.4.1.42.2.27.8.5.1\").\n\tString getID();\n\t// Returns whether the control is critical for the client.\n\tboolean isCritical();\n}", "des": "A Password Policy request control."}
{"index": 6481, "code": "public enum PasswordPolicyErrorStatus extends Enum<PasswordPolicyErrorStatus> {\n\tString getDefaultMessage();\n\tString getErrorCode();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PasswordPolicyErrorStatus valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PasswordPolicyErrorStatus[] values();\n}", "des": "Defines status codes for use with PasswordPolicyException, with error codes (for message source lookup) and default messages."}
{"index": 6482, "code": "public class SpringSecurityAuthenticationSource extends Object implements org.springframework.ldap.core.AuthenticationSource {\n\tString getCredentials();\n\t// Get the principals of the logged in user, in this case the distinguished name.\n\tString getPrincipal();\n\t// Sets the SecurityContextHolderStrategy to use.\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy);\n}", "des": "An AuthenticationSource to retrieve authentication information stored in Spring Security's SecurityContextHolder."}
{"index": 6483, "code": "public class BooleanLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Represents the literal values TRUE and FALSE."}
{"index": 6484, "code": "public class ConstructorReference extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Implements getValue() - delegating to the code for building an array or a simple type.\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represents the invocation of a constructor."}
{"index": 6485, "code": "public class Elvis extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Evaluate the condition and if not null, return it.\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represents the elvis operator ?:."}
{"index": 6486, "code": "public interface ExpressionParser {\n\t// Parse the expression string and return an Expression object you can use for repeated evaluation.\n\tExpression parseExpression(String expressionString);\n\t// Parse the expression string and return an Expression object you can use for repeated evaluation.\n\tExpression parseExpression(String expressionString, ParserContext context);\n}", "des": "Parses expression strings into compiled expressions that can be evaluated."}
{"index": 6487, "code": "public class FloatLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents a float literal."}
{"index": 6488, "code": "public class FunctionReference extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "A function reference is of the form \"#someFunction(a,b,c)\"."}
{"index": 6489, "code": "public class InlineMap extends SpelNodeImpl {\n\tMap<Object,Object> getConstantValue();\n\tTypedValue getValueInternal(ExpressionState expressionState);\n\t// Return whether this list is a constant value.\n\tboolean isConstant();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represent a map in an expression, e.g."}
{"index": 6490, "code": "public class IntLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents an integer literal."}
{"index": 6491, "code": "public class LongLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents a long integer literal."}
{"index": 6492, "code": "public class NullLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents null."}
{"index": 6493, "code": "public class OpAnd extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Represents the boolean AND operation."}
{"index": 6494, "code": "public class OpDivide extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements division operator."}
{"index": 6495, "code": "public class OpEQ extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the equality operator."}
{"index": 6496, "code": "public enum Operation extends Enum<Operation> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Operation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Operation[] values();\n}", "des": "Supported operations that an OperatorOverloader can implement for any pair of operands."}
{"index": 6497, "code": "public class OperatorInstanceof extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Compare the left operand to see it is an instance of the type specified as the right operand.\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "The operator 'instanceof' checks if an object is of the class specified in the right-hand operand, in the same way that instanceof does in Java."}
{"index": 6498, "code": "public class OperatorNot extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represents a NOT operation."}
{"index": 6499, "code": "public interface OperatorOverloader {\n\t// Execute the specified operation on two operands, returning a result.\n\tObject operate(Operation operation, Object leftOperand, Object rightOperand);\n\t// Return true if the operator overloader supports the specified operation between the two operands and so should be invoked to handle it.\n\tboolean overridesOperation(Operation operation, Object leftOperand, Object rightOperand);\n}", "des": "By default the mathematical operators Operation support simple types like numbers."}
{"index": 6500, "code": "public class OpGE extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements greater-than-or-equal operator."}
{"index": 6501, "code": "public class OpGT extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the greater-than operator."}
{"index": 6502, "code": "public class OpLE extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the less-than-or-equal operator."}
{"index": 6503, "code": "public class OpLT extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the less-than operator."}
{"index": 6504, "code": "public class OpMinus extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tSpelNodeImpl getRightOperand();\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// String format for all operators is the same '(' [operand] [operator] [operand] ')'.\n\tString toStringAST();\n}", "des": "The minus operator supports: subtraction of numbers subtraction of an int from a string of one character (effectively decreasing that character), so 'd'-3='a'"}
{"index": 6505, "code": "public class OpModulus extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the modulus operator."}
{"index": 6506, "code": "public class OpMultiply extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Implements the multiply operator directly here for certain types of supported operands and otherwise delegates to any registered overloader for types not supported here.\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the multiply operator."}
{"index": 6507, "code": "public class OpNE extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Implements the not-equal operator."}
{"index": 6508, "code": "public class OpOr extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Represents the boolean OR operation."}
{"index": 6509, "code": "public class OpPlus extends Operator {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tSpelNodeImpl getRightOperand();\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// String format for all operators is the same '(' [operand] [operator] [operand] ')'.\n\tString toStringAST();\n}", "des": "The plus operator will: add numbers concatenate strings"}
{"index": 6510, "code": "public interface ParserContext {\n\t// For template expressions, returns the prefix that identifies the start of an expression block within a string.\n\tString getExpressionPrefix();\n\t// For template expressions, return the prefix that identifies the end of an expression block within a string.\n\tString getExpressionSuffix();\n\t// Whether the expression being parsed is a template.\n\tboolean isTemplate();\n}", "des": "Input provided to an expression parser that can influence an expression parsing/compilation routine."}
{"index": 6511, "code": "public class RealLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents a real literal."}
{"index": 6512, "code": "public enum SpelCompilerMode extends Enum<SpelCompilerMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SpelCompilerMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SpelCompilerMode[] values();\n}", "des": "Captures the possible configuration settings for a compiler that can be used when evaluating expressions."}
{"index": 6513, "code": "public class SpelEvaluationException extends EvaluationException {\n\t// Return the message inserts.\n\tObject[] getInserts();\n\t// Return the message code.\n\tSpelMessage getMessageCode();\n\t// Set the position in the related expression which gave rise to this exception.\n\tvoid setPosition(int position);\n}", "des": "Root exception for Spring EL related exceptions."}
{"index": 6514, "code": "public enum SpelMessage extends Enum<SpelMessage> {\n\t// Produce a complete message including the prefix and with the inserts applied to the message.\n\tString formatMessage(Object... inserts);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SpelMessage valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SpelMessage[] values();\n}", "des": "Contains all the messages that can be produced by the Spring Expression Language."}
{"index": 6515, "code": "public static enum SpelMessage.Kind extends Enum<SpelMessage.Kind> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SpelMessage.Kind valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SpelMessage.Kind[] values();\n}", "des": "Message kinds."}
{"index": 6516, "code": "public class SpelParseException extends ParseException {\n\t// Return the message inserts.\n\tObject[] getInserts();\n\t// Return the message code.\n\tSpelMessage getMessageCode();\n}", "des": "Root exception for Spring EL related exceptions."}
{"index": 6517, "code": "public class StandardOperatorOverloader extends Object implements OperatorOverloader {\n\t// Execute the specified operation on two operands, returning a result.\n\tObject operate(Operation operation, Object leftOperand, Object rightOperand);\n\t// Return true if the operator overloader supports the specified operation between the two operands and so should be invoked to handle it.\n\tboolean overridesOperation(Operation operation, Object leftOperand, Object rightOperand);\n}", "des": "Standard implementation of OperatorOverloader."}
{"index": 6518, "code": "public class StandardTypeComparator extends Object implements TypeComparator {\n\t// Return true if the comparator can compare these two objects.\n\tboolean canCompare(Object left, Object right);\n\t// Compare two given objects.\n\tint compare(Object left, Object right);\n}", "des": "A basic TypeComparator implementation: supports comparison of Number types as well as types implementing Comparable."}
{"index": 6519, "code": "public class StringLiteral extends Literal {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getLiteralValue();\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n}", "des": "Expression language AST node that represents a string literal."}
{"index": 6520, "code": "public class TemplateParserContext extends Object implements ParserContext {\n\t// For template expressions, returns the prefix that identifies the start of an expression block within a string.\n\tfinal String getExpressionPrefix();\n\t// For template expressions, return the prefix that identifies the end of an expression block within a string.\n\tfinal String getExpressionSuffix();\n\t// Whether the expression being parsed is a template.\n\tfinal boolean isTemplate();\n}", "des": "Configurable ParserContext implementation for template parsing."}
{"index": 6521, "code": "public class Ternary extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\t// Evaluate the condition and if true evaluate the first alternative, otherwise evaluate the second alternative.\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represents a ternary expression, for example: \"someCheck()?true:false\"."}
{"index": 6522, "code": "public enum TypeCode extends Enum<TypeCode> {\n\tstatic TypeCode forClass(Class<?> clazz);\n\tstatic TypeCode forName(String name);\n\tClass<?> getType();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic TypeCode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic TypeCode[] values();\n}", "des": "Captures primitive types and their corresponding class objects, plus one special TypeCode.OBJECT entry that represents all reference (non-primitive) types."}
{"index": 6523, "code": "public interface TypeComparator {\n\t// Return true if the comparator can compare these two objects.\n\tboolean canCompare(Object firstObject, Object secondObject);\n\t// Compare two given objects.\n\tint compare(Object firstObject, Object secondObject);\n}", "des": "Instances of a type comparator should be able to compare pairs of objects for equality."}
{"index": 6524, "code": "public class TypeReference extends SpelNodeImpl {\n\t// Generate the bytecode for this node into the supplied visitor.\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf);\n\tTypedValue getValueInternal(ExpressionState state);\n\t// Check whether a node can be compiled to bytecode.\n\tboolean isCompilable();\n\t// Return the string form of this AST node.\n\tString toStringAST();\n}", "des": "Represents a reference to a type, for example \"T(String)\" or \"T(com.example.Foo)\"."}
{"index": 6525, "code": "public interface ValueRef {\n\t// Returns the value this ValueRef points to, it should not require expression component re-evaluation.\n\tTypedValue getValue();\n\t// Indicates whether calling setValue(Object) is supported.\n\tboolean isWritable();\n\t// Sets the value this ValueRef points to, it should not require expression component re-evaluation.\n\tvoid setValue(Object newValue);\n}", "des": "Represents a reference to a value."}
{"index": 6526, "code": "public static class ValueRef.NullValueRef extends Object implements ValueRef {\n\t// Returns the value this ValueRef points to, it should not require expression component re-evaluation.\n\tTypedValue getValue();\n\t// Indicates whether calling setValue(Object) is supported.\n\tboolean isWritable();\n\t// Sets the value this ValueRef points to, it should not require expression component re-evaluation.\n\tvoid setValue(Object newValue);\n}", "des": "A ValueRef for the null value."}
{"index": 6527, "code": "public static class ValueRef.TypedValueHolderValueRef extends Object implements ValueRef {\n\t// Returns the value this ValueRef points to, it should not require expression component re-evaluation.\n\tTypedValue getValue();\n\t// Indicates whether calling setValue(Object) is supported.\n\tboolean isWritable();\n\t// Sets the value this ValueRef points to, it should not require expression component re-evaluation.\n\tvoid setValue(Object newValue);\n}", "des": "A ValueRef holder for a single value, which cannot be set."}
{"index": 6528, "code": "public abstract class AbstractDecompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered {\n\t// Get the stream.\n\tprotected abstract InputStream getDecompressorStream(InputStream stream);\n\t// Get the encoding.\n\tprotected abstract String getEncoding();\n\tint getOrder();\n\t// Change (or replace) the message.\n\tMessage postProcessMessage(Message message);\n\t// Set the order.\n\tprotected void setOrder(int order);\n}", "des": "Base class for post processors that decompress the message body if the MessageProperties.SPRING_AUTO_DECOMPRESS header is true or to optionally always decompress if the content encoding matches AbstractDecompressingPostProcessor.getEncoding(), or starts with AbstractDecompressingPostProcessor.getEncoding() + \":\", in which case the encoding following the colon becomes the final content encoding of the decompressed message."}
{"index": 6529, "code": "public abstract class AbstractDeflaterPostProcessor extends AbstractCompressingPostProcessor {\n\t// Get the deflater compression level.\n\tint getLevel();\n\t// Set the deflater compression level.\n\tvoid setLevel(int level);\n}", "des": "Base class for post processors based on Deflater."}
{"index": 6530, "code": "public abstract class AllowedListDeserializingMessageConverter extends AbstractMessageConverter {\n\t// Add package/class patterns to the allowed list.\n\tvoid addAllowedListPatterns(String... patterns);\n\tprotected void checkAllowedList(Class<?> clazz);\n\t// Set simple patterns for allowable packages/classes for deserialization.\n\tvoid setAllowedListPatterns(List<String> patterns);\n}", "des": "MessageConverters that potentially use Java deserialization."}
{"index": 6531, "code": "public interface BatchMessageListener extends MessageListener {\n\t// Delivers a single message.\n\tdefault void onMessage(Message message);\n\t// Delivers a batch of messages.\n\tvoid onMessageBatch(List<Message> messages);\n}", "des": "Used to receive a batch of messages if the container supports it."}
{"index": 6532, "code": "public static enum Binding.DestinationType extends Enum<Binding.DestinationType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Binding.DestinationType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Binding.DestinationType[] values();\n}", "des": "The binding destination."}
{"index": 6533, "code": "public class DeflaterPostProcessor extends AbstractDeflaterPostProcessor {\n\t// Get the stream.\n\tprotected OutputStream getCompressorStream(OutputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a DeflaterOutputStream to compress the message body."}
{"index": 6534, "code": "public class GUnzipPostProcessor extends AbstractDecompressingPostProcessor {\n\t// Get the stream.\n\tprotected InputStream getDecompressorStream(InputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a GZIPInputStream to decompress the message body."}
{"index": 6535, "code": "public class GZipPostProcessor extends AbstractDeflaterPostProcessor {\n\t// Get the stream.\n\tprotected OutputStream getCompressorStream(OutputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a GZIPOutputStream to compress the message body."}
{"index": 6536, "code": "public class InflaterPostProcessor extends AbstractDecompressingPostProcessor {\n\t// Get the stream.\n\tprotected InputStream getDecompressorStream(InputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a InflaterInputStream to decompress the message body."}
{"index": 6537, "code": "public static enum Jackson2JavaTypeMapper.TypePrecedence extends Enum<Jackson2JavaTypeMapper.TypePrecedence> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Jackson2JavaTypeMapper.TypePrecedence valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Jackson2JavaTypeMapper.TypePrecedence[] values();\n}", "des": "The precedence for type conversion - inferred from the method parameter or message headers."}
{"index": 6538, "code": "public class Message extends Object implements Serializable {\n\tboolean equals(Object obj);\n\tbyte[] getBody();\n\tMessageProperties getMessageProperties();\n\t// Set the encoding to use in toString() when converting the body if there is no contentEncoding message property present.\n\tstatic void setDefaultEncoding(String encoding);\n\t// Set the maximum length of a test message body to render as a String in toString().\n\tstatic void setMaxBodyLength(int length);\n}", "des": "The 0-8 and 0-9-1 AMQP specifications do not define an Message class or interface."}
{"index": 6539, "code": "public interface MessageConverter {\n\t// Convert from a Message to a Java object.\n\tObject fromMessage(Message message);\n\t// Convert a Java object to a Message.\n\tMessage toMessage(Object object, MessageProperties messageProperties);\n\t// Convert a Java object to a Message.\n\tdefault Message toMessage(Object object, MessageProperties messageProperties, Type genericType);\n}", "des": "Message converter interface."}
{"index": 6540, "code": "public enum MessageDeliveryMode extends Enum<MessageDeliveryMode> {\n\tstatic MessageDeliveryMode fromInt(int modeAsNumber);\n\tstatic int toInt(MessageDeliveryMode mode);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MessageDeliveryMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MessageDeliveryMode[] values();\n}", "des": "Enumeration for the message delivery mode."}
{"index": 6541, "code": "@FunctionalInterface public interface MessageListener {\n\t// Called by the container to inform the listener of its acknowledgement mode.\n\tdefault void containerAckMode(AcknowledgeMode mode);\n\t// Return true if this listener is request/reply and the replies are async.\n\tdefault boolean isAsyncReplies();\n\t// Delivers a single message.\n\tvoid onMessage(Message message);\n\t// Delivers a batch of messages.\n\tdefault void onMessageBatch(List<Message> messages);\n}", "des": "Listener interface to receive asynchronous delivery of Amqp Messages."}
{"index": 6542, "code": "@FunctionalInterface public interface MessagePostProcessor {\n\t// Change (or replace) the message.\n\tMessage postProcessMessage(Message message);\n\t// Change (or replace) the message and/or change its correlation data.\n\tdefault Message postProcessMessage(Message message, Correlation correlation);\n\t// Change (or replace) the message and/or change its correlation data.\n\tdefault Message postProcessMessage(Message message, Correlation correlation, String exchange, String routingKey);\n}", "des": "Used in several places in the framework, such as AmqpTemplate#convertAndSend(Object, MessagePostProcessor) where it can be used to add/modify headers or properties after the message conversion has been performed."}
{"index": 6543, "code": "public static enum QueueBuilder.LeaderLocator extends Enum<QueueBuilder.LeaderLocator> {\n\t// Return the value.\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic QueueBuilder.LeaderLocator valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic QueueBuilder.LeaderLocator[] values();\n}", "des": "Locate the queue leader."}
{"index": 6544, "code": "public static enum QueueBuilder.Overflow extends Enum<QueueBuilder.Overflow> {\n\t// Return the value.\n\tString getValue();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic QueueBuilder.Overflow valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic QueueBuilder.Overflow[] values();\n}", "des": "Overflow argument values."}
{"index": 6545, "code": "public class RemoteInvocationAwareMessageConverterAdapter extends Object implements MessageConverter {\n\t// Convert from a Message to a Java object.\n\tObject fromMessage(Message message);\n\t// Convert a Java object to a Message.\n\tMessage toMessage(Object object, MessageProperties messageProperties);\n}", "des": "A delegating adapter that unwraps RemoteInvocationResult after invoking the delegate to convert from a message."}
{"index": 6546, "code": "public class ReturnedMessage extends Object {\n\t// Get the exchange.\n\tString getExchange();\n\t// Get the message.\n\tMessage getMessage();\n\t// Get the reply code.\n\tint getReplyCode();\n\t// Get the reply text.\n\tString getReplyText();\n\t// Get the routing key.\n\tString getRoutingKey();\n}", "des": "Returned message and its metadata."}
{"index": 6547, "code": "public final class SendRetryContextAccessor extends Object {\n\t// Retrieve the Address from the context.\n\tstatic Address getAddress(org.springframework.retry.RetryContext context);\n\t// Retrieve the Message from the context.\n\tstatic Message getMessage(org.springframework.retry.RetryContext context);\n}", "des": "Type safe accessor for retried message sending."}
{"index": 6548, "code": "public class UnzipPostProcessor extends AbstractDecompressingPostProcessor {\n\t// Get the stream.\n\tprotected InputStream getDecompressorStream(InputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a ZipInputStream to decompress the message body."}
{"index": 6549, "code": "public class ZipPostProcessor extends AbstractDeflaterPostProcessor {\n\t// Get the stream.\n\tprotected OutputStream getCompressorStream(OutputStream zipped);\n\t// Get the encoding.\n\tprotected String getEncoding();\n}", "des": "A post processor that uses a ZipOutputStream to compress the message body."}
{"index": 6550, "code": "public abstract class AbstractOAuth2Token extends Object implements OAuth2Token, Serializable {\n\tboolean equals(Object obj);\n\t// Returns the expiration time on or after which the token MUST NOT be accepted.\n\tInstant getExpiresAt();\n\t// Returns the time at which the token was issued.\n\tInstant getIssuedAt();\n\t// Returns the token value.\n\tString getTokenValue();\n}", "des": "Base class for OAuth 2.0 Token implementations."}
{"index": 6551, "code": "public interface AddressStandardClaim {\n\t// Returns the country.\n\tString getCountry();\n\t// Returns the full mailing address, formatted for display.\n\tString getFormatted();\n\t// Returns the city or locality.\n\tString getLocality();\n\t// Returns the zip code or postal code.\n\tString getPostalCode();\n\t// Returns the state, province, prefecture, or region.\n\tString getRegion();\n\t// Returns the full street address, which may include house number, street name, P.O.\n\tString getStreetAddress();\n}", "des": "The Address Claim represents a physical mailing address defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token."}
{"index": 6552, "code": "public final class ClaimConversionService extends org.springframework.core.convert.support.GenericConversionService {\n\t// Adds the converters that provide type conversion for claim values to the provided ConverterRegistry.\n\tstatic void addConverters(org.springframework.core.convert.converter.ConverterRegistry converterRegistry);\n\t// Returns a shared instance of ClaimConversionService.\n\tstatic ClaimConversionService getSharedInstance();\n}", "des": "A ConversionService configured with converters that provide type conversion for claim values."}
{"index": 6553, "code": "public final class DefaultOAuth2AuthenticatedPrincipal extends Object implements OAuth2AuthenticatedPrincipal, Serializable {\n\t// Gets the attributes of the OAuth 2.0 token in map form.\n\tMap<String,Object> getAttributes();\n\t// Get the Collection of GrantedAuthoritys associated with this OAuth 2.0 token\n\tCollection<? extends org.springframework.security.core.GrantedAuthority> getAuthorities();\n\tString getName();\n}", "des": "A domain object that wraps the attributes of an OAuth 2.0 token."}
{"index": 6554, "code": "public class DefaultOAuth2User extends Object implements OAuth2User, Serializable {\n\tboolean equals(Object obj);\n\t// Get the OAuth 2.0 token attributes\n\tMap<String,Object> getAttributes();\n\t// Get the Collection of GrantedAuthoritys associated with this OAuth 2.0 token\n\tCollection<? extends org.springframework.security.core.GrantedAuthority> getAuthorities();\n\tString getName();\n}", "des": "The default implementation of an OAuth2User."}
{"index": 6555, "code": "public class DefaultOidcUser extends DefaultOAuth2User implements OidcUser {\n\t// Returns the claims about the user.\n\tMap<String,Object> getClaims();\n\t// Returns the ID Token containing claims about the user.\n\tOidcIdToken getIdToken();\n\t// Returns the UserInfo containing claims about the user.\n\tOidcUserInfo getUserInfo();\n}", "des": "The default implementation of an OidcUser."}
{"index": 6556, "code": "public class OAuth2AccessToken extends AbstractOAuth2Token {\n\t// Returns the scope(s) associated to the token.\n\tSet<String> getScopes();\n\t// Returns the token type.\n\tOAuth2AccessToken.TokenType getTokenType();\n}", "des": "An implementation of an AbstractOAuth2Token representing an OAuth 2.0 Access Token."}
{"index": 6557, "code": "public interface OAuth2AuthenticatedPrincipal extends org.springframework.security.core.AuthenticatedPrincipal {\n\t// Get the OAuth 2.0 token attribute by name\n\tdefault <A> A getAttribute(String name);\n\t// Get the OAuth 2.0 token attributes\n\tMap<String,Object> getAttributes();\n\t// Get the Collection of GrantedAuthoritys associated with this OAuth 2.0 token\n\tCollection<? extends org.springframework.security.core.GrantedAuthority> getAuthorities();\n}", "des": "An AuthenticatedPrincipal that represents the principal associated with an OAuth 2.0 token."}
{"index": 6558, "code": "public final class OAuth2AuthorizationExchange extends Object {\n\t// Returns the Authorization Request.\n\tOAuth2AuthorizationRequest getAuthorizationRequest();\n\t// Returns the Authorization Response.\n\tOAuth2AuthorizationResponse getAuthorizationResponse();\n}", "des": "An \"exchange\" of an OAuth 2.0 Authorization Request and Response for the authorization code grant type."}
{"index": 6559, "code": "public class OAuth2Error extends Object implements Serializable {\n\t// Returns the error description.\n\tfinal String getDescription();\n\t// Returns the error code.\n\tfinal String getErrorCode();\n\t// Returns the error uri.\n\tfinal String getUri();\n}", "des": "A representation of an OAuth 2.0 Error."}
{"index": 6560, "code": "public interface OAuth2Token {\n\t// Returns the expiration time on or after which the token MUST NOT be accepted.\n\tdefault Instant getExpiresAt();\n\t// Returns the time at which the token was issued.\n\tdefault Instant getIssuedAt();\n\t// Returns the token value.\n\tString getTokenValue();\n}", "des": "Core interface representing an OAuth 2.0 Token."}
{"index": 6561, "code": "public class OidcIdToken extends AbstractOAuth2Token implements IdTokenClaimAccessor {\n\t// Returns a set of claims that may be used for assertions.\n\tMap<String,Object> getClaims();\n\t// Create a OidcIdToken.Builder based on the given token value\n\tstatic OidcIdToken.Builder withTokenValue(String tokenValue);\n}", "des": "An implementation of an AbstractOAuth2Token representing an OpenID Connect Core 1.0 ID Token."}
{"index": 6562, "code": "public interface OidcUser extends OAuth2User, IdTokenClaimAccessor {\n\t// Returns the claims about the user.\n\tMap<String,Object> getClaims();\n\t// Returns the ID Token containing claims about the user.\n\tOidcIdToken getIdToken();\n\t// Returns the UserInfo containing claims about the user.\n\tOidcUserInfo getUserInfo();\n}", "des": "A representation of a user Principal that is registered with an OpenID Connect 1.0 Provider."}
{"index": 6563, "code": "public class OidcUserAuthority extends OAuth2UserAuthority {\n\tboolean equals(Object obj);\n\t// Returns the ID Token containing claims about the user.\n\tOidcIdToken getIdToken();\n\t// Returns the UserInfo containing claims about the user, may be null.\n\tOidcUserInfo getUserInfo();\n}", "des": "A GrantedAuthority that may be associated to an OidcUser."}
{"index": 6564, "code": "public class OidcUserInfo extends Object implements StandardClaimAccessor, Serializable {\n\t// Create a OidcUserInfo.Builder\n\tstatic OidcUserInfo.Builder builder();\n\tboolean equals(Object obj);\n\t// Returns a set of claims that may be used for assertions.\n\tMap<String,Object> getClaims();\n}", "des": "A representation of a UserInfo Response that is returned from the OAuth 2.0 Protected Resource UserInfo Endpoint."}
{"index": 6565, "code": "public abstract class AbstractTcpConnectionSupport extends Object {\n\tint getPushbackBufferSize();\n\tboolean isPushbackCapable();\n\t// The size of the push back buffer; defaults to 1.\n\tvoid setPushbackBufferSize(int pushbackBufferSize);\n\t// Set to true to cause wrapping of the connection's input stream in a PushbackInputStream, enabling deserializers to \"unread\" data.\n\tvoid setPushbackCapable(boolean pushbackCapable);\n}", "des": "Base class for TCP Connection Support implementations."}
{"index": 6566, "code": "public class ByteArrayCrLfSerializer extends AbstractPooledBufferByteArraySerializer {\n\t// Reads the data in the inputStream to a byte[].\n\tbyte[] doDeserialize(InputStream inputStream, byte[] buffer);\n\tint fillToCrLf(InputStream inputStream, byte[] buffer);\n\t// Writes the byte[] to the stream and appends \\r\\n.\n\tvoid serialize(byte[] bytes, OutputStream outputStream);\n}", "des": "Reads data in an InputStream to a byte[]; data must be terminated by \\r\\n (not included in resulting byte[])."}
{"index": 6567, "code": "public class ByteArraySingleTerminatorSerializer extends AbstractPooledBufferByteArraySerializer {\n\t// Reads the data in the inputStream to a byte[].\n\tprotected byte[] doDeserialize(InputStream inputStream, byte[] buffer);\n\t// Writes the byte[] to the stream and appends the terminator.\n\tvoid serialize(byte[] bytes, OutputStream outputStream);\n}", "des": "Reads data in an InputStream to a byte[]; data must be terminated by a single byte (not included in resulting byte[])."}
{"index": 6568, "code": "public class ByteArrayStxEtxSerializer extends AbstractPooledBufferByteArraySerializer {\n\t// Reads the data in the inputStream to a byte[].\n\tbyte[] doDeserialize(InputStream inputStream, byte[] buffer);\n\t// Writes the byte[] to the stream, prefixed by an ASCII STX character and terminated with an ASCII ETX character.\n\tvoid serialize(byte[] bytes, OutputStream outputStream);\n}", "des": "Reads data in an InputStream to a byte[]; data must be prefixed by <stx> and terminated by <etx> (not included in resulting byte[])."}
{"index": 6569, "code": "public class DefaultTcpNetSocketFactorySupport extends Object implements TcpSocketFactorySupport {\n\t// Supplies the ServerSocketFactory to be used to create new ServerSockets.\n\tServerSocketFactory getServerSocketFactory();\n\t// Supplies the SocketFactory to be used to create new Sockets.\n\tSocketFactory getSocketFactory();\n}", "des": "Implementation of TcpSocketFactorySupport for non-SSL sockets ServerSocket and Socket."}
{"index": 6570, "code": "public class DefaultTcpNetSSLSocketFactorySupport extends Object implements TcpSocketFactorySupport {\n\t// Supplies the ServerSocketFactory to be used to create new ServerSockets.\n\tServerSocketFactory getServerSocketFactory();\n\t// Supplies the SocketFactory to be used to create new Sockets.\n\tSocketFactory getSocketFactory();\n}", "des": "Implementation of TcpSocketFactorySupport for SSL sockets SSLServerSocket and SSLSocket."}
{"index": 6571, "code": "public class DefaultTcpNioSSLConnectionSupport extends AbstractTcpConnectionSupport implements TcpNioConnectionSupport {\n\t// Creates a TcpNioSSLConnection.\n\tTcpNioConnection createNewConnection(SocketChannel socketChannel, boolean server, boolean lookupHost, org.springframework.context.ApplicationEventPublisher applicationEventPublisher, String connectionFactoryName);\n\t// Subclasses can post-process the ssl engine (set properties).\n\tprotected void postProcessSSLEngine(SSLEngine sslEngine);\n}", "des": "Implementation of TcpNioConnectionSupport for SSL NIO connections."}
{"index": 6572, "code": "public class DefaultTcpSocketSupport extends Object implements TcpSocketSupport {\n\t// No-Op.\n\tvoid postProcessServerSocket(ServerSocket serverSocket);\n\t// Enables host verification for SSL, if so configured.\n\tvoid postProcessSocket(Socket socket);\n}", "des": "Default implementation of TcpSocketSupport; makes no changes to sockets."}
{"index": 6573, "code": "public class DefaultTcpSSLContextSupport extends Object implements TcpSSLContextSupport {\n\t// Gets an SSLContext.\n\tSSLContext getSSLContext();\n\t// Set the key store type.\n\tvoid setKeyStoreType(String keyStoreType);\n\t// The protocol used in SSLContext.getInstance(String); default \"TLS\".\n\tvoid setProtocol(String protocol);\n\t// Set the trust store type.\n\tvoid setTrustStoreType(String trustStoreType);\n}", "des": "Default implementation of TcpSSLContextSupport; uses a 'TLS' (by default) SSLContext, initialized with 'JKS' keystores, managed by 'SunX509' Key and Trust managers."}
{"index": 6574, "code": "public class TcpNetClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNetClientConnectionFactorySpec,TcpNetClientConnectionFactory> {\n\t// The TcpNetConnectionSupport to use to create connection objects.\n\tTcpNetClientConnectionFactorySpec connectionSupport(TcpNetConnectionSupport connectionSupport);\n\t// Set the TcpSocketFactorySupport used to create server sockets.\n\tTcpNetClientConnectionFactorySpec socketFactorySupport(TcpSocketFactorySupport tcpSocketFactorySupport);\n}", "des": "TcpClientConnectionFactorySpec for TcpNetClientConnectionFactorys."}
{"index": 6575, "code": "public class TcpNetServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNetServerConnectionFactorySpec,TcpNetServerConnectionFactory> {\n\t// The TcpNetConnectionSupport to use to create connection objects.\n\tTcpNetServerConnectionFactorySpec connectionSupport(TcpNetConnectionSupport connectionSupport);\n\t// Set the TcpSocketFactorySupport used to create server sockets.\n\tTcpNetServerConnectionFactorySpec socketFactorySupport(TcpSocketFactorySupport tcpSocketFactorySupport);\n}", "des": "TcpServerConnectionFactorySpec for TcpNetServerConnectionFactorys."}
{"index": 6576, "code": "public class TcpNioClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNioClientConnectionFactorySpec,TcpNioClientConnectionFactory> {\n\t// The TcpNioConnectionSupport to use.\n\tTcpNioClientConnectionFactorySpec connectionSupport(TcpNioConnectionSupport tcpNioSupport);\n\t// True to use direct buffers.\n\tTcpNioClientConnectionFactorySpec directBuffers(boolean usingDirectBuffers);\n}", "des": "TcpClientConnectionFactorySpec for TcpNioClientConnectionFactorys."}
{"index": 6577, "code": "public class TcpNioServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNioServerConnectionFactorySpec,TcpNioServerConnectionFactory> {\n\t// The TcpNioConnectionSupport to use.\n\tTcpNioServerConnectionFactorySpec connectionSupport(TcpNioConnectionSupport tcpNioSupport);\n\t// True to use direct buffers.\n\tTcpNioServerConnectionFactorySpec directBuffers(boolean usingDirectBuffers);\n}", "des": "TcpServerConnectionFactorySpec for TcpNioServerConnectionFactorys."}
{"index": 6578, "code": "@FunctionalInterface public interface TcpSender {\n\t// When we are using sockets owned by a TcpListener, this method is called each time a new connection is made.\n\tvoid addNewConnection(TcpConnection connection);\n\t// When we are using sockets owned by a TcpListener, this method is called each time a connection is closed.\n\tdefault void removeDeadConnection(TcpConnection connection);\n}", "des": "An interface representing a sending client of a connection factory."}
{"index": 6579, "code": "public interface TcpServerConnectionFactory {\n\t// Return the port this server is listening on.\n\tint getPort();\n\t// Return the SocketAddress that the underlying ServerSocket is bound to.\n\tSocketAddress getServerSocketAddress();\n}", "des": "Connection factories that act as TCP servers, listening for incoming connections."}
{"index": 6580, "code": "public interface TcpSocketFactorySupport {\n\t// Supplies the ServerSocketFactory to be used to create new ServerSockets.\n\tServerSocketFactory getServerSocketFactory();\n\t// Supplies the SocketFactory to be used to create new Sockets.\n\tSocketFactory getSocketFactory();\n}", "des": "Strategy interface for supplying Socket Factories."}
{"index": 6581, "code": "public interface TcpSocketSupport {\n\t// Performs any further modifications to the server socket after the connection factory has created the socket and set any configured attributes, before invoking ServerSocket.accept().\n\tvoid postProcessServerSocket(ServerSocket serverSocket);\n\t// Performs any further modifications to the Socket after the socket has been created by a client, or accepted by a server, and after any configured atributes have been set.\n\tvoid postProcessSocket(Socket socket);\n}", "des": "Strategy interface for modifying sockets."}
{"index": 6582, "code": "public enum Database extends Enum<Database> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic Database valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic Database[] values();\n}", "des": "Enumeration for common database platforms."}
{"index": 6583, "code": "public class HibernateJdbcException extends org.springframework.dao.UncategorizedDataAccessException {\n\t// Return the SQL that led to the problem.\n\tString getSql();\n\t// Return the underlying SQLException.\n\tSQLException getSQLException();\n}", "des": "Hibernate-specific subclass of UncategorizedDataAccessException, for JDBC exceptions that Hibernate wrapped."}
{"index": 6584, "code": "public class ObjectOptimisticLockingFailureException extends org.springframework.dao.OptimisticLockingFailureException {\n\t// Return the identifier of the object for which the locking failed.\n\tObject getIdentifier();\n\t// Return the persistent class of the object for which the locking failed.\n\tClass<?> getPersistentClass();\n\t// Return the name of the persistent class of the object for which the locking failed.\n\tString getPersistentClassName();\n}", "des": "Exception thrown on an optimistic locking violation for a mapped object."}
{"index": 6585, "code": "public class ObjectRetrievalFailureException extends org.springframework.dao.DataRetrievalFailureException {\n\t// Return the identifier of the object that was not found.\n\tObject getIdentifier();\n\t// Return the persistent class of the object that was not found.\n\tClass<?> getPersistentClass();\n\t// Return the name of the persistent class of the object that was not found.\n\tString getPersistentClassName();\n}", "des": "Exception thrown if a mapped object could not be retrieved via its identifier."}
{"index": 6586, "code": "public interface PersistenceUnitManager {\n\t// Obtain the default PersistenceUnitInfo from this manager.\n\tPersistenceUnitInfo obtainDefaultPersistenceUnitInfo();\n\t// Obtain the specified PersistenceUnitInfo from this manager.\n\tPersistenceUnitInfo obtainPersistenceUnitInfo(String persistenceUnitName);\n}", "des": "Interface that defines an abstraction for finding and managing JPA PersistenceUnitInfos."}
{"index": 6587, "code": "public interface SmartPersistenceUnitInfo extends PersistenceUnitInfo {\n\t// Return a list of managed Java packages, to be introspected by the persistence provider.\n\tList<String> getManagedPackages();\n\t// Set the persistence provider's own package name, for exclusion from class transformation.\n\tvoid setPersistenceProviderPackageName(String persistenceProviderPackageName);\n}", "des": "Extension of the standard JPA PersistenceUnitInfo interface, for advanced collaboration between Spring's LocalContainerEntityManagerFactoryBean and PersistenceUnitManager implementations."}
{"index": 6588, "code": "public class Namespace extends Object {\n\t// Returns the QName for the given localName.\n\tgroovy.namespace.QName get(String localName);\n\t// Returns the prefix mapped to this namespace\n\tString getPrefix();\n\t// Returns the URI of this namespace\n\tString getUri();\n}", "des": "A simple helper class which acts as a factory of QName instances."}
{"index": 6589, "code": "public class XmlExtensions extends Object {\n\t// Makes NodeList iterable by returning a read-only Iterator which traverses over each Node.\n\tstatic Iterator<Node> iterator(NodeList nodeList);\n\t// Transforms the element to its text equivalent.\n\tstatic String serialize(Element element);\n}", "des": "This class defines all the new XML-related groovy methods which enhance the normal JDK XML classes when inside the Groovy environment."}
{"index": 6590, "code": "public abstract class ArrayUtils extends Object {\n\t// Create a new empty array with the given number of dimensions.\n\tstatic Class<?> getArrayClass(Class<?> componentType, int dimensions);\n\t// Determine the number of dimensions for an arrayClass.\n\tstatic int getDimensionDepth(Class<?> arrayClass);\n\t// Determine the number of dimensions for an array object.\n\tstatic int getDimensionDepth(Object value);\n}", "des": "Utilities for array interaction."}
{"index": 6591, "code": "public final class BindTargetBinder extends Object {\n\t// Bind a Parameter by index.\n\tvoid bind(int index, Parameter parameter);\n\t// Bind a Parameter by name.\n\tvoid bind(String name, Parameter parameter);\n}", "des": "Utility to bind Parameter to a BindTarget."}
{"index": 6592, "code": "public class H2Dialect extends H2Dialect implements R2dbcDialect {\n\tArrayColumns getArraySupport();\n\t// Returns the BindMarkersFactory used by this dialect.\n\tBindMarkersFactory getBindMarkersFactory();\n\t// Render a SqlIdentifier in a way suitable for registering it as a generated key with a statement through Statement#returnGeneratedValues.\n\tString renderForGeneratedValues(SqlIdentifier identifier);\n}", "des": "R2DBC dialect for H2."}
{"index": 6593, "code": "@WritingConverter public static enum MySqlDialect.BooleanToByteConverter extends Enum<MySqlDialect.BooleanToByteConverter> implements Converter<Boolean,Byte> {\n\tByte convert(Boolean s);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MySqlDialect.BooleanToByteConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MySqlDialect.BooleanToByteConverter[] values();\n}", "des": "Simple singleton to convert Booleans to their Byte representation."}
{"index": 6594, "code": "@ReadingConverter public static enum MySqlDialect.ByteToBooleanConverter extends Enum<MySqlDialect.ByteToBooleanConverter> implements Converter<Byte,Boolean> {\n\tBoolean convert(Byte s);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic MySqlDialect.ByteToBooleanConverter valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic MySqlDialect.ByteToBooleanConverter[] values();\n}", "des": "Simple singleton to convert Bytes to their Boolean representation."}
{"index": 6595, "code": "public class PostgresDialect extends PostgresDialect implements R2dbcDialect {\n\tArrayColumns getArraySupport();\n\t// Returns the BindMarkersFactory used by this dialect.\n\tBindMarkersFactory getBindMarkersFactory();\n\t// Return a collection of converters for this dialect.\n\tCollection<Object> getConverters();\n\t// Return a collection of types that are natively supported by this database/driver.\n\tCollection<? extends Class<?>> getSimpleTypes();\n}", "des": "An SQL dialect for Postgres."}
{"index": 6596, "code": "public class R2dbcCustomConversions extends CustomConversions {\n\t// Create a new R2dbcCustomConversions from the given R2dbcDialect and converters.\n\tstatic R2dbcCustomConversions of(R2dbcDialect dialect, Object... converters);\n\t// Create a new R2dbcCustomConversions from the given R2dbcDialect and converters.\n\tstatic R2dbcCustomConversions of(R2dbcDialect dialect, Collection<?> converters);\n}", "des": "Value object to capture custom conversion."}
{"index": 6597, "code": "public static interface ReactiveDeleteOperation.DeleteWithTable extends ReactiveDeleteOperation.TerminatingDelete {\n\t// Explicitly set the name of the table on which to perform the delete.\n\tdefault ReactiveDeleteOperation.DeleteWithQuery from(String table);\n\t// Explicitly set the name of the table on which to perform the delete.\n\tReactiveDeleteOperation.DeleteWithQuery from(SqlIdentifier table);\n}", "des": "Table override (optional)."}
{"index": 6598, "code": "public static interface ReactiveInsertOperation.InsertWithTable<T> extends ReactiveInsertOperation.TerminatingInsert<T> {\n\t// Explicitly set the name of the table.\n\tdefault ReactiveInsertOperation.TerminatingInsert<T> into(String table);\n\t// Explicitly set the name of the table.\n\tReactiveInsertOperation.TerminatingInsert<T> into(SqlIdentifier table);\n}", "des": "Table override (optional)."}
{"index": 6599, "code": "public static interface ReactiveSelectOperation.SelectWithTable<T> extends ReactiveSelectOperation.SelectWithQuery<T> {\n\t// Explicitly set the name of the table on which to perform the query.\n\tdefault ReactiveSelectOperation.SelectWithProjection<T> from(String table);\n\t// Explicitly set the name of the table on which to perform the query.\n\tReactiveSelectOperation.SelectWithProjection<T> from(SqlIdentifier table);\n}", "des": "Table override (optional)."}
{"index": 6600, "code": "public static interface ReactiveSelectOperation.TerminatingSelect<T> {\n\t// Get all matching elements.\n\treactor.core.publisher.Flux<T> all();\n\t// Get the number of matching elements.\n\treactor.core.publisher.Mono<Long> count();\n\t// Check for the presence of matching elements.\n\treactor.core.publisher.Mono<Boolean> exists();\n\t// Get the first result or no result.\n\treactor.core.publisher.Mono<T> first();\n\t// Get exactly zero or one result.\n\treactor.core.publisher.Mono<T> one();\n}", "des": "Trigger SELECT execution by calling one of the terminating methods."}
{"index": 6601, "code": "public static interface ReactiveUpdateOperation.UpdateWithTable extends ReactiveUpdateOperation.TerminatingUpdate {\n\t// Explicitly set the name of the table on which to perform the update.\n\tdefault ReactiveUpdateOperation.UpdateWithQuery inTable(String table);\n\t// Explicitly set the name of the table on which to perform the update.\n\tReactiveUpdateOperation.UpdateWithQuery inTable(SqlIdentifier table);\n}", "des": "Table override (optional)."}
{"index": 6602, "code": "public class SqlServerDialect extends SqlServerDialect implements R2dbcDialect {\n\t// Returns the BindMarkersFactory used by this dialect.\n\tBindMarkersFactory getBindMarkersFactory();\n\t// Return a collection of types that are natively supported by this database/driver.\n\tCollection<? extends Class<?>> getSimpleTypes();\n}", "des": "An SQL dialect for Microsoft SQL Server."}
{"index": 6603, "code": "public static class StatementMapper.DeleteSpec extends Object {\n\t// Create an DELETE specification for table.\n\tstatic StatementMapper.DeleteSpec create(String table);\n\t// Create an DELETE specification for table.\n\tstatic StatementMapper.DeleteSpec create(SqlIdentifier table);\n\tCriteriaDefinition getCriteria();\n\tSqlIdentifier getTable();\n\t// Associate a Criteria with the delete and return a new StatementMapper.DeleteSpec.\n\tStatementMapper.DeleteSpec withCriteria(CriteriaDefinition criteria);\n}", "des": "DELETE specification."}
{"index": 6604, "code": "public class UpdateMapper extends QueryMapper {\n\t// Map a assignments object to BoundAssignments and consider value/NULL Bindings.\n\tBoundAssignments getMappedObject(BindMarkers markers, Map<SqlIdentifier,? extends Object> assignments, Table table, RelationalPersistentEntity<?> entity);\n\t// Map a Update object to BoundAssignments and consider value/NULL Bindings.\n\tBoundAssignments getMappedObject(BindMarkers markers, Update update, Table table, RelationalPersistentEntity<?> entity);\n}", "des": "A subclass of QueryMapper that maps Update to update assignments."}
{"index": 6605, "code": "public abstract class AbstractCandidate extends Object implements Candidate {\n\t// Gets the identifier.\n\tString getId();\n\t// Gets the role.\n\tString getRole();\n\t// Callback method invoked when this candidate is elected leader.\n\tabstract void onGranted(Context ctx);\n\t// Callback method invoked when this candidate is no longer leader.\n\tabstract void onRevoked(Context ctx);\n}", "des": "Base implementation of a Candidate."}
{"index": 6606, "code": "public abstract class AbstractFetchLimitingMessageSource<T> extends AbstractMessageSource<T> implements MessageSourceManagement {\n\t// Subclasses must implement this method.\n\tprotected Object doReceive();\n\t// Subclasses must implement this method.\n\tprotected abstract Object doReceive(int maxFetchSizeToReceive);\n\t// Return the max fetch size.\n\tint getMaxFetchSize();\n\t// Set the maximum number of objects the source should fetch if it is necessary to fetch objects.\n\tvoid setMaxFetchSize(int maxFetchSize);\n}", "des": "A message source that can limit the number of remote objects it fetches."}
{"index": 6607, "code": "@FunctionalInterface public static interface AbstractHeaderMapper.HeaderMatcher {\n\t// Return true if this match should be explicitly excluded from the mapping.\n\tdefault boolean isNegated();\n\t// Specify if the given headerName matches.\n\tboolean matchHeader(String headerName);\n}", "des": "Strategy interface to determine if a given header name matches."}
{"index": 6608, "code": "protected static class AbstractHeaderMapper.SinglePatternBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher {\n\t// Return true if this match should be explicitly excluded from the mapping.\n\tboolean isNegated();\n\t// Specify if the given headerName matches.\n\tboolean matchHeader(String headerName);\n}", "des": "A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches the specified simple pattern."}
{"index": 6609, "code": "public abstract class AbstractLeaderEvent extends org.springframework.context.ApplicationEvent {\n\t// Get the Context associated with this event.\n\tContext getContext();\n\t// Get the role of the leader.\n\tString getRole();\n}", "des": "Base ApplicationEvent class for leader based events."}
{"index": 6610, "code": "protected static interface AbstractRequestHandlerAdvice.ExecutionCallback {\n\t// Call this when it is necessary to clone the invocation before calling proceed() - such as when the invocation might be called multiple times - for example in a retry advice.\n\tObject cloneAndExecute();\n\t// Call this for a normal invocation.proceed().\n\tObject execute();\n}", "des": "Called by subclasses in doInvoke() to proceed() the invocation."}
{"index": 6611, "code": "public interface BytesMessageMapper extends InboundMessageMapper<byte[]>, OutboundMessageMapper<byte[]> {\n\t// Convert a provided object to the Message.\n\tdefault org.springframework.messaging.Message<?> toMessage(byte[] object);\n\t// Convert a provided object to the Message and supply with headers if necessary and provided.\n\torg.springframework.messaging.Message<?> toMessage(byte[] bytes, Map<String,Object> headers);\n}", "des": "An OutboundMessageMapper and InboundMessageMapper that maps to/from byte[]."}
{"index": 6612, "code": "public interface Candidate {\n\t// Gets the identifier.\n\tString getId();\n\t// Gets the role.\n\tString getRole();\n\t// Callback method invoked when this candidate is elected leader.\n\tvoid onGranted(Context ctx);\n\t// Callback method invoked when this candidate is no longer leader.\n\tvoid onRevoked(Context ctx);\n}", "des": "Interface that defines the contract for candidates to participate in a leader election."}
{"index": 6613, "code": "public class ClaimCheckInTransformer extends AbstractTransformer implements IntegrationPattern {\n\t// Subclasses must implement this method to provide the transformation logic.\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n}", "des": "Transformer that stores a Message and returns a new Message whose payload is the id of the stored Message."}
{"index": 6614, "code": "public interface Codec {\n\t// Decode an object of a given type.\n\t<T> T decode(byte[] bytes, Class<T> type);\n\t// Decode an object of a given type.\n\t<T> T decode(InputStream inputStream, Class<T> type);\n\t// Encode an object to a byte array.\n\tbyte[] encode(Object object);\n\t// Encode (encode) an object to an OutputStream.\n\tvoid encode(Object object, OutputStream outputStream);\n}", "des": "Interface for classes that perform both encode (serialize) and decode (deserialize) on multiple classes."}
{"index": 6615, "code": "public class CompositeCodec extends Object implements Codec {\n\t// Decode an object of a given type.\n\t<T> T decode(byte[] bytes, Class<T> type);\n\t// Decode an object of a given type.\n\t<T> T decode(InputStream inputStream, Class<T> type);\n\t// Encode an object to a byte array.\n\tbyte[] encode(Object object);\n\t// Encode (encode) an object to an OutputStream.\n\tvoid encode(Object object, OutputStream outputStream);\n}", "des": "A Codec that can delegate to one out of many Codecs, each mapped to a class."}
{"index": 6616, "code": "public class CompositeExecutor extends Object implements Executor {\n\t// Execute using the primary executor.\n\tvoid execute(Runnable task);\n\t// Execute using the secondary executor.\n\tvoid execute2(Runnable task);\n}", "des": "An Executor that encapsulates two underlying executors."}
{"index": 6617, "code": "public class CompoundTrigger extends Object implements org.springframework.scheduling.Trigger {\n\tInstant nextExecution(org.springframework.scheduling.TriggerContext triggerContext);\n\t// Set the override trigger; set to null to revert to using the primary trigger.\n\tvoid setOverride(org.springframework.scheduling.Trigger override);\n\t// Set the primary trigger.\n\tfinal void setPrimary(org.springframework.scheduling.Trigger primary);\n}", "des": "A Trigger that delegates the Trigger.nextExecutionTime(TriggerContext) to one of two Triggers."}
{"index": 6618, "code": "public interface ConcurrentMetadataStore extends MetadataStore {\n\t// Atomically insert the key into the store.\n\tString putIfAbsent(String key, String value);\n\t// Atomically replace the value for the key in the store if the old value matches the oldValue argument.\n\tboolean replace(String key, String oldValue, String newValue);\n}", "des": "Supports atomic updates to values in the store."}
{"index": 6619, "code": "@FunctionalInterface public interface Context {\n\t// Get the role for the Candidate.\n\tdefault String getRole();\n\t// Checks if the Candidate this context was passed to is the leader.\n\tboolean isLeader();\n\t// Causes the Candidate this context was passed to to relinquish leadership.\n\tdefault void yield();\n}", "des": "Interface that defines the context for candidate leadership."}
{"index": 6620, "code": "public class DecodingTransformer<T> extends AbstractTransformer {\n\t// Subclasses must implement this method to provide the transformation logic.\n\tprotected T doTransform(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\tvoid setEvaluationContext(org.springframework.expression.spel.support.StandardEvaluationContext evaluationContext);\n}", "des": "AbstractPayloadTransformer that delegates to a codec to decode the payload from a byte[]."}
{"index": 6621, "code": "public class DefaultCandidate extends AbstractCandidate {\n\t// Callback method invoked when this candidate is elected leader.\n\tvoid onGranted(Context ctx);\n\t// Callback method invoked when this candidate is no longer leader.\n\tvoid onRevoked(Context ctx);\n\t// Voluntarily yield leadership if held.\n\tvoid yieldLeadership();\n}", "des": "Simple Candidate for leadership."}
{"index": 6622, "code": "public class DefaultMessageSplitter extends AbstractMessageSplitter {\n\t// Set delimiters to use for tokenizing String values.\n\tvoid setDelimiters(String delimiters);\n\t// Subclasses must override this method to split the received Message.\n\tprotected final Object splitMessage(org.springframework.messaging.Message<?> message);\n}", "des": "The default Message Splitter implementation."}
{"index": 6623, "code": "public class DirectChannel extends AbstractSubscribableChannel {\n\tprotected UnicastingDispatcher getDispatcher();\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\t// Specify whether the channel's dispatcher should have failover enabled.\n\tvoid setFailover(boolean failover);\n\t// Specify the maximum number of subscribers supported by the channel's dispatcher.\n\tvoid setMaxSubscribers(int maxSubscribers);\n}", "des": "A channel that invokes a single subscriber for each sent Message."}
{"index": 6624, "code": "public class EnricherParser extends AbstractConsumerEndpointParser {\n\t// Parse the MessageHandler.\n\tprotected org.springframework.beans.factory.support.BeanDefinitionBuilder parseHandler(Element element, org.springframework.beans.factory.xml.ParserContext parserContext);\n\t// Override to allow 'reply-channel' within a chain, for components where it makes sense (e.g.\n\tprotected boolean replyChannelInChainAllowed(Element element);\n}", "des": "Parser for the 'enricher' element."}
{"index": 6625, "code": "public class ExecutorChannel extends AbstractExecutorChannel {\n\tprotected UnicastingDispatcher getDispatcher();\n\t// Subclasses may implement this for initialization logic.\n\tfinal void onInit();\n\t// Specify whether the channel's dispatcher should have failover enabled.\n\tvoid setFailover(boolean failover);\n}", "des": "An implementation of MessageChannel that delegates to an instance of UnicastingDispatcher which in turn delegates all dispatching invocations to an Executor."}
{"index": 6626, "code": "public class ExpressionEvaluatingMessageHandler extends AbstractMessageHandler {\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\tvoid setComponentType(String componentType);\n}", "des": "A MessageHandler that evaluates the provided Expression expecting a void return."}
{"index": 6627, "code": "public class ExpressionEvaluatingMessageListProcessor extends AbstractExpressionEvaluator implements MessageListProcessor {\n\t// Processes the Message by evaluating the expression with that Message as the root object.\n\tObject process(Collection<? extends org.springframework.messaging.Message<?>> messages);\n\t// Set the result type expected from evaluation of the expression.\n\tvoid setExpectedType(Class<?> expectedType);\n}", "des": "A base class for aggregators that evaluates a SpEL expression with the message list as the root object within the evaluation context."}
{"index": 6628, "code": "public class ExpressionEvaluatingRouter extends AbstractMappingMessageRouter {\n\t// Subclasses must implement this method to return the channel keys.\n\tprotected List<Object> getChannelKeys(org.springframework.messaging.Message<?> message);\n\tboolean isRunning();\n\t// Subclasses may implement this for initialization logic.\n\tfinal void onInit();\n\tvoid start();\n\tvoid stop();\n}", "des": "A Message Router implementation that evaluates the specified SpEL expression."}
{"index": 6629, "code": "public interface HeaderChannelRegistry {\n\t// Converts the channel name back to a MessageChannel (if it is registered).\n\torg.springframework.messaging.MessageChannel channelNameToChannel(String name);\n\t// Converts the channel to a name (String).\n\tObject channelToChannelName(Object channel);\n\t// Converts the channel to a name (String).\n\tObject channelToChannelName(Object channel, long timeToLive);\n\t// Cancel the scheduled reap task and run immediately; then reschedule.\n\tvoid runReaper();\n\tint size();\n}", "des": "Implementations convert a channel to a name, retaining a reference to the channel keyed by the name."}
{"index": 6630, "code": "public interface HeaderPropagationAware {\n\t// Add headers that will NOT be copied from the inbound message if the handler is configured to copy headers, instead of overwriting the existing set.\n\tvoid addNotPropagatedHeaders(String... headers);\n\t// Get the header names this handler doesn't propagate.\n\tCollection<String> getNotPropagatedHeaders();\n\t// Set headers that will NOT be copied from the inbound message if the handler is configured to copy headers.\n\tvoid setNotPropagatedHeaders(String... headers);\n}", "des": "MessageHandlers implementing this interface can propagate headers from an input message to an output message."}
{"index": 6631, "code": "@FunctionalInterface public interface InboundMessageMapper<T> {\n\t// Convert a provided object to the Message.\n\tdefault org.springframework.messaging.Message<?> toMessage(T object);\n\t// Convert a provided object to the Message and supply with headers if necessary and provided.\n\torg.springframework.messaging.Message<?> toMessage(T object, Map<String,Object> headers);\n}", "des": "Strategy interface for mapping from an Object to aMessage."}
{"index": 6632, "code": "public interface IntegrationConsumer extends NamedComponent {\n\t// Return the consumer's handler.\n\torg.springframework.messaging.MessageHandler getHandler();\n\t// Return the input channel.\n\torg.springframework.messaging.MessageChannel getInputChannel();\n\t// Return the output channel (may be null).\n\torg.springframework.messaging.MessageChannel getOutputChannel();\n}", "des": "Message consumers implement this interface, the message handler within a consumer may or may not emit output messages."}
{"index": 6633, "code": "public enum IntegrationObservation extends Enum<IntegrationObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationObservation valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationObservation[] values();\n}", "des": "The ObservationDocumentation implementation for Spring Integration infrastructure."}
{"index": 6634, "code": "public static enum IntegrationObservation.GatewayTags extends Enum<IntegrationObservation.GatewayTags> implements io.micrometer.common.docs.KeyName {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationObservation.GatewayTags valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationObservation.GatewayTags[] values();\n}", "des": "Key names for message handler observations."}
{"index": 6635, "code": "public static enum IntegrationObservation.HandlerTags extends Enum<IntegrationObservation.HandlerTags> implements io.micrometer.common.docs.KeyName {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationObservation.HandlerTags valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationObservation.HandlerTags[] values();\n}", "des": "Key names for message handler observations."}
{"index": 6636, "code": "public static enum IntegrationObservation.ProducerTags extends Enum<IntegrationObservation.ProducerTags> implements io.micrometer.common.docs.KeyName {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationObservation.ProducerTags valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationObservation.ProducerTags[] values();\n}", "des": "Key names for message producer observations."}
{"index": 6637, "code": "public enum IntegrationPatternType extends Enum<IntegrationPatternType> {\n\tIntegrationPatternType.IntegrationPatternCategory getPatternCategory();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationPatternType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationPatternType[] values();\n}", "des": "The Enterprise Integration Pattern types."}
{"index": 6638, "code": "public static enum IntegrationPatternType.IntegrationPatternCategory extends Enum<IntegrationPatternType.IntegrationPatternCategory> {\n\tSet<IntegrationPatternType> getPatternTypes();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic IntegrationPatternType.IntegrationPatternCategory valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic IntegrationPatternType.IntegrationPatternCategory[] values();\n}", "des": "The Enterprise Integration Pattern categories."}
{"index": 6639, "code": "public class IntegrationResourceHolder extends Object implements org.springframework.transaction.support.ResourceHolder {\n\t// Add attribute to this ResourceHolder instance.\n\tvoid addAttribute(String key, Object value);\n\t// Will return an immutable Map of current attributes.\n\tMap<String,Object> getAttributes();\n\torg.springframework.messaging.Message<?> getMessage();\n\tboolean isVoid();\n\tvoid reset();\n\tvoid setMessage(org.springframework.messaging.Message<?> message);\n\tvoid unbound();\n}", "des": "An implementation of the ResourceHolder which holds an instance of the current Message and the synchronization resource."}
{"index": 6640, "code": "public final class JsonHeaders extends Object {\n\t// Build a ResolvableType for provided class components.\n\tstatic org.springframework.core.ResolvableType buildResolvableType(Class<?> targetClass, Class<?> contentClass, Class<?> keyClass);\n\t// Build a ResolvableType for provided class components.\n\tstatic org.springframework.core.ResolvableType buildResolvableType(ClassLoader classLoader, Object targetClassValue, Object contentClassValue, Object keyClassValue);\n}", "des": "Pre-defined names and prefixes to be used for setting and/or retrieving JSON entries from/to Message Headers and other adapter, e.g."}
{"index": 6641, "code": "public final class JsonObjectMapperProvider extends Object {\n\t// Returns true if a supported JSON implementation is on the class path.\n\tstatic boolean jsonAvailable();\n\t// Return an object mapper if available.\n\tstatic JsonObjectMapper<?,?> newInstance();\n}", "des": "Simple factory to provide JsonObjectMapper instances based on jackson-databind lib in the classpath."}
{"index": 6642, "code": "public interface LeaderEventPublisher {\n\t// Publish a failure to acquire event.\n\tvoid publishOnFailedToAcquire(Object source, Context context, String role);\n\t// Publish a granted event.\n\tvoid publishOnGranted(Object source, Context context, String role);\n\t// Publish a revoked event.\n\tvoid publishOnRevoked(Object source, Context context, String role);\n}", "des": "Interface for publishing leader based application events."}
{"index": 6643, "code": "public interface ListenableMetadataStore extends ConcurrentMetadataStore {\n\t// Register a listener with the metadata store.\n\tvoid addListener(MetadataStoreListener callback);\n\t// Unregister a listener.\n\tvoid removeListener(MetadataStoreListener callback);\n}", "des": "ConcurrentMetadataStore with the ability of registering MetadataStoreListener callbacks, to be invoked when changes occur in the metadata store."}
{"index": 6644, "code": "public class MapToObjectTransformer extends AbstractPayloadTransformer<Map<?,?>,Object> {\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Subclasses may implement this for initialization logic.\n\tprotected void onInit();\n\tprotected Object transformPayload(Map<?,?> payload);\n}", "des": "Will transform Map to an instance of Object."}
{"index": 6645, "code": "public record MessageChannelReference(String name) extends Record implements org.springframework.messaging.MessageChannel {\n\t// Indicates whether some other object is \"equal to\" this one.\n\tfinal boolean equals(Object o);\n\t// Returns the value of the name record component.\n\tString name();\n\tboolean send(org.springframework.messaging.Message<?> message);\n\tboolean send(org.springframework.messaging.Message<?> message, long timeout);\n}", "des": "An \"artificial\" MessageChannel implementation which will be unwrapped to the MessageChannel bean on the bean registration phase."}
{"index": 6646, "code": "public interface MessageDispatcher {\n\t// Add a message handler.\n\tboolean addHandler(org.springframework.messaging.MessageHandler handler);\n\t// Dispatch the message.\n\tboolean dispatch(org.springframework.messaging.Message<?> message);\n\t// Return the current handler count.\n\tint getHandlerCount();\n\t// Remove a message handler.\n\tboolean removeHandler(org.springframework.messaging.MessageHandler handler);\n}", "des": "Strategy interface for dispatching messages to handlers."}
{"index": 6647, "code": "public interface MessageProducer {\n\t// Return the the output channel.\n\torg.springframework.messaging.MessageChannel getOutputChannel();\n\t// Specify the MessageChannel to which produced Messages should be sent.\n\tvoid setOutputChannel(org.springframework.messaging.MessageChannel outputChannel);\n\t// Specify the bean name of the MessageChannel to which produced Messages should be sent.\n\tdefault void setOutputChannelName(String outputChannel);\n}", "des": "Base interface for any component that is capable of sending messages to a MessageChannel."}
{"index": 6648, "code": "@FunctionalInterface public interface MessageSource<T> extends IntegrationPattern {\n\t// Return a pattern type this component implements.\n\tdefault IntegrationPatternType getIntegrationPatternType();\n\t// Retrieve the next available message from this source.\n\torg.springframework.messaging.Message<T> receive();\n}", "des": "Base interface for any source of Messages that can be polled."}
{"index": 6649, "code": "@IntegrationManagedResource public interface MessageSourceManagement {\n\t// Return the max fetch size.\n\tint getMaxFetchSize();\n\t// Set the maximum number of objects the source should fetch if it is necessary to fetch objects.\n\tvoid setMaxFetchSize(int maxFetchSize);\n}", "des": "Message sources implementing this interface have additional properties that can be set or examined using JMX."}
{"index": 6650, "code": "@ManagedResource public interface MetadataStore {\n\t// Reads a value for the given key from this MetadataStore.\n\tString get(String key);\n\t// Writes a key value pair to this MetadataStore.\n\tvoid put(String key, String value);\n\t// Remove a value for the given key from this MetadataStore.\n\tString remove(String key);\n}", "des": "Strategy interface for storing metadata from certain adapters to avoid duplicate delivery of messages, for example."}
{"index": 6651, "code": "public interface MetadataStoreListener {\n\t// Invoked when a key is added to the store.\n\tvoid onAdd(String key, String value);\n\t// Invoked when a key is removed from the store.\n\tvoid onRemove(String key, String oldValue);\n\t// Invoked when a key is updated into the store.\n\tvoid onUpdate(String key, String newValue);\n}", "des": "A callback to be invoked whenever a value changes in the data store."}
{"index": 6652, "code": "public abstract class MetadataStoreListenerAdapter extends Object implements MetadataStoreListener {\n\t// Invoked when a key is added to the store.\n\tvoid onAdd(String key, String value);\n\t// Invoked when a key is removed from the store.\n\tvoid onRemove(String key, String oldValue);\n\t// Invoked when a key is updated into the store.\n\tvoid onUpdate(String key, String newValue);\n}", "des": "Base implementation for a MetadataStoreListener."}
{"index": 6653, "code": "public class MetadataStoreSelector extends Object implements MessageSelector {\n\tboolean accept(org.springframework.messaging.Message<?> message);\n\t// Fluent version of setCompareValues(BiPredicate).\n\tMetadataStoreSelector compareValues(BiPredicate<String,String> compareValues);\n\t// Set a BiPredicate to compare old and new values in the metadata store for the key.\n\tvoid setCompareValues(BiPredicate<String,String> compareValues);\n}", "des": "The MessageSelector implementation using a ConcurrentMetadataStore and MessageProcessor."}
{"index": 6654, "code": "public class MethodInvokingRouter extends AbstractMappingMessageRouter {\n\t// Subclasses must implement this method to return the channel keys.\n\tprotected List<Object> getChannelKeys(org.springframework.messaging.Message<?> message);\n\tboolean isRunning();\n\t// Subclasses may implement this for initialization logic.\n\tfinal void onInit();\n\tvoid start();\n\tvoid stop();\n}", "des": "A Message Router that invokes the specified method on the given object."}
{"index": 6655, "code": "public static interface MetricsCaptor.CounterBuilder {\n\t// Build the counter.\n\tCounterFacade build();\n\t// Add the description.\n\tMetricsCaptor.CounterBuilder description(String desc);\n\t// Add a tag.\n\tMetricsCaptor.CounterBuilder tag(String key, String value);\n}", "des": "A builder for a counter."}
{"index": 6656, "code": "public static interface MetricsCaptor.GaugeBuilder {\n\t// Build the gauge.\n\tGaugeFacade build();\n\t// Add the description.\n\tMetricsCaptor.GaugeBuilder description(String desc);\n\t// Add a tag.\n\tMetricsCaptor.GaugeBuilder tag(String key, String value);\n}", "des": "A builder for a gauge."}
{"index": 6657, "code": "public static interface MetricsCaptor.TimerBuilder {\n\t// Build the timer.\n\tTimerFacade build();\n\t// Add the description.\n\tMetricsCaptor.TimerBuilder description(String desc);\n\t// Add a tag.\n\tMetricsCaptor.TimerBuilder tag(String key, String value);\n}", "des": "A builder for a timer."}
{"index": 6658, "code": "public class ObjectToJsonTransformer extends AbstractTransformer {\n\t// Subclasses must implement this method to provide the transformation logic.\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message);\n\t// Subclasses may implement this method to provide component type information.\n\tString getComponentType();\n\t// Set the content-type header value.\n\tvoid setContentType(String contentType);\n}", "des": "Transformer implementation that converts a payload instance into a JSON string representation."}
{"index": 6659, "code": "public interface OrderlyShutdownCapable {\n\t// Called after normal shutdown of schedulers, executors etc, and after the shutdown delay has elapsed, but before any forced shutdown of any remaining active scheduler/executor threads.Can optionally return the number of active messages still in process.\n\tint afterShutdown();\n\t// Called before shutdown begins.\n\tint beforeShutdown();\n}", "des": "Interface for components that wish to be considered for an orderly shutdown using management interfaces."}
{"index": 6660, "code": "public final class PatternMatchUtils extends Object {\n\t// Pattern match against the supplied patterns; also supports negated ('!') patterns.\n\tstatic Boolean smartMatch(String str, String... patterns);\n\t// Pattern match against the supplied patterns ignoring case; also supports negated ('!') patterns.\n\tstatic Boolean smartMatchIgnoreCase(String str, String... patterns);\n}", "des": "Utility methods for pattern matching."}
{"index": 6661, "code": "public interface Pausable extends ManageableLifecycle {\n\t// Check if the endpoint is paused.\n\tdefault boolean isPaused();\n\t// Pause the endpoint.\n\tvoid pause();\n\t// Resume the endpoint if paused.\n\tvoid resume();\n}", "des": "Endpoints implementing this interface can be paused/resumed."}
{"index": 6662, "code": "public class PriorityChannel extends QueueChannel {\n\t// Subclasses must implement this method.\n\tprotected org.springframework.messaging.Message<?> doReceive(long timeout);\n\t// Subclasses must implement this method.\n\tprotected boolean doSend(org.springframework.messaging.Message<?> message, long timeout);\n\t// Obtain the remaining capacity of this channel.\n\tint getRemainingCapacity();\n}", "des": "A message channel that prioritizes messages based on a Comparator."}
{"index": 6663, "code": "public interface QueueChannelOperations {\n\t// Remove all Messages from this channel.\n\tList<org.springframework.messaging.Message<?>> clear();\n\t// Obtain the current number of queued Messages in this channel.\n\tint getQueueSize();\n\t// Obtain the remaining capacity of this channel.\n\tint getRemainingCapacity();\n\t// Remove any Messages that are not accepted by the provided selector.\n\tList<org.springframework.messaging.Message<?>> purge(MessageSelector selector);\n}", "des": "Operations available on a channel that has queuing semantics."}
{"index": 6664, "code": "public class ReactiveMessageSourceProducer extends MessageProducerSupport {\n\t// Take no action by default.\n\tprotected void doStart();\n\t// Configure a Duration to delay next pull request when the previous one was empty.\n\tvoid setDelayWhenEmpty(Duration delayWhenEmpty);\n}", "des": "The MessageProducerSupport to adapt a provided MessageSource into a Flux and let it be subscribed in the MessageProducerSupport.subscribeToPublisher(org.reactivestreams.Publisher<? extends org.springframework.messaging.Message<?>>)."}
{"index": 6665, "code": "@FunctionalInterface public interface ReceiveMessageAdvice extends org.aopalliance.intercept.MethodInterceptor {\n\t// Subclasses can take actions based on the result of the Joinpoint.proceed(); e.g.\n\torg.springframework.messaging.Message<?> afterReceive(org.springframework.messaging.Message<?> result, Object source);\n\t// Subclasses can decide whether to Joinpoint.proceed() or not.\n\tdefault boolean beforeReceive(Object source);\n\tdefault Object invoke(org.aopalliance.intercept.MethodInvocation invocation);\n}", "des": "An AOP advice to perform hooks before and/or after a receive() contract is called."}
{"index": 6666, "code": "public class ReplyProducingMessageHandlerWrapper extends AbstractReplyProducingMessageHandler implements ManageableLifecycle {\n\t// Return a pattern type this component implements.\n\tIntegrationPatternType getIntegrationPatternType();\n\t// Subclasses must implement this method to handle the request Message.\n\tprotected Object handleRequestMessage(org.springframework.messaging.Message<?> requestMessage);\n\tboolean isRunning();\n\tvoid start();\n\tvoid stop();\n}", "des": "The AbstractReplyProducingMessageHandler wrapper around raw MessageHandler for request-reply scenarios, e.g."}
{"index": 6667, "code": "public class SimpleActiveIdleReceiveMessageAdvice extends Object implements ReceiveMessageAdvice {\n\t// Subclasses can take actions based on the result of the Joinpoint.proceed(); e.g.\n\torg.springframework.messaging.Message<?> afterReceive(org.springframework.messaging.Message<?> result, Object source);\n\t// Set the poll period when messages are returned.\n\tvoid setActivePollPeriod(long activePollPeriod);\n\t// Set the poll period when messages are not returned.\n\tvoid setIdlePollPeriod(long idlePollPeriod);\n}", "des": "A simple advice that polls at one rate when messages exist and another when there are no messages."}
{"index": 6668, "code": "@ManagedResource public class SimplePollSkipStrategy extends Object implements PollSkipStrategy {\n\t// Resume polling at the next Trigger event.\n\tvoid reset();\n\t// Return true if this poll should be skipped.\n\tboolean skipPoll();\n\t// Skip future polls.\n\tvoid skipPolls();\n}", "des": "A simple PollSkipStrategy to be used with a PollSkipAdvice."}
{"index": 6669, "code": "public static interface SimplePool.PoolItemCallback<T> {\n\t// Called by the pool when a new instance is required to populate the pool.\n\tT createForPool();\n\t// Called by the pool when an idle item is retrieved from the pool.\n\tboolean isStale(T item);\n\t// Called by the pool when an item is forcibly removed from the pool - for example when the pool size is reduced.\n\tvoid removedFromPool(T item);\n}", "des": "User of the pool provide an implementation of this interface; called during various pool operations."}
{"index": 6670, "code": "public class SpelPropertyAccessorRegistrar extends Object {\n\t// Add the provided named property accessor.\n\tSpelPropertyAccessorRegistrar add(String name, org.springframework.expression.PropertyAccessor propertyAccessor);\n\t// Add the provided property accessors.\n\tSpelPropertyAccessorRegistrar add(org.springframework.expression.PropertyAccessor... propertyAccessors);\n\t// Return the registered accessors.\n\tMap<String,org.springframework.expression.PropertyAccessor> getPropertyAccessors();\n}", "des": "Utility class that keeps track of a Set of SpEL PropertyAccessors in order to register them with the \"integrationEvaluationContext\" upon initialization."}
{"index": 6671, "code": "public final class UpperBound extends Object {\n\tint availablePermits();\n\t// Releases one lock on the underlying semaphore.\n\tvoid release();\n\t// Releases several locks on the underlying semaphore.\n\tvoid release(int permits);\n\t// Acquires a permit from the underlying semaphore if this UpperBound is bounded and returns true if it succeeds within the given timeout.\n\tboolean tryAcquire(long timeoutInMilliseconds);\n}", "des": "Thin wrapper around a Semaphore that allows to create a potentially unlimited upper bound to by used in buffers of messages (e.g."}
{"index": 6672, "code": "public class UUIDConverter extends Object implements org.springframework.core.convert.converter.Converter<Object,UUID> {\n\t// Convert the input to a UUID using the convenience method getUUID(Object).\n\tUUID convert(Object source);\n\t// Convenient utility to convert an object to a UUID.\n\tstatic UUID getUUID(Object input);\n}", "des": "Utility to help generate UUID instances from generic objects."}
{"index": 6673, "code": "public static enum AmqpInboundChannelAdapter.BatchMode extends Enum<AmqpInboundChannelAdapter.BatchMode> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AmqpInboundChannelAdapter.BatchMode valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AmqpInboundChannelAdapter.BatchMode[] values();\n}", "des": "Defines the payload type when the listener container is configured with consumerBatchEnabled."}
{"index": 6674, "code": "public abstract class AmqpOutboundEndpointSpec<S extends AmqpOutboundEndpointSpec<S>> extends AmqpBaseOutboundEndpointSpec<S,AmqpOutboundEndpoint> {\n\t// Provide the header names that should be mapped to a response from a MessageHeaders.\n\tS mappedReplyHeaders(String... headers);\n\t// Wait for a publisher confirm.\n\tS waitForConfirm(boolean waitForConfirm);\n}", "des": "Base spec for outbound AMQP endpoints."}
{"index": 6675, "code": "public class ManualAckListenerExecutionFailedException extends org.springframework.amqp.rabbit.support.ListenerExecutionFailedException {\n\t// Return the channel.\n\tcom.rabbitmq.client.Channel getChannel();\n\t// Return the delivery tag for the last failed message.\n\tlong getDeliveryTag();\n}", "des": "A ListenerExecutionFailedException enhanced with the channel and delivery tag."}
{"index": 6676, "code": "public static enum AbstractPackagerMojo.LayoutType extends Enum<AbstractPackagerMojo.LayoutType> {\n\torg.springframework.boot.loader.tools.Layout layout();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic AbstractPackagerMojo.LayoutType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic AbstractPackagerMojo.LayoutType[] values();\n}", "des": "Archive layout types."}
{"index": 6677, "code": "public abstract class BuildImageMojo extends AbstractPackagerMojo {\n\tvoid execute();\n\t// Return the type of archive that should be used when building the image.\n\tprotected AbstractPackagerMojo.LayoutType getLayout();\n\t// Return the layout factory that will be used to determine the AbstractPackagerMojo.LayoutType if no explicit layout is set.\n\tprotected org.springframework.boot.loader.tools.LayoutFactory getLayoutFactory();\n}", "des": "Package an application into an OCI image using a buildpack."}
{"index": 6678, "code": "public class Docker extends Object {\n\t// The path to TLS certificate and key files required for TLS communication with the Docker daemon.\n\tString getCertPath();\n\t// The host address of the Docker daemon.\n\tString getHost();\n\t// Whether to use the configured Docker host in the builder container.\n\tboolean isBindHostToBuilder();\n\t// Whether the Docker daemon requires TLS communication.\n\tboolean isTlsVerify();\n}", "des": "Docker configuration options."}
{"index": 6679, "code": "public static class Docker.DockerRegistry extends Object {\n\t// The email address that will be used for user authentication to the registry.\n\tString getEmail();\n\t// The password that will be used for user authentication to the registry.\n\tString getPassword();\n\t// The token that will be used for token authentication to the registry.\n\tString getToken();\n\t// The username that will be used for user authentication to the registry.\n\tString getUsername();\n}", "des": "Encapsulates Docker registry authentication configuration options."}
{"index": 6680, "code": "public class Layers extends Object {\n\t// The location of the layers configuration file.\n\tFile getConfiguration();\n\t// Whether a layers.idx file should be added to the jar.\n\tboolean isEnabled();\n\t// Whether to include the layer tools jar.\n\tboolean isIncludeLayerTools();\n\tvoid setConfiguration(File configuration);\n}", "des": "Layer configuration options."}
{"index": 6681, "code": "public class CommonsXsdSchema extends Object implements XsdSchema {\n\t// Creates a XmlValidator based on the schema.\n\tXmlValidator createValidator();\n\tQName[] getElementNames();\n\t// Returns the wrapped Commons XmlSchema object.\n\torg.apache.ws.commons.schema.XmlSchema getSchema();\n\t// Returns the Source of the schema.\n\tSource getSource();\n\t// Returns the target namespace of this schema.\n\tString getTargetNamespace();\n}", "des": "Implementation of the XsdSchema interface that uses Apache WS-Commons XML Schema."}
{"index": 6682, "code": "public abstract class JaxpVersion extends Object {\n\t// Gets the JAXP version.\n\tstatic int getJaxpVersion();\n\t// Convenience method to determine if the current JAXP version is at least 1.4 (packaged with JDK 1.6).\n\tstatic boolean isAtLeastJaxp14();\n}", "des": "Helper class used to find the current version of JAXP."}
{"index": 6683, "code": "public abstract class SaxUtils extends Object {\n\t// Creates a SAX InputSource from the given resource.\n\tstatic InputSource createInputSource(org.springframework.core.io.Resource resource);\n\t// Retrieves the URL from the given resource as System ID.\n\tstatic String getSystemId(org.springframework.core.io.Resource resource);\n}", "des": "Convenient utility methods for dealing with SAX."}
{"index": 6684, "code": "public abstract class SchemaLoaderUtils extends Object {\n\t// Retrieves the URL from the given resource as System ID.\n\tstatic String getSystemId(org.springframework.core.io.Resource resource);\n\t// Load schema from the given resource.\n\tstatic Schema loadSchema(org.springframework.core.io.Resource[] resources, String schemaLanguage);\n\t// Load schema from the given resource.\n\tstatic Schema loadSchema(org.springframework.core.io.Resource resource, String schemaLanguage);\n}", "des": "Convenient utility methods for loading of Schema objects, performing standard handling of input streams."}
{"index": 6685, "code": "public class StringSource extends StreamSource {\n\t// Returns null.\n\tInputStream getInputStream();\n\tReader getReader();\n\t// Throws UnsupportedOperationException.\n\tvoid setInputStream(InputStream inputStream);\n\t// Throws UnsupportedOperationException.\n\tvoid setReader(Reader reader);\n}", "des": "Convenient subclass of StreamSource that reads from a StringReader."}
{"index": 6686, "code": "public abstract class TraxUtils extends Object {\n\t// Performs the given callback operation on a Result.\n\tstatic void doWithResult(Result result, TraxUtils.ResultCallback callback);\n\t// Performs the given callback operation on a Source.\n\tstatic void doWithSource(Source source, TraxUtils.SourceCallback callback);\n\t// Returns the Document of the given DOMSource.\n\tstatic Document getDocument(DOMSource source);\n}", "des": "Convenient utility methods for dealing with TrAX."}
{"index": 6687, "code": "public interface XmlValidator {\n\t// Validates the given Source, and returns an array of SAXParseExceptions as result.\n\tSAXParseException[] validate(Source source);\n\t// Validates the given Source and ValidationErrorHandler, and returns an array of SAXParseExceptions as result.\n\tSAXParseException[] validate(Source source, ValidationErrorHandler errorHandler);\n}", "des": "Simple processor that validates a given Source."}
{"index": 6688, "code": "public abstract class XmlValidatorFactory extends Object {\n\t// Create a XmlValidator with the given schema resources and schema language type.\n\tstatic XmlValidator createValidator(org.springframework.core.io.Resource[] schemaResources, String schemaLanguage);\n\t// Create a XmlValidator with the given schema resource and schema language type.\n\tstatic XmlValidator createValidator(org.springframework.core.io.Resource schemaResource, String schemaLanguage);\n}", "des": "Factory for XmlValidator objects, being aware of JAXP 1.3 Validators, and JAXP 1.0 parsing capabilities."}
{"index": 6689, "code": "public abstract class XPathExpressionFactory extends Object {\n\t// Create a compiled XPath expression using the given string.\n\tstatic XPathExpression createXPathExpression(String expression);\n\t// Create a compiled XPath expression using the given string and namespaces.\n\tstatic XPathExpression createXPathExpression(String expression, Map<String,String> namespaces);\n}", "des": "Factory for compiled XPathExpressions, being aware of JAXP 1.3+ XPath functionality, and Jaxen."}
{"index": 6690, "code": "public class XPathExpressionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<XPathExpression>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tXPathExpression getObject();\n\tClass<? extends XPathExpression> getObjectType();\n\tboolean isSingleton();\n\t// Sets the XPath expression.\n\tvoid setExpression(String expression);\n\t// Sets the namespaces for the expressions.\n\tvoid setNamespaces(Map<String,String> namespaces);\n}", "des": "Spring FactoryBean for XPathExpression object."}
{"index": 6691, "code": "public interface XsdSchema {\n\t// Creates a XmlValidator based on the schema.\n\tXmlValidator createValidator();\n\t// Returns the Source of the schema.\n\tSource getSource();\n\t// Returns the target namespace of this schema.\n\tString getTargetNamespace();\n}", "des": "Represents an abstraction for XSD schemas."}
{"index": 6692, "code": "public interface XsdSchemaCollection {\n\t// Creates a XmlValidator based on the schemas contained in this collection.\n\tXmlValidator createValidator();\n\t// Returns all schemas contained in this collection.\n\tXsdSchema[] getXsdSchemas();\n}", "des": "Represents an abstraction for a collection of XSD schemas."}
{"index": 6693, "code": "public abstract class AbstractReaderSource extends Object implements ReaderSource {\n\t// Returns true if the source can be restarted (i.e.\n\tboolean canReopenSource();\n\t// Cleans up any cached resources used by getLine().\n\tvoid cleanup();\n\t// Returns a line from the source, or null, if unavailable.\n\tString getLine(int lineNumber, Janitor janitor);\n}", "des": "For ReaderSources that can choose a parent class, a base that provides common functionality."}
{"index": 6694, "code": "public interface AdaptingMetaClass extends MetaClass {\n\t// Returns the MetaClass that this adapter adapts\n\tMetaClass getAdaptee();\n\t// Sets the MetaClass adapted by this MetaClass\n\tvoid setAdaptee(MetaClass metaClass);\n}", "des": "An interface for MetaClass instances that \"adapt\" other MetaClass instances such as a proxy or delegating MetaClass."}
{"index": 6695, "code": "public class ArrayTypeUtils extends Object {\n\t// Calculate the dimension of array\n\tstatic int dimension(Class clazz);\n\t// Calculate the dimension of array\n\tstatic int dimension(ClassNode clazz);\n\t// Get the type of array elements\n\tstatic Class elementType(Class clazz);\n\t// Get the type of array elements by the dimension\n\tstatic Class elementType(Class clazz, int dim);\n\t// Get the type of array elements\n\tstatic ClassNode elementType(ClassNode clazz);\n}", "des": "Utilities for handling array types"}
{"index": 6696, "code": "public class AstStringCompiler extends Object {\n\t// Compiles the specified source code and returns its statement block and any declared types.\n\tList<ASTNode> compile(String script);\n\t// Compiles the specified source code and returns its statement block, the script class (if desired) and any declared types.\n\tList<ASTNode> compile(String script, CompilePhase compilePhase, boolean statementsOnly);\n}", "des": "This class handles converting Strings to ASTNode lists."}
{"index": 6697, "code": "public enum AutoCloneStyle extends Enum<AutoCloneStyle> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic AutoCloneStyle valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic AutoCloneStyle[] values();\n}", "des": "Intended style to use for cloning when using the @AutoClone annotation."}
{"index": 6698, "code": "public class BooleanClosureWrapper extends Object {\n\t// normal closure call\n\tboolean call(Object... args);\n\t// Bridge for a call based on a map entry.\n\t<K, V> boolean callForMap(Map.Entry<K,V> entry);\n}", "des": "Helper class for internal use only."}
{"index": 6699, "code": "public class BytecodeSequence extends Statement {\n\t// Returns the singular BytecodeInstruction.\n\tBytecodeInstruction getBytecodeInstruction();\n\tList<?> getInstructions();\n\t// Delegates to the visit method used for this class.\n\tvoid visit(GroovyCodeVisitor visitor);\n}", "des": "This class represents a sequence of BytecodeInstructions or ASTNodes."}
{"index": 6700, "code": "public class ClassFinder extends Object {\n\t// Returns the found classes\n\tstatic Map<String,Set<String>> find(URI classpathEntryURI, String packageName);\n\t// Returns the found classes\n\tstatic Map<String,Set<String>> find(URI classpathEntryURI, String packageName, boolean recursive);\n}", "des": "Find classes under the specified package via some classpath entry Usage:"}
{"index": 6701, "code": "public static class ClassNodeResolver.LookupResult extends Object {\n\t// returns the ClassNode\n\tClassNode getClassNode();\n\t// returns the SourceUnit\n\tSourceUnit getSourceUnit();\n\t// returns true if a ClassNode is stored\n\tboolean isClassNode();\n\t// returns true if a SourceUnit is stored\n\tboolean isSourceUnit();\n}", "des": "Helper class to return either a SourceUnit or ClassNode."}
{"index": 6702, "code": "public interface ClosureInvokingMethod {\n\t// Returns the original closure that this method invokes\n\tClosure getClosure();\n\t// The method name\n\tString getName();\n\t// Is it a static method?\n\tboolean isStatic();\n}", "des": "An interface for MetaMethods that invoke closures to implements."}
{"index": 6703, "code": "public enum CompilePhase extends Enum<CompilePhase> {\n\t// Returns the CompilePhase for the given integer phase number.\n\tstatic CompilePhase fromPhaseNumber(int phaseNumber);\n\t// Returns the underlying integer Phase number.\n\tint getPhaseNumber();\n\t// Returns the enum constant of this type with the specified name.\n\tstatic CompilePhase valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic CompilePhase[] values();\n}", "des": "The phases of the GroovyCompiler."}
{"index": 6704, "code": "public class Compiler extends Object {\n\t// Compiles a single File.\n\tvoid compile(File file);\n\t// Compiles a series of Files.\n\tvoid compile(File[] files);\n\t// Compiles a series of Files from file names.\n\tvoid compile(String[] files);\n\t// Compiles a string of code.\n\tvoid compile(String name, String code);\n}", "des": "A convenience front end for getting standard compilations done."}
{"index": 6705, "code": "public static enum ConcurrentReferenceHashMap.Option extends Enum<ConcurrentReferenceHashMap.Option> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic ConcurrentReferenceHashMap.Option valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic ConcurrentReferenceHashMap.Option[] values();\n}", "des": "Behavior-changing configuration options for the map"}
{"index": 6706, "code": "public static enum ConcurrentReferenceHashMap.ReferenceType extends Enum<ConcurrentReferenceHashMap.ReferenceType> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic ConcurrentReferenceHashMap.ReferenceType valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic ConcurrentReferenceHashMap.ReferenceType[] values();\n}", "des": "An option specifying which Java reference type should be used to refer to a key and/or value."}
{"index": 6707, "code": "public class ConfigurationException extends RuntimeException implements GroovyExceptionInterface {\n\t// Returns the causing exception, if available.\n\tThrowable getCause();\n\t// It's always fatal.\n\tboolean isFatal();\n\t// Set fatal is just ignored.\n\tvoid setFatal(boolean fatal);\n}", "des": "Thrown when configuration data is invalid."}
{"index": 6708, "code": "public class ConvertedMap extends ConversionHandler {\n\tprotected boolean checkMethod(Method method);\n\t// This method is called for all Methods not defined on Object.\n\tObject invokeCustom(Object proxy, Method method, Object[] args);\n\t// Checks whether a method is a core method from java.lang.Object.\n\tstatic boolean isCoreObjectMethod(Method method);\n}", "des": "This class is a general adapter to adapt a map of closures to any Java interface."}
{"index": 6709, "code": "public enum DefaultsMode extends Enum<DefaultsMode> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic DefaultsMode valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic DefaultsMode[] values();\n}", "des": "Intended mode to use when generating constructors to emulate default parameter values when using the TupleConstructor annotation."}
{"index": 6710, "code": "public abstract class DelegatingScript extends Script {\n\tObject getDelegate();\n\t// Retrieves a property value.\n\tObject getProperty(String property);\n\t// Invoke a method (or closure in the binding) defined.\n\tObject invokeMethod(String name, Object args);\n\t// Sets the delegation target.\n\tvoid setDelegate(Object delegate);\n\t// Sets the given property to the new value.\n\tvoid setProperty(String property, Object newValue);\n}", "des": "Script that performs method invocations and property access like Closure does."}
{"index": 6711, "code": "public class DoWhileStatement extends Statement implements LoopingStatement {\n\tBooleanExpression getBooleanExpression();\n\t// Gets the loop block.\n\tStatement getLoopBlock();\n\tvoid setBooleanExpression(BooleanExpression booleanExpression);\n\t// Sets the loop block.\n\tvoid setLoopBlock(Statement loopBlock);\n\tvoid visit(GroovyCodeVisitor visitor);\n}", "des": "Represents a do { ..."}
{"index": 6712, "code": "public class EncodingAwareBufferedWriter extends BufferedWriter {\n\t// The encoding as returned by the underlying OutputStreamWriter.\n\tString getEncoding();\n\t// The encoding as returned by the underlying OutputStreamWriter.\n\tString getNormalizedEncoding();\n}", "des": "A buffered writer only for OutputStreamWriter that is aware of the encoding of the OutputStreamWriter."}
{"index": 6713, "code": "public interface EvictableCache<K,V> extends MemoizeCache<K,V>, Map<K,V> {\n\t// Clear the cache\n\tdefault void clear();\n\t// Clear the cache\n\tMap<K,V> clearAll();\n\t// Determines if the cache contains an entry for the specified key.\n\tboolean containsKey(Object key);\n\t// Get all keys associated to cached values\n\tSet<K> keys();\n\t// Remove the cached value by the key\n\tV remove(Object key);\n\t// Get the size of the cache\n\tint size();\n\t// Get all cached values\n\tCollection<V> values();\n}", "des": "Represents an evictable memoize cache with its essential methods"}
{"index": 6714, "code": "public static enum EvictableCache.EvictionStrategy extends Enum<EvictableCache.EvictionStrategy> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic EvictableCache.EvictionStrategy valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic EvictableCache.EvictionStrategy[] values();\n}", "des": "Represents an eviction strategy for the cache with limited size"}
{"index": 6715, "code": "public class ExceptionMessage extends Message {\n\t// Returns the underlying Exception.\n\tException getCause();\n\t// Writes out a nicely formatted summary of the exception.\n\tvoid write(PrintWriter output, Janitor janitor);\n}", "des": "A class for error messages produced by the parser system."}
{"index": 6716, "code": "public class FileReaderSource extends AbstractReaderSource {\n\tFile getFile();\n\t// Returns a new Reader on the underlying source object.\n\tReader getReader();\n\t// Returns a URI for the file of this source.\n\tURI getURI();\n}", "des": "A ReaderSource for source files."}
{"index": 6717, "code": "public enum FileType extends Enum<FileType> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic FileType valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic FileType[] values();\n}", "des": "Represents particular files of interest."}
{"index": 6718, "code": "public enum FileVisitResult extends Enum<FileVisitResult> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic FileVisitResult valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic FileVisitResult[] values();\n}", "des": "Represents special return values for the 'preDir', 'postDir' and 'visit'/supplied Closures used with ResourceGroovyMethods.traverse(java.io.File, java.util.Map, groovy.lang.Closure) and related methods to control subsequent traversal behavior."}
{"index": 6719, "code": "public class ForStatement extends Statement implements LoopingStatement {\n\tExpression getCollectionExpression();\n\t// Gets the loop block.\n\tStatement getLoopBlock();\n\tParameter getVariable();\n\tVariableScope getVariableScope();\n\tClassNode getVariableType();\n\tvoid setCollectionExpression(Expression collectionExpression);\n\t// Sets the loop block.\n\tvoid setLoopBlock(Statement loopBlock);\n\tvoid setVariableScope(VariableScope variableScope);\n\tvoid visit(GroovyCodeVisitor visitor);\n}", "des": "Represents a standard for loop in Groovy"}
{"index": 6720, "code": "public class GrabAnnotationTransformation extends ClassCodeVisitorSupport implements ASTTransformation, CompilationUnitAware {\n\tSourceUnit getSourceUnit();\n\tvoid setCompilationUnit(CompilationUnit compilationUnit);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n\t// Adds the annotation to the internal target list if a match is found.\n\tvoid visitAnnotations(AnnotatedNode node);\n}", "des": "Transformation for declarative dependency management."}
{"index": 6721, "code": "public class GroovyBugError extends AssertionError {\n\t// Returns the bug text to describe this error\n\tString getBugText();\n\tThrowable getCause();\n\t// Returns the detail message string of this error.\n\tString getMessage();\n\t// Sets the bug text to describe this error\n\tvoid setBugText(String msg);\n}", "des": "This class represents an error that is thrown when a bug is recognized inside the runtime."}
{"index": 6722, "code": "public interface GroovyClassVisitor {\n\t// Visit a ClassNode.\n\tvoid visitClass(ClassNode node);\n\t// Visit a ConstructorNode.\n\tvoid visitConstructor(ConstructorNode node);\n\t// Visit a FieldNode.\n\tvoid visitField(FieldNode node);\n\t// Visit a MethodNode.\n\tvoid visitMethod(MethodNode node);\n\t// Visit a PropertyNode.\n\tvoid visitProperty(PropertyNode node);\n}", "des": "A special visitor for working with the structure of a class."}
{"index": 6723, "code": "public class Groovydoc extends Object {\n\tboolean equals(Object o);\n\t// Get the content of groovydoc\n\tString getContent();\n\t// Get the holder of the groovydoc\n\tGroovydocHolder getHolder();\n\t// TODO Get list of groovydoc tags\n\tList<GroovydocTag> getTagList();\n\t// Tests if groovydoc is present\n\tboolean isPresent();\n}", "des": "Represents groovydoc"}
{"index": 6724, "code": "public interface GroovydocHolder<T> {\n\t// Get the groovydoc\n\tGroovydoc getGroovydoc();\n\t// Get GroovydocHolder instance\n\tT getInstance();\n}", "des": "Represents Groovydoc Holder"}
{"index": 6725, "code": "public interface GroovyObject {\n\t// Returns the metaclass for a given class.\n\tMetaClass getMetaClass();\n\t// Retrieves a property value.\n\tdefault Object getProperty(String propertyName);\n\t// Invokes the given method.\n\tdefault Object invokeMethod(String name, Object args);\n\t// Allows the MetaClass to be replaced with a derived implementation.\n\tvoid setMetaClass(MetaClass metaClass);\n\t// Sets the given property to the new value.\n\tdefault void setProperty(String propertyName, Object newValue);\n}", "des": "The interface implemented by all Groovy objects."}
{"index": 6726, "code": "public abstract class GroovyObjectSupport extends Object implements GroovyObject {\n\t// Returns the metaclass for a given class.\n\tMetaClass getMetaClass();\n\t// Allows the MetaClass to be replaced with a derived implementation.\n\tvoid setMetaClass(MetaClass metaClass);\n}", "des": "Base class for Java objects wishing to be Groovy objects."}
{"index": 6727, "code": "public class GroovyPrintStream extends PrintStream {\n\t// Prints an object Groovy style.\n\tvoid print(Object obj);\n\t// Prints an object Groovy style followed by a newline.\n\tvoid println(Object obj);\n}", "des": "A PrintStream that outputs objects in Groovy style."}
{"index": 6728, "code": "public interface GroovyRunner {\n\t// Returns true if this runner is able to run the given class.\n\tboolean canRun(Class<?> scriptClass, GroovyClassLoader loader);\n\t// Runs the given class.\n\tObject run(Class<?> scriptClass, GroovyClassLoader loader);\n}", "des": "Classes which can run scripts should implement this interface."}
{"index": 6729, "code": "public abstract static class GroovyTypeCheckingExtensionSupport.TypeCheckingDSL extends Script {\n\t// Retrieves a property value.\n\tObject getProperty(String property);\n\t// Invoke a method (or closure in the binding) defined.\n\tObject invokeMethod(String name, Object args);\n\t// Sets the given property to the new value.\n\tvoid setProperty(String property, Object newValue);\n}", "des": "Event handler registration: setup Registers closure that runs after the type checker finishes initialization finish Registers closure that runs after the type checker completes type checking beforeVisitClass Registers closure that runs before type checking a class afterVisitClass Registers closure that runs after having finished the visit of a type checked class beforeVisitMethod Registers closure that runs before type checking a method body afterVisitMethod Registers closure that runs after type checking a method body beforeMethodCall Registers closure that runs before the type checker starts type checking a method call afterMethodCall Registers closure that runs once the type checker has finished type checking a method call methodNotFound Registers closure that runs when it fails to find an appropriate method for a method call ambiguousMethods Registers closure that runs when the type checker cannot choose between several candidate methods onMethodSelection Registers closure that runs when it finds a method appropriate for a method call unresolvedVariable Registers closure that runs when the type checker finds an unresolved variable unresolvedProperty Registers closure that runs when the type checker cannot find a property on the receiver unresolvedAttribute Registers closure that runs when the type checker cannot find an attribute on the receiver incompatibleAssignment Registers closure that runs when the type checker thinks that the right-hand side of an assignment is incompatible with the left-hand side incompatibleReturnType Registers closure that runs when the type checker thinks that a return value is incompatibe with the return type Expression categorization: isAnnotationConstantExpression Determines if argument is an AnnotationConstantExpression isArgumentListExpression Determines if argument is an ArgumentListExpression isArrayExpression Determines if argument is an ArrayExpression isAttributeExpression Determines if argument is an AttributeExpression isBinaryExpression Determines if argument is a BinaryExpression isBitwiseNegationExpression Determines if argument is a BitwiseNegationExpression isBooleanExpression Determines if argument is a BooleanExpression isCastExpression Determines if argument is a CastExpression isClassExpression Determines if argument is a ClassExpression isClosureExpression Determines if argument is a ClosureExpression isConstantExpression Determines if argument is a ConstantExpression isConstructorCallExpression Determines if argument is a ConstructorCallExpression isDeclarationExpression Determines if argument is a DeclarationExpression isElvisOperatorExpression Determines if argument is an ElvisOperatorExpression isEmptyExpression Determines if argument is an EmptyExpression isFieldExpression Determines if argument is a FieldExpression isGStringExpression Determines if argument is a GStringExpression isLambdaExpression Determines if argument is a LambdaExpression isListExpression Determines if argument is a ListExpression isMapExpression Determines if argument is a MapExpression isMapEntryExpression Determines if argument is a MapEntryExpression isMethodCallExpression Determines if argument is a MethodCallExpression isMethodPointerExpression Determines if argument is a MethodPointerExpression isMethodReferenceExpression Determines if argument is a MethodReferenceExpression isNamedArgumentListExpression Determines if argument is a NamedArgumentListExpression isNotExpression Determines if argument is a NotExpression isPostfixExpression Determines if argument is a PostfixExpression isPrefixExpression Determines if argument is a PrefixExpression isPropertyExpression Determines if argument is a PropertyExpression isRangeExpression Determines if argument is a RangeExpression isSpreadExpression Determines if argument is a SpreadExpression isSpreadMapExpression Determines if argument is a SpreadMapExpression isStaticMethodCallExpression Determines if argument is a StaticMethodCallExpression isTernaryExpression Determines if argument is a TernaryExpression isTupleExpression Determines if argument is a TupleExpression isUnaryMinusExpression Determines if argument is a UnaryMinusExpression isUnaryPlusExpression Determines if argument is a UnaryPlusExpression isVariableExpression Determines if argument is a VariableExpression General utility: Delegates to AbstractTypeCheckingExtension Imports static members of ClassHelper Imports static members of StaticTypeCheckingSupport"}
{"index": 6730, "code": "public class ImportCustomizerFactory extends AbstractFactory {\n\t// Does this factory \"Own\" its child closure.\n\tboolean isHandlesNodeChildren();\n\tObject newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes);\n\t// Only called if it isLeaf is false and isHandlesNodeChildren is true\n\tboolean onNodeChildren(FactoryBuilderSupport builder, Object node, Closure childContent);\n}", "des": "This factory allows the generation of an import customizer."}
{"index": 6731, "code": "public static enum IndyInterface.CallType extends Enum<IndyInterface.CallType> {\n\tstatic IndyInterface.CallType fromCallSiteName(String callSiteName);\n\t// Returns the name of the call site type\n\tString getCallSiteName();\n\t// Returns the enum constant of this type with the specified name.\n\tstatic IndyInterface.CallType valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic IndyInterface.CallType[] values();\n}", "des": "Enum for easy differentiation between call types"}
{"index": 6732, "code": "public static enum IndyInterface.CallType extends Enum<IndyInterface.CallType> {\n\tstatic IndyInterface.CallType fromCallSiteName(String callSiteName);\n\t// Returns the name of the call site type\n\tString getCallSiteName();\n\t// Returns the enum constant of this type with the specified name.\n\tstatic IndyInterface.CallType valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic IndyInterface.CallType[] values();\n}", "des": "Enum for easy differentiation between call types"}
{"index": 6733, "code": "public class InputStreamReaderSource extends AbstractReaderSource {\n\t// Returns true if the source can be restarted (ie.\n\tboolean canReopenSource();\n\t// Returns a new Reader on the underlying source object.\n\tReader getReader();\n\t// TODO: Should return the URI for this source, but we can't know what it is here.\n\tURI getURI();\n}", "des": "A ReaderSource for source strings."}
{"index": 6734, "code": "public interface Interceptor {\n\t// This code is executed after the method is optionally called.\n\tObject afterInvoke(Object object, String methodName, Object[] arguments, Object result);\n\t// This code is executed before the method is optionally called.\n\tObject beforeInvoke(Object object, String methodName, Object[] arguments);\n\tboolean doInvoke();\n}", "des": "Implementers of this interface can be registered in the ProxyMetaClass for notifications about method calls for objects managed by the ProxyMetaClass."}
{"index": 6735, "code": "public class IteratorClosureAdapter<T> extends Closure {\n\tList<T> asList();\n\tprotected Object doCall(T argument);\n\t// Returns the metaclass for a given class.\n\tMetaClass getMetaClass();\n\t// Allows the MetaClass to be replaced with a derived implementation.\n\tvoid setMetaClass(MetaClass metaClass);\n}", "des": "A closure which stores calls in a List so that method calls can be iterated over in a 'yield' style way"}
{"index": 6736, "code": "public class Java16 extends Java10 {\n\t// Returns a handle with bound receiver to invokeSpecial the given method.\n\tObject getInvokeSpecialHandle(Method method, Object receiver);\n\t// Gives the version the plugin is made for\n\tint getVersion();\n\t// Invokes a handle produced by #getInvokeSpecialdHandle\n\tObject invokeHandle(Object handle, Object[] args);\n\tprotected void makeRecordComponents(CompileUnit cu, ClassNode classNode, Class<?> clazz);\n\tprotected MethodHandles.Lookup newLookup(Class<?> declaringClass);\n}", "des": "Additional Java 16 based functions will be added here as needed."}
{"index": 6737, "code": "public class JavaStubCompilationUnit extends CompilationUnit {\n\t// Adds a source file to the unit.\n\tSourceUnit addSource(File file);\n\t// Adds a source file to the unit.\n\tSourceUnit addSource(URL url);\n\t// Synonym for compile(Phases.ALL).\n\tvoid compile();\n\t// Configures its debugging mode and classloader classpath from a given compiler configuration.\n\tvoid configure(CompilerConfiguration config);\n\tint getStubCount();\n}", "des": "Compilation unit to only generate stubs."}
{"index": 6738, "code": "public interface LazyInitializable {\n\t// do initialization\n\tvoid doInit();\n\t// Check if the object is initialized.\n\tboolean isInitialized();\n\tdefault void lazyInit();\n\t// Mark the object initialized.\n\tvoid setInitialized(boolean initialized);\n}", "des": "A LazyInitializable is an object that can be initialized lazily."}
{"index": 6739, "code": "public interface LoopingStatement {\n\t// Gets the loop block.\n\tStatement getLoopBlock();\n\t// Sets the loop block.\n\tvoid setLoopBlock(Statement loopBlock);\n}", "des": "This is an AST Node that provides some sort of looping mechanism."}
{"index": 6740, "code": "@ThreadSafe public final class LRUCache<K,V> extends Object implements MemoizeCache<K,V> {\n\t// Remove all entries holding SoftReferences to gc-evicted objects.\n\tvoid cleanUpNullReferences();\n\t// Gets a value from the cache\n\tV get(K key);\n\t// Try to get the value from cache.\n\tV getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider);\n\t// Associates the specified value with the specified key in the cache.\n\tV put(K key, V value);\n}", "des": "A cache backed by a ConcurrentLinkedHashMap"}
{"index": 6741, "code": "public class ManagedConcurrentValueMap<K,V> extends Object {\n\t// Returns the value stored for the given key at the point of call.\n\tV get(K key);\n\t// Sets a new value for a given key.\n\tvoid put(K key, V value);\n\t// Sets a new bundle used for reference creation.\n\tvoid setBundle(ReferenceBundle bundle);\n}", "des": "This is a basic implementation of a map able to forget its values."}
{"index": 6742, "code": "public class MapConstructorASTTransformation extends AbstractASTTransformation implements CompilationUnitAware {\n\t// If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tString getAnnotationName();\n\tvoid setCompilationUnit(CompilationUnit unit);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles generation of code for the @MapConstructor annotation."}
{"index": 6743, "code": "public interface MemoizeCache<K,V> {\n\t// Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache.\n\tvoid cleanUpNullReferences();\n\t// Gets a value from the cache\n\tV get(K key);\n\t// Try to get the value from cache.\n\tdefault V getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider);\n\t// Associates the specified value with the specified key in the cache.\n\tV put(K key, V value);\n}", "des": "Represents a memoize cache with its essential methods"}
{"index": 6744, "code": "public class MessageSource extends GroovyObjectSupport {\n\t// Format a message (based on MessageFormat) using the message from the resource bundles using the given code as a pattern and the given objects as arguments.\n\tString format(String code, Object[] args);\n\t// Get a raw message from the resource bundles using the given code.\n\tString getMessage(String code);\n\t// Retrieves a property value.\n\tObject getProperty(String name);\n}", "des": "Message source backed up by one or more ResourceBundle instances for simple i18n support."}
{"index": 6745, "code": "public class MetaArrayLengthProperty extends MetaProperty {\n\t// Get this property from the given object.\n\tObject getProperty(Object object);\n\t// Sets the property on the given object to the new value\n\tvoid setProperty(Object object, Object newValue);\n}", "des": "Represents the length property of an array"}
{"index": 6746, "code": "public class MixinInstanceMetaMethod extends MetaMethod {\n\t// Gets the class where this method is declared\n\tCachedClass getDeclaringClass();\n\t// Returns the modifiers for this method\n\tint getModifiers();\n\t// Returns the name of the method represented by this class\n\tString getName();\n\tprotected Class[] getPT();\n\t// Access the return type for this method\n\tClass getReturnType();\n\t// Invoke this method\n\tObject invoke(Object object, Object[] arguments);\n}", "des": "MetaMethod for mixed in classes"}
{"index": 6747, "code": "public class NewifyASTTransformation extends ClassCodeExpressionTransformer implements ASTTransformation {\n\tstatic String extractName(String s);\n\tprotected SourceUnit getSourceUnit();\n\t// NOTE: This method does not visit Expressions within Closures, for performance and historical reasons.\n\tExpression transform(Expression expr);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles generation of code for the @Newify AST transform."}
{"index": 6748, "code": "public class NewInstanceMetaMethod extends NewMetaMethod {\n\t// Returns the modifiers for this method\n\tint getModifiers();\n\t// Invoke this method\n\tObject invoke(Object object, Object[] arguments);\n\t// Returns whether this method is static.\n\tboolean isStatic();\n}", "des": "A MetaMethod implementation where the underlying method is really a static helper method on some class but it appears to be an instance method on a class."}
{"index": 6749, "code": "public class NewStaticMetaMethod extends NewMetaMethod {\n\t// Returns the modifiers for this method\n\tint getModifiers();\n\t// Invoke this method\n\tObject invoke(Object object, Object[] arguments);\n\t// Returns whether this method is static.\n\tboolean isStatic();\n}", "des": "A MetaMethod implementation where the underlying method is really a static helper method on some class."}
{"index": 6750, "code": "public class NullCheckASTTransformation extends AbstractASTTransformation {\n\tstatic boolean hasIncludeGenerated(ClassNode cNode);\n\tstatic ThrowStatement makeThrowStmt(String variableName);\n\t// Mark a method as already processed.\n\tstatic void markAsProcessed(MethodNode mn);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles generation of code for the @NullCheck annotation."}
{"index": 6751, "code": "public static class ObjectGraphBuilder.DefaultRelationNameResolver extends Object implements ObjectGraphBuilder.RelationNameResolver {\n\t// Handles the common English regular plurals with the following rules.\n\tString resolveChildRelationName(String parentName, Object parent, String childName, Object child);\n\t// Follow the most conventional pattern, returns the parentName unchanged.\n\tString resolveParentRelationName(String parentName, Object parent, String childName, Object child);\n}", "des": "Default impl that returns parentName and childName accordingly."}
{"index": 6752, "code": "public static interface ObjectGraphBuilder.RelationNameResolver {\n\t// Returns the mapping name of child -> parent\n\tString resolveChildRelationName(String parentName, Object parent, String childName, Object child);\n\t// Returns the mapping name of parent -> child\n\tString resolveParentRelationName(String parentName, Object parent, String childName, Object child);\n}", "des": "Strategy for resolving a relationship property name."}
{"index": 6753, "code": "public class ObjectUtil extends Object {\n\t// Clone the specified object\n\tstatic <T> T cloneObject(T object);\n\t// Returns the method handle of cloneObject(Object)\n\tstatic MethodHandle getCloneObjectMethodHandle();\n}", "des": "Util for object's operations with checks"}
{"index": 6754, "code": "public enum PackageScopeTarget extends Enum<PackageScopeTarget> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic PackageScopeTarget valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic PackageScopeTarget[] values();\n}", "des": "Intended target when @PackageScope is placed at the class level."}
{"index": 6755, "code": "public abstract class ParserPluginFactory extends Object {\n\t// Deprecated.\n\tstatic ParserPluginFactory antlr2();\n\t// Creates the ANTLR 4 parser.\n\tstatic ParserPluginFactory antlr4();\n\tabstract ParserPlugin createParserPlugin();\n}", "des": "A factory of parser plugin instances."}
{"index": 6756, "code": "public interface PropertyAccessInterceptor extends Interceptor {\n\t// Intercepts a getXXX call and returns a result.\n\tObject beforeGet(Object object, String property);\n\t// Intercepts a setXXX call\n\tvoid beforeSet(Object object, String property, Object newValue);\n}", "des": "An interface that adds the ability to intercept property getters/setters"}
{"index": 6757, "code": "public class Proxy extends GroovyObjectSupport {\n\tObject getAdaptee();\n\t// Invokes the given method.\n\tObject invokeMethod(String name, Object args);\n\tIterator iterator();\n\tvoid setAdaptee(Object adaptee);\n\t// This method is for convenience.\n\tProxy wrap(Object adaptee);\n}", "des": "Dynamic groovy proxy for another object."}
{"index": 6758, "code": "public interface ReaderSource extends HasCleanup {\n\t// Returns true if the source can be restarted (ie.\n\tboolean canReopenSource();\n\t// Cleans up any cached resources used by getLine().\n\tvoid cleanup();\n\t// Returns a line from the source, or null, if unavailable.\n\tString getLine(int lineNumber, Janitor janitor);\n\t// Returns a new Reader on the underlying source object.\n\tReader getReader();\n\t// Returns a URI for this source.\n\tURI getURI();\n}", "des": "An interface for things that can supply (and potentially resupply) a Reader on a source stream."}
{"index": 6759, "code": "public class RecordCompletionASTTransformation extends AbstractASTTransformation {\n\t// If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tString getAnnotationName();\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles completion of code for the @RecordType annotation."}
{"index": 6760, "code": "public enum RecordTypeMode extends Enum<RecordTypeMode> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic RecordTypeMode valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic RecordTypeMode[] values();\n}", "des": "Intended mode to use for records when using the @RecordType annotation (or record keyword)."}
{"index": 6761, "code": "public class Reference<T> extends GroovyObjectSupport implements Serializable {\n\tT get();\n\t// Retrieves a property value.\n\tObject getProperty(String property);\n\t// Invokes the given method.\n\tObject invokeMethod(String name, Object args);\n\tvoid set(T value);\n\t// Sets the given property to the new value.\n\tvoid setProperty(String property, Object newValue);\n}", "des": "Represents a reference to a value"}
{"index": 6762, "code": "public class ReflectorLoader extends ClassLoader {\n\t// helper method to define Reflector classes.\n\tClass defineClass(String name, byte[] bytecode, ProtectionDomain domain);\n\t// Tries to find a Groovy class.\n\tprotected Class findClass(String name);\n\t// try to load one of the defined Reflector classes by name.\n\tClass getLoadedClass(String name);\n\t// Loads a class per name.\n\tprotected Class loadClass(String name, boolean resolve);\n}", "des": "Reflector creation helper."}
{"index": 6763, "code": "public class ReturnAdder extends Object {\n\t// Deprecated. Use visitMethod(MethodNode) instead.\n\tstatic void addReturnIfNeeded(MethodNode node);\n\t// Adds return statements to given method whenever an implicit return is detected.\n\tvoid visitMethod(MethodNode node);\n}", "des": "Utility class to add return statements."}
{"index": 6764, "code": "public class ScriptRunner extends Object {\n\t// Run the script file specified by the file path\n\tstatic void runScript(File path);\n\t// Run the script file specified by the classpath\n\tstatic void runScript(String cp);\n}", "des": "The tool to simulate running script files via groovy command"}
{"index": 6765, "code": "public class SealedASTTransformation extends AbstractASTTransformation {\n\t// Reports true if native sealed class information should be written into the bytecode.\n\tstatic boolean sealedNative(AnnotatedNode node);\n\t// Reports true if the Sealed annotation should not be included in the bytecode for a sealed or emulated-sealed class.\n\tstatic boolean sealedSkipAnnotation(AnnotatedNode node);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles generation of code for the @Sealed annotation."}
{"index": 6766, "code": "public enum SealedMode extends Enum<SealedMode> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic SealedMode valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic SealedMode[] values();\n}", "des": "Intended mode to use for sealed classes when using the @Sealed annotation (or sealed keyword)."}
{"index": 6767, "code": "public class SecureASTCustomizerFactory extends AbstractFactory {\n\t// Does this factory \"Own\" its child closure.\n\tboolean isHandlesNodeChildren();\n\tObject newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes);\n\t// Only called if it isLeaf is false and isHandlesNodeChildren is true\n\tboolean onNodeChildren(FactoryBuilderSupport builder, Object node, Closure childContent);\n}", "des": "This factory allows the generation of a SecureASTCustomizer."}
{"index": 6768, "code": "public class SourceText extends Object {\n\t// Returns the column in getNormalizedText() corresponding to the given line and column in the original source text.\n\tint getNormalizedColumn(int line, int column);\n\t// Returns the assertion's source text after removing line breaks.\n\tString getNormalizedText();\n}", "des": "Provides the source text for an assertion statement and translates coordinates in the original source text to coordinates relative to the assertion's (normalized) source text."}
{"index": 6769, "code": "public enum StaticCompilationMetadataKeys extends Enum<StaticCompilationMetadataKeys> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic StaticCompilationMetadataKeys valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic StaticCompilationMetadataKeys[] values();\n}", "des": "Static compilation AST node metadata keys."}
{"index": 6770, "code": "public class StaticCompileTransformation extends StaticTypesTransformation {\n\t// Allows subclasses to provide their own visitor.\n\tprotected StaticTypeCheckingVisitor newVisitor(SourceUnit unit, ClassNode node);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles the implementation of the CompileStatic transformation."}
{"index": 6771, "code": "public enum StaticTypesMarker extends Enum<StaticTypesMarker> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic StaticTypesMarker valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic StaticTypesMarker[] values();\n}", "des": "This enumeration is used by the AST transformations which rely on static type checking, either to store or to retrieve information from AST node metadata."}
{"index": 6772, "code": "public class StaticTypesTransformation extends Object implements ASTTransformation, CompilationUnitAware {\n\tprotected void addTypeCheckingExtensions(StaticTypeCheckingVisitor visitor, Expression extensions);\n\t// Allows subclasses to provide their own visitor.\n\tprotected StaticTypeCheckingVisitor newVisitor(SourceUnit unit, ClassNode node);\n\tvoid setCompilationUnit(CompilationUnit unit);\n\t// The method is invoked when an AST Transformation is active.\n\tvoid visit(ASTNode[] nodes, SourceUnit source);\n}", "des": "Handles the implementation of the TypeChecked transformation."}
{"index": 6773, "code": "public class StringBufferWriter extends Writer {\n\t// Closing a StringWriter has no effect.\n\tvoid close();\n\t// Flush the stream.\n\tvoid flush();\n\t// Write a portion of an array of characters.\n\tvoid write(char[] text, int offset, int length);\n\t// Write a single character.\n\tvoid write(int c);\n\t// Write a string.\n\tvoid write(String text);\n\t// Write a portion of a string.\n\tvoid write(String text, int offset, int length);\n}", "des": "This class codes around a silly limitation of StringWriter which doesn't allow a StringBuffer to be passed in as a constructor for some bizarre reason."}
{"index": 6774, "code": "public class StringReaderSource extends AbstractReaderSource {\n\t// Returns a new Reader on the underlying source object.\n\tReader getReader();\n\t// Returns a Data URI (RFC 2397) containing the literal value of this source string.\n\tURI getURI();\n}", "des": "A ReaderSource for source strings."}
{"index": 6775, "code": "public class SyntaxErrorMessage extends Message {\n\t// Returns the underlying SyntaxException.\n\tSyntaxException getCause();\n\t// Writes out a nicely formatted summary of the syntax error.\n\tvoid write(PrintWriter output, Janitor janitor);\n}", "des": "A class for error messages produced by the parser system."}
{"index": 6776, "code": "public class SyntaxException extends GroovyException {\n\tint getEndColumn();\n\tint getEndLine();\n\t// Retrieve the line upon which the error occurred.\n\tint getLine();\n\tString getMessage();\n\tString getOriginalMessage();\n\tString getSourceLocator();\n\t// Retrieve the column upon which the error occurred.\n\tint getStartColumn();\n\tint getStartLine();\n\tvoid setSourceLocator(String sourceLocator);\n}", "des": "Base exception indicating a syntax error."}
{"index": 6777, "code": "public class ThreadManagedMetaBeanProperty extends MetaBeanProperty {\n\t// Get the getter method.\n\tMetaMethod getGetter();\n\t// Retrieves the initial value of the ThreadBound property\n\tObject getInitialValue();\n\tObject getInitialValue(Object object);\n\t// Get the setter method.\n\tMetaMethod getSetter();\n\t// Closure responsible for creating the initial value of thread-managed bean properties\n\tvoid setInitialValueCreator(Closure callable);\n}", "des": "This MetaBeanProperty will create a pseudo property whose value is bound to an object using weak references."}
{"index": 6778, "code": "public class TraitTypeCheckingExtension extends AbstractTypeCheckingExtension {\n\t// This method is called by the type checker when a method call cannot be resolved.\n\tList<MethodNode> handleMissingMethod(ClassNode receiver, String name, ArgumentListExpression argumentList, ClassNode[] argumentTypes, MethodCall call);\n\t// Subclasses should implement this method whenever they need to perform special checks before the type checker starts working.\n\tvoid setup();\n}", "des": "A type checking extension that will take care of handling errors which are specific to traits."}
{"index": 6779, "code": "public class TryWithResourcesASTTransformation extends Object {\n\t// Reference JLS \"14.20.3.\n\tStatement transform(TryCatchStatement tryCatchStatement);\n\t// See https://docs.oracle.com/javase/specs/jls/se9/html/jls-14.html 14.20.3.1.\n\tBinaryExpression transformResourceAccess(Expression variableAccessExpression);\n}", "des": "Transform try-with-resources to try-catch-finally Reference JLS \"14.20.3."}
{"index": 6780, "code": "public final class Tuple2<T1,T2> extends Tuple {\n\tTuple2<T1,T2> clone();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT2 getSecond();\n\tT1 getV1();\n\tT2 getV2();\n}", "des": "Represents a list of 2 typed Objects."}
{"index": 6781, "code": "public final class Tuple3<T1,T2,T3> extends Tuple {\n\tTuple3<T1,T2,T3> clone();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n}", "des": "Represents a list of 3 typed Objects."}
{"index": 6782, "code": "public final class Tuple4<T1,T2,T3,T4> extends Tuple {\n\tTuple4<T1,T2,T3,T4> clone();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT4 getFourth();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n\tT4 getV4();\n}", "des": "Represents a list of 4 typed Objects."}
{"index": 6783, "code": "public final class Tuple5<T1,T2,T3,T4,T5> extends Tuple {\n\tTuple5<T1,T2,T3,T4,T5> clone();\n\t// Deprecated.\n\tT5 getFifth();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT4 getFourth();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n\tT4 getV4();\n\tT5 getV5();\n}", "des": "Represents a list of 5 typed Objects."}
{"index": 6784, "code": "public final class Tuple6<T1,T2,T3,T4,T5,T6> extends Tuple {\n\tTuple6<T1,T2,T3,T4,T5,T6> clone();\n\t// Deprecated.\n\tT5 getFifth();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT4 getFourth();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT6 getSixth();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n\tT4 getV4();\n\tT5 getV5();\n\tT6 getV6();\n}", "des": "Represents a list of 6 typed Objects."}
{"index": 6785, "code": "public final class Tuple7<T1,T2,T3,T4,T5,T6,T7> extends Tuple {\n\tTuple7<T1,T2,T3,T4,T5,T6,T7> clone();\n\t// Deprecated.\n\tT5 getFifth();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT4 getFourth();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT7 getSeventh();\n\t// Deprecated.\n\tT6 getSixth();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n\tT4 getV4();\n\tT5 getV5();\n\tT6 getV6();\n\tT7 getV7();\n}", "des": "Represents a list of 7 typed Objects."}
{"index": 6786, "code": "public final class Tuple8<T1,T2,T3,T4,T5,T6,T7,T8> extends Tuple {\n\tTuple8<T1,T2,T3,T4,T5,T6,T7,T8> clone();\n\t// Deprecated.\n\tT8 getEighth();\n\t// Deprecated.\n\tT5 getFifth();\n\t// Deprecated.\n\tT1 getFirst();\n\t// Deprecated.\n\tT4 getFourth();\n\t// Deprecated.\n\tT2 getSecond();\n\t// Deprecated.\n\tT7 getSeventh();\n\t// Deprecated.\n\tT6 getSixth();\n\t// Deprecated.\n\tT3 getThird();\n\tT1 getV1();\n\tT2 getV2();\n\tT3 getV3();\n\tT4 getV4();\n\tT5 getV5();\n\tT6 getV6();\n\tT7 getV7();\n\tT8 getV8();\n}", "des": "Represents a list of 8 typed Objects."}
{"index": 6787, "code": "public enum TypeCheckingMode extends Enum<TypeCheckingMode> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic TypeCheckingMode valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic TypeCheckingMode[] values();\n}", "des": "This enumeration can be used whenever it is preferred to annotate a class as TypeChecked in general, but where only one or more methods are \"dynamic\"."}
{"index": 6788, "code": "public class TypeTransformers extends Object {\n\t// Adds a type transformer applied at runtime.\n\tprotected static MethodHandle addTransformer(MethodHandle handle, int pos, Object arg, Class<?> parameter);\n\t// Apply a transformer as filter.\n\tstatic MethodHandle applyUnsharpFilter(MethodHandle handle, int pos, MethodHandle transformer);\n}", "des": "This class contains several transformers for used during method invocation."}
{"index": 6789, "code": "public class URLReaderSource extends AbstractReaderSource {\n\t// Returns a new Reader on the underlying source object.\n\tReader getReader();\n\t// Returns a URI for the URL of this source.\n\tURI getURI();\n}", "des": "A ReaderSource for source files hosted at a URL."}
{"index": 6790, "code": "public abstract class Utilities extends Object {\n\t// Returns the end-of-line marker.\n\tstatic String eol();\n\t// Tells if the given string is a valid Java identifier.\n\tstatic boolean isJavaIdentifier(String name);\n\t// Returns a string made up of repetitions of the specified string.\n\tstatic String repeatString(String pattern, int repeats);\n}", "des": "Various utility functions for use in the compiler."}
{"index": 6791, "code": "public enum Visibility extends Enum<Visibility> {\n\tint getModifier();\n\t// Returns the enum constant of this type with the specified name.\n\tstatic Visibility valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic Visibility[] values();\n}", "des": "Indicates the visibility of a node."}
{"index": 6792, "code": "public class WarningMessage extends LocatedMessage {\n\t// Returns true if this message is as or more important than the specified importance level.\n\tboolean isRelevant(int importance);\n\t// Returns true if a warning would be relevant to the specified level.\n\tstatic boolean isRelevant(int actual, int limit);\n\t// Writes this message to the specified PrintWriter.\n\tvoid write(PrintWriter writer, Janitor janitor);\n}", "des": "A class for warning messages."}
{"index": 6793, "code": "public class WhileStatement extends Statement implements LoopingStatement {\n\tBooleanExpression getBooleanExpression();\n\t// Gets the loop block.\n\tStatement getLoopBlock();\n\tvoid setBooleanExpression(BooleanExpression booleanExpression);\n\t// Sets the loop block.\n\tvoid setLoopBlock(Statement loopBlock);\n\tvoid visit(GroovyCodeVisitor visitor);\n}", "des": "Represents a while (condition) { ..."}
{"index": 6794, "code": "public abstract class AbstractSecurityBuilder<O> extends Object implements SecurityBuilder<O> {\n\t// Builds the object and returns it or null.\n\tfinal O build();\n\t// Subclasses should implement this to perform the build.\n\tprotected abstract O doBuild();\n\t// Gets the object that was built.\n\tfinal O getObject();\n}", "des": "A base SecurityBuilder that ensures the object being built is only built one time."}
{"index": 6795, "code": "@FunctionalInterface public interface Customizer<T> {\n\t// Performs the customizations on the input argument.\n\tvoid customize(T t);\n\t// Returns a Customizer that does not alter the input argument.\n\tstatic <T> Customizer<T> withDefaults();\n}", "des": "Callback interface that accepts a single input argument and returns no result."}
{"index": 6796, "code": "public final class DefaultLoginPageConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<DefaultLoginPageConfigurer<H>,H> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(H http);\n\t// Initialize the SecurityBuilder.\n\tvoid init(H http);\n}", "des": "Adds a Filter that will generate a login page if one is not specified otherwise when using EnableWebSecurity."}
{"index": 6797, "code": "@Order(100) public abstract class GlobalAuthenticationConfigurerAdapter extends Object implements SecurityConfigurer<org.springframework.security.authentication.AuthenticationManager,AuthenticationManagerBuilder> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(AuthenticationManagerBuilder auth);\n\t// Initialize the SecurityBuilder.\n\tvoid init(AuthenticationManagerBuilder auth);\n}", "des": "A SecurityConfigurer that can be exposed as a bean to configure the global AuthenticationManagerBuilder."}
{"index": 6798, "code": "public final class PasswordManagementConfigurer<B extends HttpSecurityBuilder<B>> extends AbstractHttpConfigurer<PasswordManagementConfigurer<B>,B> {\n\t// Sets the change password page.\n\tPasswordManagementConfigurer<B> changePasswordPage(String changePasswordPage);\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(B http);\n}", "des": "Adds password management support."}
{"index": 6799, "code": "public enum PayloadInterceptorOrder extends Enum<PayloadInterceptorOrder> implements org.springframework.core.Ordered {\n\tint getOrder();\n\t// Returns the enum constant of this class with the specified name.\n\tstatic PayloadInterceptorOrder valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic PayloadInterceptorOrder[] values();\n}", "des": "The standard order for PayloadInterceptor to be sorted."}
{"index": 6800, "code": "public final class PortMapperConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<PortMapperConfigurer<H>,H> {\n\t// Adds a port mapping\n\tPortMapperConfigurer<H>.HttpPortMapping http(int httpPort);\n\t// Initialize the SecurityBuilder.\n\tvoid init(H http);\n\t// Allows specifying the PortMapper instance.\n\tPortMapperConfigurer<H> portMapper(org.springframework.security.web.PortMapper portMapper);\n}", "des": "Allows configuring a shared PortMapper instance used to determine the ports when redirecting between HTTP and HTTPS."}
{"index": 6801, "code": "public interface SecurityConfigurer<O,B extends SecurityBuilder<O>> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(B builder);\n\t// Initialize the SecurityBuilder.\n\tvoid init(B builder);\n}", "des": "Allows for configuring a SecurityBuilder."}
{"index": 6802, "code": "public enum SessionCreationPolicy extends Enum<SessionCreationPolicy> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic SessionCreationPolicy valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic SessionCreationPolicy[] values();\n}", "des": "Specifies the various session creation policies for Spring Security."}
{"index": 6803, "code": "public class UserDetailsServiceConfigurer<B extends ProviderManagerBuilder<B>,C extends UserDetailsServiceConfigurer<B,C,U>,U extends org.springframework.security.core.userdetails.UserDetailsService> extends AbstractDaoAuthenticationConfigurer<B,C,U> {\n\t// Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid configure(B builder);\n\t// Allows subclasses to initialize the UserDetailsService.\n\tprotected void initUserDetailsService();\n}", "des": "Allows configuring a UserDetailsService within a AuthenticationManagerBuilder."}
{"index": 6804, "code": "public class StringValueTestXPathMessageSelector extends AbstractXPathMessageSelector {\n\t// Evaluate the payload and return true if the value returned by the XPathExpression is equal to the valueToTestFor.\n\tboolean accept(org.springframework.messaging.Message<?> message);\n\t// Specify whether comparison of value returned by XPathExpression to test value should be case sensitive.\n\tvoid setCaseSensitive(boolean caseSensitive);\n}", "des": "XPath MessageSelector that tests if a provided value supports payloads of type Document or String."}
{"index": 6805, "code": "public class UnmarshallingTransformer extends org.springframework.integration.transformer.AbstractPayloadTransformer<Object,Object> {\n\tString getComponentType();\n\t// If true always delegate to the SourceFactory.\n\tvoid setAlwaysUseSourceFactory(boolean alwaysUseSourceFactory);\n\t// Provide the SourceFactory to be used.\n\tvoid setSourceFactory(SourceFactory sourceFactory);\n\tObject transformPayload(Object payload);\n}", "des": "An implementation of Transformer that delegates to an OXM Unmarshaller."}
{"index": 6806, "code": "public enum XPathEvaluationType extends Enum<XPathEvaluationType> {\n\tabstract Object evaluateXPath(org.springframework.xml.xpath.XPathExpression expression, Node node);\n\t// Returns the enum constant of this class with the specified name.\n\tstatic XPathEvaluationType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic XPathEvaluationType[] values();\n}", "des": "Enumeration of different types of XPath evaluation used to indicate the type of evaluation that should be carried out using a provided XPath expression."}
{"index": 6807, "code": "public interface AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "Feign contract method parameter processor."}
{"index": 6808, "code": "public static interface AnnotatedParameterProcessor.AnnotatedParameterContext {\n\t// Retrieves the method metadata.\n\tfeign.MethodMetadata getMethodMetadata();\n\t// Retrieves the index of the parameter.\n\tint getParameterIndex();\n\t// Sets the parameter name.\n\tvoid setParameterName(String name);\n\t// Sets the template parameter.\n\tCollection<String> setTemplateParameter(String name, Collection<String> rest);\n}", "des": "Specifies the parameter context."}
{"index": 6809, "code": "public class CookieValueParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "CookieValue annotation processor."}
{"index": 6810, "code": "public static enum FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy extends Enum<FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy[] values();\n}", "des": "Enumeration of pool concurrency policies."}
{"index": 6811, "code": "public static enum FeignHttpClientProperties.Hc5Properties.PoolReusePolicy extends Enum<FeignHttpClientProperties.Hc5Properties.PoolReusePolicy> {\n\t// Returns the enum constant of this type with the specified name.\n\tstatic FeignHttpClientProperties.Hc5Properties.PoolReusePolicy valueOf(String name);\n\t// Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic FeignHttpClientProperties.Hc5Properties.PoolReusePolicy[] values();\n}", "des": "Enumeration of pooled connection re-use policies."}
{"index": 6812, "code": "public class MatrixVariableParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "MatrixVariable annotation processor."}
{"index": 6813, "code": "public class PathVariableParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "PathVariable parameter processor."}
{"index": 6814, "code": "public class QueryMapParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "SpringQueryMap parameter processor."}
{"index": 6815, "code": "public class RequestHeaderParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "RequestHeader parameter processor."}
{"index": 6816, "code": "public class RequestParamParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "RequestParam parameter processor."}
{"index": 6817, "code": "public class RequestPartParameterProcessor extends Object implements AnnotatedParameterProcessor {\n\t// Retrieves the processor supported annotation type.\n\tClass<? extends Annotation> getAnnotationType();\n\t// Process the annotated parameter.\n\tboolean processArgument(AnnotatedParameterProcessor.AnnotatedParameterContext context, Annotation annotation, Method method);\n}", "des": "RequestPart parameter processor."}
{"index": 6818, "code": "public static enum RedisLockRegistry.RedisLockType extends Enum<RedisLockRegistry.RedisLockType> {\n\t// Returns the enum constant of this class with the specified name.\n\tstatic RedisLockRegistry.RedisLockType valueOf(String name);\n\t// Returns an array containing the constants of this enum class, in the order they are declared.\n\tstatic RedisLockRegistry.RedisLockType[] values();\n}", "des": "The mode in which this registry is going to work with locks."}
{"index": 6819, "code": "public class RedisMetadataStore extends Object implements org.springframework.integration.metadata.ConcurrentMetadataStore {\n\t// Retrieve the persisted value for the provided key.\n\tString get(String key);\n\t// Persists the provided key and value to Redis.\n\tvoid put(String key, String value);\n\tString putIfAbsent(String key, String value);\n\tString remove(String key);\n\tboolean replace(String key, String oldValue, String newValue);\n}", "des": "Redis implementation of ConcurrentMetadataStore."}
{"index": 6820, "code": "public class AntiAffinityGroupPolicyFilter extends Object implements BrokerFilter {\n\t// Filter out unqualified brokers based on implementation.\n\tMap<String,BrokerLookupData> filter(Map<String,BrokerLookupData> brokers, org.apache.pulsar.common.naming.ServiceUnitId serviceUnitId, LoadManagerContext context);\n\t// The broker filter name.\n\tString name();\n}", "des": "Filter by anti-affinity-group-policy."}
{"index": 6821, "code": "public interface BrokerFilter {\n\t// Filter out unqualified brokers based on implementation.\n\tMap<String,BrokerLookupData> filter(Map<String,BrokerLookupData> brokers, org.apache.pulsar.common.naming.ServiceUnitId serviceUnit, LoadManagerContext context);\n\t// The broker filter name.\n\tString name();\n}", "des": "Filter out unqualified Brokers, which are not entered into LoadBalancer for decision-making."}
{"index": 6822, "code": "public interface BrokerHostUsage {\n\t// Calculate the host usage information.\n\tvoid calculateBrokerHostUsage();\n\t// Returns the host usage information.\n\torg.apache.pulsar.policies.data.loadbalancer.SystemResourceUsage getBrokerHostUsage();\n}", "des": "Class that will return the broker host usage."}
{"index": 6823, "code": "public class BrokerInterceptorUtils extends Object {\n\t// Retrieve the broker interceptor definition from the provided handler nar package.\n\tBrokerInterceptorDefinition getBrokerInterceptorDefinition(String narPath, String narExtractionDirectory);\n\t// Search and load the available broker interceptors.\n\tBrokerInterceptorDefinitions searchForInterceptors(String interceptorsDirectory, String narExtractionDirectory);\n}", "des": "Util class to search and load BrokerInterceptors."}
