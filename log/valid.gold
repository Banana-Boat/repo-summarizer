0	Abstract class for all code-generating CGLIB utilities.
1	Type filter that exposes a ClassMetadata object to subclasses, for class testing purposes.
2	Abstract base class for Decoder implementations that can decode a DataBuffer directly to the target element type.
3	Abstract base class for Decoder implementations.
4	Abstract base class for Encoder implementations.
5	Abstract base class for Environment implementations.
6	Abstract base class for resources which resolve URLs into File references, such as UrlResource or ClassPathResource.
7	Abstract base class for resolving properties against any underlying source.
8	Convenience base class for Resource implementations, pre-implementing typical behavior.
9	Abstract base class for Encoder classes that can only deal with a single value.
10	Type filter that is aware of traversing over hierarchy.
11	Base TypeReference implementation that ensures consistent behaviour for equals(), hashCode(), and toString() based on the canonical name.
12	Determine the access control of a Member or type signature.
13	Access visibility types as determined by the modifiers on a Member or ResolvableType.
14	Common interface for managing aliases.
15	An IdGenerator that uses SecureRandom for the initial seed and Random thereafter, instead of calling UUID.randomUUID() every time as JdkIdGenerator does.
16	General utility methods for finding annotations, meta-annotations, and repeatable annotations on AnnotatedElements.
17	Defines access to the annotations of a specific type (class or method), in a form that does not necessarily require the class-loading.
18	LinkedHashMap subclass representing annotation attribute key-value pairs as read by AnnotationUtils, AnnotatedElementUtils, and Spring's reflection- and ASM-based AnnotationMetadata implementations.
19	AnnotationAwareOrderComparator is an extension of OrderComparator that supports Spring's Ordered interface as well as the @Order and @Priority annotations, with an order value provided by an Ordered instance overriding a statically defined annotation value (if any).
20	Callback interface that can be used to filter specific annotation types.
21	Interface that defines abstract access to the annotations of a specific class, in a form that does not require that class to be loaded yet.
22	A simple TypeFilter which matches classes with a given annotation, checking inherited annotations as well.
23	General utility methods for working with annotations, handling meta-annotations, bridge methods (which the compiler generates for generic declarations) as well as super methods (for optional annotation inheritance).
24	A visitor to visit a Java annotation.
25	PathMatcher implementation for Ant-style path patterns.
26	Tests whether a string matches against a pattern via a Pattern.
27	The default Comparator implementation returned by AntPathMatcher.getPatternComparator(String).
28	Utility for determining if AOT-processed optimizations must be used rather than the regular runtime.
29	Instruments the application startup phase using steps.
30	Type filter that uses AspectJ type pattern for matching.
31	Assertion utility class that assists in validating arguments.
32	A simple filter which matches classes that are assignable to a given type.
33	Extended interface for asynchronous TaskExecutor implementations, offering support for Callable.
34	A non standard class, field, method or Code attribute, as defined in the Java Virtual Machine Specification (JVMS).
35	Interface defining a generic contract for attaching and accessing metadata to/from arbitrary objects.
36	Support class for AttributeAccessors, providing a base implementation of all methods.
37	Simple List wrapper class that allows for elements to be automatically populated as they are requested.
38	Factory interface for creating elements for an index-based access data structure such as a List.
39	Provide a BackOffExecution that indicates the rate at which an operation should be retried.
40	Represent a particular back-off execution.
41	A Map-based view of a JavaBean.
42	Register the necessary reflection hints so that the specified type can be bound at runtime.
43	A Comparator for Boolean objects that can sort either true or false first.
44	Helper for resolving synthetic bridge Methods to the Method being bridged.
45	Decoder for byte arrays.
46	Encoder for byte arrays.
47	Resource implementation for a given byte array.
48	Decoder for ByteBuffers.
49	Encoder for ByteBuffers.
50	A dynamically extensible vector of bytes.
51	Caching implementation of the MetadataReaderFactory interface, caching a MetadataReader instance per Spring Resource handle (i.e.
52	Map methods of subclasses generated by Enhancer to a particular callback.
53	Encode from a CharSequence stream to a bytes stream.
54	Utilities for core hint inference on Spring-managed classes, specifically for proxy types such as interface-based JDK proxies and CGLIB-generated subclasses which need proxy/reflection hints.
55	CGLIB GeneratorStrategy variant which exposes the application ClassLoader as current thread context ClassLoader for the time of class generation.
56	Interface that defines abstract metadata of a specific class, in a form that does not require that class to be loaded yet.
57	Generate unique class names based on a target ClassName and a feature name.
58	Resource implementation for class path resources.
59	A parser to make a ClassVisitor visit a ClassFile structure, as defined in the Java Virtual Machine Specification (JVMS).
60	ResourceLoader implementation that interprets plain resource paths as relative to a given java.lang.Class.
61	Exception thrown when the constant pool of a class produced by a ClassWriter is too large.
62	Miscellaneous java.lang.Class utility methods.
63	A visitor to visit a Java class.
64	A ClassVisitor that generates a corresponding ClassFile structure, as defined in the Java Virtual Machine Specification (JVMS).
65	Extension of DataBuffer that allows for buffers that can be used in a try-with-resources statement.
66	Factory for collections that is aware of common Java and Spring collection types.
67	Miscellaneous collection utility methods.
68	Abstract base class for PropertySource implementations backed by command line arguments.
69	java.io.Writer adapter for a Commons Logging Log.
70	Comparator that adapts Comparables to the Comparator interface.
71	Convenient entry point with generically typed factory methods for common Spring Comparator variants.
72	Composite iterator that combines multiple other iterators, as registered via CompositeIterator.add(Iterator).
73	Composite PropertySource implementation that iterates over a set of PropertySource instances.
74	Support class for throttling concurrent access to a specific resource.
75	Simple LRU (Least Recently Used) cache, bounded by a specified cache capacity.
76	A ConcurrentHashMap that uses soft or weak references for both keys and values.
77	A single map entry.
78	A reference to an ConcurrentReferenceHashMap.Entry contained in the map.
79	Various reference types supported by this map.
80	The types of restructuring that can be performed.
81	Allows a Converter, GenericConverter or ConverterFactory to conditionally execute based on attributes of the source and target TypeDescriptor.
82	Contract for runtime hints that only apply if the described condition is met.
83	Configuration interface to be implemented by most if not all Environment types.
84	Special ObjectInputStream subclass that resolves class names against a specific ClassLoader.
85	Configuration interface to be implemented by most if not all PropertyResolver types.
86	A constant whose value is computed at runtime, with a bootstrap method.
87	This class can be used to parse other classes containing constant definitions in public static final members.
88	Extended interface for a resource that is loaded from an enclosing 'context', e.g.
89	Provides methods to support various naming and other conventions used throughout the framework.
90	Exception to be thrown when an actual type conversion attempt fails.
91	A service interface for type conversion.
92	A factory for common ConversionService configurations.
93	A converter converts a source object of type S to a target of type T.
94	A factory for "ranged" converters that can convert objects from S to subtypes of R.
95	Exception to be thrown when a suitable converter could not be found in a given conversion service.
96	For registering converters with a type conversion system.
97	A Comparator that converts values before they are compared.
98	Adapter that exposes a PropertyEditor for any given ConversionService and specific target type.
99	Utilities for working with Kotlin Coroutines.
100	Simple customizable helper class for creating new Thread instances.
101	Customizes key types for KeyFactory when building equals, hashCode, and toString.
102	Basic abstraction over byte buffers.
103	A dedicated iterator type that ensures the lifecycle of iterated ByteBuffer elements.
104	Simple pass-through decoder for DataBuffers.
105	Simple pass-through encoder for DataBuffers.
106	A factory for DataBuffers, allowing for allocation and wrapping of data buffers.
107	Utility class for working with DataBuffers.
108	Contract to find delimiter(s) against one or more data buffers that can be passed one at a time to the DataBufferUtils.Matcher.match(DataBuffer) method.
109	Provides a convenient implementation of the DataBuffer interface that can be overridden to adapt the delegate.
110	A data size, such as '12MB'.
111	A standard set of DataSize units.
112	Strategy for decoding a DataBuffer input stream into an output stream of elements of type <T>.
113	Base class for decorating ClassLoaders such as OverridingClassLoader and org.springframework.instrument.classloading.ShadowingClassLoader, providing common handling of excluded packages and classes.
114	Interface to be implemented by decorating proxies, in particular Spring AOP proxies but potentially also custom proxies with decorator semantics.
115	A specialization of GenericConversionService configured by default with converters appropriate for most environments.
116	Default implementation of the DataBuffer interface that uses a ByteBuffer internally.
117	Default implementation of the DataBufferFactory interface.
118	A default Deserializer implementation that reads an input stream using Java serialization.
119	Default GenerationContext implementation.
120	Default MethodReference implementation based on a MethodSpec.
121	The default policy used by AbstractClassGenerator.
122	Default implementation of the PropertiesPersister interface.
123	The default implementation for PropertySourceFactory, wrapping every resource in a ResourcePropertySource.
124	Default implementation of the ResourceLoader interface.
125	ClassPathResource that explicitly expresses a context-relative path through implementing the ContextResource interface.
126	A Serializer implementation that writes an object to an output stream using Java serialization.
127	Spring's default toString() styler.
128	Converts objects to String form, generally for debugging purposes, using Spring's toString styling conventions.
129	Simple Resource implementation that holds a resource description but does not point to an actually readable resource.
130	A strategy interface for converting from data in an InputStream to an Object.
131	A Converter that delegates to a Deserializer to convert data in a byte array to an object.
132	Miscellaneous methods for calculating digests.
133	Dispatching Enhancer callback.
134	Convenience methods for working with the DOM API, in particular for working with DOM Nodes and DOM Elements.
135	Holder that combines a Resource descriptor with a specific encoding or Charset to be used for reading from the resource.
136	Strategy to encode a stream of Objects of type <T> into an output stream of bytes.
137	Generates dynamic subclasses to enable method interception.
138	A PropertySource implementation capable of interrogating its underlying source object to enumerate all possible property name/value pairs.
139	Interface representing the environment in which the current application is running.
140	Interface indicating a component that contains and exposes an Environment reference.
141	A strategy for handling errors.
142	Comparator capable of sorting exceptions based on their depth from the thrown exception type.
143	An InstanceFilter implementation that handles exception types.
144	A hint that describes the need for reflection on a Method or Constructor.
145	Builder for ExecutableHint.
146	Represent the need of reflection for a given Executable.
147	Adapter that takes a Spring TaskExecutor and exposes a full java.util.concurrent.ExecutorService for it.
148	Implementation of BackOff that increases the back off period for each retry attempt.
149	All enhanced instances returned by the Enhancer class implement this interface.
150	A speedy alternative to ByteArrayOutputStream.
151	Customizes key types for KeyFactory right in constructor.
152	A visitor to visit a Java field.
153	Simple utility methods for file and stream copying.
154	A NativeConfigurationWriter implementation that writes the configuration to disk.
155	Register the necessary resource hints for loading files from the classpath.
156	GeneratedFiles implementation that stores generated files using a FileSystem.
157	Resource implementation for java.io.File and java.nio.file.Path handles with a file system target.
158	ResourceLoader implementation that resolves plain paths as file system resources rather than as class path resources (the latter is DefaultResourceLoader's default strategy).
159	Utility methods for working with the file system.
160	Subclass of UrlResource which assumes file resolution, to the degree of implementing the WritableResource interface for it.
161	A simple BackOff implementation that provides a fixed interval between two attempts and a maximum number of retries.
162	Enhancer callback that simply returns the value to return from the proxied method.
163	ApplicationStartup implementation for the Java Flight Recorder.
164	Convenience utilities for working with Future and implementations.
165	A single generated class.
166	A managed collection of generated classes.
167	Interface that can be used to add source, resource, or class files generated during ahead-of-time processing.
168	The various kinds of generated files that are supported.
169	A generated method.
170	A managed collection of generated methods.
171	A TypeReference for a generated type.
172	Central interface used for code generation.
173	The GeneratorStrategy is responsible for taking a ClassGenerator and producing a byte array containing the data for the generated Class.
174	Base ConversionService implementation suitable for use in most environments.
175	Generic converter interface for converting between two or more types.
176	Holder for a source-to-target class pair.
177	Helper class for resolving generic types against type variables.
178	A reference to a field or a method.
179	Constants and convenience methods for working with hints.
180	Contract for generating universally unique identifiers (UUIDs).
181	Interface to be implemented by transparent resource proxies that need to be considered as equal to the underlying resource, for example for consistent lookup key comparisons.
182	GeneratedFiles implementation that keeps generated files in-memory.
183	Resource implementation for a given InputStream.
184	Simple interface for objects that are sources for an InputStream.
185	Compares objects based on an arbitrary class order.
186	A simple instance filter that checks if a given instance match based on a collection of includes and excludes element.
187	Generates new interfaces at runtime.
188	Exception thrown from MimeTypeUtils.parseMimeType(String) in case of encountering an invalid content type specification String.
189	InvocationHandler replacement (unavailable under JDK 1.2).
190	A hint that describes the need for Java serialization at runtime.
191	Builder for JavaSerializationHint.
192	An IdGenerator that calls UUID.randomUUID().
193	A hint that describes the need for a JDK interface-based Proxy.
194	Builder for JdkProxyHint.
195	CommandLinePropertySource implementation backed by a JOpt OptionSet.
196	Generates classes to handle multi-valued keys, for use in things such as Maps and Sets.
197	A common delegate for detecting Kotlin's presence and for identifying Kotlin types.
198	ParameterNameDiscoverer implementation which uses Kotlin's reflection facilities for introspecting parameter names.
199	A position in the bytecode of a method.
200	Lazy-loading Enhancer callback.
201	Custom List to collect data buffers with and enforce a limit on the total number of bytes buffered.
202	LinkedHashMap variant that stores String keys in a case-insensitive manner, for example for key-based access in a results table.
203	Simple implementation of MultiValueMap that wraps a LinkedHashMap, storing multiple values in an ArrayList.
204	Helper class for loading a localized resource, specified through name, extension and current locale.
205	A MethodVisitor that renumbers local variables in their order of appearance.
206	A convenient accessor for Commons Logging, providing not only CharSequence based log methods but also Supplier based variants for use with Java 8 lambda expressions.
207	Factory for common Log delegates with Spring's logging conventions.
208	Utility methods for formatting and logging messages.
209	A simple log message type for use with Commons Logging, allowing for convenient lazy resolution of a given Supplier instance (typically bound to a lambda expression) or a printf-style format string (String.format(java.lang.String, java.lang.Object...)) in its LogMessage.toString().
210	PropertySource that reads keys and values from a Map object.
211	Predefined Member categories.
212	Base hint that describes the need for reflection on a Member.
213	A single merged annotation returned from a MergedAnnotations collection.
214	Adaptations that can be applied to attribute values when creating Maps or AnnotationAttributes.
215	Collector implementations that provide various reduction operations for MergedAnnotation instances.
216	Predicate implementations that provide various test operations for MergedAnnotations.
217	Provides access to a collection of merged annotations, usually obtained from a source such as a Class or Method.
218	Fluent API for configuring the search algorithm used in the MergedAnnotations model and performing a search.
219	Search strategies supported by MergedAnnotations.search(SearchStrategy) as well as MergedAnnotations.from(AnnotatedElement, SearchStrategy) and variants of that method.
220	Strategy interface used to select between two MergedAnnotation instances.
221	MergedAnnotationSelector implementations that provide various options for MergedAnnotation instances.
222	Simple facade for accessing class metadata, as read by an ASM ClassReader.
223	Factory interface for MetadataReader instances.
224	A common key class for a method against a specific target class, including MethodClassKey.toString() representation and Comparable support (as suggested for custom HashMap keys as of Java 8).
225	DOCUMENTATION FROM APACHE AVALON DELEGATE CLASS
226	General-purpose Enhancer callback which provides for "around advice".
227	Defines the algorithm for searching for metadata-associated methods exhaustively including interfaces and parent classes while also dealing with parameterized methods as well as common scenarios encountered with interface and class-based proxies.
228	A callback interface for metadata lookup on a given method.
229	Helper class that allows for specifying a method to invoke in a declarative fashion, be it static or non-static.
230	Interface that defines abstract access to the annotations of a specific method, in a form that does not require that method's class to be loaded yet.
231	Helper class that encapsulates the specification of a method parameter, i.e.
232	Classes generated by Enhancer pass this object to the registered MethodInterceptor objects when an intercepted method is invoked.
233	A reference to a method with convenient code generation for referencing, or invoking it.
234	Strategy for generating code for arguments based on their type.
235	Exception thrown when the Code attribute of a method produced by a ClassWriter is too large.
236	A visitor to visit a Java method.
237	Represents a MIME Type, as originally defined in RFC 2046 and subsequently used in other Internet protocols including HTTP.
238	Miscellaneous MimeType utility methods.
239	Exception thrown when required properties are not found.
240	Mixin allows multiple objects to be combined into a single larger object.
241	A visitor to visit a Java module.
242	Extension of the Map interface that stores multiple values.
243	Adapts a given Map to the MultiValueMap contract.
244	The default implementation of the PropertySources interface.
245	InheritableThreadLocal subclass that exposes a specified name as NamedInheritableThreadLocal.toString() result (allowing for introspection).
246	ThreadLocal subclass that exposes a specified name as NamedThreadLocal.toString() result (allowing for introspection).
247	Customize the generated class name for AbstractClassGenerator-based utilities.
248	Write RuntimeHints as GraalVM native configuration.
249	A common delegate for detecting a GraalVM native image environment.
250	Native image context as defined in GraalVM's ImageInfo.
251	Handy class for wrapping checked Exceptions with a root cause.
252	Helper class for implementing exception classes which are capable of holding nested exceptions.
253	Handy class for wrapping runtime Exceptions with a root cause.
254	Decoder for Buffers.
255	Encoder for Buffers.
256	Implementation of the DataBuffer interface that wraps a Netty 5 Buffer.
257	Implementation of the DataBufferFactory interface based on a Netty 5 BufferAllocator.
258	Decoder for ByteBufs.
259	Encoder for ByteBufs.
260	Implementation of the DataBuffer interface that wraps a Netty 4 ByteBuf.
261	Implementation of the DataBufferFactory interface based on a Netty 4 ByteBufAllocator.
262	A Comparator that will safely compare nulls to be lower or higher than other objects.
263	Miscellaneous utility methods for number conversion and parsing.
264	Miscellaneous object utility methods.
265	Comparator implementation for Ordered objects, sorting by order value ascending, respectively by priority descending.
266	Strategy interface to provide an order source for a given object.
267	Ordered is an interface that can be implemented by objects that should be orderable, for example in a Collection.
268	General utility for determining the order of an object based on its type declaration.
269	ClassLoader that does not always delegate to the parent loader as normal class loaders do.
270	For the efficient sorting of multiple arrays in parallel.
271	The purpose of this class is to enable capturing and passing a generic Type.
272	Interface to discover parameter names for methods and constructors.
273	Strategy interface for String-based path matching.
274	A ResourcePatternResolver implementation that is able to resolve a specified resource location path into one or more matching Resources.
275	Resource implementation for Path handles, performing all operations and transformations via the Path API.
276	Utility methods for simple pattern matching, in particular for Spring's typical "xxx*", "*xxx" and "*xxx*" pattern styles.
277	Extension of DataBuffer that allows for buffers that share a memory pool.
278	ParameterNameDiscoverer implementation that tries several discoverer delegates in succession.
279	Profile predicate that may be accepted by an Environment.
280	Base class for JavaBean-style components that need to load properties from one or more resources.
281	Convenient utility methods for loading of java.util.Properties, performing standard handling of input streams.
282	Strategy interface for persisting java.util.Properties, allowing for pluggable parsing strategies.
283	PropertySource implementation that extracts properties from a Properties object.
284	A description of a JavaBeans Property that allows us to avoid a dependency on java.beans.PropertyDescriptor.
285	Utility class for working with Strings that have placeholder values in them.
286	Strategy interface used to resolve replacement values for placeholders contained in Strings.
287	Interface for resolving properties against any underlying source.
288	Abstract base class representing a source of name/value property pairs.
289	PropertySource to be used as a placeholder in cases where an actual property source cannot be eagerly initialized at application context creation time.
290	Describe a PropertySource.
291	Strategy interface for creating resource-based PropertySource wrappers.
292	Contribute property sources to the Environment.
293	Holder containing one or more PropertySource objects.
294	PropertyResolver implementation that resolves property values against an underlying set of PropertySources.
295	A resolution strategy for protocol-specific resource handles.
296	This class is meant to be used as replacement for java.lang.reflect.Proxy under JDK 1.2.
297	Gather the need for using proxies at runtime.
298	Generator of ProxyHints predicates, testing whether the given hints match the expected behavior for proxies.
299	Dispatching Enhancer callback.
300	Adapter for a Reactive Streams Publisher to and from an async/reactive type such as CompletableFuture, RxJava Observable, and others.
301	A registry of adapters to adapt Reactive Streams Publisher to/from various async/reactive types such as CompletableFuture, RxJava Flowable, and others.
302	BlockHoundIntegration for spring-core classes.
303	Describes the semantics of a reactive type including boolean checks for ReactiveTypeDescriptor.isMultiValue(), ReactiveTypeDescriptor.isNoValue(), and ReactiveTypeDescriptor.supportsEmpty().
304	A visitor to visit a record component.
305	Gather the need for reflection at runtime.
306	Generator of ReflectionHints predicates, testing whether the given hints match the expected behavior for reflection.
307	Simple utility class for working with the reflection API and handling reflection exceptions.
308	Callback interface invoked on each field in the hierarchy.
309	Callback optionally used to filter fields to be operated on by a field callback.
310	Action to take on each method.
311	Callback optionally used to filter methods to be operated on by a method callback.
312	Process an AnnotatedElement and register the necessary reflection hints for it.
313	Process @Reflective annotated elements.
314	A simple filter for matching a fully-qualified class name with a regex Pattern.
315	A ReflectiveProcessor implementation that registers reflection hints for data binding purpose (class, constructors, fields, properties, record components, including types transitively used on properties and record components).
316	Strategy used to determine annotations that act as containers for other annotations.
317	An extension of ByteArrayOutputStream that: has public ResizableByteArrayOutputStream.grow(int) and ResizableByteArrayOutputStream.resize(int) methods to get more control over the size of the internal buffer has a higher initial capacity (256) by default
318	Encapsulates a Java Type, providing access to supertypes, interfaces, and generic parameters along with the ability to ultimately resolve to a Class.
319	Any object can implement this interface to provide its actual ResolvableType.
320	Interface for a resource descriptor that abstracts from the actual type of underlying resource, such as a file or class path resource.
321	Editor for Resource arrays, to automatically convert String location patterns (e.g.
322	A hint that describes the need to access a ResourceBundle.
323	Builder for ResourceBundleHint.
324	Decoder for Resources.
325	Editor for Resource descriptors, to automatically convert String locations e.g.
326	Encoder for Resources.
327	Gather the need for resources available at runtime.
328	Generator of ResourceHints predicates, testing whether the given hints match the expected behavior for resources.
329	Strategy interface for loading resources (e.g., class path or file system resources).
330	A hint that describes resources that should be made available at runtime.
331	A collection of ResourcePatternHint describing whether resources should be made available at runtime using a matching algorithm based on include/exclude patterns.
332	Builder for ResourcePatternHints.
333	Strategy interface for resolving a location pattern (for example, an Ant-style path pattern) into Resource objects.
334	Utility class for determining whether a given URL is a resource location that can be loaded via a ResourcePatternResolver.
335	Subclass of PropertiesPropertySource that loads a Properties object from a given Resource or resource location such as "classpath:/com/myco/foo.properties" or "file:/path/to/file.xml".
336	Region of a Resource implementation, materialized by a position within the Resource and a byte count for the length of that region.
337	Encoder for ResourceRegions.
338	Utility methods for resolving resource locations to files in the file system.
339	Contract for matching routes to patterns.
340	A parsed representation of a route.
341	Gather hints that can be used to optimize the application runtime.
342	Static generator of predicates that test whether the given RuntimeHints instance matches the expected behavior for reflection, resource, serialization, or proxy generation.
343	Contract for registering RuntimeHints based on the ClassLoader of the deployment unit.
344	A convenient delegate with pre-arranged configuration state for common serialization needs.
345	Gather the need for Java serialization at runtime.
346	Generator of SerializationHints predicates, testing whether the given hints match the expected behavior for serialization.
347	Static utilities for serialization and deserialization using Java Object Serialization.
348	A strategy interface for streaming an object to an OutputStream.
349	A Converter that delegates to a Serializer to convert an object to a byte array.
350	A representation of a method signature, containing the method name, return type, and parameter types.
351	Simple implementation of the AliasRegistry interface.
352	TaskExecutor implementation that fires up a new Thread for each task, executing it asynchronously.
353	CommandLinePropertySource implementation backed by a simple String array.
354	A simple IdGenerator that starts at 1, increments up to Long.MAX_VALUE, and then rolls over.
355	Simple implementation of the MetadataReaderFactory interface, creating a new ASM ClassReader for every request.
356	Simple javax.xml.namespace.NamespaceContext implementation.
357	A simple ReflectiveProcessor implementation that registers only a reflection hint for the annotated type.
358	RouteMatcher that delegates to a PathMatcher.
359	Simple org.xml.sax.ErrorHandler implementation: logs warnings using the given Commons Logging logger instance, and rethrows errors to discontinue the XML transformation.
360	Simple javax.xml.transform.ErrorListener implementation: logs warnings using the given Commons Logging logger instance, and rethrows errors to discontinue the XML transformation.
361	ValueStyler that converts objects to String form — generally for debugging purposes — using simple styling conventions that mimic the toString() styling conventions for standard JDK implementations of collections, maps, and arrays.
362	A Supplier decorator that caches a singleton result and makes it available from SingletonSupplier.get() (nullable) and SingletonSupplier.obtain() (null-safe).
363	Interface to be implemented by a reloading-aware ClassLoader (e.g.
364	General purpose factory loading mechanism for internal use within the framework.
365	Strategy for resolving constructor arguments based on their type.
366	Strategy for handling a failure that occurs when instantiating a factory.
367	Custom variant of CGLIB's DefaultNamingPolicy, modifying the tag in generated class names from "EnhancerByCGLIB" etc to a "SpringCGLIB" tag and using a plain counter suffix instead of a hash code suffix (as of 6.0).
368	Spring-specific variant of ObjenesisStd / ObjenesisBase, providing a cache based on Class keys instead of class names, and allowing for selective use of the cache.
369	Static holder for local Spring properties, i.e.
370	Class that exposes the Spring version.
371	AnnotationMetadata implementation that uses standard reflection to introspect a given Class.
372	ClassMetadata implementation that uses standard reflection to introspect a given Class.
373	Environment implementation suitable for use in 'standard' (i.e.
374	MethodMetadata implementation that uses standard reflection to introspect a given Method.
375	ParameterNameDiscoverer implementation which uses JDK 8's reflection facilities for introspecting parameter names (based on the "-parameters" compiler flag).
376	Step recording metrics about a particular phase or action happening during the ApplicationStartup.
377	Simple key/value association for storing step metadata.
378	Convenience methods for working with the StAX API.
379	Simple stop watch, allowing for timing of a number of tasks, exposing total running time and running time for each named task.
380	Nested class to hold data about one task executed within the StopWatch.
381	Simple utility methods for dealing with streams.
382	Decode from a data buffer stream to a String stream, either splitting or aggregating incoming data chunks to realign along newlines delimiters and produce a stream of strings.
383	This class implements a simple String → int mapping for a fixed set of keys.
384	Miscellaneous String utility methods.
385	Simple strategy interface for resolving a String value.
386	Simple utility class to allow for convenient access to value styling logic, mainly to support descriptive logging messages.
387	Convenience utilities for Supplier handling.
388	TaskExecutor implementation that executes each task synchronously in the calling thread.
389	A MethodParameter variant which synthesizes annotations that declare attribute aliases via @AliasFor.
390	Specialization of MapPropertySource designed for use with system environment variables.
391	Helper class for resolving placeholders in texts.
392	A callback interface for a decorator to be applied to any Runnable about to be executed.
393	Simple task executor interface that abstracts the execution of a Runnable.
394	Adapter that takes a JDK java.util.concurrent.Executor and exposes a Spring TaskExecutor for it.
395	A BiFunction that allows invocation of code that throws a checked exception.
396	A Consumer that allows invocation of code that throws a checked exception.
397	A Function that allows invocation of code that throws a checked exception.
398	A Supplier that allows invocation of code that throws a checked exception.
399	Utility class that builds pretty-printing toString() methods with pluggable styling conventions.
400	A strategy interface for pretty-printing toString() methods.
401	Extension of DataBuffer that allows for buffers that can be given hints for debugging purposes.
402	Contains common behavior relating to Transformers and the javax.xml.transform package in general.
403	A Java field or method type.
404	Contextual descriptor about a type to convert from or to.
405	Base interface for type filters using a MetadataReader.
406	A hint that describes the need for reflection on a type.
407	Builder for TypeHint.
408	The path to a type argument, wildcard bound, array element type, or static inner type within an enclosing type.
409	Type abstraction that can be used to refer to types that are not available as a Class yet.
410	A reference to a type appearing in a class, field or method declaration, or on an instruction.
411	Utility to work with generic type parameters.
412	Used by Proxy as a replacement for java.lang.reflect.UndeclaredThrowableException.
413	A GeneratorStrategy suitable for use with Enhancer which causes all undeclared exceptions thrown from within a proxied method to be wrapped in an alternative exception of your choice.
414	Resource implementation for java.net.URL locators.
415	Strategy that encapsulates value String styling algorithms according to Spring conventions.
416	JBoss VFS based Resource implementation.
417	Utility for detecting and accessing JBoss VFS in the classpath.
418	Allows to check for object equality, yet the class does not keep strong reference to the target.
419	Extended interface for a resource that supports writing to it.
420	Detects whether an XML stream is using DTD- or XSD-based validation.
421	Abstract implementation of TransactionAttributeSource that caches attributes for methods and implements a fallback policy: 1.
422	Abstract base implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities as well as ClassLoader exposure for endpoint invocations.
423	Abstract base class that implements Spring's standard transaction workflow, serving as basis for concrete platform transaction managers like JtaTransactionManager.
424	Abstract base class that implements Spring's standard reactive transaction workflow, serving as basis for concrete platform transaction managers.
425	Abstract base @Configuration class providing common structure for enabling Spring's annotation-driven transaction management capability.
426	Abstract base implementation of the TransactionStatus interface.
427	Implementation of the TransactionAttributeSource interface for working with transaction metadata in JDK 1.5+ annotation format.
428	Advisor driven by a TransactionAttributeSource, used to include a transaction advice bean for methods that are transactional.
429	Extension of the PlatformTransactionManager interface, exposing a method for executing a given callback within a transaction.
430	Implementation of PersistenceExceptionTranslator that supports chaining, allowing the addition of PersistenceExceptionTranslator instances in order.
431	Composite TransactionAttributeSource implementation that iterates over a given array of TransactionAttributeSource instances.
432	Generic base class for DAOs, defining template methods for DAO initialization.
433	Miscellaneous utility methods for DAO implementations.
434	Spring's common transaction attribute implementation.
435	Default implementation of the TransactionDefinition interface, offering bean-style configuration and sensible default values (PROPAGATION_REQUIRED, ISOLATION_DEFAULT, TIMEOUT_DEFAULT, readOnly=false).
436	Default implementation of the TransactionStatus interface, used by AbstractPlatformTransactionManager.
437	TransactionAttribute implementation that delegates all calls to a given target TransactionAttribute instance.
438	TransactionDefinition implementation that delegates all calls to a given target TransactionDefinition instance.
439	Strategy implementation for parsing EJB3's TransactionAttribute annotation.
440	Generic implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities for any kind of message listener object (e.g.
441	Generic bean that manages JCA 1.7 message endpoints within a Spring application context, activating and deactivating the endpoint as part of the application context's lifecycle.
442	Default implementation of the ReactiveTransaction interface, used by AbstractReactiveTransactionManager.
443	Exception that represents a transaction failure caused by a heuristic decision on the side of the transaction coordinator.
444	Data access exception thrown when a result was not of the expected size, for example when expecting a single row but getting 0 or more than 1 rows.
445	Data access exception thrown when something unintended appears to have happened with an update, but the transaction hasn't already been rolled back.
446	Exception that gets thrown when an invalid timeout is specified, that is, the specified timeout valid is out of range or the transaction manager implementation doesn't support timeouts.
447	Enumeration that represents transaction isolation levels for use with the @Transactional annotation, corresponding to the TransactionDefinition interface.
448	Adapter for a JTA Synchronization, invoking the afterCommit / afterCompletion callbacks of Spring TransactionSynchronization objects callbacks after the outer JTA transaction has completed.
449	Strategy implementation for parsing JTA 1.2's Transactional annotation.
450	PlatformTransactionManager implementation for JTA, delegating to a backend JTA provider.
451	Parser for the <tx:jta-transaction-manager/> XML configuration element.
452	JTA transaction object, representing a UserTransaction.
453	FactoryBean that creates a local JCA connection factory in "non-managed" mode (as defined by the Java Connector Architecture specification).
454	Adapter for a managed JTA Transaction handle, taking a JTA TransactionManager reference and creating a JTA Transaction handle for it.
455	Very simple implementation of TransactionAttributeSource which will always return the same TransactionAttribute for all methods fed to it.
456	Simple TransactionAttributeSource implementation that allows attributes to be stored per method in a Map.
457	Simple TransactionAttributeSource implementation that allows attributes to be matched by registered name.
458	Tag subclass of RollbackRuleAttribute that has the opposite behavior to the RollbackRuleAttribute superclass.
459	Spring AOP exception translation aspect for use at Repository or DAO layer level.
460	AOP Alliance MethodInterceptor that provides persistence exception translation based on a given PersistenceExceptionTranslator.
461	Bean post-processor that automatically applies persistence exception translation to any bean marked with Spring's @Repository annotation, adding a corresponding PersistenceExceptionTranslationAdvisor to the exposed proxy (either an existing AOP proxy or a newly generated proxy that implements all of the target's interfaces).
462	Interface implemented by Spring integrations with data access technologies that throw runtime exceptions, such as JPA and Hibernate.
463	This is the central interface in Spring's imperative transaction infrastructure.
464	Enumeration that represents transaction propagation behaviors for use with the Transactional annotation, corresponding to the TransactionDefinition interface.
465	@Configuration class that registers the Spring infrastructure beans necessary to enable proxy-based annotation-driven transaction management.
466	TransactionSynchronization implementation that manages a resource object bound through TransactionSynchronizationManager.
467	This is the central interface in Spring's reactive transaction infrastructure.
468	FactoryBean that bootstraps the specified JCA 1.7 ResourceAdapter, starting it with a local BootstrapContext and exposing it for bean references.
469	Generic interface to be implemented by resource holders.
470	Convenient base class for resource holders.
471	TransactionSynchronization implementation that manages a ResourceHolder bound through TransactionSynchronizationManager.
472	Extended variant of TransactionDefinition, indicating a resource transaction and in particular whether the transactional resource is ready for local optimizations.
473	Extension of the PlatformTransactionManager interface, indicating a native resource transaction manager, operating on a single target resource.
474	Rule determining whether a given exception should cause a rollback.
475	TransactionAttribute implementation that works out whether a given exception should cause transaction rollback by applying a number of rollback rules, both positive and negative.
476	Interface that specifies an API to programmatically manage transaction savepoints in a generic fashion.
477	Simple implementation of the JCA 1.7 BootstrapContext interface, used for bootstrapping a JCA ResourceAdapter in a local environment.
478	Default implementation of the TransactionFactory strategy interface, simply wrapping a standard JTA TransactionManager.
479	A simple transaction-backed Scope implementation, delegating to TransactionSynchronizationManager's resource binding mechanism.
480	A simple TransactionStatus implementation.
481	Interface to be implemented by transaction objects that are able to return an internal rollback-only marker, typically from another transaction that has participated and marked it as rollback-only.
482	Adapter that implements the JTA Synchronization interface delegating to an underlying Spring TransactionSynchronization.
483	Strategy implementation for parsing Spring's Transactional annotation.
484	An ApplicationListener that is invoked according to a TransactionPhase.
485	Callback to be invoked on synchronization-driven event processing, wrapping the target listener invocation (TransactionalApplicationListener.processEvent(E)).
486	TransactionalApplicationListener adapter that delegates the processing of an event to a target ApplicationListener instance.
487	GenericApplicationListener adapter that delegates the processing of an event to a TransactionalEventListener annotated method.
488	EventListenerFactory implementation that handles TransactionalEventListener annotated methods.
489	Operator class that simplifies programmatic transaction demarcation and transaction exception handling.
490	Strategy interface for parsing known transaction annotation types.
491	Base class for transactional aspects, such as the TransactionInterceptor or an AspectJ aspect.
492	Coroutines-supporting extension of the callback interface.
493	Simple callback interface for proceeding with the target invocation.
494	Opaque object used to hold transaction information.
495	This interface adds a rollbackOn specification to TransactionDefinition.
496	PropertyEditor for TransactionAttribute objects.
497	Strategy interface used by TransactionInterceptor for metadata retrieval.
498	Advisor driven by a TransactionAttributeSource, used to include a TransactionInterceptor only for methods that are transactional.
499	Property editor that converts a String into a TransactionAttributeSource.
500	Callback interface for reactive transactional code.
501	Callback interface for transactional code.
502	Simple convenience class for TransactionCallback implementation.
503	Mutable transaction context that encapsulates transactional synchronizations and resources in the scope of a single transaction.
504	Delegate to register and obtain transactional contexts.
505	Interface that defines Spring-compliant transaction properties.
506	Common representation of the current state of a transaction.
507	Strategy interface for creating JTA Transaction objects based on specified transactional characteristics.
508	AOP Alliance MethodInterceptor for declarative transaction management using the common Spring transaction infrastructure (PlatformTransactionManager/ ReactiveTransactionManager).
509	Selects which implementation of AbstractTransactionManagementConfiguration should be used based on the value of EnableTransactionManagement.mode() on the importing @Configuration class.
510	Interface to be implemented by @Configuration classes annotated with @EnableTransactionManagement that wish to (or need to) explicitly specify the default PlatformTransactionManager bean (or ReactiveTransactionManager bean) to be used for annotation-driven transaction management, as opposed to the default approach of a by-type lookup.
511	Interface specifying basic transaction execution operations.
512	The phase in which a transactional event listener applies.
513	Proxy factory bean for simplified declarative transaction handling.
514	Representation of the status of a transaction.
515	Interface for reactive transaction synchronization callbacks.
516	Interface for transaction synchronization callbacks.
517	Central delegate that manages resources and transaction synchronizations per subscriber context.
518	Central delegate that manages resources and transaction synchronizations per thread.
519	Utility methods for triggering specific TransactionSynchronization callback methods on all currently registered synchronizations.
520	Exception thrown when a general transaction system error is encountered, like on commit or rollback.
521	Template class that simplifies programmatic transaction demarcation and transaction exception handling.
522	NamespaceHandler allowing for the configuration of declarative transaction management using either XML or using annotations.
523	Adapter for a JTA UserTransaction handle, taking a JTA TransactionManager reference and creating a JTA UserTransaction handle for it.
524	Abstract base class for filesystem-based ahead-of-time (AOT) processing.
525	Common settings for AOT processors.
526	Fluent builder API for AbstractAotProcessor.Settings.
527	Abstract implementation of the ApplicationContext interface.
528	Abstract implementation of the ApplicationEventMulticaster interface, providing the basic listener registration facility.
529	Abstract base Configuration class providing common structure for enabling Spring's asynchronous method execution capability.
530	Abstract implementation of the BindingResult interface and its super-interface Errors.
531	A base component for invoking Cache operations and using a configurable CacheErrorHandler when an exception occurs.
532	Abstract base class implementing the common CacheManager methods.
533	A base CacheResolver implementation that requires the concrete implementation to provide the collection of cache name(s) based on the invocation context.
534	Abstract base @Configuration class providing common structure for enabling Spring's annotation-driven cache management capability.
535	Base class for MBeanInfoAssemblers that support configurable JMX notification behavior.
536	Abstract implementation of the Errors interface.
537	Abstract implementation of CacheOperation that caches attributes for methods and implements a fallback policy: 1.
538	Base class for all JMX metadata classes.
539	Abstract implementation of the MBeanInfoAssembler interface that encapsulates the creation of a ModelMBeanInfo instance but delegates the creation of metadata to subclasses.
540	Abstract implementation of the HierarchicalMessageSource interface, implementing common handling of message variants, making it easy to implement a specific strategy for a concrete MessageSource.
541	Abstract formatter for Numbers, providing a AbstractNumberFormatter.getNumberFormat(java.util.Locale) template method.
542	Abstract base class for BindingResult implementations that work with Spring's PropertyAccessor mechanism.
543	Builds on the AbstractMBeanInfoAssembler superclass to add a basic algorithm for building metadata based on the reflective metadata of the MBean class.
544	Base class for ApplicationContext implementations which are supposed to support multiple calls to AbstractApplicationContext.refresh(), creating a new internal bean factory instance every time.
545	AbstractRefreshableApplicationContext subclass that adds common handling of specified config locations.
546	Abstract base class for MessageSource implementations based on resource bundle conventions, such as ResourceBundleMessageSource and ReloadableResourceBundleMessageSource.
547	Common base class for Cache implementations that need to adapt null values (and potentially other such special values) before passing them on to the underlying store.
548	Convenient base class for ApplicationContext implementations, drawing configuration from XML documents containing bean definitions understood by an XmlBeanDefinitionReader.
549	Enumeration used to determine whether JDK proxy-based or AspectJ weaving-based advice should be applied.
550	Convenient base class for ImportSelector implementations that select imports based on an AdviceMode value from an annotation (such as the @Enable* annotations).
551	Convenient adapter for programmatic registration of bean classes.
552	Represent an AnnotatedElement on a particular Class and is suitable as a key.
553	Specialization of AsyncExecutionInterceptor that delegates method execution to an Executor based on the Async annotation.
554	BeanNameGenerator implementation for bean classes annotated with the @Component annotation or with another annotation that is itself annotated with @Component as a meta-annotation.
555	Implementation of the CacheOperationSource interface for working with caching metadata in annotation format.
556	Callback interface providing CacheOperation instance(s) based on a given CacheAnnotationParser.
557	Standalone application context, accepting component classes as input — in particular @Configuration-annotated classes, but also plain @Component types and JSR-330 compliant classes using jakarta.inject annotations.
558	Parser for the <context:annotation-config/> element.
559	Common interface for annotation config application contexts, defining AnnotationConfigRegistry.register(java.lang.Class<?>...) and AnnotationConfigRegistry.scan(java.lang.String...) methods.
560	Utility class that allows for convenient registration of common BeanPostProcessor and BeanFactoryPostProcessor definitions for annotation-based configuration.
561	Parser for the 'annotation-driven' element of the 'task' namespace.
562	A factory that creates formatters to format values of fields annotated with a particular Annotation.
563	Implementation of the JmxAttributeSource interface that reads annotations and exposes the corresponding attributes.
564	Convenient subclass of Spring's standard MBeanExporter, activating annotation usage for JMX exposure of Spring beans: ManagedResource, ManagedAttribute, ManagedOperation, etc.
565	A ScopeMetadataResolver implementation that by default checks for the presence of Spring's @Scope annotation on the bean class.
566	Specialized ApplicationContextInitializer used to initialize a ConfigurableApplicationContext using artifacts that were generated ahead-of-time.
567	Central interface to provide configuration for an application.
568	Process an ApplicationContext and its BeanFactory to generate code that represents the state of the bean factory, as well as the necessary hints that can be used at runtime in a constrained environment.
569	Interface to be implemented by any object that wishes to be notified of the ApplicationContext that it runs in.
570	Base class for events raised for an ApplicationContext.
571	Callback interface for initializing a Spring ConfigurableApplicationContext prior to being refreshed.
572	Class to be extended by all application events.
573	Interface to be implemented by objects that can manage a number of ApplicationListener objects and publish events to them.
574	Interface that encapsulates event publication functionality.
575	Interface to be implemented by any object that wishes to be notified of the ApplicationEventPublisher (typically the ApplicationContext) that it runs in.
576	Interface to be implemented by application event listeners.
577	GenericApplicationListener adapter that delegates the processing of an event to an EventListener annotated method.
578	Convenient superclass for application objects that want to be aware of the application context, e.g.
579	Interface to be implemented by any object that wishes to be notified of the ApplicationStartup that it runs with.
580	Post-processor that registers AspectJ's ClassPreProcessorAgentAdapter with the Spring application context's default LoadTimeWeaver.
581	Advisor that activates asynchronous method execution through the Async annotation.
582	Bean post-processor that automatically applies asynchronous invocation behavior to any bean that carries the Async annotation at class or method-level by adding a corresponding AsyncAnnotationAdvisor to the exposed proxy (either an existing AOP proxy or a newly generated proxy that implements all the target's interfaces).
583	Selects which implementation of AbstractAsyncConfiguration should be used based on the value of EnableAsync.mode() on the importing @Configuration class.
584	Interface to be implemented by @Configuration classes annotated with @EnableAsync that wish to customize the Executor instance used when processing async method invocations or the AsyncUncaughtExceptionHandler instance used to process exception thrown from async method with void return type.
585	Extends the MBeanInfoAssembler to add autodetection logic.
586	Registers an auto proxy creator against the current BeanDefinitionRegistry as appropriate based on an @Enable* annotation having mode and proxyTargetClass attributes set to the correct values.
587	The base interface that all cache operations must implement.
588	EL property accessor that knows how to traverse the beans and contextual objects of a Spring BeanExpressionContext.
589	EL property accessor that knows how to traverse the beans of a Spring BeanFactory.
590	Advisor driven by a CacheOperationSource, used to include a cache advice bean for methods that are cacheable.
591	EL bean resolver that operates against a Spring BeanFactory.
592	Default implementation of the Errors and BindingResult interfaces, for the registration and evaluation of binding errors on JavaBean objects.
593	Simple BeanPostProcessor that checks JSR-303 constraint annotations in Spring-managed beans, throwing an initialization exception in case of constraint violations right before calling the bean's init method (if any).
594	Thrown when binding errors are considered fatal.
595	Subclass of ConcurrentModel that automatically removes the BindingResult object when its corresponding target attribute is replaced through regular Map operations.
596	Subclass of ExtendedModelMap that automatically removes a BindingResult object if the corresponding target attribute gets replaced through regular Map operations.
597	Strategy for processing DataBinder's missing field errors, and for translating a PropertyAccessException to a FieldError.
598	General interface that represents binding results.
599	Convenience methods for looking up BindingResults in a model Map.
600	BeanShell-based implementation of Spring's ScriptEvaluator strategy interface.
601	ScriptFactory implementation for a BeanShell script.
602	Utility methods for handling BeanShell-scripted objects.
603	Interface that defines common cache operations.
604	Wrapper exception to be thrown from Cache.get(Object, Callable) in case of the value loader callback failing with an exception.
605	A (wrapper) object representing a cache value.
606	Class describing a cache 'cacheable' operation.
607	A builder that can be used to create a CacheableOperation.
608	Strategy interface for parsing known caching annotation types.
609	Base class for caching aspects, such as the CacheInterceptor or an AspectJ aspect.
610	Shared utility class used to evaluate and cache SpEL expressions that are defined on AnnotatedElement.
611	An expression key.
612	A strategy for handling cache-related errors.
613	Class describing a cache 'evict' operation.
614	A builder that can be used to create a CacheEvictOperation.
615	AOP Alliance MethodInterceptor for declarative cache management using the common Spring caching infrastructure (Cache).
616	Spring's central cache manager SPI.
617	NamespaceHandler allowing for the configuration of declarative cache management using either XML or using annotations.
618	Base class for cache operations.
619	Base class for builders that can be used to create a CacheOperation.
620	Representation of the context of the invocation of a cache operation.
621	Abstract the invocation of a cache operation.
622	Wrap any exception thrown while invoking CacheOperationInvoker.invoke().
623	Interface used by CacheInterceptor.
624	Proxy factory bean for simplified declarative caching handling.
625	Class describing a cache 'put' operation.
626	A builder that can be used to create a CachePutOperation.
627	Determine the Cache instance(s) to use for an intercepted method invocation.
628	Selects which implementation of AbstractCachingConfiguration should be used based on the value of EnableCaching.mode() on the importing @Configuration class.
629	Interface to be implemented by @Configuration classes annotated with @EnableCaching that wish or need to specify explicitly how caches are resolved and how keys are generated for annotation-driven cache management.
630	Provide access to the candidates that are defined in META-INF/spring.components.
631	Candidate components index loading mechanism for internal use within the framework.
632	A bean definition scanner that detects bean candidates on the classpath, registering corresponding bean definitions with a given registry (BeanFactory or ApplicationContext).
633	A component provider that provides candidate components from a base package.
634	Standalone XML application context, taking the context definition files from the class path, interpreting plain paths as class path resource names that include the package path (e.g.
635	BeanPostProcessor implementation that supports common Java annotations out of the box, in particular the common annotations in the jakarta.annotation package.
636	Class representing generic injection information about an annotated field or setter method, supporting @Resource and related annotations.
637	Parser for the <context:component-scan/> element.
638	Composite CacheManager implementation that iterates over a given collection of delegate CacheManager instances.
639	Composite CacheOperationSource implementation that iterates over a given array of CacheOperationSource instances.
640	Simple Cache implementation based on the core JDK java.util.concurrent package.
641	FactoryBean for easy configuration of a ConcurrentMapCache when used within a Spring container.
642	CacheManager implementation that lazily builds ConcurrentMapCache instances for each ConcurrentMapCacheManager.getCache(java.lang.String) request.
643	Implementation of the Model interface based on a ConcurrentHashMap for use in concurrent scenarios.
644	Adapter that takes a java.util.concurrent.Executor and exposes a Spring TaskExecutor for it.
645	Delegate that wraps a given Runnable/Callable with a JSR-236 ManagedTask, exposing a long-running hint based on SchedulingAwareRunnable and a given identity name.
646	Adapter that takes a java.util.concurrent.ScheduledExecutorService and exposes a Spring TaskScheduler for it.
647	A single condition that must be matched in order for a component to be registered.
648	Context information for use by Condition implementations.
649	SPI interface to be implemented by most if not all application contexts.
650	BeanFactoryPostProcessor used for bootstrapping processing of @Configuration classes.
651	Utilities for identifying and configuring Configuration classes.
652	A Condition that offers more fine-grained control when used with @Configuration.
653	The various configuration phases where the condition could be evaluated.
654	FactoryBean that creates a JSR-160 JMXConnectorServer, optionally registers it with the MBeanServer, and then starts it.
655	Complete implementation of the AutowireCandidateResolver strategy interface, providing support for qualifier annotations as well as for lazy resolution driven by the Lazy annotation in the context.annotation package.
656	Filesystem-based ahead-of-time (AOT) processing base implementation.
657	ScheduledTaskRegistrar subclass which redirects the actual scheduling of tasks to the ContextLifecycleScheduledTaskRegistrar.afterSingletonsInstantiated() callback (as of 4.1.2).
658	NamespaceHandler for the 'context' namespace.
659	A factory providing convenient access to a ConversionService configured with converters appropriate for most environments.
660	Representation of a crontab expression that can calculate the next time it matches.
661	TriggerTask implementation defining a Runnable to be executed according to a standard cron expression.
662	Trigger implementation for cron expressions.
663	A BigDecimal formatter for number values in currency style.
664	Formatter for JSR-354 CurrencyUnit values, from and to currency code Strings.
665	Implementation of the ThreadFactory interface, allowing for customizing the created threads (name, priority, etc).
666	Configurable bean class that exposes a specific JSR-303 Validator through its original interface as well as through the Spring Validator interface.
667	Binder that allows for setting property values on a target object, including support for validation and binding result analysis.
668	A formatter for Date types.
669	Configures basic date formatting for use with Spring, primarily for DateTimeFormat declarations.
670	A context that holds user-specific java.time (JSR-310) settings such as the user's Chronology (calendar system) and time zone.
671	A holder for a thread-local user DateTimeContext.
672	Common ISO date time format patterns.
673	Formats fields annotated with the DateTimeFormat annotation using a DateFormatter.
674	Factory that creates a JSR-310 DateTimeFormatter.
675	FactoryBean that creates a JSR-310 DateTimeFormatter.
676	Configures the JSR-310 java.time formatting system for use with Spring.
677	Default BindingErrorProcessor implementation.
678	Default LoadTimeWeaver bean for use in an application context, decorating an automatically detected internal LoadTimeWeaver.
679	Default EventListenerFactory implementation that supports the regular EventListener annotation.
680	A specialization of FormattingConversionService configured by default with converters and formatters appropriate for most applications.
681	Default implementation of the LifecycleProcessor strategy.
682	JNDI-based variant of CustomizableThreadFactory, performing a default lookup for JSR-236's "java:comp/DefaultManagedThreadFactory" in a Jakarta EE environment, falling back to the local CustomizableThreadFactory setup if not found.
683	JNDI-based variant of ConcurrentTaskExecutor, performing a default lookup for JSR-236's "java:comp/DefaultManagedExecutorService" in a Jakarta EE/8 environment.
684	JNDI-based variant of ConcurrentTaskScheduler, performing a default lookup for JSR-236's "java:comp/DefaultManagedScheduledExecutorService" in a Jakarta EE environment.
685	Default implementation of the MessageCodesResolver interface.
686	Common message code formats.
687	Spring's default implementation of the MessageSourceResolvable interface.
688	A variation of ImportSelector that runs after all @Configuration beans have been processed.
689	Interface used to group results from different import selectors.
690	An entry that holds the AnnotationMetadata of the importing Configuration class and the class name to import.
691	Runnable wrapper that catches any exception or error thrown from its delegate Runnable and allows an ErrorHandler to handle it.
692	Empty MessageSource that delegates all calls to the parent MessageSource.
693	Special implementation of the Errors and BindingResult interfaces, supporting registration and evaluation of binding errors on value objects.
694	Convenient base class for components with a need for embedded value resolution (i.e.
695	Interface to be implemented by any object that wishes to be notified of a StringValueResolver for the resolution of embedded definition values.
696	AspectJ weaving enablement options.
697	Read-only EL property accessor that knows how to retrieve keys of a Spring Environment instance.
698	Interface to be implemented by any bean that wishes to be notified of the Environment that it runs in.
699	Stores and exposes information about data-binding and validation errors for a specific object.
700	Strategy interface for creating ApplicationListener for methods annotated with EventListener.
701	Registers EventListener methods as individual ApplicationListener instances.
702	Interceptor that publishes an ApplicationEvent to all ApplicationListeners registered with an ApplicationEventPublisher after each successful method invocation.
703	Parser for the 'executor' element of the 'task' namespace.
704	Base class for setting up a ExecutorService (typically a ThreadPoolExecutor or ScheduledThreadPoolExecutor).
705	Subclass of ModelMap that implements the Model interface.
706	Encapsulates a field error, that is, a reason for rejecting a specific field value.
707	Standalone XML application context, taking the context definition files from the file system or from URLs, interpreting plain paths as relative file system locations (e.g.
708	Enumeration of the type filters that may be used in conjunction with @ComponentScan.
709	A Spring FactoryBean that builds and exposes a preconfigured ForkJoinPool.
710	Adapter that bridges between Formatter and PropertyEditor.
711	Registers Converters and Formatters with a FormattingConversionService through the FormatterRegistry SPI.
712	A registry of field formatting logic.
713	A ConversionService implementation designed to be configured as a FormatterRegistry.
714	A factory providing convenient access to a FormattingConversionService configured with converters and formatters for common types such as numbers and datetimes.
715	An extension of AnnotationBeanNameGenerator that uses the fully qualified class name as the default bean name if an explicit bean name is not supplied via a supported type-level annotation such as @Component (see AnnotationBeanNameGenerator for details on supported annotations).
716	Generic ApplicationContext implementation that holds a single internal DefaultListableBeanFactory instance and does not assume a specific bean definition format.
717	Extended variant of the standard ApplicationListener interface, exposing further metadata such as the supported event and source type.
718	GenericApplicationListener adapter that determines supported event types through introspecting the generically declared type of the target listener.
719	An ApplicationContext implementation that extends GenericApplicationContext and implements GroovyObject such that beans can be retrieved with the dot de-reference syntax instead of using AbstractApplicationContext.getBean(java.lang.String).
720	Convenient application context with built-in XML support.
721	LoadTimeWeaver implementation for GlassFish's org.glassfish.api.deployment.InstrumentableClassLoader InstrumentableClassLoader.
722	Strategy used by GroovyScriptFactory to allow the customization of a created GroovyObject.
723	Groovy-based implementation of Spring's ScriptEvaluator strategy interface.
724	ScriptFactory implementation for a Groovy script.
725	Sub-interface of MessageSource to be implemented by objects that can resolve messages hierarchically.
726	An implementation of the ObjectNamingStrategy interface that creates a name based on the identity of a given instance.
727	Interface to be implemented by any @Configuration class that wishes to be injected with the AnnotationMetadata of the @Configuration class that imported it.
728	A BeanPostProcessor that honours ImportAware callback using a mapping computed at build time.
729	Interface to be implemented by types that register additional bean definitions when processing @Configuration classes.
730	Interface to be implemented by types that determine which @Configuration class(es) should be imported based on a given selection criteria, usually one or more annotation attributes.
731	Formatter implementation for a JSR-310 Instant, following JSR-310's parsing rules for an Instant (that is, not using a configurable DateTimeFormatter): accepting the default ISO_INSTANT format as well as RFC_1123_DATE_TIME (which is commonly used for HTTP date header values), as of Spring 4.3.
732	LoadTimeWeaver relying on VM Instrumentation.
733	Subclass of AbstractReflectiveMBeanInfoAssembler that allows for the management interface of a bean to be defined using arbitrary interfaces.
734	Task implementation defining a Runnable to be executed at a given millisecond interval which may be treated as fixed-rate or fixed-delay depending on context.
735	LoadTimeWeaver implementation for JBoss's instrumentable ClassLoader.
736	NamespaceHandler for the 'jee' namespace.
737	Interface used by the MetadataMBeanInfoAssembler to read source-level metadata from a managed resource's class.
738	Utility methods for converting Spring JMX metadata into their plain JMX equivalents.
739	Collection of generic utility methods to support Spring JMX.
740	Convenient superclass for JNDI accessors, providing "jndiTemplate" and "jndiEnvironment" bean properties.
741	Callback interface to be implemented by classes that need to perform an operation (such as a lookup) in a JNDI context.
742	JndiLocatorSupport subclass with public lookup methods, for convenient use as a delegate.
743	Convenient superclass for classes that can locate any number of JNDI objects.
744	FactoryBean that looks up a JNDI object.
745	Convenient superclass for JNDI-based service locators, providing configurable lookup of a specific JNDI resource.
746	AOP TargetSource that provides configurable JNDI lookups for getTarget() calls.
747	PropertySource implementation that reads properties from an underlying Spring JndiLocatorDelegate.
748	Helper class that simplifies JNDI operations.
749	Properties editor for JndiTemplate objects.
750	Formats fields annotated with the DateTimeFormat annotation using the JSR-310 java.time package in JDK 8.
751	Simple ScopeMetadataResolver implementation that follows JSR-330 scoping rules: defaulting to prototype scope unless Singleton is present.
752	Formats MonetaryAmount fields annotated with Spring's common NumberFormat annotation.
753	Cache key generator.
754	ObjectNamingStrategy implementation that builds ObjectName instances from the key used in the "beans" map passed to MBeanExporter.
755	NamespaceHandler that supports the wiring of objects backed by dynamic languages such as Groovy, JRuby and BeanShell.
756	Utilities for use with LangNamespaceHandler.
757	A common interface defining methods for start/stop lifecycle control.
758	Strategy interface for processing Lifecycle beans within the ApplicationContext.
759	Defines the contract for adding one or more ClassFileTransformers to a ClassLoader.
760	Interface to be implemented by any object that wishes to be notified of the application context's default LoadTimeWeaver.
761	BeanPostProcessor implementation that passes the context's default LoadTimeWeaver to beans that implement the LoadTimeWeaverAware interface.
762	@Configuration class that registers a LoadTimeWeaver bean.
763	Interface to be implemented by @Configuration classes annotated with @EnableLoadTimeWeaving that wish to customize the LoadTimeWeaver instance to be used.
764	Strategy interface for determining the current Locale.
765	Simple holder class that associates a LocaleContext instance with the current thread.
766	Delegates to a target MessageInterpolator implementation but enforces Spring's managed Locale.
767	This is the central class for jakarta.validation (JSR-303) setup in a Spring application context: It bootstraps a jakarta.validation.ValidationFactory and exposes it through the Spring Validator interface as well as through the JSR-303 Validator interface and the ValidatorFactory interface itself.
768	A CacheErrorHandler implementation that logs error messages.
769	Metadata that indicates to expose a given bean property as JMX attribute.
770	Metadata that indicates to expose a given bean property as a JMX attribute, with additional descriptor properties that indicate that the attribute is a metric.
771	Metadata that indicates a JMX notification emitted by a bean.
772	Metadata about JMX operation parameters.
773	Metadata indicating that instances of an annotated class are to be registered with a JMX server.
774	EL property accessor that knows how to traverse the keys of a standard Map.
775	Map-based implementation of the BindingResult interface, supporting registration and evaluation of binding errors on Map attributes.
776	MethodInterceptor that routes calls to an MBean running on the supplied MBeanServerConnection.
777	@Configuration class that registers a AnnotationMBeanExporter bean.
778	JMX exporter that allows for exposing any Spring-managed bean to a JMX MBeanServer, without the need to define any JMX-specific information in the bean classes.
779	A listener that allows application code to be notified when an MBean is registered and unregistered via an MBeanExporter.
780	Interface that defines the set of MBean export operations that are intended to be accessed by application developers during application runtime.
781	Interface to be implemented by all classes that can create management interface metadata for a managed resource.
782	Creates a proxy to a managed resource running either locally or remotely.
783	Provides supporting infrastructure for registering MBeans with an MBeanServer.
784	FactoryBean that creates a JMX 1.2 MBeanServerConnection to a remote MBeanServer exposed via a JMXServerConnector.
785	FactoryBean that obtains a MBeanServer reference through the standard JMX 1.2 MBeanServerFactory API.
786	A strategy interface for formatting message codes.
787	Strategy interface for building message codes from validation error codes.
788	Strategy interface for resolving messages, with support for the parameterization and internationalization of such messages.
789	Helper class for easy access to messages from a MessageSource, providing various overloaded getMessage methods.
790	Interface to be implemented by any object that wishes to be notified of the MessageSource (typically the ApplicationContext) that it runs in.
791	Interface for objects that are suitable for message resolution in a MessageSource.
792	Helper class that allows for accessing a Spring MessageSource as a ResourceBundle.
793	Implementation of Hibernate Validator 4.3/5.x's ResourceBundleLocator interface, exposing a Spring MessageSource as localized MessageSourceResourceBundle.
794	Base class for message source implementations, providing support infrastructure such as MessageFormat handling but not implementing concrete methods defined in the MessageSource.
795	Implementation of the MBeanInfoAssembler interface that reads the management interface information from source level metadata.
796	An implementation of the ObjectNamingStrategy interface that reads the ObjectName from the source-level metadata.
797	A method-based EvaluationContext that provides explicit support for method-based invocations.
798	AbstractReflectiveMBeanInfoAssembler subclass that allows method names to be explicitly excluded as MBean operations and attributes.
799	Adapter that implements the Runnable interface as a configurable method invocation based on Spring's MethodInvoker.
800	Subclass of AbstractReflectiveMBeanInfoAssembler that allows to specify method names to be exposed as MBean operations and attributes.
801	An AOP Alliance MethodInterceptor implementation that delegates to a JSR-303 provider for performing method-level validation on annotated methods.
802	A convenient BeanPostProcessor implementation that delegates to a JSR-303 provider for performing method-level validation on annotated methods.
803	Represents how the measurement values of a ManagedMetric will change over time.
804	Interface that defines a holder for model attributes.
805	Implementation of Map for use when building model data for use with UI tools.
806	NotificationPublisher implementation that uses the infrastructure provided by the ModelMBean interface to track javax.management.NotificationListeners and send Notifications to those listeners.
807	Formatter for JSR-354 MonetaryAmount values, delegating to MonetaryAmountFormat.format(javax.money.MonetaryAmount) and MonetaryAmountFormat.parse(java.lang.CharSequence).
808	A CacheResolver that forces the resolution to a configurable collection of name(s) against a given CacheManager.
809	Simple CacheOperationSource implementation that allows attributes to be matched by registered name.
810	A no operation Cache implementation suitable for disabling caching.
811	A basic, no operation CacheManager implementation suitable for disabling caching, typically used for backing cache declarations without an actual backing store.
812	Helper class that aggregates a NotificationListener, a NotificationFilter, and an arbitrary handback object.
813	Helper class that aggregates a NotificationListener, a NotificationFilter, and an arbitrary handback object, as well as the names of MBeans from which the listener wishes to receive Notifications.
814	Registrar object that associates a specific NotificationListener with one or more MBeans in an MBeanServer (typically via a MBeanServerConnection).
815	Simple interface allowing Spring-managed MBeans to publish JMX notifications without being aware of how those notifications are being transmitted to the MBeanServer.
816	Interface to be implemented by any Spring-managed resource that is to be registered with an MBeanServer and wishes to send JMX javax.management.Notifications.
817	Simple serializable class that serves as a null replacement for cache stores which otherwise do not support null values.
818	Common number format styles.
819	Formats fields annotated with the NumberFormat annotation.
820	A general-purpose number formatter using NumberFormat's number style.
821	Encapsulates an object error, that is, a global reason for rejecting an object.
822	Helper class for the creation of ObjectName instances.
823	Strategy interface that encapsulates the creation of ObjectName instances.
824	LocalValidatorFactoryBean subclass that simply turns Validator calls into no-ops in case of no Bean Validation provider being available.
825	Parses text strings to produce instances of T.
826	An ApplicationEvent that carries an arbitrary payload.
827	A formatter for number values in percent style.
828	A trigger for periodic task execution.
829	Interface for objects that may participate in a phased process such as lifecycle management.
830	Prints objects of type T for display.
831	Specialization of PlaceholderConfigurerSupport that resolves ${...} placeholders within bean definition property values and @Value annotations against the current Spring Environment and its set of PropertySources.
832	@Configuration class that registers the Spring infrastructure beans necessary to enable proxy-based asynchronous method execution.
833	@Configuration class that registers the Spring infrastructure beans necessary to enable proxy-based annotation-driven cache management.
834	LoadTimeWeaver which uses reflection to delegate to an underlying ClassLoader with well-known transformation hooks.
835	Subclass of BeanFactoryRefreshableTargetSource that determines whether a refresh is required through the given ScriptFactory.
836	Indicates registration behavior when attempting to register an MBean that already exists.
837	Spring-specific MessageSource implementation that accesses resource bundles using specified basenames, participating in the Spring ApplicationContext's resource loading.
838	MessageSource implementation that accesses resource bundles using specified basenames.
839	Interface to be implemented by any object that wishes to be notified of the ResourceLoader (typically the ApplicationContext) that it runs in.
840	Subclass of ShadowingClassLoader that overrides attempts to locate certain files.
841	ScriptSource implementation based on Spring's Resource abstraction.
842	Extension of the GenericBeanDefinition class, based on an ASM ClassReader, with support for annotation metadata exposed through the AnnotatedBeanDefinition interface.
843	Bean post-processor that registers methods annotated with @Scheduled to be invoked by a TaskScheduler according to the "fixedRate", "fixedDelay", or "cron" expression provided via the annotation.
844	FactoryBean that sets up a ScheduledExecutorService (by default: a ScheduledThreadPoolExecutor) and exposes it for bean references.
845	JavaBean that describes a scheduled executor task, consisting of the Runnable and a delay plus period.
846	Variant of MethodInvokingRunnable meant to be used for processing of no-arg scheduled methods.
847	A representation of a scheduled task at runtime, used as a return value for scheduling methods.
848	Common interface for exposing locally scheduled tasks.
849	Helper bean for registering tasks with a TaskScheduler, typically using cron expressions.
850	Parser for the 'scheduled-tasks' element of the scheduling namespace.
851	Parser for the 'scheduler' element of the 'task' namespace.
852	Extension of the Runnable interface, adding special callbacks for long-running operations.
853	@Configuration class that registers a ScheduledAnnotationBeanPostProcessor bean capable of processing Spring's @Scheduled annotation.
854	Optional interface to be implemented by @Configuration classes annotated with @EnableScheduling.
855	A TaskExecutor extension exposing scheduling characteristics that are relevant to potential task submitters.
856	Enumerates the various scoped-proxy options.
857	Describes scope characteristics for a Spring-managed bean including the scope name and the scoped-proxy behavior.
858	Strategy interface for resolving the scope of bean definitions.
859	Exception to be thrown on script compilation failure.
860	Spring's strategy interface for evaluating a script.
861	Script definition interface, encapsulating the configuration of a specific script as well as a factory method for creating the actual scripted Java Object.
862	BeanPostProcessor that handles ScriptFactory definitions, replacing each factory with the actual scripted Java object generated by it.
863	Interface that defines the source of a script.
864	Interface that allows infrastructure components to provide their own ObjectNames to the MBeanExporter.
865	ClassLoader decorator that shadows an enclosing ClassLoader, applying registered transformers to all affected classes.
866	Simple implementation of the ApplicationEventMulticaster interface.
867	A simple CacheErrorHandler that does not handle the exception at all, simply throwing it back at the client.
868	Simple cache manager working against a given collection of caches.
869	A simple CacheResolver that resolves the Cache instance(s) based on a configurable CacheManager and the name of the cache(s) as provided by getCacheNames().
870	Simplistic implementation of an instrumentable ClassLoader.
871	Simple JNDI-based implementation of Spring's BeanFactory interface.
872	A simple key as returned from the SimpleKeyGenerator.
873	Simple key generator.
874	LoadTimeWeaver that builds and exposes a SimpleInstrumentableClassLoader.
875	Simple implementation of the LocaleContext interface, always returning a specified Locale.
876	Simple subclass of AbstractReflectiveMBeanInfoAssembler that always votes yes for method and property inclusion, effectively exposing all public methods and properties as operations and attributes.
877	A simple thread-backed Scope implementation.
878	Simple implementation of the TimeZoneAwareLocaleContext interface, always returning a specified Locale and TimeZone.
879	Simple data holder implementation of the TriggerContext interface.
880	Straightforward implementation of Cache.ValueWrapper, simply holding the value as given at construction and returning it from SimpleValueWrapper.get().
881	Extended variant of the standard ApplicationListener interface, exposing further metadata such as the supported event and source type.
882	An extension of the Lifecycle interface for those objects that require to be started upon ApplicationContext refresh and/or shutdown in a particular order.
883	Extended variant of the Validator interface, adding support for validation 'hints'.
884	ApplicationListener decorator that filters events from a specified event source, invoking its delegate listener for matching ApplicationEvent objects only.
885	Strategy implementation for parsing Spring's Caching, Cacheable, CacheEvict, and CachePut annotations.
886	JSR-303 ConstraintValidatorFactory implementation that delegates to a Spring BeanFactory for creating autowired ConstraintValidator instances.
887	Extension of the RequiredModelMBean class that ensures the thread context ClassLoader is switched for the managed resource's ClassLoader before any invocations occur.
888	Adapter that takes a JSR-303 javax.validator.Validator and exposes it as a Spring Validator while also exposing the original JSR-303 Validator interface itself.
889	Standard implementation of the BeanExpressionResolver interface, parsing and evaluating Spring EL using Spring's expression module.
890	Exception decorating a ScriptException coming out of JSR-223 script evaluation, i.e.
891	javax.script (JSR-223) based implementation of Spring's ScriptEvaluator strategy interface.
892	ScriptFactory implementation based on the JSR-223 script engine abstraction (as included in Java).
893	Common operations for dealing with a JSR-223 ScriptEngine.
894	ApplicationContext implementation which supports programmatic registration of beans and messages, rather than reading bean definitions from external configuration sources.
895	Simple implementation of MessageSource which allows messages to be registered programmatically.
896	Static implementation of the ScriptSource interface, encapsulating a given String that contains the script source text.
897	Holder class defining a Runnable to be executed as a task, typically at a scheduled time or interval.
898	FactoryBean for creating ThreadPoolTaskExecutor instances, primarily used behind the XML task namespace.
899	NamespaceHandler for the 'task' namespace.
900	Task scheduler interface that abstracts the scheduling of Runnables based on different kinds of triggers.
901	Utility methods for decorating tasks with error handling.
902	Parser implementation for a JSR-310 TemporalAccessor, using a DateTimeFormatter (the contextual one, if available).
903	Printer implementation for a JSR-310 TemporalAccessor, using a DateTimeFormatter) (the contextual one, if available).
904	JavaBean that allows for configuring a ThreadPoolExecutor in bean style (through its "corePoolSize", "maxPoolSize", "keepAliveSeconds", "queueCapacity" properties) and exposing it as a bean reference of its native ExecutorService type.
905	JavaBean that allows for configuring a ThreadPoolExecutor in bean style (through its "corePoolSize", "maxPoolSize", "keepAliveSeconds", "queueCapacity" properties) and exposing it as a Spring TaskExecutor.
906	Implementation of Spring's TaskScheduler interface, wrapping a native ScheduledThreadPoolExecutor.
907	Extension of LocaleContext, adding awareness of the current time zone.
908	LoadTimeWeaver implementation for Tomcat's new org.apache.tomcat.InstrumentableClassLoader.
909	Common interface for trigger objects that determine the next execution time of a task that they get associated with.
910	Context object encapsulating last execution times and last completion time of a given task.
911	Task implementation defining a Runnable to be executed according to a given Trigger.
912	Collection of utilities for working with @ComponentScan type filters.
913	Exception thrown if a type mismatch is encountered for an object located in a JNDI environment.
914	Utility class for handling validation annotations.
915	Utility class offering convenient methods for invoking a Validator and for rejecting empty fields.
916	A validator for application-specific objects.
917	ClassFileTransformer-based weaver, allowing for a list of transformers to be applied on a class byte array.
918	Base class for SockJS client implementations of WebSocketSession.
919	A base class for HandshakeHandler implementations, independent of the Servlet API.
920	Base class for HTTP transport handlers that receive messages via HTTP POST.
921	Base class for HTTP transport handlers that push messages to connected clients.
922	An abstract base class for use with HTTP transport SockJS sessions.
923	A base class for SockJS message codec that provides an implementation of AbstractSockJsMessageCodec.encode(String[]).
924	An abstract base class for SockJsService implementations that provides SockJS path resolution and handling of static SockJS requests (e.g.
925	An abstract base class for SockJS sessions implementing SockJsSession.
926	A base class for RequestUpgradeStrategy implementations that build on the standard WebSocket API for Java (JSR-356).
927	A base class for events for a message received from a WebSocket client and parsed into a higher-level sub-protocol (e.g.
928	Common base class for TransportHandler implementations.
929	A base class for RequestUpgradeStrategy implementations on top of JSR-356 based servers which include Tyrus as their WebSocket engine.
930	Abstract base class for WebSocketClient implementations.
931	A convenient base class for WebSocketHandler implementation with empty methods.
932	Base class for WebSocketHandlerRegistrations that gathers all the configuration options but allows subclasses to put together the actual HTTP request mappings.
933	A message that can be handled or sent on a WebSocket connection.
934	An abstract base class for implementations of WebSocketSession.
935	Abstract base class for XHR transport implementations to extend.
936	WebSocket connection manager that connects to the server via WebSocketContainer and handles the session with an @ClientEndpoint endpoint.
937	Instantiates a target handler through a Spring BeanFactory and also provides an equivalent destroy method.
938	A binary WebSocket message.
939	A convenient base class for WebSocketHandler implementations that process binary messages only.
940	Represents a WebSocket close status code and reason.
941	Wrap a WebSocketSession to guarantee only one thread can send messages at a time.
942	Enum for options of what to do when the buffer fills up.
943	Base class for a connection manager that automates the process of connecting to a WebSocket server with the Spring ApplicationContext lifecycle.
944	Base class that can be used to implement a standard Encoder and/or Decoder.
945	A default HandshakeHandler implementation, extending AbstractHandshakeHandler with Servlet-specific initialization support.
946	A default implementation of SimpUserRegistry that relies on AbstractSubProtocolEvent application context events to keep track of connected users and their subscriptions.
947	A default implementation of SockJsFrameFormat that relies on String.format(String, Object...)..
948	A default implementation of SockJsService with all default TransportHandler implementations pre-registered.
949	A variation of WebSocketConfigurationSupport that detects implementations of WebSocketConfigurer in Spring configuration and invokes them in order to configure WebSocket request handling.
950	A WebSocketMessageBrokerConfigurationSupport extension that detects beans of type WebSocketMessageBrokerConfigurer and delegates to all of them allowing callback style customization of the configuration provided in WebSocketMessageBrokerConfigurationSupport.
951	WebSocket connection manager that connects to the server via WebSocketContainer and handles the session with an Endpoint.
952	A TransportHandler for sending messages via Server-Sent Events: https://dev.w3.org/html5/eventsource/.
953	An exception handling WebSocketHandlerDecorator.
954	A WebSocket RequestUpgradeStrategy for Oracle's GlassFish 4.1 and higher.
955	Contract for processing a WebSocket handshake request.
956	Interceptor for WebSocket handshake requests.
957	A helper class that assists with invoking a list of handshake interceptors.
958	An HTTP TransportHandler that uses a famous browser document.domain technique.
959	An interceptor to copy information from the HTTP session to the "handshake attributes" map to be made available via WebSocketSession.getAttributes().
960	A component that can execute the SockJS "Info" request that needs to be performed before the SockJS session starts in order to check server endpoint capabilities such as whether the endpoint permits use of WebSocket.
961	A Jackson 2.x codec for encoding and decoding SockJS messages.
962	A RequestUpgradeStrategy for Jetty 11.
963	Adapts WebSocketHandler to the Jetty 9 WebSocket API.
964	A WebSocketSession for use with the Jetty 9.4 WebSocket API.
965	An XHR transport based on Jetty's HttpClient.
966	A WebSocketHandlerDecorator that adds logging to WebSocket lifecycle events.
967	A WebSocketSession that exposes the underlying, native WebSocketSession through a getter.
968	An interceptor to check request Origin header value against a collection of allowed origins.
969	A WebSocketHandler that initializes and destroys a WebSocketHandler instance for each WebSocket connection and delegates all other methods to it.
970	A WebSocket ping message.
971	A SockJS session for use with polling HTTP transports.
972	A WebSocket pong message.
973	A server-specific strategy for performing the actual upgrade to a WebSocket exchange.
974	An XhrTransport implementation that uses a RestTemplate.
975	Detects beans of type ServerEndpointConfig and registers with the standard Jakarta WebSocket runtime.
976	An implementation of ServerEndpointConfig for use in Spring-based applications.
977	A FactoryBean for configuring ServerContainer.
978	A helper class for configuring WebSocketHandler request handling including SockJS fallback options.
979	WebSocketHandlerRegistry with Spring MVC handler mappings for the handshake requests.
980	Event raised when the session of a WebSocket client using a Simple Messaging Protocol (e.g.
981	Raised when a WebSocket session has exceeded limits it has been configured for, e.g.
982	A SockJS implementation of WebSocketClient with fallback alternatives that simulate a WebSocket interaction through plain HTTP streaming and long polling techniques.
983	Base class for exceptions raised while processing SockJS HTTP requests.
984	Represents a SockJS frame.
985	Applies a transport-specific format to the content of a SockJS frame resulting in a content that can be written out.
986	SockJS frame types.
987	An HttpRequestHandler that allows mapping a SockJsService to requests in a Servlet container.
988	Encode and decode messages to and from a SockJS message frame, essentially an array of JSON-encoded messages.
989	An exception thrown when a message frame was successfully received over an HTTP POST and parsed but one or more of the messages it contained could not be delivered to the WebSocketHandler either because the handler failed or because the connection got closed.
990	The main entry point for processing HTTP requests from SockJS clients.
991	Provides transport handling code with access to the SockJsService configuration options they need to have access to.
992	A helper class for configuring SockJS fallback options for use with an EnableWebSocket and WebSocketConfigurer setup.
993	SockJS extension of Spring's standard WebSocketSession.
994	A factory for creating a SockJS session.
995	Container for the base URL of a SockJS endpoint with additional helper methods to derive related SockJS URLs: specifically, the info and transport URLs.
996	An implementation of WebSocketHandler that adds SockJS messages frames, sends SockJS heartbeat messages, and delegates lifecycle events and messages to a target WebSocketHandler.
997	A ServerEndpointConfig.Configurator for initializing ServerEndpoint-annotated classes through Spring.
998	A WebSocketClient based on the standard Jakarta WebSocket API.
999	Adapts a WebSocketHandler to the standard WebSocket for Java API.
