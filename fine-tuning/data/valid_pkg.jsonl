{"index": 2024, "repo": "spring-messaging-6.0.11", "code": "Package: converter\n\nClasses and Interfaces: \npublic abstract class AbstractJsonMessageConverter extends AbstractMessageConverter; // Common base class for plain JSON converters, e.g.\npublic abstract class AbstractMessageConverter extends Object implements SmartMessageConverter; // Abstract base class for SmartMessageConverter implementations including support for common properties and a partial implementation of the conversion methods, mainly to check if the converter supports the conversion based on the payload class and MIME type.\npublic class ByteArrayMessageConverter extends AbstractMessageConverter; // A MessageConverter that supports MIME type \"application/octet-stream\" with the payload converted to and from a byte[].\npublic class CompositeMessageConverter extends Object implements SmartMessageConverter; // A MessageConverter that delegates to a list of registered converters to be invoked until one of them returns a non-null result.\n@FunctionalInterface public interface ContentTypeResolver; // Resolve the content type for a message.\npublic class DefaultContentTypeResolver extends Object implements ContentTypeResolver; // A default ContentTypeResolver that checks the MessageHeaders.CONTENT_TYPE header or falls back to a default value.\npublic class GenericMessageConverter extends SimpleMessageConverter; // An extension of the SimpleMessageConverter that uses a ConversionService to convert the payload of the message to the requested type.\npublic class GsonMessageConverter extends AbstractJsonMessageConverter; // Implementation of MessageConverter that can read and write JSON using Google Gson.\npublic class JsonbMessageConverter extends AbstractJsonMessageConverter; // Implementation of MessageConverter that can read and write JSON using the JSON Binding API.\npublic class KotlinSerializationJsonMessageConverter extends AbstractJsonMessageConverter; // Implementation of MessageConverter that can read and write JSON using kotlinx.serialization.\npublic class MappingJackson2MessageConverter extends AbstractMessageConverter; // A Jackson 2 based MessageConverter implementation.\npublic class MarshallingMessageConverter extends AbstractMessageConverter; // Implementation of MessageConverter that can read and write XML using Spring's Marshaller and Unmarshaller abstractions.\npublic class MessageConversionException extends MessagingException; // An exception raised by MessageConverter implementations.\npublic interface MessageConverter; // A converter to turn the payload of a Message from serialized form to a typed Object and vice versa.\npublic class ProtobufJsonFormatMessageConverter extends ProtobufMessageConverter; // Subclass of ProtobufMessageConverter for use with the official \"com.google.protobuf:protobuf-java-util\" library for JSON support.\n", "des": "Provides support for message conversion."}
{"index": 885, "repo": "cassandra-all-4.1.2", "code": "Package: types\n\nClasses and Interfaces: \nInterface GettableByIndexData; // Collection of (typed) CQL values that can be retrieved by index (starting at zero).\nInterface GettableByNameData; // Collection of (typed) CQL values that can be retrieved by name.\nInterface GettableData; // Collection of (typed) CQL values that can be retrieved either by index (starting at zero) or by name.\nInterface SettableByIndexData<T extends SettableByIndexData<T>>; // Collection of (typed) CQL values that can be set by index (starting at zero).\nInterface SettableByNameData<T extends SettableData<T>>; // Collection of (typed) CQL values that can set by name.\nInterface SettableData<T extends SettableData<T>>; // Collection of (typed) CQL values that can be set either by index (starting at zero) or by name.\nClass AbstractGettableData;\nClass CodecRegistry; // A registry for TypeCodecs.\nClass CodecUtils; // A set of utility methods to deal with type conversion and serialization.\nClass DataType; // Data types supported by cassandra.\nClass DataType.CollectionType; // Instances of this class represent collection types, that is, lists, sets or maps.\nClass DataType.CustomType; // A \"custom\" type is a type that cannot be expressed as a CQL type.\nClass DataType.NativeType; // Instances of this class represent CQL native types, also known as CQL primitive types.\nClass DataTypeClassNameParser;\nClass Duration; // Represents a duration.\nClass LocalDate; // A date with no time components, no time zone, in the ISO 8601 calendar.\nClass Metadata; // Keeps metadata on the connected cluster, including known nodes and schema definitions.\nClass ParseUtils; // Simple utility class used to help parsing CQL values (mainly UDT and collection ones).\nClass TupleType; // A tuple type.\nClass TupleValue; // A value for a Tuple.\nClass TypeCodec<T>; // A Codec that can serialize and deserialize to and from a given CQL type and a given Java Type.\nClass TypeCodec.AbstractCollectionCodec<E,C extends java.util.Collection<E>>; // Base class for codecs mapping CQL lists and sets to Java collections.\n", "des": "Contains pieces of the Java Driver that are needed to handle data types in C* User-Defined-Functions/Aggregates."}
{"index": 316, "repo": "kafka-clients-3.5.0", "code": "Package: consumer\n\nClasses and Interfaces: \nInterface Consumer<K,V>;\nInterface ConsumerInterceptor<K,V>; // A plugin interface that allows you to intercept (and possibly mutate) records received by the consumer.\nInterface ConsumerPartitionAssignor; // This interface is used to define custom partition assignment for use in KafkaConsumer.\nInterface ConsumerRebalanceListener; // A callback interface that the user can implement to trigger custom actions when the set of partitions assigned to the consumer changes.\nInterface OffsetCommitCallback; // A callback interface that the user can implement to trigger custom actions when a commit request completes.\nClass ConsumerConfig; // The consumer configuration keys\nClass ConsumerGroupMetadata; // A metadata struct containing the consumer group information.\nClass ConsumerPartitionAssignor.Assignment;\nClass ConsumerPartitionAssignor.GroupAssignment;\nClass ConsumerPartitionAssignor.GroupSubscription;\nClass ConsumerPartitionAssignor.Subscription;\nClass ConsumerRecord<K,V>; // A key/value pair to be received from Kafka.\nClass ConsumerRecords<K,V>; // A container that holds the list ConsumerRecord per partition for a particular topic.\nClass CooperativeStickyAssignor; // A cooperative version of the AbstractStickyAssignor.\nClass KafkaConsumer<K,V>; // A client that consumes records from a Kafka cluster.\nClass MockConsumer<K,V>; // A mock of the Consumer interface you can use for testing code that uses Kafka.\nClass OffsetAndMetadata; // The Kafka offset commit API allows users to provide additional metadata (in the form of a string) when an offset is committed.\nClass OffsetAndTimestamp; // A container class for offset and timestamp.\nClass RangeAssignor; // The range assignor works on a per-topic basis.\nClass RoundRobinAssignor; // The round robin assignor lays out all the available partitions and all the available consumers.\nClass StickyAssignor; // The sticky assignor serves two purposes.\nEnum ConsumerPartitionAssignor.RebalanceProtocol; // The rebalance protocol defines partition assignment and revocation semantics.\nEnum OffsetResetStrategy;\nClass CommitFailedException; // This exception is raised when an offset commit with KafkaConsumer.commitSync() fails with an unrecoverable error.\n", "des": "Provides a Kafka client for consuming records from topics and/or partitions in a Kafka cluster."}
{"index": 2291, "repo": "spring-boot-3.1.1", "code": "Package: builder\n\nClasses and Interfaces: \npublic class ParentContextApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>, org.springframework.core.Ordered; // ApplicationContextInitializer for setting the parent context.\npublic static class ParentContextApplicationContextInitializer.ParentContextAvailableEvent extends org.springframework.context.ApplicationEvent; // ApplicationEvent fired when a parent context is available.\npublic class ParentContextCloserApplicationListener extends Object implements org.springframework.context.ApplicationListener<ParentContextApplicationContextInitializer.ParentContextAvailableEvent>, org.springframework.context.ApplicationContextAware, org.springframework.core.Ordered; // Listener that closes the application context if its parent is closed.\nprotected static class ParentContextCloserApplicationListener.ContextCloserListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.context.event.ContextClosedEvent>; // ApplicationListener to close the context.\npublic class SpringApplicationBuilder extends Object; // Builder for SpringApplication and ApplicationContext instances with convenient fluent API and context hierarchy support.\n", "des": "Fluent 'builder' style API to construct a SpringApplication."}
{"index": 497, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: display\n\nClasses and Interfaces: \nInterface DisplayData.Builder; // Utility to build up display data from a component and its included subcomponents.\nInterface HasDisplayData; // Marker interface for PTransforms and components to specify display data used within UIs and diagnostic tools.\nClass DisplayData; // Static display data associated with a pipeline component.\nClass DisplayData.Identifier; // Unique identifier for a display data item within a component.\nClass DisplayData.Item; // Items are the unit of display data.\nClass DisplayData.ItemSpec<T>; // Specifies an DisplayData.Item to register as display data.\nClass DisplayData.Path; // Structured path of registered display data within a component hierarchy.\nEnum DisplayData.Type; // Display data type.\n", "des": "Defines HasDisplayData for annotating components which provide display data used within UIs and diagnostic tools."}
{"index": 1651, "repo": "jena-core-4.9.0", "code": "Package: listeners\n\nClasses and Interfaces: \npublic class ChangedListener extends Object implements ModelChangedListener; // Class that merely notes that a change has occurred.\npublic class NullListener extends Object implements ModelChangedListener; // A listener that ignores everything you tell it; intended as a base class or an identity element.\npublic class ObjectListener extends Object implements ModelChangedListener; // Listener that funnels all the changes into add/removed(Object) x, ie, leaves discrimination to be done on the type of object added or removed.\npublic class StatementListener extends Object implements ModelChangedListener; // A listener that filters all its listening down to the single-statement level.\n", "des": "A package defining some useful implementations of ModelChangedListener, for listening to (a) all triples added or removed, exploding composite objects, (b) all objects added or removed, as themselves, (c) notification of additions/removals, but no details, and (d) accepting but ignoring all changes, as a base-class to be extended."}
{"index": 2389, "repo": "spring-batch-core-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic class FlowBuilder<Q> extends Object; // A builder for a flow of steps that can be executed as a job or as part of a job.\npublic static class FlowBuilder.SplitBuilder<Q> extends Object; // A builder for building a split state.\npublic static class FlowBuilder.TransitionBuilder<Q> extends Object; // A builder for transitions within a flow.\npublic static class FlowBuilder.UnterminatedFlowBuilder<Q> extends Object; // A builder for continuing a flow from a decision state.\npublic class FlowBuilderException extends RuntimeException;\npublic class FlowJobBuilder extends JobBuilderHelper<FlowJobBuilder>; // A job builder for FlowJob instances.\npublic class JobBuilder extends JobBuilderHelper<JobBuilder>; // Convenience for building jobs of various kinds.\npublic class JobBuilderException extends RuntimeException;\npublic abstract class JobBuilderHelper<B extends JobBuilderHelper<B>> extends Object; // A base class and utility for other job builders providing access to common properties like job repository.\npublic static class JobBuilderHelper.CommonJobProperties extends Object;\npublic class JobFlowBuilder extends FlowBuilder<FlowJobBuilder>;\npublic class SimpleJobBuilder extends JobBuilderHelper<SimpleJobBuilder>;\n", "des": "Job and flow level builders for java based configuration of batch jobs"}
{"index": 2998, "repo": "spring-web-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class BasicAuthenticationInterceptor extends Object implements ClientHttpRequestInterceptor; // ClientHttpRequestInterceptor to apply a given HTTP Basic Authentication username/password pair, unless a custom Authorization header has already been set.\npublic abstract class HttpAccessor extends Object; // Base class for RestTemplate and other HTTP accessing gateway helpers, defining common properties such as the ClientHttpRequestFactory to operate on.\npublic class HttpRequestWrapper extends Object implements HttpRequest; // Provides a convenient implementation of the HttpRequest interface that can be overridden to adapt the request.\npublic abstract class InterceptingHttpAccessor extends HttpAccessor; // Base class for RestTemplate and other HTTP accessing gateway helpers, adding interceptor-related properties to HttpAccessor's common properties.\npublic class ProxyFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Proxy>, org.springframework.beans.factory.InitializingBean; // FactoryBean that creates a java.net.Proxy.\n", "des": "This package provides generic HTTP support classes, to be used by higher-level classes like RestTemplate."}
{"index": 3597, "repo": "lucene-test-framework-9.7.0", "code": "Package: store\n\nClasses and Interfaces: \nClass BaseChunkedDirectoryTestCase; // Base class for Directories that \"chunk\" the input into blocks.\nClass BaseDirectoryTestCase; // Base class for Directory implementations.\nClass BaseDirectoryWrapper; // Calls check index on close.\nClass BaseLockFactoryTestCase; // Base class for per-LockFactory tests.\nClass CorruptingIndexOutput; // Corrupts on bit of a file after close\nClass MockDirectoryWrapper; // This is a Directory Wrapper that adds methods intended to be used only by unit tests.\nClass MockDirectoryWrapper.Failure; // Objects that represent fail-able conditions.\nClass MockIndexInputWrapper; // Used by MockDirectoryWrapper to create an input stream that keeps track of when it's been closed.\nClass MockIndexOutputWrapper; // Used to create an output stream that will throw an IOException on fake disk full, track max disk space actually used, and maybe throw random IOExceptions.\nClass RawDirectoryWrapper; // Delegates all operations, even optional ones, to the wrapped directory.\nEnum MockDirectoryWrapper.Throttling; // Enum for controlling hard disk throttling.\nClass MockDirectoryWrapper.FakeIOException; // Use this when throwing fake IOException, e.g.\n", "des": "Support for testing store mechanisms."}
{"index": 2058, "repo": "slf4j-ext-2.0.7", "code": "Package: agent\n\nClasses and Interfaces: \npublic class AgentOptions extends Object; // All recognized options in the string passed to the java agent.\npublic class AgentPremain extends Object; // Entry point for slf4j-ext when used as a Java agent.\n", "des": "\"-javaagent\" routines for SLF4J."}
{"index": 796, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: path\n\nClasses and Interfaces: \nClass PathHierarchyTokenizer; // Tokenizer for path-like hierarchies.\nClass PathHierarchyTokenizerFactory; // Factory for PathHierarchyTokenizer.\nClass ReversePathHierarchyTokenizer; // Tokenizer for domain-like hierarchies.\n", "des": "Analysis components for path-like strings such as filenames."}
{"index": 1652, "repo": "jena-core-4.9.0", "code": "Package: model\n\nSub Packages: \npackage model.impl; // This package contains implementations of the interfaces defined in the .model package, eg ModelCom for Model, ResourceImpl for Resource, and so on.\n\nClasses and Interfaces: \npublic interface Alt extends Container; // An RDF Alternative container.\npublic class AltHasNoDefaultException extends JenaException; // Exception thrown if an Alt has no default statement.\npublic class AnonId extends Object; // System id for an anonymous node.\npublic interface Bag extends Container; // An RDF Bag container.\npublic interface Container extends Resource; // An RDF Container.\npublic class DoesNotReifyException extends JenaException; // This exception may be raised when an attempt to convert an RDFNode to a ReifiedStatement fails because the RDFNode does not correspond to a reification.\npublic class EmptyListException extends JenaException; // A exception that is thrown when an operation is attempted on an empty (nil) list that actually requires a list of length one or more.\npublic class EmptyListUpdateException extends JenaException; // Exception that is thrown when an attept is made to perform a side-effectful operation on an RDFList that is the empty list, or rdf:nil.\npublic class HasNoModelException extends JenaException; // Exception to throw when a Statement or Resource (which don't have a useful common supertype, alas) don't have an associated model.\npublic interface InfModel extends Model; // An extension to the normal Model interface that supports access to any underlying inference capability.\npublic class InvalidListException extends JenaException; // A exception that is thrown when an operation is attempted on a list that is not well-formed, and is being processed in strict mode.\npublic class ListIndexException extends JenaException; // A exception that is thrown when an operation attempts to access an indexed list element beyond the length of the list.\npublic interface Literal extends RDFNode; // An RDF Literal.\npublic class LiteralRequiredException extends JenaException; // Exception to throw when an RDFNode required to be a Literal isn't, or when a literal Node is required but a non-literal Node supplied.\npublic interface Model extends ModelCon, ModelGraphInterface, RDFReaderF, RDFWriterF, PrefixMapping, Lock; // An RDF Model.\n", "des": "A package for creating and manipulating RDF graphs."}
{"index": 3895, "repo": "solr-solrj-9.3.0", "code": "Package: util\n\nClasses and Interfaces: \nInterface AsyncListener<T>; // Listener for async requests\nInterface Cancellable;\nClass ClientUtils;\nClass Constants;\nClass SolrBasicAuthentication; // BasicAuthentication that does not care about uri and realm\nClass SolrIdentifierValidator; // Ensures that provided identifiers align with Solr's recommendations/requirements for choosing collection, core, etc identifiers.\nEnum SolrIdentifierValidator.IdentifierType;\n", "des": "Utilities for Solr client applications."}
{"index": 1844, "repo": "spring-test-6.0.11", "code": "Package: junit4\n\nSub Packages: \npackage junit4.rules; // Custom JUnit 4 Rules used in the Spring TestContext Framework.\npackage junit4.statements; // Custom JUnit 4 Statements used in the Spring TestContext Framework.\n\nClasses and Interfaces: \npublic abstract class AbstractJUnit4SpringContextTests extends Object implements org.springframework.context.ApplicationContextAware; // Abstract base test class which integrates the Spring TestContext Framework with explicit ApplicationContext testing support in a JUnit 4 environment.\n@Transactional public abstract class AbstractTransactionalJUnit4SpringContextTests extends AbstractJUnit4SpringContextTests; // Abstract transactional extension of AbstractJUnit4SpringContextTests which adds convenience functionality for JDBC access.\npublic class SpringJUnit4ClassRunner extends BlockJUnit4ClassRunner; // SpringJUnit4ClassRunner is a custom extension of JUnit's BlockJUnit4ClassRunner which provides functionality of the Spring TestContext Framework to standard JUnit tests by means of the TestContextManager and associated support classes and annotations.\npublic final class SpringRunner extends SpringJUnit4ClassRunner; // SpringRunner is an alias for the SpringJUnit4ClassRunner.\n", "des": "Support classes for integrating the Spring TestContext Framework with JUnit 4.12 or higher."}
{"index": 2706, "repo": "spring-integration-ftp-6.1.2", "code": "Package: server\n\nClasses and Interfaces: \npublic abstract class ApacheMinaFtpEvent extends org.springframework.integration.file.remote.server.FileServerEvent; // ApplicationEvent generated from Apache Mina ftp events.\npublic class ApacheMinaFtplet extends org.apache.ftpserver.ftplet.DefaultFtplet implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // A listener for FTP events emitted by an Apache Mina ftp server.\npublic class DirectoryCreatedEvent extends FtpRequestEvent; // An event emitted when a directory is created.\npublic class FileWrittenEvent extends FtpRequestEvent; // An event that is emitted when a file is written.\npublic abstract class FtpRequestEvent extends ApacheMinaFtpEvent; // Base class for all events having an FtpRequest.\npublic class PathMovedEvent extends FtpRequestEvent; // An event emitted when a path is moved.\npublic class PathRemovedEvent extends FtpRequestEvent; // An event emitted when a file or directory is removed.\npublic class SessionClosedEvent extends ApacheMinaFtpEvent; // An event emitted when a session is closed.\npublic class SessionOpenedEvent extends ApacheMinaFtpEvent; // An event emitted when a session is opened.\n", "des": "Provides classes related to FTP servers."}
{"index": 2684, "repo": "spring-data-jpa-3.1.2", "code": "Package: repository\n\nSub Packages: \npackage repository.cdi; // CDI support for Spring Data JPA Repositories.\npackage repository.config; // Classes for JPA namespace configuration.\npackage repository.query; // Query implementation to execute queries against JPA.\npackage repository.support; // JPA repository implementations.\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface EntityGraph; // Annotation to configure the JPA 2.1 EntityGraphs that should be used on repository methods.\npublic static enum EntityGraph.EntityGraphType extends Enum<EntityGraph.EntityGraphType>; // Enum for JPA 2.1 EntityGraph types.\npublic interface JpaContext; // Interface for components to provide useful information about the current JPA setup within the current ApplicationContext.\n@NoRepositoryBean public interface JpaRepository<T,ID> extends ListCrudRepository<T,ID>, ListPagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T>; // JPA specific extension of Repository.\npublic interface JpaSpecificationExecutor<T>; // Interface to allow execution of Specifications based on the JPA criteria API.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Lock; // Annotation used to specify the LockModeType to be used when executing the query.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Meta; // Annotation to assign metadata to repository operations.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying; // Indicates a query method should be considered as modifying query as that changes the way it needs to be executed.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Query; // Annotation to declare finder queries directly on repository methods.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface QueryHints; // Wrapper annotation to allow QueryHint annotations to be bound to methods.\n@FunctionalInterface public interface QueryRewriter; // Callback to rewrite a query and apply sorting and pagination settings that cannot be applied based on a regularly detectable scheme.\n", "des": "Interfaces and annotations for JPA specific repositories."}
{"index": 2162, "repo": "wicket-core-10.0.0-M1", "code": "Package: request\n\nClasses and Interfaces: \npublic class WebClientInfo extends ClientInfo; // Default client info object for web applications.\n", "des": "This package contains http (web) protocol dependent implementations of request processing strategies."}
{"index": 2897, "repo": "spring-integration-amqp-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class AmqpChannelFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractAmqpChannel> implements org.springframework.context.SmartLifecycle, org.springframework.beans.factory.BeanNameAware; // If point-to-point, we send to the default exchange with the routing key equal to \"[beanName]\" and we declare that same Queue and register a listener if message-driven or poll explicitly otherwise.\npublic class AmqpChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration AMQP namespace.\npublic class AmqpInboundChannelAdapterParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the AMQP 'inbound-channel-adapter' element.\npublic class AmqpInboundGatewayParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the AMQP 'inbound-gateway' element.\npublic class AmqpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for the AMQP schema.\npublic class AmqpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the AMQP 'outbound-channel-adapter' element.\npublic class AmqpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the AMQP 'outbound-channel-adapter' element.\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 206, "repo": "nutch-2.4", "code": "Package: html\n\nClasses and Interfaces: \nClass HtmlIndexingFilter; // Add raw HTML content of a document to the index.\n", "des": "Index raw HTML content."}
{"index": 215, "repo": "nutch-2.4", "code": "Package: plugin\n\nClasses and Interfaces: \nInterface FieldPluggable;\nInterface Pluggable; // Defines the capability of a class to be plugged into Nutch.\nClass Extension; // An Extension is a kind of listener descriptor that will be installed on a concrete ExtensionPoint that acts as kind of Publisher.\nClass ExtensionPoint; // The ExtensionPoint provide meta information of a extension point.\nClass Plugin; // A nutch-plugin is an container for a set of custom logic that provide extensions to the nutch core functionality or another plugin that provides an API for extending.\nClass PluginClassLoader; // The PluginClassLoader is a child-first classloader that only contains classes of the runtime libraries setuped in the plugin manifest file and exported libraries of plugins that are required plugins.\nClass PluginDescriptor; // The PluginDescriptor provide access to all meta information of a nutch-plugin, as well to the internationalizable resources and the plugin own classloader.\nClass PluginManifestParser; // The PluginManifestParser parser just parse the manifest file in all plugin directories.\nClass PluginRepository; // The plugin repositority is a registry of all plugins.\nClass CircularDependencyException; // CircularDependencyException will be thrown if a circular dependency is detected.\nClass MissingDependencyException; // MissingDependencyException will be thrown if a plugin dependency cannot be found.\nClass PluginRuntimeException; // PluginRuntimeException will be thrown until a exception in the plugin managemnt occurs.\n", "des": "The Nutch Plugin System."}
{"index": 3634, "repo": "solr-core-9.3.0", "code": "Package: analysis\n\nClasses and Interfaces: \nClass LowerCaseTokenizer;\nClass LowerCaseTokenizerFactory;\nClass ReversedWildcardFilter; // This class produces a special form of reversed tokens, suitable for better handling of leading wildcards.\nClass ReversedWildcardFilterFactory; // Factory for ReversedWildcardFilter-s.\nClass SolrAnalyzer;\nClass TokenizerChain; // An analyzer that uses a tokenizer and a list of token filters to create a TokenStream.\n", "des": "Factories and classes specific to text analysis and the creation of TokenStreams"}
{"index": 2657, "repo": "spring-data-cassandra-4.1.2", "code": "Package: legacy\n\nClasses and Interfaces: \n@Deprecated(since=\"4.0\", forRemoval=true) public interface AsyncCassandraOperations;\n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncCassandraTemplate extends Object implements AsyncCassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware;\npublic static interface AsyncCassandraTemplate.AsyncPreparedStatementHandler extends AsyncPreparedStatementCreator, PreparedStatementBinder, CqlProvider; // General callback interface used to create and bind prepared CQL statements.\npublic static class AsyncCassandraTemplate.PreparedStatementHandler extends Object implements AsyncCassandraTemplate.AsyncPreparedStatementHandler; // Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement.\n", "des": "Apache Cassandra legacy asynchronous support for easier migration."}
{"index": 2357, "repo": "spring-boot-3.1.1", "code": "Package: servlet\n\nSub Packages: \npackage servlet.context; // Servlet based web integrations with Spring's WebApplicationContext.\npackage servlet.error; // Spring MVC error handling infrastructure.\npackage servlet.filter; // Spring Boot specific Filter implementations.\npackage servlet.server; // Servlet web server abstractions.\npackage servlet.support; // Support classes for Servlet-based web servers.\npackage servlet.view; // Additional Views for use with Web MVC.\n\nClasses and Interfaces: \npublic abstract class AbstractFilterRegistrationBean<T extends jakarta.servlet.Filter> extends DynamicRegistrationBean<jakarta.servlet.FilterRegistration.Dynamic>; // Abstract base ServletContextInitializer to register Filters in a Servlet 3.0+ container.\npublic class DelegatingFilterProxyRegistrationBean extends AbstractFilterRegistrationBean<org.springframework.web.filter.DelegatingFilterProxy> implements org.springframework.context.ApplicationContextAware; // A ServletContextInitializer to register DelegatingFilterProxys in a Servlet 3.0+ container.\npublic enum DispatcherType extends Enum<DispatcherType>; // Enumeration of filter dispatcher types, identical to DispatcherType and used in configuration as the servlet API may not be present.\npublic abstract class DynamicRegistrationBean<D extends jakarta.servlet.Registration.Dynamic> extends RegistrationBean implements org.springframework.beans.factory.BeanNameAware; // Base class for Servlet 3.0+ dynamic based registration beans.\npublic class FilterRegistrationBean<T extends jakarta.servlet.Filter> extends AbstractFilterRegistrationBean<T>; // A ServletContextInitializer to register Filters in a Servlet 3.0+ container.\npublic class MultipartConfigFactory extends Object; // Factory that can be used to create a MultipartConfigElement.\npublic abstract class RegistrationBean extends Object implements ServletContextInitializer, org.springframework.core.Ordered; // Base class for Servlet 3.0+ based registration beans.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.boot.web.servlet.ServletComponentScanRegistrar.class) public @interface ServletComponentScan; // Enables scanning for Servlet components (filters, servlets, and listeners).\n@FunctionalInterface public interface ServletContextInitializer; // Interface used to configure a Servlet 3.0+ context programmatically.\n", "des": "Classes and utilities designed to work with the jakarta.servlet specification."}
{"index": 2321, "repo": "spring-boot-3.1.1", "code": "Package: hibernate\n\nClasses and Interfaces: \npublic class SpringImplicitNamingStrategy extends org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl; // Hibernate ImplicitNamingStrategy that follows Spring recommended naming conventions.\npublic class SpringJtaPlatform extends org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform; // Generic Hibernate AbstractJtaPlatform implementation that simply resolves the JTA UserTransaction and TransactionManager from the Spring-configured JtaTransactionManager implementation.\n", "des": "Hibernate Support classes."}
{"index": 2271, "repo": "spring-vault-core-3.0.4", "code": "Package: query\n\nClasses and Interfaces: \npublic class VaultPartTreeQuery extends KeyValuePartTreeQuery; // Vault-specific KeyValuePartTreeQuery.\npublic class VaultQuery extends Object; // Vault query consisting of a single Predicate.\npublic class VaultQueryCreator extends AbstractQueryCreator<KeyValueQuery<VaultQuery>,VaultQuery>; // Query creator for Vault queries.\n", "des": "Query derivation mechanism for Vault specific repositories."}
{"index": 109, "repo": "ignite-core-2.15.0", "code": "Package: platform\n\nClasses and Interfaces: \nInterface PlatformCachePluginConfigurationClosure; // Platform cache configuration handler: updates plugin configuration using data sent from platform code.\nInterface PlatformCachePluginConfigurationClosureFactory; // Factory for @PlatformCachePluginConfigurationClosure with a unique id.\nInterface PlatformPluginConfigurationClosure; // Platform configuration handler: updates plugin configuration using data sent from platform code.\nInterface PlatformPluginConfigurationClosureFactory; // Factory for @PlatformPluginConfigurationClosure with a unique id.\n", "des": "Contains platform plugins management API."}
{"index": 1265, "repo": "spring-core-6.0.11", "code": "Package: transform\n\nSub Packages: \npackage transform.impl; // Spring's repackaging of the CGLIB transform impl package (for internal use only).\n\nClasses and Interfaces: \npublic abstract class AbstractClassFilterTransformer extends AbstractClassTransformer;\npublic abstract class AbstractClassLoader extends ClassLoader;\npublic abstract class AbstractClassTransformer extends ClassTransformer;\npublic class AnnotationVisitorTee extends AnnotationVisitor;\npublic abstract class ClassEmitterTransformer extends ClassEmitter;\npublic interface ClassFilter;\npublic class ClassFilterTransformer extends AbstractClassFilterTransformer;\npublic class ClassReaderGenerator extends Object implements ClassGenerator;\npublic class ClassTransformerChain extends AbstractClassTransformer;\npublic interface ClassTransformerFactory;\npublic class ClassTransformerTee extends ClassTransformer;\npublic class ClassVisitorTee extends ClassVisitor;\npublic class FieldVisitorTee extends FieldVisitor;\npublic interface MethodFilter;\npublic class MethodFilterTransformer extends AbstractClassTransformer;\npublic class MethodVisitorTee extends MethodVisitor;\npublic class TransformingClassGenerator extends Object implements ClassGenerator;\npublic class TransformingClassLoader extends AbstractClassLoader;\n", "des": "Spring's repackaging of the CGLIB transform package (for internal use only)."}
{"index": 1928, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webflux.GraphQlHttpHandler.class}) @ConditionalOnBean(org.springframework.graphql.ExecutionGraphQlService.class) @EnableConfigurationProperties(GraphQlCorsProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.graphql.reactive.GraphQlWebFluxAutoConfiguration.GraphiQlResourceHints.class) public class GraphQlWebFluxAutoConfiguration extends Object; // Auto-configuration for enabling Spring GraphQL over WebFlux.\n@Configuration(proxyBeanMethods=false) public static class GraphQlWebFluxAutoConfiguration.GraphQlEndpointCorsConfiguration extends Object implements org.springframework.web.reactive.config.WebFluxConfigurer;\n@Configuration(proxyBeanMethods=false) @ConditionalOnProperty(prefix=\"spring.graphql.websocket\", name=\"path\") public static class GraphQlWebFluxAutoConfiguration.WebSocketConfiguration extends Object;\n", "des": "Auto-configuration classes for WebFlux support in Spring GraphQL."}
{"index": 2566, "repo": "pulsar-common-3.0.0", "code": "Package: schema\n\nClasses and Interfaces: \npublic class LongSchemaVersion extends Object implements SchemaVersion; // Long schema version.\n", "des": "Implementation of the common of the pulsar schema."}
{"index": 3340, "repo": "opencms-core-15.0", "code": "Package: components\n\nSub Packages: \npackage components.editablegroup; // Contains components for editing a homogeneous list of Vaadin components, often used for multivalued fields in dialogs.\npackage components.extensions; // Contains Vaadin UI extensions.\npackage components.fileselect; // Contains components for selecting resources.\n\nClasses and Interfaces: \nInterface CmsAutoItemCreatingComboBox.I_NewValueHandler; // Handles automatic creation of new values.\nInterface CmsFileTable.I_FolderSelectHandler; // Handles folder selects in the file table.\nInterface CmsResourceTable.I_ResourcePropertyProvider; // Provides item property values for additional table columns.\nInterface CmsUploadButton.I_UploadListener; // Upload listener interface.\nInterface I_CmsFilePropertyEditHandler; // File table inline edit handler.\nInterface I_CmsWindowCloseListener; // Window close listener.\nClass A_CmsFocusShortcutListener; // Shortcut listener that will only be active, while the given text field has the keyboard focus.\nClass CmsAppViewLayout; // The layout used within the app view.\nClass CmsAutoItemCreatingComboBox; // A combo box which automatically creates a new option if setValue is called with an item id not already contained in the data source.\nClass CmsBasicDialog; // Basic dialog class with a content panel and button bar.\nClass CmsBasicReportPage; // Page to display a report.\nClass CmsBreadCrumb; // The bread crumb component.\nClass CmsBrowserFrame; // Extending the browser frame class to allow setting of the iFrame name attribute.\nClass CmsButtonFormRow<T extends com.vaadin.ui.Component>; // Form row with button.\nClass CmsConfirmationDialog; // Basic confirmation dialog.\nClass CmsCopyToClipboardButton; // The copy to clip-board/select text button.\nClass CmsDateField; // Convenience subclass of PopupDateField which comes preconfigured with a resolution and validation error message.\nClass CmsErrorDialog; // Dialog used to display error stack traces in the workplace.\nClass CmsExtendedSiteSelector; // Site selector widget which also optionally offers subsite options.\nClass CmsExtendedSiteSelector.SiteSelectorOption; // Class representing a single option.\nClass CmsExternalLayout; // Single component container that can render the given component in any HTML element.\n", "des": "Contains some reusable GUI components for Vaadin UI."}
{"index": 3592, "repo": "lucene-test-framework-9.7.0", "code": "Package: geo\n\nClasses and Interfaces: \nClass BaseGeoPointTestCase; // Abstract class to do basic tests for a geospatial impl (high level fields and queries) NOTE: This test focuses on geospatial (distance queries, polygon queries, etc) indexing and search, not any underlying storage format or encoding: it merely supplies two hooks for the encoding so that tests can be exact.\nClass BaseXYPointTestCase; // Abstract class to do basic tests for a xy spatial impl (high level fields and queries)\nClass EarthDebugger; // Draws shapes on the earth surface and renders using the very cool http://www.webglearth.org.\nClass GeoTestUtil; // static methods for testing geo\nClass ShapeTestUtil; // generates random cartesian geometry; heavy reuse of GeoTestUtil\n", "des": "Reusable geo test utilities."}
{"index": 1019, "repo": "commons-email-1.5", "code": "Package: mail\n\nSub Packages: \npackage mail.resolver; // Contains implementation classes to resolve data sources from the following locations: class path file system URL\npackage mail.util; // This package provides some utility classes.\n\nClasses and Interfaces: \nInterface DataSourceResolver; // Creates a DataSource based on an URL.\nClass ByteArrayDataSource; // since 1.4, use ByteArrayDataSource instead\nClass DefaultAuthenticator; // This is a very simple authentication object that can be used for any transport needing basic userName and password type authentication.\nClass Email; // The base class for all email messages.\nClass EmailAttachment; // This class models an email attachment.\nClass EmailConstants; // Constants used by Email classes.\nClass HtmlEmail; // An HTML multipart email.\nClass ImageHtmlEmail; // Small wrapper class on top of HtmlEmail which encapsulates the required logic to retrieve images that are contained in \"<img src=..\nClass MultiPartEmail; // A multipart email.\nClass SimpleEmail; // This class is used to send simple internet email messages without attachments.\nClass EmailException; // Exception thrown when a checked error occurs in commons-email.\n", "des": "Commons-Email aims to provide a API for sending email."}
{"index": 3528, "repo": "opennlp-tools-2.2.0", "code": "Package: lemmatizer\n\nClasses and Interfaces: \nInterface Lemmatizer; // The common interface for lemmatizers.\nInterface LemmatizerContextGenerator; // Interface for the context generator used for probabilistic Lemmatizer.\nInterface LemmatizerEvaluationMonitor; // A marker interface for evaluating lemmatizers.\nClass DefaultLemmatizerContextGenerator; // Simple feature generator for learning statistical lemmatizers.\nClass DefaultLemmatizerSequenceValidator; // The default lemmatizer SequenceValidator implementation.\nClass DictionaryLemmatizer; // A Lemmatizer implementation that works by simple dictionary lookup into a Map built from a file containing, for each line:\nClass LemmaSample; // Represents a lemmatized sentence.\nClass LemmaSampleEventStream; // Class for creating an event stream out of data files for training a probabilistic Lemmatizer.\nClass LemmaSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass LemmaSampleStream; // Reads data for training and testing the Lemmatizer.\nClass LemmatizerEvaluator; // The LemmatizerEvaluator measures the performance of the given Lemmatizer with the provided reference samples.\nClass LemmatizerFactory; // The factory that provides Lemmatizer default implementation and resources.\nClass LemmatizerME; // A probabilistic Lemmatizer implementation.\nClass LemmatizerModel; // The LemmatizerModel is the model used by a learnable Lemmatizer.\n", "des": "Package related to the lemmatizer functionality."}
{"index": 1547, "repo": "spring-context-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic class LangNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler that supports the wiring of objects backed by dynamic languages such as Groovy, JRuby and BeanShell.\npublic abstract class LangNamespaceUtils extends Object; // Utilities for use with LangNamespaceHandler.\n", "des": "Support package for Spring's dynamic language machinery, with XML schema being the primary configuration format."}
{"index": 2340, "repo": "spring-boot-3.1.1", "code": "Package: validation\n\nSub Packages: \npackage validation.beanvalidation; // Utilities and classes related to bean validation.\n\nClasses and Interfaces: \npublic class MessageInterpolatorFactory extends Object implements org.springframework.beans.factory.ObjectFactory<jakarta.validation.MessageInterpolator>; // ObjectFactory that can be used to create a MessageInterpolator.\n", "des": "Utilities and classes related to validation."}
{"index": 2892, "repo": "spring-integration-core-6.1.2", "code": "Package: transaction\n\nClasses and Interfaces: \npublic class DefaultTransactionSynchronizationFactory extends Object implements TransactionSynchronizationFactory; // Default implementation of TransactionSynchronizationFactory which takes an instance of TransactionSynchronizationProcessor allowing you to create a TransactionSynchronization using {DefaultTransactionSynchronizationFactory.create(Object) method.\npublic class ExpressionEvaluatingTransactionSynchronizationProcessor extends IntegrationObjectSupport implements TransactionSynchronizationProcessor; // This implementation of TransactionSynchronizationFactory allows you to configure SpEL expressions, with their execution being coordinated (synchronized) with a transaction - see TransactionSynchronization.\npublic class IntegrationResourceHolder extends Object implements org.springframework.transaction.support.ResourceHolder; // An implementation of the ResourceHolder which holds an instance of the current Message and the synchronization resource.\npublic class IntegrationResourceHolderSynchronization extends org.springframework.transaction.support.ResourceHolderSynchronization<IntegrationResourceHolder,Object>; // The base ResourceHolderSynchronization for IntegrationResourceHolder.\npublic class PassThroughTransactionSynchronizationFactory extends Object implements TransactionSynchronizationFactory; // A simple TransactionSynchronizationFactory implementation which produces an IntegrationResourceHolderSynchronization with an IntegrationResourceHolder.\npublic class PseudoTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager; // An implementation of PlatformTransactionManager that provides transaction-like semantics to MessageSources that are not inherently transactional.\npublic class TransactionHandleMessageAdvice extends org.springframework.transaction.interceptor.TransactionInterceptor implements HandleMessageAdvice; // A TransactionInterceptor extension with HandleMessageAdvice marker.\npublic class TransactionInterceptorBuilder extends Object; // Provides a fluent API to build a transaction interceptor.\npublic interface TransactionSynchronizationFactory; // Strategy for implementing factories that create TransactionSynchronization.\npublic class TransactionSynchronizationFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<DefaultTransactionSynchronizationFactory>, org.springframework.beans.factory.BeanFactoryAware; // The FactoryBean implementation (with Builder style) to be used from JavaConfig to populate DefaultTransactionSynchronizationFactory bean.\npublic interface TransactionSynchronizationProcessor; // Strategy for implementing transaction synchronization processors.\n", "des": "Provides classes supporting the use of transactions and pseudo transactions in Spring Integration applications."}
{"index": 2632, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: subject\n\nSub Packages: \npackage subject.support; // Supporting implementations of org.apache.shiro.web.subject package interfaces.\n\nClasses and Interfaces: \npublic interface WebSubject extends org.apache.shiro.subject.Subject, RequestPairSource; // A WebSubject represents a Subject instance that was acquired as a result of an incoming ServletRequest.\npublic static class WebSubject.Builder extends org.apache.shiro.subject.Subject.Builder; // A WebSubject.Builder performs the same function as a Subject.Builder, but additionally ensures that the Servlet request/response pair that is triggering the Subject instance's creation is retained for use by internal Shiro components as necessary.\npublic interface WebSubjectContext extends org.apache.shiro.subject.SubjectContext, RequestPairSource; // A WebSubjectContext is a SubjectContext that additionally provides for type-safe methods to set and retrieve a ServletRequest and ServletResponse.\n", "des": "Web-specific Subject interfaces to enable Subject use in web environments."}
{"index": 1905, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: condition\n\nClasses and Interfaces: \npublic abstract class AbstractNestedCondition extends SpringBootCondition implements org.springframework.context.annotation.ConfigurationCondition; // Abstract base class for nested conditions.\nprotected static class AbstractNestedCondition.MemberMatchOutcomes extends Object;\npublic abstract class AllNestedConditions extends AbstractNestedCondition; // Condition that will match when all nested class conditions match.\n@Order(2147483627) public abstract class AnyNestedCondition extends AbstractNestedCondition; // Condition that will match when any nested class condition matches.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnBeanCondition.class) public @interface ConditionalOnBean; // @Conditional that only matches when beans meeting all the specified requirements are already contained in the BeanFactory.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnClassCondition.class) public @interface ConditionalOnClass; // @Conditional that only matches when the specified classes are on the classpath.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnCloudPlatformCondition.class) public @interface ConditionalOnCloudPlatform; // @Conditional that matches when the specified cloud platform is active.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnExpressionCondition.class) public @interface ConditionalOnExpression; // Configuration annotation for a conditional element that depends on the value of a SpEL expression.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.condition.OnJavaCondition.class) public @interface ConditionalOnJava; // @Conditional that matches based on the JVM version the application is running on.\npublic static enum ConditionalOnJava.Range extends Enum<ConditionalOnJava.Range>; // Range options.\n", "des": "@Condition annotations and supporting classes."}
{"index": 2112, "repo": "spring-webflux-6.0.11", "code": "Package: upgrade\n\nClasses and Interfaces: \npublic class JettyRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Jetty 11.\npublic class ReactorNetty2RequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Reactor Netty for Netty 5.\npublic class ReactorNettyRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Reactor Netty.\npublic class StandardWebSocketUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for the Jakarta WebSocket API 2.1+.\npublic class TomcatRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Apache Tomcat.\npublic class UndertowRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Undertow.\n", "des": "Holds implementations of RequestUpgradeStrategy."}
{"index": 114, "repo": "ignite-core-2.15.0", "code": "Package: marshaller\n\nSub Packages: \npackage marshaller.jdk; // Contains JDK java.io based marshaller.\n\nClasses and Interfaces: \nInterface Marshaller; // Marshaller allows to marshal or unmarshal objects in grid.\nInterface MarshallerContext; // Marshaller context.\nClass AbstractMarshaller; // Base class for marshallers.\nClass AbstractNodeNameAwareMarshaller; // Marshaller allowing for Ignition.localIgnite() calls.\nClass MarshallerExclusions; // Controls what classes should be excluded from marshalling by default.\nClass MarshallerUtils; // Utility marshaller methods.\n", "des": "Contains various supported marshallers."}
{"index": 3285, "repo": "opencms-core-15.0", "code": "Package: simplesearch\n\nSub Packages: \npackage simplesearch.daterestrictions; // Contains classes for dealing with restrictions in list configurations.\npackage simplesearch.preconfiguredrestrictions; // Helpers for the preconfigured filter query part of the list configuration (ie.\n\nClasses and Interfaces: \nClass CmsCategoryFolderRestrictionBean; // Wrapper for a combined category and folder restriction.\nClass CmsConfigParserUtils; // Utils to read and update the list configuration.\nClass CmsConfigurationBean; // The list configuration data.\nClass CmsGeoFilterBean; // Bean representing a Geo filter.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsConfigurationBean.CombinationMode; // Enum representing how filter queries should be combined in a search.\n", "des": "Helpers to convert the list configuration XML content into a suitable bean, used by the CmsSimpleSearchConfigurationParser and the List manager app."}
{"index": 414, "repo": "hadoop-azure-3.3.6", "code": "Package: metrics\n\nClasses and Interfaces: \nClass AzureFileSystemInstrumentation; // A metrics source for the WASB file system to track all the metrics we care about for getting a clear picture of the performance/reliability/interaction of the Hadoop cluster with Azure Storage.\nClass AzureFileSystemMetricsSystem; // AzureFileSystemMetricsSystem\nClass BandwidthGaugeUpdater; // Internal implementation class to help calculate the current bytes uploaded/downloaded and the maximum bandwidth gauges.\nClass ErrorMetricUpdater; // An event listener to the ResponseReceived event from Azure Storage that will update error metrics appropriately when it gets that event.\nClass ResponseReceivedMetricUpdater; // An event listener to the ResponseReceived event from Azure Storage that will update metrics appropriately when it gets that event.\n", "des": "Infrastructure for a Metrics2 source that provides information on Windows Azure Filesystem for Hadoop instances."}
{"index": 3009, "repo": "spring-web-6.0.11", "code": "Package: json\n\nClasses and Interfaces: \npublic abstract class AbstractJackson2HttpMessageConverter extends AbstractGenericHttpMessageConverter<Object>; // Abstract base class for Jackson based and content type independent HttpMessageConverter implementations.\npublic abstract class AbstractJsonHttpMessageConverter extends AbstractGenericHttpMessageConverter<Object>; // Common base class for plain JSON converters, e.g.\npublic abstract class GsonBuilderUtils extends Object; // A simple utility class for obtaining a Google Gson 2.x GsonBuilder which Base64-encodes byte[] properties when reading and writing JSON.\npublic class GsonFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<com.google.gson.Gson>, org.springframework.beans.factory.InitializingBean; // A FactoryBean for creating a Google Gson 2.x Gson instance.\npublic class GsonHttpMessageConverter extends AbstractJsonHttpMessageConverter; // Implementation of HttpMessageConverter that can read and write JSON using the Google Gson library.\npublic class Jackson2ObjectMapperBuilder extends Object; // A builder used to create ObjectMapper instances with a fluent API.\npublic class Jackson2ObjectMapperFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ObjectMapper>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // A FactoryBean for creating a Jackson 2.x ObjectMapper (default) or XmlMapper (createXmlMapper property set to true) with setters to enable or disable Jackson features from within XML configuration.\npublic class JsonbHttpMessageConverter extends AbstractJsonHttpMessageConverter; // Implementation of HttpMessageConverter that can read and write JSON using the JSON Binding API.\npublic class KotlinSerializationJsonHttpMessageConverter extends KotlinSerializationStringHttpMessageConverter<kotlinx.serialization.json.Json>; // Implementation of HttpMessageConverter that can read and write JSON using kotlinx.serialization.\npublic class MappingJackson2HttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write JSON using Jackson 2.x's ObjectMapper.\n", "des": "Provides HttpMessageConverter implementations for handling JSON."}
{"index": 226, "repo": "nutch-2.4", "code": "Package: impl\n\nClasses and Interfaces: \nInterface CrawlingCycleListener;\nClass CrawlingCycle; // This class implements crawl cycle as in crawl script\nClass NutchClientImpl;\nClass RemoteCommand;\nClass RemoteCommandBuilder;\nClass RemoteCommandExecutor; // This class executes remote job and waits for success/failure result\nClass RemoteCommandsBatchFactory;\n", "des": "Contains implementation of client classes and interfaces for Web UI"}
{"index": 1639, "repo": "spring-kafka-3.0.9", "code": "Package: transaction\n\nClasses and Interfaces: \n@Deprecated public class ChainedKafkaTransactionManager<K,V> extends org.springframework.data.transaction.ChainedTransactionManager implements KafkaAwareTransactionManager<K,V>;\npublic interface KafkaAwareTransactionManager<K,V> extends org.springframework.transaction.PlatformTransactionManager; // A transaction manager that can provide a ProducerFactory.\npublic class KafkaTransactionManager<K,V> extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements KafkaAwareTransactionManager<K,V>; // PlatformTransactionManager implementation for a single Kafka ProducerFactory.\n", "des": "Provides classes related to transactions."}
{"index": 1807, "repo": "spring-aop-6.0.11", "code": "Package: target\n\nClasses and Interfaces: \npublic abstract class AbstractBeanFactoryBasedTargetSourceCreator extends Object implements TargetSourceCreator, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.DisposableBean; // Convenient superclass for TargetSourceCreator implementations that require creating multiple instances of a prototype bean.\npublic class LazyInitTargetSourceCreator extends AbstractBeanFactoryBasedTargetSourceCreator; // TargetSourceCreator that enforces a LazyInitTargetSource for each bean that is defined as \"lazy-init\".\npublic class QuickTargetSourceCreator extends AbstractBeanFactoryBasedTargetSourceCreator; // Convenient TargetSourceCreator using bean name prefixes to create one of three well-known TargetSource types: : CommonsPool2TargetSource % ThreadLocalTargetSource ! PrototypeTargetSource\n", "des": "Various TargetSourceCreator implementations for use with Spring's AOP auto-proxying support."}
{"index": 3708, "repo": "solr-core-9.3.0", "code": "Package: spelling\n\nSub Packages: \npackage spelling.suggest; // APIs and classes used by the SpellCheckComponent\n\nClasses and Interfaces: \nClass AbstractLuceneSpellChecker; // Abstract base class for all Lucene-based spell checking implementations.\nClass ConjunctionSolrSpellChecker; // This class lets a query be run through multiple spell checkers.\nClass DirectSolrSpellChecker; // Spellchecker implementation that uses DirectSpellChecker\nClass FileBasedSpellChecker; // A spell checker implementation that loads words from a text file (one word per line).\nClass IndexBasedSpellChecker; // A spell checker implementation that loads words from Solr as well as arbitrary Lucene indices.\nClass PossibilityIterator; // Given a list of possible Spelling Corrections for multiple mis-spelled words in a query, This iterator returns Possible Correction combinations ordered by reasonable probability that such a combination will return actual hits if re-queried.\nClass PossibilityIterator.RankedSpellPossibility;\nClass QueryConverter; // The QueryConverter is an abstract base class defining a method for converting input \"raw\" queries into a set of tokens for spell checking.\nClass ResultEntry;\nClass SolrSpellChecker; // Refer to https://solr.apache.org/guide/solr/latest/query-guide/spell-checking.html for more details.\nClass SpellCheckCollation;\nClass SpellCheckCollator;\nClass SpellCheckCorrection;\nClass SpellingOptions;\nClass SpellingQueryConverter; // Converts the query string to a Collection of Lucene tokens using a regular expression.\nClass SpellingResult; // Implementations of SolrSpellChecker must return suggestions as SpellResult instance.\nClass SuggestQueryConverter; // Passes the entire query string to the configured analyzer as-is.\nClass Token;\nClass WordBreakSolrSpellChecker; // A spellchecker that breaks and combines words.\nEnum WordBreakSolrSpellChecker.BreakSuggestionTieBreaker; // Specify a value on the \"breakSugestionTieBreaker\" parameter.\n", "des": "APIs and classes used by the SpellCheckComponent"}
{"index": 3704, "repo": "solr-core-9.3.0", "code": "Package: stats\n\nClasses and Interfaces: \nClass CollectionStats; // Modifiable version of CollectionStatistics useful for aggregation of per-shard stats.\nClass ExactSharedStatsCache; // This class implements exact caching of statistics.\nClass ExactStatsCache; // This class implements exact caching of statistics.\nClass ExactStatsCache.ExactStatsSource;\nClass LocalStatsCache; // Default implementation that simply ignores global term statistics, and always uses local term statistics.\nClass LocalStatsSource; // Convenience class that wraps a local SolrIndexSearcher to provide local statistics.\nClass LRUStatsCache; // Unlike ExactStatsCache this implementation preserves term stats across queries in a set of LRU caches (with the same life-cycle as SolrIndexSearcher), and based on surface features of a query it determines the need to send additional requests to retrieve local term and collection statistics from shards.\nClass StatsCache; // This class represents a cache of global document frequency information for selected terms.\nClass StatsCache.StatsCacheMetrics;\nClass StatsSource; // The purpose of this class is only to provide two pieces of information necessary to create Weight from a Query, that is TermStatistics for a term and CollectionStatistics for the whole collection.\nClass StatsUtil; // Various utilities for de/serialization of term stats and collection stats.\nClass TermStats; // Modifiable version of TermStatistics useful for aggregation of per-shard stats.\n", "des": "APIs and Classes implementing the Stats component used for document frequency calculations."}
{"index": 2337, "repo": "spring-boot-3.1.1", "code": "Package: task\n\nClasses and Interfaces: \npublic class TaskExecutorBuilder extends Object; // Builder that can be used to configure and create a TaskExecutor.\n@FunctionalInterface public interface TaskExecutorCustomizer; // Callback interface that can be used to customize a ThreadPoolTaskExecutor.\npublic class TaskSchedulerBuilder extends Object; // Builder that can be used to configure and create a TaskScheduler.\n@FunctionalInterface public interface TaskSchedulerCustomizer; // Callback interface that can be used to customize a ThreadPoolTaskScheduler.\n", "des": "Utilities and classes related to task execution and scheduling."}
{"index": 3654, "repo": "solr-core-9.3.0", "code": "Package: api\n\nClasses and Interfaces: \nClass AddReplicaPropertyAPI; // V2 API for adding a property to a collection replica\nClass AddReplicaPropertyAPI.AddReplicaPropertyRequestBody;\nClass AdminAPIBase; // A common parent for \"admin\" (i.e.\nClass AliasPropertyAPI; // V2 APIs for managing and inspecting properties for collection aliases\nClass AliasPropertyAPI.GetAliasPropertyResponse;\nClass AliasPropertyAPI.GetAllAliasPropertiesResponse;\nClass AliasPropertyAPI.UpdateAliasPropertiesRequestBody;\nClass AliasPropertyAPI.UpdateAliasPropertyRequestBody;\nClass AllCoresStatusAPI; // V2 API for retrieving status information for all cores on the receiving node.\nClass BackupAPIBase; // Base class that facilitates reuse of common validation logic for collection-backup APIs.\nClass BalanceReplicasAPI; // V2 API for balancing the replicas that already exist across a set of nodes.\nClass BalanceReplicasAPI.BalanceReplicasRequestBody;\nClass BalanceShardUniqueAPI; // V2 API for insuring that a particular property is distributed evenly amongst the physical nodes comprising a collection.\nClass BalanceShardUniqueAPI.BalanceShardUniqueRequestBody;\nClass CancelTaskAPI; // V2 API for cancelling a currently running \"task\".\nClass CollectionPropertyAPI; // V2 API for modifying collection-level properties.\nClass CollectionPropertyAPI.UpdateCollectionPropertyRequestBody;\nClass CollectionStatusAPI; // V2 API for displaying basic information about a single collection.\nClass CoreAdminAPIBase; // A common parent for admin Core Jersey-based APIs.\nClass CoreReplicationAPI; // V2 APIs for inspecting and replicating indices\nClass CoreReplicationAPI.FileListResponse; // Response for CoreReplicationAPI.fetchFileList(long).\nClass CoreReplicationAPI.FileMetaData; // Contained in CoreReplicationAPI.FileListResponse, this holds metadata from a file for an index\nClass CoreReplicationAPI.IndexVersionResponse; // Response for CoreReplicationAPI.fetchIndexVersion().\nClass CoreSnapshotAPI; // V2 API for Creating, Listing, and Deleting Core Snapshots.\nClass CoreSnapshotAPI.CreateSnapshotResponse; // The Response for CoreSnapshotAPI's CoreSnapshotAPI.createSnapshot(String, String, String)\n", "des": "V2 API implementations for \"admin\" APIs."}
{"index": 718, "repo": "commons-codec-1.16.0", "code": "Package: codec\n\nSub Packages: \npackage codec.binary; // Base64, Base32, Binary, and Hexadecimal String encoding and decoding.\npackage codec.cli; // Command line utility.\npackage codec.digest; // Simplifies common MessageDigest tasks and includes a libc crypt(3) compatible crypt method that supports DES, MD5, SHA-256 and SHA-512 based algorithms as well as the Apache specific \"$apr1$\" variant.\npackage codec.language; // Language and phonetic encoders.\npackage codec.net; // Network related encoding and decoding.\n\nClasses and Interfaces: \nInterface BinaryDecoder; // Defines common decoding methods for byte array decoders.\nInterface BinaryEncoder; // Defines common encoding methods for byte array encoders.\nInterface Decoder; // Provides the highest level of abstraction for Decoders.\nInterface Encoder; // Provides the highest level of abstraction for Encoders.\nInterface StringDecoder; // Defines common decoding methods for String decoders.\nInterface StringEncoder; // Defines common encoding methods for String encoders.\nClass CharEncoding; // Character encoding names required of every implementation of the Java platform.\nClass Charsets; // Charsets required of every implementation of the Java platform.\nClass Resources; // Consider this class package private.\nClass StringEncoderComparator; // Compares Strings using a StringEncoder.\nEnum CodecPolicy; // Defines encoding and decoding policies.\nClass DecoderException; // Thrown when there is a failure condition during the decoding process.\nClass EncoderException; // Thrown when there is a failure condition during the encoding process.\n", "des": "Interfaces and classes used by the various implementations in the sub-packages."}
{"index": 1913, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: jdbc\n\nClasses and Interfaces: \n@AutoConfiguration(after={JdbcTemplateAutoConfiguration.class,DataSourceTransactionManagerAutoConfiguration.class}) @ConditionalOnBean({org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations.class,org.springframework.transaction.PlatformTransactionManager.class}) @ConditionalOnClass({org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations.class,org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration.class}) @ConditionalOnProperty(prefix=\"spring.data.jdbc.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) public class JdbcRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's JDBC Repositories.\n", "des": "Auto-configuration for Spring Data JDBC."}
{"index": 3897, "repo": "solr-solrj-9.3.0", "code": "Package: common\n\nSub Packages: \npackage common.annotation; // Annotations mapping to Jackson\npackage common.cloud; // Common Solr Cloud and ZooKeeper related classes reused on both clients & server.\npackage common.luke; // Common constants used by the LukeRequestHandler.\npackage common.params; // Parameter constants and enumerations.\npackage common.util; // Common utility classes reused on both clients & server.\n\nClasses and Interfaces: \nInterface Callable<T>;\nInterface ConfigNode; // A generic interface that represents a config file, mostly XML Please note that this is an immutable, read-only object.\nInterface IteratorWriter; // Interface to help do push writing to an array\nInterface IteratorWriter.ItemWriter;\nInterface MapSerializable; // This is to facilitate just in time creation of objects before writing it to the response.\nInterface MapWriter; // Use this class to push all entries of a Map into an output.\nInterface MapWriter.EntryWriter; // An interface to push one entry at a time to the output.\nInterface NavigableObject; // This class contains helper methods for navigating deeply nested Objects.\nInterface PushWriter; // This is an interface to stream data out using a push API\nInterface SolrCloseable; // A Closeable that also allows checking whether it's been closed.\nInterface SpecProvider; // A generic interface for any class that is capable of providing its specification as a json schema\nClass ConditionalKeyMapWriter;\nClass ConditionalKeyMapWriter.EntryWriterWrapper;\nClass ConditionalMapWriter;\nClass ConditionalMapWriter.EntryWriterWrapper;\nClass ConfigNode.Helpers;\nClass EmptyEntityResolver; // This class provides several singletons of entity resolvers used by SAX and StAX in the Java API.\nClass EnumFieldValue; // Represents a Enum field value, which includes integer value (indicating the sort order) and string (displayed) value.\nClass LinkedHashMapWriter<V>;\nClass MapWriterMap;\nClass SolrCloseableLatch; // This class mimicks the operation of CountDownLatch, but it also periodically checks the state of the provided SolrCloseable and terminates the wait if it's closed by throwing an InterruptedException.\nClass SolrDocument; // A concrete representation of a document within a Solr index.\nClass SolrDocumentBase<T,​K>;\n", "des": "Common classes reused on both clients & server for dealing with documents to be indexed and result documents."}
{"index": 1839, "repo": "spring-test-6.0.11", "code": "Package: event\n\nSub Packages: \npackage event.annotation; // Test execution event annotations for the Spring TestContext Framework.\n\nClasses and Interfaces: \npublic class AfterTestClassEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.afterTestClass(TestContext) is invoked.\npublic class AfterTestExecutionEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.afterTestExecution(TestContext) is invoked.\npublic class AfterTestMethodEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.afterTestMethod(TestContext) is invoked.\npublic interface ApplicationEvents; // ApplicationEvents encapsulates all application events that were fired during the execution of a single test method.\npublic abstract class ApplicationEventsHolder extends Object; // Holder class to expose the application events published during the execution of a test in the form of a thread-bound ApplicationEvents object.\npublic class ApplicationEventsTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener which provides support for ApplicationEvents.\npublic class BeforeTestClassEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.beforeTestClass(TestContext) is invoked.\npublic class BeforeTestExecutionEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.beforeTestExecution(TestContext) is invoked.\npublic class BeforeTestMethodEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.beforeTestMethod(TestContext) is invoked.\npublic class EventPublishingTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener that publishes test execution events to the ApplicationContext for the currently executing test.\npublic class PrepareTestInstanceEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.prepareTestInstance(TestContext) is invoked.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface RecordApplicationEvents; // @RecordApplicationEvents is a class-level annotation that is used to instruct the Spring TestContext Framework to record all application events that are published in the ApplicationContext during the execution of a single test.\n", "des": "Test event support classes for the Spring TestContext Framework."}
{"index": 3489, "repo": "poi-5.2.3", "code": "Package: wellknown\n\nClasses and Interfaces: \nClass PropertyIDMap; // This is a dictionary which maps property ID values to property ID strings.\n", "des": "Specific support for DocumentSummaryInformation, SummaryInformation types."}
{"index": 1808, "repo": "spring-aop-6.0.11", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic abstract class AbstractMonitoringInterceptor extends AbstractTraceInterceptor; // Base class for monitoring interceptors, such as performance monitors.\npublic abstract class AbstractTraceInterceptor extends Object implements MethodInterceptor, Serializable; // Base MethodInterceptor implementation for tracing.\npublic abstract class AsyncExecutionAspectSupport extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Base class for asynchronous method execution aspects, such as org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor or org.springframework.scheduling.aspectj.AnnotationAsyncExecutionAspect.\npublic class AsyncExecutionInterceptor extends AsyncExecutionAspectSupport implements MethodInterceptor, org.springframework.core.Ordered; // AOP Alliance MethodInterceptor that processes method invocations asynchronously, using a given AsyncTaskExecutor.\n@FunctionalInterface public interface AsyncUncaughtExceptionHandler; // A strategy for handling uncaught exceptions thrown from asynchronous methods.\npublic class ConcurrencyThrottleInterceptor extends org.springframework.util.ConcurrencyThrottleSupport implements MethodInterceptor, Serializable; // Interceptor that throttles concurrent access, blocking invocations if a specified concurrency limit is reached.\npublic class CustomizableTraceInterceptor extends AbstractTraceInterceptor; // MethodInterceptor implementation that allows for highly customizable method-level tracing, using placeholders.\npublic class DebugInterceptor extends SimpleTraceInterceptor; // AOP Alliance MethodInterceptor that can be introduced in a chain to display verbose information about intercepted invocations to the logger.\npublic abstract class ExposeBeanNameAdvisors extends Object; // Convenient methods for creating advisors that may be used when autoproxying beans created with the Spring IoC container, binding the bean name to the current invocation.\npublic final class ExposeInvocationInterceptor extends Object implements MethodInterceptor, org.springframework.core.PriorityOrdered, Serializable; // Interceptor that exposes the current MethodInvocation as a thread-local object.\npublic class PerformanceMonitorInterceptor extends AbstractMonitoringInterceptor; // Simple AOP Alliance MethodInterceptor for performance monitoring.\npublic class SimpleAsyncUncaughtExceptionHandler extends Object implements AsyncUncaughtExceptionHandler; // A default AsyncUncaughtExceptionHandler that simply logs the exception.\npublic class SimpleTraceInterceptor extends AbstractTraceInterceptor; // Simple AOP Alliance MethodInterceptor that can be introduced in a chain to display verbose trace information about intercepted method invocations, with method entry and method exit info.\n", "des": "Provides miscellaneous interceptor implementations."}
{"index": 2551, "repo": "pulsar-common-3.0.0", "code": "Package: functions\n\nClasses and Interfaces: \npublic abstract class JsonIgnorePropertiesMixIn extends Object;\npublic class UpdateOptionsImpl extends Object implements UpdateOptions; // Options while updating the sink.\npublic class Utils extends Object; // Helper class to work with configuration.\n", "des": "Classes needed for pulsar functions."}
{"index": 2449, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: management\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.management.HeapDumpWebEndpoint.class) public class HeapDumpWebEndpointAutoConfiguration extends Object; // Auto-configuration for HeapDumpWebEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.management.ThreadDumpEndpoint.class) public class ThreadDumpEndpointAutoConfiguration extends Object; // Auto-configuration for the ThreadDumpEndpoint.\n", "des": "Auto-configuration for actuator management concerns."}
{"index": 3373, "repo": "opencms-core-15.0", "code": "Package: tools\n\nSub Packages: \npackage tools.scheduler; // This package contains the tool classes for the job management related administration views.\n\nClasses and Interfaces: \nInterface I_CmsHtmlIconButton; // Interface for html buttons with icon.\nInterface I_CmsToolHandler; // Interface for an admin tool handler.\nClass A_CmsHtmlIconButton; // Default skeleton for an html icon button.\nClass A_CmsToolHandler; // Helper class to build easily other admin tool handlers.\nClass CmsDefaultToolHandler; // Default admin tool handler.\nClass CmsExplorerDialog; // Dialog for explorer views in the administration view.\nClass CmsHtmlIconButtonStyleEnum; // Wrapper class for the different style of icon buttons.\nClass CmsIdentifiableObjectContainer<T>; // Default implementation of a named object container.\nClass CmsInvisibleToolHandler; // This tool handler just hides the tool for the user, but the tool can still be invoked explicitly, usefull for tool that requires an argument, like edit tools.\nClass CmsOfflineToolHandler; // This tool handler disables the tool if in online project.\nClass CmsOnlyAdminToolHandler; // This tool handler hides the tool to non admin users.\nClass CmsTool; // Implementation of an administration tool.\nClass CmsToolDialog; // Helper class that encapsulates all the code for the \"new\" style of the administration dialogs.\nClass CmsToolGroup; // This is an admin tool group, it just generates the html code for the group structure.\nClass CmsToolMacroResolver; // Resolves special macros for the admin view.\nClass CmsToolManager; // Manages the registered tools, actualizing its state every time the workplace is reinitialize.\nClass CmsToolRootHandler; // Admin tool handler for tool roots.\nClass CmsToolUserData; // Store for some administration view parameters, for each user, used by the CmsToolManager.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the base classes for implementing a tool in the OpenCms Workplace \"Administration\" view."}
{"index": 3844, "repo": "lucene-core-9.7.0", "code": "Package: document\n\nClasses and Interfaces: \nClass BinaryDocValuesField; // Field that stores a per-document BytesRef value.\nClass BinaryPoint; // An indexed binary field for fast range filters.\nClass BinaryRangeDocValues; // A binary representation of a range that wraps a BinaryDocValues field\nClass DateTools; // Provides support for converting dates to strings and vice-versa.\nClass Document; // Documents are the unit of indexing and search.\nClass DocumentStoredFieldVisitor; // A StoredFieldVisitor that creates a Document from stored fields.\nClass DoubleDocValuesField; // Syntactic sugar for encoding doubles as NumericDocValues via Double.doubleToRawLongBits(double).\nClass DoubleField; // Field that stores a per-document double value for scoring, sorting or value retrieval and index the field for fast range filters.\nClass DoublePoint; // An indexed double field for fast range filters.\nClass DoubleRange; // An indexed Double Range field.\nClass DoubleRangeDocValuesField; // DocValues field for DoubleRange.\nClass FeatureField; // Field that can be used to store static scoring factors into documents.\nClass Field; // Expert: directly create a field for a document.\nClass FieldType; // Describes the properties of a field.\nClass FloatDocValuesField; // Syntactic sugar for encoding floats as NumericDocValues via Float.floatToRawIntBits(float).\nClass FloatField; // Field that stores a per-document float value for scoring, sorting or value retrieval and index the field for fast range filters.\nClass FloatPoint; // An indexed float field for fast range filters.\nClass FloatRange; // An indexed Float Range field.\nClass FloatRangeDocValuesField; // DocValues field for FloatRange.\nClass InetAddressPoint; // An indexed 128-bit InetAddress field.\nClass InetAddressRange; // An indexed InetAddress Range Field\nClass IntField; // Field that stores a per-document int value for scoring, sorting or value retrieval and index the field for fast range filters.\nClass IntPoint; // An indexed int field for fast range filters.\nClass IntRange; // An indexed Integer Range field.\nClass IntRangeDocValuesField; // DocValues field for IntRange.\n", "des": "The logical representation of a Document for indexing and searching."}
{"index": 353, "repo": "hive-exec-4.0.0-alpha-2", "code": "Package: exec\n\nSub Packages: \npackage exec.errors; // Generates execution error messages using heuristics.\n\nClasses and Interfaces: \nInterface BucketMatcher;\nInterface DynamicValueRegistry;\nInterface FileSinkOperator.RecordWriter; // RecordWriter.\nInterface HashTableLoader; // HashTableLoader is an interface used by MapJoinOperator used to load the hashtables needed to process the join.\nInterface IConfigureJobConf; // Enables an operator to be able to make changes to the JobConf.\nInterface NodeUtils.Function<T>;\nInterface ObjectCache; // ObjectCache.\nInterface Operator.OperatorFunc; // OperatorFunc.\nInterface PTFPartition.PTFPartitionIterator<T>;\nInterface RecordReader; // RecordReader.\nInterface RecordWriter; // RecordWriter.\nInterface TopNHash.BinaryCollector; // For interaction between operator and top-n hash.\nInterface Utilities.SupplierWithCheckedException<T,X extends Exception>;\nClass AbstractFileMergeOperator<T extends FileMergeDesc>; // Fast file merge operator for ORC and RCfile.\nClass AbstractMapJoinOperator<T extends MapJoinDesc>;\nClass AbstractMapOperator; // Abstract Map operator.\nClass AddToClassPathAction; // Helper class to create UDFClassLoader when running under a security manager.\nClass AppMasterEventOperator; // AppMasterEventOperator sends any rows it receives to the Tez AM.\nClass ArchiveUtils; // ArchiveUtils.\nClass ArchiveUtils.HarPathHelper; // HarPathHelper helps to create har:/ URIs for locations inside of archive.\nClass ArchiveUtils.PartSpecInfo; // PartSpecInfo keeps fields and values extracted from partial partition info which is prefix of the full info.\nClass AutoProgressor; // AutoProgressor periodically sends updates to the job tracker so that it doesn't consider this task attempt dead if there is a long period of inactivity.\nClass BinaryRecordReader; // Read from a binary stream and treat each 1000 bytes (configurable via hive.binary.record.max.length) as a record.\nClass BoundaryCache; // Cache for storing boundaries found within a partition - used for PTF functions.\nClass ByteWritable;\nClass ByteWritable.Comparator; // A Comparator optimized for BytesWritable.\nClass CollectOperator; // Buffers rows emitted by other operators.\n", "des": "Hive QL execution tasks, operators, functions and other handlers."}
{"index": 1907, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: couchbase\n\nClasses and Interfaces: \n@FunctionalInterface public interface ClusterEnvironmentBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the ClusterEnvironment through a ClusterEnvironment.Builder whilst retaining default auto-configuration.\n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnClass(com.couchbase.client.java.Cluster.class) @Conditional(org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.CouchbaseCondition.class) @EnableConfigurationProperties(CouchbaseProperties.class) public class CouchbaseAutoConfiguration extends Object; // Auto-configuration for Couchbase.\npublic interface CouchbaseConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Couchbase service.\n@ConfigurationProperties(prefix=\"spring.couchbase\") public class CouchbaseProperties extends Object; // Configuration properties for Couchbase.\npublic static class CouchbaseProperties.Env extends Object;\npublic static class CouchbaseProperties.Io extends Object;\npublic static class CouchbaseProperties.Ssl extends Object;\npublic static class CouchbaseProperties.Timeouts extends Object;\n", "des": "Auto-configuration for Couchbase."}
{"index": 2581, "repo": "camel-api-4.0.0-RC1", "code": "Package: jsse\n\nClasses and Interfaces: \npublic class AliasedX509ExtendedKeyManager extends X509ExtendedKeyManager; // KeyManager to select a key with desired alias while delegating processing to specified KeyManager Can be used both with server and client sockets\npublic abstract class BaseSSLContextParameters extends JsseParameters; // Represents configuration options that can be applied in the client-side or server-side context depending on what they are applied to.\nprotected static final class BaseSSLContextParameters.SSLContextDecorator extends SSLContext; // Makes a decorated SSLContext appear as a normal SSLContext.\nprotected static final class BaseSSLContextParameters.SSLContextSpiDecorator extends SSLContextSpi; // Class needed to provide decoration of an existing SSLContext.\nprotected static final class BaseSSLContextParameters.SSLServerSocketFactoryDecorator extends SSLServerSocketFactory; // A decorator that enables the application of configuration options to be applied to created sockets even after this factory has been created and turned over to client code.\nprotected static final class BaseSSLContextParameters.SSLSocketFactoryDecorator extends SSLSocketFactory; // A decorator that enables the application of configuration options to be applied to created sockets even after this factory has been created and turned over to client code.\npublic class CipherSuitesParameters extends Object; // Represents a list of TLS/SSL cipher suite names.\npublic enum ClientAuthentication extends Enum<ClientAuthentication>; // Represents the options for the client authentication settings of a server socket.\npublic class FilterParameters extends JsseParameters; // Represents a set of regular expression based filter patterns for including and excluding content of some type.\npublic static class FilterParameters.Patterns extends Object; // An immutable collection of compiled includes and excludes filter Patterns.\npublic interface GlobalSSLContextParametersSupplier extends Supplier<SSLContextParameters>; // A global Supplier of SSLContextParameters to be used in Camel registry.\npublic class JsseParameters extends Object implements CamelContextAware; // Base class that provides optional integration with core Camel capabilities.\npublic class KeyManagersParameters extends JsseParameters; // A representation of configuration options for creating and loading KeyManager instance(s).\npublic class KeyStoreParameters extends JsseParameters; // A representation of configuration options for creating and loading a KeyStore instance.\npublic class SecureRandomParameters extends JsseParameters;\npublic class SecureSocketProtocolsParameters extends Object; // Represents a list of TLS/SSL cipher suite names.\n", "des": "A collection of utility classes for configuring a JSSE SSLContext and other JSSE classes."}
{"index": 2149, "repo": "wicket-core-10.0.0-M1", "code": "Package: image\n\nSub Packages: \npackage image.resource; // Resource support for image components.\n\nClasses and Interfaces: \npublic class ContextImage extends WebComponent; // Provides a context-relative image.\npublic class ContextPathGenerator extends Behavior; // A behavior that converts the provider url fragment to a context-relative url.\npublic class ExternalImage extends WebComponent; // A component to display external images.\npublic class ExternalSource extends ExternalImage; // A component which displays external images within a picture tag.\npublic class Image extends WebComponent implements IRequestListener; // An Image component displays localizable image resources.\npublic class InlineImage extends WebComponent; // The inline image is used to embed the complete image content within a HTML document.\npublic class NonCachingImage extends Image; // A subclass of Image that always adds random noise to the url every request to prevent the browser from caching the image.\npublic class Picture extends WebMarkupContainer; // A component which displays localizable image resources within source and image elements as responsive image.\npublic class Source extends Image; // A component which displays localizable image resources within a picture tag.\n", "des": "Image components."}
{"index": 1302, "repo": "groovy-all-4.0.13", "code": "Package: jmx\n\nSub Packages: \npackage jmx.builder; // Classes for the JMX Builder.\n\nClasses and Interfaces: \npublic class GroovyMBean extends GroovyObjectSupport; // A GroovyObject facade for an underlying MBean which acts like a normal groovy object but which is actually implemented via an underlying JMX MBean.\n", "des": "Classes for working with the Java Management Extensions (JMX) technology."}
{"index": 1898, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: amqp\n\nClasses and Interfaces: \npublic abstract class AbstractConnectionFactoryConfigurer<T extends org.springframework.amqp.rabbit.connection.AbstractConnectionFactory> extends Object; // Configures Rabbit ConnectionFactory with sensible defaults.\npublic abstract class AbstractRabbitListenerContainerFactoryConfigurer<T extends org.springframework.amqp.rabbit.config.AbstractRabbitListenerContainerFactory<?>> extends Object; // Configure RabbitListenerContainerFactory with sensible defaults.\npublic class CachingConnectionFactoryConfigurer extends AbstractConnectionFactoryConfigurer<org.springframework.amqp.rabbit.connection.CachingConnectionFactory>; // Configures Rabbit CachingConnectionFactory with sensible defaults.\n@FunctionalInterface public interface ConnectionFactoryCustomizer; // Callback interface that can be implemented by beans wishing to customize the auto-configured RabbitMQ ConnectionFactory.\npublic final class DirectRabbitListenerContainerFactoryConfigurer extends AbstractRabbitListenerContainerFactoryConfigurer<org.springframework.amqp.rabbit.config.DirectRabbitListenerContainerFactory>; // Configure DirectRabbitListenerContainerFactoryConfigurer with sensible defaults.\n@FunctionalInterface public interface EnvironmentBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the auto-configured Environment that is created by an EnvironmentBuilder.\n@AutoConfiguration @ConditionalOnClass({org.springframework.amqp.rabbit.core.RabbitTemplate.class,com.rabbitmq.client.Channel.class}) @EnableConfigurationProperties(RabbitProperties.class) @Import({org.springframework.boot.autoconfigure.amqp.RabbitAnnotationDrivenConfiguration.class,org.springframework.boot.autoconfigure.amqp.RabbitStreamConfiguration.class}) public class RabbitAutoConfiguration extends Object; // Auto-configuration for RabbitTemplate.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.amqp.rabbit.core.RabbitMessagingTemplate.class) @ConditionalOnMissingBean(org.springframework.amqp.rabbit.core.RabbitMessagingTemplate.class) @Import(RabbitTemplateConfiguration.class) protected static class RabbitAutoConfiguration.MessagingTemplateConfiguration extends Object;\n", "des": "Auto-configuration for RabbitMQ."}
{"index": 1320, "repo": "groovy-all-4.0.13", "code": "Package: streamingmarkupsupport\n\nClasses and Interfaces: \npublic class BaseMarkupBuilder extends Builder;\npublic abstract class Builder extends GroovyObjectSupport;\nprotected abstract static class Builder.Built extends GroovyObjectSupport;\npublic class StreamingMarkupWriter extends Writer;\n", "des": "XmlBuilder related classes to support streaming XML."}
{"index": 3188, "repo": "tomcat-api-10.1", "code": "Package: impl\n\nClasses and Interfaces: \nInterface CallStack; // Strategy for obtaining and printing the current call stack.\nInterface DefaultPooledObjectInfoMBean; // The interface that defines the information about pooled objects that will be exposed via JMX.\nInterface EvictionPolicy<T>; // To provide a custom eviction policy (i.e. something other than DefaultEvictionPolicy for a pool, users must provide an implementation of this interface that provides the required eviction policy.\nInterface GenericKeyedObjectPoolMXBean<K>; // Defines the methods that will be made available via JMX.\nInterface GenericObjectPoolMXBean; // Defines the methods that will be made available via JMX.\nClass AbandonedConfig; // Configuration settings for abandoned object removal.\nClass BaseGenericObjectPool<T>; // Base class that provides common functionality for GenericObjectPool and GenericKeyedObjectPool.\nClass BaseObjectPoolConfig<T>; // Provides the implementation for the common attributes shared by the sub-classes.\nClass CallStackUtils; // Utility methods for CallStack.\nClass DefaultEvictionPolicy<T>; // Provides the default implementation of EvictionPolicy used by the pools.\nClass DefaultPooledObject<T>; // This wrapper is used to track the additional information, such as state, for the pooled objects.\nClass DefaultPooledObjectInfo; // Implementation of object that is used to provide information on pooled objects via JMX.\nClass EvictionConfig; // This class is used by pool implementations to pass configuration information to EvictionPolicy instances.\nClass GenericKeyedObjectPool<K,​T>; // A configurable KeyedObjectPool implementation.\nClass GenericKeyedObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericKeyedObjectPool.\nClass GenericObjectPool<T>; // A configurable ObjectPool implementation.\nClass GenericObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericObjectPool.\nClass NoOpCallStack; // CallStack strategy using no-op implementations of all functionality.\nClass PooledSoftReference<T>; // Extension of DefaultPooledObject to wrap pooled soft references.\nClass SecurityManagerCallStack; // A CallStack strategy using a SecurityManager.\nClass SoftReferenceObjectPool<T>; // A SoftReference based ObjectPool.\n", "des": "Object pooling API implementations."}
{"index": 3699, "repo": "solr-core-9.3.0", "code": "Package: endresulttransformer\n\nClasses and Interfaces: \nInterface EndResultTransformer; // Responsible for transforming the grouped result into the final format for displaying purposes.\nInterface EndResultTransformer.SolrDocumentSource; // Abstracts the source for SolrDocument instances.\nClass GroupedEndResultTransformer; // Implementation of EndResultTransformer that keeps each grouped result separate in the final response.\nClass MainEndResultTransformer; // Implementation of EndResultTransformer that transforms the grouped result into the main result list in the response.\nClass SimpleEndResultTransformer; // Implementation of EndResultTransformer that transforms the grouped result into a single flat list.\n", "des": "APIs and classes for transforming result grouping results into the appropriate response format"}
{"index": 2279, "repo": "spring-data-elasticsearch-5.1.2", "code": "Package: event\n\nClasses and Interfaces: \n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a Document when reading results.\n@FunctionalInterface public interface AfterLoadCallback<T> extends EntityCallback<Document>; // Callback being invoked after a Document is read from Elasticsearch and before it is converted into a domain object.\n@FunctionalInterface public interface AfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of an entity.\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\n@FunctionalInterface public interface ReactiveAfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a Document when reading results.\n@FunctionalInterface public interface ReactiveAfterLoadCallback<T> extends EntityCallback<Document>; // Callback being invoked after a Document is read from Elasticsearch and before it is converted into a domain object.\n@FunctionalInterface public interface ReactiveAfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of an entity.\npublic class ReactiveAuditingEntityCallback extends Object implements ReactiveBeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface ReactiveBeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\n", "des": "classes and interfaces related to Spring Data Elasticsearch events and callbacks."}
{"index": 2976, "repo": "pulsar-broker-3.0.0", "code": "Package: pendingack\n\nClasses and Interfaces: \npublic abstract class TransactionPendingAckException extends TransactionException; // The base exception class for the errors thrown from Transaction Pending ACk.\npublic static class TransactionPendingAckException.TransactionPendingAckStoreProviderException extends TransactionPendingAckException; // Transaction pending ack store provider exception.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 371, "repo": "commons-geometry-euclidean-1.0", "code": "Package: rotation\n\nClasses and Interfaces: \nClass Rotation2D; // Class representing a rotation in 2 dimensional Euclidean space.\n", "des": "This package provides components related to rotations in 2 dimensional Euclidean space."}
{"index": 790, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: lv\n\nClasses and Interfaces: \nClass LatvianAnalyzer; // Analyzer for Latvian.\nClass LatvianStemFilter; // A TokenFilter that applies LatvianStemmer to stem Latvian words.\nClass LatvianStemFilterFactory; // Factory for LatvianStemFilter.\nClass LatvianStemmer; // Light stemmer for Latvian.\n", "des": "Analyzer for Latvian."}
{"index": 3103, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface AfterTransactionCompletionProcess; // Contract representing some process that needs to occur during after transaction completion.\nInterface BeforeTransactionCompletionProcess; // Contract representing some process that needs to occur during before transaction completion.\nInterface Executable; // An operation which may be scheduled for later execution.\n", "des": "Defines SPI hooks into the ActionQueue."}
{"index": 969, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: client\n\nSub Packages: \npackage client.core; // Contains core classes for SOAP-specific client-side Spring-WS support.\n\nClasses and Interfaces: \nClass SoapFaultClientException; // Thrown by SoapFaultMessageResolver when the response message has a fault.\n", "des": "Contains classes for SOAP-specific client-side Spring-WS support."}
{"index": 2766, "repo": "spring-jms-6.0.11", "code": "Package: jms\n\nSub Packages: \npackage jms.annotation; // Annotations and support classes for declarative JMS listener endpoints.\npackage jms.config; // Support package for declarative messaging configuration, with Java configuration and XML schema support.\npackage jms.connection; // Provides a PlatformTransactionManager implementation for a single JMS ConnectionFactory, and a SingleConnectionFactory adapter.\npackage jms.core; // Core package of the JMS support.\npackage jms.listener; // This package contains the base message listener container facility.\npackage jms.support; // This package provides generic JMS support classes, to be used by higher-level classes like JmsTemplate.\n\nClasses and Interfaces: \npublic class IllegalStateException extends JmsException; // Runtime exception mirroring the JMS IllegalStateException.\npublic class InvalidClientIDException extends JmsException; // Runtime exception mirroring the JMS InvalidClientIDException.\npublic class InvalidDestinationException extends JmsException; // Runtime exception mirroring the JMS InvalidDestinationException.\npublic class InvalidSelectorException extends JmsException; // Runtime exception mirroring the JMS InvalidSelectorException.\npublic abstract class JmsException extends org.springframework.core.NestedRuntimeException; // Base class for exception thrown by the framework whenever it encounters a problem related to JMS.\npublic class JmsSecurityException extends JmsException; // Runtime exception mirroring the JMS JMSSecurityException.\npublic class MessageEOFException extends JmsException; // Runtime exception mirroring the JMS MessageEOFException.\npublic class MessageFormatException extends JmsException; // Runtime exception mirroring the JMS MessageFormatException.\npublic class MessageNotReadableException extends JmsException; // Runtime exception mirroring the JMS MessageNotReadableException.\npublic class MessageNotWriteableException extends JmsException; // Runtime exception mirroring the JMS MessageNotWriteableException.\npublic class ResourceAllocationException extends JmsException; // Runtime exception mirroring the JMS ResourceAllocationException.\npublic class TransactionInProgressException extends JmsException; // Runtime exception mirroring the JMS TransactionInProgressException.\npublic class TransactionRolledBackException extends JmsException; // Runtime exception mirroring the JMS TransactionRolledBackException.\npublic class UncategorizedJmsException extends JmsException; // JmsException to be thrown when no other matching subclass found.\n", "des": "This package contains integration classes for JMS, allowing for Spring-style JMS access."}
{"index": 1074, "repo": "hadoop-yarn-common-3.3.6", "code": "Package: dao\n\nClasses and Interfaces: \nClass ConfInfo; // This class stores the Scheduler Configuration.\nClass ConfInfo.ConfItem; // This class stores the Configuration Property.\nClass QueueConfigInfo; // Information for adding or updating a queue to scheduler configuration for this queue.\nClass SchedConfUpdateInfo; // Information for making scheduler configuration changes (supports adding, removing, or updating a queue, as well as global scheduler conf changes).\n", "des": "Data structures for scheduler configuration mutation info."}
{"index": 1795, "repo": "spring-integration-file-6.1.2", "code": "Package: tail\n\nClasses and Interfaces: \npublic class ApacheCommonsFileTailingMessageProducer extends FileTailingMessageProducerSupport implements org.apache.commons.io.input.TailerListener; // File tailer that delegates to the Apache Commons Tailer.\npublic abstract class FileTailingMessageProducerSupport extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware; // Base class for file tailing inbound adapters.\npublic static class FileTailingMessageProducerSupport.FileTailingEvent extends FileIntegrationEvent;\npublic static class FileTailingMessageProducerSupport.FileTailingIdleEvent extends FileTailingMessageProducerSupport.FileTailingEvent;\npublic class OSDelegatingFileTailingMessageProducer extends FileTailingMessageProducerSupport implements org.springframework.scheduling.SchedulingAwareRunnable; // A file tailing message producer that delegates to the OS tail program.\n", "des": "Classes used for tailing file system files."}
{"index": 2387, "repo": "spring-batch-core-5.0.2", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractJobExplorerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobExplorer>, org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobExplorer.\npublic class JobExplorerFactoryBean extends AbstractJobExplorerFactoryBean implements org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobExplorer by using JDBC DAO implementations.\npublic class SimpleJobExplorer extends Object implements JobExplorer; // Implementation of JobExplorer that uses the injected DAOs.\n", "des": "Specific implementations of explorer concerns."}
{"index": 3106, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ArchiveContext; // Describes the context for visiting the entries within an archive\nInterface ArchiveDescriptor; // Contract for visiting an archive, which might be a jar, a zip, an exploded directory, etc.\nInterface ArchiveDescriptorFactory; // Contract for building ArchiveDescriptor instances.\nInterface ArchiveEntry; // Represent an entry in the archive.\nInterface ArchiveEntryHandler; // Handler for archive entries, based on the classified type of the entry\nInterface InputStreamAccess; // Contract for building InputStreams, especially in on-demand situations\nInterface JarFileEntryUrlAdjuster; // Optional contract for ArchiveDescriptorFactory implementations to implement to be able to adjust <jar-file/> URL's defined in persistence.xml files.\nClass AbstractArchiveDescriptor; // Base support for ArchiveDescriptor implementors.\nClass AbstractArchiveDescriptorFactory;\nClass ArchiveException; // Indicates a problem accessing or visiting the archive\n", "des": "Defines the SPI for support of \"scanning\" of \"archives\"."}
{"index": 3056, "repo": "spring-ws-core-4.0.5", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic abstract class AbstractValidatingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements ClientInterceptor, org.springframework.beans.factory.InitializingBean; // Abstract base class for ClientInterceptor implementations that validate part of the message using a schema.\npublic interface ClientInterceptor; // Workflow interface that allows for customized client-side message interception.\npublic abstract class ClientInterceptorAdapter extends Object implements ClientInterceptor; // Default implementation of the ClientInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\npublic class PayloadValidatingInterceptor extends AbstractValidatingInterceptor; // Client-side interceptor that validates the contents of WebServiceMessages using a schema.\npublic class WebServiceValidationException extends WebServiceClientException; // Exception thrown whenever a validation error occurs on the client-side.\n", "des": "Provides the ClientInterceptor interface, and validating interceptors."}
{"index": 2295, "repo": "spring-boot-3.1.1", "code": "Package: config\n\nClasses and Interfaces: \npublic class AnsiOutputApplicationListener extends Object implements org.springframework.context.ApplicationListener<ApplicationEnvironmentPreparedEvent>, org.springframework.core.Ordered; // An ApplicationListener that configures AnsiOutput depending on the value of the property spring.output.ansi.enabled.\npublic final class ConfigData extends Object; // Configuration data that has been loaded from a ConfigDataResource and may ultimately contribute property sources to Spring's Environment.\npublic static enum ConfigData.Option extends Enum<ConfigData.Option>; // Option flags that can be applied.\npublic static final class ConfigData.Options extends Object; // A set of ConfigData.Option flags.\n@FunctionalInterface public static interface ConfigData.PropertySourceOptions; // Strategy interface used to supply ConfigData.Options for a given PropertySource.\npublic class ConfigDataEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered; // EnvironmentPostProcessor that loads and applies ConfigData to Spring's Environment.\npublic interface ConfigDataEnvironmentUpdateListener extends EventListener; // EventListener to listen to Environment updates triggered by the ConfigDataEnvironmentPostProcessor.\npublic abstract class ConfigDataException extends RuntimeException; // Abstract base class for configuration data exceptions.\npublic interface ConfigDataLoader<R extends ConfigDataResource>; // Strategy class that can be used to load ConfigData for a given ConfigDataResource.\npublic interface ConfigDataLoaderContext; // Context provided to ConfigDataLoader methods.\npublic final class ConfigDataLocation extends Object implements OriginProvider; // A user specified location that can be resolved to one or more config data resources.\npublic class ConfigDataLocationNotFoundException extends ConfigDataNotFoundException; // ConfigDataNotFoundException thrown when a ConfigDataLocation cannot be found.\npublic interface ConfigDataLocationResolver<R extends ConfigDataResource>; // Strategy interface used to resolve locations into one or more resources.\npublic interface ConfigDataLocationResolverContext; // Context provided to ConfigDataLocationResolver methods.\npublic enum ConfigDataNotFoundAction extends Enum<ConfigDataNotFoundAction>; // Action to take when an uncaught ConfigDataNotFoundException is thrown.\npublic abstract class ConfigDataNotFoundException extends ConfigDataException implements OriginProvider; // ConfigDataNotFoundException thrown when a ConfigData cannot be found.\npublic abstract class ConfigDataResource extends Object; // A single resource from which ConfigData can be loaded.\n", "des": "External configuration support allowing 'application.properties' to be loaded and used within a Spring Boot application."}
{"index": 3819, "repo": "lucene-analysis-common-9.7.0", "code": "Package: ta\n\nClasses and Interfaces: \nClass TamilAnalyzer; // Analyzer for Tamil.\n", "des": "Analyzer for Tamil."}
{"index": 3454, "repo": "hibernate-core-5.6.15.Final", "code": "Package: graph\n\nClasses and Interfaces: \nInterface AttributeNode<J>; // Hibernate extension to the JPA entity-graph AttributeNode contract.\nInterface Graph<J>; // A container for AttributeNodes.\nInterface GraphNode<J>; // Commonality between AttributeNode and Graph.\nInterface RootGraph<J>; // Hibernate extension to the JPA EntityGraph contract.\nInterface SubGraph<J>; // Hibernate extension to the JPA entity-graph Subgraph contract.\nClass EntityGraphs; // A collection of EntityGraph utilities.\nClass GraphParser; // Parser for string representations of JPA EntityGraph (RootGraph) and Subgraph (SubGraph), using a simple syntax defined by the `graph.g` Antlr grammar.\nEnum GraphSemantic; // JPA defines 2 distinct semantics for applying an EntityGraph.\nClass CannotBecomeEntityGraphException; // Indicates an illegal attempt to make a Graph become an EntityGraph via Graph.makeRootGraph(String, boolean).\nClass CannotContainSubGraphException; // Indicates an attempt was made to add a (key)? sub-graph to an attribute type that does not support (key)? sub-graphs.\nClass InvalidGraphException; // Thrown by GraphParser to indicate textual entity graph representation parsing errors.\n", "des": "Hibernate's (extended) support for JPA's entity graphs"}
{"index": 2021, "repo": "spring-boot-devtools-3.1.1", "code": "Package: payload\n\nClasses and Interfaces: \npublic class HttpTunnelPayload extends Object; // Encapsulates a payload data sent over a HTTP tunnel.\npublic class HttpTunnelPayloadForwarder extends Object; // Utility class that forwards HttpTunnelPayload instances to a destination channel, respecting sequence order.\n", "des": "Classes to deal with payloads sent over an HTTP tunnel."}
{"index": 3193, "repo": "tomcat-api-10.1", "code": "Package: tld\n\nClasses and Interfaces: \nClass ImplicitTldRuleSet; // RulesSet for digesting implicit.tld files.\nClass TagFileXml; // Bare-bone model of a tag file loaded from a TLD.\nClass TaglibXml; // Common representation of a Tag Library Descriptor (TLD) XML file.\nClass TagXml; // Model of a tag define in a tag library descriptor.\nClass TldParser; // Parses a Tag Library Descriptor.\nClass TldResourcePath; // A TLD Resource Path as defined in JSP 7.3.2.\nClass TldRuleSet; // RulesSet for digesting TLD files.\nClass TldRuleSet.Attribute;\nClass TldRuleSet.Variable;\nClass ValidatorXml; // Model of a Tag Library Validator from the XML descriptor.\n", "des": "Package containing a Java model of the XML for a Tag Library Descriptor."}
{"index": 3111, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface StrategyCreator<T>;\nInterface StrategySelector; // Service which acts as a registry for named strategy implementations.\nClass StrategySelectionException; // Indicates a problem performing the selection/resolution.\n", "des": "Defines actual contract used for strategy selection : StrategySelector."}
{"index": 544, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "Package: site\n\nClasses and Interfaces: \nInterface SitePreferenceHandler; // Service interface for site preference management.\nInterface SitePreferenceRepository; // A strategy for storing a user's site preference.\nClass CookieSitePreferenceRepository; // SitePreferenceRepository implementation that stores user preference in a Cookie.\nClass SitePreferenceHandlerInterceptor; // A Spring MVC interceptor that, on preHandle, delegates to a SitePreferenceHandler to resolve the SitePreference of the user that originated the web request.\nClass SitePreferenceHandlerMethodArgumentResolver; // Spring MVC HandlerMethodArgumentResolver that resolves @Controller MethodParameters of type SitePreference to the value of the web request's current site preference attribute.\nClass SitePreferenceRequestFilter; // A Servlet 2.3 Filter that delegates to a SitePreferenceHandler to resolve the SitePreference of the user that originated the web request.\nClass SitePreferenceUtils; // Static helper for accessing request-scoped SitePreference values.\nClass SitePreferenceWebArgumentResolver; // Spring MVC WebArgumentResolver that resolves @Controller MethodParameters of type SitePreference to the value of the web request's current site preference attribute.\nClass StandardSitePreferenceHandler; // A helper that resolves the user's site preference and makes it available as a request attribute.\nEnum SitePreference; // Possible site preference values.\n", "des": "Ability for the user to specify whether they prefer the mobile or normal site."}
{"index": 111, "repo": "ignite-core-2.15.0", "code": "Package: java\n\nClasses and Interfaces: \nClass JavaLogger; // Logger to use with Java logging.\nClass JavaLoggerFileHandler; // File logging handler which skips all the messages until node ID is set.\nClass JavaLoggerFormatter; // Formatter for JUL logger.\n", "des": "Contains Java logging implementation for logging."}
{"index": 2209, "repo": "spring-data-commons-3.1.2", "code": "Package: context\n\nClasses and Interfaces: \npublic abstract class AbstractMappingContext<E extends MutablePersistentEntity<?,P>,P extends PersistentProperty<P>> extends Object implements MappingContext<E,P>, ApplicationEventPublisherAware, ApplicationContextAware, InitializingBean; // Base class to build mapping metadata and thus create instances of PersistentEntity and PersistentProperty.\npublic class InvalidPersistentPropertyPath extends MappingException; // Exception to indicate a source path couldn't be resolved into a PersistentPropertyPath completely.\npublic interface MappingContext<E extends PersistentEntity<?,P>,P extends PersistentProperty<P>>; // This interface defines the overall context including all known PersistentEntity instances and methods to obtain instances on demand. it is used internally to establish associations between entities and also at runtime to obtain entities by name.\npublic class MappingContextEvent<E extends PersistentEntity<?,P>,P extends PersistentProperty<P>> extends ApplicationEvent; // Base implementation of an ApplicationEvent refering to a PersistentEntity.\npublic class PersistentEntities extends Object implements Streamable<PersistentEntity<?,? extends PersistentProperty<?>>>; // Value object to access PersistentEntity instances managed by MappingContexts.\n", "des": "Mapping context API and implementation base classes."}
{"index": 1348, "repo": "spring-integration-kafka-6.1.2", "code": "Package: dsl\n\nClasses and Interfaces: \npublic abstract class AbstractKafkaChannelSpec<S extends AbstractKafkaChannelSpec<S,C>,C extends AbstractKafkaChannel> extends org.springframework.integration.dsl.MessageChannelSpec<S,C>; // Spec for a message channel backed by an Apache Kafka topic.\npublic final class Kafka extends Object; // Factory class for Apache Kafka components.\npublic class KafkaInboundChannelAdapterSpec<K,V> extends org.springframework.integration.dsl.MessageSourceSpec<KafkaInboundChannelAdapterSpec<K,V>,KafkaMessageSource<K,V>>; // Spec for a polled Apache Kafka inbound channel adapter.\npublic class KafkaInboundGatewaySpec<K,V,R,S extends KafkaInboundGatewaySpec<K,V,R,S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,KafkaInboundGateway<K,V,R>> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessagingGatewaySpec implementation for the KafkaInboundGateway.\npublic static class KafkaInboundGatewaySpec.KafkaInboundGatewayListenerContainerSpec<K,V,R> extends KafkaInboundGatewaySpec<K,V,R,KafkaInboundGatewaySpec.KafkaInboundGatewayListenerContainerSpec<K,V,R>>; // A ConcurrentMessageListenerContainer configuration KafkaInboundGatewaySpec extension.\npublic class KafkaMessageDrivenChannelAdapterSpec<K,V,S extends KafkaMessageDrivenChannelAdapterSpec<K,V,S>> extends org.springframework.integration.dsl.MessageProducerSpec<S,KafkaMessageDrivenChannelAdapter<K,V>> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageProducerSpec implementation for the KafkaMessageDrivenChannelAdapter.\npublic static class KafkaMessageDrivenChannelAdapterSpec.KafkaMessageDrivenChannelAdapterListenerContainerSpec<K,V> extends KafkaMessageDrivenChannelAdapterSpec<K,V,KafkaMessageDrivenChannelAdapterSpec.KafkaMessageDrivenChannelAdapterListenerContainerSpec<K,V>>; // A ConcurrentMessageListenerContainer configuration KafkaMessageDrivenChannelAdapterSpec extension.\n", "des": "Provides Spring Integration Java DSL Components support for Apache Kafka."}
{"index": 3235, "repo": "opencms-core-15.0", "code": "Package: configuration\n\nSub Packages: \npackage configuration.formatters; // Classes for handling formatter configurations.\n\nClasses and Interfaces: \nInterface I_CmsConfigurationObject<X extends I_CmsConfigurationObject<X>>; // Interface for a single named configuration object that can either be merged with other configuration objects or disable a configuration object with the same name.\nInterface I_CmsGlobalConfigurationCache; // This is interface is intended to be used in combination with the CmsGlobalConfigurationCacheEventHandler class.\nClass CmsADEConfigCacheState; // An immutable object which represents the complete ADE configuration (sitemap and module configurations) at a certain instant in time.\nClass CmsADEConfigData; // A class which represents the accessible configuration data at a given point in a sitemap.\nClass CmsADEConfigDataInternal; // Represents a parsed sitemap or module configuration.\nClass CmsADEConfigDataInternal.AttributeValue; // Represents the value of an attribute, with additional information about where the value originated from.\nClass CmsADEConfigurationSequence; // Represents a sequence of inherited module/sitemap configurations, together with an index into that list.\nClass CmsADEManager; // This is the main class used to access the ADE configuration and also accomplish some other related tasks like loading/saving favorite and recent lists.\nClass CmsConfigurationReader; // A class to parse ADE sitemap or module configuration files and create configuration objects from them.\nClass CmsContentFolderDescriptor; // A bean which represents the location configured for content elements of a specific type in a sitemap configuration.\nClass CmsDetailNameCache; // A cache which stores structure ids for URL names.\nClass CmsElementView; // Represents a element view for the container page editor.\nClass CmsElementView.ElementViewComparator; // The element view comparator.\nClass CmsFormatterUtils; // Helper class for formatter-related functionality.\nClass CmsFunctionAvailability; // Helper class for computing dynamic function availability based on sitemap configuration settings.\nClass CmsFunctionReference; // Bean for representing a named dynamic function reference from the configuration.\nClass CmsGlobalConfigurationCacheEventHandler; // This event handler manages cache instances which are instances of the interface I_CmsGlobalConfigurationCache.\nClass CmsModelPageConfig; // This class contains the model page configuration for a sitemap region.\n", "des": "Contains the ade configuration classes."}
{"index": 47, "repo": "ignite-core-2.15.0", "code": "Package: affinity\n\nSub Packages: \npackage affinity.rendezvous; // Contains HRW-based cache affinity for partitioned cache.\n\nClasses and Interfaces: \nInterface Affinity<K>; // Provides affinity information to detect which node is primary and which nodes are backups for a partitioned or replicated cache.\nInterface AffinityFunction; // Cache key affinity which maps keys to nodes.\nInterface AffinityFunctionContext; // Affinity function context.\nInterface AffinityKeyMapper; // Use AffinityKeyMapped or CacheKeyConfiguration.setAffinityKeyFieldName(String) instead.\nClass AffinityKey<K>; // Optional wrapper for cache keys to provide support for custom affinity mapping.\nClass AffinityUuid; // Guaranteed unique affinity-based key.\nAnnotation Type AffinityCentralizedFunction; // Annotation marker which identifies affinity function that must be calculated on one centralized node instead of independently on each node.\nAnnotation Type AffinityKeyMapped; // Optional annotation to specify custom key-to-node affinity.\n", "des": "Contains cache node affinity implementations."}
{"index": 3707, "repo": "solr-core-9.3.0", "code": "Package: cache\n\nClasses and Interfaces: \nClass HttpCacheHeaderUtil;\nEnum Method;\n", "des": "Caching related classes used in the Solr HTTP API"}
{"index": 1977, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: saml2\n\nClasses and Interfaces: \n@AutoConfiguration(before=SecurityAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository.class) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyRegistrationConfiguration.class,org.springframework.boot.autoconfigure.security.saml2.Saml2LoginConfiguration.class}) @EnableConfigurationProperties(Saml2RelyingPartyProperties.class) public class Saml2RelyingPartyAutoConfiguration extends Object; // Auto-configuration for Spring Security's SAML 2.0 authentication support.\n@ConfigurationProperties(\"spring.security.saml2.relyingparty\") public class Saml2RelyingPartyProperties extends Object; // SAML2 relying party properties.\npublic static class Saml2RelyingPartyProperties.AssertingParty extends Object; // Represents a remote Identity Provider.\npublic static class Saml2RelyingPartyProperties.AssertingParty.Singlesignon extends Object; // Single sign on details for an Identity Provider.\npublic static class Saml2RelyingPartyProperties.AssertingParty.Verification extends Object; // Verification details for an Identity Provider.\npublic static class Saml2RelyingPartyProperties.AssertingParty.Verification.Credential extends Object;\npublic static class Saml2RelyingPartyProperties.Decryption extends Object;\npublic static class Saml2RelyingPartyProperties.Decryption.Credential extends Object;\npublic static class Saml2RelyingPartyProperties.Registration extends Object; // Represents a SAML Relying Party.\npublic static class Saml2RelyingPartyProperties.Registration.Acs extends Object;\npublic static class Saml2RelyingPartyProperties.Registration.Signing extends Object;\npublic static class Saml2RelyingPartyProperties.Registration.Signing.Credential extends Object;\npublic static class Saml2RelyingPartyProperties.Singlelogout extends Object; // Single logout details.\n", "des": "Auto-configuration for Spring Security's SAML 2.0."}
{"index": 2537, "repo": "spring-security-core-6.1.2", "code": "Package: userdetails\n\nSub Packages: \npackage userdetails.cache; // Implementations of UserCache.\npackage userdetails.jdbc; // Exposes a JDBC-based authentication repository, implementing org.springframework.security.core.userdetails.UserDetailsService UserDetailsService.\npackage userdetails.memory; // Exposes an in-memory authentication repository.\n\nClasses and Interfaces: \npublic interface AuthenticationUserDetailsService<T extends Authentication>; // Interface that allows for retrieving a UserDetails object based on an Authentication object.\npublic class MapReactiveUserDetailsService extends Object implements ReactiveUserDetailsService, ReactiveUserDetailsPasswordService; // A Map based implementation of ReactiveUserDetailsService\npublic interface ReactiveUserDetailsPasswordService; // An API for changing a UserDetails password.\npublic interface ReactiveUserDetailsService; // An API for finding the UserDetails by username.\npublic class User extends Object implements UserDetails, CredentialsContainer; // Models core user information retrieved by a UserDetailsService.\npublic static final class User.UserBuilder extends Object; // Builds the user to be added.\npublic interface UserCache; // Provides a cache of UserDetails objects.\npublic interface UserDetails extends Serializable; // Provides core user information.\npublic class UserDetailsByNameServiceWrapper<T extends Authentication> extends Object implements AuthenticationUserDetailsService<T>, org.springframework.beans.factory.InitializingBean; // This implementation for AuthenticationUserDetailsService wraps a regular Spring Security UserDetailsService implementation, to retrieve a UserDetails object based on the user name contained in an Authentication object.\npublic interface UserDetailsChecker; // Called by classes which make use of a UserDetailsService to check the status of the loaded UserDetails object.\npublic interface UserDetailsPasswordService; // An API for changing a UserDetails password.\npublic interface UserDetailsService; // Core interface which loads user-specific data.\npublic class UsernameNotFoundException extends AuthenticationException; // Thrown if an UserDetailsService implementation cannot locate a User by its username.\n", "des": "The standard interfaces for implementing user data DAOs."}
{"index": 3361, "repo": "opencms-core-15.0", "code": "Package: widgets\n\nSub Packages: \npackage widgets.serialdate; // Contains the server-side widget implementation, for the serial date widget..\n\nClasses and Interfaces: \nInterface I_CmsADEWidget; // Widgets to be used with the new XML content editor are required to implement this interface.\nInterface I_CmsComplexWidget; // Interface for complex widgets which are used in the Acacia editor to render whole nested contents.\nInterface I_CmsGalleryWidgetDynamicConfiguration; // Enables a dynamic configuration of values for the A_CmsGalleryWidget.\nInterface I_CmsImageWidgetDynamicConfiguration; // Enables a dynamic configuration of values for the CmsVfsImageWidget.\nInterface I_CmsWidget; // Describes an editor widget for use in the OpenCms workplace.\nInterface I_CmsWidgetDialog; // Describes a widget enabled dialog.\nInterface I_CmsWidgetParameter; // Parameter value wrapper used by the OpenCms workplace widgets.\nClass A_CmsAdeGalleryWidget; // Base class for all ADE gallery widget implementations.\nClass A_CmsCategorizedSelectWidget; // Abstract base class for categorized select widgets.\nClass A_CmsFormatterWidget; // Abstract superclass for widgets used to enable or disable formatters.\nClass A_CmsFormatterWidget.FormatterSelectComparator; // Comparator used to sort formatter beans in the order in which they should be displayed in the selection.\nClass A_CmsGalleryWidget; // Base class for all gallery widget implementations.\nClass A_CmsHtmlWidget; // Provides a widget that creates a rich input field using the matching component, for use on a widget dialog.\nClass A_CmsNativeComplexWidget; // This is an abstract class which you can inherit from to relatively easily implement complex widgets for rendering nested contents in Javascript.\nClass A_CmsSelectWidget; // Base class for select widgets.\nClass A_CmsWidget; // Base class for XML editor widgets.\nClass CmsAddFormatterWidget; // Widget used to select a formatter to add.\nClass CmsAdeDownloadGalleryWidget; // ADE download gallery widget implementations.\nClass CmsAdeImageGalleryWidget; // ADE image gallery widget implementations.\nClass CmsCalendarWidget; // Provides a DHTML calendar widget, for use on a widget dialog.\nClass CmsCategoryWidget; // Provides a widget for a category based dependent select boxes.\nClass CmsCategoryXmlContentHandler;\n", "des": "Contains the widget implementations, these are GUI elements used in editors and dialogs of the OpenCms workplace."}
{"index": 2051, "repo": "spring-boot-loader-3.1.1", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class SystemPropertyUtils extends Object; // Helper class for resolving placeholders in texts.\n", "des": "Utilities used by Spring Boot's JAR loading."}
{"index": 2958, "repo": "spring-integration-redis-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class RedisChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration Redis namespace.\npublic class RedisInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser;\npublic class RedisNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's 'redis' namespace.\npublic class RedisOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> component.\npublic class RedisOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <int-redis:outbound-gateway/> component.\npublic class RedisQueueInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Parser for the <queue-inbound-channel-adapter> element of the 'redis' namespace.\npublic class RedisQueueInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser; // Parser for the <queue-inbound-gateway> element of the 'redis' namespace.\npublic class RedisQueueOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <int-redis:queue-outbound-channel-adapter> element.\npublic class RedisQueueOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <int-redis:queue-outbound-channel-adapter> element.\npublic class RedisStoreInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for Redis store inbound adapters\npublic class RedisStoreOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <redis:store-outbound-channel-adapter> element.\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 3390, "repo": "commons-imaging-1.0-alpha3", "code": "Package: dcx\n\nClasses and Interfaces: \nClass DcxImageParser;\n", "des": "The DCX image format."}
{"index": 4, "repo": "connect-api-3.5.0", "code": "Package: errors\n\nClasses and Interfaces: \nClass AlreadyExistsException; // Indicates the operation tried to create an entity that already exists.\nClass ConnectException; // ConnectException is the top-level exception type generated by Kafka Connect and connector implementations.\nClass DataException; // Base class for all Kafka Connect data API exceptions.\nClass IllegalWorkerStateException; // Indicates that a method has been invoked illegally or at an invalid time by a connector or task.\nClass NotFoundException; // Indicates that an operation attempted to modify or delete a connector or task that is not present on the worker.\nClass RetriableException; // An exception that indicates the operation can be reattempted.\nClass SchemaBuilderException; // Indicates an error while building a schema via SchemaBuilder\nClass SchemaProjectorException; // Indicates an error while projecting a schema via SchemaProjector\n", "des": "Provides common exception classes for Connect, used by the framework and plugins to communicate failures."}
{"index": 3386, "repo": "commons-imaging-1.0-alpha3", "code": "Package: bytesource\n\nClasses and Interfaces: \nClass ByteSource;\nClass ByteSourceArray;\nClass ByteSourceFile;\nClass ByteSourceInputStream;\n", "des": "Encapsulates sources from which data may be read."}
{"index": 456, "repo": "camel-core-3.0.0-RC1", "code": "Package: rest\n\nClasses and Interfaces: \nInterface RestContainer; // Container to hold Rest.\nClass DeleteVerbDefinition; // Rest DELETE command\nClass GetVerbDefinition; // Rest GET command\nClass HeadVerbDefinition; // Rest HEAD command\nClass PatchVerbDefinition; // Rest PATCH command\nClass PostVerbDefinition; // Rest POST command\nClass PutVerbDefinition; // Rest PUT command\nClass RestBindingDefinition; // To configure rest binding\nClass RestConfigurationDefinition; // To configure rest\nClass RestConstants;\nClass RestDefinition; // Defines a rest service using the rest-dsl\nClass RestOperationParamDefinition; // To specify the rest operation parameters using Swagger.\nClass RestOperationResponseHeaderDefinition; // To specify the rest operation response headers using Swagger.\nClass RestOperationResponseMsgDefinition; // To specify the rest operation response messages using Swagger.\nClass RestPropertyDefinition; // A key value pair\nClass RestsDefinition; // A series of rest services defined using the rest-dsl\nClass RestSecuritiesDefinition; // To configure rest security definitions.\nClass RestSecurityApiKey; // Rest security basic auth definition\nClass RestSecurityBasicAuth; // Rest security basic auth definition\nClass RestSecurityDefinition; // To specify the rest security definitions using Swagger.\nClass RestSecurityOAuth2; // Rest security OAuth2 definition\nClass SecurityDefinition; // Rest security definition\nClass VerbDefinition; // Rest command\nEnum CollectionFormat;\nEnum RestBindingMode;\nEnum RestHostNameResolver; // To configure the rest hostname resolver\nEnum RestParamType; // Rest parameter types\n", "des": "The JAXB POJOs for the REST DSL"}
{"index": 2011, "repo": "spring-boot-devtools-3.1.1", "code": "Package: livereload\n\nClasses and Interfaces: \npublic class LiveReloadServer extends Object; // A livereload server.\n", "des": "Support for the livereload protocol."}
{"index": 53, "repo": "ignite-core-2.15.0", "code": "Package: query\n\nSub Packages: \npackage query.annotations; // Contains query-related annotations.\n\nClasses and Interfaces: \nInterface ContinuousQueryWithTransformer.EventListener<T>; // Interface for local listener of ContinuousQueryWithTransformer to implement.\nInterface FieldsQueryCursor<T>; // SQL query result cursor.\nInterface IndexQueryCriterion; // Basic interface for IndexQuery criterion.\nInterface QueryCursor<T>; // Query result cursor.\nInterface QueryDetailMetrics; // Query metrics aggregated by query type and its textual representation.\nInterface QueryMetrics; // Cache query metrics used to obtain statistics on query.\nClass AbstractContinuousQuery<K,V>; // Base class for continuous query.\nClass BulkLoadContextCursor; // A special FieldsQueryCursor subclass that is used as a sentinel to transfer data from bulk load (COPY) command to the JDBC or other client-facing driver: the bulk load batch processor and parameters to send to the client.\nClass CacheQueryEntryEvent<K,V>; // A Cache continuous query entry event.\nClass ContinuousQuery<K,V>; // API for configuring continuous cache queries.\nClass ContinuousQueryWithTransformer<K,V,T>; // API for configuring continuous cache queries with transformer.\nClass IndexQuery<K,V>; // Index queries work over distributed indexes and retrieve cache entries that match the specified criteria.\nClass IndexQueryCriteriaBuilder; // Factory of IndexQueryCriterion for IndexQuery.\nClass Query<R>; // Main API for configuring and executing cache queries.\nClass ScanQuery<K,V>; // Scan query over cache entries.\nClass SpiQuery<K,V>; // Query to be used by IndexingSpi implementations.\nClass SqlFieldsQuery; // SQL Fields query.\nClass SqlQuery<K,V>; // Since 2.8, please use SqlFieldsQuery instead.\nClass TextQuery<K,V>; // Full Text Queries Ignite supports full text queries based on Apache Lucene engine.\nClass QueryCancelledException; // The exception is thrown if a query was cancelled or timed out while executing.\nClass QueryRetryException; // The exception is thrown if a query was cancelled or timed out while executing.\n", "des": "Contains APIs for creating and executing cache queries."}
{"index": 399, "repo": "solr-dataimporthandler-8.11.2", "code": "Package: dataimport\n\nSub Packages: \npackage dataimport.config; // Utility classes for parsing & modeling DIH configuration.\n\nClasses and Interfaces: \nInterface DIHCache; // A cache that allows a DIH entity's data to persist locally prior being joined to other data and/or indexed.\nInterface DIHWriter;\nInterface EventListener; // Event listener for DataImportHandler This API is experimental and subject to change\nInterface XPathRecordReader.Handler; // Implement this interface to stream records as and when one is found.\nClass BinContentStreamDataSource; // A data source implementation which can be used to read binary stream from content streams.\nClass BinFileDataSource; // A DataSource which reads from local files\nClass BinURLDataSource; // A data source implementation which can be used to read binary streams using HTTP.\nClass CachePropertyUtil;\nClass ClobTransformer; // Transformer instance which converts a Clob to a String.\nClass ConfigParseUtil;\nClass ContentStreamDataSource; // A DataSource implementation which reads from the ContentStream of a POST request\nClass Context; // This abstract class gives access to all available objects.\nClass ContextImpl; // An implementation for the Context\nClass DataImporter; // Stores all configuration information for pulling and indexing data.\nClass DataImportHandler; // since 8.6; see Deprecations\nClass DataSource<T>; // Provides data from a source with a given query.\nClass DateFormatEvaluator; // Formats values using a given date format.\nClass DateFormatTransformer; // Transformer instance which creates Date instances out of Strings.\nClass DebugInfo;\nClass DIHCacheSupport;\nClass DIHProperties; // Implementations write out properties about the last data import for use by the next import.\nClass DIHWriterBase;\nClass DocBuilder; // DocBuilder is responsible for creating Solr documents out of the given configuration.\nClass DocBuilder.Statistics;\nClass EntityProcessor; // An instance of entity processor serves an entity.\nClass EntityProcessorBase; // Base class for all implementations of EntityProcessor\nClass EntityProcessorWrapper; // A Wrapper over EntityProcessor instance which performs transforms and handles multi-row outputs correctly.\nClass Evaluator; // Pluggable functions for resolving variables\nClass Evaluator.VariableWrapper;\nClass FieldReaderDataSource; // This can be useful for users who have a DB field containing xml and wish to use a nested XPathEntityProcessor\n", "des": "DataImportHandler and related code."}
{"index": 181, "repo": "ignite-core-2.15.0", "code": "Package: suggestions\n\nClasses and Interfaces: \nClass GridPerformanceSuggestions; // Grid performance suggestions.\nClass JvmConfigurationSuggestions; // Java Virtual Machine configuration suggestions.\nClass OsConfigurationSuggestions; // Operation System configuration suggestions.\n", "des": "Contains classes for configurations suggestions."}
{"index": 340, "repo": "hadoop-hdfs-3.3.6", "code": "Package: datatransfer\n\nClasses and Interfaces: \nClass BlackListBasedTrustedChannelResolver; // Implements TrustedChannelResolver to trust ips/host/subnets based on a blackList.\nClass WhitelistBasedTrustedChannelResolver;\n", "des": "This package contains classes related to hdfs data transfer protocol."}
{"index": 3697, "repo": "solr-core-9.3.0", "code": "Package: responseprocessor\n\nClasses and Interfaces: \nClass SearchGroupShardResponseProcessor; // Concrete implementation for merging SearchGroup instances from shard responses.\nClass StoredFieldsShardResponseProcessor; // Concrete implementation for processing the stored field values from shard responses.\nClass TopGroupsShardResponseProcessor; // Concrete implementation for merging TopGroups instances from shard responses.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 3559, "repo": "guava-32.1.1-jre", "code": "Package: math\n\nClasses and Interfaces: \nClass BigDecimalMath; // A class for arithmetic on BigDecimal that is not covered by its built-in methods.\nClass BigIntegerMath; // A class for arithmetic on values of type BigInteger.\nClass DoubleMath; // A class for arithmetic on doubles that is not covered by Math.\nClass IntMath; // A class for arithmetic on values of type int.\nClass LinearTransformation; // The representation of a linear transformation between real numbers x and y.\nClass LinearTransformation.LinearTransformationBuilder; // This is an intermediate stage in the construction process.\nClass LongMath; // A class for arithmetic on values of type long.\nClass PairedStats; // An immutable value object capturing some basic statistics about a collection of paired double values (e.g.\nClass PairedStatsAccumulator; // A mutable object which accumulates paired double values (e.g.\nClass Quantiles; // Provides a fluent API for calculating quantiles.\nClass Quantiles.Scale; // Describes the point in a fluent API chain where only the scale (i.e.\nClass Quantiles.ScaleAndIndex; // Describes the point in a fluent API chain where the scale and a single quantile index (i.e.\nClass Quantiles.ScaleAndIndexes; // Describes the point in a fluent API chain where the scale and a multiple quantile indexes (i.e.\nClass Stats; // A bundle of statistical summary values -- sum, count, mean/average, min and max, and several forms of variance -- that were computed from a single set of zero or more floating-point values.\nClass StatsAccumulator; // A mutable object which accumulates double values and tracks some basic statistics over all the values added so far.\n", "des": "Arithmetic functions operating on primitive values and on BigInteger and BigDecimal instances."}
{"index": 2151, "repo": "wicket-core-10.0.0-M1", "code": "Package: include\n\nClasses and Interfaces: \npublic class Include extends WebComponent implements IGenericComponent<String,Include>; // Component that includes/ renders the import result of an URL, much like JSP include.\n", "des": "Components for including content from non-Wicket sources."}
{"index": 2906, "repo": "spring-aspects-6.0.11", "code": "Package: aspectj\n\nClasses and Interfaces: \n@Configuration @Role(2) public class AspectJJtaTransactionManagementConfiguration extends AspectJTransactionManagementConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven transaction management for the JTA 1.2 Transactional annotation in addition to Spring's own Transactional annotation.\n@Configuration @Role(2) public class AspectJTransactionManagementConfiguration extends org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven transaction management for Spring's own Transactional annotation.\n", "des": "AspectJ-based transaction management support."}
{"index": 245, "repo": "nutch-2.4", "code": "Package: http\n\nClasses and Interfaces: \nClass Http;\nClass HttpResponse; // An HTTP response.\nEnum HttpResponse.Scheme;\n", "des": "Protocol plugin which supports retrieving documents via the http protocol."}
{"index": 355, "repo": "hive-exec-4.0.0-alpha-2", "code": "Package: orc\n\nClasses and Interfaces: \nInterface ExternalCache.ExternalFooterCachesByConf; // An abstraction for testing ExternalCache in OrcInputFormat.\nInterface ExternalCache.ExternalFooterCachesByConf.Cache;\nInterface OrcInputFormat.FooterCache; // Represents footer cache.\nInterface Reader; // The interface for reading ORC files.\nInterface RecordReader; // A row-by-row iterator for ORC files.\nInterface VectorizedOrcAcidRowBatchReader.DeleteEventRegistry; // An interface that can determine which rows have been deleted from a given vectorized row batch.\nInterface Writer; // The HIVE interface for writing ORC files.\nClass ExternalCache; // Metastore-based footer cache storing serialized footers.\nClass FixAcidKeyIndex; // Utility to check and fix the ACID key index of an ORC file if it has been written incorrectly due to HIVE-18817.\nClass MetastoreExternalCachesByConf; // An implementation of external cache and factory based on metastore.\nClass MetastoreExternalCachesByConf.HBaseCache;\nClass OrcFile; // Contains factory methods to read or write ORC files.\nClass OrcFile.ReaderOptions;\nClass OrcFile.WriterOptions; // Options for creating ORC file writers.\nClass OrcFileFormatProxy; // File format proxy for ORC.\nClass OrcFileKeyWrapper; // Key for OrcFileMergeMapper task.\nClass OrcFileStripeMergeInputFormat;\nClass OrcFileStripeMergeRecordReader;\nClass OrcFileValueWrapper; // Value for OrcFileMergeMapper.\nClass OrcInputFormat; // A MapReduce/Hive input format for ORC files.\nClass OrcInputFormat.ContextFactory;\nClass OrcInputFormat.FooterCacheKey;\nClass OrcInputFormat.NullKeyRecordReader; // Return a RecordReader that is compatible with the Hive 0.12 reader with NullWritable for the key instead of RecordIdentifier.\nClass OrcNewInputFormat; // An InputFormat for ORC files.\nClass OrcNewOutputFormat; // An OutputFormat that writes ORC files.\nClass OrcNewSplit; // OrcFileSplit.\n", "des": "The Optimized Row Columnar (ORC) File Format."}
{"index": 2153, "repo": "wicket-core-10.0.0-M1", "code": "Package: list\n\nClasses and Interfaces: \npublic class AbstractItem extends WebMarkupContainer; // A very simple Item.\npublic class ListItem<T> extends LoopItem implements IGenericComponent<T,ListItem<T>>; // Container that holds components in a ListView.\npublic class ListItemModel<T> extends Object implements IModel<T>; // Model for list items.\npublic abstract class ListView<T> extends AbstractRepeater; // A ListView is a repeater that makes it easy to display/work with Lists.\npublic abstract class Loop extends AbstractRepeater; // A very simple loop component whose model is an Integer defining the number of iterations the loop should render.\npublic class LoopItem extends AbstractItem; // A very simple Item.\npublic class OddEvenListItem<T> extends ListItem<T>; // ListItem that adds class=\"odd\" or class=\"even\" html attribute depending on its index.\npublic abstract class PageableListView<T> extends ListView<T> implements IPageableItems; // PageableListView is similar to ListView but provides in addition pageable views.\npublic abstract class PropertyListView<T> extends ListView<T>; // Simple ListVew subclass that wraps its item models in a CompoundPropertyModel.\n", "des": "List components for tabular data and such."}
{"index": 3445, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface Batch; // Conceptually models a batch.\nInterface BatchBuilder; // A builder for Batch instances\nInterface BatchKey; // Unique key for batch identification.\nInterface BatchObserver; // An observer contract for batch events.\n", "des": "Defines contracts for JDBC batching support."}
{"index": 3229, "repo": "commons-release-plugin-1.8.1", "code": "Package: plugin\n\nSub Packages: \npackage plugin.mojos; // This package contains all the maven mojos for the commons-release-plugin.\npackage plugin.velocity; // Contains classes that take our velocity templates and render's them to a Writer class.\n\nClasses and Interfaces: \nClass SharedFunctions; // Shared static functions for all of our Mojos.\n", "des": "Base package for the commons-release-plugin."}
{"index": 3735, "repo": "lucene-queryparser-9.7.0", "code": "Package: processors\n\nClasses and Interfaces: \nInterface QueryNodeProcessor; // A QueryNodeProcessor is an interface for classes that process a QueryNode tree.\nClass NoChildOptimizationQueryNodeProcessor; // A NoChildOptimizationQueryNodeProcessor removes every BooleanQueryNode, BoostQueryNode, TokenizedPhraseQueryNode or ModifierQueryNode that do not have a valid children.\nClass QueryNodeProcessorImpl; // This is a default implementation for the QueryNodeProcessor interface, it's an abstract class, so it should be extended by classes that want to process a QueryNode tree.\nClass QueryNodeProcessorPipeline; // A QueryNodeProcessorPipeline class should be used to build a query node processor pipeline.\nClass RemoveDeletedQueryNodesProcessor; // A QueryNodeProcessorPipeline class removes every instance of DeletedQueryNode from a query node tree.\n", "des": "Interfaces and implementations used by query node processors"}
{"index": 331, "repo": "kafka-clients-3.5.0", "code": "Package: secured\n\nClasses and Interfaces: \nClass OAuthBearerLoginCallbackHandler; // See org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginCallbackHandler\nClass OAuthBearerValidatorCallbackHandler; // See org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackHandler\n", "des": "This package is deprecated."}
{"index": 1900, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: availability\n\nClasses and Interfaces: \n@AutoConfiguration public class ApplicationAvailabilityAutoConfiguration extends Object; // EnableAutoConfiguration for ApplicationAvailabilityBean.\n", "des": "Auto-configuration for application availability features."}
{"index": 1035, "repo": "hadoop-aws-3.3.6", "code": "Package: s3guard\n\nClasses and Interfaces: \nClass S3Guard; // Logic for integrating MetadataStore with S3A.\nClass S3GuardTool; // CLI to manage S3Guard Metadata Store.\nClass S3GuardTool.BucketInfo; // Get info about a bucket and its S3Guard integration status.\n", "des": "This package contained S3Guard support; now the feature has been removed, its contents are limited to the public command line and some methods still used by directory marker code."}
{"index": 2049, "repo": "spring-boot-loader-3.1.1", "code": "Package: jar\n\nClasses and Interfaces: \npublic class Handler extends URLStreamHandler; // URLStreamHandler for Spring Boot loader JarFiles.\npublic class JarFile extends JarFile implements Iterable<JarEntry>; // Extended variant of JarFile that behaves in the same way but offers the following additional functionality.\n", "des": "Support for loading and manipulating JAR/WAR files."}
{"index": 3802, "repo": "lucene-analysis-common-9.7.0", "code": "Package: nl\n\nClasses and Interfaces: \nClass DutchAnalyzer; // Analyzer for Dutch language.\n", "des": "Analyzer for Dutch."}
{"index": 292, "repo": "pdfbox-3.0.0-beta1", "code": "Package: fdf\n\nClasses and Interfaces: \nClass FDFAnnotation; // This represents an FDF annotation that is part of the FDF document.\nClass FDFAnnotationCaret; // This represents a Caret FDF annotation.\nClass FDFAnnotationCircle; // This represents a Circle FDF annotation.\nClass FDFAnnotationFileAttachment; // This represents a FileAttachment FDF annotation.\nClass FDFAnnotationFreeText; // This represents a FreeText FDF annotation.\nClass FDFAnnotationHighlight; // This represents a Highlight FDF annotation.\nClass FDFAnnotationInk; // This represents a Ink FDF annotation.\nClass FDFAnnotationLine; // This represents a Line FDF annotation.\nClass FDFAnnotationLink; // This represents a Polygon FDF annotation.\nClass FDFAnnotationPolygon; // This represents a Polygon FDF annotation.\nClass FDFAnnotationPolyline; // This represents a Polyline FDF annotation.\nClass FDFAnnotationSound; // This represents a Sound FDF annotation.\nClass FDFAnnotationSquare; // This represents a Square FDF annotation.\nClass FDFAnnotationSquiggly; // This represents a Squiggly FDF annotation.\nClass FDFAnnotationStamp; // This represents a Stamp FDF annotation.\nClass FDFAnnotationStrikeOut; // This represents a StrikeOut FDF annotation.\nClass FDFAnnotationText; // This represents a Text FDF annotation.\nClass FDFAnnotationTextMarkup; // This abstract class is used as a superclass for the different FDF annotations with text markup attributes.\nClass FDFAnnotationUnderline; // This represents a Underline FDF annotation.\nClass FDFCatalog; // This represents an FDF catalog that is part of the FDF document.\nClass FDFDictionary; // This represents an FDF dictionary that is part of the FDF document.\nClass FDFDocument; // This is the in-memory representation of the FDF document.\nClass FDFField; // This represents an FDF field that is part of the FDF document.\nClass FDFIconFit; // This represents an Icon fit dictionary for an FDF field.\nClass FDFJavaScript; // This represents an FDF JavaScript dictionary that is part of the FDF document.\n", "des": "The fdf package will handle all of the logic used for FDF objects inside of the PDF/FDF document."}
{"index": 2189, "repo": "spring-security-web-6.1.2", "code": "Package: jaasapi\n\nClasses and Interfaces: \npublic class JaasApiIntegrationFilter extends org.springframework.web.filter.GenericFilterBean; // A Filter which attempts to obtain a JAAS Subject and continue the FilterChain running as that Subject.\n", "des": "Makes a JAAS Subject available as the current Subject."}
{"index": 3115, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface BasicProxyFactory; // A proxy factory for \"basic proxy\" generation.\nInterface BytecodeEnhancementMetadata; // Encapsulates bytecode enhancement information about a particular entity.\nInterface BytecodeProvider; // Contract for providers of bytecode services to Hibernate.\nInterface ClassTransformer; // A persistence provider provides an instance of this interface to the PersistenceUnitInfo.addTransformer method.\nInterface ProxyFactoryFactory; // An interface for factories of proxy factory instances.\nInterface ReflectionOptimizer; // Represents reflection optimization for a particular class.\nInterface ReflectionOptimizer.AccessOptimizer; // Represents optimized entity property access.\nInterface ReflectionOptimizer.InstantiationOptimizer; // Represents optimized entity instantiation.\nClass ByteCodeHelper; // A helper for reading byte code from various input sources.\nClass ClassLoadingStrategyHelper;\nClass InstrumentedClassLoader; // A specialized ClassLoader which performs bytecode enhancement on class definitions as they are loaded into the ClassLoader scope.\nClass NotInstrumentedException; // Indicates a condition where an instrumented/enhanced class was expected, but the class was not instrumented/enhanced.\n", "des": "Package defining bytecode code enhancement (instrumentation) support."}
{"index": 3889, "repo": "solr-solrj-9.3.0", "code": "Package: json\n\nClasses and Interfaces: \nClass DirectJsonQueryRequest; // Represents a query using the JSON Query DSL\nClass DomainMap;\nClass HeatmapFacetMap; // Represents a \"heatmap\" facet in a JSON request query.\nClass JsonFacetMap<B extends JsonFacetMap<B>>; // A common parent for a small set of classes that allow easier composition of JSON facet objects.\nClass JsonQueryRequest; // Represents a query using the JSON Query DSL\nClass QueryFacetMap; // Represents a \"query\" facet in a JSON query request.\nClass RangeFacetMap; // Represents a \"range\" facet in a JSON request query.\nClass TermsFacetMap; // Represents a \"terms\" facet in a JSON query request.\nEnum HeatmapFacetMap.HeatmapFormat;\nEnum RangeFacetMap.OtherBuckets;\nEnum TermsFacetMap.FacetMethod;\n", "des": "Allows sending of requests using Solr's JSON query/faceting API"}
{"index": 1050, "repo": "commons-io-2.13.0", "code": "Package: input\n\nSub Packages: \npackage input.buffer; // Provides implementations of buffered input classes, such as CircularBufferInputStream and PeekableInputStream.\n\nClasses and Interfaces: \nInterface Tailer.RandomAccessResourceBridge; // Bridges access to a resource for random access, normally a file.\nInterface Tailer.Tailable; // A tailable resource like a file.\nInterface TailerListener; // Listener for events from a Tailer.\nClass AbstractCharacterFilterReader; // A filter reader that filters out characters where subclasses decide which characters to filter out.\nClass AutoCloseInputStream; // Proxy stream that closes and discards the underlying stream as soon as the end of input has been reached or when the stream is explicitly closed.\nClass AutoCloseInputStream.Builder; // Builds a new AutoCloseInputStream instance.\nClass BOMInputStream; // This class is used to wrap a stream that includes an encoded ByteOrderMark as its first bytes.\nClass BOMInputStream.Builder; // Builds a new BOMInputStream instance.\nClass BoundedInputStream; // Reads bytes up to a maximum length, if its count goes above that, it stops.\nClass BoundedReader; // A reader that imposes a limit to the number of characters that can be read from an underlying reader, returning EOF when this limit is reached, regardless of state of underlying reader.\nClass BrokenInputStream; // Always throws an IOException from all the InputStream methods where the exception is declared.\nClass BrokenReader; // Always throws an IOException from all the Reader methods where the exception is declared.\nClass BufferedFileChannelInputStream; // InputStream implementation which uses direct buffer to read a file to avoid extra copy of data between Java and native memory which happens when using BufferedInputStream.\nClass BufferedFileChannelInputStream.Builder; // Builds a new BufferedFileChannelInputStream instance.\nClass CharacterFilterReader; // A filter reader that filters out a given character represented as an int code point, handy to remove known junk characters from CSV files for example.\nClass CharacterSetFilterReader; // A filter reader that removes a given set of characters represented as int code points, handy to remove known junk characters from CSV files for example.\nClass CharSequenceInputStream; // Implements an InputStream to read from String, StringBuffer, StringBuilder or CharBuffer.\nClass CharSequenceInputStream.Builder; // Builds a new CharSequenceInputStream instance.\n", "des": "Provides implementations of input classes, such as InputStream and Reader."}
{"index": 266, "repo": "nutch-2.4", "code": "Package: metadata\n\nClasses and Interfaces: \nClass MetadataIndexer; // Indexer which can be configured to extract metadata from the crawldb, parse metadata or content metadata.\n", "des": "Indexing filter to add document metadata to the index."}
{"index": 762, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: cjk\n\nClasses and Interfaces: \nClass CJKAnalyzer; // An Analyzer that tokenizes text with StandardTokenizer, normalizes content with CJKWidthFilter, folds case with LowerCaseFilter, forms bigrams of CJK with CJKBigramFilter, and filters stopwords with StopFilter\nClass CJKBigramFilter; // Forms bigrams of CJK terms that are generated from StandardTokenizer or ICUTokenizer.\nClass CJKBigramFilterFactory; // Factory for CJKBigramFilter.\nClass CJKWidthCharFilter; // A CharFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthCharFilterFactory; // Factory for CJKWidthCharFilter.\nClass CJKWidthFilter; // A TokenFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthFilterFactory; // Factory for CJKWidthFilter.\n", "des": "Analyzer for Chinese, Japanese, and Korean, which indexes bigrams."}
{"index": 1394, "repo": "spring-boot-actuator-3.1.1", "code": "Package: jersey\n\nClasses and Interfaces: \npublic class JerseyEndpointResourceFactory extends Object; // A factory for creating Jersey Resources for web endpoint operations.\npublic class JerseyHealthEndpointAdditionalPathResourceFactory extends JerseyEndpointResourceFactory; // A factory for creating Jersey Resources for health groups with additional path.\n", "des": "Jersey support for actuator endpoints."}
{"index": 2203, "repo": "spring-data-commons-3.1.2", "code": "Package: jaxb\n\nClasses and Interfaces: \npublic class OrderAdapter extends jakarta.xml.bind.annotation.adapters.XmlAdapter<SpringDataJaxb.OrderDto,Sort.Order>; // XmlAdapter to convert Sort.Order instances into SpringDataJaxb.OrderDtos and vice versa.\npublic class PageAdapter extends jakarta.xml.bind.annotation.adapters.XmlAdapter<SpringDataJaxb.PageDto,Page<Object>>; // XmlAdapter to convert Page instances into SpringDataJaxb.PageDto instances and vice versa.\npublic class SortAdapter extends jakarta.xml.bind.annotation.adapters.XmlAdapter<SpringDataJaxb.SortDto,Sort>; // XmlAdapter to convert Sort instances into SpringDataJaxb.SortDto instances and vice versa.\npublic abstract class SpringDataJaxb extends Object; // Helper class containing utility methods to implement JAXB XmlAdapters as well as the DTO types to be marshalled by JAXB.\npublic static class SpringDataJaxb.OrderDto extends Object; // The DTO for Sort.Order.\npublic static class SpringDataJaxb.PageDto extends org.springframework.hateoas.RepresentationModel; // The DTO for Page.\npublic static class SpringDataJaxb.PageRequestDto extends Object; // The DTO for Pageables/PageRequests.\npublic static class SpringDataJaxb.SortDto extends Object; // The DTO for Sort.\n", "des": "Central domain abstractions especially to be used in combination with the Repository abstraction."}
{"index": 3610, "repo": "lucene-suggest-9.7.0", "code": "Package: suggest\n\nSub Packages: \npackage suggest.analyzing; // Analyzer based autosuggest.\npackage suggest.document; // Support for document suggestion\npackage suggest.fst; // Finite-state based autosuggest.\npackage suggest.tst; // Ternary Search Tree based autosuggest.\n\nClasses and Interfaces: \nInterface InputIterator; // Interface for enumerating term,weight,payload triples for suggester consumption; currently only AnalyzingSuggester, FuzzySuggester and AnalyzingInfixSuggester support payloads.\nClass BitsProducer; // A producer of Bits per segment.\nClass BufferedInputIterator; // This wrapper buffers incoming elements.\nClass DocumentDictionary; // Dictionary with terms, weights, payload (optional) and contexts (optional) information taken from stored/indexed fields in a Lucene index.\nClass DocumentValueSourceDictionary; // Dictionary with terms and optionally payload and optionally contexts information taken from stored fields in a Lucene index.\nClass FileDictionary; // Dictionary represented by a text file.\nClass InMemorySorter; // An BytesRefSorter that keeps all the entries in memory.\nClass InputIterator.InputIteratorWrapper; // Wraps a BytesRefIterator as a suggester InputIterator, with all weights set to 1 and carries no payload\nClass Lookup; // Simple Lookup interface for CharSequence suggestions.\nClass Lookup.LookupPriorityQueue; // A PriorityQueue collecting a fixed size of high priority Lookup.LookupResult\nClass Lookup.LookupResult; // Result of a lookup.\nClass SortedInputIterator; // This wrapper buffers incoming elements and makes sure they are sorted based on given comparator.\nClass UnsortedInputIterator; // This wrapper buffers the incoming elements and makes sure they are in random order.\n", "des": "Support for Autocomplete/Autosuggest"}
{"index": 3888, "repo": "solr-solrj-9.3.0", "code": "Package: beans\n\nClasses and Interfaces: \nClass BackupCollectionPayload; // V2 API POJO for the /v2/collections 'backup-collection' command.\nClass ClusterPropPayload;\nClass ClusterPropPayload.Cluster;\nClass ClusterPropPayload.CollectionDefaults;\nClass ClusterPropPayload.Defaults;\nClass CreateConfigPayload;\nClass CreateCorePayload;\nClass CreateShardPayload;\nClass DeleteBasicAuthUserPayload;\nClass MigrateDocsPayload;\nClass ModifyCollectionPayload;\nClass MoveReplicaPayload;\nClass OverseerOperationPayload;\nClass PackagePayload; // Just a container class for POJOs used in Package APIs\nClass PackagePayload.AddVersion;\nClass PackagePayload.DelVersion;\nClass PluginMeta; // POJO for a plugin metadata used in container plugins\nClass PrepareCoreRecoveryPayload;\nClass RateLimiterPayload; // POJO for Rate Limiter Metadata Configuration\nClass RebalanceLeadersPayload;\nClass RejoinLeaderElectionPayload;\nClass RequestApplyCoreUpdatesPayload;\nClass RequestBufferUpdatesPayload;\nClass RequestCoreRecoveryPayload;\nClass RequestSyncShardPayload;\nClass SetRuleBasedAuthPermissionPayload;\nClass SplitShardPayload;\nClass UpdateRuleBasedAuthPermissionPayload;\nClass V2ApiConstants;\n", "des": "Annotated Data objects used in V2 Requests"}
{"index": 2980, "repo": "pulsar-broker-3.0.0", "code": "Package: timeout\n\nClasses and Interfaces: \npublic class TransactionTimeoutTrackerFactoryImpl extends Object implements TransactionTimeoutTrackerFactory; // An timeout tracker factory implementation of TransactionTimeoutTrackerFactory.\npublic class TransactionTimeoutTrackerImpl extends Object implements TransactionTimeoutTracker, io.netty.util.TimerTask; // An timer-task implementation of TransactionTimeoutTracker.\n", "des": "Implementation of a transaction buffer."}
{"index": 306, "repo": "pdfbox-3.0.0-beta1", "code": "Package: outline\n\nClasses and Interfaces: \nClass PDDocumentOutline; // This represents an outline in a pdf document.\nClass PDOutlineItem; // This represents an outline item in a pdf document.\nClass PDOutlineNode; // Base class for a node in the outline of a PDF document.\n", "des": "The outline package allows for a PDF outline(bookmarks) to be created."}
{"index": 1558, "repo": "spring-restdocs-core-3.0.0", "code": "Package: restdocs\n\nSub Packages: \npackage restdocs.cli; // Documenting CLI commands required to make a request to a RESTful API.\npackage restdocs.config; // Classes for configuring Spring REST Docs.\npackage restdocs.constraints; // Documenting a RESTful API's constraints.\npackage restdocs.cookies; // Documenting the cookies of a RESTful API's requests and responses.\npackage restdocs.generate; // Classes that drive the generation of the documentation snippets.\npackage restdocs.headers; // Documenting the headers of a RESTful API's requests and responses.\npackage restdocs.http; // Documenting the HTTP request sent to a RESTful API and the HTTP response that is returned.\npackage restdocs.hypermedia; // Documenting a RESTful API that uses hypermedia.\npackage restdocs.operation; // Operation API that describes a request that was sent and the response that was received when calling a RESTful API.\npackage restdocs.payload; // Documenting the payload of a RESTful API's requests and responses.\npackage restdocs.request; // Documenting query and path parameters of requests sent to a RESTful API.\npackage restdocs.snippet; // Snippet generation.\npackage restdocs.templates; // Template API used to render documentation snippets.\n\nClasses and Interfaces: \npublic class JUnitRestDocumentation extends Object implements RestDocumentationContextProvider, org.junit.rules.TestRule; // A JUnit TestRule used to automatically manage the RestDocumentationContext.\npublic final class ManualRestDocumentation extends Object implements RestDocumentationContextProvider; // ManualRestDocumentation is used to manually manage the RestDocumentationContext.\npublic interface RestDocumentationContext; // RestDocumentationContext encapsulates the context in which the documentation of a RESTful API is being performed.\npublic interface RestDocumentationContextProvider; // A RestDocumentationContextProvider is used to provide access to the RestDocumentationContext.\npublic class RestDocumentationExtension extends Object implements org.junit.jupiter.api.extension.BeforeEachCallback, org.junit.jupiter.api.extension.AfterEachCallback, org.junit.jupiter.api.extension.ParameterResolver; // A JUnit Jupiter Extension used to automatically manage the RestDocumentationContext.\n", "des": "Core Spring REST Docs classes."}
{"index": 1594, "repo": "spring-websocket-6.0.11", "code": "Package: handler\n\nClasses and Interfaces: \npublic abstract class AbstractWebSocketHandler extends Object implements WebSocketHandler; // A convenient base class for WebSocketHandler implementation with empty methods.\npublic class BeanCreatingHandlerProvider<T> extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Instantiates a target handler through a Spring BeanFactory and also provides an equivalent destroy method.\npublic class BinaryWebSocketHandler extends AbstractWebSocketHandler; // A convenient base class for WebSocketHandler implementations that process binary messages only.\npublic class ConcurrentWebSocketSessionDecorator extends WebSocketSessionDecorator; // Wrap a WebSocketSession to guarantee only one thread can send messages at a time.\npublic static enum ConcurrentWebSocketSessionDecorator.OverflowStrategy extends Enum<ConcurrentWebSocketSessionDecorator.OverflowStrategy>; // Enum for options of what to do when the buffer fills up.\npublic class ExceptionWebSocketHandlerDecorator extends WebSocketHandlerDecorator; // An exception handling WebSocketHandlerDecorator.\npublic class LoggingWebSocketHandlerDecorator extends WebSocketHandlerDecorator; // A WebSocketHandlerDecorator that adds logging to WebSocket lifecycle events.\npublic class PerConnectionWebSocketHandler extends Object implements WebSocketHandler, org.springframework.beans.factory.BeanFactoryAware; // A WebSocketHandler that initializes and destroys a WebSocketHandler instance for each WebSocket connection and delegates all other methods to it.\npublic class SessionLimitExceededException extends RuntimeException; // Raised when a WebSocket session has exceeded limits it has been configured for, e.g.\npublic class TextWebSocketHandler extends AbstractWebSocketHandler; // A convenient base class for WebSocketHandler implementations that process text messages only.\npublic class WebSocketHandlerDecorator extends Object implements WebSocketHandler; // Wraps another WebSocketHandler instance and delegates to it.\npublic interface WebSocketHandlerDecoratorFactory; // A factory for applying decorators to a WebSocketHandler.\npublic class WebSocketSessionDecorator extends Object implements WebSocketSession; // Wraps another WebSocketSession instance and delegates to it.\n", "des": "Convenient WebSocketHandler implementations and decorators."}
{"index": 3498, "repo": "poi-5.2.3", "code": "Package: crypt\n\nClasses and Interfaces: \nInterface EncryptionInfoBuilder;\nClass ChunkedCipherInputStream;\nClass ChunkedCipherOutputStream;\nClass CryptoFunctions; // Helper functions used for standard and agile encryption\nClass DataSpaceMapUtils;\nClass DataSpaceMapUtils.DataSpaceDefinition;\nClass DataSpaceMapUtils.DataSpaceMap;\nClass DataSpaceMapUtils.DataSpaceMapEntry;\nClass DataSpaceMapUtils.DataSpaceVersionInfo;\nClass DataSpaceMapUtils.IRMDSTransformInfo;\nClass DataSpaceMapUtils.TransformInfoHeader;\nClass Decryptor;\nClass EncryptionHeader; // Reads and processes OOXML Encryption Headers The constants are largely based on ZIP constants.\nClass EncryptionInfo; // Wrapper for the EncryptionInfo node of encrypted documents\nClass EncryptionVerifier; // Used when checking if a key is valid for a document\nClass Encryptor;\nEnum ChainingMode;\nEnum CipherAlgorithm;\nEnum CipherProvider;\nEnum EncryptionMode; // Office supports various encryption modes.\nEnum HashAlgorithm;\n", "des": "Implementation of the ECMA-376 and MS-propritary document encryptions"}
{"index": 2771, "repo": "spring-jms-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class JmsGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean; // Convenient superclass for application classes that need JMS access.\n", "des": "Classes supporting the org.springframework.jms.core package."}
{"index": 295, "repo": "pdfbox-3.0.0-beta1", "code": "Package: color\n\nClasses and Interfaces: \nClass PDCalGray; // A CalGray colour space is a special case of a single-component CIE-based colour space.\nClass PDCalRGB; // A CalRGB colour space is a CIE-based colour space with one transformation stage instead of two.\nClass PDCIEBasedColorSpace; // CIE-based colour spaces specify colours in a way that is independent of the characteristics of any particular output device.\nClass PDCIEDictionaryBasedColorSpace; // CIE-based colour spaces that use a dictionary.\nClass PDColor; // A color value, consisting of one or more color components, or for pattern color spaces, a name and optional color components.\nClass PDColorSpace; // A color space specifies how the colours of graphics objects will be painted on the page.\nClass PDDeviceCMYK; // Allows colors to be specified according to the subtractive CMYK (cyan, magenta, yellow, black) model typical of printers and other paper-based output devices.\nClass PDDeviceColorSpace; // Device colour spaces directly specify colours or shades of gray produced by an output device.\nClass PDDeviceGray; // A color space with black, white, and intermediate shades of gray.\nClass PDDeviceN; // DeviceN colour spaces may contain an arbitrary number of colour components.\nClass PDDeviceNAttributes; // Contains additional information about the components of colour space.\nClass PDDeviceNProcess; // A DeviceN Process Dictionary\nClass PDDeviceRGB; // Colours in the DeviceRGB colour space are specified according to the additive RGB (red-green-blue) colour model.\nClass PDGamma; // A gamma array, or collection of three floating point parameters used for color operations.\nClass PDICCBased; // ICCBased color spaces are based on a cross-platform color profile as defined by the International Color Consortium (ICC).\nClass PDIndexed; // An Indexed colour space specifies that an area is to be painted using a colour table of arbitrary colours from another color space.\nClass PDJPXColorSpace; // A color space embedded in a JPX file.\nClass PDLab; // A Lab colour space is a CIE-based ABC colour space with two transformation stages.\n", "des": "This package deals with colors that are stored in a PDF document."}
{"index": 2452, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: cache\n\nClasses and Interfaces: \n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.class}) @ConditionalOnBean(org.springframework.cache.CacheManager.class) @Import({org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMeterBinderProvidersConfiguration.class,org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsRegistrarConfiguration.class}) public class CacheMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available caches.\n", "des": "Auto-configuration for cache metrics."}
{"index": 3443, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ConfigurationService; // Provides access to the initial user-provided configuration values.\nInterface ConfigurationService.Converter<T>; // Simple conversion contract for converting an untyped object to a specified type.\nClass StandardConverters; // Standard set of setting converters\n", "des": "SPI Package for the configuration service."}
{"index": 2993, "repo": "spring-ldap-core-3.1.0", "code": "Package: converters\n\nClasses and Interfaces: \npublic final class FromStringConverter extends Object implements Converter; // A Converter from a String to any class which has a single argument public constructor taking a String.\npublic final class ToStringConverter extends Object implements Converter; // A Converter from any class to a String via the toString method.\n", "des": "Provides some basic implementations of the Converter interface."}
{"index": 3271, "repo": "opencms-core-15.0", "code": "Package: wrapper\n\nClasses and Interfaces: \nInterface I_CmsResourceWrapper; // Interface which is used by the CmsObjectWrapper to create a different view to the resources in the VFS.\nClass A_CmsResourceExtensionWrapper; // Abstract base class which implements I_CmsResourceWrapper and makes it possible to add and remove file extensions to resources.\nClass A_CmsResourceWrapper; // Default abstract implementation of the interface I_CmsResourceWrapper.\nClass CmsObjectWrapper; // This class contains a subset of the methods of CmsObject and uses the configured resource wrappers (I_CmsResourceWrapper) to change the view to the existing resources in the VFS.\nClass CmsResourceExtensionWrapperJsp; // A resource type wrapper for jsp files, which adds the correct file extension \"jsp\" to the resources.\nClass CmsResourceExtensionWrapperXmlContent; // A resource type wrapper for xml content files, which adds the correct file extension \"xml\" to the resources.\nClass CmsResourceExtensionWrapperXmlPage; // A resource type wrapper for xml pages, which adds the correct file extension \"xml\" to the resources.\nClass CmsResourceWrapperModules; // Resource wrapper used to import/export modules by copying them to/from virtual folders.\nClass CmsResourceWrapperModulesNonLazy; // Resource wrapper used to import/export modules by copying them to/from virtual folders.\nClass CmsResourceWrapperPreventCreateNameCI; // Resource wrapper class which is used to prevent resources with a certain name from being created.\nClass CmsResourceWrapperPreventCreateNameRegex; // Resource wrapper class which is used to prevent resources with names matching a given regex from being created.\nClass CmsResourceWrapperPropertyFile; // Adds a folder in every existing folder with the name \"__properties\" which contains property files for every resource in the existing folder.\nClass CmsResourceWrapperReplaceDeleted; // Resource wrapper which intercepts createResource calls and substitutes them with replaceResource if there is already a deleted file at the same path.\nClass CmsResourceWrapperSystemFolder; // Adds the system folder to every root folder of target sites.\nClass CmsResourceWrapperUtils; // Helper class with several methods used by different implementations of the interface I_CmsResourceWrapper.\nClass CmsResourceWrapperXmlPage; // A resource type wrapper for xml page files, which explodes the xml pages to folders.\nClass CmsWrappedResource; // Helper class to create \"virtual\" resources not existing in the vfs which are based on existing resources.\n", "des": "This package contains classes and interfaces used to access OpenCms through a wrapped CmsObject."}
{"index": 711, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: kafka\n\nClasses and Interfaces: \nClass Kafka; // Factory class for Apache Kafka components.\nClass KafkaMessageDrivenChannelAdapterSpec<K,V,S extends KafkaMessageDrivenChannelAdapterSpec<K,V,S>>; // A MessageProducerSpec implementation for the KafkaMessageDrivenChannelAdapter.\nClass KafkaMessageDrivenChannelAdapterSpec.KafkaMessageDrivenChannelAdapterListenerContainerSpec<K,V>; // A ConcurrentMessageListenerContainer configuration KafkaMessageDrivenChannelAdapterSpec extension.\nClass KafkaMessageDrivenChannelAdapterSpec.KafkaMessageListenerContainerSpec<K,V>; // A helper class in the Builder pattern style to delegate options to the ConcurrentMessageListenerContainer.\nClass KafkaProducerMessageHandlerSpec<K,V>; // A MessageHandlerSpec implementation for the KafkaProducerMessageHandler.\nClass KafkaProducerMessageHandlerSpec.KafkaProducerMessageHandlerTemplateSpec<K,V>; // A KafkaTemplate-based KafkaProducerMessageHandlerSpec extension.\n", "des": "Provides Kafka Components support for Spring Integration Java DSL."}
{"index": 3776, "repo": "lucene-analysis-common-9.7.0", "code": "Package: da\n\nClasses and Interfaces: \nClass DanishAnalyzer; // Analyzer for Danish.\n", "des": "Analyzer for Danish."}
{"index": 2964, "repo": "spring-integration-redis-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic final class RedisHeaders extends Object; // Pre-defined names and prefixes to be used for for dealing with headers required by Redis components\n", "des": "Provides supporting classes for this module."}
{"index": 2624, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: env\n\nClasses and Interfaces: \npublic class DefaultWebEnvironment extends org.apache.shiro.env.DefaultEnvironment implements MutableWebEnvironment; // Default WebEnvironment implementation based on a backing Map instance.\npublic class EnvironmentLoader extends Object; // An EnvironmentLoader is responsible for loading a web application's Shiro WebEnvironment (which includes the web app's WebSecurityManager) into the ServletContext at application startup.\npublic class EnvironmentLoaderListener extends EnvironmentLoader implements javax.servlet.ServletContextListener; // Bootstrap listener to startup and shutdown the web application's Shiro WebEnvironment at ServletContext startup and shutdown respectively.\npublic class IniWebEnvironment extends ResourceBasedWebEnvironment implements org.apache.shiro.lang.util.Initializable, org.apache.shiro.lang.util.Destroyable; // WebEnvironment implementation configured by an Ini instance or Ini resource locations.\npublic interface MutableWebEnvironment extends WebEnvironment; // A WebEnvironment that supports 'write' operations operations.\npublic abstract class ResourceBasedWebEnvironment extends DefaultWebEnvironment implements org.apache.shiro.config.ResourceConfigurable; // Abstract implementation for WebEnvironments that can be initialized via resource paths (config files).\npublic interface WebEnvironment extends org.apache.shiro.env.Environment; // A web-specific Environment instance, used in web applications.\n", "des": "Web-specific Environment implementation and support."}
{"index": 2349, "repo": "spring-boot-3.1.1", "code": "Package: error\n\nClasses and Interfaces: \npublic final class ErrorAttributeOptions extends Object; // Options controlling the contents of ErrorAttributes.\npublic static enum ErrorAttributeOptions.Include extends Enum<ErrorAttributeOptions.Include>; // Error attributes that can be included in an error response.\n", "des": "Spring Web error handling infrastructure."}
{"index": 2563, "repo": "pulsar-common-3.0.0", "code": "Package: protocol\n\nSub Packages: \npackage protocol.schema; // Classes to work with schemas.\n\nClasses and Interfaces: \npublic final class ByteBufPair extends io.netty.util.AbstractReferenceCounted; // ByteBuf holder that contains 2 buffers.\n@Sharable public static class ByteBufPair.CopyingEncoder extends io.netty.channel.ChannelOutboundHandlerAdapter;\n@Sharable public static class ByteBufPair.Encoder extends io.netty.channel.ChannelOutboundHandlerAdapter;\npublic class Commands extends Object;\npublic static enum Commands.ChecksumType extends Enum<Commands.ChecksumType>; // Definition of possible checksum types.\npublic final class CommandUtils extends Object; // Helper class to work with commands.\npublic class Markers extends Object;\npublic class OptionalProxyProtocolDecoder extends io.netty.channel.ChannelInboundHandlerAdapter; // Decoder that added whether a new connection is prefixed with the ProxyProtocol.\npublic abstract class PulsarDecoder extends io.netty.channel.ChannelInboundHandlerAdapter; // Basic implementation of the channel handler to process inbound Pulsar data.\npublic abstract class PulsarHandler extends PulsarDecoder; // Implementation of the channel handler to process inbound Pulsar data.\n", "des": "Common protocol."}
{"index": 158, "repo": "ignite-core-2.15.0", "code": "Package: dr\n\nClasses and Interfaces: \nClass IgniteDrDataStreamerCacheUpdater; // Data center replication cache receiver for data streamer.\nEnum GridDrType; // Data center replication type.\n", "des": "Data center replication processor."}
{"index": 3667, "repo": "solr-core-9.3.0", "code": "Package: legacy\n\nClasses and Interfaces: \nInterface LegacyNumericTokenStream.LegacyNumericTermAttribute; // Expert: Use this attribute to get the details of the currently generated token.\nClass BBoxStrategy;\nClass LegacyDoubleField;\nClass LegacyField;\nClass LegacyFieldType;\nClass LegacyFloatField;\nClass LegacyIntField;\nClass LegacyLongField;\nClass LegacyNumericRangeQuery<T extends Number>;\nClass LegacyNumericTokenStream;\nClass LegacyNumericTokenStream.LegacyNumericTermAttributeImpl; // Implementation of LegacyNumericTokenStream.LegacyNumericTermAttribute.\nClass LegacyNumericUtils;\nClass LegacyNumericUtils.IntRangeBuilder; // Callback for LegacyNumericUtils.splitIntRange(org.apache.solr.legacy.LegacyNumericUtils.IntRangeBuilder, int, int, int).\nClass LegacyNumericUtils.LongRangeBuilder; // Callback for LegacyNumericUtils.splitLongRange(org.apache.solr.legacy.LegacyNumericUtils.LongRangeBuilder, int, long, long).\nEnum LegacyNumericType;\n", "des": "Deprecated stuff!"}
{"index": 1241, "repo": "spring-hateoas-2.1.2", "code": "Package: core\n\nClasses and Interfaces: \npublic abstract class AbstractEntityLinks extends Object implements EntityLinks; // Implementation base class to delegate the higher level methods of EntityLinks by delegating to the more fine grained ones to reduce the implementation effort for actual implementation classes.\npublic class AnnotationAttribute extends Object; // Simply helper to reference a dedicated attribute of an Annotation.\npublic class AnnotationLinkRelationProvider extends Object implements LinkRelationProvider, Ordered; // LinkRelationProvider that evaluates the Relation annotation on entity types.\npublic class AnnotationMappingDiscoverer extends Object implements MappingDiscoverer; // MappingDiscoverer implementation that inspects mappings from a particular annotation.\npublic class CachingMappingDiscoverer extends Object implements MappingDiscoverer; // Caching adapter of MappingDiscoverer.\npublic class ControllerEntityLinks extends AbstractEntityLinks; // EntityLinks implementation which assumes a certain URI mapping structure: A class-level ExposesResourceFor annotation to declare that the annotated controller exposes collection and item resources for. An RequestMapping annotation to form the base URI of the collection resource. A controller method with a mapping annotation to actually handle at least one HTTP method. A controller method that maps a subordinate resource taking a path variable to identify an item resource.\npublic class ControllerEntityLinksFactoryBean extends AbstractFactoryBean<ControllerEntityLinks> implements ApplicationContextAware; // FactoryBean implementation to create ControllerEntityLinks instances looking up controller classes from an ApplicationContext.\npublic class DefaultLinkRelationProvider extends Object implements LinkRelationProvider, Ordered; // Default implementation of LinkRelationProvider to simply use the uncapitalized version of the given type's name as item resource LinkRelation as well as an appended List for the collection resource LinkRelation.\npublic class DelegatingEntityLinks extends Object implements EntityLinks; // EntityLinks implementation that delegates to the EntityLinks instances registered in the PluginRegistry given on instance creation.\npublic class DelegatingLinkRelationProvider extends Object implements LinkRelationProvider;\npublic class DummyInvocationUtils extends Object; // Utility methods to capture dummy method invocations.\npublic interface EmbeddedWrapper; // A wrapper to handle values to be embedded into a EntityModel.\npublic class EmbeddedWrappers extends Object; // Interface to mark objects that are aware of the rel they'd like to be exposed under.\npublic class EvoInflectorLinkRelationProvider extends DefaultLinkRelationProvider; // LinkRelationProvider implementation using the Evo Inflector implementation of an algorithmic approach to English plurals.\n", "des": "Implementations of core API interfaces."}
{"index": 2459, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: elastic\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.elastic.ElasticMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"elastic\") @EnableConfigurationProperties(ElasticProperties.class) public class ElasticMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Elastic.\n@ConfigurationProperties(prefix=\"management.elastic.metrics.export\") public class ElasticProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Elastic metrics export.\n", "des": "Support for exporting actuator metrics to Elastic."}
{"index": 27, "repo": "commons-collections4-4.4", "code": "Package: queue\n\nClasses and Interfaces: \nClass AbstractQueueDecorator<E>; // Decorates another Queue to provide additional behaviour.\nClass CircularFifoQueue<E>; // CircularFifoQueue is a first-in first-out queue with a fixed size that replaces its oldest element if full.\nClass PredicatedQueue<E>; // Decorates another Queue to validate that additions match a specified predicate.\nClass SynchronizedQueue<E>; // Decorates another Queue to synchronize its behaviour for a multi-threaded environment.\nClass TransformedQueue<E>; // Decorates another Queue to transform objects that are added.\nClass UnmodifiableQueue<E>; // Decorates another Queue to ensure it can't be altered.\n", "des": "This package contains implementations for the Queue interface."}
{"index": 2719, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic class FlatFileItemReaderBuilder<T> extends Object; // A builder implementation for the FlatFileItemReader.\npublic static class FlatFileItemReaderBuilder.DelimitedBuilder<T> extends Object; // A builder for constructing a DelimitedLineTokenizer\npublic static class FlatFileItemReaderBuilder.FixedLengthBuilder<T> extends Object; // A builder for constructing a FixedLengthTokenizer\npublic class FlatFileItemWriterBuilder<T> extends Object; // A builder implementation for the FlatFileItemWriter\npublic static class FlatFileItemWriterBuilder.DelimitedBuilder<T> extends Object; // A builder for constructing a DelimitedLineAggregator\npublic static class FlatFileItemWriterBuilder.FormattedBuilder<T> extends Object; // A builder for constructing a FormatterLineAggregator.\npublic class MultiResourceItemReaderBuilder<T> extends Object; // A builder implementation for the MultiResourceItemReader.\npublic class MultiResourceItemWriterBuilder<T> extends Object; // A builder implementation for the MultiResourceItemWriter.\n", "des": "Builders for file item readers and writers."}
{"index": 2158, "repo": "wicket-core-10.0.0-M1", "code": "Package: resolver\n\nClasses and Interfaces: \npublic final class AutoLinkResolver extends Object implements IComponentResolver; // The AutoLinkResolver is responsible to handle automatic link resolution.\npublic abstract static class AutoLinkResolver.AbstractAutolinkResolverDelegate extends Object implements AutoLinkResolver.IAutolinkResolverDelegate; // Abstract implementation that has a helper method for creating a resource reference.\npublic static final class AutoLinkResolver.AutolinkBookmarkablePageLink<T> extends BookmarkablePageLink<T> implements IComponentResolver; // Autolink components delegate component resolution to their parent components.\npublic static interface AutoLinkResolver.IAutolinkResolverDelegate; // Interface to delegate the actual resolving of auto components to.\npublic static final class AutoLinkResolver.PathInfo extends Object; // Encapsulates different aspects of a path.\npublic class ComponentResolvers extends Object; // Utility class for IComponentResolvers\npublic static interface ComponentResolvers.ResolverFilter;\npublic class HtmlHeaderResolver extends Object implements IComponentResolver; // This is a tag resolver which handles <head> and <wicket:head>tags.\npublic interface IComponentResolver extends org.apache.wicket.util.io.IClusterable; // IComponentResolvers are responsible for mapping component names to Wicket components.\npublic class WicketContainerResolver extends Object implements IComponentResolver; // This is a tag resolver which handles <wicket:container> Sometimes adding components in certain ways may lead to output of invalid markup.\npublic class WicketMessageResolver extends Object implements IComponentResolver; // This is a tag resolver which handles <wicket:message key=\"myKey\">Default Text</wicket:message>.\n", "des": "Resolvers implement the IComponentResolver interface and must be registered with the application."}
{"index": 219, "repo": "nutch-2.4", "code": "Package: tools\n\nSub Packages: \npackage tools.arc; // Tools to read the Arc file format.\npackage tools.proxy; // Proxy to benchmark the crawler.\n\nClasses and Interfaces: \nClass Benchmark;\nClass Benchmark.BenchmarkResults;\nClass DmozParser; // Utility that converts DMOZ RDF into a flat file of URLs to be injected.\nClass ResolveUrls; // A simple tool that will spin up multiple threads to resolve urls to ip addresses.\n", "des": "Miscellaneous tools."}
{"index": 3113, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nSub Packages: \npackage spi.interceptor; // interceptor implementations\n\nClasses and Interfaces: \nInterface CollectionTracker; // Interface to be implemented by collection trackers that hold the expected size od collections, a simplified Map<String, int>.\nInterface EnhancementContext; // The context for performing an enhancement.\nInterface Enhancer; // Class responsible for performing enhancement.\nInterface LazyPropertyInitializer; // Contract for controlling how lazy properties get initialized.\nInterface LazyPropertyInitializer.InterceptorImplementor;\nInterface UnloadedClass;\nInterface UnloadedField;\nClass DefaultEnhancementContext; // default implementation of EnhancementContext.\nClass EnhancementContextWrapper;\nClass EnhancerConstants; // Constants used during enhancement.\nClass EnhancementException; // An exception indicating some kind of problem performing bytecode enhancement.\n", "des": "package defining bytecode code enhancement (instrumentation) support."}
{"index": 3538, "repo": "opennlp-tools-2.2.0", "code": "Package: ngram\n\nClasses and Interfaces: \nClass NGramCharModel; // The NGramCharModel can be used to create character ngrams.\nClass NGramGenerator; // Generates an nGram, via an optional separator, and returns the grams as a list of strings\nClass NGramModel; // The NGramModel can be used to crate ngrams and character ngrams.\nClass NGramUtils; // Utility class for ngrams.\n", "des": "Package related to computing and storing n-gram frequencies."}
{"index": 3161, "repo": "tika-core-2.8.0", "code": "Package: external\n\nClasses and Interfaces: \nInterface ExternalParser.LineConsumer; // Consumer contract\nInterface ExternalParsersConfigReaderMetKeys; // Met Keys used by the ExternalParsersConfigReader.\nClass CompositeExternalParser; // A Composite Parser that wraps up all the available External Parsers, and provides an easy way to access them.\nClass ExternalParser; // Parser that uses an external program (like catdoc or pdf2txt) to extract text content and metadata from a given document.\nClass ExternalParsersConfigReader; // Builds up ExternalParser instances based on XML file(s) which define what to run, for what, and how to process any output metadata.\nClass ExternalParsersFactory; // Creates instances of ExternalParser based on XML configuration files.\n", "des": "External parser process."}
{"index": 677, "repo": "commons-lang3-3.12.0", "code": "Package: time\n\nClasses and Interfaces: \nInterface DateParser; // DateParser is the \"missing\" interface for the parsing methods of DateFormat.\nInterface DatePrinter; // DatePrinter is the \"missing\" interface for the format methods of DateFormat.\nClass CalendarUtils; // Helps use Calendars.\nClass DateFormatUtils; // Date and time formatting utilities and constants.\nClass DateUtils; // A suite of utilities surrounding the use of the Calendar and Date object.\nClass DurationFormatUtils; // Duration formatting utilities and constants.\nClass DurationUtils; // Utilities for Duration.\nClass FastDateFormat; // FastDateFormat is a fast and thread-safe version of SimpleDateFormat.\nClass FastDateParser; // FastDateParser is a fast and thread-safe version of SimpleDateFormat.\nClass FastDatePrinter; // FastDatePrinter is a fast and thread-safe version of SimpleDateFormat.\nClass FastTimeZone; // Faster methods to produce custom time zones.\nClass StopWatch; // StopWatch provides a convenient API for timings.\nClass TimeZones; // Helps to deal with TimeZones.\n", "des": "Provides classes and methods to work with dates and durations."}
{"index": 1143, "repo": "commons-math3-3.6.1", "code": "Package: analysis\n\nSub Packages: \npackage analysis.differentiation; // This package holds the main interfaces and basic building block classes dealing with differentiation.\npackage analysis.function; // The function package contains function objects that wrap the methods contained in Math, as well as common mathematical functions such as the gaussian and sinc functions.\npackage analysis.integration; // Numerical integration (quadrature) algorithms for univariate real functions.\npackage analysis.interpolation; // Univariate real functions interpolation algorithms.\npackage analysis.polynomials; // Univariate real polynomials implementations, seen as differentiable univariate real functions.\npackage analysis.solvers; // Root finding algorithms, for univariate real functions.\n\nClasses and Interfaces: \nInterface BivariateFunction; // An interface representing a bivariate real function.\nInterface DifferentiableMultivariateFunction; // as of 3.1 replaced by MultivariateDifferentiableFunction\nInterface DifferentiableMultivariateVectorFunction; // as of 3.1 replaced by MultivariateDifferentiableVectorFunction\nInterface DifferentiableUnivariateFunction; // as of 3.1 replaced by UnivariateDifferentiableFunction\nInterface DifferentiableUnivariateMatrixFunction; // as of 3.1 replaced by UnivariateDifferentiableMatrixFunction\nInterface DifferentiableUnivariateVectorFunction; // as of 3.1 replaced by UnivariateDifferentiableVectorFunction\nInterface MultivariateFunction; // An interface representing a multivariate real function.\nInterface MultivariateMatrixFunction; // An interface representing a multivariate matrix function.\nInterface MultivariateVectorFunction; // An interface representing a multivariate vectorial function.\nInterface ParametricUnivariateFunction; // An interface representing a real function that depends on one independent variable plus some extra parameters.\nInterface RealFieldUnivariateFunction<T extends RealFieldElement<T>>; // An interface representing a univariate real function.\nInterface TrivariateFunction; // An interface representing a trivariate real function.\nInterface UnivariateFunction; // An interface representing a univariate real function.\nInterface UnivariateMatrixFunction; // An interface representing a univariate matrix function.\nInterface UnivariateVectorFunction; // An interface representing a univariate vectorial function.\nClass FunctionUtils; // Utilities for manipulating function objects.\n", "des": "Parent package for common numerical analysis procedures, including root finding, function interpolation and integration."}
{"index": 3411, "repo": "commons-imaging-1.0-alpha3", "code": "Package: taginfos\n\nClasses and Interfaces: \nClass TagInfo;\nClass TagInfoAny;\nClass TagInfoAscii;\nClass TagInfoAsciiOrByte;\nClass TagInfoAsciiOrRational;\nClass TagInfoByte;\nClass TagInfoByteOrShort;\nClass TagInfoBytes;\nClass TagInfoDirectory; // A LONG representing an offset to a TIFF directory.\nClass TagInfoDouble;\nClass TagInfoDoubles;\nClass TagInfoFloat;\nClass TagInfoFloats;\nClass TagInfoGpsText; // Used by some GPS tags and the EXIF user comment tag, this badly documented value is meant to contain the text encoding in the first 8 bytes followed by the non-null-terminated text in an unknown byte order.\nClass TagInfoLong;\nClass TagInfoLongOrIFD;\nClass TagInfoLongs;\nClass TagInfoRational;\nClass TagInfoRationals;\nClass TagInfoSByte;\nClass TagInfoSBytes;\nClass TagInfoShort;\nClass TagInfoShortOrLong;\nClass TagInfoShortOrLongOrRational;\nClass TagInfoShortOrRational;\nClass TagInfoShorts;\nClass TagInfoSLong;\nClass TagInfoSLongs;\nClass TagInfoSRational;\nClass TagInfoSRationals;\nClass TagInfoSShort;\nClass TagInfoSShorts;\nClass TagInfoUndefined;\nClass TagInfoUndefineds;\nClass TagInfoUnknown; // A TIFF tag whose definition isn't known.\nClass TagInfoUnknowns;\nClass TagInfoXpString; // Windows XP onwards store some tags using UTF-16LE, but the field type is byte - here we deal with this.\n", "des": "Classes for the TIFF tags."}
{"index": 3881, "repo": "solr-ltr-9.3.0", "code": "Package: rest\n\nClasses and Interfaces: \nClass ManagedFeatureStore; // Managed resource for a storing a feature.\nClass ManagedModelStore; // Menaged resource for storing a model\n", "des": "Contains the ManagedResource that encapsulate the feature and the model stores."}
{"index": 1131, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: csi\n\nClasses and Interfaces: \nClass ContainerVolumePublisher; // Publish/un-publish CSI volumes on node manager.\n", "des": "CSI volumes."}
{"index": 395, "repo": "amqp-client-5.18.0", "code": "Package: recovery\n\nClasses and Interfaces: \nInterface BackoffPolicy; // Backoff policy for topology recovery retry attempts.\nInterface ConsumerRecoveryListener; // Not part of the public API.\nInterface DefaultRetryHandler.RetryOperation<T>;\nInterface QueueRecoveryListener; // Not part of the public API.\nInterface RecoveredQueueNameSupplier; // Functional callback interface that can be used to rename a queue during topology recovery.\nInterface RecoveryCanBeginListener; // Used internally to indicate when connection recovery can begin.\nInterface RetryHandler; // Contract to retry failed operations during topology recovery.\nInterface TopologyRecoveryFilter; // Filter to know whether entities should be recovered or not.\nClass AutorecoveringChannel; // Channel implementation that is automatically recovered during connection recovery.\nClass AutorecoveringConnection; // Connection implementation that performs automatic recovery when connection shutdown is not initiated by the application (e.g.\nClass DefaultRetryHandler; // Composable topology recovery retry handler.\nClass RecordedBinding;\nClass RecordedConsumer;\nClass RecordedEntity;\nClass RecordedExchange;\nClass RecordedExchangeBinding;\nClass RecordedNamedEntity;\nClass RecordedQueue;\nClass RecordedQueueBinding;\nClass RecoveryAwareAMQConnection; // AMQConnection modification that uses RecoveryAwareChannelN\nClass RecoveryAwareAMQConnectionFactory;\nClass RecoveryAwareChannelManager;\nClass RecoveryAwareChannelN; // ChannelN modification that keeps track of delivery tags and avoids sending\nClass RetryContext; // The context of a topology recovery retry operation.\nClass RetryResult; // The retry of a retried topology recovery operation.\nClass TopologyRecoveryRetryHandlerBuilder; // Builder to ease creation of DefaultRetryHandler instances.\nClass TopologyRecoveryRetryLogic; // Useful ready-to-use conditions and operations for DefaultRetryHandler.\n", "des": "Implementation of connection and topology recovery."}
{"index": 3563, "repo": "guava-32.1.1-jre", "code": "Package: concurrent\n\nClasses and Interfaces: \nInterface AsyncCallable<V extends @Nullable java.lang.Object>; // Computes a value, possibly asynchronously.\nInterface AsyncFunction<I extends @Nullable java.lang.Object,​O extends @Nullable java.lang.Object>; // Transforms a value, possibly asynchronously.\nInterface ClosingFuture.AsyncClosingCallable<V extends @Nullable java.lang.Object>; // An operation that computes a ClosingFuture of a result.\nInterface ClosingFuture.AsyncClosingFunction<T extends @Nullable java.lang.Object,​U extends @Nullable java.lang.Object>; // A function from an input to a ClosingFuture of a result.\nInterface ClosingFuture.ClosingCallable<V extends @Nullable java.lang.Object>; // An operation that computes a result.\nInterface ClosingFuture.ClosingFunction<T extends @Nullable java.lang.Object,​U extends @Nullable java.lang.Object>; // A function from an input to a result.\nInterface ClosingFuture.Combiner.AsyncCombiningCallable<V extends @Nullable java.lang.Object>; // An operation that returns a ClosingFuture result and may throw an exception.\nInterface ClosingFuture.Combiner.CombiningCallable<V extends @Nullable java.lang.Object>; // An operation that returns a result and may throw an exception.\nInterface ClosingFuture.Combiner2.AsyncClosingFunction2<V1 extends @Nullable java.lang.Object,​V2 extends @Nullable java.lang.Object,​U extends @Nullable java.lang.Object>; // A function that returns a ClosingFuture when applied to the values of the two futures passed to ClosingFuture.whenAllSucceed(ClosingFuture, ClosingFuture).\nInterface ClosingFuture.Combiner2.ClosingFunction2<V1 extends @Nullable java.lang.Object,​V2 extends @Nullable java.lang.Object,​U extends @Nullable java.lang.Object>; // A function that returns a value when applied to the values of the two futures passed to ClosingFuture.whenAllSucceed(ClosingFuture, ClosingFuture).\n", "des": "Concurrency utilities."}
{"index": 1734, "repo": "spring-jdbc-6.0.11", "code": "Package: support\n\nSub Packages: \npackage support.incrementer; // Provides a support framework for incrementing database table values via sequences, with implementations for various databases.\npackage support.lob; // Provides a strategy interface for Large OBject handling, as well as a customizable default implementation.\npackage support.rowset; // Provides a convenient holder for disconnected result sets.\npackage support.xml; // Abstraction for handling fields of SQLXML data type.\n\nClasses and Interfaces: \npublic abstract class AbstractFallbackSQLExceptionTranslator extends Object implements SQLExceptionTranslator; // Base class for SQLExceptionTranslator implementations that allow for fallback to some other SQLExceptionTranslator.\npublic class CustomSQLErrorCodesTranslation extends Object; // JavaBean for holding custom JDBC error codes translation for a particular database.\npublic class CustomSQLExceptionTranslatorRegistrar extends Object implements org.springframework.beans.factory.InitializingBean; // Registry for custom SQLExceptionTranslator instances for specific databases.\npublic final class CustomSQLExceptionTranslatorRegistry extends Object; // Registry for custom SQLExceptionTranslator instances associated with specific databases allowing for overriding translation based on values contained in the configuration file named \"sql-error-codes.xml\".\n@FunctionalInterface public interface DatabaseMetaDataCallback<T>; // A callback interface used by the JdbcUtils class.\npublic class DatabaseStartupValidator extends Object implements org.springframework.beans.factory.InitializingBean; // Bean that checks if a database has already started up.\npublic class GeneratedKeyHolder extends Object implements KeyHolder; // The standard implementation of the KeyHolder interface, to be used for holding auto-generated keys (as potentially returned by JDBC insert statements).\npublic abstract class JdbcAccessor extends Object implements org.springframework.beans.factory.InitializingBean; // Base class for JdbcTemplate and other JDBC-accessing DAO helpers, defining common properties such as DataSource and exception translator.\npublic class JdbcTransactionManager extends DataSourceTransactionManager; // JdbcAccessor-aligned subclass of the plain DataSourceTransactionManager, adding common JDBC exception translation for the commit and rollback step.\npublic abstract class JdbcUtils extends Object; // Generic utility methods for working with JDBC.\npublic interface KeyHolder; // Interface for retrieving keys, typically used for auto-generated keys as potentially returned by JDBC insert statements.\npublic class MetaDataAccessException extends org.springframework.core.NestedCheckedException; // Exception indicating that something went wrong during JDBC meta-data lookup.\n", "des": "Support classes for the JDBC framework, used by the classes in the jdbc.core and jdbc.object packages."}
{"index": 3453, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface NativeQueryInterpreter; // Service contract for dealing with native queries.\nInterface ParameterParser.Recognizer; // Maybe better named a Journaler.\nInterface QueryPlanCache.QueryPlanCreator;\nClass AbstractParameterDescriptor; // NOTE: Consider this contract (and its sub-contracts) as incubating as we transition to 6.0 and SQM\nClass EntityGraphQueryHint; // Encapsulates a JPA EntityGraph provided through a JPQL query hint.\nClass FilterQueryPlan; // Extends an HQLQueryPlan to maintain a reference to the collection-role name being filtered.\nClass HQLQueryPlan; // Defines a query execution plan for an HQL query (or filter).\nClass NamedParameterDescriptor; // Descriptor regarding a named parameter.\nClass NativeQueryInterpreterInitiator;\nClass NativeSQLQueryPlan; // Defines a query execution plan for a native-SQL query.\nClass OrdinalParameterDescriptor; // Descriptor regarding an ordinal parameter.\nClass ParameterParser; // The single available method ParameterParser.parse(java.lang.String, org.hibernate.engine.query.spi.ParameterParser.Recognizer) is responsible for parsing a query string and recognizing tokens in relation to parameters (either named, JPA-style, or ordinal) and providing callbacks about such recognitions.\nClass ParamLocationRecognizer; // Implements a parameter parser recognizer specifically for the purpose of journaling parameter locations.\nClass ParamLocationRecognizer.InFlightJpaOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightNamedParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass QueryPlanCache; // Acts as a cache for compiled query plans, as well as query-parameter metadata.\nClass ReturnMetadata; // Metadata about the query return(s).\n", "des": "Defines support for query plans and stored metadata about queries"}
{"index": 817, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: tokenattributes\n\nClasses and Interfaces: \nClass CollatedTermAttributeImpl; // Extension of CharTermAttributeImpl that encodes the term text as a binary Unicode collation key instead of as UTF-8 bytes.\n", "des": "Custom AttributeImpl for indexing collation keys as index terms."}
{"index": 358, "repo": "hive-exec-4.0.0-alpha-2", "code": "Package: lockmgr\n\nClasses and Interfaces: \nInterface HiveLockManager; // Manager for locks in Hive.\nInterface HiveTxnManager; // An interface that allows Hive to manage transactions.\nClass DbLockManager; // An implementation of HiveLockManager for use with DbTxnManager.\nClass DbTxnManager; // An implementation of HiveTxnManager that stores the transactions in the metastore database.\nClass DbTxnManager.Heartbeater; // Heartbeater thread\nClass DbTxnManager.HeartbeaterThread;\nClass EmbeddedLockManager; // shared lock manager for dedicated hive server.\nClass HiveLock;\nClass HiveLockManagerCtx;\nClass HiveLockObj;\nClass HiveLockObject;\nClass HiveLockObject.HiveLockObjectData;\nClass TxnManagerFactory; // A factory to get an instance of HiveTxnManager.\nEnum HiveLockMode;\nClass LockException; // Exception from lock manager.\n", "des": "Hive Lock Manager interfaces and some custom implmentations"}
{"index": 173, "repo": "ignite-core-2.15.0", "code": "Package: protocols\n\nSub Packages: \npackage protocols.tcp; // Adapters for TCP-based REST protocols.\n\nClasses and Interfaces: \nClass GridRestProtocolAdapter; // Abstract protocol adapter.\n", "des": "REST protocol handlers."}
{"index": 1712, "repo": "spring-boot-test-3.1.1", "code": "Package: mockito\n\nClasses and Interfaces: \n@Target({TYPE,FIELD}) @Retention(RUNTIME) @Documented @Repeatable(MockBeans.class) public @interface MockBean; // Annotation that can be used to add mocks to a Spring ApplicationContext.\n@Retention(RUNTIME) @Target(TYPE) @Documented public @interface MockBeans; // Container annotation that aggregates several @MockBean annotations.\npublic class MockitoPostProcessor extends Object implements org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.core.Ordered; // A BeanFactoryPostProcessor used to register and inject @MockBeans with the ApplicationContext.\npublic class MockitoTestExecutionListener extends org.springframework.test.context.support.AbstractTestExecutionListener; // TestExecutionListener to enable @MockBean and @SpyBean support.\npublic enum MockReset extends Enum<MockReset>; // Reset strategy used on a mock bean.\npublic class ResetMocksTestExecutionListener extends org.springframework.test.context.support.AbstractTestExecutionListener; // TestExecutionListener to reset any mock beans that have been marked with a MockReset.\npublic class SpringBootMockResolver extends Object implements org.mockito.plugins.MockResolver; // A MockResolver for testing Spring Boot applications with Mockito.\n@Target({TYPE,FIELD}) @Retention(RUNTIME) @Documented @Repeatable(SpyBeans.class) public @interface SpyBean; // Annotation that can be used to apply Mockito spies to a Spring ApplicationContext.\n@Retention(RUNTIME) @Target(TYPE) @Documented public @interface SpyBeans; // Container annotation that aggregates several @SpyBean annotations.\n", "des": "Mockito integration for Spring Boot tests."}
{"index": 1882, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: jndi\n\nClasses and Interfaces: \npublic interface JndiCallback; // Callback interface to be implemented by classes that need to perform an operation (such as a lookup) in a JNDI context.\npublic class JndiLocator extends Object; // Convenient superclass for JNDI accessors, providing \"jndiTemplate\" and \"jndiEnvironment\" bean properties.\npublic class JndiObjectFactory<T> extends JndiLocator implements org.apache.shiro.lang.util.Factory<T>; // A factory implementation intended to be used to look up objects in jndi.\npublic class JndiTemplate extends Object; // Helper class that simplifies JNDI operations.\n", "des": "Enables accessing objects located in JNDI that might be useful when configuring a Shiro-enabled application."}
{"index": 3304, "repo": "opencms-core-15.0", "code": "Package: repository\n\nClasses and Interfaces: \nInterface I_CmsRepository; // Represents a repository.\nInterface I_CmsRepositoryItem; // This class represents items in the repository interface.\nInterface I_CmsRepositorySession; // A repository session which provides basic file and folder operations to the resources in the VFS of OpenCms.\nClass A_CmsRepository; // Abstract implementation of the repository interface I_CmsRepository.\nClass A_CmsRepositorySession; // Abstract implementation of the interface I_CmsRepositorySession to provide the functionality of filtering items.\nClass CmsPropertyName;\nClass CmsRepository; // Creates a repository session to access OpenCms.\nClass CmsRepositoryFilter; // This class is a filter for the repositories.\nClass CmsRepositoryItem; // Represents a single entry in the repository.\nClass CmsRepositoryLockInfo; // The class represents a lock to a I_CmsRepositoryItem.\nClass CmsRepositoryManager; // The RepositoryManager keeps a list with all configured I_CmsRepository and can be used to get a repository by its name.\nClass CmsRepositorySession; // This is the session class to work with the CmsRepository.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Package contains all classes and interfaces needed to create or use a repository to access the resources in the VFS."}
{"index": 919, "repo": "commons-compress-1.23.0", "code": "Package: deflate64\n\nClasses and Interfaces: \nClass Deflate64CompressorInputStream; // Deflate64 decompressor.\n", "des": "Provides a stream that allows decompressing streams using the DEFLATE64(tm) algorithm."}
{"index": 3788, "repo": "lucene-analysis-common-9.7.0", "code": "Package: gl\n\nClasses and Interfaces: \nClass GalicianAnalyzer; // Analyzer for Galician.\nClass GalicianMinimalStemFilter; // A TokenFilter that applies GalicianMinimalStemmer to stem Galician words.\nClass GalicianMinimalStemFilterFactory; // Factory for GalicianMinimalStemFilter.\nClass GalicianMinimalStemmer; // Minimal Stemmer for Galician\nClass GalicianStemFilter; // A TokenFilter that applies GalicianStemmer to stem Galician words.\nClass GalicianStemFilterFactory; // Factory for GalicianStemFilter.\nClass GalicianStemmer; // Galician stemmer implementing \"Regras do lematizador para o galego\".\n", "des": "Analyzer for Galician."}
{"index": 2870, "repo": "spring-integration-core-6.1.2", "code": "Package: mapping\n\nSub Packages: \npackage mapping.support; // Support classes for mapping.\n\nClasses and Interfaces: \npublic abstract class AbstractHeaderMapper<T> extends Object implements RequestReplyHeaderMapper<T>, org.springframework.beans.factory.BeanClassLoaderAware; // Abstract base class for RequestReplyHeaderMapper implementations.\nprotected static class AbstractHeaderMapper.CompositeHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A composite AbstractHeaderMapper.HeaderMatcher that matches if one of provided AbstractHeaderMapper.HeaderMatchers matches to the headerName.\nprotected static class AbstractHeaderMapper.ContentBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A content-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header is contained within a list of candidates.\n@FunctionalInterface public static interface AbstractHeaderMapper.HeaderMatcher; // Strategy interface to determine if a given header name matches.\nprotected static class AbstractHeaderMapper.PatternBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches one of the specified simple patterns.\nprotected static class AbstractHeaderMapper.PrefixBasedMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A prefix-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header starts with a configurable prefix.\nprotected static class AbstractHeaderMapper.SinglePatternBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches the specified simple pattern.\npublic interface BytesMessageMapper extends InboundMessageMapper<byte[]>, OutboundMessageMapper<byte[]>; // An OutboundMessageMapper and InboundMessageMapper that maps to/from byte[].\npublic class ConvertingBytesMessageMapper extends Object implements BytesMessageMapper; // The BytesMessageMapper implementation to delegate to/from Message conversion into the provided MessageConverter.\npublic interface HeaderMapper<T>; // Generic strategy interface for mapping MessageHeaders to and from other types of objects.\n@FunctionalInterface public interface InboundMessageMapper<T>; // Strategy interface for mapping from an Object to aMessage.\npublic class MessageMappingException extends org.springframework.messaging.MessagingException; // Exception that indicates an error during message mapping.\n", "des": "Provides classes related to mapping to/from message headers."}
{"index": 846, "repo": "calcite-core-1.34.0", "code": "Package: janino\n\nClasses and Interfaces: \nInterface RelMetadataHandlerGeneratorUtil.HandlerNameAndGeneratedCode; // Contains Name and code that been generated for MetadataHandler.\nClass CacheUtil; // Functions used by generated code.\nClass DescriptiveCacheKey; // A key used in caching with descriptive to string.\nClass RelMetadataHandlerGeneratorUtil; // Generates the MetadataHandler code.\n", "des": "Code for generating metadata handlers."}
{"index": 3884, "repo": "solr-solrj-9.3.0", "code": "Package: cloud\n\nClasses and Interfaces: \nClass DelegatingClusterStateProvider; // Base class for overriding some behavior of ClusterStateProvider\nClass ShardTerms; // Hold values of terms, this class is immutable.\nClass SocketProxy; // Kindly borrowed the idea and base implementation from the ActiveMQ project; useful for blocking traffic on a specified port.\n", "des": "Common classes for SolrCloud."}
{"index": 2485, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: neo4j\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration.class) @ConditionalOnClass(org.neo4j.driver.Driver.class) @ConditionalOnBean(org.neo4j.driver.Driver.class) @ConditionalOnEnabledHealthIndicator(\"neo4j\") @Import({org.springframework.boot.actuate.autoconfigure.neo4j.Neo4jHealthContributorConfigurations.Neo4jReactiveConfiguration.class,org.springframework.boot.actuate.autoconfigure.neo4j.Neo4jHealthContributorConfigurations.Neo4jConfiguration.class}) public class Neo4jHealthContributorAutoConfiguration extends Object; // Auto-configuration for Neo4jReactiveHealthIndicator and Neo4jHealthIndicator.\n", "des": "Auto-configuration for actuator Neo4J concerns."}
{"index": 3609, "repo": "lucene-suggest-9.7.0", "code": "Package: spell\n\nClasses and Interfaces: \nInterface Dictionary; // A simple interface representing a Dictionary.\nInterface StringDistance; // Interface for string distances.\nClass CombineSuggestion; // A suggestion generated by combining one or more original query terms\nClass DirectSpellChecker; // Simple automaton-based spellchecker.\nClass DirectSpellChecker.ScoreTerm; // Holds a spelling correction for internal usage inside DirectSpellChecker.\nClass HighFrequencyDictionary; // HighFrequencyDictionary: terms taken from the given field of a Lucene index, which appear in a number of documents above a given threshold.\nClass JaroWinklerDistance; // Similarity measure for short strings such as person names.\nClass LevenshteinDistance; // Levenshtein edit distance class.\nClass LuceneDictionary; // Lucene Dictionary: terms taken from the given field of a Lucene index.\nClass LuceneLevenshteinDistance; // Damerau-Levenshtein (optimal string alignment) implemented in a consistent way as Lucene's FuzzyTermsEnum with the transpositions option enabled.\nClass NGramDistance; // N-Gram version of edit distance based on paper by Grzegorz Kondrak, \"N-gram similarity and distance\".\nClass PlainTextDictionary; // Dictionary represented by a text file.\nClass SpellChecker; // Spell Checker class (Main class). (initially inspired by the David Spencer code).\nClass SuggestWord; // SuggestWord, used in suggestSimilar method in SpellChecker class.\nClass SuggestWordFrequencyComparator; // Frequency first, then score.\nClass SuggestWordQueue; // Sorts SuggestWord instances\nClass SuggestWordScoreComparator; // Score first, then frequency\nClass WordBreakSpellChecker; // A spell checker whose sole function is to offer suggestions by combining multiple terms into one word and/or breaking terms into multiple words.\nEnum SuggestMode; // Set of strategies for suggesting related terms\nEnum WordBreakSpellChecker.BreakSuggestionSortMethod; // Determines the order to list word break suggestions\n", "des": "Suggest alternate spellings for words."}
{"index": 3854, "repo": "lucene-core-9.7.0", "code": "Package: bkd\n\nClasses and Interfaces: \nInterface PointReader; // One pass iterator through all points previously written with a PointWriter, abstracting away whether points are read from (offline) disk or simple arrays in heap.\nInterface PointValue; // Represents a dimensional point value written in the BKD tree.\nInterface PointWriter; // Appends many points, and then at the end provides a PointReader to iterate those points.\nClass BKDConfig; // Basic parameters for indexing points on the BKD tree.\nClass BKDRadixSelector; // Offline Radix selector for BKD tree.\nClass BKDRadixSelector.PathSlice; // Sliced reference to points in an PointWriter.\nClass BKDReader; // Handles reading a block KD-tree in byte[] space previously written with BKDWriter.\nClass BKDWriter; // Recursively builds a block KD-tree to assign all incoming points in N-dim space to smaller and smaller N-dim rectangles (cells) until the number of points in a given rectangle is <= config.maxPointsInLeafNode.\nClass HeapPointReader; // Utility class to read buffered points from in-heap arrays.\nClass HeapPointWriter; // Utility class to write new points into in-heap arrays.\nClass MutablePointTreeReaderUtils; // Utility APIs for sorting and partitioning buffered points.\nClass OfflinePointReader; // Reads points from disk in a fixed-with format, previously written with OfflinePointWriter.\nClass OfflinePointWriter; // Writes points to disk in a fixed-with format.\n", "des": "Block KD-tree, implementing the generic spatial data structure described in this paper."}
{"index": 2074, "repo": "spring-webmvc-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic abstract class AbstractMappingJacksonResponseBodyAdvice extends Object implements ResponseBodyAdvice<Object>; // A convenient base class for ResponseBodyAdvice implementations that customize the response before JSON serialization with AbstractJackson2HttpMessageConverter's concrete subclasses.\npublic abstract class AbstractMessageConverterMethodArgumentResolver extends Object implements org.springframework.web.method.support.HandlerMethodArgumentResolver; // A base class for resolving method argument values by reading from the body of a request with HttpMessageConverters.\npublic abstract class AbstractMessageConverterMethodProcessor extends AbstractMessageConverterMethodArgumentResolver implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Extends AbstractMessageConverterMethodArgumentResolver with the ability to handle method return values by writing to the response with HttpMessageConverters.\npublic class AsyncTaskMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handles return values of type WebAsyncTask.\npublic class CallableMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handles return values of type Callable.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements org.springframework.web.method.support.HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class DeferredResultMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handler for return values of type DeferredResult, ListenableFuture, and CompletionStage.\npublic class ExceptionHandlerExceptionResolver extends AbstractHandlerMethodExceptionResolver implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // An AbstractHandlerMethodExceptionResolver that resolves exceptions through @ExceptionHandler methods.\npublic class ExtendedServletRequestDataBinder extends org.springframework.web.bind.ServletRequestDataBinder; // Subclass of ServletRequestDataBinder that adds URI template variables to the values used for data binding.\npublic class HttpEntityMethodProcessor extends AbstractMessageConverterMethodProcessor; // Resolves HttpEntity and RequestEntity method argument values, as well as return values of type HttpEntity, ResponseEntity, ErrorResponse and ProblemDetail.\npublic class HttpHeadersReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handles HttpHeaders return values.\n", "des": "MVC infrastructure for annotation-based handler method processing, building on the org.springframework.web.method.annotation package."}
{"index": 3506, "repo": "poi-5.2.3", "code": "Package: ptg\n\nClasses and Interfaces: \nInterface AreaI; // Common interface for AreaPtg and Area3DPtg, and their child classes.\nInterface Pxg; // An XSSF only special kind of Ptg, which stores the sheet / book reference in string form.\nInterface Pxg3D; // An XSSF only special kind of Ptg, which stores a range of sheet / book references in string form.\nClass AbstractFunctionPtg; // This class provides the base functionality for Excel sheet functions There are two kinds of function Ptgs - tFunc and tFuncVar Therefore, this class will have ONLY two subclasses\nClass AddPtg; // Addition operator PTG the \"+\" binomial operator.\nClass Area2DPtgBase; // Common superclass of 2-D area refs\nClass Area3DPtg; // Area 3D Ptg - 3D reference (Sheet + Area)\nClass Area3DPxg; // XSSF Area 3D Reference (Sheet + Area)\nClass AreaErrPtg; // AreaErr - handles deleted cell area references.\nClass AreaI.OffsetArea;\nClass AreaNPtg; // Specifies a rectangular area of cells A1:A4 for instance.\nClass AreaPtg; // Specifies a rectangular area of cells A1:A4 for instance.\nClass AreaPtgBase; // Specifies a rectangular area of cells A1:A4 for instance.\nClass ArrayPtg; // ArrayPtg - handles arrays The ArrayPtg is a little weird, the size of the Ptg when parsing initially only includes the Ptg sid and the reserved bytes.\nClass AttrPtg; // \"Special Attributes\"\nClass AttrPtg.SpaceType;\nClass BoolPtg; // Boolean (boolean) Stores a (java) boolean value in a formula.\nClass ConcatPtg;\nClass ControlPtg;\nClass Deleted3DPxg; // An XSSF only representation of a reference to a deleted area\nClass DeletedArea3DPtg; // Deleted Area 3D Ptg - 3D referecnce (Sheet + Area)\nClass DeletedRef3DPtg; // Deleted Reference 3D Ptg\nClass DividePtg; // This PTG implements the standard binomial divide \"/\"\n", "des": "The formula package contains binary PTG structures used in Formulas"}
{"index": 2969, "repo": "pulsar-broker-3.0.0", "code": "Package: tools\n\nClasses and Interfaces: \npublic class BrokerTool extends Object; // broker-tool is used for operations on a specific broker.\npublic class GenerateDocsCommand extends org.apache.bookkeeper.tools.framework.CliCommand<org.apache.bookkeeper.tools.framework.CliFlags,GenerateDocsCommand.GenDocFlags>; // The command to generate documents of broker-tool.\nprotected static class GenerateDocsCommand.GenDocFlags extends org.apache.bookkeeper.tools.framework.CliFlags; // The CLI flags of gen docs command.\npublic class LoadReportCommand extends org.apache.bookkeeper.tools.framework.CliCommand<org.apache.bookkeeper.tools.framework.CliFlags,LoadReportCommand.Flags>; // The command to collect the load report of a specific broker.\npublic static class LoadReportCommand.Flags extends org.apache.bookkeeper.tools.framework.CliFlags; // The CLI flags of load report command.\n", "des": "Tools for broker related operations."}
{"index": 2669, "repo": "spring-data-jdbc-3.1.2", "code": "Package: convert\n\nClasses and Interfaces: \npublic class BasicJdbcConverter extends BasicRelationalConverter implements JdbcConverter, ApplicationContextAware; // RelationalConverter that uses a MappingContext to apply basic conversion of relational values to property values.\npublic class BatchJdbcOperations extends Object; // Counterpart to NamedParameterJdbcOperations containing methods for performing batch updates with generated keys.\npublic class CascadingDataAccessStrategy extends Object implements DataAccessStrategy; // Delegates each method to the DataAccessStrategys passed to the constructor in turn until the first that does not throw an exception.\npublic interface DataAccessStrategy extends RelationResolver; // Abstraction for accesses to the database that should be implementable with a single SQL statement per method and relates to a single entity as opposed to JdbcAggregateOperations which provides interactions related to complete aggregates.\npublic class DefaultDataAccessStrategy extends Object implements DataAccessStrategy; // The default DataAccessStrategy is to generate SQL statements based on metadata from the entity.\npublic class DefaultJdbcTypeFactory extends Object implements JdbcTypeFactory; // A JdbcTypeFactory that performs the conversion by utilizing JdbcOperations.execute(ConnectionCallback).\npublic class DelegatingDataAccessStrategy extends Object implements DataAccessStrategy; // Delegates all method calls to an instance set after construction.\npublic class EntityRowMapper<T> extends Object implements RowMapper<T>; // Maps a ResultSet to an entity of type T, including entities referenced.\npublic final class Identifier extends Object; // Identifier represents a composite id of an entity that may be composed of one or many parts.\n@FunctionalInterface public static interface Identifier.IdentifierConsumer; // Represents an operation that accepts identifier key parts (name, value and target type) defining a contract to consume Identifier values.\npublic class InsertStrategyFactory extends Object; // Factory which selects and builds the appropriate InsertStrategy or BatchInsertStrategy based on whether the insert is expected to generate ids.\npublic final class InsertSubject<T> extends Object; // The subject of an insert, described by the entity instance and its Identifier, where identifier contains information about data that needs to be considered for the insert but which is not part of the entity.\npublic interface JdbcArrayColumns extends ArrayColumns; // ArrayColumns that offer JDBC-specific functionality.\n", "des": "JDBC-specific conversion classes."}
{"index": 987, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: soap11\n\nClasses and Interfaces: \nInterface Soap11Body; // Subinterface of SoapBody that exposes SOAP 1.1 functionality.\nInterface Soap11Fault; // Subinterface of SoapFault that exposes SOAP 1.1 functionality.\nInterface Soap11Header; // Subinterface of SoapHeader that exposes SOAP 1.1 functionality.\n", "des": "Contains interfaces specific to SOAP 1.1."}
{"index": 1613, "repo": "spring-data-neo4j-7.1.2", "code": "Package: support\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target(FIELD) @Inherited @ConvertWith(converter=org.springframework.data.neo4j.core.support.DateLongConverter.class) @API(status=STABLE, since=\"6.0\") public @interface DateLong; // Indicates SDN to store dates as long in the database.\n@Retention(RUNTIME) @Target(FIELD) @Inherited @ConvertWith(converterFactory=org.springframework.data.neo4j.core.support.DateStringConverterFactory.class) @API(status=STABLE, since=\"6.0\") public @interface DateString; // Indicates SDN 6 to store dates as String in the database.\n@API(status=STABLE, since=\"6.0\") public final class RetryExceptionPredicate extends Object implements Predicate<Throwable>; // A predicate indicating true for throwables that can be safely retried and false in any other case.\npublic enum UserAgent extends Enum<UserAgent>; // Representation of a user agent containing sensible information to identify queries generated by or executed via Spring Data Neo4j.\n@API(status=STABLE, since=\"6.0\") public final class UUIDStringGenerator extends Object implements IdGenerator<String>; // A generator providing UUIDs.\n", "des": "This package provides a couple of support classes that might be helpful in your domain, for example a predicate indicating that some transaction may be retried and additional converters and id generators."}
{"index": 1250, "repo": "spring-integration-smb-6.1.2", "code": "Package: session\n\nClasses and Interfaces: \npublic class SmbConfig extends Object; // Data holder class for a SMB share configuration.\npublic class SmbFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<jcifs.smb.SmbFile>; // An AbstractFileInfo implementation for SMB protocol.\npublic class SmbRemoteFileTemplate extends org.springframework.integration.file.remote.RemoteFileTemplate<jcifs.smb.SmbFile>; // The SMB-specific RemoteFileTemplate implementation.\npublic class SmbSession extends Object implements org.springframework.integration.file.remote.session.Session<jcifs.smb.SmbFile>; // Implementation of the Session interface for Server Message Block (SMB) also known as Common Internet File System (CIFS).\npublic class SmbSessionFactory extends SmbConfig implements org.springframework.integration.file.remote.session.SessionFactory<jcifs.smb.SmbFile>; // The SMB session factory.\npublic class SmbShare extends jcifs.smb.SmbFile; // The SmbFile extension to represent an SMB share directory.\n", "des": "SMB Remote Session abstraction support classes."}
{"index": 909, "repo": "commons-compress-1.23.0", "code": "Package: examples\n\nClasses and Interfaces: \nInterface CloseableConsumer; // Callback that is informed about a closable resource that has been wrapped around a passed in stream or channel by Expander or Archiver when Expander or Archiver no longer need them.\nClass Archiver; // Provides a high level API for creating archives.\nClass Expander; // Provides a high level API for expanding archives.\n", "des": "Contains example code that is not guaranteed to provide a stable API across releases of Commons Compress."}
{"index": 2141, "repo": "wicket-core-10.0.0-M1", "code": "Package: feedback\n\nClasses and Interfaces: \npublic class ComponentFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for accepting feedback messages for a particular component.\npublic class ContainerFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for child-of relationship\npublic class DefaultCleanupFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // The default message filter used to cleanup feedback messages.\npublic class ErrorLevelFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for accepting feedback messages with minimum level.\npublic class ExactLevelFeedbackMessageFilter extends Object implements IFeedbackMessageFilter; // Filter for accepting feedback messages of a certain error level.\npublic class FeedbackCollector extends Object; // Collects feedback messages from all the places where they can be stored.\npublic class FeedbackDelay extends Object implements Serializable, AutoCloseable; // Postpone calling IFeedback.beforeRender() after other components.\npublic class FeedbackMessage extends Object implements IDetachable; // Represents a generic message meant for the end-user/ pages.\npublic final class FeedbackMessages extends Object implements org.apache.wicket.util.io.IClusterable, Iterable<FeedbackMessage>; // Holds list of feedback messages.\npublic class FeedbackMessagesModel extends Object implements IModel<List<FeedbackMessage>>; // Model for extracting feedback messages.\npublic class FencedFeedbackPanel extends FeedbackPanel; // A specialized feedback panel that only displays messages from inside a fence defined by a container component.\npublic interface IFeedback; // Interface for components that present some kind of feedback to the user, normally based on the feedback messages attached to various components on a given page.\npublic interface IFeedbackContributor; // Implementations of this interface can contribute feedback messages\n@FunctionalInterface public interface IFeedbackMessageFilter extends org.apache.wicket.util.io.IClusterable, Predicate<FeedbackMessage>; // Interface for filtering feedback messages.\n", "des": "Classes related to showing user feedback, generally as the result of form submission and/or validation."}
{"index": 2384, "repo": "spring-batch-core-5.0.2", "code": "Package: xml\n\nClasses and Interfaces: \npublic abstract class AbstractFlowParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\npublic abstract class AbstractListenerParser extends Object;\npublic abstract class AbstractStepParser extends Object; // Internal parser for the <step/> elements inside a job.\npublic class BeanDefinitionUtils extends Object;\npublic class ChunkElementParser extends Object; // Internal parser for the <chunk/> element inside a step.\npublic class CoreNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport;\npublic class CoreNamespacePostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.context.ApplicationContextAware; // Post-process jobs and steps defined using the batch namespace to inject dependencies.\npublic class CoreNamespaceUtils extends Object; // Utility methods used in parsing of the batch core namespace.\npublic class DecisionParser extends Object; // Internal parser for the <decision/> elements inside a job.\npublic class ExceptionElementParser extends Object;\npublic class FlowElementParser extends Object; // Internal parser for the <flow/> elements inside a job.\npublic class InlineFlowParser extends AbstractFlowParser;\npublic class InlineStepParser extends AbstractStepParser; // Internal parser for the <step/> elements inside a job.\npublic class JobExecutionListenerParser extends AbstractListenerParser; // Parser for a step listener element.\npublic class JobParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <job/> element in the Batch namespace.\npublic class JobParserJobFactoryBean extends Object implements org.springframework.beans.factory.SmartFactoryBean<FlowJob>; // This FactoryBean is used by the batch namespace parser to create FlowJob objects.\npublic class JobRepositoryParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <job-repository/> element in the Batch namespace.\npublic class SimpleFlowFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<SimpleFlow>, org.springframework.beans.factory.InitializingBean; // Convenience factory for SimpleFlow instances for use in the XML namespace.\n", "des": "Parsers for XML based configuration"}
{"index": 1711, "repo": "spring-boot-test-3.1.1", "code": "Package: json\n\nClasses and Interfaces: \npublic abstract class AbstractJsonMarshalTester<T> extends Object; // Base class for AssertJ based JSON marshal testers.\nprotected abstract static class AbstractJsonMarshalTester.FieldInitializer<M> extends Object; // Utility class used to support field initialization.\npublic class BasicJsonTester extends Object; // AssertJ based JSON tester that works with basic JSON strings.\npublic class GsonTester<T> extends AbstractJsonMarshalTester<T>; // AssertJ based JSON tester backed by Gson.\npublic class JacksonTester<T> extends AbstractJsonMarshalTester<T>; // AssertJ based JSON tester backed by Jackson.\npublic class JsonbTester<T> extends AbstractJsonMarshalTester<T>; // AssertJ based JSON tester backed by Jsonb.\npublic final class JsonContent<T> extends Object implements org.assertj.core.api.AssertProvider<JsonContentAssert>; // JSON content usually created from a JSON tester.\npublic class JsonContentAssert extends org.assertj.core.api.AbstractAssert<JsonContentAssert,CharSequence>; // AssertJ Assert for JsonContent.\npublic final class ObjectContent<T> extends Object implements org.assertj.core.api.AssertProvider<ObjectContentAssert<T>>; // Object content usually created from AbstractJsonMarshalTester.\npublic class ObjectContentAssert<A> extends org.assertj.core.api.AbstractObjectAssert<ObjectContentAssert<A>,A>; // AssertJ Assert for ObjectContent.\n", "des": "Support for testing JSON."}
{"index": 253, "repo": "nutch-2.4", "code": "Package: validator\n\nClasses and Interfaces: \nClass UrlValidator; // Validates URLs.\n", "des": "URL filter plugin that validates given urls."}
{"index": 2621, "repo": "spring-integration-jms-6.1.2", "code": "Package: dsl\n\nClasses and Interfaces: \npublic final class Jms extends Object; // Factory class for JMS components.\npublic class JmsDefaultListenerContainerSpec extends JmsListenerContainerSpec<JmsDefaultListenerContainerSpec,org.springframework.jms.listener.DefaultMessageListenerContainer>; // A DefaultMessageListenerContainer specific JmsListenerContainerSpec extension.\npublic abstract class JmsDestinationAccessorSpec<S extends JmsDestinationAccessorSpec<S,A>,A extends org.springframework.jms.support.destination.JmsDestinationAccessor> extends org.springframework.integration.dsl.IntegrationComponentSpec<S,A>; // A base IntegrationComponentSpec for JmsDestinationAccessors.\npublic class JmsInboundChannelAdapterSpec<S extends JmsInboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageSourceSpec<S,JmsDestinationPollingSource>; // A MessageSourceSpec for a JmsDestinationPollingSource.\npublic static class JmsInboundChannelAdapterSpec.JmsInboundChannelSpecTemplateAware extends JmsInboundChannelAdapterSpec<JmsInboundChannelAdapterSpec.JmsInboundChannelSpecTemplateAware> implements org.springframework.integration.dsl.ComponentsRegistration; // A JmsTemplate-based JmsInboundChannelAdapterSpec extension.\npublic class JmsInboundGatewaySpec<S extends JmsInboundGatewaySpec<S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,JmsInboundGateway>; // A MessagingGatewaySpec for a JmsInboundGateway.\npublic static class JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer> extends JmsInboundGatewaySpec<JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S,C>>; // An AbstractMessageListenerContainer-based JmsInboundGatewaySpec extension.\npublic class JmsListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer> extends JmsDestinationAccessorSpec<S,C>; // A JmsDestinationAccessorSpec for JmsListenerContainerSpecs.\npublic class JmsMessageChannelSpec<S extends JmsMessageChannelSpec<S,T>,T extends AbstractJmsChannel> extends JmsPollableMessageChannelSpec<S,T>; // A JmsMessageChannelSpec for subscribable AbstractJmsChannels.\n", "des": "Provides JMS Component support for the Java DSL."}
{"index": 1042, "repo": "commons-io-2.13.0", "code": "Package: build\n\nClasses and Interfaces: \nClass AbstractOrigin<T,B extends AbstractOrigin<T,B>>; // Abstracts the origin of data for builders like a File, Path, Reader, Writer, InputStream, OutputStream, and URI.\nClass AbstractOrigin.ByteArrayOrigin; // A byte[] origin.\nClass AbstractOrigin.CharSequenceOrigin; // A CharSequence origin.\nClass AbstractOrigin.FileOrigin; // A File origin.\nClass AbstractOrigin.InputStreamOrigin; // An InputStream origin.\nClass AbstractOrigin.OutputStreamOrigin; // An OutputStream origin.\nClass AbstractOrigin.PathOrigin; // A Path origin.\nClass AbstractOrigin.ReaderOrigin; // An Reader origin.\nClass AbstractOrigin.URIOrigin; // A URI origin.\nClass AbstractOrigin.WriterOrigin; // An Writer origin.\nClass AbstractOriginSupplier<T,B extends AbstractOriginSupplier<T,B>>; // Abstracts building an instance of T.\nClass AbstractStreamBuilder<T,B extends AbstractStreamBuilder<T,B>>; // Abstracts building a typed instance of T.\nClass AbstractSupplier<T,B extends AbstractSupplier<T,B>>; // Abstracts supplying an instance of T.\n", "des": "Provides classes to implement IO builders."}
{"index": 2510, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \n@EnableWebFlux @ManagementContextConfiguration(value=CHILD, proxyBeanMethods=false) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementChildContextConfiguration extends Object; // @ManagementContextConfiguration for reactive web infrastructure when a separate management context with a web server running on a different port is required.\n@AutoConfiguration @ConditionalOnClass(reactor.core.publisher.Flux.class) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementContextAutoConfiguration extends Object; // Auto-configuration for Reactive-specific management context concerns.\n", "des": "Configuration for a WebFlux-based management context."}
{"index": 3278, "repo": "opencms-core-15.0", "code": "Package: importexport\n\nClasses and Interfaces: \nInterface I_CmsImport; // This interface describes a import class which is used to import resources into the VFS.\nInterface I_CmsImportExportHandler; // An import/export handler is an abstract layer to hide the logic how to import/export a specific type of Cms data.\nClass A_CmsImport;\nClass CmsExport; // Provides the functionality to export files from the OpenCms VFS to a ZIP file.\nClass CmsExportHelper; // Wrapper to write exported OpenCms resources either to a .ZIP file or to the file system.\nClass CmsExportParameters; // Export parameters.\nClass CmsExtendedHtmlImportDefault; // The CmsExtendedHtmlImportManager keeps the default values for the HTML-> OpenCms Template converter.\nClass CmsImport; // Holds the functionality to import resources from the file system or a zip file into the OpenCms VFS.\nClass CmsImportExportManager; // Provides information about how to handle imported resources.\nClass CmsImportHelper; // Import helper.\nClass CmsImportParameters; // Import parameters.\nClass CmsImportResourceDataReader; // Subclass which doesn't actually import anything, but just reads the module data into a data structure which can then be used by the module updater.\nClass CmsImportVersion10; // Adds the XML handler rules for import and export of resources and accounts.\nClass CmsImportVersion10.RelationData; // Data class to temporarily keep track of relation data for a resource to be imported.\nClass CmsImportVersion2;\nClass CmsImportVersion3;\nClass CmsImportVersion4;\nClass CmsImportVersion5;\nClass CmsImportVersion6;\nClass CmsImportVersion7;\nClass CmsVfsImportExportHandler; // Import/export handler implementation for VFS data.\nClass CmsXmlPageConverter;\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsImportExportManager.TimestampMode; // Time modes to specify how time stamps should be handled.\nEnum CmsImportVersion10.LinkParsableCategory; // Categories of resources that need to be handled differently in the 'rewrite parseables' import step.\nClass CmsImportExportException; // Signals an error during import or export of OpenCms data.\n", "des": "Contains functions to import and export resources from the OpenCms VFS."}
{"index": 1514, "repo": "spring-context-6.0.11", "code": "Package: index\n\nClasses and Interfaces: \npublic class CandidateComponentsIndex extends Object; // Provide access to the candidates that are defined in META-INF/spring.components.\npublic final class CandidateComponentsIndexLoader extends Object; // Candidate components index loading mechanism for internal use within the framework.\n", "des": "Support package for reading and managing the components index."}
{"index": 3412, "repo": "commons-imaging-1.0-alpha3", "code": "Package: write\n\nClasses and Interfaces: \nClass TiffImageWriterBase;\nClass TiffImageWriterLossless;\nClass TiffImageWriterLossy;\nClass TiffOutputDirectory;\nClass TiffOutputField;\nClass TiffOutputSet;\n", "des": "TIFF writers."}
{"index": 35, "repo": "ignite-core-2.15.0", "code": "Package: cluster\n\nClasses and Interfaces: \nInterface BaselineNode; // Interface representing a single node from baseline topology.\nInterface ClusterGroup; // Defines a cluster group which contains all or a subset of cluster nodes.\nInterface ClusterMetrics; // This class represents runtime information on a cluster.\nInterface ClusterNode; // Interface representing a single cluster node.\nInterface ClusterStartNodeResult; // Cluster start node result information.\nEnum ClusterState; // Cluster states.\nClass ClusterGroupEmptyException; // This exception defines illegal call on empty cluster group.\nClass ClusterTopologyException; // This exception is used to indicate error with the cluster topology (e.g., crashed node, etc.).\n", "des": "Contains cluster-related classes."}
{"index": 2785, "repo": "spring-expression-6.0.11", "code": "Package: common\n\nClasses and Interfaces: \npublic class CompositeStringExpression extends Object implements Expression; // Represents a template expression broken into pieces.\npublic abstract class ExpressionUtils extends Object; // Common utility functions that may be used by any Expression Language provider.\npublic class LiteralExpression extends Object implements Expression; // A very simple hardcoded implementation of the Expression interface that represents a string literal.\npublic abstract class TemplateAwareExpressionParser extends Object implements ExpressionParser; // An expression parser that understands templates.\npublic class TemplateParserContext extends Object implements ParserContext; // Configurable ParserContext implementation for template parsing.\n", "des": "Common utility classes behind the Spring Expression Language."}
{"index": 1033, "repo": "hadoop-aws-3.3.6", "code": "Package: impl\n\nClasses and Interfaces: \nInterface ContextAccessors; // An interface to implement for providing accessors to S3AFileSystem-level API calls.\nInterface CopyFromLocalOperation.CopyFromLocalOperationCallbacks; // Define the contract for CopyFromLocalOperation to interact with any external resources.\nInterface CreateFileBuilder.CreateFileBuilderCallbacks; // Callbacks for creating the file.\nInterface DirectoryPolicy; // Interface for Directory Marker policies to implement.\nInterface GetContentSummaryOperation.GetContentSummaryCallbacks; // Callbacks used by the operation.\nInterface HeaderProcessing.HeaderProcessingCallbacks;\nInterface ListingOperationCallbacks; // These are all the callbacks which Listing operations need, derived from the actual appropriate S3AFileSystem methods.\nInterface MkdirOperation.MkdirCallbacks; // Callbacks used by mkdir.\nInterface OperationCallbacks; // These are all the callbacks which the RenameOperation and DeleteOperation operations need, derived from the appropriate S3AFileSystem methods.\nInterface RequestFactoryImpl.PrepareRequest; // This is a callback for anything to \"prepare\" every request after creation.\nClass AbstractStoreOperation; // Base class of operations in the store.\nClass ActiveOperationContext; // Context for any active operation.\nClass BulkDeleteRetryHandler; // Handler for bulk delete retry events.\nClass CallableSupplier<T>; // A bridge from Callable to Supplier; catching exceptions raised by the callable and wrapping them as appropriate.\nClass ChangeDetectionPolicy; // Object change detection policy.\nClass ChangeTracker; // Change tracking for input streams: the version ID or etag of the object is tracked and compared on open/re-open.\nClass ConfigureShadedAWSSocketFactory; // This interacts with the Shaded httpclient library used in the full AWS SDK.\nClass CopyFromLocalOperation; // Implementation of CopyFromLocalOperation.\nClass CopyOutcome; // Extracts the outcome of a TransferManager-executed copy operation.\nClass CreateFileBuilder; // Builder used in create file; takes a callback to the operation to create the file.\nClass CreateFileBuilder.CreateFileOptions; // Create file options as built from the builder set or the classic entry point.\nClass DeleteOperation; // Implementation of the delete() operation.\nClass DirectoryPolicyImpl; // Implementation of directory policy.\nClass DirMarkerTracker; // Tracks directory markers which have been reported in object listings.\n", "des": "Implementation classes private to the S3A store."}
{"index": 133, "repo": "ignite-core-2.15.0", "code": "Package: streams\n\nClasses and Interfaces: \nInterface BinaryInputStream; // Binary input stream.\nInterface BinaryMemoryAllocatorChunk; // Memory allocator chunk.\nInterface BinaryOutputStream; // Binary output stream.\nInterface BinaryStream; // Binary stream.\nClass BinaryAbstractInputStream; // Binary abstract input stream.\nClass BinaryAbstractOutputStream; // Base binary output stream.\nClass BinaryAbstractStream; // Binary abstract stream.\nClass BinaryByteBufferInputStream; // Input stream over ByteBuffer.\nClass BinaryHeapInputStream; // Binary heap input stream.\nClass BinaryHeapOutputStream; // Binary heap output stream.\nClass BinaryMemoryAllocator; // On-heap memory allocator.\nClass BinaryOffheapInputStream; // Binary off-heap input stream.\nClass BinaryOffheapOutputStream; // Binary offheap output stream.\n", "des": "Contains binary APIs implementation for streams."}
{"index": 630, "repo": "freemarker-2.3.32", "code": "Package: xml\n\nClasses and Interfaces: \nClass NodeListModel; // Use NodeModel instead.\n", "des": "Deprecated, use W3C DOM with freemarker.ext.dom instead; Exposes XML from DOM, dom4j or JDOM nodes, uniformly."}
{"index": 1801, "repo": "spring-aop-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic abstract class AbstractAspectJAdvisorFactory extends Object implements AspectJAdvisorFactory; // Abstract base class for factories that can create Spring AOP Advisors given AspectJ classes from classes honoring the AspectJ 5 annotation syntax.\nprotected static class AbstractAspectJAdvisorFactory.AspectJAnnotation extends Object; // Class modeling an AspectJ annotation, exposing its type enumeration and pointcut String.\nprotected static enum AbstractAspectJAdvisorFactory.AspectJAnnotationType extends Enum<AbstractAspectJAdvisorFactory.AspectJAnnotationType>; // Enum for AspectJ annotation types.\npublic class AnnotationAwareAspectJAutoProxyCreator extends AspectJAwareAdvisorAutoProxyCreator; // AspectJAwareAdvisorAutoProxyCreator subclass that processes all AspectJ annotation aspects in the current application context, as well as Spring Advisors.\npublic interface AspectJAdvisorFactory; // Interface for factories that can create Spring AOP Advisors from classes annotated with AspectJ annotation syntax.\npublic class AspectJProxyFactory extends ProxyCreatorSupport; // AspectJ-based proxy factory, allowing for programmatic building of proxies which include AspectJ aspects (code style as well annotation style).\npublic class AspectMetadata extends Object implements Serializable; // Metadata for an AspectJ aspect class, with an additional Spring AOP pointcut for the per clause.\npublic class BeanFactoryAspectInstanceFactory extends Object implements MetadataAwareAspectInstanceFactory, Serializable; // AspectInstanceFactory implementation backed by a Spring BeanFactory.\npublic class BeanFactoryAspectJAdvisorsBuilder extends Object; // Helper for retrieving @AspectJ beans from a BeanFactory and building Spring Advisors based on them, for use with auto-proxying.\npublic class LazySingletonAspectInstanceFactoryDecorator extends Object implements MetadataAwareAspectInstanceFactory, Serializable; // Decorator to cause a MetadataAwareAspectInstanceFactory to instantiate only once.\npublic interface MetadataAwareAspectInstanceFactory extends AspectInstanceFactory; // Subinterface of AspectInstanceFactory that returns AspectMetadata associated with AspectJ-annotated classes.\npublic class NotAnAtAspectException extends AopConfigException; // Extension of AopConfigException thrown when trying to perform an advisor generation operation on a class that is not an AspectJ annotation-style aspect.\n", "des": "Classes enabling AspectJ 5 @Annotated classes to be used in Spring AOP."}
{"index": 3790, "repo": "lucene-analysis-common-9.7.0", "code": "Package: hu\n\nClasses and Interfaces: \nClass HungarianAnalyzer; // Analyzer for Hungarian.\nClass HungarianLightStemFilter; // A TokenFilter that applies HungarianLightStemmer to stem Hungarian words.\nClass HungarianLightStemFilterFactory; // Factory for HungarianLightStemFilter.\nClass HungarianLightStemmer; // Light Stemmer for Hungarian.\n", "des": "Analyzer for Hungarian."}
{"index": 2100, "repo": "spring-webflux-6.0.11", "code": "Package: result\n\nSub Packages: \npackage result.condition; // RequestCondition and implementations for matching requests based on different criteria.\npackage result.method; // Infrastructure for handler method processing.\npackage result.view; // Support for result handling through view resolution.\n\nClasses and Interfaces: \npublic abstract class HandlerResultHandlerSupport extends Object implements org.springframework.core.Ordered; // Base class for HandlerResultHandler with support for content negotiation and access to a ReactiveAdapter registry.\npublic class SimpleHandlerAdapter extends Object implements HandlerAdapter; // HandlerAdapter that allows using the plain WebHandler contract with the generic DispatcherHandler.\n", "des": "Support for various programming model styles including the invocation of different types of handlers, e.g."}
{"index": 2885, "repo": "spring-integration-core-6.1.2", "code": "Package: json\n\nClasses and Interfaces: \npublic abstract class AbstractJacksonJsonObjectMapper<N,P,J> extends Object implements JsonObjectMapper<N,P>, org.springframework.beans.factory.BeanClassLoaderAware; // Base class for Jackson JsonObjectMapper implementations.\npublic abstract class AbstractJsonInboundMessageMapper<P> extends Object implements InboundMessageMapper<String>; // Abstract InboundMessageMapper implementation that maps incoming JSON messages to a Message with the specified payload type.\npublic class AdviceMessageJacksonDeserializer extends MessageJacksonDeserializer<AdviceMessage<?>>; // The MessageJacksonDeserializer implementation for the AdviceMessage.\npublic class EmbeddedJsonHeadersMessageMapper extends Object implements BytesMessageMapper; // For outbound messages, uses a message-aware Jackson object mapper to render the message as JSON.\npublic class ErrorMessageJacksonDeserializer extends MessageJacksonDeserializer<org.springframework.messaging.support.ErrorMessage>; // The MessageJacksonDeserializer implementation for the ErrorMessage.\npublic class GenericMessageJacksonDeserializer extends MessageJacksonDeserializer<org.springframework.messaging.support.GenericMessage<?>>; // The MessageJacksonDeserializer implementation for the GenericMessage.\npublic class Jackson2JsonMessageParser extends Object; // JsonInboundMessageMapper.JsonMessageParser implementation that parses JSON messages and builds a Message with the specified payload type from provided JsonInboundMessageMapper.\npublic class Jackson2JsonObjectMapper extends AbstractJacksonJsonObjectMapper<com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType>; // Jackson 2 JSON-processor (@link https://github.com/FasterXML) JsonObjectMapper implementation.\npublic final class JacksonJsonUtils extends Object; // Utility methods for Jackson.\npublic final class JacksonPresent extends Object; // The utility to check if Jackson JSON processor is present in the classpath.\npublic class JsonInboundMessageMapper extends AbstractJsonInboundMessageMapper<JsonInboundMessageMapper.JsonMessageParser<?>>; // InboundMessageMapper implementation that maps incoming JSON messages to a Message with the specified payload type.\npublic static interface JsonInboundMessageMapper.JsonMessageParser<P>;\n", "des": "Provides classes supporting json."}
{"index": 2169, "repo": "wicket-core-10.0.0-M1", "code": "Package: validation\n\nSub Packages: \npackage validation.validator; // This package provides an implementation of Wicket's validation support.\n\nClasses and Interfaces: \npublic class CompoundValidator<T> extends Behavior implements IValidator<T>; // A compound IValidator.\npublic interface IErrorMessageSource; // Interface representing a message source that stores messages by key and can perform variable substitution.\npublic interface INullAcceptingValidator<T> extends IValidator<T>; // Marker interface for validators that will accept a null value.\npublic interface IValidatable<T>; // Interface representing any object that can be validated.\npublic interface IValidationError extends org.apache.wicket.util.io.IClusterable; // Interface representing a validation error.\n@FunctionalInterface public interface IValidator<T> extends org.apache.wicket.util.io.IClusterable; // Interface representing a validator that can validate an IValidatable object.\npublic class RawValidationError extends Object implements IValidationError; // An IValidationError implementation that just keeps a Serializable error message.\npublic class Validatable<T> extends Object implements IValidatable<T>; // This implementation of IValidatable is meant to be used outside of Wicket.\npublic final class ValidationError extends Object implements IValidationError; // A versatile implementation of IValidationError that supports message resolution from IErrorMessageSource, default message (if none of the keys matched), and variable substitution.\npublic class ValidatorAdapter<T> extends Behavior implements IValidator<T>; // Adapts IValidator to Behavior\n", "des": "This package provides interfaces for Wicket's validation support."}
{"index": 2721, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: separator\n\nClasses and Interfaces: \npublic class DefaultRecordSeparatorPolicy extends SimpleRecordSeparatorPolicy; // A RecordSeparatorPolicy that treats all lines as record endings, as long as they do not have unterminated quotes, and do not end in a continuation marker.\npublic class JsonRecordSeparatorPolicy extends SimpleRecordSeparatorPolicy; // JSON-based record separator.\npublic interface RecordSeparatorPolicy; // Policy for text file-based input sources to determine the end of a record, e.g.\npublic class SimpleRecordSeparatorPolicy extends Object implements RecordSeparatorPolicy; // Simplest possible RecordSeparatorPolicy - treats all lines as record endings.\npublic class SuffixRecordSeparatorPolicy extends DefaultRecordSeparatorPolicy; // A RecordSeparatorPolicy that looks for an exact match for a String at the end of a line (e.g.\n", "des": "Infrastructure implementations of io file support separator concerns."}
{"index": 3388, "repo": "commons-imaging-1.0-alpha3", "code": "Package: mylzw\n\nClasses and Interfaces: \nInterface MyLzwCompressor.Listener;\nInterface MyLzwDecompressor.Listener;\nClass BitsToByteInputStream;\nClass MyBitInputStream;\nClass MyBitOutputStream;\nClass MyLzwCompressor;\nClass MyLzwDecompressor;\n", "des": "Provides LZW compression."}
{"index": 3121, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface CurrentSessionContext; // Defines the contract for implementations which know how to scope the notion of a current session.\nInterface CurrentTenantIdentifierResolver; // A callback registered with the SessionFactory that is responsible for resolving the current tenant identifier for use with CurrentSessionContext and SessionFactory.getCurrentSession()\nClass AbstractCurrentSessionContext; // Base support for CurrentSessionContext implementors.\n", "des": "SPI level contracts around \"current session\" support."}
{"index": 1685, "repo": "spring-integration-mqtt-6.1.2", "code": "Package: inbound\n\nClasses and Interfaces: \n@ManagedResource @IntegrationManagedResource public abstract class AbstractMqttMessageDrivenChannelAdapter<T,C> extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, ClientManager.ConnectCallback; // Abstract class for MQTT Message-Driven Channel Adapters.\npublic class MqttPahoMessageDrivenChannelAdapter extends AbstractMqttMessageDrivenChannelAdapter<org.eclipse.paho.client.mqttv3.IMqttAsyncClient,org.eclipse.paho.client.mqttv3.MqttConnectOptions> implements org.eclipse.paho.client.mqttv3.MqttCallbackExtended, MqttPahoComponent; // Eclipse Paho Implementation.\npublic class Mqttv5PahoMessageDrivenChannelAdapter extends AbstractMqttMessageDrivenChannelAdapter<org.eclipse.paho.mqttv5.client.IMqttAsyncClient,org.eclipse.paho.mqttv5.client.MqttConnectionOptions> implements org.eclipse.paho.mqttv5.client.MqttCallback, MqttComponent<org.eclipse.paho.mqttv5.client.MqttConnectionOptions>; // The AbstractMqttMessageDrivenChannelAdapter implementation for MQTT v5.\n", "des": "Provides inbound Spring Integration MqttAdapter components."}
{"index": 2729, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic class KafkaItemReaderBuilder<K,V> extends Object; // A builder implementation for the KafkaItemReader.\npublic class KafkaItemWriterBuilder<K,V> extends Object; // A builder implementation for the KafkaItemWriter\n", "des": "Builders for Apache Kafka item reader and writer."}
{"index": 1460, "repo": "spring-data-redis-3.1.2", "code": "Package: adapter\n\nClasses and Interfaces: \npublic class MessageListenerAdapter extends Object implements InitializingBean, MessageListener; // Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion.\npublic class RedisListenerExecutionFailedException extends InvalidDataAccessApiUsageException; // Exception thrown when the execution of a listener method failed.\n", "des": "Message listener adapter package."}
{"index": 2951, "repo": "spring-integration-xml-6.1.2", "code": "Package: selector\n\nClasses and Interfaces: \npublic abstract class AbstractXPathMessageSelector extends Object implements org.springframework.integration.core.MessageSelector; // Base class for XPath MessageSelector implementations.\npublic class BooleanTestXPathMessageSelector extends AbstractXPathMessageSelector; // Boolean XPath testing MessageSelector.\npublic class RegexTestXPathMessageSelector extends AbstractXPathMessageSelector; // XPath MessageSelector that tests if a provided String value matches a given Regular Expression.\npublic class StringValueTestXPathMessageSelector extends AbstractXPathMessageSelector; // XPath MessageSelector that tests if a provided value supports payloads of type Document or String.\npublic class XmlValidatingMessageSelector extends Object implements org.springframework.integration.core.MessageSelector; // The XML validation-specific MessageSelector.\npublic static enum XmlValidatingMessageSelector.SchemaType extends Enum<XmlValidatingMessageSelector.SchemaType>;\n", "des": "Provides XML-centric MessageSelector implementations."}
{"index": 1363, "repo": "spring-tx-6.0.11", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic abstract class AbstractFallbackTransactionAttributeSource extends Object implements TransactionAttributeSource, org.springframework.context.EmbeddedValueResolverAware; // Abstract implementation of TransactionAttributeSource that caches attributes for methods and implements a fallback policy: 1.\npublic class BeanFactoryTransactionAttributeSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor; // Advisor driven by a TransactionAttributeSource, used to include a transaction advice bean for methods that are transactional.\npublic class CompositeTransactionAttributeSource extends Object implements TransactionAttributeSource, Serializable; // Composite TransactionAttributeSource implementation that iterates over a given array of TransactionAttributeSource instances.\npublic class DefaultTransactionAttribute extends DefaultTransactionDefinition implements TransactionAttribute; // Spring's common transaction attribute implementation.\npublic abstract class DelegatingTransactionAttribute extends DelegatingTransactionDefinition implements TransactionAttribute, Serializable; // TransactionAttribute implementation that delegates all calls to a given target TransactionAttribute instance.\npublic class MatchAlwaysTransactionAttributeSource extends Object implements TransactionAttributeSource, Serializable; // Very simple implementation of TransactionAttributeSource which will always return the same TransactionAttribute for all methods fed to it.\npublic class MethodMapTransactionAttributeSource extends Object implements TransactionAttributeSource, org.springframework.context.EmbeddedValueResolverAware, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Simple TransactionAttributeSource implementation that allows attributes to be stored per method in a Map.\npublic class NameMatchTransactionAttributeSource extends Object implements TransactionAttributeSource, org.springframework.context.EmbeddedValueResolverAware, org.springframework.beans.factory.InitializingBean, Serializable; // Simple TransactionAttributeSource implementation that allows attributes to be matched by registered name.\npublic class NoRollbackRuleAttribute extends RollbackRuleAttribute; // Tag subclass of RollbackRuleAttribute that has the opposite behavior to the RollbackRuleAttribute superclass.\npublic class RollbackRuleAttribute extends Object implements Serializable; // Rule determining whether a given exception should cause a rollback.\npublic class RuleBasedTransactionAttribute extends DefaultTransactionAttribute implements Serializable; // TransactionAttribute implementation that works out whether a given exception should cause transaction rollback by applying a number of rollback rules, both positive and negative.\npublic interface TransactionalProxy extends org.springframework.aop.SpringProxy; // A marker interface for manually created transactional proxies.\n", "des": "AOP-based solution for declarative transaction demarcation."}
{"index": 1991, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \n@AutoConfiguration(after=HttpMessageConvertersAutoConfiguration.class) @ConditionalOnClass(org.springframework.web.client.RestTemplate.class) @Conditional(org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition.class) public class RestTemplateAutoConfiguration extends Object; // Auto-configuration for RestTemplate.\npublic final class RestTemplateBuilderConfigurer extends Object; // Configure RestTemplateBuilder with sensible defaults.\n", "des": "Auto-configuration for web clients."}
{"index": 3628, "repo": "lucene-misc-9.7.0", "code": "Package: document\n\nClasses and Interfaces: \nClass LazyDocument; // Defers actually loading a field's value until you ask for it.\n", "des": "Misc extensions of the Document/Field API."}
{"index": 3250, "repo": "opencms-core-15.0", "code": "Package: sitemap\n\nSub Packages: \npackage sitemap.shared; // Shared Client-Server side of the sitemap view.\n\nClasses and Interfaces: \nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAliasBulkEditHelper; // Helper class used by a service to edit or import aliases for a whole site.\nClass CmsAliasEditorLockTable; // A class used to keep track of which user is editing the alias table from which sites.\nClass CmsAliasImportResponseTable; // A class used for storing alias import results by key.\nClass CmsModelPageHelper; // Helper class for model page operations in the sitemap editor.\nClass CmsSitemapActionElement; // Sitemap action used to generate the sitemap editor.\nClass CmsSitemapAttributeUpdater; // Performs attribute changes in a sitemap configuration file CmsXmlContent instance.\nClass CmsSitemapNavPosCalculator; // Helper class for recalculating navigation positions when a user has changed the order of navigation entries in the sitemap editor.\nClass CmsSitemapSessionCache; // Sitemap session cache.\nClass CmsVfsSitemapService; // Handles all RPC services related to the vfs sitemap.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Server side of the sitemap view."}
{"index": 1567, "repo": "spring-restdocs-core-3.0.0", "code": "Package: operation\n\nSub Packages: \npackage operation.preprocess; // Support for preprocessing an operation prior to it being documented.\n\nClasses and Interfaces: \npublic class ConversionException extends RuntimeException; // An exception that can be thrown by RequestConverter and ResponseConverter implementations to indicate that a failure has occurred during conversion.\npublic final class FormParameters extends LinkedMultiValueMap<String,String>; // A request's form parameters, derived from its form URL encoded body content.\npublic interface Operation; // Describes an operation performed on a RESTful service.\npublic interface OperationRequest; // The request that was sent as part of performing an operation on a RESTful service.\npublic class OperationRequestFactory extends Object; // A factory for creating OperationRequests.\npublic interface OperationRequestPart; // A part of a multipart request.\npublic class OperationRequestPartFactory extends Object; // A factory for creating OperationRequestParts.\npublic interface OperationResponse; // The response that was received as part of performing an operation on a RESTful service.\npublic class OperationResponseFactory extends Object; // A factory for creating OperationResponses.\npublic final class QueryParameters extends LinkedMultiValueMap<String,String>; // A request's query parameters, derived from its URI's query string.\npublic interface RequestConverter<R>; // A RequestConverter is used to convert an implementation-specific request into an OperationRequest.\npublic final class RequestCookie extends Object; // A representation of a Cookie received in a request.\npublic interface ResponseConverter<R>; // A ResponseConverter is used to convert an implementation-specific response into an OperationResponse.\npublic final class ResponseCookie extends Object; // A representation of a Cookie returned in a response.\npublic class StandardOperation extends Object implements Operation; // Standard implementation of Operation.\n", "des": "Operation API that describes a request that was sent and the response that was received when calling a RESTful API."}
{"index": 1993, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: format\n\nClasses and Interfaces: \npublic class DateTimeFormatters extends Object; // Formatters for dates, times, and date-times.\npublic class WebConversionService extends org.springframework.format.support.DefaultFormattingConversionService; // FormattingConversionService dedicated to web applications for formatting and converting values to/from the web.\n", "des": "Support classes for web-specific formatting."}
{"index": 3771, "repo": "lucene-analysis-common-9.7.0", "code": "Package: compound\n\nSub Packages: \npackage compound.hyphenation; // Hyphenation code for the CompoundWordTokenFilter.\n\nClasses and Interfaces: \nClass CompoundWordTokenFilterBase; // Base class for decomposition token filters.\nClass DictionaryCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass DictionaryCompoundWordTokenFilterFactory; // Factory for DictionaryCompoundWordTokenFilter.\nClass HyphenationCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass HyphenationCompoundWordTokenFilterFactory; // Factory for HyphenationCompoundWordTokenFilter.\n", "des": "A filter that decomposes compound words you find in many Germanic languages into the word parts."}
{"index": 2933, "repo": "groovy-4.0.13", "code": "Package: reflection\n\nClasses and Interfaces: \npublic class CacheAccessControlException extends GroovyRuntimeException;\npublic class CachedClass extends Object;\npublic static class CachedClass.CachedMethodComparatorByName extends Object implements Comparator<CachedMethod>;\npublic static class CachedClass.CachedMethodComparatorWithString extends Object implements Comparator;\npublic class CachedConstructor extends ParameterTypes;\npublic class CachedField extends MetaProperty;\npublic class CachedMethod extends MetaMethod implements Comparable;\npublic class ClassInfo extends Object implements Finalizable; // Handle for all information we want to keep about the class\npublic static interface ClassInfo.ClassInfoAction;\npublic class ClassLoaderForClassArtifacts extends ClassLoader;\npublic abstract class GeneratedMetaMethod extends MetaMethod;\npublic static class GeneratedMetaMethod.DgmMethodRecord extends Object implements Serializable;\npublic static class GeneratedMetaMethod.Proxy extends GeneratedMetaMethod;\npublic interface GroovyClassValue<T>; // Abstraction for Java version dependent ClassValue implementations.\npublic static interface GroovyClassValue.ComputeValue<T>;\npublic class MixinInMetaClass extends Object;\npublic class ParameterTypes extends Object;\npublic class ReflectionCache extends Object;\npublic class ReflectionUtils extends Object; // This class contains utility methods to determine which class called the current class to multiple levels of depth.\npublic class SunClassLoader extends ClassLoader; // Special class loader, which when running on Sun VM allows to generate accessor classes for any method\n", "des": "Internal classes for assisting with reflection."}
{"index": 3807, "repo": "lucene-analysis-common-9.7.0", "code": "Package: pt\n\nClasses and Interfaces: \nClass PortugueseAnalyzer; // Analyzer for Portuguese.\nClass PortugueseLightStemFilter; // A TokenFilter that applies PortugueseLightStemmer to stem Portuguese words.\nClass PortugueseLightStemFilterFactory; // Factory for PortugueseLightStemFilter.\nClass PortugueseLightStemmer; // Light Stemmer for Portuguese\nClass PortugueseMinimalStemFilter; // A TokenFilter that applies PortugueseMinimalStemmer to stem Portuguese words.\nClass PortugueseMinimalStemFilterFactory; // Factory for PortugueseMinimalStemFilter.\nClass PortugueseMinimalStemmer; // Minimal Stemmer for Portuguese\nClass PortugueseStemFilter; // A TokenFilter that applies PortugueseStemmer to stem Portuguese words.\nClass PortugueseStemFilterFactory; // Factory for PortugueseStemFilter.\nClass PortugueseStemmer; // Portuguese stemmer implementing the RSLP (Removedor de Sufixos da Lingua Portuguesa) algorithm.\nClass RSLPStemmerBase; // Base class for stemmers that use a set of RSLP-like stemming steps.\nClass RSLPStemmerBase.Rule; // A basic rule, with no exceptions.\nClass RSLPStemmerBase.RuleWithSetExceptions; // A rule with a set of whole-word exceptions.\nClass RSLPStemmerBase.RuleWithSuffixExceptions; // A rule with a set of exceptional suffixes.\nClass RSLPStemmerBase.Step; // A step containing a list of rules.\n", "des": "Analyzer for Portuguese."}
{"index": 1112, "repo": "fontbox-3.0.0-beta1", "code": "Package: autodetect\n\nClasses and Interfaces: \nInterface FontDirFinder; // Implementers provide find method for searching native operating system for available fonts.\nClass FontFileFinder; // Helps to autodetect/locate available operating system fonts.\nClass MacFontDirFinder; // Mac font directory finder.\nClass NativeFontDirFinder; // Native font finder base class.\nClass OS400FontDirFinder; // Font finder for OS/400 systems.\nClass UnixFontDirFinder; // Unix font directory finder.\nClass WindowsFontDirFinder; // FontFinder for native Windows platforms.\n", "des": "This package contains utility classes to manage local fonts."}
{"index": 1278, "repo": "spring-core-6.0.11", "code": "Package: log\n\nClasses and Interfaces: \npublic class LogAccessor extends Object; // A convenient accessor for Commons Logging, providing not only CharSequence based log methods but also Supplier based variants for use with Java 8 lambda expressions.\npublic final class LogDelegateFactory extends Object; // Factory for common Log delegates with Spring's logging conventions.\npublic abstract class LogFormatUtils extends Object; // Utility methods for formatting and logging messages.\npublic abstract class LogMessage extends Object implements CharSequence; // A simple log message type for use with Commons Logging, allowing for convenient lazy resolution of a given Supplier instance (typically bound to a lambda expression) or a printf-style format string (String.format(java.lang.String, java.lang.Object...)) in its LogMessage.toString().\n", "des": "Useful delegates for Spring's logging conventions."}
{"index": 583, "repo": "commons-collections-3.2.2", "code": "Package: list\n\nClasses and Interfaces: \nClass AbstractLinkedList; // An abstract implementation of a linked list which provides numerous points for subclasses to override.\nClass AbstractLinkedList.LinkedListIterator; // A list iterator over the linked list.\nClass AbstractLinkedList.LinkedSubList; // The sublist implementation for AbstractLinkedList.\nClass AbstractLinkedList.LinkedSubListIterator; // A list iterator over the linked sub list.\nClass AbstractLinkedList.Node; // A node within the linked list.\nClass AbstractListDecorator; // Decorates another List to provide additional behaviour.\nClass AbstractSerializableListDecorator; // Serializable subclass of AbstractListDecorator.\nClass CursorableLinkedList; // A List implementation with a ListIterator that allows concurrent modifications to the underlying list.\nClass CursorableLinkedList.Cursor; // An extended ListIterator that allows concurrent changes to the underlying list.\nClass CursorableLinkedList.SubCursor; // A cursor for the sublist based on LinkedSubListIterator.\nClass FixedSizeList; // Decorates another List to fix the size preventing add/remove.\nClass GrowthList; // Decorates another List to make it seamlessly grow when indices larger than the list size are used on add and set, avoiding most IndexOutOfBoundsExceptions.\nClass LazyList; // Decorates another List to create objects in the list on demand.\nClass NodeCachingLinkedList; // A List implementation that stores a cache of internal Node objects in an effort to reduce wasteful object creation.\nClass PredicatedList; // Decorates another List to validate that all additions match a specified predicate.\nClass SetUniqueList; // Decorates a List to ensure that no duplicates are present much like a Set.\nClass SynchronizedList; // Decorates another List to synchronize its behaviour for a multi-threaded environment.\nClass TransformedList; // Decorates another List to transform objects that are added.\nClass TreeList; // A List implementation that is optimised for fast insertions and removals at any index in the list.\nClass TypedList; // Decorates another List to validate that elements added are of a specific type.\nClass UnmodifiableList; // Decorates another List to ensure it can't be altered.\n", "des": "This package contains implementations of the List interface."}
{"index": 1055, "repo": "commons-rdf-api-0.5.0", "code": "Package: api\n\nClasses and Interfaces: \nInterface BlankNode; // A RDF-1.1 Blank Node, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014. Note: Blank nodes are disjoint from IRIs and literals.\nInterface BlankNodeOrIRI; // This interface represents the RDFTerms that may be used in the subject position of an RDF-1.1 Triple as well as the graph name position of a Quad.\nInterface Dataset; // An RDF 1.1 Dataset, a set of RDF quads, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface Graph; // An RDF 1.1 Graph, a set of RDF triples, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface GraphLike<T extends TripleLike>; // A \"graph-like\" interface that contains TripleLike statements.\nInterface IRI; // An RDF-1.1 IRI, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface Literal; // An RDF-1.1 Literal, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface Quad; // A Quad is a statement in a RDF-1.1 Dataset, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Working Group Note published on 25 February 2014.\nInterface QuadLike<G extends RDFTerm>; // A generalised \"quad-like\" interface, extended by Quad.\nInterface RDF; // A RDF implementation.\nInterface RDFSyntax; // An RDF syntax, e.g.\nInterface RDFTerm; // An RDF-1.1 Term, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\nInterface RDFTermFactory;\nInterface Triple; // An RDF-1.1 Triple, as defined by RDF-1.1 Concepts and Abstract Syntax, a W3C Recommendation published on 25 February 2014.\n", "des": "Commons RDF, a common library of RDF 1.1 concepts."}
{"index": 1167, "repo": "commons-math3-3.6.1", "code": "Package: hull\n\nClasses and Interfaces: \nInterface ConvexHullGenerator2D; // Interface for convex hull generators in the two-dimensional euclidean space.\nClass AklToussaintHeuristic; // A simple heuristic to improve the performance of convex hull algorithms.\nClass ConvexHull2D; // This class represents a convex hull in an two-dimensional euclidean space.\nClass MonotoneChain; // Implements Andrew's monotone chain method to generate the convex hull of a finite set of points in the two-dimensional euclidean space.\n", "des": "This package provides algorithms to generate the convex hull for a set of points in an two-dimensional euclidean space."}
{"index": 2849, "repo": "spring-integration-core-6.1.2", "code": "Package: annotation\n\nClasses and Interfaces: \npublic abstract class AnnotationMetadataAdapter extends Object implements org.springframework.core.type.AnnotationMetadata; // An AnnotationMetadata implementation to expose a metadata by the provided Map of attributes.\npublic interface MethodAnnotationPostProcessor<T extends Annotation>; // Strategy interface for post-processing annotated methods.\n", "des": "Provides classes supporting annotation-based configuration."}
{"index": 1750, "repo": "spring-data-mongodb-4.1.2", "code": "Package: annotation\n\nClasses and Interfaces: \n@Inherited @Retention(RUNTIME) @Target({TYPE,METHOD}) public @interface Collation; // Collation allows to define the rules used for language-specific string comparison.\n", "des": "Core Spring Data MongoDB annotations not limited to a special use case (like Query,...)."}
{"index": 2206, "repo": "spring-data-commons-3.1.2", "code": "Package: history\n\nClasses and Interfaces: \npublic class AnnotationRevisionMetadata<N extends Number & Comparable<N>> extends Object implements RevisionMetadata<N>; // A RevisionMetadata implementation that inspects the given object for fields with the configured annotations and returns the field's values on calls to AnnotationRevisionMetadata.getRevisionInstant(), AnnotationRevisionMetadata.getRevisionInstant() and AnnotationRevisionMetadata.getRevisionNumber().\npublic final class Revision<N extends Number & Comparable<N>,T> extends Object implements Comparable<Revision<N,?>>; // Wrapper to contain RevisionMetadata as well as the revisioned entity.\npublic interface RevisionMetadata<N extends Number & Comparable<N>>; // Metadata about a revision.\npublic static enum RevisionMetadata.RevisionType extends Enum<RevisionMetadata.RevisionType>; // The type of a Revision.\npublic class Revisions<N extends Number & Comparable<N>,T> extends Object implements Streamable<Revision<N,T>>; // Simple wrapper class for a List of Revisions allowing to canonically access the latest revision.\npublic class RevisionSort extends Sort; // A dedicated Sort implementation that allows the definition of the ordering of revisions independently of the property name the revision number is held in.\n", "des": "Basic interfaces and value objects for histography API."}
{"index": 3887, "repo": "solr-solrj-9.3.0", "code": "Package: request\n\nSub Packages: \npackage request.beans; // Annotated Data objects used in V2 Requests\npackage request.json; // Allows sending of requests using Solr's JSON query/faceting API\npackage request.schema; // Convenience classes for making Schema API requests.\n\nClasses and Interfaces: \nInterface ApiMapping.CommandMeta;\nInterface ApiMapping.V2EndPoint;\nInterface CollectionAdminRequest.RoutedAliasAdminRequest;\nInterface IsUpdateRequest; // Marker class so that we can determine which requests are updates.\nInterface JavaBinUpdateRequestCodec.StreamingUpdateHandler;\nInterface RequestWriter.ContentWriter;\nClass AbstractUpdateRequest;\nClass ApiMapping; // Types and utilities used by many ApiMapping classes.\nClass CollectionAdminRequest<T extends CollectionAdminResponse>; // This class is experimental and subject to change.\nClass CollectionAdminRequest.AddReplica;\nClass CollectionAdminRequest.AddReplicaProp;\nClass CollectionAdminRequest.AddRole;\nClass CollectionAdminRequest.AsyncCollectionAdminRequest; // Base class for asynchronous collection admin requests\nClass CollectionAdminRequest.AsyncCollectionSpecificAdminRequest;\nClass CollectionAdminRequest.AsyncShardSpecificAdminRequest;\nClass CollectionAdminRequest.Backup;\nClass CollectionAdminRequest.BalanceShardUnique;\nClass CollectionAdminRequest.ClusterProp;\nClass CollectionAdminRequest.ClusterStatus;\nClass CollectionAdminRequest.CollectionAdminRoleRequest;\nClass CollectionAdminRequest.CollectionProp;\nClass CollectionAdminRequest.ColStatus;\nClass CollectionAdminRequest.Create;\nClass CollectionAdminRequest.CreateAlias;\nClass CollectionAdminRequest.CreateCategoryRoutedAlias;\nClass CollectionAdminRequest.CreateShard;\nClass CollectionAdminRequest.CreateSnapshot;\nClass CollectionAdminRequest.CreateTimeRoutedAlias;\nClass CollectionAdminRequest.Delete;\nClass CollectionAdminRequest.DeleteAlias;\nClass CollectionAdminRequest.DeleteBackup; // SolrRequest class for the \"Backup Deletion\" API.\nClass CollectionAdminRequest.DeleteNode;\nClass CollectionAdminRequest.DeleteReplica;\nClass CollectionAdminRequest.DeleteReplicaProp;\nClass CollectionAdminRequest.DeleteShard;\nClass CollectionAdminRequest.DeleteSnapshot;\nClass CollectionAdminRequest.DeleteStatus;\nClass CollectionAdminRequest.DimensionalRoutedAlias;\nClass CollectionAdminRequest.ForceLeader;\nClass CollectionAdminRequest.InstallShard;\nClass CollectionAdminRequest.List;\n", "des": "Convenience classes for dealing with various types of Solr requests."}
{"index": 3354, "repo": "opencms-core-15.0", "code": "Package: components\n\nClasses and Interfaces: \nInterface I_CmsGwtDialogClientRpc; // Server-to-client Interface for the GWT dialog extension.\nInterface I_CmsGwtDialogServerRpc; // Client-to-server rpc interface for the GWT dialog extension.\nClass CmsAutoGrowingTextAreaState; // The scroll position CSS shared state.\nClass CmsBreadCrumbState; // The bread crumb state.\nClass CmsCopyToClipboardState; // The copy to clip-board/select text button shared state.\nClass CmsExternalLayoutState; // The external layout state.\nClass CmsGwtContextMenuButtonState; // Context menu button widget state.\nClass CmsHistoryState; // The history state.\nClass CmsMaxHeightState; // The max height shared state.\nClass CmsPasswordFieldState; // Widget state for the special password field used by the login dialog.\nClass CmsReportWidgetState; // Report widget state.\nClass CmsScrollPositionCssState; // The scroll position CSS shared state.\nClass CmsUploadAreaState; // The upload button state.\nClass CmsUploadState; // The upload button state.\nEnum CmsUploadState.UploadType; // The upload types.\n", "des": "Contains Vaadin component state classes and other RPC classes."}
{"index": 1448, "repo": "spring-data-redis-3.1.2", "code": "Package: observability\n\nClasses and Interfaces: \npublic class LettuceObservationContext extends io.micrometer.observation.transport.SenderContext<Object>; // Micrometer Observation.Context holding Lettuce contextual details.\npublic class MicrometerTracingAdapter extends Object implements io.lettuce.core.tracing.Tracing; // Tracing adapter using Micrometer's Observation.\npublic enum RedisObservation extends Enum<RedisObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // A Redis-based Observation.\n", "des": "Integration of Micrometer Tracing for Lettuce Observability."}
{"index": 3207, "repo": "tomcat-api-10.1", "code": "Package: pojo\n\nClasses and Interfaces: \nClass Constants; // Internal implementation constants.\nClass PojoEndpointBase; // Base implementation (client and server have different concrete implementations) of the wrapper that converts a POJO instance into a WebSocket endpoint instance.\nClass PojoEndpointClient; // Wrapper class for instances of POJOs annotated with ClientEndpoint so they appear as standard Endpoint instances.\nClass PojoEndpointServer; // Wrapper class for instances of POJOs annotated with ServerEndpoint so they appear as standard Endpoint instances.\nClass PojoMessageHandlerBase<T>; // Common implementation code for the POJO message handlers.\nClass PojoMessageHandlerPartialBase<T>; // Common implementation code for the POJO partial message handlers.\nClass PojoMessageHandlerPartialBinary; // ByteBuffer specific concrete implementation for handling partial messages.\nClass PojoMessageHandlerPartialText; // Text specific concrete implementation for handling partial messages.\nClass PojoMessageHandlerWholeBase<T>; // Common implementation code for the POJO whole message handlers.\nClass PojoMessageHandlerWholeBinary; // ByteBuffer specific concrete implementation for handling whole messages.\nClass PojoMessageHandlerWholePong; // PongMessage specific concrete implementation for handling whole messages.\nClass PojoMessageHandlerWholeText; // Text specific concrete implementation for handling whole messages.\nClass PojoMethodMapping; // For a POJO class annotated with ServerEndpoint, an instance of this class creates and caches the method handler, method information and parameter information for the onXXX calls.\nClass PojoPathParam; // Stores the parameter type and name for a parameter that needs to be passed to an onXxx method of Endpoint.\n", "des": "This package provides the necessary plumbing to convert an annotated POJO into a WebSocket Endpoint."}
{"index": 2700, "repo": "spring-integration-ftp-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class FtpInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileInboundChannelAdapterParser; // Parser for the FTP 'inbound-channel-adapter' element.\npublic class FtpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Provides namespace support for using FTP\npublic class FtpOutboundChannelAdapterParser extends org.springframework.integration.file.config.RemoteFileOutboundChannelAdapterParser; // Parser for FTP Outbound Channel Adapters.\npublic class FtpOutboundGatewayParser extends org.springframework.integration.file.config.AbstractRemoteFileOutboundGatewayParser;\npublic class FtpStreamingInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileStreamingInboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 892, "repo": "commons-jcs3-core-3.1", "code": "Package: auxiliary\n\nSub Packages: \npackage auxiliary.disk; // The primary disk auxiliary.\npackage auxiliary.lateral; // Root package for the lateral cache family.\npackage auxiliary.remote; // Root package for the remote auxiliary cache.\n\nClasses and Interfaces: \nInterface AuxiliaryCache<K,V>; // Tag interface for auxiliary caches.\nInterface AuxiliaryCacheAttributes; // This is a nominal interface that auxiliary cache attributes should implement.\nInterface AuxiliaryCacheFactory; // All auxiliary caches must have a factory that the cache configurator can use to create instances.\nClass AbstractAuxiliaryCache<K,V>; // This holds convenience methods used by most auxiliary caches.\nClass AbstractAuxiliaryCacheAttributes; // This has common attributes used by all auxiliaries.\nClass AbstractAuxiliaryCacheEventLogging<K,V>; // All ICacheEvents are defined as final.\nClass AbstractAuxiliaryCacheFactory; // Base class for auxiliary cache factories.\nClass AbstractAuxiliaryCacheMonitor; // Used to monitor and repair any failed connection for the lateral cache service.\nClass AuxiliaryCacheConfigurator; // Configuration util for auxiliary caches.\n", "des": "Root package for auxiliary caches."}
{"index": 2443, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: jdbc\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class) @ConditionalOnClass({org.springframework.jdbc.core.JdbcTemplate.class,org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.class}) @ConditionalOnBean(javax.sql.DataSource.class) @ConditionalOnEnabledHealthIndicator(\"db\") @EnableConfigurationProperties(DataSourceHealthIndicatorProperties.class) public class DataSourceHealthContributorAutoConfiguration extends Object implements org.springframework.beans.factory.InitializingBean; // Auto-configuration for DataSourceHealthIndicator.\n@ConfigurationProperties(prefix=\"management.health.db\") public class DataSourceHealthIndicatorProperties extends Object; // External configuration properties for DataSourceHealthIndicator.\n", "des": "Auto-configuration for actuator JDBC concerns."}
{"index": 3730, "repo": "lucene-queryparser-9.7.0", "code": "Package: builders\n\nClasses and Interfaces: \nInterface QueryBuilder; // This interface is used by implementors classes that builds some kind of object from a query tree.\nClass QueryTreeBuilder; // This class should be used when there is a builder for each type of node.\n", "des": "Necessary classes to implement query builders."}
{"index": 2652, "repo": "spring-data-cassandra-4.1.2", "code": "Package: session\n\nSub Packages: \npackage session.init; // Provides extensible support for initializing databases through scripts.\npackage session.lookup; // Provides a strategy for looking up SessionFactory.\n\nClasses and Interfaces: \npublic class DefaultBridgedReactiveSession extends Object implements ReactiveSession; // Default implementation of a ReactiveSession.\npublic class DefaultReactiveSessionFactory extends Object implements ReactiveSessionFactory; // Default implementation of ReactiveSessionFactory.\npublic class DefaultSessionFactory extends Object implements SessionFactory; // Default SessionFactory implementation.\n", "des": "Provides utility classes for simple CqlSession access and various session implementations."}
{"index": 1525, "repo": "spring-context-6.0.11", "code": "Package: classloading\n\nSub Packages: \npackage classloading.glassfish; // Support for class instrumentation on GlassFish.\npackage classloading.jboss; // Support for class instrumentation on JBoss AS 6 and 7.\npackage classloading.tomcat; // Support for class instrumentation on Tomcat.\n\nClasses and Interfaces: \npublic class InstrumentationLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver relying on VM Instrumentation.\npublic interface LoadTimeWeaver; // Defines the contract for adding one or more ClassFileTransformers to a ClassLoader.\npublic class ReflectiveLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver which uses reflection to delegate to an underlying ClassLoader with well-known transformation hooks.\npublic class ResourceOverridingShadowingClassLoader extends ShadowingClassLoader; // Subclass of ShadowingClassLoader that overrides attempts to locate certain files.\npublic class ShadowingClassLoader extends org.springframework.core.DecoratingClassLoader; // ClassLoader decorator that shadows an enclosing ClassLoader, applying registered transformers to all affected classes.\npublic class SimpleInstrumentableClassLoader extends org.springframework.core.OverridingClassLoader; // Simplistic implementation of an instrumentable ClassLoader.\npublic class SimpleLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver that builds and exposes a SimpleInstrumentableClassLoader.\npublic class SimpleThrowawayClassLoader extends org.springframework.core.OverridingClassLoader; // ClassLoader that can be used to load classes without bringing them into the parent loader.\npublic class WeavingTransformer extends Object; // ClassFileTransformer-based weaver, allowing for a list of transformers to be applied on a class byte array.\n", "des": "Support package for load time weaving based on class loaders, as required by JPA providers (but not JPA-specific)."}
{"index": 907, "repo": "commons-compress-1.23.0", "code": "Package: cpio\n\nClasses and Interfaces: \nInterface CpioConstants; // All constants needed by CPIO.\nClass CpioArchiveEntry; // A cpio archive consists of a sequence of files.\nClass CpioArchiveInputStream; // CpioArchiveInputStream is a stream for reading cpio streams.\nClass CpioArchiveOutputStream; // CpioArchiveOutputStream is a stream for writing CPIO streams.\n", "des": "Provides stream classes for reading and writing archives using the CPIO format."}
{"index": 3016, "repo": "spring-web-6.0.11", "code": "Package: reactive\n\nSub Packages: \npackage reactive.observation; // Instrumentation for observing reactive HTTP server applications.\n\nClasses and Interfaces: \npublic abstract class AbstractListenerReadPublisher<T> extends Object implements Publisher<T>; // Abstract base class for Publisher implementations that bridge between event-listener read APIs and Reactive Streams.\npublic abstract class AbstractListenerServerHttpResponse extends AbstractServerHttpResponse; // Abstract base class for listener-based server responses.\npublic abstract class AbstractListenerWriteFlushProcessor<T> extends Object implements Processor<Publisher<? extends T>,Void>; // An alternative to AbstractListenerWriteProcessor but instead writing a Publisher<Publisher<T>> with flush boundaries enforces after the completion of each nested Publisher.\npublic abstract class AbstractListenerWriteProcessor<T> extends Object implements Processor<T,Void>; // Abstract base class for Processor implementations that bridge between event-listener write APIs and Reactive Streams.\npublic abstract class AbstractServerHttpRequest extends Object implements ServerHttpRequest; // Common base class for ServerHttpRequest implementations.\npublic abstract class AbstractServerHttpResponse extends Object implements ServerHttpResponse; // Base class for ServerHttpResponse implementations.\npublic class ChannelSendOperator<T> extends reactor.core.publisher.Mono<Void> implements reactor.core.Scannable; // Given a write function that accepts a source Publisher<T> to write with and returns Publisher<Void> for the result, this operator helps to defer the invocation of the write function, until we know if the source publisher will begin publishing without an error.\npublic class ContextPathCompositeHandler extends Object implements HttpHandler; // HttpHandler delegating requests to one of several HttpHandler's based on simple, prefix-based mappings.\npublic interface HttpHandler; // Lowest level contract for reactive HTTP request handling that serves as a common denominator across different runtimes.\npublic interface HttpHandlerDecoratorFactory extends Function<HttpHandler,HttpHandler>; // Contract for applying a decorator to an HttpHandler.\npublic class HttpHeadResponseDecorator extends ServerHttpResponseDecorator; // ServerHttpResponse decorator for HTTP HEAD requests.\npublic class JettyHttpHandlerAdapter extends ServletHttpHandlerAdapter; // ServletHttpHandlerAdapter extension that uses Jetty APIs for writing to the response with ByteBuffer.\n", "des": "Abstractions for reactive HTTP server support including a ServerHttpRequest and ServerHttpResponse along with an HttpHandler for processing."}
{"index": 3642, "repo": "solr-core-9.3.0", "code": "Package: events\n\nSub Packages: \npackage events.impl; // Default implementation of ClusterEventProducer.\n\nClasses and Interfaces: \nInterface ClusterEvent; // Cluster-level event.\nInterface ClusterEventListener; // Components that want to be notified of cluster-wide events should use this.\nInterface ClusterEventProducer; // Component that produces ClusterEvent instances.\nInterface ClusterPropertiesChangedEvent; // Event generated when ZkStateReader.CLUSTER_PROPS is modified.\nInterface CollectionsAddedEvent; // Event generated when some collections have been added.\nInterface CollectionsRemovedEvent; // Event generated when some collections have been removed.\nInterface NodesDownEvent; // Event generated when some nodes went down.\nInterface NodesUpEvent; // Event generated when some nodes went up.\nClass ClusterEventProducerBase; // Base class for implementing ClusterEventProducer.\nClass NoOpProducer; // No-op implementation of ClusterEventProducer.\nEnum ClusterEvent.EventType;\n", "des": "Interfaces defining support for cluster-level event generation and processing."}
{"index": 2538, "repo": "spring-security-core-6.1.2", "code": "Package: cache\n\nClasses and Interfaces: \npublic class NullUserCache extends Object implements UserCache; // Does not perform any caching.\npublic class SpringCacheBasedUserCache extends Object implements UserCache; // Caches UserDetails instances in a Spring defined Cache.\n", "des": "Implementations of UserCache."}
{"index": 938, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: ws\n\nSub Packages: \npackage ws.client; // Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access.\npackage ws.config; // Provides an namespace handler for the Spring Web Services namespace.\npackage ws.context; // Contains the MessageContext interface and implementations thereof.\npackage ws.mime; // Provides MIME functionality for use the Spring Web Services framework.\npackage ws.pox; // Provides the Plain Old XML (POX) functionality of the Spring Web Services framework.\npackage ws.server; // Contains classes for server-side Spring-WS support.\npackage ws.soap; // Provides the SOAP functionality of the Spring Web Services framework.\npackage ws.support; // Provides general helper classes for Spring Web Services.\npackage ws.transport; // Contains the TransportRequest and TransportResponse interfaces.\npackage ws.wsdl; // Provides the WSDL functionality of the Spring Web Services framework.\n\nClasses and Interfaces: \nInterface FaultAwareWebServiceMessage; // Sub-interface of WebServiceMessage that can contain special Fault messages.\nInterface WebServiceMessage; // Represents a protocol-agnostic XML message.\nInterface WebServiceMessageFactory; // The WebServiceMessageFactory serves as a factory for WebServiceMessages.\nClass InvalidXmlException; // Exception thrown when a WebServiceMessageFactory cannot parse the XML passed on to WebServiceMessageFactory.createWebServiceMessage(java.io.InputStream).\nClass NoEndpointFoundException; // Exception thrown when an endpoint cannot be resolved for an incoming message request.\nClass WebServiceException; // Root of the hierarchy of Web Service exceptions.\nClass WebServiceMessageException; // Base class for all web service message exceptions.\n", "des": "Provides the core functionality of the Spring Web Services framework."}
{"index": 2475, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: jdbc\n\nClasses and Interfaces: \n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({javax.sql.DataSource.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({javax.sql.DataSource.class,io.micrometer.core.instrument.MeterRegistry.class}) public class DataSourcePoolMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available datasources.\n", "des": "Auto-configuration for JPA metrics."}
{"index": 32, "repo": "commons-collections4-4.4", "code": "Package: analyzer\n\nClasses and Interfaces: \nClass StringKeyAnalyzer; // An KeyAnalyzer for Strings.\n", "des": "This package contains various KeyAnalyzer implementations."}
{"index": 3872, "repo": "solr-ltr-9.3.0", "code": "Package: ltr\n\nSub Packages: \npackage ltr.feature; // Contains Feature related classes\npackage ltr.interleaving; // Contains Various Interleaving auxiliary classes\npackage ltr.model; // Contains Model related classes\npackage ltr.norm; // A normalizer normalizes the value of a feature.\npackage ltr.search; // APIs and classes for parsing and processing search requests\npackage ltr.store; // Contains feature and model store related classes.\n\nClasses and Interfaces: \nClass CSVFeatureLogger; // A feature logger that logs in csv format.\nClass DocInfo;\nClass FeatureLogger; // FeatureLogger can be registered in a model and provide a strategy for logging the feature values.\nClass LTRRescorer; // Implements the rescoring logic.\nClass LTRScoringQuery; // The ranking query that is run, reranking results using the LTRScoringModel algorithm\nClass LTRScoringQuery.FeatureInfo;\nClass LTRThreadModule; // The LTRThreadModule is optionally used by the LTRQParserPlugin and LTRFeatureLoggerTransformerFactory classes to parallelize the creation of Feature.FeatureWeight objects.\nClass SolrQueryRequestContextUtils;\nEnum FeatureLogger.FeatureFormat;\n", "des": "This package contains the main logic for performing the reranking using a Learning to Rank model."}
{"index": 3536, "repo": "opennlp-tools-2.2.0", "code": "Package: perceptron\n\nClasses and Interfaces: \nClass BinaryPerceptronModelReader; // A PerceptronModelReader that reads models from a binary format.\nClass BinaryPerceptronModelWriter; // A PerceptronModelWriter that writes models in a binary format.\nClass PerceptronModel; // A model implementation based one the perceptron algorithm.\nClass PerceptronModelReader; // The base class for readers of models.\nClass PerceptronModelWriter; // The base class for PerceptronModel writers.\nClass PerceptronTrainer; // Trains models using the perceptron algorithm.\nClass SimplePerceptronSequenceTrainer; // Trains models with sequences using the perceptron algorithm.\n", "des": "Package related to ML by means of the perceptron algorithm."}
{"index": 2173, "repo": "spring-security-web-6.1.2", "code": "Package: access\n\nSub Packages: \npackage access.channel; // Classes that ensure web requests are received over required transport channels.\npackage access.expression; // Implementation of web security expressions.\npackage access.intercept; // Enforcement of security for HTTP requests, typically by the URL requested.\n\nClasses and Interfaces: \npublic interface AccessDeniedHandler; // Used by ExceptionTranslationFilter to handle an AccessDeniedException.\npublic class AccessDeniedHandlerImpl extends Object implements AccessDeniedHandler; // Base implementation of AccessDeniedHandler.\npublic final class AuthorizationManagerWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware; // An implementation of WebInvocationPrivilegeEvaluator which delegates the checks to an instance of AuthorizationManager\npublic final class CompositeAccessDeniedHandler extends Object implements AccessDeniedHandler;\n@Deprecated public class DefaultWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware;\npublic final class DelegatingAccessDeniedHandler extends Object implements AccessDeniedHandler; // An AccessDeniedHandler that delegates to other AccessDeniedHandler instances based upon the type of AccessDeniedException passed into DelegatingAccessDeniedHandler.handle(HttpServletRequest, HttpServletResponse, AccessDeniedException).\npublic class ExceptionTranslationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.MessageSourceAware; // Handles any AccessDeniedException and AuthenticationException thrown within the filter chain.\npublic final class ObservationMarkingAccessDeniedHandler extends Object implements AccessDeniedHandler;\npublic final class RequestMatcherDelegatingAccessDeniedHandler extends Object implements AccessDeniedHandler; // An AccessDeniedHandler that delegates to other AccessDeniedHandler instances based upon the type of HttpServletRequest passed into RequestMatcherDelegatingAccessDeniedHandler.handle(HttpServletRequest, HttpServletResponse, AccessDeniedException).\npublic final class RequestMatcherDelegatingWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware; // A WebInvocationPrivilegeEvaluator which delegates to a list of WebInvocationPrivilegeEvaluator based on a RequestMatcher evaluation\npublic interface WebInvocationPrivilegeEvaluator; // Allows users to determine whether they have privileges for a given web URI.\n", "des": "Access-control related classes and packages."}
{"index": 2015, "repo": "spring-boot-devtools-3.1.1", "code": "Package: restart\n\nSub Packages: \npackage restart.classloader; // Classloaders used for reload support.\npackage restart.server; // Remote restart server.\n\nClasses and Interfaces: \npublic abstract class AgentReloader extends Object; // Utility to determine if a Java agent based reloader (e.g.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.devtools.restart.OnInitializedRestarterCondition.class) public @interface ConditionalOnInitializedRestarter; // @Conditional that only matches when the RestartInitializer has been applied with non null URLs.\npublic class DefaultRestartInitializer extends Object implements RestartInitializer; // Default RestartInitializer that only enable initial restart when running a standard \"main\" method.\n@FunctionalInterface public interface FailureHandler; // Strategy used to handle launch failures.\npublic static enum FailureHandler.Outcome extends Enum<FailureHandler.Outcome>; // Various outcomes for the handler.\npublic class RestartApplicationListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.context.ApplicationEvent>, org.springframework.core.Ordered; // ApplicationListener to initialize the Restarter.\npublic class Restarter extends Object; // Allows a running application to be restarted with an updated classpath.\n@FunctionalInterface public interface RestartInitializer; // Strategy interface used to initialize a Restarter.\n@FunctionalInterface public interface RestartListener; // Listener that is notified of application restarts.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"restart\") public @interface RestartScope; // Restart @Scope Annotation used to indicate that a bean should remain between restarts.\npublic class RestartScopeInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // Support for a 'restart' Scope that allows beans to remain between restarts.\n", "des": "Application restart support."}
{"index": 2878, "repo": "spring-integration-core-6.1.2", "code": "Package: scheduling\n\nClasses and Interfaces: \npublic class PollerMetadata extends Object;\npublic class PollSkipAdvice extends Object implements org.aopalliance.intercept.MethodInterceptor; // An advice that can be added to a poller's advice chain that determines whether a poll should be skipped or not.\npublic interface PollSkipStrategy; // Implementations determine whether a particular poll should be skipped.\n@ManagedResource public class SimplePollSkipStrategy extends Object implements PollSkipStrategy; // A simple PollSkipStrategy to be used with a PollSkipAdvice.\n", "des": "Provides classes related to task scheduling."}
{"index": 3082, "repo": "spring-ws-core-4.0.5", "code": "Package: support\n\nClasses and Interfaces: \npublic class SaajContentHandler extends Object implements ContentHandler; // SAX ContentHandler that transforms callback calls to the creation of SAAJ Nodes and SOAPElements.\npublic abstract class SaajUtils extends Object; // Collection of generic utility methods to work with SAAJ.\npublic class SaajXmlReader extends org.springframework.xml.sax.AbstractXmlReader; // SAX XMLReader that reads from a SAAJ Node.\n", "des": "Support classes for working with the SOAP with Attachments API for Java (SAAJ)."}
{"index": 3779, "repo": "lucene-analysis-common-9.7.0", "code": "Package: email\n\nClasses and Interfaces: \nClass UAX29URLEmailAnalyzer; // Filters UAX29URLEmailTokenizer with LowerCaseFilter and StopFilter, using a list of English stop words.\nClass UAX29URLEmailTokenizer; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\nClass UAX29URLEmailTokenizerFactory; // Factory for UAX29URLEmailTokenizer.\nClass UAX29URLEmailTokenizerImpl; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\n", "des": "Fast, general-purpose URLs and email addresses tokenizers."}
{"index": 187, "repo": "ignite-core-2.15.0", "code": "Package: nio\n\nSub Packages: \npackage nio.ssl; // Implementation of Secure Socket Layer filter for NIO server based on SSLEngine class.\n\nClasses and Interfaces: \nInterface GridCommunicationClient;\nInterface GridNioFilter; // This interface defines the general element in transformation chain between the nio server and application.\nInterface GridNioFuture<R>; // NIO future.\nInterface GridNioMessageReader; // Message reader.\nInterface GridNioMessageReaderFactory; // Message reader factory.\nInterface GridNioMessageWriter; // Message writer.\nInterface GridNioMessageWriterFactory; // Message writer factory.\nInterface GridNioParser; // This interface declares a basic contract on message parsing and encoding to the underlying network layer.\nInterface GridNioServerListener<T>; // Listener passed in to the GridNioServer that will be notified on client events.\nInterface GridNioSession; // This interface represents established or closed connection between nio server and remote client.\nInterface SessionWriteRequest;\nClass GridAbstractCommunicationClient; // Implements basic lifecycle for communication clients.\nClass GridBufferedParser; // This class implements stream parser based on GridNioServerBuffer.\nClass GridConnectionBytesVerifyFilter; // Verifies that first bytes received in accepted (incoming) NIO session are equal to IgniteUtils.IGNITE_HEADER.\nClass GridDelimitedParser; // This class implements stream parser based on GridNioDelimitedBuffer.\nClass GridDirectParser; // Parser for direct messages.\nClass GridNioAsyncNotifyFilter; // Enables multithreaded notification of session opened, message received and session closed events.\nClass GridNioBackPressureControl; // Utility class that allows to ignore back-pressure control for threads that are processing messages.\nClass GridNioCodecFilter; // Filter that transforms byte buffers to user-defined objects and vice-versa with specified GridNioParser.\nClass GridNioDelimitedBuffer; // Buffer with message delimiter support.\nClass GridNioEmbeddedFuture<R>; // Future that delegates to some other future.\nClass GridNioFilterAdapter; // Class that defines the piece for application-to-network and vice-versa data conversions (protocol transformations, encryption, etc.)\nClass GridNioFilterChain<T>; // Filter chain implementation for nio server filters.\n", "des": "NIO server interfaces and common utility classes for NIO."}
{"index": 1304, "repo": "groovy-all-4.0.13", "code": "Package: plugin\n\nClasses and Interfaces: \npublic class JUnit5Runner extends Object implements GroovyRunner; // Integration code for running JUnit5 tests in Groovy.\n", "des": "Classes to support running JUnit5 tests as scripts."}
{"index": 2013, "repo": "spring-boot-devtools-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \npublic class ClassPathChangeUploader extends Object implements org.springframework.context.ApplicationListener<ClassPathChangedEvent>; // Listens and pushes any classpath updates to a remote endpoint.\npublic class HttpHeaderInterceptor extends Object implements org.springframework.http.client.ClientHttpRequestInterceptor; // ClientHttpRequestInterceptor to populate arbitrary HTTP headers with a value.\n@Configuration(proxyBeanMethods=false) @EnableConfigurationProperties(DevToolsProperties.class) public class RemoteClientConfiguration extends Object implements org.springframework.beans.factory.InitializingBean; // Configuration used to connect to remote Spring Boot applications.\n", "des": "Client support for a remotely running Spring Boot application."}
{"index": 1810, "repo": "spring-aop-6.0.11", "code": "Package: support\n\nSub Packages: \npackage support.annotation; // Annotation support for AOP pointcuts.\n\nClasses and Interfaces: \npublic abstract class AbstractBeanFactoryPointcutAdvisor extends AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware; // Abstract BeanFactory-based PointcutAdvisor that allows for any Advice to be configured as reference to an Advice bean in a BeanFactory.\npublic abstract class AbstractExpressionPointcut extends Object implements ExpressionPointcut, Serializable; // Abstract superclass for expression pointcuts, offering location and expression properties.\npublic abstract class AbstractGenericPointcutAdvisor extends AbstractPointcutAdvisor; // Abstract generic PointcutAdvisor that allows for any Advice to be configured.\npublic abstract class AbstractPointcutAdvisor extends Object implements PointcutAdvisor, org.springframework.core.Ordered, Serializable; // Abstract base class for PointcutAdvisor implementations.\npublic abstract class AbstractRegexpMethodPointcut extends StaticMethodMatcherPointcut implements Serializable; // Abstract base regular expression pointcut bean.\npublic abstract class AopUtils extends Object; // Utility methods for AOP support code.\npublic abstract class ClassFilters extends Object; // Static utility methods for composing ClassFilters.\npublic class ComposablePointcut extends Object implements Pointcut, Serializable; // Convenient class for building up pointcuts.\npublic class ControlFlowPointcut extends Object implements Pointcut, ClassFilter, MethodMatcher, Serializable; // Pointcut and method matcher for use in simple cflow-style pointcut.\npublic class DefaultBeanFactoryPointcutAdvisor extends AbstractBeanFactoryPointcutAdvisor; // Concrete BeanFactory-based PointcutAdvisor that allows for any Advice to be configured as reference to an Advice bean in the BeanFactory, as well as the Pointcut to be configured through a bean property.\npublic class DefaultIntroductionAdvisor extends Object implements IntroductionAdvisor, ClassFilter, org.springframework.core.Ordered, Serializable; // Simple IntroductionAdvisor implementation that by default applies to any class.\npublic class DefaultPointcutAdvisor extends AbstractGenericPointcutAdvisor implements Serializable; // Convenient Pointcut-driven Advisor implementation.\npublic class DelegatePerTargetObjectIntroductionInterceptor extends IntroductionInfoSupport implements IntroductionInterceptor; // Convenient implementation of the IntroductionInterceptor interface.\n", "des": "Convenience classes for using Spring's AOP API."}
{"index": 2953, "repo": "spring-integration-xml-6.1.2", "code": "Package: splitter\n\nClasses and Interfaces: \npublic class XPathMessageSplitter extends org.springframework.integration.splitter.AbstractMessageSplitter; // Message Splitter that uses an XPathExpression to split a Document, File or String payload into a NodeList.\n", "des": "Provides implementations of AbstractMessageSplitter."}
{"index": 1370, "repo": "spring-boot-actuator-3.1.1", "code": "Package: audit\n\nSub Packages: \npackage audit.listener; // Actuator auditing listeners.\n\nClasses and Interfaces: \npublic class AuditEvent extends Object implements Serializable; // A value object representing an audit event: at a particular time, a particular user or agent carried out an action of a particular type.\npublic interface AuditEventRepository; // Repository for AuditEvents.\n@Endpoint(id=\"auditevents\") public class AuditEventsEndpoint extends Object; // @Endpoint to expose audit events.\npublic static final class AuditEventsEndpoint.AuditEventsDescriptor extends Object implements OperationResponseBody; // Description of an application's audit events.\npublic class InMemoryAuditEventRepository extends Object implements AuditEventRepository; // In-memory AuditEventRepository implementation.\n", "des": "Core actuator auditing classes."}
{"index": 3370, "repo": "opencms-core-15.0", "code": "Package: galleries\n\nClasses and Interfaces: \nClass A_CmsAjaxGallery; // Provides the general helper methods to generate the content of a gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsAjaxDownloadGallery; // Provides the specific constants, members and helper methods to generate the content of the download gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsAjaxImageGallery; // Provides the specific constants, members and helper methods to generate the content of the image gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsAjaxLinkGallery; // Provides the specific constants, members and helper methods to generate the content of the external link gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsOpenGallery; // Provides methods for open gallery dialog.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the various \"Galleries\" which are available in the editors and widgets of the OpenCms Workplace."}
{"index": 2758, "repo": "spring-beans-6.0.11", "code": "Package: groovy\n\nClasses and Interfaces: \npublic class GroovyBeanDefinitionReader extends AbstractBeanDefinitionReader implements groovy.lang.GroovyObject; // A Groovy-based reader for Spring bean definitions: like a Groovy builder, but more of a DSL for Spring configuration.\n", "des": "Support package for Groovy-based bean definitions."}
{"index": 2369, "repo": "camel-base-4.0.0-RC1", "code": "Package: scan\n\nClasses and Interfaces: \npublic class AnnotatedWithAnyPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for testing if a given class is annotated with any of the annotations.\npublic class AnnotatedWithPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for testing if a given class is annotated with a certain annotation.\npublic class AssignableToPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for testing if a given class is assignable to another class.\npublic class CompositePackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // CompositePackageScanFilter allows multiple PackageScanFilters to be composed into a single filter.\npublic class InvertingPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for inverting the match result of a subfilter.\n", "des": "Package scan classes."}
{"index": 416, "repo": "hadoop-azure-3.3.6", "code": "Package: commit\n\nClasses and Interfaces: \nInterface ResilientCommitByRename; // API exclusively for committing files.\nClass AbfsManifestStoreOperations; // Extension of StoreOperationsThroughFileSystem with ABFS awareness.\nClass AzureManifestCommitterFactory; // A Committer for the manifest committer which performs all bindings needed to work best with abfs.\n", "des": "Support for manifest committer."}
{"index": 3398, "repo": "commons-imaging-1.0-alpha3", "code": "Package: segments\n\nClasses and Interfaces: \nClass App13Segment;\nClass App14Segment; // http://www.aiim.org/documents/standards/PDF-Ref/References/Adobe/5116.DCT_Filter.pdf\nClass App2Segment;\nClass AppnSegment;\nClass ComSegment;\nClass DhtSegment;\nClass DhtSegment.HuffmanTable;\nClass DqtSegment;\nClass DqtSegment.QuantizationTable;\nClass GenericSegment;\nClass JfifSegment;\nClass Segment;\nClass SofnSegment;\nClass SofnSegment.Component;\nClass SosSegment;\nClass SosSegment.Component;\nClass UnknownSegment;\n", "des": "JPEG image format segments."}
{"index": 516, "repo": "commons-vfs2-2.9.0", "code": "Package: bzip2\n\nClasses and Interfaces: \nClass Bzip2FileObject; // the bzip2 file.\nClass Bzip2FileProvider; // Provides access to the content of bzip2 compressed files.\nClass Bzip2FileSystem; // Filesytem to handle compressed files using the bzip2 method.\n", "des": "The BZIP2 File Provider"}
{"index": 983, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: endpoint\n\nSub Packages: \npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS SOAP endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes.\n\nClasses and Interfaces: \nClass AbstractFaultCreatingValidatingMarshallingPayloadEndpoint; // as of Spring Web Services 2.0, in favor of annotated endpoints\nClass AbstractSoapFaultDefinitionExceptionResolver; // Abstract base class for SOAP-based EndpointExceptionResolver implementations that depend on SoapFaultDefinition.\nClass SimpleSoapExceptionResolver; // Simple, SOAP-specific EndpointExceptionResolver implementation that stores the exception's message as the fault string.\nClass SoapFaultAnnotationExceptionResolver; // Implementation of the EndpointExceptionResolver interface that uses the SoapFault annotation to map exceptions to SOAP Faults.\nClass SoapFaultDefinition; // Defines properties for a SOAP Fault.\nClass SoapFaultDefinitionEditor; // PropertyEditor for SoapFaultDefinition objects.\nClass SoapFaultMappingExceptionResolver; // Exception resolver that allows for mapping exception class names to SOAP Faults.\n", "des": "Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP."}
{"index": 1813, "repo": "spring-aop-6.0.11", "code": "Package: dynamic\n\nClasses and Interfaces: \npublic abstract class AbstractRefreshableTargetSource extends Object implements TargetSource, Refreshable; // Abstract TargetSource implementation that wraps a refreshable target object.\npublic class BeanFactoryRefreshableTargetSource extends AbstractRefreshableTargetSource; // Refreshable TargetSource that fetches fresh target beans from a BeanFactory.\npublic interface Refreshable; // Interface to be implemented by dynamic target objects, which support reloading and optionally polling for updates.\n", "des": "Support for dynamic, refreshable TargetSource implementations for use with Spring AOP."}
{"index": 1242, "repo": "spring-hateoas-2.1.2", "code": "Package: mvc\n\nClasses and Interfaces: \npublic class BasicLinkBuilder extends LinkBuilderSupport<BasicLinkBuilder>; // Simples LinkBuilder implementation possible.\npublic class ControllerLinkRelationProvider extends Object implements LinkRelationProvider; // LinkRelationProvider inspecting ExposesResourceFor annotations on controller classes.\npublic class JacksonSerializers extends Object; // Simple Jackson serializers and deserializers.\npublic static class JacksonSerializers.MediaTypeDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<MediaType>; // Custom JsonDeserializer for Spring's MediaType using the MediaType.parseMediaType(String) method.\npublic class MvcLink extends Object; // Syntactic sugar to create Link instances from MvcUriComponentsBuilder invocations.\npublic abstract class RepresentationModelAssemblerSupport<T,D extends RepresentationModel<?>> extends Object implements RepresentationModelAssembler<T,D>; // Base class to implement RepresentationModelAssemblers.\npublic class RepresentationModelProcessorHandlerMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // HandlerMethodReturnValueHandler to post-process the objects returned from controller methods using the configured RepresentationModelProcessors.\npublic class RepresentationModelProcessorInvoker extends Object; // Component to easily invoke all RepresentationModelProcessor instances registered for values of type RepresentationModel.\npublic static class RepresentationModelProcessorInvoker.CollectionModelProcessorWrapper extends Object; // RepresentationModelProcessorInvoker.ProcessorWrapper for RepresentationModelProcessors targeting CollectionModel.\npublic class TypeConstrainedMappingJackson2HttpMessageConverter extends MappingJackson2HttpMessageConverter; // Extension of MappingJackson2HttpMessageConverter to constrain the ability to read and write HTTP message based on the target type.\npublic interface UriComponentsContributor; // SPI callback to enhance a UriComponentsBuilder when referring to a method through a dummy method invocation.\npublic class WebMvcLinkBuilder extends TemplateVariableAwareLinkBuilderSupport<WebMvcLinkBuilder>; // Builder to ease building Link instances pointing to Spring MVC controllers.\npublic class WebMvcLinkBuilderFactory extends Object implements MethodLinkBuilderFactory<WebMvcLinkBuilder>; // Factory for LinkBuilderSupport instances based on the request mapping annotated on the given controller.\n", "des": "Spring MVC helper classes to build Links and assemble RepresentationModel types."}
{"index": 3272, "repo": "opencms-core-15.0", "code": "Package: flex\n\nClasses and Interfaces: \nClass CmsFlexBucketConfiguration; // Represents a Flex bucket configuration.\nClass CmsFlexCache; // This class implements the FlexCache.\nClass CmsFlexCache.CmsFlexCacheVariation; // A simple data container class for the FlexCache variations.\nClass CmsFlexCacheConfiguration; // Flex Cache configuration class.\nClass CmsFlexCacheEntry; // Contains the contents of a cached resource.\nClass CmsFlexCacheKey; // Key used to describe the caching behaviour of a specific resource.\nClass CmsFlexController; // Controller for getting access to the CmsObject, should be used as a request attribute.\nClass CmsFlexRequest; // Wrapper class for a HttpServletRequest.\nClass CmsFlexRequestContextInfo; // Contains information about the OpenCms request context required by the Flex implementation.\nClass CmsFlexRequestDispatcher; // Implementation of the RequestDispatcher interface to allow JSPs to be loaded from the OpenCms VFS.\nClass CmsFlexRequestKey; // Describes the caching behaviour (or caching options) for a Flex request.\nClass CmsFlexRequestKey.PathsBean; // Contains the root paths to be used for determining the buckets of a flex cache entry.\nClass CmsFlexResponse; // Wrapper class for a HttpServletResponse, required in order to process JSPs from the OpenCms VFS.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsFlexCacheException; // Signals an error of the Flex cache.\n", "des": "Provides low-level JSP integration funtionality for OpenCms, also implements the FlexCache, a declarative parameter-based cache."}
{"index": 3168, "repo": "gson-2.10.1", "code": "Package: stream\n\nClasses and Interfaces: \nClass JsonReader; // Reads a JSON (RFC 7159) encoded value as a stream of tokens.\nClass JsonWriter; // Writes a JSON (RFC 7159) encoded value to a stream, one token at a time.\nEnum JsonToken; // A structure, name or value type in a JSON-encoded string.\nClass MalformedJsonException; // Thrown when a reader encounters malformed JSON.\n", "des": "This package provides classes for processing JSON in an efficient streaming way."}
{"index": 547, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "Package: view\n\nClasses and Interfaces: \nClass AbstractDeviceDelegatingViewResolver; // Abstract ViewResolver implementation, providing a device aware ViewResolver wrapper that delegates to another view resolver implementation, allowing for resolution of device specific view names without the need for a dedicated mapping to be defined for each view.\nClass LiteDeviceDelegatingViewResolver; // A lightweight AbstractDeviceDelegatingViewResolver for adjusting a view based on the combination of resolved Device and specified SitePreference.\n", "des": "Device aware view resolution for Spring MVC-based web apps."}
{"index": 2882, "repo": "spring-integration-core-6.1.2", "code": "Package: support\n\nSub Packages: \npackage support.context; // Provides classes supporting use of the application context.\npackage support.converter; // Provides classes supporting message conversion.\npackage support.json; // Provides classes supporting json.\npackage support.locks; // Provides classes related to locking resources.\npackage support.management; // Provides classes related to management support.\npackage support.utils; // Provides global utility support classes for the runtime system.\n\nClasses and Interfaces: \npublic abstract class AbstractIntegrationMessageBuilder<T> extends Object;\npublic class DefaultErrorMessageStrategy extends Object implements ErrorMessageStrategy; // A simple ErrorMessageStrategy implementations which produces a error message with original message if the AttributeAccessor has ErrorMessageUtils.INPUT_MESSAGE_CONTEXT_KEY attribute.\npublic class DefaultMessageBuilderFactory extends Object implements MessageBuilderFactory;\n@FunctionalInterface public interface ErrorMessageStrategy; // A strategy to build an ErrorMessage based on the provided Throwable and AttributeAccessor as a context.\npublic final class ErrorMessageUtils extends Object; // Utilities for building error messages.\npublic class IdGenerators extends Object; // Alternative IdGenerator implementations.\npublic static class IdGenerators.JdkIdGenerator extends Object implements org.springframework.util.IdGenerator; // UUID.randomUUID().\npublic static class IdGenerators.SimpleIncrementingIdGenerator extends Object implements org.springframework.util.IdGenerator; // Based on the two AtomicLongs, for topBits and bottomBits, respectively.\npublic class MapBuilder<B extends MapBuilder<B,K,V>,K,V> extends Object; // A Builder pattern implementation for the Map.\npublic final class MessageBuilder<T> extends AbstractIntegrationMessageBuilder<T>; // The default message builder; creates immutable GenericMessages.\npublic interface MessageBuilderFactory;\n@FunctionalInterface public interface MessageDecorator; // The Message decoration contract.\npublic class MessagingExceptionWrapper extends org.springframework.messaging.MessagingException; // A wrapper exception for a MessagingException used to convey the cause and original message to a MessagePublishingErrorHandler.\npublic class MutableMessage<T> extends Object implements org.springframework.messaging.Message<T>, Serializable; // An implementation of Message with a generic payload.\n", "des": "Base core support package."}
{"index": 1251, "repo": "spring-core-6.0.11", "code": "Package: aot\n\nSub Packages: \npackage aot.generate; // Support classes for components that contribute generated code equivalent to a runtime behavior.\npackage aot.hint; // Support for registering the need for reflection, resources, java serialization and proxies at runtime.\npackage aot.nativex; // Support for generating GraalVM native configuration from runtime hints.\n\nClasses and Interfaces: \npublic abstract class AotDetector extends Object; // Utility for determining if AOT-processed optimizations must be used rather than the regular runtime.\n", "des": "Core package for Spring AOT infrastructure."}
{"index": 3028, "repo": "spring-web-6.0.11", "code": "Package: async\n\nClasses and Interfaces: \npublic class AsyncRequestTimeoutException extends RuntimeException implements ErrorResponse; // Exception to be thrown when an async request times out.\npublic interface AsyncWebRequest extends NativeWebRequest; // Extends NativeWebRequest with methods for asynchronous request processing.\npublic interface CallableProcessingInterceptor; // Intercepts concurrent request handling, where the concurrent result is obtained by executing a Callable on behalf of the application with an AsyncTaskExecutor.\npublic class DeferredResult<T> extends Object; // DeferredResult provides an alternative to using a Callable for asynchronous request processing.\n@FunctionalInterface public static interface DeferredResult.DeferredResultHandler; // Handles a DeferredResult value when set.\npublic interface DeferredResultProcessingInterceptor; // Intercepts concurrent request handling, where the concurrent result is obtained by waiting for a DeferredResult to be set from a thread chosen by the application (e.g.\npublic class StandardServletAsyncWebRequest extends ServletWebRequest implements AsyncWebRequest, AsyncListener; // A Servlet implementation of AsyncWebRequest.\npublic class TimeoutCallableProcessingInterceptor extends Object implements CallableProcessingInterceptor; // Sends a 503 (SERVICE_UNAVAILABLE) in case of a timeout if the response is not already committed.\npublic class TimeoutDeferredResultProcessingInterceptor extends Object implements DeferredResultProcessingInterceptor; // Sends a 503 (SERVICE_UNAVAILABLE) in case of a timeout if the response is not already committed.\npublic final class WebAsyncManager extends Object; // The central class for managing asynchronous request processing, mainly intended as an SPI and not typically used directly by application classes.\npublic class WebAsyncTask<V> extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Holder for a Callable, a timeout value, and a task executor.\npublic abstract class WebAsyncUtils extends Object; // Utility methods related to processing asynchronous web requests.\n", "des": "Support for asynchronous request processing."}
{"index": 3873, "repo": "solr-ltr-9.3.0", "code": "Package: feature\n\nClasses and Interfaces: \nClass Feature; // A recipe for computing a feature.\nClass FieldLengthFeature; // This feature returns the length of a field (in terms) for the current document.\nClass FieldValueFeature; // This feature returns the value of a field in the current document.\nClass OriginalScoreFeature; // This feature returns the original score that the document had before performing the reranking.\nClass SolrFeature; // This feature allows you to reuse any Solr query as a feature.\nClass ValueFeature; // This feature allows to return a constant given value for the current document.\nClass FeatureException;\n", "des": "Contains Feature related classes"}
{"index": 1069, "repo": "hadoop-yarn-common-3.3.6", "code": "Package: resource\n\nClasses and Interfaces: \nClass PlacementConstraintTransformations; // This class contains inner classes that define transformation on a PlacementConstraint expression.\nClass PlacementConstraintTransformations.AbstractTransformer; // The default implementation of the PlacementConstraint.Visitor that does a traversal of the constraint tree, performing no action for the lead constraints.\nClass PlacementConstraintTransformations.SingleConstraintTransformer; // Visits a PlacementConstraint tree and substitutes each PlacementConstraint.TargetConstraint and PlacementConstraint.CardinalityConstraint with an equivalent PlacementConstraint.SingleConstraint.\nClass PlacementConstraintTransformations.SpecializedConstraintTransformer; // Visits a PlacementConstraint tree and, whenever possible, substitutes each PlacementConstraint.SingleConstraint with a PlacementConstraint.TargetConstraint.\n", "des": "API related to resources."}
{"index": 259, "repo": "nutch-2.4", "code": "Package: tld\n\nClasses and Interfaces: \nClass TLDScoringFilter; // Scoring filter to boost tlds.\n", "des": "Top Level Domain Scoring plugin."}
{"index": 2393, "repo": "spring-batch-core-5.0.2", "code": "Package: launch\n\nSub Packages: \npackage launch.support; // Support classes for use in bootstrap and launch implementations or configurations.\n\nClasses and Interfaces: \npublic class JobExecutionNotFailedException extends JobExecutionException; // Checked exception to indicate that user asked for a job execution to be resumed when actually it didn't fail.\npublic class JobExecutionNotRunningException extends JobExecutionException; // Checked exception indicating that a JobExecution that is not currently running has been requested to stop.\npublic class JobExecutionNotStoppedException extends JobExecutionException; // Checked exception to indicate that user asked for a job execution to be aborted when hasn't been stopped.\npublic class JobInstanceAlreadyExistsException extends JobExecutionException; // Checked exception to indicate that a required Job is not available.\n@FunctionalInterface public interface JobLauncher; // Simple interface for controlling jobs, including possible ad-hoc executions, based on different runtime identifiers.\npublic interface JobOperator; // Low level interface for inspecting and controlling jobs with access only to primitive and collection types.\npublic class JobParametersNotFoundException extends JobExecutionException; // Checked exception to indicate that a required JobParametersIncrementer is not available.\npublic class NoSuchJobException extends JobExecutionException; // Checked exception to indicate that a required Job is not available.\npublic class NoSuchJobExecutionException extends JobExecutionException; // Checked exception to indicate that a required JobExecution is not available.\npublic class NoSuchJobInstanceException extends JobExecutionException; // Exception that signals that the user requested an operation on a non-existent JobInstance.\n", "des": "Interfaces and simple implementations of launch concerns."}
{"index": 376, "repo": "zookeeper-jute-3.8.2", "code": "Package: jute\n\nSub Packages: \npackage jute.compiler; // This package contains classes needed for code generation from the hadoop record compiler.\n\nClasses and Interfaces: \nInterface Index; // Interface that acts as an iterator for deserializing maps.\nInterface InputArchive; // Interface that all the Deserializers have to implement.\nInterface OutputArchive; // Interface that all the serializers have to implement.\nInterface Record; // Interface that is implemented by generated classes.\nClass BinaryInputArchive;\nClass BinaryOutputArchive;\nClass RecordReader; // Front-end interface to deserializers.\nClass RecordWriter; // Front-end for serializers.\nClass ToStringOutputArchive;\nClass Utils; // Various utility functions for Hadoop record I/O runtime.\n", "des": "Hadoop record I/O contains classes and a record description language translator for simplifying serialization and deserialization of records in a language-neutral manner."}
{"index": 2164, "repo": "wicket-core-10.0.0-M1", "code": "Package: resource\n\nClasses and Interfaces: \npublic final class CircularDependencyException extends WicketRuntimeException; // Thrown when a circular dependency is detected between resources.\npublic class CompositeCssCompressor extends Object implements IScopeAwareTextResourceProcessor, ICssCompressor; // Used to apply several ICssCompressor to the CSS compression. Usage:\npublic class CompositeJavaScriptCompressor extends Object implements IScopeAwareTextResourceProcessor, IJavaScriptCompressor; // Used to apply several IJavaScriptCompressor to the javascript compression. Usage:\npublic class CoreLibrariesContributor extends Object; // A helper class that contributes all required JavaScript resources needed for Wicket Ajax functionality\npublic class CssUrlReplacer extends Object implements IScopeAwareTextResourceProcessor, ICssCompressor; // This compressor is used to replace URLs within CSS files with URLs created from PackageResourceReferences that belongs to their corresponding resources (e.g images).The scope of the CSS file is used to create the PackageResourceReferences.\npublic class FileSystemJarPathService extends Object implements FileSystemPathService; // Gets the actual path for a jar file system\npublic interface FileSystemPathService; // Gets the actual path for a specific file system.\npublic class FileSystemResource extends AbstractResource; // Used to provide resources based on the on Java NIO FileSystem API. For more information see FileSystemResourceReference\npublic class FileSystemResourceReference extends ResourceReference; // This resource reference is used to provide a reference to a resource based on Java NIO FileSystem API. To implement a mime type detection refer to the documentation of Files.probeContentType(Path) and provide an implementation for java.nio.file.spi.FileTypeDetector in the META-INF/services folder for jars or in the /WEB-INF/classes/META-INF/services folder for webapps You can optionally override FileSystemResourceReference.getFileSystemResource() to provide an inline mime type detection, which is preferred to the default detection. Example:\n@FunctionalInterface public interface IPropertiesChangeListener; // To be implemented by listeners interested in PropertiesFactory events fired after a change to the properties has been detected\npublic interface IPropertiesFactory; // Implementations are responsible for locating Properties objects, which are a thin wrapper around ValueMap and is used to locate localized messages.\npublic interface IPropertiesFactoryContext; // environment required for properties factory\npublic interface IPropertiesLoader; // Property loaders as used by PropertiesFactory to load properties\n", "des": "Locale aware resouce loaders."}
{"index": 970, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: core\n\nClasses and Interfaces: \nClass SoapActionCallback; // WebServiceMessageCallback implementation that sets the SOAP Action header on the message.\nClass SoapFaultMessageResolver; // Simple fault resolver that simply throws a SoapFaultClientException when a fault occurs.\n", "des": "Contains core classes for SOAP-specific client-side Spring-WS support."}
{"index": 3865, "repo": "lucene-spatial-extras-9.7.0", "code": "Package: prefix\n\nSub Packages: \npackage prefix.tree; // This package is about SpatialPrefixTree and any supporting classes.\n\nClasses and Interfaces: \nClass AbstractPrefixTreeQuery; // Base class for Lucene Queries on SpatialPrefixTree fields.\nClass AbstractVisitingPrefixTreeQuery; // Traverses a SpatialPrefixTree indexed field, using the template and visitor design patterns for subclasses to guide the traversal and collect matching documents.\nClass AbstractVisitingPrefixTreeQuery.VNode; // A visitor node/cell found via the query shape for AbstractVisitingPrefixTreeQuery.VisitorTemplate.\nClass BytesRefIteratorTokenStream; // A TokenStream used internally by PrefixTreeStrategy.\nClass CellToBytesRefIterator; // A reset'able BytesRefIterator wrapper around an Iterator of Cells.\nClass ContainsPrefixTreeQuery; // Finds docs where its indexed shape CONTAINS the query shape.\nClass HeatmapFacetCounter; // Computes spatial facets in two dimensions as a grid of numbers.\nClass HeatmapFacetCounter.Heatmap; // Response structure\nClass IntersectsPrefixTreeQuery; // A Query matching documents that have an SpatialRelation.INTERSECTS (i.e.\nClass NumberRangePrefixTreeStrategy; // A PrefixTree based on Number/Date ranges.\nClass NumberRangePrefixTreeStrategy.Facets; // Facet response information\nClass NumberRangePrefixTreeStrategy.Facets.FacetParentVal; // Holds a block of detailLevel counts aggregated to their parent level.\nClass PointPrefixTreeFieldCacheProvider; // Implementation of ShapeFieldCacheProvider designed for PrefixTreeStrategys that index points (AND ONLY POINTS!).\nClass PrefixTreeFacetCounter; // Computes facets on cells for PrefixTreeStrategy.\nClass PrefixTreeFacetCounter.FacetVisitor; // A callback/visitor of facet counts.\nClass PrefixTreeStrategy; // An abstract SpatialStrategy based on SpatialPrefixTree.\nClass RecursivePrefixTreeStrategy; // A PrefixTreeStrategy which uses AbstractVisitingPrefixTreeQuery.\nClass TermQueryPrefixTreeStrategy; // A basic implementation of PrefixTreeStrategy using a large TermInSetQuery of all the cells from SpatialPrefixTree.getTreeCellIterator(org.locationtech.spatial4j.shape.Shape, int).\nClass WithinPrefixTreeQuery; // Finds docs where its indexed shape is WITHIN the query shape.\n", "des": "Prefix Tree Strategy."}
{"index": 325, "repo": "kafka-clients-3.5.0", "code": "Package: metrics\n\nSub Packages: \npackage metrics.stats; // Provides methods of statistically aggregating metrics upon emission.\n\nClasses and Interfaces: \nInterface CompoundStat; // A compound stat is a stat where a single measurement and associated data structure feeds many metrics.\nInterface Gauge<T>; // A gauge metric is an instantaneous reading of a particular value.\nInterface Measurable; // A measurable quantity that can be registered as a metric\nInterface MeasurableStat; // A MeasurableStat is a Stat that is also Measurable (i.e.\nInterface MetricsContext; // MetricsContext encapsulates additional contextLabels about metrics exposed via a MetricsReporter\nInterface MetricsReporter; // A plugin interface to allow things to listen as new metrics are created so they can be reported.\nInterface MetricValueProvider<T>; // Super-interface for Measurable or Gauge that provides metric values.\nInterface Stat; // A Stat is a quantity such as average, max, etc that is computed off the stream of updates to a sensor\nClass CompoundStat.NamedMeasurable;\nClass JmxReporter; // Register metrics in JMX as dynamic mbeans based on the metric names\nClass KafkaMetric;\nClass KafkaMetricsContext; // A implementation of MetricsContext, it encapsulates required metrics context properties for Kafka services and clients\nClass MetricConfig; // Configuration values for metrics\nClass Metrics; // A registry of sensors and metrics.\nClass Quota; // An upper or lower bound for metrics\nClass Sensor; // A sensor applies a continuous sequence of numerical values to a set of associated metrics.\nEnum Sensor.RecordingLevel;\nClass QuotaViolationException; // Thrown when a sensor records a value that causes a metric to go outside the bounds configured as its quota\n", "des": "Provides the API used by Kafka clients to emit metrics which are then exposed using the * MetricsReporter interface."}
{"index": 1924, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: flyway\n\nClasses and Interfaces: \n@AutoConfiguration(after={DataSourceAutoConfiguration.class,JdbcTemplateAutoConfiguration.class,HibernateJpaAutoConfiguration.class}) @ConditionalOnClass(org.flywaydb.core.Flyway.class) @Conditional(org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayDataSourceCondition.class) @ConditionalOnProperty(prefix=\"spring.flyway\", name=\"enabled\", matchIfMissing=true) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.FlywayAutoConfigurationRuntimeHints.class) public class FlywayAutoConfiguration extends Object; // Auto-configuration for Flyway database migrations.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.jdbc.support.JdbcUtils.class) @ConditionalOnMissingBean(org.flywaydb.core.Flyway.class) @EnableConfigurationProperties(FlywayProperties.class) public static class FlywayAutoConfiguration.FlywayConfiguration extends Object;\n@FunctionalInterface public interface FlywayConfigurationCustomizer; // Callback interface that can be implemented by beans wishing to customize the flyway configuration.\npublic interface FlywayConnectionDetails extends ConnectionDetails; // Details required for Flyway to establish a connection to an SQL service using JDBC.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface FlywayDataSource; // Qualifier annotation for a DataSource to be injected in to Flyway.\npublic class FlywayMigrationInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // InitializingBean used to trigger Flyway migration through the FlywayMigrationStrategy.\n@FunctionalInterface public interface FlywayMigrationStrategy; // Strategy used to initialize Flyway migration.\n@ConfigurationProperties(prefix=\"spring.flyway\") public class FlywayProperties extends Object; // Configuration properties for Flyway database migrations.\n", "des": "Auto-configuration for Flyway."}
{"index": 175, "repo": "ignite-core-2.15.0", "code": "Package: request\n\nClasses and Interfaces: \nClass DataStructuresRequest;\nClass GridRestAuthenticationRequest; // Grid authentication request.\nClass GridRestBaselineRequest; // Grid command topology request.\nClass GridRestCacheRequest; // Cache command request descriptor.\nClass GridRestChangeStateRequest;\nClass GridRestClusterNameRequest; // Grid command request of cluster name.\nClass GridRestClusterStateRequest;\nClass GridRestLogRequest; // Grid command request of log file.\nClass GridRestNodeStateBeforeStartRequest; // Request to manage and obtain information about node before its start.\nClass GridRestRequest; // Grid command request.\nClass GridRestTaskRequest; // Grid task command request.\nClass GridRestTopologyRequest; // Grid command topology request.\nClass GridRestWarmUpRequest; // Grid warm-up request.\nClass RestQueryRequest; // Sql query request.\nClass RestUserActionRequest; // User request.\nEnum RestQueryRequest.QueryType; // Supported query types.\n", "des": "REST requests."}
{"index": 2106, "repo": "spring-webflux-6.0.11", "code": "Package: script\n\nClasses and Interfaces: \npublic class RenderingContext extends Object; // Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side.\npublic interface ScriptTemplateConfig; // Interface to be implemented by objects that configure and manage a JSR-223 ScriptEngine for automatic lookup in a web environment.\npublic class ScriptTemplateConfigurer extends Object implements ScriptTemplateConfig; // An implementation of the Spring WebFlux ScriptTemplateConfig for creating a ScriptEngine for use in a web application.\npublic class ScriptTemplateView extends AbstractUrlBasedView; // An AbstractUrlBasedView subclass designed to run any template library based on a JSR-223 script engine.\npublic class ScriptTemplateViewResolver extends UrlBasedViewResolver; // Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it.\n", "des": "Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g."}
{"index": 1605, "repo": "spring-websocket-6.0.11", "code": "Package: handler\n\nClasses and Interfaces: \npublic abstract class AbstractHttpReceivingTransportHandler extends AbstractTransportHandler; // Base class for HTTP transport handlers that receive messages via HTTP POST.\npublic abstract class AbstractHttpSendingTransportHandler extends AbstractTransportHandler implements SockJsSessionFactory; // Base class for HTTP transport handlers that push messages to connected clients.\npublic abstract class AbstractTransportHandler extends Object implements TransportHandler; // Common base class for TransportHandler implementations.\npublic class DefaultSockJsService extends TransportHandlingSockJsService implements org.springframework.web.context.ServletContextAware; // A default implementation of SockJsService with all default TransportHandler implementations pre-registered.\npublic class EventSourceTransportHandler extends AbstractHttpSendingTransportHandler; // A TransportHandler for sending messages via Server-Sent Events: https://dev.w3.org/html5/eventsource/.\npublic class HtmlFileTransportHandler extends AbstractHttpSendingTransportHandler; // An HTTP TransportHandler that uses a famous browser document.domain technique.\npublic class SockJsWebSocketHandler extends TextWebSocketHandler implements SubProtocolCapable; // An implementation of WebSocketHandler that adds SockJS messages frames, sends SockJS heartbeat messages, and delegates lifecycle events and messages to a target WebSocketHandler.\npublic class WebSocketTransportHandler extends AbstractTransportHandler implements SockJsSessionFactory, HandshakeHandler, org.springframework.context.Lifecycle, org.springframework.web.context.ServletContextAware; // WebSocket-based TransportHandler.\npublic class XhrPollingTransportHandler extends AbstractHttpSendingTransportHandler; // A TransportHandler based on XHR (long) polling.\npublic class XhrReceivingTransportHandler extends AbstractHttpReceivingTransportHandler; // A TransportHandler that receives messages over HTTP.\npublic class XhrStreamingTransportHandler extends AbstractHttpSendingTransportHandler; // A TransportHandler that sends messages over an HTTP streaming request.\n", "des": "TransportHandler implementation classes as well as a concrete SockJsService."}
{"index": 2126, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "Package: util\n\nClasses and Interfaces: \npublic final class VersionExtractor extends Object; // Extracts version information for a Class.\n", "des": "Shared utility classes."}
{"index": 3570, "repo": "lucene-codecs-9.7.0", "code": "Package: uniformsplit\n\nSub Packages: \npackage uniformsplit.sharedterms; // Pluggable term index / block terms dictionary implementations.\n\nClasses and Interfaces: \nInterface BlockDecoder; // Decodes the raw bytes of a block when the index is read, according to the BlockEncoder used during the writing of the index.\nInterface BlockEncoder; // Encodes the raw bytes of a block when the index is written.\nInterface BlockEncoder.WritableBytes; // Writable byte buffer.\nInterface IndexDictionary; // Immutable stateless index dictionary kept in RAM.\nInterface IndexDictionary.Browser; // Stateful IndexDictionary.Browser to seek a term in this IndexDictionary and get its corresponding block file pointer in the block file.\nInterface IndexDictionary.BrowserSupplier; // Supplier for a new stateful IndexDictionary.Browser created on the immutable IndexDictionary.\nInterface IndexDictionary.Builder; // Builds an immutable IndexDictionary.\nClass BlockHeader; // Block header containing block metadata.\nClass BlockHeader.Serializer; // Reads/writes block header.\nClass BlockLine; // One term block line.\nClass BlockLine.Serializer; // Reads/writes block lines with terms encoded incrementally inside a block.\nClass BlockReader; // Seeks the block corresponding to a given term, read the block bytes, and scans the block terms.\nClass BlockWriter; // Writes blocks in the block file.\nClass DeltaBaseTermStateSerializer; // TermState serializer which encodes each file pointer as a delta relative to a base file pointer.\nClass FieldMetadata; // Metadata and stats for one field in the index.\nClass FieldMetadata.Serializer; // Reads/writes field metadata.\nClass FSTDictionary; // Immutable stateless FST-based index dictionary kept in memory.\nClass FSTDictionary.BrowserSupplier; // Provides stateful FSTDictionary.Browser to seek in the FSTDictionary.\nClass FSTDictionary.Builder; // Builds an immutable FSTDictionary.\nClass IntersectBlockReader; // The \"intersect\" TermsEnum response to UniformSplitTerms.intersect(CompiledAutomaton, BytesRef), intersecting the terms with an automaton.\nClass RamUsageUtil; // Utility methods to estimate the RAM usage of objects.\nClass TermBytes; // Term of a block line.\nClass UniformSplitPostingsFormat; // PostingsFormat based on the Uniform Split technique.\n", "des": "Pluggable term index / block terms dictionary implementations."}
{"index": 2515, "repo": "spring-security-core-6.1.2", "code": "Package: event\n\nClasses and Interfaces: \n@Deprecated public abstract class AbstractAuthorizationEvent extends org.springframework.context.ApplicationEvent;\n@Deprecated public class AuthenticationCredentialsNotFoundEvent extends AbstractAuthorizationEvent;\n@Deprecated public class AuthorizationFailureEvent extends AbstractAuthorizationEvent;\n@Deprecated public class AuthorizedEvent extends AbstractAuthorizationEvent;\n@Deprecated public class LoggerListener extends Object implements org.springframework.context.ApplicationListener<AbstractAuthorizationEvent>;\n@Deprecated public class PublicInvocationEvent extends AbstractAuthorizationEvent;\n", "des": "Authorization event and listener classes."}
{"index": 3148, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface DdlTransactionIsolator; // Provides access to a Connection that is isolated from any \"current transaction\" with the designed purpose of performing DDL commands\nInterface SynchronizationRegistry; // Manages a registry of (local) JTA Synchronization instances\nInterface SynchronizationRegistryImplementor; // SPI contract for SynchronizationRegistry implementors.\nInterface TransactionCoordinator; // Models the coordination of all transaction related flows.\nInterface TransactionCoordinator.TransactionDriver; // Provides the means for \"local transactions\" (as transaction drivers) to control the underlying \"physical transaction\" currently associated with the TransactionCoordinator.\nInterface TransactionCoordinatorBuilder; // Builder for TransactionCoordinator instances\nInterface TransactionCoordinatorBuilder.Options; // Access to options to are specific to each TransactionCoordinator instance\nInterface TransactionCoordinatorOwner; // Models an owner of a TransactionCoordinator.\nEnum TransactionStatus; // Enumeration of statuses in which a transaction facade (Transaction) might be.\n", "des": "Extended SPI contracts for the resource-level transaction capabilities of Hibernate."}
{"index": 3107, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: naming\n\nClasses and Interfaces: \nInterface EntityNaming;\nInterface ImplicitAnyDiscriminatorColumnNameSource; // Context for determining the implicit name for an ANY mapping's discriminator column.\nInterface ImplicitAnyKeyColumnNameSource; // Context for determining the implicit name for an ANY mapping's key column.\nInterface ImplicitBasicColumnNameSource; // Context for determining the implicit name related to basic values.\nInterface ImplicitCollectionTableNameSource; // Context for determining the implicit name for a collection table.\nInterface ImplicitConstraintNameSource; // Common implicit name source traits for all constraint naming: FK, UK, index\nInterface ImplicitDiscriminatorColumnNameSource; // Context for determining the implicit name of an entity's discriminator column.\nInterface ImplicitEntityNameSource; // Context for determining the implicit name of an entity's primary table\nInterface ImplicitForeignKeyNameSource;\nInterface ImplicitIdentifierColumnNameSource; // Context for determining the implicit name of an entity's identifier column.\nInterface ImplicitIndexColumnNameSource;\nInterface ImplicitIndexNameSource;\nInterface ImplicitJoinColumnNameSource; // Context for determining the implicit name of a \"join column\" (think JoinColumn).\nInterface ImplicitJoinTableNameSource; // Context for determining the implicit name for a join table.\nInterface ImplicitMapKeyColumnNameSource; // Context for determining the implicit name of a column used to back the key of a Map.\nInterface ImplicitNameSource; // Common contract for all implicit naming sources\nInterface ImplicitNamingStrategy; // Pluggable strategy for applying implicit naming rules when an explicit name is not given.\nInterface ImplicitPrimaryKeyJoinColumnNameSource; // Used to help determine the implicit name of columns which are part of a primary-key, well simultaneously being part of a foreign-key (join).\nInterface ImplicitTenantIdColumnNameSource; // Context for determining the implicit name of an entity's tenant identifier column.\nInterface ImplicitUniqueKeyNameSource;\nInterface NamingStrategyHelper; // Helper contract for dealing with naming strategies.\nInterface PhysicalNamingStrategy; // Pluggable strategy contract for applying physical naming rules for database object names.\nClass CamelCaseToUnderscoresNamingStrategy; // Originally copied from Spring Boot as this strategy is popular there (original name is SpringPhysicalNamingStrategy).\nClass DatabaseIdentifier; // Models an identifier (name), retrieved from the database.\nClass Identifier; // Models an identifier (name), which may or may not be quoted.\n", "des": "Represents a proposed new approach to allowing hooks into the process of determining the name of database objects (tables, columns, constraints, etc)."}
{"index": 3137, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: id\n\nSub Packages: \npackage id.persistent; // Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values.\n\nClasses and Interfaces: \nInterface AbstractMultiTableBulkIdStrategyImpl.PreparationContext;\nInterface IdTableInfo;\nInterface IdTableSupport;\nInterface MultiTableBulkIdStrategy; // Generalized strategy contract for handling multi-table bulk HQL operations.\nInterface MultiTableBulkIdStrategy.DeleteHandler; // Handler for dealing with multi-table HQL bulk delete statements.\nInterface MultiTableBulkIdStrategy.UpdateHandler; // Handler for dealing with multi-table HQL bulk update statements.\nClass AbstractIdsBulkIdHandler; // Base class for all strategies that select the ids to be updated/deleted prior to executing the update/delete operation.\nClass AbstractMultiTableBulkIdStrategyImpl<TT extends IdTableInfo,​CT extends AbstractMultiTableBulkIdStrategyImpl.PreparationContext>; // Convenience base class for MultiTableBulkIdStrategy implementations.\nClass AbstractTableBasedBulkIdHandler; // Convenience base class for MultiTableBulkIdStrategy.UpdateHandler and MultiTableBulkIdStrategy.DeleteHandler implementations through TableBasedUpdateHandlerImpl and TableBasedDeleteHandlerImpl respectively.\nClass AbstractTableBasedBulkIdHandler.ProcessedWhereClause;\nClass IdTableHelper;\nClass IdTableSupportStandardImpl;\nClass TableBasedDeleteHandlerImpl;\nClass TableBasedUpdateHandlerImpl;\n", "des": "Support for multi-table update and delete statements via id-tables."}
{"index": 3240, "repo": "opencms-core-15.0", "code": "Package: rpc\n\nClasses and Interfaces: \nInterface I_CmsContainerpageService; // The RPC service interface used by the container-page editor.\nInterface I_CmsContainerpageServiceAsync; // The RPC service asynchronous interface used by the container-page editor.\n", "des": "Contains the container page editor service interfaces."}
{"index": 3302, "repo": "opencms-core-15.0", "code": "Package: relations\n\nClasses and Interfaces: \nInterface I_CmsCustomLinkRenderer; // Interface used to inject custom link handling behavior into HTML/link content fields.\nInterface I_CmsLinkParseable; // This interface serves to retrieve all links from a given file by parsing.\nClass CmsCategory; // Represents a category, that is just a folder.\nClass CmsCategoryService; // Provides several simplified methods for manipulating category relations.\nClass CmsExternalLinksValidationResult; // Stores the result of a pointer link validation.\nClass CmsExternalLinksValidator; // Class to validate pointer links.\nClass CmsInternalLinksValidator; // Util class to find broken links in a bundle of resources.\nClass CmsInternalRelationsValidationJob; // A schedulable OpenCms job to validate internal relations.\nClass CmsLink; // A single link entry in the link table.\nClass CmsLinkInfo; // Immutable bean representing most of the information in a CmsLink.\nClass CmsLinkUpdateUtil; // An utility class for updating the link xml node.\nClass CmsRelation; // A relation between two opencms resources.\nClass CmsRelationDeleteValidator; // Util class to find broken links in a bundle of resources to be deleted.\nClass CmsRelationFilter; // A filter to retrieve the relations for a given resource.\nClass CmsRelationPublishValidator; // Util class to find broken links in a bundle of resources to be published.\nClass CmsRelationSystemValidator; // Validates relations of resources in the OpenCms VFS.\nClass CmsRelationType; // Wrapper class for the different types of relations.\nClass CmsRelationValidatorInfoEntry; // Relation validator entry information bean.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsRelationType.CopyBehavior; // Enum representing how relations should be handled while copying resources.\n", "des": "Classes to represent and validate the internal and external links/relations of resources in the OpenCms VFS."}
{"index": 592, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: debug\n\nClasses and Interfaces: \nInterface DebugOptions; // Used to get debug options settings and creating a new DebugTrace instance for a bundle to use for dynamic tracing.\nInterface DebugOptionsListener; // A debug options listener is notified whenever one of its plug-in option-path entries is changed.\nInterface DebugTrace; // A DebugTrace is used to record debug trace statements, based on the current option settings in a corresponding DebugOptions class.\n", "des": "Provides the DebugOptions service."}
{"index": 2386, "repo": "spring-batch-core-5.0.2", "code": "Package: explore\n\nSub Packages: \npackage explore.support; // Specific implementations of explorer concerns.\n\nClasses and Interfaces: \npublic interface JobExplorer; // Entry point for browsing the executions of running or historical jobs and steps.\n", "des": "Interfaces and related classes to support meta data browsing."}
{"index": 1946, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: jms\n\nSub Packages: \npackage jms.activemq; // Auto-configuration for ActiveMQ.\npackage jms.artemis; // Auto-configuration for Artemis.\n\nClasses and Interfaces: \npublic final class DefaultJmsListenerContainerFactoryConfigurer extends Object; // Configure DefaultJmsListenerContainerFactory with sensible defaults.\n@AutoConfiguration @ConditionalOnClass({jakarta.jms.Message.class,org.springframework.jms.core.JmsTemplate.class}) @ConditionalOnBean(jakarta.jms.ConnectionFactory.class) @EnableConfigurationProperties(JmsProperties.class) @Import(org.springframework.boot.autoconfigure.jms.JmsAnnotationDrivenConfiguration.class) public class JmsAutoConfiguration extends Object; // Auto-configuration for Spring JMS.\n@Configuration(proxyBeanMethods=false) protected static class JmsAutoConfiguration.JmsTemplateConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.jms.core.JmsMessagingTemplate.class) @Import(JmsTemplateConfiguration.class) protected static class JmsAutoConfiguration.MessagingTemplateConfiguration extends Object;\npublic class JmsPoolConnectionFactoryFactory extends Object; // Factory to create a JmsPoolConnectionFactory from properties defined in JmsPoolConnectionFactoryProperties.\npublic class JmsPoolConnectionFactoryProperties extends Object; // Configuration properties for connection factory pooling.\n@ConfigurationProperties(prefix=\"spring.jms\") public class JmsProperties extends Object; // Configuration properties for JMS.\npublic static enum JmsProperties.AcknowledgeMode extends Enum<JmsProperties.AcknowledgeMode>; // Translate the acknowledge modes defined on the Session.\npublic static class JmsProperties.Cache extends Object;\npublic static enum JmsProperties.DeliveryMode extends Enum<JmsProperties.DeliveryMode>;\npublic static class JmsProperties.Listener extends Object;\npublic static class JmsProperties.Template extends Object;\n", "des": "Auto-configuration for JMS."}
{"index": 3739, "repo": "lucene-queryparser-9.7.0", "code": "Package: processors\n\nClasses and Interfaces: \nClass BooleanModifiersQueryNodeProcessor; // This processor is used to apply the correct ModifierQueryNode to BooleanQueryNodes children.\nClass PrecedenceQueryNodeProcessorPipeline; // This processor pipeline extends StandardQueryNodeProcessorPipeline and enables boolean precedence on it.\n", "des": "Lucene Precedence Query Parser Processors"}
{"index": 22, "repo": "commons-collections4-4.4", "code": "Package: list\n\nClasses and Interfaces: \nClass AbstractLinkedList<E>; // An abstract implementation of a linked list which provides numerous points for subclasses to override.\nClass AbstractLinkedList.LinkedListIterator<E>; // A list iterator over the linked list.\nClass AbstractLinkedList.LinkedSubList<E>; // The sublist implementation for AbstractLinkedList.\nClass AbstractLinkedList.LinkedSubListIterator<E>; // A list iterator over the linked sub list.\nClass AbstractLinkedList.Node<E>; // A node within the linked list.\nClass AbstractListDecorator<E>; // Decorates another List to provide additional behaviour.\nClass AbstractSerializableListDecorator<E>; // Serializable subclass of AbstractListDecorator.\nClass CursorableLinkedList<E>; // A List implementation with a ListIterator that allows concurrent modifications to the underlying list.\nClass CursorableLinkedList.Cursor<E>; // An extended ListIterator that allows concurrent changes to the underlying list.\nClass CursorableLinkedList.SubCursor<E>; // A cursor for the sublist based on LinkedSubListIterator.\nClass FixedSizeList<E>; // Decorates another List to fix the size preventing add/remove.\nClass GrowthList<E>; // Decorates another List to make it seamlessly grow when indices larger than the list size are used on add and set, avoiding most IndexOutOfBoundsExceptions.\nClass LazyList<E>; // Decorates another List to create objects in the list on demand.\nClass NodeCachingLinkedList<E>; // A List implementation that stores a cache of internal Node objects in an effort to reduce wasteful object creation.\nClass PredicatedList<E>; // Decorates another List to validate that all additions match a specified predicate.\nClass SetUniqueList<E>; // Decorates a List to ensure that no duplicates are present much like a Set.\nClass TransformedList<E>; // Decorates another List to transform objects that are added.\nClass TreeList<E>; // A List implementation that is optimised for fast insertions and removals at any index in the list.\nClass UnmodifiableList<E>; // Decorates another List to ensure it can't be altered.\n", "des": "This package contains implementations of the List interface."}
{"index": 36, "repo": "ignite-core-2.15.0", "code": "Package: configuration\n\nClasses and Interfaces: \nInterface AddressResolver; // Provides resolution between external and internal addresses.\nInterface CommunicationFailureContext; // Communication Failure Context.\nInterface CommunicationFailureResolver; // Communication Failure Resolver.\nInterface ConnectorMessageInterceptor; // Interface for user-defined object interceptors.\nInterface PlatformConfiguration; // Platform configuration marker interface.\nInterface QueryEngineConfiguration; // Interface for the configuration of the query engine.\nInterface TopologyValidator; // Topology validator is used to verify that cluster topology is valid for further cache operations.\nInterface WarmUpConfiguration; // Warm-up configuration marker interface.\nClass AtomicConfiguration; // Configuration for atomic data structures.\nClass BasicAddressResolver; // Basic implementation of AddressResolver.\nClass BinaryConfiguration; // Configuration object for Ignite Binary Objects.\nClass CacheConfiguration<K,V>; // This class defines grid cache configuration.\nClass CacheConfiguration.IgniteAllNodesPredicate; // Filter that accepts all nodes.\nClass ClientConfiguration; // TcpIgniteClient configuration.\nClass ClientConnectorConfiguration; // Client connector configuration.\nClass ClientTransactionConfiguration; // Thin client transactions configuration.\nClass CollectionConfiguration; // Configuration for Ignite collections.\nClass ConnectorConfiguration; // REST access configuration.\nClass DataRegionConfiguration; // This class allows defining custom data regions' configurations with various parameters for Apache Ignite page memory (see DataStorageConfiguration.\nClass DataStorageConfiguration; // A durable memory configuration for an Apache Ignite node.\nClass DefaultCommunicationFailureResolver; // Default Communication Failure Resolver.\nClass EncryptionConfiguration; // Encryption configuration.\nClass ExecutorConfiguration; // Custom thread pool configuration for compute tasks.\nClass IgniteConfiguration; // This class defines grid runtime configuration.\nClass IgniteReflectionFactory<T>; // Factory implementation that use reflection to create instance of given class.\nClass LoadAllWarmUpConfiguration; // \"Load All\" warm-up configuration that loads data into persistent data region until it reaches DataRegionConfiguration.getMaxSize() with index priority.\nClass MemoryConfiguration; // Use DataStorageConfiguration instead.\nClass MemoryPolicyConfiguration; // Use DataRegionConfiguration instead.\nClass NearCacheConfiguration<K,V>; // Client (near) cache configuration.\nClass NoOpWarmUpConfiguration; // Noop warm-up configuration.\nClass OdbcConfiguration;\nClass PersistentStoreConfiguration; // Use DataStorageConfiguration instead.\n", "des": "Contains configuration-related classes."}
{"index": 2665, "repo": "spring-data-cassandra-4.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic abstract class AbstractCassandraQuery extends CassandraRepositoryQuerySupport; // Base class for RepositoryQuery implementations for Cassandra.\npublic abstract class AbstractReactiveCassandraQuery extends CassandraRepositoryQuerySupport; // Base class for reactive RepositoryQuery implementations for Cassandra.\npublic interface CassandraEntityInformation<T,ID> extends EntityInformation<T,ID>, CassandraEntityMetadata<T>; // Cassandra specific EntityInformation.\npublic interface CassandraEntityMetadata<T> extends EntityMetadata<T>; // Extension of EntityMetadata to additionally expose the table name an entity shall be persisted to.\npublic interface CassandraParameterAccessor extends ParameterAccessor; // Cassandra-specific ParameterAccessor exposing a Cassandra types that are supported by the driver and parameter type.\npublic class CassandraParameters extends Parameters<CassandraParameters,org.springframework.data.cassandra.repository.query.CassandraParameters.CassandraParameter>; // Custom extension of Parameters discovering additional properties of query method parameters.\npublic class CassandraParametersParameterAccessor extends ParametersParameterAccessor implements CassandraParameterAccessor; // Cassandra-specific ParameterAccessor exposing Cassandra types that are supported by the driver and parameter type.\npublic class CassandraQueryMethod extends QueryMethod; // Cassandra specific implementation of QueryMethod.\npublic abstract class CassandraRepositoryQuerySupport extends Object implements RepositoryQuery; // Base class for Cassandra RepositoryQuery implementations providing common infrastructure such as EntityInstantiators and QueryStatementCreator.\npublic class PartTreeCassandraQuery extends AbstractCassandraQuery; // RepositoryQuery implementation for Cassandra.\npublic class ReactiveCassandraQueryMethod extends CassandraQueryMethod; // Reactive specific implementation of CassandraQueryMethod.\npublic class ReactivePartTreeCassandraQuery extends AbstractReactiveCassandraQuery; // Reactive PartTree RepositoryQuery implementation for Cassandra.\npublic class ReactiveStringBasedCassandraQuery extends AbstractReactiveCassandraQuery; // String-based AbstractReactiveCassandraQuery implementation.\npublic class StringBasedCassandraQuery extends AbstractCassandraQuery; // String-based AbstractCassandraQuery implementation.\n", "des": "Query derivation mechanism for Apache Cassandra specific repositories."}
{"index": 3740, "repo": "lucene-queryparser-9.7.0", "code": "Package: standard\n\nSub Packages: \npackage standard.builders; // Standard Lucene Query Node Builders.\npackage standard.config; // Standard Lucene Query Configuration.\npackage standard.nodes; // Standard Lucene Query Nodes.\npackage standard.parser; // Lucene Query Parser\npackage standard.processors; // Lucene Query Node Processors.\n\nClasses and Interfaces: \nInterface CommonQueryParserConfiguration; // Configuration options common across queryparser implementations.\nClass QueryParserUtil; // This class defines utility methods to (help) parse query strings into Query objects.\nClass StandardQueryParser; // The StandardQueryParser is a pre-assembled query parser that supports most features of the classic Lucene query parser, allows dynamic configuration of some of its features (like multi-field expansion or wildcard query restrictions) and adds support for new query types and expressions.\n", "des": "Lucene Flexible Query Parser Implementation"}
{"index": 1796, "repo": "spring-integration-file-6.1.2", "code": "Package: transformer\n\nClasses and Interfaces: \npublic abstract class AbstractFilePayloadTransformer<T> extends Object implements org.springframework.integration.transformer.Transformer, org.springframework.beans.factory.BeanFactoryAware; // Base class for transformers that convert a File payload.\npublic class FileToByteArrayTransformer extends AbstractFilePayloadTransformer<byte[]>; // A payload transformer that copies a File's contents to a byte array.\npublic class FileToStringTransformer extends AbstractFilePayloadTransformer<String>; // A payload transformer that copies a File's contents to a String.\n", "des": "Provides classes supporting the transformation of file contents to messages."}
{"index": 2236, "repo": "spring-security-acl-6.1.2", "code": "Package: acls\n\nSub Packages: \npackage acls.afterinvocation; // After-invocation providers for collection and array filtering.\npackage acls.domain; // Basic implementation of access control lists (ACLs) interfaces.\npackage acls.jdbc; // JDBC-based persistence of ACL information\npackage acls.model; // Interfaces and shared classes to manage access control lists (ACLs) for domain object instances.\n\nClasses and Interfaces: \npublic class AclEntryVoter extends org.springframework.security.access.vote.AbstractAclVoter; // Given a domain object instance passed as a method argument, ensures the principal has appropriate permission as indicated by the AclService.\npublic class AclPermissionCacheOptimizer extends Object implements org.springframework.security.access.PermissionCacheOptimizer; // Batch loads ACLs for collections of objects to allow optimised filtering.\npublic class AclPermissionEvaluator extends Object implements org.springframework.security.access.PermissionEvaluator; // Used by Spring Security's expression-based access control implementation to evaluate permissions for a particular object using the ACL module.\n", "des": "The Spring Security ACL package which implements instance-based security for domain objects."}
{"index": 552, "repo": "hadoop-common-3.3.4", "code": "Package: fs\n\nSub Packages: \npackage fs.audit; // Public classes for adding information to any auditing information picked up by filesystem clients.\npackage fs.http; // Filesystem implementations that allow Hadoop to read directly from HTTP / HTTPS endpoints.\npackage fs.protocolPB; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage fs.sftp; // SFTP FileSystem package.\npackage fs.statistics; // This package contains support for statistic collection and reporting.\n\nClasses and Interfaces: \nInterface Abortable; // Abort data being written to a stream, so that close() does not write the data.\nInterface Abortable.AbortableResult; // Interface for the result of aborts; allows subclasses to extend (IOStatistics etc) or for future enhancements if ever needed.\nInterface BatchedRemoteIterator.BatchedEntries<E>;\nInterface BatchListingOperations; // Interface filesystems MAY implement to offer a batched list.\nInterface BlockStoragePolicySpi; // A storage policy specifies the placement of block replicas on specific storage types.\nInterface ByteBufferPositionedReadable; // Implementers of this interface provide a positioned read API that writes to a ByteBuffer rather than a byte[].\nInterface ByteBufferReadable; // Implementers of this interface provide a read API that writes to a ByteBuffer, not a byte[].\nInterface CanSetDropBehind;\nInterface CanSetReadahead;\nInterface CanUnbuffer; // FSDataInputStreams implement this interface to indicate that they can clear their buffers on request.\nInterface DelegationTokenRenewer.Renewable; // The renewable interface used by the renewer.\nInterface EtagSource; // An optional interface for FileStatus subclasses to implement to provide access to etags.\nInterface FSBuilder<S,B extends FSBuilder<S,B>>; // The base interface which various FileSystem FileContext Builder interfaces can extend, and which underlying implementations will then implement.\nInterface FsConstants; // FileSystem related constants.\nInterface FSProtos.FileStatusProtoOrBuilder;\nInterface FSProtos.FsPermissionProtoOrBuilder;\nInterface FSProtos.LocalFileSystemPathHandleProtoOrBuilder;\nInterface FutureDataInputStreamBuilder; // Builder for input streams and subclasses whose return value is actually a completable future: this allows for better asynchronous operation.\nInterface GetSpaceUsed;\n", "des": "An abstract file system API."}
{"index": 1896, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: autoconfigure\n\nSub Packages: \npackage autoconfigure.admin; // Auto-configuration for admin-related features.\npackage autoconfigure.amqp; // Auto-configuration for RabbitMQ.\npackage autoconfigure.aop; // Auto-configuration for Spring AOP.\npackage autoconfigure.availability; // Auto-configuration for application availability features.\npackage autoconfigure.batch; // Auto-configuration for Spring Batch.\npackage autoconfigure.cache; // Auto-configuration for the cache abstraction.\npackage autoconfigure.cassandra; // Auto-configuration for Cassandra.\npackage autoconfigure.codec; // Auto-configuration for reactive codecs.\npackage autoconfigure.condition; // @Condition annotations and supporting classes.\npackage autoconfigure.context; // Auto-configuration for the Spring context.\npackage autoconfigure.couchbase; // Auto-configuration for Couchbase.\npackage autoconfigure.dao; // Auto-configuration for Spring DAO.\npackage autoconfigure.data; // Auto-configuration base classes for Spring Data.\npackage autoconfigure.domain; // General purpose domain annotations and classes.\npackage autoconfigure.elasticsearch; // Auto-configuration for Elasticsearch client.\npackage autoconfigure.flyway; // Auto-configuration for Flyway.\npackage autoconfigure.freemarker; // Auto-configuration for FreeMarker.\npackage autoconfigure.graphql; // Auto-configuration for Spring GraphQL.\npackage autoconfigure.gson; // Auto-configuration for GSON.\npackage autoconfigure.h2; // Auto-configuration for H2's Console.\npackage autoconfigure.hateoas; // Auto-configuration for Spring HATEOAS.\npackage autoconfigure.hazelcast; // Auto-configuration for Hazelcast.\npackage autoconfigure.http; // Auto-configuration for HTTP concerns.\npackage autoconfigure.influx; // Auto-configuration for InfluxDB.\npackage autoconfigure.info; // Auto-configuration for project information.\npackage autoconfigure.integration; // Auto-configuration for Spring Integration.\npackage autoconfigure.jackson; // Auto-configuration for Jackson.\npackage autoconfigure.jdbc; // Auto-configuration for JDBC.\n\nClasses and Interfaces: \n", "des": "Spring Boot's auto-configuration capabilities."}
{"index": 1715, "repo": "spring-boot-test-3.1.1", "code": "Package: system\n\nClasses and Interfaces: \npublic interface CapturedOutput extends CharSequence; // Provides access to System.out and System.err output that has been captured by the OutputCaptureExtension or OutputCaptureRule.\npublic class OutputCaptureExtension extends Object implements org.junit.jupiter.api.extension.BeforeAllCallback, org.junit.jupiter.api.extension.AfterAllCallback, org.junit.jupiter.api.extension.BeforeEachCallback, org.junit.jupiter.api.extension.AfterEachCallback, org.junit.jupiter.api.extension.ParameterResolver; // JUnit Jupiter @Extension to capture System.out and System.err.\npublic class OutputCaptureRule extends Object implements org.junit.rules.TestRule, CapturedOutput; // JUnit @Rule to capture output from System.out and System.err.\n", "des": "Classes for System-related testing."}
{"index": 1909, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: data\n\nSub Packages: \npackage data.cassandra; // Auto-configuration for Spring Data Cassandra.\npackage data.couchbase; // Auto-configuration for Spring Data Couchbase.\npackage data.elasticsearch; // Auto-configuration for Spring Data Elasticsearch.\npackage data.jdbc; // Auto-configuration for Spring Data JDBC.\npackage data.jpa; // Auto-configuration for Spring Data JPA.\npackage data.ldap; // Auto-configuration for Spring Data LDAP.\npackage data.mongo; // Auto-configuration for Spring Data Mongo.\npackage data.neo4j; // Auto-configuration for Spring Data Neo4j.\npackage data.r2dbc; // Auto-Configuration for Spring Data R2DBC.\npackage data.redis; // Auto-configuration for Spring Data Redis.\npackage data.rest; // Auto-configuration for Spring Data REST.\npackage data.web; // Auto-configuration for Spring Data's Web Support.\n\nClasses and Interfaces: \npublic abstract class AbstractRepositoryConfigurationSourceSupport extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar, org.springframework.beans.factory.BeanFactoryAware, org.springframework.context.ResourceLoaderAware, org.springframework.context.EnvironmentAware; // Base ImportBeanDefinitionRegistrar used to auto-configure Spring Data Repositories.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.autoconfigure.data.OnRepositoryTypeCondition.class) public @interface ConditionalOnRepositoryType; // @Conditional that only matches when a particular type of Spring Data repository has been enabled.\npublic enum RepositoryType extends Enum<RepositoryType>; // Type of Spring Data repositories to enable.\n", "des": "Auto-configuration base classes for Spring Data."}
{"index": 2981, "repo": "pulsar-broker-3.0.0", "code": "Package: util\n\nClasses and Interfaces: \npublic class LogIndexLagBackoff extends Object;\n", "des": "Implementation of a transaction tools."}
{"index": 3608, "repo": "lucene-queries-9.7.0", "code": "Package: spans\n\nClasses and Interfaces: \nInterface SpanCollector; // An interface defining the collection of postings information from the leaves of a Spans\nClass FieldMaskingSpanQuery; // Wrapper to allow SpanQuery objects participate in composite single-field SpanQueries by 'lying' about their search field.\nClass FilterSpans; // A Spans implementation wrapping another spans instance, allowing to filter spans matches easily by implementing FilterSpans.accept(org.apache.lucene.queries.spans.Spans)\nClass NearSpansOrdered; // A Spans that is formed from the ordered subspans of a SpanNearQuery where the subspans do not overlap and have a maximum slop between them.\nClass NearSpansUnordered; // Similar to NearSpansOrdered, but for the unordered case.\nClass SpanContainingQuery; // Keep matches that contain another SpanScorer.\nClass SpanDisiWrapper; // Wrapper used in SpanDisiPriorityQueue.\nClass SpanFirstQuery; // Matches spans near the beginning of a field.\nClass SpanMultiTermQueryWrapper<Q extends MultiTermQuery>; // Wraps any MultiTermQuery as a SpanQuery, so it can be nested within other SpanQuery classes.\nClass SpanMultiTermQueryWrapper.SpanRewriteMethod; // Abstract class that defines how the query is rewritten.\nClass SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite; // A rewrite method that first translates each term into a SpanTermQuery in a BooleanClause.Occur.SHOULD clause in a BooleanQuery, and keeps the scores as computed by the query.\nClass SpanNearQuery; // Matches spans which are near one another.\nClass SpanNearQuery.Builder; // A builder for SpanNearQueries\nClass SpanNotQuery; // Removes matches which overlap with another SpanQuery or which are within x tokens before or y tokens after another SpanQuery.\nClass SpanOrQuery; // Matches the union of its clauses.\nClass SpanPositionCheckQuery; // Base class for filtering a SpanQuery based on the position of a match.\nClass SpanPositionRangeQuery; // Checks to see if the SpanPositionCheckQuery.getMatch() lies between a start and end position\nClass SpanQuery; // Base class for span-based queries.\nClass Spans; // Iterates through combinations of start/end positions per-doc.\nClass SpanScorer; // A basic Scorer over Spans.\n", "des": "The calculus of spans."}
{"index": 1306, "repo": "groovy-all-4.0.13", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic class MockProxyMetaClass extends ProxyMetaClass; // The ProxyMetaClass for the MockInterceptor.\n", "des": "The groovy.mock.interceptor is an all-groovy mock testing library."}
{"index": 1836, "repo": "spring-test-6.0.11", "code": "Package: context\n\nSub Packages: \npackage context.aot; // Ahead-of-time (AOT) support for the Spring TestContext Framework.\npackage context.cache; // Support for context caching within the Spring TestContext Framework.\npackage context.event; // Test event support classes for the Spring TestContext Framework.\npackage context.jdbc; // JDBC support classes for the Spring TestContext Framework, including support for declarative SQL script execution via @Sql.\npackage context.junit4; // Support classes for integrating the Spring TestContext Framework with JUnit 4.12 or higher.\npackage context.support; // Support classes for the Spring TestContext Framework.\npackage context.testng; // Support classes for integrating the Spring TestContext Framework with TestNG.\npackage context.transaction; // Transactional support classes for the Spring TestContext Framework.\npackage context.util; // Common utilities used within the Spring TestContext Framework.\npackage context.web; // Web support classes for the Spring TestContext Framework.\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface ActiveProfiles; // ActiveProfiles is a class-level annotation that is used to declare which active bean definition profiles should be used when loading an ApplicationContext for test classes.\n@FunctionalInterface public interface ActiveProfilesResolver; // Strategy interface for programmatically resolving which active bean definition profiles should be used when loading an ApplicationContext for a test class.\npublic interface ApplicationContextFailureProcessor; // Strategy for components that process failures related to application contexts within the Spring TestContext Framework.\npublic interface BootstrapContext; // BootstrapContext encapsulates the context in which the Spring TestContext Framework is bootstrapped.\npublic abstract class BootstrapUtils extends Object; // BootstrapUtils is a collection of utility methods to assist with bootstrapping the Spring TestContext Framework.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface BootstrapWith; // @BootstrapWith defines class-level metadata that is used to determine how to bootstrap the Spring TestContext Framework.\npublic interface CacheAwareContextLoaderDelegate; // A CacheAwareContextLoaderDelegate is responsible for loading and closing application contexts, interacting transparently with a ContextCache behind the scenes.\n", "des": "This package contains the Spring TestContext Framework which provides annotation-driven unit and integration testing support that is agnostic of the actual testing framework in use."}
{"index": 2511, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.web.server.OnManagementPortCondition.class) public @interface ConditionalOnManagementPort; // @Conditional that matches based on the configuration of the management port.\n@AutoConfiguration @AutoConfigureOrder(2147483647) @EnableConfigurationProperties({WebEndpointProperties.class,ManagementServerProperties.class}) public class ManagementContextAutoConfiguration extends Object; // Auto-configuration for the management context.\npublic enum ManagementPortType extends Enum<ManagementPortType>; // Port types that can be used to control how the management server is started.\n@ConfigurationProperties(prefix=\"management.server\", ignoreUnknownFields=true) public class ManagementServerProperties extends Object; // Properties for the management server (e.g.\npublic abstract class ManagementWebServerFactoryCustomizer<T extends org.springframework.boot.web.server.ConfigurableWebServerFactory> extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<T>, org.springframework.core.Ordered; // WebServerFactoryCustomizer that customizes the WebServerFactory used to create the management context's web server.\n", "des": "Actuator web server support."}
{"index": 2345, "repo": "spring-boot-3.1.1", "code": "Package: jetty\n\nClasses and Interfaces: \npublic interface ConfigurableJettyWebServerFactory extends ConfigurableWebServerFactory; // ConfigurableWebServerFactory for Jetty-specific features.\npublic class JettyReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableJettyWebServerFactory; // ReactiveWebServerFactory that can be used to create JettyWebServers.\n@FunctionalInterface public interface JettyServerCustomizer; // Callback interface that can be used to customize a Jetty Server.\npublic class JettyServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableJettyWebServerFactory, org.springframework.context.ResourceLoaderAware; // ServletWebServerFactory that can be used to create a JettyWebServer.\npublic class JettyWebServer extends Object implements WebServer; // WebServer that can be used to control a Jetty web server.\npublic class ServletContextInitializerConfiguration extends org.eclipse.jetty.webapp.AbstractConfiguration; // Jetty Configuration that calls ServletContextInitializers.\n", "des": "Embedded reactive and servlet web server implementations backed by Jetty."}
{"index": 254, "repo": "nutch-2.4", "code": "Package: basic\n\nClasses and Interfaces: \nClass BasicURLNormalizer; // Converts URLs to a normal form: remove dot segments in path: /./ or /../ remove default ports, e.g.\n", "des": "URL normalizer performing basic normalizations: remove default ports and dot segments in path."}
{"index": 642, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: manager\n\nClasses and Interfaces: \nInterface FederationPolicyManager; // Implementors need to provide the ability to serliaze a policy and its configuration as a SubClusterPolicyConfiguration, as well as provide (re)initialization mechanics for the underlying FederationAMRMProxyPolicy and FederationRouterPolicy.\nClass AbstractPolicyManager; // This class provides basic implementation for common methods that multiple policies will need to implement.\nClass HashBroadcastPolicyManager; // Policy that routes applications via hashing of their queuename, and broadcast resource requests.\nClass HomePolicyManager; // Policy manager which uses the UniformRandomRouterPolicy for the Router and HomeAMRMProxyPolicy as the AMRMProxy policy to find the RM.\nClass PriorityBroadcastPolicyManager; // Policy that allows operator to configure \"weights\" for routing.\nClass RejectAllPolicyManager; // This class represents a simple implementation of a FederationPolicyManager.\nClass UniformBroadcastPolicyManager; // This class represents a simple implementation of a FederationPolicyManager.\nClass WeightedLocalityPolicyManager; // Policy that allows operator to configure \"weights\" for routing.\n", "des": "Various implementation of FederationPolicyManager."}
{"index": 1824, "repo": "pulsar-client-original-3.0.0", "code": "Package: reader\n\nClasses and Interfaces: \npublic abstract class AbstractMultiVersionAvroBaseReader<T> extends AbstractMultiVersionReader<T>; // The abstract class of multi version avro base reader.\npublic abstract class AbstractMultiVersionReader<T> extends Object implements SchemaReader<T>; // The multi version reader abstract class, implement it will handle the multi version schema.\npublic class AvroReader<T> extends Object implements SchemaReader<T>;\npublic class JacksonJsonReader<T> extends Object implements SchemaReader<T>; // Reader implementation for reading objects from JSON.\n@Deprecated public class JsonReader<T> extends Object implements SchemaReader<T>;\npublic class MultiVersionAvroReader<T> extends AbstractMultiVersionAvroBaseReader<T>; // A multi version avro reader.\npublic class ProtobufNativeReader<T extends com.google.protobuf.GeneratedMessageV3> extends ProtobufReader<T>;\npublic class ProtobufReader<T extends com.google.protobuf.GeneratedMessageV3> extends Object implements SchemaReader<T>;\n", "des": "Pulsar Client schema reader."}
{"index": 1638, "repo": "spring-kafka-3.0.9", "code": "Package: micrometer\n\nClasses and Interfaces: \npublic enum KafkaListenerObservation extends Enum<KafkaListenerObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring for Apache Kafka Observation for listeners.\npublic static class KafkaListenerObservation.DefaultKafkaListenerObservationConvention extends Object implements KafkaListenerObservationConvention; // Default KafkaListenerObservationConvention for Kafka listener key values.\npublic static enum KafkaListenerObservation.ListenerLowCardinalityTags extends Enum<KafkaListenerObservation.ListenerLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface KafkaListenerObservationConvention extends io.micrometer.observation.ObservationConvention<KafkaRecordReceiverContext>; // ObservationConvention for Kafka listener key values.\npublic class KafkaRecordReceiverContext extends io.micrometer.observation.transport.ReceiverContext<org.apache.kafka.clients.consumer.ConsumerRecord<?,?>>; // ReceiverContext for ConsumerRecords.\npublic class KafkaRecordSenderContext extends io.micrometer.observation.transport.SenderContext<org.apache.kafka.clients.producer.ProducerRecord<?,?>>; // SenderContext for ProducerRecords.\npublic enum KafkaTemplateObservation extends Enum<KafkaTemplateObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring for Apache Kafka Observation for KafkaTemplate.\npublic static class KafkaTemplateObservation.DefaultKafkaTemplateObservationConvention extends Object implements KafkaTemplateObservationConvention; // Default KafkaTemplateObservationConvention for Kafka template key values.\npublic static enum KafkaTemplateObservation.TemplateLowCardinalityTags extends Enum<KafkaTemplateObservation.TemplateLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface KafkaTemplateObservationConvention extends io.micrometer.observation.ObservationConvention<KafkaRecordSenderContext>; // ObservationConvention for Kafka template key values.\npublic final class MicrometerHolder extends Object; // A wrapper for micrometer timers when available on the class path.\n", "des": "Provides classes to support Micrometer."}
{"index": 2274, "repo": "spring-vault-core-3.0.4", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractResult<V> extends Object; // Supporting class for computation results allowing introspection of the result value.\npublic class Certificate extends Object; // Value object representing a certificate consisting of the certificate and the issuer certificate.\npublic class CertificateBundle extends Certificate; // Value object representing a certificate bundle consisting of a private key, the certificate and the issuer certificate.\npublic class Ciphertext extends Object; // Value object representing cipher text with an optional VaultTransitContext.\npublic class ClientOptions extends Object; // Client options for Vault.\npublic class DurationParser extends Object; // Utility to parse a Go format duration into Duration.\npublic class Hmac extends Object; // Value object representing Hmac digest.\npublic abstract class JsonMapFlattener extends Object; // Flattens a hierarchical Map of objects into a property Map.\n@FunctionalInterface public interface LeaseStrategy; // Strategy interface to control whether to retain or drop a Lease after a failure.\npublic class PemObject extends Object; // Represents a PEM object that is internally decoded to a DER object.\npublic class Plaintext extends Object; // Value object representing plain text with an optional VaultTransitContext.\npublic class Policy extends Object; // Value object representing a Vault policy associated with Policy.Rules.\npublic static enum Policy.BuiltinCapabilities extends Enum<Policy.BuiltinCapabilities> implements Policy.Capability; // Built-in Vault capabilities.\npublic static interface Policy.Capability; // Capability interface representing capability literals.\npublic static class Policy.Rule extends Object; // Value object representing a rule for a certain path.\npublic static class Policy.Rule.RuleBuilder extends Object; // Builder for a Policy.Rule.\npublic interface RawTransitKey; // A exported raw key inside Vault's transit backend.\npublic class Signature extends Object; // Value object representing a Signature.\npublic class SignatureValidation extends Object; // Value object representing the result of a Signature validation.\npublic class SslConfiguration extends Object; // SSL configuration.\npublic static class SslConfiguration.KeyConfiguration extends Object; // Configuration for a key in a keystore.\npublic static class SslConfiguration.KeyStoreConfiguration extends Object; // Configuration for a key store/trust store.\npublic class TransformCiphertext extends Object; // Value object representing cipher text with an optional VaultTransformContext.\n", "des": "Classes supporting the Vault packages, such as value objects."}
{"index": 1499, "repo": "wicket-extensions-10.0.0-M1", "code": "Package: encoding\n\nClasses and Interfaces: \npublic final class CharSetMap extends Object; // This class maintains a set of mappers defining mappings between locales and the corresponding charsets.\npublic class CharSetUtil extends Object; // Utility class.\n", "des": "Encoding extensions."}
{"index": 934, "repo": "commons-compress-1.23.0", "code": "Package: forms\n\nClasses and Interfaces: \nClass ByteCodeForm;\nClass ByteForm; // This class implements the form for bytecodes which have single byte operands.\nClass ClassRefForm; // This class implements the byte code form for those bytecodes which have class references (and only class references).\nClass ClassSpecificReferenceForm; // Abstract superclass of all classes that have class-specific references to constant pool information.\nClass DoubleForm; // This class implements the byte code form for those bytecodes which have double references (and only double references).\nClass FieldRefForm; // This class implements the byte code form for those bytecodes which have field references (and only field references).\nClass FloatRefForm; // This class implements the byte code form for those bytecodes which have float references (and only float references).\nClass IincForm; // This class implements the byte code form for the iinc instruction.\nClass IMethodRefForm; // This class implements the byte code form for those bytecodes which have IMethod references (and only IMethod references).\nClass InitMethodReferenceForm; // Abstract superclass of those classes which look up init methods (these are class specific methods).\nClass IntRefForm; // This class implements the byte code form for those bytecodes which have int references (and only int references).\nClass LabelForm; // This class implements the byte code form for those bytecodes which have label references (and only label references).\nClass LocalForm; // This class implements the byte code form for those bytecodes which have float references (and only float references).\nClass LongForm; // This class implements the byte code form for those bytecodes which have long references (and only long references).\nClass LookupSwitchForm;\nClass MethodRefForm; // This class implements the byte code form for those bytecodes which have regular method references (and only regular method references).\nClass MultiANewArrayForm; // This class implements the byte code form for the multianewarray instruction.\nClass NarrowClassRefForm; // This class is used for representations of cldc and cldc_w.\nClass NewClassRefForm; // This class is an extension of the ClassRefForm.\nClass NewInitMethodRefForm; // This class is used to determine which init method should be called, based on the last class which was sent a constructor message.\n", "des": "Internal package."}
{"index": 1260, "repo": "spring-core-6.0.11", "code": "Package: beans\n\nClasses and Interfaces: \npublic abstract class BeanCopier extends Object;\npublic static class BeanCopier.Generator extends AbstractClassGenerator;\npublic class BeanGenerator extends AbstractClassGenerator;\npublic abstract class BeanMap extends Object implements Map; // A Map-based view of a JavaBean.\npublic static class BeanMap.Generator extends AbstractClassGenerator;\npublic abstract class BulkBean extends Object;\npublic static class BulkBean.Generator extends AbstractClassGenerator;\npublic class BulkBeanException extends RuntimeException;\npublic class FixedKeySet extends AbstractSet;\npublic class ImmutableBean extends Object;\npublic static class ImmutableBean.Generator extends AbstractClassGenerator;\n", "des": "Spring's repackaging of the CGLIB beans package (for internal use only)."}
{"index": 821, "repo": "commons-rng-simple-1.5", "code": "Package: internal\n\nClasses and Interfaces: \nInterface Seed2ArrayConverter<IN,OUT>; // Seed converter to create an output array type.\nInterface SeedConverter<IN,OUT>; // Seed converter.\nClass ByteArray2IntArray; // Creates a int[] from a byte[].\nClass ByteArray2LongArray; // Creates a long[] from a byte[].\nClass Int2Long; // Converts a Integer to an Long.\nClass IntArray2Int; // Creates a single value by \"xor\" of all the values in the input array.\nClass IntArray2LongArray; // Creates a long[] from an int[].\nClass Long2Int; // Converts a Long to an Integer.\nClass Long2IntArray; // Uses a long value to seed a SplitMix64 RNG and create a int[] with the requested number of random values.\nClass Long2LongArray; // Uses a Long value to seed a SplitMix64 RNG and create a long[] with the requested number of random values.\nClass LongArray2IntArray; // Creates an int[] from a long[].\nClass LongArray2Long; // Creates a single value by \"xor\" of all the values in the input array.\nClass NoOpConverter<SEED>; // Dummy converter that simply passes on its input.\nClass ProviderBuilder; // RNG builder.\nClass SeedConverterComposer<IN,TRANS,OUT>; // Composes two converters.\nClass SeedFactory; // Utilities related to seeding.\nEnum NativeSeedType; // The native seed type.\nEnum ProviderBuilder.RandomSourceInternal; // Identifiers of the generators.\n", "des": "Utilities for seed conversion."}
{"index": 3146, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface Getter; // The contract for getting value for a persistent property from its container/owner\nInterface PropertyAccess; // Describes access to a particular persistent property in terms of getting and setting values.\nInterface PropertyAccessStrategy; // Describes a strategy for persistent property access (field, JavaBean-style property, etc).\nInterface PropertyAccessStrategyResolver; // Contract for resolving the PropertyAccessStrategy to use.\nInterface Setter; // The contract for setting a persistent property value into its container/owner\nClass EnhancedGetterMethodImpl;\nClass EnhancedSetterImpl; // A specialized Setter implementation for handling setting values into a bytecode-enhanced Class.\nClass GetterFieldImpl; // Field-based implementation of Getter\nClass GetterMethodImpl;\nClass SetterFieldImpl; // Field-based implementation of Setter\nClass SetterMethodImpl;\nEnum BuiltInPropertyAccessStrategies; // Describes the built-in externally-nameable PropertyAccessStrategy implementations.\nClass PropertyAccessBuildingException; // Indicates a problem while building a PropertyAccess\nClass PropertyAccessException; // Indicates a problem reading or writing value from/to a persistent property.\nClass PropertyAccessSerializationException;\n", "des": "Defines strategies for accessing the persistent properties of an entity or composite."}
{"index": 362, "repo": "commons-geometry-euclidean-1.0", "code": "Package: internal\n\nClasses and Interfaces: \nClass AbstractPathConnector<E extends AbstractPathConnector.ConnectableElement<E>>; // Abstract base class for joining unconnected path elements into connected, directional paths.\nClass AbstractPathConnector.ConnectableElement<E extends AbstractPathConnector.ConnectableElement<E>>; // Class used to represent connectable path elements for use with AbstractPathConnector.\nClass EuclideanUtils; // Class containing utilities and algorithms intended to be internal to the library.\nClass Matrices; // This class consists exclusively of static matrix utility methods.\nClass Vectors; // This class consists exclusively of static vector utility methods.\n", "des": "This package contains Euclidean geometry utilities and classes intended for internal use only."}
{"index": 1266, "repo": "spring-core-6.0.11", "code": "Package: impl\n\nClasses and Interfaces: \npublic class AbstractInterceptFieldCallback extends Object implements InterceptFieldCallback;\npublic class AccessFieldTransformer extends ClassEmitterTransformer;\npublic static interface AccessFieldTransformer.Callback;\npublic class AddDelegateTransformer extends ClassEmitterTransformer;\npublic class AddInitTransformer extends ClassEmitterTransformer;\npublic class AddPropertyTransformer extends ClassEmitterTransformer;\npublic class AddStaticInitTransformer extends ClassEmitterTransformer;\npublic interface FieldProvider;\npublic class FieldProviderTransformer extends ClassEmitterTransformer;\npublic interface InterceptFieldCallback;\npublic interface InterceptFieldEnabled;\npublic interface InterceptFieldFilter;\npublic class InterceptFieldTransformer extends ClassEmitterTransformer;\npublic class UndeclaredThrowableStrategy extends DefaultGeneratorStrategy; // A GeneratorStrategy suitable for use with Enhancer which causes all undeclared exceptions thrown from within a proxied method to be wrapped in an alternative exception of your choice.\npublic class UndeclaredThrowableTransformer extends ClassEmitterTransformer;\n", "des": "Spring's repackaging of the CGLIB transform impl package (for internal use only)."}
{"index": 3072, "repo": "spring-ws-core-4.0.5", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class NamespaceUtils extends Object; // Helper class for handling @Namespace annotations.\npublic abstract class PayloadRootUtils extends Object; // Helper class for determining the root qualified name of a Web Service payload.\n", "des": "Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations."}
{"index": 60, "repo": "ignite-core-2.15.0", "code": "Package: client\n\nClasses and Interfaces: \nInterface ClientAddressFinder; // This interface provides a list of addresses of Ignite server nodes within a cluster.\nInterface ClientAtomicLong; // Distributed atomic long API.\nInterface ClientAutoCloseableIterator<T>; // Auto closeable iterator.\nInterface ClientCache<K,V>; // Thin client cache.\nInterface ClientCluster; // Thin client cluster facade.\nInterface ClientClusterGroup; // Thin client cluster group facade.\nInterface ClientCompute; // Thin client compute facade.\nInterface ClientDisconnectListener; // Client disconnected event listener.\nInterface ClientIgniteSet<T>; // Distributed Set.\nInterface ClientPartitionAwarenessMapper; // This function calculates the cache key to a partition mapping for each cache key.\nInterface ClientPartitionAwarenessMapperFactory; // This factory is used on the client side and only when the partition awareness thin client feature is enabled.\nInterface ClientRetryPolicy; // Client retry policy determines whether client operations that have failed due to a connection issue should be retried.\nInterface ClientRetryPolicyContext; // Retry policy context.\nInterface ClientServiceDescriptor; // Descriptor of Service.\nInterface ClientServices; // Thin client services facade.\nInterface ClientTransaction; // Thin client transaction.\nInterface ClientTransactions; // Thin client transactions facade.\nInterface IgniteClient; // Ignite thin client.\nInterface IgniteClientFuture<T>; // Thin client async operations future.\nClass ClientAtomicConfiguration; // Configuration for atomic data structures.\nClass ClientCacheConfiguration; // Cache configuration.\nClass ClientCollectionConfiguration; // Configuration for Ignite collections.\nClass ClientRetryAllPolicy; // Retry policy that always returns true.\nClass ClientRetryNonePolicy; // Retry policy that always returns false.\nClass ClientRetryReadPolicy; // Retry policy that returns true for all read-only operations that do not modify data.\nEnum ClientOperationType; // Client operation type.\nEnum SslMode; // SSL/TLS modes.\nEnum SslProtocol; // SSL Protocol.\nClass ClientAuthenticationException; // Indicates user name or password is invalid.\nClass ClientAuthorizationException; // Indicates user has no permission to perform operation.\nClass ClientConnectionException; // Indicates all the Ignite servers specified in the client configuration are no longer available.\nClass ClientException; // Common thin client unchecked exception.\n", "des": "Contains Ignite Thin Client API classes."}
{"index": 2936, "repo": "groovy-4.0.13", "code": "Package: typehandling\n\nClasses and Interfaces: \npublic final class BigDecimalMath extends NumberMath; // BigDecimal NumberMath operations\npublic final class BigIntegerMath extends NumberMath; // BigInteger NumberMath operations\npublic class DefaultTypeTransformation extends Object; // Class providing various type conversions, coercions and boxing/unboxing operations.\npublic final class FloatingPointMath extends NumberMath; // FloatingPoint (Double and Float) NumberMath operations\npublic class GroovyCastException extends ClassCastException;\npublic final class IntegerMath extends NumberMath; // Integer NumberMath operations\npublic final class LongMath extends NumberMath; // Long NumberMath operations\npublic abstract class NumberMath extends Object; // Stateless objects used to perform math on the various Number subclasses.\npublic class NumberMathModificationInfo extends Object;\npublic class ShortTypeHandling extends Object; // Class providing various short paths for type conversions.\n", "des": "Classes used to execute special actions based on the type."}
{"index": 1889, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: text\n\nClasses and Interfaces: \npublic class IniRealm extends TextConfigurationRealm; // A Realm implementation that creates SimpleAccount instances based on Ini configuration.\npublic class PropertiesRealm extends TextConfigurationRealm implements org.apache.shiro.lang.util.Destroyable, Runnable; // A TextConfigurationRealm that defers all logic to the parent class, but just enables Properties based configuration in addition to the parent class's String configuration.\npublic class TextConfigurationRealm extends SimpleAccountRealm; // A SimpleAccountRealm that enables text-based configuration of the initial User, Role, and Permission objects created at startup.\n", "des": "Realms that acquire security data from text-based data sources such as Files or text streams."}
{"index": 1029, "repo": "hadoop-aws-3.3.6", "code": "Package: files\n\nClasses and Interfaces: \nClass PendingSet; // Persistent format for multiple pending commits.\nClass PersistentCommitData<T extends PersistentCommitData>; // Class for single/multiple commit data structures.\nClass SinglePendingCommit; // This is the serialization format for uploads yet to be committed.\nClass SuccessData; // Summary data saved into a _SUCCESS marker file.\n", "des": "Persistent data formats for the committers."}
{"index": 1118, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: launcher\n\nClasses and Interfaces: \nInterface AbstractContainersLauncher; // Pluggable ContainersLauncher interface for processing ContainersLauncherEvents.\nClass ContainerCleanup; // Cleanup the container.\nClass ContainerLaunch;\nClass ContainerLaunch.ShellScriptBuilder;\nClass ContainerRelaunch; // Relaunch container.\nClass ContainersLauncher; // The launcher for the containers.\nClass ContainersLauncherEvent;\nClass RecoveredContainerLaunch; // This is a ContainerLaunch which has been recovered after an NM restart (for rolling upgrades).\nClass RecoverPausedContainerLaunch; // This is a ContainerLaunch which has been recovered after an NM restart for pause containers (for rolling upgrades)\nClass SignalContainersLauncherEvent;\nEnum ContainersLauncherEventType;\n", "des": "This package contains classes related to NM container launch."}
{"index": 943, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: destination\n\nClasses and Interfaces: \nInterface DestinationProvider; // Strategy interface for providing a WebServiceTemplate destination URI at runtime.\nClass AbstractCachingDestinationProvider; // Abstract base class for DestinationProvider implementations that cache destination URI.\nClass Wsdl11DestinationProvider; // Implementation of the DestinationProvider that resolves a destination URI from a WSDL file.\nClass DestinationProvisionException; // Thrown by a DestinationProvider when it cannot provide a destination.\n", "des": "Provides the DestinationProvider interface."}
{"index": 1194, "repo": "commons-math3-3.6.1", "code": "Package: univariate\n\nClasses and Interfaces: \nClass BracketFinder; // Provide an interval that brackets a local optimum of a function.\nClass BrentOptimizer; // For a function defined on some interval (lo, hi), this class finds an approximation x to the point at which the function attains its minimum.\nClass MultiStartUnivariateOptimizer; // Special implementation of the UnivariateOptimizer interface adding multi-start features to an existing optimizer.\nClass SearchInterval; // Search interval and (optional) start value.\nClass SimpleUnivariateValueChecker; // Simple implementation of the ConvergenceChecker interface that uses only objective function values.\nClass UnivariateObjectiveFunction; // Scalar function to be optimized.\nClass UnivariateOptimizer; // Base class for a univariate scalar function optimizer.\nClass UnivariatePointValuePair; // This class holds a point and the value of an objective function at this point.\n", "des": "One-dimensional optimization algorithms."}
{"index": 1294, "repo": "spring-core-6.0.11", "code": "Package: concurrent\n\nClasses and Interfaces: \n@Deprecated(since=\"6.0\") public class CompletableToListenableFutureAdapter<T> extends Object implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") @FunctionalInterface public interface FailureCallback;\n@Deprecated(since=\"6.0\") public abstract class FutureAdapter<T,S> extends Object implements Future<T>;\npublic abstract class FutureUtils extends Object; // Convenience utilities for working with Future and implementations.\n@Deprecated(since=\"6.0\") public interface ListenableFuture<T> extends Future<T>;\n@Deprecated(since=\"6.0\") public abstract class ListenableFutureAdapter<T,S> extends FutureAdapter<T,S> implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") public interface ListenableFutureCallback<T> extends SuccessCallback<T>, FailureCallback;\n@Deprecated(since=\"6.0\") public class ListenableFutureCallbackRegistry<T> extends Object;\n@Deprecated(since=\"6.0\") public class ListenableFutureTask<T> extends FutureTask<T> implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") public class MonoToListenableFutureAdapter<T> extends CompletableToListenableFutureAdapter<T>;\n@Deprecated(since=\"6.0\") public class SettableListenableFuture<T> extends Object implements ListenableFuture<T>;\n@Deprecated(since=\"6.0\") @FunctionalInterface public interface SuccessCallback<T>;\n", "des": "Useful generic java.util.concurrent.Future extensions."}
{"index": 925, "repo": "commons-compress-1.23.0", "code": "Package: pack200\n\nClasses and Interfaces: \nClass Pack200CompressorInputStream; // An input stream that decompresses from the Pack200 format to be read as any other stream.\nClass Pack200CompressorOutputStream; // An output stream that compresses using the Pack200 format.\nClass Pack200Utils; // Utility methods for Pack200.\nEnum Pack200Strategy; // The different modes the Pack200 streams can use to wrap input and output.\n", "des": "Provides stream classes for compressing and decompressing streams using the Pack200 algorithm used to compress Java archives."}
{"index": 1879, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: concurrent\n\nClasses and Interfaces: \npublic class SubjectAwareExecutor extends Object implements Executor; // Executor implementation that will automatically first associate any argument Runnable instances with the currently available Subject and then dispatch the Subject-enabled runnable to an underlying delegate Executor instance.\npublic class SubjectAwareExecutorService extends SubjectAwareExecutor implements ExecutorService; // ExecutorService implementation that will automatically first associate any argument Runnable or Callable instances with the currently available subject and then dispatch the Subject-enabled runnable or callable to an underlying delegate ExecutorService instance.\npublic class SubjectAwareScheduledExecutorService extends SubjectAwareExecutorService implements ScheduledExecutorService; // Same concept as the SubjectAwareExecutorService but additionally supports the ScheduledExecutorService interface.\n", "des": "Executor, ExecutorService, and ScheduledExecutorService implementations for transparent Subject association with threads in an asynchronous execution environment."}
{"index": 2265, "repo": "spring-vault-core-3.0.4", "code": "Package: event\n\nClasses and Interfaces: \npublic class AfterSecretLeaseRenewedEvent extends SecretLeaseEvent; // Event published after renewing a Lease for a RequestedSecret.\npublic class AfterSecretLeaseRevocationEvent extends SecretLeaseEvent; // Event published after revoking a Lease for a RequestedSecret.\npublic class BeforeSecretLeaseRevocationEvent extends SecretLeaseEvent; // Event published before revoking a Lease for a RequestedSecret.\n@FunctionalInterface public interface LeaseErrorListener; // Listener for Vault exceptional SecretLeaseEvents.\n@FunctionalInterface public interface LeaseListener; // Listener for Vault SecretLeaseEvents.\npublic abstract class LeaseListenerAdapter extends Object implements LeaseListener, LeaseErrorListener; // Empty listener adapter implementing LeaseListener and LeaseErrorListener.\npublic class SecretLeaseCreatedEvent extends SecretLeaseEvent; // Event published after obtaining secrets potentially associated with a Lease.\npublic class SecretLeaseErrorEvent extends SecretLeaseEvent; // Event published when caught an Exception during secret retrieval and lease interaction.\npublic abstract class SecretLeaseEvent extends ApplicationEvent; // Abstract base class for Lease based events associated with RequestedSecret.\npublic class SecretLeaseExpiredEvent extends SecretLeaseEvent; // Event published after an expired Lease for a RequestedSecret was observed.\npublic class SecretLeaseRotatedEvent extends SecretLeaseCreatedEvent; // Event published after rotating secrets.\npublic class SecretNotFoundEvent extends SecretLeaseEvent; // Event published after secrets could not be found for a RequestedSecret.\n", "des": "Support classes for lease application events."}
{"index": 3343, "repo": "opencms-core-15.0", "code": "Package: fileselect\n\nClasses and Interfaces: \nInterface I_CmsSelectionHandler<T>; // Handles selection of a generic type T.\nClass A_CmsFileSelectField<T>; // Abstract file select field.\nClass CmsNavigationFilter; // Filter used to hide folder tree items which are not either navigation items themselves or are required to navigate from the site root to a navigation item.\nClass CmsPathSelectField; // File path select field.\nClass CmsResourceSelectDialog; // Dialog with a site selector and file tree which can be used to select resources.\nClass CmsResourceSelectDialog.Options; // Class for site select options.\nClass CmsResourceSelectDialogContents; // Contents of the resource select dialog, filled using the declarative layout mechanism.\nClass CmsResourceTreeContainer; // The data container for the sitmeap folder selection tree.\nClass CmsResourceTreeTable; // Tree subclass used to display VFS resource trees.\nClass CmsResourceTreeTable.FileSorter; // Extends the default sorting to differentiate between files and folder when sorting by name.\n", "des": "Contains components for selecting resources."}
{"index": 720, "repo": "commons-codec-1.16.0", "code": "Package: cli\n\nClasses and Interfaces: \nClass Digest; // A minimal command line to run digest over files, directories or a string.\n", "des": "Command line utility."}
{"index": 2660, "repo": "spring-data-cassandra-4.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic class CassandraPageRequest extends PageRequest; // Cassandra-specific PageRequest implementation providing access to paging state.\npublic abstract class ColumnName extends Object; // Value object representing a column name.\npublic class Columns extends Object implements Iterable<ColumnName>; // Value object to abstract column names involved in a CQL query.\npublic static class Columns.ColumnSelector extends Object implements Columns.Selector; // Column selection.\npublic static class Columns.FunctionCall extends Object implements Columns.Selector; // Function call selector with alias support.\npublic static interface Columns.Selector; // Strategy interface to render a column selection.\npublic class Criteria extends Object implements CriteriaDefinition; // Basic class for creating queries.\npublic interface CriteriaDefinition; // Criteria definition for a ColumnName exposing a CriteriaDefinition.Predicate.\npublic static interface CriteriaDefinition.Operator; // Strategy interface to represent a CQL predicate operator.\npublic static enum CriteriaDefinition.Operators extends Enum<CriteriaDefinition.Operators> implements CriteriaDefinition.Operator; // Commonly used CQL operators.\npublic static class CriteriaDefinition.Predicate extends Object; // Represents an operator associated with its value.\n@FunctionalInterface public interface Filter extends Streamable<CriteriaDefinition>; // Filter consisting of CriteriaDefinitions to be used with SELECT, UPDATE and DELETE queries.\npublic class Query extends Object implements Filter; // Query object representing CriteriaDefinitions, Columns, Sort, paging state and QueryOptions for a CQL query.\npublic class Update extends Object; // Update object representing a set of update operations.\npublic static interface Update.AddToBuilder; // Builder to add a single element/multiple elements to a collection associated with a ColumnName.\npublic static class Update.AddToMapOp extends Update.AssignmentOp; // Add element(s) to Map operation.\npublic static class Update.AddToOp extends Update.AssignmentOp; // Add element(s) to collection operation.\npublic static enum Update.AddToOp.Mode extends Enum<Update.AddToOp.Mode>;\npublic abstract static class Update.AssignmentOp extends Object; // Abstract class for an update assignment related to a specific ColumnName.\npublic static class Update.IncrOp extends Update.AssignmentOp; // Increment operation.\npublic static interface Update.RemoveFromBuilder; // Builder to remove a single element/multiple elements from a collection associated with a ColumnName.\n", "des": "Apache Cassandra specific query and update support."}
{"index": 2971, "repo": "pulsar-broker-3.0.0", "code": "Package: impl\n\nClasses and Interfaces: \npublic class InMemTransactionBufferProvider extends Object implements TransactionBufferProvider; // A provider that provides in-memory implementations of TransactionBuffer.\npublic class InMemTransactionBufferReader extends Object implements TransactionBufferReader; // A TransactionBufferReader implementation that reads entries from InMemTransactionBuffer.\npublic class SingleSnapshotAbortedTxnProcessorImpl extends Object implements AbortedTxnProcessor;\npublic class SnapshotSegmentAbortedTxnProcessorImpl extends Object implements AbortedTxnProcessor;\npublic static enum SnapshotSegmentAbortedTxnProcessorImpl.PersistentWorker.OperationType extends Enum<SnapshotSegmentAbortedTxnProcessorImpl.PersistentWorker.OperationType>;\npublic class TopicTransactionBuffer extends TopicTransactionBufferState implements TransactionBuffer, io.netty.util.TimerTask; // Transaction buffer based on normal persistent topic.\npublic static class TopicTransactionBuffer.TopicTransactionBufferRecover extends Object implements Runnable;\npublic class TopicTransactionBufferProvider extends Object implements TransactionBufferProvider; // A provider that provides topic implementations of TransactionBuffer.\npublic interface TopicTransactionBufferRecoverCallBack;\npublic abstract class TopicTransactionBufferState extends Object; // The implement of topic transaction buffer state.\npublic static enum TopicTransactionBufferState.State extends Enum<TopicTransactionBufferState.State>; // The state of the topicTransactionBuffer TopicTransactionBuffer.\npublic class TransactionBufferClientImpl extends Object implements org.apache.pulsar.client.api.transaction.TransactionBufferClient; // The implementation of TransactionBufferClient.\npublic final class TransactionBufferClientStatsImpl extends Object implements TransactionBufferClientStats;\npublic class TransactionBufferDisable extends Object implements TransactionBuffer; // Transaction buffer disable.\npublic class TransactionBufferHandlerImpl extends Object implements TransactionBufferHandler;\npublic static final class TransactionBufferHandlerImpl.OpRequestSend extends Object;\npublic class TransactionEntryImpl extends Object implements TransactionEntry; // A simple implementation of TransactionEntry.\n", "des": "The implementation of a transaction buffer."}
{"index": 2197, "repo": "spring-data-commons-3.1.2", "code": "Package: auditing\n\nSub Packages: \npackage auditing.config; // Types to abstract authentication concepts.\n\nClasses and Interfaces: \npublic interface AuditableBeanWrapper<T>; // Interface to abstract the ways setting the auditing information can be implemented.\npublic interface AuditableBeanWrapperFactory; // A factory to lookup AuditableBeanWrappers.\npublic class AuditingHandler extends AuditingHandlerSupport implements InitializingBean; // Auditing handler to mark entity objects created and modified.\npublic abstract class AuditingHandlerSupport extends Object; // Support class to implement auditing handlers.\npublic enum CurrentDateTimeProvider extends Enum<CurrentDateTimeProvider> implements DateTimeProvider; // Default DateTimeProvider simply creating new LocalDateTime instances for each method call.\npublic interface DateTimeProvider; // SPI to calculate the current time to be used when auditing.\npublic class IsNewAwareAuditingHandler extends AuditingHandler; // AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic IsNewAwareAuditingHandler.markAudited(Object) method that will route calls to AuditingHandler.markCreated(Object) or AuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory.\npublic class MappingAuditableBeanWrapperFactory extends Object; // AuditableBeanWrapperFactory that will create am AuditableBeanWrapper using mapping information obtained from a MappingContext to detect auditing configuration and eventually invoking setting the auditing values.\npublic class ReactiveAuditingHandler extends AuditingHandlerSupport; // Auditing handler to mark entity objects created and modified.\npublic class ReactiveIsNewAwareAuditingHandler extends ReactiveAuditingHandler; // AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic ReactiveIsNewAwareAuditingHandler.markAudited(Object) method that will route calls to ReactiveAuditingHandler.markCreated(Object) or ReactiveAuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory.\n", "des": "General support for entity auditing."}
{"index": 3843, "repo": "lucene-core-9.7.0", "code": "Package: perfield\n\nClasses and Interfaces: \nClass PerFieldDocValuesFormat; // Enables per field docvalues support.\nClass PerFieldKnnVectorsFormat; // Enables per field numeric vector support.\nClass PerFieldKnnVectorsFormat.FieldsReader; // VectorReader that can wrap multiple delegate readers, selected by field.\nClass PerFieldPostingsFormat; // Enables per field postings support.\n", "des": "Postings format that can delegate to different formats per-field."}
{"index": 697, "repo": "jackson-databind-2.15.2", "code": "Package: util\n\nSub Packages: \npackage util.internal; // This package contains an implementation of a bounded ConcurrentMap data structure.\n\nClasses and Interfaces: \nInterface Annotations; // Interface that defines interface for accessing contents of a collection of annotations.\nInterface Converter<IN,OUT>; // Helper interface for things that convert Objects of one type to another.\nInterface LookupCache<K,V>; // An interface describing the required API for the Jackson-databind Type cache.\nInterface Named; // Simple tag interface mostly to allow sorting by name.\nClass ArrayBuilders; // Helper class that contains set of distinct builders for different arrays of primitive values.\nClass ArrayBuilders.BooleanBuilder;\nClass ArrayBuilders.ByteBuilder;\nClass ArrayBuilders.DoubleBuilder;\nClass ArrayBuilders.FloatBuilder;\nClass ArrayBuilders.IntBuilder;\nClass ArrayBuilders.LongBuilder;\nClass ArrayBuilders.ShortBuilder;\nClass ArrayIterator<T>; // Iterator implementation used to efficiently expose contents of an Array as read-only iterator.\nClass BeanUtil; // Helper class that contains functionality needed by both serialization and deserialization side.\nClass ByteBufferBackedInputStream; // Simple InputStream implementation that exposes currently available content of a ByteBuffer.\nClass ByteBufferBackedOutputStream; // Simple OutputStream implementation that appends content written in given ByteBuffer instance.\nClass ClassUtil;\nClass ClassUtil.Ctor; // Value class used for caching Constructor declarations; used because caching done by JDK appears to be somewhat inefficient for some use cases.\nClass CompactStringObjectMap; // Specialized lookup class that implements functionality similar to Map, but for special case of key always being String and using more compact (and memory-access friendly) hashing scheme.\nClass Converter.None; // This marker class is only to be used with annotations, to indicate that no converter is to be used.\nClass EnumResolver; // Helper class used to resolve String values (either JSON Object field names or regular String values) into Java Enum instances.\nClass EnumValues; // Helper class used for storing String serializations of Enums, to match to/from external representations.\nClass ExceptionUtil; // Utility methods for dealing with exceptions/throwables\nClass IgnorePropertiesUtil;\nClass IgnorePropertiesUtil.Checker; // Helper class to encapsulate logic from static shouldIgnore method of util class.\nClass ISO8601DateFormat; // Use StdDateFormat instead\n", "des": "Utility classes for Mapper package."}
{"index": 2491, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,ObservationAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({org.springframework.web.servlet.DispatcherServlet.class,io.micrometer.observation.Observation.class}) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class WebMvcObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring Web MVC servlet-based request mappings.\n", "des": "Auto-configuration for Spring MVC observation support."}
{"index": 3643, "repo": "solr-core-9.3.0", "code": "Package: impl\n\nClasses and Interfaces: \nClass ClusterEventProducerFactory; // This class helps in handling the initial registration of plugin-based listeners, when both the final ClusterEventProducer implementation and listeners are configured using plugins.\nClass CollectionsRepairEventListener; // This is an illustration how to re-implement the combination of Solr 8x NodeLostTrigger and AutoAddReplicasPlanAction to maintain the collection's replicas when nodes are lost.\nClass DefaultClusterEventProducer; // Implementation of ClusterEventProducer.\nClass DelegatingClusterEventProducer; // This implementation allows Solr to dynamically change the underlying implementation of ClusterEventProducer in response to the changed plugin configuration.\n", "des": "Default implementation of ClusterEventProducer."}
{"index": 1764, "repo": "spring-data-mongodb-4.1.2", "code": "Package: validation\n\nClasses and Interfaces: \npublic interface Validator; // Provides a validator object to be used for collection validation via CollectionOptions.ValidationOptions.\n", "des": "MongoDB schema validation specifics."}
{"index": 1399, "repo": "spring-boot-actuator-3.1.1", "code": "Package: hazelcast\n\nClasses and Interfaces: \npublic class HazelcastHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for Hazelcast.\n", "des": "Actuator support for Hazelcast."}
{"index": 3622, "repo": "solr-test-framework-9.3.0", "code": "Package: component\n\nClasses and Interfaces: \nClass DummyCustomParamSpellChecker; // A Dummy SpellChecker for testing purposes\nClass TrackingShardHandlerFactory; // A ShardHandlerFactory that extends HttpShardHandlerFactory and tracks requests made to nodes/shards such that interested parties can watch such requests and make assertions inside tests\nClass TrackingShardHandlerFactory.RequestTrackingQueue; // A queue having helper methods to select requests by shard and purpose.\nClass TrackingShardHandlerFactory.ShardRequestAndParams;\n", "des": "Class for tracking shard requests"}
{"index": 922, "repo": "commons-compress-1.23.0", "code": "Package: lz77support\n\nClasses and Interfaces: \nInterface LZ77Compressor.Callback; // Callback invoked while the compressor processes data.\nClass AbstractLZ77CompressorInputStream; // Encapsulates code common to LZ77 decompressors.\nClass LZ77Compressor; // Helper class for compression algorithms that use the ideas of LZ77.\nClass LZ77Compressor.BackReference; // Represents a back-reference.\nClass LZ77Compressor.Block; // Base class representing blocks the compressor may emit.\nClass LZ77Compressor.EOD; // A simple \"we are done\" marker.\nClass LZ77Compressor.LiteralBlock; // Represents a literal block of data.\nClass Parameters; // Parameters of the compressor.\nClass Parameters.Builder; // Builder for Parameters instances.\nEnum LZ77Compressor.Block.BlockType; // Enumeration of the block types the compressor may emit.\n", "des": "Provides utility classes for LZ77 based algorithms."}
{"index": 2031, "repo": "spring-messaging-6.0.11", "code": "Package: reactive\n\nClasses and Interfaces: \npublic abstract class AbstractEncoderMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler; // Base class for a return value handler that encodes return values to Flux<DataBuffer> through the configured Encoders.\npublic abstract class AbstractMethodMessageHandler<T> extends Object implements ReactiveMessageHandler, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanNameAware; // Abstract base class for reactive HandlerMethod-based message handling.\npublic class ArgumentResolverConfigurer extends Object; // Assist with configuration for handler method argument resolvers.\npublic interface HandlerMethodArgumentResolver; // Strategy interface for resolving method parameters into argument values in the context of a given Message.\npublic class HandlerMethodArgumentResolverComposite extends Object implements HandlerMethodArgumentResolver; // Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.\npublic interface HandlerMethodReturnValueHandler; // Handle the return value from the invocation of an annotated Message handling method.\npublic class HandlerMethodReturnValueHandlerComposite extends Object implements HandlerMethodReturnValueHandler; // A HandlerMethodReturnValueHandler that wraps and delegates to others.\npublic class InvocableHandlerMethod extends HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\npublic class ReturnValueHandlerConfigurer extends Object; // Assist with configuration for handler method return value handlers.\npublic interface SyncHandlerMethodArgumentResolver extends HandlerMethodArgumentResolver; // An extension of HandlerMethodArgumentResolver for implementations that are synchronous in nature and do not block to resolve values.\n", "des": "Common infrastructure for invoking message handler methods with non-blocking, and reactive contracts."}
{"index": 1751, "repo": "spring-data-mongodb-4.1.2", "code": "Package: convert\n\nSub Packages: \npackage convert.encryption; // Converters integrating with explicit encryption mechanism of Client-Side Field Level Encryption.\n\nClasses and Interfaces: \npublic abstract class AbstractMongoConverter extends Object implements MongoConverter, InitializingBean; // Base class for MongoConverter implementations.\npublic interface DbRefProxyHandler;\npublic interface DbRefResolver extends ReferenceResolver; // Used to resolve associations annotated with DBRef.\npublic interface DbRefResolverCallback; // Callback interface to be used in conjunction with DbRefResolver.\npublic class DefaultDbRefResolver extends DefaultReferenceResolver implements DbRefResolver, ReferenceResolver; // A DbRefResolver that resolves DBRefs by delegating to a DbRefResolverCallback than is able to generate lazy loading proxies.\npublic class DefaultMongoTypeMapper extends DefaultTypeMapper<org.bson.conversions.Bson> implements MongoTypeMapper; // Default implementation of MongoTypeMapper allowing configuration of the key to lookup and store type information in Document.\npublic static final class DefaultMongoTypeMapper.DocumentTypeAliasAccessor extends Object implements TypeAliasAccessor<org.bson.conversions.Bson>; // TypeAliasAccessor to store aliases in a Document.\npublic class DefaultReferenceResolver extends Object implements ReferenceResolver; // ReferenceResolver implementation that uses a given ReferenceLookupDelegate to load and convert entity associations expressed via a persitent property.\npublic class DocumentReferenceSource extends Object; // The source object to resolve document references upon.\npublic interface JsonSchemaMapper; // JsonSchemaMapper allows mapping a given Document containing a $jsonSchema to the fields of a given domain type.\npublic interface LazyLoadingProxy; // Allows direct interaction with the underlying LazyLoadingInterceptor.\npublic final class LazyLoadingProxyFactory extends Object; // ProxyFactory to create a proxy for PersistentProperty.getType() to resolve a reference lazily.\npublic static class LazyLoadingProxyFactory.LazyLoadingInterceptor extends Object implements MethodInterceptor, MethodInterceptor, Serializable;\npublic class MappingMongoConverter extends AbstractMongoConverter implements ApplicationContextAware; // MongoConverter that uses a MappingContext to do sophisticated mapping of domain objects to Document.\nprotected static interface MappingMongoConverter.ConversionContext; // Conversion context defining an interface for graph-traversal-based conversion of documents.\n", "des": "Spring Data MongoDB specific converter infrastructure."}
{"index": 3521, "repo": "opennlp-tools-2.2.0", "code": "Package: letsmt\n\nClasses and Interfaces: \nClass DetokenizeSentenceSampleStream;\nClass LetsmtDocument; // A structure to hold the letsmt document.\nClass LetsmtDocument.LetsmtDocumentHandler; // A content handler to receive and process SAX events.\nClass LetsmtDocument.LetsmtSentence;\nClass LetsmtSentenceStreamFactory<P>;\n", "des": "Experimental package related to the letsmt corpus format."}
{"index": 188, "repo": "ignite-core-2.15.0", "code": "Package: ssl\n\nClasses and Interfaces: \nClass BlockingSslHandler;\nClass GridNioSslFilter; // Implementation of SSL filter using SSLEngine\nClass GridSslMeta;\n", "des": "Implementation of Secure Socket Layer filter for NIO server based on SSLEngine class."}
{"index": 3308, "repo": "opencms-core-15.0", "code": "Package: search\n\nSub Packages: \npackage search.documents; // Handles indexing different sorts of document and resource type from the OpenCms VFS for the full text search.\npackage search.extractors; // Contains a generic, low-level framework for extration of plain text content out of various popular file formats.\npackage search.fields; // These classes control the mapping of the OpenCms content to the Lucene search fields.\npackage search.galleries; // Implements the search functions for the OpenCms Gallery search index, which is used by the Advanced Direct Edit (ADE) functions.\npackage search.solr; // The package contains the Solr search integration.\n\nClasses and Interfaces: \nInterface I_CmsIndexer; // Indexes resources for the OpenCms search.\nInterface I_CmsIndexWriter; // Abstracts the index writer implementation for the most important index manipulation operations.\nInterface I_CmsSearchDocument; // The interface for search documents.\nInterface I_CmsSearchIndex; // Interface for search indizes that should be handled by the CmsSearchManager.\nClass A_CmsSearchIndex; // Abstract base class for search indexes.\nClass CmsDependencyIndexer; // A VFS indexer that resolves locale dependent documents.\nClass CmsIndexingThread; // Implements the indexing method for a single resource as thread.\nClass CmsIndexingThreadManager; // Implements the management of indexing threads.\nClass CmsLuceneDocument; // A Lucene search document implementation.\nClass CmsLuceneIndexWriter; // Delegates indexing to a standard Lucene IndexWriter.\nClass CmsSearch; // Helper class to access the search facility within a jsp.\nClass CmsSearchAnalyzer; // An analyzer class is used by Lucene to reduce the content to be indexed with trimmed endings etc.\nClass CmsSearchCategoryCollector; // Collects category information during a search process.\nClass CmsSearchDocumentType; // A document type specifies which document factory class is used to pull the content of an OpenCms document into a Lucene index document.\nClass CmsSearchIndex; // Abstract search index implementation.\nClass CmsSearchIndexSource; // A search index source is a description of a list of Cms resources to be indexed.\nClass CmsSearchIndexUpdateData; // A collection of resources for the incremental update of a search index.\nClass CmsSearchManager; // Implements the general management and configuration of the search and indexing facilities in OpenCms.\nClass CmsSearchManager.CmsSearchForceUnlockMode; // Enumeration class for force unlock types.\n", "des": "Implements the main full text search and indexing functions available in OpenCms."}
{"index": 1787, "repo": "spring-integration-file-6.1.2", "code": "Package: aop\n\nClasses and Interfaces: \npublic class RotatingServerAdvice extends Object implements org.springframework.integration.aop.MessageSourceMutator; // A smart poller advice that rotates across multiple remote servers/directories.\npublic interface RotationPolicy; // A strategy for rotating advices to allow reconfiguring the message source before and/or after a poll.\npublic static class RotationPolicy.KeyDirectory extends Object; // A key for a thread-local store and its related directory pair.\npublic class StandardRotationPolicy extends Object implements RotationPolicy; // Standard rotation policy; iterates over key/directory pairs; when the end is reached, starts again at the beginning.\n", "des": "Provides classes related to AOP."}
{"index": 3448, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface DialectFactory; // A factory for generating Dialect instances.\nInterface DialectResolutionInfo; // Exposes information about the database and JDBC driver that can be used in resolving the appropriate Dialect to use.\nInterface DialectResolutionInfoSource; // Contract for the source of DialectResolutionInfo.\nInterface DialectResolver; // Contract for determining the Dialect to use based on information about the database / driver.\nClass BasicDialectResolver; // Intended as support for custom resolvers which match a single db name (with optional version info).\nClass BasicSQLExceptionConverter; // A helper to centralize conversion of SQLExceptions to JDBCExceptions.\nClass DatabaseMetaDataDialectResolutionInfoAdapter; // An implementation of DialectResolutionInfo that delegates calls to a wrapped DatabaseMetaData.\n", "des": "Contracts supporting Dialect resolution (from JDBC metadata) and Dialect building."}
{"index": 2959, "repo": "spring-integration-redis-6.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic class RedisExceptionEvent extends RedisIntegrationEvent;\npublic abstract class RedisIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "Events generated by the redis module"}
{"index": 2999, "repo": "spring-web-6.0.11", "code": "Package: codec\n\nSub Packages: \npackage codec.cbor; // CBOR encoder and decoder support.\npackage codec.json; // JSON encoder and decoder support.\npackage codec.multipart; // Multipart support.\npackage codec.protobuf; // Provides an encoder and a decoder for Google Protocol Buffers.\npackage codec.support; // Provides implementations of ClientCodecConfigurer and ServerCodecConfigurer based on the converter implementations from org.springframework.http.codec.json and co.\npackage codec.xml; // XML encoder and decoder support.\n\nClasses and Interfaces: \npublic interface ClientCodecConfigurer extends CodecConfigurer; // Extension of CodecConfigurer for HTTP message reader and writer options relevant on the client side.\npublic static interface ClientCodecConfigurer.ClientDefaultCodecs extends CodecConfigurer.DefaultCodecs; // CodecConfigurer.DefaultCodecs extension with extra client-side options.\npublic interface CodecConfigurer; // Defines a common interface for configuring either client or server HTTP message readers and writers.\npublic static interface CodecConfigurer.CustomCodecs; // Registry for custom HTTP message readers and writers.\npublic static interface CodecConfigurer.DefaultCodecConfig; // Exposes the values of properties configured through CodecConfigurer.defaultCodecs() that are applied to default codecs.\npublic static interface CodecConfigurer.DefaultCodecs; // Customize or replace the HTTP message readers and writers registered by default.\npublic static interface CodecConfigurer.MultipartCodecs; // Registry and container for multipart HTTP message writers.\npublic class DecoderHttpMessageReader<T> extends Object implements HttpMessageReader<T>; // HttpMessageReader that wraps and delegates to a Decoder.\npublic class EncoderHttpMessageWriter<T> extends Object implements HttpMessageWriter<T>; // HttpMessageWriter that wraps and delegates to an Encoder.\npublic class FormHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<org.springframework.util.MultiValueMap<String,String>>; // Implementation of an HttpMessageReader to read HTML form data, i.e.\npublic class FormHttpMessageWriter extends LoggingCodecSupport implements HttpMessageWriter<org.springframework.util.MultiValueMap<String,String>>; // HttpMessageWriter for writing a MultiValueMap<String, String> as HTML form data, i.e.\n", "des": "Provides implementations of Encoder and Decoder for web use."}
{"index": 2698, "repo": "spring-integration-http-6.1.2", "code": "Package: outbound\n\nClasses and Interfaces: \npublic abstract class AbstractHttpRequestExecutingMessageHandler extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // Base class for http outbound adapter/gateway.\npublic class HttpRequestExecutingMessageHandler extends AbstractHttpRequestExecutingMessageHandler; // A MessageHandler implementation that executes HTTP requests by delegating to a RestTemplate instance.\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 262, "repo": "nutch-2.4", "code": "Package: tika\n\nClasses and Interfaces: \nClass DOMContentUtils; // A collection of methods for extracting content from DOM trees.\nClass HTMLMetaProcessor; // Class for parsing META Directives from DOM trees.\nClass TikaParser; // Wrapper for Tika parsers.\n", "des": "Parse various document formats with help of Apache Tika."}
{"index": 2790, "repo": "shiro-spring-2.0.0-alpha-2", "code": "Package: spring\n\nSub Packages: \npackage spring.remoting; // Support to enable Spring-based remote method invocations to carry a Shiro session ID as part of the invocation payload, allowing remote clients to perform security operations.\npackage spring.web; // Spring-specific components for use in Spring-based web applications.\n\nClasses and Interfaces: \npublic class LifecycleBeanPostProcessor extends Object implements org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor, org.springframework.core.PriorityOrdered; // Bean post processor for Spring that automatically calls the init() and/or destroy() methods on Shiro objects that implement the Initializable or Destroyable interfaces, respectfully.\npublic class ShiroEventBusBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // Spring BeanPostProcessor that detects, EventBusAware and classes containing @Subscribe methods.\n", "des": "Spring Application Framework support for enabling Shiro in spring applications."}
{"index": 375, "repo": "calcite-linq4j-1.34.0", "code": "Package: tree\n\nClasses and Interfaces: \nInterface CallSiteBinder; // Creates a DynamicExpression that represents a dynamic operation bound by the provided CallSiteBinder.\nInterface Expressions.FluentList<T>; // Fluent list.\nInterface ExpressionVisitor; // Represents a visitor or rewriter for expression trees.\nInterface FunctionExpression.Invokable; // Function that can be invoked with a variable number of arguments.\nInterface Node; // Parse tree node.\nInterface Primitive.Sink; // A place to send a value.\nInterface Primitive.Source; // A place from which to read a value.\nInterface PseudoField; // Contains the parts of the Field class needed for code generation, but might be implemented differently.\nInterface TableExpressionFactory; // Factory for creating table expressions that may be used in generated code for accessing table data.\nInterface Types.RecordField; // Field that belongs to a record.\nInterface Types.RecordType; // Base class for record-like types that do not mapped to (currently loaded) Java Class objects.\nInterface Visitor<R>; // Node visitor.\nClass AbstractNode; // Abstract implementation of Node.\nClass ArrayLengthRecordField; // Length field of a RecordType.\nClass BinaryExpression; // Represents an expression that has a binary operator.\nClass BlockBuilder; // Builder for BlockStatement.\nClass Blocks; // Helper methods concerning BlockStatements.\nClass BlockStatement; // Represents a block that contains a sequence of expressions where variables can be defined.\nClass CatchBlock; // Represents a catch statement in a try block.\nClass ClassDeclaration; // Declaration of a class.\nClass ClassDeclarationFinder; // Entry point for optimizers that factor out deterministic expressions to final static fields.\nClass ConditionalExpression; // Represents an expression that has a conditional operator.\nClass ConditionalStatement; // Represents an expression that has a conditional operator.\nClass ConstantExpression; // Represents an expression that has a constant value.\nClass ConstantUntypedNull; // Represents a constant null of unknown type Java allows type inference for such nulls, thus \"null\" cannot always be replaced to (Object)null and vise versa.\nClass ConstructorDeclaration; // Declaration of a constructor.\nClass DeclarationStatement; // Expression that declares and optionally initializes a variable.\n", "des": "Object model for Java expressions."}
{"index": 1687, "repo": "spring-integration-mqtt-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class DefaultPahoMessageConverter extends Object implements MqttMessageConverter, org.springframework.beans.factory.BeanFactoryAware; // Default implementation for mapping to/from Messages.\npublic final class MqttHeaderAccessor extends Object; // Helper for typed access to incoming MQTT message headers.\npublic class MqttHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<org.eclipse.paho.mqttv5.common.packet.MqttProperties>; // The default HeaderMapper implementation for MQTT v5 message properties mapping.\npublic final class MqttHeaders extends Object; // Spring Integration headers.\npublic interface MqttMessageConverter extends org.springframework.messaging.converter.MessageConverter; // Extension of MessageConverter allowing the topic to be added as a header.\npublic final class MqttUtils extends Object; // MQTT Utilities.\n", "des": "Provides various support classes used across Spring Integration MqttAdapter Components."}
{"index": 1679, "repo": "spring-oxm-6.0.11", "code": "Package: mime\n\nClasses and Interfaces: \npublic interface MimeContainer; // Represents a container for MIME attachments Concrete implementations might adapt a SOAPMessage or an email message.\npublic interface MimeMarshaller extends Marshaller; // Subinterface of Marshaller that can use MIME attachments to optimize storage of binary data.\npublic interface MimeUnmarshaller extends Unmarshaller; // Subinterface of Unmarshaller that can use MIME attachments to optimize storage of binary data.\n", "des": "Contains (un)marshallers optimized to store binary data in MIME attachments."}
{"index": 126, "repo": "ignite-core-2.15.0", "code": "Package: noop\n\nClasses and Interfaces: \nClass NoopMetricExporterSpi; // No-op implementation of metric exporter SPI.\n", "des": "Contains no-op implementation of MetricExporterSpi."}
{"index": 2042, "repo": "spring-messaging-6.0.11", "code": "Package: user\n\nClasses and Interfaces: \npublic class DefaultUserDestinationResolver extends Object implements UserDestinationResolver; // A default implementation of UserDestinationResolver that relies on a SimpUserRegistry to find active sessions for a user.\npublic interface DestinationUserNameProvider; // A Principal can also implement this contract when getName() isn't globally unique and therefore not suited for use with \"user\" destinations.\npublic class MultiServerUserRegistry extends Object implements SimpUserRegistry, org.springframework.context.event.SmartApplicationListener; // SimpUserRegistry that looks up users in a \"local\" user registry as well as a set of \"remote\" user registries.\npublic interface SimpSession; // Represents a session of connected user.\npublic interface SimpSubscription; // Represents a subscription within a user session.\n@FunctionalInterface public interface SimpSubscriptionMatcher; // A strategy for matching subscriptions.\npublic interface SimpUser; // Represents a connected user.\npublic interface SimpUserRegistry; // A registry of currently connected users.\npublic class UserDestinationMessageHandler extends Object implements MessageHandler, org.springframework.context.SmartLifecycle; // MessageHandler with support for \"user\" destinations.\n@FunctionalInterface public interface UserDestinationResolver; // A strategy for resolving a \"user\" destination by translating it to one or more actual destinations one per active user session.\npublic class UserDestinationResult extends Object; // Contains the result from parsing a \"user\" destination from a source message and translating it to target destinations (one per active user session).\npublic class UserRegistryMessageHandler extends Object implements MessageHandler, org.springframework.context.ApplicationListener<BrokerAvailabilityEvent>; // MessageHandler that handles user registry broadcasts from other application servers and periodically broadcasts the content of the local user registry.\n", "des": "Support for handling messages to \"user\" destinations (i.e."}
{"index": 1642, "repo": "jena-core-4.9.0", "code": "Package: impl\n\nClasses and Interfaces: \npublic class RDFhtml extends BaseDatatype implements RDFDatatype; // rdf:html.\npublic class RDFjson extends BaseDatatype implements RDFDatatype; // rdf:json.\npublic class RDFLangString extends BaseDatatype implements RDFDatatype; // rdf:langString.\npublic class XMLLiteralType extends BaseDatatype implements RDFDatatype; // Builtin data type to represent XMLLiteral (i.e.\npublic class XSDAbstractDateTimeType extends XSDDatatype; // Base class for all date/time/duration type representations.\npublic class XSDBaseNumericType extends XSDDatatype; // Base implementation for all numeric datatypes derived from xsd:decimal.\npublic class XSDBaseStringType extends XSDDatatype; // Base implementation for all string datatypes derived from xsd:string.\npublic class XSDByteType extends XSDBaseNumericType; // Datatype template used to define XSD int types\npublic class XSDDateTimeStampType extends XSDDateTimeType;\npublic class XSDDateTimeType extends XSDAbstractDateTimeType; // Type processor for dateTime, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDDateType extends XSDAbstractDateTimeType; // Type processor for date, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDDayTimeDurationType extends XSDAbstractDateTimeType;\npublic class XSDDayType extends XSDAbstractDateTimeType; // Type processor for gDay, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDDouble extends XSDDatatype; // Datatype representation for xsd:float.\npublic class XSDDurationType extends XSDAbstractDateTimeType; // The XSD duration type, the only job of this extra layer is to wrap the return value in a more convenient accessor type.\npublic class XSDFloat extends XSDDatatype; // Datatype representation for xsd:float.\npublic class XSDMonthDayType extends XSDAbstractDateTimeType; // Type processor for gMonthDay, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDMonthType extends XSDAbstractDateTimeType; // Type processor for gMonth, most of the machinery is in the base XSDAbstractDateTimeType class.\npublic class XSDPlainType extends XSDDatatype; // A datatype that does not use the Xerces machinery for isEqual, yet is still an XSDDatatype.\n", "des": "Provides implementations of the XSD datatype."}
{"index": 166, "repo": "ignite-core-2.15.0", "code": "Package: handlers\n\nSub Packages: \npackage handlers.auth; // REST authentication command.\npackage handlers.cache; // REST in-memory data grid commands.\npackage handlers.redis; // Contains Redis protocol commands.\npackage handlers.top; // REST topology commands.\npackage handlers.user; // REST user commands.\npackage handlers.version; // REST version command.\n\nClasses and Interfaces: \nInterface GridRestCommandHandler; // Command handler.\nClass GridRestCommandHandlerAdapter; // Abstract command handler.\n", "des": "REST commands handlers."}
{"index": 1359, "repo": "spring-tx-6.0.11", "code": "Package: transaction\n\nSub Packages: \npackage transaction.annotation; // Spring's support for annotation-based transaction demarcation.\npackage transaction.config; // Support package for declarative transaction configuration, with XML schema being the primary configuration format.\npackage transaction.event; // Spring's support for listening to transaction events.\npackage transaction.interceptor; // AOP-based solution for declarative transaction demarcation.\npackage transaction.jta; // Transaction SPI implementation for JTA.\npackage transaction.reactive; // Support classes for reactive transaction management.\npackage transaction.support; // Support classes for the org.springframework.transaction package.\n\nClasses and Interfaces: \npublic class CannotCreateTransactionException extends TransactionException; // Exception thrown when a transaction can't be created using an underlying transaction API such as JTA.\npublic class HeuristicCompletionException extends TransactionException; // Exception that represents a transaction failure caused by a heuristic decision on the side of the transaction coordinator.\npublic class IllegalTransactionStateException extends TransactionUsageException; // Exception thrown when the existence or non-existence of a transaction amounts to an illegal state according to the transaction propagation behavior that applies.\npublic class InvalidIsolationLevelException extends TransactionUsageException; // Exception that gets thrown when an invalid isolation level is specified, i.e.\npublic class InvalidTimeoutException extends TransactionUsageException; // Exception that gets thrown when an invalid timeout is specified, that is, the specified timeout valid is out of range or the transaction manager implementation doesn't support timeouts.\npublic class NestedTransactionNotSupportedException extends CannotCreateTransactionException; // Exception thrown when attempting to work with a nested transaction but nested transactions are not supported by the underlying backend.\npublic class NoTransactionException extends TransactionUsageException; // Exception thrown when an operation is attempted that relies on an existing transaction (such as setting rollback status) and there is no existing transaction.\npublic interface PlatformTransactionManager extends TransactionManager; // This is the central interface in Spring's imperative transaction infrastructure.\npublic interface ReactiveTransaction extends TransactionExecution; // Representation of an ongoing reactive transaction.\npublic interface ReactiveTransactionManager extends TransactionManager; // This is the central interface in Spring's reactive transaction infrastructure.\npublic interface SavepointManager; // Interface that specifies an API to programmatically manage transaction savepoints in a generic fashion.\n", "des": "Spring's core transaction management APIs (independent of any specific transaction management system); an exception hierarchy for Spring's transaction infrastructure; and transaction manager, definition, and status interfaces."}
{"index": 125, "repo": "ignite-core-2.15.0", "code": "Package: log\n\nClasses and Interfaces: \nClass LogExporterSpi; // This SPI implementation exports metrics to Ignite log.\n", "des": "Contains push to log implementation of MetricExporterSpi."}
{"index": 949, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: dom\n\nClasses and Interfaces: \nClass DomPoxMessage; // Implementation of the PoxMessage interface that is based on a DOM Document.\nClass DomPoxMessageFactory; // Implementation of the WebServiceMessageFactory interface that creates a DomPoxMessage.\nClass DomPoxMessageException; // Specific subclass of PoxMessageException for DOM Plain Old XML messages.\n", "des": "Contains an implementation of the POX interfaces that is based on DOM."}
{"index": 3565, "repo": "lucene-codecs-9.7.0", "code": "Package: blockterms\n\nClasses and Interfaces: \nClass BlockTermsReader; // Handles a terms dict, but decouples all details of doc/freqs/positions reading to an instance of PostingsReaderBase.\nClass BlockTermsWriter; // Writes terms dict, block-encoding (column stride) each term's metadata for each set of terms between two index terms.\nClass FixedGapTermsIndexReader; // TermsIndexReader for simple every Nth terms indexes.\nClass FixedGapTermsIndexWriter; // Selects every Nth term as and index term, and hold term bytes (mostly) fully expanded in memory.\nClass TermsIndexReaderBase; // BlockTermsReader interacts with an instance of this class to manage its terms index.\nClass TermsIndexReaderBase.FieldIndexEnum; // Similar to TermsEnum, except, the only \"metadata\" it reports for a given indexed term is the long fileOffset into the main terms dictionary file.\nClass TermsIndexWriterBase; // Base class for terms index implementations to plug into BlockTermsWriter.\nClass VariableGapTermsIndexReader; // See VariableGapTermsIndexWriter\nClass VariableGapTermsIndexWriter; // Selects index terms according to provided pluggable VariableGapTermsIndexWriter.IndexTermSelector, and stores them in a prefix trie that's loaded entirely in RAM stored as an FST.\nClass VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector; // Sets an index term when docFreq >= docFreqThresh, or every interval terms.\nClass VariableGapTermsIndexWriter.EveryNTermSelector; // Same policy as FixedGapTermsIndexWriter\nClass VariableGapTermsIndexWriter.IndexTermSelector; // Hook for selecting which terms should be placed in the terms index.\n", "des": "Pluggable term index / block terms dictionary implementations."}
{"index": 2440, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: influx\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration.class) @ConditionalOnClass(org.influxdb.InfluxDB.class) @ConditionalOnBean(org.influxdb.InfluxDB.class) @ConditionalOnEnabledHealthIndicator(\"influxdb\") public class InfluxDbHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.influx.InfluxDbHealthIndicator,org.influxdb.InfluxDB>; // Auto-configuration for InfluxDbHealthIndicator.\n", "des": "Auto-configuration for actuator InfluxDB concerns."}
{"index": 3810, "repo": "lucene-analysis-common-9.7.0", "code": "Package: ro\n\nClasses and Interfaces: \nClass RomanianAnalyzer; // Analyzer for Romanian.\n", "des": "Analyzer for Romanian."}
{"index": 3290, "repo": "opencms-core-15.0", "code": "Package: state\n\nClasses and Interfaces: \nInterface I_CmsSearchStateCommon; // Class for keeping the state of the common search options.\nInterface I_CmsSearchStateDidYouMean; // Class for keeping the state of the spellcheck search options.\nInterface I_CmsSearchStateFacet; // Interface for the state all facet types have in common.\nInterface I_CmsSearchStateGeoFilter; // Interface for the Geo filter state.\nInterface I_CmsSearchStatePagination; // Interface for pagination states.\nInterface I_CmsSearchStateSorting; // Interface for sorting states.\nClass CmsSearchStateCommon; // Class for handling the state of the common search options.\nClass CmsSearchStateDidYouMean; // Class for handling the state of the \"Did you mean?\" search options.\nClass CmsSearchStateFacet; // Class for keeping the state common for all facet types.\nClass CmsSearchStateGeoFilter; // Class keeping the state of the Geo filter.\nClass CmsSearchStatePagination; // Class for keeping the state for the pagination.\nClass CmsSearchStateSorting; // Class for keeping the state of the sorting options.\n", "des": "API classes for the state of the search form support provided for server-side Solr search."}
{"index": 418, "repo": "hadoop-azure-3.3.6", "code": "Package: oauth2\n\nClasses and Interfaces: \nInterface IdentityTransformerInterface; // IdentityTransformerInterface defines the set of translation operations that any identity transformer implementation must provide.\nClass AccessTokenProvider; // Returns an Azure Active Directory token when requested.\nClass AzureADAuthenticator; // This class provides convenience methods to obtain AAD tokens.\nClass AzureADToken; // Object representing the AAD access token to use when making HTTP requests to Azure Data Lake Storage.\nClass ClientCredsTokenProvider; // Provides tokens based on client credentials.\nClass CustomTokenProviderAdapter; // Provides tokens based on custom implementation, following the Adapter Design Pattern.\nClass IdentityTransformer; // Perform transformation for Azure Active Directory identities used in owner, group and acls.\nClass LocalIdentityTransformer; // A subclass of IdentityTransformer that translates the AAD to Local identity using IdentityHandler.\nClass MsiTokenProvider; // Provides tokens based on Azure VM's Managed Service Identity.\nClass QueryParams; // Utilities class http query parameters.\nClass RefreshTokenBasedTokenProvider; // Provides tokens based on refresh token.\nClass UserPasswordTokenProvider; // Provides tokens based on username and password.\nClass AzureADAuthenticator.HttpException; // This exception class contains the http error code, requestId and error message, it is thrown when AzureADAuthenticator failed to get the Azure Active Directory token.\nClass AzureADAuthenticator.UnexpectedResponseException; // An unexpected HTTP response was raised, such as text coming back from what should be an OAuth endpoint.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 748, "repo": "ignite-indexing-2.15.0", "code": "Package: h2\n\nSub Packages: \npackage h2.dml; // Contains routines for executing DML statements on top of H2.\n\nClasses and Interfaces: \nClass CommandProcessor; // Processor responsible for execution of all non-SELECT and non-DML commands.\nClass CommandResult; // Command execution result.\nClass ConcurrentStripedPool<E>; // Concurrent pool of object based on ConcurrentLinkedDeque.\nClass ConnectionManager; // H2 connection manager.\nClass DistributedSqlConfiguration; // Distributed configuration of the indexing module.\nClass DmlStatementsProcessor; // Contains entry processors for DML.\nClass DmlStatementsProcessor.EntryValueUpdater; // Entry value updater.\nClass DmlStatementsProcessor.InsertEntryProcessor;\nClass DmlStatementsProcessor.ModifyingEntryProcessor; // Entry processor invoked by UPDATE and DELETE operations.\nClass FunctionsManager; // SQL function manager.\nClass GridCacheTwoStepQuery; // Two step map-reduce style query.\nClass GridSubqueryJoinOptimizer;\nClass H2Connection; // Wrapper to store connection with currently used schema and statement cache.\nClass H2Cursor; // Cursor.\nClass H2FieldsIterator; // Special field set iterator based on database result set.\nClass H2PooledConnection; // Pooled connection wrapper to use close semantic to recycle connection (return to the pool).\nClass H2QueryFetchSizeInterceptor; // Print warning message to log when query result size fetch count is bigger then specified threshold.\nClass H2QueryInfo; // Base H2 query info with commons for MAP, LOCAL, REDUCE queries.\nClass H2ResultSetIterator<T>; // Iterator over result set.\nClass H2SchemaManager; // H2 schema manager.\nClass H2SqlFieldMetadata; // Field descriptor.\nClass H2StatementCache; // Statement cache.\nClass H2TableDescriptor; // Information about table in database.\nClass H2TableEngine; // H2 Table engine.\nClass H2TypeKey; // Key for types lookup.\nClass H2Utils; // H2 utility methods.\nClass H2Utils.Getter<T,R>; // Field getter.\nClass H2Utils.Setter<T,R>; // Field getter.\nClass H2Utils.ValueRuntimeSimpleObject<T>;\n", "des": "Contains default H2-based indexing SPI implementation."}
{"index": 573, "repo": "hadoop-common-3.3.4", "code": "Package: functional\n\nClasses and Interfaces: \nInterface BiFunctionRaisingIOE<T,U,R>; // Function of arity 2 which may raise an IOException.\nInterface CallableRaisingIOE<R>; // This is a callable which only raises an IOException.\nInterface ConsumerRaisingIOE<T>; // Version of java.util.function.Consumer which raises exceptions.\nInterface FunctionRaisingIOE<T,R>; // Function of arity 1 which may raise an IOException.\nInterface InvocationRaisingIOE; // This is a lambda-expression which may raises an IOException.\nClass CommonCallableSupplier<T>; // A bridge from Callable to Supplier; catching exceptions raised by the callable and wrapping them as appropriate.\nClass FutureIO; // Future IO Helper methods.\nClass RemoteIterators; // A set of remote iterators supporting transformation and filtering, with IOStatisticsSource passthrough, and of conversions of the iterators to lists/arrays and of performing actions on the values.\n", "des": "Support for functional programming within the Hadoop APIs."}
{"index": 1831, "repo": "spring-test-6.0.11", "code": "Package: reactive\n\nClasses and Interfaces: \npublic final class MockServerHttpRequest extends org.springframework.http.server.reactive.AbstractServerHttpRequest; // Mock extension of AbstractServerHttpRequest for use in tests without an actual server.\npublic static interface MockServerHttpRequest.BaseBuilder<B extends MockServerHttpRequest.BaseBuilder<B>>; // Request builder exposing properties not related to the body.\npublic static interface MockServerHttpRequest.BodyBuilder extends MockServerHttpRequest.BaseBuilder<MockServerHttpRequest.BodyBuilder>; // A builder that adds a body to the request.\npublic class MockServerHttpResponse extends org.springframework.http.server.reactive.AbstractServerHttpResponse; // Mock extension of AbstractServerHttpResponse for use in tests without an actual server.\n", "des": "Mock implementations of reactive HTTP server contracts."}
{"index": 1600, "repo": "spring-websocket-6.0.11", "code": "Package: sockjs\n\nSub Packages: \npackage sockjs.client; // SockJS client implementation of WebSocketClient.\npackage sockjs.frame; // Support classes for creating SockJS frames including the encoding and decoding of SockJS message frames.\npackage sockjs.support; // Support classes for SockJS including an AbstractSockJsService implementation.\npackage sockjs.transport; // Server-side support for SockJS transports including TransportHandler implementations for processing incoming requests, their session counterparts for sending messages over the various transports, and DefaultSockJsService.\n\nClasses and Interfaces: \npublic class SockJsException extends org.springframework.core.NestedRuntimeException; // Base class for exceptions raised while processing SockJS HTTP requests.\npublic class SockJsMessageDeliveryException extends SockJsException; // An exception thrown when a message frame was successfully received over an HTTP POST and parsed but one or more of the messages it contained could not be delivered to the WebSocketHandler either because the handler failed or because the connection got closed.\npublic interface SockJsService; // The main entry point for processing HTTP requests from SockJS clients.\npublic class SockJsTransportFailureException extends SockJsException; // Indicates a serious failure that occurred in the SockJS implementation as opposed to in user code (e.g.\n", "des": "Top-level SockJS types."}
{"index": 931, "repo": "commons-compress-1.23.0", "code": "Package: pack200\n\nClasses and Interfaces: \nInterface NewAttributeBands.AttributeLayoutElement; // An AttributeLayoutElement is a part of an attribute layout and has one or more bands associated with it, which transmit the AttributeElement data for successive Attributes of this type.\nClass Archive; // Archive is the main entry point to pack200 and represents a packed archive.\nClass AttributeDefinitionBands; // Attribute Definition bands define how any unknown attributes should be read by the decompressor.\nClass AttributeDefinitionBands.AttributeDefinition;\nClass BandSet; // Abstract superclass for a set of bands\nClass BcBands; // Bytecode bands (corresponds to the bc_bands set of bands in the pack200 specification)\nClass BHSDCodec; // A BHSD codec is a means of encoding integer values as a sequence of bytes or vice versa using a specified \"BHSD\" encoding mechanism.\nClass CanonicalCodecFamilies; // Sets of codecs that share characteristics.\nClass ClassBands; // Class bands (corresponds to the class_bands set of bands in the pack200 specification)\nClass Codec; // A Codec allows a sequence of bytes to be decoded into integer values (or vice versa).\nClass CodecEncoding; // CodecEncoding is used to get the right Codec for a given meta-encoding\nClass ConstantPoolEntry; // Abstract superclass for constant pool entries.\nClass CpBands; // Pack200 Constant Pool Bands\nClass CPClass; // Constant pool entry for a class.\nClass CPConstant<T extends CPConstant<T>>; // Abstract superclass for constant pool constant entries such as numbers or Strings.\nClass CPDouble; // Constant pool entry for a double.\nClass CPFloat; // Constant pool entry for a float.\nClass CPInt; // Constant pool entry for an int.\nClass CPLong; // Constant pool entry for a long.\nClass CPMethodOrField; // Constant pool entry for a method or field.\nClass CPNameAndType; // Constant pool entry for a name and type pair.\nClass CPSignature; // Constant pool entry for a signature.\nClass CPString; // Constant pool entry for a String.\nClass CPUTF8; // Constant pool entry for a UTF8 entry, used for storing long Strings.\nClass FileBands; // Bands containing information about files in the pack200 archive and the file contents for non-class-files.\n", "des": "Internal package."}
{"index": 3479, "repo": "hilt-android-2.47", "code": "Package: scopes\n\nClasses and Interfaces: \nAnnotation Type ActivityRetainedScoped; // Scope annotation for bindings that should exist for the life of an activity, surviving configuration.\nAnnotation Type ActivityScoped; // Scope annotation for bindings that should exist for the life of an activity.\nAnnotation Type FragmentScoped; // Scope annotation for bindings that should exist for the life of a fragment.\nAnnotation Type ServiceScoped; // Scope annotation for bindings that should exist for the life of a service.\nAnnotation Type ViewModelScoped; // Scope annotation for bindings that should exist for the life of a a single ViewModel.\nAnnotation Type ViewScoped; // Scope annotation for bindings that should exist for the life of a View.\n", "des": "This package contains Hilt's built-in Android Scope annotations."}
{"index": 1040, "repo": "hadoop-aws-3.3.6", "code": "Package: s3native\n\nClasses and Interfaces: \nClass NativeS3FileSystem; // Replaced by the S3A client.\nClass S3xLoginHelper; // Class to aid logging in to S3 endpoints.\nClass S3xLoginHelper.Login; // Simple tuple of login details.\n", "des": "A distributed implementation of FileSystem for reading and writing files on Amazon S3."}
{"index": 466, "repo": "jackson-core-2.15.2", "code": "Package: exc\n\nClasses and Interfaces: \nClass InputCoercionException; // Exception type for read-side problems that are not direct decoding (\"parsing\") problems (those would be reported as JsonParseExceptions), but rather result from failed attempts to convert specific Java value out of valid but incompatible input value.\nClass StreamConstraintsException; // Exception type used to indicate violations of stream constraints (for example StreamReadConstraints) when reading or writing content.\nClass StreamReadException; // Intermediate base class for all read-side streaming processing problems, including parsing and input value coercion problems.\nClass StreamWriteException; // Intermediate base class for all read-side streaming processing problems, including parsing and input value coercion problems.\n", "des": "Package for some of JsonProcessingException subtypes contained by streaming API."}
{"index": 1696, "repo": "spring-data-couchbase-5.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class CouchbaseRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport;\npublic class CouchbaseRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(CouchbaseRepositoriesRegistrar.class) public @interface EnableCouchbaseRepositories; // Annotation to activate Couchbase repositories.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(ReactiveCouchbaseRepositoriesRegistrar.class) public @interface EnableReactiveCouchbaseRepositories; // Annotation to activate reactive couchbase repositories.\npublic class ReactiveCouchbaseRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport;\npublic class ReactiveCouchbaseRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport;\npublic class ReactiveRepositoryOperationsMapping extends Object;\npublic class RepositoryOperationsMapping extends Object; // A utility class for configuration allowing to tell which CouchbaseOperations should be backing repositories.\n", "des": "This package contains the support classes to configure repositories in the context of Couchbase."}
{"index": 1983, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: ssl\n\nClasses and Interfaces: \npublic class JksSslBundleProperties extends SslBundleProperties; // SslBundleProperties for Java keystores.\npublic static class JksSslBundleProperties.Store extends Object; // Store properties.\npublic class PemSslBundleProperties extends SslBundleProperties; // SslBundleProperties for PEM-encoded certificates and private keys.\npublic static class PemSslBundleProperties.Store extends Object; // Store properties.\npublic final class PropertiesSslBundle extends Object implements org.springframework.boot.ssl.SslBundle; // SslBundle backed by JksSslBundleProperties or PemSslBundleProperties.\n@AutoConfiguration @EnableConfigurationProperties(SslProperties.class) public class SslAutoConfiguration extends Object; // Auto-configuration for SSL.\npublic abstract class SslBundleProperties extends Object; // Base class for SSL Bundle properties.\npublic static class SslBundleProperties.Key extends Object;\npublic static class SslBundleProperties.Options extends Object;\n@FunctionalInterface public interface SslBundleRegistrar; // Interface to be implemented by types that register SslBundle instances with an SslBundleRegistry.\n@ConfigurationProperties(prefix=\"spring.ssl\") public class SslProperties extends Object; // Properties for centralized SSL trust material configuration.\npublic static class SslProperties.Bundles extends Object; // Properties to define SSL Bundles.\n", "des": "Auto-configuration for SSL bundles."}
{"index": 2730, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: ldif\n\nSub Packages: \npackage ldif.builder; // Builders for LDIF related components.\n\nClasses and Interfaces: \npublic class LdifReader extends AbstractItemCountingItemStreamItemReader<org.springframework.ldap.core.LdapAttributes> implements ResourceAwareItemReaderItemStream<org.springframework.ldap.core.LdapAttributes>, org.springframework.beans.factory.InitializingBean; // The LdifReader is an adaptation of the FlatFileItemReader built around an LdifParser.\npublic class MappingLdifReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean; // The MappingLdifReader is an adaptation of the FlatFileItemReader built around an LdifParser.\npublic interface RecordCallbackHandler; // This interface can be used to operate on skipped records during open in the LdifReader and the MappingLdifReader.\npublic interface RecordMapper<T>; // This interface should be implemented to map LdapAttributes objects to POJOs.\n", "des": "This package contains the classes required for using the LdifParser in Spring LDAP."}
{"index": 1038, "repo": "hadoop-aws-3.3.6", "code": "Package: impl\n\nClasses and Interfaces: \nInterface BondedS3AStatisticsContext.S3AFSStatisticsSource; // This is the interface which an integration source must implement for the integration.\nClass AbstractS3AStatisticsSource; // Base class for implementing IOStatistics sources in the S3 module.\nClass AwsStatisticsCollector; // Collect statistics from the AWS SDK and forward to an instance of StatisticsFromAwsSdk and thence into the S3A statistics.\nClass BondedS3AStatisticsContext; // An S3A statistics context which is bonded to a S3AInstrumentation instance -inevitably that of an S3AFileSystem instance.\nClass CountingChangeTracker; // A change tracker which increments an atomic long.\nClass EmptyS3AStatisticsContext; // Special statistics context, all of whose context operations are no-ops.\nClass EmptyS3AStatisticsContext.EmptyMultipartUploaderStatistics; // Multipart Uploader.\nClass S3AMultipartUploaderStatisticsImpl; // Implementation of the uploader statistics.\nClass StatisticsFromAwsSdkImpl; // Hook up AWS SDK Statistics to the S3 counters.\n", "des": "Statistics collection for the S3A connector: implementation."}
{"index": 1572, "repo": "spring-restdocs-core-3.0.0", "code": "Package: templates\n\nSub Packages: \npackage templates.mustache; // JMustache-based implementation of the template API.\n\nClasses and Interfaces: \npublic class StandardTemplateResourceResolver extends Object implements TemplateResourceResolver; // Standard implementation of TemplateResourceResolver.\npublic interface Template; // A compiled Template that can be rendered to a String.\npublic interface TemplateEngine; // A TemplateEngine is used to render documentation snippets.\npublic interface TemplateFormat; // A TemplateFormat provides information about a particular template format, such as Asciidoctor or Markdown.\npublic abstract class TemplateFormats extends Object; // An enumeration of the built-in formats for which templates are provided.\npublic interface TemplateResourceResolver; // A TemplateResourceResolver is responsible for resolving a name for a template into a Resource from which the template can be read.\n", "des": "Template API used to render documentation snippets."}
{"index": 1323, "repo": "groovy-all-4.0.13", "code": "Package: concurrentlinkedhashmap\n\nClasses and Interfaces: \n@ThreadSafe public final class ConcurrentLinkedHashMap<K,V> extends AbstractMap<K,V> implements ConcurrentMap<K,V>, Serializable; // A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by.\npublic static final class ConcurrentLinkedHashMap.Builder<K,V> extends Object; // A builder that creates ConcurrentLinkedHashMap instances.\n@ThreadSafe public interface EntryWeigher<K,V>; // A class that can determine the weight of an entry.\n@ThreadSafe public interface EvictionListener<K,V>; // A listener registered for notification when an entry is evicted.\n@ThreadSafe public interface Weigher<V>; // A class that can determine the weight of a value.\npublic final class Weighers extends Object; // A common set of Weigher and EntryWeigher implementations.\n", "des": "This package contains an implementation of a bounded ConcurrentMap data structure."}
{"index": 3051, "repo": "spring-ws-core-4.0.5", "code": "Package: client\n\nSub Packages: \npackage client.core; // Core package of the Spring-WS client-side support.\npackage client.support; // Classes supporting the org.springframework.ws.client.core package.\n\nClasses and Interfaces: \npublic abstract class WebServiceClientException extends WebServiceException; // Exception thrown whenever an error occurs on the client-side.\npublic class WebServiceFaultException extends WebServiceClientException; // Thrown by SimpleFaultMessageResolver when the response message has a fault.\npublic class WebServiceIOException extends WebServiceClientException; // Exception thrown whenever an I/O error occurs on the client-side.\npublic class WebServiceTransformerException extends WebServiceClientException; // Exception thrown whenever a transformation error occurs on the client-side.\npublic class WebServiceTransportException extends WebServiceIOException; // Exception thrown whenever a transport error occurs on the client-side.\n", "des": "Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access."}
{"index": 1080, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: constant\n\nClasses and Interfaces: \nClass CConstant.ValueAccess; // Allows access to the value of a CConstant during image generation.\nAnnotation Type CConstant; // Denotes a method as a C constant value.\nAnnotation Type CEnum; // Annotation to import a C enumeration to Java.\nAnnotation Type CEnumConstant; // Provides additional properties for a field (i.e., an enumeration value) of Java enumeration annotated with CEnum.\nAnnotation Type CEnumLookup; // Annotation for a method that returns the Java enumeration object for a given C integer value.\nAnnotation Type CEnumValue; // Annotation for a method that returns the C integer value for a Java enumeration object.\n", "des": "This package provides parts of the Java / C interface that are related to C constants."}
{"index": 550, "repo": "hadoop-common-3.3.4", "code": "Package: conf\n\nClasses and Interfaces: \nInterface Configurable; // Something that may be configured with a Configuration.\nInterface Reconfigurable; // Something whose Configuration can be changed at run time.\nClass ConfigRedactor; // Tool for redacting sensitive information when displaying config parameters.\nClass Configuration; // Provides access to configuration parameters.\nClass Configuration.DeprecationDelta; // A pending addition to the global set of deprecated keys.\nClass Configuration.IntegerRanges; // A class that represents a set of positive integer ranges.\nClass Configured; // Base class for things that may be configured with a Configuration.\nClass ReconfigurableBase; // Utility base class for implementing the Reconfigurable interface.\nClass ReconfigurationServlet; // A servlet for changing a node's configuration.\nClass ReconfigurationUtil;\nClass ReconfigurationUtil.PropertyChange;\nClass StorageSize; // A class that contains the numeric value and the unit of measure.\nEnum StorageUnit; // Class that maintains different forms of Storage Units.\nClass ConfServlet.BadFormatException;\nClass ReconfigurationException; // Exception indicating that configuration property cannot be changed at run time.\n", "des": "Configuration of system parameters."}
{"index": 2872, "repo": "spring-integration-core-6.1.2", "code": "Package: message\n\nClasses and Interfaces: \npublic class AdviceMessage<T> extends org.springframework.messaging.support.GenericMessage<T>; // A message implementation that is produced by an advice after successful message handling.\n", "des": "Provides concrete Message implementations."}
{"index": 570, "repo": "hadoop-common-3.3.4", "code": "Package: server\n\nClasses and Interfaces: \nClass ProxyUserAuthenticationFilter; // AuthenticationFilter which adds support to perform operations using end user instead of proxy user.\nClass ProxyUserAuthenticationFilterInitializer; // Filter initializer to initialize ProxyUserAuthenticationFilter which adds support to perform operations using end user instead of proxy user.\n", "des": "Provides the server-side framework for authentication."}
{"index": 2759, "repo": "spring-beans-6.0.11", "code": "Package: parsing\n\nClasses and Interfaces: \npublic abstract class AbstractComponentDefinition extends Object implements ComponentDefinition; // Base implementation of ComponentDefinition that provides a basic implementation of AbstractComponentDefinition.getDescription() which delegates to ComponentDefinition.getName().\npublic class AliasDefinition extends Object implements BeanMetadataElement; // Representation of an alias that has been registered during the parsing process.\npublic class BeanComponentDefinition extends BeanDefinitionHolder implements ComponentDefinition; // ComponentDefinition based on a standard BeanDefinition, exposing the given bean definition as well as inner bean definitions and bean references for the given bean.\npublic class BeanDefinitionParsingException extends BeanDefinitionStoreException; // Exception thrown when a bean definition reader encounters an error during the parsing process.\npublic class BeanEntry extends Object implements ParseState.Entry; // ParseState entry representing a bean definition.\npublic interface ComponentDefinition extends BeanMetadataElement; // Interface that describes the logical view of a set of BeanDefinitions and BeanReferences as presented in some configuration context.\npublic class CompositeComponentDefinition extends AbstractComponentDefinition; // ComponentDefinition implementation that holds one or more nested ComponentDefinition instances, aggregating them into a named group of components.\npublic class ConstructorArgumentEntry extends Object implements ParseState.Entry; // ParseState entry representing a (possibly indexed) constructor argument.\npublic interface DefaultsDefinition extends BeanMetadataElement; // Marker interface for a defaults definition, extending BeanMetadataElement to inherit source exposure.\npublic class EmptyReaderEventListener extends Object implements ReaderEventListener; // Empty implementation of the ReaderEventListener interface, providing no-op implementations of all callback methods.\npublic class FailFastProblemReporter extends Object implements ProblemReporter; // Simple ProblemReporter implementation that exhibits fail-fast behavior when errors are encountered.\npublic class ImportDefinition extends Object implements BeanMetadataElement; // Representation of an import that has been processed during the parsing process.\npublic class Location extends Object; // Class that models an arbitrary location in a resource.\npublic class NullSourceExtractor extends Object implements SourceExtractor; // Simple implementation of SourceExtractor that returns null as the source metadata.\npublic final class ParseState extends Object; // Simple ArrayDeque-based structure for tracking the logical position during a parsing process.\npublic static interface ParseState.Entry; // Marker interface for entries into the ParseState.\npublic class PassThroughSourceExtractor extends Object implements SourceExtractor; // Simple SourceExtractor implementation that just passes the candidate source metadata object through for attachment.\n", "des": "Support infrastructure for bean definition parsing."}
{"index": 3480, "repo": "dagger-producers-2.47", "code": "Package: producers\n\nSub Packages: \npackage producers.monitoring; // This package provides hooks for monitoring producers.\n\nClasses and Interfaces: \nInterface Producer<T>; // An interface that represents the production of a type T.\nClass Produced<T>; // An interface that represents the result of a production of type T, or an exception that was thrown during that production.\nClass Producers; // Utility methods to create Producers.\nEnum CancellationPolicy.Propagation; // Enumeration of the options for what happens to a parent component when one of its child components is cancelled.\nAnnotation Type CancellationPolicy; // Annotates a production component or subcomponent to specify its policy when a child component is cancelled.\nAnnotation Type ProducerModule; // Annotates a class that contributes Produces bindings to the production component.\nAnnotation Type Produces; // Annotates methods of a producer module to create a production binding.\nAnnotation Type Production; // Qualifies a type that will be provided to the framework for use internally.\nAnnotation Type ProductionComponent; // Annotates an interface or abstract class for which a fully-formed, dependency-injected implementation is to be generated from a set of modules.\nAnnotation Type ProductionComponent.Builder; // A builder for a production component.\nAnnotation Type ProductionComponent.Factory; // A factory for a production component.\nAnnotation Type ProductionScope; // A scope annotation for provision bindings that are tied to the lifetime of a ProductionComponent or ProductionSubcomponent.\nAnnotation Type ProductionSubcomponent; // A subcomponent that inherits the bindings from a parent Component, Subcomponent, ProductionComponent, or ProductionSubcomponent.\nAnnotation Type ProductionSubcomponent.Builder; // A builder for a production subcomponent.\nAnnotation Type ProductionSubcomponent.Factory; // A factory for a production subcomponent.\n", "des": "This package contains the public API for Dagger 2's producer functionality."}
{"index": 2889, "repo": "spring-integration-core-6.1.2", "code": "Package: micrometer\n\nClasses and Interfaces: \npublic class MicrometerMetricsCaptor extends Object implements MetricsCaptor; // The Micrometer implementation of MetricsCaptor.\nprotected abstract static class MicrometerMetricsCaptor.AbstractMeter<M extends io.micrometer.core.instrument.Meter> extends Object implements MeterFacade;\nprotected static class MicrometerMetricsCaptor.MicroCounter extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Counter> implements CounterFacade;\nprotected static class MicrometerMetricsCaptor.MicroCounterBuilder extends Object implements MetricsCaptor.CounterBuilder;\nprotected static class MicrometerMetricsCaptor.MicroGauge extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Gauge> implements GaugeFacade;\nprotected static class MicrometerMetricsCaptor.MicroGaugeBuilder extends Object implements MetricsCaptor.GaugeBuilder;\nprotected static class MicrometerMetricsCaptor.MicroTimer extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Timer> implements TimerFacade;\nprotected static class MicrometerMetricsCaptor.MicroTimerBuilder extends Object implements MetricsCaptor.TimerBuilder;\n@Configuration(proxyBeanMethods=false) public class MicrometerMetricsCaptorConfiguration extends Object; // A Configuration to add a MicrometerMetricsCaptor.\npublic class MicrometerMetricsCaptorImportSelector extends Object implements org.springframework.context.annotation.ImportSelector; // An ImportSelector to conditionally add a MicrometerMetricsCaptorConfiguration bean when io.micrometer.core.instrument.MeterRegistry is present in classpath.\n", "des": "Provides classes to support the use of Micrometer for metrics."}
{"index": 2877, "repo": "spring-integration-core-6.1.2", "code": "Package: scattergather\n\nClasses and Interfaces: \npublic class ScatterGatherHandler extends AbstractReplyProducingMessageHandler implements ManageableLifecycle; // The MessageHandler implementation for the Scatter-Gather EIP pattern.\n", "des": "Provides classes supporting the Scatter-Gather pattern."}
{"index": 2062, "repo": "slf4j-ext-2.0.7", "code": "Package: profiler\n\nClasses and Interfaces: \npublic enum DurationUnit extends Enum<DurationUnit>; // An enum of supported time units.\npublic class Profiler extends Object implements TimeInstrument; // A poor man's profiler to measure the time elapsed performing some lengthy task.\npublic class ProfilerRegistry extends Object; // A minimalist registry of profilers.\npublic class SpacePadder extends Object;\npublic class StopWatch extends Object implements TimeInstrument; // A very basic TimeInstrument which can be started and stopped once and only once.\npublic interface TimeInstrument; // This interface sets the methods that must be implemented by Profiler and StopWatch classes.\n", "des": "Poor man's profiler API"}
{"index": 512, "repo": "commons-vfs2-2.9.0", "code": "Package: impl\n\nClasses and Interfaces: \nClass DecoratedFileObject; // Base class to build a fileObject decoration.\nClass DefaultFileContentInfo; // The default file content information.\nClass DefaultFileMonitor; // A polling FileMonitor implementation.\nClass DefaultFileReplicator; // A simple file replicator and temporary file store.\nClass DefaultFileSystemConfigBuilder; // Default options usable for all file systems.\nClass DefaultFileSystemManager; // The default file system manager implementation.\nClass DefaultProviderConfiguration; // Same as ProviderConfiguration but for the default provider.\nClass FileContentInfoFilenameFactory; // The FileContentInfoFilenameFactory.\nClass PrivilegedFileReplicator; // A file replicator that wraps another file replicator, performing the replication as a privileged action.\nClass ProviderConfiguration; // This class describes the configuration for a provider.\nClass StandardFileSystemManager; // A FileSystemManager that configures itself from an XML (Default: providers.xml) configuration file.\nClass SynchronizedFileObject; // This decorator synchronize all access to the FileObject.\nClass VFSClassLoader; // A class loader that can load classes and resources from a search path.\nClass VirtualFileName; // A simple Filename to hold the scheme for to be created virtual file system.\nClass VirtualFileProvider; // A virtual file system provider.\nClass VirtualFileSystem; // A logical file system, made up of set of junctions, or links, to files from other file systems.\n", "des": "The standard VFS implementation."}
{"index": 2226, "repo": "spring-data-commons-3.1.2", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class ClassUtils extends Object; // Utility class to work with classes.\npublic abstract class QueryExecutionConverters extends Object; // Converters to potentially wrap the execution of a repository method into a variety of wrapper types potentially being available on the classpath.\npublic static interface QueryExecutionConverters.ExecutionAdapter;\npublic static interface QueryExecutionConverters.ThrowingSupplier;\npublic static final class QueryExecutionConverters.WrapperType extends Object;\npublic abstract class ReactiveWrapperConverters extends Object; // Conversion support for reactive wrapper types.\n@Deprecated(since=\"3.0\", forRemoval=true) public abstract class ReactiveWrappers extends Object;\n@Deprecated(since=\"3.0\", forRemoval=true) public static enum ReactiveWrappers.ReactiveLibrary extends Enum<ReactiveWrappers.ReactiveLibrary>;\npublic abstract class TxUtils extends Object; // Simple constants holder.\n", "des": "Utility classes for repository implementations."}
{"index": 183, "repo": "ignite-core-2.15.0", "code": "Package: future\n\nClasses and Interfaces: \nClass AsyncFutureListener<V>; // Wraps listener and executes it in specified executor.\nClass CountDownFuture;\nClass GridCompoundFuture<T,R>; // Future composed of multiple inner futures.\nClass GridCompoundIdentityFuture<T>; // Compound future with reducer which accepts and produces results of the same type.\nClass GridEmbeddedFuture<A,B>; // Future which waits for embedded future to complete and then asynchronously executes provided closure with embedded future result.\nClass GridFinishedFuture<T>; // Future that is completed at creation time.\nClass GridFutureAdapter<R>; // Future adapter.\nClass IgniteFinishedFutureImpl<V>;\nClass IgniteFutureImpl<V>; // Implementation of public API future.\nClass IgniteRemoteMapTask<T,R>; // Util task that will execute ComputeTask on a given node.\n", "des": "Future related classes."}
{"index": 838, "repo": "calcite-core-1.34.0", "code": "Package: profile\n\nClasses and Interfaces: \nInterface Profiler; // Analyzes data sets.\nInterface Profiler.Statistic; // Statistic produced by the profiler.\nClass Profiler.Column; // Column.\nClass Profiler.Distribution; // Value distribution, including cardinality and optionally values, of a column or set of columns.\nClass Profiler.FunctionalDependency; // Functional dependency.\nClass Profiler.Profile; // The result of profiling, contains various statistics about the data in a table.\nClass Profiler.RowCount; // Whole data set.\nClass Profiler.Unique; // Unique key.\nClass ProfilerImpl; // Implementation of Profiler that only investigates \"interesting\" combinations of columns.\nClass ProfilerImpl.Builder; // Builds a ProfilerImpl.\nClass SimpleProfiler; // Basic implementation of Profiler.\n", "des": "Utilities to analyze data sets."}
{"index": 726, "repo": "mina-core-3.0.0-M2", "code": "Package: executor\n\nClasses and Interfaces: \nInterface Event; // A IoHandler event to be submitted to an IoHandlerExecutor.\nInterface EventVisitor; // Implement this interface for implementing different behavior on different Event.\nInterface IoHandlerExecutor; // A class in charge of executing IoHandler related events.\nClass CloseEvent; // A session was closed event.\nClass IdleEvent; // An IoSession is idle (no sent or receive events)\nClass OpenEvent; // An IoSession open Event\nClass OrderedHandlerExecutor; // Use this executor if you want the IoHandler events of a session to be executed in order and on the same thread.\nClass ReceiveEvent; // A IoSession received a message Event.\nClass SentEvent; // An IoSession sent a message Event\nClass UnorderHandlerExecutor; // (in progress)\n", "des": "Classes in charge of decoupling IoHandler event of the low level read/write/accept I/O threads ( SelectorLoop )."}
{"index": 2422, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: properties\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint.class) @EnableConfigurationProperties(ConfigurationPropertiesReportEndpointProperties.class) public class ConfigurationPropertiesReportEndpointAutoConfiguration extends Object; // Auto-configuration for the ConfigurationPropertiesReportEndpoint.\n@ConfigurationProperties(\"management.endpoint.configprops\") public class ConfigurationPropertiesReportEndpointProperties extends Object; // Configuration properties for ConfigurationPropertiesReportEndpoint.\n", "des": "Auto-configuration for actuator property concerns."}
{"index": 3578, "repo": "lucene-test-framework-9.7.0", "code": "Package: analysis\n\nSub Packages: \npackage analysis.standard; // Classes to support StandardAnalyzer component testing.\n\nClasses and Interfaces: \nInterface BaseTokenStreamTestCase.CheckClearAttributesAttribute; // Attribute that records if it was cleared or not.\nClass BaseTokenStreamFactoryTestCase; // Base class for testing tokenstream factories.\nClass BaseTokenStreamTestCase; // Base class for all Lucene unit tests that use TokenStreams.\nClass BaseTokenStreamTestCase.CheckClearAttributesAttributeImpl; // Attribute that records if it was cleared or not.\nClass CannedBinaryTokenStream; // TokenStream from a canned list of binary (BytesRef-based) tokens.\nClass CannedBinaryTokenStream.BinaryToken; // Represents a binary token.\nClass CannedTokenStream; // TokenStream from a canned list of Tokens.\nClass CollationTestBase; // Base test class for testing Unicode collation.\nClass CrankyTokenFilter; // Throws IOException from random Tokenstream methods.\nClass LookaheadTokenFilter<T extends LookaheadTokenFilter.Position>; // An abstract TokenFilter to make it easier to build graph token filters requiring some lookahead.\nClass LookaheadTokenFilter.Position; // Holds all state for a single position; subclass this to record other state at each position.\nClass MockAnalyzer; // Analyzer for testing\nClass MockBytesAnalyzer; // Analyzer for testing that encodes terms as UTF-16 bytes.\nClass MockCharFilter; // the purpose of this charfilter is to send offsets out of bounds if the analyzer doesn't use correctOffset or does incorrect offset math.\nClass MockFixedLengthPayloadFilter; // TokenFilter that adds random fixed-length payloads.\nClass MockGraphTokenFilter; // Randomly inserts overlapped (posInc=0) tokens with posLength sometimes > 1.\nClass MockHoleInjectingTokenFilter; // Randomly injects holes (similar to what a stopfilter would do)\nClass MockLowerCaseFilter; // A lowercasing TokenFilter.\nClass MockPayloadAnalyzer; // Wraps a whitespace tokenizer with a filter that sets the first token, and odd tokens to posinc=1, and all others to 0, encoding the position as pos: XXX in the payload.\nClass MockRandomLookaheadTokenFilter; // Uses LookaheadTokenFilter to randomly peek at future tokens.\n", "des": "Support for testing analysis components."}
{"index": 2565, "repo": "pulsar-common-3.0.0", "code": "Package: sasl\n\nClasses and Interfaces: \npublic class JAASCredentialsContainer extends Object implements Closeable; // JAAS Credentials Container.\npublic class KerberosName extends Object; // This class implements parsing and handling of Kerberos principal names.\npublic static class KerberosName.BadFormatString extends IOException;\npublic static class KerberosName.NoMatchingRule extends IOException;\npublic class SaslConstants extends Object; // SASL Constants.\npublic class TGTRefreshThread extends Thread; // TGT Refresh Thread.\n", "des": "Implementation of Simple Authentication and Security Layer."}
{"index": 924, "repo": "commons-compress-1.23.0", "code": "Package: lzw\n\nClasses and Interfaces: \nClass LZWInputStream; // Generic LZW implementation.\n", "des": "Generic LZW implementation."}
{"index": 2977, "repo": "pulsar-broker-3.0.0", "code": "Package: pendingack\n\nSub Packages: \npackage pendingack.impl; // The implementation for processing pending acks in transactions.\n\nClasses and Interfaces: \npublic interface PendingAckHandle; // Handle for processing pending acks for transactions.\npublic interface PendingAckHandleStats;\npublic interface PendingAckReplyCallBack; // Call back for pending ack reply.\npublic interface PendingAckStore; // To store transaction pending ack.\npublic interface TransactionPendingAckStoreProvider; // Provider of transaction pending ack store.\n", "des": "Component for processing pending acks for transactions."}
{"index": 3805, "repo": "lucene-analysis-common-9.7.0", "code": "Package: pattern\n\nClasses and Interfaces: \nClass PatternCaptureGroupFilterFactory; // Factory for PatternCaptureGroupTokenFilter.\nClass PatternCaptureGroupTokenFilter; // CaptureGroup uses Java regexes to emit multiple tokens - one for each capture group in one or more patterns.\nClass PatternReplaceCharFilter; // CharFilter that uses a regular expression for the target of replace string.\nClass PatternReplaceCharFilterFactory; // Factory for PatternReplaceCharFilter.\nClass PatternReplaceFilter; // A TokenFilter which applies a Pattern to each token in the stream, replacing match occurrences with the specified replacement string.\nClass PatternReplaceFilterFactory; // Factory for PatternReplaceFilter.\nClass PatternTokenizer; // This tokenizer uses regex pattern matching to construct distinct tokens for the input stream.\nClass PatternTokenizerFactory; // Factory for PatternTokenizer.\nClass PatternTypingFilter; // Set a type attribute to a parameterized value when tokens are matched by any of a several regex patterns.\nClass PatternTypingFilter.PatternTypingRule; // Value holding class for pattern typing rules.\nClass PatternTypingFilterFactory; // Provides a filter that will analyze tokens with the analyzer from an arbitrary field type.\nClass SimplePatternSplitTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternSplitTokenizerFactory; // Factory for SimplePatternSplitTokenizer, for producing tokens by splitting according to the provided regexp.\nClass SimplePatternTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternTokenizerFactory; // Factory for SimplePatternTokenizer, for matching tokens based on the provided regexp.\n", "des": "Set of components for pattern-based (regex) analysis."}
{"index": 3254, "repo": "opencms-core-15.0", "code": "Package: configuration\n\nSub Packages: \npackage configuration.preferences; // Classes to build the user preferences dialog.\n\nClasses and Interfaces: \nInterface I_CmsConfigurationParameterHandler; // Used for classes that are configurable using <param name=\"name\">value</param> in the XML configuration.\nInterface I_CmsNeedsAdminCmsObject; // Interface for configured classes that need a CmsObject with admin privileges.\nInterface I_CmsXmlConfiguration; // Each configurable element in OpenCms must implement this interface.\nInterface I_CmsXmlConfigurationWithUpdateHandler; // Interface for configurations which should run custom logic when the configuration is written back by OpenCms.\nClass A_CmsXmlConfiguration; // Abstract base implementation for xml configurations.\nClass CmsAdditionalLogFolderConfig; // Bean containing additional log folders available for the log file viewer.\nClass CmsConfigurationCopyResource; // Describes a resource to copy during the creation of a new resource.\nClass CmsConfigurationManager; // Configuration manager for digesting the OpenCms XML configuration.\nClass CmsDefaultUserSettings; // Default user workplace settings, used as default values for worklace settings in the user preferences.\nClass CmsDefaultUserSettings.CmsPublishRelatedResourcesMode; // Enumeration class for defining the publish related resources mode.\nClass CmsDigesterResourceTypeCreationFactory; // Factory to create resource type instances from the XML configuration.\nClass CmsElementWithAttrsParamConfigHelper; // Helper class for parsing an element with no content but several attributes into a subclass of I_CmsConfigurationParameterHandler.\nClass CmsElementWithSubElementsParamConfigHelper; // Helper class for parsing an element with several sub-elements which are text-valued (i.e.\nClass CmsImportExportConfiguration; // Import / export master configuration class.\nClass CmsModuleConfiguration; // Modules configuration class.\nClass CmsParameterConfiguration; // Provides convenient access to configuration parameters.\nClass CmsParameterConfiguration.ParameterReader; // Used to read parameter lines from a property file.\nClass CmsParameterConfiguration.ParameterTokenizer; // This class divides property value into tokens separated by \",\".\nClass CmsParameterStore; // Class for accessing global 'weighted' configuration parameters defined in parameter files in the VFS.\nClass CmsParameterStore.WeightedValue; // An individual weighted parameter value, with a 'source' attribute for better debuggability.\nClass CmsRemoteShellConfiguration; // RMI shell server configuration.\n", "des": "Reads and writes the XML based OpenCms configuration files."}
{"index": 1524, "repo": "spring-context-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class DefaultFormattingConversionService extends FormattingConversionService; // A specialization of FormattingConversionService configured by default with converters and formatters appropriate for most applications.\npublic class FormatterPropertyEditorAdapter extends PropertyEditorSupport; // Adapter that bridges between Formatter and PropertyEditor.\npublic class FormattingConversionService extends org.springframework.core.convert.support.GenericConversionService implements FormatterRegistry, EmbeddedValueResolverAware; // A ConversionService implementation designed to be configured as a FormatterRegistry.\npublic class FormattingConversionServiceFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<FormattingConversionService>, EmbeddedValueResolverAware, org.springframework.beans.factory.InitializingBean; // A factory providing convenient access to a FormattingConversionService configured with converters and formatters for common types such as numbers and datetimes.\n", "des": "Support classes for the formatting package, providing common implementations as well as adapters."}
{"index": 3550, "repo": "guava-32.1.1-jre", "code": "Package: base\n\nClasses and Interfaces: \nInterface FinalizableReference; // Implemented by references that have code to run after garbage collection of their referents.\nInterface Function<F extends @Nullable java.lang.Object,​T extends @Nullable java.lang.Object>; // Legacy version of java.util.function.Function.\nInterface Predicate<T extends @Nullable java.lang.Object>; // Legacy version of java.util.function.Predicate.\nInterface Supplier<T extends @Nullable java.lang.Object>; // Legacy version of java.util.function.Supplier.\nClass Ascii; // Static methods pertaining to ASCII characters (those in the range of values 0x00 through 0x7F), and to strings containing such characters.\nClass CharMatcher; // Determines a true or false value for any Java char value, just as Predicate does for any Object.\nClass Charsets; // Contains constant definitions for the six standard Charset instances, which are guaranteed to be supported by all Java platform implementations.\nClass Converter<A,​B>; // A function from A to B with an associated reverse function from B to A; used for converting back and forth between different representations of the same information.\nClass Defaults; // This class provides default values for all Java types, as defined by the JLS.\nClass Enums; // Utility methods for working with Enum instances.\nClass Equivalence<T>; // A strategy for determining whether two instances are considered equivalent, and for computing hash codes in a manner consistent with that equivalence.\nClass Equivalence.Wrapper<T extends @Nullable java.lang.Object>; // Wraps an object so that Equivalence.Wrapper.equals(Object) and Equivalence.Wrapper.hashCode() delegate to an Equivalence.\nClass FinalizablePhantomReference<T>; // Phantom reference with a finalizeReferent() method which a background thread invokes after the garbage collector reclaims the referent.\nClass FinalizableReferenceQueue; // A reference queue with an associated background thread that dequeues references and invokes FinalizableReference.finalizeReferent() on them.\nClass FinalizableSoftReference<T>; // Soft reference with a finalizeReferent() method which a background thread invokes after the garbage collector reclaims the referent.\n", "des": "Basic utility libraries and interfaces."}
{"index": 345, "repo": "hadoop-hdfs-3.3.6", "code": "Package: command\n\nClasses and Interfaces: \nClass CancelCommand; // Cancels a running plan.\nClass Command; // Common interface for command handling.\nClass ExecuteCommand; // executes a given plan.\nClass HelpCommand; // Help Command prints out detailed help about each command.\nClass PlanCommand; // Class that implements Plan Command.\nClass QueryCommand; // Gets the current status of disk balancer command.\nClass ReportCommand; // Executes the report command.\n", "des": "Commands for disk balancer command line tool."}
{"index": 1681, "repo": "spring-oxm-6.0.11", "code": "Package: xstream\n\nClasses and Interfaces: \npublic class CatchAllConverter extends Object implements com.thoughtworks.xstream.converters.Converter; // XStream Converter that supports all classes, but throws exceptions for (un)marshalling.\npublic class XStreamMarshaller extends AbstractMarshaller implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Implementation of the Marshaller interface for XStream.\n", "des": "Package providing integration of XStream with Spring's O/X Mapping support."}
{"index": 1822, "repo": "pulsar-client-original-3.0.0", "code": "Package: customroute\n\nClasses and Interfaces: \npublic class PartialRoundRobinMessageRouterImpl extends Object implements MessageRouter;\n", "des": "Pulsar Client customized routing mode."}
{"index": 1906, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: context\n\nClasses and Interfaces: \n@AutoConfiguration @EnableConfigurationProperties public class ConfigurationPropertiesAutoConfiguration extends Object; // Auto-configuration for @ConfigurationProperties beans.\n@AutoConfiguration @EnableConfigurationProperties(LifecycleProperties.class) public class LifecycleAutoConfiguration extends Object; // Auto-configuration relating to the application context's lifecycle.\n@ConfigurationProperties(prefix=\"spring.lifecycle\") public class LifecycleProperties extends Object; // Configuration properties for lifecycle processing.\n@AutoConfiguration @ConditionalOnMissingBean(name=\"messageSource\", search=CURRENT) @AutoConfigureOrder(-2147483648) @Conditional(ResourceBundleCondition.class) @EnableConfigurationProperties public class MessageSourceAutoConfiguration extends Object; // Auto-configuration for MessageSource.\nprotected static class MessageSourceAutoConfiguration.ResourceBundleCondition extends SpringBootCondition;\npublic class MessageSourceProperties extends Object; // Configuration properties for Message Source.\n@AutoConfiguration @AutoConfigureOrder(-2147483648) public class PropertyPlaceholderAutoConfiguration extends Object; // Auto-configuration for PropertySourcesPlaceholderConfigurer.\n", "des": "Auto-configuration for the Spring context."}
{"index": 2095, "repo": "spring-webflux-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class ClientResponseWrapper extends Object implements ClientResponse; // Implementation of the ClientResponse interface that can be subclassed to adapt the request in a exchange filter function.\npublic static class ClientResponseWrapper.HeadersWrapper extends Object implements ClientResponse.Headers; // Implementation of the Headers interface that can be subclassed to adapt the headers in a exchange filter function.\npublic final class WebClientAdapter extends Object implements org.springframework.web.service.invoker.HttpClientAdapter; // HttpClientAdapter that enables an HttpServiceProxyFactory to use WebClient for request execution.\n", "des": "Classes supporting the org.springframework.web.reactive.function.client package."}
{"index": 115, "repo": "ignite-core-2.15.0", "code": "Package: jdk\n\nClasses and Interfaces: \nClass JdkMarshaller; // Implementation of Marshaller based on JDK serialization mechanism.\n", "des": "Contains JDK java.io based marshaller."}
{"index": 1861, "repo": "spring-test-6.0.11", "code": "Package: htmlunit\n\nSub Packages: \npackage htmlunit.webdriver; // Server-side support for testing Spring MVC applications with MockMvc and the Selenium HtmlUnitDriver.\n\nClasses and Interfaces: \npublic final class DelegatingWebConnection extends Object implements com.gargoylesoftware.htmlunit.WebConnection; // Implementation of WebConnection that allows delegating to various WebConnection implementations.\npublic static final class DelegatingWebConnection.DelegateWebConnection extends Object; // The delegate web connection.\npublic final class HostRequestMatcher extends Object implements WebRequestMatcher; // A WebRequestMatcher that allows matching on the host and optionally the port of WebRequest#getUrl().\npublic class MockMvcWebClientBuilder extends MockMvcWebConnectionBuilderSupport<MockMvcWebClientBuilder>; // MockMvcWebClientBuilder simplifies the creation of an HtmlUnit WebClient that delegates to a MockMvc instance.\npublic final class MockMvcWebConnection extends Object implements com.gargoylesoftware.htmlunit.WebConnection; // MockMvcWebConnection enables MockMvc to transform a WebRequest into a WebResponse.\npublic abstract class MockMvcWebConnectionBuilderSupport<T extends MockMvcWebConnectionBuilderSupport<T>> extends Object; // Support class that simplifies the creation of a WebConnection that uses MockMvc and optionally delegates to a real WebConnection for specific requests.\npublic final class UrlRegexRequestMatcher extends Object implements WebRequestMatcher; // A WebRequestMatcher that allows matching on WebRequest#getUrl().toExternalForm() using a regular expression.\n@FunctionalInterface public interface WebRequestMatcher; // Strategy for matching on a WebRequest.\n", "des": "Server-side support for testing Spring MVC applications with MockMvc and HtmlUnit."}
{"index": 255, "repo": "nutch-2.4", "code": "Package: pass\n\nClasses and Interfaces: \nClass PassURLNormalizer; // This URLNormalizer doesn't change urls.\n", "des": "URL normalizer dummy which does not change URLs."}
{"index": 2473, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: statsd\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.statsd.StatsdMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"statsd\") @EnableConfigurationProperties(StatsdProperties.class) public class StatsdMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to StatsD.\n@ConfigurationProperties(prefix=\"management.statsd.metrics.export\") public class StatsdProperties extends Object; // @ConfigurationProperties for configuring StatsD metrics export.\npublic class StatsdPropertiesConfigAdapter extends PropertiesConfigAdapter<StatsdProperties> implements io.micrometer.statsd.StatsdConfig; // Adapter to convert StatsdProperties to a StatsdConfig.\n", "des": "Support for exporting actuator metrics to StatsD."}
{"index": 513, "repo": "commons-vfs2-2.9.0", "code": "Package: operations\n\nSub Packages: \npackage operations.vcs; // VFS version control operations.\n\nClasses and Interfaces: \nInterface FileOperation; // A FileOperation is an object that brings an extra function to a FileObject.\nInterface FileOperationProvider; // FileOperationProvider is responsible for dealing with FileOperation's.\nInterface FileOperations; // FileOperations interface provides API to work with operations.\nClass AbstractFileOperation;\nClass AbstractFileOperationProvider;\nClass DefaultFileOperations;\n", "des": "VFS Operations handling."}
{"index": 2208, "repo": "spring-data-commons-3.1.2", "code": "Package: callback\n\nClasses and Interfaces: \n@Reflective(PublicMethodReflectiveProcessor.class) public interface EntityCallback<T>; // Marker interface for entity callbacks to be implemented in specific callback subtypes.\npublic interface EntityCallbacks; // Interface to be implemented by objects that can manage a number of EntityCallback objects and invoke these with a specific entity.\npublic interface ReactiveEntityCallbacks; // Interface to be implemented by objects that can manage a number of EntityCallback objects and invoke these with a specific entity.\n", "des": "Mapping callback API and implementation base classes."}
{"index": 2174, "repo": "spring-security-web-6.1.2", "code": "Package: channel\n\nClasses and Interfaces: \npublic abstract class AbstractRetryEntryPoint extends Object implements ChannelEntryPoint;\npublic interface ChannelDecisionManager; // Decides whether a web channel provides sufficient security.\npublic class ChannelDecisionManagerImpl extends Object implements ChannelDecisionManager, org.springframework.beans.factory.InitializingBean; // Implementation of ChannelDecisionManager.\npublic interface ChannelEntryPoint; // May be used by a ChannelProcessor to launch a web channel.\npublic class ChannelProcessingFilter extends org.springframework.web.filter.GenericFilterBean; // Ensures a web request is delivered over the required channel.\npublic interface ChannelProcessor; // Decides whether a web channel meets a specific security condition.\npublic class InsecureChannelProcessor extends Object implements org.springframework.beans.factory.InitializingBean, ChannelProcessor; // Ensures channel security is inactive by review of HttpServletRequest.isSecure() responses.\npublic class RetryWithHttpEntryPoint extends AbstractRetryEntryPoint; // Commences an insecure channel by retrying the original request using HTTP.\npublic class RetryWithHttpsEntryPoint extends AbstractRetryEntryPoint; // Commences a secure channel by retrying the original request using HTTPS.\npublic class SecureChannelProcessor extends Object implements org.springframework.beans.factory.InitializingBean, ChannelProcessor; // Ensures channel security is active by review of HttpServletRequest.isSecure() responses.\n", "des": "Classes that ensure web requests are received over required transport channels."}
{"index": 2794, "repo": "spring-amqp-3.0.6", "code": "Package: amqp\n\nSub Packages: \npackage amqp.core; // Provides core classes for the spring AMQP abstraction.\npackage amqp.event; // Classes related to application events\npackage amqp.support; // Package for Spring AMQP support classes.\npackage amqp.utils; // Provides utility classes to support Spring AMQP.\n\nClasses and Interfaces: \npublic class AmqpApplicationContextClosedException extends AmqpException; // Thrown when the connection factory has been destroyed during context close; the factory can no longer open connections.\npublic class AmqpAuthenticationException extends AmqpException; // Runtime wrapper for an authentication exception.\npublic class AmqpConnectException extends AmqpException; // RuntimeException wrapper for an ConnectException which can be commonly thrown from AMQP operations if the remote process dies or there is a network issue.\npublic class AmqpException extends RuntimeException; // Base RuntimeException for errors that occur when executing AMQP operations.\npublic class AmqpIllegalStateException extends AmqpException; // Equivalent of an IllegalStateException but within the AmqpException hierarchy.\npublic class AmqpIOException extends AmqpException; // RuntimeException wrapper for an IOException which can be commonly thrown from AMQP operations.\npublic class AmqpRejectAndDontRequeueException extends AmqpException; // Exception for listener implementations used to indicate the basic.reject will be sent with requeue=false in order to enable features such as DLQ.\npublic class AmqpRemoteException extends AmqpException; // An exception that wraps an exception thrown by the server in a request/reply scenario.\npublic class AmqpResourceNotAvailableException extends AmqpException; // The AmqpException thrown when some resource can't be accessed.\npublic class AmqpTimeoutException extends AmqpException; // Exception thrown when some time-bound operation fails to execute in the desired time.\npublic class AmqpUnsupportedEncodingException extends AmqpException; // RuntimeException for unsupported encoding in an AMQP operation.\npublic class ImmediateAcknowledgeAmqpException extends AmqpException; // Special exception for listener implementations that want to signal that the current batch of messages should be acknowledged immediately (i.e.\npublic class ImmediateRequeueAmqpException extends AmqpException; // The special AmqpException to be thrown from the listener (e.g.\n", "des": "Base package for Spring AMQP."}
{"index": 1127, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: fpga\n\nSub Packages: \npackage fpga.discovery; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\n\nClasses and Interfaces: \nInterface AbstractFpgaVendorPlugin; // FPGA plugin interface for vendor to implement.\nClass FpgaDevice; // A class that represents an FPGA card.\nClass FpgaDiscoverer;\nClass FpgaNodeResourceUpdateHandler;\nClass FpgaResourcePlugin;\nClass IntelFpgaOpenclPlugin; // Intel FPGA for OpenCL plugin.\nClass IntelFpgaOpenclPlugin.InnerShellExecutor; // Helper class to run aocl diagnose & determine major/minor numbers.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3829, "repo": "lucene-highlighter-9.7.0", "code": "Package: highlight\n\nClasses and Interfaces: \nInterface Encoder; // Encodes original text.\nInterface Formatter; // Processes terms found in the original text, typically by applying some form of mark-up to highlight terms in HTML search results pages.\nInterface Fragmenter; // Implements the policy for breaking text into multiple fragments for consideration by the Highlighter class.\nInterface Scorer; // A Scorer is responsible for scoring a stream of tokens.\nClass DefaultEncoder; // Simple Encoder implementation that does not modify the output\nClass GradientFormatter; // Formats text with different color intensity depending on the score of the term.\nClass Highlighter; // Marks up highlighted terms found in the best sections of text, using configurable Fragmenter, Scorer, Formatter, Encoder and tokenizers.\nClass NullFragmenter; // Fragmenter implementation which does not fragment the text.\nClass OffsetLimitTokenFilter; // This TokenFilter limits the number of tokens while indexing by adding up the current offset.\nClass PositionSpan; // Utility class to record Positions Spans\nClass QueryScorer; // Scorer implementation which scores text fragments by the number of unique query terms found.\nClass QueryTermExtractor; // Utility class used to extract the terms used in a query, plus any weights.\nClass QueryTermScorer; // Scorer implementation which scores text fragments by the number of unique query terms found.\nClass SimpleFragmenter; // Fragmenter implementation which breaks text up into same-size fragments with no concerns over spotting sentence boundaries.\nClass SimpleHTMLEncoder; // Simple Encoder implementation to escape text for HTML output\nClass SimpleHTMLFormatter; // Simple Formatter implementation to highlight terms with a pre and post tag.\nClass SimpleSpanFragmenter; // Fragmenter implementation which breaks text up into same-size fragments but does not split up Spans.\nClass SpanGradientFormatter; // Formats text with different color intensity depending on the score of the term using the span tag.\nClass TermVectorLeafReader; // Wraps a Terms with a LeafReader, typically from term vectors.\nClass TextFragment; // Low-level class used to record information about a section of a document with a score.\nClass TokenGroup; // One, or several overlapping tokens, along with the score(s) and the scope of the original text.\n", "des": "Highlighting search terms."}
{"index": 2207, "repo": "spring-data-commons-3.1.2", "code": "Package: mapping\n\nSub Packages: \npackage mapping.callback; // Mapping callback API and implementation base classes.\npackage mapping.context; // Mapping context API and implementation base classes.\npackage mapping.model; // Core implementation of the mapping subsystem's model.\n\nClasses and Interfaces: \npublic class AccessOptions extends Object; // Access options when using PersistentPropertyPathAccessor to get and set properties.\npublic static class AccessOptions.GetOptions extends Object; // Access options for getting values for property paths.\npublic static enum AccessOptions.GetOptions.GetNulls extends Enum<AccessOptions.GetOptions.GetNulls>; // How to handle null values during a PersistentPropertyPath traversal.\npublic static class AccessOptions.SetOptions extends Object; // Access options for setting values for property paths.\npublic static enum AccessOptions.SetOptions.Propagation extends Enum<AccessOptions.SetOptions.Propagation>; // How to propagate setting values that cross collection and map properties.\npublic static enum AccessOptions.SetOptions.SetNulls extends Enum<AccessOptions.SetOptions.SetNulls>; // How to handle intermediate null values when setting\npublic final class Alias extends Object; // A container object which may or may not contain a type alias value.\npublic class Association<P extends PersistentProperty<P>> extends Object; // Value object to capture Associations.\npublic interface AssociationHandler<P extends PersistentProperty<P>>; // Callback interface to implement functionality to be applied to a collection of Associations.\npublic final class FactoryMethod<T,P extends PersistentProperty<P>> extends Object; // Value object to encapsulate the factory method to be used when mapping persistent data to objects.\npublic interface IdentifierAccessor; // Interface for a component allowing the access of identifier values.\npublic interface InstanceCreatorMetadata<P extends PersistentProperty<P>>; // Metadata describing a mechanism to create instances of persistent types.\npublic class MappingException extends RuntimeException;\npublic class Parameter<T,P extends PersistentProperty<P>> extends Object; // Value object to represent constructor parameters.\npublic interface PersistentEntity<T,P extends PersistentProperty<P>> extends Iterable<P>; // Represents a persistent entity.\npublic interface PersistentProperty<P extends PersistentProperty<P>>;\npublic interface PersistentPropertyAccessor<T>; // Domain service to allow accessing and setting PersistentPropertys of an entity.\n", "des": "Base package for the mapping subsystem."}
{"index": 1504, "repo": "spring-context-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic abstract class CacheManagementConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic class CacheNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler allowing for the configuration of declarative cache management using either XML or using annotations.\n", "des": "Support package for declarative caching configuration, with XML schema being the primary configuration format."}
{"index": 2989, "repo": "spring-ldap-core-3.1.0", "code": "Package: core\n\nSub Packages: \npackage core.impl; // Provides a single public class which implements OdmManager.\n\nClasses and Interfaces: \npublic interface ObjectDirectoryMapper; // The ObjectDirectoryMapper keeps track of managed class metadata and is used by LdapTemplate to map to/from entity objects annotated with the annotations specified in the org.springframework.ldap.odm.annotations package.\npublic class OdmException extends NamingException; // The root of the Spring LDAP ODM exception hierarchy.\n", "des": "Provides an OdmManager interface for interaction with an LDAP directory."}
{"index": 1443, "repo": "spring-data-redis-3.1.2", "code": "Package: cache\n\nClasses and Interfaces: \npublic abstract class BatchStrategies extends Object; // A collection of predefined BatchStrategy implementations using KEYS or SCAN command.\npublic interface BatchStrategy; // A BatchStrategy to be used with RedisCacheWriter.\n@FunctionalInterface public interface CacheKeyPrefix; // CacheKeyPrefix is a callback hook for creating custom prefixes prepended to the actual key stored in Redis.\npublic interface CacheStatistics; // Cache statistics for a RedisCache.\npublic interface CacheStatisticsCollector extends CacheStatisticsProvider; // The statistics collector supports capturing of relevant RedisCache operations such as hits & misses.\npublic interface CacheStatisticsProvider; // Interface to be implemented by objects that expose CacheStatistics identified by cacheName.\npublic class RedisCache extends AbstractValueAdaptingCache; // Cache implementation using for Redis as the underlying store for cache data.\npublic class RedisCacheConfiguration extends Object; // Immutable RedisCacheConfiguration used to customize RedisCache behaviour, such as caching null values, computing cache key prefixes and handling binary serialization.\npublic class RedisCacheManager extends AbstractTransactionSupportingCacheManager; // CacheManager backed by a RedisCache.\npublic static class RedisCacheManager.RedisCacheManagerBuilder extends Object; // Builder for creating a RedisCacheManager.\npublic interface RedisCacheWriter extends CacheStatisticsProvider; // RedisCacheWriter provides low level access to Redis commands (SET, SETNX, GET, EXPIRE,...) used for caching.\n", "des": "Package providing a Redis implementation for Spring cache abstraction."}
{"index": 202, "repo": "nutch-2.4", "code": "Package: crawl\n\nClasses and Interfaces: \nInterface FetchSchedule; // This interface defines the contract for implementations that manipulate fetch times and re-fetch intervals.\nClass AbstractFetchSchedule; // This class provides common methods for implementations of FetchSchedule.\nClass AdaptiveFetchSchedule; // This class implements an adaptive re-fetch algorithm.\nClass CrawlStatus;\nClass DbUpdateMapper;\nClass DbUpdateReducer;\nClass DbUpdaterJob;\nClass DefaultFetchSchedule; // This class implements the default re-fetch schedule.\nClass FetchScheduleFactory; // Creates and caches a FetchSchedule implementation.\nClass GeneratorJob;\nClass GeneratorJob.SelectorEntry;\nClass GeneratorJob.SelectorEntryComparator;\nClass GeneratorMapper;\nClass GeneratorReducer; // Reduce class for generate The #reduce() method write a random integer to all generated URLs.\nClass InjectorJob; // This class takes a flat file of URLs and adds them to the of pages to be crawled.\nClass InjectorJob.UrlMapper;\nClass MD5Signature; // Default implementation of a page signature.\nClass NutchWritable;\nClass Signature;\nClass SignatureComparator;\nClass SignatureFactory; // Factory class, which instantiates a Signature implementation according to the current Configuration configuration.\nClass TextMD5Signature; // Default implementation of a page signature.\nClass TextProfileSignature; // An implementation of a page signature.\nClass URLPartitioner; // Partition urls by host, domain name or IP depending on the value of the parameter 'partition.url.mode' which can be 'byHost', 'byDomain' or 'byIP'\nClass URLPartitioner.FetchEntryPartitioner;\nClass URLPartitioner.SelectorEntryPartitioner;\nClass URLWebPage;\nClass UrlWithScore; // A writable comparable container for an url with score.\nClass UrlWithScore.UrlOnlyPartitioner; // A partitioner by {url}.\nClass UrlWithScore.UrlScoreComparator; // Compares by {url,score}.\nClass UrlWithScore.UrlScoreComparator.UrlOnlyComparator; // Compares by {url}.\nClass WebTableReader; // Displays information about the entries of the webtable\nClass WebTableReader.WebTableRegexMapper; // Filters the entries from the table based on a regex\nClass WebTableReader.WebTableStatCombiner;\nClass WebTableReader.WebTableStatMapper;\n", "des": "Crawl control code and tools to run the crawler."}
{"index": 1398, "repo": "spring-boot-actuator-3.1.1", "code": "Package: flyway\n\nClasses and Interfaces: \n@Endpoint(id=\"flyway\") public class FlywayEndpoint extends Object; // @Endpoint to expose flyway info.\npublic static final class FlywayEndpoint.ContextFlywayBeansDescriptor extends Object; // Description of an application context's Flyway beans.\npublic static final class FlywayEndpoint.FlywayBeansDescriptor extends Object implements OperationResponseBody; // Description of an application's Flyway beans.\npublic static class FlywayEndpoint.FlywayDescriptor extends Object; // Description of a Flyway bean.\npublic static final class FlywayEndpoint.FlywayMigrationDescriptor extends Object; // Description of a migration performed by Flyway.\n", "des": "Actuator support for Flyway."}
{"index": 37, "repo": "ignite-core-2.15.0", "code": "Package: lang\n\nClasses and Interfaces: \nInterface IgniteAsyncSupport; // since 2.0.\nInterface IgniteBiClosure<E1,E2,R>; // Defines generic closure with two parameters.\nInterface IgniteBiInClosure<E1,E2>; // Closure with two in-parameters and void return type.\nInterface IgniteBiPredicate<E1,E2>; // Defines a predicate which accepts two parameters and returns true or false.\nInterface IgniteCallable<V>; // Grid-aware adapter for Callable implementations.\nInterface IgniteClosure<E,R>; // Defines generic closure with one parameter.\nInterface IgniteFuture<V>; // Future with simplified exception handling, functional programming support and ability to listen for future completion via functional callback.\nInterface IgniteInClosure<E>; // Closure with one in-parameter and void return type.\nInterface IgniteOutClosure<T>; // Closure that does not take any parameters and returns a value.\nInterface IgnitePredicate<E>; // Defines a predicate which accepts a parameter and returns true or false.\nInterface IgniteProducer<T>; // Defines a producer which can throw IgniteCheckedException.\nInterface IgniteReducer<E,R>; // Defines generic reducer that collects multiple values and reduces them into one.\nInterface IgniteRunnable; // Grid-aware adapter for Runnable implementations.\nClass IgniteBiTuple<V1,V2>; // Convenience class representing mutable tuple of two values.\nClass IgniteProductVersion; // Represents node version.\nClass IgniteUuid; // This is a faster performing version of UUID.\nClass IgniteFutureCancelledException; // Future computation cannot be retrieved because it was cancelled.\nClass IgniteFutureTimeoutException; // Future computation completion is timed out.\nAnnotation Type IgniteAsyncCallback; // If callback has this annotation then it will be executing in another thread.\nAnnotation Type IgniteAsyncSupported; // since 2.0.\nAnnotation Type IgniteExperimental; // This annotation marks API elements (such as interfaces, methods, annotations and whole API packages) as experimental meaning that the API is not finalized yet and may be changed or replaced in future Ignite releases.\n", "des": "Contains general language constructs and functional APIs for distributed computations."}
{"index": 2737, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: util\n\nClasses and Interfaces: \npublic class ExecutionContextUserSupport extends Object; // Facilitates assigning names to objects persisting data in ExecutionContext and generating keys for ExecutionContext based on the name.\npublic final class FileUtils extends Object; // Utility methods for files used in batch processing.\n", "des": "Infrastructure utility classes."}
{"index": 196, "repo": "ignite-core-2.15.0", "code": "Package: jsr166\n\nClasses and Interfaces: \nClass ConcurrentHashMap8<K,V>; // need for java deserialization ConcurrentHashMap8 from old nodes.\nClass ConcurrentLinkedDeque8<E>; // An unbounded concurrent deque based on linked nodes.\nClass ConcurrentLinkedDeque8.Node<E>;\nClass ConcurrentLinkedHashMap<K,V>; // A hash table supporting full concurrency of retrievals and adjustable expected concurrency for updates.\nClass ConcurrentLinkedHashMap.HashEntry<K,V>; // ConcurrentHashMap list entry.\nEnum ConcurrentLinkedHashMap.QueuePolicy; // Defines queue policy for this hash map.\n", "des": "Package contains classes that from JSR166."}
{"index": 1214, "repo": "commons-math3-3.6.1", "code": "Package: regression\n\nClasses and Interfaces: \nInterface MultipleLinearRegression; // The multiple linear regression can be represented in matrix-notation.\nInterface UpdatingMultipleLinearRegression; // An interface for regression models allowing for dynamic updating of the data.\nClass AbstractMultipleLinearRegression; // Abstract base class for implementations of MultipleLinearRegression.\nClass GLSMultipleLinearRegression; // The GLS implementation of multiple linear regression.\nClass MillerUpdatingRegression; // This class is a concrete implementation of the UpdatingMultipleLinearRegression interface.\nClass OLSMultipleLinearRegression; // Implements ordinary least squares (OLS) to estimate the parameters of a multiple linear regression model.\nClass RegressionResults; // Results of a Multiple Linear Regression model fit.\nClass SimpleRegression; // Estimates an ordinary least squares regression model with one independent variable.\nClass ModelSpecificationException; // Exception thrown when a regression model is not correctly specified.\n", "des": "Statistical routines involving multivariate data."}
{"index": 3184, "repo": "tomcat-api-10.1", "code": "Package: cpdsadapter\n\nClasses and Interfaces: \nClass DriverAdapterCPDS; // An adapter for JDBC drivers that do not include an implementation of ConnectionPoolDataSource, but still include a DriverManager implementation.\nClass PStmtKeyCPDS;\n", "des": "This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations."}
{"index": 86, "repo": "ignite-core-2.15.0", "code": "Package: messages\n\nClasses and Interfaces: \nClass HandshakeMessage; // Handshake message.\nClass HandshakeMessage2; // Updated handshake message.\nClass HandshakeWaitMessage; // Message requesting to wait until node's SPI context initialize.\nClass NodeIdMessage; // Node ID message.\nClass RecoveryLastReceivedMessage; // Recovery acknowledgment message.\n", "des": "Contains implementation messages."}
{"index": 236, "repo": "nutch-2.4", "code": "Package: menu\n\nClasses and Interfaces: \nClass VerticalMenu;\n", "des": "Contains menu page classes for Web UI"}
{"index": 182, "repo": "ignite-core-2.15.0", "code": "Package: util\n\nSub Packages: \npackage util.future; // Future related classes.\npackage util.ipc; // IPC utility classes.\npackage util.nio; // NIO server interfaces and common utility classes for NIO.\npackage util.scala; // Scala supporting classes.\npackage util.test; // Contains common utility classes for JUnit integration.\npackage util.tostring; // Common utility classes for threads.\npackage util.typedef; // Contains typedefs definitions for frequently used classes.\npackage util.worker; // Common utility classes for threads.\n\nClasses and Interfaces: \nInterface ClassCache; // Class cache.\nInterface DirectBufferCleaner; // Cleaner interface for java.nio.ByteBuffer.\nInterface GridIntIterator; // Iterator over integer primitives.\nInterface GridSerializableIterable<E>; // Makes Iterable as Serializable and is useful for making anonymous serializable iterators.\nInterface GridSerializableIterator<E>; // Makes Iterator as Serializable and is useful for making anonymous serializable iterators.\nInterface IgniteTree<L,T>; // Interface for ignite internal tree.\nInterface IgniteTree.InvokeClosure<T>;\nInterface IgniteUtils.InterfaceSupplier; // Explicit class for Supplier<Enumeration<NetworkInterface>>.\nClass BasicRateLimiter; // The simplified version of Google Guava smooth rate limiter.\nClass F0; // Internal utility class that contains not peer-deployable predicates for use in internal logic.\nClass FeatureChecker; // Class extracted for fields from GridUnsafe to be absolutely independent with current and future static block initialization effects.\nClass GridAnnotationsCache; // Caches class loaders for classes.\nClass GridArgumentCheck; // This class encapsulates argument check (null and range) for public facing APIs.\nClass GridArrays; // Utility methods to work with arrays.\nClass GridAtomicInitializer<T>; // Executes initialization operation once.\nClass GridAtomicInteger; // Extended version of AtomicInteger.\nClass GridAtomicLong; // Extended version of AtomicLong.\nClass GridBoundedConcurrentLinkedHashMap<K,V>; // Concurrent map with an upper bound.\nClass GridBoundedConcurrentLinkedHashSet<E>; // Concurrent set with an upper bound.\nClass GridBoundedConcurrentOrderedMap<K,V>; // Concurrent ordered map that automatically manages its maximum size.\n", "des": "System-wide utility routine and helper classes."}
{"index": 2213, "repo": "spring-data-commons-3.1.2", "code": "Package: binding\n\nClasses and Interfaces: \n@FunctionalInterface public interface MultiValueBinding<T extends com.querydsl.core.types.Path<? extends S>,S>; // MultiValueBinding creates a Predicate out of given Path and collection value.\n@FunctionalInterface public interface OptionalValueBinding<T extends com.querydsl.core.types.Path<? extends S>,S>; // OptionalValueBinding creates a Predicate out of given Path and value.\npublic interface QuerydslBinderCustomizer<T extends com.querydsl.core.types.EntityPath<?>>; // A component that will customize QuerydslBindings for the given entity path.\npublic interface QuerydslBinderCustomizerDefaults extends QuerydslBinderCustomizer<com.querydsl.core.types.EntityPath<?>>; // A component for QuerydslBindings customization acting as default customizer the given entity path regardless of the domain type.\npublic class QuerydslBindings extends Object; // QuerydslBindings allows definition of path specific bindings.\npublic class QuerydslBindingsFactory extends Object implements ApplicationContextAware; // Factory to create QuerydslBindings using an EntityPathResolver.\n@Target({PARAMETER,TYPE}) @Retention(RUNTIME) public @interface QuerydslPredicate; // Annotation to customize the binding of HTTP request parameters to a Querydsl Predicate in Spring MVC handler methods.\npublic class QuerydslPredicateBuilder extends Object; // Builder assembling Predicate out of PropertyValues.\n@FunctionalInterface public interface SingleValueBinding<T extends com.querydsl.core.types.Path<? extends S>,S>; // SingleValueBinding creates a Predicate out of given Path and value.\n", "des": "Base classes to implement CDI support for repositories."}
{"index": 2308, "repo": "spring-boot-3.1.1", "code": "Package: info\n\nClasses and Interfaces: \n@ImportRuntimeHints(org.springframework.boot.info.BuildProperties.BuildPropertiesRuntimeHints.class) public class BuildProperties extends InfoProperties; // Provide build-related information such as group and artifact.\n@ImportRuntimeHints(org.springframework.boot.info.GitProperties.GitPropertiesRuntimeHints.class) public class GitProperties extends InfoProperties; // Provide git-related information such as commit id and time.\npublic class InfoProperties extends Object implements Iterable<InfoProperties.Entry>; // Base class for components exposing unstructured data with dedicated methods for well known keys.\npublic static final class InfoProperties.Entry extends Object; // Property entry.\npublic class JavaInfo extends Object; // Information about the Java environment the application is running in.\npublic static class JavaInfo.JavaRuntimeEnvironmentInfo extends Object; // Information about the Java Runtime Environment the application is running in.\npublic static class JavaInfo.JavaVendorInfo extends Object; // Information about the Java Vendor of the Java Runtime the application is running in.\npublic static class JavaInfo.JavaVirtualMachineInfo extends Object; // Information about the Java Virtual Machine the application is running in.\npublic class OsInfo extends Object; // Information about the Operating System the application is running on.\n", "des": "Support for providing information about an application."}
{"index": 2816, "repo": "spring-orm-6.0.11", "code": "Package: orm\n\nSub Packages: \npackage orm.hibernate5; // Package providing integration of Hibernate 5.x with Spring concepts.\npackage orm.jpa; // Package providing integration of JPA (Java Persistence API) with Spring concepts.\n\nClasses and Interfaces: \npublic class ObjectOptimisticLockingFailureException extends org.springframework.dao.OptimisticLockingFailureException; // Exception thrown on an optimistic locking violation for a mapped object.\npublic class ObjectRetrievalFailureException extends org.springframework.dao.DataRetrievalFailureException; // Exception thrown if a mapped object could not be retrieved via its identifier.\n", "des": "Root package for Spring's O/R Mapping integration classes."}
{"index": 889, "repo": "cassandra-all-4.1.2", "code": "Package: async\n\nClasses and Interfaces: \nClass NettyStreamingChannel;\nClass NettyStreamingConnectionFactory;\nClass StreamCompressionSerializer; // A serialiazer for stream compressed files (see package-level documentation).\nClass StreamingMultiplexedChannel; // Responsible for sending StreamMessages to a given peer.\n", "des": "Non-blocking streaming with netty"}
{"index": 2342, "repo": "spring-boot-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \npublic final class ClientHttpRequestFactories extends Object; // Utility class that can be used to create ClientHttpRequestFactory instances configured using given ClientHttpRequestFactorySettings.\npublic record ClientHttpRequestFactorySettings(Duration connectTimeout, Duration readTimeout, Boolean bufferRequestBody, SslBundle sslBundle) extends Record; // Settings that can be applied when creating a ClientHttpRequestFactory.\n@Deprecated(since=\"3.0.0\", forRemoval=true) public class ClientHttpRequestFactorySupplier extends Object implements Supplier<org.springframework.http.client.ClientHttpRequestFactory>;\npublic class RestTemplateBuilder extends Object; // Builder that can be used to configure and create a RestTemplate.\n@FunctionalInterface public interface RestTemplateCustomizer; // Callback interface that can be used to customize a RestTemplate.\n@FunctionalInterface public interface RestTemplateRequestCustomizer<T extends org.springframework.http.client.ClientHttpRequest>; // Callback interface that can be used to customize the ClientHttpRequest sent from a RestTemplate.\npublic class RootUriTemplateHandler extends Object implements org.springframework.web.util.UriTemplateHandler; // UriTemplateHandler to set the root for URI that starts with '/'.\n", "des": "Web client utilities."}
{"index": 587, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: console\n\nClasses and Interfaces: \nInterface CommandInterpreter; // A command interpreter is a shell that can interpret command lines.\nInterface CommandProvider; // When an object wants to provide a number of commands to the console, it should register an object with this interface.\nClass ConsoleSession; // A console session service provides the input and output to a single console session.\n", "des": "Provides services related to the Equinox console."}
{"index": 24, "repo": "commons-collections4-4.4", "code": "Package: multimap\n\nClasses and Interfaces: \nClass AbstractListValuedMap<K,V>; // Abstract implementation of the ListValuedMap interface to simplify the creation of subclass implementations.\nClass AbstractMultiValuedMap<K,V>; // Abstract implementation of the MultiValuedMap interface to simplify the creation of subclass implementations.\nClass AbstractMultiValuedMapDecorator<K,V>; // Decorates another MultiValuedMap to provide additional behaviour.\nClass AbstractSetValuedMap<K,V>; // Abstract implementation of the SetValuedMap interface to simplify the creation of subclass implementations.\nClass ArrayListValuedHashMap<K,V>; // Implements a ListValuedMap, using a HashMap to provide data storage and ArrayLists as value collections.\nClass HashSetValuedHashMap<K,V>; // Implements a SetValuedMap, using a HashMap to provide data storage and HashSets as value collections.\nClass TransformedMultiValuedMap<K,V>; // Decorates another MultiValuedMap to transform objects that are added.\nClass UnmodifiableMultiValuedMap<K,V>; // Decorates another MultiValuedMap to ensure it can't be altered.\n", "des": "This package contains implementations of the MultiValuedMap interfaces."}
{"index": 2786, "repo": "spring-expression-6.0.11", "code": "Package: spel\n\nSub Packages: \npackage spel.ast; // SpEL's abstract syntax tree.\npackage spel.standard; // SpEL's standard parser implementation.\npackage spel.support; // SpEL's default implementations for various core abstractions.\n\nClasses and Interfaces: \npublic class CodeFlow extends Object implements org.springframework.asm.Opcodes; // Manages the class being generated by the compilation process.\n@FunctionalInterface public static interface CodeFlow.ClinitAdder; // Interface used to generate clinit static initializer blocks.\n@FunctionalInterface public static interface CodeFlow.FieldAdder; // Interface used to generate fields.\npublic interface CompilablePropertyAccessor extends PropertyAccessor, org.springframework.asm.Opcodes; // A compilable property accessor is able to generate bytecode that represents the access operation, facilitating compilation to bytecode of expressions that use the accessor.\npublic abstract class CompiledExpression extends Object; // Base superclass for compiled expressions.\npublic class ExpressionState extends Object; // ExpressionState is for maintaining per-expression-evaluation state: any changes to it are not seen by other expressions, but it gives a place to hold local variables and for component expressions in a compound expression to communicate state.\npublic class InternalParseException extends RuntimeException; // Wraps a real parse exception.\npublic enum SpelCompilerMode extends Enum<SpelCompilerMode>; // Captures the possible configuration settings for a compiler that can be used when evaluating expressions.\npublic class SpelEvaluationException extends EvaluationException; // Root exception for Spring EL related exceptions.\npublic enum SpelMessage extends Enum<SpelMessage>; // Contains all the messages that can be produced by the Spring Expression Language.\npublic static enum SpelMessage.Kind extends Enum<SpelMessage.Kind>; // Message kinds.\npublic interface SpelNode; // Represents a node in the AST for a parsed expression.\npublic class SpelParseException extends ParseException; // Root exception for Spring EL related exceptions.\npublic class SpelParserConfiguration extends Object; // Configuration object for the SpEL expression parser.\n", "des": "SpEL's central implementation package."}
{"index": 3500, "repo": "poi-5.2.3", "code": "Package: eventfilesystem\n\nClasses and Interfaces: \nInterface POIFSReaderListener; // Interface POIFSReaderListener\nClass POIFSReader; // An event-driven reader for POIFS file systems.\nClass POIFSReaderEvent; // Class POIFSReaderEvent\n", "des": "The eventfilesystem is an efficient method for reading OLE 2 CDF files."}
{"index": 1288, "repo": "spring-core-6.0.11", "code": "Package: filter\n\nClasses and Interfaces: \npublic abstract class AbstractClassTestingTypeFilter extends Object implements TypeFilter; // Type filter that exposes a ClassMetadata object to subclasses, for class testing purposes.\npublic abstract class AbstractTypeHierarchyTraversingFilter extends Object implements TypeFilter; // Type filter that is aware of traversing over hierarchy.\npublic class AnnotationTypeFilter extends AbstractTypeHierarchyTraversingFilter; // A simple TypeFilter which matches classes with a given annotation, checking inherited annotations as well.\npublic class AspectJTypeFilter extends Object implements TypeFilter; // Type filter that uses AspectJ type pattern for matching.\npublic class AssignableTypeFilter extends AbstractTypeHierarchyTraversingFilter; // A simple filter which matches classes that are assignable to a given type.\npublic class RegexPatternTypeFilter extends AbstractClassTestingTypeFilter; // A simple filter for matching a fully-qualified class name with a regex Pattern.\n@FunctionalInterface public interface TypeFilter; // Base interface for type filters using a MetadataReader.\n", "des": "Core support package for type filtering (e.g."}
{"index": 2055, "repo": "spring-ws-security-4.0.5", "code": "Package: wss4j2\n\nSub Packages: \npackage wss4j2.callback; // Contains CallbackHandler implementations for WSS4J 2.0.\npackage wss4j2.support; // Contains support classes for working with WSS4J 2.0.\n\nClasses and Interfaces: \npublic class Wss4jSecurityFaultException extends WsSecurityFaultException; // WSS4J-specific version of the WsSecurityFaultException.\npublic class Wss4jSecurityInterceptor extends AbstractWsSecurityInterceptor implements org.springframework.beans.factory.InitializingBean; // A WS-Security endpoint interceptor based on Apache's WSS4J.\npublic class Wss4jSecuritySecurementException extends WsSecuritySecurementException; // WSS4J-specific version of the WsSecuritySecurementException.\npublic class Wss4jSecurityValidationException extends WsSecurityValidationException; // WSS4J-specific version of the WsSecurityValidationException.\n", "des": "Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS."}
{"index": 2245, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: context\n\nClasses and Interfaces: \npublic class KeyValueMappingContext<E extends KeyValuePersistentEntity<?,P>,P extends KeyValuePersistentProperty<P>> extends AbstractMappingContext<E,P>; // Default implementation of a MappingContext using KeyValuePersistentEntity and KeyValuePersistentProperty as primary abstractions.\n", "des": "Infrastructure for the Key-Value mapping context."}
{"index": 1200, "repo": "commons-math3-3.6.1", "code": "Package: univariate\n\nClasses and Interfaces: \nInterface BaseUnivariateOptimizer<FUNC extends UnivariateFunction>; // As of 3.1 (to be removed in 4.0).\nInterface UnivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractUnivariateOptimizer; // As of 3.1 (to be removed in 4.0).\nClass BracketFinder; // As of 3.1 (to be removed in 4.0).\nClass BrentOptimizer; // As of 3.1 (to be removed in 4.0).\nClass SimpleUnivariateValueChecker; // As of 3.1 (to be removed in 4.0).\nClass UnivariateMultiStartOptimizer<FUNC extends UnivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass UnivariatePointValuePair; // As of 3.1 (to be removed in 4.0).\n", "des": "Univariate real functions minimum finding algorithms."}
{"index": 1703, "repo": "drill-common-1.21.1", "code": "Package: types\n\nClasses and Interfaces: \npublic enum BooleanType extends Enum<BooleanType>; // Enum that contains two boolean types: TRUE and FALSE.\npublic class Types extends Object;\n", "des": "Logical data types."}
{"index": 1303, "repo": "groovy-all-4.0.13", "code": "Package: builder\n\nClasses and Interfaces: \npublic class JmxBuilderException extends RuntimeException; // Runtime exception used by JmxBuilder.\npublic class JmxBuilderModelMBean extends RequiredModelMBean implements NotificationListener; // The JmxBuilderModelMBean is the MBean class that proxies exported POGO/POJO inside the MBeanServer.\npublic class JmxEventEmitter extends NotificationBroadcasterSupport implements JmxEventEmitterMBean; // The JmxEventEmitter is a JMX Broadcaster class that is used to send generic events on the MBeanServer's event bus.\npublic interface JmxEventEmitterMBean; // This is the management interface for JmxEventEmitter.\npublic class JmxEventListener extends Object implements NotificationListener; // The JmxEventListener class is used by the builder to listen to events on the event bus.\n", "des": "Classes for the JMX Builder."}
{"index": 1704, "repo": "drill-common-1.21.1", "code": "Package: util\n\nClasses and Interfaces: \npublic class ConstructorChecker extends Object;\npublic class DataInputInputStream extends InputStream;\npublic class DataOutputOutputStream extends OutputStream;\npublic class DrillDateTimeFormatter extends Object; // Extends regular Instant.parse(java.lang.CharSequence) with more formats.\npublic class DrillExceptionUtil extends Object; // Utility class which contain methods for conversion Drill ProtoBuf Error and Throwable\npublic class DrillFileUtils extends Object;\npublic class DrillStringUtils extends Object;\npublic class GuavaPatcher extends Object;\npublic class GuavaUtils extends Object; // Utility class which contain methods for conversion guava and shaded guava classes.\npublic class ProtobufPatcher extends Object;\n", "des": "Utilities useful across packages."}
{"index": 2035, "repo": "spring-messaging-6.0.11", "code": "Package: service\n\nClasses and Interfaces: \npublic class DestinationVariableArgumentResolver extends Object implements RSocketServiceArgumentResolver; // RSocketServiceArgumentResolver for a @DestinationVariable annotated argument.\npublic class MetadataArgumentResolver extends Object implements RSocketServiceArgumentResolver; // RSocketServiceArgumentResolver for metadata entries.\npublic class PayloadArgumentResolver extends Object implements RSocketServiceArgumentResolver; // RSocketServiceArgumentResolver for @Payload annotated arguments.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(org.springframework.messaging.rsocket.service.RSocketExchangeReflectiveProcessor.class) public @interface RSocketExchange; // Annotation to declare a method on an RSocket service interface as an RSocket endpoint.\npublic final class RSocketRequestValues extends Object; // Container for RSocket request values extracted from an @RSocketExchange-annotated method and argument values passed to it.\npublic static final class RSocketRequestValues.Builder extends Object; // Builder for RSocketRequestValues.\npublic interface RSocketServiceArgumentResolver; // Resolve an argument from an @RSocketExchange-annotated method to one or more RSocket request values.\npublic final class RSocketServiceProxyFactory extends Object; // Factory for creating a client proxy given an RSocket service interface with @RSocketExchange methods.\npublic static final class RSocketServiceProxyFactory.Builder extends Object; // Builder to create an RSocketServiceProxyFactory.\n", "des": "Annotations to declare an RSocket service contract with request methods along with a proxy factory backed by an RSocketRequester."}
{"index": 2573, "repo": "camel-api-4.0.0-RC1", "code": "Package: camel\n\nSub Packages: \npackage camel.catalog; // Camel Catalog API\npackage camel.cloud; // Camel cloud\npackage camel.cluster; // Camel Cluster support\npackage camel.health; // Camel Health Check support\npackage camel.spi; // Service Provider Interfaces used by the Camel runtime which are plugin strategies.\n\nClasses and Interfaces: \npublic interface AfterPropertiesConfigured; // To perform optional initialization on an element after its properties has been configured.\npublic interface AggregationStrategy; // A strategy for aggregating two exchanges together into a single exchange.\npublic class AlreadyStoppedException extends RuntimeCamelException; // Exception thrown in situations when a Service has already been stopped.\npublic interface ApiEndpoint extends Endpoint; // Marks the Endpoint as an endpoint from an API based component.\npublic interface AsyncCallback extends Runnable; // The callback interface for an AsyncProcessor so that it can notify you when an Exchange is done.\npublic interface AsyncEndpoint extends Endpoint; // Marks the Endpoint as support asynchronous non-blocking routing in its consumer and producer.\npublic interface AsyncProcessor extends Processor; // An asynchronous processor which can process an Exchange in an asynchronous fashion and signal completion by invoking the AsyncCallback.\npublic interface AsyncProducer extends Producer, AsyncProcessor; // Asynchronous producer\npublic interface BatchConsumer extends Consumer; // A consumer of a batch of message exchanges from an Endpoint\n@Retention(RUNTIME) @Documented @Target({FIELD,METHOD,CONSTRUCTOR,PARAMETER}) public @interface BeanConfigInject; // Used to indicate an injection point of a configuration bean (obtained from the Registry, or a new instance is created) into a POJO.\n@Retention(RUNTIME) @Documented @Target({FIELD,METHOD,CONSTRUCTOR,PARAMETER}) public @interface BeanInject; // Used to indicate an injection point of a bean obtained from the Registry, into a POJO.\npublic enum BeanScope extends Enum<BeanScope>;\npublic interface BinaryPredicate extends Predicate; // A predicate which evaluates a binary expression.\n@Retention(RUNTIME) @Documented @Target({TYPE,FIELD,METHOD}) public @interface BindToRegistry; // Used for binding a bean to the registry.\n@Retention(RUNTIME) @Documented @Target(PARAMETER) public @interface Body; // Marks a parameter as being the body of an inbound Message\n@FunctionalInterface public interface Builder<T>;\n", "des": "The core Camel API."}
{"index": 2017, "repo": "spring-boot-devtools-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \npublic class DefaultSourceDirectoryUrlFilter extends Object implements SourceDirectoryUrlFilter; // Default implementation of SourceDirectoryUrlFilter that attempts to match URLs using common naming conventions.\npublic class HttpRestartServer extends Object; // An HTTP server that can be used to upload updated ClassLoaderFiles and trigger restarts.\npublic class HttpRestartServerHandler extends Object implements Handler; // Adapts HttpRestartServer to a Handler.\npublic class RestartServer extends Object; // Server used to restart the current application with updated ClassLoaderFiles.\n@FunctionalInterface public interface SourceDirectoryUrlFilter; // Filter URLs based on a source directory name.\n", "des": "Remote restart server."}
{"index": 3189, "repo": "tomcat-api-10.1", "code": "Package: bcel\n\nSub Packages: \npackage bcel.classfile; // This package contains the classes that describe the structure of a Java class file and a class file parser.\n\nClasses and Interfaces: \nClass Const; // Constants for the project, mostly defined in the JVM specification.\n", "des": "This package contains basic classes for the Byte Code Engineering Library and constants defined by the JVM specification."}
{"index": 1509, "repo": "spring-context-6.0.11", "code": "Package: aot\n\nClasses and Interfaces: \npublic abstract class AbstractAotProcessor<T> extends Object; // Abstract base class for filesystem-based ahead-of-time (AOT) processing.\npublic static final class AbstractAotProcessor.Settings extends Object; // Common settings for AOT processors.\npublic static final class AbstractAotProcessor.Settings.Builder extends Object; // Fluent builder API for AbstractAotProcessor.Settings.\n@FunctionalInterface public interface AotApplicationContextInitializer<C extends ConfigurableApplicationContext> extends ApplicationContextInitializer<C>; // Specialized ApplicationContextInitializer used to initialize a ConfigurableApplicationContext using artifacts that were generated ahead-of-time.\npublic class ApplicationContextAotGenerator extends Object; // Process an ApplicationContext and its BeanFactory to generate code that represents the state of the bean factory, as well as the necessary hints that can be used at runtime in a constrained environment.\npublic abstract class ContextAotProcessor extends AbstractAotProcessor<org.springframework.javapoet.ClassName>; // Filesystem-based ahead-of-time (AOT) processing base implementation.\n", "des": "AOT support for application contexts."}
{"index": 3575, "repo": "lucene-sandbox-9.7.0", "code": "Package: index\n\nClasses and Interfaces: \nClass MergeOnFlushMergePolicy; // A simple extension to wrap MergePolicy to merge all tiny segments (or at least segments smaller than specified in MergeOnFlushMergePolicy.setSmallSegmentThresholdMB(double) into one segment on commit.\n", "des": "Experimental index-related classes"}
{"index": 91, "repo": "ignite-core-2.15.0", "code": "Package: tcp\n\nSub Packages: \npackage tcp.internal; // Contains internal implementation.\npackage tcp.ipfinder; // Contains IP finder interface and adapter.\npackage tcp.messages; // Contains implementation messages.\n\nClasses and Interfaces: \nInterface TcpDiscoverySpiMBean; // Management bean for TcpDiscoverySpi.\nClass TcpDiscoverySpi; // Discovery SPI implementation that uses TCP/IP for node discovery.\n", "des": "Contains default TCP/IP implementation for discovery SPI."}
{"index": 2974, "repo": "pulsar-broker-3.0.0", "code": "Package: buffer\n\nClasses and Interfaces: \npublic abstract class TransactionBufferException extends TransactionException; // The base exception class for the errors thrown from Transaction Buffer.\npublic static class TransactionBufferException.EndOfTransactionException extends TransactionBufferException; // Exception thrown when reaching end of a transaction.\npublic static class TransactionBufferException.TransactionNotFoundException extends TransactionBufferException; // Exception is thrown when the transaction is not found in the transaction buffer.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 23, "repo": "commons-collections4-4.4", "code": "Package: map\n\nClasses and Interfaces: \nInterface CompositeMap.MapMutator<K,V>; // This interface allows definition for all of the indeterminate mutators in a CompositeMap, as well as providing a hook for callbacks on key collisions.\nInterface PassiveExpiringMap.ExpirationPolicy<K,V>; // A policy to determine the expiration time for key-value entries.\nClass AbstractHashedMap<K,V>; // An abstract implementation of a hash-based map which provides numerous points for subclasses to override.\nClass AbstractHashedMap.EntrySet<K,V>; // EntrySet implementation.\nClass AbstractHashedMap.EntrySetIterator<K,V>; // EntrySet iterator.\nClass AbstractHashedMap.HashEntry<K,V>; // HashEntry used to store the data.\nClass AbstractHashedMap.HashIterator<K,V>; // Base Iterator\nClass AbstractHashedMap.HashMapIterator<K,V>; // MapIterator implementation.\nClass AbstractHashedMap.KeySet<K>; // KeySet implementation.\nClass AbstractHashedMap.KeySetIterator<K>; // KeySet iterator.\nClass AbstractHashedMap.Values<V>; // Values implementation.\nClass AbstractHashedMap.ValuesIterator<V>; // Values iterator.\nClass AbstractIterableMap<K,V>; // Provide a basic IterableMap implementation.\nClass AbstractLinkedMap<K,V>; // An abstract implementation of a hash-based map that links entries to create an ordered map and which provides numerous points for subclasses to override.\nClass AbstractLinkedMap.EntrySetIterator<K,V>; // EntrySet iterator.\nClass AbstractLinkedMap.KeySetIterator<K>; // KeySet iterator.\nClass AbstractLinkedMap.LinkEntry<K,V>; // LinkEntry that stores the data.\nClass AbstractLinkedMap.LinkIterator<K,V>; // Base Iterator that iterates in link order.\nClass AbstractLinkedMap.LinkMapIterator<K,V>; // MapIterator implementation.\nClass AbstractLinkedMap.ValuesIterator<V>; // Values iterator.\nClass AbstractMapDecorator<K,V>; // Provides a base decorator that enables additional functionality to be added to a Map via decoration.\n", "des": "This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces."}
{"index": 1725, "repo": "spring-jdbc-6.0.11", "code": "Package: metadata\n\nClasses and Interfaces: \npublic class CallMetaDataContext extends Object; // Class to manage context meta-data used for the configuration and execution of a stored procedure call.\npublic interface CallMetaDataProvider; // Interface specifying the API to be implemented by a class providing call meta-data.\npublic final class CallMetaDataProviderFactory extends Object; // Factory used to create a CallMetaDataProvider implementation based on the type of database being used.\npublic class CallParameterMetaData extends Object; // Holder of meta-data for a specific parameter that is used for call processing.\npublic class Db2CallMetaDataProvider extends GenericCallMetaDataProvider; // DB2 specific implementation for the CallMetaDataProvider interface.\npublic class DerbyCallMetaDataProvider extends GenericCallMetaDataProvider; // Derby specific implementation for the CallMetaDataProvider interface.\npublic class DerbyTableMetaDataProvider extends GenericTableMetaDataProvider; // The Derby specific implementation of TableMetaDataProvider.\npublic class GenericCallMetaDataProvider extends Object implements CallMetaDataProvider; // A generic implementation of the CallMetaDataProvider interface.\npublic class GenericTableMetaDataProvider extends Object implements TableMetaDataProvider; // A generic implementation of the TableMetaDataProvider interface which should provide enough features for all supported databases.\npublic class HanaCallMetaDataProvider extends GenericCallMetaDataProvider; // SAP HANA specific implementation for the CallMetaDataProvider interface.\npublic class HsqlTableMetaDataProvider extends GenericTableMetaDataProvider; // The HSQL specific implementation of TableMetaDataProvider.\npublic class OracleCallMetaDataProvider extends GenericCallMetaDataProvider; // Oracle-specific implementation for the CallMetaDataProvider interface.\npublic class OracleTableMetaDataProvider extends GenericTableMetaDataProvider; // Oracle-specific implementation of the TableMetaDataProvider.\npublic class PostgresCallMetaDataProvider extends GenericCallMetaDataProvider; // Postgres-specific implementation for the CallMetaDataProvider interface.\npublic class PostgresTableMetaDataProvider extends GenericTableMetaDataProvider; // The PostgreSQL specific implementation of TableMetaDataProvider.\npublic class SqlServerCallMetaDataProvider extends GenericCallMetaDataProvider; // SQL Server specific implementation for the CallMetaDataProvider interface.\npublic class SybaseCallMetaDataProvider extends GenericCallMetaDataProvider; // Sybase specific implementation for the CallMetaDataProvider interface.\npublic class TableMetaDataContext extends Object; // Class to manage context meta-data used for the configuration and execution of operations on a database table.\n", "des": "Context metadata abstraction for the configuration and execution of table inserts and stored procedure calls."}
{"index": 1377, "repo": "spring-boot-actuator-3.1.1", "code": "Package: properties\n\nClasses and Interfaces: \n@Endpoint(id=\"configprops\") public class ConfigurationPropertiesReportEndpoint extends Object implements org.springframework.context.ApplicationContextAware; // @Endpoint to expose application properties from @ConfigurationProperties annotated beans.\npublic static final class ConfigurationPropertiesReportEndpoint.ConfigurationPropertiesBeanDescriptor extends Object; // Description of a @ConfigurationProperties bean.\npublic static final class ConfigurationPropertiesReportEndpoint.ConfigurationPropertiesDescriptor extends Object implements OperationResponseBody; // Description of an application's @ConfigurationProperties beans.\npublic static final class ConfigurationPropertiesReportEndpoint.ContextConfigurationPropertiesDescriptor extends Object; // Description of an application context's @ConfigurationProperties beans.\nprotected static class ConfigurationPropertiesReportEndpoint.GenericSerializerModifier extends com.fasterxml.jackson.databind.ser.BeanSerializerModifier; // BeanSerializerModifier to return only relevant configuration properties.\n@EndpointWebExtension(endpoint=ConfigurationPropertiesReportEndpoint.class) public class ConfigurationPropertiesReportEndpointWebExtension extends Object; // @EndpointWebExtension for the ConfigurationPropertiesReportEndpoint.\n", "des": "Actuator support relating to external configuration properties."}
{"index": 1966, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: rsocket\n\nClasses and Interfaces: \n@FunctionalInterface public interface RSocketMessageHandlerCustomizer; // Callback interface that can be used to customize a RSocketMessageHandler.\n@AutoConfiguration(after=RSocketStrategiesAutoConfiguration.class) @ConditionalOnClass({org.springframework.messaging.rsocket.RSocketRequester.class,io.rsocket.RSocket.class,io.rsocket.transport.netty.server.TcpServerTransport.class}) public class RSocketMessagingAutoConfiguration extends Object; // Auto-configuration for Spring RSocket support in Spring Messaging.\n@ConfigurationProperties(\"spring.rsocket\") public class RSocketProperties extends Object; // properties for RSocket support.\npublic static class RSocketProperties.Server extends Object;\n@AutoConfiguration(after=RSocketStrategiesAutoConfiguration.class) @ConditionalOnClass({org.springframework.messaging.rsocket.RSocketRequester.class,io.rsocket.RSocket.class,reactor.netty.http.server.HttpServer.class,io.rsocket.transport.netty.server.TcpServerTransport.class}) public class RSocketRequesterAutoConfiguration extends Object; // Auto-configuration for RSocketRequester.\n@AutoConfiguration(after=RSocketStrategiesAutoConfiguration.class) @ConditionalOnClass({io.rsocket.core.RSocketServer.class,org.springframework.messaging.rsocket.RSocketStrategies.class,reactor.netty.http.server.HttpServer.class,io.rsocket.transport.netty.server.TcpServerTransport.class}) @ConditionalOnBean(org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.class) @EnableConfigurationProperties(RSocketProperties.class) public class RSocketServerAutoConfiguration extends Object; // Auto-configuration for RSocket servers.\n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnClass({io.rsocket.RSocket.class,org.springframework.messaging.rsocket.RSocketStrategies.class,io.netty.buffer.PooledByteBufAllocator.class}) public class RSocketStrategiesAutoConfiguration extends Object; // Auto-configuration for RSocketStrategies.\n", "des": "Auto-configuration for RSocket."}
{"index": 2105, "repo": "spring-webflux-6.0.11", "code": "Package: freemarker\n\nClasses and Interfaces: \npublic interface FreeMarkerConfig; // Interface to be implemented by objects that configure and manage a FreeMarker Configuration object in a web environment.\npublic class FreeMarkerConfigurer extends org.springframework.ui.freemarker.FreeMarkerConfigurationFactory implements FreeMarkerConfig, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // Configures FreeMarker for web usage via the \"configLocation\" and/or \"freemarkerSettings\" and/or \"templateLoaderPath\" properties.\npublic class FreeMarkerView extends AbstractUrlBasedView; // A View implementation that uses the FreeMarker template engine.\npublic class FreeMarkerViewResolver extends UrlBasedViewResolver; // A ViewResolver for resolving FreeMarkerView instances, i.e.\n", "des": "Support classes for the integration of FreeMarker as Spring web view technology."}
{"index": 2708, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: item\n\nSub Packages: \npackage item.adapter; // Adapters for Plain Old Java Objects.\npackage item.amqp; // AMQP related batch components.\npackage item.data; // Spring Data related readers and writers.\npackage item.database; // Infrastructure implementations of database based item readers and writers.\npackage item.file; // Infrastructure implementations of io file concerns.\npackage item.function; // Adapters for java.util.function components.\npackage item.jms; // JMS based reader/writer and related components.\npackage item.json; // Infrastructure implementations of JSON input and output.\npackage item.kafka; // Apache Kafka related readers and writers\npackage item.ldif; // This package contains the classes required for using the LdifParser in Spring LDAP.\npackage item.mail; // Java Mail based components.\npackage item.support; // Internal support package\npackage item.util; // Infrastructure utility classes.\npackage item.validator; // Infrastructure implementations of item validator concerns.\npackage item.xml; // Infrastructure implementations of xml input and output.\n\nClasses and Interfaces: \npublic class Chunk<W> extends Object implements Iterable<W>, Serializable; // Encapsulation of a list of items to be processed and possibly a list of failed items to be skipped.\npublic class ExecutionContext extends Object implements Serializable; // Object representing a context for an ItemStream.\npublic interface ItemCountAware; // Marker interface indicating that an item should have the item count set on it.\n@FunctionalInterface public interface ItemProcessor<I,O>; // Interface for item transformation.\n@FunctionalInterface public interface ItemReader<T>; // Strategy interface for providing the data.\npublic abstract class ItemReaderException extends RuntimeException; // A base exception class that all exceptions thrown from an ItemReader extend.\npublic interface ItemStream; // Marker interface defining a contract for periodically storing state and restoring from that state should an error occur.\npublic class ItemStreamException extends RuntimeException; // Exception representing any errors encountered while processing a stream.\npublic interface ItemStreamReader<T> extends ItemStream, ItemReader<T>; // Convenience interface that combines ItemStream and ItemReader .\npublic abstract class ItemStreamSupport extends Object implements ItemStream; // Empty method implementation of ItemStream.\n", "des": "Infrastructure interfaces and primary dependencies for item concerns."}
{"index": 2382, "repo": "spring-batch-core-5.0.2", "code": "Package: annotation\n\nClasses and Interfaces: \npublic class BatchObservabilityBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.beans.factory.config.BeanPostProcessor; // Bean post processor that configures observable batch artifacts (jobs and steps) with Micrometer's observation registry.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import({org.springframework.batch.core.configuration.annotation.BatchRegistrar.class,ScopeConfiguration.class,org.springframework.batch.core.configuration.annotation.AutomaticJobRegistrarBeanPostProcessor.class,BatchObservabilityBeanPostProcessor.class}) public @interface EnableBatchProcessing; // Enable Spring Batch features and provide a base configuration for setting up batch jobs in an @Configuration class, roughly equivalent to using the <batch:*> XML namespace.\n@Deprecated(since=\"5.0.0\", forRemoval=true) public class JobBuilderFactory extends Object;\n@Scope(value=\"job\", proxyMode=TARGET_CLASS) @Retention(RUNTIME) @Documented public @interface JobScope; // Convenient annotation for job-scoped beans that defaults the proxy mode, so that it does not have to be specified explicitly on every bean definition.\n@Deprecated(since=\"5.0.0\", forRemoval=true) public class StepBuilderFactory extends Object;\n@Scope(value=\"step\", proxyMode=TARGET_CLASS) @Retention(RUNTIME) @Documented public @interface StepScope; // Convenient annotation for step-scoped beans.\n", "des": "Annotations and builder factories for java based configuration"}
{"index": 1351, "repo": "spring-integration-kafka-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic final class KafkaIntegrationHeaders extends Object; // Headers specifically for Spring Integration components.\npublic class KafkaSendFailureException extends org.springframework.messaging.MessagingException; // An exception that is the payload of an ErrorMessage when a send fails.\npublic class RawRecordHeaderErrorMessageStrategy extends Object implements org.springframework.integration.support.ErrorMessageStrategy; // ErrorMessageStrategy extension that adds the raw record as a header to the ErrorMessage.\n", "des": "Provides support classes."}
{"index": 863, "repo": "calcite-core-1.34.0", "code": "Package: parser\n\nClasses and Interfaces: \nInterface SqlParser.Config; // Interface to define the configuration for a SQL parser.\nInterface SqlParserImplFactory; // Factory for SqlAbstractParserImpl objects.\nClass Span; // Builder for SqlParserPos.\nClass SqlParser; // A SqlParser parses a SQL statement.\nClass SqlParser.ConfigBuilder;\nClass SqlParserPos; // SqlParserPos represents the position of a parsed token within SQL statement text.\nClass SqlParserUtil; // Utility methods relating to parsing SQL.\nClass SqlParserUtil.ParsedCollation; // The components of a collation definition, per the SQL standard.\nClass SqlParserUtil.ToTreeListItem; // Class that holds a SqlOperator and a SqlParserPos.\nClass StringAndPos; // Contains a string, the offset of a token within the string, and a parser position containing the beginning and end line number.\nClass SqlParseException; // SqlParseException defines a checked exception corresponding to SqlParser.\nClass SqlParserUtil.MalformedUnicodeEscape; // Thrown by SqlParserUtil.replaceEscapedChars(String).\n", "des": "Provides a SQL parser."}
{"index": 1197, "repo": "commons-math3-3.6.1", "code": "Package: fitting\n\nClasses and Interfaces: \nClass CurveFitter<T extends ParametricUnivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass GaussianFitter; // As of 3.1 (to be removed in 4.0).\nClass GaussianFitter.ParameterGuesser; // Guesses the parameters norm, mean, and sigma of a Gaussian.Parametric based on the specified observed points.\nClass HarmonicFitter; // As of 3.1 (to be removed in 4.0).\nClass HarmonicFitter.ParameterGuesser; // This class guesses harmonic coefficients from a sample.\nClass PolynomialFitter; // As of 3.1 (to be removed in 4.0).\nClass WeightedObservedPoint; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides classes to perform curve fitting."}
{"index": 1827, "repo": "spring-test-6.0.11", "code": "Package: env\n\nClasses and Interfaces: \npublic class MockEnvironment extends org.springframework.core.env.AbstractEnvironment; // Simple ConfigurableEnvironment implementation exposing MockEnvironment.setProperty(String, String) and MockEnvironment.withProperty(String, String) methods for testing purposes.\npublic class MockPropertySource extends org.springframework.core.env.PropertiesPropertySource; // Simple PropertySource implementation for use in testing.\n", "des": "This package contains mock implementations of the Environment and PropertySource abstractions."}
{"index": 1752, "repo": "spring-data-mongodb-4.1.2", "code": "Package: encryption\n\nClasses and Interfaces: \npublic interface EncryptingConverter<S,T> extends MongoValueConverter<S,T>; // A specialized MongoValueConverter for encryptiong and decrypting properties.\npublic class MongoEncryptionConverter extends Object implements EncryptingConverter<Object,Object>; // Default implementation of EncryptingConverter.\n", "des": "Converters integrating with explicit encryption mechanism of Client-Side Field Level Encryption."}
{"index": 2644, "repo": "spring-data-cassandra-4.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Configuration public abstract class AbstractCassandraConfiguration extends AbstractSessionConfiguration implements BeanClassLoaderAware; // Base class for Spring Data Cassandra configuration using JavaConfig.\n@Deprecated public abstract class AbstractCqlTemplateConfiguration extends AbstractSessionConfiguration;\npublic abstract class AbstractReactiveCassandraConfiguration extends AbstractCassandraConfiguration; // Extension to AbstractCassandraConfiguration providing Spring Data Cassandra configuration for Spring Data's Reactive Cassandra support using JavaConfig.\n@Configuration public abstract class AbstractSessionConfiguration extends Object implements BeanFactoryAware; // Spring Configuration class used to configure a Cassandra client application CqlSession connected to a Cassandra cluster.\npublic class CassandraAuditingBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // BeanDefinitionParser to register a AuditingEntityCallback to transparently set auditing information on an entity.\n@Deprecated public class CassandraCqlSessionFactoryBean extends CqlSessionFactoryBean;\npublic class CassandraCqlTemplateFactoryBean extends Object implements FactoryBean<CqlTemplate>, InitializingBean; // Factory for configuring a CqlTemplate.\npublic class CassandraEntityClassScanner extends Object; // Scans packages for Cassandra entities.\npublic class CassandraNamespaceHandler extends NamespaceHandlerSupport; // Namespace handler for spring-data-cassandra.\n@Deprecated public class CassandraSessionFactoryBean extends CqlSessionFactoryBean;\npublic class CassandraTemplateFactoryBean extends Object implements FactoryBean<CassandraTemplate>, InitializingBean; // Factory for configuring a CassandraTemplate.\npublic enum CompressionType extends Enum<CompressionType>; // Simple enumeration for the various compression types.\npublic class CqlNamespaceHandler extends NamespaceHandlerSupport; // Namespace handler for spring-cassandra.\npublic class CqlSessionFactoryBean extends Object implements FactoryBean<com.datastax.oss.driver.api.core.CqlSession>, InitializingBean, DisposableBean, PersistenceExceptionTranslator; // Factory for creating and configuring a Cassandra CqlSession, which is a thread-safe singleton.\npublic interface DefaultBeanNames extends DefaultCqlBeanNames;\npublic interface DefaultCqlBeanNames;\npublic interface DriverConfigLoaderBuilderConfigurer; // Callback interface that can be implemented by beans wishing to customize the ProgrammaticDriverConfigLoaderBuilder via a DriverConfigLoaderBuilderConfigurer whilst retaining default configuration.\n", "des": "Spring Data Cassandra factory beans and configuration."}
{"index": 1233, "repo": "spring-hateoas-2.1.2", "code": "Package: collectionjson\n\nClasses and Interfaces: \npublic class CollectionJsonLinkDiscoverer extends JsonPathLinkDiscoverer; // LinkDiscoverer implementation based on JSON Collection link structure.\npublic class Jackson2CollectionJsonModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson 2 module implementation to render CollectionModel, EntityModel, and RepresentationModel instances in Collection+JSON compatible JSON.\n", "des": "Value objects to build Collection+JSON representations."}
{"index": 1366, "repo": "spring-tx-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractPlatformTransactionManager extends Object implements PlatformTransactionManager, Serializable; // Abstract base class that implements Spring's standard transaction workflow, serving as basis for concrete platform transaction managers like JtaTransactionManager.\nprotected static final class AbstractPlatformTransactionManager.SuspendedResourcesHolder extends Object; // Holder for suspended resources.\npublic abstract class AbstractTransactionStatus extends Object implements TransactionStatus; // Abstract base implementation of the TransactionStatus interface.\npublic interface CallbackPreferringPlatformTransactionManager extends PlatformTransactionManager; // Extension of the PlatformTransactionManager interface, exposing a method for executing a given callback within a transaction.\npublic class DefaultTransactionDefinition extends Object implements TransactionDefinition, Serializable; // Default implementation of the TransactionDefinition interface, offering bean-style configuration and sensible default values (PROPAGATION_REQUIRED, ISOLATION_DEFAULT, TIMEOUT_DEFAULT, readOnly=false).\npublic class DefaultTransactionStatus extends AbstractTransactionStatus; // Default implementation of the TransactionStatus interface, used by AbstractPlatformTransactionManager.\npublic abstract class DelegatingTransactionDefinition extends Object implements TransactionDefinition, Serializable; // TransactionDefinition implementation that delegates all calls to a given target TransactionDefinition instance.\npublic interface ResourceHolder; // Generic interface to be implemented by resource holders.\npublic abstract class ResourceHolderSupport extends Object implements ResourceHolder; // Convenient base class for resource holders.\npublic abstract class ResourceHolderSynchronization<H extends ResourceHolder,K> extends Object implements TransactionSynchronization; // TransactionSynchronization implementation that manages a ResourceHolder bound through TransactionSynchronizationManager.\npublic interface ResourceTransactionDefinition extends TransactionDefinition; // Extended variant of TransactionDefinition, indicating a resource transaction and in particular whether the transactional resource is ready for local optimizations.\npublic interface ResourceTransactionManager extends PlatformTransactionManager; // Extension of the PlatformTransactionManager interface, indicating a native resource transaction manager, operating on a single target resource.\npublic class SimpleTransactionScope extends Object implements org.springframework.beans.factory.config.Scope; // A simple transaction-backed Scope implementation, delegating to TransactionSynchronizationManager's resource binding mechanism.\npublic class SimpleTransactionStatus extends AbstractTransactionStatus; // A simple TransactionStatus implementation.\npublic interface SmartTransactionObject extends Flushable; // Interface to be implemented by transaction objects that are able to return an internal rollback-only marker, typically from another transaction that has participated and marked it as rollback-only.\n", "des": "Support classes for the org.springframework.transaction package."}
{"index": 425, "repo": "mahout-mr-0.13.0", "code": "Package: ep\n\nClasses and Interfaces: \nInterface EvolutionaryProcess.Function<T>;\nInterface Payload<T>; // Payloads for evolutionary state must be copyable and updatable.\nClass EvolutionaryProcess<T extends Payload<U>,U>; // Allows evolutionary optimization where the state function can't be easily packaged for the optimizer to execute.\nClass Mapping; // Provides coordinate tranformations so that evolution can proceed on the entire space of reals but have the output limited and squished in convenient (and safe) ways.\nClass Mapping.Exponential;\nClass Mapping.Identity;\nClass Mapping.LogLimit;\nClass Mapping.SoftLimit;\nClass State<T extends Payload<U>,U>; // Records evolutionary state and provides a mutation operation for recorded-step meta-mutation.\n", "des": "Provides basic evolutionary optimization using recorded-step mutation."}
{"index": 2179, "repo": "spring-security-web-6.1.2", "code": "Package: preauth\n\nSub Packages: \npackage preauth.j2ee; // Pre-authentication support for container-authenticated requests.\npackage preauth.websphere; // Websphere-specific pre-authentication classes.\npackage preauth.x509; // X.509 client certificate authentication support.\n\nClasses and Interfaces: \npublic abstract class AbstractPreAuthenticatedProcessingFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware; // Base class for processing filters that handle pre-authenticated authentication requests, where it is assumed that the principal has already been authenticated by an external system.\npublic class PreAuthenticatedAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // Processes a pre-authenticated authentication request.\npublic class PreAuthenticatedAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // Authentication implementation for pre-authenticated authentication.\npublic class PreAuthenticatedCredentialsNotFoundException extends org.springframework.security.core.AuthenticationException;\npublic class PreAuthenticatedGrantedAuthoritiesUserDetailsService extends Object implements org.springframework.security.core.userdetails.AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>; // This AuthenticationUserDetailsService implementation creates a UserDetails object based solely on the information contained in the given PreAuthenticatedAuthenticationToken.\npublic class PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails extends WebAuthenticationDetails implements org.springframework.security.core.authority.GrantedAuthoritiesContainer; // This WebAuthenticationDetails implementation allows for storing a list of pre-authenticated Granted Authorities.\npublic class RequestAttributeAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter; // A simple pre-authenticated filter which obtains the username from request attributes, for use with SSO systems such as Stanford WebAuth or Shibboleth.\npublic class RequestHeaderAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter; // A simple pre-authenticated filter which obtains the username from a request header, for use with systems such as CA Siteminder.\n", "des": "Support for \"pre-authenticated\" scenarios, where Spring Security assumes the incoming request has already been authenticated by some externally configured system."}
{"index": 1070, "repo": "hadoop-yarn-common-3.3.6", "code": "Package: api\n\nSub Packages: \npackage api.impl; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\n\nClasses and Interfaces: \nClass AppAdminClient; // Client for managing applications.\nClass TimelineClient; // A client library that can be used to post some information in terms of a number of conceptual entities.\nClass TimelineReaderClient; // A client library that can be used to get Timeline Entities associated with application, application attempt or containers.\nClass TimelineV2Client; // A client library that can be used to post some information in terms of a number of conceptual entities.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3495, "repo": "poi-5.2.3", "code": "Package: usermodel\n\nClasses and Interfaces: \nInterface HSSFShapeContainer; // An interface that indicates whether a class can contain children.\nInterface HSSFShapeTypes;\nClass DVConstraint; // Data Validation Constraint\nClass EscherGraphics; // Translates Graphics calls into escher calls.\nClass EscherGraphics2d; // Translates Graphics2d calls into escher calls.\nClass FontDetails; // Stores width and height details about a font.\nClass HeaderFooter; // Common class for HSSFHeader and HSSFFooter.\nClass HSSFAnchor; // An anchor is what specifics the position of a shape within a client object or within another containing shape.\nClass HSSFAutoFilter; // Represents autofiltering for the specified worksheet.\nClass HSSFBorderFormatting; // High level representation for Border Formatting component of Conditional Formatting settings\nClass HSSFCell; // High level representation of a cell in a row of a spreadsheet.\nClass HSSFCellStyle; // High level representation of the style of a cell in a sheet of a workbook.\nClass HSSFChart; // Has methods for construction of a chart object.\nClass HSSFChart.HSSFSeries; // A series in a chart\nClass HSSFChildAnchor;\nClass HSSFClientAnchor; // A client anchor is attached to an excel worksheet.\nClass HSSFColorScaleFormatting; // High level representation for Color Scale / Color Gradient Formatting component of Conditional Formatting settings\nClass HSSFCombobox;\nClass HSSFComment; // Represents a cell comment - a sticky note associated with a cell.\nClass HSSFConditionalFormatting; // HSSFConditionalFormatting class encapsulates all settings of Conditional Formatting.\nClass HSSFConditionalFormattingRule; // High level representation of Conditional Formatting Rule.\nClass HSSFConditionalFormattingThreshold; // High level representation for Icon / Multi-State / Databar / Colour Scale change thresholds\nClass HSSFCreationHelper;\nClass HSSFDataBarFormatting; // High level representation for DataBar / Data-Bar Formatting component of Conditional Formatting settings\nClass HSSFDataFormat; // Identifies both built-in and user defined formats within a workbook.\n", "des": "The usermodel package maps HSSF low level structures to familiar workbook/sheet model"}
{"index": 302, "repo": "pdfbox-3.0.0-beta1", "code": "Package: annotation\n\nClasses and Interfaces: \nInterface AnnotationFilter; // Simple interface allowing the use of an annotation filter visitor.\nClass PDAnnotation; // A PDF annotation.\nClass PDAnnotationCaret;\nClass PDAnnotationCircle;\nClass PDAnnotationFileAttachment; // This is the class that represents a file attachment.\nClass PDAnnotationFreeText;\nClass PDAnnotationHighlight;\nClass PDAnnotationInk;\nClass PDAnnotationLine; // This is the class that represents a line annotation.\nClass PDAnnotationLink; // This is the class that represents a link annotation.\nClass PDAnnotationMarkup; // This class represents the additional fields of a Markup type Annotation.\nClass PDAnnotationPolygon;\nClass PDAnnotationPolyline;\nClass PDAnnotationPopup; // This is the class that represents a popup annotation.\nClass PDAnnotationRubberStamp; // This is the class that represents a rubber stamp annotation.\nClass PDAnnotationSound;\nClass PDAnnotationSquare;\nClass PDAnnotationSquareCircle; // This is the class that represents a rectangular or elliptical annotation introduced in PDF 1.3 specification .\nClass PDAnnotationSquiggly;\nClass PDAnnotationStrikeout;\nClass PDAnnotationText; // This is the class that represents a text annotation.\nClass PDAnnotationTextMarkup; // This is the abstract class that represents a text markup annotation introduced in the PDF 1.3 specification, except Squiggly lines in 1.4.\nClass PDAnnotationUnderline;\nClass PDAnnotationUnknown; // This is the class that represents an arbitrary Unknown Annotation type.\nClass PDAnnotationWidget; // This is the class that represents a widget annotation.\nClass PDAppearanceCharacteristicsDictionary; // This class represents an appearance characteristics dictionary.\nClass PDAppearanceDictionary; // An appearance dictionary specifying how the annotation shall be presented visually on the page.\nClass PDAppearanceEntry; // An entry in an appearance dictionary.\nClass PDAppearanceStream; // An appearance stream is a form XObject, a self-contained content stream that shall be rendered inside the annotation rectangle.\nClass PDBorderEffectDictionary; // This class represents a PDF /BE entry the border effect dictionary.\nClass PDBorderStyleDictionary; // This class represents a PDF /BS entry the border style dictionary.\nClass PDExternalDataDictionary; // This class represents an external data dictionary.\n", "des": "The annotation package contains classes that work with PDF annotation elements."}
{"index": 477, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: function\n\nClasses and Interfaces: \nInterface CloseableThrowingConsumer<ExceptionT extends java.lang.Exception,T>; // A ThrowingConsumer that can be closed.\nInterface ThrowingBiConsumer<T1,T2>; // A BiConsumer which can throw Exceptions.\nInterface ThrowingBiFunction<T1,T2,T3>; // A BiFunction which can throw Exceptions.\nInterface ThrowingConsumer<ExceptionT extends java.lang.Exception,T>; // A Consumer which can throw Exceptions.\nInterface ThrowingFunction<T1,T2>; // A Function which can throw Exceptions.\nInterface ThrowingRunnable; // A Runnable which can throw Exceptions.\n", "des": "Java 8 functional interface extensions."}
{"index": 937, "repo": "commons-compress-1.23.0", "code": "Package: utils\n\nClasses and Interfaces: \nInterface ByteUtils.ByteConsumer; // Used to consume bytes.\nInterface ByteUtils.ByteSupplier; // Used to supply bytes.\nInterface InputStreamStatistics; // This interface provides statistics on the current decompression stream.\nClass ArchiveUtils; // Generic Archive utilities\nClass BitInputStream; // Reads bits from an InputStream.\nClass BoundedArchiveInputStream; // NIO backed bounded input stream for reading a predefined amount of data from.\nClass BoundedInputStream; // A stream that limits reading from a wrapped stream to a given number of bytes.\nClass BoundedSeekableByteChannelInputStream; // InputStream that delegates requests to the underlying SeekableByteChannel, making sure that only bytes from a certain range can be read.\nClass ByteUtils; // Utility methods for reading and writing bytes.\nClass ByteUtils.InputStreamByteSupplier; // ByteUtils.ByteSupplier based on InputStream.\nClass ByteUtils.OutputStreamByteConsumer; // ByteUtils.ByteConsumer based on OutputStream.\nClass CharsetNames; // Character encoding names required of every implementation of the Java platform.\nClass Charsets; // Charsets required of every implementation of the Java platform.\nClass ChecksumCalculatingInputStream; // A stream that calculates the checksum of the data read.\nClass ChecksumVerifyingInputStream; // A stream that verifies the checksum of the data read once the stream is exhausted.\nClass CloseShieldFilterInputStream; // Re-implements FilterInputStream.close() to do nothing.\nClass CountingInputStream; // Input stream that tracks the number of bytes read.\nClass CountingOutputStream; // Stream that tracks the number of bytes read.\nClass CRC32VerifyingInputStream; // A stream that verifies the CRC of the data read once the stream is exhausted.\nClass ExactMath; // PRIVATE.\nClass FileNameUtils; // Generic file name utilities.\nClass FixedLengthBlockOutputStream; // This class supports writing to an OutputStream or WritableByteChannel in fixed length blocks.\nClass FlushShieldFilterOutputStream; // Re-implements FilterOutputStream.flush() to do nothing.\nClass IOUtils; // Utility functions\nClass Iterators; // Iterator utilities.\nClass Lists; // List utilities\nClass MultiReadOnlySeekableByteChannel; // Read-Only Implementation of SeekableByteChannel that concatenates a collection of other SeekableByteChannels.\nClass OsgiUtils; // Utilities for dealing with OSGi environments.\n", "des": "Provides utilities used internally by the compress library."}
{"index": 2227, "repo": "spring-data-commons-3.1.2", "code": "Package: spi\n\nClasses and Interfaces: \npublic interface EvaluationContextExtension extends ExtensionIdAware; // SPI to allow adding a set of properties and function definitions accessible via the root of an EvaluationContext provided by an ExtensionAwareQueryMethodEvaluationContextProvider.\npublic interface ExtensionIdAware; // Marker interface for Spring Data EvaluationContext extensions.\npublic class Function extends Object; // Value object to represent a function.\npublic interface ReactiveEvaluationContextExtension extends ExtensionIdAware; // SPI to resolve a EvaluationContextExtension to make it accessible via the root of an EvaluationContext provided by a ExtensionAwareQueryMethodEvaluationContextProvider.\n", "des": "Service provider interfaces to extend the query execution mechanism."}
{"index": 3091, "repo": "spring-ws-core-4.0.5", "code": "Package: support\n\nClasses and Interfaces: \npublic class DefaultStrategiesHelper extends Object; // Helper class for for loading default implementations of an interface.\npublic abstract class MarshallingUtils extends Object; // Helper class for endpoints and endpoint mappings that use marshalling.\npublic abstract class WebUtils extends Object; // Miscellaneous utilities for web applications.\n", "des": "Provides general helper classes for Spring Web Services."}
{"index": 531, "repo": "commons-vfs2-2.9.0", "code": "Package: res\n\nClasses and Interfaces: \nClass ResourceFileName; // A resource file URI.\nClass ResourceFileNameParser; // Slightly modified filename parser for resource URIs.\nClass ResourceFileProvider; // The Resource provider.\nClass ResourceFileSystemConfigBuilder; // The config BUILDER for various FTP configuration options.\n", "des": "The Resource File Provider"}
{"index": 833, "repo": "calcite-core-1.34.0", "code": "Package: plan\n\nSub Packages: \npackage plan.hep; // Provides a heuristic planner implementation for the interfaces in org.apache.calcite.plan.\npackage plan.visualizer; // A visualizer showing how the rules are applied step-by-step.\npackage plan.volcano; // Optimizes relational expressions.\n\nClasses and Interfaces: \nInterface CommonRelSubExprRule.Config; // Rule configuration.\nInterface Context; // Provides library users a way to store data within the planner session and access it within rules.\nInterface Convention; // Calling convention trait.\nInterface RelDigest; // The digest is the exact representation of the corresponding RelNode, at anytime, anywhere.\nInterface RelHintsPropagator; // Customize the propagation of the RelHints from the root relational expression of a rule call RelOptRuleCall to the new equivalent expression.\nInterface RelImplementor; // This is a marker interface for a callback used to convert a tree of relational expressions into a plan.\nInterface RelMultipleTrait; // Trait for which a given relational expression can have multiple values.\nInterface RelOptConnection; // The planner's view of a connection to a database.\nInterface RelOptCost; // RelOptCost defines an interface for optimizer cost in terms of number of rows processed, CPU cost, and I/O cost.\nInterface RelOptCostFactory; // Cost model for query planning.\nInterface RelOptListener; // RelOptListener defines an interface for listening to events which occur during the optimization process.\nInterface RelOptNode; // Node in a planner.\nInterface RelOptPlanner; // A RelOptPlanner is a query optimizer: it transforms a relational expression into a semantically equivalent relational expression, according to a given set of rules and a cost model.\nInterface RelOptPlanner.Executor; // Use RexExecutor\nInterface RelOptSchema; // A RelOptSchema is a set of RelOptTable objects.\nInterface RelOptSchemaWithSampling; // Extension to RelOptSchema with support for sample data-sets.\nInterface RelOptTable; // Represents a relational dataset in a RelOptSchema.\nInterface RelOptTable.ToRelContext; // Contains the context needed to convert a a table into a relational expression.\nInterface RelOptTable.ViewExpander; // Can expand a view into relational expressions.\nInterface RelRule.Config; // Rule configuration.\n", "des": "Defines interfaces for constructing rule-based optimizers of relational expressions."}
{"index": 1009, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: xml\n\nSub Packages: \npackage xml.dom; // Provides classes that help with DOM: the Document Object Model.\npackage xml.namespace; // Provides classes that help with XML Namespace processing.\npackage xml.sax; // Provides classes that help with SAX: the Simple API for XML.\npackage xml.transform; // Provides classes that help with XML transformations.\npackage xml.validation; // Provides classes for XML validation in JAXP 1.0 and JAXP 1.3.\npackage xml.xpath; // Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen.\npackage xml.xsd; // Provides an abstraction over XSD XML schemas.\n\nClasses and Interfaces: \nClass DocumentBuilderFactoryUtils;\nClass JaxpVersion; // Helper class used to find the current version of JAXP.\nClass XMLInputFactoryUtils;\nClass XmlException; // Root of the hierarchy of XML exception.\n", "des": "Provides classes for XML handling: version detection and a base XML exception class."}
{"index": 221, "repo": "nutch-2.4", "code": "Package: proxy\n\nClasses and Interfaces: \nClass AbstractTestbedHandler;\nClass DelayHandler;\nClass FakeHandler;\nClass LogDebugHandler;\nClass NotFoundHandler;\nClass TestbedProxy;\nEnum FakeHandler.Mode; // Create links to hosts generated from a pool of numHosts/numPages random names.\n", "des": "Proxy to benchmark the crawler."}
{"index": 1154, "repo": "commons-math3-3.6.1", "code": "Package: fitting\n\nClasses and Interfaces: \nClass MultivariateNormalMixtureExpectationMaximization; // Expectation-Maximization algorithm for fitting the parameters of multivariate normal mixture model distributions.\n", "des": "Fitting of parameters against distributions."}
{"index": 786, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: id\n\nClasses and Interfaces: \nClass IndonesianAnalyzer; // Analyzer for Indonesian (Bahasa)\nClass IndonesianStemFilter; // A TokenFilter that applies IndonesianStemmer to stem Indonesian words.\nClass IndonesianStemFilterFactory; // Factory for IndonesianStemFilter.\nClass IndonesianStemmer; // Stemmer for Indonesian.\n", "des": "Analyzer for Indonesian."}
{"index": 871, "repo": "calcite-core-1.34.0", "code": "Package: tools\n\nClasses and Interfaces: \nInterface FrameworkConfig; // Interface that describes how to configure planning sessions generated using the Frameworks tools.\nInterface Frameworks.BasePrepareAction<R>; // Piece of code to be run in a context where a planner and statement are available.\nInterface Frameworks.PlannerAction<R>; // Piece of code to be run in a context where a planner is available.\nInterface Hoist.Config; // Configuration.\nInterface Planner; // A façade that covers Calcite's query planning process: parse SQL, validate the parse tree, convert the parse tree to a relational expression, and optimize the relational expression.\nInterface Program; // Program that transforms a relational expression into another relational expression.\nInterface RelBuilder.AggCall; // Information necessary to create a call to an aggregate function.\nInterface RelBuilder.Config; // Configuration of RelBuilder.\nInterface RelBuilder.GroupKey; // Information necessary to create the GROUP BY clause of an Aggregate.\nInterface RelBuilder.OverCall; // Call to a windowed aggregate function.\nInterface RelBuilderFactory; // A partially-created RelBuilder.\nInterface RelRunner; // Runs a relational expression.\nInterface RuleSet; // A set rules associated with a particular type of invocation of the Planner.\nClass Frameworks; // Tools for invoking Calcite functionality without initializing a container / server first.\nClass Frameworks.ConfigBuilder; // A builder to help you build a FrameworkConfig using defaults where values aren't required.\nClass Frameworks.PrepareAction<R>;\nClass Hoist; // Utility that extracts constants from a SQL query.\nClass Hoist.Hoisted; // Result of hoisting.\nClass Hoist.Variable; // Variable.\nClass PigRelBuilder; // Extension to RelBuilder for Pig relational operators.\nClass Programs; // Utilities for creating Programs.\nClass RelBuilder; // Builder for relational expressions.\nClass RelRunners; // Implementations of RelRunner.\nClass RuleSets; // Utilities for creating and composing rule sets.\nEnum PigRelBuilder.GroupOption; // Option for performing group efficiently if data set is already sorted.\nClass RelConversionException; // An Exception thrown when attempting conversion to a set of RelNodes.\n", "des": "Provides utility classes."}
{"index": 1168, "repo": "commons-math3-3.6.1", "code": "Package: hull\n\nClasses and Interfaces: \nInterface ConvexHull<S extends Space,P extends Point<S>>; // This class represents a convex hull.\nInterface ConvexHullGenerator<S extends Space,P extends Point<S>>; // Interface for convex hull generators.\n", "des": "This package provides interfaces and classes related to the convex hull problem."}
{"index": 1380, "repo": "spring-boot-actuator-3.1.1", "code": "Package: mongo\n\nClasses and Interfaces: \npublic class MongoHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for Mongo data stores.\npublic class MongoReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // A ReactiveHealthIndicator for Mongo.\n", "des": "Actuator support for Mongo dependent on Spring Data."}
{"index": 2880, "repo": "spring-integration-core-6.1.2", "code": "Package: splitter\n\nClasses and Interfaces: \npublic abstract class AbstractMessageSplitter extends AbstractReplyProducingMessageHandler implements DiscardingMessageHandler; // Base class for Message-splitting handlers.\npublic class DefaultMessageSplitter extends AbstractMessageSplitter; // The default Message Splitter implementation.\npublic class ExpressionEvaluatingSplitter extends AbstractMessageSplitter; // A Message Splitter implementation that evaluates the specified SpEL expression.\npublic class MethodInvokingSplitter extends AbstractMessageSplitter; // A Message Splitter implementation that invokes the specified method on the given object.\n", "des": "Provides classes supporting the splitter pattern."}
{"index": 3773, "repo": "lucene-analysis-common-9.7.0", "code": "Package: core\n\nClasses and Interfaces: \nClass DecimalDigitFilter; // Folds all Unicode digits in [:General_Category=Decimal_Number:] to Basic Latin digits (0-9).\nClass DecimalDigitFilterFactory; // Factory for DecimalDigitFilter.\nClass FlattenGraphFilter; // Converts an incoming graph token stream, such as one from SynonymGraphFilter, into a flat form so that all nodes form a single linear chain with no side paths.\nClass FlattenGraphFilterFactory; // Factory for FlattenGraphFilter.\nClass KeywordAnalyzer; // \"Tokenizes\" the entire stream as a single token.\nClass KeywordTokenizer; // Emits the entire input as a single token.\nClass KeywordTokenizerFactory; // Factory for KeywordTokenizer.\nClass LetterTokenizer; // A LetterTokenizer is a tokenizer that divides text at non-letters.\nClass LetterTokenizerFactory; // Factory for LetterTokenizer.\nClass LowerCaseFilter; // Normalizes token text to lower case.\nClass LowerCaseFilterFactory; // Factory for LowerCaseFilter.\nClass SimpleAnalyzer; // An Analyzer that filters LetterTokenizer with LowerCaseFilter\nClass StopAnalyzer; // Filters LetterTokenizer with LowerCaseFilter and StopFilter.\nClass StopFilter; // Removes stop words from a token stream.\nClass StopFilterFactory; // Factory for StopFilter.\nClass TypeTokenFilter; // Removes tokens whose types appear in a set of blocked types from a token stream.\nClass TypeTokenFilterFactory; // Factory class for TypeTokenFilter.\nClass UnicodeWhitespaceAnalyzer; // An Analyzer that uses UnicodeWhitespaceTokenizer.\nClass UnicodeWhitespaceTokenizer; // A UnicodeWhitespaceTokenizer is a tokenizer that divides text at whitespace.\nClass UpperCaseFilter; // Normalizes token text to UPPER CASE.\nClass UpperCaseFilterFactory; // Factory for UpperCaseFilter.\nClass WhitespaceAnalyzer; // An Analyzer that uses WhitespaceTokenizer.\nClass WhitespaceTokenizer; // A tokenizer that divides text at whitespace characters as defined by Character.isWhitespace(int).\nClass WhitespaceTokenizerFactory; // Factory for WhitespaceTokenizer.\n", "des": "Basic, general-purpose analysis components."}
{"index": 42, "repo": "ignite-core-2.15.0", "code": "Package: thread\n\nClasses and Interfaces: \nClass IgniteStripedThreadPoolExecutor; // An ExecutorService that executes submitted tasks using pooled grid threads.\nClass IgniteThread; // This class adds some necessary plumbing on top of the Thread class.\nClass IgniteThreadFactory; // This class provides implementation of ThreadFactory factory for creating grid threads.\nClass IgniteThreadPoolExecutor; // An ExecutorService that executes submitted tasks using pooled grid threads.\nClass OomExceptionHandler; // OOM exception handler for system threads.\nClass SameThreadExecutor;\n", "des": "Contains threads-related utility classes."}
{"index": 1607, "repo": "spring-data-neo4j-7.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Configuration @API(status=STABLE, since=\"6.0\") public abstract class AbstractNeo4jConfig extends Object; // Base class for imperative SDN configuration using JavaConfig.\n@Configuration @API(status=STABLE, since=\"6.0\") public abstract class AbstractReactiveNeo4jConfig extends Object; // Base class for reactive SDN configuration using JavaConfig.\n@API(status=STABLE, since=\"6.0\") @Documented @Retention(RUNTIME) @Qualifier public @interface Builtin; // An internally used CDI Qualifier to mark all beans produced by our configuration support as built in.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.neo4j.config.Neo4jAuditingRegistrar.class) public @interface EnableNeo4jAuditing; // Annotation to enable auditing for SDN entities via annotation configuration.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.neo4j.config.ReactiveNeo4jAuditingRegistrar.class) public @interface EnableReactiveNeo4jAuditing; // Annotation to enable auditing for SDN entities using reactive infrastructure via annotation configuration.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jCdiExtension extends CdiRepositoryExtensionSupport; // This CDI extension enables Spring Data Neo4j on a CDI 2.0 compatible CDI container.\n@API(status=STABLE, since=\"6.0.2\") public final class Neo4jEntityScanner extends Object; // A utility class providing a way to discover an initial entity set for a Neo4jMappingContext.\n", "des": "This package contains configuration related support classes that can be used for application specific, annotated configuration classes."}
{"index": 2682, "repo": "spring-data-jpa-3.1.2", "code": "Package: mapping\n\nClasses and Interfaces: \npublic class JpaMetamodelMappingContext extends AbstractMappingContext<org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?>,JpaPersistentProperty>; // MappingContext implementation based on a Jpa Metamodel.\npublic interface JpaPersistentEntity<T> extends PersistentEntity<T,JpaPersistentProperty>; // Interface for a JPA-specific entity.\npublic interface JpaPersistentProperty extends PersistentProperty<JpaPersistentProperty>; // Interface for a JPA-specific PersistentProperty.\n", "des": "JPA specific support classes for the Spring Data mapping subsystem."}
{"index": 1291, "repo": "spring-core-6.0.11", "code": "Package: util\n\nSub Packages: \npackage util.backoff; // A generic back-off abstraction.\npackage util.comparator; // Useful generic java.util.Comparator implementations, such as an invertible comparator and a compound comparator.\npackage util.concurrent; // Useful generic java.util.concurrent.Future extensions.\npackage util.function; // Useful generic java.util.function helper classes.\npackage util.unit; // Useful unit data types.\npackage util.xml; // Miscellaneous utility classes for XML parsing and transformation, such as error handlers that log warnings via Commons Logging.\n\nClasses and Interfaces: \npublic class AlternativeJdkIdGenerator extends Object implements IdGenerator; // An IdGenerator that uses SecureRandom for the initial seed and Random thereafter, instead of calling UUID.randomUUID() every time as JdkIdGenerator does.\npublic class AntPathMatcher extends Object implements PathMatcher; // PathMatcher implementation for Ant-style path patterns.\nprotected static class AntPathMatcher.AntPathStringMatcher extends Object; // Tests whether a string matches against a pattern via a Pattern.\nprotected static class AntPathMatcher.AntPatternComparator extends Object implements Comparator<String>; // The default Comparator implementation returned by AntPathMatcher.getPatternComparator(String).\npublic abstract class Assert extends Object; // Assertion utility class that assists in validating arguments.\npublic class AutoPopulatingList<E> extends Object implements List<E>, Serializable; // Simple List wrapper class that allows for elements to be automatically populated as they are requested.\n@FunctionalInterface public static interface AutoPopulatingList.ElementFactory<E>; // Factory interface for creating elements for an index-based access data structure such as a List.\npublic static class AutoPopulatingList.ElementInstantiationException extends RuntimeException; // Exception to be thrown from ElementFactory.\n@Deprecated(since=\"6.0.5\", forRemoval=true) public abstract class Base64Utils extends Object;\npublic abstract class ClassUtils extends Object; // Miscellaneous java.lang.Class utility methods.\npublic abstract class CollectionUtils extends Object; // Miscellaneous collection utility methods.\npublic class CommonsLogWriter extends Writer; // java.io.Writer adapter for a Commons Logging Log.\n", "des": "Miscellaneous utility classes, such as utilities for working with strings, classes, collections, reflection, etc."}
{"index": 1000, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass JmsTransportUtils; // Collection of utility methods to work with JMS transports.\n", "des": "Classes supporting the org.springframework.ws.transport.jms package."}
{"index": 3139, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: enhanced\n\nClasses and Interfaces: \nInterface AccessCallback; // Contract for providing callback access to a DatabaseStructure, typically from the Optimizer.\nInterface DatabaseStructure; // Encapsulates definition of the underlying data structure backing a sequence-style generator.\nInterface InitialValueAwareOptimizer; // Marker interface for optimizer which wishes to know the user-specified initial value.\nInterface Optimizer; // Performs optimization on an optimizable identifier generator.\nClass AbstractOptimizer; // Common support for optimizer implementations.\nClass HiLoOptimizer; // Optimizer which applies a 'hilo' algorithm in memory to achieve optimization.\nClass LegacyHiLoAlgorithmOptimizer; // Slight variation from HiLoOptimizer, maintaining compatibility with the values generated by the legacy Hibernate hilo based generators.\nClass NoopOptimizer; // An optimizer that performs no optimization.\nClass OptimizerFactory; // Factory for Optimizer instances.\nClass PooledLoOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value.\nClass PooledLoThreadLocalOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value, as well as using thread local to cache the generation state.\nClass PooledOptimizer; // Optimizer which uses a pool of values, storing the next low value of the range in the database.\nClass SequenceStructure; // Describes a sequence.\nClass SequenceStyleGenerator; // Generates identifier values based on a sequence-style database structure.\nClass TableGenerator; // An enhanced version of table-based id generation.\nClass TableStructure; // Describes a table used to mimic sequence behavior\nEnum StandardOptimizerDescriptor; // Enumeration of the standard Hibernate id generation optimizers.\n", "des": "Enhanced/improved versions of table and sequence based identifier generators targeting portability and unified configuration"}
{"index": 1097, "repo": "hbase-server-3.0.0-alpha-4", "code": "Package: gson\n\nClasses and Interfaces: \nClass GsonFactory; // Provides a singleton Gson instance configured just the way we like it.\nClass GsonSerializationFeature; // Used to register with (shaded) Jersey the presence of Entity serialization using (shaded) Gson.\n", "des": "This package should be in the hbase-http module as a.a.h.h.http.gson."}
{"index": 223, "repo": "nutch-2.4", "code": "Package: domain\n\nClasses and Interfaces: \nClass DomainStatistics; // Extracts some very basic statistics about domains from the crawldb\nClass DomainStatistics.DomainStatisticsCombiner;\nClass DomainStatistics.DomainStatisticsMapper;\nClass DomainStatistics.DomainStatisticsReducer;\nClass DomainSuffix; // This class represents the last part of the host name, which is operated by authoritives, not individuals.\nClass DomainSuffixes; // Storage class for DomainSuffix objects Note: this class is singleton\nClass TopLevelDomain; // (From wikipedia) A top-level domain (TLD) is the last part of an Internet domain name; that is, the letters which follow the final dot of any domain name.\nEnum DomainStatistics.MyCounter;\nEnum DomainSuffix.Status; // Enumeration of the status of the tld.\nEnum TopLevelDomain.Type;\n", "des": "Classes for domain name analysis."}
{"index": 3248, "repo": "opencms-core-15.0", "code": "Package: shared\n\nSub Packages: \npackage shared.rpc; // Classes to handle client-side GWT-RPC services.\n\nClasses and Interfaces: \nClass CmsProjectBean; // A project bean.\nClass CmsPublishData; // A bean that contains both publish options and a map of projects.\nClass CmsPublishGroup; // A publish group.\nClass CmsPublishGroupList; // A class which represents a list of publish groups to display to the user for selection.\nClass CmsPublishListToken; // A bean which can be used to reconstruct a publish list.\nClass CmsPublishOptions; // Bean encapsulating all ADE publish options.\nClass CmsPublishResource; // A publish resource.\nClass CmsPublishResourceInfo; // A publish resource additional information bean.\nClass CmsWorkflow; // A bean which represents a possible workflow, containing an identifier, a user-readable name and a list of workflow actions.\nClass CmsWorkflowAction; // Work flow action information.\nClass CmsWorkflowActionParams; // Contains the data on which a workflow action should act (usually, a list of resources).\nClass CmsWorkflowResponse; // The result of a workflow action.\nEnum CmsPublishResourceInfo.Type; // Reason value constants, when resources can not be published.\n", "des": "Classes for the publish dialog which are used by both the client and the server."}
{"index": 2517, "repo": "spring-security-core-6.1.2", "code": "Package: method\n\nClasses and Interfaces: \npublic class DefaultMethodSecurityExpressionHandler extends AbstractSecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation> implements MethodSecurityExpressionHandler; // The standard implementation of MethodSecurityExpressionHandler.\n@Deprecated public class ExpressionBasedAnnotationAttributeFactory extends Object implements PrePostInvocationAttributeFactory;\n@Deprecated public class ExpressionBasedPostInvocationAdvice extends Object implements PostInvocationAuthorizationAdvice;\n@Deprecated public class ExpressionBasedPreInvocationAdvice extends Object implements PreInvocationAuthorizationAdvice;\npublic interface MethodSecurityExpressionHandler extends SecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation>; // Extended expression-handler facade which adds methods which are specific to securing method invocations.\npublic interface MethodSecurityExpressionOperations extends SecurityExpressionOperations; // Interface which must be implemented if you want to use filtering in method security expressions.\n", "des": "Implementation of expression-based method security."}
{"index": 2873, "repo": "spring-integration-core-6.1.2", "code": "Package: metadata\n\nClasses and Interfaces: \npublic interface ConcurrentMetadataStore extends MetadataStore; // Supports atomic updates to values in the store.\npublic interface ListenableMetadataStore extends ConcurrentMetadataStore; // ConcurrentMetadataStore with the ability of registering MetadataStoreListener callbacks, to be invoked when changes occur in the metadata store.\n@ManagedResource public interface MetadataStore; // Strategy interface for storing metadata from certain adapters to avoid duplicate delivery of messages, for example.\npublic interface MetadataStoreListener; // A callback to be invoked whenever a value changes in the data store.\npublic abstract class MetadataStoreListenerAdapter extends Object implements MetadataStoreListener; // Base implementation for a MetadataStoreListener.\npublic class PropertiesPersistingMetadataStore extends Object implements ConcurrentMetadataStore, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, Closeable, Flushable; // Properties file-based implementation of MetadataStore.\npublic class SimpleMetadataStore extends Object implements ConcurrentMetadataStore; // Simple implementation of MetadataStore that uses a ConcurrentMap for the data store.\n", "des": "Provides classes supporting metadata stores."}
{"index": 1645, "repo": "jena-core-4.9.0", "code": "Package: compose\n\nClasses and Interfaces: \npublic abstract class CompositionBase extends GraphBase; // Base class for graphs that are composed of multiple sub-graphs.\npublic class Delta extends CompositionBase implements Graph; // Graph operation for wrapping a base graph and leaving it unchanged while recording all the attempted updates for later access.\npublic class Difference extends Dyadic implements Graph; // Class representing the dynamic set difference L - R of two graphs.\npublic class DisjointUnion extends Dyadic; // DisjointUnion - a version of Union that assumes the graphs are disjoint, and hence that find need not do duplicate-removal.\npublic abstract class Dyadic extends CompositionBase; // Base class for the two-operand composition operations; has two graphs L and R\npublic class Intersection extends Dyadic implements Graph; // The dynamic intersection of two graphs L and R.\npublic class MultiUnion extends Polyadic; // A graph implementation that presents the union of zero or more subgraphs, one of which is distinguished as the updateable graph.\npublic abstract class Polyadic extends CompositionBase; // A base class for composition graphs that are composed from zero or more sub-graphs (thus providing a basis for polyadic composition operators).\npublic class PolyadicPrefixMappingImpl extends PrefixMappingImpl implements PrefixMapping;\npublic class Union extends Dyadic implements Graph; // A class representing the dynamic union of two graphs.\n", "des": "This package defines simple composite graphs - union, intersection, difference, and update-tracking."}
{"index": 2829, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: core\n\nClasses and Interfaces: \npublic class DefaultReactiveDataAccessStrategy extends Object implements ReactiveDataAccessStrategy; // Default ReactiveDataAccessStrategy implementation.\npublic interface FluentR2dbcOperations extends ReactiveSelectOperation, ReactiveInsertOperation, ReactiveUpdateOperation, ReactiveDeleteOperation; // Stripped down interface providing access to a fluent API that specifies a basic set of reactive R2DBC operations.\npublic interface R2dbcEntityOperations extends FluentR2dbcOperations; // Interface specifying a basic set of reactive R2DBC operations using entities.\npublic class R2dbcEntityTemplate extends Object implements R2dbcEntityOperations, BeanFactoryAware, ApplicationContextAware; // Implementation of R2dbcEntityOperations.\n@Deprecated public interface ReactiveDataAccessStrategy;\n@FunctionalInterface public static interface ReactiveDataAccessStrategy.NamedParameterProvider; // Interface to retrieve parameters for named parameter processing.\npublic interface ReactiveDeleteOperation; // The ReactiveDeleteOperation interface allows creation and execution of DELETE operations in a fluent API style.\npublic static interface ReactiveDeleteOperation.DeleteWithQuery extends ReactiveDeleteOperation.TerminatingDelete; // Required filter.\npublic static interface ReactiveDeleteOperation.DeleteWithTable extends ReactiveDeleteOperation.TerminatingDelete; // Table override (optional).\npublic static interface ReactiveDeleteOperation.ReactiveDelete extends ReactiveDeleteOperation.DeleteWithTable, ReactiveDeleteOperation.DeleteWithQuery; // The ReactiveDeleteOperation.ReactiveDelete interface provides methods for constructing DELETE operations in a fluent way.\npublic static interface ReactiveDeleteOperation.TerminatingDelete; // Trigger DELETE operation by calling one of the terminating methods.\npublic interface ReactiveInsertOperation; // The ReactiveInsertOperation interface allows creation and execution of INSERT operations in a fluent API style.\npublic static interface ReactiveInsertOperation.InsertWithTable<T> extends ReactiveInsertOperation.TerminatingInsert<T>; // Table override (optional).\npublic static interface ReactiveInsertOperation.ReactiveInsert<T> extends ReactiveInsertOperation.InsertWithTable<T>; // The ReactiveInsertOperation.ReactiveInsert interface provides methods for constructing INSERT operations in a fluent way.\npublic static interface ReactiveInsertOperation.TerminatingInsert<T>; // Trigger INSERT execution by calling one of the terminating methods.\npublic interface ReactiveSelectOperation; // The ReactiveSelectOperation interface allows creation and execution of SELECT operations in a fluent API style.\n", "des": "Core domain types around DatabaseClient."}
{"index": 2856, "repo": "spring-integration-core-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class FixedSubscriberChannelPrototype extends Object implements org.springframework.messaging.MessageChannel; // An \"artificial\" MessageChannel implementation which will be unwrapped to the FixedSubscriberChannel on the bean registration phase.\npublic record MessageChannelReference(String name) extends Record implements org.springframework.messaging.MessageChannel; // An \"artificial\" MessageChannel implementation which will be unwrapped to the MessageChannel bean on the bean registration phase.\n", "des": "Provides various support classes used across Spring Integration Java DSL Components."}
{"index": 3820, "repo": "lucene-analysis-common-9.7.0", "code": "Package: te\n\nClasses and Interfaces: \nClass TeluguAnalyzer; // Analyzer for Telugu.\nClass TeluguNormalizationFilter; // A TokenFilter that applies TeluguNormalizer to normalize the orthography.\nClass TeluguNormalizationFilterFactory; // Factory for TeluguNormalizationFilter.\nClass TeluguNormalizer; // Normalizer for Telugu.\nClass TeluguStemFilter; // A TokenFilter that applies TeluguStemmer to stem Telugu words.\nClass TeluguStemFilterFactory; // Factory for TeluguStemFilter.\nClass TeluguStemmer; // Stemmer for Telugu.\n", "des": "Analyzer for Telugu Language."}
{"index": 2497, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: session\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.class) @ConditionalOnClass(org.springframework.session.FindByIndexNameSessionRepository.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.session.SessionsEndpoint.class) public class SessionsEndpointAutoConfiguration extends Object; // Auto-configuration for SessionsEndpoint.\n", "des": "Auto-configuration for actuator Spring Sessions concerns."}
{"index": 1552, "repo": "spring-context-6.0.11", "code": "Package: context\n\nSub Packages: \npackage context.support; // Classes supporting the org.springframework.ui.context package.\n\nClasses and Interfaces: \n@Deprecated(since=\"6.0\") public interface HierarchicalThemeSource extends ThemeSource;\n@Deprecated(since=\"6.0\") public interface Theme;\n@Deprecated(since=\"6.0\") public interface ThemeSource;\n", "des": "Contains classes defining the application context subinterface for UI applications."}
{"index": 1994, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: reactive\n\nSub Packages: \npackage reactive.error; // Auto-configuration for Spring WebFlux error handling.\n\nClasses and Interfaces: \n@AutoConfiguration(after=WebFluxAutoConfiguration.class) @ConditionalOnClass({org.springframework.web.reactive.DispatcherHandler.class,org.springframework.http.server.reactive.HttpHandler.class}) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnMissingBean(org.springframework.http.server.reactive.HttpHandler.class) @AutoConfigureOrder(-2147483638) public class HttpHandlerAutoConfiguration extends Object; // Auto-configuration for HttpHandler.\n@Configuration(proxyBeanMethods=false) public static class HttpHandlerAutoConfiguration.AnnotationConfig extends Object;\n@AutoConfiguration @ConditionalOnClass({org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.class,org.springframework.web.reactive.config.WebFluxConfigurer.class}) @ConditionalOnWebApplication(type=REACTIVE) @EnableConfigurationProperties(ReactiveMultipartProperties.class) public class ReactiveMultipartAutoConfiguration extends Object; // Auto-configuration for multipart support in Spring WebFlux.\n@ConfigurationProperties(prefix=\"spring.webflux.multipart\") public class ReactiveMultipartProperties extends Object; // Configuration properties for configuring multipart support in Spring Webflux.\n", "des": "Auto-configuration for reactive web servers and Spring WebFlux."}
{"index": 1903, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: cassandra\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(com.datastax.oss.driver.api.core.CqlSession.class) @EnableConfigurationProperties(CassandraProperties.class) public class CassandraAutoConfiguration extends Object; // Auto-configuration for Cassandra.\npublic interface CassandraConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Cassandra service.\npublic static record CassandraConnectionDetails.Node(String host, int port) extends Record; // A Cassandra node.\n@ConfigurationProperties(prefix=\"spring.cassandra\") public class CassandraProperties extends Object; // Configuration properties for Cassandra.\npublic static enum CassandraProperties.Compression extends Enum<CassandraProperties.Compression>; // Name of the algorithm used to compress protocol frames.\npublic static class CassandraProperties.Connection extends Object;\npublic static class CassandraProperties.Controlconnection extends Object;\npublic static class CassandraProperties.Pool extends Object; // Pool properties.\npublic static class CassandraProperties.Request extends Object;\npublic static class CassandraProperties.Ssl extends Object;\npublic static class CassandraProperties.Throttler extends Object;\npublic static enum CassandraProperties.ThrottlerType extends Enum<CassandraProperties.ThrottlerType>;\n@FunctionalInterface public interface CqlSessionBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the CqlSession through a CqlSessionBuilder whilst retaining default auto-configuration.\npublic interface DriverConfigLoaderBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the DriverConfigLoader through a DriverConfigLoaderBuilderCustomizer whilst retaining default auto-configuration.\n", "des": "Auto-configuration for Cassandra."}
{"index": 850, "repo": "calcite-core-1.34.0", "code": "Package: materialize\n\nClasses and Interfaces: \nInterface MaterializedViewAggregateRule.Config; // Rule configuration.\nInterface MaterializedViewOnlyAggregateRule.Config; // Rule configuration.\nInterface MaterializedViewOnlyFilterRule.Config; // Rule configuration.\nInterface MaterializedViewOnlyJoinRule.Config; // Rule configuration.\nInterface MaterializedViewProjectAggregateRule.Config; // Rule configuration.\nInterface MaterializedViewProjectFilterRule.Config; // Rule configuration.\nInterface MaterializedViewProjectJoinRule.Config; // Rule configuration.\nInterface MaterializedViewRule.Config; // Rule configuration.\nClass MaterializedViewAggregateRule<C extends MaterializedViewAggregateRule.Config>; // Materialized view rewriting for aggregate.\nClass MaterializedViewJoinRule<C extends MaterializedViewRule.Config>; // Materialized view rewriting for join.\nClass MaterializedViewOnlyAggregateRule; // Rule that matches Aggregate.\nClass MaterializedViewOnlyFilterRule; // Rule that matches Filter.\nClass MaterializedViewOnlyJoinRule; // Rule that matches Join.\nClass MaterializedViewProjectAggregateRule; // Rule that matches Project on Aggregate.\nClass MaterializedViewProjectFilterRule; // Rule that matches Project on Filter.\nClass MaterializedViewProjectJoinRule; // Rule that matches Project on Join.\nClass MaterializedViewRule<C extends MaterializedViewRule.Config>; // Planner rule that converts a Project followed by Aggregate or an Aggregate to a scan (and possibly other operations) over a materialized view.\nClass MaterializedViewRule.Edge; // Edge for graph.\nClass MaterializedViewRule.EquivalenceClasses; // Class representing an equivalence class, i.e., a set of equivalent columns\nClass MaterializedViewRule.NodeLineage; // Expression lineage details.\nClass MaterializedViewRule.ViewPartialRewriting; // View partitioning result.\nClass MaterializedViewRules; // Collection of rules pertaining to materialized views.\nEnum MaterializedViewRule.MatchModality; // Complete, view partial, or query partial.\n", "des": "Provides a materialized rewriting algorithm encapsulated within a planner rule."}
{"index": 2375, "repo": "pulsar-client-api-3.0.0", "code": "Package: internal\n\nClasses and Interfaces: \npublic class DefaultImplementation extends Object; // This class loads the implementation for PulsarClientImplementationBinding and allows you to decouple the API from the actual implementation.\npublic class PropertiesUtils extends Object; // Internal utility methods for filtering and mapping Properties objects.\npublic interface PulsarClientImplementationBinding; // Helper class for class instantiations and it also contains methods to work with schemas.\n", "des": "Helpers which provide useful functionality for the implementation of Pulsar Client API."}
{"index": 3378, "repo": "opencms-core-15.0", "code": "Package: page\n\nClasses and Interfaces: \nClass CmsXmlPage; // Implementation of a page object used to access and manage xml data.\nClass CmsXmlPageFactory; // Provides factory methods to unmarshal (read) an XML page object.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains functions for unstructured content storage using XML, commonly called \"XML pages\" in OpenCms."}
{"index": 869, "repo": "calcite-core-1.34.0", "code": "Package: sql2rel\n\nClasses and Interfaces: \nInterface AuxiliaryConverter; // Converts an expression for a group window function (e.g.\nInterface InitializerContext; // Provides context for InitializerExpressionFactory methods.\nInterface InitializerExpressionFactory; // InitializerExpressionFactory supplies default values for INSERT, UPDATE, and NEW.\nInterface RelDecorrelator.AdjustProjectForCountAggregateRule.AdjustProjectForCountAggregateRuleConfig; // Rule configuration.\nInterface RelDecorrelator.Config; // Base configuration for rules that are non-static in a RelDecorrelator.\nInterface RelDecorrelator.RemoveCorrelationForScalarAggregateRule.RemoveCorrelationForScalarAggregateRuleConfig; // Rule configuration.\nInterface RelDecorrelator.RemoveCorrelationForScalarProjectRule.RemoveCorrelationForScalarProjectRuleConfig; // Rule configuration.\nInterface RelDecorrelator.RemoveSingleAggregateRule.RemoveSingleAggregateRuleConfig; // Rule configuration.\nInterface RelStructuredTypeFlattener.SelfFlatteningRel; // Mix-in interface for relational expressions that know how to flatten themselves.\nInterface SqlNodeToRexConverter; // Converts expressions from SqlNode to RexNode.\nInterface SqlRexContext; // Contains the context necessary for a SqlRexConvertlet to convert a SqlNode expression into a RexNode.\nInterface SqlRexConvertlet; // Thunk which converts a SqlNode expression into a RexNode expression.\nInterface SqlRexConvertletTable; // Collection of SqlRexConvertlets.\nInterface SqlToRelConverter.Config; // Interface to define the configuration for a SqlToRelConverter.\nInterface SubQueryConverter; // SubQueryConverter provides the interface for classes that convert sub-queries into equivalent expressions.\nClass AuxiliaryConverter.Impl; // Simple implementation of AuxiliaryConverter.\nClass CorrelateProjectExtractor; // A visitor for relational expressions that extracts a Project, with a \"simple\" computation over the correlated variables, from the right side of a correlation (Correlate) and places it on the left side.\nClass CorrelationReferenceFinder; // Shuttle that finds references to a given CorrelationId within a tree of RelNodes.\nClass DeduplicateCorrelateVariables; // Rewrites relations to ensure the same correlation is referenced by the same correlation variable.\n", "des": "Translates a SQL parse tree to relational expression."}
{"index": 381, "repo": "mahout-core-14.1", "code": "Package: math\n\nClasses and Interfaces: \nClass Arithmetic; // Arithmetic functions.\nClass Constants; // Defines some useful constants.\nClass Polynomial; // Polynomial functions.\n", "des": "Tools for basic and advanced mathematics: Arithmetics and Algebra, Polynomials and Chebyshev series, Bessel and Airy functions, Function Objects for generic function evaluation, etc."}
{"index": 20, "repo": "commons-collections4-4.4", "code": "Package: iterators\n\nClasses and Interfaces: \nClass AbstractEmptyMapIterator<K,V>; // Provides an implementation of an empty map iterator.\nClass AbstractIteratorDecorator<E>; // Provides basic behaviour for decorating an iterator with extra functionality.\nClass AbstractListIteratorDecorator<E>; // Provides basic behaviour for decorating a list iterator with extra functionality.\nClass AbstractMapIteratorDecorator<K,V>; // Provides basic behaviour for decorating a map iterator with extra functionality.\nClass AbstractOrderedMapIteratorDecorator<K,V>; // Provides basic behaviour for decorating an ordered map iterator with extra functionality.\nClass AbstractUntypedIteratorDecorator<I,O>; // Provides basic behaviour for decorating an iterator with extra functionality without committing the generic type of the Iterator implementation.\nClass ArrayIterator<E>; // Implements an Iterator over any array.\nClass ArrayListIterator<E>; // Implements a ListIterator over an array.\nClass BoundedIterator<E>; // Decorates another iterator to return elements in a specific range.\nClass CollatingIterator<E>; // Provides an ordered iteration over the elements contained in a collection of ordered Iterators.\nClass EmptyIterator<E>; // Provides an implementation of an empty iterator.\nClass EmptyListIterator<E>; // Provides an implementation of an empty list iterator.\nClass EmptyMapIterator<K,V>; // Provides an implementation of an empty map iterator.\nClass EmptyOrderedIterator<E>; // Provides an implementation of an empty ordered iterator.\nClass EmptyOrderedMapIterator<K,V>; // Provides an implementation of an empty ordered map iterator.\nClass EntrySetMapIterator<K,V>; // Implements a MapIterator using a Map entrySet.\nClass EnumerationIterator<E>; // Adapter to make Enumeration instances appear to be Iterator instances.\nClass FilterIterator<E>; // Decorates another Iterator using a predicate to filter elements.\nClass FilterListIterator<E>; // Decorates another ListIterator using a predicate to filter elements.\nClass IteratorChain<E>; // An IteratorChain is an Iterator that wraps a number of Iterators.\nClass IteratorEnumeration<E>; // Adapter to make an Iterator instance appear to be an Enumeration instance.\nClass IteratorIterable<E>; // Adapter to make an Iterator instance appear to be an Iterable instance.\n", "des": "This package contains implementations of the Iterator interface."}
{"index": 1698, "repo": "spring-data-couchbase-5.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class AwtPointInShapeEvaluator extends PointInShapeEvaluator; // A default PointInShapeEvaluator implementation based on the JDK's java.awt.geom classes.\npublic class GeoUtils extends Object; // Utility class to deal with geo/dimensional indexed data and queries.\npublic class N1qlQueryCreatorUtils extends Object; // Utils for creating part tree expressions\npublic class N1qlUtils extends Object; // Utility class to deal with constructing well formed N1QL queries around Spring Data entities, so that the framework can use N1QL to find such entities (eg. restrict the bucket search to a particular type).\npublic abstract class PointInShapeEvaluator extends Object; // PointInShapeEvaluator can be used to tell if a particular Point is contained by a Polygon or Circle.\n", "des": "This package contains support classes for query derivation and other ways of querying couchbase (helper classes)."}
{"index": 1371, "repo": "spring-boot-actuator-3.1.1", "code": "Package: listener\n\nClasses and Interfaces: \npublic abstract class AbstractAuditListener extends Object implements org.springframework.context.ApplicationListener<AuditApplicationEvent>; // Abstract ApplicationListener to handle AuditApplicationEvents.\npublic class AuditApplicationEvent extends org.springframework.context.ApplicationEvent; // Spring ApplicationEvent to encapsulate AuditEvents.\npublic class AuditListener extends AbstractAuditListener; // The default AbstractAuditListener implementation.\n", "des": "Actuator auditing listeners."}
{"index": 1151, "repo": "commons-math3-3.6.1", "code": "Package: complex\n\nClasses and Interfaces: \nClass Complex; // Representation of a Complex number, i.e.\nClass ComplexField; // Representation of the complex numbers field.\nClass ComplexFormat; // Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".\nClass ComplexUtils; // Static implementations of common Complex utilities functions.\nClass Quaternion; // This class implements quaternions (Hamilton's hypercomplex numbers).\nClass RootsOfUnity; // A helper class for the computation and caching of the n-th roots of unity.\n", "des": "Complex number type and implementations of complex transcendental functions."}
{"index": 2628, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: mgt\n\nClasses and Interfaces: \npublic enum DefaultFilter extends Enum<DefaultFilter>; // Enum representing all of the default Shiro Filter instances available to web applications.\npublic class DefaultFilterChainManager extends Object implements FilterChainManager; // Default FilterChainManager implementation maintaining a map of Filter instances (key: filter name, value: Filter) as well as a map of NamedFilterLists created from these Filters (key: filter chain name, value: NamedFilterList).\npublic interface FilterChainManager; // A FilterChainManager manages the creation and modification of Filter chains from an available pool of Filter instances.\npublic interface FilterChainResolver; // A FilterChainResolver can resolve an appropriate FilterChain to execute during a ServletRequest.\npublic interface NamedFilterList extends List<javax.servlet.Filter>; // A NamedFilterList is a List of Filter instances that is uniquely identified by a name.\npublic class PathMatchingFilterChainResolver extends Object implements FilterChainResolver; // A FilterChainResolver that resolves FilterChains based on url path matching, as determined by a configurable PathMatcher.\npublic class SimpleNamedFilterList extends Object implements NamedFilterList; // Simple NamedFilterList implementation that is supported by a backing List instance and a simple name property.\n", "des": "The filter 'mgt' (management) package contains components used in managing Filters that are available for filter chain construction, the filter chains themselves, as well as resolving filter chains based by name."}
{"index": 75, "repo": "ignite-core-2.15.0", "code": "Package: noop\n\nClasses and Interfaces: \nClass NoopCollisionSpi; // No-op implementation of CollisionSpi.\n", "des": "Contains default no-op collision SPI implementation."}
{"index": 569, "repo": "hadoop-common-3.3.4", "code": "Package: alias\n\nClasses and Interfaces: \nClass BouncyCastleFipsKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass CredentialProvider; // A provider of credentials or password for Hadoop applications.\nClass CredentialProvider.CredentialEntry; // The combination of both the alias and the actual credential value.\nClass CredentialProviderFactory; // A factory to create a list of CredentialProvider based on the path given in a Configuration.\nClass CredentialShell; // This program is the CLI utility for the CredentialProvider facilities in Hadoop.\nClass CredentialShell.PasswordReader; // To facilitate testing since Console is a final class.\nClass JavaKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass LocalBouncyCastleFipsKeyStoreProvider.Factory; // The factory to create KeyStore Providers, which is used by the ServiceLoader.\nClass LocalJavaKeyStoreProvider.Factory; // The factory to create JksProviders, which is used by the ServiceLoader.\nClass UserProvider.Factory;\n", "des": "Provides the hadoop credential provider API."}
{"index": 1107, "repo": "fontbox-3.0.0-beta1", "code": "Package: model\n\nClasses and Interfaces: \nInterface GsubData; // Model for data from the GSUB tables\nInterface ScriptFeature; // Models a FeatureRecord\nClass MapBackedGsubData; // A Map based simple implementation of the GsubData\nClass MapBackedScriptFeature; // A Map based simple implementation of the ScriptFeature\nEnum Language; // Enumerates the languages supported for GSUB operation.\n", "des": "This package contains a more logical model for the various font tables like GSUB."}
{"index": 348, "repo": "hadoop-hdfs-3.3.6", "code": "Package: planner\n\nClasses and Interfaces: \nInterface Planner; // Planner interface allows different planners to be created.\nInterface Step; // A step in the plan.\nClass GreedyPlanner; // Greedy Planner is a simple planner that computes the largest possible move at any point of time given a volumeSet.\nClass MoveStep; // Ignore fields with default values.\nClass NodePlan; // NodePlan is a set of volumeSetPlans.\nClass PlannerFactory; // Returns a planner based on the user defined tags.\n", "des": "Planner takes a DiskBalancerVolumeSet, threshold and computes a series of steps that lead to an even data distribution between volumes of this DiskBalancerVolumeSet."}
{"index": 2695, "repo": "spring-integration-http-6.1.2", "code": "Package: inbound\n\nClasses and Interfaces: \npublic class BaseHttpInboundEndpoint extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.integration.context.OrderlyShutdownCapable; // The MessagingGatewaySupport extension for HTTP Inbound endpoints with basic properties.\npublic class CrossOrigin extends Object; // The mapping to permit cross origin requests (CORS) for HttpRequestHandlingEndpointSupport.\npublic class HttpRequestHandlingController extends HttpRequestHandlingEndpointSupport implements org.springframework.web.servlet.mvc.Controller; // Inbound HTTP endpoint that implements Spring's Controller interface to be used with a DispatcherServlet front controller.\npublic abstract class HttpRequestHandlingEndpointSupport extends BaseHttpInboundEndpoint; // Base class for HTTP request handling endpoints.\npublic class HttpRequestHandlingMessagingGateway extends HttpRequestHandlingEndpointSupport implements org.springframework.web.HttpRequestHandler; // Inbound Messaging Gateway that handles HTTP Requests.\npublic final class IntegrationRequestMappingHandlerMapping extends org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping implements org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor; // The HandlerMapping implementation that detects and registers RequestMappingInfos for HttpRequestHandlingEndpointSupport from a Spring Integration HTTP configuration of <inbound-channel-adapter/> and <inbound-gateway/> elements.\npublic class RequestMapping extends Object; // Class for mapping web requests onto specific HttpRequestHandlingEndpointSupport.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 3399, "repo": "commons-imaging-1.0-alpha3", "code": "Package: xmp\n\nClasses and Interfaces: \nClass JpegRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass JpegRewriter.JFIFPiece;\nClass JpegRewriter.JFIFPieces;\nClass JpegRewriter.JFIFPieceSegment;\nClass JpegXmpParser;\nClass JpegXmpRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass JpegRewriter.JpegSegmentOverflowException;\n", "des": "JPEG image format XMP metadata."}
{"index": 643, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: router\n\nClasses and Interfaces: \nInterface FederationRouterPolicy; // Implements the logic for determining the routing of an application submission based on a policy.\nClass AbstractRouterPolicy; // Base abstract class for FederationRouterPolicy implementations, that provides common validation for reinitialization.\nClass HashBasedRouterPolicy; // This FederationRouterPolicy pick a subcluster based on the hash of the job's queue name.\nClass LoadBasedRouterPolicy; // This implements a simple load-balancing policy.\nClass LocalityRouterPolicy; // This policy selects the subcluster depending on the node where the Client wants to run its application.\nClass PriorityRouterPolicy; // This implements a policy that interprets \"weights\" as a ordered list of preferences among sub-clusters.\nClass RejectRouterPolicy; // This FederationRouterPolicy simply rejects all incoming requests.\nClass UniformRandomRouterPolicy; // This simple policy picks at uniform random among any of the currently active subclusters.\nClass WeightedRandomRouterPolicy; // This policy implements a weighted random sample among currently active sub-clusters.\n", "des": "Router policies."}
{"index": 327, "repo": "kafka-clients-3.5.0", "code": "Package: quota\n\nClasses and Interfaces: \nClass ClientQuotaAlteration; // Describes a configuration alteration to be made to a client quota entity.\nClass ClientQuotaAlteration.Op;\nClass ClientQuotaEntity; // Describes a client quota entity, which is a mapping of entity types to their names.\nClass ClientQuotaFilter; // Describes a client quota entity filter.\nClass ClientQuotaFilterComponent; // Describes a component for applying a client quota filter.\n", "des": "Provides mechanisms for enforcing resource quotas."}
{"index": 870, "repo": "calcite-core-1.34.0", "code": "Package: statistic\n\nClasses and Interfaces: \nClass CachingSqlStatisticProvider; // Implementation of SqlStatisticProvider that reads and writes a cache.\nClass QuerySqlStatisticProvider; // Implementation of SqlStatisticProvider that generates and executes SQL queries.\nEnum MapSqlStatisticProvider; // Implementation of SqlStatisticProvider that looks up values in a table.\n", "des": "Implementations of statistics providers."}
{"index": 119, "repo": "ignite-core-2.15.0", "code": "Package: dotnet\n\nClasses and Interfaces: \nClass PlatformDotNetAffinityFunction; // AffinityFunction implementation which can be used to configure .NET affinity function in Java Spring configuration.\nClass PlatformDotNetBinaryConfiguration; // Mirror of .Net class BinaryConfiguration.cs\nClass PlatformDotNetBinaryTypeConfiguration; // Mirror of .Net class BinaryTypeConfiguration.cs\nClass PlatformDotNetCacheStoreFactory; // Wrapper for .NET cache store implementations.\nClass PlatformDotNetCacheStoreFactoryNative; // Cache store factory that wraps native factory object.\nClass PlatformDotNetConfiguration; // Mirror of .Net class IgniteConfiguration.cs\nClass PlatformDotNetLifecycleBean; // Lifecycle bean implementation which can be used to configure .Net lifecycle beans in Java Spring configuration.\n", "des": "Contains .Net platform-related classes."}
{"index": 1272, "repo": "spring-core-6.0.11", "code": "Package: converter\n\nClasses and Interfaces: \npublic interface ConditionalConverter; // Allows a Converter, GenericConverter or ConverterFactory to conditionally execute based on attributes of the source and target TypeDescriptor.\npublic interface ConditionalGenericConverter extends GenericConverter, ConditionalConverter; // A GenericConverter that may conditionally execute based on attributes of the source and target TypeDescriptor.\n@FunctionalInterface public interface Converter<S,T>; // A converter converts a source object of type S to a target of type T.\npublic interface ConverterFactory<S,R>; // A factory for \"ranged\" converters that can convert objects from S to subtypes of R.\npublic interface ConverterRegistry; // For registering converters with a type conversion system.\npublic class ConvertingComparator<S,T> extends Object implements Comparator<S>; // A Comparator that converts values before they are compared.\npublic interface GenericConverter; // Generic converter interface for converting between two or more types.\npublic static final class GenericConverter.ConvertiblePair extends Object; // Holder for a source-to-target class pair.\n", "des": "SPI to implement Converters for the type conversion system."}
{"index": 865, "repo": "calcite-core-1.34.0", "code": "Package: type\n\nClasses and Interfaces: \nInterface ExtraSqlTypes; // Holds constants associated with SQL types introduced after the earliest version of Java supported by Farrago (this currently means anything introduced in JDK 1.6 or later).\nInterface ImplicitCastOperandTypeChecker; // An operand type checker that supports implicit type cast, see TypeCoercion.builtinFunctionCoercion(SqlCallBinding, List, List) for details.\nInterface SqlOperandHandler; // Strategy interface to process operands of an operator call.\nInterface SqlOperandMetadata; // Extension to SqlOperandTypeChecker that also provides names and types of particular operands.\nInterface SqlOperandTypeChecker; // Strategy interface to check for allowed operand types of an operator call.\nInterface SqlOperandTypeInference; // Strategy to infer unknown types of the operands of an operator call.\nInterface SqlReturnTypeInference; // Strategy interface to infer the type of an operator call from the type of the operands.\nInterface SqlSingleOperandTypeChecker; // SqlSingleOperandTypeChecker is an extension of SqlOperandTypeChecker for implementations which are capable of checking the type of a single operand in isolation.\nInterface SqlTypeMappingRule; // Interface that defines rules within type mappings.\nInterface SqlTypeTransform; // Strategy to transform one type to another.\nClass AbstractSqlType; // Abstract base class for SQL implementations of RelDataType.\nClass ArraySqlType; // SQL array type.\nClass AssignableOperandTypeChecker; // AssignableOperandTypeChecker implements SqlOperandTypeChecker by verifying that the type of each argument is assignable to a predefined set of parameter types (under the SQL definition of \"assignable\").\nClass BasicSqlType; // BasicSqlType represents a standard atomic SQL type (excluding interval types).\nClass ComparableOperandTypeChecker; // Type checking strategy which verifies that types have the required attributes to be used as arguments to comparison operators.\nClass CompositeOperandTypeChecker; // This class allows multiple existing SqlOperandTypeChecker rules to be combined into one rule.\nClass CompositeSingleOperandTypeChecker; // Allows multiple SqlSingleOperandTypeChecker rules to be combined into one rule.\nClass CursorReturnTypeInference; // Returns the rowtype of a cursor of the operand at a particular 0-based ordinal position.\nClass ExplicitOperandTypeChecker; // Parameter type-checking strategy for Explicit Type.\n", "des": "SQL type system."}
{"index": 2007, "repo": "spring-boot-devtools-3.1.1", "code": "Package: autoconfigure\n\nClasses and Interfaces: \n@Conditional({OnEnabledDevToolsCondition.class,org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.DevToolsDataSourceCondition.class}) @AutoConfiguration(after=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class) @Import(org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.DatabaseShutdownExecutorEntityManagerFactoryDependsOnPostProcessor.class) public class DevToolsDataSourceAutoConfiguration extends Object; // Auto-configuration for DevTools-specific DataSource configuration.\n@ConfigurationProperties(prefix=\"spring.devtools\") public class DevToolsProperties extends Object; // Configuration properties for developer tools.\npublic static class DevToolsProperties.Livereload extends Object; // LiveReload properties.\npublic static class DevToolsProperties.Restart extends Object; // Restart properties.\n@ConditionalOnClass(io.r2dbc.spi.ConnectionFactory.class) @Conditional({OnEnabledDevToolsCondition.class,org.springframework.boot.devtools.autoconfigure.DevToolsR2dbcAutoConfiguration.DevToolsConnectionFactoryCondition.class}) @AutoConfiguration(after=org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration.class) public class DevToolsR2dbcAutoConfiguration extends Object; // Auto-configuration for DevTools-specific R2DBC configuration.\n@AutoConfiguration @ConditionalOnInitializedRestarter @EnableConfigurationProperties(DevToolsProperties.class) public class LocalDevToolsAutoConfiguration extends Object; // Auto-configuration for local development support.\npublic class OnEnabledDevToolsCondition extends org.springframework.boot.autoconfigure.condition.SpringBootCondition; // A condition that checks if DevTools should be enabled.\npublic class OptionalLiveReloadServer extends Object implements org.springframework.beans.factory.InitializingBean; // Manages an optional LiveReloadServer.\n", "des": "Auto-configuration for spring-boot-devtools."}
{"index": 1897, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: admin\n\nClasses and Interfaces: \n@AutoConfiguration(after=JmxAutoConfiguration.class) @ConditionalOnProperty(prefix=\"spring.application.admin\", value=\"enabled\", havingValue=\"true\", matchIfMissing=false) public class SpringApplicationAdminJmxAutoConfiguration extends Object; // Register a JMX component that allows to administer the current application.\n", "des": "Auto-configuration for admin-related features."}
{"index": 2591, "repo": "spring-rabbit-3.0.6", "code": "Package: adapter\n\nClasses and Interfaces: \npublic abstract class AbstractAdaptableMessageListener extends Object implements ChannelAwareMessageListener; // An abstract MessageListener adapter providing the necessary infrastructure to extract the payload of a Message.\npublic static final class AbstractAdaptableMessageListener.ReplyExpressionRoot extends Object; // Root object for reply expression evaluation.\npublic class AmqpMessageHandlerMethodFactory extends org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory; // Extension of the DefaultMessageHandlerMethodFactory for Spring AMQP requirements.\npublic class BatchMessagingMessageListenerAdapter extends MessagingMessageListenerAdapter implements ChannelAwareBatchMessageListener; // A listener adapter for batch listeners.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class DelegatingInvocableHandler extends Object; // Delegates to an InvocableHandlerMethod based on the message payload type.\npublic class HandlerAdapter extends Object; // A wrapper for either an InvocableHandlerMethod or DelegatingInvocableHandler.\npublic final class InvocationResult extends Object; // The result of a listener method invocation.\npublic class KotlinAwareInvocableHandlerMethod extends org.springframework.messaging.handler.invocation.InvocableHandlerMethod; // An InvocableHandlerMethod extension for supporting Kotlin suspend function.\npublic class MessageListenerAdapter extends AbstractAdaptableMessageListener; // Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion.\npublic class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener; // A MessageListener adapter that invokes a configurable HandlerAdapter.\npublic class ReplyFailureException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the reply of a message failed to be sent.\n@FunctionalInterface public interface ReplyingMessageListener<T,R>; // A Message Listener that returns a reply - intended for lambda use in a MessageListenerAdapter.\npublic interface ReplyPostProcessor extends BiFunction<org.springframework.amqp.core.Message,org.springframework.amqp.core.Message,org.springframework.amqp.core.Message>; // A post processor for replies.\n", "des": "Provides classes for adapting listeners."}
{"index": 992, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: server\n\nClasses and Interfaces: \nInterface RequestCreator; // Creates request messages.\nInterface ResponseActions; // Allows for setting up expectation about response messages.\nInterface ResponseMatcher; // Defines the contract for matching response messages to expectations.\nInterface ResponseXPathExpectations; // Allows for setting up expectations on XPath expressions.\nClass MockWebServiceClient; // Main entry point for server-side Web service testing.\nClass RequestCreators; // Factory methods for RequestCreator classes.\nClass ResponseMatchers; // Factory methods for ResponseMatcher classes.\n", "des": "Provides a testing framework for server-side Web service testing."}
{"index": 3257, "repo": "opencms-core-15.0", "code": "Package: as400\n\nClasses and Interfaces: \nClass CmsHistoryDriver; // AS400 implementation of the history driver methods.\nClass CmsProjectDriver; // AS400 implementation of the project driver methods.\nClass CmsSqlManager; // AS400 implementation of the SQL Manager.\nClass CmsSubscriptionDriver; // AS/400 implementation of the subscription driver.\nClass CmsUserDriver; // AS400 implementation of the user driver methods.\nClass CmsVfsDriver; // AS400 implementation of the VFS driver methods.\n", "des": "AS400 implementation of the OpenCms database connector."}
{"index": 271, "repo": "nutch-2.4", "code": "Package: lang\n\nClasses and Interfaces: \nClass HTMLLanguageParser; // Adds metadata identifying language of document if found We could also run statistical analysis here but we'd miss all other formats\nClass LanguageIndexingFilter; // An IndexingFilter that adds a lang (language) field to the document.\n", "des": "Text document language identifier."}
{"index": 2840, "repo": "spring-integration-core-6.1.2", "code": "Package: acks\n\nClasses and Interfaces: \n@FunctionalInterface public interface AcknowledgmentCallback extends SimpleAcknowledgment; // A general abstraction over acknowledgments.\npublic static enum AcknowledgmentCallback.Status extends Enum<AcknowledgmentCallback.Status>;\n@FunctionalInterface public interface AcknowledgmentCallbackFactory<T>; // A factory for creating AcknowledgmentCallbacks.\npublic final class AckUtils extends Object; // Utility methods for acting on AcknowledgmentCallback headers.\n@FunctionalInterface public interface SimpleAcknowledgment; // Opaque object for manually acknowledging.\n", "des": "Provides classes related to message acknowledgment."}
{"index": 3831, "repo": "lucene-highlighter-9.7.0", "code": "Package: uhighlight\n\nClasses and Interfaces: \nInterface CharArrayMatcher; // Matches a character array\nInterface LabelledCharArrayMatcher; // Associates a label with a CharArrayMatcher to distinguish different sources for terms in highlighting\nClass AnalysisOffsetStrategy; // Provides a base class for analysis based offset strategies to extend from.\nClass CustomSeparatorBreakIterator; // A BreakIterator that breaks the text whenever a certain separator, provided as a constructor argument, is found.\nClass DefaultPassageFormatter; // Creates a formatted snippet from the top passages.\nClass FieldHighlighter; // Internal highlighter abstraction that operates on a per field basis.\nClass FieldOffsetStrategy; // Ultimately returns an OffsetsEnum yielding potentially highlightable words in the text.\nClass LengthGoalBreakIterator; // Wraps another BreakIterator to skip past breaks that would result in passages that are too short.\nClass MemoryIndexOffsetStrategy; // Uses an Analyzer on content to get offsets and then populates a MemoryIndex.\nClass NoOpOffsetStrategy; // Never returns offsets.\nClass OffsetsEnum; // An enumeration/iterator of a term and its offsets for use by FieldHighlighter.\nClass OffsetsEnum.MultiOffsetsEnum; // A view over several OffsetsEnum instances, merging them in-place\nClass OffsetsEnum.OfMatchesIterator; // Based on a MatchesIterator; does not look at submatches.\nClass OffsetsEnum.OfMatchesIteratorWithSubs; // Based on a MatchesIterator with submatches.\nClass OffsetsEnum.OfPostings; // Based on a PostingsEnum -- the typical/standard OE impl.\nClass OverlaySingleDocTermsLeafReader; // Overlays a 2nd LeafReader for the terms of one field, otherwise the primary reader is consulted.\nClass Passage; // Represents a passage (typically a sentence of the document).\nClass PassageFormatter; // Creates a formatted snippet from the top passages.\nClass PassageScorer; // Ranks passages found by UnifiedHighlighter.\nClass PhraseHelper; // Helps the FieldOffsetStrategy with position sensitive queries (e.g.\nClass PostingsOffsetStrategy; // Uses offsets in postings -- IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS.\n", "des": "The UnifiedHighlighter -- a flexible highlighter that can get offsets from postings, term vectors, or analysis."}
{"index": 3436, "repo": "hibernate-core-5.6.15.Final", "code": "Package: reflection\n\nClasses and Interfaces: \nInterface AttributeConverterDefinitionCollector;\nClass ClassLoaderAccessLazyImpl; // A ClassLoaderAccess implementation based on lazy access to MetadataBuildingOptions\nClass PersistentAttributeFilter;\n", "des": "Defines the capability to merge mapping information from both annotations and orm.xml sources into a unified set of metadata in the Hibernate commons-annotations model."}
{"index": 3650, "repo": "solr-core-9.3.0", "code": "Package: snapshots\n\nClasses and Interfaces: \nClass CollectionSnapshotMetaData; // This class defines the meta-data about a collection level snapshot\nClass CollectionSnapshotMetaData.CoreSnapshotMetaData;\nClass SolrSnapshotManager; // This class provides functionality required to handle the data files corresponding to Solr snapshots.\nClass SolrSnapshotMetaDataManager; // This class is responsible to manage the persistent snapshots meta-data for the Solr indexes.\nClass SolrSnapshotMetaDataManager.SnapshotMetaData; // A class defining the meta-data for a specific snapshot.\nEnum CollectionSnapshotMetaData.SnapshotStatus;\n", "des": "Core classes for Solr's persistent snapshots functionality"}
{"index": 3623, "repo": "solr-test-framework-9.3.0", "code": "Package: search\n\nClasses and Interfaces: \nClass FooQParserPlugin;\n", "des": "Mock classes for testing search."}
{"index": 2429, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: condition\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target({METHOD,TYPE}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.endpoint.condition.OnAvailableEndpointCondition.class) public @interface ConditionalOnAvailableEndpoint; // @Conditional that checks whether an endpoint is available.\n", "des": "Actuator endpoint auto-configuration conditions."}
{"index": 178, "repo": "ignite-core-2.15.0", "code": "Package: session\n\nClasses and Interfaces: \nClass GridTaskSessionProcessor;\n", "des": "Session processing package to guarantee reuse of same session object on the same node."}
{"index": 694, "repo": "jackson-databind-2.15.2", "code": "Package: ser\n\nSub Packages: \npackage ser.impl; // Contains implementation classes of serialization part of data binding.\n\nClasses and Interfaces: \nInterface BeanPropertyFilter; // Since 2.3: use PropertyFilter instead.\nInterface ContextualSerializer; // Add-on interface that JsonSerializers can implement to get a callback that can be used to create contextual instances of serializer to use for handling properties of supported type.\nInterface PropertyFilter; // Interface that defines API for filter objects use (as configured using JsonFilter) for filtering bean properties to serialize.\nInterface ResolvableSerializer; // Interface used to indicate serializers that want to do post-processing after construction and being added to SerializerProvider, but before being used.\nInterface Serializers; // Interface that defines API for simple extensions that can provide additional serializers for various types.\nClass AnyGetterWriter; // Class similar to BeanPropertyWriter, but that will be used for serializing JsonAnyGetter annotated (Map) properties\nClass BasicSerializerFactory; // Factory class that can provide serializers for standard JDK classes, as well as custom classes that extend standard classes or implement one of \"well-known\" interfaces (such as Collection).\nClass BeanPropertyWriter; // Base bean property handler class, which implements common parts of reflection-based functionality for accessing a property value and serializing it.\nClass BeanSerializer; // Serializer class that can serialize Java objects that map to JSON Object output.\nClass BeanSerializerBuilder; // Builder class used for aggregating deserialization information about a POJO, in order to build a JsonSerializer for serializing intances.\nClass BeanSerializerFactory; // Factory class that can provide serializers for any regular Java beans (as defined by \"having at least one get method recognizable as bean accessor\" -- where Object.getClass() does not count); as well as for \"standard\" JDK types.\nClass BeanSerializerModifier; // Abstract class that defines API for objects that can be registered (for BeanSerializerFactory to participate in constructing BeanSerializer instances.\nClass ContainerSerializer<T>; // Intermediate base class for serializers used for serializing types that contain element(s) of other types, such as arrays, Collections (Lists, Sets etc) and Maps and iterable things (Iterators).\nClass DefaultSerializerProvider; // Standard implementation used by ObjectMapper: adds methods only exposed to ObjectMapper, as well as constructors.\n", "des": "Contains implementation classes of serialization part of data binding."}
{"index": 3835, "repo": "lucene-core-9.7.0", "code": "Package: tokenattributes\n\nClasses and Interfaces: \nInterface BytesTermAttribute; // This attribute can be used if you have the raw term bytes to be indexed.\nInterface CharTermAttribute; // The term text of a Token.\nInterface FlagsAttribute; // This attribute can be used to pass different flags down the Tokenizer chain, e.g.\nInterface KeywordAttribute; // This attribute can be used to mark a token as a keyword.\nInterface OffsetAttribute; // The start and end character offset of a Token.\nInterface PayloadAttribute; // The payload of a Token.\nInterface PositionIncrementAttribute; // Determines the position of this token relative to the previous Token in a TokenStream, used in phrase searching.\nInterface PositionLengthAttribute; // Determines how many positions this token spans.\nInterface SentenceAttribute; // This attribute tracks what sentence a given token belongs to as well as potentially other sentence specific attributes.\nInterface TermFrequencyAttribute; // Sets the custom term frequency of a term within one document.\nInterface TermToBytesRefAttribute; // This attribute is requested by TermsHashPerField to index the contents.\nInterface TypeAttribute; // A Token's lexical type.\nClass BytesTermAttributeImpl; // Implementation class for BytesTermAttribute.\nClass CharTermAttributeImpl; // Default implementation of CharTermAttribute.\nClass FlagsAttributeImpl; // Default implementation of FlagsAttribute.\nClass KeywordAttributeImpl; // Default implementation of KeywordAttribute.\nClass OffsetAttributeImpl; // Default implementation of OffsetAttribute.\nClass PackedTokenAttributeImpl; // Default implementation of the common attributes used by Lucene: CharTermAttribute TypeAttribute PositionIncrementAttribute PositionLengthAttribute OffsetAttribute TermFrequencyAttribute\nClass PayloadAttributeImpl; // Default implementation of PayloadAttribute.\nClass PositionIncrementAttributeImpl; // Default implementation of PositionIncrementAttribute.\nClass PositionLengthAttributeImpl; // Default implementation of PositionLengthAttribute.\nClass SentenceAttributeImpl; // Default implementation of SentenceAttribute.\nClass TermFrequencyAttributeImpl; // Default implementation of TermFrequencyAttribute.\nClass TypeAttributeImpl; // Default implementation of TypeAttribute.\n", "des": "General-purpose attributes for text analysis."}
{"index": 1077, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: collections\n\nClasses and Interfaces: \nInterface EconomicMap<K,V>; // Memory efficient map data structure.\nInterface EconomicSet<E>; // Memory efficient set data structure.\nInterface MapCursor<K,V>; // Cursor to iterate over a mutable map.\nInterface UnmodifiableEconomicMap<K,V>; // Unmodifiable memory efficient map data structure.\nInterface UnmodifiableEconomicSet<E>; // Unmodifiable memory efficient set data structure.\nInterface UnmodifiableMapCursor<K,V>; // Cursor to iterate over a map without changing its contents.\nClass Equivalence; // Strategy for comparing two objects.\nClass Pair<L,R>; // Utility class representing a pair of values.\n", "des": "The Graal-SDK collections package contains memory efficient data structures."}
{"index": 2528, "repo": "spring-security-core-6.1.2", "code": "Package: jaas\n\nSub Packages: \npackage jaas.event; // JAAS authentication events which can be published to the Spring application context by the JAAS authentication provider.\npackage jaas.memory; // An in memory JAAS implementation.\n\nClasses and Interfaces: \npublic abstract class AbstractJaasAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationListener<SessionDestroyedEvent>; // An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration.\npublic interface AuthorityGranter; // The AuthorityGranter interface is used to map a given principal to role names.\npublic class DefaultJaasAuthenticationProvider extends AbstractJaasAuthenticationProvider; // Creates a LoginContext using the Configuration provided to it.\npublic class DefaultLoginExceptionResolver extends Object implements LoginExceptionResolver; // This LoginExceptionResolver simply wraps the LoginException with an AuthenticationServiceException.\npublic interface JaasAuthenticationCallbackHandler; // The JaasAuthenticationCallbackHandler is similar to the javax.security.auth.callback.CallbackHandler interface in that it defines a handle method.\npublic class JaasAuthenticationProvider extends AbstractJaasAuthenticationProvider; // An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration.\npublic class JaasAuthenticationToken extends UsernamePasswordAuthenticationToken; // UsernamePasswordAuthenticationToken extension to carry the Jaas LoginContext that the user was logged into\npublic final class JaasGrantedAuthority extends Object implements GrantedAuthority; // GrantedAuthority which, in addition to the assigned role, holds the principal that an AuthorityGranter used as a reason to grant this authority.\npublic class JaasNameCallbackHandler extends Object implements JaasAuthenticationCallbackHandler; // The most basic Callbacks to be handled when using a LoginContext from JAAS, are the NameCallback and PasswordCallback.\npublic class JaasPasswordCallbackHandler extends Object implements JaasAuthenticationCallbackHandler; // The most basic Callbacks to be handled when using a LoginContext from JAAS, are the NameCallback and PasswordCallback.\npublic interface LoginExceptionResolver; // The JaasAuthenticationProvider takes an instance of LoginExceptionResolver to resolve LoginModule specific exceptions to Spring Security AuthenticationExceptions.\n", "des": "An authentication provider for JAAS."}
{"index": 2834, "repo": "spring-data-r2dbc-3.1.2", "code": "Package: repository\n\nSub Packages: \npackage repository.config; // Support infrastructure for the configuration of R2DBC-specific repositories.\npackage repository.query; // Query support for R2DBC repositories.\npackage repository.support; // Support infrastructure for query derivation of R2DBC-specific repositories.\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying; // Indicates a query method should be considered a modifying query that returns nothing or the number of rows affected by the query.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface Query; // Annotation to provide SQL statements that will get used for executing the method.\n@NoRepositoryBean public interface R2dbcRepository<T,ID> extends ReactiveCrudRepository<T,ID>, ReactiveSortingRepository<T,ID>, ReactiveQueryByExampleExecutor<T>; // R2DBC specific Repository interface with reactive support.\n", "des": "R2DBC-specific repository implementation."}
{"index": 518, "repo": "commons-vfs2-2.9.0", "code": "Package: ftp\n\nClasses and Interfaces: \nInterface FtpClient; // What VFS expects from an FTP client to provide.\nClass FtpClientFactory; // Create a FtpClient instance.\nClass FtpClientFactory.ConnectionFactory<C extends org.apache.commons.net.ftp.FTPClient,B extends FtpFileSystemConfigBuilder>; // Abstract Factory, used to configure different FTPClients.\nClass FtpClientFactory.FtpConnectionFactory; // Connection Factory, used to configure the FTPClient.\nClass FTPClientWrapper; // A wrapper to the FTPClient to allow automatic reconnect on connection loss.\nClass FtpFileNameParser; // Implementation for FTP.\nClass FtpFileObject; // An FTP file.\nClass FtpFileProvider; // A provider for FTP file systems.\nClass FtpFileSystem; // An FTP file system.\nClass FtpFileSystemConfigBuilder; // The config builder for various FTP configuration options.\nEnum FtpFileType; // The FTP file types.\n", "des": "The FTP File Provider."}
{"index": 176, "repo": "ignite-core-2.15.0", "code": "Package: schedule\n\nClasses and Interfaces: \nClass IgniteNoopScheduleProcessor; // No-op implementation of IgniteScheduleProcessorAdapter, throws exception on usage attempt.\nClass IgniteScheduleProcessorAdapter; // Schedules cron-based execution of grid tasks and closures.\n", "des": "TODO."}
{"index": 3226, "repo": "commons-configuration2-2.9.0", "code": "Package: tree\n\nSub Packages: \npackage tree.xpath; // This package contains the XPathExpressionEngine class which enables XPATH support for querying configuration properties.\n\nClasses and Interfaces: \nInterface ConfigurationNodeVisitor<T>; // Definition of a Visitor interface for a configuration node structure.\nInterface ExpressionEngine; // Definition of an interface for evaluating keys for hierarchical configurations.\nInterface InMemoryNodeModelSupport; // A specialized version of the NodeModelSupport interface which allows querying an InMemoryNodeModel.\nInterface NodeHandler<T>; // Definition of an interface for accessing the data of a configuration node.\nInterface NodeKeyResolver<T>; // Definition of an interface which allows resolving a (property) key for different manipulating operations.\nInterface NodeMatcher<C>; // An interface for matching nodes based on specific criteria.\nInterface NodeModel<T>; // Definition of an interface describing a model based on a nodes structure.\nInterface NodeModelSupport<T>; // An interface to be implemented by objects that support a NodeModel.\nInterface ReferenceNodeHandler; // An extension of the NodeHandler interface which allows access to so-called references stored for a node.\nClass ConfigurationNodeVisitorAdapter<T>; // A simple adapter class that simplifies writing custom node visitor implementations.\nClass DefaultConfigurationKey; // A simple class that supports creation of and iteration on configuration keys supported by a DefaultExpressionEngine object.\nClass DefaultExpressionEngine; // A default implementation of the ExpressionEngine interface providing the \"native\" expression language for hierarchical configurations.\nClass DefaultExpressionEngineSymbols; // A class representing the various symbols that are supported in keys recognized by DefaultExpressionEngine.\nClass DefaultExpressionEngineSymbols.Builder; // A builder class for creating instances of DefaultExpressionEngineSymbols.\nClass ImmutableNode; // An immutable default implementation for configuration nodes.\nClass ImmutableNode.Builder; // A builder class for creating instances of ImmutableNode.\nClass InMemoryNodeModel; // A specialized node model implementation which operates on ImmutableNode structures.\nClass MergeCombiner; // A specialized implementation of the NodeCombiner interface that performs a merge from two passed in node hierarchies.\nClass NodeAddData<T>; // A simple data class used by ExpressionEngine to store the results of the prepareAdd() operation.\nClass NodeCombiner; // A base class for node combiner implementations.\n", "des": "A package with helper and utility classes used by hierarchical configurations."}
{"index": 2294, "repo": "spring-boot-3.1.1", "code": "Package: annotation\n\nClasses and Interfaces: \npublic abstract class Configurations extends Object; // A set of @Configuration classes that can be registered in ApplicationContext.\n@FunctionalInterface public interface DeterminableImports; // Interface that can be implemented by ImportSelector and ImportBeanDefinitionRegistrar implementations when they can determine imports early.\npublic final class ImportCandidates extends Object implements Iterable<String>; // Contains @Configuration import candidates, usually auto-configurations.\npublic class UserConfigurations extends Configurations implements org.springframework.core.PriorityOrdered; // Configurations representing user-defined @Configuration classes (i.e.\n", "des": "Classes related to Spring's ApplicationContext annotations."}
{"index": 3252, "repo": "opencms-core-15.0", "code": "Package: rpc\n\nClasses and Interfaces: \nInterface I_CmsSitemapService; // Handles all RPC services related to the sitemap.\nInterface I_CmsSitemapServiceAsync; // Handles all RPC services related to the sitemap.\n", "des": "Shared RPC interfaces."}
{"index": 1190, "repo": "commons-math3-3.6.1", "code": "Package: gradient\n\nClasses and Interfaces: \nInterface Preconditioner; // This interface represents a preconditioner for differentiable scalar objective function optimizers.\nClass NonLinearConjugateGradientOptimizer; // Non-linear conjugate gradient optimizer.\nClass NonLinearConjugateGradientOptimizer.BracketingStep; // As of v3.3, this class is not used anymore.\nClass NonLinearConjugateGradientOptimizer.IdentityPreconditioner; // Default identity preconditioner.\nEnum NonLinearConjugateGradientOptimizer.Formula; // Available choices of update formulas for the updating the parameter that is used to compute the successive conjugate search directions.\n", "des": "This package provides optimization algorithms that require derivatives."}
{"index": 2810, "repo": "spring-integration-ip-6.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic abstract class IpIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "ApplicationEvents generated by the ip module."}
{"index": 459, "repo": "camel-core-3.0.0-RC1", "code": "Package: impl\n\nSub Packages: \npackage impl.cluster; // Base classes and implementation for Camel Cluster\n\nClasses and Interfaces: \nClass AbstractModelCamelContext; // Represents the context used to configure routes and the policies to use.\nClass DefaultCamelContext; // Represents the context used to configure routes and the policies to use.\nClass DefaultExecutorServiceManager; // Default ExecutorServiceManager.\nClass DefaultModel;\nClass DefaultModelJAXBContextFactory; // Default implementation of ModelJAXBContextFactory.\nClass JndiRegistry; // use JndiBeanRepository instead.\nClass RouteIdFactory; // Factory for generating route ids based on uris.\nClass RouteService; // Represents the runtime objects for a given RouteDefinition so that it can be stopped independently of other routes\n", "des": "Default implementation classes for Camel Core"}
{"index": 1990, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: web\n\nSub Packages: \npackage web.client; // Auto-configuration for web clients.\npackage web.embedded; // Configuration for embedded reactive and servlet web servers.\npackage web.format; // Support classes for web-specific formatting.\npackage web.reactive; // Auto-configuration for reactive web servers and Spring WebFlux.\npackage web.servlet; // Auto-configuration for servlet web servers and Spring MVC.\n\nClasses and Interfaces: \n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.web.OnEnabledResourceChainCondition.class) public @interface ConditionalOnEnabledResourceChain; // @Conditional that checks whether the Spring resource handling chain is enabled.\npublic class ErrorProperties extends Object; // Configuration properties for web error handling.\npublic static enum ErrorProperties.IncludeAttribute extends Enum<ErrorProperties.IncludeAttribute>; // Include error attributes options.\npublic static enum ErrorProperties.IncludeStacktrace extends Enum<ErrorProperties.IncludeStacktrace>; // Include Stacktrace attribute options.\npublic static class ErrorProperties.Whitelabel extends Object;\n@ConfigurationProperties(prefix=\"server\", ignoreUnknownFields=true) public class ServerProperties extends Object; // @ConfigurationProperties for a web server (e.g.\npublic static enum ServerProperties.ForwardHeadersStrategy extends Enum<ServerProperties.ForwardHeadersStrategy>; // Strategies for supporting forward headers.\npublic static class ServerProperties.Jetty extends Object; // Jetty properties.\npublic static class ServerProperties.Jetty.Accesslog extends Object; // Jetty access log properties.\npublic static enum ServerProperties.Jetty.Accesslog.FORMAT extends Enum<ServerProperties.Jetty.Accesslog.FORMAT>; // Log format for Jetty access logs.\npublic static class ServerProperties.Jetty.Threads extends Object; // Jetty thread properties.\npublic static class ServerProperties.Netty extends Object; // Netty properties.\npublic static class ServerProperties.Reactive extends Object; // Reactive server properties.\npublic static class ServerProperties.Reactive.Session extends Object;\npublic static class ServerProperties.Servlet extends Object; // Servlet server properties.\npublic static class ServerProperties.Tomcat extends Object; // Tomcat properties.\n", "des": "Auto-configuration for common web concerns."}
{"index": 1809, "repo": "spring-aop-6.0.11", "code": "Package: scope\n\nClasses and Interfaces: \npublic class DefaultScopedObject extends Object implements ScopedObject, Serializable; // Default implementation of the ScopedObject interface.\npublic interface ScopedObject extends RawTargetAccess; // An AOP introduction interface for scoped objects.\npublic class ScopedProxyFactoryBean extends ProxyConfig implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanFactoryAware, AopInfrastructureBean; // Convenient proxy factory bean for scoped objects.\npublic abstract class ScopedProxyUtils extends Object; // Utility class for creating a scoped proxy.\n", "des": "Support for AOP-based scoping of target objects, with configurable backend."}
{"index": 11, "repo": "connect-api-3.5.0", "code": "Package: transforms\n\nSub Packages: \npackage transforms.predicates; // Provides a pluggable interface for describing when a Transformation should be applied to a record.\n\nClasses and Interfaces: \nInterface Transformation<R extends ConnectRecord<R>>; // Single message transformation for Kafka Connect record types.\n", "des": "Provides a pluggable interface for altering data which is being moved by Connect."}
{"index": 143, "repo": "ignite-core-2.15.0", "code": "Package: eventstorage\n\nClasses and Interfaces: \nInterface DiscoveryEventListener; // Internal listener for discovery events.\nInterface GridLocalEventListener; // Listener for asynchronous local node grid events.\nInterface HighPriorityListener; // Marker interface for listeners called before 'regular' listeners.\nClass GridEventStorageManager; // Grid event storage SPI manager.\nClass GridEventStorageMessage; // Event storage message.\n", "des": "TODO."}
{"index": 2967, "repo": "pulsar-broker-3.0.0", "code": "Package: protocol\n\nClasses and Interfaces: \n@LimitedPrivate @Evolving public interface ProtocolHandler extends AutoCloseable; // The protocol handler interface for support additional protocols on Pulsar brokers.\npublic class ProtocolHandlerDefinition extends Object; // Metadata information about a Pulsar protocol handler.\npublic class ProtocolHandlers extends Object implements AutoCloseable; // A collection of loaded handlers.\n", "des": "Pulsar broker protocol handlers."}
{"index": 2817, "repo": "spring-orm-6.0.11", "code": "Package: hibernate5\n\nSub Packages: \npackage hibernate5.support; // Classes supporting the org.springframework.orm.hibernate5 package.\n\nClasses and Interfaces: \n@FunctionalInterface public interface HibernateCallback<T>; // Callback interface for Hibernate code.\npublic class HibernateExceptionTranslator extends Object implements org.springframework.dao.support.PersistenceExceptionTranslator; // PersistenceExceptionTranslator capable of translating HibernateException instances to Spring's DataAccessException hierarchy.\npublic class HibernateJdbcException extends org.springframework.dao.UncategorizedDataAccessException; // Hibernate-specific subclass of UncategorizedDataAccessException, for JDBC exceptions that Hibernate wrapped.\npublic class HibernateObjectRetrievalFailureException extends ObjectRetrievalFailureException; // Hibernate-specific subclass of ObjectRetrievalFailureException.\npublic interface HibernateOperations; // Interface that specifies a common set of Hibernate operations as well as a general HibernateOperations.execute(org.springframework.orm.hibernate5.HibernateCallback<T>) method for Session-based lambda expressions.\npublic class HibernateOptimisticLockingFailureException extends ObjectOptimisticLockingFailureException; // Hibernate-specific subclass of ObjectOptimisticLockingFailureException.\npublic class HibernateQueryException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Hibernate-specific subclass of InvalidDataAccessResourceUsageException, thrown on invalid HQL query syntax.\npublic class HibernateSystemException extends org.springframework.dao.UncategorizedDataAccessException; // Hibernate-specific subclass of UncategorizedDataAccessException, for Hibernate system errors that do not match any concrete org.springframework.dao exceptions.\npublic class HibernateTemplate extends Object implements HibernateOperations, org.springframework.beans.factory.InitializingBean; // Helper class that simplifies Hibernate data access code.\npublic class HibernateTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single Hibernate SessionFactory.\n", "des": "Package providing integration of Hibernate 5.x with Spring concepts."}
{"index": 413, "repo": "hadoop-azure-3.3.6", "code": "Package: azure\n\nSub Packages: \npackage azure.metrics; // Infrastructure for a Metrics2 source that provides information on Windows Azure Filesystem for Hadoop instances.\n\nClasses and Interfaces: \nInterface AzureFileSystemThreadTask; // Interface for executing the file operation by a thread.\nInterface KeyProvider; // The interface that every Azure file system key provider must implement.\nInterface SASKeyGeneratorInterface; // Iterface used by AzureNativeFileSysteStore to retrieve SAS Keys for the respective azure storage entity.\nInterface WasbAuthorizerInterface; // Interface to implement authorization support in WASB.\nClass AzureLinkedStack<E>; // A simple generic stack implementation using linked lists.\nClass AzureNativeFileSystemStore; // Core implementation of Windows Azure Filesystem for Hadoop.\nClass BlockBlobAppendStream; // Stream object that implements append for Block Blobs in WASB.\nClass CachingAuthorizer<K,V>; // Class that provides caching for Authorize and getSasUri calls\nClass LocalSASKeyGeneratorImpl; // Local SAS Key Generation implementation.\nClass NativeAzureFileSystem; // A FileSystem for reading and writing files stored on Windows Azure.\nClass NativeAzureFileSystem.FolderRenamePending; // A description of a folder rename operation, including the source and destination keys, and descriptions of the files in the source folder.\nClass NativeAzureFileSystem.Secure; // A FileSystem for reading and writing files stored on Windows Azure.\nClass RemoteSASKeyGeneratorImpl; // Class implementing a RemoteSASKeyGenerator.\nClass RemoteWasbAuthorizerImpl; // Class implementing WasbAuthorizerInterface using a remote service that implements the authorization operation.\nClass SASKeyGeneratorImpl; // Abstract base class for the SAS Key Generator implementation\nClass SecureStorageInterfaceImpl; // An implementation of the StorageInterface for SAS Key mode.\nClass SecureWasbRemoteCallHelper; // Helper class the has constants and helper methods used in WASB when integrating with a remote http cred service which uses Kerberos and delegation tokens.\nClass SelfRenewingLease; // An Azure blob lease that automatically renews itself indefinitely using a background thread.\nClass SelfThrottlingIntercept; // Introduces delays in our Azure traffic to prevent overrunning the server-side throttling limits.\n", "des": "A distributed implementation of FileSystem for reading and writing files on Azure Block Storage."}
{"index": 3602, "repo": "lucene-queries-9.7.0", "code": "Package: function\n\nSub Packages: \npackage function.docvalues; // FunctionValues for different data types.\npackage function.valuesource; // A variety of functions to use with FunctionQuery.\n\nClasses and Interfaces: \nClass FunctionMatchQuery; // A query that retrieves all documents with a DoubleValues value matching a predicate\nClass FunctionQuery; // Returns a score for each document based on a ValueSource, often some function of the value of a field.\nClass FunctionRangeQuery; // A Query wrapping a ValueSource that matches docs in which the values in the value source match a configured range.\nClass FunctionScoreQuery; // A query that wraps another query, and uses a DoubleValuesSource to replace or modify the wrapped query's score\nClass FunctionValues; // Represents field values as different types.\nClass FunctionValues.ValueFiller; // Abstraction of the logic required to fill the value of a specified doc into a reusable MutableValue.\nClass IndexReaderFunctions; // Class exposing static helper methods for generating DoubleValuesSource instances over some IndexReader statistics\nClass ValueSource; // Instantiates FunctionValues for a particular reader.\nClass ValueSourceScorer; // Scorer which returns the result of FunctionValues.floatVal(int) as the score for a document, and which filters out documents that don't match ValueSourceScorer.matches(int).\n", "des": "Queries that compute score based upon a function."}
{"index": 1435, "repo": "spring-boot-actuator-3.1.1", "code": "Package: system\n\nClasses and Interfaces: \npublic class DiskSpaceHealthIndicator extends AbstractHealthIndicator; // A HealthIndicator that checks available disk space and reports a status of Status.DOWN when it drops below a configurable threshold.\n", "des": "Actuator support for system-related concerns."}
{"index": 2456, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: atlas\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.atlas.AtlasMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"atlas\") @EnableConfigurationProperties(AtlasProperties.class) public class AtlasMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Atlas.\n@ConfigurationProperties(prefix=\"management.atlas.metrics.export\") public class AtlasProperties extends Object; // @ConfigurationProperties for configuring Atlas metrics export.\n", "des": "Support for exporting actuator metrics to Atlas."}
{"index": 2935, "repo": "groovy-4.0.13", "code": "Package: metaclass\n\nClasses and Interfaces: \npublic final class ClosureMetaClass extends MetaClassImpl; // A metaclass for closures generated by the Groovy compiler.\npublic class ClosureMetaMethod extends MetaMethod implements ClosureInvokingMethod; // A MetaMethod that accepts a closure in the constructor which is invoked when the MetaMethod is called.\npublic class ClosureStaticMetaMethod extends MetaMethod implements ClosureInvokingMethod; // This class represents a MetaMethod that is a closure that pretends to be a static method.\npublic class ConcurrentReaderHashMap extends AbstractMap implements Cloneable, Serializable; // A hash table that supports mostly-concurrent reading, but exclusive writing.\nprotected static class ConcurrentReaderHashMap.BarrierLock extends Object implements Serializable; // A Serializable class for barrier lock\nprotected static class ConcurrentReaderHashMap.Entry extends Object implements Map.Entry; // ConcurrentReaderHashMap collision list entry.\npublic class DefaultMetaClassInfo extends Object; // WARNING: This class is for internal use only! We use this class to store information about if a default MetaClass is used for certain primitives.\npublic static class DefaultMetaClassInfo.ConstantMetaClassVersioning extends Object;\npublic class MetaClassRegistryImpl extends Object implements MetaClassRegistry; // A registry of MetaClass instances which caches introspection and reflection information and allows methods to be dynamically added to existing classes at runtime\npublic class MetaMethodIndex extends Object;\npublic static class MetaMethodIndex.CacheEntry extends Object;\npublic static class MetaMethodIndex.Entry extends Object;\npublic static interface MetaMethodIndex.EntryIterator;\npublic static class MetaMethodIndex.Header extends Object;\npublic class MethodHelper extends Object; // Some reflection helper methods\npublic class MethodMetaProperty extends MetaProperty; // Wrapper for a method for a property get or set.\npublic static class MethodMetaProperty.GetBeanMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property getter.\npublic static class MethodMetaProperty.GetMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property get.\npublic class MethodSelectionException extends GroovyRuntimeException; // This exception is thrown if the runtime is unable to select a method.\npublic class MissingMethodExceptionNoStack extends MissingMethodException;\npublic class MissingMethodExecutionFailed extends MissingMethodExceptionNoStack; // A stack less exception used to indicate, that the execution of a missingMethod method failed with a MissingMethodException.\n", "des": "Internal classes related to Groovy's metaclass implementation."}
{"index": 1013, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: transform\n\nClasses and Interfaces: \nInterface TraxUtils.ResultCallback; // Callback interface invoked on each sort of Result.\nInterface TraxUtils.SourceCallback; // Callback interface invoked on each sort of Source.\nClass ResourceSource; // Convenient subclass of SAXSource that reads from a Spring Resource.\nClass StringResult; // Convenient subclass of StreamResult that writes to a StringWriter.\nClass StringSource; // Convenient subclass of StreamSource that reads from a StringReader.\nClass TransformerFactoryUtils;\nClass TransformerHelper; // Helper class for Transformer usage.\nClass TransformerObjectSupport; // Convenient base class for objects that use a Transformer.\nClass TraxUtils; // Convenient utility methods for dealing with TrAX.\n", "des": "Provides classes that help with XML transformations."}
{"index": 3246, "repo": "opencms-core-15.0", "code": "Package: shared\n\nClasses and Interfaces: \nInterface I_CmsBinaryPreviewProvider; // Constants interface for binary resource preview.\nInterface I_CmsGalleryConfiguration; // The gallery configuration interface.\nInterface I_CmsGalleryProviderConstants; // Shared constants interface.\nInterface I_CmsGalleryTreeEntry<T>; // Common interface for accessing sitemap/VFS entry beans as tree nodes.\nInterface I_CmsImagePreviewProvider; // Constants interface for binary resource preview.\nClass CmsGalleryActionInfo; // Represents information about whether a gallery folder should use a custom upload action.\nClass CmsGalleryConfiguration; // The gallery configuration.\nClass CmsGalleryDataBean; // This bean holding the gallery dialog information required for displaying the content of the gallery tabs.\nClass CmsGalleryFolderBean; // Represents a gallery folder.\nClass CmsGallerySearchBean; // This bean represents the current search object.\nClass CmsGalleryTabConfiguration; // A bean containing a configuration for the gallery dialog's available tabs, consisting of a list of tabs and a default tab to display first.\nClass CmsGalleryTreeEntry; // Gallery tree entry class.\nClass CmsImageInfoBean; // Bean holding image info to be display in the resource preview dialog.\nClass CmsPoint; // A point in 2D space.\nClass CmsResourceInfoBean; // This bean contains the preview content for the selected item.\nClass CmsResourceTypeBean; // Bean representing resource type information.\nClass CmsResultItemBean; // A specific bean holding all info to be displayed in org.opencms.ade.galleries.client.ui.CmsResultListItems.\nClass CmsSitemapEntryBean; // A sitemap entry bean.\nClass CmsSiteSelectorOption; // Bean class which represents an option for the site selector in the gallery dialog.\nClass CmsVfsEntryBean; // Represents a single VFS resource entry for use by the VFS tab of the galleries.\nEnum CmsGallerySearchScope; // An enum that represents the possible search scope choices in the ADE gallery search tab.\nEnum CmsResourceTypeBean.Origin; // Enum for data source from which resource type bean was constructed.\nEnum CmsResourceTypeBean.TypeVisibility; // Enum representing the visibility of a resource type in the bean.\nEnum CmsSiteSelectorOption.Type; // Enum for indicating the site type.\nEnum I_CmsGalleryProviderConstants.GalleryMode; // Gallery mode constants.\n", "des": "Contains the shared client/server side gallery dialog classes."}
{"index": 2512, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \n@Controller public class ManagementErrorEndpoint extends Object; // @Controller for handling \"/error\" path when the management servlet is in a child context.\n@FunctionalInterface public interface ManagementServletContext; // Provides information about the management servlet context for MVC controllers to use.\n@AutoConfiguration @ConditionalOnClass(jakarta.servlet.Servlet.class) @ConditionalOnWebApplication(type=SERVLET) public class ServletManagementContextAutoConfiguration extends Object; // Auto-configuration for Servlet-specific management context concerns.\n@Configuration(proxyBeanMethods=false) @ConditionalOnProperty(prefix=\"management.server\", name=\"add-application-context-header\", havingValue=\"true\") protected static class ServletManagementContextAutoConfiguration.ApplicationContextFilterConfiguration extends Object;\n", "des": "Actuator Spring MVC support."}
{"index": 2285, "repo": "jcl-over-slf4j-2.0.7", "code": "Package: logging\n\nSub Packages: \npackage logging.impl; // SLF4J based implementation of commons-logging wrapper APIs.\n\nClasses and Interfaces: \npublic interface Log; // A simple logging interface abstracting logging APIs.\npublic class LogConfigurationException extends RuntimeException; // An exception that is thrown only if a suitable LogFactory or Log instance cannot be created by the corresponding factory methods.\npublic abstract class LogFactory extends Object; // Factory for creating Log instances, which always delegates to an instance of SLF4JLogFactory.\n", "des": "Jakarta Commons Logging implemented over SLF4J."}
{"index": 2434, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass({org.springframework.web.reactive.DispatcherHandler.class,org.springframework.http.server.reactive.HttpHandler.class}) @ConditionalOnBean(org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier.class) @EnableConfigurationProperties(CorsEndpointProperties.class) public class WebFluxEndpointManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Reactive @Endpoint concerns.\n", "des": "Auto-configuration for exposing actuator web endpoints using WebFlux."}
{"index": 2775, "repo": "spring-jms-6.0.11", "code": "Package: support\n\nSub Packages: \npackage support.converter; // Provides a MessageConverter abstraction to convert between Java objects and JMS messages.\npackage support.destination; // Support classes for Spring's JMS framework.\n\nClasses and Interfaces: \npublic abstract class JmsAccessor extends Object implements org.springframework.beans.factory.InitializingBean; // Base class for JmsTemplate and other JMS-accessing gateway helpers, defining common properties such as the JMS ConnectionFactory to operate on.\npublic interface JmsHeaderMapper extends org.springframework.messaging.support.HeaderMapper<Message>; // Strategy interface for mapping Message headers to an outbound JMS Message (e.g.\npublic interface JmsHeaders; // Pre-defined names and prefixes to be used for setting and/or retrieving JMS attributes from/to generic message headers.\npublic class JmsMessageHeaderAccessor extends org.springframework.messaging.support.NativeMessageHeaderAccessor; // A MessageHeaderAccessor implementation giving access to JMS-specific headers.\npublic abstract class JmsUtils extends Object; // Generic utility methods for working with JMS.\npublic class QosSettings extends Object; // Gather the Quality-of-Service settings that can be used when sending a message.\npublic class SimpleJmsHeaderMapper extends org.springframework.messaging.support.AbstractHeaderMapper<Message> implements JmsHeaderMapper; // Simple implementation of JmsHeaderMapper.\n", "des": "This package provides generic JMS support classes, to be used by higher-level classes like JmsTemplate."}
{"index": 2306, "repo": "spring-boot-3.1.1", "code": "Package: analyzer\n\nClasses and Interfaces: \npublic abstract class AbstractInjectionFailureAnalyzer<T extends Throwable> extends AbstractFailureAnalyzer<T>; // Abstract base class for a FailureAnalyzer that handles some kind of injection failure.\npublic class BeanNotOfRequiredTypeFailureAnalyzer extends AbstractFailureAnalyzer<org.springframework.beans.factory.BeanNotOfRequiredTypeException>; // An AbstractFailureAnalyzer that performs analysis of failures caused by a BeanNotOfRequiredTypeException.\n", "des": "Internal FailureAnalyzer implementations."}
{"index": 3050, "repo": "spring-ws-core-4.0.5", "code": "Package: ws\n\nSub Packages: \npackage ws.client; // Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access.\npackage ws.config; // Provides an namespace handler for the Spring Web Services namespace.\npackage ws.context; // Contains the MessageContext interface and implementations thereof.\npackage ws.mime; // Provides MIME functionality for use the Spring Web Services framework.\npackage ws.pox; // Provides the Plain Old XML (POX) functionality of the Spring Web Services framework.\npackage ws.server; // Contains classes for server-side Spring-WS support.\npackage ws.soap; // Provides the SOAP functionality of the Spring Web Services framework.\npackage ws.support; // Provides general helper classes for Spring Web Services.\npackage ws.transport; // Contains the TransportRequest and TransportResponse interfaces.\npackage ws.wsdl; // Provides the WSDL functionality of the Spring Web Services framework.\n\nClasses and Interfaces: \npublic interface FaultAwareWebServiceMessage extends WebServiceMessage; // Sub-interface of WebServiceMessage that can contain special Fault messages.\npublic final class InvalidXmlException extends WebServiceException; // Exception thrown when a WebServiceMessageFactory cannot parse the XML passed on to WebServiceMessageFactory.createWebServiceMessage(java.io.InputStream).\npublic final class NoEndpointFoundException extends WebServiceException; // Exception thrown when an endpoint cannot be resolved for an incoming message request.\npublic abstract class WebServiceException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of Web Service exceptions.\npublic interface WebServiceMessage; // Represents a protocol-agnostic XML message.\npublic abstract class WebServiceMessageException extends WebServiceException; // Base class for all web service message exceptions.\npublic interface WebServiceMessageFactory; // The WebServiceMessageFactory serves as a factory for WebServiceMessages.\n", "des": "Provides the core functionality of the Spring Web Services framework."}
{"index": 2516, "repo": "spring-security-core-6.1.2", "code": "Package: expression\n\nSub Packages: \npackage expression.method; // Implementation of expression-based method security.\n\nClasses and Interfaces: \npublic abstract class AbstractSecurityExpressionHandler<T> extends Object implements SecurityExpressionHandler<T>, org.springframework.context.ApplicationContextAware; // Base implementation of the facade which isolates Spring Security's requirements for evaluating security expressions from the implementation of the underlying expression objects.\npublic class DenyAllPermissionEvaluator extends Object implements PermissionEvaluator; // A null PermissionEvaluator which denies all access.\npublic final class ExpressionUtils extends Object;\npublic interface SecurityExpressionHandler<T> extends org.springframework.aop.framework.AopInfrastructureBean; // Facade which isolates Spring Security's requirements for evaluating security expressions from the implementation of the underlying expression objects\npublic interface SecurityExpressionOperations; // Standard interface for expression root objects used with expression-based security.\npublic abstract class SecurityExpressionRoot extends Object implements SecurityExpressionOperations; // Base root object for use in Spring Security expression evaluations.\n", "des": "Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations."}
{"index": 1578, "repo": "spring-security-oauth2-client-6.1.2", "code": "Package: authentication\n\nClasses and Interfaces: \npublic class OAuth2AuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An implementation of an AbstractAuthenticationToken that represents an OAuth 2.0 Authentication.\npublic class OAuth2AuthorizationCodeAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An implementation of an AuthenticationProvider for the OAuth 2.0 Authorization Code Grant.\npublic class OAuth2AuthorizationCodeAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An AbstractAuthenticationToken for the OAuth 2.0 Authorization Code Grant.\npublic class OAuth2AuthorizationCodeReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic class OAuth2LoginAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic class OAuth2LoginAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An AbstractAuthenticationToken for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\npublic class OAuth2LoginReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager; // An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.\n", "des": "Support classes and interfaces for authenticating and authorizing a client with an OAuth 2.0 Authorization Server using a specific authorization grant flow."}
{"index": 705, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: feed\n\nClasses and Interfaces: \nClass Feed; // The Spring Integration Feed components Factory.\nClass FeedEntryMessageSourceSpec; // A MessageSourceSpec for a FeedEntryMessageSource.\n", "des": "Provides Feed Components support for Spring Integration Java DSL."}
{"index": 3110, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: selector\n\nSub Packages: \npackage selector.spi; // Defines actual contract used for strategy selection : StrategySelector.\n\nClasses and Interfaces: \nInterface StrategyRegistration<T>; // Describes the registration of a named strategy implementation.\nInterface StrategyRegistrationProvider; // Responsible for providing the registrations of strategy selector(s).\nClass SimpleStrategyRegistrationImpl<T>; // A simple implementation of StrategyRegistration.\n", "des": "Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations."}
{"index": 9, "repo": "connect-api-3.5.0", "code": "Package: source\n\nClasses and Interfaces: \nInterface SourceConnectorContext; // A context to allow a SourceConnector to interact with the Kafka Connect runtime.\nInterface SourceTaskContext; // SourceTaskContext is provided to SourceTasks to allow them to interact with the underlying runtime.\nInterface TransactionContext; // Provided to source tasks to allow them to define their own producer transaction boundaries when exactly-once support is enabled.\nClass SourceConnector; // SourceConnectors implement the connector interface to pull data from another system and send it to Kafka.\nClass SourceRecord; // SourceRecords are generated by SourceTasks and passed to Kafka Connect for storage in Kafka.\nClass SourceTask; // SourceTask is a Task that pulls records from another system for storage in Kafka.\nEnum ConnectorTransactionBoundaries; // An enum to represent the level of support for connector-defined transaction boundaries.\nEnum ExactlyOnceSupport; // An enum to represent the level of support for exactly-once semantics from a source connector.\nEnum SourceTask.TransactionBoundary; // Represents the permitted values for the SourceTask.TRANSACTION_BOUNDARY_CONFIG property.\n", "des": "Provides an API for implementing source connectors which read data from external applications into Kafka."}
{"index": 1971, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: resource\n\nSub Packages: \npackage resource.reactive; // Auto-configuration for Spring Security's Reactive OAuth2 resource server.\npackage resource.servlet; // Auto-configuration for Spring Security's OAuth2 resource server.\n\nClasses and Interfaces: \npublic class IssuerUriCondition extends SpringBootCondition; // Condition for creating JwtDecoder by oidc issuer location.\npublic class KeyValueCondition extends SpringBootCondition; // Condition for creating a jwt decoder using a public key value.\n@ConfigurationProperties(prefix=\"spring.security.oauth2.resourceserver\") public class OAuth2ResourceServerProperties extends Object; // OAuth 2.0 resource server properties.\npublic static class OAuth2ResourceServerProperties.Jwt extends Object;\npublic static class OAuth2ResourceServerProperties.Opaquetoken extends Object;\n", "des": "Support for Spring Security's OAuth2 resource server."}
{"index": 678, "repo": "commons-lang3-3.12.0", "code": "Package: tuple\n\nClasses and Interfaces: \nClass ImmutablePair<L,R>; // An immutable pair consisting of two Object elements.\nClass ImmutableTriple<L,M,R>; // An immutable triple consisting of three Object elements.\nClass MutablePair<L,R>; // A mutable pair consisting of two Object elements.\nClass MutableTriple<L,M,R>; // A mutable triple consisting of three Object elements.\nClass Pair<L,R>; // A pair consisting of two elements.\nClass Triple<L,M,R>; // A triple consisting of three elements.\n", "des": "Tuple classes, starting with a Pair class in version 3.0."}
{"index": 974, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: callback\n\nClasses and Interfaces: \nClass AbstractCallbackHandler; // Abstract implementation of a CallbackHandler.\nClass CallbackHandlerChain; // Represents a chain of CallbackHandlers.\nClass CleanupCallback; // Underlying security services instantiate and pass a CleanupCallback to the handle method of a CallbackHandler to clean up security state.\n", "des": "Contains generic CallbackHandler implementations."}
{"index": 1735, "repo": "spring-jdbc-6.0.11", "code": "Package: incrementer\n\nClasses and Interfaces: \npublic abstract class AbstractColumnMaxValueIncrementer extends AbstractDataFieldMaxValueIncrementer; // Abstract base class for DataFieldMaxValueIncrementer implementations that use a column in a custom sequence table.\npublic abstract class AbstractDataFieldMaxValueIncrementer extends Object implements DataFieldMaxValueIncrementer, org.springframework.beans.factory.InitializingBean; // Base implementation of DataFieldMaxValueIncrementer that delegates to a single AbstractDataFieldMaxValueIncrementer.getNextKey() template method that returns a long.\npublic abstract class AbstractIdentityColumnMaxValueIncrementer extends AbstractColumnMaxValueIncrementer; // Abstract base class for DataFieldMaxValueIncrementer implementations which are based on identity columns in a sequence-like table.\npublic abstract class AbstractSequenceMaxValueIncrementer extends AbstractDataFieldMaxValueIncrementer; // Abstract base class for DataFieldMaxValueIncrementer implementations that use a database sequence.\npublic interface DataFieldMaxValueIncrementer; // Interface that defines contract of incrementing any data store field's maximum value.\npublic class Db2LuwMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given sequence on DB2 LUW (for Linux, Unix and Windows).\npublic class Db2MainframeMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given sequence on DB2 for the mainframe (z/OS, DB2/390, DB2/400).\npublic class DerbyMaxValueIncrementer extends AbstractIdentityColumnMaxValueIncrementer; // DataFieldMaxValueIncrementer that increments the maximum value of a given Derby table with the equivalent of an auto-increment column.\npublic class H2SequenceMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given H2 sequence.\npublic class HanaSequenceMaxValueIncrementer extends AbstractSequenceMaxValueIncrementer; // DataFieldMaxValueIncrementer that retrieves the next value of a given SAP HANA sequence.\npublic class HsqlMaxValueIncrementer extends AbstractIdentityColumnMaxValueIncrementer; // DataFieldMaxValueIncrementer that increments the maximum value of a given HSQL table with the equivalent of an auto-increment column.\n", "des": "Provides a support framework for incrementing database table values via sequences, with implementations for various databases."}
{"index": 2813, "repo": "spring-integration-ip-6.1.2", "code": "Package: serializer\n\nClasses and Interfaces: \npublic abstract class AbstractByteArraySerializer extends Object implements org.springframework.core.serializer.Serializer<byte[]>, org.springframework.core.serializer.Deserializer<byte[]>, org.springframework.context.ApplicationEventPublisherAware; // Base class for (de)serializers that provide a mechanism to reconstruct a byte array from an arbitrary stream.\npublic abstract class AbstractPooledBufferByteArraySerializer extends AbstractByteArraySerializer; // Base class for deserializers that cannot determine the buffer size needed.\npublic class ByteArrayCrLfSerializer extends AbstractPooledBufferByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be terminated by \\r\\n (not included in resulting byte[]).\npublic class ByteArrayElasticRawDeserializer extends Object implements org.springframework.core.serializer.Deserializer<byte[]>; // A deserializer that uses a ByteArrayOutputStream instead of a fixed buffer, allowing the buffer to grow as needed.\npublic class ByteArrayLengthHeaderSerializer extends AbstractByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be preceded by a binary length (network byte order, not included in resulting byte[]).\npublic class ByteArrayLfSerializer extends ByteArraySingleTerminatorSerializer;\npublic class ByteArrayRawSerializer extends AbstractPooledBufferByteArraySerializer; // A byte array (de)serializer that does nothing with the payload; sends it raw.\npublic class ByteArraySingleTerminatorSerializer extends AbstractPooledBufferByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be terminated by a single byte (not included in resulting byte[]).\npublic class ByteArrayStxEtxSerializer extends AbstractPooledBufferByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be prefixed by <stx> and terminated by <etx> (not included in resulting byte[]).\npublic class MapJsonSerializer extends Object implements org.springframework.core.serializer.Serializer<Map<?,?>>, org.springframework.core.serializer.Deserializer<Map<?,?>>; // Serializes a Map as JSON.\npublic class SoftEndOfStreamException extends RuntimeException; // Used to communicate that a stream has closed, but between logical messages.\npublic final class TcpCodecs extends Object; // Factory class to create TCP Serializer/Deserializers used to encode/decode messages to/from a TCP stream.\n", "des": "Byte array (de)serializers for putting some protocol on the wire so that incoming messages can be constructed from stream data."}
{"index": 3231, "repo": "commons-release-plugin-1.8.1", "code": "Package: velocity\n\nClasses and Interfaces: \nClass HeaderHtmlVelocityDelegate; // This class' purpose is to generate the HEADER.html that moves along with the release for the sake of downloading the release from the distribution area.\nClass HeaderHtmlVelocityDelegate.HeaderHtmlVelocityDelegateBuilder; // A builder class for instantiation of the HeaderHtmlVelocityDelegate.\nClass ReadmeHtmlVelocityDelegate; // This class' purpose is to generate the README.html that moves along with the release for the sake of downloading the release from the distribution area.\nClass ReadmeHtmlVelocityDelegate.ReadmeHtmlVelocityDelegateBuilder; // A builder class for instantiation of the ReadmeHtmlVelocityDelegate.\n", "des": "Contains classes that take our velocity templates and render's them to a Writer class."}
{"index": 2972, "repo": "pulsar-broker-3.0.0", "code": "Package: metadata\n\nClasses and Interfaces: \npublic class AbortTxnMetadata extends Object; // Abort txn metadata.\npublic class TransactionBufferSnapshot extends Object; // Transaction buffer snapshot metadata.\n", "des": "The transaction buffer snapshot metadata."}
{"index": 341, "repo": "hadoop-hdfs-3.3.6", "code": "Package: protocolPB\n\nClasses and Interfaces: \nClass DatanodeProtocolServerSideTranslatorPB;\nClass NamenodeProtocolServerSideTranslatorPB; // Implementation for protobuf service that forwards requests received on NamenodeProtocolPB to the NamenodeProtocol server implementation.\nClass PBHelper; // Utilities for converting protobuf classes to and from implementation classes and other helper utilities to help in dealing with protobuf.\nClass ReconfigurationProtocolServerSideTranslatorPB; // This class is used on the server side.\nClass ReconfigurationProtocolServerSideUtils; // This is a server side utility class that handles common logic to to parameter reconfiguration.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3789, "repo": "lucene-analysis-common-9.7.0", "code": "Package: hi\n\nClasses and Interfaces: \nClass HindiAnalyzer; // Analyzer for Hindi.\nClass HindiNormalizationFilter; // A TokenFilter that applies HindiNormalizer to normalize the orthography.\nClass HindiNormalizationFilterFactory; // Factory for HindiNormalizationFilter.\nClass HindiNormalizer; // Normalizer for Hindi.\nClass HindiStemFilter; // A TokenFilter that applies HindiStemmer to stem Hindi words.\nClass HindiStemFilterFactory; // Factory for HindiStemFilter.\nClass HindiStemmer; // Light Stemmer for Hindi.\n", "des": "Analyzer for Hindi."}
{"index": 2399, "repo": "spring-batch-core-5.0.2", "code": "Package: repository\n\nSub Packages: \npackage repository.dao; // Specific implementations of dao concerns.\npackage repository.support; // Specific implementations of repository concerns.\n\nClasses and Interfaces: \npublic interface ExecutionContextSerializer extends org.springframework.core.serializer.Serializer<Map<String,Object>>, org.springframework.core.serializer.Deserializer<Map<String,Object>>; // A composite interface that combines both serialization and deserialization of an execution context into a single implementation.\npublic class JobExecutionAlreadyRunningException extends JobExecutionException;\npublic class JobInstanceAlreadyCompleteException extends JobExecutionException; // An exception indicating an illegal attempt to restart a job that was already completed successfully.\npublic interface JobRepository; // Repository responsible for persistence of batch meta-data entities.\npublic class JobRestartException extends JobExecutionException; // An exception indicating an illegal attempt to restart a job.\n", "des": "Interfaces and generic implementations of repository concerns."}
{"index": 3300, "repo": "opencms-core-15.0", "code": "Package: notification\n\nClasses and Interfaces: \nClass A_CmsNotification; // Abstract class to create a notfication which will be send as a html mail to a user in OpenCms.\nClass CmsContentNotification; // The E-Mail to be written to responsibles of resources.\nClass CmsContentNotificationJob; // Scheduled job that checks the system for resources that will shortly expire, be released, or will be outdated.\nClass CmsExtendedNotificationCause; // Class to encapsulate a resource and the cause of its notification.\nClass CmsNotificationCandidates; // The basic class for the content notification feature in OpenCms.\nClass CmsNotificationCause; // Objects of this class are serialized in the additional infos of a user to store, which resources were already confirmed by the user.\nClass CmsNotificationMacroResolver; // MacroResolver for Notifications.\nClass CmsPublishNotification; // Class to send a notification to an OpenCms user with a summary of warnings and errors occurred while publishing the project.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains classes for the automatical notification of outdated, expiring or released content."}
{"index": 96, "repo": "ignite-core-2.15.0", "code": "Package: sharedfs\n\nClasses and Interfaces: \nClass TcpDiscoverySharedFsIpFinder; // Shared filesystem-based IP finder.\n", "des": "Contains shared filesystem-based IP finder."}
{"index": 1967, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: security\n\nSub Packages: \npackage security.reactive; // Auto-configuration for reactive Spring Security.\npackage security.rsocket; // Auto-configuration for RSocket support in Spring Security.\npackage security.saml2; // Auto-configuration for Spring Security's SAML 2.0.\npackage security.servlet; // Auto-configuration for Servlet-based Spring Security.\n\nClasses and Interfaces: \n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Conditional(org.springframework.boot.autoconfigure.security.DefaultWebSecurityCondition.class) public @interface ConditionalOnDefaultWebSecurity; // @Conditional that only matches when web security is available and the user has not defined their own configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.security.data.repository.query.SecurityEvaluationContextExtension.class) public class SecurityDataConfiguration extends Object; // Automatically adds Spring Security's integration with Spring Data.\n@ConfigurationProperties(prefix=\"spring.security\") public class SecurityProperties extends Object; // Configuration properties for Spring Security.\npublic static class SecurityProperties.Filter extends Object;\npublic static class SecurityProperties.User extends Object;\npublic enum StaticResourceLocation extends Enum<StaticResourceLocation>; // Common locations for static resources.\n", "des": "Auto-configuration for Spring Security."}
{"index": 1419, "repo": "spring-boot-actuator-3.1.1", "code": "Package: r2dbc\n\nClasses and Interfaces: \npublic class ConnectionPoolMetrics extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder for a ConnectionPool.\n", "des": "Actuator support for R2DBC metrics."}
{"index": 2643, "repo": "spring-data-cassandra-4.1.2", "code": "Package: cassandra\n\nSub Packages: \npackage cassandra.config; // Spring Data Cassandra factory beans and configuration.\npackage cassandra.core; // Apache Cassandra core support.\npackage cassandra.observability; // Infrastructure to provide driver observability using Micrometer.\npackage cassandra.repository; // Apache Cassandra specific repository implementation.\npackage cassandra.util; // Map and SpEL utility infrastructure.\n\nClasses and Interfaces: \npublic class CassandraAuthenticationException extends PermissionDeniedDataAccessException; // Spring data access exception for a Cassandra authentication failure.\npublic class CassandraConnectionFailureException extends DataAccessResourceFailureException; // Spring data access exception for Cassandra when no host is available.\npublic class CassandraInsufficientReplicasAvailableException extends TransientDataAccessException; // Spring data access exception for Cassandra when insufficient replicas are available for a given consistency level.\npublic class CassandraInternalException extends DataAccessException; // Spring data access exception for a Cassandra internal error.\npublic class CassandraInvalidConfigurationInQueryException extends InvalidDataAccessApiUsageException; // Spring data access exception for a Cassandra query that is syntactically correct but has an invalid configuration clause.\npublic class CassandraInvalidQueryException extends InvalidDataAccessApiUsageException; // Spring data access exception for a Cassandra query that's syntactically correct but invalid.\npublic class CassandraKeyspaceExistsException extends CassandraSchemaElementExistsException; // Spring data access exception for Cassandra when a keyspace being created already exists.\npublic final class CassandraManagedTypes extends Object implements ManagedTypes; // Cassandra-specific extension to ManagedTypes.\npublic class CassandraQuerySyntaxException extends InvalidDataAccessApiUsageException; // Spring data access exception for a Cassandra query syntax error.\npublic class CassandraReadTimeoutException extends QueryTimeoutException; // Cassandra-specific exception for a server-side timeout during a read query.\npublic class CassandraSchemaElementExistsException extends NonTransientDataAccessException; // Spring data access exception for when Cassandra schema element being created already exists.\n@Deprecated public static enum CassandraSchemaElementExistsException.ElementType extends Enum<CassandraSchemaElementExistsException.ElementType>;\npublic class CassandraTableExistsException extends CassandraSchemaElementExistsException; // Spring data access exception for when a Cassandra table being created already exists.\npublic class CassandraTraceRetrievalException extends TransientDataAccessException; // Spring data access exception for a Cassandra trace retrieval exception.\npublic class CassandraTruncateException extends TransientDataAccessException; // Spring data access exception for a Cassandra truncate exception.\n", "des": "Spring Data's Cassandra abstraction."}
{"index": 2791, "repo": "shiro-spring-2.0.0-alpha-2", "code": "Package: remoting\n\nClasses and Interfaces: \npublic class SecureRemoteInvocationExecutor extends org.springframework.remoting.support.DefaultRemoteInvocationExecutor; // An implementation of the Spring RemoteInvocationExecutor that binds a sessionId to the incoming thread to make it available to the SecurityManager implementation during the thread execution.\npublic class SecureRemoteInvocationFactory extends org.springframework.remoting.support.DefaultRemoteInvocationFactory; // A RemoteInvocationFactory that passes the session ID to the server via a RemoteInvocation attribute.\n", "des": "Support to enable Spring-based remote method invocations to carry a Shiro session ID as part of the invocation payload, allowing remote clients to perform security operations."}
{"index": 49, "repo": "ignite-core-2.15.0", "code": "Package: eviction\n\nSub Packages: \npackage eviction.fifo; // Contains cache FIFO eviction policy implementations.\npackage eviction.lru; // Contains cache LRU eviction policy implementations.\npackage eviction.sorted; // Contains cache sorted eviction policy implementation.\n\nClasses and Interfaces: \nInterface EvictableEntry<K,V>; // Evictable cache entry passed into EvictionPolicy.\nInterface EvictionFilter<K,V>; // Eviction filter to specify which entries should not be evicted.\nInterface EvictionPolicy<K,V>; // Pluggable cache eviction policy.\nClass AbstractEvictionPolicy<K,V>; // Common functionality implementation for eviction policies with max size/max memory and batch eviction support.\nClass AbstractEvictionPolicyFactory<T>; // Common functionality implementation for eviction policies factories.\n", "des": "Contains cache eviction policy implementations."}
{"index": 3834, "repo": "lucene-core-9.7.0", "code": "Package: standard\n\nClasses and Interfaces: \nClass StandardAnalyzer; // Filters StandardTokenizer with LowerCaseFilter and StopFilter, using a configurable list of stop words.\nClass StandardTokenizer; // A grammar-based tokenizer constructed with JFlex.\nClass StandardTokenizerFactory; // Factory for StandardTokenizer.\nClass StandardTokenizerImpl; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29.\n", "des": "Fast, general-purpose grammar-based tokenizer StandardTokenizer implements the Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29."}
{"index": 1766, "repo": "spring-data-mongodb-4.1.2", "code": "Package: monitor\n\nClasses and Interfaces: \npublic abstract class AbstractMonitor extends Object; // Base class to encapsulate common configuration settings when connecting to a database\n@ManagedResource(description=\"Assertion Metrics\") public class AssertMetrics extends AbstractMonitor; // JMX Metrics for assertions\n@ManagedResource(description=\"Background Flushing Metrics\") public class BackgroundFlushingMetrics extends AbstractMonitor; // JMX Metrics for Background Flushing\n@ManagedResource(description=\"Btree Metrics\") public class BtreeIndexCounters extends AbstractMonitor; // JMX Metrics for B-tree index counters\n@ManagedResource(description=\"Connection metrics\") public class ConnectionMetrics extends AbstractMonitor; // JMX Metrics for Connections\n@ManagedResource(description=\"Global Lock Metrics\") public class GlobalLockMetrics extends AbstractMonitor; // JMX Metrics for Global Locks\n@ManagedResource(description=\"Memory Metrics\") public class MemoryMetrics extends AbstractMonitor; // JMX Metrics for Memory\n@ManagedResource(description=\"Operation Counters\") public class OperationCounters extends AbstractMonitor; // JMX Metrics for Operation counters\n@ManagedResource(description=\"Server Information\") public class ServerInfo extends AbstractMonitor; // Expose basic server information via JMX\n", "des": "MongoDB specific JMX monitoring support."}
{"index": 1777, "repo": "slf4j-api-2.0.7", "code": "Package: helpers\n\nClasses and Interfaces: \npublic abstract class AbstractLogger extends Object implements Logger, Serializable; // An abstract implementation which delegates actual logging work to the AbstractLogger.handleNormalizedLoggingCall(Level, Marker, String, Object[], Throwable) method.\npublic class BasicMarker extends Object implements Marker; // A simple implementation of the Marker interface.\npublic class BasicMarkerFactory extends Object implements IMarkerFactory; // An almost trivial implementation of the IMarkerFactory interface which creates BasicMarker instances.\npublic class BasicMDCAdapter extends Object implements MDCAdapter; // Basic MDC implementation, which can be used with logging systems that lack out-of-the-box MDC support.\n@Documented @Target(METHOD) @Retention(RUNTIME) public @interface CheckReturnValue; // Used to annotate methods in the LoggingEventBuilder interface which return an instance of LoggingEventBuilder (usually as this).\npublic class FormattingTuple extends Object; // Holds the results of formatting done by MessageFormatter.\npublic abstract class LegacyAbstractLogger extends AbstractLogger; // Provides minimal default implementations for LegacyAbstractLogger.isTraceEnabled(Marker), LegacyAbstractLogger.isDebugEnabled(Marker) and other similar methods.\npublic abstract class MarkerIgnoringBase extends Object implements Logger;\npublic final class MessageFormatter extends Object; // Formats messages according to very simple substitution rules.\npublic class NOP_FallbackServiceProvider extends Object implements SLF4JServiceProvider;\npublic class NOPLogger extends Object implements Logger; // A direct NOP (no operation) implementation of Logger.\npublic class NOPLoggerFactory extends Object implements ILoggerFactory; // NOPLoggerFactory is a trivial implementation of ILoggerFactory which always returns the unique instance of NOPLogger.\npublic class NOPMDCAdapter extends Object implements MDCAdapter; // This adapter is an empty implementation of the MDCAdapter interface.\npublic class NormalizedParameters extends Object; // Holds normalized call parameters.\npublic class SubstituteLogger extends Object implements Logger; // A logger implementation which logs via a delegate logger.\npublic class SubstituteLoggerFactory extends Object implements ILoggerFactory; // SubstituteLoggerFactory manages instances of SubstituteLogger.\npublic class SubstituteServiceProvider extends Object implements SLF4JServiceProvider;\npublic class ThreadLocalMapOfStacks extends Object; // A simple implementation of ThreadLocal backed Map containing values of type Deque.\n", "des": "Helper classes."}
{"index": 700, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: amqp\n\nClasses and Interfaces: \nClass Amqp; // Factory class for AMQP components.\nClass AmqpAsyncOutboundGatewaySpec;\nClass AmqpBaseInboundChannelAdapterSpec<S extends AmqpBaseInboundChannelAdapterSpec<S>>; // The base MessageProducerSpec implementation for a AmqpInboundChannelAdapter.\nClass AmqpBaseInboundGatewaySpec<S extends AmqpBaseInboundGatewaySpec<S>>; // A base MessagingGatewaySpec implementation for AmqpInboundGateway endpoint options.\nClass AmqpBaseOutboundEndpointSpec<S extends AmqpBaseOutboundEndpointSpec<S,E>,E extends org.springframework.integration.amqp.outbound.AbstractAmqpOutboundEndpoint>; // The base MessageHandlerSpec for AbstractAmqpOutboundEndpoints.\nClass AmqpInboundChannelAdapterSpec; // A MessageProducerSpec for AmqpInboundChannelAdapters.\nClass AmqpInboundGatewaySpec; // An AmqpBaseInboundGatewaySpec implementation for a AmqpInboundGateway.\nClass AmqpMessageChannelSpec<S extends AmqpMessageChannelSpec<S>>; // An AmqpPollableMessageChannelSpec for a message-driven PointToPointSubscribableAmqpChannel.\nClass AmqpOutboundEndpointSpec;\nClass AmqpPollableMessageChannelSpec<S extends AmqpPollableMessageChannelSpec<S>>; // A MessageChannelSpec for a AbstractAmqpChannels.\nClass AmqpPublishSubscribeMessageChannelSpec; // A AmqpMessageChannelSpec for PublishSubscribeAmqpChannels.\n", "des": "Provides AMQP Components support for Spring Integration Java DSL."}
{"index": 3400, "repo": "commons-imaging-1.0-alpha3", "code": "Package: pcx\n\nClasses and Interfaces: \nClass PcxConstants;\nClass PcxImageParser;\nClass PcxImagingParameters; // Parameters used by the Pcx format.\n", "des": "The PCX image format."}
{"index": 1986, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: thymeleaf\n\nClasses and Interfaces: \n@AutoConfiguration(after={WebMvcAutoConfiguration.class,WebFluxAutoConfiguration.class}) @EnableConfigurationProperties(ThymeleafProperties.class) @ConditionalOnClass({org.thymeleaf.templatemode.TemplateMode.class,org.thymeleaf.spring6.SpringTemplateEngine.class}) @Import({org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations.ReactiveTemplateEngineConfiguration.class,org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations.DefaultTemplateEngineConfiguration.class}) public class ThymeleafAutoConfiguration extends Object; // Auto-configuration for Thymeleaf.\n@ConfigurationProperties(prefix=\"spring.thymeleaf\") public class ThymeleafProperties extends Object; // Properties for Thymeleaf.\npublic static class ThymeleafProperties.Reactive extends Object;\npublic static class ThymeleafProperties.Servlet extends Object;\npublic class ThymeleafTemplateAvailabilityProvider extends Object implements TemplateAvailabilityProvider; // TemplateAvailabilityProvider that provides availability information for Thymeleaf view templates.\n", "des": "Auto-configuration for Thymeleaf."}
{"index": 1973, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \n@FunctionalInterface public interface JwkSetUriJwtDecoderBuilderCustomizer; // Callback interface for the customization of the NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder used to create the auto-configured JwtDecoder for a JWK set URI that has been configured directly or obtained through an issuer URI.\n@AutoConfiguration(before={SecurityAutoConfiguration.class,UserDetailsServiceAutoConfiguration.class}) @EnableConfigurationProperties(OAuth2ResourceServerProperties.class) @ConditionalOnClass(org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthenticationToken.class) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.Oauth2ResourceServerConfiguration.JwtConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.Oauth2ResourceServerConfiguration.OpaqueTokenConfiguration.class}) public class OAuth2ResourceServerAutoConfiguration extends Object; // Auto-configuration for OAuth2 resource server support.\n", "des": "Auto-configuration for Spring Security's OAuth2 resource server."}
{"index": 383, "repo": "mahout-core-14.1", "code": "Package: stat\n\nClasses and Interfaces: \nClass Gamma; // Partially deprecated until unit tests are in place.\nClass Probability; // Partially deprecated until unit tests are in place.\n", "des": "Tools for basic and advanced statistics: Estimators, Gamma functions, Beta functions, Probabilities, Special integrals, etc."}
{"index": 1367, "repo": "wicket-devutils-10.0.0-M1", "code": "Package: inspector\n\nClasses and Interfaces: \npublic final class ApplicationView extends DevUtilsPanel; // A Wicket panel that shows interesting information about a given Wicket session.\npublic final class EnhancedPageView extends org.apache.wicket.markup.html.panel.GenericPanel<org.apache.wicket.Page>; // Enhanced PageView which displays all Components and Behaviors of a Page in a TableTree representation.\npublic final class InspectorPage extends DevUtilsPage; // A page that shows interesting attributes of the Wicket environment, including the current session and the component tree for the current page.\npublic class LiveSessionsPage extends DevUtilsPage;\npublic class RenderPerformanceListener extends Object implements org.apache.wicket.application.IComponentInstantiationListener; // A listener that adds a special Behavior that measures the time needed by a component to render itself.\npublic class RequestsPage extends DevUtilsPage;\npublic class SessionSizeModel extends Object implements org.apache.wicket.model.IModel<org.apache.wicket.util.lang.Bytes>; // Calculates\npublic final class SessionView extends DevUtilsPanel; // A Wicket panel that shows interesting information about a given Wicket session.\n", "des": "Classes that make debugging Wicket HTML applications easier."}
{"index": 272, "repo": "nutch-2.4", "code": "Package: collection\n\nClasses and Interfaces: \nClass CollectionManager;\nClass Subcollection; // SubCollection represents a subset of index, you can define url patterns that will indicate that particular page (url) is part of SubCollection.\n", "des": "Subcollection is a subset of an index."}
{"index": 3584, "repo": "lucene-test-framework-9.7.0", "code": "Package: compressing\n\nSub Packages: \npackage compressing.dummy; // Dummy CompressingCodec implementation used for testing.\n\nClasses and Interfaces: \nClass CompressingCodec; // A codec that uses Lucene90CompressingStoredFieldsFormat for its stored fields and delegates to the default codec for everything else.\nClass DeflateWithPresetCompressingCodec; // CompressionCodec that uses DeflateWithPresetDictCompressionMode.\nClass FastCompressingCodec; // CompressionCodec that uses CompressionMode.FAST\nClass FastDecompressionCompressingCodec; // CompressionCodec that uses CompressionMode.FAST_DECOMPRESSION\nClass HighCompressionCompressingCodec; // CompressionCodec that uses CompressionMode.HIGH_COMPRESSION\nClass LZ4WithPresetCompressingCodec; // CompressionCodec that uses LZ4WithPresetDictCompressionMode.\n", "des": "Support for testing Lucene90CompressingStoredFieldsFormat."}
{"index": 2754, "repo": "spring-beans-6.0.11", "code": "Package: factory\n\nSub Packages: \npackage factory.annotation; // Support package for annotation-driven bean configuration.\npackage factory.aot; // AOT support for bean factories.\npackage factory.config; // SPI interfaces and configuration-related convenience classes for bean factories.\npackage factory.groovy; // Support package for Groovy-based bean definitions.\npackage factory.parsing; // Support infrastructure for bean definition parsing.\npackage factory.serviceloader; // Support package for the Java ServiceLoader facility.\npackage factory.support; // Classes supporting the org.springframework.beans.factory package.\npackage factory.wiring; // Mechanism to determine bean wiring metadata from a bean instance.\npackage factory.xml; // Contains an abstract XML-based BeanFactory implementation, including a standard \"spring-beans\" XSD.\n\nClasses and Interfaces: \npublic interface Aware; // A marker superinterface indicating that a bean is eligible to be notified by the Spring container of a particular framework object through a callback-style method.\npublic interface BeanClassLoaderAware extends Aware; // Callback that allows a bean to be aware of the bean class loader; that is, the class loader used by the present bean factory to load bean classes.\npublic class BeanCreationException extends FatalBeanException; // Exception thrown when a BeanFactory encounters an error when attempting to create a bean from a bean definition.\npublic class BeanCreationNotAllowedException extends BeanCreationException; // Exception thrown in case of a bean being requested despite bean creation currently not being allowed (for example, during the shutdown phase of a bean factory).\npublic class BeanCurrentlyInCreationException extends BeanCreationException; // Exception thrown in case of a reference to a bean that's currently in creation.\npublic class BeanDefinitionStoreException extends FatalBeanException; // Exception thrown when a BeanFactory encounters an invalid bean definition: e.g.\npublic class BeanExpressionException extends FatalBeanException; // Exception that indicates an expression evaluation attempt having failed.\npublic interface BeanFactory; // The root interface for accessing a Spring bean container.\npublic interface BeanFactoryAware extends Aware; // Interface to be implemented by beans that wish to be aware of their owning BeanFactory.\npublic abstract class BeanFactoryUtils extends Object; // Convenience methods operating on bean factories, in particular on the ListableBeanFactory interface.\n", "des": "The core package implementing Spring's lightweight Inversion of Control (IoC) container."}
{"index": 1501, "repo": "spring-context-6.0.11", "code": "Package: cache\n\nSub Packages: \npackage cache.annotation; // Annotations and supporting classes for declarative cache management.\npackage cache.concurrent; // Implementation package for java.util.concurrent based caches.\npackage cache.config; // Support package for declarative caching configuration, with XML schema being the primary configuration format.\npackage cache.interceptor; // AOP-based solution for declarative caching demarcation.\npackage cache.support; // Support classes for the org.springframework.cache package.\n\nClasses and Interfaces: \npublic interface Cache; // Interface that defines common cache operations.\npublic static class Cache.ValueRetrievalException extends RuntimeException; // Wrapper exception to be thrown from Cache.get(Object, Callable) in case of the value loader callback failing with an exception.\n@FunctionalInterface public static interface Cache.ValueWrapper; // A (wrapper) object representing a cache value.\npublic interface CacheManager; // Spring's central cache manager SPI.\n", "des": "Spring's generic cache abstraction."}
{"index": 2618, "repo": "wicket-util-10.0.0-M1", "code": "Package: watch\n\nClasses and Interfaces: \npublic interface IModifiable; // Interface to get the last time something was modified.\npublic interface IModificationWatcher; // Monitors one or more IModifiable objects, calling a IChangeListener when a given object's modification time changes.\npublic class ModificationWatcher extends Object implements IModificationWatcher; // Monitors one or more IModifiable objects, calling a IChangeListener when a given object's modification time changes.\nprotected static final class ModificationWatcher.Entry extends Object; // Container class for holding modifiable entries to watch.\n", "des": "This package provides modification watchers."}
{"index": 576, "repo": "commons-collections-3.2.2", "code": "Package: bidimap\n\nClasses and Interfaces: \nClass AbstractBidiMapDecorator; // Provides a base decorator that enables additional functionality to be added to a BidiMap via decoration.\nClass AbstractDualBidiMap; // Abstract BidiMap implemented using two maps.\nClass AbstractDualBidiMap.BidiMapIterator; // Inner class MapIterator.\nClass AbstractDualBidiMap.EntrySet; // Inner class EntrySet.\nClass AbstractDualBidiMap.EntrySetIterator; // Inner class EntrySetIterator.\nClass AbstractDualBidiMap.KeySet; // Inner class KeySet.\nClass AbstractDualBidiMap.KeySetIterator; // Inner class KeySetIterator.\nClass AbstractDualBidiMap.MapEntry; // Inner class MapEntry.\nClass AbstractDualBidiMap.Values; // Inner class Values.\nClass AbstractDualBidiMap.ValuesIterator; // Inner class ValuesIterator.\nClass AbstractDualBidiMap.View; // Inner class View.\nClass AbstractOrderedBidiMapDecorator; // Provides a base decorator that enables additional functionality to be added to an OrderedBidiMap via decoration.\nClass AbstractSortedBidiMapDecorator; // Provides a base decorator that enables additional functionality to be added to a SortedBidiMap via decoration.\nClass DualHashBidiMap; // Implementation of BidiMap that uses two HashMap instances.\nClass DualTreeBidiMap; // Implementation of BidiMap that uses two TreeMap instances.\nClass DualTreeBidiMap.BidiOrderedMapIterator; // Inner class MapIterator.\nClass DualTreeBidiMap.ViewMap; // Internal sorted map view.\nClass TreeBidiMap; // Red-Black tree-based implementation of BidiMap where all objects added implement the Comparable interface.\nClass UnmodifiableBidiMap; // Decorates another BidiMap to ensure it can't be altered.\nClass UnmodifiableOrderedBidiMap; // Decorates another OrderedBidiMap to ensure it can't be altered.\nClass UnmodifiableSortedBidiMap; // Decorates another SortedBidiMap to ensure it can't be altered.\n", "des": "This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces."}
{"index": 606, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: launch\n\nClasses and Interfaces: \nInterface Framework; // A Framework instance.\nInterface FrameworkFactory; // A factory for creating Framework instances.\n", "des": "Framework Launch Package Version 1.1."}
{"index": 3282, "repo": "opencms-core-15.0", "code": "Package: parse\n\nClasses and Interfaces: \nClass A_CmsConfiguredHtmlParser; // Base class for all classes that are specified for the <cms:parse parserClass=\"name\" param=\"config\" /> tag in the parserClass Attribute.\n", "des": "API classes for the <cms:parse> tag."}
{"index": 1016, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: xsd\n\nSub Packages: \npackage xsd.commons; // Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema.\n\nClasses and Interfaces: \nInterface XsdSchema; // Represents an abstraction for XSD schemas.\nInterface XsdSchemaCollection; // Represents an abstraction for a collection of XSD schemas.\nClass SimpleXsdSchema; // The default XsdSchema implementation.\nClass XsdSchemaException; // Base class for all WSDL definition exceptions.\n", "des": "Provides an abstraction over XSD XML schemas."}
{"index": 2808, "repo": "spring-integration-ip-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic abstract class IpAdapterParserUtils extends Object; // Utility methods and constants for IP adapter parsers.\npublic class IpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's ip namespace.\npublic class TcpConnectionFactoryFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractConnectionFactory> implements org.springframework.context.Lifecycle, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.ApplicationContextAware; // Instantiates a TcpN(et|io)(Server|Client)ConnectionFactory, depending on type and using-nio attributes.\npublic class TcpConnectionFactoryParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\npublic class TcpInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Channel Adapter that receives TCP stream frames and maps them to Messages.\npublic class TcpInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser;\npublic class TcpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\npublic class TcpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <outbound-gateway> element of the integration 'jms' namespace.\npublic class UdpInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Channel Adapter that receives UDP datagram packets and maps them to Messages.\npublic class UdpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 3377, "repo": "opencms-core-15.0", "code": "Package: content\n\nClasses and Interfaces: \nInterface I_CmsXmlContentEditorChangeHandler; // Handles changes during the xml content editor session.\nInterface I_CmsXmlContentHandler; // Handles special XML content livetime events, and also provides XML content editor rendering hints.\nInterface I_CmsXmlContentLocation; // This class represents a location in an XML content for a specific locale.\nInterface I_CmsXmlContentValueLocation; // Interface representing an XML content location which corresponds to an actual content value.\nInterface I_CmsXmlContentValueVisitor; // Visitor interface that allows looping through all the values in a XML content document.\nInterface I_CmsXmlContentVisibilityHandler; // Handles the visibility of fields in the XML content editor.\nClass CmsChangeHandlerConfig; // A configuration bean representing a <ChangeHandler> element configured in an XSD's field settings.\nClass CmsDefaultXmlContentHandler; // Default implementation for the XML content handler, will be used by all XML contents that do not provide their own handler.\nClass CmsDefaultXmlContentHandler.VisibilityConfiguration; // Contains the visibility handler configuration for a content field path.\nClass CmsGeoMappingConfiguration; // Geo-coordinate mapping configuration for an XML content schema.\nClass CmsGeoMappingConfiguration.Entry; // A single configuration entry.\nClass CmsMappingResolutionContext; // A class which represents the context for resolving all content value mappings of an XML content.\nClass CmsNumberSuffixNameSequence; // Name generator which appends a numeric suffix to a given base string.\nClass CmsVersionTransformer; // Provides static methods for XML content version transformations.\nClass CmsVfsBundleLoaderXml; // Loads message bundles from the different locales of a single XML content.\nClass CmsVfsFileValueBean; // A bean class containing both a path and a UUID which should be stored in an XML file value.\nClass CmsXmlContent; // Implementation of a XML content object, used to access and manage structured content.\nClass CmsXmlContentErrorHandler; // Handler for issues found during XML content validation.\nClass CmsXmlContentFactory; // Provides factory methods to unmarshal (read) an XML content object.\nClass CmsXmlContentMacroVisitor; // Visitor implementation that provides macro resolving for all visited values.\nClass CmsXmlContentProperty; // Describes both VFS properties and Container Page Element settings, used by the GWT client.\nClass CmsXmlContentPropertyHelper; // Provides common methods on XML property configuration.\nClass CmsXmlContentRootLocation; // Represents the root of an XML content for a given locale.\n", "des": "Contains functions for structured content storage using XML, commonly called \"XML content\" in OpenCms."}
{"index": 3845, "repo": "lucene-core-9.7.0", "code": "Package: geo\n\nClasses and Interfaces: \nInterface Component2D; // 2D Geometry object that supports spatial relationships with bounding boxes, triangles and points.\nInterface Tessellator.Monitor; // Implementation of this interface will receive calls with internal data at each step of the triangulation algorithm.\nClass Circle; // Represents a circle on the earth's surface.\nClass GeoEncodingUtils; // reusable geopoint encoding methods\nClass GeoEncodingUtils.Component2DPredicate; // A predicate that checks whether a given point is within a component2D geometry.\nClass GeoEncodingUtils.DistancePredicate; // A predicate that checks whether a given point is within a distance of another point.\nClass Geometry; // Base class for LatLonGeometry and XYGeometry\nClass GeoUtils; // Basic reusable geo-spatial utility methods\nClass LatLonGeometry; // Lat/Lon Geometry object.\nClass Line; // Represents a line on the earth's surface.\nClass Point; // Represents a point on the earth's surface.\nClass Polygon; // Represents a closed polygon on the earth's surface.\nClass Rectangle; // Represents a lat/lon rectangle.\nClass SimpleWKTShapeParser; // Parses shape geometry represented in WKT format\nClass Tessellator; // Computes a triangular mesh tessellation for a given polygon.\nClass Tessellator.Node; // Circular Doubly-linked list used for polygon coordinates\nClass Tessellator.Triangle; // Triangle in the tessellated mesh\nClass XYCircle; // Represents a circle on the XY plane.\nClass XYEncodingUtils; // reusable cartesian geometry encoding methods\nClass XYGeometry; // Cartesian Geometry object.\nClass XYLine; // Represents a line in cartesian space.\nClass XYPoint; // Represents a point on the earth's surface.\nClass XYPolygon; // Represents a polygon in cartesian space.\nClass XYRectangle; // Represents a x/y cartesian rectangle.\nEnum Component2D.WithinRelation; // Used by withinTriangle to check the within relationship between a triangle and the query shape (e.g.\nEnum GeoUtils.WindingOrder; // used to define the orientation of 3 points -1 = Clockwise 0 = Colinear 1 = Counter-clockwise\n", "des": "Geospatial Utility Implementations for Lucene Core"}
{"index": 964, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: messageid\n\nClasses and Interfaces: \nInterface MessageIdStrategy; // Strategy interface that encapsulates the creation and validation of WS-Addressing MessageIDs.\nClass UuidMessageIdStrategy; // Implementation of the MessageIdStrategy interface that uses a UUID to generate a Message Id.\n", "des": "Contains various strategies for generating WS-Addressing MessageIDs."}
{"index": 1554, "repo": "spring-context-6.0.11", "code": "Package: validation\n\nSub Packages: \npackage validation.annotation; // Support classes for annotation-based constraint evaluation, e.g.\npackage validation.beanvalidation; // Support classes for integrating a JSR-303 Bean Validation provider (such as Hibernate Validator) into a Spring ApplicationContext and in particular with Spring's data binding and validation APIs.\npackage validation.support; // Support classes for handling validation results.\n\nClasses and Interfaces: \npublic abstract class AbstractBindingResult extends AbstractErrors implements BindingResult, Serializable; // Abstract implementation of the BindingResult interface and its super-interface Errors.\npublic abstract class AbstractErrors extends Object implements Errors, Serializable; // Abstract implementation of the Errors interface.\npublic abstract class AbstractPropertyBindingResult extends AbstractBindingResult; // Abstract base class for BindingResult implementations that work with Spring's PropertyAccessor mechanism.\npublic class BeanPropertyBindingResult extends AbstractPropertyBindingResult implements Serializable; // Default implementation of the Errors and BindingResult interfaces, for the registration and evaluation of binding errors on JavaBean objects.\npublic class BindException extends Exception implements BindingResult; // Thrown when binding errors are considered fatal.\npublic interface BindingErrorProcessor; // Strategy for processing DataBinder's missing field errors, and for translating a PropertyAccessException to a FieldError.\npublic interface BindingResult extends Errors; // General interface that represents binding results.\npublic abstract class BindingResultUtils extends Object; // Convenience methods for looking up BindingResults in a model Map.\npublic class DataBinder extends Object implements org.springframework.beans.PropertyEditorRegistry, org.springframework.beans.TypeConverter; // Binder that allows for setting property values on a target object, including support for validation and binding result analysis.\npublic class DefaultBindingErrorProcessor extends Object implements BindingErrorProcessor; // Default BindingErrorProcessor implementation.\npublic class DefaultMessageCodesResolver extends Object implements MessageCodesResolver, Serializable; // Default implementation of the MessageCodesResolver interface.\npublic static enum DefaultMessageCodesResolver.Format extends Enum<DefaultMessageCodesResolver.Format> implements MessageCodeFormatter; // Common message code formats.\npublic class DirectFieldBindingResult extends AbstractPropertyBindingResult; // Special implementation of the Errors and BindingResult interfaces, supporting registration and evaluation of binding errors on value objects.\npublic interface Errors; // Stores and exposes information about data-binding and validation errors for a specific object.\n", "des": "Provides data binding and validation functionality, for usage in business and/or UI layers."}
{"index": 1172, "repo": "commons-math3-3.6.1", "code": "Package: twod\n\nClasses and Interfaces: \nClass Circle; // This class represents an oriented great circle on the 2-sphere.\nClass Edge; // Spherical polygons boundary edge.\nClass S2Point; // This class represents a point on the 2-sphere.\nClass Sphere2D; // This class implements a two-dimensional sphere (i.e.\nClass SphericalPolygonsSet; // This class represents a region on the 2-sphere: a set of spherical polygons.\nClass SubCircle; // This class represents a sub-hyperplane for Circle.\nClass Vertex; // Spherical polygons boundary vertex.\n", "des": "This package provides basic geometry components on the 2-sphere."}
{"index": 2583, "repo": "spring-rabbit-3.0.6", "code": "Package: rabbit\n\nSub Packages: \npackage rabbit.annotation; // Annotations and supporting classes for declarative Rabbit listener endpoint\npackage rabbit.aot; // Provides classes to support Spring AOT.\npackage rabbit.batch; // Provides classes for message batching.\npackage rabbit.config; // Provides classes supporting the Rabbit XML namespace.\npackage rabbit.connection; // Provides classes related to connections.\npackage rabbit.core; // Provides core classes for Spring Rabbit.\npackage rabbit.listener; // Provides classes for message listener containers.\npackage rabbit.log4j2; // Provides classes supporting Log4j 2 appenders.\npackage rabbit.logback; // Provides classes supporting Logback appenders.\npackage rabbit.retry; // Provides classes supporting retries.\npackage rabbit.support; // Provides support classes for Spring Rabbit.\npackage rabbit.transaction; // Provides classes supporting transactions in Spring Rabbit.\n\nClasses and Interfaces: \npublic class AsyncRabbitTemplate extends Object implements org.springframework.amqp.core.AsyncAmqpTemplate, ChannelAwareMessageListener, RabbitTemplate.ReturnsCallback, RabbitTemplate.ConfirmCallback, org.springframework.beans.factory.BeanNameAware, org.springframework.context.SmartLifecycle; // Provides asynchronous send and receive operations returning a CompletableFuture allowing the caller to obtain the reply later, using get() or a callback.\npublic class RabbitConverterFuture<C> extends RabbitFuture<C>; // A RabbitFuture with a return type of the template's generic parameter.\npublic abstract class RabbitFuture<T> extends CompletableFuture<T>; // Base class for CompletableFutures returned by AsyncRabbitTemplate.\npublic class RabbitMessageFuture extends RabbitFuture<org.springframework.amqp.core.Message>; // A RabbitFuture with a return type of Message.\npublic class TimeoutTask extends Object implements Runnable; // A Runnable used to time out a RabbitFuture.\n", "des": "Provides top-level classes for Spring Rabbit."}
{"index": 2205, "repo": "spring-data-commons-3.1.2", "code": "Package: format\n\nClasses and Interfaces: \npublic enum DistanceFormatter extends Enum<DistanceFormatter> implements Converter<String,Distance>, Formatter<Distance>; // Converter to create Distance instances from String representations.\npublic enum PointFormatter extends Enum<PointFormatter> implements Converter<String,Point>, Formatter<Point>; // Converter to parse two comma-separated doubles into a Point.\n", "des": "Formatters for geo-spatial types."}
{"index": 3034, "repo": "spring-web-6.0.11", "code": "Package: jsf\n\nSub Packages: \npackage jsf.el; // ELResolvers for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext.\n\nClasses and Interfaces: \npublic abstract class DecoratingNavigationHandler extends NavigationHandler; // Base class for JSF NavigationHandler implementations that want to be capable of decorating an original NavigationHandler.\npublic class DelegatingNavigationHandlerProxy extends NavigationHandler; // JSF NavigationHandler implementation that delegates to a NavigationHandler bean obtained from the Spring root WebApplicationContext.\npublic class DelegatingPhaseListenerMulticaster extends Object implements PhaseListener; // JSF PhaseListener implementation that delegates to one or more Spring-managed PhaseListener beans coming from the Spring root WebApplicationContext.\npublic abstract class FacesContextUtils extends Object; // Convenience methods to retrieve Spring's root WebApplicationContext for a given JSF FacesContext.\n", "des": "Support classes for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext."}
{"index": 1753, "repo": "spring-data-mongodb-4.1.2", "code": "Package: encryption\n\nClasses and Interfaces: \npublic interface Encryption<S,T>; // Component responsible for encrypting and decrypting values.\npublic interface EncryptionContext; // Context to encapsulate encryption for a specific MongoPersistentProperty.\npublic interface EncryptionKey; // The EncryptionKey represents a Data Encryption Key reference that can be either direct via the key id or its Key Alternative Name.\npublic static enum EncryptionKey.Type extends Enum<EncryptionKey.Type>; // The key reference type.\n@FunctionalInterface public interface EncryptionKeyResolver; // Interface to obtain a Data Encryption Key that is valid in a given context.\npublic class EncryptionOptions extends Object; // Options, like the EncryptionOptions.algorithm(), to apply when encrypting values.\npublic class MongoClientEncryption extends Object implements Encryption<org.bson.BsonValue,org.bson.BsonBinary>; // ClientEncryption based Encryption implementation.\n", "des": "Infrastructure for explicit encryption mechanism of Client-Side Field Level Encryption."}
{"index": 3646, "repo": "solr-core-9.3.0", "code": "Package: plugins\n\nClasses and Interfaces: \nClass AffinityPlacementConfig; // Configuration bean for AffinityPlacementFactory.\nClass AffinityPlacementFactory; // This factory is instantiated by config from its class name.\nClass MinimizeCoresPlacementFactory; // Factory for creating MinimizeCoresPlacementFactory.MinimizeCoresPlacementPlugin, a Placement plugin implementing placing replicas to minimize number of cores per Node, while not placing two replicas of the same shard on the same node.\nClass OrderedNodePlacementPlugin;\nClass OrderedNodePlacementPlugin.WeightedNode; // A class that determines the weight of a given node and the replicas that reside on it.\nClass RandomPlacementFactory; // Factory for creating RandomPlacementFactory.RandomPlacementPlugin, a placement plugin implementing random placement for new collection creation while preventing two replicas of same shard from being placed on same node..\nClass RandomPlacementFactory.RandomPlacementPlugin;\nClass SimplePlacementFactory; // Factory for creating SimplePlacementFactory.SimplePlacementPlugin, a placement plugin implementing the logic from the old LegacyAssignStrategy.\nClass SimplePlacementFactory.SimplePlacementPlugin;\n", "des": "Sample plugin implementations."}
{"index": 2287, "repo": "spring-boot-3.1.1", "code": "Package: boot\n\nSub Packages: \npackage boot.admin; // Administration support for Spring Boot applications.\npackage boot.ansi; // Support classes to provide ANSI color output.\npackage boot.availability; // Support for describing the availability of Spring Boot applications.\npackage boot.builder; // Fluent 'builder' style API to construct a SpringApplication.\npackage boot.cloud; // Low level support for Cloud deployments.\npackage boot.context; // Classes related to Spring's ApplicationContext.\npackage boot.convert; // Support for type conversion.\npackage boot.diagnostics; // Support for failure analysis and reporting.\npackage boot.env; // Spring Environment support.\npackage boot.info; // Support for providing information about an application.\npackage boot.jackson; // Custom enhancements and support for the Jackson project.\npackage boot.jdbc; // Support for Java Database Connectivity (JDBC).\npackage boot.jms; // Support for Java Message Service (JMS).\npackage boot.json; // Support for parsing JSON.\npackage boot.logging; // Support and abstractions across several logging libraries.\npackage boot.origin; // Support for item origin tracking.\npackage boot.r2dbc; // Support for R2DBC connectivity.\npackage boot.reactor; // Support classes for Reactor integration.\npackage boot.ssl; // Management of trust material that can be used to establish an SSL connection.\npackage boot.system; // General system support classes.\npackage boot.task; // Utilities and classes related to task execution and scheduling.\npackage boot.util; // Contains miscellaneous utility classes.\npackage boot.validation; // Utilities and classes related to validation.\n\nClasses and Interfaces: \npublic interface ApplicationArguments; // Provides access to the arguments that were used to run a SpringApplication.\n@FunctionalInterface public interface ApplicationContextFactory; // Strategy interface for creating the ConfigurableApplicationContext used by a SpringApplication.\n@FunctionalInterface public interface ApplicationRunner; // Interface used to indicate that a bean should run when it is contained within a SpringApplication.\n@FunctionalInterface public interface Banner; // Interface class for writing a banner programmatically.\npublic static enum Banner.Mode extends Enum<Banner.Mode>; // An enumeration of possible values for configuring the Banner.\n", "des": "Core Spring Boot classes."}
{"index": 3242, "repo": "opencms-core-15.0", "code": "Package: shared\n\nSub Packages: \npackage shared.rpc; // Contains the RPC service interfaces used by the XML content editor.\n\nClasses and Interfaces: \nClass CmsComplexWidgetData; // Bean which holds the necessary data for complex value widgets in the Acacia editor.\nClass CmsContentDefinition; // Contains all information needed for editing an XMLContent.\nClass CmsEditHandlerData; // Data which needs to be passed to the edit handler when using the 'new' button for an editable list element.\nClass CmsEditorConstants; // Constants used for content editor integration.\nClass CmsExternalWidgetConfiguration; // External widget configuration settings.\nClass CmsSaveResult; // Stores the editor save result information.\n", "des": "Contains data beans used on the server side as well as on the client side of the XML content editor."}
{"index": 654, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: scheduler\n\nClasses and Interfaces: \nClass DistributedOpportunisticContainerAllocator; // The DistributedOpportunisticContainerAllocator allocates containers on a given list of nodes, after modifying the container sizes to respect the limits set by the ResourceManager.\nClass OpportunisticContainerAllocator; // Base abstract class for Opportunistic container allocations, that provides common functions required for Opportunistic container allocation.\nClass OpportunisticContainerAllocator.Allocation; // This class encapsulates container and resourceName for an allocation.\nClass OpportunisticContainerAllocator.AllocationParams; // This class encapsulates application specific parameters used to build a Container.\nClass OpportunisticContainerAllocator.ContainerIdGenerator; // A Container Id Generator.\nClass OpportunisticContainerAllocator.EnrichedResourceRequest; // This class encapsulates Resource Request and provides requests per node and rack.\nClass OpportunisticContainerAllocator.PartitionedResourceRequests; // Class that includes two lists of ResourceRequests: one for GUARANTEED and one for OPPORTUNISTIC ResourceRequests.\nClass OpportunisticContainerContext; // This encapsulates application specific information used by the Opportunistic Container Allocator to allocate containers.\nClass ResourceRequestSet; // A set of resource requests of the same scheduler key ResourceRequestSetKey.\nClass ResourceRequestSetKey; // The scheduler key for a group of ResourceRequest.\nClass SchedulerRequestKey; // Composite key for outstanding scheduler requests for any schedulable entity.\n", "des": "Utility classes used for Scheduling."}
{"index": 1772, "repo": "spring-data-mongodb-4.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic abstract class AbstractMongoQuery extends Object implements RepositoryQuery; // Base class for RepositoryQuery implementations for Mongo.\npublic abstract class AbstractReactiveMongoQuery extends Object implements RepositoryQuery; // Base class for reactive RepositoryQuery implementations for MongoDB.\npublic class ConvertingParameterAccessor extends Object implements MongoParameterAccessor; // Custom ParameterAccessor that uses a MongoWriter to serialize parameters into Mongo format.\npublic static interface ConvertingParameterAccessor.PotentiallyConvertingIterator extends Iterator<Object>; // Custom Iterator that adds a method to access elements in a converted manner.\npublic interface MongoEntityInformation<T,ID> extends EntityInformation<T,ID>; // Mongo specific EntityInformation.\npublic interface MongoEntityMetadata<T> extends EntityMetadata<T>; // Extension of EntityMetadata to additionally expose the collection name an entity shall be persisted to.\npublic interface MongoParameterAccessor extends ParameterAccessor; // Mongo-specific ParameterAccessor exposing a maximum distance parameter.\npublic class MongoParameters extends Parameters<MongoParameters,org.springframework.data.mongodb.repository.query.MongoParameters.MongoParameter>; // Custom extension of Parameters discovering additional\npublic class MongoParametersParameterAccessor extends ParametersParameterAccessor implements MongoParameterAccessor; // Mongo-specific ParametersParameterAccessor to allow access to the Distance parameter.\npublic class MongoQueryMethod extends QueryMethod; // Mongo specific implementation of QueryMethod.\npublic class PartTreeMongoQuery extends AbstractMongoQuery; // RepositoryQuery implementation for Mongo.\npublic class ReactiveMongoQueryMethod extends MongoQueryMethod; // Reactive specific implementation of MongoQueryMethod.\npublic class ReactivePartTreeMongoQuery extends AbstractReactiveMongoQuery; // Reactive PartTree RepositoryQuery implementation for Mongo.\npublic class ReactiveStringBasedAggregation extends AbstractReactiveMongoQuery; // A reactive RepositoryQuery to use a plain JSON String to create an aggregation pipeline to actually execute.\npublic class ReactiveStringBasedMongoQuery extends AbstractReactiveMongoQuery; // Query to use a plain JSON String to create the Query to actually execute.\npublic class StringBasedAggregation extends AbstractMongoQuery; // AbstractMongoQuery implementation to run string-based aggregations using Aggregation.\npublic class StringBasedMongoQuery extends AbstractMongoQuery; // Query to use a plain JSON String to create the Query to actually execute.\n", "des": "Query derivation mechanism for MongoDB specific repositories."}
{"index": 2740, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic class StaxEventItemReaderBuilder<T> extends Object; // A fluent builder for the StaxEventItemReader\npublic class StaxEventItemWriterBuilder<T> extends Object; // A builder for the StaxEventItemWriter.\n", "des": "Builders for Stax event item reader and writer."}
{"index": 3321, "repo": "opencms-core-15.0", "code": "Package: actions\n\nClasses and Interfaces: \nInterface I_CmsADEAction; // Interface for actions used within the ADE context.\nInterface I_CmsDefaultAction; // Marks workplace actions as an default action to be executed on item click within the file table.\nInterface I_CmsWorkplaceAction; // Workplace action interface.\nClass A_CmsEditFileAction; // Action to edit a file given by the file param.\nClass A_CmsGalleryDialogAction; // Class representing an abstract gallery dialog action.\nClass A_CmsJSPAction; // Abstract class for actions to display a JSP file in a vaadin window.\nClass A_CmsToolbarAction; // Workplace action only visible in the toolbar context menus, not within the file table.\nClass A_CmsWorkplaceAction; // Abstract workplace actions class providing helper methods.\nClass CmsAboutDialogAction; // The about dialog action.\nClass CmsAvailabilityDialogAction; // The availability dialog action.\nClass CmsCategoriesDialogAction; // The categories dialog action.\nClass CmsChangeTypeDialogAction; // The change type dialog action.\nClass CmsContextMenuActionItem; // A workplace action context menu item.\nClass CmsCopyDialogAction; // The copy move dialog action.\nClass CmsCopyPageDialogAction; // Action for the 'copy page' dialog.\nClass CmsCopyToProjectDialogAction; // The copy to project dialog action.\nClass CmsDeleteDialogAction; // The delete dialog action.\nClass CmsDirectPublishDialogAction; // The direct publish dialog action.\nClass CmsDisplayAction; // The display action.\nClass CmsEditCodeDialogAction; // The edit control code dialog action.\nClass CmsEditContentAction; // Action to logout.\nClass CmsEditDialogAction; // The edit dialog action.\nClass CmsEditPageAction; // The edit page action.\nClass CmsEditPointerAction; // Action for editing external links resources.\nClass CmsEditPropertyAction; // The edit table property action.\nClass CmsEditSmallElementsAction; // Action to logout.\nClass CmsEditUserDialogAction; // The delete dialog action.\nClass CmsFavoriteDialogAction; // The action for the favorite dialog.\nClass CmsFormEditDialogAction; // The form edit dialog action.\nClass CmsGalleryDialogAction; // The gallery dialog action.\nClass CmsGalleryOptimizeDialogAction; // The gallery optimize dialog action.\n", "des": "Contains classes for workplace actions."}
{"index": 473, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: sdk\n\nSub Packages: \npackage sdk.annotations; // Defines annotations used across the SDK.\npackage sdk.coders; // Defines Coders to specify how data is encoded to and decoded from byte strings.\npackage sdk.expansion; // Contains classes needed to expose transforms to other SDKs.\npackage sdk.function; // Java 8 functional interface extensions.\npackage sdk.harness; // Utilities for configuring worker environment.\npackage sdk.io; // Defines transforms for reading and writing common storage formats, including AvroIO, and TextIO.\npackage sdk.metrics; // Metrics allow exporting information about the execution of a pipeline.\npackage sdk.options; // Defines PipelineOptions for configuring pipeline execution.\npackage sdk.runners; // For internal use only; no backwards compatibility guarantees.\npackage sdk.schemas; // Defines Schema and other classes for representing schema'd data in a Pipeline.\npackage sdk.state; // Classes and interfaces for interacting with state.\npackage sdk.testing; // Defines utilities for unit testing Apache Beam pipelines.\npackage sdk.transforms; // Defines PTransforms for transforming data in a pipeline.\npackage sdk.util; // For internal use only; no backwards compatibility guarantees.\npackage sdk.values; // Defines PCollection and other classes for representing data in a Pipeline.\n\nClasses and Interfaces: \nInterface Pipeline.PipelineVisitor; // For internal use only; no backwards-compatibility guarantees.\nInterface PipelineResult; // Result of Pipeline.run().\nClass Pipeline; // A Pipeline manages a directed acyclic graph of PTransforms, and the PCollections that the PTransforms consume and produce.\nClass Pipeline.PipelineVisitor.Defaults; // Default no-op Pipeline.PipelineVisitor that enters all composite transforms.\nClass PipelineRunner<ResultT extends PipelineResult>; // A PipelineRunner runs a Pipeline.\nEnum Pipeline.PipelineVisitor.CompositeBehavior; // Control enum for indicating whether or not a traversal should process the contents of a composite transform or not.\nEnum PipelineResult.State; // Possible job states, for both completed and ongoing jobs.\nClass Pipeline.PipelineExecutionException; // Thrown during execution of a Pipeline, whenever user code within that Pipeline throws an exception.\n", "des": "Provides a simple, powerful model for building both batch and streaming parallel data processing Pipelines."}
{"index": 241, "repo": "nutch-2.4", "code": "Package: api\n\nClasses and Interfaces: \nClass HttpBase;\nClass HttpRobotRulesParser; // This class is used for parsing robots for urls belonging to HTTP protocol.\nClass BlockedException;\nClass HttpException;\n", "des": "Common API used by HTTP plugins (http, httpclient)"}
{"index": 3181, "repo": "tomcat-api-10.1", "code": "Package: factory\n\nClasses and Interfaces: \nClass BeanFactory; // Object factory for any Resource conforming to the JavaBean spec.\nClass Constants; // Static constants for this package.\nClass DataSourceLinkFactory; // Object factory for resource links for shared data sources.\nClass DataSourceLinkFactory.DataSourceHandler; // Simple wrapper class that will allow a user to configure a ResourceLink for a data source so that when DataSource.getConnection() is called, it will invoke DataSource.getConnection(String, String) with the preconfigured username and password.\nClass EjbFactory; // Object factory for EJBs.\nClass FactoryBase; // Abstract base class that provides common functionality required by sub-classes.\nClass LookupFactory; // Object factory for lookups.\nClass MailSessionFactory; // Factory class that creates a JNDI named JavaMail Session factory, which can be used for managing inbound and outbound electronic mail messages via JavaMail APIs.\nClass OpenEjbFactory; // Object factory for EJBs.\nClass ResourceEnvFactory; // Object factory for Resources env.\nClass ResourceFactory; // Object factory for Resources.\nClass ResourceLinkFactory; // Object factory for resource links.\nClass SendMailFactory; // Factory class that creates a JNDI named javamail MimePartDataSource object which can be used for sending email using SMTP.\nClass TransactionFactory; // Object factory for User transactions.\n", "des": "This package contains object factories used by the naming service."}
{"index": 1177, "repo": "commons-math3-3.6.1", "code": "Package: neuralnet\n\nSub Packages: \npackage neuralnet.oned; // One-dimensional neural networks.\npackage neuralnet.sofm; // Self Organizing Feature Map.\npackage neuralnet.twod; // Two-dimensional neural networks.\n\nClasses and Interfaces: \nInterface FeatureInitializer; // Defines how to assign the first value of a neuron's feature.\nInterface UpdateAction; // Describes how to update the network in response to a training sample.\nClass FeatureInitializerFactory; // Creates functions that will select the initial values of a neuron's features.\nClass MapUtils; // Utilities for network maps.\nClass Network; // Neural network, composed of Neuron instances and the links between them.\nClass Network.NeuronIdentifierComparator; // Comparator that prescribes an order of the neurons according to the increasing order of their identifier.\nClass Neuron; // Describes a neuron element of a neural network.\nEnum SquareNeighbourhood; // Defines neighbourhood types.\n", "des": "Neural networks."}
{"index": 2089, "repo": "spring-webmvc-6.0.11", "code": "Package: xslt\n\nClasses and Interfaces: \npublic class XsltView extends AbstractUrlBasedView; // XSLT-driven View that allows for response context to be rendered as the result of an XSLT transformation.\npublic class XsltViewResolver extends UrlBasedViewResolver; // ViewResolver implementation that resolves instances of XsltView by translating the supplied view name into the URL of the XSLT stylesheet.\n", "des": "Support classes for XSLT, providing a View implementation for XSLT stylesheets."}
{"index": 1931, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webmvc.GraphQlHttpHandler.class}) @ConditionalOnBean(org.springframework.graphql.ExecutionGraphQlService.class) @EnableConfigurationProperties(GraphQlCorsProperties.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.graphql.servlet.GraphQlWebMvcAutoConfiguration.GraphiQlResourceHints.class) public class GraphQlWebMvcAutoConfiguration extends Object; // Auto-configuration for enabling Spring GraphQL over Spring MVC.\n@Configuration(proxyBeanMethods=false) public static class GraphQlWebMvcAutoConfiguration.GraphQlEndpointCorsConfiguration extends Object implements org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass({jakarta.websocket.server.ServerContainer.class,org.springframework.web.socket.WebSocketHandler.class}) @ConditionalOnProperty(prefix=\"spring.graphql.websocket\", name=\"path\") public static class GraphQlWebMvcAutoConfiguration.WebSocketConfiguration extends Object;\n", "des": "Auto-configuration classes for MVC support in Spring GraphQL."}
{"index": 2351, "repo": "spring-boot-3.1.1", "code": "Package: error\n\nClasses and Interfaces: \npublic class DefaultErrorAttributes extends Object implements ErrorAttributes; // Default implementation of ErrorAttributes.\npublic interface ErrorAttributes; // Provides access to error attributes which can be logged or presented to the user.\n@FunctionalInterface public interface ErrorWebExceptionHandler extends org.springframework.web.server.WebExceptionHandler; // Marker interface that indicates that a WebExceptionHandler is used to render errors.\n", "des": "Spring WebFlux error handling infrastructure."}
{"index": 1962, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: jpa\n\nClasses and Interfaces: \n@FunctionalInterface public interface EntityManagerFactoryBuilderCustomizer; // Callback interface that can be used to customize the auto-configured EntityManagerFactoryBuilder.\npublic class EntityManagerFactoryDependsOnPostProcessor extends AbstractDependsOnBeanFactoryPostProcessor; // BeanFactoryPostProcessor that can be used to dynamically declare that all EntityManagerFactory beans should \"depend on\" one or more specific beans.\n@AutoConfiguration(after=DataSourceAutoConfiguration.class, before=TransactionAutoConfiguration.class) @ConditionalOnClass({org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.class,jakarta.persistence.EntityManager.class,org.hibernate.engine.spi.SessionImplementor.class}) @EnableConfigurationProperties(JpaProperties.class) @Import(org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.class) public class HibernateJpaAutoConfiguration extends Object; // Auto-configuration for Hibernate JPA.\n@ConfigurationProperties(\"spring.jpa.hibernate\") public class HibernateProperties extends Object; // Configuration properties for Hibernate.\npublic static class HibernateProperties.Naming extends Object;\n@FunctionalInterface public interface HibernatePropertiesCustomizer; // Callback interface that can be implemented by beans wishing to customize the Hibernate properties before it is used by an auto-configured EntityManagerFactory.\npublic class HibernateSettings extends Object; // Settings to apply when configuring Hibernate.\n@Configuration(proxyBeanMethods=false) @EnableConfigurationProperties(JpaProperties.class) public abstract class JpaBaseConfiguration extends Object; // Base Auto-configuration for JPA.\n", "des": "Auto-configuration for JPA and Spring ORM."}
{"index": 3199, "repo": "tomcat-api-10.1", "code": "Package: disk\n\nClasses and Interfaces: \nClass DiskFileItem; // The default implementation of the FileItem interface.\nClass DiskFileItemFactory; // The default FileItemFactory implementation.\n", "des": "A disk-based implementation of the FileItem interface."}
{"index": 2303, "repo": "spring-boot-3.1.1", "code": "Package: source\n\nClasses and Interfaces: \npublic final class ConfigurationProperty extends Object implements OriginProvider, Comparable<ConfigurationProperty>; // A single configuration property obtained from a ConfigurationPropertySource consisting of a name, value and optional origin.\npublic interface ConfigurationPropertyCaching; // Interface that can be used to control configuration property source caches.\npublic final class ConfigurationPropertyName extends Object implements Comparable<ConfigurationPropertyName>; // A configuration property name composed of elements separated by dots.\npublic static enum ConfigurationPropertyName.Form extends Enum<ConfigurationPropertyName.Form>; // The various forms that a non-indexed element value can take.\npublic final class ConfigurationPropertyNameAliases extends Object implements Iterable<ConfigurationPropertyName>; // Maintains a mapping of ConfigurationPropertyName aliases.\n@FunctionalInterface public interface ConfigurationPropertySource; // A source of ConfigurationProperties.\npublic final class ConfigurationPropertySources extends Object; // Provides access to ConfigurationPropertySources.\npublic enum ConfigurationPropertyState extends Enum<ConfigurationPropertyState>; // The state of content from a ConfigurationPropertySource.\npublic class InvalidConfigurationPropertyNameException extends RuntimeException; // Exception thrown when ConfigurationPropertyName has invalid characters.\npublic class InvalidConfigurationPropertyValueException extends RuntimeException; // Exception thrown when a configuration property value is invalid.\npublic interface IterableConfigurationPropertySource extends ConfigurationPropertySource, Iterable<ConfigurationPropertyName>; // A ConfigurationPropertySource with a fully Iterable set of entries.\npublic class MapConfigurationPropertySource extends Object implements IterableConfigurationPropertySource; // A ConfigurationPropertySource backed by a Map and using standard name mapping rules.\npublic class MutuallyExclusiveConfigurationPropertiesException extends RuntimeException; // Exception thrown when more than one mutually exclusive configuration property has been configured.\npublic class UnboundElementsSourceFilter extends Object implements Function<ConfigurationPropertySource,Boolean>; // Function used to determine if a ConfigurationPropertySource should be included when determining unbound elements.\n", "des": "Sources for external configuration properties."}
{"index": 2167, "repo": "wicket-core-10.0.0-M1", "code": "Package: template\n\nClasses and Interfaces: \npublic final class CssTemplate extends TextTemplateDecorator; // Decorates a TextTemplate with CSS tags.\npublic final class JavaScriptTemplate extends TextTemplateDecorator; // Decorates a TextTemplate with JavaScript tags.\npublic class PackageTextTemplate extends TextTemplate; // A String resource that can be appended to.\npublic abstract class TextTemplate extends org.apache.wicket.util.resource.AbstractStringResourceStream; // Represents a text template that can do variable interpolation.\npublic abstract class TextTemplateDecorator extends TextTemplate; // Provides the ability to 'decorate' the actual template contents before it is contributed to the header.\n", "des": "Resource extensions that make working with header contributions easier and more maintainable."}
{"index": 1571, "repo": "spring-restdocs-core-3.0.0", "code": "Package: snippet\n\nClasses and Interfaces: \npublic abstract class AbstractDescriptor<T extends AbstractDescriptor<T>> extends Object; // Base class for descriptors.\npublic abstract class Attributes extends Object; // A fluent API for building a map of attributes.\npublic static final class Attributes.Attribute extends Object; // An attribute (key-value pair).\npublic static final class Attributes.AttributeBuilder extends Object; // A simple builder for an attribute (key-value pair).\npublic abstract class IgnorableDescriptor<T extends IgnorableDescriptor<T>> extends AbstractDescriptor<T>; // Base class for descriptors for items that can be ignored.\npublic class ModelCreationException extends RuntimeException; // An exception that can be thrown by a TemplatedSnippet to indicate that a failure has occurred during model creation.\npublic interface PlaceholderResolverFactory; // A factory for creating PropertyPlaceholderHelper.PlaceholderResolver instances.\npublic class RestDocumentationContextPlaceholderResolver extends Object implements PropertyPlaceholderHelper.PlaceholderResolver; // A PropertyPlaceholderHelper.PlaceholderResolver that resolves placeholders using a RestDocumentationContext.\npublic final class RestDocumentationContextPlaceholderResolverFactory extends Object implements PlaceholderResolverFactory; // A PlaceholderResolverFactory that creates RestDocumentationContextPlaceholderResolver instances.\npublic interface Snippet; // A Snippet is used to document aspects of a call to a RESTful API.\npublic class SnippetException extends RuntimeException; // A RuntimeException thrown to indicate a problem with the generation of a documentation snippet.\npublic final class StandardWriterResolver extends Object implements WriterResolver; // Standard implementation of WriterResolver.\npublic abstract class TemplatedSnippet extends Object implements Snippet; // Base class for a Snippet that is produced using a Template and TemplateEngine.\npublic interface WriterResolver; // A WriterResolver is used to access the Writer that should be used to write a snippet for an operation that is being documented.\n", "des": "Snippet generation."}
{"index": 2261, "repo": "spring-vault-core-3.0.4", "code": "Package: core\n\nSub Packages: \npackage core.env; // Spring Vault's environment abstraction consisting property source support.\npackage core.lease; // The core package implementing lease renewal and secret rotation.\npackage core.util; // Property transformer classes for Spring Vault core support.\n\nClasses and Interfaces: \npublic interface ReactiveVaultOperations; // Interface that specifies a basic set of Vault operations executed on a reactive infrastructure, implemented by ReactiveVaultTemplate.\npublic class ReactiveVaultTemplate extends Object implements ReactiveVaultOperations; // This class encapsulates main Vault interaction.\n@FunctionalInterface public interface RestOperationsCallback<T>; // A callback for executing arbitrary operations on RestOperations.\npublic class SecretNotFoundException extends VaultException; // An exception which is used in case that no secret is found from Vault server.\npublic interface VaultKeyValueMetadataOperations; // Interface that specifies kv metadata related operations.\npublic interface VaultKeyValueOperations extends VaultKeyValueOperationsSupport; // Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend.\npublic interface VaultKeyValueOperationsSupport; // Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend.\npublic static enum VaultKeyValueOperationsSupport.KeyValueBackend extends Enum<VaultKeyValueOperationsSupport.KeyValueBackend>; // Enumeration of supported Key/Value backend API versions.\npublic interface VaultOperations; // Interface that specifies a basic set of Vault operations, implemented by VaultTemplate.\npublic interface VaultPkiOperations; // Interface that specifies PKI backend-related operations.\npublic static enum VaultPkiOperations.Encoding extends Enum<VaultPkiOperations.Encoding>;\npublic class VaultPkiTemplate extends Object implements VaultPkiOperations; // Default implementation of VaultPkiOperations.\npublic interface VaultSysOperations; // Interface that specifies a basic set of administrative Vault operations.\npublic class VaultSysTemplate extends Object implements VaultSysOperations; // Default implementation of VaultSysOperations.\npublic class VaultTemplate extends Object implements InitializingBean, VaultOperations, DisposableBean; // This class encapsulates main Vault interaction.\npublic interface VaultTokenOperations; // Interface that specifies token-related operations.\npublic class VaultTokenTemplate extends Object implements VaultTokenOperations; // Default implementation of VaultTokenOperations.\npublic interface VaultTransformOperations; // Interface that specifies operations using the transform backend.\n", "des": "Vault core support."}
{"index": 2923, "repo": "groovy-4.0.13", "code": "Package: concurrentlinkedhashmap\n\nClasses and Interfaces: \n@ThreadSafe public final class ConcurrentLinkedHashMap<K,V> extends AbstractMap<K,V> implements ConcurrentMap<K,V>, Serializable; // A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by.\npublic static final class ConcurrentLinkedHashMap.Builder<K,V> extends Object; // A builder that creates ConcurrentLinkedHashMap instances.\n@ThreadSafe public interface EntryWeigher<K,V>; // A class that can determine the weight of an entry.\n@ThreadSafe public interface EvictionListener<K,V>; // A listener registered for notification when an entry is evicted.\n@ThreadSafe public interface Weigher<V>; // A class that can determine the weight of a value.\npublic final class Weighers extends Object; // A common set of Weigher and EntryWeigher implementations.\n", "des": "This package contains an implementation of a bounded ConcurrentMap data structure."}
{"index": 3842, "repo": "lucene-core-9.7.0", "code": "Package: lucene95\n\nClasses and Interfaces: \nClass Lucene95Codec; // Implements the Lucene 9.5 index format\nClass Lucene95HnswVectorsFormat; // Lucene 9.5 vector format, which encodes numeric vector values and an optional associated graph connecting the documents having values.\nClass Lucene95HnswVectorsReader; // Reads vectors from the index segments along with index data structures supporting KNN search.\nClass Lucene95HnswVectorsWriter; // Writes vector values and knn graphs to index segments.\nEnum Lucene95Codec.Mode; // Configuration option for the codec.\n", "des": "Lucene 9.5 file format."}
{"index": 1573, "repo": "spring-restdocs-core-3.0.0", "code": "Package: mustache\n\nClasses and Interfaces: \npublic final class AsciidoctorTableCellContentLambda extends Object implements org.springframework.restdocs.mustache.Mustache.Lambda; // A Mustache.Lambda that escapes | characters so that the do not break the table's formatting.\npublic class MustacheTemplate extends Object implements Template; // An adapter that exposes a compiled Mustache template as a Template.\npublic class MustacheTemplateEngine extends Object implements TemplateEngine; // A Mustache-based TemplateEngine implemented using JMustache.\n", "des": "JMustache-based implementation of the template API."}
{"index": 1719, "repo": "spring-boot-test-3.1.1", "code": "Package: webdriver\n\nClasses and Interfaces: \npublic class LocalHostWebConnectionHtmlUnitDriver extends org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver; // LocalHostWebConnectionHtmlUnitDriver will automatically prefix relative URLs with localhost:${local.server.port}.\n", "des": "Selenium support classes."}
{"index": 1834, "repo": "spring-test-6.0.11", "code": "Package: server\n\nClasses and Interfaces: \npublic final class MockServerWebExchange extends org.springframework.web.server.adapter.DefaultServerWebExchange; // Extension of DefaultServerWebExchange for use in tests, along with MockServerHttpRequest and MockServerHttpResponse.\npublic static class MockServerWebExchange.Builder extends Object; // Builder for a MockServerWebExchange.\npublic class MockWebSession extends Object implements org.springframework.web.server.WebSession; // Implementation of WebSession that delegates to a session instance obtained via InMemoryWebSessionStore.\n", "des": "Mock implementations of Spring's reactive server web API abstractions."}
{"index": 1082, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: struct\n\nClasses and Interfaces: \nClass SizeOf; // Contains static methods that provide access to the size of dereferenced SystemJava pointer types (i.e.\nAnnotation Type AllowNarrowingCast; // Allows a method annotated with CField to have a value type that is narrower (smaller number of bits) than the C type.\nAnnotation Type AllowWideningCast; // Allows a method annotated with CField to have a value type that is wider (larger number of bits) than the C type.\nAnnotation Type CBitfield; // Denotes a method as a bitfield access of a C struct.\nAnnotation Type CField; // Denotes a method as a field access of a C struct.\nAnnotation Type CFieldAddress; // Denotes a method as a field address computation of a C struct.\nAnnotation Type CFieldOffset; // Denotes a method as a field offset access of a C struct.\nAnnotation Type CPointerTo; // Denotes Java interface that imports a C pointer type.\nAnnotation Type CStruct; // Denotes Java interface that imports a C struct.\nAnnotation Type CTypedefOfInfo; // Informational only.\nAnnotation Type RawField; // Denotes a method as a field access of a structured C memory.\nAnnotation Type RawStructure; // Denotes Java interface that represents C memory, but without a C struct definition.\nAnnotation Type UniqueLocationIdentity; // A CField also annotated with this annotation gets a unique LocationIdentity assigned, i.e., reads and writes do not interfere with reads and writes to any other field and are optimized without regarding other fields.\n", "des": "This package provides parts of the Java / C interface that are related to C structures."}
{"index": 464, "repo": "jackson-core-2.15.2", "code": "Package: async\n\nClasses and Interfaces: \nInterface ByteArrayFeeder; // NonBlockingInputFeeder implementation used when feeding data as byte arrays.\nInterface ByteBufferFeeder; // NonBlockingInputFeeder implementation used when feeding data as ByteBuffer contents.\nInterface NonBlockingInputFeeder; // Interface used by non-blocking JsonParser implementations to feed input to parse.\n", "des": "Package that contains abstractions needed to support optional non-blocking decoding (parsing) functionality."}
{"index": 2609, "repo": "wicket-util-10.0.0-M1", "code": "Package: listener\n\nClasses and Interfaces: \npublic final class ChangeListenerSet<T> extends ListenerCollection<IChangeListener<T>>; // Holds a set of IChangeListeners.\n@FunctionalInterface public interface IChangeListener<T>; // Generic \"something changed\" listener interface.\npublic abstract class ListenerCollection<T> extends Object implements Serializable, Iterable<T>; // Represents a collection of listeners.\nprotected static interface ListenerCollection.INotifier<T>; // Used to notify a listener.\n", "des": "Listener/ Observer utilities."}
{"index": 3793, "repo": "lucene-analysis-common-9.7.0", "code": "Package: id\n\nClasses and Interfaces: \nClass IndonesianAnalyzer; // Analyzer for Indonesian (Bahasa)\nClass IndonesianStemFilter; // A TokenFilter that applies IndonesianStemmer to stem Indonesian words.\nClass IndonesianStemFilterFactory; // Factory for IndonesianStemFilter.\nClass IndonesianStemmer; // Stemmer for Indonesian.\n", "des": "Analyzer for Indonesian."}
{"index": 177, "repo": "ignite-core-2.15.0", "code": "Package: segmentation\n\nClasses and Interfaces: \nInterface GridSegmentationProcessor; // Kernal processor responsible for checking network segmentation issues.\n", "des": "Segmentation processor."}
{"index": 3726, "repo": "lucene-queryparser-9.7.0", "code": "Package: classic\n\nClasses and Interfaces: \nInterface QueryParserConstants; // Token literal values and constants.\nClass MultiFieldQueryParser; // A QueryParser which constructs queries to search multiple fields.\nClass QueryParser; // This class is generated by JavaCC.\nClass QueryParserBase; // This class is overridden by QueryParser in QueryParser.jj and acts to separate the majority of the Java code from the .jj grammar file.\nClass QueryParserTokenManager; // Token Manager.\nClass Token; // Describes the input token stream.\nEnum QueryParser.Operator; // The default operator for parsing queries.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "A simple query parser implemented with JavaCC."}
{"index": 693, "repo": "jackson-databind-2.15.2", "code": "Package: node\n\nClasses and Interfaces: \nInterface JsonNodeCreator; // Interface that defines common \"creator\" functionality implemented both by JsonNodeFactory and ContainerNode (that is, JSON Object and Array nodes).\nClass ArrayNode; // Node class that represents Arrays mapped from JSON content.\nClass BaseJsonNode; // Abstract base class common to all standard JsonNode implementations.\nClass BigIntegerNode; // Numeric node that contains simple 64-bit integer values.\nClass BinaryNode; // Value node that contains Base64 encoded binary value, which will be output and stored as Json String value.\nClass BooleanNode; // This concrete value class is used to contain boolean (true / false) values.\nClass ContainerNode<T extends ContainerNode<T>>; // This intermediate base class is used for all container nodes, specifically, array and object nodes.\nClass DecimalNode; // Numeric node that contains values that do not fit in simple integer (int, long) or floating point (double) values.\nClass DoubleNode; // Numeric node that contains 64-bit (\"double precision\") floating point values simple 32-bit integer values.\nClass FloatNode; // JsonNode implementation for efficiently containing 32-bit `float` values.\nClass IntNode; // Numeric node that contains simple 32-bit integer values.\nClass JsonNodeFactory; // Base class that specifies methods for getting access to Node instances (newly constructed, or shared, depending on type), as well as basic implementation of the methods.\nClass LongNode; // Numeric node that contains simple 64-bit integer values.\nClass MissingNode; // This singleton node class is generated to denote \"missing nodes\" along paths that do not exist.\nClass NullNode; // This singleton value class is used to contain explicit JSON null value.\nClass NumericNode; // Intermediate value node used for numeric nodes.\nClass ObjectNode; // Node that maps to JSON Object structures in JSON content.\nClass POJONode; // Value node that contains a wrapped POJO, to be serialized as a JSON constructed through data mapping (usually done by calling ObjectMapper).\nClass ShortNode; // Numeric node that contains simple 16-bit integer values.\nClass TextNode; // Value node that contains a text value.\nClass TreeTraversingParser; // Facade over JsonNode that implements JsonParser to allow accessing contents of JSON tree in alternate form (stream of tokens).\n", "des": "Contains concrete JsonNode implementations Jackson uses for the Tree model."}
{"index": 812, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: th\n\nClasses and Interfaces: \nClass ThaiAnalyzer; // Analyzer for Thai language.\nClass ThaiTokenizer; // Tokenizer that use BreakIterator to tokenize Thai text.\nClass ThaiTokenizerFactory; // Factory for ThaiTokenizer.\n", "des": "Analyzer for Thai."}
{"index": 3127, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface Batch; // Conceptually models a batch.\nInterface BatchBuilder; // A builder for Batch instances\nInterface BatchKey; // Unique key for batch identification.\nInterface BatchObserver; // An observer contract for batch events.\n", "des": "Defines contracts for JDBC batching support."}
{"index": 3187, "repo": "tomcat-api-10.1", "code": "Package: pool2\n\nSub Packages: \npackage pool2.impl; // Object pooling API implementations.\n\nClasses and Interfaces: \nInterface KeyedObjectPool<K,​V>; // A \"keyed\" pooling interface.\nInterface KeyedPooledObjectFactory<K,​V>; // An interface defining life-cycle methods for instances to be served by a KeyedObjectPool.\nInterface ObjectPool<T>; // A pooling simple interface.\nInterface PooledObject<T>; // Defines the wrapper that is used to track the additional information, such as state, for the pooled objects.\nInterface PooledObjectFactory<T>; // An interface defining life-cycle methods for instances to be served by an ObjectPool.\nInterface SwallowedExceptionListener; // Pools that unavoidably swallow exceptions may be configured with an instance of this listener so the user may receive notification of when this happens.\nInterface TrackedUse; // Allows pooled objects to make information available about when and how they were used available to the object pool.\nInterface UsageTracking<T>; // This interface may be implemented by an object pool to enable clients (primarily those clients that wrap pools to provide pools with extended features) to provide additional information to the pool relating to object using allowing more informed decisions and reporting to be made regarding abandoned objects.\nClass BaseObject; // A base class for common functionality.\nClass BaseObjectPool<T>; // A simple base implementation of ObjectPool.\nClass PoolUtils; // This class consists exclusively of static methods that operate on or return ObjectPool or KeyedObjectPool related interfaces.\nEnum DestroyMode; // Destroy context provided to object factories via destroyObject and invalidateObject methods.\nEnum PooledObjectState; // Provides all possible states of a PooledObject.\n", "des": "Object pooling API."}
{"index": 2472, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: stackdriver\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.stackdriver.StackdriverMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"stackdriver\") @EnableConfigurationProperties(StackdriverProperties.class) public class StackdriverMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Stackdriver.\n@ConfigurationProperties(prefix=\"management.stackdriver.metrics.export\") public class StackdriverProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Stackdriver metrics export.\npublic class StackdriverPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<StackdriverProperties> implements io.micrometer.stackdriver.StackdriverConfig; // Adapter to convert StackdriverProperties to a StackdriverConfig.\n", "des": "Support for exporting actuator metrics to Stackdriver."}
{"index": 816, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: collation\n\nSub Packages: \npackage collation.tokenattributes; // Custom AttributeImpl for indexing collation keys as index terms.\n\nClasses and Interfaces: \nClass CollationAttributeFactory; // Converts each token into its CollationKey, and then encodes the bytes as an index term.\nClass CollationDocValuesField; // Indexes collation keys as a single-valued SortedDocValuesField.\nClass CollationKeyAnalyzer; // Configures KeywordTokenizer with CollationAttributeFactory.\n", "des": "Unicode collation support."}
{"index": 3048, "repo": "spring-web-6.0.11", "code": "Package: util\n\nSub Packages: \npackage util.pattern; // Dedicated support for matching HTTP request paths.\n\nClasses and Interfaces: \npublic class ContentCachingRequestWrapper extends HttpServletRequestWrapper; // HttpServletRequest wrapper that caches all content read from the input stream and reader, and allows this content to be retrieved via a byte array.\npublic class ContentCachingResponseWrapper extends HttpServletResponseWrapper; // HttpServletResponse wrapper that caches all content written to the output stream and writer, and allows this content to be retrieved via a byte array.\n@Deprecated public class CookieGenerator extends Object;\npublic class DefaultUriBuilderFactory extends Object implements UriBuilderFactory; // UriBuilderFactory that relies on UriComponentsBuilder for the actual building of the URI.\npublic static enum DefaultUriBuilderFactory.EncodingMode extends Enum<DefaultUriBuilderFactory.EncodingMode>; // Enum to represent multiple URI encoding strategies.\npublic abstract class HtmlUtils extends Object; // Utility class for HTML escaping.\npublic class HttpSessionMutexListener extends Object implements HttpSessionListener; // Servlet HttpSessionListener that automatically exposes the session mutex when an HttpSession gets created.\npublic class IntrospectorCleanupListener extends Object implements ServletContextListener; // Listener that flushes the JDK's JavaBeans Introspector cache on web app shutdown.\npublic abstract class JavaScriptUtils extends Object; // Utility class for JavaScript escaping.\n@Deprecated(since=\"6.0\") public class NestedServletException extends ServletException;\npublic abstract class ServletContextPropertyUtils extends Object; // Helper class for resolving placeholders in texts.\npublic abstract class ServletRequestPathUtils extends Object; // Utility class to assist with preparation and access to the lookup path for request mapping purposes.\npublic abstract class TagUtils extends Object; // Utility class for tag library related code, exposing functionality such as translating Strings to web scopes.\npublic interface UriBuilder; // Builder-style methods to prepare and expand a URI template with variables.\npublic interface UriBuilderFactory extends UriTemplateHandler; // Factory to create UriBuilder instances with shared configuration such as a base URI, an encoding mode strategy, and others across all URI builder instances created through a factory.\npublic abstract class UriComponents extends Object implements Serializable; // Represents an immutable collection of URI components, mapping component type to String values.\npublic static interface UriComponents.UriTemplateVariables; // Defines the contract for URI Template variables.\npublic class UriComponentsBuilder extends Object implements UriBuilder, Cloneable; // Builder for UriComponents.\n", "des": "Miscellaneous web utility classes, such as HTML escaping and cookie handling."}
{"index": 3338, "repo": "opencms-core-15.0", "code": "Package: sitemanager\n\nClasses and Interfaces: \nClass CmsCreateSiteThread; // Report thread to save site configurations.\nClass CmsDeleteSiteDialog; // Dialog for deleting Sites.\nClass CmsEditSiteForm; // Class for the Form to edit or add a site.\nClass CmsGlobalForm; // Class for the Global configuration dialog.\nClass CmsSiteManager; // Manager class for the Site manager app.\nClass CmsSiteManagerConfiguration; // Configuration class for the site management app.\nClass CmsSitesTable; // Class to create Vaadin Table object with all available sites.\nClass CmsSitesWebserverThread; // Executes a script file.\nClass CmsWebServerConfigForm; // Class for the Web server configuration form and execution of script.\nClass CmsWorkplaceServerWidget; // Layout for workplace server configuration.\nEnum CmsSitesTable.TableProperty; // Table properties.\n", "des": "Contains classes of the site manager app."}
{"index": 2672, "repo": "spring-r2dbc-6.0.11", "code": "Package: connection\n\nSub Packages: \npackage connection.init; // Provides extensible support for initializing databases through scripts.\npackage connection.lookup; // Provides a strategy for looking up R2DBC ConnectionFactories by name.\n\nClasses and Interfaces: \npublic abstract class ConnectionFactoryUtils extends Object; // Helper class that provides static methods for obtaining R2DBC Connections from a ConnectionFactory.\npublic class ConnectionHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a R2DBC Connection.\npublic class DelegatingConnectionFactory extends Object implements ConnectionFactory, Wrapped<ConnectionFactory>; // R2DBC ConnectionFactory implementation that delegates all calls to a given target ConnectionFactory.\npublic class R2dbcTransactionManager extends org.springframework.transaction.reactive.AbstractReactiveTransactionManager implements org.springframework.beans.factory.InitializingBean; // ReactiveTransactionManager implementation for a single R2DBC ConnectionFactory.\npublic class SingleConnectionFactory extends DelegatingConnectionFactory implements org.springframework.beans.factory.DisposableBean; // Implementation of DelegatingConnectionFactory that wraps a single R2DBC Connection which is not closed after use.\npublic class TransactionAwareConnectionFactoryProxy extends DelegatingConnectionFactory; // Proxy for a target R2DBC ConnectionFactory, adding awareness of Spring-managed transactions.\n", "des": "Provides a utility class for easy ConnectionFactory access, a ReactiveTransactionManager for a single ConnectionFactory, and various simple ConnectionFactory implementations."}
{"index": 1569, "repo": "spring-restdocs-core-3.0.0", "code": "Package: payload\n\nClasses and Interfaces: \npublic abstract class AbstractBodySnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response body.\npublic abstract class AbstractFieldsSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response fields.\npublic class FieldDescriptor extends IgnorableDescriptor<FieldDescriptor>; // A description of a field found in a request or response payload.\npublic class FieldDoesNotExistException extends RuntimeException; // A FieldDoesNotExistException is thrown when a requested field does not exist in a payload.\npublic class FieldPathPayloadSubsectionExtractor extends Object implements PayloadSubsectionExtractor<FieldPathPayloadSubsectionExtractor>; // A PayloadSubsectionExtractor that extracts the subsection of the JSON payload identified by a field path.\npublic class FieldTypeRequiredException extends RuntimeException; // A FieldTypeRequiredException is thrown when a field's type cannot be determined automatically and, therefore, must be explicitly provided.\npublic interface FieldTypeResolver; // Resolves the type of a field in a request or response payload.\npublic enum JsonFieldType extends Enum<JsonFieldType>; // An enumeration of the possible types for a field in a JSON request or response payload.\npublic abstract class PayloadDocumentation extends Object; // Static factory methods for documenting a RESTful API's request and response payloads.\npublic interface PayloadSubsectionExtractor<T extends PayloadSubsectionExtractor<T>>; // Strategy interface for extracting a subsection of a payload.\npublic class RequestBodySnippet extends AbstractBodySnippet; // A Snippet that documents the body of a request.\npublic class RequestFieldsSnippet extends AbstractFieldsSnippet; // A Snippet that documents the fields in a request.\npublic class RequestPartBodySnippet extends AbstractBodySnippet; // A Snippet that documents the body of a request part.\npublic class RequestPartFieldsSnippet extends AbstractFieldsSnippet; // A Snippet that documents the fields in a request part.\npublic class ResponseBodySnippet extends AbstractBodySnippet; // A Snippet that documents the body of a response.\npublic class ResponseFieldsSnippet extends AbstractFieldsSnippet; // A Snippet that documents the fields in a response.\npublic class SubsectionDescriptor extends FieldDescriptor; // A description of a subsection, i.e.\n", "des": "Documenting the payload of a RESTful API's requests and responses."}
{"index": 2138, "repo": "wicket-core-10.0.0-M1", "code": "Package: lang\n\nClasses and Interfaces: \npublic final class PropertyResolver extends Object; // This class parses expressions to lookup or set a value on the object that is given.\npublic abstract static class PropertyResolver.AbstractGetAndSet extends Object implements PropertyResolver.IGetAndSet;\npublic static class PropertyResolver.CachingPropertyLocator extends Object implements PropertyResolver.IPropertyLocator; // A wrapper for another PropertyResolver.IPropertyLocator that caches results of PropertyResolver.CachingPropertyLocator.get(Class, String).\npublic static class PropertyResolver.DefaultPropertyLocator extends Object implements PropertyResolver.IPropertyLocator; // Default locator supporting Java Beans properties, maps, lists and method invocations.\npublic static interface PropertyResolver.IGetAndSet; // A property to get and set.\npublic static interface PropertyResolver.IPropertyLocator; // A locator of properties.\npublic class PropertyResolverConverter extends Object implements org.apache.wicket.util.io.IClusterable;\npublic class WicketObjects extends Object; // Object (de)serialization utilities.\npublic static interface WicketObjects.IObjectSizeOfStrategy; // Interface that enables users to plugin the way object sizes are calculated with Wicket.\npublic static final class WicketObjects.SerializingObjectSizeOfStrategy extends Object implements WicketObjects.IObjectSizeOfStrategy; // WicketObjects.IObjectSizeOfStrategy that works by serializing the object to an instance of ByteCountingOutputStream, which records the number of bytes written to it.\n", "des": "Java utilities."}
{"index": 56, "repo": "ignite-core-2.15.0", "code": "Package: jdbc\n\nSub Packages: \npackage jdbc.dialect; // Contains SQL dialects for different RDBMS.\n\nClasses and Interfaces: \nInterface JdbcTypeHasher; // API for implementing custom hashing logic for binary objects on server side.\nInterface JdbcTypesTransformer; // API for implementing custom mapping logic for loaded from store data.\nClass CacheAbstractJdbcStore<K,V>; // Implementation of CacheStore backed by JDBC.\nClass CacheAbstractJdbcStore.EntryMapping; // Entry mapping description.\nClass CacheJdbcBlobStore<K,V>; // CacheStore implementation backed by JDBC.\nClass CacheJdbcBlobStoreFactory<K,V>; // Factory implementation for CacheJdbcBlobStore.\nClass CacheJdbcPojoStore<K,V>; // Implementation of CacheStore backed by JDBC and POJO via reflection.\nClass CacheJdbcPojoStoreFactory<K,V>; // Factory implementation for CacheJdbcPojoStore.\nClass CacheJdbcStoreSessionListener; // Cache store session listener based on JDBC connection.\nClass JdbcType; // Description for type that could be stored into database by store.\nClass JdbcTypeDefaultHasher; // Default implementation of JdbcTypeHasher.\nClass JdbcTypeField; // Description of how field declared in database and in cache.\nClass JdbcTypesDefaultTransformer; // Default implementation of JdbcTypesTransformer.\nEnum CacheAbstractJdbcStore.TypeKind; // Type kind.\n", "des": "Contains reference JDBC-based cache store implementation."}
{"index": 2242, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: core\n\nSub Packages: \npackage core.event; // Support classes for key-value events, like standard persistence lifecycle events.\npackage core.mapping; // Infrastructure for the Key-Value mapping subsystem and keyspace resolution.\npackage core.query; // Key/value specific query and abstractions.\n\nClasses and Interfaces: \npublic abstract class AbstractKeyValueAdapter extends Object implements KeyValueAdapter; // Base implementation of KeyValueAdapter holds QueryEngine to delegate find and count execution to.\npublic interface CriteriaAccessor<T>; // Resolves the criteria object from given KeyValueQuery.\npublic class ForwardingCloseableIterator<T> extends Object implements CloseableIterator<T>; // Forwards CloseableIterator invocations to the configured Iterator delegate.\npublic interface IdentifierGenerator; // API for components generating identifiers.\npublic final class IterableConverter extends Object; // Converter capable of transforming a given Iterable into a collection type.\npublic interface KeyValueAdapter extends DisposableBean; // KeyValueAdapter unifies access and shields the underlying key/value specific implementation.\npublic interface KeyValueCallback<T>; // Generic callback interface for code that operates on a KeyValueAdapter.\npublic interface KeyValueOperations extends DisposableBean; // Interface that specifies a basic set of key/value operations.\npublic class KeyValuePersistenceExceptionTranslator extends Object implements PersistenceExceptionTranslator; // Simple PersistenceExceptionTranslator implementation for key/value stores that converts the given runtime exception to an appropriate exception from the org.springframework.dao hierarchy.\npublic class KeyValueTemplate extends Object implements KeyValueOperations, ApplicationEventPublisherAware; // Basic implementation of KeyValueOperations.\npublic abstract class QueryEngine<ADAPTER extends KeyValueAdapter,CRITERIA,SORT> extends Object; // Base implementation for accessing and executing KeyValueQuery against a KeyValueAdapter.\npublic interface SortAccessor<T>; // Resolves the Sort object from given KeyValueQuery and potentially converts it into a store specific representation that can be used by the QueryEngine implementation.\npublic class SpelCriteria extends Object; // SpelCriteria allows to pass on a SpelExpression and EvaluationContext to the actual query processor.\npublic class SpelPropertyComparator<T> extends Object implements Comparator<T>; // Comparator implementation using SpelExpression.\npublic class SpelSortAccessor extends Object implements SortAccessor<Comparator<?>>; // SortAccessor implementation capable of creating SpelPropertyComparator.\n", "des": "Core key/value implementation."}
{"index": 3129, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface RefCursorSupport; // Contract for JDBC REF_CURSOR support.\n", "des": "Defines contracts for JDBC REF_CURSOR support."}
{"index": 151, "repo": "ignite-core-2.15.0", "code": "Package: cache\n\nSub Packages: \npackage cache.binary; // Implementation of binary processor.\npackage cache.persistence; // This package contain cache with persistence implementation.\n\nClasses and Interfaces: \nInterface CacheClassLoaderMarker; // It's a marker interface for detecting GridCacheDeploymentManager$CacheClassLoader.\nInterface CacheConfigurationSplitter; // Splits cache configuration into two parts that can be serialized, deserialized separately.\nInterface CacheConflictResolutionManager<K,V>; // Conflict resolver manager.\nInterface CacheEntryPredicate;\nInterface CacheEvictionManager;\nInterface CacheLockCandidates;\nInterface CacheObject;\nInterface CacheObjectValueContext; // Context to get value of cache object.\nInterface CachePartitionExchangeWorkerTask; // Cache partition exchange worker task marker interface.\nInterface CacheWeakQueryIteratorsHolder.WeakReferenceCloseableIterator<T>;\nInterface GridCacheAtomicFuture<R>; // Update future for atomic cache.\nInterface GridCacheConcurrentMap; // Concurrent cache map.\nInterface GridCacheDeployable; // Deployable cache message.\nInterface GridCacheEntryEx; // Internal API for cache entry ('Ex' stands for extended).\nInterface GridCacheFuture<R>; // This interface should be implemented by all distributed futures.\nInterface GridCacheInternal; // Marker interface using in cache implementations.\nInterface GridCacheLockCallback; // Lock and Unlock callbacks.\nInterface GridCacheManager<K,V>; // Interface for cache managers.\nInterface GridCacheMapEntryFactory; // Factory for cache entries.\nInterface GridCachePreloader; // Cache preloader that is responsible for loading cache entries either from remote nodes (for distributed cache) or anywhere else at cache startup.\nInterface GridCacheSharedManager<K,V>; // Cache manager shared across all caches.\nInterface GridCacheUtils.BackupPostProcessingClosure;\nInterface GridCacheVersionedFuture<T>; // Distributed future aware of lock version.\nInterface IgniteCacheExpiryPolicy; // Wrapper for ExpiryPolicy used to track information about cache entries whose time to live was modified after access.\nInterface IgniteCacheOffheapManager;\nInterface IgniteCacheOffheapManager.CacheDataStore;\nInterface IgniteCacheOffheapManager.OffheapInvokeClosure;\nInterface IgniteCacheProxy<K,V>; // Cache proxy.\n", "des": "This package contain cache-related processors & persistence implementation."}
{"index": 2556, "repo": "pulsar-common-3.0.0", "code": "Package: naming\n\nClasses and Interfaces: \npublic class Constants extends Object; // Definition of constants.\npublic class Metadata extends Object; // Validator for metadata configuration.\npublic class NamedEntity extends Object;\npublic class NamespaceName extends Object implements ServiceUnitId; // Parser of a value from the namespace field provided in configuration.\npublic interface ServiceUnitId; // Basic interface for service unit's identification.\npublic class SystemTopicNames extends Object; // Encapsulate the parsing of the completeTopicName name.\npublic class TopicName extends Object implements ServiceUnitId; // Encapsulate the parsing of the completeTopicName name.\n", "des": "Classes to work different configuration values."}
{"index": 1690, "repo": "spring-data-couchbase-5.1.2", "code": "Package: convert\n\nSub Packages: \npackage convert.translation; // This package contains a service interface to translate entities to a Couchbase storable format, and its implementations.\n\nClasses and Interfaces: \npublic abstract class AbstractCouchbaseConverter extends Object implements CouchbaseConverter, InitializingBean; // An abstract CouchbaseConverter that provides the basics for the MappingCouchbaseConverter.\n@ReadingConverter public class BooleanToEnumConverterFactory extends Object implements ConverterFactory<Boolean,Enum>; // Reading Converter factory for Enums.\npublic class ConverterHasNoConversion extends RuntimeException; // PropertyValueConverter throws this when cannot convert the property.\npublic class CouchbaseConversionContext extends Object implements ValueConversionContext<CouchbasePersistentProperty>; // ValueConversionContext that allows to delegate read/write to an underlying CouchbaseConverter.\npublic interface CouchbaseConverter extends EntityConverter<CouchbasePersistentEntity<?>,CouchbasePersistentProperty,Object,CouchbaseDocument>, CouchbaseWriter<Object,CouchbaseDocument>, EntityReader<Object,CouchbaseDocument>; // Marker interface for the converter, identifying the types to and from that can be converted.\npublic class CouchbaseCustomConversions extends CustomConversions; // Value object to capture custom conversion.\npublic static class CouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter extends Object; // CouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter encapsulates creation of CustomConversions.ConverterConfiguration with CouchbaseDB specifics.\npublic class CouchbaseDocumentPropertyAccessor extends MapAccessor; // A property accessor for document properties.\npublic final class CouchbaseJsr310Converters extends Object; // Helper class to register JSR-310 specific Converter implementations.\n@WritingConverter public static enum CouchbaseJsr310Converters.DurationToStringConverter extends Enum<CouchbaseJsr310Converters.DurationToStringConverter> implements Converter<Duration,String>;\n@WritingConverter public static enum CouchbaseJsr310Converters.InstantToLongConverter extends Enum<CouchbaseJsr310Converters.InstantToLongConverter> implements Converter<Instant,Long>;\n@WritingConverter public static enum CouchbaseJsr310Converters.LocalDateTimeToLongConverter extends Enum<CouchbaseJsr310Converters.LocalDateTimeToLongConverter> implements Converter<LocalDateTime,Long>;\n", "des": "This package contains classes used for entity-to-JSON conversions, type mapping and writing."}
{"index": 2886, "repo": "spring-integration-core-6.1.2", "code": "Package: locks\n\nClasses and Interfaces: \npublic final class DefaultLockRegistry extends Object implements LockRegistry; // Default implementation of LockRegistry which uses Masked Hashcode algorithm to obtain locks.\npublic interface ExpirableLockRegistry extends LockRegistry; // A LockRegistry implementing this interface supports the removal of aged locks that are not currently locked.\n@FunctionalInterface public interface LockRegistry; // Strategy for maintaining a registry of shared locks.\npublic final class PassThruLockRegistry extends Object implements LockRegistry; // The LockRegistry implementation which has no effect.\npublic interface RenewableLockRegistry extends LockRegistry; // A LockRegistry implementing this interface supports the renewal of the time to live of a lock.\n", "des": "Provides classes related to locking resources."}
{"index": 2960, "repo": "spring-integration-redis-6.1.2", "code": "Package: inbound\n\nClasses and Interfaces: \npublic class ReactiveRedisStreamMessageProducer extends org.springframework.integration.endpoint.MessageProducerSupport; // A MessageProducerSupport for reading messages from a Redis Stream and publishing them into the provided output channel.\npublic class RedisInboundChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport;\n@ManagedResource @IntegrationManagedResource public class RedisQueueInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanClassLoaderAware;\n@ManagedResource @IntegrationManagedResource public class RedisQueueMessageDrivenEndpoint extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanClassLoaderAware;\npublic class RedisStoreMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<org.springframework.data.redis.support.collections.RedisStore>; // Inbound channel adapter which returns a Message representing a view into a Redis store.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2381, "repo": "spring-batch-core-5.0.2", "code": "Package: configuration\n\nSub Packages: \npackage configuration.annotation; // Annotations and builder factories for java based configuration\npackage configuration.support; // Specific implementations of configuration concerns.\npackage configuration.xml; // Parsers for XML based configuration\n\nClasses and Interfaces: \npublic class BatchConfigurationException extends RuntimeException; // Represents that an error has occurred in the configuration of the base batch infrastructure (the creation of a JobRepository, for example).\npublic class DuplicateJobException extends JobExecutionException; // Checked exception that indicates a name clash when registering Job instances.\npublic interface JobFactory; // Strategy for creating a single job.\npublic interface JobLocator; // A runtime service locator interface for retrieving job configurations by name.\npublic interface JobRegistry extends ListableJobLocator; // A runtime service registry interface for registering job configurations by name.\npublic interface ListableJobLocator extends JobLocator; // A listable extension of JobLocator.\npublic interface StepRegistry; // Registry keeping track of all the Step instances defined in a Job.\n", "des": "Interfaces for registration and location of job configurations."}
{"index": 3293, "repo": "opencms-core-15.0", "code": "Package: loader\n\nClasses and Interfaces: \nInterface I_CmsFileNameGenerator; // Provides methods to generate file names either for the urlName mapping or when using a \"new\" operation in the context of the direct edit interface.\nInterface I_CmsFlexCacheEnabledLoader; // Resource loaders that implement this interface are flex cache enabled.\nInterface I_CmsResourceLoader; // This interface describes a resource loader for OpenCms, a class that can load a resource from the VFS, process it's contents and deliver the result to the user.\nInterface I_CmsResourceStringDumpLoader; // Resource loaders that implement this method can easily provide the contents of a selected targe element as a String.\nInterface I_CmsTemplateContextProvider; // Interface for template context providers.\nClass CmsClientVariant; // Bean that represents a client variant of a template context.\nClass CmsDefaultFileNameGenerator; // The default class used for generating file names either for the urlName mapping or when using a \"new\" operation in the context of the direct edit interface.\nClass CmsDefaultTemplateContextProvider; // Example implementation of a template context provider for deciding between a desktop template and a mobile template.\nClass CmsDumpLoader; // Dump loader for binary or other unprocessed resource types.\nClass CmsImageLoader; // Loader for images from the OpenCms VSF with integrated image scaling and processing capabilities.\nClass CmsImageScaler; // Creates scaled images, acting as it's own parameter container.\nClass CmsJsonMessageContainer; // Simple JSON-based message container.\nClass CmsJspLoader; // The JSP loader which enables the execution of JSP in OpenCms.\nClass CmsMacroFormatterLoader; // Loader for macro formatter.\nClass CmsMimeType; // Describes a MIME type configured in OpenCms.\nClass CmsPointerLoader; // Loader for \"pointers\" to resources in the VFS or to external resources.\nClass CmsRedirectLoader; // Loader for HTML redirects.\nClass CmsResourceManager; // Collects all available resource loaders, resource types and resource collectors at startup and provides methods to access them during OpenCms runtime.\nClass CmsResourceManager.NamedTemplate; // Bean containing a template resource and the name of the template.\nClass CmsSeoFileLoader; // The SEO file loader.\nClass CmsTemplateContext; // A template context is basically a named path to a template JSP, which has both an internal name used as a key, and a user-readable, localizable name.\n", "des": "Low-level functions to manage the loading of resources from the OpenCms VFS."}
{"index": 1649, "repo": "jena-core-4.9.0", "code": "Package: ontology\n\nSub Packages: \npackage ontology.impl; // Provides default implementations for the abstractions defined in the org.apache.jena.ontology package.\n\nClasses and Interfaces: \npublic interface AllDifferent extends OntResource; // Interface defining an individual in which all members of a collection are declared pair-wise disjoint.\npublic interface AllValuesFromRestriction extends Restriction; // A property restriction that requires the named property to have have any range instances to be members of a given class.\npublic interface AnnotationProperty extends OntProperty, Property; // Interface that represents the category of annotation properties in an ontology language.\npublic interface BooleanClassDescription extends OntClass; // Encapsulates a class description formed from a boolean combination of other class descriptions (ie union, intersection or complement).\npublic interface CardinalityQRestriction extends QualifiedRestriction; // Interface representing the ontology abstraction for a qualified cardinality restriction.\npublic interface CardinalityRestriction extends Restriction; // A property restriction that requires the named property to have have exactly the given number of values for a given instance to be a member of the class defined by the restriction.\npublic interface ComplementClass extends BooleanClassDescription; // Class description that is formed from the complement of another class description\npublic class ConversionException extends OntologyException; // Exception that is thrown when an ontology resource is converted to another facet, using as(), and the requested conversion is not possible.\npublic interface DataRange extends OntResource; // Represents an ontology DataRange: a class-like construct that contains only concrete data literals.\npublic interface DatatypeProperty extends OntProperty; // Interface that encapsulates the class of properties whose range values are datatype values (as distinct from ObjectProperty whose values are individuals).\npublic interface EnumeratedClass extends OntClass; // Encapsulates a class description representing a closed enumeration of individuals.\npublic interface FunctionalProperty extends OntProperty; // Interface encapsulating the class of properties that are functional: that is, properties in which a given given domain value has a unique value in the range.\npublic interface HasValueRestriction extends Restriction; // A property restriction that requires the named property to have a given individual as its value.\npublic interface Individual extends OntResource; // Interface that encapsulates an individual in an ontology, sometimes referred to as a fact or assertion, or a member of the a-box.\n", "des": "Provides a set of abstractions and convenience classes for accessing and manipluating ontologies represented in RDF."}
{"index": 3596, "repo": "lucene-test-framework-9.7.0", "code": "Package: similarities\n\nClasses and Interfaces: \nClass AssertingSimilarity; // wraps a similarity with checks for testing\nClass BaseSimilarityTestCase; // Abstract class to do basic tests for a similarity.\nClass RandomSimilarity; // Similarity implementation that randomizes Similarity implementations per-field.\n", "des": "Support for testing similarities."}
{"index": 122, "repo": "ignite-core-2.15.0", "code": "Package: noop\n\nClasses and Interfaces: \nClass NoopEncryptionSpi; // No operation EncryptionSPI implementation.\n", "des": "Contains no-op encryption SPI implementation."}
{"index": 2640, "repo": "spring-integration-sftp-6.1.2", "code": "Package: outbound\n\nClasses and Interfaces: \npublic class SftpMessageHandler extends org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Subclass of FileTransferringMessageHandler for SFTP.\n", "des": "Provides classes for the SFTP outbound channel adapter."}
{"index": 615, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: startlevel\n\nClasses and Interfaces: \nInterface StartLevel; // This service has been replaced by the org.osgi.framework.startlevel package.\n", "des": "Start Level Package Version 1.1."}
{"index": 3796, "repo": "lucene-analysis-common-9.7.0", "code": "Package: lt\n\nClasses and Interfaces: \nClass LithuanianAnalyzer; // Analyzer for Lithuanian.\n", "des": "Analyzer for Lithuanian."}
{"index": 87, "repo": "ignite-core-2.15.0", "code": "Package: deployment\n\nSub Packages: \npackage deployment.local; // Contains default local deployment SPI implementation.\n\nClasses and Interfaces: \nInterface DeploymentListener; // Listener for deployment events.\nInterface DeploymentResource; // Generic abstraction over deployed resource containing resource's name, class and corresponding class loader.\nInterface DeploymentSpi; // Grid deployment SPI is in charge of deploying tasks and classes from different sources.\nClass DeploymentResourceAdapter; // Simple adapter for DeploymentResource interface.\nAnnotation Type IgnoreIfPeerClassLoadingDisabled; // This annotation is for all implementations of DeploymentSpi that may be ignored if peer class loading is disabled.\n", "des": "Contains APIs for deployment SPI."}
{"index": 2466, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: newrelic\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.newrelic.NewRelicMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"newrelic\") @EnableConfigurationProperties(NewRelicProperties.class) public class NewRelicMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to New Relic.\n@ConfigurationProperties(prefix=\"management.newrelic.metrics.export\") public class NewRelicProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring New Relic metrics export.\npublic class NewRelicPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<NewRelicProperties> implements io.micrometer.newrelic.NewRelicConfig; // Adapter to convert NewRelicProperties to a NewRelicConfig.\n", "des": "Support for exporting actuator metrics to New Relic."}
{"index": 696, "repo": "jackson-databind-2.15.2", "code": "Package: type\n\nClasses and Interfaces: \nClass ArrayType; // Array types represent Java arrays, both primitive and object valued.\nClass ClassKey; // Key class, used as an efficient and accurate key for locating per-class values, such as JsonSerializers.\nClass ClassStack; // Simple helper class used to keep track of 'call stack' for classes being referenced (as well as unbound variables)\nClass CollectionLikeType; // Type that represents things that act similar to Collection; but may or may not be instances of that interface.\nClass CollectionType; // Type that represents Java Collection types (Lists, Sets).\nClass MapLikeType; // Type that represents Map-like types; things that consist of key/value pairs but that do not necessarily implement Map, but that do not have enough introspection functionality to allow for some level of generic handling.\nClass MapType; // Type that represents \"true\" Java Map types.\nClass PlaceholderForType; // Helper type used when introspecting bindings for already resolved types, needed for specialization.\nClass ReferenceType; // Specialized SimpleType for types that are referential types, that is, values that can be dereferenced to another value (or null), of different type.\nClass ResolvedRecursiveType; // Internal placeholder type used for self-references.\nClass SimpleType; // Simple types are defined as anything other than one of recognized container types (arrays, Collections, Maps).\nClass TypeBase;\nClass TypeBindings; // Helper class used for resolving type parameters for given class\nClass TypeFactory; // Class used for creating concrete JavaType instances, given various inputs.\nClass TypeModifier; // Class that defines API that can be used to modify details of JavaType instances constructed using TypeFactory.\nClass TypeParser; // Simple recursive-descent parser for parsing canonical JavaType representations and constructing type instances.\nEnum LogicalType; // Set of logical types (or type categories, classes of classes), used for defining applicability of configuration like coercion configuration.\n", "des": "Package that contains concrete implementations of JavaType, as well as the factory (TypeFactory) for constructing instances from various input data types (like Class, Type) and programmatically (for structured types, arrays, Lists and Maps)."}
{"index": 3086, "repo": "spring-ws-core-4.0.5", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic abstract class AbstractFaultCreatingValidatingInterceptor extends AbstractValidatingInterceptor; // Subclass of AbstractValidatingInterceptor that creates a SOAP Fault whenever the request message cannot be validated.\npublic class DelegatingSmartSoapEndpointInterceptor extends DelegatingSmartEndpointInterceptor implements SmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that delegates to a delegate SoapEndpointInterceptor.\npublic class PayloadRootSmartSoapEndpointInterceptor extends DelegatingSmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that only intercepts requests that have a specified namespace URI or local part (or both) as payload root.\npublic class PayloadValidatingInterceptor extends AbstractFaultCreatingValidatingInterceptor; // Interceptor that validates the contents of WebServiceMessages using a schema.\npublic class SoapActionSmartEndpointInterceptor extends DelegatingSmartSoapEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that only intercepts requests that have a specified soap action.\npublic class SoapEnvelopeLoggingInterceptor extends AbstractLoggingInterceptor implements SoapEndpointInterceptor; // SOAP-specific EndpointInterceptor that logs the complete request and response envelope of SoapMessage messages.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes."}
{"index": 1010, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: dom\n\nClasses and Interfaces: \nClass DomContentHandler; // SAX ContentHandler that transforms callback calls to DOM Nodes.\n", "des": "Provides classes that help with DOM: the Document Object Model."}
{"index": 1792, "repo": "spring-integration-file-6.1.2", "code": "Package: synchronizer\n\nClasses and Interfaces: \npublic abstract class AbstractInboundFileSynchronizer<F> extends Object implements InboundFileSynchronizer, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, Closeable; // Base class charged with knowing how to connect to a remote file system, scan it for new files and then download the files.\npublic abstract class AbstractInboundFileSynchronizingMessageSource<F> extends org.springframework.integration.endpoint.AbstractFetchLimitingMessageSource<File> implements org.springframework.integration.support.management.ManageableLifecycle; // Factors out the common logic between the FTP and SFTP adapters.\n@FunctionalInterface public interface InboundFileSynchronizer; // Strategy for synchronizing from a remote File system to a local directory.\n", "des": "Provides classes supporting the synchronization of remote and local file directories."}
{"index": 3481, "repo": "dagger-producers-2.47", "code": "Package: monitoring\n\nClasses and Interfaces: \nInterface ProductionComponentTimingRecorder; // A hook for recording timing of the execution of production components.\nInterface ProductionComponentTimingRecorder.Factory;\nClass ProducerMonitor; // A hook for monitoring the execution of individual producer methods.\nClass ProducerTimingRecorder; // A hook for recording the timing of the execution of individual producer methods.\nClass ProducerToken; // A token that represents an individual producer method.\nClass ProductionComponentMonitor; // A hook for monitoring execution of production components.\nClass ProductionComponentMonitor.Factory;\nClass TimingProductionComponentMonitor; // A monitor that measures the timing of the execution of a production component, and logs those timings with the given recorder.\nClass TimingProductionComponentMonitor.Factory;\nClass TimingRecorders; // Utility methods relating to timing.\n", "des": "This package provides hooks for monitoring producers."}
{"index": 601, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: framework\n\nSub Packages: \npackage framework.launch; // Framework Launch Package Version 1.1.\npackage framework.namespace; // Namespace Package Version 1.0.\npackage framework.startlevel; // Framework Start Level Package Version 1.0.\npackage framework.wiring; // Framework Wiring Package Version 1.1.\n\nClasses and Interfaces: \nInterface AllServiceListener; // A ServiceEvent listener that does not filter based upon package wiring.\nInterface Bundle; // An installed bundle in the Framework.\nInterface BundleActivator; // Customizes the starting and stopping of a bundle.\nInterface BundleContext; // A bundle's execution context within the Framework.\nInterface BundleListener; // A BundleEvent listener.\nInterface BundleReference; // A reference to a Bundle.\nInterface Configurable; // As of 1.2.\nInterface Constants; // Defines standard names for the OSGi environment system properties, service properties, and Manifest header attribute keys.\nInterface Filter; // An RFC 1960-based Filter.\nInterface FrameworkListener; // A FrameworkEvent listener.\nInterface ServiceFactory<S>; // Allows services to provide customized service objects in the OSGi environment.\nInterface ServiceListener; // A ServiceEvent listener.\nInterface ServiceReference<S>; // A reference to a service.\nInterface ServiceRegistration<S>; // A registered service.\nInterface SynchronousBundleListener; // A synchronous BundleEvent listener.\nInterface UnfilteredServiceListener; // A ServiceEvent listener that does not filter based upon any filter string specified to BundleContext.addServiceListener(ServiceListener, String).\nClass AdaptPermission; // A bundle's authority to adapt an object to a type.\nClass AdminPermission; // A bundle's authority to perform specific privileged administrative operations on or to get sensitive information about a bundle.\nClass BundleEvent; // An event from the Framework describing a bundle lifecycle change.\nClass BundlePermission; // A bundle's authority to require or provide a bundle or to receive or attach fragments.\nClass CapabilityPermission; // A bundle's authority to provide or require a capability.\nClass FrameworkEvent; // A general event from the Framework.\nClass FrameworkUtil; // Framework Utility class.\nClass PackagePermission; // A bundle's authority to import or export a package.\nClass ServiceEvent; // An event from the Framework describing a service lifecycle change.\n", "des": "Framework Package Version 1.7."}
{"index": 625, "repo": "freemarker-2.3.32", "code": "Package: jsp\n\nClasses and Interfaces: \nClass EventForwarding; // An instance of this class should be registered as a <listener> in the web.xml descriptor in order to correctly dispatch events to event listeners that are specified in TLD files.\nClass FreemarkerTag; // This feature is not supported anymore, also, it uses the deprecated default Configuration.\nClass TaglibFactory; // A hash model associated with a servlet context that can load JSP tag libraries associated with that servlet context.\nClass TaglibFactory.ClasspathMetaInfTldSource; // To search TLD-s under META-INF/**/*.tld inside classpath root containers, that is, in directories and jar-s that are in the classpath (or are visible for the class loader otherwise).\nClass TaglibFactory.ClearMetaInfTldSource; // When it occurs in the TaglibFactory.MetaInfTldSource list, all TaglibFactory.MetaInfTldSource-s before it will be disabled.\nClass TaglibFactory.MetaInfTldSource; // A location within which we will look for META-INF/**/*.tld-s.\nClass TaglibFactory.WebInfPerLibJarMetaInfTldSource; // To search TLD-s under sevletContext:/WEB-INF/lib/*.{jar,zip}/META-INF/**/*.tld, as requested by the JSP specification.\n", "des": "Classes for two-way FreeMarker-JSP integration."}
{"index": 2862, "repo": "spring-integration-core-6.1.2", "code": "Package: graph\n\nClasses and Interfaces: \npublic class CompositeMessageHandlerNode extends MessageHandlerNode; // Represents a composite message handler.\npublic static class CompositeMessageHandlerNode.InnerHandler extends Object;\npublic class DiscardingMessageHandlerNode extends MessageHandlerNode; // Represents an endpoint that has a discard channel.\npublic abstract class EndpointNode extends IntegrationNode; // Base class for all endpoints.\npublic class ErrorCapableCompositeMessageHandlerNode extends CompositeMessageHandlerNode implements ErrorCapableNode; // Represents a composite message handler that can emit error messages (pollable endpoint).\npublic class ErrorCapableDiscardingMessageHandlerNode extends DiscardingMessageHandlerNode implements ErrorCapableNode; // Represents an endpoint that has a discard channel and can emit errors (pollable endpoint).\npublic class ErrorCapableEndpointNode extends EndpointNode implements ErrorCapableNode; // Represents nodes that can natively handle errors.\npublic class ErrorCapableMessageHandlerNode extends MessageHandlerNode implements ErrorCapableNode; // Represents a message handler that can produce errors (pollable).\npublic interface ErrorCapableNode; // Nodes implementing this interface are capable of emitting errors.\npublic class ErrorCapableRoutingNode extends RoutingMessageHandlerNode implements ErrorCapableNode; // Represents an endpoint that can route to multiple channels and can emit errors (pollable endpoint).\npublic class Graph extends Object; // This object can be exposed, for example, as a JSON object over HTTP.\n@ImportRuntimeHints(org.springframework.integration.graph.IntegrationGraphRuntimeHints.class) public class IntegrationGraphServer extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>; // Builds the runtime object model graph.\npublic abstract class IntegrationNode extends Object; // Base class for all nodes.\npublic class LinkNode extends Object; // Represents a link between nodes.\npublic static enum LinkNode.Type extends Enum<LinkNode.Type>;\npublic class MessageChannelNode extends IntegrationNode implements SendTimersAware; // Represents a message channel.\npublic class MessageGatewayNode extends ErrorCapableEndpointNode; // Represents an inbound gateway.\n", "des": "Provides classes related to the runtime object graph."}
{"index": 598, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: signedcontent\n\nClasses and Interfaces: \nInterface SignedContent; // A SignedContent object represents content which may be signed.\nInterface SignedContentEntry; // A SignedContentEntry represents a content entry which may be signed.\nInterface SignedContentFactory; // A factory used to create SignedContent objects.\nInterface SignerInfo; // A SignerInfo object represents a single signer chain.\nClass InvalidContentException; // Indicates that signed content is invalid according to one of the signers.\n", "des": "Equinox Signed Content"}
{"index": 1880, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: dao\n\nClasses and Interfaces: \npublic abstract class DataAccessException extends org.apache.shiro.lang.ShiroException; // Generic exception representing a problem when attempting to access data.\npublic class InvalidResourceUsageException extends DataAccessException; // Root exception indicating invalid or incorrect usage of a data access resource.\n", "des": "Package containing various components useful when building Data Access Objects (DAOs), including a generic Data Access Exception hierarchy."}
{"index": 1305, "repo": "groovy-all-4.0.13", "code": "Package: lang\n\nClasses and Interfaces: \npublic interface AdaptingMetaClass extends MetaClass; // An interface for MetaClass instances that \"adapt\" other MetaClass instances such as a proxy or delegating MetaClass.\npublic class BenchmarkInterceptor extends Object implements Interceptor; // Interceptor that registers the timestamp of each method call before and after invocation.\npublic class Binding extends GroovyObjectSupport; // Represents the variable bindings of a script which can be altered from outside the script object or created outside of a script and passed into it.\npublic interface Buildable;\n@Documented @Retention(SOURCE) @Target(TYPE) public @interface Category; // Transforms an instance-style Groovy class or interface to become a static-style conventional Groovy category.\npublic abstract class Closure<V> extends GroovyObjectSupport implements Cloneable, Runnable, GroovyCallable<V>, Serializable; // Represents any closure object in Groovy.\npublic class ClosureException extends RuntimeException; // An exception thrown by a closure invocation\npublic interface ClosureInvokingMethod; // An interface for MetaMethods that invoke closures to implements.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD}) public @interface Delegate; // Annotation to automatically delegate part of the functionality of an owner class to the annotated delegation target.\n@Documented @Retention(RUNTIME) @Target({PARAMETER,METHOD}) public @interface DelegatesTo; // This annotation can be used by API or DSL writers to document parameters which accept a closure.\n@Retention(RUNTIME) @Target(PARAMETER) public static @interface DelegatesTo.Target; // Parameter annotation used to specify the delegate for a @DelegatesTo annotated parameter of the same method.\npublic class DelegatingMetaClass extends Object implements MetaClass, MutableMetaClass, GroovyObject;\npublic class DeprecationException extends RuntimeException; // Use this exception to mark a method implementation as being deprecated.\npublic class EmptyRange<T extends Comparable> extends AbstractList<T> implements Range<T>; // Constructing Ranges like 0..<0\npublic class ExpandoMetaClass extends MetaClassImpl implements GroovyObject; // ExpandoMetaClass is a MetaClass that behaves like an Expando, allowing the addition or replacement of methods, properties and constructors on the fly.\n", "des": "Core Groovy language classes for implementing data structures, closures, metadata and so forth."}
{"index": 14, "repo": "commons-collections4-4.4", "code": "Package: collections4\n\nSub Packages: \npackage collections4.bag; // This package contains implementations of the Bag and SortedBag interfaces.\npackage collections4.bidimap; // This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces.\npackage collections4.collection; // This package contains implementations of the Collection interface.\npackage collections4.comparators; // This package contains implementations of the Comparator interface.\npackage collections4.functors; // This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces.\npackage collections4.iterators; // This package contains implementations of the Iterator interface.\npackage collections4.keyvalue; // This package contains implementations of collection and map related key/value classes.\npackage collections4.list; // This package contains implementations of the List interface.\npackage collections4.map; // This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces.\npackage collections4.multimap; // This package contains implementations of the MultiValuedMap interfaces.\npackage collections4.multiset; // This package contains implementations of the MultiSet interface.\npackage collections4.properties; // This package contains classes to extend or customize the behavior of Properties.\npackage collections4.queue; // This package contains implementations for the Queue interface.\npackage collections4.sequence; // This package provides classes to compare two sequences of objects.\npackage collections4.set; // This package contains implementations of the Set, SortedSet and NavigableSet interfaces.\npackage collections4.splitmap; // The \"split map\" concept is that of an object that implements the Put and Get interfaces, with differing generic types.\npackage collections4.trie; // This package contains implementations of the Trie interface.\n\nClasses and Interfaces: \nInterface Bag<E>; // Defines a collection that counts the number of times an object appears in the collection.\nInterface BidiMap<K,V>; // Defines a map that allows bidirectional lookup between key and values.\nInterface BoundedCollection<E>; // Defines a collection that is bounded in size.\nInterface BoundedMap<K,V>; // Defines a map that is bounded in size.\nInterface Closure<T>; // Defines a functor interface implemented by classes that do something.\n", "des": "This package contains the interfaces and utilities shared across all the subpackages of this component."}
{"index": 1379, "repo": "spring-boot-actuator-3.1.1", "code": "Package: elasticsearch\n\nClasses and Interfaces: \npublic class ElasticsearchReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // HealthIndicator for an Elasticsearch cluster using a ReactiveElasticsearchClient.\n", "des": "Actuator support for Elasticsearch dependent on Spring Data."}
{"index": 3277, "repo": "opencms-core-15.0", "code": "Package: tools\n\nClasses and Interfaces: \nClass CmsContainerPageCopier; // Helper class for copying container pages including some of their elements.\nEnum CmsContainerPageCopier.CopyMode; // Enum representing the element copy mode.\nClass CmsContainerPageCopier.NoCustomReplacementException; // Exception indicating that no custom replacement element was found for a type which requires replacement.\n", "des": "Tools for i18n."}
{"index": 1417, "repo": "spring-boot-actuator-3.1.1", "code": "Package: http\n\nClasses and Interfaces: \npublic enum Outcome extends Enum<Outcome>; // The outcome of an HTTP request.\n", "des": "Support classes for HTTP-related metrics."}
{"index": 3178, "repo": "tomcat-api-10.1", "code": "Package: valves\n\nClasses and Interfaces: \nInterface AbstractAccessLogValve.AccessLogElement; // AccessLogElement writes the partial message into the buffer.\nInterface AbstractAccessLogValve.CachedElement; // Marks an AccessLogElement as needing to be have the value cached at the start of the request rather than just recorded at the end as the source data for the element may not be available at the end of the request.\nClass AbstractAccessLogValve; // Abstract implementation of the Valve interface that generates a web server access log with the detailed line contents matching a configurable pattern.\nClass AbstractAccessLogValve.ByteSentElement; // write bytes sent, excluding HTTP headers - %b, %B\nClass AbstractAccessLogValve.ConnectionStatusElement; // Write connection status when response is completed - %X\nClass AbstractAccessLogValve.CookieElement; // write a specific cookie - %{xxx}c\nClass AbstractAccessLogValve.DateFormatCache; // Cache structure for formatted timestamps based on seconds.\nClass AbstractAccessLogValve.ElapsedTimeElement; // write time taken to process the request - %D, %T\nClass AbstractAccessLogValve.FirstByteTimeElement; // write time until first byte is written (commit time) in millis - %F\nClass AbstractAccessLogValve.HeaderElement; // write incoming headers - %{xxx}i\nClass AbstractAccessLogValve.HttpStatusCodeElement; // write HTTP status code of the response - %s\nClass AbstractAccessLogValve.LocalAddrElement; // write local IP address - %A\nClass AbstractAccessLogValve.LogicalUserNameElement; // write remote logical username from identd (always returns '-') - %l\nClass AbstractAccessLogValve.MethodElement; // write request method (GET, POST, etc.) - %m\nClass AbstractAccessLogValve.QueryElement; // write Query string (prepended with a '?'\nClass AbstractAccessLogValve.RequestAttributeElement; // write an attribute in the ServletRequest - %{xxx}r\nClass AbstractAccessLogValve.RequestElement; // write first line of the request (method and request URI) - %r\nClass AbstractAccessLogValve.RequestURIElement; // write requested URL path - %U\nClass AbstractAccessLogValve.ResponseHeaderElement; // write a specific response header - %{xxx}o\n", "des": "This package contains a variety of small Valve implementations that do not warrant being packaged separately."}
{"index": 1621, "repo": "spring-kafka-3.0.9", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface DltHandler; // Annotation to determine the method the should process the DLT topic message.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(KafkaListenerConfigurationSelector.class) public @interface EnableKafka; // Enable Kafka listener annotated endpoints that are created under the covers by a AbstractListenerContainerFactory.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(RetryTopicConfigurationSupport.class) @EnableKafka public @interface EnableKafkaRetryTopic; // Enables the non-blocking topic-based delayed retries feature.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(KafkaStreamsDefaultConfiguration.class) public @interface EnableKafkaStreams; // Enable default Kafka Streams components.\npublic class KafkaBootstrapConfiguration extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // An ImportBeanDefinitionRegistrar class that registers a KafkaListenerAnnotationBeanPostProcessor bean capable of processing Spring's @KafkaListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented public @interface KafkaHandler; // Annotation that marks a method to be the target of a Kafka message listener within a class that is annotated with KafkaListener.\n@Target({TYPE,METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented @Repeatable(KafkaListeners.class) public @interface KafkaListener; // Annotation that marks a method to be the target of a Kafka message listener on the specified topics.\npublic class KafkaListenerAnnotationBeanPostProcessor<K,V> extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.core.Ordered, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton; // Bean post-processor that registers methods annotated with KafkaListener to be invoked by a Kafka message listener container created under the covers by a KafkaListenerContainerFactory according to the parameters of the annotation.\n", "des": "Package for kafka annotations"}
{"index": 3339, "repo": "opencms-core-15.0", "code": "Package: user\n\nClasses and Interfaces: \nInterface I_CmsFilterableTable; // Interface for tables which support a filter function.\nInterface I_CmsOuTreeType; // Interface for OU tree types.\nInterface I_CmsPasswordFetcher; // Interface for fetching randomly generated passwords.\nInterface I_CmsToggleTable; // Interface for toggable tables.\nInterface I_CmsTreeTypeProvider; // Interface for providers of tree types in the account management overview tree.\nClass A_CmsEditUserGroupRoleDialog; // Abstract class for dialogs to change role or groups of a given user.\nClass A_CmsImportExportUserDialog; // Class to export user.\nClass CmsAccountsApp; // App for the OU Management.\nClass CmsAccountsAppConfiguration; // Configuration for Account Management app.\nClass CmsAdditionalInfosDialog; // Class for the Additional User info dialog.\nClass CmsAvailableRoleOrPrincipalTable; // Table showing available items from A_CmsEditUserGroupRoleDialog.\nClass CmsCsvWriter; // Helper to produce Csv files.\nClass CmsCurrentRoleOrPrincipalTable; // Class for the table to view and edit groups of a given user.\nClass CmsDefaultTreeTypeProvider; // Default tree type provider implementation.\nClass CmsDeleteMultiplePrincipalDialog; // Dialog for delete multiple principal.\nClass CmsDeleteOUDialog; // Dialog for delete of principals and ous.\nClass CmsGeneratePasswordDialog; // Dialog to generate a random password.\nClass CmsGroupEditDialog; // Class for the dialog to edit or create a CmsGroup.\nClass CmsGroupEditParameters; // The group edit parameters.\nClass CmsGroupsOfUserTable; // Table showing all Groups of a user.\nClass CmsGroupTable; // Class for the table containing groups of a ou.\nClass CmsImportExportUserDialog; // Dialog for CSV im- and export.\nClass CmsImportUserThread; // Class for the import user thread.\nClass CmsMoveUserToOU; // Dialog to change OU of given user.\nClass CmsNewElementDialog; // Dialog to create new element.\nClass CmsOUEditDialog; // Class for the ou edit and new dialog.\nClass CmsOUHandler; // Ou Handler.\nClass CmsOUTable; // Class to show ous in table for account management.\nClass CmsOuTree; // Class for the OU Tree.\n", "des": "Contains classes of the user manager app."}
{"index": 2636, "repo": "spring-integration-sftp-6.1.2", "code": "Package: dsl\n\nClasses and Interfaces: \npublic final class Sftp extends Object; // The factory for SFTP components.\npublic class SftpInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpInboundChannelAdapterSpec,SftpInboundFileSynchronizingMessageSource>; // A RemoteFileInboundChannelAdapterSpec for an SftpInboundFileSynchronizingMessageSource.\npublic class SftpMessageHandlerSpec extends org.springframework.integration.file.dsl.FileTransferringMessageHandlerSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpMessageHandlerSpec>;\npublic class SftpOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpOutboundGatewaySpec>;\npublic class SftpStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpStreamingInboundChannelAdapterSpec,SftpStreamingMessageSource>;\n", "des": "Provides SFTP Components for the Java DSL."}
{"index": 3722, "repo": "solr-core-9.3.0", "code": "Package: stats\n\nClasses and Interfaces: \nInterface HttpClientMetricNameStrategy; // Strategy for creating metric names for HttpClient Copied from metrics-httpclient library\nInterface InstrumentedHttpListenerFactory.NameStrategy;\nClass InstrumentedHttpListenerFactory; // A HttpListenerFactory tracks metrics interesting to solr Inspired and partially copied from dropwizard httpclient library\nClass InstrumentedHttpRequestExecutor; // Sub-class of HttpRequestExecutor which tracks metrics interesting to solr Inspired and partially copied from dropwizard httpclient library\nClass InstrumentedPoolingHttpClientConnectionManager; // Sub-class of PoolingHttpClientConnectionManager which tracks metrics interesting to Solr.\nClass MetricUtils; // Metrics specific utility functions.\n", "des": "Utilities for collecting statistics"}
{"index": 1232, "repo": "spring-hateoas-2.1.2", "code": "Package: alps\n\nClasses and Interfaces: \npublic final class Alps extends Object; // An ALPS document.\npublic static class Alps.AlpsBuilder extends Object;\npublic class AlpsLinkDiscoverer extends JsonPathLinkDiscoverer; // LinkDiscoverer implementation to find ALPS-based links.\npublic final class Descriptor extends Object; // A value object for an ALPS descriptor.\npublic static class Descriptor.DescriptorBuilder extends Object;\npublic final class Doc extends Object; // A value object for an ALPS doc element.\npublic static class Doc.DocBuilder extends Object;\npublic final class Ext extends Object; // A value object for an ALPS ext element.\npublic static class Ext.ExtBuilder extends Object;\npublic enum Format extends Enum<Format>; // Enum for all ALPS doc formats.\npublic enum Type extends Enum<Type>; // An enum for ALPS descriptor types\n", "des": "Value objects to build ALPS metadata."}
{"index": 2348, "repo": "spring-boot-3.1.1", "code": "Package: undertow\n\nClasses and Interfaces: \npublic interface ConfigurableUndertowWebServerFactory extends ConfigurableWebServerFactory; // ConfigurableWebServerFactory for Undertow-specific features.\n@FunctionalInterface public interface HttpHandlerFactory; // Factory used by UndertowServletWebServer to add HttpHandlers.\n@FunctionalInterface public interface UndertowBuilderCustomizer; // Callback interface that can be used to customize an Undertow Undertow.Builder.\n@FunctionalInterface public interface UndertowDeploymentInfoCustomizer; // Callback interface that can be used to customize an Undertow DeploymentInfo.\npublic class UndertowReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableUndertowWebServerFactory; // ReactiveWebServerFactory that can be used to create UndertowWebServers.\npublic class UndertowServletWebServer extends UndertowWebServer; // WebServer that can be used to control an embedded Undertow server.\npublic class UndertowServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableUndertowWebServerFactory, org.springframework.context.ResourceLoaderAware; // ServletWebServerFactory that can be used to create UndertowServletWebServers.\npublic class UndertowWebServer extends Object implements WebServer; // WebServer that can be used to control an Undertow web server.\n", "des": "Embedded reactive and servlet web server implementations backed by Undertow."}
{"index": 404, "repo": "commons-jexl3-3.3", "code": "Package: scripting\n\nClasses and Interfaces: \nClass JexlScriptEngine; // Implements the JEXL ScriptEngine for JSF-223.\nClass JexlScriptEngineFactory; // Implements the JEXL ScriptEngineFactory for JSF-223.\nClass Main; // Test application for JexlScriptEngine (JSR-223 implementation).\n", "des": "Contains the JSR-223 Scripting Engine for JEXL script."}
{"index": 3540, "repo": "opennlp-tools-2.2.0", "code": "Package: chunking\n\nClasses and Interfaces: \nClass BuildContextGenerator; // Generates predictive contexts for deciding how constituents should be combined.\nClass CheckContextGenerator; // Generates predictive context for deciding when a constituent is complete.\nClass Parser; // A shift reduce style Parser implementation based on Adwait Ratnaparkhi's 1998 thesis.\nClass ParserEventStream; // Wrapper class for one of four shift-reduce parser event streams.\n", "des": "Package containing code for performing full syntactic parsing using shift/reduce-style decisions."}
{"index": 2478, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: jpa\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) @AutoConfigureAfter({MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({jakarta.persistence.EntityManagerFactory.class,org.hibernate.SessionFactory.class,org.hibernate.stat.HibernateMetrics.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({jakarta.persistence.EntityManagerFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class HibernateMetricsAutoConfiguration extends Object implements org.springframework.beans.factory.SmartInitializingSingleton; // Auto-configuration for metrics on all available Hibernate EntityManagerFactory instances that have statistics enabled.\n", "des": "Auto-configuration for JPA metrics."}
{"index": 2414, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: beans\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.beans.BeansEndpoint.class) public class BeansEndpointAutoConfiguration extends Object; // Auto-configuration for the BeansEndpoint.\n", "des": "Auto-configuration for actuator Spring Bean concerns."}
{"index": 2562, "repo": "pulsar-common-3.0.0", "code": "Package: path\n\nClasses and Interfaces: \npublic class PolicyPath extends Object; // Policy path utilities.\n", "des": "Paths for pulsar policies."}
{"index": 3299, "repo": "opencms-core-15.0", "code": "Package: newsletter\n\nClasses and Interfaces: \nInterface I_CmsNewsletter; // Interface for the newsletter.\nInterface I_CmsNewsletterContent; // Every I_CmsNewsletter contains a list of I_CmsNewsletterContent objects.\nInterface I_CmsNewsletterRecipient; // Interface for recipients of I_CmsNewsletter objects.\nClass CmsNewsletter; // Basic implementation of the interface I_CmsNewsletter.\nClass CmsNewsletterContent; // Content for newsletters.\nClass CmsNewsletterContentType; // Type definition class for email content types.\nClass CmsNewsletterDistributor; // A content distributor that sends the extracted xmlcontent data to the recepient via email.\nClass CmsSimpleNewsletterRecipient; // Simple implementation of interface I_CmsNewsletterRecipient, with I_CmsNewsletterRecipient.isSubscriber(org.opencms.newsletter.I_CmsNewsletterContent) always returning true.\n", "des": "Contains classes to distribute newsletters."}
{"index": 2027, "repo": "spring-messaging-6.0.11", "code": "Package: annotation\n\nSub Packages: \npackage annotation.reactive; // Support classes for working with annotated message-handling methods with non-blocking, reactive contracts.\npackage annotation.support; // Support classes for working with annotated message-handling methods.\n\nClasses and Interfaces: \n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface DestinationVariable; // Annotation that indicates a method parameter should be bound to a template variable in a destination template string.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface Header; // Annotation which indicates that a method parameter should be bound to a message header.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface Headers; // Annotation which indicates that a method parameter should be bound to the headers of a message.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(MessageMappingReflectiveProcessor.class) public @interface MessageExceptionHandler; // Annotation for handling exceptions thrown from message-handling methods within a specific handler class.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(MessageMappingReflectiveProcessor.class) public @interface MessageMapping; // Annotation for mapping a Message onto a message-handling method by matching the declared patterns to a destination extracted from the message.\npublic class MessageMappingReflectiveProcessor extends Object implements org.springframework.aot.hint.annotation.ReflectiveProcessor; // ReflectiveProcessor implementation for types annotated with @MessageMapping, @SubscribeMapping and @MessageExceptionHandler.\n@Target({PARAMETER,METHOD}) @Retention(RUNTIME) @Documented public @interface Payload; // Annotation that binds a method parameter to the payload of a message.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface SendTo; // Annotation that indicates a method's return value should be converted to a Message if necessary and sent to the specified destination.\npublic interface ValueConstants; // Common annotation value constants.\n", "des": "Annotations and support classes for handling messages."}
{"index": 3687, "repo": "solr-core-9.3.0", "code": "Package: schema\n\nClasses and Interfaces: \nInterface DateValueFieldType; // Marker interface for Date-valued field types.\nInterface DoubleValueFieldType; // Marker interface for double-valued field types.\nInterface ExchangeRateProvider; // Interface for providing pluggable exchange rate providers to @CurrencyField\nInterface FloatValueFieldType; // Marker interface for float-valued field types.\nInterface HasImplicitIndexAnalyzer; // Marker interface for field types that have an implicit (non-user-configurable) index-time schema.\nInterface IntValueFieldType; // Marker interface for int-valued field types.\nInterface LongValueFieldType; // Marker interface for long-valued field types.\nInterface NumericValueFieldType; // Marker interface for numeric-valued field types.\nInterface PreAnalyzedField.PreAnalyzedParser; // Parse the input and return the stored part and the tokens with attributes.\nInterface SchemaAware; // An interface that can be extended to provide a callback mechanism for informing an IndexSchema instance of changes to it, dynamically performed at runtime.\nInterface SpatialQueryable; // Indicate that the implementing class is capable of generating a Query against spatial resources.\nClass AbstractEnumField; // Abstract Field type for support of string values with custom sort order.\nClass AbstractEnumField.EnumMapping; // Models all the info contained in an enums config XML file\nClass AbstractSpatialFieldType<T extends org.apache.lucene.spatial.SpatialStrategy>; // Abstract base class for Solr FieldTypes based on a Lucene 4 SpatialStrategy.\nClass AbstractSpatialPrefixTreeFieldType<T extends org.apache.lucene.spatial.prefix.PrefixTreeStrategy>;\nClass AbstractSubTypeFieldType; // An abstract base class for FieldTypes that delegate work to another FieldType.\nClass BBoxField;\nClass BinaryField;\nClass BoolField;\nClass ClassicIndexSchemaFactory;\nClass CollationField; // Field for collated sort keys.\nClass CoordinateFieldType; // A CoordinateFieldType is the base class for FieldTypes that have semantics related to items in a coordinate system.\nClass CopyField; // CopyField contains all the information of a valid copy fields in an index.\nClass CurrencyField;\nClass CurrencyFieldType; // Field type for support of monetary values.\nClass CurrencyValue; // Represents a Currency field value, which includes a long amount and ISO currency code.\n", "des": "IndexSchema and FieldType implementations for powering schema.xml"}
{"index": 2677, "repo": "spring-session-core-3.1.1", "code": "Package: session\n\nClasses and Interfaces: \npublic class SpringSessionWebSessionStore<S extends Session> extends Object implements org.springframework.web.server.session.WebSessionStore; // The WebSessionStore implementation that provides the WebSession implementation backed by a Session returned by the ReactiveSessionRepository.\n", "des": "Spring Session reactive web support."}
{"index": 2539, "repo": "spring-security-core-6.1.2", "code": "Package: jdbc\n\nClasses and Interfaces: \npublic class JdbcDaoImpl extends org.springframework.jdbc.core.support.JdbcDaoSupport implements UserDetailsService, org.springframework.context.MessageSourceAware; // UserDetailsService implementation which retrieves the user details (username, password, enabled flag, and authorities) from a database using JDBC queries.\n", "des": "Exposes a JDBC-based authentication repository, implementing org.springframework.security.core.userdetails.UserDetailsService UserDetailsService."}
{"index": 394, "repo": "amqp-client-5.18.0", "code": "Package: nio\n\nClasses and Interfaces: \nInterface ByteBufferFactory; // Contract to create ByteBuffers.\nInterface NioQueue; // Contract to exchange frame between application threads and NIO thread.\nInterface WriteRequest;\nClass BlockingQueueNioQueue; // Bridge between NioQueue and JDK's BlockingQueue.\nClass ByteBufferOutputStream; // Bridge between the byte buffer and stream worlds.\nClass DefaultByteBufferFactory; // Default ByteBufferFactory that creates heap-based ByteBuffers.\nClass FrameBuilder; // Class to create AMQP frames from a ReadableByteChannel.\nClass FrameWriteRequest;\nClass HeaderWriteRequest;\nClass NioContext; // Context when creating resources for a NIO-based connection.\nClass NioHelper;\nClass NioLoop; // Logic of the NIO loop.\nClass NioLoopContext;\nClass NioParams; // Parameters used to configure the NIO mode of a ConnectionFactory.\nClass SelectorHolder;\nClass SocketChannelFrameHandler;\nClass SocketChannelFrameHandlerFactory;\nClass SocketChannelFrameHandlerState;\nClass SocketChannelRegistration;\nClass SslEngineByteBufferOutputStream; // Bridge between the byte buffer and stream worlds.\nClass SslEngineFrameBuilder; // Sub-class of FrameBuilder that unwraps crypted data from the network.\nClass SslEngineHelper;\n", "des": "NIO network connector."}
{"index": 584, "repo": "commons-collections-3.2.2", "code": "Package: map\n\nClasses and Interfaces: \nInterface CompositeMap.MapMutator; // This interface allows definition for all of the indeterminate mutators in a CompositeMap, as well as providing a hook for callbacks on key collisions.\nClass AbstractHashedMap; // An abstract implementation of a hash-based map which provides numerous points for subclasses to override.\nClass AbstractHashedMap.EntrySet; // EntrySet implementation.\nClass AbstractHashedMap.EntrySetIterator; // EntrySet iterator.\nClass AbstractHashedMap.HashEntry; // HashEntry used to store the data.\nClass AbstractHashedMap.HashIterator; // Base Iterator\nClass AbstractHashedMap.HashMapIterator; // MapIterator implementation.\nClass AbstractHashedMap.KeySet; // KeySet implementation.\nClass AbstractHashedMap.KeySetIterator; // KeySet iterator.\nClass AbstractHashedMap.Values; // Values implementation.\nClass AbstractHashedMap.ValuesIterator; // Values iterator.\nClass AbstractLinkedMap; // An abstract implementation of a hash-based map that links entries to create an ordered map and which provides numerous points for subclasses to override.\nClass AbstractLinkedMap.EntrySetIterator; // EntrySet iterator.\nClass AbstractLinkedMap.KeySetIterator; // KeySet iterator.\nClass AbstractLinkedMap.LinkEntry; // LinkEntry that stores the data.\nClass AbstractLinkedMap.LinkIterator; // Base Iterator that iterates in link order.\nClass AbstractLinkedMap.LinkMapIterator; // MapIterator implementation.\nClass AbstractLinkedMap.ValuesIterator; // Values iterator.\nClass AbstractMapDecorator; // Provides a base decorator that enables additional functionality to be added to a Map via decoration.\nClass AbstractOrderedMapDecorator; // Provides a base decorator that enables additional functionality to be added to an OrderedMap via decoration.\nClass AbstractReferenceMap; // An abstract implementation of a hash-based map that allows the entries to be removed by the garbage collector.\nClass AbstractReferenceMap.ReferenceEntry; // A MapEntry implementation for the map.\nClass AbstractSortedMapDecorator; // Provides a base decorator that enables additional functionality to be added to a Map via decoration.\nClass CaseInsensitiveMap; // A case-insensitive Map.\nClass CompositeMap; // Decorates a map of other maps to provide a single unified view.\n", "des": "This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces."}
{"index": 2010, "repo": "spring-boot-devtools-3.1.1", "code": "Package: filewatch\n\nClasses and Interfaces: \npublic final class ChangedFile extends Object; // A single file that has changed.\npublic static enum ChangedFile.Type extends Enum<ChangedFile.Type>; // Change types.\npublic final class ChangedFiles extends Object implements Iterable<ChangedFile>; // A collections of files from a specific source directory that have changed.\n@FunctionalInterface public interface FileChangeListener; // Callback interface when file changes are detected.\npublic class FileSystemWatcher extends Object; // Watches specific directories for file changes.\n@FunctionalInterface public interface FileSystemWatcherFactory; // Factory used to create new FileSystemWatcher instances.\npublic interface SnapshotStateRepository; // Repository used by FileSystemWatcher to save file/directory snapshots across restarts.\n", "des": "Class to watch the local filesystem for changes."}
{"index": 2547, "repo": "pulsar-common-3.0.0", "code": "Package: allocator\n\nClasses and Interfaces: \npublic class PulsarByteBufAllocator extends Object; // Holder of a ByteBuf allocator.\n", "des": "Classes implementing pulsar allocator."}
{"index": 1980, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: connection\n\nClasses and Interfaces: \npublic interface ConnectionDetails; // Base interface for types that provide the details required to establish a connection to a remote service.\npublic class ConnectionDetailsFactories extends Object; // A registry of ConnectionDetailsFactory instances.\npublic interface ConnectionDetailsFactory<S,D extends ConnectionDetails>; // A factory to create ConnectionDetails from a given source.\npublic class ConnectionDetailsFactoryNotFoundException extends RuntimeException; // RuntimeException thrown when a ConnectionDetailsFactory could not be found.\npublic class ConnectionDetailsNotFoundException extends RuntimeException; // RuntimeException thrown when required ConnectionDetails could not be found.\n", "des": "Support for service connections that affect auto-configuration."}
{"index": 1878, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: permission\n\nClasses and Interfaces: \npublic class AllPermission extends Object implements Permission, Serializable; // An all AllPermission instance is one that always implies any other permission; that is, its implies method always returns true.\npublic class DomainPermission extends WildcardPermission; // Provides a base Permission class from which type-safe/domain-specific subclasses may extend.\npublic class InvalidPermissionStringException extends org.apache.shiro.lang.ShiroException; // Thrown by PermissionResolver.resolvePermission(String) when the String being parsed is not valid for that resolver.\npublic interface PermissionResolver; // A PermissionResolver resolves a String value and converts it into a Permission instance.\npublic interface PermissionResolverAware; // Interface implemented by a component that wishes to use any application-configured PermissionResolver that might already exist instead of potentially creating one itself.\npublic interface RolePermissionResolver; // A RolePermissionResolver resolves a String value and converts it into a Collection of Permission instances.\npublic interface RolePermissionResolverAware; // Interface implemented by a component that wishes to use any application-configured RolePermissionResolver that might already exist instead of potentially creating one itself.\npublic class WildcardPermission extends Object implements Permission, Serializable; // A WildcardPermission is a very flexible permission construct supporting multiple levels of permission matching.\npublic class WildcardPermissionResolver extends Object implements PermissionResolver; // PermissionResolver implementation that returns a new WildcardPermission based on the input string.\n", "des": "Support and default implementations for Shiro's Permission interface."}
{"index": 523, "repo": "commons-vfs2-2.9.0", "code": "Package: http4\n\nClasses and Interfaces: \nClass Http4FileContentInfoFactory; // Creates FileContentInfoFactory instances for http4 provider.\nClass Http4FileNameParser; // FileNameParser implementation for http4 provider, setting default port to 80.\nClass Http4FileObject<FS extends Http4FileSystem>; // A file object backed by Apache HttpComponents HttpClient.\nClass Http4FileProvider; // FileProvider implementation using HttpComponents HttpClient library.\nClass Http4FileSystem; // http4 file system.\nClass Http4FileSystemConfigBuilder; // Configuration options builder utility for http4 provider.\n", "des": "The HTTP4 File Provider"}
{"index": 1838, "repo": "spring-test-6.0.11", "code": "Package: cache\n\nClasses and Interfaces: \npublic interface ContextCache; // ContextCache defines the SPI for caching Spring ApplicationContexts within the Spring TestContext Framework.\npublic abstract class ContextCacheUtils extends Object; // Collection of utilities for working with ContextCaches.\npublic class DefaultCacheAwareContextLoaderDelegate extends Object implements CacheAwareContextLoaderDelegate; // Default implementation of the CacheAwareContextLoaderDelegate interface.\npublic class DefaultContextCache extends Object implements ContextCache; // Default implementation of the ContextCache API.\n", "des": "Support for context caching within the Spring TestContext Framework."}
{"index": 614, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: permissionadmin\n\nClasses and Interfaces: \nInterface PermissionAdmin; // The Permission Admin service allows management agents to manage the permissions of bundles.\nClass PermissionInfo; // Permission representation used by the Permission Admin service.\n", "des": "Permission Admin Package Version 1.2."}
{"index": 567, "repo": "hadoop-common-3.3.4", "code": "Package: util\n\nClasses and Interfaces: \nInterface QuantileEstimator;\nClass MBeans; // This util class provides a method to register an MBean using our standard naming convention as described in the doc for {link MBeans.register(String, String, Object).\nClass MetricsCache; // A metrics cache for sinks that don't support sparse updates.\nClass MetricsCache.Record; // Cached record\nClass SampleStat.MinMax; // Helper to keep running min/max\nClass Servers; // Helpers to handle server addresses\n", "des": "General helpers for implementing source and sinks"}
{"index": 3567, "repo": "lucene-codecs-9.7.0", "code": "Package: bloom\n\nClasses and Interfaces: \nClass BloomFilterFactory; // Class used to create index-time FuzzySet appropriately configured for each field.\nClass BloomFilteringPostingsFormat; // A PostingsFormat useful for low doc-frequency fields such as primary keys.\nClass DefaultBloomFilterFactory; // Default policy is to allocate a bitset with 10% saturation given a unique term per document.\nClass FuzzySet; // A class used to represent a set of many, potentially large, values (e.g.\nClass HashFunction; // Base class for hashing functions that can be referred to by name.\nClass MurmurHash64; // This is a very fast, non-cryptographic hash suitable for general hash-based lookup.\nEnum FuzzySet.ContainsResult; // Result from FuzzySet.contains(BytesRef): can never return definitively YES (always MAYBE), but can sometimes definitely return NO.\n", "des": "Codec PostingsFormat for fast access to low-frequency terms such as primary key fields."}
{"index": 1908, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: dao\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor.class) public class PersistenceExceptionTranslationAutoConfiguration extends Object; // Auto-configuration for Spring's persistence exception translation.\n", "des": "Auto-configuration for Spring DAO."}
{"index": 1815, "repo": "spring-integration-mail-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class ImapIdleChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Parser for the <imap-idle-channel-adapter> element in the 'mail' namespace.\npublic class MailHeaderEnricherParser extends org.springframework.integration.config.xml.HeaderEnricherParserSupport;\npublic class MailInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <inbound-channel-adapter> element of Spring Integration's 'mail' namespace.\npublic class MailNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for the 'mail' namespace.\npublic class MailOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> element of the 'mail' namespace.\npublic class MailReceiverFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<MailReceiver>;\npublic class MailToStringTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Parser for the <mail-to-string-transformer> element.\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 1737, "repo": "spring-jdbc-6.0.11", "code": "Package: rowset\n\nClasses and Interfaces: \npublic class ResultSetWrappingSqlRowSet extends Object implements SqlRowSet; // The default implementation of Spring's SqlRowSet interface, wrapping a ResultSet, catching any SQLExceptions and translating them to a corresponding Spring InvalidResultSetAccessException.\npublic class ResultSetWrappingSqlRowSetMetaData extends Object implements SqlRowSetMetaData; // The default implementation of Spring's SqlRowSetMetaData interface, wrapping a ResultSetMetaData instance, catching any SQLExceptions and translating them to a corresponding Spring InvalidResultSetAccessException.\npublic interface SqlRowSet extends Serializable; // Mirror interface for RowSet, representing a disconnected variant of ResultSet data.\npublic interface SqlRowSetMetaData; // Metadata interface for Spring's SqlRowSet, analogous to JDBC's ResultSetMetaData.\n", "des": "Provides a convenient holder for disconnected result sets."}
{"index": 2769, "repo": "spring-jms-6.0.11", "code": "Package: connection\n\nClasses and Interfaces: \npublic class CachingConnectionFactory extends SingleConnectionFactory; // SingleConnectionFactory subclass that adds Session caching as well as MessageProducer and MessageConsumer caching.\npublic class ChainedExceptionListener extends Object implements ExceptionListener; // Implementation of the JMS ExceptionListener interface that supports chaining, allowing the addition of multiple ExceptionListener instances in order.\npublic abstract class ConnectionFactoryUtils extends Object; // Helper class for managing a JMS ConnectionFactory, in particular for obtaining transactional JMS resources for a given ConnectionFactory.\npublic static interface ConnectionFactoryUtils.ResourceFactory; // Callback interface for resource creation.\npublic class DelegatingConnectionFactory extends Object implements SmartConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, org.springframework.beans.factory.InitializingBean; // ConnectionFactory implementation that delegates all calls to a given target ConnectionFactory, adapting specific create(Queue/Topic)Connection calls to the target ConnectionFactory if necessary (e.g.\npublic class JmsResourceHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a JMS Connection and a JMS Session.\npublic class JmsTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single JMS ConnectionFactory.\npublic interface SessionProxy extends Session; // Subinterface of Session to be implemented by Session proxies.\npublic class SingleConnectionFactory extends Object implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, ExceptionListener, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // A JMS ConnectionFactory adapter that returns the same Connection from all SingleConnectionFactory.createConnection() calls, and ignores calls to Connection.close().\npublic interface SmartConnectionFactory extends ConnectionFactory; // Extension of the jakarta.jms.ConnectionFactory interface, indicating how to release Connections obtained from it.\npublic class SynchedLocalTransactionFailedException extends JmsException; // Exception thrown when a synchronized local transaction failed to complete (after the main transaction has already completed).\npublic class TransactionAwareConnectionFactoryProxy extends Object implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory; // Proxy for a target JMS ConnectionFactory, adding awareness of Spring-managed transactions.\n", "des": "Provides a PlatformTransactionManager implementation for a single JMS ConnectionFactory, and a SingleConnectionFactory adapter."}
{"index": 3870, "repo": "lucene-spatial-extras-9.7.0", "code": "Package: util\n\nClasses and Interfaces: \nClass CachingDoubleValueSource; // Caches the doubleVal of another value source in a HashMap so that it is computed only once.\nClass DistanceToShapeValueSource; // The distance from a provided Point to a Point retrieved from an ShapeValuesSource.\nClass ReciprocalDoubleValuesSource; // Transforms a DoubleValuesSource using the formula v = k / (v + k)\nClass ShapeAreaValueSource; // The area of a Shape retrieved from an ShapeValuesSource\nClass ShapeFieldCache<T extends org.locationtech.spatial4j.shape.Shape>; // Bounded Cache of Shapes associated with docIds.\nClass ShapeFieldCacheDistanceValueSource; // A DoubleValuesSource that returns the spatial distance between an input point and a document's points in ShapeFieldCacheProvider.\nClass ShapeFieldCacheProvider<T extends org.locationtech.spatial4j.shape.Shape>; // Provides access to a ShapeFieldCache for a given LeafReader.\nClass ShapeValuesPredicate; // Compares a shape from a provided ShapeValuesSource with a given Shape and sees if it matches a given SpatialOperation (the predicate).\n", "des": "Advanced spatial utilities."}
{"index": 139, "repo": "ignite-core-2.15.0", "code": "Package: deployment\n\nClasses and Interfaces: \nInterface GridDeploymentInfo; // Deployment info.\nInterface GridDeploymentStore; // Interface for all deployment stores.\nClass GridDeployment; // Represents single class deployment.\nClass GridDeploymentInfoBean; // Deployment info bean.\nClass GridDeploymentManager; // Deployment manager.\nClass GridDeploymentMetadata; // Deployment metadata.\nClass GridDeploymentPerLoaderStore; // Deployment storage for DeploymentMode.PRIVATE and DeploymentMode.ISOLATED modes.\nClass GridDeploymentPerVersionStore; // Deployment storage for DeploymentMode.SHARED and DeploymentMode.CONTINUOUS modes.\nClass GridDeploymentRequest; // Deployment request.\nClass GridDeploymentResponse; // Grid deployment response containing requested resource bytes.\nClass P2PClassLoadingIssues;\nClass P2PClassNotFoundException; // A specialication of ClassNotFoundException thrown when a class cannot be loaded during P2P class-loading.\n", "des": "TODO."}
{"index": 548, "repo": "commons-rdf-rdf4j-0.5.0", "code": "Package: rdf4j\n\nSub Packages: \npackage rdf4j.experimental; // Experimental Commons RDF RDF4J implementations.\n\nClasses and Interfaces: \nInterface ClosableIterable<T>; // An Iterable which should be AutoCloseable.close()d after use.\nInterface RDF4JBlankNode; // Marker interface for RDF4J implementations of Commons RDF BlankNode.\nInterface RDF4JBlankNodeOrIRI; // Marker interface for RDF4J implementations of Commons RDF BlankNodeOrIRI (e.g.\nInterface RDF4JDataset; // Marker interface for RDF4J implementations of Dataset.\nInterface RDF4JGraph; // Marker interface for RDF4J implementations of Graph.\nInterface RDF4JGraphLike<T extends TripleLike>; // Marker interface for RDF4J implementations of GraphLike.\nInterface RDF4JIRI; // Marker interface for RDF4J implementations of Commons RDF IRI.\nInterface RDF4JLiteral; // Marker interface for RDF4J implementations of Commons RDF Literal.\nInterface RDF4JQuad; // Marker interface for RDF4J implementations of Quad.\nInterface RDF4JTerm; // Marker interface for RDF4J implementations of RDFTerm.\nInterface RDF4JTriple; // Marker interface for RDF4J implementations of Triple.\nInterface RDF4JTripleLike; // Marker interface for RDF4J implementations of TripleLike statements.\nClass RDF4J; // RDF4J implementation of RDF.\nEnum RDF4J.Option;\n", "des": "Commons RDF integration with RDF4J."}
{"index": 967, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: axiom\n\nSub Packages: \npackage axiom.support; // Support classes for working with the AXis Object Model (AXIOM).\n\nClasses and Interfaces: \nClass AxiomSoapMessage; // AXIOM-specific implementation of the SoapMessage interface.\nClass AxiomSoapMessageFactory; // Axiom-specific implementation of the WebServiceMessageFactory interface.\nClass AxiomAttachmentException;\nClass AxiomSoapBodyException;\nClass AxiomSoapElementException;\nClass AxiomSoapEnvelopeException;\nClass AxiomSoapFaultException;\nClass AxiomSoapHeaderException;\nClass AxiomSoapMessageCreationException;\nClass AxiomSoapMessageException;\n", "des": "AXis Object Model (AXIOM) support for Spring-WS' soap message infrastructure."}
{"index": 1988, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: jta\n\nClasses and Interfaces: \n@AutoConfiguration(before={XADataSourceAutoConfiguration.class,ActiveMQAutoConfiguration.class,ArtemisAutoConfiguration.class,HibernateJpaAutoConfiguration.class,TransactionAutoConfiguration.class}) @ConditionalOnClass(jakarta.transaction.Transaction.class) @ConditionalOnProperty(prefix=\"spring.jta\", value=\"enabled\", matchIfMissing=true) @Import(org.springframework.boot.autoconfigure.transaction.jta.JndiJtaConfiguration.class) public class JtaAutoConfiguration extends Object; // Auto-configuration for JTA.\n", "des": "Auto-configuration for JTA."}
{"index": 1361, "repo": "spring-tx-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic class JtaTransactionManagerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <tx:jta-transaction-manager/> XML configuration element.\n@Deprecated(since=\"6.0\") public class JtaTransactionManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JtaTransactionManager>, org.springframework.beans.factory.InitializingBean;\npublic abstract class TransactionManagementConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic class TxNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler allowing for the configuration of declarative transaction management using either XML or using annotations.\n", "des": "Support package for declarative transaction configuration, with XML schema being the primary configuration format."}
{"index": 2335, "repo": "spring-boot-3.1.1", "code": "Package: pem\n\nClasses and Interfaces: \npublic class PemSslStoreBundle extends Object implements SslStoreBundle; // SslStoreBundle backed by PEM-encoded certificates and private keys.\npublic record PemSslStoreDetails(String type, String certificate, String privateKey, String privateKeyPassword) extends Record; // Details for an individual trust or key store in a PemSslStoreBundle.\n", "des": "SSL trust material provider for PEM-encoded certificates."}
{"index": 1587, "repo": "spring-websocket-6.0.11", "code": "Package: jetty\n\nClasses and Interfaces: \n@WebSocket public class JettyWebSocketHandlerAdapter extends Object; // Adapts WebSocketHandler to the Jetty 9 WebSocket API.\npublic class JettyWebSocketSession extends AbstractWebSocketSession<org.eclipse.jetty.websocket.api.Session>; // A WebSocketSession for use with the Jetty 9.4 WebSocket API.\npublic class WebSocketToJettyExtensionConfigAdapter extends org.eclipse.jetty.websocket.common.JettyExtensionConfig; // Adapter class to convert a WebSocketExtension to a Jetty ExtensionConfig.\n", "des": "Adapter classes for the Jetty WebSocket API."}
{"index": 2985, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "Package: introspection\n\nClasses and Interfaces: \npublic class BadOpaqueTokenException extends OAuth2IntrospectionException; // An exception similar to BadCredentialsException that indicates an opaque token that is invalid in some way.\npublic class NimbusOpaqueTokenIntrospector extends Object implements OpaqueTokenIntrospector; // A Nimbus implementation of OpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic class NimbusReactiveOpaqueTokenIntrospector extends Object implements ReactiveOpaqueTokenIntrospector; // A Nimbus implementation of ReactiveOpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic final class OAuth2IntrospectionAuthenticatedPrincipal extends Object implements org.springframework.security.oauth2.core.OAuth2TokenIntrospectionClaimAccessor, org.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal, Serializable; // A domain object that wraps the attributes of OAuth 2.0 Token Introspection.\npublic class OAuth2IntrospectionException extends RuntimeException; // Base exception for all OAuth 2.0 Introspection related errors\n@FunctionalInterface public interface OpaqueTokenAuthenticationConverter; // Convert a successful introspection result into an authentication result.\n@FunctionalInterface public interface OpaqueTokenIntrospector; // A contract for introspecting and verifying an OAuth 2.0 token.\n@FunctionalInterface public interface ReactiveOpaqueTokenAuthenticationConverter; // Convert a successful introspection result into an authentication result.\n@FunctionalInterface public interface ReactiveOpaqueTokenIntrospector; // A contract for introspecting and verifying an OAuth 2.0 token.\npublic class SpringOpaqueTokenIntrospector extends Object implements OpaqueTokenIntrospector; // A Spring implementation of OpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic class SpringReactiveOpaqueTokenIntrospector extends Object implements ReactiveOpaqueTokenIntrospector; // A Spring implementation of ReactiveOpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\n", "des": "OAuth 2.0 Introspection supporting classes and interfaces."}
{"index": 458, "repo": "camel-core-3.0.0-RC1", "code": "Package: validator\n\nClasses and Interfaces: \nClass CustomValidatorDefinition; // Represents a CustomValidator.\nClass EndpointValidatorDefinition; // Represents an endpoint Validator which leverages camel validator component such as Validator Component and Bean Validator Component to perform content validation.\nClass PredicateValidatorDefinition; // Represents a predicate Validator which leverages expression or predicates to perform content validation.\nClass ValidatorDefinition; // Represents a Validator which declaratively validates message content according to the input type declared by InputTypeDefinition and/or output type declared by OutputTypeDefinition.\nClass ValidatorsDefinition; // To configure validators.\n", "des": "The JAXB POJOs for the Transformers used to transform message contents according to declared data types inside components"}
{"index": 3116, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nSub Packages: \npackage spi.support; // Package intended for simplifying the worked needed to implement a caching provider.\n\nClasses and Interfaces: \nInterface CacheImplementor; // SPI contract for Hibernate's second-level cache engine\nInterface CacheKeysFactory;\nInterface CacheTransactionSynchronization; // Defines a context object that a RegionFactory is asked to create (RegionFactory.createTransactionContext(org.hibernate.engine.spi.SharedSessionContractImplementor)}) when a Hibernate Session is created.\nInterface DirectAccessRegion; // Specialized Region whose data is accessed directly (not requiring key/item wrapping, e.g.\nInterface DomainDataRegion; // A Region for cacheable domain data - entity, collection, natural-id.\nInterface ExtendedStatisticsSupport; // Optional Region contract defining support for extra statistic information\nInterface QueryCache;\nInterface QueryResultsCache; // Defines the responsibility for managing query result data caching in regards to a specific region.\nInterface QueryResultsRegion; // Defines the contract for a cache region which will specifically be used to store query results.\nInterface Region; // Contract for a named \"region\".\nInterface RegionFactory; // Contract for building second level cache regions.\nInterface SecondLevelCacheLogger;\nInterface TimestampsCache; // Wrapper for a TimestampsRegion adding handling of stale results\nInterface TimestampsCacheFactory; // Responsible for building the TimestampsRegionAccessFactory to use for managing query results in regards to staleness of the underlying tables (sometimes called \"query spaces\" or \"table spaces\")\nInterface TimestampsRegion;\nInterface UpdateTimestampsCache;\nClass AbstractCacheTransactionSynchronization;\nClass AbstractRegionFactory;\nClass FilterKey; // Allows cached queries to be keyed by enabled filters.\nClass QueryKey; // A key that identifies a particular query with bound parameter values.\nClass QuerySpacesHelper;\nClass SecondLevelCacheLogger_$logger; // Warning this class consists of generated code.\nClass StandardCacheTransactionSynchronization;\n", "des": "Defines the integration aspect of Hibernate's second-level caching allowing \"caching back ends\" to be plugged in as a caching provider."}
{"index": 3901, "repo": "solr-solrj-9.3.0", "code": "Package: params\n\nClasses and Interfaces: \nInterface AnalysisParams; // Defines the request parameters used by all analysis request handlers.\nInterface CollectionAdminParams;\nInterface CollectionParams;\nInterface CommonAdminParams;\nInterface CommonParams; // Parameters used across many handlers\nInterface ConfigSetParams; // ConfigSets API related parameters and actions.\nInterface CursorMarkParams; // Parameters and constants used when dealing with cursor based requests across large sorted result sets.\nInterface DisMaxParams; // A collection of params used in DisMaxRequestHandler, both for Plugin initialization and for Requests.\nInterface EventParams;\nInterface ExpandParams; // Expand parameters\nInterface FacetParams; // Facet parameters\nInterface GroupParams; // Group parameters\nInterface HighlightParams;\nInterface MoreLikeThisParams; // Params for MoreLikeThisHandler.\nInterface QueryElevationParams; // Parameters used with the QueryElevationComponent\nInterface ShardParams; // Parameters used for distributed search.\nInterface SimpleParams; // Parameters used by the SimpleQParser.\nInterface SpatialParams;\nInterface SpellingParams; // Parameters used for spellchecking\nInterface StatsParams; // Stats Parameters\nInterface StreamParams; // Streaming Expressions Parameters and Properties.\nInterface TermsParams;\nInterface TermVectorParams;\nInterface UpdateParams; // A collection of standard params used by Update handlers\nClass AppendedSolrParams; // SolrParams wrapper which acts similar to DefaultSolrParams except that it \"appends\" the values of multi-value params from both sub instances, so that all of the values are returned.\nClass CoreAdminParams;\nClass DefaultSolrParams;\nClass MapSolrParams; // SolrParams implementation that can be built from and is backed by a Map.\nClass ModifiableSolrParams; // This class is similar to MultiMapSolrParams except you can edit the parameters after it is initialized.\nClass MultiMapSolrParams;\nClass RequiredSolrParams; // This is a simple wrapper to SolrParams that will throw a 400 exception if you ask for a parameter that does not exist.\nClass SolrParams; // SolrParams is designed to hold parameters to Solr, often from the request coming into Solr.\nEnum CollectionParams.CollectionAction; // (Mostly) Collection API actions that can be sent by nodes to the Overseer over the /overseer/collection-queue-work ZooKeeper queue.\nEnum CollectionParams.LockLevel;\n", "des": "Parameter constants and enumerations."}
{"index": 1647, "repo": "jena-core-4.9.0", "code": "Package: irix\n\nClasses and Interfaces: \npublic class Chars3986 extends Object; // Characters and character classes\npublic class IRIException extends JenaException; // Exception thrown due to IRI problems.\npublic interface IRIProvider; // Provider: an implementation of a factory for IRIs.\npublic class IRIProviderAny extends Object implements IRIProvider; // Non-resolving provider that accepts anything string for <...>.\npublic class IRIProviderJDK extends Object implements IRIProvider; // IRIProvider implemented using java.net.URI.\npublic class IRIProviderJenaIRI extends Object implements IRIProvider; // Provider for IRIx using the jena-iri module.\npublic static class IRIProviderJenaIRI.IRIxJena extends IRIx; // IRIx implementation for the jena-iri provider.\npublic class IRIs extends Object; // Operations in support of IRIx.\npublic abstract class IRIx extends Object; // Support for RFC3986 IRIs.\npublic class IRIxResolver extends Object; // A resolver is a base IRI and a policy for resolution.\npublic static class IRIxResolver.Builder extends Object;\npublic class RelativeIRIException extends IRIException; // Exception thrown due to relative IRIs when not permitted.\npublic class SetupJenaIRI extends Object; // Setup of jena-iri package IRI Factory for parsing and for checking.\npublic class SystemIRIx extends Object; // System setup and configuration.\n", "des": "Support for RFC3986 IRIs."}
{"index": 3576, "repo": "lucene-sandbox-9.7.0", "code": "Package: queries\n\nClasses and Interfaces: \nClass FuzzyLikeThisQuery; // Fuzzifies ALL terms provided as strings and then picks the best n differentiating terms.\n", "des": "Additional queries (some may have caveats or limitations)"}
{"index": 3711, "repo": "solr-core-9.3.0", "code": "Package: jaspell\n\nClasses and Interfaces: \nClass JaspellLookup;\nClass JaspellLookupFactory; // Factory for JaspellLookup Note: This Suggester is not very RAM efficient.\nClass JaspellTernarySearchTrie;\nClass JaspellTernarySearchTrie.TSTNode; // An inner class of Ternary Search Trie that represents a node in the trie.\n", "des": "Factories for JaSpell based Suggesters"}
{"index": 156, "repo": "ignite-core-2.15.0", "code": "Package: closure\n\nClasses and Interfaces: \nInterface AffinityTask; // Affinity mapped task.\nClass GridClosureProcessor;\nClass GridClosureProcessor.C1<T,R>;\nClass GridClosureProcessor.C1MLA<T,R>;\nClass GridClosureProcessor.C2<R>;\nClass GridClosureProcessor.C2MLA<R>;\nClass GridClosureProcessor.C4;\nClass GridClosureProcessor.C4MLA;\nClass GridPeerDeployAwareTaskAdapter<T,R>; // Peer deployment aware task adapter.\n", "des": "TODO."}
{"index": 1784, "repo": "spring-integration-file-6.1.2", "code": "Package: filters\n\nClasses and Interfaces: \npublic abstract class AbstractDirectoryAwareFileListFilter<F> extends AbstractFileListFilter<F>; // A file list filter that can be configured to always accept (pass) directories.\npublic abstract class AbstractFileListFilter<F> extends Object implements FileListFilter<F>; // A convenience base class for any FileListFilter whose criteria can be evaluated against each File in isolation.\npublic abstract class AbstractMarkerFilePresentFileListFilter<F> extends Object implements FileListFilter<F>; // A FileListFilter that only passes files matched by one or more FileListFilter if a corresponding marker file is also present to indicate a file transfer is complete.\npublic abstract class AbstractPersistentAcceptOnceFileListFilter<F> extends AbstractDirectoryAwareFileListFilter<F> implements ReversibleFileListFilter<F>, ResettableFileListFilter<F>, Closeable; // Stores \"seen\" files in a MetadataStore to survive application restarts.\npublic abstract class AbstractRegexPatternFileListFilter<F> extends AbstractDirectoryAwareFileListFilter<F>; // Filters a listing of files by qualifying their 'name' against a regular expression (an instance of Pattern).\npublic abstract class AbstractSimplePatternFileListFilter<F> extends AbstractDirectoryAwareFileListFilter<F>; // Base class for filters that support ant style path expressions, which are less powerful but more readable than regular expressions.\npublic class AcceptAllFileListFilter<F> extends AbstractFileListFilter<F>; // Simple implementation of FileListFilter that always returns true.\npublic class AcceptOnceFileListFilter<F> extends AbstractFileListFilter<F> implements ReversibleFileListFilter<F>, ResettableFileListFilter<F>; // FileListFilter that passes files only one time.\npublic class ChainFileListFilter<F> extends CompositeFileListFilter<F>; // The CompositeFileListFilter extension which chains the result of the previous filter to the next one.\npublic class CompositeFileListFilter<F> extends Object implements ReversibleFileListFilter<F>, ResettableFileListFilter<F>, DiscardAwareFileListFilter<F>, Closeable; // Simple FileListFilter that predicates its matches against all of the configured FileListFilter.\npublic interface DiscardAwareFileListFilter<F> extends FileListFilter<F>; // The FileListFilter modification which can accept a Consumer which can be called when the filter discards the file.\n", "des": "Provides classes supporting file filtering."}
{"index": 3280, "repo": "opencms-core-15.0", "code": "Package: jsp\n\nSub Packages: \npackage jsp.decorator; // HTML postprocessor, used to tag single words or phrases in the HTML output.\npackage jsp.parse; // API classes for the <cms:parse> tag.\npackage jsp.util; // Utility classes to be used for JSP pages.\n\nClasses and Interfaces: \nInterface I_CmsJspJsonContext; // Interface implemented by JSON tags.\nInterface I_CmsJspTagParamParent; // Interface for tag handlers implementing valid parent tags for <c:param>.\nInterface I_CmsResourceContainer; // Provides access to a CmsResource object that was previously loaded by a parent tag.\nInterface I_CmsXmlContentContainer; // Provides access to a I_CmsXmlDocument document that was previously loaded by a parent tag.\nClass A_CmsJspJsonTag; // Abstract superclass that handles the common behavior of the jsonarray/jsonobject/jsonvalue tags.\nClass CmsContentInfoBean; // A container to store information about a collector's result.\nClass CmsContentLoadCollectorInfo; // Bean containing the data needed to call a collector.\nClass CmsJspActionElement; // Bean to be used in JSP scriptlet code that provides direct access to the functionality offered by the OpenCms taglib.\nClass CmsJspBean; // Superclass for OpenCms JSP beans that provides convient access to OpenCms core and VFS functionality.\nClass CmsJspImageScalerTagSupport; // Abstract parent for all JSP tags dealing with image scaling, defines some common image scaler properties and corresponding getters/setters that may be used by extending classes.\nClass CmsJspLoginBean; // Provides convenient wrappers useful to create user login pages.\nClass CmsJspLoginPersistingBean; // Login bean which sets a cookie that can be used by CmsPersistentLoginAuthorizationHandler to automatically log the user back in when his session has expired.\nClass CmsJspNavBuilder; // Bean to provide a convenient way to build navigation structures based on the CmsJspNavElement.\nClass CmsJspNavBuilder.NavContext; // Navigation builder context.\nClass CmsJspNavElement; // Bean to collect navigation information from a resource in the OpenCms VFS.\nClass CmsJspResourceWrapper; // Wrapper subclass of CmsResource with some convenience methods.\nClass CmsJspScopedVarBodyTagSuport; // Parent for body tags that require support for setting scoped variables to the JSP page context.\n", "des": "The implementation of the OpenCms JSP tag library, with some additional utility classes to help in JSP scriplet code and navigation building."}
{"index": 1927, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: data\n\nClasses and Interfaces: \n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.data.query.QueryByExampleDataFetcher.class,org.springframework.data.repository.query.QueryByExampleExecutor.class}) @ConditionalOnBean(org.springframework.graphql.execution.GraphQlSource.class) public class GraphQlQueryByExampleAutoConfiguration extends Object; // Auto-configuration that creates a GraphQlSourceBuilderCustomizers to detect Spring Data repositories with Query By Example support and register them as DataFetchers for any queries with a matching return type.\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.data.query.QuerydslDataFetcher.class,org.springframework.data.querydsl.QuerydslPredicateExecutor.class}) @ConditionalOnBean(org.springframework.graphql.execution.GraphQlSource.class) public class GraphQlQuerydslAutoConfiguration extends Object; // Auto-configuration that creates a GraphQlSourceBuilderCustomizers to detect Spring Data repositories with Querydsl support and register them as DataFetchers for any queries with a matching return type.\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.data.query.QueryByExampleDataFetcher.class,org.springframework.data.repository.query.ReactiveQueryByExampleExecutor.class}) @ConditionalOnBean(org.springframework.graphql.execution.GraphQlSource.class) public class GraphQlReactiveQueryByExampleAutoConfiguration extends Object; // Auto-configuration that creates a GraphQlSourceBuilderCustomizers to detect Spring Data repositories with Query By Example support and register them as DataFetchers for any queries with a matching return type.\n", "des": "Auto-configuration classes for data integrations with GraphQL."}
{"index": 3015, "repo": "spring-web-6.0.11", "code": "Package: observation\n\nClasses and Interfaces: \npublic class DefaultServerRequestObservationConvention extends Object implements ServerRequestObservationConvention; // Default ServerRequestObservationConvention.\npublic enum ServerHttpObservationDocumentation extends Enum<ServerHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for the HTTP server observations for Servlet-based web applications.\npublic static enum ServerHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ServerHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic class ServerRequestObservationContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<HttpServletRequest,HttpServletResponse>; // Context that holds information for metadata collection regarding Servlet HTTP requests observations.\npublic interface ServerRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ServerRequestObservationContext>; // Interface for an ObservationConvention for Servlet HTTP requests.\n", "des": "Instrumentation for observing HTTP server applications."}
{"index": 1494, "repo": "wicket-extensions-10.0.0-M1", "code": "Package: basic\n\nClasses and Interfaces: \npublic class DefaultLinkParser extends LinkParser; // This implementation adds link render strategies for email addresses and urls.\n@FunctionalInterface public interface ILinkParser; // ILinkParser parses an input text and performs modifications according to its render strategies.\n@FunctionalInterface public interface ILinkRenderStrategy; // An implementation of ILinkRenderStrategy transforms a link target (e.g.\npublic class LinkParser extends Object implements ILinkParser; // This base implementation iterates over all provided ILinkRenderStrategy implementations and applies them to the input text.\npublic class SmartLinkLabel extends org.apache.wicket.markup.html.basic.Label; // If you have email addresses or web URLs in the data that you are displaying, then you can automatically display those pieces of data as hyperlinks, you will not have to take any action to convert that data.\npublic class SmartLinkMultiLineLabel extends org.apache.wicket.markup.html.basic.MultiLineLabel; // If you have email addresses or web URLs in the data that you are displaying, then you can automatically display those pieces of data as hyperlinks, you will not have to take any action to convert that data.\n", "des": "Basic extensions."}
{"index": 1102, "repo": "fontbox-3.0.0-beta1", "code": "Package: cmap\n\nClasses and Interfaces: \nClass CMap; // This class represents a CMap file.\nClass CMapParser; // Parses a CMap stream.\nClass CodespaceRange; // This represents a single entry in the codespace range.\n", "des": "This package holds classes that are necessary to parse cmap files."}
{"index": 3303, "repo": "opencms-core-15.0", "code": "Package: report\n\nClasses and Interfaces: \nInterface I_CmsReport; // This is the interface for the report classes which are used for the output during operations that run on a spearate Thread in OpenCms, like publish, import, export etc.\nInterface I_CmsReportThread; // Identifies a class that can be used as a report thread .\nInterface I_CmsReportUpdateFormatter; // Interface used to format report updates.\nClass A_CmsReport; // Base report class.\nClass A_CmsReportThread; // Provides a common Thread class for the reports.\nClass CmsClassicJavascriptReportUpdateFormatter; // Report update formatter for the Javascript-based report update format, which was used in the old workplace most of the time.\nClass CmsHtmlReport; // HTML report output to be used for import / export / publish operations in the entire OpenCms system.\nClass CmsLogReport; // Report class used for the logfile.\nClass CmsMultiplexReport; // Report proxy that multiplexes to all contained I_CmsReport instances.\nClass CmsPrintStreamReport; // Stream report where the output is streamed to the given print stream instance.\nClass CmsReportUpdateItem; // Represents a single report entry.\nClass CmsShellLogReport; // Report for shell which writes to LOG.\nClass CmsShellReport; // Report class used for the shell.\nClass CmsStringBufferReport; // Report class used to write the output of a report to a StringBuffer.\nClass CmsVaadinHtmlReportUpdateFormatter; // Report update formatter for the new Vaadin-based workplace.\nClass CmsWorkplaceReport; // Report class for displaying reports to the user in the workplace.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsReportFormatType; // Enum representing report entry types.\n", "des": "Classes used to generate the OpenCms reports, which are displayed during publish, import, export etc."}
{"index": 2761, "repo": "spring-beans-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory; // Abstract bean factory superclass that implements default bean creation, with the full capabilities specified by the RootBeanDefinition class.\npublic abstract class AbstractBeanDefinition extends BeanMetadataAttributeAccessor implements BeanDefinition, Cloneable; // Base class for concrete, full-fledged BeanDefinition classes, factoring out common properties of GenericBeanDefinition, RootBeanDefinition, and ChildBeanDefinition.\npublic abstract class AbstractBeanDefinitionReader extends Object implements BeanDefinitionReader, org.springframework.core.env.EnvironmentCapable; // Abstract base class for bean definition readers which implement the BeanDefinitionReader interface.\npublic abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory; // Abstract base class for BeanFactory implementations, providing the full capabilities of the ConfigurableBeanFactory SPI.\npublic class AutowireCandidateQualifier extends BeanMetadataAttributeAccessor; // Qualifier for resolving autowire candidates.\npublic interface AutowireCandidateResolver; // Strategy interface for determining whether a specific bean definition qualifies as an autowire candidate for a specific dependency.\npublic final class BeanDefinitionBuilder extends Object; // Programmatic means of constructing BeanDefinitions using the builder pattern.\npublic class BeanDefinitionDefaults extends Object; // A simple holder for BeanDefinition property defaults.\npublic class BeanDefinitionOverrideException extends BeanDefinitionStoreException; // Subclass of BeanDefinitionStoreException indicating an invalid override attempt: typically registering a new definition for the same bean name while DefaultListableBeanFactory.isAllowBeanDefinitionOverriding() is false.\npublic interface BeanDefinitionReader; // Simple interface for bean definition readers that specifies load methods with Resource and String location parameters.\npublic abstract class BeanDefinitionReaderUtils extends Object; // Utility methods that are useful for bean definition reader implementations.\npublic interface BeanDefinitionRegistry extends org.springframework.core.AliasRegistry; // Interface for registries that hold bean definitions, for example RootBeanDefinition and ChildBeanDefinition instances.\npublic interface BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor; // Extension to the standard BeanFactoryPostProcessor SPI, allowing for the registration of further bean definitions before regular BeanFactoryPostProcessor detection kicks in.\npublic class BeanDefinitionValidationException extends FatalBeanException; // Exception thrown when the validation of a bean definition failed.\n", "des": "Classes supporting the org.springframework.beans.factory package."}
