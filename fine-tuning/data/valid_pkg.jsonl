{"index": 2340, "repo": "spring-boot-3.1.1", "code": "package client\n\n// Utility class that can be used to create ClientHttpRequestFactory instances configured using given ClientHttpRequestFactorySettings.\npublic final class ClientHttpRequestFactories extends Object;\n// Settings that can be applied when creating a ClientHttpRequestFactory.\npublic record ClientHttpRequestFactorySettings(Duration connectTimeout, Duration readTimeout, Boolean bufferRequestBody, SslBundle sslBundle) extends Record;\n// \n@Deprecated(since=\"3.0.0\", forRemoval=true) public class ClientHttpRequestFactorySupplier extends Object implements Supplier<org.springframework.http.client.ClientHttpRequestFactory>;\n// Builder that can be used to configure and create a RestTemplate.\npublic class RestTemplateBuilder extends Object;\n// Callback interface that can be used to customize a RestTemplate.\n@FunctionalInterface public interface RestTemplateCustomizer;\n// Callback interface that can be used to customize the ClientHttpRequest sent from a RestTemplate.\n@FunctionalInterface public interface RestTemplateRequestCustomizer<T extends org.springframework.http.client.ClientHttpRequest>;\n// UriTemplateHandler to set the root for URI that starts with '/'.\npublic class RootUriTemplateHandler extends Object implements org.springframework.web.util.UriTemplateHandler;\n", "des": "Web client utilities."}
{"index": 2341, "repo": "spring-boot-3.1.1", "code": "package codec\n\n// Callback interface that can be used to customize codecs configuration for an HTTP client and/or server with a CodecConfigurer.\n@FunctionalInterface public interface CodecCustomizer;\n", "des": "Support for web-based codecs."}
{"index": 2342, "repo": "spring-boot-3.1.1", "code": "package context\n\n// SPI interface to be implemented by most if not all web server application contexts.\npublic interface ConfigurableWebServerApplicationContext extends org.springframework.context.ConfigurableApplicationContext, WebServerApplicationContext;\n// Exception thrown when there is no WebServerFactory bean of the required type defined in a WebServerApplicationContext.\npublic class MissingWebServerFactoryBeanException extends org.springframework.beans.factory.NoSuchBeanDefinitionException;\n// ApplicationContextInitializer that sets Environment properties for the ports that WebServer servers are actually listening on.\npublic class ServerPortInfoApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>, org.springframework.context.ApplicationListener<WebServerInitializedEvent>;\n// Interface to be implemented by application contexts that create and manage the lifecycle of an embedded WebServer.\npublic interface WebServerApplicationContext extends org.springframework.context.ApplicationContext;\n// SmartLifecycle to trigger WebServer graceful shutdown.\npublic final class WebServerGracefulShutdownLifecycle extends Object implements org.springframework.context.SmartLifecycle;\n// Event to be published when the WebServer is ready.\npublic abstract class WebServerInitializedEvent extends org.springframework.context.ApplicationEvent;\n// An ApplicationListener that saves embedded server port and management port into file.\npublic class WebServerPortFileWriter extends Object implements org.springframework.context.ApplicationListener<WebServerInitializedEvent>;\n", "des": "Web integrations with Spring's ApplicationContext."}
{"index": 2343, "repo": "spring-boot-3.1.1", "code": "package jetty\n\n// ConfigurableWebServerFactory for Jetty-specific features.\npublic interface ConfigurableJettyWebServerFactory extends ConfigurableWebServerFactory;\n// ReactiveWebServerFactory that can be used to create JettyWebServers.\npublic class JettyReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableJettyWebServerFactory;\n// Callback interface that can be used to customize a Jetty Server.\n@FunctionalInterface public interface JettyServerCustomizer;\n// ServletWebServerFactory that can be used to create a JettyWebServer.\npublic class JettyServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableJettyWebServerFactory, org.springframework.context.ResourceLoaderAware;\n// WebServer that can be used to control a Jetty web server.\npublic class JettyWebServer extends Object implements WebServer;\n// Jetty Configuration that calls ServletContextInitializers.\npublic class ServletContextInitializerConfiguration extends org.eclipse.jetty.webapp.AbstractConfiguration;\n", "des": "Embedded reactive and servlet web server implementations backed by Jetty."}
{"index": 2344, "repo": "spring-boot-3.1.1", "code": "package netty\n\n// ReactiveWebServerFactory that can be used to create NettyWebServers.\npublic class NettyReactiveWebServerFactory extends AbstractReactiveWebServerFactory;\n// Function that can add new routes to an HttpServerRoutes instance.\n@FunctionalInterface public interface NettyRouteProvider extends Function<reactor.netty.http.server.HttpServerRoutes,reactor.netty.http.server.HttpServerRoutes>;\n// Mapping function that can be used to customize a Reactor Netty server instance.\n@FunctionalInterface public interface NettyServerCustomizer extends Function<reactor.netty.http.server.HttpServer,reactor.netty.http.server.HttpServer>;\n// WebServer that can be used to control a Reactor Netty web server.\npublic class NettyWebServer extends Object implements WebServer;\n// NettyServerCustomizer that configures SSL for the given Reactor Netty server instance.\npublic class SslServerCustomizer extends Object implements NettyServerCustomizer;\n", "des": "Embedded reactive web server implementation backed by Netty."}
{"index": 2345, "repo": "spring-boot-3.1.1", "code": "package tomcat\n\n// ConfigurableWebServerFactory for Tomcat-specific features.\npublic interface ConfigurableTomcatWebServerFactory extends ConfigurableWebServerFactory;\n// A ConnectorStartFailedException is thrown when a Tomcat Connector fails to start, for example due to a port clash or incorrect SSL configuration.\npublic class ConnectorStartFailedException extends WebServerException;\n// Callback interface that can be used to customize a Tomcat Connector.\n@FunctionalInterface public interface TomcatConnectorCustomizer;\n// Callback interface that can be used to customize a Tomcat Context.\n@FunctionalInterface public interface TomcatContextCustomizer;\n// Extension of Tomcat's ParallelWebappClassLoader that does not consider the system classloader.\npublic class TomcatEmbeddedWebappClassLoader extends org.apache.catalina.loader.ParallelWebappClassLoader;\n// Callback interface that can be used to customize the ProtocolHandler on the Connector.\n@FunctionalInterface public interface TomcatProtocolHandlerCustomizer<T extends org.apache.coyote.ProtocolHandler>;\n// ReactiveWebServerFactory that can be used to create a TomcatWebServer.\npublic class TomcatReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableTomcatWebServerFactory;\n// AbstractServletWebServerFactory that can be used to create TomcatWebServers.\npublic class TomcatServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableTomcatWebServerFactory, org.springframework.context.ResourceLoaderAware;\n// WebServer that can be used to control a Tomcat web server.\npublic class TomcatWebServer extends Object implements WebServer;\n", "des": "Embedded reactive and servlet web server implementations backed by Tomcat."}
{"index": 2346, "repo": "spring-boot-3.1.1", "code": "package undertow\n\n// ConfigurableWebServerFactory for Undertow-specific features.\npublic interface ConfigurableUndertowWebServerFactory extends ConfigurableWebServerFactory;\n// Factory used by UndertowServletWebServer to add HttpHandlers.\n@FunctionalInterface public interface HttpHandlerFactory;\n// Callback interface that can be used to customize an Undertow Undertow.Builder.\n@FunctionalInterface public interface UndertowBuilderCustomizer;\n// Callback interface that can be used to customize an Undertow DeploymentInfo.\n@FunctionalInterface public interface UndertowDeploymentInfoCustomizer;\n// ReactiveWebServerFactory that can be used to create UndertowWebServers.\npublic class UndertowReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableUndertowWebServerFactory;\n// WebServer that can be used to control an embedded Undertow server.\npublic class UndertowServletWebServer extends UndertowWebServer;\n// ServletWebServerFactory that can be used to create UndertowServletWebServers.\npublic class UndertowServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableUndertowWebServerFactory, org.springframework.context.ResourceLoaderAware;\n// WebServer that can be used to control an Undertow web server.\npublic class UndertowWebServer extends Object implements WebServer;\n", "des": "Embedded reactive and servlet web server implementations backed by Undertow."}
{"index": 2347, "repo": "spring-boot-3.1.1", "code": "package error\n\n// Options controlling the contents of ErrorAttributes.\npublic final class ErrorAttributeOptions extends Object;\n// Error attributes that can be included in an error response.\npublic static enum ErrorAttributeOptions.Include extends Enum<ErrorAttributeOptions.Include>;\n", "des": "Spring Web error handling infrastructure."}
{"index": 2348, "repo": "spring-boot-3.1.1", "code": "package context\n\n// ConfigurableReactiveWebApplicationContext that accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class AnnotationConfigReactiveWebApplicationContext extends org.springframework.context.annotation.AnnotationConfigApplicationContext implements ConfigurableReactiveWebApplicationContext;\n// ReactiveWebServerApplicationContext that accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class AnnotationConfigReactiveWebServerApplicationContext extends ReactiveWebServerApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry;\n// Interface to provide configuration for a reactive web application.\npublic interface ConfigurableReactiveWebApplicationContext extends org.springframework.context.ConfigurableApplicationContext, ReactiveWebApplicationContext;\n// Specialization of ConfigurableEnvironment for reactive application contexts.\npublic interface ConfigurableReactiveWebEnvironment extends org.springframework.core.env.ConfigurableEnvironment;\n// Subclass of GenericApplicationContext, suitable for reactive web environments.\npublic class GenericReactiveWebApplicationContext extends org.springframework.context.support.GenericApplicationContext implements ConfigurableReactiveWebApplicationContext;\n// Interface to provide configuration for a reactive web application.\npublic interface ReactiveWebApplicationContext extends org.springframework.context.ApplicationContext;\n// A GenericReactiveWebApplicationContext that can be used to bootstrap itself from a contained ReactiveWebServerFactory bean.\npublic class ReactiveWebServerApplicationContext extends GenericReactiveWebApplicationContext implements ConfigurableWebServerApplicationContext;\n// Event to be published after the WebServer is ready.\npublic class ReactiveWebServerInitializedEvent extends WebServerInitializedEvent;\n// Environment implementation to be used by Reactive-based web applications.\npublic class StandardReactiveWebEnvironment extends org.springframework.core.env.StandardEnvironment implements ConfigurableReactiveWebEnvironment;\n", "des": "Reactive based web integrations with Spring's ApplicationContext."}
{"index": 2349, "repo": "spring-boot-3.1.1", "code": "package error\n\n// Default implementation of ErrorAttributes.\npublic class DefaultErrorAttributes extends Object implements ErrorAttributes;\n// Provides access to error attributes which can be logged or presented to the user.\npublic interface ErrorAttributes;\n// Marker interface that indicates that a WebExceptionHandler is used to render errors.\n@FunctionalInterface public interface ErrorWebExceptionHandler extends org.springframework.web.server.WebExceptionHandler;\n", "des": "Spring WebFlux error handling infrastructure."}
{"index": 2350, "repo": "spring-boot-3.1.1", "code": "package filter\n\n// HiddenHttpMethodFilter that also implements Ordered.\npublic class OrderedHiddenHttpMethodFilter extends org.springframework.web.filter.reactive.HiddenHttpMethodFilter implements OrderedWebFilter;\n// An Ordered WebFilter.\npublic interface OrderedWebFilter extends org.springframework.web.server.WebFilter, org.springframework.core.Ordered;\n", "des": "Spring Boot specific WebFilter implementations."}
{"index": 2351, "repo": "spring-boot-3.1.1", "code": "package client\n\n// Callback interface that can be used to customize a WebClient.Builder.\n@FunctionalInterface public interface WebClientCustomizer;\n", "des": "Spring WebFlux WebClient support abstractions."}
{"index": 2352, "repo": "spring-boot-3.1.1", "code": "package view\n\n// Spring WebFlux View using the Mustache template engine.\npublic class MustacheView extends org.springframework.web.reactive.result.view.AbstractUrlBasedView;\n// Spring WebFlux ViewResolver for Mustache.\npublic class MustacheViewResolver extends org.springframework.web.reactive.result.view.UrlBasedViewResolver;\n", "des": "Additional Views for use with WebFlux."}
{"index": 2353, "repo": "spring-boot-3.1.1", "code": "package server\n\n// Abstract base class for ReactiveWebServerFactory implementations.\npublic abstract class AbstractReactiveWebServerFactory extends AbstractConfigurableWebServerFactory implements ConfigurableReactiveWebServerFactory;\n// Configurable ReactiveWebServerFactory.\npublic interface ConfigurableReactiveWebServerFactory extends ConfigurableWebServerFactory, ReactiveWebServerFactory;\n// Factory interface that can be used to create a reactive WebServer.\n@FunctionalInterface public interface ReactiveWebServerFactory extends WebServerFactory;\n", "des": "Reactive web server abstractions."}
{"index": 2354, "repo": "spring-boot-3.1.1", "code": "package server\n\n// Abstract base class for ConfigurableWebServerFactory implementations.\npublic abstract class AbstractConfigurableWebServerFactory extends Object implements ConfigurableWebServerFactory;\n// \n@Deprecated(since=\"3.1.0\", forRemoval=true) public final class CertificateFileSslStoreProvider extends Object implements SslStoreProvider;\n// Simple server-independent abstraction for compression configuration.\npublic class Compression extends Object;\n// A configurable WebServerFactory.\npublic interface ConfigurableWebServerFactory extends WebServerFactory, ErrorPageRegistry;\n// Cookie properties.\npublic class Cookie extends Object;\n// SameSite values.\npublic static enum Cookie.SameSite extends Enum<Cookie.SameSite>;\n// Simple server-independent abstraction for error pages.\npublic class ErrorPage extends Object;\n// Interface to be implemented by types that register ErrorPages.\n@FunctionalInterface public interface ErrorPageRegistrar;\n// BeanPostProcessor that applies all ErrorPageRegistrars from the bean factory to ErrorPageRegistry beans.\npublic class ErrorPageRegistrarBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware;\n// Interface for a registry that holds ErrorPages.\n@FunctionalInterface public interface ErrorPageRegistry;\n// A callback for the result of a graceful shutdown request.\n@FunctionalInterface public interface GracefulShutdownCallback;\n// The result of a graceful shutdown request.\npublic enum GracefulShutdownResult extends Enum<GracefulShutdownResult>;\n// Simple server-independent abstraction for HTTP/2 configuration.\npublic class Http2 extends Object;\n// Simple server-independent abstraction for mime mappings.\npublic sealed class MimeMappings extends Object implements Iterable<MimeMappings.Mapping>;\n// A single mime mapping.\npublic static final class MimeMappings.Mapping extends Object;\n// A PortInUseException is thrown when a web server fails to start due to a port already being in use.\npublic class PortInUseException extends WebServerException;\n// Configuration for shutting down a WebServer.\npublic enum Shutdown extends Enum<Shutdown>;\n// Simple server-independent abstraction for SSL configuration.\npublic class Ssl extends Object;\n// Client authentication types.\npublic static enum Ssl.ClientAuth extends Enum<Ssl.ClientAuth>;\n", "des": "Support for embedded web servers."}
{"index": 2355, "repo": "spring-boot-3.1.1", "code": "package servlet\n\n// Servlet based web integrations with Spring's WebApplicationContext.\npackage servlet.context\n// Spring MVC error handling infrastructure.\npackage servlet.error\n// Spring Boot specific Filter implementations.\npackage servlet.filter\n// Servlet web server abstractions.\npackage servlet.server\n// Support classes for Servlet-based web servers.\npackage servlet.support\n// Additional Views for use with Web MVC.\npackage servlet.view\n// Abstract base ServletContextInitializer to register Filters in a Servlet 3.0+ container.\npublic abstract class AbstractFilterRegistrationBean<T extends jakarta.servlet.Filter> extends DynamicRegistrationBean<jakarta.servlet.FilterRegistration.Dynamic>;\n// A ServletContextInitializer to register DelegatingFilterProxys in a Servlet 3.0+ container.\npublic class DelegatingFilterProxyRegistrationBean extends AbstractFilterRegistrationBean<org.springframework.web.filter.DelegatingFilterProxy> implements org.springframework.context.ApplicationContextAware;\n// Enumeration of filter dispatcher types, identical to DispatcherType and used in configuration as the servlet API may not be present.\npublic enum DispatcherType extends Enum<DispatcherType>;\n// Base class for Servlet 3.0+ dynamic based registration beans.\npublic abstract class DynamicRegistrationBean<D extends jakarta.servlet.Registration.Dynamic> extends RegistrationBean implements org.springframework.beans.factory.BeanNameAware;\n// A ServletContextInitializer to register Filters in a Servlet 3.0+ container.\npublic class FilterRegistrationBean<T extends jakarta.servlet.Filter> extends AbstractFilterRegistrationBean<T>;\n// Factory that can be used to create a MultipartConfigElement.\npublic class MultipartConfigFactory extends Object;\n// Base class for Servlet 3.0+ based registration beans.\npublic abstract class RegistrationBean extends Object implements ServletContextInitializer, org.springframework.core.Ordered;\n// Enables scanning for Servlet components (filters, servlets, and listeners).\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.boot.web.servlet.ServletComponentScanRegistrar.class) public @interface ServletComponentScan;\n// Interface used to configure a Servlet 3.0+ context programmatically.\n@FunctionalInterface public interface ServletContextInitializer;\n", "des": "Classes and utilities designed to work with the jakarta.servlet specification."}
{"index": 2356, "repo": "spring-boot-3.1.1", "code": "package context\n\n// GenericWebApplicationContextthat accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class AnnotationConfigServletWebApplicationContext extends org.springframework.web.context.support.GenericWebApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry;\n// ServletWebServerApplicationContext that accepts annotated classes as input - in particular @Configuration -annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class AnnotationConfigServletWebServerApplicationContext extends ServletWebServerApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry;\n// A WebApplicationContext that can be used to bootstrap itself from a contained ServletWebServerFactory bean.\npublic class ServletWebServerApplicationContext extends org.springframework.web.context.support.GenericWebApplicationContext implements ConfigurableWebServerApplicationContext;\n// Utility class to store and restore any user defined scopes.\npublic static class ServletWebServerApplicationContext.ExistingWebApplicationScopes extends Object;\n// Event to be published after the WebServer is ready.\npublic class ServletWebServerInitializedEvent extends WebServerInitializedEvent;\n// Variant of ServletContextAwareProcessor for use with a ConfigurableWebApplicationContext.\npublic class WebApplicationContextServletContextAwareProcessor extends org.springframework.web.context.support.ServletContextAwareProcessor;\n// ServletWebServerApplicationContext which takes its configuration from XML documents, understood by an XmlBeanDefinitionReader.\npublic class XmlServletWebServerApplicationContext extends ServletWebServerApplicationContext;\n", "des": "Servlet based web integrations with Spring's WebApplicationContext."}
{"index": 2357, "repo": "spring-boot-3.1.1", "code": "package error\n\n// Default implementation of ErrorAttributes.\n@Order(-2147483648) public class DefaultErrorAttributes extends Object implements ErrorAttributes, org.springframework.web.servlet.HandlerExceptionResolver, org.springframework.core.Ordered;\n// Provides access to error attributes which can be logged or presented to the user.\npublic interface ErrorAttributes;\n// Marker interface used to identify a @Controller that should be used to render errors.\npublic interface ErrorController;\n", "des": "Spring MVC error handling infrastructure."}
{"index": 2358, "repo": "spring-boot-3.1.1", "code": "package filter\n\n// OncePerRequestFilter to add an X-Application-Context header that contains the ApplicationContext ID.\npublic class ApplicationContextHeaderFilter extends org.springframework.web.filter.OncePerRequestFilter;\n// CharacterEncodingFilter that also implements Ordered.\npublic class OrderedCharacterEncodingFilter extends org.springframework.web.filter.CharacterEncodingFilter implements OrderedFilter;\n// An Ordered Filter.\npublic interface OrderedFilter extends jakarta.servlet.Filter, org.springframework.core.Ordered;\n// FormContentFilter that also implements Ordered.\npublic class OrderedFormContentFilter extends org.springframework.web.filter.FormContentFilter implements OrderedFilter;\n// HiddenHttpMethodFilter that also implements Ordered.\npublic class OrderedHiddenHttpMethodFilter extends org.springframework.web.filter.HiddenHttpMethodFilter implements OrderedFilter;\n// RequestContextFilter that also implements Ordered.\npublic class OrderedRequestContextFilter extends org.springframework.web.filter.RequestContextFilter implements OrderedFilter;\n", "des": "Spring Boot specific Filter implementations."}
{"index": 2359, "repo": "spring-boot-3.1.1", "code": "package server\n\n// Abstract base class for ConfigurableServletWebServerFactory implementations.\npublic abstract class AbstractServletWebServerFactory extends AbstractConfigurableWebServerFactory implements ConfigurableServletWebServerFactory;\n// A configurable ServletWebServerFactory.\npublic interface ConfigurableServletWebServerFactory extends ConfigurableWebServerFactory, ServletWebServerFactory, WebListenerRegistry;\n// Strategy interface that can be used with ConfigurableServletWebServerFactory implementations in order to supply custom Cookie.SameSite values for specific cookies.\n@FunctionalInterface public interface CookieSameSiteSupplier;\n// Configuration properties for server HTTP encoding.\npublic class Encoding extends Object;\n// Type of HTTP message to consider for encoding configuration.\npublic static enum Encoding.Type extends Enum<Encoding.Type>;\n// Configuration for the server's JSP servlet.\npublic class Jsp extends Object;\n// Factory interface that can be used to create a WebServer.\n@FunctionalInterface public interface ServletWebServerFactory extends WebServerFactory;\n// Session properties.\npublic class Session extends Object;\n// Session cookie properties.\npublic static class Session.Cookie extends Cookie;\n// Available session tracking modes (mirrors SessionTrackingMode.\npublic static enum Session.SessionTrackingMode extends Enum<Session.SessionTrackingMode>;\n", "des": "Servlet web server abstractions."}
{"index": 2360, "repo": "spring-boot-3.1.1", "code": "package support\n\n// A Servlet Filter that provides an ErrorPageRegistry for non-embedded applications (i.e.\npublic class ErrorPageFilter extends Object implements jakarta.servlet.Filter, ErrorPageRegistry, org.springframework.core.Ordered;\n// ApplicationContextInitializer for setting the servlet context.\npublic class ServletContextApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableWebApplicationContext>, org.springframework.core.Ordered;\n// An opinionated WebApplicationInitializer to run a SpringApplication from a traditional WAR deployment.\npublic abstract class SpringBootServletInitializer extends Object implements org.springframework.web.WebApplicationInitializer;\n", "des": "Support classes for Servlet-based web servers."}
{"index": 2361, "repo": "spring-boot-3.1.1", "code": "package view\n\n// Spring MVC View using the Mustache template engine.\npublic class MustacheView extends org.springframework.web.servlet.view.AbstractTemplateView;\n// Spring MVC ViewResolver for Mustache.\npublic class MustacheViewResolver extends org.springframework.web.servlet.view.AbstractTemplateViewResolver;\n", "des": "Additional Views for use with Web MVC."}
{"index": 2362, "repo": "spring-boot-3.1.1", "code": "package client\n\n// WebServiceMessageSender builder that can detect a suitable HTTP library based on the classpath.\npublic class HttpWebServiceMessageSenderBuilder extends Object;\n// Builder that can be used to configure and create a WebServiceTemplate.\npublic class WebServiceTemplateBuilder extends Object;\n// Callback interface that can be used to customize a WebServiceTemplate.\n@FunctionalInterface public interface WebServiceTemplateCustomizer;\n", "des": "Web Services client utilities."}
{"index": 2363, "repo": "camel-base-4.0.0-RC1", "code": "package properties\n\n// Base class for LoadablePropertiesSource which can load properties from a source such as classpath or file system.\npublic abstract class AbstractLocationPropertiesSource extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.spi.LoadablePropertiesSource, LocationPropertiesSource;\n// \npublic class ClasspathPropertiesSource extends AbstractLocationPropertiesSource implements org.apache.camel.Ordered;\n// Default PropertiesFunctionResolver.\npublic class DefaultPropertiesFunctionResolver extends org.apache.camel.support.service.ServiceSupport implements PropertiesFunctionResolver, org.apache.camel.CamelContextAware, org.apache.camel.NonManagedService, org.apache.camel.StaticService;\n// Default PropertiesLookup which lookup properties from a Properties with all existing properties.\npublic class DefaultPropertiesLookup extends Object implements PropertiesLookup;\n// A parser to parse a string which contains property placeholders.\npublic class DefaultPropertiesParser extends Object implements PropertiesParser;\n// \npublic class DefaultPropertiesSourceFactory extends Object implements org.apache.camel.spi.PropertiesSourceFactory;\n// A PropertiesFunction that lookup the property value from OS environment variables.\npublic class EnvPropertiesFunction extends Object implements org.apache.camel.spi.PropertiesFunction;\n// \npublic class FilePropertiesSource extends AbstractLocationPropertiesSource implements org.apache.camel.Ordered;\n// A PropertiesSource which was created from a PropertiesLocation.\npublic interface LocationPropertiesSource extends org.apache.camel.spi.PropertiesSource;\n// The properties component allows you to use property placeholders in Camel.\n@ManagedResource(description=\"Managed PropertiesComponent\") @JdkService(\"properties-component-factory\") @Configurer(bootstrap=true) public class PropertiesComponent extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.spi.PropertiesComponent, org.apache.camel.StaticService, org.apache.camel.CamelContextAware;\n// Generated by camel build tools - do NOT edit this file!\npublic class PropertiesComponentConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements org.apache.camel.spi.GeneratedPropertyConfigurer, org.apache.camel.spi.PropertyConfigurerGetter;\n// Resolver for built-in and custom PropertiesFunction.\npublic interface PropertiesFunctionResolver;\n// \npublic final class PropertiesLocation extends Object;\n", "des": "The Properties Component for lookup of property placeholders for endpoint URI."}
{"index": 2364, "repo": "camel-base-4.0.0-RC1", "code": "package converter\n\n// Generated by camel build tools - do NOT edit this file!\n@DeferredContextBinding public final class CamelBaseBulkConverterLoader extends Object implements org.apache.camel.spi.TypeConverterLoader, org.apache.camel.spi.BulkTypeConverters, org.apache.camel.CamelContextAware;\n// Some useful converters for Camel APIs such as to convert a Predicate or Expression to a Processor\n@Converter(generateBulkLoader=true) public final class CamelConverter extends Object;\n// Some core java.util Collection based Type Converters\n@Converter(generateBulkLoader=true) public final class CollectionConverter extends Object;\n// Date and time related converters.\n@Converter(generateBulkLoader=true) public final class DateTimeConverter extends Object;\n// Converters for java.time.Duration.\n@Converter(generateBulkLoader=true) public final class DurationConverter extends Object;\n// Some core java.io based Type Converters\n@Converter(generateBulkLoader=true) public final class IOConverter extends Object;\n// Some core java.nio based Type Converters\n@Converter(generateBulkLoader=true) public final class NIOConverter extends Object;\n// Some core java.lang based Type Converters\n@Converter(generateBulkLoader=true) public final class ObjectConverter extends Object;\n// \n@Converter(generateBulkLoader=true) public final class ResourceConverter extends Object;\n// SQL Date and time related converters.\n@Converter(generateBulkLoader=true) public final class SQLConverter extends Object;\n// A TypeConverter that converts to and from URIs.\n@Converter(generateBulkLoader=true) public final class UriTypeConverter extends Object;\n", "des": "A set of helper classes for converting from different types of Java object to be used by the Type Conversion Support"}
{"index": 2365, "repo": "camel-base-4.0.0-RC1", "code": "package converter\n\n// A class which will auto-discover Converter objects and methods to pre-load the TypeConverterRegistry of converters on startup.\npublic class AnnotationTypeConverterLoader extends Object implements org.apache.camel.spi.TypeConverterLoader;\n// A type converter which is used to convert to and from array types particularly for derived types of array component types and dealing with primitive array types.\npublic class ArrayTypeConverter extends org.apache.camel.support.TypeConverterSupport;\n// A simple converter that can convert any Processor to an AsyncProcessor.\npublic class AsyncProcessorTypeConverter extends org.apache.camel.support.TypeConverterSupport;\n// Base implementation of a type converter registry used for type converters in Camel.\npublic abstract class BaseTypeConverterRegistry extends CoreTypeConverterRegistry;\n// \npublic class CoreTypeConverterRegistry extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.TypeConverter, org.apache.camel.spi.TypeConverterRegistry;\n// Represents a fallback type converter\npublic static class CoreTypeConverterRegistry.FallbackTypeConverter extends Object;\n// Default implementation of a type converter registry used for type converters in Camel.\npublic class DefaultTypeConverter extends BaseTypeConverterRegistry implements org.apache.camel.spi.AnnotationScanTypeConverters;\n// A type converter which is used to convert from String to enum type\npublic class EnumTypeConverter extends org.apache.camel.support.TypeConverterSupport;\n// Future type converter.\npublic final class FutureTypeConverter extends org.apache.camel.support.TypeConverterSupport;\n// A TypeConverter implementation which instantiates an object so that an instance method can be used as a fallback type converter\npublic class InstanceMethodFallbackTypeConverter extends org.apache.camel.support.TypeConverterSupport;\n// A TypeConverter implementation which instantiates an object so that an instance method can be used as a type converter\npublic class InstanceMethodTypeConverter extends org.apache.camel.support.TypeConverterSupport;\n// A TypeConverter implementation which invokes a static method as a fallback type converter from a type to another type\npublic class StaticMethodFallbackTypeConverter extends org.apache.camel.support.TypeConverterSupport;\n// A TypeConverter implementation which invokes a static method to convert from a type to another type\npublic class StaticMethodTypeConverter extends org.apache.camel.support.TypeConverterSupport;\n", "des": "Default implementation classes the Type Conversion Strategies"}
{"index": 2366, "repo": "camel-base-4.0.0-RC1", "code": "package event\n\n// Base class for CamelContext events.\npublic abstract class AbstractContextEvent extends EventObject implements org.apache.camel.spi.CamelEvent.CamelContextEvent;\n// Base class for Exchange events.\npublic abstract class AbstractExchangeEvent extends EventObject implements org.apache.camel.spi.CamelEvent.ExchangeEvent;\n// Base class for CamelContext events.\npublic abstract class AbstractRouteEvent extends EventObject implements org.apache.camel.spi.CamelEvent.RouteEvent;\n// Base class for step events.\npublic abstract class AbstractStepEvent extends AbstractExchangeEvent;\n// \npublic class CamelContextInitializedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextInitializedEvent;\n// \npublic class CamelContextInitializingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextInitializingEvent;\n// \npublic class CamelContextReloadedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadedEvent;\n// \npublic class CamelContextReloadFailureEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadFailureEvent;\n// \npublic class CamelContextReloadingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadingEvent;\n// \npublic class CamelContextResumedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumedEvent;\n// \npublic class CamelContextResumeFailureEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumeFailureEvent;\n// \npublic class CamelContextResumingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumingEvent;\n// \npublic class CamelContextRoutesStartedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStartedEvent;\n// \npublic class CamelContextRoutesStartingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStartingEvent;\n// \npublic class CamelContextRoutesStoppedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStoppedEvent;\n", "des": "Camel management events"}
{"index": 2367, "repo": "camel-base-4.0.0-RC1", "code": "package scan\n\n// Package scan filter for testing if a given class is annotated with any of the annotations.\npublic class AnnotatedWithAnyPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter;\n// Package scan filter for testing if a given class is annotated with a certain annotation.\npublic class AnnotatedWithPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter;\n// Package scan filter for testing if a given class is assignable to another class.\npublic class AssignableToPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter;\n// CompositePackageScanFilter allows multiple PackageScanFilters to be composed into a single filter.\npublic class CompositePackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter;\n// Package scan filter for inverting the match result of a subfilter.\npublic class InvertingPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter;\n", "des": "Package scan classes."}
{"index": 2368, "repo": "spring-security-crypto-6.1.2", "code": "package codec\n\n// \n@Deprecated public final class Base64 extends Object;\n// Hex data encoder.\npublic final class Hex extends Object;\n// UTF-8 Charset encoder/decoder.\npublic final class Utf8 extends Object;\n", "des": "Internal codec classes."}
{"index": 2369, "repo": "pulsar-client-api-3.0.0", "code": "package api\n\n// Pulsar interceptors.\npackage api.interceptor\n// Schema definitions for Pulsar Client API.\npackage api.schema\n// Pulsar transaction related API.\npackage api.transaction\n// Interface of authentication providers.\n@LimitedPrivate @Stable public interface Authentication extends Closeable, Serializable;\n// Interface for accessing data which are used in variety of authentication schemes on client side.\n@LimitedPrivate @Stable public interface AuthenticationDataProvider extends Serializable;\n// Factory class that allows to create Authentication instances for all the supported authentication methods.\n@LimitedPrivate @Stable public final class AuthenticationFactory extends Object;\n// AutoClusterFailoverBuilder is used to configure and create instance of ServiceUrlProvider.\n@Public @Evolving public interface AutoClusterFailoverBuilder;\n// \npublic static enum AutoClusterFailoverBuilder.FailoverPolicy extends Enum<AutoClusterFailoverBuilder.FailoverPolicy>;\n// Batcher builder.\n@Public @Stable public interface BatcherBuilder extends Serializable;\n// Batch message container for individual messages being published until they are batched and sent to broker.\n@Public @Stable public interface BatchMessageContainer;\n// Configuration for message batch receive Consumer.batchReceive() Consumer.batchReceiveAsync().\n@Public @Stable public class BatchReceivePolicy extends Object implements Serializable;\n// Builder of BatchReceivePolicy.\npublic static class BatchReceivePolicy.Builder extends Object;\n// Builder interface that is used to configure and construct a PulsarClient instance.\n@Public @Stable public interface ClientBuilder extends Serializable, Cloneable;\n// The compression type that can be specified on a Producer.\n@Public @Stable public enum CompressionType extends Enum<CompressionType>;\n// An interface that abstracts behavior of Pulsar's consumer.\n@Public @Stable public interface Consumer<T> extends Closeable, MessageAcknowledger;\n// ConsumerBuilder is used to configure and create instances of Consumer.\n@Public @Stable public interface ConsumerBuilder<T> extends Cloneable;\n// The action a consumer should take when a consumer receives a message that it cannot decrypt.\n@Public @Stable public enum ConsumerCryptoFailureAction extends Enum<ConsumerCryptoFailureAction>;\n// Listener on the consumer state changes.\n@Public @Stable public interface ConsumerEventListener extends Serializable;\n", "des": "Pulsar Client API."}
{"index": 2370, "repo": "pulsar-client-api-3.0.0", "code": "package interceptor\n\n// A plugin interface that allows you to intercept (and possibly mutate) the messages received by the producer before they are published to the Pulsar brokers.\n@Public @Stable public interface ProducerInterceptor extends AutoCloseable;\n// A wrapper for old style producer interceptor.\n@Private @Stable public class ProducerInterceptorWrapper extends Object implements ProducerInterceptor;\n", "des": "Pulsar interceptors."}
{"index": 2371, "repo": "pulsar-client-api-3.0.0", "code": "package schema\n\n// A field in a record, consisting of a field name, index, and Schema for the field value.\n@Public @Stable public class Field extends Object;\n// Build a field for a record.\n@Public @Stable public interface FieldSchemaBuilder<T extends FieldSchemaBuilder<T>>;\n// This is an abstraction over the logical value that is store into a Message.\npublic interface GenericObject;\n// An interface represents a message with schema.\n@Public @Stable public interface GenericRecord extends GenericObject;\n// Generic Record Builder to build a GenericRecord.\n@Public @Stable public interface GenericRecordBuilder;\n// A schema that serializes and deserializes between GenericRecord and bytes.\n@Public @Stable public interface GenericSchema<T extends GenericRecord> extends Schema<T>;\n// This interface models a Schema that is composed of two parts.\npublic interface KeyValueSchema<K,V> extends Schema<KeyValue<K,V>>;\n// Building the schema for a GenericRecord.\n@Public @Stable public interface RecordSchemaBuilder;\n// Builder to build schema.\n@Public @Stable public interface SchemaBuilder;\n// Interface for schema definition.\n@Public @Stable public interface SchemaDefinition<T>;\n// Builder to build schema definition SchemaDefinition.\n@Public @Stable public interface SchemaDefinitionBuilder<T>;\n// Schema Provider.\n@Private @Stable public interface SchemaInfoProvider;\n// Deserialize messages from bytes.\n@Public @Stable public interface SchemaReader<T>;\n// Serialize messages into bytes.\n@Public @Stable @FunctionalInterface public interface SchemaWriter<T>;\n", "des": "Schema definitions for Pulsar Client API."}
{"index": 2372, "repo": "pulsar-client-api-3.0.0", "code": "package transaction\n\n// The class represents a transaction within Pulsar.\n@Public @Evolving public interface Transaction;\n// \npublic static enum Transaction.State extends Enum<Transaction.State>;\n// The transaction buffer client to commit and abort transactions on topics or subscription.\n@Private @Evolving public interface TransactionBufferClient;\n// Exceptions for transaction buffer client.\n@Private @Evolving public class TransactionBufferClientException extends IOException;\n// Thrown when transaction buffer op over max pending numbers.\npublic static class TransactionBufferClientException.ReachMaxPendingOpsException extends TransactionBufferClientException;\n// Thrown when operation timeout.\npublic static class TransactionBufferClientException.RequestTimeoutException extends TransactionBufferClientException;\n// The builder to build a transaction for Pulsar.\n@Public @Evolving public interface TransactionBuilder;\n// Transaction coordinator client.\n@Private @Evolving public interface TransactionCoordinatorClient extends Closeable;\n// State of the transaction coordinator client.\npublic static enum TransactionCoordinatorClient.State extends Enum<TransactionCoordinatorClient.State>;\n// Exceptions for transaction coordinator client.\n@Private @Evolving public class TransactionCoordinatorClientException extends IOException;\n// Thrown when transaction coordinator with unexpected state.\npublic static class TransactionCoordinatorClientException.CoordinatorClientStateException extends TransactionCoordinatorClientException;\n// Thrown when transaction coordinator not found in broker side.\npublic static class TransactionCoordinatorClientException.CoordinatorNotFoundException extends TransactionCoordinatorClientException;\n// Thrown when transaction switch to a invalid status.\npublic static class TransactionCoordinatorClientException.InvalidTxnStatusException extends TransactionCoordinatorClientException;\n// Thrown when transaction meta store handler not exists.\npublic static class TransactionCoordinatorClientException.MetaStoreHandlerNotExistsException extends TransactionCoordinatorClientException;\n// Thrown when send request to transaction meta store but the transaction meta store handler not ready.\npublic static class TransactionCoordinatorClientException.MetaStoreHandlerNotReadyException extends TransactionCoordinatorClientException;\n// Thrown when transaction not found in transaction coordinator.\npublic static class TransactionCoordinatorClientException.TransactionNotFoundException extends TransactionCoordinatorClientException;\n// An identifier for representing a transaction.\n@Public @Evolving public class TxnID extends Object implements Serializable;\n", "des": "Pulsar transaction related API."}
{"index": 2373, "repo": "pulsar-client-api-3.0.0", "code": "package internal\n\n// This class loads the implementation for PulsarClientImplementationBinding and allows you to decouple the API from the actual implementation.\npublic class DefaultImplementation extends Object;\n// Internal utility methods for filtering and mapping Properties objects.\npublic class PropertiesUtils extends Object;\n// Helper class for class instantiations and it also contains methods to work with schemas.\npublic interface PulsarClientImplementationBinding;\n", "des": "Helpers which provide useful functionality for the implementation of Pulsar Client API."}
{"index": 2374, "repo": "pulsar-client-api-3.0.0", "code": "package api\n\n// Authentication data.\npublic final class AuthData extends Object;\n// Class representing an encryption context.\npublic class EncryptionContext extends Object;\n// Encryption key with metadata.\npublic static class EncryptionContext.EncryptionKey extends Object;\n", "des": "Common data classes used in the Pulsar Client API."}
{"index": 2375, "repo": "pulsar-client-api-3.0.0", "code": "package classification\n\n// Annotation to inform users of a package, class or method's intended audience.\n@Public @Stable public class InterfaceAudience extends Object;\n// Intended for use only within the project(s) specified in the annotation.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.LimitedPrivate;\n// Intended for use only within the project itself.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.Private;\n// Intended for use by any project or application.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.Public;\n// Annotation to inform users of how much to rely on a particular package, class or method not changing over time.\n@Public @Stable public class InterfaceStability extends Object;\n// Evolving, but can break compatibility at minor release (i.e.\n@Documented public static @interface InterfaceStability.Evolving;\n// Can evolve while retaining compatibility for minor release boundaries.; can break compatibility only at major release (ie.\n@Documented public static @interface InterfaceStability.Stable;\n// No guarantee is provided as to reliability or stability across any level of release granularity.\n@Documented public static @interface InterfaceStability.Unstable;\n", "des": "Annotations used across the whole project."}
{"index": 2376, "repo": "pulsar-client-api-3.0.0", "code": "package schema\n\n// A simple KeyValue class.\n@Public @Stable public class KeyValue<K,V> extends Object;\n// Decoder to decode key/value bytes.\n@FunctionalInterface public static interface KeyValue.KeyValueDecoder<K,V>;\n// Encoding types of supported KeyValueSchema for Pulsar messages.\n@Public @Stable public enum KeyValueEncodingType extends Enum<KeyValueEncodingType>;\n// Information about the schema.\n@Public @Stable public interface SchemaInfo;\n// \npublic static class SchemaInfo.SchemaInfoBuilder extends Object;\n// Data structure representing a schema information including its version.\n@Public @Stable public class SchemaInfoWithVersion extends Object;\n// Types of supported schema for Pulsar messages.\n@Public @Stable public enum SchemaType extends Enum<SchemaType>;\n", "des": "This package contains data structures for schema definitions used in the Pulsar Client API."}
{"index": 2377, "repo": "spring-batch-core-5.0.2", "code": "package core\n\n// Annotations for java based configuration of listeners.\npackage core.annotation\n// Interfaces for registration and location of job configurations.\npackage core.configuration\n// Support classes for implementations of the batch APIs.\npackage core.converter\n// Interfaces and related classes to support meta data browsing.\npackage core.explore\n// Specific implementations of job concerns.\npackage core.job\n// Interfaces and simple implementations of launch concerns.\npackage core.launch\n// Generic implementations of core batch listener interfaces.\npackage core.listener\n// This package contains APIs related to batch observability.\npackage core.observability\n// Interfaces for partitioning components.\npackage core.partition\n// Interfaces and generic implementations of repository concerns.\npackage core.repository\n// Implementation of Spring Batch specific bean scopes (Job and Step).\npackage core.scope\n// Specific implementations of step concerns.\npackage core.step\n// Enumeration representing the status of an execution.\npublic enum BatchStatus extends Enum<BatchStatus>;\n// Listener interface for the lifecycle of a chunk.\npublic interface ChunkListener extends StepListener;\n// Default implementation of the JobKeyGenerator interface.\npublic class DefaultJobKeyGenerator extends Object implements JobKeyGenerator<JobParameters>;\n// Batch Domain Entity class.\npublic class Entity extends Object implements Serializable;\n// Value object used to carry information about the status of a job or step execution.\npublic class ExitStatus extends Object implements Serializable, Comparable<ExitStatus>;\n// Listener interface for the processing of an item.\npublic interface ItemProcessListener<T,S> extends StepListener;\n// Listener interface around the reading of an item.\npublic interface ItemReadListener<T> extends StepListener;\n// Listener interface for the writing of items.\npublic interface ItemWriteListener<S> extends StepListener;\n// Batch domain object representing a job.\npublic interface Job;\n// Batch domain object representing the execution of a job.\npublic class JobExecution extends Entity;\n// Root of exception hierarchy for checked exceptions in job and step execution.\npublic class JobExecutionException extends Exception;\n// Provide callbacks at specific points in the lifecycle of a Job.\npublic interface JobExecutionListener;\n// Batch domain object representing a uniquely identifiable job run.\npublic class JobInstance extends Entity;\n", "des": "Core domain context for Spring Batch covering jobs, steps, configuration and execution abstractions."}
{"index": 2378, "repo": "spring-batch-core-5.0.2", "code": "package annotation\n\n// Marks a method to be called after a chunk is executed. Expected signature: void afterChunk(ChunkContext context)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterChunk;\n// Marks a method to be called after a chunk has failed and been marked for rollback. Expected signature: void afterFailedChunk(ChunkContext context)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterChunkError;\n// Marks a method to be called after a Job has completed.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterJob;\n// Marks a method to be called after an item is passed to an ItemProcessor.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterProcess;\n// Marks a method to be called after an item is read from an ItemReader Expected signature: void afterRead(T item)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterRead;\n// Marks a method to be called after a Step has completed.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterStep;\n// Marks a method to be called after an item is passed to an ItemWriter.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterWrite;\n// Marks a method to be called before a chunk is executed.\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeChunk;\n// Marks a method to be called before a Job is executed, which comes after a JobExecution is created and persisted but before the first Step is executed.\n@Retention(RUNTIME) @Target(METHOD) @Qualifier(\"JobExecutionListener\") public @interface BeforeJob;\n// Marks a method to be called before an item is passed to an ItemProcessor Expected signature: void beforeProcess(T item)\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeProcess;\n// Marks a method to be called before an item is read from an ItemReader Expected signature: void beforeRead()\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeRead;\n", "des": "Annotations for java based configuration of listeners."}
{"index": 2379, "repo": "spring-batch-core-5.0.2", "code": "package configuration\n\n// Annotations and builder factories for java based configuration\npackage configuration.annotation\n// Specific implementations of configuration concerns.\npackage configuration.support\n// Parsers for XML based configuration\npackage configuration.xml\n// Represents that an error has occurred in the configuration of the base batch infrastructure (the creation of a JobRepository, for example).\npublic class BatchConfigurationException extends RuntimeException;\n// Checked exception that indicates a name clash when registering Job instances.\npublic class DuplicateJobException extends JobExecutionException;\n// Strategy for creating a single job.\npublic interface JobFactory;\n// A runtime service locator interface for retrieving job configurations by name.\npublic interface JobLocator;\n// A runtime service registry interface for registering job configurations by name.\npublic interface JobRegistry extends ListableJobLocator;\n// A listable extension of JobLocator.\npublic interface ListableJobLocator extends JobLocator;\n// Registry keeping track of all the Step instances defined in a Job.\npublic interface StepRegistry;\n", "des": "Interfaces for registration and location of job configurations."}
{"index": 2380, "repo": "spring-batch-core-5.0.2", "code": "package annotation\n\n// Bean post processor that configures observable batch artifacts (jobs and steps) with Micrometer's observation registry.\npublic class BatchObservabilityBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.beans.factory.config.BeanPostProcessor;\n// Enable Spring Batch features and provide a base configuration for setting up batch jobs in an @Configuration class, roughly equivalent to using the <batch:*> XML namespace.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import({org.springframework.batch.core.configuration.annotation.BatchRegistrar.class,ScopeConfiguration.class,org.springframework.batch.core.configuration.annotation.AutomaticJobRegistrarBeanPostProcessor.class,BatchObservabilityBeanPostProcessor.class}) public @interface EnableBatchProcessing;\n// \n@Deprecated(since=\"5.0.0\", forRemoval=true) public class JobBuilderFactory extends Object;\n// Convenient annotation for job-scoped beans that defaults the proxy mode, so that it does not have to be specified explicitly on every bean definition.\n@Scope(value=\"job\", proxyMode=TARGET_CLASS) @Retention(RUNTIME) @Documented public @interface JobScope;\n// \n@Deprecated(since=\"5.0.0\", forRemoval=true) public class StepBuilderFactory extends Object;\n// Convenient annotation for step-scoped beans.\n@Scope(value=\"step\", proxyMode=TARGET_CLASS) @Retention(RUNTIME) @Documented public @interface StepScope;\n", "des": "Annotations and builder factories for java based configuration"}
{"index": 2381, "repo": "spring-batch-core-5.0.2", "code": "package support\n\n// ApplicationContextFactory implementation that takes a parent context and a path to the context to create.\npublic abstract class AbstractApplicationContextFactory extends Object implements ApplicationContextFactory, org.springframework.context.ApplicationContextAware;\n// Factory for the creation of ApplicationContext instances.\npublic interface ApplicationContextFactory;\n// A JobFactory that creates its own ApplicationContext and pulls a bean out when asked to create a Job.\npublic class ApplicationContextJobFactory extends Object implements JobFactory;\n// Loads and unloads Jobs when the application context is created and destroyed.\npublic class AutomaticJobRegistrar extends Object implements org.springframework.core.Ordered, org.springframework.context.SmartLifecycle, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean;\n// A convenient factory for creating a set of ApplicationContextFactory components from a set of resources.\npublic class ClasspathXmlApplicationContextsFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ApplicationContextFactory[]>, org.springframework.context.ApplicationContextAware;\n// Base Configuration class that provides common JDBC-based infrastructure beans for enabling and using Spring Batch.\n@Configuration(proxyBeanMethods=false) @Import(ScopeConfiguration.class) public class DefaultBatchConfiguration extends Object implements org.springframework.context.ApplicationContextAware;\n// Default implementation of JobLoader.\npublic class DefaultJobLoader extends Object implements JobLoader, org.springframework.beans.factory.InitializingBean;\n// ApplicationContextFactory implementation that takes a parent context and a path to the context to create.\npublic class GenericApplicationContextFactory extends AbstractApplicationContextFactory;\n// A Job that can optionally prepend a group name to another job's name, to make it fit a naming convention for type or origin.\npublic class GroupAwareJob extends Object implements Job;\n// Generic service that can bind and unbind a JobFactory in a JobRegistry.\npublic class JobFactoryRegistrationListener extends Object;\n// \npublic interface JobLoader;\n", "des": "Specific implementations of configuration concerns."}
{"index": 2382, "repo": "spring-batch-core-5.0.2", "code": "package xml\n\n// \npublic abstract class AbstractFlowParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n// \npublic abstract class AbstractListenerParser extends Object;\n// Internal parser for the <step/> elements inside a job.\npublic abstract class AbstractStepParser extends Object;\n// \npublic class BeanDefinitionUtils extends Object;\n// Internal parser for the <chunk/> element inside a step.\npublic class ChunkElementParser extends Object;\n// \npublic class CoreNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n// Post-process jobs and steps defined using the batch namespace to inject dependencies.\npublic class CoreNamespacePostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.context.ApplicationContextAware;\n// Utility methods used in parsing of the batch core namespace.\npublic class CoreNamespaceUtils extends Object;\n// Internal parser for the <decision/> elements inside a job.\npublic class DecisionParser extends Object;\n// \npublic class ExceptionElementParser extends Object;\n// Internal parser for the <flow/> elements inside a job.\npublic class FlowElementParser extends Object;\n// \npublic class InlineFlowParser extends AbstractFlowParser;\n// Internal parser for the <step/> elements inside a job.\npublic class InlineStepParser extends AbstractStepParser;\n// Parser for a step listener element.\npublic class JobExecutionListenerParser extends AbstractListenerParser;\n// Parser for the <job/> element in the Batch namespace.\npublic class JobParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n// This FactoryBean is used by the batch namespace parser to create FlowJob objects.\npublic class JobParserJobFactoryBean extends Object implements org.springframework.beans.factory.SmartFactoryBean<FlowJob>;\n// Parser for the <job-repository/> element in the Batch namespace.\npublic class JobRepositoryParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n", "des": "Parsers for XML based configuration"}
{"index": 2383, "repo": "spring-batch-core-5.0.2", "code": "package converter\n\n// Converter implementation from Date to String.\npublic class DateToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<Date,String>;\n// Converter for JobParameters instances that uses a simple naming convention for converting job parameters.\npublic class DefaultJobParametersConverter extends Object implements JobParametersConverter;\n// Exception to report an error when converting job parameters.\npublic class JobParametersConversionException extends RuntimeException;\n// A factory for JobParameters instances.\npublic interface JobParametersConverter;\n// Converter for JobParameters instances that uses a JSON naming convention for converting job parameters.\npublic class JsonJobParametersConverter extends DefaultJobParametersConverter;\n// \npublic static record JsonJobParametersConverter.JobParameterDefinition(String value, String type, String identifying) extends Record;\n// Converter implementation from LocalDateTime to String.\npublic class LocalDateTimeToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalDateTime,String>;\n// Converter implementation from LocalDate to String.\npublic class LocalDateToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalDate,String>;\n// Converter implementation from LocalTime to String.\npublic class LocalTimeToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalTime,String>;\n// Converter implementation from String to Date.\npublic class StringToDateConverter extends Object implements org.springframework.core.convert.converter.Converter<String,Date>;\n// Converter implementation from String to LocalDate.\npublic class StringToLocalDateConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalDate>;\n// Converter implementation from String to LocalDateTime.\npublic class StringToLocalDateTimeConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalDateTime>;\n// Converter implementation from String to LocalTime.\npublic class StringToLocalTimeConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalTime>;\n", "des": "Support classes for implementations of the batch APIs."}
{"index": 2384, "repo": "spring-batch-core-5.0.2", "code": "package explore\n\n// Specific implementations of explorer concerns.\npackage explore.support\n// Entry point for browsing the executions of running or historical jobs and steps.\npublic interface JobExplorer;\n", "des": "Interfaces and related classes to support meta data browsing."}
{"index": 2385, "repo": "spring-batch-core-5.0.2", "code": "package support\n\n// A FactoryBean that automates the creation of a SimpleJobExplorer.\npublic abstract class AbstractJobExplorerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobExplorer>, org.springframework.beans.factory.InitializingBean;\n// A FactoryBean that automates the creation of a SimpleJobExplorer by using JDBC DAO implementations.\npublic class JobExplorerFactoryBean extends AbstractJobExplorerFactoryBean implements org.springframework.beans.factory.InitializingBean;\n// Implementation of JobExplorer that uses the injected DAOs.\npublic class SimpleJobExplorer extends Object implements JobExplorer;\n", "des": "Specific implementations of explorer concerns."}
{"index": 2386, "repo": "spring-batch-core-5.0.2", "code": "package job\n\n// Job and flow level builders for java based configuration of batch jobs\npackage job.builder\n// Flow related constructs including Flow interface, executors, and related exceptions\npackage job.flow\n// Abstract implementation of the Job interface.\npublic abstract class AbstractJob extends Object implements Job, StepLocator, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean;\n// Composite JobParametersValidator that passes the job parameters through a sequence of injected JobParametersValidators\npublic class CompositeJobParametersValidator extends Object implements JobParametersValidator, org.springframework.beans.factory.InitializingBean;\n// Default implementation of JobParametersValidator.\npublic class DefaultJobParametersValidator extends Object implements JobParametersValidator, org.springframework.beans.factory.InitializingBean;\n// Simple implementation of Job interface providing the ability to run a JobExecution.\npublic class SimpleJob extends AbstractJob;\n// Implementation of StepHandler that manages repository and restart concerns.\npublic class SimpleStepHandler extends Object implements StepHandler, org.springframework.beans.factory.InitializingBean;\n// Strategy interface for handling a Step on behalf of a Job.\npublic interface StepHandler;\n", "des": "Specific implementations of job concerns."}
{"index": 2387, "repo": "spring-batch-core-5.0.2", "code": "package builder\n\n// A builder for a flow of steps that can be executed as a job or as part of a job.\npublic class FlowBuilder<Q> extends Object;\n// A builder for building a split state.\npublic static class FlowBuilder.SplitBuilder<Q> extends Object;\n// A builder for transitions within a flow.\npublic static class FlowBuilder.TransitionBuilder<Q> extends Object;\n// A builder for continuing a flow from a decision state.\npublic static class FlowBuilder.UnterminatedFlowBuilder<Q> extends Object;\n// \npublic class FlowBuilderException extends RuntimeException;\n// A job builder for FlowJob instances.\npublic class FlowJobBuilder extends JobBuilderHelper<FlowJobBuilder>;\n// Convenience for building jobs of various kinds.\npublic class JobBuilder extends JobBuilderHelper<JobBuilder>;\n// \npublic class JobBuilderException extends RuntimeException;\n// A base class and utility for other job builders providing access to common properties like job repository.\npublic abstract class JobBuilderHelper<B extends JobBuilderHelper<B>> extends Object;\n// \npublic static class JobBuilderHelper.CommonJobProperties extends Object;\n// \npublic class JobFlowBuilder extends FlowBuilder<FlowJobBuilder>;\n// \npublic class SimpleJobBuilder extends JobBuilderHelper<SimpleJobBuilder>;\n", "des": "Job and flow level builders for java based configuration of batch jobs"}
{"index": 2388, "repo": "spring-batch-core-5.0.2", "code": "package flow\n\n// Basic implementations of flow constructs\npackage flow.support\n// \npublic interface Flow;\n// \npublic class FlowExecution extends Object implements Comparable<FlowExecution>;\n// \npublic class FlowExecutionException extends Exception;\n// Represents the status of FlowExecution.\npublic class FlowExecutionStatus extends Object implements Comparable<FlowExecutionStatus>;\n// Context and execution strategy for FlowJob to allow it to delegate its execution step by step.\npublic interface FlowExecutor;\n// Convenient interface for components that contain nested flows.\npublic interface FlowHolder;\n// Implementation of the Job interface that allows for complex flows of steps, rather than requiring sequential execution.\npublic class FlowJob extends AbstractJob;\n// A Step implementation that delegates to a Flow.\npublic class FlowStep extends AbstractStep;\n// Interface allowing for programmatic access to the decision on what the status of a flow should be.\n@FunctionalInterface public interface JobExecutionDecider;\n// Implementation of FlowExecutor for use in components that need to execute a flow related to a JobExecution.\npublic class JobFlowExecutor extends Object implements FlowExecutor;\n// \npublic interface State;\n", "des": "Flow related constructs including Flow interface, executors, and related exceptions"}
{"index": 2389, "repo": "spring-batch-core-5.0.2", "code": "package support\n\n// States used in defining the underlying Spring Batch state machine\npackage support.state\n// Sorts by decreasing specificity of pattern, based on just counting wildcards (with * taking precedence over ?).\npublic class DefaultStateTransitionComparator extends Object implements Comparator<StateTransition>;\n// A Flow that branches conditionally depending on the exit status of the last State.\npublic class SimpleFlow extends Object implements Flow, org.springframework.beans.factory.InitializingBean;\n// Value object representing a potential transition from one State to another.\npublic final class StateTransition extends Object;\n", "des": "Basic implementations of flow constructs"}
{"index": 2390, "repo": "spring-batch-core-5.0.2", "code": "package state\n\n// \npublic abstract class AbstractState extends Object implements State;\n// State that requires a decider to make the status decision.\npublic class DecisionState extends AbstractState;\n// State implementation for ending a job if it is in progress and continuing if just starting.\npublic class EndState extends AbstractState;\n// Strategy interface for aggregating FlowExecution instances into a single exit status.\npublic interface FlowExecutionAggregator;\n// State that delegates to a Flow\npublic class FlowState extends AbstractState implements FlowHolder;\n// Implementation of the FlowExecutionAggregator interface that aggregates FlowExecutionStatus', using the status with the high precedence as the aggregate status.\npublic class MaxValueFlowExecutionAggregator extends Object implements FlowExecutionAggregator;\n// A State implementation that splits a Flow into multiple parallel subflows.\npublic class SplitState extends AbstractState implements FlowHolder;\n// State implementation that delegates to a FlowExecutor to execute the specified Step.\npublic class StepState extends AbstractState implements StepLocator, StepHolder;\n", "des": "States used in defining the underlying Spring Batch state machine"}
{"index": 2391, "repo": "spring-batch-core-5.0.2", "code": "package launch\n\n// Support classes for use in bootstrap and launch implementations or configurations.\npackage launch.support\n// Checked exception to indicate that user asked for a job execution to be resumed when actually it didn't fail.\npublic class JobExecutionNotFailedException extends JobExecutionException;\n// Checked exception indicating that a JobExecution that is not currently running has been requested to stop.\npublic class JobExecutionNotRunningException extends JobExecutionException;\n// Checked exception to indicate that user asked for a job execution to be aborted when hasn't been stopped.\npublic class JobExecutionNotStoppedException extends JobExecutionException;\n// Checked exception to indicate that a required Job is not available.\npublic class JobInstanceAlreadyExistsException extends JobExecutionException;\n// Simple interface for controlling jobs, including possible ad-hoc executions, based on different runtime identifiers.\n@FunctionalInterface public interface JobLauncher;\n// Low level interface for inspecting and controlling jobs with access only to primitive and collection types.\npublic interface JobOperator;\n// Checked exception to indicate that a required JobParametersIncrementer is not available.\npublic class JobParametersNotFoundException extends JobExecutionException;\n// Checked exception to indicate that a required Job is not available.\npublic class NoSuchJobException extends JobExecutionException;\n// Checked exception to indicate that a required JobExecution is not available.\npublic class NoSuchJobExecutionException extends JobExecutionException;\n// Exception that signals that the user requested an operation on a non-existent JobInstance.\npublic class NoSuchJobInstanceException extends JobExecutionException;\n", "des": "Interfaces and simple implementations of launch concerns."}
{"index": 2392, "repo": "spring-batch-core-5.0.2", "code": "package support\n\n// Basic launcher for starting jobs from the command line.\npublic class CommandLineJobRunner extends Object;\n// This incrementer uses a DataFieldMaxValueIncrementer to generate the sequence of values to use as job instance discriminator.\npublic class DataFieldMaxValueJobParametersIncrementer extends Object implements JobParametersIncrementer;\n// This interface should be implemented when an environment calling the batch framework has specific requirements regarding the operating system process return status.\npublic interface ExitCodeMapper;\n// Convenient factory bean that creates a transactional proxy around a JobOperator.\npublic class JobOperatorFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobOperator>, org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public class JobRegistryBackgroundJobRunner extends Object;\n// Implementation of the SystemExiter interface that calls the standards System.exit method.\npublic class JvmSystemExiter extends Object implements SystemExiter;\n// This incrementer increments a \"run.id\" parameter of type Long from the given job parameters.\npublic class RunIdIncrementer extends Object implements JobParametersIncrementer;\n// \npublic class RuntimeExceptionTranslator extends Object implements org.aopalliance.intercept.MethodInterceptor;\n// \n@Deprecated(since=\"5.0.0\", forRemoval=true) public class SimpleJobLauncher extends Object implements JobLauncher, org.springframework.beans.factory.InitializingBean;\n// Simple implementation of the JobOperator interface.\npublic class SimpleJobOperator extends Object implements JobOperator, org.springframework.beans.factory.InitializingBean;\n// An implementation of ExitCodeMapper that can be configured through a map from batch exit codes (String) to integer results.\npublic class SimpleJvmExitCodeMapper extends Object implements ExitCodeMapper;\n// Interface for exiting the JVM.\npublic interface SystemExiter;\n// Implementation of the JobLauncher interface based on a TaskExecutor.\npublic class TaskExecutorJobLauncher extends SimpleJobLauncher;\n", "des": "Support classes for use in bootstrap and launch implementations or configurations."}
{"index": 2393, "repo": "spring-batch-core-5.0.2", "code": "package listener\n\n// FactoryBean implementation that builds a listener based on the various lifecycle methods or annotations that are provided.\npublic abstract class AbstractListenerFactoryBean<T> extends Object implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated public class ChunkListenerSupport extends Object implements ChunkListener;\n// \npublic class CompositeChunkListener extends Object implements ChunkListener;\n// \npublic class CompositeItemProcessListener<T,S> extends Object implements ItemProcessListener<T,S>;\n// \npublic class CompositeItemReadListener<T> extends Object implements ItemReadListener<T>;\n// \npublic class CompositeItemWriteListener<S> extends Object implements ItemWriteListener<S>;\n// \npublic class CompositeJobExecutionListener extends Object implements JobExecutionListener;\n// \npublic class CompositeSkipListener<T,S> extends Object implements SkipListener<T,S>;\n// \npublic class CompositeStepExecutionListener extends Object implements StepExecutionListener;\n// This class can be used to automatically promote items from the Step ExecutionContext to the Job ExecutionContext at the end of a step.\npublic class ExecutionContextPromotionListener extends Object implements StepExecutionListener, org.springframework.beans.factory.InitializingBean;\n// Basic no-op implementation of the ItemReadListener, ItemProcessListener, and ItemWriteListener interfaces.\npublic class ItemListenerSupport<I,O> extends Object implements ItemReadListener<I>, ItemProcessListener<I,O>, ItemWriteListener<O>;\n// \n@Deprecated public class JobExecutionListenerSupport extends Object implements JobExecutionListener;\n// This AbstractListenerFactoryBean implementation is used to create a JobExecutionListener.\npublic class JobListenerFactoryBean extends AbstractListenerFactoryBean<JobExecutionListener>;\n// Enumeration for JobExecutionListener meta data, which ties together the names of methods, their interfaces, annotation, and expected arguments.\npublic enum JobListenerMetaData extends Enum<JobListenerMetaData> implements ListenerMetaData;\n// This class can be used to automatically copy items from the JobParameters to the Step ExecutionContext.\npublic class JobParameterExecutionContextCopyListener extends Object implements StepExecutionListener;\n// A common interface for listener meta data enumerations.\npublic interface ListenerMetaData;\n", "des": "Generic implementations of core batch listener interfaces."}
{"index": 2394, "repo": "spring-batch-core-5.0.2", "code": "package observability\n\n// Observation context for batch jobs.\npublic class BatchJobContext extends io.micrometer.observation.Observation.Context implements Supplier<BatchJobContext>;\n// Observation created around a Job execution.\npublic enum BatchJobObservation extends Enum<BatchJobObservation> implements io.micrometer.observation.docs.ObservationDocumentation;\n// ObservationConvention for BatchJobContext.\npublic interface BatchJobObservationConvention extends io.micrometer.observation.ObservationConvention<BatchJobContext>;\n// Central class for batch metrics.\npublic final class BatchMetrics extends Object;\n// Observation context for batch steps.\npublic class BatchStepContext extends io.micrometer.observation.Observation.Context implements Supplier<BatchStepContext>;\n// Observation created around a step execution.\npublic enum BatchStepObservation extends Enum<BatchStepObservation> implements io.micrometer.observation.docs.ObservationDocumentation;\n// ObservationConvention for BatchStepContext.\npublic interface BatchStepObservationConvention extends io.micrometer.observation.ObservationConvention<BatchStepContext>;\n// Default BatchJobObservationConvention implementation.\npublic class DefaultBatchJobObservationConvention extends Object implements BatchJobObservationConvention;\n// Default BatchStepObservationConvention implementation.\npublic class DefaultBatchStepObservationConvention extends Object implements BatchStepObservationConvention;\n", "des": "This package contains APIs related to batch observability."}
{"index": 2395, "repo": "spring-batch-core-5.0.2", "code": "package partition\n\n// Implementation of common partition components.\npackage partition.support\n// Interface defining the responsibilities of controlling the execution of a partitioned StepExecution.\n@FunctionalInterface public interface PartitionHandler;\n// Strategy interface for generating input contexts for a partitioned step execution independent from the fabric they are going to run on.\npublic interface StepExecutionSplitter;\n", "des": "Interfaces for partitioning components."}
{"index": 2396, "repo": "spring-batch-core-5.0.2", "code": "package support\n\n// Base PartitionHandler implementation providing common base features.\npublic abstract class AbstractPartitionHandler extends Object implements PartitionHandler;\n// Convenience class for aggregating a set of StepExecution instances into a single result.\npublic class DefaultStepExecutionAggregator extends Object implements StepExecutionAggregator;\n// Implementation of Partitioner that locates multiple resources and associates their file names with execution context keys.\npublic class MultiResourcePartitioner extends Object implements Partitioner;\n// Central strategy interface for creating input parameters for a partitioned step in the form of ExecutionContext instances.\n@FunctionalInterface public interface Partitioner;\n// Optional interface for Partitioner implementations that need to use a custom naming scheme for partitions.\npublic interface PartitionNameProvider;\n// Implementation of Step which partitions the execution and spreads the load using a PartitionHandler.\npublic class PartitionStep extends AbstractStep;\n// Convenience class for aggregating a set of StepExecution instances when the input comes from remote steps, so the data need to be refreshed from the repository.\npublic class RemoteStepExecutionAggregator extends Object implements StepExecutionAggregator, org.springframework.beans.factory.InitializingBean;\n// Simplest possible implementation of Partitioner.\npublic class SimplePartitioner extends Object implements Partitioner;\n// Generic implementation of StepExecutionSplitter that delegates to a Partitioner to generate ExecutionContext instances.\npublic class SimpleStepExecutionSplitter extends Object implements StepExecutionSplitter, org.springframework.beans.factory.InitializingBean;\n// Strategy for a aggregating step executions, usually when they are the result of partitioned or remote execution.\n@FunctionalInterface public interface StepExecutionAggregator;\n// A PartitionHandler that uses a TaskExecutor to execute the partitioned Step locally in multiple threads.\npublic class TaskExecutorPartitionHandler extends AbstractPartitionHandler implements StepHolder, org.springframework.beans.factory.InitializingBean;\n", "des": "Implementation of common partition components."}
{"index": 2397, "repo": "spring-batch-core-5.0.2", "code": "package repository\n\n// Specific implementations of dao concerns.\npackage repository.dao\n// Specific implementations of repository concerns.\npackage repository.support\n// A composite interface that combines both serialization and deserialization of an execution context into a single implementation.\npublic interface ExecutionContextSerializer extends org.springframework.core.serializer.Serializer<Map<String,Object>>, org.springframework.core.serializer.Deserializer<Map<String,Object>>;\n// \npublic class JobExecutionAlreadyRunningException extends JobExecutionException;\n// An exception indicating an illegal attempt to restart a job that was already completed successfully.\npublic class JobInstanceAlreadyCompleteException extends JobExecutionException;\n// Repository responsible for persistence of batch meta-data entities.\npublic interface JobRepository;\n// An exception indicating an illegal attempt to restart a job.\npublic class JobRestartException extends JobExecutionException;\n", "des": "Interfaces and generic implementations of repository concerns."}
{"index": 2398, "repo": "spring-batch-core-5.0.2", "code": "package dao\n\n// Encapsulates common functionality needed by JDBC batch metadata DAOs - provides jdbcTemplate for subclasses and handles table prefixes.\npublic abstract class AbstractJdbcBatchMetadataDao extends Object implements org.springframework.beans.factory.InitializingBean;\n// An implementation of the ExecutionContextSerializer that produces/consumes Base64 content.\npublic class DefaultExecutionContextSerializer extends Object implements ExecutionContextSerializer;\n// DAO interface for persisting and retrieving ExecutionContexts.\npublic interface ExecutionContextDao;\n// Implementation that uses Jackson2 to provide (de)serialization.\npublic class Jackson2ExecutionContextStringSerializer extends Object implements ExecutionContextSerializer;\n// JDBC DAO for ExecutionContext.\npublic class JdbcExecutionContextDao extends AbstractJdbcBatchMetadataDao implements ExecutionContextDao;\n// JDBC implementation of JobExecutionDao.\npublic class JdbcJobExecutionDao extends AbstractJdbcBatchMetadataDao implements JobExecutionDao, org.springframework.beans.factory.InitializingBean;\n// JDBC implementation of JobInstanceDao.\npublic class JdbcJobInstanceDao extends AbstractJdbcBatchMetadataDao implements JobInstanceDao, org.springframework.beans.factory.InitializingBean;\n// JDBC implementation of StepExecutionDao. Allows customization of the tables names used by Spring Batch for step meta data via a prefix property. Uses sequences or tables (via Spring's DataFieldMaxValueIncrementer abstraction) to create all primary keys before inserting a new row.\npublic class JdbcStepExecutionDao extends AbstractJdbcBatchMetadataDao implements StepExecutionDao, org.springframework.beans.factory.InitializingBean;\n// Data Access Object for job executions.\npublic interface JobExecutionDao;\n// Data Access Object for job instances.\npublic interface JobInstanceDao;\n// This exception identifies that a batch domain object is invalid, which is generally caused by an invalid ID.\npublic class NoSuchObjectException extends RuntimeException;\n// \npublic interface StepExecutionDao;\n", "des": "Specific implementations of dao concerns."}
{"index": 2399, "repo": "spring-batch-core-5.0.2", "code": "package support\n\n// A FactoryBean that automates the creation of a SimpleJobRepository.\npublic abstract class AbstractJobRepositoryFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobRepository>, org.springframework.beans.factory.InitializingBean;\n// A FactoryBean that automates the creation of a SimpleJobRepository using JDBC DAO implementations which persist batch metadata in database.\npublic class JobRepositoryFactoryBean extends AbstractJobRepositoryFactoryBean implements org.springframework.beans.factory.InitializingBean;\n// Implementation of JobRepository that stores job instances, job executions, and step executions using the injected DAOs.\npublic class SimpleJobRepository extends Object implements JobRepository;\n", "des": "Specific implementations of repository concerns."}
{"index": 2400, "repo": "spring-batch-core-5.0.2", "code": "package scope\n\n// Implementation of the contexts for each of the custom bean scopes in Spring Batch (Job and Step).\npackage scope.context\n// ScopeSupport.\npublic abstract class BatchScopeSupport extends Object implements org.springframework.beans.factory.config.Scope, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.core.Ordered;\n// Helper class to scan a bean definition hierarchy and force the use of auto-proxy for step scoped beans.\nprotected static class BatchScopeSupport.Scopifier extends org.springframework.beans.factory.config.BeanDefinitionVisitor;\n// Scope for job context.\npublic class JobScope extends BatchScopeSupport;\n// Scope for step context.\npublic class StepScope extends BatchScopeSupport;\n", "des": "Implementation of Spring Batch specific bean scopes (Job and Step)."}
{"index": 2401, "repo": "spring-batch-core-5.0.2", "code": "package context\n\n// Context object for weakly typed data stored for the duration of a chunk (usually a group of items processed together in a transaction).\npublic class ChunkContext extends org.springframework.core.AttributeAccessorSupport;\n// A context object that can be used to interrogate the current JobExecution and some of its associated properties using expressions based on bean paths.\npublic class JobContext extends SynchronizedAttributeAccessor;\n// Convenient aspect to wrap a single threaded job execution, where the implementation of the Job is not job scope aware (i.e.\npublic class JobScopeManager extends Object;\n// Central convenience class for framework use in managing the job scope context.\npublic class JobSynchronizationManager extends Object;\n// A context object that can be used to interrogate the current StepExecution and some of its associated properties using expressions based on bean paths.\npublic class StepContext extends SynchronizedAttributeAccessor;\n// Convenient base class for clients who need to do something in a repeat callback inside a Step.\npublic abstract class StepContextRepeatCallback extends Object implements RepeatCallback;\n// Convenient aspect to wrap a single threaded step execution, where the implementation of the Step is not step scope aware (i.e.\npublic class StepScopeManager extends Object;\n// Central convenience class for framework use in managing the step scope context.\npublic class StepSynchronizationManager extends Object;\n// Central convenience class for framework use in managing the scope context.\npublic abstract class SynchronizationManagerSupport<E,C> extends Object;\n", "des": "Implementation of the contexts for each of the custom bean scopes in Spring Batch (Job and Step)."}
{"index": 2402, "repo": "spring-batch-core-5.0.2", "code": "package step\n\n// Step level builders for java based job configuration.\npackage step.builder\n// Factories for step level components.\npackage step.factory\n// Specific implementations of step concerns for item-oriented approach.\npackage step.item\n// JobStep and related components.\npackage step.job\n// Specific implementations of skip concerns for items in a step.\npackage step.skip\n// Interfaces and generic implementations of tasklet concerns.\npackage step.tasklet\n// A Step implementation that provides common behavior to subclasses, including registering and calling listeners.\npublic abstract class AbstractStep extends Object implements Step, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanNameAware;\n// \npublic class FatalStepExecutionException extends UnexpectedJobExecutionException;\n// Exception to signal that a step was requested that is unknown or does not exist.\npublic class NoSuchStepException extends RuntimeException;\n// Fails the step if no items have been processed ( item count is 0).\npublic class NoWorkFoundStepExecutionListener extends Object implements StepExecutionListener;\n// Interface for holders of a Step as a convenience for callers who need access to the underlying instance.\npublic interface StepHolder;\n// Strategy interface for an interruption policy.\npublic interface StepInterruptionPolicy;\n// Interface for locating a Step instance by name.\npublic interface StepLocator;\n// Convenience factory for Step instances given a StepLocator.\npublic class StepLocatorStepFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Step>;\n// Policy that checks the current thread to see if it has been interrupted.\npublic class ThreadStepInterruptionPolicy extends Object implements StepInterruptionPolicy;\n", "des": "Specific implementations of step concerns."}
{"index": 2403, "repo": "spring-batch-core-5.0.2", "code": "package builder\n\n// Base class for step builders that want to build a TaskletStep.\npublic abstract class AbstractTaskletStepBuilder<B extends AbstractTaskletStepBuilder<B>> extends StepBuilderHelper<B>;\n// A step builder for fully fault tolerant chunk-oriented item processing steps.\npublic class FaultTolerantStepBuilder<I,O> extends SimpleStepBuilder<I,O>;\n// A step builder for FlowStep instances.\npublic class FlowStepBuilder extends StepBuilderHelper<FlowStepBuilder>;\n// A step builder for JobStep instances.\npublic class JobStepBuilder extends StepBuilderHelper<JobStepBuilder>;\n// Step builder for PartitionStep instances.\npublic class PartitionStepBuilder extends StepBuilderHelper<PartitionStepBuilder>;\n// Step builder for simple item processing (chunk oriented) steps.\npublic class SimpleStepBuilder<I,O> extends AbstractTaskletStepBuilder<SimpleStepBuilder<I,O>>;\n// Convenient entry point for building all kinds of steps.\npublic class StepBuilder extends StepBuilderHelper<StepBuilder>;\n// Utility exception thrown by builders when they encounter unexpected checked exceptions.\npublic class StepBuilderException extends RuntimeException;\n// A base class and utility for other step builders providing access to common properties like job repository and listeners.\npublic abstract class StepBuilderHelper<B extends StepBuilderHelper<B>> extends Object;\n// \npublic static class StepBuilderHelper.CommonStepProperties extends Object;\n// Builder for tasklet step based on a custom tasklet (not item oriented).\npublic class TaskletStepBuilder extends AbstractTaskletStepBuilder<TaskletStepBuilder>;\n", "des": "Step level builders for java based job configuration."}
{"index": 2404, "repo": "spring-batch-core-5.0.2", "code": "package factory\n\n// Factory bean for step that provides options for configuring skip behavior.\npublic class FaultTolerantStepFactoryBean<T,S> extends SimpleStepFactoryBean<T,S>;\n// Most common configuration options for simple steps should be found here.\npublic class SimpleStepFactoryBean<T,S> extends Object implements org.springframework.beans.factory.FactoryBean<Step>, org.springframework.beans.factory.BeanNameAware;\n", "des": "Factories for step level components."}
{"index": 2405, "repo": "spring-batch-core-5.0.2", "code": "package item\n\n// A special purpose retry template that deals specifically with multi-valued stateful retry.\npublic class BatchRetryTemplate extends Object implements org.springframework.retry.RetryOperations;\n// Manage the offset data between the last successful commit and updates made to an input chunk.\npublic class ChunkMonitor extends ItemStreamSupport;\n// \npublic static class ChunkMonitor.ChunkMonitorData extends Object;\n// A Tasklet implementing variations on read-process-write item handling.\npublic class ChunkOrientedTasklet<I> extends Object implements Tasklet;\n// Interface defined for processing Chunks.\npublic interface ChunkProcessor<I>;\n// Interface for providing Chunks to be processed, used by the ChunkOrientedTasklet\npublic interface ChunkProvider<T>;\n// Default implementation of the ItemListenerSupport class that writes all exceptions via commons logging.\npublic class DefaultItemFailureHandler extends ItemListenerSupport<Object,Object>;\n// FaultTolerant implementation of the ChunkProcessor interface, that allows for skipping or retry of items that cause exceptions during writing.\npublic class FaultTolerantChunkProcessor<I,O> extends SimpleChunkProcessor<I,O>;\n// FaultTolerant implementation of the ChunkProvider interface, that allows for skipping or retry of items that cause exceptions during reading or processing.\npublic class FaultTolerantChunkProvider<I> extends SimpleChunkProvider<I>;\n// Fatal exception to be thrown when a rollback must be forced, typically after catching an exception that otherwise would not cause a rollback.\npublic class ForceRollbackForWriteSkipException extends RuntimeException;\n// Interface for defining keys to uniquely identify items.\n@FunctionalInterface public interface KeyGenerator;\n// Simple implementation of the ChunkProcessor interface that handles basic item writing and processing.\npublic class SimpleChunkProcessor<I,O> extends Object implements ChunkProcessor<I>, org.springframework.beans.factory.InitializingBean;\n// Simple implementation of the ChunkProvider interface that does basic chunk providing from an ItemReader.\npublic class SimpleChunkProvider<I> extends Object implements ChunkProvider<I>;\n// An ExceptionHandler that is aware of the retry context so that it can distinguish between a fatal exception and one that can be retried.\npublic class SimpleRetryExceptionHandler extends org.springframework.retry.listener.RetryListenerSupport implements ExceptionHandler;\n", "des": "Specific implementations of step concerns for item-oriented approach."}
{"index": 2406, "repo": "spring-batch-core-5.0.2", "code": "package job\n\n// Simple implementation of JobParametersExtractor which pulls parameters with named keys out of the step execution context and the job parameters of the surrounding job.\npublic class DefaultJobParametersExtractor extends Object implements JobParametersExtractor;\n// Strategy interface for translating a StepExecution into JobParameters.\n@FunctionalInterface public interface JobParametersExtractor;\n// A Step that delegates to a Job to do its work.\npublic class JobStep extends AbstractStep;\n", "des": "JobStep and related components."}
{"index": 2407, "repo": "spring-batch-core-5.0.2", "code": "package skip\n\n// Implementation of the SkipPolicy interface that will always return that an item should be skipped.\npublic class AlwaysSkipItemSkipPolicy extends Object implements SkipPolicy;\n// \npublic class CompositeSkipPolicy extends Object implements SkipPolicy;\n// A SkipPolicy that depends on an exception classifier to make its decision, and then delegates to the classifier result.\npublic class ExceptionClassifierSkipPolicy extends Object implements SkipPolicy;\n// SkipPolicy that determines whether or not reading should continue based upon how many items have been skipped.\npublic class LimitCheckingItemSkipPolicy extends Object implements SkipPolicy;\n// SkipPolicy implementation that always returns false, indicating that an item should not be skipped.\npublic class NeverSkipItemSkipPolicy extends Object implements SkipPolicy;\n// Fatal exception to be thrown when a process operation could not be skipped.\npublic class NonSkippableProcessException extends SkipException;\n// Fatal exception to be thrown when a read operation could not be skipped.\npublic class NonSkippableReadException extends SkipException;\n// Fatal exception to be thrown when a process operation could not be skipped.\npublic class NonSkippableWriteException extends SkipException;\n// Base exception indicating that the skip has failed or caused a failure.\npublic abstract class SkipException extends UnexpectedJobExecutionException;\n// Exception indicating that the skip limit for a particular Step has been exceeded.\npublic class SkipLimitExceededException extends SkipException;\n// Special exception to indicate a failure in a skip listener.\npublic class SkipListenerFailedException extends UnexpectedJobExecutionException;\n// Policy for determining whether or not some processing should be skipped.\n@FunctionalInterface public interface SkipPolicy;\n// Special exception to indicate a failure in a skip policy.\npublic class SkipPolicyFailedException extends UnexpectedJobExecutionException;\n", "des": "Specific implementations of skip concerns for items in a step."}
{"index": 2408, "repo": "spring-batch-core-5.0.2", "code": "package tasklet\n\n// Adapts a Callable<RepeatStatus> to the Tasklet interface.\npublic class CallableTaskletAdapter extends Object implements Tasklet, org.springframework.beans.factory.InitializingBean;\n// Strategy interface for executing commands.\npublic interface CommandRunner;\n// Maps exit codes to ExitStatus according to injected map.\npublic class ConfigurableSystemProcessExitCodeMapper extends Object implements SystemProcessExitCodeMapper;\n// Implementation of the CommandRunner interface that calls the standard Runtime.exec(java.lang.String) method.\npublic class JvmCommandRunner extends Object implements CommandRunner;\n// A Tasklet that wraps a method in a POJO.\npublic class MethodInvokingTaskletAdapter extends AbstractMethodInvokingDelegator<Object> implements Tasklet;\n// Simple SystemProcessExitCodeMapper implementation that performs following mapping: 0 -> ExitStatus.FINISHED else -> ExitStatus.FAILED\npublic class SimpleSystemProcessExitCodeMapper extends Object implements SystemProcessExitCodeMapper;\n// An extension to the Tasklet interface to allow users to add logic for stopping a tasklet.\npublic interface StoppableTasklet extends Tasklet;\n// Exception indicating failed execution of system command.\npublic class SystemCommandException extends RuntimeException;\n// Tasklet that executes a system command.\npublic class SystemCommandTasklet extends Object implements StepExecutionListener, StoppableTasklet, org.springframework.beans.factory.InitializingBean;\n// Maps the exit code of a system process to ExitStatus value returned by a system command.\npublic interface SystemProcessExitCodeMapper;\n// Strategy for processing in a step.\n@FunctionalInterface public interface Tasklet;\n// Simple implementation of executing the step as a call to a Tasklet, possibly repeated, and each call surrounded by a transaction.\npublic class TaskletStep extends AbstractStep;\n// Convenience wrapper for a checked exception so that it can cause a rollback and be extracted afterwards.\npublic class UncheckedTransactionException extends RuntimeException;\n", "des": "Interfaces and generic implementations of tasklet concerns."}
{"index": 2409, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package amqp\n\n// Auto-configuration for RabbitHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration.class) @ConditionalOnClass(org.springframework.amqp.rabbit.core.RabbitTemplate.class) @ConditionalOnBean(org.springframework.amqp.rabbit.core.RabbitTemplate.class) @ConditionalOnEnabledHealthIndicator(\"rabbit\") public class RabbitHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.amqp.RabbitHealthIndicator,org.springframework.amqp.rabbit.core.RabbitTemplate>;\n", "des": "Auto-configuration for actuator AMQP concerns."}
{"index": 2410, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package audit\n\n// Auto-configuration for AuditEvents.\n@AutoConfiguration @ConditionalOnBean(org.springframework.boot.actuate.audit.AuditEventRepository.class) @ConditionalOnProperty(prefix=\"management.auditevents\", name=\"enabled\", matchIfMissing=true) public class AuditAutoConfiguration extends Object;\n// Auto-configuration for the AuditEventsEndpoint.\n@AutoConfiguration(after=AuditAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.audit.AuditEventsEndpoint.class) public class AuditEventsEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator audit concerns."}
{"index": 2411, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package availability\n\n// Auto-configuration for AvailabilityStateHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration.class) public class AvailabilityHealthContributorAutoConfiguration extends Object;\n// Auto-configuration for availability probes.\n@AutoConfiguration(after={AvailabilityHealthContributorAutoConfiguration.class,org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration.class}) @Conditional(org.springframework.boot.actuate.autoconfigure.availability.AvailabilityProbesAutoConfiguration.ProbesCondition.class) public class AvailabilityProbesAutoConfiguration extends Object;\n", "des": "Auto-configuration that extends health endpoints so that they can be used as availability probes."}
{"index": 2412, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package beans\n\n// Auto-configuration for the BeansEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.beans.BeansEndpoint.class) public class BeansEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator Spring Bean concerns."}
{"index": 2413, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cache\n\n// Auto-configuration for CachesEndpoint.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.class) @ConditionalOnClass(org.springframework.cache.CacheManager.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.cache.CachesEndpoint.class) public class CachesEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator cache concerns."}
{"index": 2414, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cassandra\n\n// Auto-configuration for CassandraDriverHealthIndicator.\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration.class,org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration.class,CassandraReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(com.datastax.oss.driver.api.core.CqlSession.class) @ConditionalOnEnabledHealthIndicator(\"cassandra\") @Import(org.springframework.boot.actuate.autoconfigure.cassandra.CassandraHealthContributorConfigurations.CassandraDriverConfiguration.class) public class CassandraHealthContributorAutoConfiguration extends Object;\n// Auto-configuration for CassandraDriverReactiveHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration.class) @ConditionalOnClass({com.datastax.oss.driver.api.core.CqlSession.class,reactor.core.publisher.Flux.class}) @ConditionalOnEnabledHealthIndicator(\"cassandra\") @Import(org.springframework.boot.actuate.autoconfigure.cassandra.CassandraHealthContributorConfigurations.CassandraReactiveDriverConfiguration.class) public class CassandraReactiveHealthContributorAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator Cassandra concerns."}
{"index": 2415, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cloudfoundry\n\n// Auto-configuration for actuator Cloud Foundry concerns using WebFlux.\npackage cloudfoundry.reactive\n// Auto-configuration for actuator Cloud Foundry concerns using Spring MVC.\npackage cloudfoundry.servlet\n// The specific access level granted to the cloud foundry user that's calling the endpoints.\npublic enum AccessLevel extends Enum<AccessLevel>;\n// Authorization exceptions thrown to limit access to the endpoints.\npublic class CloudFoundryAuthorizationException extends RuntimeException;\n// Reasons why the exception can be thrown.\npublic static enum CloudFoundryAuthorizationException.Reason extends Enum<CloudFoundryAuthorizationException.Reason>;\n// WebEndpointDiscoverer for Cloud Foundry that uses Cloud Foundry specific extensions for the HealthEndpoint.\n@ImportRuntimeHints(org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer.CloudFoundryWebEndpointDiscovererRuntimeHints.class) public class CloudFoundryWebEndpointDiscoverer extends org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer;\n// Identifies a type as being a Cloud Foundry specific extension for an @Endpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented @EndpointExtension(filter=org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryEndpointFilter.class) public @interface EndpointCloudFoundryExtension;\n// Response from the Cloud Foundry security interceptors.\npublic class SecurityResponse extends Object;\n// The JSON web token provided with each request that originates from Cloud Foundry.\npublic class Token extends Object;\n", "des": "Auto-configuration for actuator Cloud Foundry concerns."}
{"index": 2416, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive\n\n// Reactive @EndpointExtension for the HealthEndpoint that always exposes full health details.\n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) public class CloudFoundryReactiveHealthEndpointWebExtension extends Object;\n// Auto-configuration to expose actuator endpoints for Cloud Foundry to use in a reactive environment.\n@AutoConfiguration(after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class}) @ConditionalOnProperty(prefix=\"management.cloudfoundry\", name=\"enabled\", matchIfMissing=true) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnCloudPlatform(CLOUD_FOUNDRY) public class ReactiveCloudFoundryActuatorAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator Cloud Foundry concerns using WebFlux."}
{"index": 2417, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet\n\n// Auto-configuration to expose actuator endpoints for Cloud Foundry to use.\n@AutoConfiguration(after={ServletManagementContextAutoConfiguration.class,HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class}) @ConditionalOnProperty(prefix=\"management.cloudfoundry\", name=\"enabled\", matchIfMissing=true) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnBean(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnCloudPlatform(CLOUD_FOUNDRY) public class CloudFoundryActuatorAutoConfiguration extends Object;\n// WebSecurityConfigurer to tell Spring Security to ignore cloudfoundry specific paths.\n@ConditionalOnClass({org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer.class,org.springframework.security.config.annotation.web.builders.WebSecurity.class}) @Configuration(proxyBeanMethods=false) public static class CloudFoundryActuatorAutoConfiguration.IgnoredCloudFoundryPathsWebSecurityConfiguration extends Object;\n// @EndpointExtension for the HealthEndpoint that always exposes full health details.\n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) public class CloudFoundryHealthEndpointWebExtension extends Object;\n// @EndpointExtension for the InfoEndpoint that always exposes full git details.\n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.info.InfoEndpoint.class) public class CloudFoundryInfoEndpointWebExtension extends Object;\n", "des": "Auto-configuration for actuator Cloud Foundry concerns using Spring MVC."}
{"index": 2418, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package condition\n\n// @Endpoint to expose the ConditionEvaluationReport.\n@Endpoint(id=\"conditions\") public class ConditionsReportEndpoint extends Object;\n// A description of an application's condition evaluation.\npublic static final class ConditionsReportEndpoint.ConditionsDescriptor extends Object implements org.springframework.boot.actuate.endpoint.OperationResponseBody;\n// A description of an application context's condition evaluation, primarily intended for serialization to JSON.\npublic static final class ConditionsReportEndpoint.ContextConditionsDescriptor extends Object;\n// Adapts ConditionEvaluationReport.ConditionAndOutcome to a JSON friendly structure.\npublic static class ConditionsReportEndpoint.MessageAndConditionDescriptor extends Object;\n// Adapts ConditionEvaluationReport.ConditionAndOutcomes to a JSON friendly structure.\npublic static class ConditionsReportEndpoint.MessageAndConditionsDescriptor extends Object;\n// Auto-configuration for the ConditionsReportEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=ConditionsReportEndpoint.class) public class ConditionsReportEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator condition concerns."}
{"index": 2419, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package context\n\n// Auto-configuration for actuator property concerns.\npackage context.properties\n// Auto-configuration for the ShutdownEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.context.ShutdownEndpoint.class) public class ShutdownEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator Spring Context concerns."}
{"index": 2420, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package properties\n\n// Auto-configuration for the ConfigurationPropertiesReportEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint.class) @EnableConfigurationProperties(ConfigurationPropertiesReportEndpointProperties.class) public class ConfigurationPropertiesReportEndpointAutoConfiguration extends Object;\n// Configuration properties for ConfigurationPropertiesReportEndpoint.\n@ConfigurationProperties(\"management.endpoint.configprops\") public class ConfigurationPropertiesReportEndpointProperties extends Object;\n", "des": "Auto-configuration for actuator property concerns."}
{"index": 2421, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package couchbase\n\n// Auto-configuration for CouchbaseHealthIndicator.\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.class,CouchbaseReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(com.couchbase.client.java.Cluster.class) @ConditionalOnBean(com.couchbase.client.java.Cluster.class) @ConditionalOnEnabledHealthIndicator(\"couchbase\") public class CouchbaseHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.couchbase.CouchbaseHealthIndicator,com.couchbase.client.java.Cluster>;\n// Auto-configuration for CouchbaseReactiveHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.class) @ConditionalOnClass({com.couchbase.client.java.Cluster.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(com.couchbase.client.java.Cluster.class) @ConditionalOnEnabledHealthIndicator(\"couchbase\") public class CouchbaseReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.couchbase.CouchbaseReactiveHealthIndicator,com.couchbase.client.java.Cluster>;\n", "des": "Auto-configuration for actuator Couchbase concerns."}
{"index": 2422, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package elasticsearch\n\n// Auto-configuration for ElasticsearchReactiveHealthIndicator using the ReactiveElasticsearchClient.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.elasticsearch.ReactiveElasticsearchClientAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient.class) @ConditionalOnEnabledHealthIndicator(\"elasticsearch\") public class ElasticsearchReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.elasticsearch.ElasticsearchReactiveHealthIndicator,org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient>;\n", "des": "Auto-configuration for actuator Elasticsearch concerns dependent on Spring Data."}
{"index": 2423, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mongo\n\n// Auto-configuration for MongoHealthIndicator.\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration.class,org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.class,MongoReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.mongodb.core.MongoTemplate.class) @ConditionalOnBean(org.springframework.data.mongodb.core.MongoTemplate.class) @ConditionalOnEnabledHealthIndicator(\"mongo\") public class MongoHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.data.mongo.MongoHealthIndicator,org.springframework.data.mongodb.core.MongoTemplate>;\n// Auto-configuration for MongoReactiveHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.mongodb.core.ReactiveMongoTemplate.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.mongodb.core.ReactiveMongoTemplate.class) @ConditionalOnEnabledHealthIndicator(\"mongo\") public class MongoReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.mongo.MongoReactiveHealthIndicator,org.springframework.data.mongodb.core.ReactiveMongoTemplate>;\n", "des": "Auto-configuration for actuator MongoDB concerns dependent on Spring Data."}
{"index": 2424, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package redis\n\n// Auto-configuration for RedisHealthIndicator.\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration.class,RedisReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.redis.connection.RedisConnectionFactory.class) @ConditionalOnBean(org.springframework.data.redis.connection.RedisConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"redis\") public class RedisHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.data.redis.RedisHealthIndicator,org.springframework.data.redis.connection.RedisConnectionFactory>;\n// Auto-configuration for RedisReactiveHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.redis.connection.ReactiveRedisConnectionFactory.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"redis\") public class RedisReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.redis.RedisReactiveHealthIndicator,org.springframework.data.redis.connection.ReactiveRedisConnectionFactory>;\n", "des": "Auto-configuration for actuator Redis concerns dependent on Spring Data."}
{"index": 2425, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package elasticsearch\n\n// Auto-configuration for ElasticsearchRestClientHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration.class) @ConditionalOnClass(org.elasticsearch.client.RestClient.class) @ConditionalOnBean(org.elasticsearch.client.RestClient.class) @ConditionalOnEnabledHealthIndicator(\"elasticsearch\") public class ElasticsearchRestHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.elasticsearch.ElasticsearchRestClientHealthIndicator,org.elasticsearch.client.RestClient>;\n", "des": "Auto-configuration for actuator Elasticsearch concerns."}
{"index": 2426, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package endpoint\n\n// Actuator endpoint auto-configuration conditions.\npackage endpoint.condition\n// Endpoint exposure logic used for auto-configuration and conditions.\npackage endpoint.expose\n// Actuator Jackson auto-configuration.\npackage endpoint.jackson\n// Actuator JMX endpoint auto-configuration.\npackage endpoint.jmx\n// Auto-configuration for the Actuator's web endpoints.\npackage endpoint.web\n// Auto-configuration for @Endpoint support.\n@AutoConfiguration public class EndpointAutoConfiguration extends Object;\n", "des": "Core classes for actuator endpoint auto-configuration."}
{"index": 2427, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package condition\n\n// @Conditional that checks whether an endpoint is available.\n@Retention(RUNTIME) @Target({METHOD,TYPE}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.endpoint.condition.OnAvailableEndpointCondition.class) public @interface ConditionalOnAvailableEndpoint;\n", "des": "Actuator endpoint auto-configuration conditions."}
{"index": 2428, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package expose\n\n// Technologies that can be used to expose an endpoint.\npublic enum EndpointExposure extends Enum<EndpointExposure>;\n// EndpointFilter that will filter endpoints based on include and exclude patterns.\npublic class IncludeExcludeEndpointFilter<E extends org.springframework.boot.actuate.endpoint.ExposableEndpoint<?>> extends Object implements org.springframework.boot.actuate.endpoint.EndpointFilter<E>;\n", "des": "Endpoint exposure logic used for auto-configuration and conditions."}
{"index": 2429, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jackson\n\n// Auto-configuration for Endpoint Jackson support.\n@Configuration(proxyBeanMethods=false) @AutoConfigureAfter(org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration.class) public class JacksonEndpointAutoConfiguration extends Object;\n", "des": "Actuator Jackson auto-configuration."}
{"index": 2430, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jmx\n\n// Auto-configuration for JMX @Endpoint support.\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration.class,EndpointAutoConfiguration.class}) @EnableConfigurationProperties({JmxEndpointProperties.class,org.springframework.boot.autoconfigure.jmx.JmxProperties.class}) @ConditionalOnProperty(prefix=\"spring.jmx\", name=\"enabled\", havingValue=\"true\") public class JmxEndpointAutoConfiguration extends Object;\n// Configuration properties for JMX export of endpoints.\n@ConfigurationProperties(\"management.endpoints.jmx\") public class JmxEndpointProperties extends Object;\n// \npublic static class JmxEndpointProperties.Exposure extends Object;\n", "des": "Actuator JMX endpoint auto-configuration."}
{"index": 2431, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package web\n\n// Auto-configuration for exposing actuator web endpoints using WebFlux.\npackage web.reactive\n// Auto-configuration for exposing actuator web endpoints using Spring MVC.\npackage web.servlet\n// Configuration properties for web endpoints' CORS support.\n@ConfigurationProperties(prefix=\"management.endpoints.web.cors\") public class CorsEndpointProperties extends Object;\n// @ManagementContextConfiguration for servlet endpoints.\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=SERVLET) public class ServletEndpointManagementContextConfiguration extends Object;\n// \n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public static class ServletEndpointManagementContextConfiguration.JerseyServletEndpointManagementContextConfiguration extends Object;\n// \n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) public static class ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration extends Object;\n// Auto-configuration for web @Endpoint support.\n@AutoConfiguration(after=EndpointAutoConfiguration.class) @ConditionalOnWebApplication @EnableConfigurationProperties(WebEndpointProperties.class) public class WebEndpointAutoConfiguration extends Object;\n// Configuration properties for web management endpoints.\n@ConfigurationProperties(prefix=\"management.endpoints.web\") public class WebEndpointProperties extends Object;\n// \npublic static class WebEndpointProperties.Discovery extends Object;\n// \npublic static class WebEndpointProperties.Exposure extends Object;\n", "des": "Auto-configuration for the Actuator's web endpoints."}
{"index": 2432, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive\n\n// @ManagementContextConfiguration for Reactive @Endpoint concerns.\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass({org.springframework.web.reactive.DispatcherHandler.class,org.springframework.http.server.reactive.HttpHandler.class}) @ConditionalOnBean(org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier.class) @EnableConfigurationProperties(CorsEndpointProperties.class) public class WebFluxEndpointManagementContextConfiguration extends Object;\n", "des": "Auto-configuration for exposing actuator web endpoints using WebFlux."}
{"index": 2433, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet\n\n// @ManagementContextConfiguration for Spring MVC @Endpoint concerns.\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnBean({org.springframework.web.servlet.DispatcherServlet.class,org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier.class}) @EnableConfigurationProperties(CorsEndpointProperties.class) public class WebMvcEndpointManagementContextConfiguration extends Object;\n", "des": "Auto-configuration for exposing actuator web endpoints using Spring MVC."}
{"index": 2434, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package env\n\n// Auto-configuration for the EnvironmentEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.env.EnvironmentEndpoint.class) @EnableConfigurationProperties(EnvironmentEndpointProperties.class) public class EnvironmentEndpointAutoConfiguration extends Object;\n// Configuration properties for EnvironmentEndpoint.\n@ConfigurationProperties(\"management.endpoint.env\") public class EnvironmentEndpointProperties extends Object;\n", "des": "Auto-configuration for actuator Spring Environment concerns."}
{"index": 2435, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package flyway\n\n// Auto-configuration for FlywayEndpoint.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.class) @ConditionalOnClass(org.flywaydb.core.Flyway.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.flyway.FlywayEndpoint.class) public class FlywayEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator Flyway concerns."}
{"index": 2436, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package hazelcast\n\n// Auto-configuration for HazelcastHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration.class) @ConditionalOnClass(com.hazelcast.core.HazelcastInstance.class) @ConditionalOnBean(com.hazelcast.core.HazelcastInstance.class) @ConditionalOnEnabledHealthIndicator(\"hazelcast\") public class HazelcastHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.hazelcast.HazelcastHealthIndicator,com.hazelcast.core.HazelcastInstance>;\n", "des": "Auto-configuration for actuator Hazelcast concerns."}
{"index": 2437, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package health\n\n// Base class for health contributor configurations that can combine source beans into a composite.\npublic abstract class AbstractCompositeHealthContributorConfiguration<C,I extends C,B> extends Object;\n// Base class for health contributor configurations that can combine source beans into a composite.\npublic abstract class CompositeHealthContributorConfiguration<I extends org.springframework.boot.actuate.health.HealthIndicator,B> extends AbstractCompositeHealthContributorConfiguration<org.springframework.boot.actuate.health.HealthContributor,I,B>;\n// Base class for health contributor configurations that can combine source beans into a composite.\npublic abstract class CompositeReactiveHealthContributorConfiguration<I extends org.springframework.boot.actuate.health.ReactiveHealthIndicator,B> extends AbstractCompositeHealthContributorConfiguration<org.springframework.boot.actuate.health.ReactiveHealthContributor,I,B>;\n// @Conditional that checks whether a default health indicator is enabled.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.health.OnEnabledHealthIndicatorCondition.class) public @interface ConditionalOnEnabledHealthIndicator;\n// Auto-configuration for health contributors.\n@AutoConfiguration public class HealthContributorAutoConfiguration extends Object;\n// Auto-configuration for HealthEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) @EnableConfigurationProperties(HealthEndpointProperties.class) @Import({org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.HealthEndpointReactiveWebExtensionConfiguration.class}) public class HealthEndpointAutoConfiguration extends Object;\n// Configuration properties for HealthEndpoint.\n@ConfigurationProperties(\"management.endpoint.health\") public class HealthEndpointProperties extends HealthProperties;\n", "des": "Auto-configuration for actuator health concerns."}
{"index": 2438, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package influx\n\n// Auto-configuration for InfluxDbHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration.class) @ConditionalOnClass(org.influxdb.InfluxDB.class) @ConditionalOnBean(org.influxdb.InfluxDB.class) @ConditionalOnEnabledHealthIndicator(\"influxdb\") public class InfluxDbHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.influx.InfluxDbHealthIndicator,org.influxdb.InfluxDB>;\n", "des": "Auto-configuration for actuator InfluxDB concerns."}
{"index": 2439, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package info\n\n// @Conditional that checks whether an info contributor is enabled.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.info.OnEnabledInfoContributorCondition.class) public @interface ConditionalOnEnabledInfoContributor;\n// Auto-configuration for standard InfoContributors.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration.class) @EnableConfigurationProperties(InfoContributorProperties.class) public class InfoContributorAutoConfiguration extends Object;\n// Controls the fallback behavior when the primary property that controls whether an info contributor is enabled is not set.\npublic enum InfoContributorFallback extends Enum<InfoContributorFallback>;\n// Configuration properties for core info contributors.\n@ConfigurationProperties(\"management.info\") public class InfoContributorProperties extends Object;\n// \npublic static class InfoContributorProperties.Git extends Object;\n// Auto-configuration for the InfoEndpoint.\n@AutoConfiguration(after=InfoContributorAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.info.InfoEndpoint.class) public class InfoEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator info concerns."}
{"index": 2440, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package integration\n\n// Auto-configuration for the IntegrationGraphEndpoint.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration.class) @ConditionalOnClass(org.springframework.integration.graph.IntegrationGraphServer.class) @ConditionalOnBean(org.springframework.integration.config.IntegrationConfigurationBeanFactoryPostProcessor.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.integration.IntegrationGraphEndpoint.class) public class IntegrationGraphEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator Spring Integration concerns."}
{"index": 2441, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jdbc\n\n// Auto-configuration for DataSourceHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class) @ConditionalOnClass({org.springframework.jdbc.core.JdbcTemplate.class,org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.class}) @ConditionalOnBean(javax.sql.DataSource.class) @ConditionalOnEnabledHealthIndicator(\"db\") @EnableConfigurationProperties(DataSourceHealthIndicatorProperties.class) public class DataSourceHealthContributorAutoConfiguration extends Object implements org.springframework.beans.factory.InitializingBean;\n// External configuration properties for DataSourceHealthIndicator.\n@ConfigurationProperties(prefix=\"management.health.db\") public class DataSourceHealthIndicatorProperties extends Object;\n", "des": "Auto-configuration for actuator JDBC concerns."}
{"index": 2442, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jms\n\n// Auto-configuration for JmsHealthIndicator.\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration.class,org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration.class}) @ConditionalOnClass(jakarta.jms.ConnectionFactory.class) @ConditionalOnBean(jakarta.jms.ConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"jms\") public class JmsHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.jms.JmsHealthIndicator,jakarta.jms.ConnectionFactory>;\n", "des": "Auto-configuration for actuator JMS concerns."}
{"index": 2443, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package ldap\n\n// Auto-configuration for LdapHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration.class) @ConditionalOnClass(org.springframework.ldap.core.LdapOperations.class) @ConditionalOnBean(org.springframework.ldap.core.LdapOperations.class) @ConditionalOnEnabledHealthIndicator(\"ldap\") public class LdapHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.ldap.LdapHealthIndicator,org.springframework.ldap.core.LdapOperations>;\n", "des": "Auto-configuration for actuator LDAP concerns."}
{"index": 2444, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package liquibase\n\n// Auto-configuration for LiquibaseEndpoint.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration.class) @ConditionalOnClass(liquibase.integration.spring.SpringLiquibase.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.liquibase.LiquibaseEndpoint.class) public class LiquibaseEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator Liquibase concerns."}
{"index": 2445, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package logging\n\n// Auto-configuration for LogFileWebEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.logging.LogFileWebEndpoint.class) @EnableConfigurationProperties(LogFileWebEndpointProperties.class) public class LogFileWebEndpointAutoConfiguration extends Object;\n// Configuration properties for LogFileWebEndpoint.\n@ConfigurationProperties(prefix=\"management.endpoint.logfile\") public class LogFileWebEndpointProperties extends Object;\n// Auto-configuration for the LoggersEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.logging.LoggersEndpoint.class) public class LoggersEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator logging concerns."}
{"index": 2446, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mail\n\n// Auto-configuration for MailHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.class) @ConditionalOnClass(org.springframework.mail.javamail.JavaMailSenderImpl.class) @ConditionalOnBean(org.springframework.mail.javamail.JavaMailSenderImpl.class) @ConditionalOnEnabledHealthIndicator(\"mail\") public class MailHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.mail.MailHealthIndicator,org.springframework.mail.javamail.JavaMailSenderImpl>;\n", "des": "Auto-configuration for actuator JavaMail concerns."}
{"index": 2447, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package management\n\n// Auto-configuration for HeapDumpWebEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.management.HeapDumpWebEndpoint.class) public class HeapDumpWebEndpointAutoConfiguration extends Object;\n// Auto-configuration for the ThreadDumpEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.management.ThreadDumpEndpoint.class) public class ThreadDumpEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator management concerns."}
{"index": 2448, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package metrics\n\n// Auto-configuration for RabbitMQ metrics.\npackage metrics.amqp\n// Auto-configuration for cache metrics.\npackage metrics.cache\n// Auto-configuration for Spring Data actuator metrics.\npackage metrics.data\n// Auto-configuration for metrics exporter.\npackage metrics.export\n// Auto-configuration for JPA metrics.\npackage metrics.jdbc\n// Auto-configuration for Jersey actuator metrics.\npackage metrics.jersey\n// Auto-configuration for Mongo metrics.\npackage metrics.mongo\n// Auto-configuration for R2DBC metrics.\npackage metrics.r2dbc\n// Auto-configuration for Redis metrics.\npackage metrics.redis\n// Auto-configuration for actuator startup time metrics.\npackage metrics.startup\n// Auto-configuration for task execution and scheduling metrics.\npackage metrics.task\n// Nested configuration properties for items that are automatically timed.\npublic final class AutoTimeProperties extends Object;\n// Auto-configuration for a CompositeMeterRegistry.\n@AutoConfiguration @Import({org.springframework.boot.actuate.autoconfigure.metrics.NoOpMeterRegistryConfiguration.class,org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.composite.CompositeMeterRegistry.class) public class CompositeMeterRegistryAutoConfiguration extends Object;\n// Auto-configuration for JVM metrics.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class JvmMetricsAutoConfiguration extends Object;\n// Auto-configuration for Kafka metrics.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration.class, after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass({io.micrometer.core.instrument.binder.kafka.KafkaClientMetrics.class,org.springframework.kafka.core.ProducerFactory.class}) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class KafkaMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator metrics and Micrometer."}
{"index": 2449, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package amqp\n\n// Auto-configuration for metrics on all available connection factories.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({com.rabbitmq.client.ConnectionFactory.class,org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.class}) @ConditionalOnBean({org.springframework.amqp.rabbit.connection.ConnectionFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class RabbitMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for RabbitMQ metrics."}
{"index": 2450, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cache\n\n// Auto-configuration for metrics on all available caches.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.class}) @ConditionalOnBean(org.springframework.cache.CacheManager.class) @Import({org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMeterBinderProvidersConfiguration.class,org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsRegistrarConfiguration.class}) public class CacheMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for cache metrics."}
{"index": 2451, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package data\n\n// Auto-configuration for Spring Data Repository metrics.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.repository.Repository.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) @EnableConfigurationProperties(MetricsProperties.class) public class RepositoryMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for Spring Data actuator metrics."}
{"index": 2452, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package export\n\n// Support for exporting actuator metrics to AppOptics.\npackage export.appoptics\n// Support for exporting actuator metrics to Atlas.\npackage export.atlas\n// Support for exporting actuator metrics to Datadog.\npackage export.datadog\n// Support for exporting actuator metrics to Dynatrace.\npackage export.dynatrace\n// Support for exporting actuator metrics to Elastic.\npackage export.elastic\n// Support for exporting actuator metrics to Ganglia.\npackage export.ganglia\n// Support for exporting actuator metrics to Graphite.\npackage export.graphite\n// Support for exporting actuator metrics to Humio.\npackage export.humio\n// Support for exporting actuator metrics to InfluxDB.\npackage export.influx\n// Support for exporting actuator metrics to JMX.\npackage export.jmx\n// Support for exporting actuator metrics to KairosDB.\npackage export.kairos\n// Support for exporting actuator metrics to New Relic.\npackage export.newrelic\n// Support for exporting actuator metrics to OTLP.\npackage export.otlp\n// Support for exporting actuator metrics to Prometheus.\npackage export.prometheus\n// Base properties and adapters used when exporting actuator metrics.\npackage export.properties\n// Support for exporting actuator metrics to SignalFX.\npackage export.signalfx\n// Support for exporting actuator metrics to a simple in-memory store.\npackage export.simple\n// Support for exporting actuator metrics to Stackdriver.\npackage export.stackdriver\n// Support for exporting actuator metrics to StatsD.\npackage export.statsd\n// Support for exporting actuator metrics to Wavefront.\npackage export.wavefront\n// @Conditional that checks whether a metrics exporter is enabled.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.metrics.export.OnMetricsExportEnabledCondition.class) public @interface ConditionalOnEnabledMetricsExport;\n", "des": "Auto-configuration for metrics exporter."}
{"index": 2453, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package appoptics\n\n// Auto-configuration for exporting metrics to AppOptics.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.appoptics.AppOpticsMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"appoptics\") @EnableConfigurationProperties(AppOpticsProperties.class) public class AppOpticsMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring AppOptics metrics export.\n@ConfigurationProperties(prefix=\"management.appoptics.metrics.export\") public class AppOpticsProperties extends StepRegistryProperties;\n", "des": "Support for exporting actuator metrics to AppOptics."}
{"index": 2454, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package atlas\n\n// Auto-configuration for exporting metrics to Atlas.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.atlas.AtlasMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"atlas\") @EnableConfigurationProperties(AtlasProperties.class) public class AtlasMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring Atlas metrics export.\n@ConfigurationProperties(prefix=\"management.atlas.metrics.export\") public class AtlasProperties extends Object;\n", "des": "Support for exporting actuator metrics to Atlas."}
{"index": 2455, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package datadog\n\n// Auto-configuration for exporting metrics to Datadog.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.datadog.DatadogMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"datadog\") @EnableConfigurationProperties(DatadogProperties.class) public class DatadogMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring Datadog metrics export.\n@ConfigurationProperties(prefix=\"management.datadog.metrics.export\") public class DatadogProperties extends StepRegistryProperties;\n", "des": "Support for exporting actuator metrics to Datadog."}
{"index": 2456, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package dynatrace\n\n// Auto-configuration for exporting metrics to Dynatrace.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.dynatrace.DynatraceMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"dynatrace\") @EnableConfigurationProperties(DynatraceProperties.class) public class DynatraceMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring Dynatrace metrics export.\n@ConfigurationProperties(prefix=\"management.dynatrace.metrics.export\") public class DynatraceProperties extends StepRegistryProperties;\n// \npublic static class DynatraceProperties.V1 extends Object;\n// \npublic static class DynatraceProperties.V2 extends Object;\n", "des": "Support for exporting actuator metrics to Dynatrace."}
{"index": 2457, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package elastic\n\n// Auto-configuration for exporting metrics to Elastic.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.elastic.ElasticMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"elastic\") @EnableConfigurationProperties(ElasticProperties.class) public class ElasticMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring Elastic metrics export.\n@ConfigurationProperties(prefix=\"management.elastic.metrics.export\") public class ElasticProperties extends StepRegistryProperties;\n", "des": "Support for exporting actuator metrics to Elastic."}
{"index": 2458, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package ganglia\n\n// Auto-configuration for exporting metrics to Ganglia.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.ganglia.GangliaMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"ganglia\") @EnableConfigurationProperties(GangliaProperties.class) public class GangliaMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring Ganglia metrics export.\n@ConfigurationProperties(prefix=\"management.ganglia.metrics.export\") public class GangliaProperties extends Object;\n", "des": "Support for exporting actuator metrics to Ganglia."}
{"index": 2459, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package graphite\n\n// Auto-configuration for exporting metrics to Graphite.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.graphite.GraphiteMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"graphite\") @EnableConfigurationProperties(GraphiteProperties.class) public class GraphiteMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring Graphite metrics export.\n@ConfigurationProperties(prefix=\"management.graphite.metrics.export\") public class GraphiteProperties extends Object;\n", "des": "Support for exporting actuator metrics to Graphite."}
{"index": 2460, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package humio\n\n// Auto-configuration for exporting metrics to Humio.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.humio.HumioMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"humio\") @EnableConfigurationProperties(HumioProperties.class) public class HumioMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring Humio metrics export.\n@ConfigurationProperties(prefix=\"management.humio.metrics.export\") public class HumioProperties extends StepRegistryProperties;\n", "des": "Support for exporting actuator metrics to Humio."}
{"index": 2461, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package influx\n\n// Auto-configuration for exporting metrics to Influx.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.influx.InfluxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"influx\") @EnableConfigurationProperties(InfluxProperties.class) public class InfluxMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring Influx metrics export.\n@ConfigurationProperties(prefix=\"management.influx.metrics.export\") public class InfluxProperties extends StepRegistryProperties;\n", "des": "Support for exporting actuator metrics to InfluxDB."}
{"index": 2462, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jmx\n\n// Auto-configuration for exporting metrics to JMX.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.jmx.JmxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"jmx\") @EnableConfigurationProperties(JmxProperties.class) public class JmxMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring JMX metrics export.\n@ConfigurationProperties(prefix=\"management.jmx.metrics.export\") public class JmxProperties extends Object;\n", "des": "Support for exporting actuator metrics to JMX."}
{"index": 2463, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package kairos\n\n// Auto-configuration for exporting metrics to KairosDB.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.kairos.KairosMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"kairos\") @EnableConfigurationProperties(KairosProperties.class) public class KairosMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring KairosDB metrics export.\n@ConfigurationProperties(prefix=\"management.kairos.metrics.export\") public class KairosProperties extends StepRegistryProperties;\n", "des": "Support for exporting actuator metrics to KairosDB."}
{"index": 2464, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package newrelic\n\n// Auto-configuration for exporting metrics to New Relic.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.newrelic.NewRelicMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"newrelic\") @EnableConfigurationProperties(NewRelicProperties.class) public class NewRelicMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring New Relic metrics export.\n@ConfigurationProperties(prefix=\"management.newrelic.metrics.export\") public class NewRelicProperties extends StepRegistryProperties;\n// Adapter to convert NewRelicProperties to a NewRelicConfig.\npublic class NewRelicPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<NewRelicProperties> implements io.micrometer.newrelic.NewRelicConfig;\n", "des": "Support for exporting actuator metrics to New Relic."}
{"index": 2465, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package otlp\n\n// Auto-configuration for exporting metrics to OTLP.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.registry.otlp.OtlpMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"otlp\") @EnableConfigurationProperties(OtlpProperties.class) public class OtlpMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring OTLP metrics export.\n@ConfigurationProperties(prefix=\"management.otlp.metrics.export\") public class OtlpProperties extends StepRegistryProperties;\n", "des": "Support for exporting actuator metrics to OTLP."}
{"index": 2466, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package prometheus\n\n// Auto-configuration for exporting metrics to Prometheus.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.prometheus.PrometheusMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"prometheus\") @EnableConfigurationProperties(PrometheusProperties.class) public class PrometheusMetricsExportAutoConfiguration extends Object;\n// Configuration for Prometheus Pushgateway.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(io.prometheus.client.exporter.PushGateway.class) @ConditionalOnProperty(prefix=\"management.prometheus.metrics.export.pushgateway\", name=\"enabled\") public static class PrometheusMetricsExportAutoConfiguration.PrometheusPushGatewayConfiguration extends Object;\n// \n@Configuration(proxyBeanMethods=false) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.metrics.export.prometheus.PrometheusScrapeEndpoint.class) public static class PrometheusMetricsExportAutoConfiguration.PrometheusScrapeEndpointConfiguration extends Object;\n// @ConfigurationProperties for configuring metrics export to Prometheus.\n@ConfigurationProperties(prefix=\"management.prometheus.metrics.export\") public class PrometheusProperties extends Object;\n// Configuration options for push-based interaction with Prometheus.\npublic static class PrometheusProperties.Pushgateway extends Object;\n", "des": "Support for exporting actuator metrics to Prometheus."}
{"index": 2467, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package properties\n\n// Base class for properties to config adapters.\npublic class PropertiesConfigAdapter<T> extends Object;\n// Base class for properties that configure a metrics registry that pushes aggregated metrics on a regular interval.\npublic abstract class PushRegistryProperties extends Object;\n// Base class for PushRegistryProperties to PushRegistryConfig adapters.\npublic abstract class PushRegistryPropertiesConfigAdapter<T extends PushRegistryProperties> extends PropertiesConfigAdapter<T> implements io.micrometer.core.instrument.push.PushRegistryConfig;\n// PushRegistryProperties extensions for registries that are step-normalized.\npublic abstract class StepRegistryProperties extends PushRegistryProperties;\n// Base class for StepRegistryProperties to StepRegistryConfig adapters.\npublic abstract class StepRegistryPropertiesConfigAdapter<T extends StepRegistryProperties> extends PushRegistryPropertiesConfigAdapter<T>;\n", "des": "Base properties and adapters used when exporting actuator metrics."}
{"index": 2468, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package signalfx\n\n// Auto-configuration for exporting metrics to SignalFX.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.signalfx.SignalFxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"signalfx\") @EnableConfigurationProperties(SignalFxProperties.class) public class SignalFxMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring metrics export to SignalFX.\n@ConfigurationProperties(prefix=\"management.signalfx.metrics.export\") public class SignalFxProperties extends StepRegistryProperties;\n// Adapter to convert SignalFxProperties to a SignalFxConfig.\npublic class SignalFxPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<SignalFxProperties> implements io.micrometer.signalfx.SignalFxConfig;\n", "des": "Support for exporting actuator metrics to SignalFX."}
{"index": 2469, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package simple\n\n// Auto-configuration for exporting metrics to a SimpleMeterRegistry.\n@AutoConfiguration(before=CompositeMeterRegistryAutoConfiguration.class, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @EnableConfigurationProperties(SimpleProperties.class) @ConditionalOnMissingBean(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"simple\") public class SimpleMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring metrics export to a SimpleMeterRegistry.\n@ConfigurationProperties(prefix=\"management.simple.metrics.export\") public class SimpleProperties extends Object;\n// Adapter to convert SimpleProperties to a SimpleConfig.\npublic class SimplePropertiesConfigAdapter extends PropertiesConfigAdapter<SimpleProperties> implements io.micrometer.core.instrument.simple.SimpleConfig;\n", "des": "Support for exporting actuator metrics to a simple in-memory store."}
{"index": 2470, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package stackdriver\n\n// Auto-configuration for exporting metrics to Stackdriver.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.stackdriver.StackdriverMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"stackdriver\") @EnableConfigurationProperties(StackdriverProperties.class) public class StackdriverMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring Stackdriver metrics export.\n@ConfigurationProperties(prefix=\"management.stackdriver.metrics.export\") public class StackdriverProperties extends StepRegistryProperties;\n// Adapter to convert StackdriverProperties to a StackdriverConfig.\npublic class StackdriverPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<StackdriverProperties> implements io.micrometer.stackdriver.StackdriverConfig;\n", "des": "Support for exporting actuator metrics to Stackdriver."}
{"index": 2471, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package statsd\n\n// Auto-configuration for exporting metrics to StatsD.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.statsd.StatsdMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"statsd\") @EnableConfigurationProperties(StatsdProperties.class) public class StatsdMetricsExportAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring StatsD metrics export.\n@ConfigurationProperties(prefix=\"management.statsd.metrics.export\") public class StatsdProperties extends Object;\n// Adapter to convert StatsdProperties to a StatsdConfig.\npublic class StatsdPropertiesConfigAdapter extends PropertiesConfigAdapter<StatsdProperties> implements io.micrometer.statsd.StatsdConfig;\n", "des": "Support for exporting actuator metrics to StatsD."}
{"index": 2472, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package wavefront\n\n// Auto-configuration for exporting metrics to Wavefront.\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after={MetricsAutoConfiguration.class,WavefrontAutoConfiguration.class}) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass({io.micrometer.wavefront.WavefrontMeterRegistry.class,com.wavefront.sdk.common.WavefrontSender.class}) @ConditionalOnEnabledMetricsExport(\"wavefront\") @EnableConfigurationProperties(WavefrontProperties.class) @Import(WavefrontSenderConfiguration.class) public class WavefrontMetricsExportAutoConfiguration extends Object;\n// Adapter to convert WavefrontProperties to a WavefrontConfig.\npublic class WavefrontPropertiesConfigAdapter extends PushRegistryPropertiesConfigAdapter<WavefrontProperties.Metrics.Export> implements io.micrometer.wavefront.WavefrontConfig;\n", "des": "Support for exporting actuator metrics to Wavefront."}
{"index": 2473, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jdbc\n\n// Auto-configuration for metrics on all available datasources.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({javax.sql.DataSource.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({javax.sql.DataSource.class,io.micrometer.core.instrument.MeterRegistry.class}) public class DataSourcePoolMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for JPA metrics."}
{"index": 2474, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jersey\n\n// Auto-configuration for Jersey server instrumentation.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({org.glassfish.jersey.server.ResourceConfig.class,io.micrometer.core.instrument.binder.jersey.server.MetricsApplicationEventListener.class}) @ConditionalOnBean({io.micrometer.core.instrument.MeterRegistry.class,org.glassfish.jersey.server.ResourceConfig.class}) @EnableConfigurationProperties(MetricsProperties.class) public class JerseyServerMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for Jersey actuator metrics."}
{"index": 2475, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mongo\n\n// Auto-configuration for Mongo metrics.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration.class, after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(com.mongodb.MongoClientSettings.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class MongoMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for Mongo metrics."}
{"index": 2476, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jpa\n\n// Auto-configuration for metrics on all available Hibernate EntityManagerFactory instances that have statistics enabled.\n@Configuration(proxyBeanMethods=false) @AutoConfigureAfter({MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({jakarta.persistence.EntityManagerFactory.class,org.hibernate.SessionFactory.class,org.hibernate.stat.HibernateMetrics.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({jakarta.persistence.EntityManagerFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class HibernateMetricsAutoConfiguration extends Object implements org.springframework.beans.factory.SmartInitializingSingleton;\n", "des": "Auto-configuration for JPA metrics."}
{"index": 2477, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package r2dbc\n\n// Auto-configuration for metrics on all available R2DBC connection factories.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration.class}) @ConditionalOnClass({io.r2dbc.pool.ConnectionPool.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({io.r2dbc.spi.ConnectionFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class ConnectionPoolMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for R2DBC metrics."}
{"index": 2478, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package redis\n\n// Auto-configuration for Lettuce metrics.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration.class, after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass({io.lettuce.core.RedisClient.class,io.lettuce.core.metrics.MicrometerCommandLatencyRecorder.class}) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class LettuceMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for Redis metrics."}
{"index": 2479, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package startup\n\n// Auto-configuration for startup time metrics.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class StartupTimeMetricsListenerAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator startup time metrics."}
{"index": 2480, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package task\n\n// Auto-configuration for metrics on all available task executors and task schedulers.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration.class,org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.binder.jvm.ExecutorServiceMetrics.class) @ConditionalOnBean({java.util.concurrent.Executor.class,io.micrometer.core.instrument.MeterRegistry.class}) public class TaskExecutorMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for task execution and scheduling metrics."}
{"index": 2481, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jetty\n\n// Auto-configuration for Jetty metrics.\n@AutoConfiguration(after=CompositeMeterRegistryAutoConfiguration.class) @ConditionalOnWebApplication @ConditionalOnClass({io.micrometer.core.instrument.binder.jetty.JettyServerThreadPoolMetrics.class,org.eclipse.jetty.server.Server.class}) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class JettyMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for Jetty actuator metrics."}
{"index": 2482, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package tomcat\n\n// Auto-configuration for TomcatMetrics.\n@AutoConfiguration(after=CompositeMeterRegistryAutoConfiguration.class) @ConditionalOnWebApplication @ConditionalOnClass({io.micrometer.core.instrument.binder.tomcat.TomcatMetrics.class,org.apache.catalina.Manager.class}) public class TomcatMetricsAutoConfiguration extends Object;\n", "des": "Auto-configuration for Tomcat actuator metrics."}
{"index": 2483, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package neo4j\n\n// Auto-configuration for Neo4jReactiveHealthIndicator and Neo4jHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration.class) @ConditionalOnClass(org.neo4j.driver.Driver.class) @ConditionalOnBean(org.neo4j.driver.Driver.class) @ConditionalOnEnabledHealthIndicator(\"neo4j\") @Import({org.springframework.boot.actuate.autoconfigure.neo4j.Neo4jHealthContributorConfigurations.Neo4jReactiveConfiguration.class,org.springframework.boot.actuate.autoconfigure.neo4j.Neo4jHealthContributorConfigurations.Neo4jConfiguration.class}) public class Neo4jHealthContributorAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator Neo4J concerns."}
{"index": 2484, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package observation\n\n// Auto-configuration for Spring Batch observations.\npackage observation.batch\n// Auto-configuration for Spring GraphQL observations.\npackage observation.graphql\n// Auto-configuration for the Micrometer Observation API.\n@AutoConfiguration(after={CompositeMeterRegistryAutoConfiguration.class,MicrometerTracingAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.ObservationRegistry.class) @EnableConfigurationProperties(ObservationProperties.class) public class ObservationAutoConfiguration extends Object;\n// @ConfigurationProperties for configuring Micrometer observations.\n@ConfigurationProperties(\"management.observations\") public class ObservationProperties extends Object;\n// \npublic static class ObservationProperties.Http extends Object;\n// \npublic static class ObservationProperties.Http.Client extends Object;\n// \npublic static class ObservationProperties.Http.Client.ClientRequests extends Object;\n// \npublic static class ObservationProperties.Http.Server extends Object;\n// \npublic static class ObservationProperties.Http.Server.ServerRequests extends Object;\n// Callback interface that can be used to customize auto-configured observation registries.\n@FunctionalInterface public interface ObservationRegistryCustomizer<T extends io.micrometer.observation.ObservationRegistry>;\n", "des": "Auto-configuration for the Micrometer Observation API."}
{"index": 2485, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package batch\n\n// Auto-configuration for instrumentation of Spring Batch Jobs.\n@AutoConfiguration(after=ObservationAutoConfiguration.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnClass({io.micrometer.observation.ObservationRegistry.class,org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor.class}) public class BatchObservationAutoConfiguration extends Object;\n", "des": "Auto-configuration for Spring Batch observations."}
{"index": 2486, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package graphql\n\n// Auto-configuration for instrumentation of Spring GraphQL endpoints.\n@AutoConfiguration(after=ObservationAutoConfiguration.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.execution.GraphQlSource.class,io.micrometer.observation.Observation.class}) public class GraphQlObservationAutoConfiguration extends Object;\n", "des": "Auto-configuration for Spring GraphQL observations."}
{"index": 2487, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package client\n\n// Auto-configuration for HTTP client-related observations.\n@AutoConfiguration(after={ObservationAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.class,org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.Observation.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @Import({org.springframework.boot.actuate.autoconfigure.observation.web.client.RestTemplateObservationConfiguration.class,org.springframework.boot.actuate.autoconfigure.observation.web.client.WebClientObservationConfiguration.class}) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class HttpClientObservationsAutoConfiguration extends Object;\n", "des": "Auto-configuration for web client observation support."}
{"index": 2488, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive\n\n// Auto-configuration for instrumentation of Spring WebFlux applications.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,ObservationAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.Observation.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnWebApplication(type=REACTIVE) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class WebFluxObservationAutoConfiguration extends Object;\n", "des": "Auto-configuration for WebFlux actuator observations."}
{"index": 2489, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet\n\n// Auto-configuration for instrumentation of Spring Web MVC servlet-based request mappings.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,ObservationAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({org.springframework.web.servlet.DispatcherServlet.class,io.micrometer.observation.Observation.class}) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class WebMvcObservationAutoConfiguration extends Object;\n", "des": "Auto-configuration for Spring MVC observation support."}
{"index": 2490, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package quartz\n\n// Auto-configuration for QuartzEndpoint.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration.class) @ConditionalOnClass(org.quartz.Scheduler.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.quartz.QuartzEndpoint.class) @EnableConfigurationProperties(QuartzEndpointProperties.class) public class QuartzEndpointAutoConfiguration extends Object;\n// Configuration properties for QuartzEndpoint.\n@ConfigurationProperties(\"management.endpoint.quartz\") public class QuartzEndpointProperties extends Object;\n", "des": "Auto-configuration for actuator Quartz Scheduler concerns."}
{"index": 2491, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package r2dbc\n\n// Auto-configuration for ConnectionFactoryHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration.class) @ConditionalOnClass(io.r2dbc.spi.ConnectionFactory.class) @ConditionalOnBean(io.r2dbc.spi.ConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"r2dbc\") public class ConnectionFactoryHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.r2dbc.ConnectionFactoryHealthIndicator,io.r2dbc.spi.ConnectionFactory>;\n", "des": "Auto-configuration for actuator R2DBC."}
{"index": 2492, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package scheduling\n\n// Auto-configuration for ScheduledTasksEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint.class) public class ScheduledTasksEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator scheduling concerns."}
{"index": 2493, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive\n\n// Factory that can be used to create a ServerWebExchangeMatcher for actuator endpoint locations.\npublic final class EndpointRequest extends Object;\n// The ServerWebExchangeMatcher used to match against actuator endpoints.\npublic static final class EndpointRequest.EndpointServerWebExchangeMatcher extends org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher<T>;\n// The ServerWebExchangeMatcher used to match against the links endpoint.\npublic static final class EndpointRequest.LinksServerWebExchangeMatcher extends org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher<T>;\n// Auto-configuration for Reactive Spring Security when actuator is on the classpath.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration.class, after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration.class}) @ConditionalOnClass({org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class,org.springframework.security.web.server.WebFilterChainProxy.class}) @ConditionalOnMissingBean({org.springframework.security.web.server.SecurityWebFilterChain.class,org.springframework.security.web.server.WebFilterChainProxy.class}) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementWebSecurityAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator security using WebFlux."}
{"index": 2494, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet\n\n// Factory that can be used to create a RequestMatcher for actuator endpoint locations.\npublic final class EndpointRequest extends Object;\n// The request matcher used to match against actuator endpoints.\npublic static final class EndpointRequest.EndpointRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<org.springframework.web.context.WebApplicationContext>;\n// The request matcher used to match against the links endpoint.\npublic static final class EndpointRequest.LinksRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<org.springframework.web.context.WebApplicationContext>;\n// Auto-configuration for Spring Security when actuator is on the classpath.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration.class, after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration.class,org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnDefaultWebSecurity public class ManagementWebSecurityAutoConfiguration extends Object;\n// ManagementContextConfiguration that configures the appropriate RequestMatcherProvider.\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.security.web.util.matcher.RequestMatcher.class) @ConditionalOnWebApplication(type=SERVLET) public class SecurityRequestMatchersManagementContextConfiguration extends Object;\n// \n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") @ConditionalOnBean(org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath.class) public static class SecurityRequestMatchersManagementContextConfiguration.JerseyRequestMatcherConfiguration extends Object;\n", "des": "Auto-configuration for actuator security using Spring MVC."}
{"index": 2495, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package session\n\n// Auto-configuration for SessionsEndpoint.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.class) @ConditionalOnClass(org.springframework.session.FindByIndexNameSessionRepository.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.session.SessionsEndpoint.class) public class SessionsEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator Spring Sessions concerns."}
{"index": 2496, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package startup\n\n// Auto-configuration for the StartupEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.startup.StartupEndpoint.class) @Conditional(org.springframework.boot.actuate.autoconfigure.startup.StartupEndpointAutoConfiguration.ApplicationStartupCondition.class) public class StartupEndpointAutoConfiguration extends Object;\n", "des": "Auto-configuration for actuator ApplicationStartup concerns."}
{"index": 2497, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package system\n\n// Auto-configuration for DiskSpaceHealthIndicator.\n@AutoConfiguration(before=HealthContributorAutoConfiguration.class) @ConditionalOnEnabledHealthIndicator(\"diskspace\") @EnableConfigurationProperties(DiskSpaceHealthIndicatorProperties.class) public class DiskSpaceHealthContributorAutoConfiguration extends Object;\n// External configuration properties for DiskSpaceHealthIndicator.\n@ConfigurationProperties(prefix=\"management.health.diskspace\") public class DiskSpaceHealthIndicatorProperties extends Object;\n", "des": "Auto-configuration for actuator system concerns."}
{"index": 2498, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package tracing\n\n// Auto-configuration for tracing with OTLP.\npackage tracing.otlp\n// Auto-configuration for Prometheus Exemplars with Micrometer Tracing.\npackage tracing.prometheus\n// Auto-configuration for tracing with Wavefront.\npackage tracing.wavefront\n// Auto-configuration for tracing with Zipkin.\npackage tracing.zipkin\n// Auto-configuration for Brave.\n@AutoConfiguration(before=MicrometerTracingAutoConfiguration.class) @ConditionalOnClass({brave.Tracer.class,io.micrometer.tracing.brave.bridge.BraveTracer.class}) @EnableConfigurationProperties(TracingProperties.class) @ConditionalOnEnabledTracing public class BraveAutoConfiguration extends Object;\n// @Conditional that checks whether tracing is enabled.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @ConditionalOnProperty(prefix=\"management.tracing\", name=\"enabled\", matchIfMissing=true) public @interface ConditionalOnEnabledTracing;\n// Auto-configuration for the Micrometer Tracing API.\n@AutoConfiguration @ConditionalOnClass(io.micrometer.tracing.Tracer.class) @ConditionalOnEnabledTracing public class MicrometerTracingAutoConfiguration extends Object;\n// Auto-configuration for OpenTelemetry.\n@AutoConfiguration(before=MicrometerTracingAutoConfiguration.class) @ConditionalOnEnabledTracing @ConditionalOnClass({io.micrometer.tracing.otel.bridge.OtelTracer.class,io.opentelemetry.sdk.trace.SdkTracerProvider.class,io.opentelemetry.api.OpenTelemetry.class}) @EnableConfigurationProperties(TracingProperties.class) public class OpenTelemetryAutoConfiguration extends Object;\n// Callback interface that can be used to customize the SdkTracerProviderBuilder that is used to create the auto-configured SdkTracerProvider.\n@FunctionalInterface public interface SdkTracerProviderBuilderCustomizer;\n// Configuration properties for tracing.\n@ConfigurationProperties(\"management.tracing\") public class TracingProperties extends Object;\n// \npublic static class TracingProperties.Baggage extends Object;\n// \npublic static class TracingProperties.Baggage.Correlation extends Object;\n// \npublic static class TracingProperties.Brave extends Object;\n// \npublic static class TracingProperties.Propagation extends Object;\n", "des": "Auto-configuration for Micrometer Tracing."}
{"index": 2499, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package otlp\n\n// Auto-configuration for OTLP.\n@AutoConfiguration @ConditionalOnEnabledTracing @ConditionalOnClass({io.micrometer.tracing.otel.bridge.OtelTracer.class,io.opentelemetry.sdk.trace.SdkTracerProvider.class,io.opentelemetry.api.OpenTelemetry.class,io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter.class}) @EnableConfigurationProperties(OtlpProperties.class) public class OtlpAutoConfiguration extends Object;\n// Configuration properties for exporting traces using OTLP.\n@ConfigurationProperties(\"management.otlp.tracing\") public class OtlpProperties extends Object;\n", "des": "Auto-configuration for tracing with OTLP."}
{"index": 2500, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package prometheus\n\n// Auto-configuration for Prometheus Exemplars with Micrometer Tracing.\n@AutoConfiguration(before=PrometheusMetricsExportAutoConfiguration.class, after=MicrometerTracingAutoConfiguration.class) @ConditionalOnBean(io.micrometer.tracing.Tracer.class) @ConditionalOnClass({io.micrometer.tracing.Tracer.class,io.prometheus.client.exemplars.tracer.common.SpanContextSupplier.class}) @ConditionalOnEnabledTracing public class PrometheusExemplarsAutoConfiguration extends Object;\n", "des": "Auto-configuration for Prometheus Exemplars with Micrometer Tracing."}
{"index": 2501, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package wavefront\n\n// Auto-configuration for Wavefront tracing.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,WavefrontAutoConfiguration.class}) @ConditionalOnClass({com.wavefront.sdk.common.WavefrontSender.class,io.micrometer.tracing.reporter.wavefront.WavefrontSpanHandler.class}) @ConditionalOnEnabledTracing @EnableConfigurationProperties(WavefrontProperties.class) @Import(WavefrontSenderConfiguration.class) public class WavefrontTracingAutoConfiguration extends Object;\n", "des": "Auto-configuration for tracing with Wavefront."}
{"index": 2502, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package zipkin\n\n// Auto-configuration for Zipkin.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.class) @ConditionalOnClass(zipkin2.reporter.Sender.class) @Import({org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.SenderConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.ReporterConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.BraveConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.OpenTelemetryConfiguration.class}) @ConditionalOnEnabledTracing @EnableConfigurationProperties(ZipkinProperties.class) public class ZipkinAutoConfiguration extends Object;\n// Details required to establish a connection to a Zipkin server.\npublic interface ZipkinConnectionDetails extends org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;\n// Configuration properties for ZipkinAutoConfiguration.\n@ConfigurationProperties(\"management.zipkin.tracing\") public class ZipkinProperties extends Object;\n// Callback interface that can be implemented by beans wishing to customize the RestTemplateBuilder used to send spans to Zipkin.\n@FunctionalInterface public interface ZipkinRestTemplateBuilderCustomizer;\n// Callback interface that can be implemented by beans wishing to customize the WebClient.Builder used to send spans to Zipkin.\n@FunctionalInterface public interface ZipkinWebClientBuilderCustomizer;\n", "des": "Auto-configuration for tracing with Zipkin."}
{"index": 2503, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package wavefront\n\n// Auto-configuration for Wavefront common infrastructure.\n@AutoConfiguration @ConditionalOnClass({com.wavefront.sdk.common.application.ApplicationTags.class,com.wavefront.sdk.common.WavefrontSender.class}) @EnableConfigurationProperties(WavefrontProperties.class) public class WavefrontAutoConfiguration extends Object;\n// Configuration properties to configure Wavefront.\n@ConfigurationProperties(prefix=\"management.wavefront\") public class WavefrontProperties extends Object;\n// \npublic static class WavefrontProperties.Application extends Object;\n// \npublic static class WavefrontProperties.Metrics extends Object;\n// \npublic static class WavefrontProperties.Metrics.Export extends PushRegistryProperties;\n// \npublic static class WavefrontProperties.Sender extends Object;\n// Configuration for WavefrontSender.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(com.wavefront.sdk.common.WavefrontSender.class) @EnableConfigurationProperties(WavefrontProperties.class) public class WavefrontSenderConfiguration extends Object;\n", "des": "Classes shared between Wavefront tracing and metrics."}
{"index": 2504, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package web\n\n// Auto-configuration for actuator HTTP exchanges.\npackage web.exchanges\n// Configuration for a Jersey-based management context.\npackage web.jersey\n// Classes for auto-configuration of actuator web request mapping concerns.\npackage web.mappings\n// Configuration for a WebFlux-based management context.\npackage web.reactive\n// Actuator web server support.\npackage web.server\n// Actuator Spring MVC support.\npackage web.servlet\n// Specialized @Configuration class that defines configuration specific for the management context.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Configuration public @interface ManagementContextConfiguration;\n// Factory for creating a separate management context when the management web server is running on a different port to the main application.\npublic final class ManagementContextFactory extends Object;\n// Enumeration of management context types.\npublic enum ManagementContextType extends Enum<ManagementContextType>;\n", "des": "Core classes for auto-configuration of actuator web concerns."}
{"index": 2505, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package exchanges\n\n// Auto-configuration to record HTTP exchanges.\n@AutoConfiguration @ConditionalOnWebApplication @ConditionalOnProperty(prefix=\"management.httpexchanges.recording\", name=\"enabled\", matchIfMissing=true) @ConditionalOnBean(org.springframework.boot.actuate.web.exchanges.HttpExchangeRepository.class) @EnableConfigurationProperties(HttpExchangesProperties.class) public class HttpExchangesAutoConfiguration extends Object;\n// Auto-configuration for the HttpExchangesEndpoint.\n@AutoConfiguration(after=HttpExchangesAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.web.exchanges.HttpExchangesEndpoint.class) public class HttpExchangesEndpointAutoConfiguration extends Object;\n// Configuration properties for recording HTTP exchanges.\n@ConfigurationProperties(prefix=\"management.httpexchanges\") public class HttpExchangesProperties extends Object;\n// Recording properties.\npublic static class HttpExchangesProperties.Recording extends Object;\n", "des": "Auto-configuration for actuator HTTP exchanges."}
{"index": 2506, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jersey\n\n// @ManagementContextConfiguration for Jersey infrastructure when a separate management context with a web server running on a different port is required.\n@ManagementContextConfiguration(value=CHILD, proxyBeanMethods=false) @Import(org.springframework.boot.actuate.autoconfigure.web.jersey.JerseyManagementContextConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public class JerseyChildManagementContextConfiguration extends Object;\n// @ManagementContextConfiguration for Jersey infrastructure when the management context is the same as the main application context.\n@ManagementContextConfiguration(value=SAME, proxyBeanMethods=false) @EnableConfigurationProperties(org.springframework.boot.autoconfigure.jersey.JerseyProperties.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public class JerseySameManagementContextConfiguration extends Object;\n// Callback interface that can be implemented by beans wishing to customize Jersey's ResourceConfig in the management context before it is used.\npublic interface ManagementContextResourceConfigCustomizer;\n", "des": "Configuration for a Jersey-based management context."}
{"index": 2507, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mappings\n\n// Auto-configuration for MappingsEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.web.mappings.MappingsEndpoint.class) public class MappingsEndpointAutoConfiguration extends Object;\n", "des": "Classes for auto-configuration of actuator web request mapping concerns."}
{"index": 2508, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive\n\n// @ManagementContextConfiguration for reactive web infrastructure when a separate management context with a web server running on a different port is required.\n@EnableWebFlux @ManagementContextConfiguration(value=CHILD, proxyBeanMethods=false) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementChildContextConfiguration extends Object;\n// Auto-configuration for Reactive-specific management context concerns.\n@AutoConfiguration @ConditionalOnClass(reactor.core.publisher.Flux.class) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementContextAutoConfiguration extends Object;\n", "des": "Configuration for a WebFlux-based management context."}
{"index": 2509, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package server\n\n// @Conditional that matches based on the configuration of the management port.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.web.server.OnManagementPortCondition.class) public @interface ConditionalOnManagementPort;\n// Auto-configuration for the management context.\n@AutoConfiguration @AutoConfigureOrder(2147483647) @EnableConfigurationProperties({WebEndpointProperties.class,ManagementServerProperties.class}) public class ManagementContextAutoConfiguration extends Object;\n// Port types that can be used to control how the management server is started.\npublic enum ManagementPortType extends Enum<ManagementPortType>;\n// Properties for the management server (e.g.\n@ConfigurationProperties(prefix=\"management.server\", ignoreUnknownFields=true) public class ManagementServerProperties extends Object;\n// WebServerFactoryCustomizer that customizes the WebServerFactory used to create the management context's web server.\npublic abstract class ManagementWebServerFactoryCustomizer<T extends org.springframework.boot.web.server.ConfigurableWebServerFactory> extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<T>, org.springframework.core.Ordered;\n", "des": "Actuator web server support."}
{"index": 2510, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet\n\n// @Controller for handling \"/error\" path when the management servlet is in a child context.\n@Controller public class ManagementErrorEndpoint extends Object;\n// Provides information about the management servlet context for MVC controllers to use.\n@FunctionalInterface public interface ManagementServletContext;\n// Auto-configuration for Servlet-specific management context concerns.\n@AutoConfiguration @ConditionalOnClass(jakarta.servlet.Servlet.class) @ConditionalOnWebApplication(type=SERVLET) public class ServletManagementContextAutoConfiguration extends Object;\n// \n@Configuration(proxyBeanMethods=false) @ConditionalOnProperty(prefix=\"management.server\", name=\"add-application-context-header\", havingValue=\"true\") protected static class ServletManagementContextAutoConfiguration.ApplicationContextFilterConfiguration extends Object;\n", "des": "Actuator Spring MVC support."}
{"index": 2511, "repo": "spring-security-core-6.1.2", "code": "package access\n\n// Support for JSR-250 and Spring Security @Secured annotations.\npackage access.annotation\n// Authorization event and listener classes.\npackage access.event\n// Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations.\npackage access.expression\n// Role hierarchy implementation.\npackage access.hierarchicalroles\n// Abstract level security interception classes which are responsible for enforcing the configured security constraints for a secure object.\npackage access.intercept\n// Provides SecurityMetadataSource implementations for securing Java method invocations via different AOP libraries.\npackage access.method\n// Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations.\npackage access.prepost\n// Implements a vote-based approach to authorization decisions.\npackage access.vote\n// \n@Deprecated public interface AccessDecisionManager;\n// \n@Deprecated public interface AccessDecisionVoter<S>;\n// Thrown if an Authentication object does not hold a required authority.\npublic class AccessDeniedException extends RuntimeException;\n// \n@Deprecated public interface AfterInvocationProvider;\n// Thrown if an authorization request could not be processed due to a system problem.\npublic class AuthorizationServiceException extends AccessDeniedException;\n// Stores a security system related configuration attribute.\npublic interface ConfigAttribute extends Serializable;\n// Allows permissions to be pre-cached when using pre or post filtering with expressions\npublic interface PermissionCacheOptimizer extends org.springframework.aop.framework.AopInfrastructureBean;\n// Strategy used in expression evaluation to determine whether a user has a permission or permissions for a given domain object.\npublic interface PermissionEvaluator extends org.springframework.aop.framework.AopInfrastructureBean;\n// Stores a ConfigAttribute as a String.\npublic class SecurityConfig extends Object implements ConfigAttribute;\n// Implemented by classes that store and can identify the ConfigAttributes that applies to a given secure object invocation.\npublic interface SecurityMetadataSource extends org.springframework.aop.framework.AopInfrastructureBean;\n", "des": "Core access-control related code, including security metadata related classes, interception code, access control annotations, EL support and voter-based implementations of the central AccessDecisionManager interface."}
{"index": 2512, "repo": "spring-security-core-6.1.2", "code": "package annotation\n\n// \n@Deprecated public interface AnnotationMetadataExtractor<A extends Annotation>;\n// \n@Deprecated public class Jsr250MethodSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource;\n// \n@Deprecated public class Jsr250SecurityConfig extends SecurityConfig;\n// \n@Deprecated public class Jsr250Voter extends Object implements AccessDecisionVoter<Object>;\n// Java 5 annotation for describing service layer security attributes.\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface Secured;\n// \n@Deprecated public class SecuredAnnotationSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource;\n", "des": "Support for JSR-250 and Spring Security @Secured annotations."}
{"index": 2513, "repo": "spring-security-core-6.1.2", "code": "package event\n\n// \n@Deprecated public abstract class AbstractAuthorizationEvent extends org.springframework.context.ApplicationEvent;\n// \n@Deprecated public class AuthenticationCredentialsNotFoundEvent extends AbstractAuthorizationEvent;\n// \n@Deprecated public class AuthorizationFailureEvent extends AbstractAuthorizationEvent;\n// \n@Deprecated public class AuthorizedEvent extends AbstractAuthorizationEvent;\n// \n@Deprecated public class LoggerListener extends Object implements org.springframework.context.ApplicationListener<AbstractAuthorizationEvent>;\n// \n@Deprecated public class PublicInvocationEvent extends AbstractAuthorizationEvent;\n", "des": "Authorization event and listener classes."}
{"index": 2514, "repo": "spring-security-core-6.1.2", "code": "package expression\n\n// Implementation of expression-based method security.\npackage expression.method\n// Base implementation of the facade which isolates Spring Security's requirements for evaluating security expressions from the implementation of the underlying expression objects.\npublic abstract class AbstractSecurityExpressionHandler<T> extends Object implements SecurityExpressionHandler<T>, org.springframework.context.ApplicationContextAware;\n// A null PermissionEvaluator which denies all access.\npublic class DenyAllPermissionEvaluator extends Object implements PermissionEvaluator;\n// \npublic final class ExpressionUtils extends Object;\n// Facade which isolates Spring Security's requirements for evaluating security expressions from the implementation of the underlying expression objects\npublic interface SecurityExpressionHandler<T> extends org.springframework.aop.framework.AopInfrastructureBean;\n// Standard interface for expression root objects used with expression-based security.\npublic interface SecurityExpressionOperations;\n// Base root object for use in Spring Security expression evaluations.\npublic abstract class SecurityExpressionRoot extends Object implements SecurityExpressionOperations;\n", "des": "Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations."}
{"index": 2515, "repo": "spring-security-core-6.1.2", "code": "package method\n\n// The standard implementation of MethodSecurityExpressionHandler.\npublic class DefaultMethodSecurityExpressionHandler extends AbstractSecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation> implements MethodSecurityExpressionHandler;\n// \n@Deprecated public class ExpressionBasedAnnotationAttributeFactory extends Object implements PrePostInvocationAttributeFactory;\n// \n@Deprecated public class ExpressionBasedPostInvocationAdvice extends Object implements PostInvocationAuthorizationAdvice;\n// \n@Deprecated public class ExpressionBasedPreInvocationAdvice extends Object implements PreInvocationAuthorizationAdvice;\n// Extended expression-handler facade which adds methods which are specific to securing method invocations.\npublic interface MethodSecurityExpressionHandler extends SecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation>;\n// Interface which must be implemented if you want to use filtering in method security expressions.\npublic interface MethodSecurityExpressionOperations extends SecurityExpressionOperations;\n", "des": "Implementation of expression-based method security."}
{"index": 2516, "repo": "spring-security-core-6.1.2", "code": "package hierarchicalroles\n\n// Exception that is thrown because of a cycle in the role hierarchy definition\npublic class CycleInRoleHierarchyException extends RuntimeException;\n// \npublic final class NullRoleHierarchy extends Object implements RoleHierarchy;\n// The simple interface of a role hierarchy.\npublic interface RoleHierarchy;\n// \npublic class RoleHierarchyAuthoritiesMapper extends Object implements GrantedAuthoritiesMapper;\n// This class defines a role hierarchy for use with various access checking components.\npublic class RoleHierarchyImpl extends Object implements RoleHierarchy;\n// Utility methods for RoleHierarchy.\npublic final class RoleHierarchyUtils extends Object;\n", "des": "Role hierarchy implementation."}
{"index": 2517, "repo": "spring-security-core-6.1.2", "code": "package intercept\n\n// Enforces security for AOP Alliance MethodInvocations, such as via Spring AOP.\npackage intercept.aopalliance\n// Enforces security for AspectJ JointPoints, delegating secure object callbacks to the calling aspect.\npackage intercept.aspectj\n// \n@Deprecated public abstract class AbstractSecurityInterceptor extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware;\n// \n@Deprecated public interface AfterInvocationManager;\n// \n@Deprecated public class AfterInvocationProviderManager extends Object implements AfterInvocationManager, org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated public class InterceptorStatusToken extends Object;\n// \n@Deprecated public class MethodInvocationPrivilegeEvaluator extends Object implements org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated public class RunAsImplAuthenticationProvider extends Object implements org.springframework.beans.factory.InitializingBean, AuthenticationProvider, org.springframework.context.MessageSourceAware;\n// \n@Deprecated public interface RunAsManager;\n// \n@Deprecated public class RunAsManagerImpl extends Object implements RunAsManager, org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated public class RunAsUserToken extends AbstractAuthenticationToken;\n", "des": "Abstract level security interception classes which are responsible for enforcing the configured security constraints for a secure object."}
{"index": 2518, "repo": "spring-security-core-6.1.2", "code": "package aopalliance\n\n// \n@Deprecated public class MethodSecurityInterceptor extends AbstractSecurityInterceptor implements org.aopalliance.intercept.MethodInterceptor;\n// \n@Deprecated public class MethodSecurityMetadataSourceAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware;\n", "des": "Enforces security for AOP Alliance MethodInvocations, such as via Spring AOP."}
{"index": 2519, "repo": "spring-security-core-6.1.2", "code": "package aspectj\n\n// \n@Deprecated public interface AspectJCallback;\n// \n@Deprecated public final class AspectJMethodSecurityInterceptor extends MethodSecurityInterceptor;\n// \n@Deprecated public final class MethodInvocationAdapter extends Object implements org.aopalliance.intercept.MethodInvocation;\n", "des": "Enforces security for AspectJ JointPoints, delegating secure object callbacks to the calling aspect."}
{"index": 2520, "repo": "spring-security-core-6.1.2", "code": "package method\n\n// \n@Deprecated public abstract class AbstractFallbackMethodSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\n// \n@Deprecated public abstract class AbstractMethodSecurityMetadataSource extends Object implements MethodSecurityMetadataSource;\n// \n@Deprecated public final class DelegatingMethodSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\n// \n@Deprecated public class MapBasedMethodSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource implements org.springframework.beans.factory.BeanClassLoaderAware;\n// \npublic interface MethodSecurityMetadataSource extends SecurityMetadataSource;\n// \n@Target(PARAMETER) @Retention(RUNTIME) @Documented @Deprecated public @interface P;\n", "des": "Provides SecurityMetadataSource implementations for securing Java method invocations via different AOP libraries."}
{"index": 2521, "repo": "spring-security-core-6.1.2", "code": "package prepost\n\n// Annotation for specifying a method access-control expression which will be evaluated after a method has been invoked.\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PostAuthorize;\n// Annotation for specifying a method filtering expression which will be evaluated after a method has been invoked.\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PostFilter;\n// \n@Deprecated public class PostInvocationAdviceProvider extends Object implements AfterInvocationProvider;\n// \n@Deprecated public interface PostInvocationAttribute extends ConfigAttribute;\n// \n@Deprecated public interface PostInvocationAuthorizationAdvice extends org.springframework.aop.framework.AopInfrastructureBean;\n// Annotation for specifying a method access-control expression which will be evaluated to decide whether a method invocation is allowed or not.\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PreAuthorize;\n// Annotation for specifying a method filtering expression which will be evaluated before a method has been invoked.\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PreFilter;\n// \n@Deprecated public interface PreInvocationAttribute extends ConfigAttribute;\n// \n@Deprecated public interface PreInvocationAuthorizationAdvice extends org.springframework.aop.framework.AopInfrastructureBean;\n// \n@Deprecated public class PreInvocationAuthorizationAdviceVoter extends Object implements AccessDecisionVoter<org.aopalliance.intercept.MethodInvocation>;\n// \n@Deprecated public class PrePostAdviceReactiveMethodInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor;\n// \n@Deprecated public class PrePostAnnotationSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\n// \npublic interface PrePostInvocationAttributeFactory extends org.springframework.aop.framework.AopInfrastructureBean;\n", "des": "Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations."}
{"index": 2522, "repo": "spring-security-core-6.1.2", "code": "package vote\n\n// \n@Deprecated public abstract class AbstractAccessDecisionManager extends Object implements AccessDecisionManager, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware;\n// \n@Deprecated public abstract class AbstractAclVoter extends Object implements AccessDecisionVoter<org.aopalliance.intercept.MethodInvocation>;\n// \n@Deprecated public class AffirmativeBased extends AbstractAccessDecisionManager;\n// \n@Deprecated public class AuthenticatedVoter extends Object implements AccessDecisionVoter<Object>;\n// \n@Deprecated public class ConsensusBased extends AbstractAccessDecisionManager;\n// \n@Deprecated public class RoleHierarchyVoter extends RoleVoter;\n// \n@Deprecated public class RoleVoter extends Object implements AccessDecisionVoter<Object>;\n// \n@Deprecated public class UnanimousBased extends AbstractAccessDecisionManager;\n", "des": "Implements a vote-based approach to authorization decisions."}
{"index": 2523, "repo": "spring-security-core-6.1.2", "code": "package authentication\n\n// An AuthenticationProvider which relies upon a data access object.\npackage authentication.dao\n// Authentication success and failure events which can be published to the Spring application context.\npackage authentication.event\n// An authentication provider for JAAS.\npackage authentication.jaas\n// Base class for Authentication objects.\npublic abstract class AbstractAuthenticationToken extends Object implements Authentication, CredentialsContainer;\n// A base ReactiveAuthenticationManager that allows subclasses to override and work with UserDetails objects.\npublic abstract class AbstractUserDetailsReactiveAuthenticationManager extends Object implements ReactiveAuthenticationManager, org.springframework.context.MessageSourceAware;\n// Thrown if an authentication request is rejected because the account has expired.\npublic class AccountExpiredException extends AccountStatusException;\n// Base class for authentication exceptions which are caused by a particular user account status (locked, disabled etc).\npublic abstract class AccountStatusException extends AuthenticationException;\n// \npublic class AccountStatusUserDetailsChecker extends Object implements UserDetailsChecker, org.springframework.context.MessageSourceAware;\n// An AuthenticationProvider implementation that validates AnonymousAuthenticationTokens.\npublic class AnonymousAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.context.MessageSourceAware;\n// Represents an anonymous Authentication.\npublic class AnonymousAuthenticationToken extends AbstractAuthenticationToken implements Serializable;\n// Thrown if an authentication request is rejected because there is no Authentication object in the SecurityContext.\npublic class AuthenticationCredentialsNotFoundException extends AuthenticationException;\n// Provides a Authentication.getDetails() object for a given web request.\npublic interface AuthenticationDetailsSource<C,T>;\n// \npublic interface AuthenticationEventPublisher;\n// Processes an Authentication request.\npublic interface AuthenticationManager;\n// An interface for resolving an AuthenticationManager based on the provided context\npublic interface AuthenticationManagerResolver<C>;\n// An Observation.Context used during authentications\npublic class AuthenticationObservationContext extends io.micrometer.observation.Observation.Context;\n// An ObservationConvention for translating authentications into KeyValues.\npublic final class AuthenticationObservationConvention extends Object implements io.micrometer.observation.ObservationConvention<AuthenticationObservationContext>;\n// Indicates a class can process a specific Authentication implementation.\npublic interface AuthenticationProvider;\n// Thrown if an authentication request could not be processed due to a system problem.\npublic class AuthenticationServiceException extends AuthenticationException;\n", "des": "Core classes and interfaces related to user authentication, which are used throughout Spring Security."}
{"index": 2524, "repo": "spring-security-core-6.1.2", "code": "package dao\n\n// A base AuthenticationProvider that allows subclasses to override and work with UserDetails objects.\npublic abstract class AbstractUserDetailsAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware;\n// An AuthenticationProvider implementation that retrieves user details from a UserDetailsService.\npublic class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider;\n", "des": "An AuthenticationProvider which relies upon a data access object."}
{"index": 2525, "repo": "spring-security-core-6.1.2", "code": "package event\n\n// Represents an application authentication event.\npublic abstract class AbstractAuthenticationEvent extends org.springframework.context.ApplicationEvent;\n// Abstract application event which indicates authentication failure for some reason.\npublic abstract class AbstractAuthenticationFailureEvent extends AbstractAuthenticationEvent;\n// Application event which indicates authentication failure due to invalid credentials being presented.\npublic class AuthenticationFailureBadCredentialsEvent extends AbstractAuthenticationFailureEvent;\n// Application event which indicates authentication failure due to the user's credentials having expired.\npublic class AuthenticationFailureCredentialsExpiredEvent extends AbstractAuthenticationFailureEvent;\n// Application event which indicates authentication failure due to the user's account being disabled.\npublic class AuthenticationFailureDisabledEvent extends AbstractAuthenticationFailureEvent;\n// Application event which indicates authentication failure due to the user's account having expired.\npublic class AuthenticationFailureExpiredEvent extends AbstractAuthenticationFailureEvent;\n// Application event which indicates authentication failure due to the user's account having been locked.\npublic class AuthenticationFailureLockedEvent extends AbstractAuthenticationFailureEvent;\n// Application event which indicates authentication failure due to there being no registered AuthenticationProvider that can process the request.\npublic class AuthenticationFailureProviderNotFoundEvent extends AbstractAuthenticationFailureEvent;\n// Application event which indicates authentication failure due to the CAS user's ticket being generated by an untrusted proxy.\npublic class AuthenticationFailureProxyUntrustedEvent extends AbstractAuthenticationFailureEvent;\n// Application event which indicates authentication failure due to there being a problem internal to the AuthenticationManager.\npublic class AuthenticationFailureServiceExceptionEvent extends AbstractAuthenticationFailureEvent;\n// Application event which indicates successful authentication.\npublic class AuthenticationSuccessEvent extends AbstractAuthenticationEvent;\n// Indicates an interactive authentication was successful.\npublic class InteractiveAuthenticationSuccessEvent extends AbstractAuthenticationEvent;\n// Outputs authentication-related application events to Commons Logging.\npublic class LoggerListener extends Object implements org.springframework.context.ApplicationListener<AbstractAuthenticationEvent>;\n// Application event which indicates successful logout\npublic class LogoutSuccessEvent extends AbstractAuthenticationEvent;\n", "des": "Authentication success and failure events which can be published to the Spring application context."}
{"index": 2526, "repo": "spring-security-core-6.1.2", "code": "package jaas\n\n// JAAS authentication events which can be published to the Spring application context by the JAAS authentication provider.\npackage jaas.event\n// An in memory JAAS implementation.\npackage jaas.memory\n// An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration.\npublic abstract class AbstractJaasAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationListener<SessionDestroyedEvent>;\n// The AuthorityGranter interface is used to map a given principal to role names.\npublic interface AuthorityGranter;\n// Creates a LoginContext using the Configuration provided to it.\npublic class DefaultJaasAuthenticationProvider extends AbstractJaasAuthenticationProvider;\n// This LoginExceptionResolver simply wraps the LoginException with an AuthenticationServiceException.\npublic class DefaultLoginExceptionResolver extends Object implements LoginExceptionResolver;\n// The JaasAuthenticationCallbackHandler is similar to the javax.security.auth.callback.CallbackHandler interface in that it defines a handle method.\npublic interface JaasAuthenticationCallbackHandler;\n// An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration.\npublic class JaasAuthenticationProvider extends AbstractJaasAuthenticationProvider;\n// UsernamePasswordAuthenticationToken extension to carry the Jaas LoginContext that the user was logged into\npublic class JaasAuthenticationToken extends UsernamePasswordAuthenticationToken;\n// GrantedAuthority which, in addition to the assigned role, holds the principal that an AuthorityGranter used as a reason to grant this authority.\npublic final class JaasGrantedAuthority extends Object implements GrantedAuthority;\n// The most basic Callbacks to be handled when using a LoginContext from JAAS, are the NameCallback and PasswordCallback.\npublic class JaasNameCallbackHandler extends Object implements JaasAuthenticationCallbackHandler;\n// The most basic Callbacks to be handled when using a LoginContext from JAAS, are the NameCallback and PasswordCallback.\npublic class JaasPasswordCallbackHandler extends Object implements JaasAuthenticationCallbackHandler;\n// The JaasAuthenticationProvider takes an instance of LoginExceptionResolver to resolve LoginModule specific exceptions to Spring Security AuthenticationExceptions.\npublic interface LoginExceptionResolver;\n", "des": "An authentication provider for JAAS."}
{"index": 2527, "repo": "spring-security-core-6.1.2", "code": "package event\n\n// Parent class for events fired by the JaasAuthenticationProvider.\npublic abstract class JaasAuthenticationEvent extends org.springframework.context.ApplicationEvent;\n// Fired when LoginContext.login throws a LoginException, or if any other exception is thrown during that time.\npublic class JaasAuthenticationFailedEvent extends JaasAuthenticationEvent;\n// Fired by the JaasAuthenticationProvider after successfully logging the user into the LoginContext, handling all callbacks, and calling all AuthorityGranters.\npublic class JaasAuthenticationSuccessEvent extends JaasAuthenticationEvent;\n", "des": "JAAS authentication events which can be published to the Spring application context by the JAAS authentication provider."}
{"index": 2528, "repo": "spring-security-core-6.1.2", "code": "package memory\n\n// An in memory representation of a JAAS configuration.\npublic class InMemoryConfiguration extends Configuration;\n", "des": "An in memory JAAS implementation."}
{"index": 2529, "repo": "spring-security-core-6.1.2", "code": "package core\n\n// The default implementation of the GrantedAuthority interface.\npackage core.authority\n// Classes related to the establishment of a security context for the duration of a request (such as an HTTP or RMI invocation).\npackage core.context\n// Session abstraction which is provided by the org.springframework.security.core.session.SessionInformation SessionInformation class.\npackage core.session\n// A service for building secure random tokens.\npackage core.token\n// The standard interfaces for implementing user data DAOs.\npackage core.userdetails\n// Representation of an authenticated Principal once an Authentication request has been successfully authenticated by the AuthenticationManager.authenticate(Authentication) method.\npublic interface AuthenticatedPrincipal;\n// Represents the token for an authentication request or for an authenticated principal once the request has been processed by the AuthenticationManager.authenticate(Authentication) method.\npublic interface Authentication extends Principal, Serializable;\n// Abstract superclass for all exceptions related to an Authentication object being invalid for whatever reason.\npublic abstract class AuthenticationException extends RuntimeException;\n// Indicates that the implementing object contains sensitive data, which can be erased using the eraseCredentials method.\npublic interface CredentialsContainer;\n// Represents an authority granted to an Authentication object.\npublic interface GrantedAuthority extends Serializable;\n// Internal class used for checking version compatibility in a deployed application.\npublic final class SpringSecurityCoreVersion extends Object;\n// The default MessageSource used by Spring Security.\npublic class SpringSecurityMessageSource extends org.springframework.context.support.ResourceBundleMessageSource;\n// A marker for Authentications that should never be stored across requests, for example a bearer token authentication\n@Target({TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface Transient;\n", "des": "Core classes and interfaces related to user authentication and authorization, as well as the maintenance of a security context."}
{"index": 2530, "repo": "spring-security-core-6.1.2", "code": "package authority\n\n// Strategies for mapping a list of attributes (such as roles or LDAP groups) to a list of GrantedAuthoritys.\npackage authority.mapping\n// Utility method for manipulating GrantedAuthority collections etc.\npublic final class AuthorityUtils extends Object;\n// Indicates that a object stores GrantedAuthority objects.\npublic interface GrantedAuthoritiesContainer extends Serializable;\n// Basic concrete implementation of a GrantedAuthority.\npublic final class SimpleGrantedAuthority extends Object implements GrantedAuthority;\n", "des": "The default implementation of the GrantedAuthority interface."}
{"index": 2531, "repo": "spring-security-core-6.1.2", "code": "package mapping\n\n// Interface to be implemented by classes that can map a list of security attributes (such as roles or group names) to a collection of Spring Security GrantedAuthoritys.\npublic interface Attributes2GrantedAuthoritiesMapper;\n// Mapping interface which can be injected into the authentication layer to convert the authorities loaded from storage into those which will be used in the Authentication object.\npublic interface GrantedAuthoritiesMapper;\n// This class implements the Attributes2GrantedAuthoritiesMapper and MappableAttributesRetriever interfaces based on the supplied Map.\npublic class MapBasedAttributes2GrantedAuthoritiesMapper extends Object implements Attributes2GrantedAuthoritiesMapper, MappableAttributesRetriever, org.springframework.beans.factory.InitializingBean;\n// Interface to be implemented by classes that can retrieve a list of mappable security attribute strings (for example the list of all available J2EE roles in a web or EJB application).\npublic interface MappableAttributesRetriever;\n// \npublic class NullAuthoritiesMapper extends Object implements GrantedAuthoritiesMapper;\n// This class implements the Attributes2GrantedAuthoritiesMapper interface by doing a one-to-one mapping from roles to Spring Security GrantedAuthorities.\npublic class SimpleAttributes2GrantedAuthoritiesMapper extends Object implements Attributes2GrantedAuthoritiesMapper, org.springframework.beans.factory.InitializingBean;\n// Simple one-to-one GrantedAuthoritiesMapper which allows for case conversion of the authority name and the addition of a string prefix (which defaults to ROLE_ ).\npublic final class SimpleAuthorityMapper extends Object implements GrantedAuthoritiesMapper, org.springframework.beans.factory.InitializingBean;\n// This class implements the MappableAttributesRetriever interface by just returning a list of mappable attributes as previously set using the corresponding setter method.\npublic class SimpleMappableAttributesRetriever extends Object implements MappableAttributesRetriever;\n", "des": "Strategies for mapping a list of attributes (such as roles or LDAP groups) to a list of GrantedAuthoritys."}
{"index": 2532, "repo": "spring-security-core-6.1.2", "code": "package context\n\n// An interface that allows delayed access to a SecurityContext that may be generated.\npublic interface DeferredSecurityContext extends Supplier<SecurityContext>;\n// An API for notifying when the SecurityContext changes.\npublic final class ListeningSecurityContextHolderStrategy extends Object implements SecurityContextHolderStrategy;\n// A SecurityContextChangedListener that adds events to an existing Observation If no Observation is present when an event is fired, then the event is unrecorded.\npublic final class ObservationSecurityContextChangedListener extends Object implements SecurityContextChangedListener;\n// Allows getting and setting the Spring SecurityContext into a Context.\npublic final class ReactiveSecurityContextHolder extends Object;\n// Interface defining the minimum security information associated with the current thread of execution.\npublic interface SecurityContext extends Serializable;\n// An event that represents a change in SecurityContext\npublic class SecurityContextChangedEvent extends org.springframework.context.ApplicationEvent;\n// A listener for SecurityContextChangedEvents\n@FunctionalInterface public interface SecurityContextChangedListener;\n// Associates a given SecurityContext with the current execution thread.\npublic class SecurityContextHolder extends Object;\n// A strategy for storing security context information against a thread.\npublic interface SecurityContextHolderStrategy;\n// Base implementation of SecurityContext.\npublic class SecurityContextImpl extends Object implements SecurityContext;\n// A SecurityContext that is annotated with @Transient and thus should never be stored across requests.\n@Transient public class TransientSecurityContext extends SecurityContextImpl;\n", "des": "Classes related to the establishment of a security context for the duration of a request (such as an HTTP or RMI invocation)."}
{"index": 2533, "repo": "spring-security-core-6.1.2", "code": "package session\n\n// Abstract superclass for all session related events.\npublic class AbstractSessionEvent extends org.springframework.context.ApplicationEvent;\n// Generic session creation event which indicates that a session (potentially represented by a security context) has begun.\npublic abstract class SessionCreationEvent extends AbstractSessionEvent;\n// Generic \"session termination\" event which indicates that a session (potentially represented by a security context) has ended.\npublic abstract class SessionDestroyedEvent extends AbstractSessionEvent;\n// Generic \"session ID changed\" event which indicates that a session identifier (potentially represented by a security context) has changed.\npublic abstract class SessionIdChangedEvent extends AbstractSessionEvent;\n// Represents a record of a session within the Spring Security framework.\npublic class SessionInformation extends Object implements Serializable;\n// Maintains a registry of SessionInformation instances.\npublic interface SessionRegistry;\n// Default implementation of SessionRegistry which listens for SessionDestroyedEvents published in the Spring application context.\npublic class SessionRegistryImpl extends Object implements SessionRegistry, org.springframework.context.ApplicationListener<AbstractSessionEvent>;\n", "des": "Session abstraction which is provided by the org.springframework.security.core.session.SessionInformation SessionInformation class."}
{"index": 2534, "repo": "spring-security-core-6.1.2", "code": "package token\n\n// The default implementation of Token.\npublic class DefaultToken extends Object implements Token;\n// Basic implementation of TokenService that is compatible with clusters and across machine restarts, without requiring database persistence.\npublic class KeyBasedPersistenceTokenService extends Object implements TokenService, org.springframework.beans.factory.InitializingBean;\n// Creates a SecureRandom instance.\npublic class SecureRandomFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<SecureRandom>;\n// Provides SHA512 digest methods.\npublic abstract class Sha512DigestUtils extends Object;\n// A token issued by TokenService.\npublic interface Token;\n// Provides a mechanism to allocate and rebuild secure, randomised tokens.\npublic interface TokenService;\n", "des": "A service for building secure random tokens."}
{"index": 2535, "repo": "spring-security-core-6.1.2", "code": "package userdetails\n\n// Implementations of UserCache.\npackage userdetails.cache\n// Exposes a JDBC-based authentication repository, implementing org.springframework.security.core.userdetails.UserDetailsService UserDetailsService.\npackage userdetails.jdbc\n// Exposes an in-memory authentication repository.\npackage userdetails.memory\n// Interface that allows for retrieving a UserDetails object based on an Authentication object.\npublic interface AuthenticationUserDetailsService<T extends Authentication>;\n// A Map based implementation of ReactiveUserDetailsService\npublic class MapReactiveUserDetailsService extends Object implements ReactiveUserDetailsService, ReactiveUserDetailsPasswordService;\n// An API for changing a UserDetails password.\npublic interface ReactiveUserDetailsPasswordService;\n// An API for finding the UserDetails by username.\npublic interface ReactiveUserDetailsService;\n// Models core user information retrieved by a UserDetailsService.\npublic class User extends Object implements UserDetails, CredentialsContainer;\n// Builds the user to be added.\npublic static final class User.UserBuilder extends Object;\n// Provides a cache of UserDetails objects.\npublic interface UserCache;\n// Provides core user information.\npublic interface UserDetails extends Serializable;\n// This implementation for AuthenticationUserDetailsService wraps a regular Spring Security UserDetailsService implementation, to retrieve a UserDetails object based on the user name contained in an Authentication object.\npublic class UserDetailsByNameServiceWrapper<T extends Authentication> extends Object implements AuthenticationUserDetailsService<T>, org.springframework.beans.factory.InitializingBean;\n// Called by classes which make use of a UserDetailsService to check the status of the loaded UserDetails object.\npublic interface UserDetailsChecker;\n// An API for changing a UserDetails password.\npublic interface UserDetailsPasswordService;\n// Core interface which loads user-specific data.\npublic interface UserDetailsService;\n// Thrown if an UserDetailsService implementation cannot locate a User by its username.\npublic class UsernameNotFoundException extends AuthenticationException;\n", "des": "The standard interfaces for implementing user data DAOs."}
{"index": 2536, "repo": "spring-security-core-6.1.2", "code": "package cache\n\n// Does not perform any caching.\npublic class NullUserCache extends Object implements UserCache;\n// Caches UserDetails instances in a Spring defined Cache.\npublic class SpringCacheBasedUserCache extends Object implements UserCache;\n", "des": "Implementations of UserCache."}
{"index": 2537, "repo": "spring-security-core-6.1.2", "code": "package jdbc\n\n// UserDetailsService implementation which retrieves the user details (username, password, enabled flag, and authorities) from a database using JDBC queries.\npublic class JdbcDaoImpl extends org.springframework.jdbc.core.support.JdbcDaoSupport implements UserDetailsService, org.springframework.context.MessageSourceAware;\n", "des": "Exposes a JDBC-based authentication repository, implementing org.springframework.security.core.userdetails.UserDetailsService UserDetailsService."}
{"index": 2538, "repo": "spring-security-core-6.1.2", "code": "package memory\n\n// Used by InMemoryUserDetailsManager to temporarily store the attributes associated with a user.\npublic class UserAttribute extends Object;\n// Property editor that creates a UserAttribute from a comma separated list of values.\npublic class UserAttributeEditor extends PropertyEditorSupport;\n", "des": "Exposes an in-memory authentication repository."}
{"index": 2539, "repo": "spring-security-core-6.1.2", "code": "package jackson2\n\n// Jackson module for spring-security-core.\npublic class CoreJackson2Module extends com.fasterxml.jackson.databind.module.SimpleModule;\n// This utility class will find all the SecurityModules in classpath.\npublic final class SecurityJackson2Modules extends Object;\n// Jackson Mixin class helps in serialize/deserialize SimpleGrantedAuthority.\npublic abstract class SimpleGrantedAuthorityMixin extends Object;\n", "des": "Mix-in classes to add Jackson serialization support."}
{"index": 2540, "repo": "spring-security-core-6.1.2", "code": "package provisioning\n\n// Allows management of groups of authorities and their members.\npublic interface GroupManager;\n// Non-persistent implementation of UserDetailsManager which is backed by an in-memory map.\npublic class InMemoryUserDetailsManager extends Object implements UserDetailsManager, UserDetailsPasswordService;\n// Jdbc user management service, based on the same table structure as its parent class, JdbcDaoImpl.\npublic class JdbcUserDetailsManager extends JdbcDaoImpl implements UserDetailsManager, GroupManager;\n// An extension of the UserDetailsService which provides the ability to create new users and update existing ones.\npublic interface UserDetailsManager extends UserDetailsService;\n", "des": "Contains simple user and authority group account provisioning interfaces together with a a JDBC-based implementation."}
{"index": 2541, "repo": "spring-security-core-6.1.2", "code": "package util\n\n// Offers static methods for directly manipulating fields.\npublic final class FieldUtils extends Object;\n// An in memory implementation of Spring's Resource interface.\npublic class InMemoryResource extends org.springframework.core.io.AbstractResource;\n// Static utility methods for creating MethodInvocations usable within Spring Security.\npublic final class MethodInvocationUtils extends Object;\n// Represents the AOP Alliance MethodInvocation.\npublic class SimpleMethodInvocation extends Object implements org.aopalliance.intercept.MethodInvocation;\n", "des": "General utility classes used throughout the Spring Security framework."}
{"index": 2542, "repo": "pulsar-common-3.0.0", "code": "package zstd\n\n// Expose ZstdFrameCompressor which is a package protected class.\npublic class ZStdRawCompressor extends Object;\n// Exposes ZstdFrameDecompressor which is package protected.\npublic class ZStdRawDecompressor extends Object;\n", "des": "Helper class to access AirCompressor package private classes."}
{"index": 2543, "repo": "pulsar-common-3.0.0", "code": "package api\n\n// Classes to work with URLs.\npackage api.url\n// The MessageId interface provided for advanced users.\npublic interface MessageIdAdv extends MessageId;\n", "des": "Additional helper classes to the pulsar-client-api module."}
{"index": 2544, "repo": "pulsar-common-3.0.0", "code": "package url\n\n// Extension of the URLStreamHandler class to handle all stream protocol handlers.\npublic class DataURLStreamHandler extends URLStreamHandler;\n// This class defines a factory for URL stream protocol handlers.\npublic class PulsarURLStreamHandlerFactory extends Object implements URLStreamHandlerFactory;\n// Wrapper around java.net.URL to improve usability.\npublic class URL extends Object;\n", "des": "Classes to work with URLs."}
{"index": 2545, "repo": "pulsar-common-3.0.0", "code": "package allocator\n\n// Holder of a ByteBuf allocator.\npublic class PulsarByteBufAllocator extends Object;\n", "des": "Classes implementing pulsar allocator."}
{"index": 2546, "repo": "pulsar-common-3.0.0", "code": "package raw\n\n// Helper class to work with a raw Pulsar entry payload.\npublic class MessageParser extends Object;\n// Definition of an interface to process a raw Pulsar entry payload.\npublic static interface MessageParser.MessageProcessor;\n// View of a message that exposes the internal direct-memory buffer for more efficient processing.\npublic interface RawMessage;\n// Interface to uniquely identify an internal raw message.\npublic interface RawMessageId;\n// \npublic class RawMessageIdImpl extends Object implements RawMessageId;\n// \npublic class RawMessageImpl extends Object implements RawMessage;\n// Class representing a reference-counted object that requires explicit deallocation.\npublic class ReferenceCountedMessageMetadata extends io.netty.util.AbstractReferenceCounted;\n", "des": "Classes implementing raw API messages."}
{"index": 2547, "repo": "pulsar-common-3.0.0", "code": "package compression\n\n// Utilities.\npublic abstract class AirliftUtils extends Object;\n// Generic compression codec interface.\npublic interface CompressionCodec;\n// LZ4 Compression.\npublic class CompressionCodecLZ4 extends Object implements CompressionCodec;\n// No compression.\npublic class CompressionCodecNone extends Object implements CompressionCodec;\n// Provider of compression codecs used in Pulsar.\npublic class CompressionCodecProvider extends Object;\n// Snappy Compression.\npublic class CompressionCodecSnappy extends Object implements CompressionCodec;\n// ZLib Compression.\npublic class CompressionCodecZLib extends Object implements CompressionCodec;\n// Zstandard Compression.\npublic class CompressionCodecZstd extends Object implements CompressionCodec;\n", "des": "Implementation of different compression codecs."}
{"index": 2548, "repo": "pulsar-common-3.0.0", "code": "package exception\n\n// \npublic abstract class PulsarExceptionBase extends Exception;\n", "des": "Exception classes"}
{"index": 2549, "repo": "pulsar-common-3.0.0", "code": "package functions\n\n// \npublic abstract class JsonIgnorePropertiesMixIn extends Object;\n// Options while updating the sink.\npublic class UpdateOptionsImpl extends Object implements UpdateOptions;\n// Helper class to work with configuration.\npublic class Utils extends Object;\n", "des": "Classes needed for pulsar functions."}
{"index": 2550, "repo": "pulsar-common-3.0.0", "code": "package intercept\n\n// A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add timestamp from broker side metadata for each entry.\npublic class AppendBrokerTimestampMetadataInterceptor extends Object implements BrokerEntryMetadataInterceptor;\n// \npublic class AppendIndexMetadataInterceptor extends Object implements BrokerEntryMetadataInterceptor;\n// A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add metadata for each entry from broker side.\n@LimitedPrivate @Stable public interface BrokerEntryMetadataInterceptor;\n// A tool class for loading BrokerEntryMetadataInterceptor classes.\npublic class BrokerEntryMetadataUtils<T> extends Object;\n// Base exception for the broker interceptor.\npublic class InterceptException extends Exception;\n// \npublic interface ManagedLedgerPayloadProcessor;\n// \npublic static interface ManagedLedgerPayloadProcessor.Processor;\n", "des": "Classes needed for broker interceptor."}
{"index": 2551, "repo": "pulsar-common-3.0.0", "code": "package io\n\n// Information about a Pulsar connector config field.\npublic class ConfigFieldDefinition extends Object;\n", "des": "Configuration classes for IO."}
{"index": 2552, "repo": "pulsar-common-3.0.0", "code": "package lookup\n\n// Lookup data.\npackage lookup.data\n// \npublic class GetTopicsResult extends Object;\n", "des": "Lookup data."}
{"index": 2553, "repo": "pulsar-common-3.0.0", "code": "package data\n\n// This class encapsulates lookup data.\npublic class LookupData extends Object;\n", "des": "Lookup data."}
{"index": 2554, "repo": "pulsar-common-3.0.0", "code": "package naming\n\n// Definition of constants.\npublic class Constants extends Object;\n// Validator for metadata configuration.\npublic class Metadata extends Object;\n// \npublic class NamedEntity extends Object;\n// Parser of a value from the namespace field provided in configuration.\npublic class NamespaceName extends Object implements ServiceUnitId;\n// Basic interface for service unit's identification.\npublic interface ServiceUnitId;\n// Encapsulate the parsing of the completeTopicName name.\npublic class SystemTopicNames extends Object;\n// Encapsulate the parsing of the completeTopicName name.\npublic class TopicName extends Object implements ServiceUnitId;\n", "des": "Classes to work different configuration values."}
{"index": 2555, "repo": "pulsar-common-3.0.0", "code": "package nar\n\n// A utility class containing a few useful static methods to do typical IO operations.\npublic class FileUtils extends Object;\n// A ClassLoader for loading NARs (NiFi archives).\npublic class NarClassLoader extends URLClassLoader;\n// NarClassLoader builder class.\npublic class NarClassLoaderBuilder extends Object;\n// Helper class to unpack NARs.\npublic class NarUnpacker extends Object;\n", "des": "Classes to work with NARs."}
{"index": 2556, "repo": "pulsar-common-3.0.0", "code": "package net\n\n// ServiceURI represents service uri within pulsar cluster.\npublic class ServiceURI extends Object;\n", "des": "Classes for network configuration."}
{"index": 2557, "repo": "pulsar-common-3.0.0", "code": "package policies\n\n// Definition of different data structures for policies.\npackage policies.data\n// Implementation of policies.\npackage policies.impl\n// Paths for pulsar policies.\npackage policies.path\n// Namespace isolation policy.\npublic interface NamespaceIsolationPolicy;\n", "des": "Common policies."}
{"index": 2558, "repo": "pulsar-common-3.0.0", "code": "package data\n\n// The auto failover policy configuration data.\npublic class AutoFailoverPolicyDataImpl extends Object implements AutoFailoverPolicyData;\n// \npublic static class AutoFailoverPolicyDataImpl.AutoFailoverPolicyDataImplBuilder extends Object implements AutoFailoverPolicyData.Builder;\n// The namespace isolation data for a given broker.\npublic final class BrokerNamespaceIsolationDataImpl extends Object implements BrokerNamespaceIsolationData;\n// \npublic static class BrokerNamespaceIsolationDataImpl.BrokerNamespaceIsolationDataImplBuilder extends Object implements BrokerNamespaceIsolationData.Builder;\n// The configuration data for a cluster.\npublic final class ClusterDataImpl extends Object implements ClusterData, Cloneable;\n// \npublic static class ClusterDataImpl.ClusterDataImplBuilder extends Object implements ClusterData.Builder;\n// \npublic class EnsemblePlacementPolicyConfig extends Object;\n// \npublic static class EnsemblePlacementPolicyConfig.ParseEnsemblePlacementPolicyConfigException extends Exception;\n// The data of a failure domain configuration in a cluster.\npublic final class FailureDomainImpl extends Object implements FailureDomain;\n// \npublic static class FailureDomainImpl.FailureDomainImplBuilder extends Object implements FailureDomain.Builder;\n// Function instance statistics data base.\npublic class FunctionInstanceStatsDataBaseImpl extends Object implements FunctionInstanceStatsDataBase;\n// Function instance statistics data.\npublic class FunctionInstanceStatsDataImpl extends FunctionInstanceStatsDataBaseImpl implements FunctionInstanceStatsData;\n// Function instance statistics.\npublic class FunctionInstanceStatsImpl extends Object implements FunctionInstanceStats;\n// Statistics for Pulsar Function.\npublic class FunctionStatsImpl extends Object implements FunctionStats;\n// \npublic class FunctionStatusUtil extends Object;\n// Topic policy hierarchy value container.\npublic class HierarchyTopicPolicies extends Object;\n// Local policies.\npublic class LocalPolicies extends Object;\n// The data of namespace isolation configuration.\npublic class NamespaceIsolationDataImpl extends Object implements NamespaceIsolationData;\n// \npublic static class NamespaceIsolationDataImpl.NamespaceIsolationDataImplBuilder extends Object implements NamespaceIsolationData.Builder;\n// Namespace authorization operations.\npublic enum NamespaceOperation extends Enum<NamespaceOperation>;\n// Definition of the offload policies.\npublic class OffloadPoliciesImpl extends Object implements Serializable, OffloadPolicies;\n// \npublic static class OffloadPoliciesImpl.OffloadPoliciesImplBuilder extends Object implements OffloadPolicies.Builder;\n", "des": "Definition of different data structures for policies."}
{"index": 2559, "repo": "pulsar-common-3.0.0", "code": "package impl\n\n// Namespace isolation policies.\npublic class NamespaceIsolationPolicies extends Object;\n// Implementation of the namespace isolation policy.\npublic class NamespaceIsolationPolicyImpl extends Object implements NamespaceIsolationPolicy;\n", "des": "Implementation of policies."}
{"index": 2560, "repo": "pulsar-common-3.0.0", "code": "package path\n\n// Policy path utilities.\npublic class PolicyPath extends Object;\n", "des": "Paths for pulsar policies."}
{"index": 2561, "repo": "pulsar-common-3.0.0", "code": "package protocol\n\n// Classes to work with schemas.\npackage protocol.schema\n// ByteBuf holder that contains 2 buffers.\npublic final class ByteBufPair extends io.netty.util.AbstractReferenceCounted;\n// \n@Sharable public static class ByteBufPair.CopyingEncoder extends io.netty.channel.ChannelOutboundHandlerAdapter;\n// \n@Sharable public static class ByteBufPair.Encoder extends io.netty.channel.ChannelOutboundHandlerAdapter;\n// \npublic class Commands extends Object;\n// Definition of possible checksum types.\npublic static enum Commands.ChecksumType extends Enum<Commands.ChecksumType>;\n// Helper class to work with commands.\npublic final class CommandUtils extends Object;\n// \npublic class Markers extends Object;\n// Decoder that added whether a new connection is prefixed with the ProxyProtocol.\npublic class OptionalProxyProtocolDecoder extends io.netty.channel.ChannelInboundHandlerAdapter;\n// Basic implementation of the channel handler to process inbound Pulsar data.\npublic abstract class PulsarDecoder extends io.netty.channel.ChannelInboundHandlerAdapter;\n// Implementation of the channel handler to process inbound Pulsar data.\npublic abstract class PulsarHandler extends PulsarDecoder;\n", "des": "Common protocol."}
{"index": 2562, "repo": "pulsar-common-3.0.0", "code": "package schema\n\n// Bytes schema version.\npublic class BytesSchemaVersion extends Object implements SchemaVersion, Comparable<BytesSchemaVersion>;\n// This interface helps to compare byte arrays.\npublic static interface BytesSchemaVersion.ByteArrayComparator extends Comparator<byte[]>, Serializable;\n// Response for schema deletion.\npublic class DeleteSchemaResponse extends Object;\n// Empty schema version.\npublic final class EmptyVersion extends Object implements SchemaVersion;\n// Response containing all schemas.\npublic class GetAllVersionsSchemaResponse extends Object;\n// Response containing information about a schema.\npublic class GetSchemaResponse extends Object;\n// Latest schema version.\npublic final class LatestVersion extends Object implements SchemaVersion;\n// Response containing the schema version field.\npublic class LongSchemaVersionResponse extends Object;\n// Response with the version of a schema.\npublic class PostSchemaResponse extends Object;\n// POJO class used for serialize to json-string for SchemaInfo.schema when SchemaType is SchemaType.PROTOBUF_NATIVE.\npublic class ProtobufNativeSchemaData extends Object;\n// Schema data.\npublic class SchemaData extends Object;\n// Schema hash wrapper with a HashCode inner type.\npublic class SchemaHash extends Object;\n// Schema storage.\npublic interface SchemaStorage;\n// Schema version.\npublic interface SchemaVersion;\n// Stored schema with version.\npublic class StoredSchema extends Object;\n", "des": "Classes to work with schemas."}
{"index": 2563, "repo": "pulsar-common-3.0.0", "code": "package sasl\n\n// JAAS Credentials Container.\npublic class JAASCredentialsContainer extends Object implements Closeable;\n// This class implements parsing and handling of Kerberos principal names.\npublic class KerberosName extends Object;\n// \npublic static class KerberosName.BadFormatString extends IOException;\n// \npublic static class KerberosName.NoMatchingRule extends IOException;\n// SASL Constants.\npublic class SaslConstants extends Object;\n// TGT Refresh Thread.\npublic class TGTRefreshThread extends Thread;\n", "des": "Implementation of Simple Authentication and Security Layer."}
{"index": 2564, "repo": "pulsar-common-3.0.0", "code": "package schema\n\n// Long schema version.\npublic class LongSchemaVersion extends Object implements SchemaVersion;\n", "des": "Implementation of the common of the pulsar schema."}
{"index": 2565, "repo": "pulsar-common-3.0.0", "code": "package stats\n\n// \npublic class JvmDefaultGCMetricsLogger extends Object implements JvmGCMetricsLogger;\n// Logger for the JVM G1 GC metrics.\npublic class JvmG1GCMetricsLogger extends Object implements JvmGCMetricsLogger;\n// JvmGCMetricsLogger can be implemented for each specific GC type which retrieves GC count and pause time and logs it into metrics.\npublic interface JvmGCMetricsLogger;\n// This class is responsible for providing JVM metrics.\npublic class JvmMetrics extends Object;\n// \npublic abstract class MetricsMixIn extends Object;\n// \npublic class Rate extends Object;\n", "des": "Definition of classes responsible for statistics."}
{"index": 2566, "repo": "pulsar-common-3.0.0", "code": "package util\n\n// Set of different collections working in the concurrent environment.\npackage util.collections\n// Helpers to work with events from the non-blocking I/O client-server framework.\npackage util.keystoretls\n// Helpers to work with events from the non-blocking I/O client-server framework.\npackage util.netty\n// \npublic abstract class BaseGenerateDocumentation extends Object;\n// \nprotected static class BaseGenerateDocumentation.CategoryComparator extends Object implements Comparator<org.apache.commons.lang3.tuple.Pair<Field,org.apache.pulsar.common.util.BaseGenerateDocumentation.FieldContextWrapper>>, Serializable;\n// This interface declares a Bouncy Castle provider Loader.\npublic interface BCLoader;\n// Helper methods wrt Classloading.\npublic class ClassLoaderUtils extends Object;\n// \npublic class CmdGenerateDocs extends Object;\n// \npublic class Codec extends Object;\n// Implements cancellation and timeout support for CompletableFutures.\npublic class CompletableFutureCancellationHandler extends Object;\n// Date-time String formatter utility class.\npublic class DateFormatter extends Object;\n// \npublic class DefaultSslContextBuilder extends SslContextAutoRefreshBuilder<SSLContext>;\n// \npublic class DirectMemoryUtils extends Object;\n// Util class to place some special handling of exceptions.\npublic class ExceptionHandler extends Object;\n// Generic value converter.\npublic final class FieldParser extends Object;\n// Class working with file's modified time.\npublic class FileModifiedTimeUpdater extends Object;\n// This class is aimed at simplifying work with CompletableFuture.\npublic class FutureUtil extends Object;\n// \n@ThreadSafe public static class FutureUtil.Sequencer<T> extends Object;\n// This a builder like class for providing a fluent API for graceful shutdown Executors are added with the GracefulExecutorServicesShutdown.shutdown(ExecutorService...) method.\npublic class GracefulExecutorServicesShutdown extends Object;\n// This interface declares a hash function.\npublic interface Hash;\n// This class wraps X509ExtendedKeyManager and gives opportunity to refresh key-manager with refreshed certs without changing SslContext.\npublic class KeyManagerProxy extends X509ExtendedKeyManager;\n// Holder for the secure key store.\npublic class KeyStoreHolder extends Object;\n", "des": "Common utils."}
{"index": 2567, "repo": "pulsar-common-3.0.0", "code": "package collections\n\n// This this copy of BitSet.\npublic class BitSetRecyclable extends Object implements Cloneable, Serializable;\n// Safe multithreaded version of BitSet.\npublic class ConcurrentBitSet extends BitSet;\n// Safe multithreaded version of BitSet and leverage netty recycler.\npublic class ConcurrentBitSetRecyclable extends ConcurrentBitSet;\n// Map from long to an Object.\npublic class ConcurrentLongHashMap<V> extends Object;\n// Builder of ConcurrentLongHashMap.\npublic static class ConcurrentLongHashMap.Builder<T> extends Object;\n// Processor for one key-value entry, where the key is long.\npublic static interface ConcurrentLongHashMap.EntryProcessor<V>;\n// Concurrent hash map where both keys and values are composed of pairs of longs.\npublic class ConcurrentLongLongPairHashMap extends Object;\n// A BiConsumer Long pair.\npublic static interface ConcurrentLongLongPairHashMap.BiConsumerLongPair;\n// Builder of ConcurrentLongLongPairHashMap.\npublic static class ConcurrentLongLongPairHashMap.Builder extends Object;\n// A Long pair function.\npublic static interface ConcurrentLongLongPairHashMap.LongLongPairFunction;\n// A Long pair predicate.\npublic static interface ConcurrentLongLongPairHashMap.LongLongPairPredicate;\n// A pair of long values.\npublic static class ConcurrentLongLongPairHashMap.LongPair extends Object implements Comparable<ConcurrentLongLongPairHashMap.LongPair>;\n// Concurrent hash set where values are composed of pairs of longs.\npublic class ConcurrentLongPairSet extends Object implements LongPairSet;\n// Builder of ConcurrentLongPairSet.\npublic static class ConcurrentLongPairSet.Builder extends Object;\n// Represents a function that accepts an object of the LongPair type.\npublic static interface ConcurrentLongPairSet.ConsumerLong;\n// Class representing two long values.\npublic static class ConcurrentLongPairSet.LongPair extends Object implements Comparable<ConcurrentLongPairSet.LongPair>;\n// Represents a function that accepts two long arguments.\npublic static interface ConcurrentLongPairSet.LongPairConsumer;\n// Concurrent hash map.\npublic class ConcurrentOpenHashMap<K,V> extends Object;\n// Builder of ConcurrentOpenHashMap.\npublic static class ConcurrentOpenHashMap.Builder<K,V> extends Object;\n// Concurrent hash set.\npublic class ConcurrentOpenHashSet<V> extends Object;\n", "des": "Set of different collections working in the concurrent environment."}
{"index": 2568, "repo": "pulsar-common-3.0.0", "code": "package keystoretls\n\n// KeyStoreSSLContext that mainly wrap a SSLContext to provide SSL context for both webservice and netty.\npublic class KeyStoreSSLContext extends Object;\n// Connection Mode for TLS.\npublic static enum KeyStoreSSLContext.Mode extends Enum<KeyStoreSSLContext.Mode>;\n// Similar to `DefaultSslContextBuilder`, which build `javax.net.ssl.SSLContext` for web service.\npublic class NetSslContextBuilder extends SslContextAutoRefreshBuilder<SSLContext>;\n// SSL context builder for Netty.\npublic class NettySSLContextAutoRefreshBuilder extends SslContextAutoRefreshBuilder<KeyStoreSSLContext>;\n// SSLContextValidatorEngine to validate 2 SSlContext.\npublic class SSLContextValidatorEngine extends Object;\n// \n@FunctionalInterface public static interface SSLContextValidatorEngine.SSLEngineProvider;\n", "des": "Helpers to work with events from the non-blocking I/O client-server framework."}
{"index": 2569, "repo": "pulsar-common-3.0.0", "code": "package netty\n\n// Static utility methods for operating on ChannelFutures.\npublic class ChannelFutures extends Object;\n// \npublic class DnsResolverUtil extends Object;\n// \npublic class EventLoopUtil extends Object;\n// Contains utility methods for working with Netty Channels.\npublic final class NettyChannelUtil extends Object;\n// Contains utility methods for working with Netty Futures.\npublic class NettyFutureUtil extends Object;\n", "des": "Helpers to work with events from the non-blocking I/O client-server framework."}
{"index": 2570, "repo": "pulsar-common-3.0.0", "code": "package loadbalancer\n\n// The advertisedListener for broker with brokerServiceUrl and brokerServiceUrlTls.\npublic class AdvertisedListener extends Object;\n// Data class containing three components comprising all the data available for the leader broker about other brokers: - The local broker data which is written to ZooKeeper by each individual broker (LocalBrokerData).\npublic class BrokerData extends Object;\n// BrokerUsage object encapsulates the resources that are only used by broker, for now, it's connections both to outside JVM and to the local.\npublic class BrokerUsage extends Object;\n// Data class comprising the short term and long term historical data for this bundle.\npublic class BundleData extends Object;\n// JvmUsage represents set of resources that are specific to JVM and are used by broker, load balancing need to know this detail.\npublic class JvmUsage extends Object;\n// This class represents the overall load of the broker - it includes overall SystemResourceUsage and NamespaceUsage for all the namespaces hosted by this broker.\npublic class LoadReport extends Object implements LoadManagerReport;\n// Deserializer for a load report.\npublic class LoadReportDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer<LoadManagerReport>;\n// Contains all the data that is maintained locally on each broker.\npublic class LocalBrokerData extends Object implements LoadManagerReport;\n// this class represents usages of resources used by a namespace, this is an aggregate of all the topics and queues on the namespace.\npublic class NamespaceUsage extends Object;\n// The class containing information about system resources, allocated quota, and loaded bundles.\npublic class ResourceUnitRanking extends Object implements Comparable<ResourceUnitRanking>;\n// This class represents a object which reflects system resource usage per resource and the upper limit on the resource.\npublic class SystemResourceUsage extends Object;\n// Definition of possible resource types.\npublic static enum SystemResourceUsage.ResourceType extends Enum<SystemResourceUsage.ResourceType>;\n// Data class aggregating the short term and long term data across all bundles belonging to a broker.\npublic class TimeAverageBrokerData extends Object;\n// Data class comprising the average message data over a fixed period of time.\npublic class TimeAverageMessageData extends Object;\n", "des": "Classes to define policies for the load distribution."}
{"index": 2571, "repo": "camel-api-4.0.0-RC1", "code": "package camel\n\n// Camel Catalog API\npackage camel.catalog\n// Camel cloud\npackage camel.cloud\n// Camel Cluster support\npackage camel.cluster\n// Camel Health Check support\npackage camel.health\n// Service Provider Interfaces used by the Camel runtime which are plugin strategies.\npackage camel.spi\n// To perform optional initialization on an element after its properties has been configured.\npublic interface AfterPropertiesConfigured;\n// A strategy for aggregating two exchanges together into a single exchange.\npublic interface AggregationStrategy;\n// Exception thrown in situations when a Service has already been stopped.\npublic class AlreadyStoppedException extends RuntimeCamelException;\n// Marks the Endpoint as an endpoint from an API based component.\npublic interface ApiEndpoint extends Endpoint;\n// The callback interface for an AsyncProcessor so that it can notify you when an Exchange is done.\npublic interface AsyncCallback extends Runnable;\n// Marks the Endpoint as support asynchronous non-blocking routing in its consumer and producer.\npublic interface AsyncEndpoint extends Endpoint;\n// An asynchronous processor which can process an Exchange in an asynchronous fashion and signal completion by invoking the AsyncCallback.\npublic interface AsyncProcessor extends Processor;\n// Asynchronous producer\npublic interface AsyncProducer extends Producer, AsyncProcessor;\n// A consumer of a batch of message exchanges from an Endpoint\npublic interface BatchConsumer extends Consumer;\n// Used to indicate an injection point of a configuration bean (obtained from the Registry, or a new instance is created) into a POJO.\n@Retention(RUNTIME) @Documented @Target({FIELD,METHOD,CONSTRUCTOR,PARAMETER}) public @interface BeanConfigInject;\n// Used to indicate an injection point of a bean obtained from the Registry, into a POJO.\n@Retention(RUNTIME) @Documented @Target({FIELD,METHOD,CONSTRUCTOR,PARAMETER}) public @interface BeanInject;\n// \npublic enum BeanScope extends Enum<BeanScope>;\n// A predicate which evaluates a binary expression.\npublic interface BinaryPredicate extends Predicate;\n// Used for binding a bean to the registry.\n@Retention(RUNTIME) @Documented @Target({TYPE,FIELD,METHOD}) public @interface BindToRegistry;\n// Marks a parameter as being the body of an inbound Message\n@Retention(RUNTIME) @Documented @Target(PARAMETER) public @interface Body;\n", "des": "The core Camel API."}
{"index": 2572, "repo": "camel-api-4.0.0-RC1", "code": "package catalog\n\n// Details result of validating configuration properties (eg application.properties for camel-main).\npublic class ConfigurationPropertiesValidationResult extends Object implements Serializable;\n// Details result of validating endpoint uri.\npublic class EndpointValidationResult extends Object implements Serializable;\n// Pluggable resolver to load JSON schema files for components, data formats, languages etc.\npublic interface JSonSchemaResolver;\n// Validation result of parsing a language expression or predicate\npublic class LanguageValidationResult extends Object implements Serializable;\n// Runtime catalog which limited API needed by components that supports ComponentVerifierExtension.\npublic interface RuntimeCamelCatalog extends StaticService, CamelContextAware;\n// Strategy to provide suggestions for unknown endpoint options\npublic interface SuggestionStrategy;\n", "des": "Camel Catalog API"}
{"index": 2573, "repo": "camel-api-4.0.0-RC1", "code": "package cloud\n\n// \npublic interface DiscoverableService;\n// \npublic interface ServiceCallConstants;\n// Allows SPIs to implement custom Service Chooser.\n@FunctionalInterface public interface ServiceChooser;\n// An interface to represent an object which wishes to be injected with a ServiceChooser\npublic interface ServiceChooserAware;\n// A factory to create ServiceChooser\n@FunctionalInterface public interface ServiceChooserFactory extends ServiceFactory<ServiceChooser>;\n// Represents a Service.\npublic interface ServiceDefinition;\n// Allows SPIs to implement custom Service Discovery.\npublic interface ServiceDiscovery;\n// An interface to represent an object which wishes to be injected with a ServiceDiscovery\npublic interface ServiceDiscoveryAware;\n// A factory to create ServiceDiscovery\n@FunctionalInterface public interface ServiceDiscoveryFactory extends ServiceFactory<ServiceDiscovery>;\n// A factory to create Expression\n@FunctionalInterface public interface ServiceExpressionFactory extends ServiceFactory<Expression>;\n// \n@FunctionalInterface public interface ServiceFactory<T>;\n// Allows SPIs to implement custom Service Filter.\n@FunctionalInterface public interface ServiceFilter;\n// An interface to represent an object which wishes to be injected with a ServiceFilter\npublic interface ServiceFilterAware;\n// A factory to create ServiceFilter\n@FunctionalInterface public interface ServiceFilterFactory extends ServiceFactory<ServiceFilter>;\n// \npublic interface ServiceHealth;\n// Represents a Load Balancer.\n@FunctionalInterface public interface ServiceLoadBalancer;\n// A factory to create LoadBalancer\n@FunctionalInterface public interface ServiceLoadBalancerFactory extends ServiceFactory<ServiceLoadBalancer>;\n// Represents a load balancer function to be executed by the LoadBalancer.\n@FunctionalInterface public interface ServiceLoadBalancerFunction<T>;\n// \npublic interface ServiceRegistry extends Service, CamelContextAware, IdAware, Ordered;\n// A selector used to pick up a service among a list.\n@FunctionalInterface public static interface ServiceRegistry.Selector;\n", "des": "Camel cloud"}
{"index": 2574, "repo": "camel-api-4.0.0-RC1", "code": "package cluster\n\n// Marker interface for cluster events\npublic interface CamelClusterEventListener;\n// \npublic static interface CamelClusterEventListener.Leadership extends CamelClusterEventListener;\n// \npublic static interface CamelClusterEventListener.Membership extends CamelClusterEventListener;\n// \npublic interface CamelClusterMember extends HasId;\n// \npublic interface CamelClusterService extends Service, CamelContextAware, IdAware, Ordered;\n// \n@FunctionalInterface public static interface CamelClusterService.Selector;\n// Represents the View of the cluster at some given period of time.\npublic interface CamelClusterView extends Service, CamelContextAware;\n// A CamelPreemptiveClusterService is a CamelClusterService that manages CamelPreemptiveClusterViews.\npublic interface CamelPreemptiveClusterService extends CamelClusterService;\n// A CamelPreemptiveClusterView is a CamelClusterView that can be externally disabled by another controller.\npublic interface CamelPreemptiveClusterView extends CamelClusterView;\n", "des": "Camel Cluster support"}
{"index": 2575, "repo": "camel-api-4.0.0-RC1", "code": "package extension\n\n// Marker interface for component extensions.\npublic interface ComponentExtension;\n// Defines the interface used for validating component/endpoint parameters.\npublic interface ComponentVerifierExtension extends ComponentExtension;\n// The result of a verification\npublic static interface ComponentVerifierExtension.Result extends Serializable;\n// Status of the verification\npublic static enum ComponentVerifierExtension.Result.Status extends Enum<ComponentVerifierExtension.Result.Status>;\n// The scope defines how the parameters should be verified.\npublic static enum ComponentVerifierExtension.Scope extends Enum<ComponentVerifierExtension.Scope>;\n// This interface represents a detailed error in case when the verification fails.\npublic static interface ComponentVerifierExtension.VerificationError extends Serializable;\n// Interface defining an attribute which is a key for the detailed error messages.\npublic static interface ComponentVerifierExtension.VerificationError.Attribute extends Serializable;\n// Interface defining an error code.\npublic static interface ComponentVerifierExtension.VerificationError.Code extends Serializable;\n// Attributes for details about an exception that was raised\npublic static interface ComponentVerifierExtension.VerificationError.ExceptionAttribute extends ComponentVerifierExtension.VerificationError.Attribute;\n// Group related details\npublic static interface ComponentVerifierExtension.VerificationError.GroupAttribute extends ComponentVerifierExtension.VerificationError.Attribute;\n// HTTP related error details\npublic static interface ComponentVerifierExtension.VerificationError.HttpAttribute extends ComponentVerifierExtension.VerificationError.Attribute;\n// Standard set of error codes\npublic static interface ComponentVerifierExtension.VerificationError.StandardCode extends ComponentVerifierExtension.VerificationError.Code;\n// \npublic interface MetaDataExtension extends ComponentExtension;\n// \npublic static interface MetaDataExtension.MetaData;\n", "des": "Component extension"}
{"index": 2576, "repo": "camel-api-4.0.0-RC1", "code": "package health\n\n// An interface to represent an object which provides HealthCheck\npublic interface HasHealthChecks;\n// Health check\npublic interface HealthCheck extends HasGroup, HasId, Ordered;\n// \npublic static enum HealthCheck.Kind extends Enum<HealthCheck.Kind>;\n// Response to a health check invocation.\npublic static interface HealthCheck.Result;\n// \npublic static enum HealthCheck.State extends Enum<HealthCheck.State>;\n// An interface to represent an object which wishes to be injected with the HealthCheck\npublic interface HealthCheckAware;\n// Helper for invoking HealthCheck's.\npublic final class HealthCheckHelper extends Object;\n// A registry for health checks.\npublic interface HealthCheckRegistry extends CamelContextAware, StaticService, IdAware;\n// A repository for health checks.\npublic interface HealthCheckRepository extends HasId, HasHealthChecks;\n// A pluggable strategy for resolving health checks in a loosely coupled manner\npublic interface HealthCheckResolver extends CamelContextAware;\n// A builder helper to create a HealthCheck result.\npublic final class HealthCheckResultBuilder extends Object implements Builder<HealthCheck.Result>;\n// A strategy that allows SPI to process HealthCheck results and enrich and manipulate the result.\npublic interface HealthCheckResultStrategy;\n// An interface to represent an object which wishes to be injected with the HealthCheck\npublic interface WritableHealthCheckRepository extends HealthCheckRepository;\n", "des": "Camel Health Check support"}
{"index": 2577, "repo": "camel-api-4.0.0-RC1", "code": "package spi\n\n// SPI annotations for plugins\npackage spi.annotations\n// Access to a repository to store aggregated exchanges to support pluggable implementations.\npublic interface AggregationRepository;\n// Factory to create Processor for annotation based EIPs.\npublic interface AnnotationBasedProcessorFactory;\n// A TypeConverter which is capable of annotation scanning for Converter classes and add these as type converters.\npublic interface AnnotationScanTypeConverters;\n// Represents an API method as part of a parent API.\n@Retention(RUNTIME) @Documented @Target(FIELD) public @interface ApiMethod;\n// Used for annotating a UriParam parameter that its for use by API based endpoints.\n@Retention(RUNTIME) @Documented @Target(FIELD) public @interface ApiParam;\n// Used to annotate a nested configuration parameter type (such as a nested Configuration object) which can then be used on a API based component, endpoint.\n@Retention(RUNTIME) @Documented @Target(TYPE) public @interface ApiParams;\n// Indicates that the Camel string/expression should be used as an endpoint uri.\n@Retention(RUNTIME) @Documented @Target({TYPE,METHOD,FIELD,PARAMETER}) public @interface AsEndpointUri;\n// Indicates that the Camel language/expression should be used as predicate.\n@Retention(RUNTIME) @Documented @Target({TYPE,METHOD,FIELD,PARAMETER}) public @interface AsPredicate;\n// A manager to handle async routing engine, when Exchanges are being handed over from one thread to another, while the callee thread is blocked waiting for the other threads to complete, before it can continue.\npublic interface AsyncProcessorAwaitManager extends StaticService;\n// Information about the thread and exchange that are inflight.\npublic static interface AsyncProcessorAwaitManager.AwaitThread;\n// Utilization statistics of this manager.\npublic static interface AsyncProcessorAwaitManager.Statistics;\n// A marker for defining the policy to be used for applying authorization to routes.\npublic interface AuthorizationPolicy extends Policy;\n// Marker interface for LifecycleStrategy that are used for auto-wiring components, data formats and languages.\npublic interface AutowiredLifecycleStrategy extends LifecycleStrategy;\n// Backlog tracer that captures the last N messages during routing in a backlog.\npublic interface BacklogTracer;\n", "des": "Service Provider Interfaces used by the Camel runtime which are plugin strategies."}
{"index": 2578, "repo": "camel-api-4.0.0-RC1", "code": "package annotations\n\n// \n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"cloud\") public @interface CloudServiceFactory;\n// \n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"component\") public @interface Component;\n// Internal annotation to mark a class as having constant fields for the source code generator.\n@Retention(RUNTIME) @Documented @Target(TYPE) public @interface ConstantProvider;\n// \n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"dataformat\") public @interface Dataformat;\n// Marks a class as a custom developer console.\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"dev-console\") public @interface DevConsole;\n// Internal annotation used to include fields otherwise excluded because annotate with XmlTransient.\n@Target(FIELD) @Retention(RUNTIME) public @interface DslProperty;\n// Annotation to be used for JAXB property (field or method) annotated with @XmlAnyElement to highlight which actual elements do we expect (not to be enforced by JAXB, but by Camel itself).\n@Retention(RUNTIME) @Documented @Target({METHOD,FIELD}) public @interface ExternalSchemaElement;\n// Marks a class as a custom health-check or health-check repository.\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"health-check\") public @interface HealthCheck;\n// \n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"#jdk#\") public @interface JdkService;\n// \n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"language\") public @interface Language;\n// \n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"periodic-task\") public @interface PeriodicTask;\n// \n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"properties-function\") public @interface PropertiesFunction;\n// \n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"resource-resolver\") public @interface ResourceResolver;\n", "des": "SPI annotations for plugins"}
{"index": 2579, "repo": "camel-api-4.0.0-RC1", "code": "package jsse\n\n// KeyManager to select a key with desired alias while delegating processing to specified KeyManager Can be used both with server and client sockets\npublic class AliasedX509ExtendedKeyManager extends X509ExtendedKeyManager;\n// Represents configuration options that can be applied in the client-side or server-side context depending on what they are applied to.\npublic abstract class BaseSSLContextParameters extends JsseParameters;\n// Makes a decorated SSLContext appear as a normal SSLContext.\nprotected static final class BaseSSLContextParameters.SSLContextDecorator extends SSLContext;\n// Class needed to provide decoration of an existing SSLContext.\nprotected static final class BaseSSLContextParameters.SSLContextSpiDecorator extends SSLContextSpi;\n// A decorator that enables the application of configuration options to be applied to created sockets even after this factory has been created and turned over to client code.\nprotected static final class BaseSSLContextParameters.SSLServerSocketFactoryDecorator extends SSLServerSocketFactory;\n// A decorator that enables the application of configuration options to be applied to created sockets even after this factory has been created and turned over to client code.\nprotected static final class BaseSSLContextParameters.SSLSocketFactoryDecorator extends SSLSocketFactory;\n// Represents a list of TLS/SSL cipher suite names.\npublic class CipherSuitesParameters extends Object;\n// Represents the options for the client authentication settings of a server socket.\npublic enum ClientAuthentication extends Enum<ClientAuthentication>;\n// Represents a set of regular expression based filter patterns for including and excluding content of some type.\npublic class FilterParameters extends JsseParameters;\n// An immutable collection of compiled includes and excludes filter Patterns.\npublic static class FilterParameters.Patterns extends Object;\n// A global Supplier of SSLContextParameters to be used in Camel registry.\npublic interface GlobalSSLContextParametersSupplier extends Supplier<SSLContextParameters>;\n// Base class that provides optional integration with core Camel capabilities.\npublic class JsseParameters extends Object implements CamelContextAware;\n// A representation of configuration options for creating and loading KeyManager instance(s).\npublic class KeyManagersParameters extends JsseParameters;\n// A representation of configuration options for creating and loading a KeyStore instance.\npublic class KeyStoreParameters extends JsseParameters;\n// \npublic class SecureRandomParameters extends JsseParameters;\n", "des": "A collection of utility classes for configuring a JSSE SSLContext and other JSSE classes."}
{"index": 2580, "repo": "camel-api-4.0.0-RC1", "code": "package service\n\n// A useful base class which ensures that a service is only initialized once and provides some helper methods for enquiring of its status.\npublic abstract class BaseService extends Object;\n// A collection of helper methods for working with Service objects.\npublic final class ServiceHelper extends Object;\n// A useful base class which ensures that a service is only initialized once and provides some helper methods for enquiring of its status.\npublic abstract class ServiceSupport extends BaseService implements StatefulService;\n", "des": "Base service classes"}
{"index": 2581, "repo": "spring-rabbit-3.0.6", "code": "package rabbit\n\n// Annotations and supporting classes for declarative Rabbit listener endpoint\npackage rabbit.annotation\n// Provides classes to support Spring AOT.\npackage rabbit.aot\n// Provides classes for message batching.\npackage rabbit.batch\n// Provides classes supporting the Rabbit XML namespace.\npackage rabbit.config\n// Provides classes related to connections.\npackage rabbit.connection\n// Provides core classes for Spring Rabbit.\npackage rabbit.core\n// Provides classes for message listener containers.\npackage rabbit.listener\n// Provides classes supporting Log4j 2 appenders.\npackage rabbit.log4j2\n// Provides classes supporting Logback appenders.\npackage rabbit.logback\n// Provides classes supporting retries.\npackage rabbit.retry\n// Provides support classes for Spring Rabbit.\npackage rabbit.support\n// Provides classes supporting transactions in Spring Rabbit.\npackage rabbit.transaction\n// Provides asynchronous send and receive operations returning a CompletableFuture allowing the caller to obtain the reply later, using get() or a callback.\npublic class AsyncRabbitTemplate extends Object implements org.springframework.amqp.core.AsyncAmqpTemplate, ChannelAwareMessageListener, RabbitTemplate.ReturnsCallback, RabbitTemplate.ConfirmCallback, org.springframework.beans.factory.BeanNameAware, org.springframework.context.SmartLifecycle;\n// A RabbitFuture with a return type of the template's generic parameter.\npublic class RabbitConverterFuture<C> extends RabbitFuture<C>;\n// Base class for CompletableFutures returned by AsyncRabbitTemplate.\npublic abstract class RabbitFuture<T> extends CompletableFuture<T>;\n// A RabbitFuture with a return type of Message.\npublic class RabbitMessageFuture extends RabbitFuture<org.springframework.amqp.core.Message>;\n// A Runnable used to time out a RabbitFuture.\npublic class TimeoutTask extends Object implements Runnable;\n", "des": "Provides top-level classes for Spring Rabbit."}
{"index": 2582, "repo": "spring-rabbit-3.0.6", "code": "package annotation\n\n// Represents an argument used when declaring queues etc within a QueueBinding.\n@Target({}) @Retention(RUNTIME) public @interface Argument;\n// Enable Rabbit listener annotated endpoints that are created under the cover by a RabbitListenerContainerFactory.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(RabbitListenerConfigurationSelector.class) public @interface EnableRabbit;\n// An exchange to which to bind a RabbitListener queue.\n@Target({}) @Retention(RUNTIME) public @interface Exchange;\n// An ImportBeanDefinitionRegistrar class that registers a MultiRabbitListenerAnnotationBeanPostProcessor bean, if MultiRabbit is enabled.\npublic class MultiRabbitBootstrapConfiguration extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar, org.springframework.context.EnvironmentAware;\n// An extension of RabbitListenerAnnotationBeanPostProcessor that indicates the proper RabbitAdmin bean to be used when processing to the listeners, and also associates it to the declarables (Exchanges, Queues, and Bindings) returned.\npublic class MultiRabbitListenerAnnotationBeanPostProcessor extends RabbitListenerAnnotationBeanPostProcessor;\n// A queue definition used within the bindings attribute of a QueueBinding.\n@Target({}) @Retention(RUNTIME) public @interface Queue;\n// Defines a queue, the exchange it is to be bound to, and an optional binding key; used with @RabbitListener.\n@Target({}) @Retention(RUNTIME) public @interface QueueBinding;\n// An ImportBeanDefinitionRegistrar class that registers a RabbitListenerAnnotationBeanPostProcessor bean capable of processing Spring's @RabbitListener annotation.\npublic class RabbitBootstrapConfiguration extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\n// Annotation that marks a method to be the target of a Rabbit message listener within a class that is annotated with RabbitListener.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented public @interface RabbitHandler;\n", "des": "Annotations and supporting classes for declarative Rabbit listener endpoint"}
{"index": 2583, "repo": "spring-rabbit-3.0.6", "code": "package aot\n\n// RuntimeHintsRegistrar for spring-rabbit.\npublic class RabbitRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar;\n", "des": "Provides classes to support Spring AOT."}
{"index": 2584, "repo": "spring-rabbit-3.0.6", "code": "package batch\n\n// Strategy for batching messages.\npublic interface BatchingStrategy;\n// An object encapsulating a Message containing the batch of messages, the exchange, and routing key.\npublic class MessageBatch extends Object;\n// A simple batching strategy that supports only one exchange/routingKey; includes a batch size, a batched message size limit and a timeout.\npublic class SimpleBatchingStrategy extends Object implements BatchingStrategy;\n", "des": "Provides classes for message batching."}
{"index": 2585, "repo": "spring-rabbit-3.0.6", "code": "package config\n\n// \npublic abstract class AbstractExchangeParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n// RabbitListenerContainerFactory for Spring's base container implementation.\npublic abstract class AbstractRabbitListenerContainerFactory<C extends AbstractMessageListenerContainer> extends BaseRabbitListenerContainerFactory<C> implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware;\n// Convenient base class for interceptor factories.\npublic abstract class AbstractRetryOperationsInterceptorFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.aopalliance.aop.Advice>;\n// Base abstract class for listener container factories.\npublic abstract class BaseRabbitListenerContainerFactory<C extends MessageListenerContainer> extends Object implements RabbitListenerContainerFactory<C>, org.springframework.context.ApplicationContextAware;\n// \npublic class BindingFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.amqp.core.Binding>;\n// Implementation of ContainerCustomizer providing the configuration of multiple customizers at the same time.\npublic class CompositeContainerCustomizer<C extends MessageListenerContainer> extends Object implements ContainerCustomizer<C>;\n// Called by the container factory after the container is created and configured.\n@FunctionalInterface public interface ContainerCustomizer<C extends MessageListenerContainer>;\n// \npublic class DirectExchangeParser extends AbstractExchangeParser;\n// A RabbitListenerContainerFactory implementation to build a regular DirectMessageListenerContainer.\npublic class DirectRabbitListenerContainerFactory extends AbstractRabbitListenerContainerFactory<DirectMessageListenerContainer>;\n// \npublic class FanoutExchangeParser extends AbstractExchangeParser;\n// \npublic class HeadersExchangeParser extends AbstractExchangeParser;\n// A Factory bean to create a listener container.\npublic class ListenerContainerFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractMessageListenerContainer> implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.SmartLifecycle;\n", "des": "Provides classes supporting the Rabbit XML namespace."}
{"index": 2586, "repo": "spring-rabbit-3.0.6", "code": "package connection\n\n// \npublic abstract class AbstractConnectionFactory extends Object implements ConnectionFactory, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextClosedEvent>, com.rabbitmq.client.ShutdownListener;\n// The mode used to shuffle the addresses.\npublic static enum AbstractConnectionFactory.AddressShuffleMode extends Enum<AbstractConnectionFactory.AddressShuffleMode>;\n// Abstract ConnectionFactory implementation that routes AbstractRoutingConnectionFactory.createConnection() calls to one of various target ConnectionFactories based on a lookup key.\npublic abstract class AbstractRoutingConnectionFactory extends Object implements ConnectionFactory, RoutingConnectionFactory, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\n// Represents a failure to commit or rollback when performing afterCompletion after the primary transaction completes.\npublic class AfterCompletionFailedException extends org.springframework.amqp.AmqpException;\n// An exception thrown if the connection is an auto recover connection that is not currently open and is in the process of being recovered.\npublic class AutoRecoverConnectionNotCurrentlyOpenException extends org.springframework.amqp.AmqpException;\n// A ConnectionFactory implementation that (when the cache mode is CachingConnectionFactory.CacheMode.CHANNEL (default) returns the same Connection from all CachingConnectionFactory.createConnection() calls, and ignores calls to Connection.close() and caches Channel.\n@ManagedResource public class CachingConnectionFactory extends AbstractConnectionFactory implements org.springframework.beans.factory.InitializingBean, com.rabbitmq.client.ShutdownListener;\n// The cache mode.\npublic static enum CachingConnectionFactory.CacheMode extends Enum<CachingConnectionFactory.CacheMode>;\n// The type of publisher confirms to use.\npublic static enum CachingConnectionFactory.ConfirmType extends Enum<CachingConnectionFactory.ConfirmType>;\n// A listener for new channel creation and destruction.\n@FunctionalInterface public interface ChannelListener;\n", "des": "Provides classes related to connections."}
{"index": 2587, "repo": "spring-rabbit-3.0.6", "code": "package core\n\n// An exception thrown when a negative acknowledgement received after publishing a message.\npublic class AmqpNackReceivedException extends org.springframework.amqp.AmqpException;\n// A RabbitTemplate that permits batching individual messages into a larger message.\npublic class BatchingRabbitTemplate extends RabbitTemplate;\n// Represents a broker event generated by the Event Exchange Plugin (https://www.rabbitmq.com/event-exchange.html).\npublic class BrokerEvent extends org.springframework.amqp.event.AmqpEvent;\n// When the event-exchange-plugin is enabled (see https://www.rabbitmq.com/event-exchange.html), if an object of this type is declared as a bean, selected events will be published as BrokerEvents.\npublic class BrokerEventListener extends Object implements org.springframework.amqp.core.MessageListener, org.springframework.context.ApplicationEventPublisherAware, ConnectionListener, org.springframework.context.SmartLifecycle;\n// Basic callback for use in RabbitTemplate.\n@FunctionalInterface public interface ChannelCallback<T>;\n// Thrown when a blocking receive operation is performed but the consumeOk was not received before the receive timeout.\npublic class ConsumeOkNotReceivedException extends org.springframework.amqp.AmqpException;\n// A callback invoked immediately before publishing a message to update, replace, or create correlation data for publisher confirms.\n@FunctionalInterface public interface CorrelationDataPostProcessor;\n// Application event published when a declaration exception occurs.\npublic class DeclarationExceptionEvent extends RabbitAdminEvent;\n// A ConnectionListener that will declare a single exchange when the connection is established.\npublic final class DeclareExchangeConnectionListener extends Object implements ConnectionListener;\n// RabbitMQ implementation of portable AMQP administrative operations for AMQP >= 0.9.1.\n@ManagedResource(description=\"Admin Tasks\") public class RabbitAdmin extends Object implements org.springframework.amqp.core.AmqpAdmin, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean;\n", "des": "Provides core classes for Spring Rabbit."}
{"index": 2588, "repo": "spring-rabbit-3.0.6", "code": "package listener\n\n// Provides classes for adapting listeners.\npackage listener.adapter\n// Provides Additional APIs for listeners.\npackage listener.api\n// Provides classes for listener exceptions.\npackage listener.exception\n// Provides support classes for listeners.\npackage listener.support\n// \npublic abstract class AbstractMessageListenerContainer extends ObservableListenerContainer implements org.springframework.context.ApplicationEventPublisherAware;\n// A handler for Error on the container thread(s).\n@FunctionalInterface public static interface AbstractMessageListenerContainer.JavaLangErrorHandler;\n// Exception that indicates that the initial setup of this container's shared Rabbit Connection failed.\npublic static class AbstractMessageListenerContainer.SharedConnectionNotInitializedException extends RuntimeException;\n// A runtime exception to wrap a Throwable.\nprotected static final class AbstractMessageListenerContainer.WrappedTransactionException extends RuntimeException;\n// Base model for a Rabbit listener endpoint.\npublic abstract class AbstractRabbitListenerEndpoint extends Object implements RabbitListenerEndpoint, org.springframework.beans.factory.BeanFactoryAware;\n// An event that is published whenever a consumer is restarted.\npublic class AsyncConsumerRestartedEvent extends org.springframework.amqp.event.AmqpEvent;\n// An event that is published whenever a new consumer is started.\npublic class AsyncConsumerStartedEvent extends org.springframework.amqp.event.AmqpEvent;\n// An event that is published whenever a consumer is stopped (and not restarted).\npublic class AsyncConsumerStoppedEvent extends org.springframework.amqp.event.AmqpEvent;\n// Specialized consumer encapsulating knowledge of the broker connections and having its own lifecycle (start and stop).\npublic class BlockingQueueConsumer extends Object;\n// ErrorHandler that conditionally wraps the Exception in an AmqpRejectAndDontRequeueException if the configured rejection strategy determines that the message is fatal and should not be requeued.\npublic class ConditionalRejectingErrorHandler extends Object implements org.springframework.util.ErrorHandler;\n// Default implementation of FatalExceptionStrategy.\npublic static class ConditionalRejectingErrorHandler.DefaultExceptionStrategy extends Object implements FatalExceptionStrategy;\n// An AmqpEvent emitted by the listener container when consumer is subscribed to the queue.\npublic class ConsumeOkEvent extends org.springframework.amqp.event.AmqpEvent;\n", "des": "Provides classes for message listener containers."}
{"index": 2589, "repo": "spring-rabbit-3.0.6", "code": "package adapter\n\n// An abstract MessageListener adapter providing the necessary infrastructure to extract the payload of a Message.\npublic abstract class AbstractAdaptableMessageListener extends Object implements ChannelAwareMessageListener;\n// Root object for reply expression evaluation.\npublic static final class AbstractAdaptableMessageListener.ReplyExpressionRoot extends Object;\n// Extension of the DefaultMessageHandlerMethodFactory for Spring AMQP requirements.\npublic class AmqpMessageHandlerMethodFactory extends org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory;\n// A listener adapter for batch listeners.\npublic class BatchMessagingMessageListenerAdapter extends MessagingMessageListenerAdapter implements ChannelAwareBatchMessageListener;\n// No-op resolver for method arguments of type Continuation.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;\n// Delegates to an InvocableHandlerMethod based on the message payload type.\npublic class DelegatingInvocableHandler extends Object;\n// A wrapper for either an InvocableHandlerMethod or DelegatingInvocableHandler.\npublic class HandlerAdapter extends Object;\n// The result of a listener method invocation.\npublic final class InvocationResult extends Object;\n// An InvocableHandlerMethod extension for supporting Kotlin suspend function.\npublic class KotlinAwareInvocableHandlerMethod extends org.springframework.messaging.handler.invocation.InvocableHandlerMethod;\n// Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion.\npublic class MessageListenerAdapter extends AbstractAdaptableMessageListener;\n// A MessageListener adapter that invokes a configurable HandlerAdapter.\npublic class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener;\n// Exception to be thrown when the reply of a message failed to be sent.\npublic class ReplyFailureException extends org.springframework.amqp.AmqpException;\n// A Message Listener that returns a reply - intended for lambda use in a MessageListenerAdapter.\n@FunctionalInterface public interface ReplyingMessageListener<T,R>;\n// A post processor for replies.\npublic interface ReplyPostProcessor extends BiFunction<org.springframework.amqp.core.Message,org.springframework.amqp.core.Message,org.springframework.amqp.core.Message>;\n", "des": "Provides classes for adapting listeners."}
{"index": 2590, "repo": "spring-rabbit-3.0.6", "code": "package api\n\n// Used to receive a batch of messages if the container supports it.\npublic interface ChannelAwareBatchMessageListener extends ChannelAwareMessageListener;\n// A message listener that is aware of the Channel on which the message was received.\n@FunctionalInterface public interface ChannelAwareMessageListener extends org.springframework.amqp.core.MessageListener;\n// An error handler which is called when a {code @RabbitListener} method throws an exception.\n@FunctionalInterface public interface RabbitListenerErrorHandler;\n", "des": "Provides Additional APIs for listeners."}
{"index": 2591, "repo": "spring-rabbit-3.0.6", "code": "package exception\n\n// Exception to be thrown when the execution of a listener method failed with an irrecoverable problem.\npublic class FatalListenerExecutionException extends org.springframework.amqp.AmqpException;\n// Exception to be thrown when the execution of a listener method failed on startup.\npublic class FatalListenerStartupException extends org.springframework.amqp.AmqpException;\n// Exception class that indicates a rejected message on shutdown.\npublic class MessageRejectedWhileStoppingException extends org.springframework.amqp.AmqpException;\n", "des": "Provides classes for listener exceptions."}
{"index": 2592, "repo": "spring-rabbit-3.0.6", "code": "package support\n\n// Utility methods for listener containers.\npublic final class ContainerUtils extends Object;\n", "des": "Provides support classes for listeners."}
{"index": 2593, "repo": "spring-rabbit-3.0.6", "code": "package log4j2\n\n// A Log4j 2 appender that publishes logging events to an AMQP Exchange.\n@Plugin(name=\"RabbitMQ\", category=\"Core\", elementType=\"appender\", printObject=true) public class AmqpAppender extends org.apache.logging.log4j.core.appender.AbstractAppender;\n// Manager class for the appender.\nprotected static class AmqpAppender.AmqpManager extends org.apache.logging.log4j.core.appender.AbstractManager;\n// \nprotected static class AmqpAppender.Builder extends Object implements org.apache.logging.log4j.core.util.Builder<AmqpAppender>;\n// Helper class to encapsulate a LoggingEvent, its MDC properties, and the number of retries.\nprotected static class AmqpAppender.Event extends Object;\n", "des": "Provides classes supporting Log4j 2 appenders."}
{"index": 2594, "repo": "spring-rabbit-3.0.6", "code": "package logback\n\n// A Logback appender that publishes logging events to an AMQP Exchange.\npublic class AmqpAppender extends ch.qos.logback.core.AppenderBase<ch.qos.logback.classic.spi.ILoggingEvent>;\n// Small helper class to encapsulate a LoggingEvent, its MDC properties, and the number of retries.\nprotected static class AmqpAppender.Event extends Object;\n", "des": "Provides classes supporting Logback appenders."}
{"index": 2595, "repo": "spring-rabbit-3.0.6", "code": "package retry\n\n// The MessageRecoverer implementation to throw an ImmediateRequeueAmqpException for subsequent requeuing in the listener container.\npublic class ImmediateRequeueMessageRecoverer extends Object implements MessageRecoverer;\n// A retry recoverer for use with a batch listener.\n@FunctionalInterface public interface MessageBatchRecoverer extends MessageRecoverer;\n// \n@FunctionalInterface public interface MessageKeyGenerator;\n// Implementations of this interface can handle failed messages after retries are exhausted.\n@FunctionalInterface public interface MessageRecoverer;\n// An optimization for stateful retry of message processing.\n@FunctionalInterface public interface NewMessageIdentifier;\n// MessageRecover that causes the listener container to reject the message without requeuing.\npublic class RejectAndDontRequeueRecoverer extends Object implements MessageRecoverer;\n// MessageRecoverer implementation that republishes recovered messages to a specified exchange with the exception stack trace stored in the message header x-exception.\npublic class RepublishMessageRecoverer extends Object implements MessageRecoverer;\n// A RepublishMessageRecoverer supporting publisher confirms and returns.\npublic class RepublishMessageRecovererWithConfirms extends RepublishMessageRecoverer;\n", "des": "Provides classes supporting retries."}
{"index": 2596, "repo": "spring-rabbit-3.0.6", "code": "package support\n\n// Provides classes for Micrometer support.\npackage support.micrometer\n// A mechanism to keep track of active objects.\npublic class ActiveObjectCounter<T> extends Object;\n// A builder for argument maps.\npublic class ArgumentBuilder extends org.springframework.amqp.utils.MapBuilder<ArgumentBuilder,String,Object>;\n// Thrown when the broker cancels the consumer and the message queue is drained.\npublic class ConsumerCancelledException extends RuntimeException;\n// Default implementation of the MessagePropertiesConverter strategy.\npublic class DefaultMessagePropertiesConverter extends Object implements MessagePropertiesConverter;\n// Encapsulates an arbitrary message - simple \"bean\" holder structure.\npublic class Delivery extends Object;\n// FactoryBean for creating Expression instances.\npublic class ExpressionFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<org.springframework.expression.Expression>;\n// MessageListeners that also implement this interface can have configuration verified during initialization.\n@FunctionalInterface public interface ListenerContainerAware;\n// Exception to be thrown when the execution of a listener method failed.\npublic class ListenerExecutionFailedException extends org.springframework.amqp.AmqpException;\n// Strategy interface for converting between Spring AMQP MessageProperties and RabbitMQ BasicProperties.\npublic interface MessagePropertiesConverter;\n// Translates Rabbit Exceptions to the AmqpException class hierarchy.\npublic final class RabbitExceptionTranslator extends Object;\n// A very simple hardcoded implementation of the Expression interface that represents an immutable value.\npublic class ValueExpression<V> extends Object implements org.springframework.expression.Expression;\n", "des": "Provides support classes for Spring Rabbit."}
{"index": 2597, "repo": "spring-rabbit-3.0.6", "code": "package micrometer\n\n// Spring Rabbit Observation for listeners.\npublic enum RabbitListenerObservation extends Enum<RabbitListenerObservation> implements io.micrometer.observation.docs.ObservationDocumentation;\n// Default RabbitListenerObservationConvention for Rabbit listener key values.\npublic static class RabbitListenerObservation.DefaultRabbitListenerObservationConvention extends Object implements RabbitListenerObservationConvention;\n// Low cardinality tags.\npublic static enum RabbitListenerObservation.ListenerLowCardinalityTags extends Enum<RabbitListenerObservation.ListenerLowCardinalityTags> implements io.micrometer.common.docs.KeyName;\n// ObservationConvention for Rabbit listener key values.\npublic interface RabbitListenerObservationConvention extends io.micrometer.observation.ObservationConvention<RabbitMessageReceiverContext>;\n// ReceiverContext for Messages.\npublic class RabbitMessageReceiverContext extends io.micrometer.observation.transport.ReceiverContext<org.springframework.amqp.core.Message>;\n// SenderContext for Messages.\npublic class RabbitMessageSenderContext extends io.micrometer.observation.transport.SenderContext<org.springframework.amqp.core.Message>;\n// Spring RabbitMQ Observation for RabbitTemplate.\npublic enum RabbitTemplateObservation extends Enum<RabbitTemplateObservation> implements io.micrometer.observation.docs.ObservationDocumentation;\n// Default RabbitTemplateObservationConvention for Rabbit template key values.\npublic static class RabbitTemplateObservation.DefaultRabbitTemplateObservationConvention extends Object implements RabbitTemplateObservationConvention;\n// Low cardinality tags.\npublic static enum RabbitTemplateObservation.TemplateLowCardinalityTags extends Enum<RabbitTemplateObservation.TemplateLowCardinalityTags> implements io.micrometer.common.docs.KeyName;\n// ObservationConvention for Rabbit template key values.\npublic interface RabbitTemplateObservationConvention extends io.micrometer.observation.ObservationConvention<RabbitMessageSenderContext>;\n", "des": "Provides classes for Micrometer support."}
{"index": 2598, "repo": "spring-rabbit-3.0.6", "code": "package transaction\n\n// PlatformTransactionManager implementation for a single Rabbit ConnectionFactory.\npublic class RabbitTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean;\n", "des": "Provides classes supporting transactions in Spring Rabbit."}
{"index": 2599, "repo": "wicket-util-10.0.0-M1", "code": "package collections\n\n// This class wraps a WeakHashMap that holds one ConcurrentHashMap per ClassLoader.\npublic class ClassMetaCache<T> extends Object;\n// This is an integer hashmap that has the exact same features and interface as a normal Map except that the key is directly an integer.\npublic class IntHashMap<V> extends Object implements Cloneable, Serializable;\n// \npublic static class IntHashMap.Entry<V> extends Object;\n// A fixed size map implementation.\npublic class MiniMap<K,V> extends Object implements Map<K,V>, Serializable;\n// Holds a map of most recently used items of a given maximum size.\npublic class MostRecentlyUsedMap<K,V> extends LinkedHashMap<K,V>;\n// A simple multimap\npublic class MultiMap<K,V> extends HashMap<K,List<V>>;\n// Base class for read-only iterators.\npublic abstract class ReadOnlyIterator<T> extends Object implements Iterator<T>;\n// An iterator over List which goes from the end to the start\npublic class ReverseListIterator<E> extends Object implements Iterator<E>, Iterable<E>;\n// A comparator of URL instances.\npublic class UrlExternalFormComparator extends Object implements Comparator<URL>, Serializable;\n", "des": "Useful collections."}
{"index": 2600, "repo": "wicket-util-10.0.0-M1", "code": "package convert\n\n// Default converter implementations.\npackage convert.converter\n// Thrown for conversion exceptions.\npublic class ConversionException extends RuntimeException;\n// Converts input to output and vice versa.\npublic interface IConverter<C> extends IClusterable;\n// A converter that takes a mask into account.\npublic class MaskConverter<C> extends Object implements IConverter<C>;\n", "des": "Conversion support."}
{"index": 2601, "repo": "wicket-util-10.0.0-M1", "code": "package converter\n\n// Base class for locale aware type converters.\npublic abstract class AbstractConverter<C> extends Object implements IConverter<C>;\n// A base class for all Date related converters\npublic abstract class AbstractDateConverter<D extends Date> extends AbstractConverter<D>;\n// Base class for all converters of decimal numbers.\npublic abstract class AbstractDecimalConverter<N extends Number> extends AbstractNumberConverter<N>;\n// Base class for all converters of integer numbers.\npublic abstract class AbstractIntegerConverter<I extends Number> extends AbstractNumberConverter<I>;\n// A base class for all java.time.** related converters\npublic abstract class AbstractJavaTimeConverter<T extends Temporal> extends AbstractConverter<T>;\n// Base class for all number converters.\npublic abstract class AbstractNumberConverter<N extends Number> extends AbstractConverter<N>;\n// BigDecimal converter\npublic class BigDecimalConverter extends AbstractDecimalConverter<BigDecimal>;\n// BigInteger converter see IConverter\npublic class BigIntegerConverter extends AbstractIntegerConverter<BigInteger>;\n// Converts from Object to Boolean.\npublic class BooleanConverter extends AbstractConverter<Boolean>;\n// Converts from Object to Byte.\npublic class ByteConverter extends AbstractIntegerConverter<Byte>;\n// Converts to Calendar.\npublic class CalendarConverter extends Object implements IConverter<Calendar>;\n// Converts from Object to Character.\npublic class CharacterConverter extends AbstractConverter<Character>;\n// Converts from Object to Date.\npublic class DateConverter extends AbstractDateConverter<Date>;\n// Converts from Object to Double.\npublic class DoubleConverter extends AbstractDecimalConverter<Double>;\n// Converts from Object to Float.\npublic class FloatConverter extends AbstractDecimalConverter<Float>;\n// Converts from Object to Integer.\npublic class IntegerConverter extends AbstractIntegerConverter<Integer>;\n// Converts from Object to LocalDate.\npublic class LocalDateConverter extends AbstractJavaTimeConverter<LocalDate>;\n// Converts from Object to LocalDateTime.\npublic class LocalDateTimeConverter extends AbstractJavaTimeConverter<LocalDateTime>;\n// Converts from Object to LocalTime.\npublic class LocalTimeConverter extends AbstractJavaTimeConverter<LocalTime>;\n// Converts from Object to Long.\npublic class LongConverter extends AbstractIntegerConverter<Long>;\n// Converts from Object to Short.\npublic class ShortConverter extends AbstractIntegerConverter<Short>;\n", "des": "Default converter implementations."}
{"index": 2602, "repo": "wicket-util-10.0.0-M1", "code": "package crypt\n\n// Abstract base class for JCE based ICrypt implementations.\npublic abstract class AbstractCrypt extends Object implements ICrypt;\n// Character encoding names required of every implementation of the Java platform.\npublic class CharEncoding extends Object;\n// Utility class meant to help building Cipher.\npublic class CipherUtils extends Object;\n// ICryptFactory decorator that caches the call to ICryptFactory.newCrypt()\npublic class CryptFactoryCachingDecorator extends Object implements ICryptFactory;\n// Encryption and decryption implementations are accessed through this interface.\npublic interface ICrypt;\n// Interface used to generate crypt objects\npublic interface ICryptFactory;\n// Due to legal reasons in some countries the JRE is shipped without a security provider.\npublic class NoCrypt extends Object implements ICrypt;\n// Crypt factory implementation for noop NoCrypt class\npublic class NoCryptFactory extends Object implements ICryptFactory;\n// Converts String to and from bytes using the encodings required by the Java specification.\npublic class StringUtils extends Object;\n// Provide some simple means to encrypt and decrypt strings such as passwords.\npublic class SunJceCrypt extends AbstractCrypt;\n// THIS CLASS IS FOR TESTING PURPOSES ONLY.\npublic class TrivialCrypt extends AbstractCrypt;\n", "des": "Encryption support for forms."}
{"index": 2603, "repo": "wicket-util-10.0.0-M1", "code": "package diff\n\n// The diff.myers package implements Gene Myers' differencing algorithm.\npackage diff.myers\n// Holds an add-delta between to revisions of a text.\npublic class AddDelta extends Delta;\n// Holds an change-delta between to revisions of a text.\npublic class ChangeDelta extends Delta;\n// Holds a information about a part of the text involved in a differencing or patching operation.\npublic class Chunk extends ToString;\n// Holds a delete-delta between to revisions of a text.\npublic class DeleteDelta extends Delta;\n// Holds a \"delta\" difference between to revisions of a text.\npublic abstract class Delta extends ToString;\n// Implements a differencing engine that works on arrays of Object.\npublic class Diff extends ToString;\n// A simple interface for implementations of differencing algorithms.\npublic interface DiffAlgorithm;\n// Thrown whenever the differencing engine cannot produce the differences between two revisions of ta text.\npublic class DifferentiationFailedException extends DiffException;\n// Base class for all exceptions emanating from this package.\npublic class DiffException extends Exception;\n// Thrown whenever a delta cannot be applied as a patch to a given text.\npublic class PatchFailedException extends DiffException;\n// A Revision holds the series of deltas that describe the differences between two sequences.\npublic class Revision extends ToString;\n// Definition of a Visitor interface for Revisions See \"Design Patterns\" by the Gang of Four\npublic interface RevisionVisitor;\n// This class delegates handling of the to a StringBuilder based version.\npublic class ToString extends Object;\n", "des": "The diff package implements the differencing engine that JRCS uses."}
{"index": 2604, "repo": "wicket-util-10.0.0-M1", "code": "package myers\n\n// A diffnode in a diffpath.\npublic final class DiffNode extends PathNode;\n// A clean-room implementation of Eugene Myers differencing algorithm.\npublic class MyersDiff extends Object implements DiffAlgorithm;\n// A node in a diffpath.\npublic abstract class PathNode extends Object;\n// Represents a snake in a diffpath.\npublic final class Snake extends PathNode;\n", "des": "The diff.myers package implements Gene Myers' differencing algorithm."}
{"index": 2605, "repo": "wicket-util-10.0.0-M1", "code": "package file\n\n// Simple extension of File that adds an implementation of IModifiable for files.\npublic class File extends File implements IModifiable;\n// Default implementation of IFileCleaner that uses Apache commons-io FileCleaningTracker to track and clean the temporary created files.\npublic class FileCleaner extends Object implements IFileCleaner;\n// Adapts IFileCleaner to FileCleaningTracker\npublic class FileCleanerTrackerAdapter extends org.apache.commons.io.FileCleaningTracker;\n// File utility methods.\npublic class Files extends Object;\n// This folder subclass provides some type safety and extensibility for \"files\" that hold other files.\npublic class Folder extends File;\n// Filter for files\npublic static interface Folder.FileFilter;\n// Filter for folders\npublic static interface Folder.FolderFilter;\n// A FileDeleteStrategy that can delete folders.\npublic class FolderDeleteStrategy extends org.apache.commons.io.FileDeleteStrategy;\n// Keeps track of files awaiting deletion, and deletes them when an associated marker object is reclaimed by the garbage collector.\npublic interface IFileCleaner;\n// Knows how to find resources.\n@FunctionalInterface public interface IResourceFinder;\n// An IResourceFinder that looks for its resources in a filesystem path.\npublic class Path extends Object implements IResourceFinder;\n// A utility class providing helper methods in dealing with web.xml\npublic class WebXmlFile extends Object;\n", "des": "File utilities."}
{"index": 2606, "repo": "wicket-util-10.0.0-M1", "code": "package io\n\n// This class is used to wrap a stream that includes an encoded ByteOrderMark as its first bytes.\npublic class BOMInputStream extends ProxyInputStream;\n// This class implements an output stream in which the data is written into a byte array.\npublic class ByteArrayOutputStream extends OutputStream;\n// Output stream that counts bytes written to it (but discards them).\npublic final class ByteCountingOutputStream extends OutputStream;\n// Byte Order Mark (BOM) representation - see BOMInputStream.\npublic class ByteOrderMark extends Object implements Serializable;\n// URLConnection related utilities\npublic class Connections extends Object;\n// An output stream which will retain data in memory until a specified threshold is reached, and only then commit it to disk.\npublic class DeferredFileOutputStream extends ThresholdingOutputStream;\n// The file factory for this deferred file output stream.\npublic static interface DeferredFileOutputStream.FileFactory;\n// This is not a reader like e.g.\npublic final class FullyBufferedReader extends Object;\n// Wicket version of Serializable.\npublic interface IClusterable extends Serializable;\n// General IO Stream manipulation.\npublic final class IOUtils extends Object;\n// A Proxy stream which acts as expected, that is it passes the method calls on to the proxied stream and doesn't change which methods are being called.\npublic abstract class ProxyInputStream extends FilterInputStream;\n// Utilities methods for working with input and output streams.\npublic final class Streams extends Object;\n// \npublic class StringBufferWriter extends Writer;\n// An output stream which triggers an event when a specified number of bytes of data have been written to it.\npublic abstract class ThresholdingOutputStream extends OutputStream;\n// This is a simple XmlReader.\npublic final class XmlReader extends Reader;\n", "des": "Input/Output utilities."}
{"index": 2607, "repo": "wicket-util-10.0.0-M1", "code": "package listener\n\n// Holds a set of IChangeListeners.\npublic final class ChangeListenerSet<T> extends ListenerCollection<IChangeListener<T>>;\n// Generic \"something changed\" listener interface.\n@FunctionalInterface public interface IChangeListener<T>;\n// Represents a collection of listeners.\npublic abstract class ListenerCollection<T> extends Object implements Serializable, Iterable<T>;\n// Used to notify a listener.\nprotected static interface ListenerCollection.INotifier<T>;\n", "des": "Listener/ Observer utilities."}
{"index": 2608, "repo": "wicket-util-10.0.0-M1", "code": "package metapattern\n\n// Regular Expressions meta pattern parsers.\npackage metapattern.parsers\n// A Group that captures case-sensitive boolean values \"true\" or \"false\".\npublic final class BooleanGroup extends Group;\n// A Group that captures floating point values (doubles and floats).\npublic final class FloatingPointGroup extends Group;\n// A Group is a piece of a regular expression (referenced by some Java field or local variable) that forms a \"capturing group\" within the larger regular expression.\npublic class Group extends MetaPattern;\n// Thrown if an attempt is made to re-bind a Group to a second capturing group or MetaPattern.\npublic final class GroupAlreadyBoundException extends RuntimeException;\n// Thrown if a group is not bound.\npublic final class GroupNotBoundException extends RuntimeException;\n// A Group that captures integer values (positive and negative whole numbers, not Java ints).\npublic final class IntegerGroup extends Group;\n// Useful class for constructing readable and reusable regular expressions.\npublic class MetaPattern extends Object implements IClusterable;\n// Makes any MetaPattern optional by enclosing the pattern in an optionality expression.\npublic final class OptionalMetaPattern extends MetaPattern;\n", "des": "Regular Expressions meta pattern support."}
{"index": 2609, "repo": "wicket-util-10.0.0-M1", "code": "package parsers\n\n// Parses out strings separated by commas.\npublic final class CommaSeparatedVariableParser extends ListParser;\n// Parses integer variable assignments, such as \"x = 9\" or \"x=9\".\npublic final class IntegerVariableAssignmentParser extends MetaPatternParser;\n// Parses an arbitrary list format with a pattern for list entries and a pattern for list separators.\npublic class ListParser extends MetaPatternParser;\n// Base class for various MetaPattern based parsers.\npublic abstract class MetaPatternParser extends Object;\n// Parses XML tag names and attribute names which may include optional namespaces like \"namespace:name\" or \"name\".\npublic final class TagNameParser extends MetaPatternParser;\n// Parses key value assignment statements like \"foo=bar\" but also supporting namespaces like \"wicket:foo=bar\".\npublic final class VariableAssignmentParser extends MetaPatternParser;\n// Matches a 'word' surrounded by whitespace.\npublic final class WordParser extends MetaPatternParser;\n", "des": "Regular Expressions meta pattern parsers."}
{"index": 2610, "repo": "wicket-util-10.0.0-M1", "code": "package resource\n\n// \npublic abstract class AbstractResourceStream extends Object implements IResourceStream;\n// Base implementation of an IResourceStreamWriter so that you only have to override the IResourceStreamWriter.write(java.io.OutputStream).\npublic abstract class AbstractResourceStreamWriter extends Object implements IResourceStreamWriter;\n// Base class for string resources.\npublic abstract class AbstractStringResourceStream extends AbstractResourceStream implements IStringResourceStream;\n// A FileResourceStream is an IResource implementation for files.\npublic class FileResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream;\n// A FileSystemResourceStream is an IResourceStream implementation for Java NIO paths.\npublic class FileSystemResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream;\n// Non-dynamic resource streams point to fixed locations, like a file or a url.\npublic interface IFixedLocationResourceStream;\n// Interface to a streamed resource.\npublic interface IResourceStream extends IModifiable, IClusterable, Closeable;\n// Special IResourceStream implementation that a Resource can return when it directly wants to write to an output stream instead of return the IResourceStream.getInputStream().\npublic interface IResourceStreamWriter extends IResourceStream;\n// A resource that can be converted to a String representation, possibly using an explicit Charset.\npublic interface IStringResourceStream extends IResourceStream;\n// Thrown if a required resource cannot be found.\npublic final class ResourceStreamNotFoundException extends Exception;\n// A IResourceStream that wraps another resource stream\npublic class ResourceStreamWrapper extends Object implements IResourceStream;\n// \npublic class ResourceUtils extends Object;\n// \npublic static class ResourceUtils.PathLocale extends Object;\n// A string resource that can be appended to.\npublic class StringBufferResourceStream extends AbstractStringResourceStream;\n// A StringResourceStream is an IResource implementation for strings.\npublic final class StringResourceStream extends AbstractStringResourceStream;\n// IResourceStream that applies XSLT on an input IResourceStream.\npublic class XSLTResourceStream extends AbstractResourceStream;\n// An IResourceStream that ZIPs a directory's contents on the fly\npublic class ZipResourceStream extends AbstractResourceStream;\n", "des": "Base support for resources."}
{"index": 2611, "repo": "wicket-util-10.0.0-M1", "code": "package string\n\n// Support for String-variable interpolation.\npackage string.interpolator\n// An abstract base class for string list implementations.\npublic abstract class AbstractStringList extends Object implements IStringSequence, Serializable;\n// This is a copy or combination of java.lang.StringBuffer and java.lang.String It has a special method getValue() which returns the internal char array.\npublic final class AppendingStringBuffer extends Object implements Serializable, CharSequence;\n// Typesafe string iterator interface\npublic interface IStringIterator;\n// Typesafe interface to an ordered sequence of strings.\npublic interface IStringSequence;\n// This is a prepending stringbuffer optimized for constantly prepending strings to the front of the buffer.\npublic class PrependingStringBuffer extends Object;\n// A typesafe, mutable list of strings supporting a variety of convenient operations as well as expected operations from List such as add(), size(), remove(), iterator(), get(int index) and toArray().\npublic final class StringList extends AbstractStringList;\n// A variety of static String utility methods.\npublic final class Strings extends Object;\n// Holds an immutable String value and optionally a Locale, with methods to convert to various types.\npublic class StringValue extends Object implements IClusterable;\n// Thrown when a string value cannot be converted to some type.\npublic final class StringValueConversionException extends ConversionException;\n", "des": "String utilities."}
{"index": 2612, "repo": "wicket-util-10.0.0-M1", "code": "package interpolator\n\n// Interpolates variables into a String from a Map.\npublic class MapVariableInterpolator extends VariableInterpolator;\n// Convenient way of interpolating system properties.\npublic final class SystemVariableInterpolator extends MapVariableInterpolator;\n// Base class for variable interpolators.\npublic abstract class VariableInterpolator extends Object implements IClusterable;\n", "des": "Support for String-variable interpolation."}
{"index": 2613, "repo": "wicket-util-10.0.0-M1", "code": "package thread\n\n// Interface to an arbitrary piece of code that runs and can do logging.\n@FunctionalInterface public interface ICode;\n// Type-safe monitor class to be used in place of Object for readability.\npublic final class Lock extends Object;\n// Runs a block of code periodically.\npublic final class Task extends Object;\n", "des": "Threading utilities."}
{"index": 2614, "repo": "wicket-util-10.0.0-M1", "code": "package time\n\n// Utility class for Duration\npublic class Durations extends Object;\n// Utility class for Instant\npublic class Instants extends Object;\n", "des": "Utilities for working with Time(s)."}
{"index": 2615, "repo": "wicket-util-10.0.0-M1", "code": "package value\n\n// Map of values, extending ValueMap with methods for generating (HTML) markup attributes.\npublic final class AttributeMap extends ValueMap;\n// An implementation of IValueMap that makes a copy when a caller tries to change an immutable Map.\npublic class CopyOnWriteValueMap extends Object implements IValueMap, Serializable;\n// A base class based on the Java int primitive for value classes that want to implement standard operations on that value without the pain of aggregating an Integer object.\npublic class IntValue extends Object implements Comparable<IntValue>, Serializable;\n// A Map interface that holds values, parses Strings, and exposes a variety of convenience methods.\npublic interface IValueMap extends Map<String,Object>;\n// A base class based on the Java long primitive for value classes that want to implement standard operations on that value without the pain of aggregating a Long object.\npublic class LongValue extends Object implements Comparable<LongValue>, Serializable;\n// A IValueMap implementation that holds values, parses Strings, and exposes a variety of convenience methods.\npublic class ValueMap extends LinkedHashMap<String,Object> implements IValueMap;\n", "des": "This package provides casting utilities."}
{"index": 2616, "repo": "wicket-util-10.0.0-M1", "code": "package watch\n\n// Interface to get the last time something was modified.\npublic interface IModifiable;\n// Monitors one or more IModifiable objects, calling a IChangeListener when a given object's modification time changes.\npublic interface IModificationWatcher;\n// Monitors one or more IModifiable objects, calling a IChangeListener when a given object's modification time changes.\npublic class ModificationWatcher extends Object implements IModificationWatcher;\n// Container class for holding modifiable entries to watch.\nprotected static final class ModificationWatcher.Entry extends Object;\n", "des": "This package provides modification watchers."}
{"index": 2617, "repo": "spring-integration-jms-6.1.2", "code": "package jms\n\n// Provides classes for configuration - parsers, namespace handlers, factory beans.\npackage jms.config\n// Provides JMS Component support for the Java DSL.\npackage jms.dsl\n// \npublic abstract class AbstractJmsChannel extends org.springframework.integration.channel.AbstractMessageChannel;\n// JMS MessageListener that converts a JMS Message into a Spring Integration Message and sends that Message to a channel.\npublic class ChannelPublishingJmsMessageListener extends Object implements org.springframework.jms.listener.SessionAwareMessageListener<jakarta.jms.Message>, org.springframework.beans.factory.InitializingBean, org.springframework.integration.support.management.TrackableComponent, org.springframework.beans.factory.BeanFactoryAware;\n// Default implementation of JmsHeaderMapper.\npublic class DefaultJmsHeaderMapper extends JmsHeaderMapper;\n// \npublic class DynamicJmsTemplate extends org.springframework.jms.core.JmsTemplate;\n// A source for receiving JMS Messages with a polling listener.\npublic class JmsDestinationPollingSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>;\n// Strategy interface for mapping integration Message headers to an outbound JMS Message (e.g.\npublic abstract class JmsHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<jakarta.jms.Message>;\n// A wrapper around the JmsMessageDrivenEndpoint implementing MessagingGatewaySupport.\npublic class JmsInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.integration.context.OrderlyShutdownCapable;\n// A message-driven endpoint that receive JMS messages, converts them into Spring Integration Messages, and then sends the result to a channel.\npublic class JmsMessageDrivenEndpoint extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.integration.context.OrderlyShutdownCapable;\n// An outbound Messaging Gateway for request/reply JMS.\npublic class JmsOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle, jakarta.jms.MessageListener;\n// \npublic static class JmsOutboundGateway.ReplyContainerProperties extends Object;\n", "des": "Base package for JMS Support."}
{"index": 2618, "repo": "spring-integration-jms-6.1.2", "code": "package config\n\n// \npublic class JmsChannelFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractJmsChannel> implements org.springframework.context.SmartLifecycle, org.springframework.beans.factory.BeanNameAware;\n// Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration JMS namespace.\npublic class JmsChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser;\n// Header enricher for JMS specific values.\npublic class JmsHeaderEnricherParser extends org.springframework.integration.config.xml.HeaderEnricherParserSupport;\n// Parser for the <inbound-channel-adapter/> element of the 'jms' namespace.\npublic class JmsInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser;\n// Parser for the <message-driven-channel-adapter> element and the <inbound-gateway> element of the 'jms' namespace.\npublic class JmsMessageDrivenEndpointParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n// Namespace handler for Spring Integration's jms namespace.\npublic class JmsNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n// Parser for the <outbound-channel-adapter/> element of the jms namespace.\npublic class JmsOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\n// Parser for the <outbound-gateway> element of the integration 'jms' namespace.\npublic class JmsOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 2619, "repo": "spring-integration-jms-6.1.2", "code": "package dsl\n\n// Factory class for JMS components.\npublic final class Jms extends Object;\n// A DefaultMessageListenerContainer specific JmsListenerContainerSpec extension.\npublic class JmsDefaultListenerContainerSpec extends JmsListenerContainerSpec<JmsDefaultListenerContainerSpec,org.springframework.jms.listener.DefaultMessageListenerContainer>;\n// A base IntegrationComponentSpec for JmsDestinationAccessors.\npublic abstract class JmsDestinationAccessorSpec<S extends JmsDestinationAccessorSpec<S,A>,A extends org.springframework.jms.support.destination.JmsDestinationAccessor> extends org.springframework.integration.dsl.IntegrationComponentSpec<S,A>;\n// A MessageSourceSpec for a JmsDestinationPollingSource.\npublic class JmsInboundChannelAdapterSpec<S extends JmsInboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageSourceSpec<S,JmsDestinationPollingSource>;\n// A JmsTemplate-based JmsInboundChannelAdapterSpec extension.\npublic static class JmsInboundChannelAdapterSpec.JmsInboundChannelSpecTemplateAware extends JmsInboundChannelAdapterSpec<JmsInboundChannelAdapterSpec.JmsInboundChannelSpecTemplateAware> implements org.springframework.integration.dsl.ComponentsRegistration;\n// A MessagingGatewaySpec for a JmsInboundGateway.\npublic class JmsInboundGatewaySpec<S extends JmsInboundGatewaySpec<S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,JmsInboundGateway>;\n// An AbstractMessageListenerContainer-based JmsInboundGatewaySpec extension.\npublic static class JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer> extends JmsInboundGatewaySpec<JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S,C>>;\n// A JmsDestinationAccessorSpec for JmsListenerContainerSpecs.\npublic class JmsListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer> extends JmsDestinationAccessorSpec<S,C>;\n// A JmsMessageChannelSpec for subscribable AbstractJmsChannels.\npublic class JmsMessageChannelSpec<S extends JmsMessageChannelSpec<S,T>,T extends AbstractJmsChannel> extends JmsPollableMessageChannelSpec<S,T>;\n", "des": "Provides JMS Component support for the Java DSL."}
{"index": 2620, "repo": "wicket-request-10.0.0-M1", "code": "package request\n\n// A multivalue map of headers names and header values suitable for processing http request and response headers.\npublic class HttpHeaderCollection extends Object;\n// Maps exception to IRequestHandler.\n@FunctionalInterface public interface IExceptionMapper;\n// Base interface for log data collected by request handlers.\npublic interface ILogData extends Serializable;\n// A loggable request handler is a IRequestHandler that is capable of delivering log data.\npublic interface ILoggableRequestHandler extends IRequestHandler;\n// \npublic interface IRequestCycle;\n// A request handler is the base entity that is the subject of a request.\n@FunctionalInterface public interface IRequestHandler;\n// A IRequestHandler that delegates the actual work to another IRequestHandler.\npublic interface IRequestHandlerDelegate extends IRequestHandler;\n// Maps IRequestHandler(s) into Url(s) and Request(s) to IRequestHandler(s).\npublic interface IRequestMapper;\n// Represents request parameters.\npublic interface IRequestParameters;\n// An interface that a Url can implement if it knows how to render itself as full url or relative to a base url\npublic interface IUrlRenderer;\n// Request parameters that can be modified.\npublic interface IWritableRequestParameters extends IRequestParameters;\n// Request object.\npublic abstract class Request extends Object;\n// Manages executions of IRequestHandlers.\npublic abstract class RequestHandlerExecutor extends Object;\n// Exception to stop current request handler and execute a new one.\npublic static class RequestHandlerExecutor.ReplaceHandlerException extends RuntimeException;\n// Abstract base class for different implementations of response writing.\npublic abstract class Response extends Object;\n// Represents the URL to an external resource or internal resource/component.\npublic class Url extends Object implements Serializable;\n// Represents a single query parameter\npublic static final class Url.QueryParameter extends Object implements Serializable;\n// Modes with which urls can be stringized\npublic static enum Url.StringMode extends Enum<Url.StringMode>;\n// Takes care of rendering URLs.\npublic class UrlRenderer extends Object;\n// Various url utilities\npublic class UrlUtils extends Object;\n", "des": "Package for classes that have generic (protocol independent) support for request cycle processing."}
{"index": 2621, "repo": "shiro-web-2.0.0-alpha-2", "code": "package config\n\n// A Factory that creates FilterChainResolver instances based on Ini configuration.\npublic class IniFilterChainResolverFactory extends org.apache.shiro.ini.IniFactorySupport<FilterChainResolver>;\n// Configuration for Shiro's root level servlet filter.\npublic class ShiroFilterConfiguration extends Object;\n// \n@Deprecated public class WebIniSecurityManagerFactory extends org.apache.shiro.ini.IniSecurityManagerFactory;\n", "des": "Web-specific implementation extensions to the org.apache.shiro.config components."}
{"index": 2622, "repo": "shiro-web-2.0.0-alpha-2", "code": "package env\n\n// Default WebEnvironment implementation based on a backing Map instance.\npublic class DefaultWebEnvironment extends org.apache.shiro.env.DefaultEnvironment implements MutableWebEnvironment;\n// An EnvironmentLoader is responsible for loading a web application's Shiro WebEnvironment (which includes the web app's WebSecurityManager) into the ServletContext at application startup.\npublic class EnvironmentLoader extends Object;\n// Bootstrap listener to startup and shutdown the web application's Shiro WebEnvironment at ServletContext startup and shutdown respectively.\npublic class EnvironmentLoaderListener extends EnvironmentLoader implements javax.servlet.ServletContextListener;\n// WebEnvironment implementation configured by an Ini instance or Ini resource locations.\npublic class IniWebEnvironment extends ResourceBasedWebEnvironment implements org.apache.shiro.lang.util.Initializable, org.apache.shiro.lang.util.Destroyable;\n// A WebEnvironment that supports 'write' operations operations.\npublic interface MutableWebEnvironment extends WebEnvironment;\n// Abstract implementation for WebEnvironments that can be initialized via resource paths (config files).\npublic abstract class ResourceBasedWebEnvironment extends DefaultWebEnvironment implements org.apache.shiro.config.ResourceConfigurable;\n// A web-specific Environment instance, used in web applications.\npublic interface WebEnvironment extends org.apache.shiro.env.Environment;\n", "des": "Web-specific Environment implementation and support."}
{"index": 2623, "repo": "shiro-web-2.0.0-alpha-2", "code": "package filter\n\n// Servlet Filter implementations specific to controlling access based on a subject's authentication status, or those that can execute authentications (log-ins) directly.\npackage filter.authc\n// Servlet Filter implementations that perform authorization (access control) checks based on the Subject's abilities (for example, role or permission checks).\npackage filter.authz\n// The filter 'mgt' (management) package contains components used in managing Filters that are available for filter chain construction, the filter chains themselves, as well as resolving filter chains based by name.\npackage filter.mgt\n// Superclass for any filter that controls access to a resource and may redirect the user to the login page if they are not authenticated.\npublic abstract class AccessControlFilter extends PathMatchingFilter;\n// A request filter that blocks malicious requests.\npublic class InvalidRequestFilter extends AccessControlFilter;\n// A PathConfigProcessor processes configuration entries on a per path (url) basis.\npublic interface PathConfigProcessor;\n// Base class for Filters that will process only specified paths and allow all others to pass through.\npublic abstract class PathMatchingFilter extends AdviceFilter implements PathConfigProcessor;\n", "des": "Base package supporting all Servlet Filter implementations used to control access to web pages and URL resources."}
{"index": 2624, "repo": "shiro-web-2.0.0-alpha-2", "code": "package authc\n\n// Filter that allows access to a path immediately without performing security checks of any kind.\npublic class AnonymousFilter extends PathMatchingFilter;\n// An AuthenticationFilter that is capable of automatically performing an authentication attempt based on the incoming request.\npublic abstract class AuthenticatingFilter extends AuthenticationFilter;\n// Base class for all Filters that require the current user to be authenticated.\npublic abstract class AuthenticationFilter extends AccessControlFilter;\n// Requires the requesting user to be authenticated for the request to continue, and if they're not, requires the user to login via the HTTP Basic protocol-specific challenge.\npublic class BasicHttpAuthenticationFilter extends AuthenticatingFilter;\n// Requires the requesting user to be authenticated for the request to continue, and if they're not, requires the user to login via the HTTP Bearer protocol-specific challenge.\npublic class BearerHttpAuthenticationFilter extends AuthenticatingFilter;\n// Requires the requesting user to be authenticated for the request to continue, and if they are not, forces the user to login via by redirecting them to the loginUrl you configure.\npublic class FormAuthenticationFilter extends AuthenticatingFilter;\n// Simple Filter that, upon receiving a request, will immediately log-out the currently executing subject and then redirect them to a configured redirectUrl.\npublic class LogoutFilter extends AdviceFilter;\n// An authentication filter that redirects the user to the login page when they are trying to access a protected resource.\npublic class PassThruAuthenticationFilter extends AuthenticationFilter;\n// Filter that allows access to resources if the accessor is a known user, which is defined as having a known principal.\npublic class UserFilter extends AccessControlFilter;\n", "des": "Servlet Filter implementations specific to controlling access based on a subject's authentication status, or those that can execute authentications (log-ins) directly."}
{"index": 2625, "repo": "shiro-web-2.0.0-alpha-2", "code": "package authz\n\n// Superclass for authorization-related filters.\npublic abstract class AuthorizationFilter extends AccessControlFilter;\n// A Filter that can allow or deny access based on the host that sent the request.\npublic class HostFilter extends AuthorizationFilter;\n// A filter that translates an HTTP Request's Method (e.g.\npublic class HttpMethodPermissionFilter extends PermissionsAuthorizationFilter;\n// Matches a request based on IP Address or subnet mask matching against the remote address.\npublic final class IpAddressMatcher extends Object;\n// A Filter that requires the request to be from within a specific set of IP address ranges and / or not from with a specific (denied) set.\npublic class IpFilter extends AuthorizationFilter;\n// Represents a source of information for IP restrictions (see IpFilter)\npublic interface IpSource;\n// Filter that allows access if the current user has the permissions specified by the mapped value, or denies access if the user does not have all of the permissions specified.\npublic class PermissionsAuthorizationFilter extends AuthorizationFilter;\n// A Filter that requires the request to be on a specific port, and if not, redirects to the same URL on that port.\npublic class PortFilter extends AuthorizationFilter;\n// Filter that allows access if the current user has the roles specified by the mapped value, or denies access if the user does not have all of the roles specified.\npublic class RolesAuthorizationFilter extends AuthorizationFilter;\n// Filter which requires a request to be over SSL.\npublic class SslFilter extends PortFilter;\n", "des": "Servlet Filter implementations that perform authorization (access control) checks based on the Subject's abilities (for example, role or permission checks)."}
{"index": 2626, "repo": "shiro-web-2.0.0-alpha-2", "code": "package mgt\n\n// Enum representing all of the default Shiro Filter instances available to web applications.\npublic enum DefaultFilter extends Enum<DefaultFilter>;\n// Default FilterChainManager implementation maintaining a map of Filter instances (key: filter name, value: Filter) as well as a map of NamedFilterLists created from these Filters (key: filter chain name, value: NamedFilterList).\npublic class DefaultFilterChainManager extends Object implements FilterChainManager;\n// A FilterChainManager manages the creation and modification of Filter chains from an available pool of Filter instances.\npublic interface FilterChainManager;\n// A FilterChainResolver can resolve an appropriate FilterChain to execute during a ServletRequest.\npublic interface FilterChainResolver;\n// A NamedFilterList is a List of Filter instances that is uniquely identified by a name.\npublic interface NamedFilterList extends List<javax.servlet.Filter>;\n// A FilterChainResolver that resolves FilterChains based on url path matching, as determined by a configurable PathMatcher.\npublic class PathMatchingFilterChainResolver extends Object implements FilterChainResolver;\n// Simple NamedFilterList implementation that is supported by a backing List instance and a simple name property.\npublic class SimpleNamedFilterList extends Object implements NamedFilterList;\n", "des": "The filter 'mgt' (management) package contains components used in managing Filters that are available for filter chain construction, the filter chains themselves, as well as resolving filter chains based by name."}
{"index": 2627, "repo": "shiro-web-2.0.0-alpha-2", "code": "package mgt\n\n// Remembers a Subject's identity by saving the Subject's principals to a Cookie for later retrieval.\npublic class CookieRememberMeManager extends org.apache.shiro.mgt.AbstractRememberMeManager;\n// Default WebSecurityManager implementation used in web-based applications or any application that requires HTTP connectivity (SOAP, http remoting, etc.).\npublic class DefaultWebSecurityManager extends org.apache.shiro.mgt.DefaultSecurityManager implements WebSecurityManager;\n// A web-specific SessionStorageEvaluator that performs the same logic as the parent class DefaultSessionStorageEvaluator but additionally checks for a request-specific flag that may enable or disable session access.\npublic class DefaultWebSessionStorageEvaluator extends org.apache.shiro.mgt.DefaultSessionStorageEvaluator;\n// A SubjectFactory implementation that creates WebDelegatingSubject instances.\npublic class DefaultWebSubjectFactory extends org.apache.shiro.mgt.DefaultSubjectFactory;\n// This interface represents a SecurityManager implementation that can used in web-enabled applications.\npublic interface WebSecurityManager extends org.apache.shiro.mgt.SecurityManager;\n", "des": "Components supporting web-specific SecurityManager implementations."}
{"index": 2628, "repo": "shiro-web-2.0.0-alpha-2", "code": "package servlet\n\n// Base abstract Filter simplifying Filter initialization and access to init parameters.\npublic abstract class AbstractFilter extends ServletContextSupport implements javax.servlet.Filter;\n// Abstract base class that provides all standard Shiro request filtering behavior and expects subclasses to implement configuration-specific logic (INI, XML, .properties, etc.).\npublic abstract class AbstractShiroFilter extends OncePerRequestFilter;\n// A Servlet Filter that enables AOP-style \"around\" advice for a ServletRequest via preHandle, postHandle, and afterCompletion hooks.\npublic abstract class AdviceFilter extends OncePerRequestFilter;\n// Interface representing HTTP cookie operations, supporting pojo-style getters and setters for all attributes which includes HttpOnly support.\npublic interface Cookie;\n// The SameSite attribute of the Set-Cookie HTTP response header allows you to declare if your cookie should be restricted to a first-party or same-site context.\npublic static enum Cookie.SameSiteOptions extends Enum<Cookie.SameSiteOptions>;\n// \n@Deprecated public interface HttpSessionContext;\n// \n@Deprecated public class IniShiroFilter extends AbstractShiroFilter;\n// Allows a filter to be named via JavaBeans-compatible NameableFilter.getName()/NameableFilter.setName(String) methods.\npublic abstract class NameableFilter extends AbstractFilter implements org.apache.shiro.lang.util.Nameable;\n// Filter base class that guarantees to be just executed once per request, on any servlet container.\npublic abstract class OncePerRequestFilter extends NameableFilter;\n// A proxied filter chain is a FilterChain instance that proxies an original FilterChain as well as a List of other Filters that might need to execute prior to the final wrapped original chain.\npublic class ProxiedFilterChain extends Object implements javax.servlet.FilterChain;\n// Base implementation for any components that need to access the web application's ServletContext.\npublic class ServletContextSupport extends Object;\n// Primary Shiro Filter for web applications configuring Shiro via Servlet <listener> in web.xml.\npublic class ShiroFilter extends AbstractShiroFilter;\n", "des": "Shiro-specific implementations of the Servlet API (Servlet Filters, et al.)."}
{"index": 2629, "repo": "shiro-web-2.0.0-alpha-2", "code": "package session\n\n// Session implementation that is backed entirely by a standard servlet container HttpSession instance.\npublic class HttpServletSession extends Object implements org.apache.shiro.session.Session;\n", "des": "Components supporting Session management in web-enabled applications."}
{"index": 2630, "repo": "shiro-web-2.0.0-alpha-2", "code": "package subject\n\n// Supporting implementations of org.apache.shiro.web.subject package interfaces.\npackage subject.support\n// A WebSubject represents a Subject instance that was acquired as a result of an incoming ServletRequest.\npublic interface WebSubject extends org.apache.shiro.subject.Subject, RequestPairSource;\n// A WebSubject.Builder performs the same function as a Subject.Builder, but additionally ensures that the Servlet request/response pair that is triggering the Subject instance's creation is retained for use by internal Shiro components as necessary.\npublic static class WebSubject.Builder extends org.apache.shiro.subject.Subject.Builder;\n// A WebSubjectContext is a SubjectContext that additionally provides for type-safe methods to set and retrieve a ServletRequest and ServletResponse.\npublic interface WebSubjectContext extends org.apache.shiro.subject.SubjectContext, RequestPairSource;\n", "des": "Web-specific Subject interfaces to enable Subject use in web environments."}
{"index": 2631, "repo": "shiro-web-2.0.0-alpha-2", "code": "package support\n\n// Default WebSubjectContext implementation that provides for additional storage and retrieval of a ServletRequest and ServletResponse.\npublic class DefaultWebSubjectContext extends org.apache.shiro.subject.support.DefaultSubjectContext implements WebSubjectContext;\n// Default WebSubject implementation that additional ensures the ability to retain a servlet request/response pair to be used by internal shiro components as necessary during the request execution.\npublic class WebDelegatingSubject extends org.apache.shiro.subject.support.DelegatingSubject implements WebSubject;\n", "des": "Supporting implementations of org.apache.shiro.web.subject package interfaces."}
{"index": 2632, "repo": "shiro-web-2.0.0-alpha-2", "code": "package tags\n\n// JSP tag that renders the tag body only if the current user has executed a successful authentication attempt during their current session.\npublic class AuthenticatedTag extends SecureTag;\n// JSP tag that renders the tag body if the current user is not known to the system, either because they haven't logged in yet, or because they have no 'RememberMe' identity.\npublic class GuestTag extends SecureTag;\n// Displays body content if the current user has any of the roles specified.\npublic class HasAnyRolesTag extends RoleTag;\n// \npublic class HasPermissionTag extends PermissionTag;\n// \npublic class HasRoleTag extends RoleTag;\n// \npublic class LacksPermissionTag extends PermissionTag;\n// \npublic class LacksRoleTag extends RoleTag;\n// JSP tag that renders the tag body only if the current user has not executed a successful authentication attempt during their current session.\npublic class NotAuthenticatedTag extends SecureTag;\n// \npublic abstract class PermissionTag extends SecureTag;\n// Tag used to print out the String value of a user's default principal, or a specific principal as specified by the tag's attributes.\npublic class PrincipalTag extends SecureTag;\n// \npublic abstract class RoleTag extends SecureTag;\n// \npublic abstract class SecureTag extends javax.servlet.jsp.tagext.TagSupport;\n// JSP tag that renders the tag body if the current user known to the system, either from a successful login attempt (not necessarily during the current session) or from 'RememberMe' services.\npublic class UserTag extends SecureTag;\n", "des": "Provides the Shiro JSP Tag Library implementations."}
{"index": 2633, "repo": "spring-integration-sftp-6.1.2", "code": "package config\n\n// Parser for 'sftp:inbound-channel-adapter'\npublic class SftpInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileInboundChannelAdapterParser;\n// Provides namespace support for using SFTP.\npublic class SftpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n// Parser for SFTP Outbound Channel Adapters.\npublic class SftpOutboundChannelAdapterParser extends org.springframework.integration.file.config.RemoteFileOutboundChannelAdapterParser;\n// \npublic class SftpOutboundGatewayParser extends org.springframework.integration.file.config.AbstractRemoteFileOutboundGatewayParser;\n// \npublic class SftpStreamingInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileStreamingInboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2634, "repo": "spring-integration-sftp-6.1.2", "code": "package dsl\n\n// The factory for SFTP components.\npublic final class Sftp extends Object;\n// A RemoteFileInboundChannelAdapterSpec for an SftpInboundFileSynchronizingMessageSource.\npublic class SftpInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpInboundChannelAdapterSpec,SftpInboundFileSynchronizingMessageSource>;\n// \npublic class SftpMessageHandlerSpec extends org.springframework.integration.file.dsl.FileTransferringMessageHandlerSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpMessageHandlerSpec>;\n// \npublic class SftpOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpOutboundGatewaySpec>;\n// \npublic class SftpStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpStreamingInboundChannelAdapterSpec,SftpStreamingMessageSource>;\n", "des": "Provides SFTP Components for the Java DSL."}
{"index": 2635, "repo": "spring-integration-sftp-6.1.2", "code": "package filters\n\n// Persistent file list filter using the server's file timestamp to detect if we've already 'seen' this file.\npublic class SftpPersistentAcceptOnceFileListFilter extends org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n// Implementation of AbstractRegexPatternFileListFilter for SFTP.\npublic class SftpRegexPatternFileListFilter extends org.springframework.integration.file.filters.AbstractRegexPatternFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n// Implementation of AbstractSimplePatternFileListFilter for SFTP.\npublic class SftpSimplePatternFileListFilter extends org.springframework.integration.file.filters.AbstractSimplePatternFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n// SFTP implementation of AbstractMarkerFilePresentFileListFilter.\npublic class SftpSystemMarkerFilePresentFileListFilter extends org.springframework.integration.file.filters.AbstractMarkerFilePresentFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n", "des": "Provides classes supporting SFTP file filtering."}
{"index": 2636, "repo": "spring-integration-sftp-6.1.2", "code": "package gateway\n\n// Outbound Gateway for performing remote file operations via SFTP.\npublic class SftpOutboundGateway extends org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n", "des": "Provides classes supporting SFTP gateways."}
{"index": 2637, "repo": "spring-integration-sftp-6.1.2", "code": "package inbound\n\n// Handles the synchronization between a remote SFTP directory and a local mount.\npublic class SftpInboundFileSynchronizer extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n// A MessageSource implementation for SFTP that delegates to an InboundFileSynchronizer.\npublic class SftpInboundFileSynchronizingMessageSource extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n// Message source for streaming SFTP remote file contents.\npublic class SftpStreamingMessageSource extends org.springframework.integration.file.remote.AbstractRemoteFileStreamingMessageSource<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2638, "repo": "spring-integration-sftp-6.1.2", "code": "package outbound\n\n// Subclass of FileTransferringMessageHandler for SFTP.\npublic class SftpMessageHandler extends org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n", "des": "Provides classes for the SFTP outbound channel adapter."}
{"index": 2639, "repo": "spring-integration-sftp-6.1.2", "code": "package server\n\n// ApplicationEvent generated from Apache Mina sftp events.\npublic abstract class ApacheMinaSftpEvent extends org.springframework.integration.file.remote.server.FileServerEvent;\n// A listener for SFTP events emitted by an Apache Mina sshd/sftp server.\npublic class ApacheMinaSftpEventListener extends Object implements org.apache.sshd.sftp.server.SftpEventListener, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean;\n// An event emitted when a directory is created.\npublic class DirectoryCreatedEvent extends ApacheMinaSftpEvent;\n// An event that is emitted when a file is written.\npublic class FileWrittenEvent extends ApacheMinaSftpEvent;\n// An event emitted when a path is moved.\npublic class PathMovedEvent extends ApacheMinaSftpEvent;\n// An event emitted when a file or directory is removed.\npublic class PathRemovedEvent extends ApacheMinaSftpEvent;\n// An event emitted when a session is closed.\npublic class SessionClosedEvent extends ApacheMinaSftpEvent;\n// An event emitted when a session is opened.\npublic class SessionOpenedEvent extends ApacheMinaSftpEvent;\n", "des": "Provides classes related to SFTP servers."}
{"index": 2640, "repo": "spring-integration-sftp-6.1.2", "code": "package session\n\n// Factory for creating SftpSession instances.\npublic class DefaultSftpSessionFactory extends Object implements org.springframework.integration.file.remote.session.SessionFactory<org.apache.sshd.sftp.client.SftpClient.DirEntry>, org.springframework.integration.file.remote.session.SharedSessionCapable;\n// A ServerKeyVerifier implementation for a Resource abstraction.\npublic class ResourceKnownHostsServerKeyVerifier extends Object implements org.apache.sshd.client.keyverifier.ServerKeyVerifier;\n// A FileInfo implementation for SFTP.\npublic class SftpFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n// SFTP version of RemoteFileTemplate providing type-safe access to the underlying ChannelSftp object.\npublic class SftpRemoteFileTemplate extends org.springframework.integration.file.remote.RemoteFileTemplate<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n// Default SFTP Session implementation.\npublic class SftpSession extends Object implements org.springframework.integration.file.remote.session.Session<org.apache.sshd.sftp.client.SftpClient.DirEntry>;\n", "des": "Provides classes supporting SFTP sessions."}
{"index": 2641, "repo": "spring-data-cassandra-4.1.2", "code": "package cassandra\n\n// Spring Data Cassandra factory beans and configuration.\npackage cassandra.config\n// Apache Cassandra core support.\npackage cassandra.core\n// Infrastructure to provide driver observability using Micrometer.\npackage cassandra.observability\n// Apache Cassandra specific repository implementation.\npackage cassandra.repository\n// Map and SpEL utility infrastructure.\npackage cassandra.util\n// Spring data access exception for a Cassandra authentication failure.\npublic class CassandraAuthenticationException extends PermissionDeniedDataAccessException;\n// Spring data access exception for Cassandra when no host is available.\npublic class CassandraConnectionFailureException extends DataAccessResourceFailureException;\n// Spring data access exception for Cassandra when insufficient replicas are available for a given consistency level.\npublic class CassandraInsufficientReplicasAvailableException extends TransientDataAccessException;\n// Spring data access exception for a Cassandra internal error.\npublic class CassandraInternalException extends DataAccessException;\n// Spring data access exception for a Cassandra query that is syntactically correct but has an invalid configuration clause.\npublic class CassandraInvalidConfigurationInQueryException extends InvalidDataAccessApiUsageException;\n// Spring data access exception for a Cassandra query that's syntactically correct but invalid.\npublic class CassandraInvalidQueryException extends InvalidDataAccessApiUsageException;\n// Spring data access exception for Cassandra when a keyspace being created already exists.\npublic class CassandraKeyspaceExistsException extends CassandraSchemaElementExistsException;\n// Cassandra-specific extension to ManagedTypes.\npublic final class CassandraManagedTypes extends Object implements ManagedTypes;\n// Spring data access exception for a Cassandra query syntax error.\npublic class CassandraQuerySyntaxException extends InvalidDataAccessApiUsageException;\n// Cassandra-specific exception for a server-side timeout during a read query.\npublic class CassandraReadTimeoutException extends QueryTimeoutException;\n// Spring data access exception for when Cassandra schema element being created already exists.\npublic class CassandraSchemaElementExistsException extends NonTransientDataAccessException;\n// \n@Deprecated public static enum CassandraSchemaElementExistsException.ElementType extends Enum<CassandraSchemaElementExistsException.ElementType>;\n// Spring data access exception for when a Cassandra table being created already exists.\npublic class CassandraTableExistsException extends CassandraSchemaElementExistsException;\n// Spring data access exception for a Cassandra trace retrieval exception.\npublic class CassandraTraceRetrievalException extends TransientDataAccessException;\n// Spring data access exception for a Cassandra truncate exception.\npublic class CassandraTruncateException extends TransientDataAccessException;\n", "des": "Spring Data's Cassandra abstraction."}
{"index": 2642, "repo": "spring-data-cassandra-4.1.2", "code": "package config\n\n// Base class for Spring Data Cassandra configuration using JavaConfig.\n@Configuration public abstract class AbstractCassandraConfiguration extends AbstractSessionConfiguration implements BeanClassLoaderAware;\n// \n@Deprecated public abstract class AbstractCqlTemplateConfiguration extends AbstractSessionConfiguration;\n// Extension to AbstractCassandraConfiguration providing Spring Data Cassandra configuration for Spring Data's Reactive Cassandra support using JavaConfig.\npublic abstract class AbstractReactiveCassandraConfiguration extends AbstractCassandraConfiguration;\n// Spring Configuration class used to configure a Cassandra client application CqlSession connected to a Cassandra cluster.\n@Configuration public abstract class AbstractSessionConfiguration extends Object implements BeanFactoryAware;\n// BeanDefinitionParser to register a AuditingEntityCallback to transparently set auditing information on an entity.\npublic class CassandraAuditingBeanDefinitionParser extends AbstractSingleBeanDefinitionParser;\n// \n@Deprecated public class CassandraCqlSessionFactoryBean extends CqlSessionFactoryBean;\n// Factory for configuring a CqlTemplate.\npublic class CassandraCqlTemplateFactoryBean extends Object implements FactoryBean<CqlTemplate>, InitializingBean;\n// Scans packages for Cassandra entities.\npublic class CassandraEntityClassScanner extends Object;\n// Namespace handler for spring-data-cassandra.\npublic class CassandraNamespaceHandler extends NamespaceHandlerSupport;\n// \n@Deprecated public class CassandraSessionFactoryBean extends CqlSessionFactoryBean;\n// Factory for configuring a CassandraTemplate.\npublic class CassandraTemplateFactoryBean extends Object implements FactoryBean<CassandraTemplate>, InitializingBean;\n// Simple enumeration for the various compression types.\npublic enum CompressionType extends Enum<CompressionType>;\n// Namespace handler for spring-cassandra.\npublic class CqlNamespaceHandler extends NamespaceHandlerSupport;\n// Factory for creating and configuring a Cassandra CqlSession, which is a thread-safe singleton.\npublic class CqlSessionFactoryBean extends Object implements FactoryBean<com.datastax.oss.driver.api.core.CqlSession>, InitializingBean, DisposableBean, PersistenceExceptionTranslator;\n// \npublic interface DefaultBeanNames extends DefaultCqlBeanNames;\n// \npublic interface DefaultCqlBeanNames;\n// Callback interface that can be implemented by beans wishing to customize the ProgrammaticDriverConfigLoaderBuilder via a DriverConfigLoaderBuilderConfigurer whilst retaining default configuration.\npublic interface DriverConfigLoaderBuilderConfigurer;\n", "des": "Spring Data Cassandra factory beans and configuration."}
{"index": 2643, "repo": "spring-data-cassandra-4.1.2", "code": "package core\n\n// Spring Data Cassandra specific converter infrastructure.\npackage core.convert\n// CQL core support.\npackage core.cql\n// Apache Cassandra legacy asynchronous support for easier migration.\npackage core.legacy\n// Infrastructure for the Apache Cassandra row-to-object mapping subsystem.\npackage core.mapping\n// Apache Cassandra specific query and update support.\npackage core.query\n// Interface specifying a basic set of asynchronous Cassandra operations.\npublic interface AsyncCassandraOperations;\n// Primary implementation of AsyncCassandraOperations.\npublic class AsyncCassandraTemplate extends Object implements AsyncCassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware;\n// General callback interface used to create and bind prepared CQL statements.\npublic static interface AsyncCassandraTemplate.AsyncPreparedStatementHandler extends AsyncPreparedStatementCreator, PreparedStatementBinder, CqlProvider;\n// Operations for managing a Cassandra keyspace.\npublic interface CassandraAdminOperations extends CassandraOperations;\n// Default implementation of CassandraAdminOperations.\npublic class CassandraAdminTemplate extends CassandraTemplate implements CassandraAdminOperations;\n// Batch operations for insert/update/delete actions on a table.\npublic interface CassandraBatchOperations;\n// Interface specifying a basic set of Cassandra operations.\npublic interface CassandraOperations extends FluentCassandraOperations;\n// Schema creation support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity.\npublic class CassandraPersistentEntitySchemaCreator extends Object;\n// Schema drop support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity.\npublic class CassandraPersistentEntitySchemaDropper extends Object;\n// Primary implementation of CassandraOperations.\npublic class CassandraTemplate extends Object implements CassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware;\n// Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement.\npublic static class CassandraTemplate.PreparedStatementHandler extends Object implements PreparedStatementCreator, PreparedStatementBinder, CqlProvider;\n// Extension to WriteOptions for use with DELETE operations.\npublic class DeleteOptions extends WriteOptions;\n// Builder for DeleteOptions.\npublic static class DeleteOptions.DeleteOptionsBuilder extends WriteOptions.WriteOptionsBuilder;\n// The result of a write operation for an entity.\npublic class EntityWriteResult<T> extends WriteResult;\n// ExecutableDeleteOperation allows creation and execution of Cassandra DELETE operations in a fluent API style.\npublic interface ExecutableDeleteOperation;\n// Filtering (optional).\npublic static interface ExecutableDeleteOperation.DeleteWithQuery;\n", "des": "Apache Cassandra core support."}
{"index": 2644, "repo": "spring-data-cassandra-4.1.2", "code": "package convert\n\n// Base class for CassandraConverter implementations.\npublic abstract class AbstractCassandraConverter extends Object implements CassandraConverter, InitializingBean;\n// \n@Deprecated public class BasicCassandraRowValueProvider extends RowValueProvider;\n// Descriptor for a Cassandra column type exposing a DataType.\npublic interface CassandraColumnType extends ColumnType;\n// Central Cassandra specific converter interface from Object to Row.\npublic interface CassandraConverter extends EntityConverter<CassandraPersistentEntity<?>,CassandraPersistentProperty,Object,Object>;\n// Value object to capture custom conversion.\npublic class CassandraCustomConversions extends CustomConversions;\n// Helper class to register JodaTime specific Converter implementations in case the library is present on the classpath.\npublic abstract class CassandraJsr310Converters extends Object;\n// Simple singleton to convert Dates to their Cassandra Instant representation for the CQL Timestamp type.\n@WritingConverter public static enum CassandraJsr310Converters.DateToInstantConverter extends Enum<CassandraJsr310Converters.DateToInstantConverter> implements Converter<Date,Instant>;\n// \n@ReadingConverter public static enum CassandraJsr310Converters.InstantToDateConverter extends Enum<CassandraJsr310Converters.InstantToDateConverter> implements Converter<Instant,Date>;\n// Simple singleton to convert LocalTimes to their Long representation.\n@ReadingConverter public static enum CassandraJsr310Converters.LocalTimeToMillisOfDayConverter extends Enum<CassandraJsr310Converters.LocalTimeToMillisOfDayConverter> implements Converter<LocalTime,Long>;\n// Simple singleton to convert Longs to their LocalTime representation.\n@ReadingConverter public static enum CassandraJsr310Converters.MillisOfDayToLocalTimeConverter extends Enum<CassandraJsr310Converters.MillisOfDayToLocalTimeConverter> implements Converter<Long,LocalTime>;\n// CassandraValueProvider providing values based on a Row.\npublic interface CassandraRowValueProvider extends CassandraValueProvider;\n// \n@Deprecated public class CassandraTupleValueProvider extends TupleValueProvider;\n// \n@Deprecated public class CassandraUDTValueProvider extends UdtValueProvider;\n// PropertyValueProvider for CassandraPersistentProperty.\npublic interface CassandraValueProvider extends PropertyValueProvider<CassandraPersistentProperty>;\n// Interface to access column type information.\npublic interface ColumnType;\n// Resolves ColumnType for properties, TypeInformation, and values.\npublic interface ColumnTypeResolver;\n", "des": "Spring Data Cassandra specific converter infrastructure."}
{"index": 2645, "repo": "spring-data-cassandra-4.1.2", "code": "package cql\n\n// CQL specific converters.\npackage cql.converter\n// CQL generators for Keyspace object actions.\npackage cql.generator\n// Keyspace object action specifications such as CREATE TABLE, DROP INDEX.\npackage cql.keyspace\n// CQL legacy core asynchronous support for easier migration.\npackage cql.legacy\n// Provides utility classes for simple CqlSession access and various session implementations.\npackage cql.session\n// Support classes for the CQL framework.\npackage cql.support\n// Utility classes for basic CQL interaction.\npackage cql.util\n// Simple adapter for PreparedStatementBinder that applies a given array of arguments.\npublic class ArgumentPreparedStatementBinder extends Object implements PreparedStatementBinder;\n// Interface specifying a basic set of CQL asynchronously executed operations.\npublic interface AsyncCqlOperations;\n// This is the central class in the CQL core package for asynchronous Cassandra data access. It simplifies the use of CQL and helps to avoid common errors.\npublic class AsyncCqlTemplate extends CassandraAccessor implements AsyncCqlOperations;\n// Adapter to enable use of a RowCallbackHandler inside a ResultSetExtractor.\nprotected static class AsyncCqlTemplate.AsyncRowCallbackHandlerResultSetExtractor extends Object implements AsyncResultSetExtractor<Void>;\n// One of the two central callback interfaces used by the AsyncCqlTemplate class.\n@FunctionalInterface public interface AsyncPreparedStatementCreator;\n// Callback interface used by AsyncCqlTemplate's query methods.\n@FunctionalInterface public interface AsyncResultSetExtractor<T>;\n// Adapter implementation of the ResultSetExtractor interface that delegates to a RowMapper which is supposed to create an object for each row.\npublic class AsyncRowMapperResultSetExtractor<T> extends Object implements AsyncResultSetExtractor<List<T>>;\n// Generic callback interface for code that operates asynchronously on a Cassandra CqlSession.\n@FunctionalInterface public interface AsyncSessionCallback<T>;\n// RowMapper implementation that converts a Row into a new instance of the specified mapped target class.\npublic class BeanPropertyRowMapper<T> extends Object implements RowMapper<T>;\n// \n@Deprecated public class CachedPreparedStatementCreator extends Object implements PreparedStatementCreator;\n// CassandraAccessor provides access to a Cassandra SessionFactory and the CassandraExceptionTranslator.\npublic class CassandraAccessor extends Object implements InitializingBean;\n// Simple PersistenceExceptionTranslator for Cassandra.\npublic class CassandraExceptionTranslator extends Object implements CqlExceptionTranslator;\n", "des": "CQL core support."}
{"index": 2646, "repo": "spring-data-cassandra-4.1.2", "code": "package converter\n\n// Convenient converter that can be used to convert a single-row-single-column, single-row-multi-column, or multi-row ResultSet into the given value of a given type.\npublic abstract class AbstractResultSetConverter<T> extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,T>;\n// Thin wrapper that allows subclasses to delegate conversion of the given value to a DefaultConversionService.\npublic abstract class AbstractResultSetToBasicFixedTypeConverter<T> extends AbstractResultSetConverter<T>;\n// Converter from ResultSet to Object array.\npublic class ResultSetToArrayConverter extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,Object[]>;\n// Converter from ResultSet to a single BigDecimal value.\npublic class ResultSetToBigDecimalConverter extends AbstractResultSetToBasicFixedTypeConverter<BigDecimal>;\n// Converter from ResultSet to a single BigInteger value.\npublic class ResultSetToBigIntegerConverter extends AbstractResultSetToBasicFixedTypeConverter<BigInteger>;\n// Converter from ResultSet to a single Boolean value.\npublic class ResultSetToBooleanConverter extends AbstractResultSetToBasicFixedTypeConverter<Boolean>;\n// Converter from ResultSet to a single ByteBuffer value.\npublic class ResultSetToByteBufferConverter extends AbstractResultSetConverter<ByteBuffer>;\n// Converter from ResultSet to a single Date value.\npublic class ResultSetToDateConverter extends AbstractResultSetToBasicFixedTypeConverter<Date>;\n// Converter from ResultSet to a single Double value.\npublic class ResultSetToDoubleConverter extends AbstractResultSetToBasicFixedTypeConverter<Double>;\n// Converter from ResultSet to a single Float value.\npublic class ResultSetToFloatConverter extends AbstractResultSetToBasicFixedTypeConverter<Float>;\n// Converter from ResultSet to a single InetAddress value.\npublic class ResultSetToInetAddressConverter extends AbstractResultSetToBasicFixedTypeConverter<InetAddress>;\n// Converter from ResultSet to a single Integer value.\npublic class ResultSetToIntegerConverter extends AbstractResultSetToBasicFixedTypeConverter<Integer>;\n// Converter from ResultSet to Map.\npublic class ResultSetToListConverter extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,List<Map<String,Object>>>;\n", "des": "CQL specific converters."}
{"index": 2647, "repo": "spring-data-cassandra-4.1.2", "code": "package generator\n\n// CQL generator for generating an ADD clause of an ALTER TABLE statement.\npublic class AddColumnCqlGenerator extends ColumnChangeCqlGenerator<AddColumnSpecification>;\n// CQL generator for generating an ALTER column clause of an ALTER TABLE statement.\npublic class AlterColumnCqlGenerator extends ColumnChangeCqlGenerator<AlterColumnSpecification>;\n// CQL generator for generating ALTER TABLE statements.\npublic class AlterKeyspaceCqlGenerator extends KeyspaceOptionsCqlGenerator<AlterKeyspaceSpecification>;\n// CQL generator for generating ALTER TABLE statements.\npublic class AlterTableCqlGenerator extends TableOptionsCqlGenerator<AlterTableSpecification>;\n// CQL generator for generating ALTER TYPE statements.\npublic class AlterUserTypeCqlGenerator extends UserTypeNameCqlGenerator<AlterUserTypeSpecification>;\n// Base class for column change CQL generators.\npublic abstract class ColumnChangeCqlGenerator<T extends ColumnChangeSpecification> extends Object;\n// CQL generator for generating a CREATE INDEX statement.\npublic class CreateIndexCqlGenerator extends IndexNameCqlGenerator<CreateIndexSpecification>;\n// CQL generator for generating a CREATE TABLE statement.\npublic class CreateKeyspaceCqlGenerator extends KeyspaceOptionsCqlGenerator<CreateKeyspaceSpecification>;\n// CQL generator for generating a CREATE TABLE statement.\npublic class CreateTableCqlGenerator extends TableOptionsCqlGenerator<TableSpecification<CreateTableSpecification>>;\n// CQL generator for generating a CREATE TYPE statement.\npublic class CreateUserTypeCqlGenerator extends UserTypeNameCqlGenerator<CreateUserTypeSpecification>;\n// CQL generator for generating a DROP column clause of an ALTER TABLE statement.\npublic class DropColumnCqlGenerator extends ColumnChangeCqlGenerator<DropColumnSpecification>;\n// CQL generator for generating a DROP INDEX statement.\npublic class DropIndexCqlGenerator extends IndexNameCqlGenerator<DropIndexSpecification>;\n// CQL generator for generating a DROP TABLE statement.\npublic class DropKeyspaceCqlGenerator extends KeyspaceNameCqlGenerator<DropKeyspaceSpecification>;\n// CQL generator for generating a DROP TABLE statement.\npublic class DropTableCqlGenerator extends TableNameCqlGenerator<DropTableSpecification>;\n// CQL generator for generating a DROP TYPE statement.\npublic class DropUserTypeCqlGenerator extends UserTypeNameCqlGenerator<DropUserTypeSpecification>;\n", "des": "CQL generators for Keyspace object actions."}
{"index": 2648, "repo": "spring-data-cassandra-4.1.2", "code": "package keyspace\n\n// Value object representing a specification to add a column.\npublic class AddColumnSpecification extends ColumnTypeChangeSpecification;\n// Value object representing a specification to alter a column.\npublic class AlterColumnSpecification extends ColumnTypeChangeSpecification;\n// Object to configure a ALTER KEYSPACE specification.\npublic class AlterKeyspaceSpecification extends KeyspaceOptionsSpecification<AlterKeyspaceSpecification>;\n// Object to configure a ALTER TABLE specification.\npublic class AlterTableSpecification extends TableOptionsSpecification<AlterTableSpecification>;\n// Object to configure a ALTER TYPE specification.\npublic class AlterUserTypeSpecification extends UserTypeNameSpecification;\n// Base value object class for column change specifications.\npublic abstract class ColumnChangeSpecification extends Object;\n// Object to configure a CQL column specification.\npublic class ColumnSpecification extends Object;\n// Base value object class for column changes that include DataType information.\npublic abstract class ColumnTypeChangeSpecification extends ColumnChangeSpecification;\n// \npublic class CqlStringUtils extends Object;\n// Object to configure a CREATE INDEX specification.\npublic class CreateIndexSpecification extends IndexNameSpecification<CreateIndexSpecification> implements IndexDescriptor;\n// Column functions to specify indexing behavior.\npublic static enum CreateIndexSpecification.ColumnFunction extends Enum<CreateIndexSpecification.ColumnFunction>;\n// Object to configure a CREATE KEYSPACE specification.\npublic class CreateKeyspaceSpecification extends KeyspaceOptionsSpecification<CreateKeyspaceSpecification> implements KeyspaceDescriptor;\n// Object to configure a CREATE TABLE specification.\npublic class CreateTableSpecification extends TableSpecification<CreateTableSpecification>;\n// Object to configure a CREATE TYPE specification.\npublic class CreateUserTypeSpecification extends UserTypeSpecification<CreateUserTypeSpecification>;\n// Value object representing replication factor for a given data center.\npublic class DataCenterReplication extends Object;\n// A default implementation of Option.\npublic class DefaultOption extends Object implements Option;\n// Value object representing a specification to drop a column.\npublic class DropColumnSpecification extends ColumnChangeSpecification;\n// Value object representing a DROP INDEX specification.\npublic class DropIndexSpecification extends IndexNameSpecification<DropIndexSpecification>;\n// Object to configure a DROP KEYSPACE specification.\npublic class DropKeyspaceSpecification extends KeyspaceActionSpecification;\n// Object to configure a DROP TABLE specification.\npublic class DropTableSpecification extends TableNameSpecification;\n// Object to configure a DROP TYPE specification.\npublic class DropUserTypeSpecification extends UserTypeNameSpecification;\n", "des": "Keyspace object action specifications such as CREATE TABLE, DROP INDEX."}
{"index": 2649, "repo": "spring-data-cassandra-4.1.2", "code": "package legacy\n\n// \n@Deprecated(since=\"4.0\", forRemoval=true) public interface AsyncCqlOperations;\n// \n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncCqlTemplate extends CassandraAccessor implements AsyncCqlOperations;\n// Adapter to enable use of a RowCallbackHandler inside a ResultSetExtractor.\nprotected static class AsyncCqlTemplate.AsyncRowCallbackHandlerResultSetExtractor extends Object implements AsyncResultSetExtractor<Void>;\n// \n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncPreparedStatementCreator;\n// \n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncResultSetExtractor<T>;\n// \n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncRowMapperResultSetExtractor<T> extends Object implements AsyncResultSetExtractor<List<T>>;\n// \n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncSessionCallback<T>;\n", "des": "CQL legacy core asynchronous support for easier migration."}
{"index": 2650, "repo": "spring-data-cassandra-4.1.2", "code": "package session\n\n// Provides extensible support for initializing databases through scripts.\npackage session.init\n// Provides a strategy for looking up SessionFactory.\npackage session.lookup\n// Default implementation of a ReactiveSession.\npublic class DefaultBridgedReactiveSession extends Object implements ReactiveSession;\n// Default implementation of ReactiveSessionFactory.\npublic class DefaultReactiveSessionFactory extends Object implements ReactiveSessionFactory;\n// Default SessionFactory implementation.\npublic class DefaultSessionFactory extends Object implements SessionFactory;\n", "des": "Provides utility classes for simple CqlSession access and various session implementations."}
{"index": 2651, "repo": "spring-data-cassandra-4.1.2", "code": "package init\n\n// Thrown by ScriptUtils if a CQL script cannot be read.\npublic class CannotReadScriptException extends ScriptException;\n// Composite KeyspacePopulator that delegates to a list of given KeyspacePopulator implementations, executing all scripts.\npublic class CompositeKeyspacePopulator extends Object implements KeyspacePopulator;\n// Strategy used to populate, initialize, or clean up a Cassandra keyspace.\n@FunctionalInterface public interface KeyspacePopulator;\n// Populates, initializes, or cleans up a keyspace using CQL scripts defined in external resources.\npublic class ResourceKeyspacePopulator extends Object implements KeyspacePopulator;\n// Root of the hierarchy of data access exceptions that are related to processing of CQL scripts.\npublic abstract class ScriptException extends DataAccessException;\n// Thrown by ScriptUtils if a CQL script cannot be properly parsed.\npublic class ScriptParseException extends ScriptException;\n// Thrown by ScriptUtils if a statement in an CQL script failed when executing it against the target database.\npublic class ScriptStatementFailedException extends ScriptException;\n// Generic utility methods for working with CQL scripts.\npublic abstract class ScriptUtils extends Object;\n// Used to set up a keyspace during initialization and clean up a keyspace during destruction.\npublic class SessionFactoryInitializer extends Object implements InitializingBean, DisposableBean;\n// Thrown when we cannot determine anything more specific than \"something went wrong while processing a CQL script\": for example, a Exception from Cassandra that we cannot pinpoint more precisely.\npublic class UncategorizedScriptException extends ScriptException;\n", "des": "Provides extensible support for initializing databases through scripts."}
{"index": 2652, "repo": "spring-data-cassandra-4.1.2", "code": "package lookup\n\n// Abstract SessionFactory implementation that routes AbstractRoutingSessionFactory.getSession() calls to one of various target factories based on a lookup key.\npublic abstract class AbstractRoutingSessionFactory extends Object implements SessionFactory, InitializingBean;\n// SessionFactoryLookup implementation based on a Spring BeanFactory.\npublic class BeanFactorySessionFactoryLookup extends Object implements SessionFactoryLookup, BeanFactoryAware;\n// Simple SessionFactoryLookup implementation that relies on a map for doing lookups.\npublic class MapSessionFactoryLookup extends Object implements SessionFactoryLookup;\n// Strategy interface for looking up SessionFactory by name.\n@FunctionalInterface public interface SessionFactoryLookup;\n// Exception to be thrown by a SessionFactoryLookup implementation, indicating that the specified SessionFactory could not be obtained.\npublic class SessionFactoryLookupFailureException extends NonTransientDataAccessException;\n// An implementation of SessionFactoryLookup that simply wraps a single given SessionFactory, returned for any session factory name.\npublic class SingleSessionFactoryLookup extends Object implements SessionFactoryLookup;\n", "des": "Provides a strategy for looking up SessionFactory."}
{"index": 2653, "repo": "spring-data-cassandra-4.1.2", "code": "package support\n\n// \n@Deprecated public class CachedPreparedStatementCreator extends Object implements PreparedStatementCreator;\n// \n@Deprecated public class MapPreparedStatementCache extends Object implements PreparedStatementCache;\n// MapPreparedStatementCache.CacheKey for PreparedStatement caching.\nprotected static class MapPreparedStatementCache.CacheKey extends Object;\n// \n@Deprecated public interface PreparedStatementCache;\n", "des": "Support classes for the CQL framework."}
{"index": 2654, "repo": "spring-data-cassandra-4.1.2", "code": "package util\n\n// \n@Deprecated public class CassandraFutureAdapter<T> extends Object implements ListenableFuture<T>;\n// Functional builder for Cassandra statements.\npublic class StatementBuilder<S extends com.datastax.oss.driver.api.querybuilder.BuildableQuery> extends Object;\n// Binding function.\n@FunctionalInterface public static interface StatementBuilder.BindFunction<S>;\n// Enumeration to represent how parameters are rendered.\npublic static enum StatementBuilder.ParameterHandling extends Enum<StatementBuilder.ParameterHandling>;\n// Factory for Term objects encapsulating a binding value.\n@FunctionalInterface public interface TermFactory;\n", "des": "Utility classes for basic CQL interaction."}
{"index": 2655, "repo": "spring-data-cassandra-4.1.2", "code": "package legacy\n\n// \n@Deprecated(since=\"4.0\", forRemoval=true) public interface AsyncCassandraOperations;\n// \n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncCassandraTemplate extends Object implements AsyncCassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware;\n// General callback interface used to create and bind prepared CQL statements.\npublic static interface AsyncCassandraTemplate.AsyncPreparedStatementHandler extends AsyncPreparedStatementCreator, PreparedStatementBinder, CqlProvider;\n// Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement.\npublic static class AsyncCassandraTemplate.PreparedStatementHandler extends Object implements AsyncCassandraTemplate.AsyncPreparedStatementHandler;\n", "des": "Apache Cassandra legacy asynchronous support for easier migration."}
{"index": 2656, "repo": "spring-data-cassandra-4.1.2", "code": "package mapping\n\n// Event callback infrastructure for Cassandra mapping subsystem.\npackage mapping.event\n// \n@Deprecated public class BasicCassandraMappingContext extends CassandraMappingContext;\n// Cassandra specific BasicPersistentEntity implementation that adds Cassandra specific metadata.\npublic class BasicCassandraPersistentEntity<T> extends BasicPersistentEntity<T,CassandraPersistentProperty> implements CassandraPersistentEntity<T>, ApplicationContextAware;\n// Default implementation for Cassandra Persistent Entity Verification.\npublic class BasicCassandraPersistentEntityMetadataVerifier extends Object implements CassandraPersistentEntityMetadataVerifier;\n// Cassandra specific AnnotationBasedPersistentProperty implementation.\npublic class BasicCassandraPersistentProperty extends AnnotationBasedPersistentProperty<CassandraPersistentProperty> implements CassandraPersistentProperty, ApplicationContextAware;\n// Cassandra Tuple-specific PersistentEntity for a mapped tuples.\npublic class BasicCassandraPersistentTupleEntity<T> extends BasicCassandraPersistentEntity<T>;\n// Cassandra Tuple specific CassandraPersistentProperty implementation.\npublic class BasicCassandraPersistentTupleProperty extends BasicCassandraPersistentProperty;\n// Simple implementation of MapId.\npublic class BasicMapId extends Object implements MapId;\n// BasicCassandraPersistentProperty that pre-computes primary key and embedded flags.\npublic class CachingCassandraPersistentProperty extends BasicCassandraPersistentProperty;\n// \n@Deprecated public enum CassandraColumnAnnotationComparator extends Enum<CassandraColumnAnnotationComparator> implements Comparator<Column>;\n// Default implementation of a MappingContext for Cassandra using CassandraPersistentEntity and CassandraPersistentProperty as primary abstractions.\npublic class CassandraMappingContext extends AbstractMappingContext<BasicCassandraPersistentEntity<?>,CassandraPersistentProperty> implements ApplicationContextAware, BeanClassLoaderAware;\n// Cassandra specific PersistentEntity abstraction.\npublic interface CassandraPersistentEntity<T> extends PersistentEntity<T,CassandraPersistentProperty>;\n// Interface for Cassandra Persistent Entity Mapping Verification.\n@FunctionalInterface public interface CassandraPersistentEntityMetadataVerifier;\n// Cassandra specific PersistentProperty extension.\npublic interface CassandraPersistentProperty extends PersistentProperty<CassandraPersistentProperty>, ApplicationContextAware;\n// Comparator implementation that orders CassandraPersistentProperty instances.\npublic enum CassandraPersistentPropertyComparator extends Enum<CassandraPersistentPropertyComparator> implements Comparator<CassandraPersistentProperty>;\n// Comparator implementation that uses, in order, the...\npublic enum CassandraPrimaryKeyColumnAnnotationComparator extends Enum<CassandraPrimaryKeyColumnAnnotationComparator> implements Comparator<PrimaryKeyColumn>;\n", "des": "Infrastructure for the Apache Cassandra row-to-object mapping subsystem."}
{"index": 2657, "repo": "spring-data-cassandra-4.1.2", "code": "package event\n\n// Base class to implement domain specific ApplicationListeners for CassandraMappingEvent.\npublic abstract class AbstractCassandraEventListener<E> extends Object implements ApplicationListener<CassandraMappingEvent<?>>;\n// Base class for delete events.\npublic class AbstractDeleteEvent<T> extends AbstractStatementAwareMappingEvent<com.datastax.oss.driver.api.core.cql.Statement<?>>;\n// Event encapsulating Cassandra CQL statement.\npublic abstract class AbstractStatementAwareMappingEvent<T> extends CassandraMappingEvent<T>;\n// Event to be triggered after converting a Row.\npublic class AfterConvertEvent<E> extends CassandraMappingEvent<E>;\n// Event being thrown after a single or a set of rows has/have been deleted.\npublic class AfterDeleteEvent<T> extends AbstractDeleteEvent<T>;\n// Event to be triggered after loading Rows to be mapped onto a given type.\npublic class AfterLoadEvent<T> extends CassandraMappingEvent<com.datastax.oss.driver.api.core.cql.Row>;\n// CassandraMappingEvent triggered after save of an object.\npublic class AfterSaveEvent<E> extends CassandraMappingEvent<E>;\n// EntityCallback to populate auditing related fields on an entity about to be saved.\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered;\n// Callback being invoked before a domain object is converted to be persisted.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>;\n// Event thrown before a row or a set of rows is deleted.\npublic class BeforeDeleteEvent<T> extends AbstractDeleteEvent<T>;\n// Entity callback triggered before save of a row.\n@FunctionalInterface public interface BeforeSaveCallback<T> extends EntityCallback<T>;\n// CassandraMappingEvent triggered before save of an object.\npublic class BeforeSaveEvent<E> extends AbstractStatementAwareMappingEvent<E>;\n// Base ApplicationEvent triggered by Spring Data Cassandra.\npublic class CassandraMappingEvent<T> extends ApplicationEvent;\n// Reactive EntityCallback to populate auditing related fields on an entity about to be saved.\npublic class ReactiveAuditingEntityCallback extends Object implements ReactiveBeforeConvertCallback<Object>, Ordered;\n", "des": "Event callback infrastructure for Cassandra mapping subsystem."}
{"index": 2658, "repo": "spring-data-cassandra-4.1.2", "code": "package query\n\n// Cassandra-specific PageRequest implementation providing access to paging state.\npublic class CassandraPageRequest extends PageRequest;\n// Value object representing a column name.\npublic abstract class ColumnName extends Object;\n// Value object to abstract column names involved in a CQL query.\npublic class Columns extends Object implements Iterable<ColumnName>;\n// Column selection.\npublic static class Columns.ColumnSelector extends Object implements Columns.Selector;\n// Function call selector with alias support.\npublic static class Columns.FunctionCall extends Object implements Columns.Selector;\n// Strategy interface to render a column selection.\npublic static interface Columns.Selector;\n// Basic class for creating queries.\npublic class Criteria extends Object implements CriteriaDefinition;\n// Criteria definition for a ColumnName exposing a CriteriaDefinition.Predicate.\npublic interface CriteriaDefinition;\n// Strategy interface to represent a CQL predicate operator.\npublic static interface CriteriaDefinition.Operator;\n// Commonly used CQL operators.\npublic static enum CriteriaDefinition.Operators extends Enum<CriteriaDefinition.Operators> implements CriteriaDefinition.Operator;\n// Represents an operator associated with its value.\npublic static class CriteriaDefinition.Predicate extends Object;\n// Filter consisting of CriteriaDefinitions to be used with SELECT, UPDATE and DELETE queries.\n@FunctionalInterface public interface Filter extends Streamable<CriteriaDefinition>;\n// Query object representing CriteriaDefinitions, Columns, Sort, paging state and QueryOptions for a CQL query.\npublic class Query extends Object implements Filter;\n// Update object representing a set of update operations.\npublic class Update extends Object;\n// Builder to add a single element/multiple elements to a collection associated with a ColumnName.\npublic static interface Update.AddToBuilder;\n// Add element(s) to Map operation.\npublic static class Update.AddToMapOp extends Update.AssignmentOp;\n// Add element(s) to collection operation.\npublic static class Update.AddToOp extends Update.AssignmentOp;\n// \npublic static enum Update.AddToOp.Mode extends Enum<Update.AddToOp.Mode>;\n// Abstract class for an update assignment related to a specific ColumnName.\npublic abstract static class Update.AssignmentOp extends Object;\n// Increment operation.\npublic static class Update.IncrOp extends Update.AssignmentOp;\n", "des": "Apache Cassandra specific query and update support."}
{"index": 2659, "repo": "spring-data-cassandra-4.1.2", "code": "package observability\n\n// A Observation.Context for CqlSession.\npublic class CassandraObservationContext extends io.micrometer.observation.transport.SenderContext<Object>;\n// ObservationConvention for Cassandra.\npublic interface CassandraObservationConvention extends io.micrometer.observation.ObservationConvention<CassandraObservationContext>;\n// Returns the Cassandra Observation.\npublic interface CassandraObservationSupplier;\n// Factory to wrap a CqlSession with a CqlSessionObservationInterceptor.\npublic final class ObservableCqlSessionFactory extends Object;\n// Factory bean to construct a CqlSession integrated with given ObservationRegistry.\npublic class ObservableCqlSessionFactoryBean extends AbstractFactoryBean<com.datastax.oss.driver.api.core.CqlSession>;\n// Instrumented ReactiveSession for observability.\npublic class ObservableReactiveSession extends Object implements ReactiveSession;\n// Factory to wrap a ReactiveSession with ObservableReactiveSession.\npublic final class ObservableReactiveSessionFactory extends Object;\n// Factory bean to construct a ReactiveSession integrated with given ObservationRegistry.\npublic class ObservableReactiveSessionFactoryBean extends AbstractFactoryBean<ReactiveSession>;\n// Trace implementation of the RequestTracker.\npublic enum ObservationRequestTracker extends Enum<ObservationRequestTracker> implements com.datastax.oss.driver.api.core.tracker.RequestTracker;\n", "des": "Infrastructure to provide driver observability using Micrometer."}
{"index": 2660, "repo": "spring-data-cassandra-4.1.2", "code": "package repository\n\n// CDI support for Apache Cassandra specific repository implementation.\npackage repository.cdi\n// Support infrastructure for the configuration of Apache Cassandra specific repositories.\npackage repository.config\n// Query derivation mechanism for Apache Cassandra specific repositories.\npackage repository.query\n// Support infrastructure for query derivation of Apache Cassandra specific repositories.\npackage repository.support\n// Annotation to declare filtering for a derived query.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(allowFiltering=true) public @interface AllowFiltering;\n// Cassandra-specific extension of the CrudRepository interface that allows the specification of a type for the identity of the @Table (or @Persistable) type.\n@NoRepositoryBean public interface CassandraRepository<T,ID> extends ListCrudRepository<T,ID>;\n// Annotation to declare a ConsistencyLevel for CQL queries executed through query methods.\n@Documented @Target({ANNOTATION_TYPE,METHOD}) @Retention(RUNTIME) public @interface Consistency;\n// Annotation to declare count queries directly on repository methods.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(count=true) public @interface CountQuery;\n// Annotation to declare exists queries directly on repository methods.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(exists=true) public @interface ExistsQuery;\n// Cassandra repository interface using MapId to represent Ids.\n@NoRepositoryBean public interface MapIdCassandraRepository<T> extends CassandraRepository<T,MapId>;\n// Annotation to declare finder queries directly on repository methods.\n@Documented @Target({ANNOTATION_TYPE,METHOD}) @Retention(RUNTIME) public @interface Query;\n// Enumeration to define statement idempotency.\npublic static enum Query.Idempotency extends Enum<Query.Idempotency>;\n// Cassandra specific Repository interface with reactive support.\n@NoRepositoryBean public interface ReactiveCassandraRepository<T,ID> extends ReactiveCrudRepository<T,ID>;\n", "des": "Apache Cassandra specific repository implementation."}
{"index": 2661, "repo": "spring-data-cassandra-4.1.2", "code": "package cdi\n\n// A bean which represents a Cassandra repository.\npublic class CassandraRepositoryBean<T> extends CdiRepositoryBean<T>;\n// A portable CDI extension which registers beans for Spring Data Cassandra repositories.\npublic class CassandraRepositoryExtension extends CdiRepositoryExtensionSupport;\n", "des": "CDI support for Apache Cassandra specific repository implementation."}
{"index": 2662, "repo": "spring-data-cassandra-4.1.2", "code": "package config\n\n// ImportBeanDefinitionRegistrar to setup Cassandra repositories via EnableCassandraRepositories.\npublic class CassandraRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport;\n// RepositoryConfigurationExtension for Cassandra.\npublic class CassandraRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport;\n// Annotation to enable Cassandra repositories.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Inherited @Import(CassandraRepositoriesRegistrar.class) public @interface EnableCassandraRepositories;\n// Annotation to activate reactive Cassandra repositories.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Inherited @Import(org.springframework.data.cassandra.repository.config.ReactiveCassandraRepositoriesRegistrar.class) public @interface EnableReactiveCassandraRepositories;\n// RepositoryConfigurationExtension for Cassandra.\npublic class ReactiveCassandraRepositoryConfigurationExtension extends CassandraRepositoryConfigurationExtension;\n", "des": "Support infrastructure for the configuration of Apache Cassandra specific repositories."}
{"index": 2663, "repo": "spring-data-cassandra-4.1.2", "code": "package query\n\n// Base class for RepositoryQuery implementations for Cassandra.\npublic abstract class AbstractCassandraQuery extends CassandraRepositoryQuerySupport;\n// Base class for reactive RepositoryQuery implementations for Cassandra.\npublic abstract class AbstractReactiveCassandraQuery extends CassandraRepositoryQuerySupport;\n// Cassandra specific EntityInformation.\npublic interface CassandraEntityInformation<T,ID> extends EntityInformation<T,ID>, CassandraEntityMetadata<T>;\n// Extension of EntityMetadata to additionally expose the table name an entity shall be persisted to.\npublic interface CassandraEntityMetadata<T> extends EntityMetadata<T>;\n// Cassandra-specific ParameterAccessor exposing a Cassandra types that are supported by the driver and parameter type.\npublic interface CassandraParameterAccessor extends ParameterAccessor;\n// Custom extension of Parameters discovering additional properties of query method parameters.\npublic class CassandraParameters extends Parameters<CassandraParameters,org.springframework.data.cassandra.repository.query.CassandraParameters.CassandraParameter>;\n// Cassandra-specific ParameterAccessor exposing Cassandra types that are supported by the driver and parameter type.\npublic class CassandraParametersParameterAccessor extends ParametersParameterAccessor implements CassandraParameterAccessor;\n// Cassandra specific implementation of QueryMethod.\npublic class CassandraQueryMethod extends QueryMethod;\n// Base class for Cassandra RepositoryQuery implementations providing common infrastructure such as EntityInstantiators and QueryStatementCreator.\npublic abstract class CassandraRepositoryQuerySupport extends Object implements RepositoryQuery;\n// RepositoryQuery implementation for Cassandra.\npublic class PartTreeCassandraQuery extends AbstractCassandraQuery;\n// Reactive specific implementation of CassandraQueryMethod.\npublic class ReactiveCassandraQueryMethod extends CassandraQueryMethod;\n// Reactive PartTree RepositoryQuery implementation for Cassandra.\npublic class ReactivePartTreeCassandraQuery extends AbstractReactiveCassandraQuery;\n// String-based AbstractReactiveCassandraQuery implementation.\npublic class ReactiveStringBasedCassandraQuery extends AbstractReactiveCassandraQuery;\n// String-based AbstractCassandraQuery implementation.\npublic class StringBasedCassandraQuery extends AbstractCassandraQuery;\n", "des": "Query derivation mechanism for Apache Cassandra specific repositories."}
{"index": 2664, "repo": "spring-data-cassandra-4.1.2", "code": "package support\n\n// Factory to create CassandraRepository instances.\npublic class CassandraRepositoryFactory extends RepositoryFactorySupport;\n// FactoryBean to create CassandraRepository instances.\npublic class CassandraRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>;\n// CassandraEntityInformation implementation using a CassandraPersistentEntity instance to lookup the necessary information.\npublic class MappingCassandraEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements CassandraEntityInformation<T,ID>;\n// Factory to create ReactiveCassandraRepository instances.\npublic class ReactiveCassandraRepositoryFactory extends ReactiveRepositoryFactorySupport;\n// FactoryBean to create ReactiveCassandraRepository instances.\npublic class ReactiveCassandraRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>;\n// Repository base implementation for Cassandra.\npublic class SimpleCassandraRepository<T,ID> extends Object implements CassandraRepository<T,ID>;\n// Reactive repository base implementation for Cassandra.\npublic class SimpleReactiveCassandraRepository<T,ID> extends Object implements ReactiveCassandraRepository<T,ID>;\n", "des": "Support infrastructure for query derivation of Apache Cassandra specific repositories."}
{"index": 2665, "repo": "spring-data-cassandra-4.1.2", "code": "package util\n\n// Builder for maps, which also conveniently implements Map via delegation for convenience so you don't have to actually MapBuilder.build() it.\npublic class MapBuilder<K,V> extends Object implements Map<K,V>;\n// Evaluates a SpEL expression.\npublic class SpelUtils extends Object;\n", "des": "Map and SpEL utility infrastructure."}
{"index": 2666, "repo": "spring-data-jdbc-3.1.2", "code": "package core\n\n// JDBC-specific conversion classes.\npackage core.convert\n// Specifies operations one can perform on a database, based on an Domain Type.\npublic interface JdbcAggregateOperations;\n// JdbcAggregateOperations implementation, storing aggregates in and obtaining them from a JDBC data store.\npublic class JdbcAggregateTemplate extends Object implements JdbcAggregateOperations;\n// Signals failure to set the id property of an entity.\npublic class UnableToSetId extends NonTransientDataAccessException;\n", "des": "Core JDBC implementation."}
{"index": 2667, "repo": "spring-data-jdbc-3.1.2", "code": "package convert\n\n// RelationalConverter that uses a MappingContext to apply basic conversion of relational values to property values.\npublic class BasicJdbcConverter extends BasicRelationalConverter implements JdbcConverter, ApplicationContextAware;\n// Counterpart to NamedParameterJdbcOperations containing methods for performing batch updates with generated keys.\npublic class BatchJdbcOperations extends Object;\n// Delegates each method to the DataAccessStrategys passed to the constructor in turn until the first that does not throw an exception.\npublic class CascadingDataAccessStrategy extends Object implements DataAccessStrategy;\n// Abstraction for accesses to the database that should be implementable with a single SQL statement per method and relates to a single entity as opposed to JdbcAggregateOperations which provides interactions related to complete aggregates.\npublic interface DataAccessStrategy extends RelationResolver;\n// The default DataAccessStrategy is to generate SQL statements based on metadata from the entity.\npublic class DefaultDataAccessStrategy extends Object implements DataAccessStrategy;\n// A JdbcTypeFactory that performs the conversion by utilizing JdbcOperations.execute(ConnectionCallback).\npublic class DefaultJdbcTypeFactory extends Object implements JdbcTypeFactory;\n// Delegates all method calls to an instance set after construction.\npublic class DelegatingDataAccessStrategy extends Object implements DataAccessStrategy;\n// Maps a ResultSet to an entity of type T, including entities referenced.\npublic class EntityRowMapper<T> extends Object implements RowMapper<T>;\n// Identifier represents a composite id of an entity that may be composed of one or many parts.\npublic final class Identifier extends Object;\n// Represents an operation that accepts identifier key parts (name, value and target type) defining a contract to consume Identifier values.\n@FunctionalInterface public static interface Identifier.IdentifierConsumer;\n// Factory which selects and builds the appropriate InsertStrategy or BatchInsertStrategy based on whether the insert is expected to generate ids.\npublic class InsertStrategyFactory extends Object;\n// The subject of an insert, described by the entity instance and its Identifier, where identifier contains information about data that needs to be considered for the insert but which is not part of the entity.\npublic final class InsertSubject<T> extends Object;\n// ArrayColumns that offer JDBC-specific functionality.\npublic interface JdbcArrayColumns extends ArrayColumns;\n", "des": "JDBC-specific conversion classes."}
{"index": 2668, "repo": "spring-data-jdbc-3.1.2", "code": "package query\n\n// Base class for queries based on a repository method.\npublic abstract class AbstractJdbcQuery extends Object implements RepositoryQuery;\n// Delegating RowMapper that reads a row into T and converts it afterwards into Object.\nprotected static class AbstractJdbcQuery.ConvertingRowMapper<T> extends Object implements RowMapper<Object>;\n// Factory to create a RowMapper for a given class.\npublic static interface AbstractJdbcQuery.RowMapperFactory;\n// QueryMethod implementation that implements a method by executing the query from a Query annotation on that method.\npublic class JdbcQueryMethod extends QueryMethod;\n// Indicates a method should be regarded as modifying query.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying;\n// An AbstractJdbcQuery implementation based on a PartTree.\npublic class PartTreeJdbcQuery extends AbstractJdbcQuery;\n// Annotation to provide SQL statements that will get used for executing the method.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface Query;\n// A query to be executed based on a repository method, it's annotated SQL query and the arguments provided to the method.\npublic class StringBasedJdbcQuery extends AbstractJdbcQuery;\n", "des": "Query derivation mechanism for JDBC specific repositories."}
{"index": 2669, "repo": "spring-r2dbc-6.0.11", "code": "package r2dbc\n\n// Provides a utility class for easy ConnectionFactory access, a ReactiveTransactionManager for a single ConnectionFactory, and various simple ConnectionFactory implementations.\npackage r2dbc.connection\n// Core domain types around DatabaseClient.\npackage r2dbc.core\n// Exception thrown when SQL specified is invalid.\npublic class BadSqlGrammarException extends org.springframework.dao.InvalidDataAccessResourceUsageException;\n// Exception thrown when we can't classify a R2dbcException into one of our generic data access exceptions.\npublic class UncategorizedR2dbcException extends org.springframework.dao.UncategorizedDataAccessException;\n", "des": "The classes in this package make R2DBC easier to use and reduce the likelihood of common errors."}
{"index": 2670, "repo": "spring-r2dbc-6.0.11", "code": "package connection\n\n// Provides extensible support for initializing databases through scripts.\npackage connection.init\n// Provides a strategy for looking up R2DBC ConnectionFactories by name.\npackage connection.lookup\n// Helper class that provides static methods for obtaining R2DBC Connections from a ConnectionFactory.\npublic abstract class ConnectionFactoryUtils extends Object;\n// Resource holder wrapping a R2DBC Connection.\npublic class ConnectionHolder extends org.springframework.transaction.support.ResourceHolderSupport;\n// R2DBC ConnectionFactory implementation that delegates all calls to a given target ConnectionFactory.\npublic class DelegatingConnectionFactory extends Object implements ConnectionFactory, Wrapped<ConnectionFactory>;\n// ReactiveTransactionManager implementation for a single R2DBC ConnectionFactory.\npublic class R2dbcTransactionManager extends org.springframework.transaction.reactive.AbstractReactiveTransactionManager implements org.springframework.beans.factory.InitializingBean;\n// Implementation of DelegatingConnectionFactory that wraps a single R2DBC Connection which is not closed after use.\npublic class SingleConnectionFactory extends DelegatingConnectionFactory implements org.springframework.beans.factory.DisposableBean;\n// Proxy for a target R2DBC ConnectionFactory, adding awareness of Spring-managed transactions.\npublic class TransactionAwareConnectionFactoryProxy extends DelegatingConnectionFactory;\n", "des": "Provides a utility class for easy ConnectionFactory access, a ReactiveTransactionManager for a single ConnectionFactory, and various simple ConnectionFactory implementations."}
{"index": 2671, "repo": "spring-r2dbc-6.0.11", "code": "package init\n\n// Thrown by ScriptUtils if an SQL script cannot be read.\npublic class CannotReadScriptException extends ScriptException;\n// Composite DatabasePopulator that delegates to a list of given DatabasePopulator implementations, executing all scripts.\npublic class CompositeDatabasePopulator extends Object implements DatabasePopulator;\n// Used to set up a database during initialization and clean up a database during destruction.\npublic class ConnectionFactoryInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\n// Strategy used to populate, initialize, or clean up a database.\n@FunctionalInterface public interface DatabasePopulator;\n// Populates, initializes, or cleans up a database using SQL scripts defined in external resources.\npublic class ResourceDatabasePopulator extends Object implements DatabasePopulator;\n// Root of the hierarchy of data access exceptions that are related to processing of SQL scripts.\npublic abstract class ScriptException extends org.springframework.dao.DataAccessException;\n// Thrown by ScriptUtils if an SQL script cannot be properly parsed.\npublic class ScriptParseException extends ScriptException;\n// Thrown by ScriptUtils if a statement in an SQL script failed when executing it against the target database.\npublic class ScriptStatementFailedException extends ScriptException;\n// Generic utility methods for working with SQL scripts in conjunction with R2DBC.\npublic abstract class ScriptUtils extends Object;\n// Thrown when we cannot determine anything more specific than \"something went wrong while processing an SQL script\": for example, an R2dbcException from R2DBC that we cannot pinpoint more precisely.\npublic class UncategorizedScriptException extends ScriptException;\n", "des": "Provides extensible support for initializing databases through scripts."}
{"index": 2672, "repo": "spring-r2dbc-6.0.11", "code": "package lookup\n\n// Abstract ConnectionFactory implementation that routes AbstractRoutingConnectionFactory.create() calls to one of various target factories based on a lookup key.\npublic abstract class AbstractRoutingConnectionFactory extends Object implements ConnectionFactory, org.springframework.beans.factory.InitializingBean;\n// ConnectionFactoryLookup implementation based on a Spring BeanFactory.\npublic class BeanFactoryConnectionFactoryLookup extends Object implements ConnectionFactoryLookup, org.springframework.beans.factory.BeanFactoryAware;\n// Strategy interface for looking up ConnectionFactory by name.\n@FunctionalInterface public interface ConnectionFactoryLookup;\n// Exception to be thrown by a ConnectionFactoryLookup implementation, indicating that the specified ConnectionFactory could not be obtained.\npublic class ConnectionFactoryLookupFailureException extends org.springframework.dao.NonTransientDataAccessException;\n// Simple ConnectionFactoryLookup implementation that relies on a map for doing lookups.\npublic class MapConnectionFactoryLookup extends Object implements ConnectionFactoryLookup;\n// An implementation of ConnectionFactoryLookup that simply wraps a single given ConnectionFactory returned for any connection factory name.\npublic class SingleConnectionFactoryLookup extends Object implements ConnectionFactoryLookup;\n", "des": "Provides a strategy for looking up R2DBC ConnectionFactories by name."}
{"index": 2673, "repo": "spring-r2dbc-6.0.11", "code": "package core\n\n// Classes providing an abstraction over SQL bind markers.\npackage core.binding\n// Mapping function implementation that creates a java.util.Map for each row, representing all columns as key-value pairs: one entry for each column, with the column name as key.\npublic class ColumnMapRowMapper extends Object implements BiFunction<Row,RowMetadata,Map<String,Object>>;\n// Interface declaring methods that accept callback Function to operate within the scope of a Connection.\npublic interface ConnectionAccessor;\n// A non-blocking, reactive client for performing database calls with Reactive Streams back pressure.\npublic interface DatabaseClient extends ConnectionAccessor;\n// A mutable builder for creating a DatabaseClient.\npublic static interface DatabaseClient.Builder;\n// Contract for specifying an SQL call along with options leading to the execution.\npublic static interface DatabaseClient.GenericExecuteSpec;\n// Represents a function that executes a Statement for a (delayed) Result stream.\n@FunctionalInterface public interface ExecuteFunction;\n// Union type for fetching results.\npublic interface FetchSpec<T> extends RowsFetchSpec<T>, UpdatedRowsFetchSpec;\n// \n@Deprecated(since=\"6.0\") public final class Parameter extends Object;\n// Extension to QueryOperation for a prepared SQL query Supplier with bound parameters.\npublic interface PreparedOperation<T> extends QueryOperation;\n// Interface declaring a query operation that can be represented with a query string.\n@FunctionalInterface public interface QueryOperation extends Supplier<String>;\n// Contract for fetching tabular results.\npublic interface RowsFetchSpec<T>;\n// Interface to be implemented by objects that can provide SQL strings.\npublic interface SqlProvider;\n// Represents a function that filters an ExecuteFunction.\n@FunctionalInterface public interface StatementFilterFunction;\n// Contract for fetching the number of affected rows.\npublic interface UpdatedRowsFetchSpec;\n", "des": "Core domain types around DatabaseClient."}
{"index": 2674, "repo": "spring-r2dbc-6.0.11", "code": "package binding\n\n// Value object representing value and null bindings for a Statement using BindMarkers.\npublic class Bindings extends Object implements Iterable<Bindings.Binding>;\n// Base class for value objects representing a value or a NULL binding.\npublic abstract static class Bindings.Binding extends Object;\n// A bind marker represents a single bindable parameter within a query.\npublic interface BindMarker;\n// Bind markers represent placeholders in SQL queries for substitution for an actual parameter.\n@FunctionalInterface public interface BindMarkers;\n// This class creates new BindMarkers instances to bind parameter to a specific Statement.\n@FunctionalInterface public interface BindMarkersFactory;\n// Resolves a BindMarkersFactory from a ConnectionFactory using BindMarkersFactoryResolver.BindMarkerFactoryProvider.\npublic final class BindMarkersFactoryResolver extends Object;\n// SPI to extend Spring's default R2DBC BindMarkersFactory discovery mechanism.\n@FunctionalInterface public static interface BindMarkersFactoryResolver.BindMarkerFactoryProvider;\n// Exception thrown when BindMarkersFactoryResolver cannot resolve a BindMarkersFactory.\npublic static class BindMarkersFactoryResolver.NoBindMarkersFactoryException extends org.springframework.dao.NonTransientDataAccessException;\n// Target to apply bindings to.\npublic interface BindTarget;\n// Mutable extension to Bindings for Value and null bindings for a Statement using BindMarkers.\npublic class MutableBindings extends Bindings;\n", "des": "Classes providing an abstraction over SQL bind markers."}
{"index": 2675, "repo": "spring-session-core-3.1.1", "code": "package session\n\n// The WebSessionStore implementation that provides the WebSession implementation backed by a Session returned by the ReactiveSessionRepository.\npublic class SpringSessionWebSessionStore<S extends Session> extends Object implements org.springframework.web.server.session.WebSessionStore;\n", "des": "Spring Session reactive web support."}
{"index": 2676, "repo": "spring-data-jpa-3.1.2", "code": "package convert\n\n// Spring Data JPA specific JSR-310 converters.\npackage convert.threeten\n// QueryByExamplePredicateBuilder creates a single CriteriaBuilder.and(Predicate...) combined Predicate for a given Example.\npublic class QueryByExamplePredicateBuilder extends Object;\n", "des": "Spring Data JPA specific converter infrastructure."}
{"index": 2677, "repo": "spring-data-jpa-3.1.2", "code": "package threeten\n\n// JPA 2.1 converters to turn JSR-310 types into legacy Dates.\npublic class Jsr310JpaConverters extends Object;\n// \npublic static class Jsr310JpaConverters.InstantConverter extends Object implements jakarta.persistence.AttributeConverter<Instant,Timestamp>;\n// \npublic static class Jsr310JpaConverters.LocalDateConverter extends Object implements jakarta.persistence.AttributeConverter<LocalDate,Date>;\n// \npublic static class Jsr310JpaConverters.LocalDateTimeConverter extends Object implements jakarta.persistence.AttributeConverter<LocalDateTime,Date>;\n// \npublic static class Jsr310JpaConverters.LocalTimeConverter extends Object implements jakarta.persistence.AttributeConverter<LocalTime,Date>;\n// \npublic static class Jsr310JpaConverters.ZoneIdConverter extends Object implements jakarta.persistence.AttributeConverter<ZoneId,String>;\n", "des": "Spring Data JPA specific JSR-310 converters."}
{"index": 2678, "repo": "spring-data-jpa-3.1.2", "code": "package domain\n\n// Implementation classes for auditing with JPA.\npackage domain.support\n// Abstract base class for auditable entities.\n@MappedSuperclass public abstract class AbstractAuditable<U,PK extends Serializable> extends AbstractPersistable<PK> implements Auditable<U,PK,LocalDateTime>;\n// \n@Generated(\"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\") public abstract class AbstractAuditable_ extends AbstractPersistable_;\n// Abstract base class for entities.\n@MappedSuperclass public abstract class AbstractPersistable<PK extends Serializable> extends Object implements Persistable<PK>;\n// \n@Generated(\"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\") public abstract class AbstractPersistable_ extends Object;\n// Sort option for queries that wraps JPA meta-model Attributes for sorting.\npublic class JpaSort extends Sort;\n// Custom Sort.Order that keeps a flag to indicate unsafe property handling, i.e. the String provided is not necessarily a property but can be an arbitrary expression piped into the query execution.\npublic static class JpaSort.JpaOrder extends Sort.Order;\n// Value object to abstract a collection of Attributes.\npublic static class JpaSort.Path<T,S> extends Object;\n// QAbstractAuditable is a Querydsl query type for AbstractAuditable\n@Generated(\"com.querydsl.codegen.DefaultSupertypeSerializer\") public class QAbstractAuditable extends com.querydsl.core.types.dsl.EntityPathBase<AbstractAuditable<?,? extends Serializable>>;\n// QAbstractPersistable is a Querydsl query type for AbstractPersistable\n@Generated(\"com.querydsl.codegen.DefaultSupertypeSerializer\") public class QAbstractPersistable extends com.querydsl.core.types.dsl.EntityPathBase<AbstractPersistable<? extends Serializable>>;\n// Specification in the sense of Domain Driven Design.\npublic interface Specification<T> extends Serializable;\n", "des": "JPA specific support classes to implement domain classes."}
{"index": 2679, "repo": "spring-data-jpa-3.1.2", "code": "package support\n\n// BeanFactoryPostProcessor that ensures that the AnnotationBeanConfigurerAspect aspect is up and running before the EntityManagerFactory gets created as this already instantiates entity listeners and we need to get injection into Configurable to work in them.\npublic class AuditingBeanFactoryPostProcessor extends Object implements BeanFactoryPostProcessor;\n// JPA entity listener to capture auditing information on persisting and updating entities.\n@Configurable public class AuditingEntityListener extends Object;\n", "des": "Implementation classes for auditing with JPA."}
{"index": 2680, "repo": "spring-data-jpa-3.1.2", "code": "package mapping\n\n// MappingContext implementation based on a Jpa Metamodel.\npublic class JpaMetamodelMappingContext extends AbstractMappingContext<org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?>,JpaPersistentProperty>;\n// Interface for a JPA-specific entity.\npublic interface JpaPersistentEntity<T> extends PersistentEntity<T,JpaPersistentProperty>;\n// Interface for a JPA-specific PersistentProperty.\npublic interface JpaPersistentProperty extends PersistentProperty<JpaPersistentProperty>;\n", "des": "JPA specific support classes for the Spring Data mapping subsystem."}
{"index": 2681, "repo": "spring-data-jpa-3.1.2", "code": "package provider\n\n// Utility functions to work with Hibernate.\npublic abstract class HibernateUtils extends Object;\n// Enumeration representing persistence providers to be used.\npublic enum PersistenceProvider extends Enum<PersistenceProvider> implements QueryExtractor, ProxyIdAccessor, QueryComment;\n// Interface for a persistence provider specific accessor of identifiers held in proxies.\npublic interface ProxyIdAccessor;\n// Interface to hide different implementations of query hints that insert comments into a Query.\npublic interface QueryComment;\n// Interface to hide different implementations to extract the original JPA query string from a Query.\npublic interface QueryExtractor;\n", "des": "JPA provider-specific utilities."}
{"index": 2682, "repo": "spring-data-jpa-3.1.2", "code": "package repository\n\n// CDI support for Spring Data JPA Repositories.\npackage repository.cdi\n// Classes for JPA namespace configuration.\npackage repository.config\n// Query implementation to execute queries against JPA.\npackage repository.query\n// JPA repository implementations.\npackage repository.support\n// Annotation to configure the JPA 2.1 EntityGraphs that should be used on repository methods.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface EntityGraph;\n// Enum for JPA 2.1 EntityGraph types.\npublic static enum EntityGraph.EntityGraphType extends Enum<EntityGraph.EntityGraphType>;\n// Interface for components to provide useful information about the current JPA setup within the current ApplicationContext.\npublic interface JpaContext;\n// JPA specific extension of Repository.\n@NoRepositoryBean public interface JpaRepository<T,ID> extends ListCrudRepository<T,ID>, ListPagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T>;\n// Interface to allow execution of Specifications based on the JPA criteria API.\npublic interface JpaSpecificationExecutor<T>;\n// Annotation used to specify the LockModeType to be used when executing the query.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Lock;\n// Annotation to assign metadata to repository operations.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Meta;\n// Indicates a query method should be considered as modifying query as that changes the way it needs to be executed.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying;\n// Annotation to declare finder queries directly on repository methods.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Query;\n// Wrapper annotation to allow QueryHint annotations to be bound to methods.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface QueryHints;\n// Callback to rewrite a query and apply sorting and pagination settings that cannot be applied based on a regularly detectable scheme.\n@FunctionalInterface public interface QueryRewriter;\n", "des": "Interfaces and annotations for JPA specific repositories."}
{"index": 2683, "repo": "spring-data-jpa-3.1.2", "code": "package cdi\n\n// A BeanManager-based QueryRewriterProvider.\npublic class BeanManagerQueryRewriterProvider extends Object implements QueryRewriterProvider;\n// A portable CDI extension which registers beans for Spring Data JPA repositories.\npublic class JpaRepositoryExtension extends CdiRepositoryExtensionSupport;\n", "des": "CDI support for Spring Data JPA Repositories."}
{"index": 2684, "repo": "spring-data-jpa-3.1.2", "code": "package config\n\n// BeanDefinitionParser for the auditing element.\npublic class AuditingBeanDefinitionParser extends Object implements BeanDefinitionParser;\n// Annotation to enable auditing in JPA via annotation configuration.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.jpa.repository.config.JpaAuditingRegistrar.class) public @interface EnableJpaAuditing;\n// Annotation to enable JPA repositories.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrar.class) public @interface EnableJpaRepositories;\n// FactoryBean to setup JpaMetamodelMappingContext instances from Spring configuration.\npublic class JpaMetamodelMappingContextFactoryBean extends AbstractFactoryBean<JpaMetamodelMappingContext> implements ApplicationContextAware;\n// JPA specific configuration extension parsing custom attributes from the XML namespace and EnableJpaRepositories annotation.\npublic class JpaRepositoryConfigExtension extends RepositoryConfigurationExtensionSupport;\n// A RepositoryRegistrationAotProcessor implementation that maintains aot repository setup but skips domain type inspection which is handled by the core framework support for PersistenceManagedTypes.\npublic static class JpaRepositoryConfigExtension.JpaRepositoryRegistrationAotProcessor extends RepositoryRegistrationAotProcessor;\n// Simple namespace handler for repositories namespace.\npublic class JpaRepositoryNameSpaceHandler extends NamespaceHandlerSupport;\n", "des": "Classes for JPA namespace configuration."}
{"index": 2685, "repo": "spring-data-jpa-3.1.2", "code": "package query\n\n// Abstract base class to implement RepositoryQuerys.\npublic abstract class AbstractJpaQuery extends Object implements RepositoryQuery;\n// An exception thrown if the JPQL query is invalid.\npublic class BadJpqlGrammarException extends InvalidDataAccessResourceUsageException;\n// A BeanFactory-based QueryRewriterProvider.\npublic class BeanFactoryQueryRewriterProvider extends Object implements QueryRewriterProvider;\n// Default implementation for JpaEntityMetadata.\npublic class DefaultJpaEntityMetadata<T> extends Object implements JpaEntityMetadata<T>;\n// A factory for creating JpaQueryMethod instances.\npublic class DefaultJpaQueryMethodFactory extends Object implements JpaQueryMethodFactory;\n// The implementation of QueryEnhancer using QueryUtils.\npublic class DefaultQueryEnhancer extends Object implements QueryEnhancer;\n// Delegating QueryRewriter that delegates rewrite calls to a delegate provided by a Supplier.\npublic class DelegatingQueryRewriter extends Object implements QueryRewriter;\n// A value type encapsulating an escape character for LIKE queries and the actually usage of it in escaping Strings.\npublic final class EscapeCharacter extends Object;\n// Signals that we encountered an invalid query method.\npublic class InvalidJpaQueryMethodException extends RuntimeException;\n// Utils for bridging various JPA 2.1 features.\npublic class Jpa21Utils extends Object;\n// Special JpaQueryCreator that creates a count projecting query.\npublic class JpaCountQueryCreator extends JpaQueryCreator;\n// EntityGraph configuration for JPA 2.1 EntityGraphs.\npublic class JpaEntityGraph extends Object;\n// JPA specific extension of EntityMetadata.\npublic interface JpaEntityMetadata<T> extends EntityMetadata<T>;\n// Custom extension of Parameters discovering additional query parameter annotations.\npublic class JpaParameters extends Parameters<JpaParameters,JpaParameters.JpaParameter>;\n// Custom Parameter implementation adding parameters of type Temporal to the special ones.\npublic static class JpaParameters.JpaParameter extends Parameter;\n// ParameterAccessor based on an Parameters instance.\npublic class JpaParametersParameterAccessor extends ParametersParameterAccessor;\n", "des": "Query implementation to execute queries against JPA."}
{"index": 2686, "repo": "spring-data-jpa-3.1.2", "code": "package support\n\n// Interface to abstract CrudMethodMetadata that provide the LockModeType to be used for query execution.\npublic interface CrudMethodMetadata;\n// Default implementation of JpaContext.\npublic class DefaultJpaContext extends Object implements JpaContext;\n// BeanFactoryPostProcessor to register a SharedEntityManagerCreator for every EntityManagerFactory bean definition found in the application context to enable autowiring EntityManager instances into constructor arguments.\npublic class EntityManagerBeanDefinitionRegistrarPostProcessor extends Object implements BeanFactoryPostProcessor, Ordered;\n// Extension of EntityInformation to capture additional JPA specific information about entities.\npublic interface JpaEntityInformation<T,ID> extends EntityInformation<T,ID>, JpaEntityMetadata<T>;\n// Base class for JpaEntityInformation implementations to share common method implementations.\npublic abstract class JpaEntityInformationSupport<T,ID> extends AbstractEntityInformation<T,ID> implements JpaEntityInformation<T,ID>;\n// EvaluationContextExtension to register EscapeCharacter as root object to essentially expose an expose(…) function to SpEL.\npublic class JpaEvaluationContextExtension extends Object implements EvaluationContextExtension;\n// \npublic static class JpaEvaluationContextExtension.JpaRootObject extends Object;\n// Implementation of EntityInformation that uses JPA Metamodel to find the domain class' id field.\npublic class JpaMetamodelEntityInformation<T,ID> extends JpaEntityInformationSupport<T,ID>;\n// Extension of JpaMetamodelEntityInformation that consideres methods of Persistable to lookup the id.\npublic class JpaPersistableEntityInformation<T extends Persistable<ID>,ID> extends JpaMetamodelEntityInformation<T,ID>;\n// JPA specific generic repository factory.\npublic class JpaRepositoryFactory extends RepositoryFactorySupport;\n// Special adapter for Springs FactoryBean interface to allow easy setup of repository factories via Spring configuration.\npublic class JpaRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends TransactionalRepositoryFactoryBeanSupport<T,S,ID>;\n// SPI interface to be implemented by JpaRepository implementations.\n@NoRepositoryBean public interface JpaRepositoryImplementation<T,ID> extends JpaRepository<T,ID>, JpaSpecificationExecutor<T>;\n", "des": "JPA repository implementations."}
{"index": 2687, "repo": "spring-data-jpa-3.1.2", "code": "package support\n\n// PersistenceUnitPostProcessor that will scan for classes annotated with Entity or MappedSuperclass and add them to the PersistenceUnit post processed.\npublic class ClasspathScanningPersistenceUnitPostProcessor extends Object implements PersistenceUnitPostProcessor, ResourceLoaderAware, EnvironmentAware;\n// Extends DefaultPersistenceUnitManager to merge configurations of one persistence unit residing in multiple persistence.xml files into one.\npublic class MergingPersistenceUnitManager extends DefaultPersistenceUnitManager;\n// Provide a set of utility methods to support Pageables.\npublic final class PageableUtils extends Object;\n", "des": "Various helper classes useful when working with JPA."}
{"index": 2688, "repo": "spring-data-jpa-3.1.2", "code": "package util\n\n// Utility methods to work with BeanDefinition instances from BeanFactoryPostProcessors.\npublic final class BeanDefinitionUtils extends Object;\n// Value object to represent a BeanDefinition for an EntityManagerFactory with a dedicated bean name.\npublic static class BeanDefinitionUtils.EntityManagerFactoryBeanDefinition extends Object;\n// Wrapper around the JPA Metamodel to be able to apply some fixes against bugs in provider implementations.\npublic class JpaMetamodel extends Object;\n", "des": "Spring Data JPA utilities."}
{"index": 2689, "repo": "spring-integration-http-6.1.2", "code": "package http\n\n// Provides classes for configuration - parsers, namespace handlers.\npackage http.config\n// Provides classes supporting message conversion.\npackage http.converter\n// Provides HTTP Components support for Spring Integration Java DSL.\npackage http.dsl\n// Provides classes supporting inbound endpoints.\npackage http.inbound\n// Provides classes related to management support.\npackage http.management\n// Provides classes supporting multipart HTTP requests.\npackage http.multipart\n// Provides classes supporting outbound endpoints.\npackage http.outbound\n// Provides classes to support Http endpoints, including header mapping.\npackage http.support\n// \npublic abstract class HttpHeaders extends Object;\n", "des": "Base package for Http support."}
{"index": 2690, "repo": "spring-integration-http-6.1.2", "code": "package config\n\n// Enables the IntegrationGraphController if org.springframework.web.servlet.DispatcherServlet or org.springframework.web.reactive.DispatcherHandler is present in the classpath.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Import(IntegrationGraphControllerRegistrar.class) public @interface EnableIntegrationGraphController;\n// Utility class for accessing HTTP integration components from the BeanFactory.\npublic final class HttpContextUtils extends Object;\n// Parser for the 'inbound-channel-adapter' and 'inbound-gateway' elements of the 'http' namespace.\npublic class HttpInboundEndpointParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n// The HTTP Integration infrastructure beanFactory initializer.\npublic class HttpIntegrationConfigurationInitializer extends Object implements org.springframework.integration.config.IntegrationConfigurationInitializer;\n// Namespace handler for Spring Integration's http namespace.\npublic class HttpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n// Parser for the 'outbound-channel-adapter' element of the http namespace.\npublic class HttpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\n// Parser for the 'outbound-gateway' element of the http namespace.\npublic class HttpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n// The BeanDefinitionParser for the <int-http:graph-controller> component.\npublic class IntegrationGraphControllerParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// Registers the necessary beans for EnableIntegrationGraphController.\npublic class IntegrationGraphControllerRegistrar extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2691, "repo": "spring-integration-http-6.1.2", "code": "package converter\n\n// An HttpMessageConverter implementation that delegates to an instance of AllEncompassingFormHttpMessageConverter while adding the capability to read multipart/form-data content in an HTTP request.\npublic class MultipartAwareFormHttpMessageConverter extends Object implements org.springframework.http.converter.HttpMessageConverter<org.springframework.util.MultiValueMap<String,?>>;\n// An HttpMessageConverter implementation for Serializable instances.\npublic class SerializingHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter<Serializable>;\n", "des": "Provides classes supporting message conversion."}
{"index": 2692, "repo": "spring-integration-http-6.1.2", "code": "package dsl\n\n// A base MessagingGatewaySpec for the HttpRequestHandlingEndpointSupport implementations.\npublic abstract class BaseHttpInboundEndpointSpec<S extends BaseHttpInboundEndpointSpec<S,E>,E extends HttpRequestHandlingEndpointSupport> extends HttpInboundEndpointSupportSpec<S,E>;\n// The base MessageHandlerSpec for AbstractHttpRequestExecutingMessageHandlers.\npublic abstract class BaseHttpMessageHandlerSpec<S extends BaseHttpMessageHandlerSpec<S,E>,E extends AbstractHttpRequestExecutingMessageHandler> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E> implements org.springframework.integration.dsl.ComponentsRegistration;\n// The HTTP components Factory.\npublic final class Http extends Object;\n// The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingController.\npublic class HttpControllerEndpointSpec extends BaseHttpInboundEndpointSpec<HttpControllerEndpointSpec,HttpRequestHandlingController>;\n// \npublic abstract class HttpInboundEndpointSupportSpec<S extends HttpInboundEndpointSupportSpec<S,E>,E extends BaseHttpInboundEndpoint> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,E> implements org.springframework.integration.dsl.ComponentsRegistration;\n// A fluent API for the CrossOrigin.\npublic static final class HttpInboundEndpointSupportSpec.CrossOriginSpec extends Object;\n// A fluent API for the RequestMapping.\npublic static final class HttpInboundEndpointSupportSpec.RequestMappingSpec extends Object;\n// The BaseHttpMessageHandlerSpec implementation for the HttpRequestExecutingMessageHandler.\npublic class HttpMessageHandlerSpec extends BaseHttpMessageHandlerSpec<HttpMessageHandlerSpec,HttpRequestExecutingMessageHandler>;\n// The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingMessagingGateway.\npublic class HttpRequestHandlerEndpointSpec extends BaseHttpInboundEndpointSpec<HttpRequestHandlerEndpointSpec,HttpRequestHandlingMessagingGateway>;\n", "des": "Provides HTTP Components support for Spring Integration Java DSL."}
{"index": 2693, "repo": "spring-integration-http-6.1.2", "code": "package inbound\n\n// The MessagingGatewaySupport extension for HTTP Inbound endpoints with basic properties.\npublic class BaseHttpInboundEndpoint extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.integration.context.OrderlyShutdownCapable;\n// The mapping to permit cross origin requests (CORS) for HttpRequestHandlingEndpointSupport.\npublic class CrossOrigin extends Object;\n// Inbound HTTP endpoint that implements Spring's Controller interface to be used with a DispatcherServlet front controller.\npublic class HttpRequestHandlingController extends HttpRequestHandlingEndpointSupport implements org.springframework.web.servlet.mvc.Controller;\n// Base class for HTTP request handling endpoints.\npublic abstract class HttpRequestHandlingEndpointSupport extends BaseHttpInboundEndpoint;\n// Inbound Messaging Gateway that handles HTTP Requests.\npublic class HttpRequestHandlingMessagingGateway extends HttpRequestHandlingEndpointSupport implements org.springframework.web.HttpRequestHandler;\n// The HandlerMapping implementation that detects and registers RequestMappingInfos for HttpRequestHandlingEndpointSupport from a Spring Integration HTTP configuration of <inbound-channel-adapter/> and <inbound-gateway/> elements.\npublic final class IntegrationRequestMappingHandlerMapping extends org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping implements org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;\n// Class for mapping web requests onto specific HttpRequestHandlingEndpointSupport.\npublic class RequestMapping extends Object;\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2694, "repo": "spring-integration-http-6.1.2", "code": "package management\n\n// The REST Controller to provide the management API over IntegrationGraphServer.\n@RestController @RequestMapping(\"${spring.integration.graph.controller.request.mapping.path:/integration}\") public class IntegrationGraphController extends Object;\n", "des": "Provides classes related to management support."}
{"index": 2695, "repo": "spring-integration-http-6.1.2", "code": "package multipart\n\n// MultipartFileReader implementation that reads the MultipartFile content directly into a new MultipartFile instance that is not restricted to the HTTP request scope.\npublic class DefaultMultipartFileReader extends Object implements MultipartFileReader<org.springframework.web.multipart.MultipartFile>;\n// MultipartFileReader implementation that copies the MultipartFile's content to a new temporary File in the specified directory.\npublic class FileCopyingMultipartFileReader extends Object implements MultipartFileReader<org.springframework.web.multipart.MultipartFile>;\n// Strategy for reading MultipartFile content.\npublic interface MultipartFileReader<T>;\n// \npublic class MultipartHttpInputMessage extends org.springframework.http.server.ServletServerHttpRequest implements org.springframework.web.multipart.MultipartRequest;\n// MultipartFileReader implementation that does not maintain metadata from the original MultipartFile instance.\npublic class SimpleMultipartFileReader extends Object implements MultipartFileReader<Object>;\n// A MultipartFile implementation that represents an uploaded File.\npublic class UploadedMultipartFile extends Object implements org.springframework.web.multipart.MultipartFile;\n", "des": "Provides classes supporting multipart HTTP requests."}
{"index": 2696, "repo": "spring-integration-http-6.1.2", "code": "package outbound\n\n// Base class for http outbound adapter/gateway.\npublic abstract class AbstractHttpRequestExecutingMessageHandler extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler;\n// A MessageHandler implementation that executes HTTP requests by delegating to a RestTemplate instance.\npublic class HttpRequestExecutingMessageHandler extends AbstractHttpRequestExecutingMessageHandler;\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 2697, "repo": "spring-integration-http-6.1.2", "code": "package support\n\n// Default HeaderMapper implementation for HTTP.\npublic class DefaultHttpHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<org.springframework.http.HttpHeaders>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\n// A WebExchangeBindException extension for validation error with a failed message context.\npublic class IntegrationWebExchangeBindException extends org.springframework.web.bind.support.WebExchangeBindException;\n", "des": "Provides classes to support Http endpoints, including header mapping."}
{"index": 2698, "repo": "spring-integration-ftp-6.1.2", "code": "package config\n\n// Parser for the FTP 'inbound-channel-adapter' element.\npublic class FtpInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileInboundChannelAdapterParser;\n// Provides namespace support for using FTP\npublic class FtpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n// Parser for FTP Outbound Channel Adapters.\npublic class FtpOutboundChannelAdapterParser extends org.springframework.integration.file.config.RemoteFileOutboundChannelAdapterParser;\n// \npublic class FtpOutboundGatewayParser extends org.springframework.integration.file.config.AbstractRemoteFileOutboundGatewayParser;\n// \npublic class FtpStreamingInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileStreamingInboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2699, "repo": "spring-integration-ftp-6.1.2", "code": "package dsl\n\n// The factory for FTP components.\npublic final class Ftp extends Object;\n// A RemoteFileInboundChannelAdapterSpec for an FtpInboundFileSynchronizingMessageSource.\npublic class FtpInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpInboundChannelAdapterSpec,FtpInboundFileSynchronizingMessageSource>;\n// A FileTransferringMessageHandlerSpec for FTP.\npublic class FtpMessageHandlerSpec extends org.springframework.integration.file.dsl.FileTransferringMessageHandlerSpec<org.apache.commons.net.ftp.FTPFile,FtpMessageHandlerSpec>;\n// A RemoteFileOutboundGatewaySpec for FTP.\npublic class FtpOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<org.apache.commons.net.ftp.FTPFile,FtpOutboundGatewaySpec>;\n// A RemoteFileStreamingInboundChannelAdapterSpec for a FtpStreamingMessageSource.\npublic class FtpStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpStreamingInboundChannelAdapterSpec,FtpStreamingMessageSource>;\n", "des": "Provides FTP Components for the Java DSL."}
{"index": 2700, "repo": "spring-integration-ftp-6.1.2", "code": "package filters\n\n// Persistent file list filter using the server's file timestamp to detect if we've already 'seen' this file.\npublic class FtpPersistentAcceptOnceFileListFilter extends org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<org.apache.commons.net.ftp.FTPFile>;\n// Implementation of AbstractRegexPatternFileListFilter for FTP.\npublic class FtpRegexPatternFileListFilter extends org.springframework.integration.file.filters.AbstractRegexPatternFileListFilter<org.apache.commons.net.ftp.FTPFile>;\n// Implementation of AbstractSimplePatternFileListFilter for FTP.\npublic class FtpSimplePatternFileListFilter extends org.springframework.integration.file.filters.AbstractSimplePatternFileListFilter<org.apache.commons.net.ftp.FTPFile>;\n// FTP implementation of AbstractMarkerFilePresentFileListFilter.\npublic class FtpSystemMarkerFilePresentFileListFilter extends org.springframework.integration.file.filters.AbstractMarkerFilePresentFileListFilter<org.apache.commons.net.ftp.FTPFile>;\n", "des": "Provides classes supporting FTP file filtering."}
{"index": 2701, "repo": "spring-integration-ftp-6.1.2", "code": "package gateway\n\n// Outbound Gateway for performing remote file operations via FTP/FTPS.\npublic class FtpOutboundGateway extends org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway<org.apache.commons.net.ftp.FTPFile>;\n", "des": "Provides classes supporting FTP gateways."}
{"index": 2702, "repo": "spring-integration-ftp-6.1.2", "code": "package inbound\n\n// An implementation of AbstractInboundFileSynchronizer for FTP.\npublic class FtpInboundFileSynchronizer extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<org.apache.commons.net.ftp.FTPFile>;\n// A MessageSource implementation for FTP.\npublic class FtpInboundFileSynchronizingMessageSource extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<org.apache.commons.net.ftp.FTPFile>;\n// Message source for streaming FTP remote file contents.\npublic class FtpStreamingMessageSource extends org.springframework.integration.file.remote.AbstractRemoteFileStreamingMessageSource<org.apache.commons.net.ftp.FTPFile>;\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2703, "repo": "spring-integration-ftp-6.1.2", "code": "package outbound\n\n// The FTP specific FileTransferringMessageHandler extension.\npublic class FtpMessageHandler extends org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<org.apache.commons.net.ftp.FTPFile>;\n", "des": "Provides classes for the FTP outbound channel adapter."}
{"index": 2704, "repo": "spring-integration-ftp-6.1.2", "code": "package server\n\n// ApplicationEvent generated from Apache Mina ftp events.\npublic abstract class ApacheMinaFtpEvent extends org.springframework.integration.file.remote.server.FileServerEvent;\n// A listener for FTP events emitted by an Apache Mina ftp server.\npublic class ApacheMinaFtplet extends org.apache.ftpserver.ftplet.DefaultFtplet implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean;\n// An event emitted when a directory is created.\npublic class DirectoryCreatedEvent extends FtpRequestEvent;\n// An event that is emitted when a file is written.\npublic class FileWrittenEvent extends FtpRequestEvent;\n// Base class for all events having an FtpRequest.\npublic abstract class FtpRequestEvent extends ApacheMinaFtpEvent;\n// An event emitted when a path is moved.\npublic class PathMovedEvent extends FtpRequestEvent;\n// An event emitted when a file or directory is removed.\npublic class PathRemovedEvent extends FtpRequestEvent;\n// An event emitted when a session is closed.\npublic class SessionClosedEvent extends ApacheMinaFtpEvent;\n// An event emitted when a session is opened.\npublic class SessionOpenedEvent extends ApacheMinaFtpEvent;\n", "des": "Provides classes related to FTP servers."}
{"index": 2705, "repo": "spring-integration-ftp-6.1.2", "code": "package session\n\n// Base class for FTP SessionFactory implementations.\npublic abstract class AbstractFtpSessionFactory<T extends org.apache.commons.net.ftp.FTPClient> extends Object implements org.springframework.integration.file.remote.session.SessionFactory<org.apache.commons.net.ftp.FTPFile>;\n// Default implementation of FTP SessionFactory.\npublic class DefaultFtpSessionFactory extends AbstractFtpSessionFactory<org.apache.commons.net.ftp.FTPClient>;\n// SessionFactory for FTPS.\npublic class DefaultFtpsSessionFactory extends AbstractFtpSessionFactory<org.apache.commons.net.ftp.FTPSClient>;\n// A FileInfo implementation for FTP/FTPS.\npublic class FtpFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<org.apache.commons.net.ftp.FTPFile>;\n// FTP version of RemoteFileTemplate providing type-safe access to the underlying FTPClient object.\npublic class FtpRemoteFileTemplate extends org.springframework.integration.file.remote.RemoteFileTemplate<org.apache.commons.net.ftp.FTPFile>;\n// The FtpRemoteFileTemplate.exists(String) operation mode.\npublic static enum FtpRemoteFileTemplate.ExistsMode extends Enum<FtpRemoteFileTemplate.ExistsMode>;\n// Implementation of Session for FTP.\npublic class FtpSession extends Object implements org.springframework.integration.file.remote.session.Session<org.apache.commons.net.ftp.FTPFile>;\n", "des": "Provides classes supporting FTP sessions."}
{"index": 2706, "repo": "spring-batch-infrastructure-5.0.2", "code": "package item\n\n// Adapters for Plain Old Java Objects.\npackage item.adapter\n// AMQP related batch components.\npackage item.amqp\n// Spring Data related readers and writers.\npackage item.data\n// Infrastructure implementations of database based item readers and writers.\npackage item.database\n// Infrastructure implementations of io file concerns.\npackage item.file\n// Adapters for java.util.function components.\npackage item.function\n// JMS based reader/writer and related components.\npackage item.jms\n// Infrastructure implementations of JSON input and output.\npackage item.json\n// Apache Kafka related readers and writers\npackage item.kafka\n// This package contains the classes required for using the LdifParser in Spring LDAP.\npackage item.ldif\n// Java Mail based components.\npackage item.mail\n// Internal support package\npackage item.support\n// Infrastructure utility classes.\npackage item.util\n// Infrastructure implementations of item validator concerns.\npackage item.validator\n// Infrastructure implementations of xml input and output.\npackage item.xml\n// Encapsulation of a list of items to be processed and possibly a list of failed items to be skipped.\npublic class Chunk<W> extends Object implements Iterable<W>, Serializable;\n// Object representing a context for an ItemStream.\npublic class ExecutionContext extends Object implements Serializable;\n// Marker interface indicating that an item should have the item count set on it.\npublic interface ItemCountAware;\n// Interface for item transformation.\n@FunctionalInterface public interface ItemProcessor<I,O>;\n// Strategy interface for providing the data.\n@FunctionalInterface public interface ItemReader<T>;\n// A base exception class that all exceptions thrown from an ItemReader extend.\npublic abstract class ItemReaderException extends RuntimeException;\n// Marker interface defining a contract for periodically storing state and restoring from that state should an error occur.\npublic interface ItemStream;\n// Exception representing any errors encountered while processing a stream.\npublic class ItemStreamException extends RuntimeException;\n// Convenience interface that combines ItemStream and ItemReader .\npublic interface ItemStreamReader<T> extends ItemStream, ItemReader<T>;\n// Empty method implementation of ItemStream.\npublic abstract class ItemStreamSupport extends Object implements ItemStream;\n", "des": "Infrastructure interfaces and primary dependencies for item concerns."}
{"index": 2707, "repo": "spring-batch-infrastructure-5.0.2", "code": "package adapter\n\n// Superclass for delegating classes which dynamically call a custom method of injected object.\npublic abstract class AbstractMethodInvokingDelegator<T> extends Object implements org.springframework.beans.factory.InitializingBean;\n// Used to wrap a Throwable (not an Exception) thrown by a reflectively-invoked delegate.\npublic static class AbstractMethodInvokingDelegator.InvocationTargetThrowableWrapper extends RuntimeException;\n// Indicates an error has been encountered while trying to dynamically invoke a method e.g.\npublic class DynamicMethodInvocationException extends RuntimeException;\n// A MethodInvoker that is a bit relaxed about its arguments.\npublic class HippyMethodInvoker extends org.springframework.util.MethodInvoker;\n// Invokes a custom method on a delegate plain old Java object which itself processes an item.\npublic class ItemProcessorAdapter<I,O> extends AbstractMethodInvokingDelegator<O> implements ItemProcessor<I,O>;\n// Invokes a custom method on a delegate plain old Java object which itself provides an item.\npublic class ItemReaderAdapter<T> extends AbstractMethodInvokingDelegator<T> implements ItemReader<T>;\n// Delegates item processing to a custom method - passes the item as an argument for the delegate method.\npublic class ItemWriterAdapter<T> extends AbstractMethodInvokingDelegator<T> implements ItemWriter<T>;\n// Delegates processing to a custom method - extracts property values from item object and uses them as arguments for the delegate method.\npublic class PropertyExtractingDelegatingItemWriter<T> extends AbstractMethodInvokingDelegator<T> implements ItemWriter<T>;\n", "des": "Adapters for Plain Old Java Objects."}
{"index": 2708, "repo": "spring-batch-infrastructure-5.0.2", "code": "package amqp\n\n// Builders for AMQP item reader and writer.\npackage amqp.builder\n// AMQP ItemReader implementation using an AmqpTemplate to receive and/or convert messages.\npublic class AmqpItemReader<T> extends Object implements ItemReader<T>;\n// AMQP ItemWriter implementation using an AmqpTemplate to send messages.\npublic class AmqpItemWriter<T> extends Object implements ItemWriter<T>;\n", "des": "AMQP related batch components."}
{"index": 2709, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder\n\n// A builder implementation for the AmqpItemReader\npublic class AmqpItemReaderBuilder<T> extends Object;\n// A builder implementation for the AmqpItemWriter\npublic class AmqpItemWriterBuilder<T> extends Object;\n", "des": "Builders for AMQP item reader and writer."}
{"index": 2710, "repo": "spring-batch-infrastructure-5.0.2", "code": "package data\n\n// Builders for Spring Data item readers and writers.\npackage data.builder\n// A base class that handles basic reading logic based on the paginated semantics of Spring Data's paginated facilities.\npublic abstract class AbstractPaginatedDataItemReader<T> extends AbstractItemCountingItemStreamItemReader<T>;\n// Restartable ItemReader that reads documents from MongoDB via a paging technique.\npublic class MongoItemReader<T> extends AbstractPaginatedDataItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n// A ItemWriter implementation that writes to a MongoDB store using an implementation of Spring Data's MongoOperations.\npublic class MongoItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated public class Neo4jItemReader<T> extends AbstractPaginatedDataItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated public class Neo4jItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean;\n// A ItemReader that reads records utilizing a PagingAndSortingRepository.\npublic class RepositoryItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n// A ItemWriter wrapper for a CrudRepository from Spring Data.\npublic class RepositoryItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean;\n", "des": "Spring Data related readers and writers."}
{"index": 2711, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder\n\n// A builder implementation for the MongoItemReader\npublic class MongoItemReaderBuilder<T> extends Object;\n// A builder implementation for the MongoItemWriter\npublic class MongoItemWriterBuilder<T> extends Object;\n// \n@Deprecated public class Neo4jItemReaderBuilder<T> extends Object;\n// \n@Deprecated public class Neo4jItemWriterBuilder<T> extends Object;\n// A builder implementation for the RepositoryItemReader.\npublic class RepositoryItemReaderBuilder<T> extends Object;\n// A builder implementation for the RepositoryItemWriter.\npublic class RepositoryItemWriterBuilder<T> extends Object;\n// Establishes a proxy that will capture a the Repository and the associated methodName that will be used by the writer.\npublic static class RepositoryItemWriterBuilder.RepositoryMethodReference<T> extends Object;\n", "des": "Builders for Spring Data item readers and writers."}
{"index": 2712, "repo": "spring-batch-infrastructure-5.0.2", "code": "package database\n\n// Builders for database item readers and writers.\npackage database.builder\n// Support classes for components using various ORM related technologies.\npackage database.orm\n// Support classes for database specific semantics.\npackage database.support\n// Abstract base class for any simple item reader that opens a database cursor and continually retrieves the next row in the ResultSet.\npublic abstract class AbstractCursorItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n// Abstract ItemStreamReader for to extend when reading database records in a paging fashion.\npublic abstract class AbstractPagingItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n// A convenient implementation for providing BeanPropertySqlParameterSource when the item has JavaBean properties that correspond to names used for parameters in the SQL statement.\npublic class BeanPropertyItemSqlParameterSourceProvider<T> extends Object implements ItemSqlParameterSourceProvider<T>;\n// Implementation of SmartDataSource that is capable of keeping a single JDBC Connection which is NOT closed after each use even if Connection.close() is called.\npublic class ExtendedConnectionDataSourceProxy extends Object implements org.springframework.jdbc.datasource.SmartDataSource, org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateCursorItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemReaderHelper<T> extends Object implements org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernatePagingItemReader<T> extends AbstractPagingItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n", "des": "Infrastructure implementations of database based item readers and writers."}
{"index": 2713, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder\n\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateCursorItemReaderBuilder<T> extends Object;\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemWriterBuilder<T> extends Object;\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernatePagingItemReaderBuilder<T> extends Object;\n// A builder implementation for the JdbcBatchItemWriter.\npublic class JdbcBatchItemWriterBuilder<T> extends Object;\n// Builder for the JdbcCursorItemReader\npublic class JdbcCursorItemReaderBuilder<T> extends Object;\n// This is a builder for the JdbcPagingItemReader.\npublic class JdbcPagingItemReaderBuilder<T> extends Object;\n// Builder for JpaCursorItemReader.\npublic class JpaCursorItemReaderBuilder<T> extends Object;\n// A builder for the JpaItemWriter.\npublic class JpaItemWriterBuilder<T> extends Object;\n// Creates a fully qualified JpaPagingItemReader.\npublic class JpaPagingItemReaderBuilder<T> extends Object;\n// A fluent builder API for the configuration of a StoredProcedureItemReader.\npublic class StoredProcedureItemReaderBuilder<T> extends Object;\n", "des": "Builders for database item readers and writers."}
{"index": 2714, "repo": "spring-batch-infrastructure-5.0.2", "code": "package orm\n\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public abstract class AbstractHibernateQueryProvider<T> extends Object implements HibernateQueryProvider<T>;\n// Abstract JPA Query Provider to serve as a base class for all JPA Query providers.\npublic abstract class AbstractJpaQueryProvider extends Object implements JpaQueryProvider, org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateNativeQueryProvider<E> extends AbstractHibernateQueryProvider<E>;\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public interface HibernateQueryProvider<T>;\n// This query provider creates JPA named Querys.\npublic class JpaNamedQueryProvider<E> extends AbstractJpaQueryProvider;\n// This query provider creates JPA Querys from injected native SQL queries.\npublic class JpaNativeQueryProvider<E> extends AbstractJpaQueryProvider;\n// Interface defining the functionality to be provided for generating queries for use with JPA ItemReaders or other custom built artifacts.\npublic interface JpaQueryProvider;\n", "des": "Support classes for components using various ORM related technologies."}
{"index": 2715, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support\n\n// Abstract SQL Paging Query Provider to serve as a base class for all provided SQL paging query providers.\npublic abstract class AbstractSqlPagingQueryProvider extends Object implements PagingQueryProvider;\n// Implementation of the ItemPreparedStatementSetter interface that assumes all keys are contained within a Map with the column name as the key.\npublic class ColumnMapItemPreparedStatementSetter extends Object implements ItemPreparedStatementSetter<Map<String,Object>>;\n// Factory for creating DataFieldMaxValueIncrementer implementations based upon a provided string.\npublic interface DataFieldMaxValueIncrementerFactory;\n// DB2 implementation of a PagingQueryProvider using database specific features.\npublic class Db2PagingQueryProvider extends SqlWindowingPagingQueryProvider;\n// Default implementation of the DataFieldMaxValueIncrementerFactory interface.\npublic class DefaultDataFieldMaxValueIncrementerFactory extends Object implements DataFieldMaxValueIncrementerFactory;\n// Derby implementation of a PagingQueryProvider using standard SQL:2003 windowing functions.\npublic class DerbyPagingQueryProvider extends SqlWindowingPagingQueryProvider;\n// H2 implementation of a PagingQueryProvider using database specific features.\npublic class H2PagingQueryProvider extends AbstractSqlPagingQueryProvider;\n// SAP HANA implementation of a PagingQueryProvider using database specific features.\npublic class HanaPagingQueryProvider extends AbstractSqlPagingQueryProvider;\n// HSQLDB implementation of a PagingQueryProvider using database specific features.\npublic class HsqlPagingQueryProvider extends AbstractSqlPagingQueryProvider;\n// MariaDB implementation of a PagingQueryProvider using database specific features.\npublic class MariaDBPagingQueryProvider extends AbstractSqlPagingQueryProvider;\n// MySQL implementation of a PagingQueryProvider using database specific features.\npublic class MySqlPagingQueryProvider extends AbstractSqlPagingQueryProvider;\n// Oracle implementation of a PagingQueryProvider using database specific features.\npublic class OraclePagingQueryProvider extends AbstractSqlPagingQueryProvider;\n// Postgres implementation of a PagingQueryProvider using database specific features.\npublic class PostgresPagingQueryProvider extends AbstractSqlPagingQueryProvider;\n// SQLite implementation of a PagingQueryProvider using database specific features.\npublic class SqlitePagingQueryProvider extends AbstractSqlPagingQueryProvider;\n", "des": "Support classes for database specific semantics."}
{"index": 2716, "repo": "spring-batch-infrastructure-5.0.2", "code": "package file\n\n// Builders for file item readers and writers.\npackage file.builder\n// Infrastructure implementations of io file support mapping concerns.\npackage file.mapping\n// Infrastructure implementations of io file support separator concerns.\npackage file.separator\n// Infrastructure implementations of io file support transform concerns.\npackage file.transform\n// A factory strategy for custom extensions of BufferedReader allowing customisation of the standard behaviour of the java.io variety.\npublic interface BufferedReaderFactory;\n// \npublic class DefaultBufferedReaderFactory extends Object implements BufferedReaderFactory;\n// Callback interface for writing a footer to a file.\npublic interface FlatFileFooterCallback;\n// Callback interface for writing a header to a file.\npublic interface FlatFileHeaderCallback;\n// Restartable ItemReader that reads lines from input FlatFileItemReader.setResource(Resource).\npublic class FlatFileItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean;\n// This class is an item writer that writes data to a file or stream.\npublic class FlatFileItemWriter<T> extends AbstractFileItemWriter<T>;\n// Exception thrown when errors are encountered parsing flat files.\npublic class FlatFileParseException extends ParseException;\n// Callback interface for handling a line from file.\npublic interface LineCallbackHandler;\n// Interface for mapping lines (strings) to domain objects typically used to map lines read from a file to domain objects on a per line basis.\npublic interface LineMapper<T>;\n// Reads items from multiple resources sequentially - resource list is given by MultiResourceItemReader.setResources(Resource[]), the actual reading is delegated to MultiResourceItemReader.setDelegate(ResourceAwareItemReaderItemStream).\npublic class MultiResourceItemReader<T> extends AbstractItemStreamItemReader<T>;\n// Wraps a ResourceAwareItemWriterItemStream and creates a new output resource when the count of items written in current resource exceeds MultiResourceItemWriter.setItemCountLimitPerResource(int).\npublic class MultiResourceItemWriter<T> extends AbstractItemStreamItemWriter<T>;\n// Exception thrown when errors are encountered with the underlying resource.\npublic class NonTransientFlatFileException extends NonTransientResourceException;\n", "des": "Infrastructure implementations of io file concerns."}
{"index": 2717, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder\n\n// A builder implementation for the FlatFileItemReader.\npublic class FlatFileItemReaderBuilder<T> extends Object;\n// A builder for constructing a DelimitedLineTokenizer\npublic static class FlatFileItemReaderBuilder.DelimitedBuilder<T> extends Object;\n// A builder for constructing a FixedLengthTokenizer\npublic static class FlatFileItemReaderBuilder.FixedLengthBuilder<T> extends Object;\n// A builder implementation for the FlatFileItemWriter\npublic class FlatFileItemWriterBuilder<T> extends Object;\n// A builder for constructing a DelimitedLineAggregator\npublic static class FlatFileItemWriterBuilder.DelimitedBuilder<T> extends Object;\n// A builder for constructing a FormatterLineAggregator.\npublic static class FlatFileItemWriterBuilder.FormattedBuilder<T> extends Object;\n// A builder implementation for the MultiResourceItemReader.\npublic class MultiResourceItemReaderBuilder<T> extends Object;\n// A builder implementation for the MultiResourceItemWriter.\npublic class MultiResourceItemWriterBuilder<T> extends Object;\n", "des": "Builders for file item readers and writers."}
{"index": 2718, "repo": "spring-batch-infrastructure-5.0.2", "code": "package mapping\n\n// A basic array mapper, returning the values backing a fieldset.\npublic class ArrayFieldSetMapper extends Object implements FieldSetMapper<String[]>;\n// FieldSetMapper implementation based on bean property paths.\npublic class BeanWrapperFieldSetMapper<T> extends DefaultPropertyEditorRegistrar implements FieldSetMapper<T>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\n// Two-phase LineMapper implementation consisting of tokenization of the line into FieldSet followed by mapping to item.\npublic class DefaultLineMapper<T> extends Object implements LineMapper<T>, org.springframework.beans.factory.InitializingBean;\n// Interface that is used to map data obtained from a FieldSet into an object.\npublic interface FieldSetMapper<T>;\n// Interpret a line as a JSON object and parse it up to a Map.\npublic class JsonLineMapper extends Object implements LineMapper<Map<String,Object>>;\n// Pass through FieldSetMapper useful for passing a FieldSet back directly rather than a mapped object.\npublic class PassThroughFieldSetMapper extends Object implements FieldSetMapper<FieldSet>;\n// Pass through LineMapper useful for passing the original String back directly rather than a mapped object.\npublic class PassThroughLineMapper extends Object implements LineMapper<String>;\n// A LineMapper implementation that stores a mapping of String patterns to delegate LineTokenizers as well as a mapping of String patterns to delegate FieldSetMappers.\npublic class PatternMatchingCompositeLineMapper<T> extends Object implements LineMapper<T>, org.springframework.beans.factory.InitializingBean;\n// This is a FieldSetMapper that supports Java records mapping (requires JKD 14 or higher).\npublic class RecordFieldSetMapper<T> extends Object implements FieldSetMapper<T>;\n", "des": "Infrastructure implementations of io file support mapping concerns."}
{"index": 2719, "repo": "spring-batch-infrastructure-5.0.2", "code": "package separator\n\n// A RecordSeparatorPolicy that treats all lines as record endings, as long as they do not have unterminated quotes, and do not end in a continuation marker.\npublic class DefaultRecordSeparatorPolicy extends SimpleRecordSeparatorPolicy;\n// JSON-based record separator.\npublic class JsonRecordSeparatorPolicy extends SimpleRecordSeparatorPolicy;\n// Policy for text file-based input sources to determine the end of a record, e.g.\npublic interface RecordSeparatorPolicy;\n// Simplest possible RecordSeparatorPolicy - treats all lines as record endings.\npublic class SimpleRecordSeparatorPolicy extends Object implements RecordSeparatorPolicy;\n// A RecordSeparatorPolicy that looks for an exact match for a String at the end of a line (e.g.\npublic class SuffixRecordSeparatorPolicy extends DefaultRecordSeparatorPolicy;\n", "des": "Infrastructure implementations of io file support separator concerns."}
{"index": 2720, "repo": "spring-batch-infrastructure-5.0.2", "code": "package transform\n\n// Abstract class handling common concerns of various LineTokenizer implementations such as dealing with names and actual construction of FieldSet\npublic abstract class AbstractLineTokenizer extends Object implements LineTokenizer;\n// This is a field extractor for a java bean.\npublic class BeanWrapperFieldExtractor<T> extends Object implements FieldExtractor<T>, org.springframework.beans.factory.InitializingBean;\n// \npublic class ConversionException extends RuntimeException;\n// Default implementation of FieldSet using Java using Java primitive and standard types and utilities.\npublic class DefaultFieldSet extends Object implements FieldSet;\n// Default implementation of FieldSetFactory with no special knowledge of the FieldSet required.\npublic class DefaultFieldSetFactory extends Object implements FieldSetFactory;\n// A LineAggregator implementation that converts an object into a delimited list of strings.\npublic class DelimitedLineAggregator<T> extends ExtractorLineAggregator<T>;\n// A LineTokenizer implementation that splits the input String on a configurable delimiter.\npublic class DelimitedLineTokenizer extends AbstractLineTokenizer implements org.springframework.beans.factory.InitializingBean;\n// An abstract LineAggregator implementation that utilizes a FieldExtractor to convert the incoming object to an array of its parts.\npublic abstract class ExtractorLineAggregator<T> extends Object implements LineAggregator<T>;\n// This class will convert an object to an array of its parts.\npublic interface FieldExtractor<T>;\n// Interface used by flat file input sources to encapsulate concerns of converting an array of Strings to Java native types.\npublic interface FieldSet;\n// Factory interface for creating FieldSet instances.\npublic interface FieldSetFactory;\n// Tokenizer used to process data obtained from files with fixed-length format.\npublic class FixedLengthTokenizer extends AbstractLineTokenizer;\n// Exception indicating that some type of error has occurred while attempting to parse a line of input into tokens.\npublic class FlatFileFormatException extends RuntimeException;\n// A LineAggregator implementation which produces a String by aggregating the provided item via the Formatter syntax.\npublic class FormatterLineAggregator<T> extends ExtractorLineAggregator<T>;\n// Exception indicating that the line size expected is different from what is expected.\npublic class IncorrectLineLengthException extends FlatFileFormatException;\n", "des": "Infrastructure implementations of io file support transform concerns."}
{"index": 2721, "repo": "spring-batch-infrastructure-5.0.2", "code": "package function\n\n// An ItemProcessor implementation that delegates to a Function\npublic class FunctionItemProcessor<I,O> extends Object implements ItemProcessor<I,O>;\n", "des": "Adapters for java.util.function components."}
{"index": 2722, "repo": "spring-batch-infrastructure-5.0.2", "code": "package jms\n\n// Builders for JMS item reader and writer.\npackage jms.builder\n// An ItemReader for JMS using a JmsTemplate.\npublic class JmsItemReader<T> extends Object implements ItemReader<T>, org.springframework.beans.factory.InitializingBean;\n// An ItemWriter for JMS using a JmsTemplate.\npublic class JmsItemWriter<T> extends Object implements ItemWriter<T>;\n// A MethodArgumentsKeyGenerator for JMS\npublic class JmsMethodArgumentsKeyGenerator extends Object implements org.springframework.retry.interceptor.MethodArgumentsKeyGenerator;\n// \npublic class JmsMethodInvocationRecoverer<T> extends Object implements org.springframework.retry.interceptor.MethodInvocationRecoverer<T>;\n// A NewMethodArgumentsIdentifier for JMS that looks for a message in the arguments and checks its delivery status.\npublic class JmsNewMethodArgumentsIdentifier<T> extends Object implements org.springframework.retry.interceptor.NewMethodArgumentsIdentifier;\n", "des": "JMS based reader/writer and related components."}
{"index": 2723, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder\n\n// Creates a fully qualified JmsItemReader.\npublic class JmsItemReaderBuilder<T> extends Object;\n// Creates a fully qualified JmsItemWriter.\npublic class JmsItemWriterBuilder<T> extends Object;\n", "des": "Builders for JMS item reader and writer."}
{"index": 2724, "repo": "spring-batch-infrastructure-5.0.2", "code": "package json\n\n// Builders for JSON item reader and writer.\npackage json.builder\n// A json object marshaller that uses Google Gson to marshal an object into a json representation.\npublic class GsonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T>;\n// Implementation of JsonObjectReader based on Google Gson.\npublic class GsonJsonObjectReader<T> extends Object implements JsonObjectReader<T>;\n// A json object marshaller that uses Jackson to marshal an object into a json representation.\npublic class JacksonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T>;\n// Implementation of JsonObjectReader based on Jackson.\npublic class JacksonJsonObjectReader<T> extends Object implements JsonObjectReader<T>;\n// Item writer that writes data in json format to an output file.\npublic class JsonFileItemWriter<T> extends AbstractFileItemWriter<T>;\n// ItemStreamReader implementation that reads Json objects from a Resource having the following format:\npublic class JsonItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>;\n// Strategy interface to marshal an object into a json representation.\npublic interface JsonObjectMarshaller<T>;\n// Strategy interface for Json readers.\npublic interface JsonObjectReader<T>;\n", "des": "Infrastructure implementations of JSON input and output."}
{"index": 2725, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder\n\n// Builder for JsonFileItemWriter.\npublic class JsonFileItemWriterBuilder<T> extends Object;\n// A builder for JsonItemReader.\npublic class JsonItemReaderBuilder<T> extends Object;\n", "des": "Builders for JSON item reader and writer."}
{"index": 2726, "repo": "spring-batch-infrastructure-5.0.2", "code": "package kafka\n\n// Builders for Apache Kafka item reader and writer.\npackage kafka.builder\n// An ItemReader implementation for Apache Kafka.\npublic class KafkaItemReader<K,V> extends AbstractItemStreamItemReader<V>;\n// An ItemWriter implementation for Apache Kafka using a KafkaTemplate with default topic configured.\npublic class KafkaItemWriter<K,T> extends KeyValueItemWriter<K,T>;\n", "des": "Apache Kafka related readers and writers"}
{"index": 2727, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder\n\n// A builder implementation for the KafkaItemReader.\npublic class KafkaItemReaderBuilder<K,V> extends Object;\n// A builder implementation for the KafkaItemWriter\npublic class KafkaItemWriterBuilder<K,V> extends Object;\n", "des": "Builders for Apache Kafka item reader and writer."}
{"index": 2728, "repo": "spring-batch-infrastructure-5.0.2", "code": "package ldif\n\n// Builders for LDIF related components.\npackage ldif.builder\n// The LdifReader is an adaptation of the FlatFileItemReader built around an LdifParser.\npublic class LdifReader extends AbstractItemCountingItemStreamItemReader<org.springframework.ldap.core.LdapAttributes> implements ResourceAwareItemReaderItemStream<org.springframework.ldap.core.LdapAttributes>, org.springframework.beans.factory.InitializingBean;\n// The MappingLdifReader is an adaptation of the FlatFileItemReader built around an LdifParser.\npublic class MappingLdifReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean;\n// This interface can be used to operate on skipped records during open in the LdifReader and the MappingLdifReader.\npublic interface RecordCallbackHandler;\n// This interface should be implemented to map LdapAttributes objects to POJOs.\npublic interface RecordMapper<T>;\n", "des": "This package contains the classes required for using the LdifParser in Spring LDAP."}
{"index": 2729, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder\n\n// Creates a fully qualified LdifReader.\npublic class LdifReaderBuilder extends Object;\n// Creates a fully qualified MappingLdifReader.\npublic class MappingLdifReaderBuilder<T> extends Object;\n", "des": "Builders for LDIF related components."}
{"index": 2730, "repo": "spring-batch-infrastructure-5.0.2", "code": "package mail\n\n// Builders for JavaMail related components.\npackage mail.builder\n// JavaMail related components.\npackage mail.javamail\n// This MailErrorHandler implementation simply rethrows the exception it receives.\npublic class DefaultMailErrorHandler extends Object implements MailErrorHandler;\n// This class is used to handle errors that occur when email messages are unable to be sent.\npublic interface MailErrorHandler;\n// A simple ItemWriter that can send mail messages.\npublic class SimpleMailMessageItemWriter extends Object implements ItemWriter<org.springframework.mail.SimpleMailMessage>, org.springframework.beans.factory.InitializingBean;\n", "des": "Java Mail based components."}
{"index": 2731, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder\n\n// Creates a fully qualified SimpleMailMessageItemWriter.\npublic class SimpleMailMessageItemWriterBuilder extends Object;\n", "des": "Builders for JavaMail related components."}
{"index": 2732, "repo": "spring-batch-infrastructure-5.0.2", "code": "package javamail\n\n// A simple ItemWriter that can send mail messages.\npublic class MimeMessageItemWriter extends Object implements ItemWriter<jakarta.mail.internet.MimeMessage>;\n", "des": "JavaMail related components."}
{"index": 2733, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support\n\n// Builders for support classes.\npackage support.builder\n// Base class for item writers that write data to a file or stream.\npublic abstract class AbstractFileItemWriter<T> extends AbstractItemStreamItemWriter<T> implements ResourceAwareItemWriterItemStream<T>, org.springframework.beans.factory.InitializingBean;\n// Abstract superclass for ItemReaders that supports restart by storing item count in the ExecutionContext (therefore requires item ordering to be preserved between runs).\npublic abstract class AbstractItemCountingItemStreamItemReader<T> extends AbstractItemStreamItemReader<T>;\n// Base class for ItemReader implementations.\npublic abstract class AbstractItemStreamItemReader<T> extends ItemStreamSupport implements ItemStreamReader<T>;\n// Base class for ItemWriter implementations.\npublic abstract class AbstractItemStreamItemWriter<T> extends ItemStreamSupport implements ItemStreamWriter<T>;\n// Calls one of a collection of ItemProcessors, based on a router pattern implemented through the provided Classifier.\npublic class ClassifierCompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O>;\n// Calls one of a collection of ItemWriters for each item, based on a router pattern implemented through the provided Classifier.\npublic class ClassifierCompositeItemWriter<T> extends Object implements ItemWriter<T>;\n// Composite ItemProcessor that passes the item through a sequence of injected ItemTransformers (return value of previous transformation is the entry value of the next). Note the user is responsible for injecting a chain of ItemProcessors that conforms to declared input and output types.\npublic class CompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O>, org.springframework.beans.factory.InitializingBean;\n// Simple ItemStream that delegates to a list of other streams.\npublic class CompositeItemStream extends Object implements ItemStream;\n// Calls a collection of ItemWriters in fixed-order sequence. The implementation is thread-safe if all delegates are thread-safe.\npublic class CompositeItemWriter<T> extends Object implements ItemStreamWriter<T>, org.springframework.beans.factory.InitializingBean;\n// An ItemReader that pulls data from a Iterator or Iterable using the constructors.\npublic class IteratorItemReader<T> extends Object implements ItemReader<T>;\n", "des": "Internal support package"}
{"index": 2734, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder\n\n// Creates a fully qualified ClassifierCompositeItemProcessor.\npublic class ClassifierCompositeItemProcessorBuilder<I,O> extends Object;\n// Creates a fully qualified ClassifierCompositeItemWriter.\npublic class ClassifierCompositeItemWriterBuilder<T> extends Object;\n// Creates a fully qualified CompositeItemProcessorBuilder.\npublic class CompositeItemProcessorBuilder<I,O> extends Object;\n// Creates a fully qualified CompositeItemWriter.\npublic class CompositeItemWriterBuilder<T> extends Object;\n// Creates a fully qualified ScriptItemProcessor.\npublic class ScriptItemProcessorBuilder<I,O> extends Object;\n// Creates a fully qualified SingleItemPeekeableItemReader.\npublic class SingleItemPeekableItemReaderBuilder<T> extends Object;\n// Creates a fully qualified SynchronizedItemStreamReader.\npublic class SynchronizedItemStreamReaderBuilder<T> extends Object;\n// Creates a fully qualified SynchronizedItemStreamWriter.\npublic class SynchronizedItemStreamWriterBuilder<T> extends Object;\n", "des": "Builders for support classes."}
{"index": 2735, "repo": "spring-batch-infrastructure-5.0.2", "code": "package util\n\n// Facilitates assigning names to objects persisting data in ExecutionContext and generating keys for ExecutionContext based on the name.\npublic class ExecutionContextUserSupport extends Object;\n// Utility methods for files used in batch processing.\npublic final class FileUtils extends Object;\n", "des": "Infrastructure utility classes."}
{"index": 2736, "repo": "spring-batch-infrastructure-5.0.2", "code": "package validator\n\n// A ValidatingItemProcessor that uses the Bean Validation API (JSR-303) to validate items.\npublic class BeanValidatingItemProcessor<T> extends ValidatingItemProcessor<T>;\n// Adapts the Validator interface to Validator.\npublic class SpringValidator<T> extends Object implements Validator<T>, org.springframework.beans.factory.InitializingBean;\n// Simple implementation of ItemProcessor that validates input and returns it without modifications.\npublic class ValidatingItemProcessor<T> extends Object implements ItemProcessor<T,T>, org.springframework.beans.factory.InitializingBean;\n// This exception should be thrown when there are validation errors.\npublic class ValidationException extends ItemReaderException;\n// Interface used to validate objects.\npublic interface Validator<T>;\n", "des": "Infrastructure implementations of item validator concerns."}
{"index": 2737, "repo": "spring-batch-infrastructure-5.0.2", "code": "package xml\n\n// Builders for Stax event item reader and writer.\npackage xml.builder\n// Item reader and writer based on Stax.\npackage xml.stax\n// Item reader for reading XML input based on StAX.\npublic class StaxEventItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean;\n// An implementation of ItemWriter which uses StAX and Marshaller for serializing object to XML.\npublic class StaxEventItemWriter<T> extends AbstractItemStreamItemWriter<T> implements ResourceAwareItemWriterItemStream<T>, org.springframework.beans.factory.InitializingBean;\n// Callback interface for writing to an XML file - useful e.g.\npublic interface StaxWriterCallback;\n", "des": "Infrastructure implementations of xml input and output."}
{"index": 2738, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder\n\n// A fluent builder for the StaxEventItemReader\npublic class StaxEventItemReaderBuilder<T> extends Object;\n// A builder for the StaxEventItemWriter.\npublic class StaxEventItemWriterBuilder<T> extends Object;\n", "des": "Builders for Stax event item reader and writer."}
{"index": 2739, "repo": "spring-batch-infrastructure-5.0.2", "code": "package stax\n\n// Default implementation of FragmentEventReader\npublic class DefaultFragmentEventReader extends Object implements FragmentEventReader;\n// Interface for event readers which support treating XML fragments as standalone XML documents by wrapping the fragments with StartDocument and EndDocument events.\npublic interface FragmentEventReader extends XMLEventReader;\n// Delegating XMLEventWriter, which ignores start and end document events, but passes through everything else.\npublic class NoStartEndDocumentStreamWriter extends Object;\n// Delegating XMLEventWriter, which collects the QNames of elements that were opened but not closed.\npublic class UnclosedElementCollectingEventWriter extends Object;\n// Delegating XMLEventWriter, which writes EndElement events that match a given collection of QNames directly to the underlying java.io.Writer instead of to the delegate XMLEventWriter.\npublic class UnopenedElementClosingEventWriter extends Object;\n", "des": "Item reader and writer based on Stax."}
{"index": 2740, "repo": "spring-batch-infrastructure-5.0.2", "code": "package poller\n\n// A Poller that uses the callers thread to poll for a result as soon as it is asked for.\npublic class DirectPoller<S> extends Object implements Poller<S>;\n// Interface for polling a Callable instance provided by the user.\npublic interface Poller<T>;\n", "des": "APIs for polling support."}
{"index": 2741, "repo": "spring-batch-infrastructure-5.0.2", "code": "package repeat\n\n// Infrastructure implementations of repeat callback concerns.\npackage repeat.callback\n// Infrastructure implementations of repeat context concerns.\npackage repeat.context\n// Infrastructure implementations of repeat exception handler concerns.\npackage repeat.exception\n// Infrastructure implementations of repeat aop concerns.\npackage repeat.interceptor\n// Infrastructure implementations of repeat interceptor concerns.\npackage repeat.listener\n// Infrastructure implementations of repeat policy concerns.\npackage repeat.policy\n// Infrastructure implementations of repeat support concerns.\npackage repeat.support\n// Interface for batch completion policies, to enable batch operations to strategise normal completion conditions.\npublic interface CompletionPolicy;\n// Callback interface for batch operations.\npublic interface RepeatCallback;\n// Base interface for context which controls the state and completion / termination of a batch step.\npublic interface RepeatContext extends org.springframework.core.AttributeAccessor;\n// \npublic class RepeatException extends org.springframework.core.NestedRuntimeException;\n// Interface for listeners to the batch process.\npublic interface RepeatListener;\n// The main interface providing access to batch operations.\n@FunctionalInterface public interface RepeatOperations;\n// \npublic enum RepeatStatus extends Enum<RepeatStatus>;\n", "des": "Infrastructure implementations of repeat concerns."}
{"index": 2742, "repo": "spring-batch-infrastructure-5.0.2", "code": "package callback\n\n// Callback that delegates to another callback, via a RepeatOperations instance.\npublic class NestedRepeatCallback extends Object implements RepeatCallback;\n", "des": "Infrastructure implementations of repeat callback concerns."}
{"index": 2743, "repo": "spring-batch-infrastructure-5.0.2", "code": "package context\n\n// Helper class for policies that need to count the number of occurrences of some event (e.g.\npublic class RepeatContextCounter extends Object;\n// \npublic class RepeatContextSupport extends SynchronizedAttributeAccessor implements RepeatContext;\n// An AttributeAccessor that synchronizes on a mutex (not this) before modifying or accessing the underlying attributes.\npublic class SynchronizedAttributeAccessor extends Object implements org.springframework.core.AttributeAccessor;\n", "des": "Infrastructure implementations of repeat context concerns."}
{"index": 2744, "repo": "spring-batch-infrastructure-5.0.2", "code": "package exception\n\n// Composite ExceptionHandler that loops though a list of delegates.\npublic class CompositeExceptionHandler extends Object implements ExceptionHandler;\n// Default implementation of ExceptionHandler - just re-throws the exception it encounters.\npublic class DefaultExceptionHandler extends Object implements ExceptionHandler;\n// Handler to allow strategies for re-throwing exceptions.\n@FunctionalInterface public interface ExceptionHandler;\n// Implementation of ExceptionHandler based on an Classifier.\npublic class LogOrRethrowExceptionHandler extends Object implements ExceptionHandler;\n// Logging levels for the handler.\npublic static enum LogOrRethrowExceptionHandler.Level extends Enum<LogOrRethrowExceptionHandler.Level>;\n// Implementation of ExceptionHandler that rethrows when exceptions of a given type reach a threshold.\npublic class RethrowOnThresholdExceptionHandler extends Object implements ExceptionHandler;\n// Simple implementation of exception handler which looks for given exception types.\npublic class SimpleLimitExceptionHandler extends Object implements ExceptionHandler, org.springframework.beans.factory.InitializingBean;\n", "des": "Infrastructure implementations of repeat exception handler concerns."}
{"index": 2745, "repo": "spring-batch-infrastructure-5.0.2", "code": "package interceptor\n\n// A MethodInterceptor that can be used to automatically repeat calls to a method on a service.\npublic class RepeatOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor;\n", "des": "Infrastructure implementations of repeat aop concerns."}
{"index": 2746, "repo": "spring-batch-infrastructure-5.0.2", "code": "package listener\n\n// Allows a user to register one or more RepeatListeners to be notified on batch events.\npublic class CompositeRepeatListener extends Object implements RepeatListener;\n// \n@Deprecated public class RepeatListenerSupport extends Object implements RepeatListener;\n", "des": "Infrastructure implementations of repeat interceptor concerns."}
{"index": 2747, "repo": "spring-batch-infrastructure-5.0.2", "code": "package policy\n\n// Very simple base class for CompletionPolicy implementations.\npublic class CompletionPolicySupport extends Object implements CompletionPolicy;\n// Composite policy that loops through a list of delegate policies and answers calls by a consensus.\npublic class CompositeCompletionPolicy extends Object implements CompletionPolicy;\n// Abstract base class for policies that need to count the number of occurrences of some event (e.g.\npublic abstract class CountingCompletionPolicy extends DefaultResultCompletionPolicy;\n// Very simple CompletionPolicy that bases its decision on the result of a batch operation.\npublic class DefaultResultCompletionPolicy extends CompletionPolicySupport;\n// Policy for terminating a batch after a fixed number of operations.\npublic class SimpleCompletionPolicy extends DefaultResultCompletionPolicy;\n// Termination policy that times out after a fixed period.\npublic class TimeoutTerminationPolicy extends CompletionPolicySupport;\n", "des": "Infrastructure implementations of repeat policy concerns."}
{"index": 2748, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support\n\n// Internal interface for extensions of RepeatTemplate.\npublic interface RepeatInternalState;\n// \npublic class RepeatInternalStateSupport extends Object implements RepeatInternalState;\n// Global variable support for repeat clients.\npublic final class RepeatSynchronizationManager extends Object;\n// Simple implementation and base class for batch templates implementing RepeatOperations.\npublic class RepeatTemplate extends Object implements RepeatOperations;\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public class ResultHolderResultQueue extends Object;\n// Provides RepeatOperations support including interceptors that can be used to modify or monitor the behaviour at run time. This implementation is sufficient to be used to configure transactional behaviour for each item by making the RepeatCallback transactional, or for the whole batch by making the execute method transactional (but only then if the task executor is synchronous). This class is thread-safe if its collaborators are thread-safe (interceptors, terminationPolicy, callback).\npublic class TaskExecutorRepeatTemplate extends RepeatTemplate;\n// \n@Deprecated(since=\"5.0\", forRemoval=true) public class ThrottleLimitResultQueue<T> extends Object;\n", "des": "Infrastructure implementations of repeat support concerns."}
{"index": 2749, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support\n\n// Infrastructure implementations of support transaction concerns.\npackage support.transaction\n// MethodResolver implementation that finds a single Method on the given Class that contains the specified annotation type.\npublic class AnnotationMethodResolver extends Object implements MethodResolver;\n// Enum representing a database type, such as DB2 or oracle.\npublic enum DatabaseType extends Enum<DatabaseType>;\n// A re-usable PropertyEditorRegistrar that can be used wherever one needs to register custom PropertyEditor instances with a PropertyEditorRegistry (like a bean wrapper, or a type converter).\npublic class DefaultPropertyEditorRegistrar extends Object implements org.springframework.beans.PropertyEditorRegistrar;\n// \npublic class IntArrayPropertyEditor extends PropertyEditorSupport;\n// Comparator to sort resources by the file last modified time.\npublic class LastModifiedResourceComparator extends Object implements Comparator<org.springframework.core.io.Resource>;\n// A strategy interface for invoking a method.\npublic interface MethodInvoker;\n// Utility methods for create MethodInvoker instances.\npublic class MethodInvokerUtils extends Object;\n// Strategy interface for detecting a single Method on a Class.\npublic interface MethodResolver;\n// \npublic class PatternMatcher<S> extends Object;\n// Utility to convert a Properties object to a String and back.\npublic final class PropertiesConverter extends Object;\n// Provides reflection based utilities for Spring Batch that are not available via Spring Core\npublic class ReflectionUtils extends Object;\n// Simple implementation of the MethodInvoker interface that invokes a method on an object.\npublic class SimpleMethodInvoker extends Object implements MethodInvoker;\n// Helper class that sets up a System property with a default value.\npublic class SystemPropertyInitializer extends Object implements org.springframework.beans.factory.InitializingBean;\n", "des": "Infrastructure implementations of support concerns."}
{"index": 2750, "repo": "spring-batch-infrastructure-5.0.2", "code": "package transaction\n\n// Unchecked exception indicating that an error has occurred while trying to flush a buffer.\npublic class FlushFailedException extends RuntimeException;\n// \npublic class ResourcelessTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager;\n// Wrapper for a FileChannel that delays actually writing to or closing the buffer if a transaction is active.\npublic class TransactionAwareBufferedWriter extends Writer;\n// Factory for transaction aware objects (like lists, sets, maps).\npublic class TransactionAwareProxyFactory<T> extends Object;\n", "des": "Infrastructure implementations of support transaction concerns."}
{"index": 2751, "repo": "spring-beans-6.0.11", "code": "package beans\n\n// The core package implementing Spring's lightweight Inversion of Control (IoC) container.\npackage beans.factory\n// Properties editors used to convert from String values to object types such as java.util.Properties.\npackage beans.propertyeditors\n// Classes supporting the org.springframework.beans package, such as utility classes for sorting and holding lists of beans.\npackage beans.support\n// A basic ConfigurablePropertyAccessor that provides the necessary infrastructure for all typical use cases.\npublic abstract class AbstractNestablePropertyAccessor extends AbstractPropertyAccessor;\n// A handler for a specific property.\nprotected abstract static class AbstractNestablePropertyAccessor.PropertyHandler extends Object;\n// Holder class used to store property tokens.\nprotected static class AbstractNestablePropertyAccessor.PropertyTokenHolder extends Object;\n// Abstract implementation of the PropertyAccessor interface.\npublic abstract class AbstractPropertyAccessor extends TypeConverterSupport implements ConfigurablePropertyAccessor;\n// Strategy interface for creating BeanInfo instances for Spring beans.\npublic interface BeanInfoFactory;\n// Exception thrown when instantiation of a bean failed.\npublic class BeanInstantiationException extends FatalBeanException;\n// Holder for a key-value style attribute that is part of a bean definition.\npublic class BeanMetadataAttribute extends Object implements BeanMetadataElement;\n// Extension of AttributeAccessorSupport, holding attributes as BeanMetadataAttribute objects in order to keep track of the definition source.\npublic class BeanMetadataAttributeAccessor extends org.springframework.core.AttributeAccessorSupport implements BeanMetadataElement;\n// Interface to be implemented by bean metadata elements that carry a configuration source object.\npublic interface BeanMetadataElement;\n// Abstract superclass for all exceptions thrown in the beans package and subpackages.\npublic abstract class BeansException extends org.springframework.core.NestedRuntimeException;\n// Static convenience methods for JavaBeans: for instantiating beans, checking bean property types, copying bean properties, etc.\npublic abstract class BeanUtils extends Object;\n// The central interface of Spring's low-level JavaBeans infrastructure.\npublic interface BeanWrapper extends ConfigurablePropertyAccessor;\n// Default BeanWrapper implementation that should be sufficient for all typical use cases.\npublic class BeanWrapperImpl extends AbstractNestablePropertyAccessor implements BeanWrapper;\n// Internal class that caches JavaBeans PropertyDescriptor information for a Java class.\npublic final class CachedIntrospectionResults extends Object;\n", "des": "This package contains interfaces and classes for manipulating Java beans."}
{"index": 2752, "repo": "spring-beans-6.0.11", "code": "package factory\n\n// Support package for annotation-driven bean configuration.\npackage factory.annotation\n// AOT support for bean factories.\npackage factory.aot\n// SPI interfaces and configuration-related convenience classes for bean factories.\npackage factory.config\n// Support package for Groovy-based bean definitions.\npackage factory.groovy\n// Support infrastructure for bean definition parsing.\npackage factory.parsing\n// Support package for the Java ServiceLoader facility.\npackage factory.serviceloader\n// Classes supporting the org.springframework.beans.factory package.\npackage factory.support\n// Mechanism to determine bean wiring metadata from a bean instance.\npackage factory.wiring\n// Contains an abstract XML-based BeanFactory implementation, including a standard \"spring-beans\" XSD.\npackage factory.xml\n// A marker superinterface indicating that a bean is eligible to be notified by the Spring container of a particular framework object through a callback-style method.\npublic interface Aware;\n// Callback that allows a bean to be aware of the bean class loader; that is, the class loader used by the present bean factory to load bean classes.\npublic interface BeanClassLoaderAware extends Aware;\n// Exception thrown when a BeanFactory encounters an error when attempting to create a bean from a bean definition.\npublic class BeanCreationException extends FatalBeanException;\n// Exception thrown in case of a bean being requested despite bean creation currently not being allowed (for example, during the shutdown phase of a bean factory).\npublic class BeanCreationNotAllowedException extends BeanCreationException;\n// Exception thrown in case of a reference to a bean that's currently in creation.\npublic class BeanCurrentlyInCreationException extends BeanCreationException;\n// Exception thrown when a BeanFactory encounters an invalid bean definition: e.g.\npublic class BeanDefinitionStoreException extends FatalBeanException;\n// Exception that indicates an expression evaluation attempt having failed.\npublic class BeanExpressionException extends FatalBeanException;\n// The root interface for accessing a Spring bean container.\npublic interface BeanFactory;\n// Interface to be implemented by beans that wish to be aware of their owning BeanFactory.\npublic interface BeanFactoryAware extends Aware;\n// Convenience methods operating on bean factories, in particular on the ListableBeanFactory interface.\npublic abstract class BeanFactoryUtils extends Object;\n", "des": "The core package implementing Spring's lightweight Inversion of Control (IoC) container."}
{"index": 2753, "repo": "spring-beans-6.0.11", "code": "package annotation\n\n// Extended BeanDefinition interface that exposes AnnotationMetadata about its bean class - without requiring the class to be loaded yet.\npublic interface AnnotatedBeanDefinition extends BeanDefinition;\n// Extension of the GenericBeanDefinition class, adding support for annotation metadata exposed through the AnnotatedBeanDefinition interface.\npublic class AnnotatedGenericBeanDefinition extends GenericBeanDefinition implements AnnotatedBeanDefinition;\n// BeanWiringInfoResolver that uses the Configurable annotation to identify which classes need autowiring.\npublic class AnnotationBeanWiringInfoResolver extends Object implements BeanWiringInfoResolver;\n// Enumeration determining autowiring status: that is, whether a bean should have its dependencies automatically injected by the Spring container using setter injection.\npublic enum Autowire extends Enum<Autowire>;\n// Marks a constructor, field, setter method, or config method as to be autowired by Spring's dependency injection facilities.\n@Target({CONSTRUCTOR,METHOD,PARAMETER,FIELD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Autowired;\n// BeanPostProcessor implementation that autowires annotated fields, setter methods, and arbitrary config methods.\npublic class AutowiredAnnotationBeanPostProcessor extends Object implements SmartInstantiationAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor, BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, BeanFactoryAware;\n// Convenience methods performing bean lookups related to Spring-specific annotations, for example Spring's @Qualifier annotation.\npublic abstract class BeanFactoryAnnotationUtils extends Object;\n// Marks a class as being eligible for Spring-driven configuration.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface Configurable;\n// A BeanFactoryPostProcessor implementation that allows for convenient registration of custom autowire qualifier types.\npublic class CustomAutowireConfigurer extends Object implements BeanFactoryPostProcessor, BeanClassLoaderAware, org.springframework.core.Ordered;\n// BeanPostProcessor implementation that invokes annotated init and destroy methods.\npublic class InitDestroyAnnotationBeanPostProcessor extends Object implements DestructionAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor, BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, Serializable;\n// Internal class for managing injection metadata.\npublic class InjectionMetadata extends Object;\n", "des": "Support package for annotation-driven bean configuration."}
{"index": 2754, "repo": "spring-beans-6.0.11", "code": "package aot\n\n// A collection of AOT services that can be loaded from a SpringFactoriesLoader or obtained from a ListableBeanFactory.\npublic final class AotServices<T> extends Object implements Iterable<T>;\n// Loader class used to actually load the services.\npublic static class AotServices.Loader extends Object;\n// Sources from which services were obtained.\npublic static enum AotServices.Source extends Enum<AotServices.Source>;\n// Resolved arguments to be autowired.\n@FunctionalInterface public interface AutowiredArguments;\n// Code generator to apply AutowiredArguments.\npublic class AutowiredArgumentsCodeGenerator extends Object;\n// Resolver used to support the autowiring of fields.\npublic final class AutowiredFieldValueResolver extends Object;\n// Resolver used to support the autowiring of methods.\npublic final class AutowiredMethodArgumentsResolver extends Object;\n// AOT contribution from a BeanFactoryInitializationAotProcessor used to initialize a bean factory.\n@FunctionalInterface public interface BeanFactoryInitializationAotContribution;\n// AOT processor that makes bean factory initialization contributions by processing ConfigurableListableBeanFactory instances.\n@FunctionalInterface public interface BeanFactoryInitializationAotProcessor;\n// Interface that can be used to configure the code that will be generated to perform bean factory initialization.\npublic interface BeanFactoryInitializationCode;\n// Specialized InstanceSupplier that provides the factory Method used to instantiate the underlying bean instance, if any.\npublic final class BeanInstanceSupplier<T> extends Object implements InstanceSupplier<T>;\n// AOT contribution from a BeanRegistrationAotProcessor used to register a single bean definition.\n@FunctionalInterface public interface BeanRegistrationAotContribution;\n// AOT processor that makes bean registration contributions by processing RegisteredBean instances.\n@FunctionalInterface public interface BeanRegistrationAotProcessor;\n// Interface that can be used to configure the code that will be generated to perform registration of a single bean.\npublic interface BeanRegistrationCode;\n// Generate the various fragments of code needed to register a bean.\npublic interface BeanRegistrationCodeFragments;\n// A BeanRegistrationCodeFragments decorator implementation.\npublic class BeanRegistrationCodeFragmentsDecorator extends Object implements BeanRegistrationCodeFragments;\n// Filter that can be used to exclude AOT processing of a RegisteredBean.\n@FunctionalInterface public interface BeanRegistrationExcludeFilter;\n", "des": "AOT support for bean factories."}
{"index": 2755, "repo": "spring-beans-6.0.11", "code": "package config\n\n// Simple template superclass for FactoryBean implementations that creates a singleton or a prototype object, depending on a flag.\npublic abstract class AbstractFactoryBean<T> extends Object implements FactoryBean<T>, BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean;\n// Extension of the BeanFactory interface to be implemented by bean factories that are capable of autowiring, provided that they want to expose this functionality for existing bean instances.\npublic interface AutowireCapableBeanFactory extends BeanFactory;\n// Simple marker class for an individually autowired property value, to be added to BeanDefinition.getPropertyValues() for a specific bean property.\npublic final class AutowiredPropertyMarker extends Object implements Serializable;\n// A BeanDefinition describes a bean instance, which has property values, constructor argument values, and further information supplied by concrete implementations.\npublic interface BeanDefinition extends org.springframework.core.AttributeAccessor, BeanMetadataElement;\n// Callback for customizing a given bean definition.\n@FunctionalInterface public interface BeanDefinitionCustomizer;\n// Holder for a BeanDefinition with name and aliases.\npublic class BeanDefinitionHolder extends Object implements BeanMetadataElement;\n// Visitor class for traversing BeanDefinition objects, in particular the property values and constructor argument values contained in them, resolving bean metadata values.\npublic class BeanDefinitionVisitor extends Object;\n// Context object for evaluating an expression within a bean definition.\npublic class BeanExpressionContext extends Object;\n// Strategy interface for resolving a value by evaluating it as an expression, if applicable.\npublic interface BeanExpressionResolver;\n// Factory hook that allows for custom modification of an application context's bean definitions, adapting the bean property values of the context's underlying bean factory.\n@FunctionalInterface public interface BeanFactoryPostProcessor;\n// Factory hook that allows for custom modification of new bean instances — for example, checking for marker interfaces or wrapping beans with proxies.\npublic interface BeanPostProcessor;\n// Interface that exposes a reference to a bean name in an abstract fashion.\npublic interface BeanReference extends BeanMetadataElement;\n// Configuration interface to be implemented by most bean factories.\npublic interface ConfigurableBeanFactory extends HierarchicalBeanFactory, SingletonBeanRegistry;\n", "des": "SPI interfaces and configuration-related convenience classes for bean factories."}
{"index": 2756, "repo": "spring-beans-6.0.11", "code": "package groovy\n\n// A Groovy-based reader for Spring bean definitions: like a Groovy builder, but more of a DSL for Spring configuration.\npublic class GroovyBeanDefinitionReader extends AbstractBeanDefinitionReader implements groovy.lang.GroovyObject;\n", "des": "Support package for Groovy-based bean definitions."}
{"index": 2757, "repo": "spring-beans-6.0.11", "code": "package parsing\n\n// Base implementation of ComponentDefinition that provides a basic implementation of AbstractComponentDefinition.getDescription() which delegates to ComponentDefinition.getName().\npublic abstract class AbstractComponentDefinition extends Object implements ComponentDefinition;\n// Representation of an alias that has been registered during the parsing process.\npublic class AliasDefinition extends Object implements BeanMetadataElement;\n// ComponentDefinition based on a standard BeanDefinition, exposing the given bean definition as well as inner bean definitions and bean references for the given bean.\npublic class BeanComponentDefinition extends BeanDefinitionHolder implements ComponentDefinition;\n// Exception thrown when a bean definition reader encounters an error during the parsing process.\npublic class BeanDefinitionParsingException extends BeanDefinitionStoreException;\n// ParseState entry representing a bean definition.\npublic class BeanEntry extends Object implements ParseState.Entry;\n// Interface that describes the logical view of a set of BeanDefinitions and BeanReferences as presented in some configuration context.\npublic interface ComponentDefinition extends BeanMetadataElement;\n// ComponentDefinition implementation that holds one or more nested ComponentDefinition instances, aggregating them into a named group of components.\npublic class CompositeComponentDefinition extends AbstractComponentDefinition;\n// ParseState entry representing a (possibly indexed) constructor argument.\npublic class ConstructorArgumentEntry extends Object implements ParseState.Entry;\n// Marker interface for a defaults definition, extending BeanMetadataElement to inherit source exposure.\npublic interface DefaultsDefinition extends BeanMetadataElement;\n// Empty implementation of the ReaderEventListener interface, providing no-op implementations of all callback methods.\npublic class EmptyReaderEventListener extends Object implements ReaderEventListener;\n// Simple ProblemReporter implementation that exhibits fail-fast behavior when errors are encountered.\npublic class FailFastProblemReporter extends Object implements ProblemReporter;\n// Representation of an import that has been processed during the parsing process.\npublic class ImportDefinition extends Object implements BeanMetadataElement;\n// Class that models an arbitrary location in a resource.\npublic class Location extends Object;\n// Simple implementation of SourceExtractor that returns null as the source metadata.\npublic class NullSourceExtractor extends Object implements SourceExtractor;\n// Simple ArrayDeque-based structure for tracking the logical position during a parsing process.\npublic final class ParseState extends Object;\n// Marker interface for entries into the ParseState.\npublic static interface ParseState.Entry;\n", "des": "Support infrastructure for bean definition parsing."}
{"index": 2758, "repo": "spring-beans-6.0.11", "code": "package serviceloader\n\n// Abstract base class for FactoryBeans operating on the JDK 1.6 ServiceLoader facility.\npublic abstract class AbstractServiceLoaderBasedFactoryBean extends AbstractFactoryBean<Object> implements BeanClassLoaderAware;\n// FactoryBean that exposes the 'primary' service for the configured service class, obtained through the JDK 1.6 ServiceLoader facility.\npublic class ServiceFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware;\n// FactoryBean that exposes all services for the configured service class, represented as a List of service objects, obtained through the JDK 1.6 ServiceLoader facility.\npublic class ServiceListFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware;\n// FactoryBean that exposes the JDK 1.6 ServiceLoader for the configured service class.\npublic class ServiceLoaderFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware;\n", "des": "Support package for the Java ServiceLoader facility."}
{"index": 2759, "repo": "spring-beans-6.0.11", "code": "package support\n\n// Abstract bean factory superclass that implements default bean creation, with the full capabilities specified by the RootBeanDefinition class.\npublic abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory;\n// Base class for concrete, full-fledged BeanDefinition classes, factoring out common properties of GenericBeanDefinition, RootBeanDefinition, and ChildBeanDefinition.\npublic abstract class AbstractBeanDefinition extends BeanMetadataAttributeAccessor implements BeanDefinition, Cloneable;\n// Abstract base class for bean definition readers which implement the BeanDefinitionReader interface.\npublic abstract class AbstractBeanDefinitionReader extends Object implements BeanDefinitionReader, org.springframework.core.env.EnvironmentCapable;\n// Abstract base class for BeanFactory implementations, providing the full capabilities of the ConfigurableBeanFactory SPI.\npublic abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory;\n// Qualifier for resolving autowire candidates.\npublic class AutowireCandidateQualifier extends BeanMetadataAttributeAccessor;\n// Strategy interface for determining whether a specific bean definition qualifies as an autowire candidate for a specific dependency.\npublic interface AutowireCandidateResolver;\n// Programmatic means of constructing BeanDefinitions using the builder pattern.\npublic final class BeanDefinitionBuilder extends Object;\n// A simple holder for BeanDefinition property defaults.\npublic class BeanDefinitionDefaults extends Object;\n// Subclass of BeanDefinitionStoreException indicating an invalid override attempt: typically registering a new definition for the same bean name while DefaultListableBeanFactory.isAllowBeanDefinitionOverriding() is false.\npublic class BeanDefinitionOverrideException extends BeanDefinitionStoreException;\n// Simple interface for bean definition readers that specifies load methods with Resource and String location parameters.\npublic interface BeanDefinitionReader;\n// Utility methods that are useful for bean definition reader implementations.\npublic abstract class BeanDefinitionReaderUtils extends Object;\n// Interface for registries that hold bean definitions, for example RootBeanDefinition and ChildBeanDefinition instances.\npublic interface BeanDefinitionRegistry extends org.springframework.core.AliasRegistry;\n// Extension to the standard BeanFactoryPostProcessor SPI, allowing for the registration of further bean definitions before regular BeanFactoryPostProcessor detection kicks in.\npublic interface BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor;\n// Exception thrown when the validation of a bean definition failed.\npublic class BeanDefinitionValidationException extends FatalBeanException;\n", "des": "Classes supporting the org.springframework.beans.factory package."}
{"index": 2760, "repo": "spring-beans-6.0.11", "code": "package wiring\n\n// Convenient base class for bean configurers that can perform Dependency Injection on objects (however they may be created).\npublic class BeanConfigurerSupport extends Object implements BeanFactoryAware, InitializingBean, DisposableBean;\n// Holder for bean wiring metadata information about a particular class.\npublic class BeanWiringInfo extends Object;\n// Strategy interface to be implemented by objects than can resolve bean name information, given a newly instantiated bean object.\npublic interface BeanWiringInfoResolver;\n// Simple default implementation of the BeanWiringInfoResolver interface, looking for a bean with the same name as the fully-qualified class name.\npublic class ClassNameBeanWiringInfoResolver extends Object implements BeanWiringInfoResolver;\n", "des": "Mechanism to determine bean wiring metadata from a bean instance."}
{"index": 2761, "repo": "spring-beans-6.0.11", "code": "package xml\n\n// Abstract BeanDefinitionParser implementation providing a number of convenience methods and a template method that subclasses must override to provide the actual parsing logic.\npublic abstract class AbstractBeanDefinitionParser extends Object implements BeanDefinitionParser;\n// Convenient base class for when there exists a one-to-one mapping between attribute names on the element that is to be parsed and the property names on the Class being configured.\npublic abstract class AbstractSimpleBeanDefinitionParser extends AbstractSingleBeanDefinitionParser;\n// Base class for those BeanDefinitionParser implementations that need to parse and define just a single BeanDefinition.\npublic abstract class AbstractSingleBeanDefinitionParser extends AbstractBeanDefinitionParser;\n// Interface used by the DefaultBeanDefinitionDocumentReader to handle custom, nested (directly under a <bean>) tags.\npublic interface BeanDefinitionDecorator;\n// SPI for parsing an XML document that contains Spring bean definitions.\npublic interface BeanDefinitionDocumentReader;\n// Interface used by the DefaultBeanDefinitionDocumentReader to handle custom, top-level (directly under <beans/>) tags.\npublic interface BeanDefinitionParser;\n// Stateful delegate class used to parse XML bean definitions.\npublic class BeanDefinitionParserDelegate extends Object;\n// EntityResolver implementation for the Spring beans DTD, to load the DTD from the Spring class path (or JAR file).\npublic class BeansDtdResolver extends Object implements EntityResolver;\n// Default implementation of the BeanDefinitionDocumentReader interface that reads bean definitions according to the \"spring-beans\" DTD and XSD format (Spring's default XML bean definition format).\npublic class DefaultBeanDefinitionDocumentReader extends Object implements BeanDefinitionDocumentReader;\n// Spring's default DocumentLoader implementation.\npublic class DefaultDocumentLoader extends Object implements DocumentLoader;\n// Default implementation of the NamespaceHandlerResolver interface.\npublic class DefaultNamespaceHandlerResolver extends Object implements NamespaceHandlerResolver;\n// EntityResolver implementation that delegates to a BeansDtdResolver and a PluggableSchemaResolver for DTDs and XML schemas, respectively.\npublic class DelegatingEntityResolver extends Object implements EntityResolver;\n// Simple JavaBean that holds the defaults specified at the <beans> level in a standard Spring XML bean definition document: default-lazy-init, default-autowire, etc.\npublic class DocumentDefaultsDefinition extends Object implements DefaultsDefinition;\n// Strategy interface for loading an XML Document.\npublic interface DocumentLoader;\n", "des": "Contains an abstract XML-based BeanFactory implementation, including a standard \"spring-beans\" XSD."}
{"index": 2762, "repo": "spring-beans-6.0.11", "code": "package propertyeditors\n\n// Editor for byte arrays.\npublic class ByteArrayPropertyEditor extends PropertyEditorSupport;\n// Editor for a Character, to populate a property of type Character or char from a String value.\npublic class CharacterEditor extends PropertyEditorSupport;\n// Editor for char arrays.\npublic class CharArrayPropertyEditor extends PropertyEditorSupport;\n// Editor for java.nio.charset.Charset, translating charset String representations into Charset objects and back.\npublic class CharsetEditor extends PropertyEditorSupport;\n// Property editor for an array of Classes, to enable the direct population of a Class[] property without having to use a String class name property as bridge.\npublic class ClassArrayEditor extends PropertyEditorSupport;\n// Property editor for java.lang.Class, to enable the direct population of a Class property without recourse to having to use a String class name property as bridge.\npublic class ClassEditor extends PropertyEditorSupport;\n// Editor for java.util.Currency, translating currency codes into Currency objects.\npublic class CurrencyEditor extends PropertyEditorSupport;\n// Property editor for Boolean/boolean properties.\npublic class CustomBooleanEditor extends PropertyEditorSupport;\n// Property editor for Collections, converting any source Collection to a given target Collection type.\npublic class CustomCollectionEditor extends PropertyEditorSupport;\n// Property editor for java.util.Date, supporting a custom java.text.DateFormat.\npublic class CustomDateEditor extends PropertyEditorSupport;\n// Property editor for Maps, converting any source Map to a given target Map type.\npublic class CustomMapEditor extends PropertyEditorSupport;\n// Property editor for any Number subclass such as Short, Integer, Long, BigInteger, Float, Double, BigDecimal.\npublic class CustomNumberEditor extends PropertyEditorSupport;\n// Editor for java.io.File, to directly populate a File property from a Spring resource location.\npublic class FileEditor extends PropertyEditorSupport;\n// Editor for org.xml.sax.InputSource, converting from a Spring resource location String to a SAX InputSource object.\npublic class InputSourceEditor extends PropertyEditorSupport;\n// One-way PropertyEditor which can convert from a text String to a java.io.InputStream, interpreting the given String as a Spring resource location (e.g.\npublic class InputStreamEditor extends PropertyEditorSupport;\n", "des": "Properties editors used to convert from String values to object types such as java.util.Properties."}
{"index": 2763, "repo": "spring-beans-6.0.11", "code": "package support\n\n// Subclass of MethodInvoker that tries to convert the given arguments for the actual target method via a TypeConverter.\npublic class ArgumentConvertingMethodInvoker extends org.springframework.util.MethodInvoker;\n// Mutable implementation of the SortDefinition interface.\npublic class MutableSortDefinition extends Object implements SortDefinition, Serializable;\n// PagedListHolder is a simple state holder for handling lists of objects, separating them into pages.\npublic class PagedListHolder<E> extends Object implements Serializable;\n// PropertyComparator performs a comparison of two beans, evaluating the specified bean property via a BeanWrapper.\npublic class PropertyComparator<T> extends Object implements Comparator<T>;\n// PropertyEditorRegistrar implementation that populates a given PropertyEditorRegistry (typically a BeanWrapper used for bean creation within an org.springframework.context.ApplicationContext) with resource editors.\npublic class ResourceEditorRegistrar extends Object implements PropertyEditorRegistrar;\n// Definition for sorting bean instances by a property.\npublic interface SortDefinition;\n", "des": "Classes supporting the org.springframework.beans package, such as utility classes for sorting and holding lists of beans."}
{"index": 2764, "repo": "spring-jms-6.0.11", "code": "package jms\n\n// Annotations and support classes for declarative JMS listener endpoints.\npackage jms.annotation\n// Support package for declarative messaging configuration, with Java configuration and XML schema support.\npackage jms.config\n// Provides a PlatformTransactionManager implementation for a single JMS ConnectionFactory, and a SingleConnectionFactory adapter.\npackage jms.connection\n// Core package of the JMS support.\npackage jms.core\n// This package contains the base message listener container facility.\npackage jms.listener\n// This package provides generic JMS support classes, to be used by higher-level classes like JmsTemplate.\npackage jms.support\n// Runtime exception mirroring the JMS IllegalStateException.\npublic class IllegalStateException extends JmsException;\n// Runtime exception mirroring the JMS InvalidClientIDException.\npublic class InvalidClientIDException extends JmsException;\n// Runtime exception mirroring the JMS InvalidDestinationException.\npublic class InvalidDestinationException extends JmsException;\n// Runtime exception mirroring the JMS InvalidSelectorException.\npublic class InvalidSelectorException extends JmsException;\n// Base class for exception thrown by the framework whenever it encounters a problem related to JMS.\npublic abstract class JmsException extends org.springframework.core.NestedRuntimeException;\n// Runtime exception mirroring the JMS JMSSecurityException.\npublic class JmsSecurityException extends JmsException;\n// Runtime exception mirroring the JMS MessageEOFException.\npublic class MessageEOFException extends JmsException;\n// Runtime exception mirroring the JMS MessageFormatException.\npublic class MessageFormatException extends JmsException;\n// Runtime exception mirroring the JMS MessageNotReadableException.\npublic class MessageNotReadableException extends JmsException;\n// Runtime exception mirroring the JMS MessageNotWriteableException.\npublic class MessageNotWriteableException extends JmsException;\n// Runtime exception mirroring the JMS ResourceAllocationException.\npublic class ResourceAllocationException extends JmsException;\n// Runtime exception mirroring the JMS TransactionInProgressException.\npublic class TransactionInProgressException extends JmsException;\n// Runtime exception mirroring the JMS TransactionRolledBackException.\npublic class TransactionRolledBackException extends JmsException;\n// JmsException to be thrown when no other matching subclass found.\npublic class UncategorizedJmsException extends JmsException;\n", "des": "This package contains integration classes for JMS, allowing for Spring-style JMS access."}
{"index": 2765, "repo": "spring-jms-6.0.11", "code": "package annotation\n\n// Enable JMS listener annotated endpoints that are created under the cover by a JmsListenerContainerFactory.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(JmsBootstrapConfiguration.class) public @interface EnableJms;\n// @Configuration class that registers a JmsListenerAnnotationBeanPostProcessor bean capable of processing Spring's @JmsListener annotation.\n@Configuration(proxyBeanMethods=false) @Role(2) public class JmsBootstrapConfiguration extends Object;\n// Annotation that marks a method to be the target of a JMS message listener on the specified JmsListener.destination().\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(JmsListeners.class) @MessageMapping public @interface JmsListener;\n// Bean post-processor that registers methods annotated with JmsListener to be invoked by a JMS message listener container created under the cover by a JmsListenerContainerFactory according to the attributes of the annotation.\npublic class JmsListenerAnnotationBeanPostProcessor extends Object implements org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor, org.springframework.core.Ordered, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.SmartInitializingSingleton;\n// Optional interface to be implemented by a Spring managed bean willing to customize how JMS listener endpoints are configured.\n@FunctionalInterface public interface JmsListenerConfigurer;\n// Container annotation that aggregates several JmsListener annotations.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface JmsListeners;\n", "des": "Annotations and support classes for declarative JMS listener endpoints."}
{"index": 2766, "repo": "spring-jms-6.0.11", "code": "package config\n\n// Base JmsListenerContainerFactory for Spring's base container implementation.\npublic abstract class AbstractJmsListenerContainerFactory<C extends AbstractMessageListenerContainer> extends Object implements JmsListenerContainerFactory<C>;\n// Base model for a JMS listener endpoint.\npublic abstract class AbstractJmsListenerEndpoint extends Object implements JmsListenerEndpoint;\n// A JmsListenerContainerFactory implementation to build a JCA-based JmsMessageEndpointManager.\npublic class DefaultJcaListenerContainerFactory extends JmsActivationSpecConfig implements JmsListenerContainerFactory<JmsMessageEndpointManager>;\n// A JmsListenerContainerFactory implementation to build a regular DefaultMessageListenerContainer.\npublic class DefaultJmsListenerContainerFactory extends AbstractJmsListenerContainerFactory<DefaultMessageListenerContainer>;\n// Configuration constants for internal sharing across subpackages.\npublic abstract class JmsListenerConfigUtils extends Object;\n// Factory of MessageListenerContainer based on a JmsListenerEndpoint definition.\npublic interface JmsListenerContainerFactory<C extends MessageListenerContainer>;\n// Model for a JMS listener endpoint.\npublic interface JmsListenerEndpoint;\n// Helper bean for registering JmsListenerEndpoint with a JmsListenerEndpointRegistry.\npublic class JmsListenerEndpointRegistrar extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\n// Creates the necessary MessageListenerContainer instances for the registered endpoints.\npublic class JmsListenerEndpointRegistry extends Object implements org.springframework.beans.factory.DisposableBean, org.springframework.context.SmartLifecycle, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>;\n// A NamespaceHandler for the JMS namespace.\npublic class JmsNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n// A JmsListenerEndpoint providing the method to invoke to process an incoming message for this endpoint.\npublic class MethodJmsListenerEndpoint extends AbstractJmsListenerEndpoint implements org.springframework.beans.factory.BeanFactoryAware;\n// A JmsListenerContainerFactory implementation to build a standard SimpleMessageListenerContainer.\npublic class SimpleJmsListenerContainerFactory extends AbstractJmsListenerContainerFactory<SimpleMessageListenerContainer>;\n", "des": "Support package for declarative messaging configuration, with Java configuration and XML schema support."}
{"index": 2767, "repo": "spring-jms-6.0.11", "code": "package connection\n\n// SingleConnectionFactory subclass that adds Session caching as well as MessageProducer and MessageConsumer caching.\npublic class CachingConnectionFactory extends SingleConnectionFactory;\n// Implementation of the JMS ExceptionListener interface that supports chaining, allowing the addition of multiple ExceptionListener instances in order.\npublic class ChainedExceptionListener extends Object implements ExceptionListener;\n// Helper class for managing a JMS ConnectionFactory, in particular for obtaining transactional JMS resources for a given ConnectionFactory.\npublic abstract class ConnectionFactoryUtils extends Object;\n// Callback interface for resource creation.\npublic static interface ConnectionFactoryUtils.ResourceFactory;\n// ConnectionFactory implementation that delegates all calls to a given target ConnectionFactory, adapting specific create(Queue/Topic)Connection calls to the target ConnectionFactory if necessary (e.g.\npublic class DelegatingConnectionFactory extends Object implements SmartConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, org.springframework.beans.factory.InitializingBean;\n// Resource holder wrapping a JMS Connection and a JMS Session.\npublic class JmsResourceHolder extends org.springframework.transaction.support.ResourceHolderSupport;\n// PlatformTransactionManager implementation for a single JMS ConnectionFactory.\npublic class JmsTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean;\n// Subinterface of Session to be implemented by Session proxies.\npublic interface SessionProxy extends Session;\n// A JMS ConnectionFactory adapter that returns the same Connection from all SingleConnectionFactory.createConnection() calls, and ignores calls to Connection.close().\npublic class SingleConnectionFactory extends Object implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, ExceptionListener, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\n// Extension of the jakarta.jms.ConnectionFactory interface, indicating how to release Connections obtained from it.\npublic interface SmartConnectionFactory extends ConnectionFactory;\n// Exception thrown when a synchronized local transaction failed to complete (after the main transaction has already completed).\npublic class SynchedLocalTransactionFailedException extends JmsException;\n// Proxy for a target JMS ConnectionFactory, adding awareness of Spring-managed transactions.\npublic class TransactionAwareConnectionFactoryProxy extends Object implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory;\n", "des": "Provides a PlatformTransactionManager implementation for a single JMS ConnectionFactory, and a SingleConnectionFactory adapter."}
{"index": 2768, "repo": "spring-jms-6.0.11", "code": "package core\n\n// Classes supporting the org.springframework.jms.core package.\npackage core.support\n// Callback for browsing the messages in a JMS queue.\n@FunctionalInterface public interface BrowserCallback<T>;\n// A specialization of MessageSendingOperations, MessageReceivingOperations and MessageRequestReplyOperations for JMS related operations that allow to specify a destination name rather than the actual Destination.\npublic interface JmsMessageOperations extends org.springframework.messaging.core.MessageSendingOperations<Destination>, org.springframework.messaging.core.MessageReceivingOperations<Destination>, org.springframework.messaging.core.MessageRequestReplyOperations<Destination>;\n// An implementation of JmsMessageOperations.\npublic class JmsMessagingTemplate extends org.springframework.messaging.core.AbstractMessagingTemplate<Destination> implements JmsMessageOperations, org.springframework.beans.factory.InitializingBean;\n// Specifies a basic set of JMS operations.\npublic interface JmsOperations;\n// Helper class that simplifies synchronous JMS access code.\npublic class JmsTemplate extends JmsDestinationAccessor implements JmsOperations;\n// Creates a JMS message given a Session.\n@FunctionalInterface public interface MessageCreator;\n// To be used with JmsTemplate's send method that converts an object to a message.\n@FunctionalInterface public interface MessagePostProcessor;\n// Callback for sending a message to a JMS destination.\n@FunctionalInterface public interface ProducerCallback<T>;\n// Callback for executing any number of operations on a provided Session.\n@FunctionalInterface public interface SessionCallback<T>;\n", "des": "Core package of the JMS support."}
{"index": 2769, "repo": "spring-jms-6.0.11", "code": "package support\n\n// Convenient superclass for application classes that need JMS access.\npublic abstract class JmsGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean;\n", "des": "Classes supporting the org.springframework.jms.core package."}
{"index": 2770, "repo": "spring-jms-6.0.11", "code": "package listener\n\n// Message listener adapter mechanism that delegates to target listener methods, converting messages to appropriate message content types (such as String or byte array) that get passed into listener methods.\npackage listener.adapter\n// This package provides JCA-based endpoint management for JMS message listeners.\npackage listener.endpoint\n// Common base class for all containers which need to implement listening based on a JMS Connection (either shared or freshly obtained for each attempt).\npublic abstract class AbstractJmsListeningContainer extends JmsDestinationAccessor implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.DisposableBean, org.springframework.context.SmartLifecycle;\n// Exception that indicates that the initial setup of this container's shared JMS Connection failed.\npublic static class AbstractJmsListeningContainer.SharedConnectionNotInitializedException extends RuntimeException;\n// Abstract base class for Spring message listener container implementations.\npublic abstract class AbstractMessageListenerContainer extends AbstractJmsListeningContainer implements MessageListenerContainer;\n// Base class for listener container implementations which are based on polling.\npublic abstract class AbstractPollingMessageListenerContainer extends AbstractMessageListenerContainer;\n// Message listener container variant that uses plain JMS client APIs, specifically a loop of MessageConsumer.receive() calls that also allow for transactional reception of messages (registering them with XA transactions).\npublic class DefaultMessageListenerContainer extends AbstractPollingMessageListenerContainer;\n// Internal abstraction used by the framework representing a message listener container.\npublic interface MessageListenerContainer extends org.springframework.context.SmartLifecycle;\n// Variant of the standard JMS MessageListener interface, offering not only the received Message but also the underlying JMS Session object.\n@FunctionalInterface public interface SessionAwareMessageListener<M extends Message>;\n// Message listener container that uses the plain JMS client API's MessageConsumer.setMessageListener() method to create concurrent MessageConsumers for the specified listeners.\npublic class SimpleMessageListenerContainer extends AbstractMessageListenerContainer implements ExceptionListener;\n// Interface to be implemented by message listener objects that suggest a specific name for a durable subscription that they might be registered with.\npublic interface SubscriptionNameProvider;\n", "des": "This package contains the base message listener container facility."}
{"index": 2771, "repo": "spring-jms-6.0.11", "code": "package adapter\n\n// An abstract JMS MessageListener adapter providing the necessary infrastructure to extract the payload of a JMS Message.\npublic abstract class AbstractAdaptableMessageListener extends Object implements MessageListener, SessionAwareMessageListener<Message>;\n// Return type of any JMS listener method used to indicate the actual response destination alongside the response itself.\npublic class JmsResponse<T> extends Object;\n// Exception to be thrown when the execution of a listener method failed.\npublic class ListenerExecutionFailedException extends JmsException;\n// Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion.\npublic class MessageListenerAdapter extends AbstractAdaptableMessageListener implements SubscriptionNameProvider;\n// A MessageListener adapter that invokes a configurable InvocableHandlerMethod.\npublic class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener implements SubscriptionNameProvider;\n// Exception to be thrown when the reply of a message failed to be sent.\npublic class ReplyFailureException extends JmsException;\n", "des": "Message listener adapter mechanism that delegates to target listener methods, converting messages to appropriate message content types (such as String or byte array) that get passed into listener methods."}
{"index": 2772, "repo": "spring-jms-6.0.11", "code": "package endpoint\n\n// Default implementation of the JmsActivationSpecFactory interface.\npublic class DefaultJmsActivationSpecFactory extends StandardJmsActivationSpecFactory;\n// Common configuration object for activating a JMS message endpoint.\npublic class JmsActivationSpecConfig extends Object;\n// Strategy interface for creating JCA 1.5 ActivationSpec objects based on a configured JmsActivationSpecConfig object.\npublic interface JmsActivationSpecFactory;\n// JMS-specific implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities for a JMS listener object (e.g.\npublic class JmsMessageEndpointFactory extends org.springframework.jca.endpoint.AbstractMessageEndpointFactory;\n// Internal exception thrown when a ResourceException has been encountered during the endpoint invocation.\npublic static class JmsMessageEndpointFactory.JmsResourceException extends RuntimeException;\n// Extension of the generic JCA 1.5 GenericMessageEndpointManager, adding JMS-specific support for ActivationSpec configuration.\npublic class JmsMessageEndpointManager extends org.springframework.jca.endpoint.GenericMessageEndpointManager implements org.springframework.beans.factory.BeanNameAware, MessageListenerContainer;\n// Standard implementation of the JmsActivationSpecFactory interface.\npublic class StandardJmsActivationSpecFactory extends Object implements JmsActivationSpecFactory;\n", "des": "This package provides JCA-based endpoint management for JMS message listeners."}
{"index": 2773, "repo": "spring-jms-6.0.11", "code": "package support\n\n// Provides a MessageConverter abstraction to convert between Java objects and JMS messages.\npackage support.converter\n// Support classes for Spring's JMS framework.\npackage support.destination\n// Base class for JmsTemplate and other JMS-accessing gateway helpers, defining common properties such as the JMS ConnectionFactory to operate on.\npublic abstract class JmsAccessor extends Object implements org.springframework.beans.factory.InitializingBean;\n// Strategy interface for mapping Message headers to an outbound JMS Message (e.g.\npublic interface JmsHeaderMapper extends org.springframework.messaging.support.HeaderMapper<Message>;\n// Pre-defined names and prefixes to be used for setting and/or retrieving JMS attributes from/to generic message headers.\npublic interface JmsHeaders;\n// A MessageHeaderAccessor implementation giving access to JMS-specific headers.\npublic class JmsMessageHeaderAccessor extends org.springframework.messaging.support.NativeMessageHeaderAccessor;\n// Generic utility methods for working with JMS.\npublic abstract class JmsUtils extends Object;\n// Gather the Quality-of-Service settings that can be used when sending a message.\npublic class QosSettings extends Object;\n// Simple implementation of JmsHeaderMapper.\npublic class SimpleJmsHeaderMapper extends org.springframework.messaging.support.AbstractHeaderMapper<Message> implements JmsHeaderMapper;\n", "des": "This package provides generic JMS support classes, to be used by higher-level classes like JmsTemplate."}
{"index": 2774, "repo": "spring-jms-6.0.11", "code": "package converter\n\n// Message converter that uses Jackson 2.x to convert messages to and from JSON.\npublic class MappingJackson2MessageConverter extends Object implements SmartMessageConverter, org.springframework.beans.factory.BeanClassLoaderAware;\n// Spring JMS MessageConverter that uses a Marshaller and Unmarshaller.\npublic class MarshallingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean;\n// Thrown by MessageConverter implementations when the conversion of an object to/from a Message fails.\npublic class MessageConversionException extends JmsException;\n// Strategy interface that specifies a converter between Java objects and JMS messages.\npublic interface MessageConverter;\n// Constants that indicate a target message type to convert to: a TextMessage, a BytesMessage, a MapMessage or an ObjectMessage.\npublic enum MessageType extends Enum<MessageType>;\n// Convert a Message from the messaging abstraction to and from a Message using an underlying MessageConverter for the payload and a JmsHeaderMapper to map the JMS headers to and from standard message headers.\npublic class MessagingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean;\n// A simple message converter which is able to handle TextMessages, BytesMessages, MapMessages, and ObjectMessages.\npublic class SimpleMessageConverter extends Object implements MessageConverter;\n// An extended MessageConverter SPI with conversion hint support.\npublic interface SmartMessageConverter extends MessageConverter;\n", "des": "Provides a MessageConverter abstraction to convert between Java objects and JMS messages."}
{"index": 2775, "repo": "spring-jms-6.0.11", "code": "package destination\n\n// DestinationResolver implementation based on a Spring BeanFactory.\npublic class BeanFactoryDestinationResolver extends Object implements DestinationResolver, org.springframework.beans.factory.BeanFactoryAware;\n// Extension of the DestinationResolver interface, exposing methods for clearing the cache.\npublic interface CachingDestinationResolver extends DestinationResolver;\n// Thrown by a DestinationResolver when it cannot resolve a destination name.\npublic class DestinationResolutionException extends JmsException;\n// Strategy interface for resolving JMS destinations.\n@FunctionalInterface public interface DestinationResolver;\n// Simple DestinationResolver implementation resolving destination names as dynamic destinations.\npublic class DynamicDestinationResolver extends Object implements DestinationResolver;\n// Base class for JmsTemplate and other JMS-accessing gateway helpers, adding destination-related properties to JmsAccessor's common properties.\npublic abstract class JmsDestinationAccessor extends JmsAccessor;\n// DestinationResolver implementation which interprets destination names as JNDI locations (with a configurable fallback strategy).\npublic class JndiDestinationResolver extends org.springframework.jndi.JndiLocatorSupport implements CachingDestinationResolver;\n", "des": "Support classes for Spring's JMS framework."}
{"index": 2776, "repo": "spring-security-ldap-6.1.2", "code": "package ldap\n\n// The LDAP authentication provider package.\npackage ldap.authentication\n// Implementation of password policy functionality based on the Password Policy for LDAP Directories.\npackage ldap.ppolicy\n// LdapUserSearch implementations.\npackage ldap.search\n// Embedded Apache Directory Server implementation, as used by the configuration namespace.\npackage ldap.server\n// LDAP-focused UserDetails implementations which map from a ubset of the data contained in some of the standard LDAP types (such as InetOrgPerson).\npackage ldap.userdetails\n// This implementation appends a name component to the userDnBase context using the usernameAttributeName property.\npublic class DefaultLdapUsernameToDnMapper extends Object implements LdapUsernameToDnMapper;\n// ContextSource implementation which uses Spring LDAP's LdapContextSource as a base class.\npublic class DefaultSpringSecurityContextSource extends org.springframework.ldap.core.support.LdapContextSource;\n// Constructs an Ldap Distinguished Name from a username.\npublic interface LdapUsernameToDnMapper;\n// LDAP Utility methods.\npublic final class LdapUtils extends Object;\n// Extension of Spring LDAP's LdapTemplate class which adds extra functionality required by Spring Security.\npublic class SpringSecurityLdapTemplate extends org.springframework.ldap.core.LdapTemplate;\n", "des": "Spring Security's LDAP module."}
{"index": 2777, "repo": "spring-security-ldap-6.1.2", "code": "package authentication\n\n// Base class for the standard LdapAuthenticationProvider and the ActiveDirectoryLdapAuthenticationProvider.\npublic abstract class AbstractLdapAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider, org.springframework.context.MessageSourceAware;\n// Base class for the authenticator implementations.\npublic abstract class AbstractLdapAuthenticator extends Object implements LdapAuthenticator, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware;\n// An authenticator which binds as a user.\npublic class BindAuthenticator extends AbstractLdapAuthenticator;\n// An AuthenticationProvider implementation that authenticates against an LDAP server.\npublic class LdapAuthenticationProvider extends AbstractLdapAuthenticationProvider;\n// The strategy interface for locating and authenticating an Ldap user.\npublic interface LdapAuthenticator;\n// \npublic final class NullLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator;\n// An LdapAuthenticator which compares the login password with the value stored in the directory using a remote LDAP \"compare\" operation.\npublic final class PasswordComparisonAuthenticator extends AbstractLdapAuthenticator;\n// An AuthenticationSource to retrieve authentication information stored in Spring Security's SecurityContextHolder.\npublic class SpringSecurityAuthenticationSource extends Object implements org.springframework.ldap.core.AuthenticationSource;\n// Simple LdapAuthoritiesPopulator which delegates to a UserDetailsService, using the name which was supplied at login as the username.\npublic class UserDetailsServiceLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator;\n", "des": "The LDAP authentication provider package."}
{"index": 2778, "repo": "spring-security-ldap-6.1.2", "code": "package ppolicy\n\n// Extended version of the DefaultSpringSecurityContextSource which adds support for the use of PasswordPolicyControl to make use of user account data stored in the directory.\npublic class PasswordPolicyAwareContextSource extends DefaultSpringSecurityContextSource;\n// A Password Policy request control.\npublic class PasswordPolicyControl extends Object implements Control;\n// Obtains the PasswordPolicyControl from a context for use by other classes.\npublic final class PasswordPolicyControlExtractor extends Object;\n// Transforms a control object to a PasswordPolicyResponseControl object, if appropriate.\npublic class PasswordPolicyControlFactory extends ControlFactory;\n// \npublic interface PasswordPolicyData;\n// Defines status codes for use with PasswordPolicyException, with error codes (for message source lookup) and default messages.\npublic enum PasswordPolicyErrorStatus extends Enum<PasswordPolicyErrorStatus>;\n// Generic exception raised by the ppolicy package.\npublic class PasswordPolicyException extends RuntimeException;\n// Represents the response control received when a PasswordPolicyControl is used when binding to a directory.\npublic class PasswordPolicyResponseControl extends PasswordPolicyControl;\n", "des": "Implementation of password policy functionality based on the Password Policy for LDAP Directories."}
{"index": 2779, "repo": "spring-security-ldap-6.1.2", "code": "package search\n\n// LdapUserSearch implementation which uses an Ldap filter to locate the user.\npublic class FilterBasedLdapUserSearch extends Object implements LdapUserSearch;\n// Obtains a user's information from the LDAP directory given a login name.\npublic interface LdapUserSearch;\n", "des": "LdapUserSearch implementations."}
{"index": 2780, "repo": "spring-security-ldap-6.1.2", "code": "package server\n\n// \n@Deprecated public class ApacheDSContainer extends Object implements EmbeddedLdapServerContainer, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.context.Lifecycle, org.springframework.context.ApplicationContextAware;\n// Provides lifecycle services for an embedded LDAP server.\npublic interface EmbeddedLdapServerContainer;\n// \npublic class UnboundIdContainer extends Object implements EmbeddedLdapServerContainer, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.context.Lifecycle, org.springframework.context.ApplicationContextAware;\n", "des": "Embedded Apache Directory Server implementation, as used by the configuration namespace."}
{"index": 2781, "repo": "spring-security-ldap-6.1.2", "code": "package userdetails\n\n// The default strategy for obtaining user role information from the directory.\npublic class DefaultLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator;\n// UserDetails implementation whose properties are based on a subset of the LDAP schema for inetOrgPerson.\npublic class InetOrgPerson extends Person;\n// \npublic static class InetOrgPerson.Essence extends Person.Essence;\n// \npublic class InetOrgPersonContextMapper extends Object implements UserDetailsContextMapper;\n// Obtains a list of granted authorities for an Ldap user.\npublic interface LdapAuthoritiesPopulator;\n// An authority that contains at least a DN and a role name for an LDAP entry but can also contain other desired attributes to be fetched during an LDAP authority search.\npublic class LdapAuthority extends Object implements org.springframework.security.core.GrantedAuthority;\n// Captures the information for a user's LDAP entry.\npublic interface LdapUserDetails extends org.springframework.security.core.userdetails.UserDetails, org.springframework.security.core.CredentialsContainer;\n// A UserDetails implementation which is used internally by the Ldap services.\npublic class LdapUserDetailsImpl extends Object implements LdapUserDetails, PasswordPolicyData;\n// Variation of essence pattern.\npublic static class LdapUserDetailsImpl.Essence extends Object;\n// An Ldap implementation of UserDetailsManager.\npublic class LdapUserDetailsManager extends Object implements org.springframework.security.provisioning.UserDetailsManager;\n// The context mapper used by the LDAP authentication provider to create an LDAP user object.\npublic class LdapUserDetailsMapper extends Object implements UserDetailsContextMapper;\n// LDAP implementation of UserDetailsService based around an LdapUserSearch and an LdapAuthoritiesPopulator.\npublic class LdapUserDetailsService extends Object implements org.springframework.security.core.userdetails.UserDetailsService;\n// A LDAP authority populator that can recursively search static nested groups.\npublic class NestedLdapAuthoritiesPopulator extends DefaultLdapAuthoritiesPopulator;\n// UserDetails implementation whose properties are based on the LDAP schema for Person.\npublic class Person extends LdapUserDetailsImpl;\n// \npublic static class Person.Essence extends LdapUserDetailsImpl.Essence;\n// \npublic class PersonContextMapper extends Object implements UserDetailsContextMapper;\n", "des": "LDAP-focused UserDetails implementations which map from a ubset of the data contained in some of the standard LDAP types (such as InetOrgPerson)."}
{"index": 2782, "repo": "spring-expression-6.0.11", "code": "package expression\n\n// Common utility classes behind the Spring Expression Language.\npackage expression.common\n// SpEL's central implementation package.\npackage expression.spel\n// An AccessException is thrown by an accessor if it has an unexpected problem.\npublic class AccessException extends Exception;\n// A bean resolver can be registered with the evaluation context and will kick in for bean references: @myBeanName and &myBeanName expressions.\npublic interface BeanResolver;\n// Executors are built by resolvers and can be cached by the infrastructure to repeat an operation quickly without going back to the resolvers.\npublic interface ConstructorExecutor;\n// A constructor resolver attempts to locate a constructor and returns a ConstructorExecutor that can be used to invoke that constructor.\n@FunctionalInterface public interface ConstructorResolver;\n// Expressions are executed in an evaluation context.\npublic interface EvaluationContext;\n// Represent an exception that occurs during expression evaluation.\npublic class EvaluationException extends ExpressionException;\n// An expression capable of evaluating itself against context objects.\npublic interface Expression;\n// Superclass for exceptions that can occur whilst processing expressions.\npublic class ExpressionException extends RuntimeException;\n// This exception wraps (as cause) a checked exception thrown by some method that SpEL invokes.\npublic class ExpressionInvocationTargetException extends EvaluationException;\n// Parses expression strings into compiled expressions that can be evaluated.\npublic interface ExpressionParser;\n// MethodExecutors are built by the resolvers and can be cached by the infrastructure to repeat an operation quickly without going back to the resolvers.\npublic interface MethodExecutor;\n// MethodFilter instances allow SpEL users to fine tune the behaviour of the method resolution process.\n@FunctionalInterface public interface MethodFilter;\n// A method resolver attempts to locate a method and returns a command executor that can be used to invoke that method.\npublic interface MethodResolver;\n// Supported operations that an OperatorOverloader can implement for any pair of operands.\npublic enum Operation extends Enum<Operation>;\n// By default the mathematical operators Operation support simple types like numbers.\npublic interface OperatorOverloader;\n// Represent an exception that occurs during expression parsing.\npublic class ParseException extends ExpressionException;\n// Input provided to an expression parser that can influence an expression parsing/compilation routine.\npublic interface ParserContext;\n", "des": "Core abstractions behind the Spring Expression Language."}
{"index": 2783, "repo": "spring-expression-6.0.11", "code": "package common\n\n// Represents a template expression broken into pieces.\npublic class CompositeStringExpression extends Object implements Expression;\n// Common utility functions that may be used by any Expression Language provider.\npublic abstract class ExpressionUtils extends Object;\n// A very simple hardcoded implementation of the Expression interface that represents a string literal.\npublic class LiteralExpression extends Object implements Expression;\n// An expression parser that understands templates.\npublic abstract class TemplateAwareExpressionParser extends Object implements ExpressionParser;\n// Configurable ParserContext implementation for template parsing.\npublic class TemplateParserContext extends Object implements ParserContext;\n", "des": "Common utility classes behind the Spring Expression Language."}
{"index": 2784, "repo": "spring-expression-6.0.11", "code": "package spel\n\n// SpEL's abstract syntax tree.\npackage spel.ast\n// SpEL's standard parser implementation.\npackage spel.standard\n// SpEL's default implementations for various core abstractions.\npackage spel.support\n// Manages the class being generated by the compilation process.\npublic class CodeFlow extends Object implements org.springframework.asm.Opcodes;\n// Interface used to generate clinit static initializer blocks.\n@FunctionalInterface public static interface CodeFlow.ClinitAdder;\n// Interface used to generate fields.\n@FunctionalInterface public static interface CodeFlow.FieldAdder;\n// A compilable property accessor is able to generate bytecode that represents the access operation, facilitating compilation to bytecode of expressions that use the accessor.\npublic interface CompilablePropertyAccessor extends PropertyAccessor, org.springframework.asm.Opcodes;\n// Base superclass for compiled expressions.\npublic abstract class CompiledExpression extends Object;\n// ExpressionState is for maintaining per-expression-evaluation state: any changes to it are not seen by other expressions, but it gives a place to hold local variables and for component expressions in a compound expression to communicate state.\npublic class ExpressionState extends Object;\n// Wraps a real parse exception.\npublic class InternalParseException extends RuntimeException;\n// Captures the possible configuration settings for a compiler that can be used when evaluating expressions.\npublic enum SpelCompilerMode extends Enum<SpelCompilerMode>;\n// Root exception for Spring EL related exceptions.\npublic class SpelEvaluationException extends EvaluationException;\n// Contains all the messages that can be produced by the Spring Expression Language.\npublic enum SpelMessage extends Enum<SpelMessage>;\n// Message kinds.\npublic static enum SpelMessage.Kind extends Enum<SpelMessage.Kind>;\n// Represents a node in the AST for a parsed expression.\npublic interface SpelNode;\n// Root exception for Spring EL related exceptions.\npublic class SpelParseException extends ParseException;\n// Configuration object for the SpEL expression parser.\npublic class SpelParserConfiguration extends Object;\n", "des": "SpEL's central implementation package."}
{"index": 2785, "repo": "spring-expression-6.0.11", "code": "package ast\n\n// Represents assignment.\npublic class Assign extends SpelNodeImpl;\n// Utilities methods for use in the Ast classes.\npublic abstract class AstUtils extends Object;\n// Represents a bean reference to a type, for example @foo or @'foo.bar'.\npublic class BeanReference extends SpelNodeImpl;\n// Represents the literal values TRUE and FALSE.\npublic class BooleanLiteral extends Literal;\n// Represents a DOT separated expression sequence, such as property1.property2.methodOne().\npublic class CompoundExpression extends SpelNodeImpl;\n// Represents the invocation of a constructor.\npublic class ConstructorReference extends SpelNodeImpl;\n// Represents the elvis operator ?:.\npublic class Elvis extends SpelNodeImpl;\n// Expression language AST node that represents a float literal.\npublic class FloatLiteral extends Literal;\n// A function reference is of the form \"#someFunction(a,b,c)\".\npublic class FunctionReference extends SpelNodeImpl;\n// An 'identifier' SpelNode.\npublic class Identifier extends SpelNodeImpl;\n// An Indexer can index into some proceeding structure to access a particular piece of it.\npublic class Indexer extends SpelNodeImpl;\n// Represent a list in an expression, e.g.\npublic class InlineList extends SpelNodeImpl;\n// Represent a map in an expression, e.g.\npublic class InlineMap extends SpelNodeImpl;\n// Expression language AST node that represents an integer literal.\npublic class IntLiteral extends Literal;\n// Common superclass for nodes representing literals (boolean, string, number, etc).\npublic abstract class Literal extends SpelNodeImpl;\n// Expression language AST node that represents a long integer literal.\npublic class LongLiteral extends Literal;\n// Expression language AST node that represents a method reference.\npublic class MethodReference extends SpelNodeImpl;\n// Expression language AST node that represents null.\npublic class NullLiteral extends Literal;\n// Represents the boolean AND operation.\npublic class OpAnd extends Operator;\n// Decrement operator.\npublic class OpDec extends Operator;\n// Implements division operator.\npublic class OpDivide extends Operator;\n// Implements the equality operator.\npublic class OpEQ extends Operator;\n", "des": "SpEL's abstract syntax tree."}
{"index": 2786, "repo": "spring-expression-6.0.11", "code": "package standard\n\n// A SpelCompiler will take a regular parsed expression and create (and load) a class containing byte code that does the same thing as that expression.\npublic final class SpelCompiler extends Object implements org.springframework.asm.Opcodes;\n// A SpelExpression represents a parsed (valid) expression that is ready to be evaluated in a specified context.\npublic class SpelExpression extends Object implements Expression;\n// SpEL parser.\npublic class SpelExpressionParser extends TemplateAwareExpressionParser;\n", "des": "SpEL's standard parser implementation."}
{"index": 2787, "repo": "spring-expression-6.0.11", "code": "package support\n\n// A TypedValue for booleans.\npublic final class BooleanTypedValue extends TypedValue;\n// A MethodResolver variant for data binding purposes, using reflection to access instance methods on a given target object.\npublic final class DataBindingMethodResolver extends ReflectiveMethodResolver;\n// A PropertyAccessor variant for data binding purposes, using reflection to access properties for reading and possibly writing.\npublic final class DataBindingPropertyAccessor extends ReflectivePropertyAccessor;\n// Utility methods used by the reflection resolver code to discover the appropriate methods/constructors and fields that should be used in expressions.\npublic abstract class ReflectionHelper extends Object;\n// A simple ConstructorExecutor implementation that runs a constructor using reflective invocation.\npublic class ReflectiveConstructorExecutor extends Object implements ConstructorExecutor;\n// A constructor resolver that uses reflection to locate the constructor that should be invoked.\npublic class ReflectiveConstructorResolver extends Object implements ConstructorResolver;\n// MethodExecutor that works via reflection.\npublic class ReflectiveMethodExecutor extends Object implements MethodExecutor;\n// Reflection-based MethodResolver used by default in StandardEvaluationContext unless explicit method resolvers have been specified.\npublic class ReflectiveMethodResolver extends Object implements MethodResolver;\n// A powerful PropertyAccessor that uses reflection to access properties for reading and possibly also for writing on a target instance.\npublic class ReflectivePropertyAccessor extends Object implements PropertyAccessor;\n// An optimized form of a PropertyAccessor that will use reflection but only knows how to access a particular property on a particular class.\npublic static class ReflectivePropertyAccessor.OptimalPropertyAccessor extends Object implements CompilablePropertyAccessor;\n// A basic implementation of EvaluationContext that focuses on a subset of essential SpEL features and customization options, targeting simple condition evaluation and in particular data binding scenarios.\npublic final class SimpleEvaluationContext extends Object implements EvaluationContext;\n// Builder for SimpleEvaluationContext.\npublic static class SimpleEvaluationContext.Builder extends Object;\n// A powerful and highly configurable EvaluationContext implementation.\npublic class StandardEvaluationContext extends Object implements EvaluationContext;\n// Standard implementation of OperatorOverloader.\npublic class StandardOperatorOverloader extends Object implements OperatorOverloader;\n// A basic TypeComparator implementation: supports comparison of Number types as well as types implementing Comparable.\npublic class StandardTypeComparator extends Object implements TypeComparator;\n", "des": "SpEL's default implementations for various core abstractions."}
{"index": 2788, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package spring\n\n// Support to enable Spring-based remote method invocations to carry a Shiro session ID as part of the invocation payload, allowing remote clients to perform security operations.\npackage spring.remoting\n// Spring-specific components for use in Spring-based web applications.\npackage spring.web\n// Bean post processor for Spring that automatically calls the init() and/or destroy() methods on Shiro objects that implement the Initializable or Destroyable interfaces, respectfully.\npublic class LifecycleBeanPostProcessor extends Object implements org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor, org.springframework.core.PriorityOrdered;\n// Spring BeanPostProcessor that detects, EventBusAware and classes containing @Subscribe methods.\npublic class ShiroEventBusBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor;\n", "des": "Spring Application Framework support for enabling Shiro in spring applications."}
{"index": 2789, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package remoting\n\n// An implementation of the Spring RemoteInvocationExecutor that binds a sessionId to the incoming thread to make it available to the SecurityManager implementation during the thread execution.\npublic class SecureRemoteInvocationExecutor extends org.springframework.remoting.support.DefaultRemoteInvocationExecutor;\n// A RemoteInvocationFactory that passes the session ID to the server via a RemoteInvocation attribute.\npublic class SecureRemoteInvocationFactory extends org.springframework.remoting.support.DefaultRemoteInvocationFactory;\n", "des": "Support to enable Spring-based remote method invocations to carry a Shiro session ID as part of the invocation payload, allowing remote clients to perform security operations."}
{"index": 2790, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package interceptor\n\n// Allows Shiro Annotations to work in any AOP Alliance specific implementation environment (for example, Spring).\npublic class AopAllianceAnnotationsAuthorizingMethodInterceptor extends org.apache.shiro.authz.aop.AnnotationsAuthorizingMethodInterceptor implements org.aopalliance.intercept.MethodInterceptor;\n// TODO - complete JavaDoc\npublic class AuthorizationAttributeSourceAdvisor extends org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor;\n", "des": "Spring AOP support for enabling Shiro annotations in Spring-configured applications."}
{"index": 2791, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package web\n\n// FactoryBean to be used in Spring-based web applications for defining the master Shiro Filter.\npublic class ShiroFilterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.config.BeanPostProcessor;\n// A Spring UrlPathHelper that uses Shiro's path resolution logic.\npublic class ShiroUrlPathHelper extends org.springframework.web.util.UrlPathHelper;\n", "des": "Spring-specific components for use in Spring-based web applications."}
{"index": 2792, "repo": "spring-amqp-3.0.6", "code": "package amqp\n\n// Provides core classes for the spring AMQP abstraction.\npackage amqp.core\n// Classes related to application events\npackage amqp.event\n// Package for Spring AMQP support classes.\npackage amqp.support\n// Provides utility classes to support Spring AMQP.\npackage amqp.utils\n// Thrown when the connection factory has been destroyed during context close; the factory can no longer open connections.\npublic class AmqpApplicationContextClosedException extends AmqpException;\n// Runtime wrapper for an authentication exception.\npublic class AmqpAuthenticationException extends AmqpException;\n// RuntimeException wrapper for an ConnectException which can be commonly thrown from AMQP operations if the remote process dies or there is a network issue.\npublic class AmqpConnectException extends AmqpException;\n// Base RuntimeException for errors that occur when executing AMQP operations.\npublic class AmqpException extends RuntimeException;\n// Equivalent of an IllegalStateException but within the AmqpException hierarchy.\npublic class AmqpIllegalStateException extends AmqpException;\n// RuntimeException wrapper for an IOException which can be commonly thrown from AMQP operations.\npublic class AmqpIOException extends AmqpException;\n// Exception for listener implementations used to indicate the basic.reject will be sent with requeue=false in order to enable features such as DLQ.\npublic class AmqpRejectAndDontRequeueException extends AmqpException;\n// An exception that wraps an exception thrown by the server in a request/reply scenario.\npublic class AmqpRemoteException extends AmqpException;\n// The AmqpException thrown when some resource can't be accessed.\npublic class AmqpResourceNotAvailableException extends AmqpException;\n// Exception thrown when some time-bound operation fails to execute in the desired time.\npublic class AmqpTimeoutException extends AmqpException;\n// RuntimeException for unsupported encoding in an AMQP operation.\npublic class AmqpUnsupportedEncodingException extends AmqpException;\n// Special exception for listener implementations that want to signal that the current batch of messages should be acknowledged immediately (i.e.\npublic class ImmediateAcknowledgeAmqpException extends AmqpException;\n// The special AmqpException to be thrown from the listener (e.g.\npublic class ImmediateRequeueAmqpException extends AmqpException;\n", "des": "Base package for Spring AMQP."}
{"index": 2793, "repo": "spring-amqp-3.0.6", "code": "package core\n\n// Base class for builders supporting arguments.\npublic abstract class AbstractBuilder extends Object;\n// Base class for Declarable classes.\npublic abstract class AbstractDeclarable extends Object implements Declarable;\n// Common properties that describe all exchange types.\npublic abstract class AbstractExchange extends AbstractDeclarable implements Exchange;\n// Acknowledgment modes supported by the listener container.\npublic enum AcknowledgeMode extends Enum<AcknowledgeMode>;\n// Represents an address for publication of an AMQP message.\npublic class Address extends Object;\n// Specifies a basic set of portable AMQP administrative operations for AMQP > 0.9.\npublic interface AmqpAdmin;\n// Exception thrown if the request message cannot be delivered when the mandatory flag is set.\npublic class AmqpMessageReturnedException extends AmqpException;\n// Async reply timeout.\npublic class AmqpReplyTimeoutException extends AmqpException;\n// Specifies a basic set of AMQP operations.\npublic interface AmqpTemplate;\n// Represents an anonymous, non-durable, exclusive, auto-delete queue.\npublic class AnonymousQueue extends Queue;\n// Classes implementing this interface can perform asynchronous send and receive operations using CompletableFutures.\npublic interface AsyncAmqpTemplate;\n// Generates names with the form <prefix><base64url> where 'prefix' is 'spring.gen-' by default (e.g.\npublic class Base64UrlNamingStrategy extends Object implements NamingStrategy;\n// Used to receive a batch of messages if the container supports it.\npublic interface BatchMessageListener extends MessageListener;\n// Simple container collecting information to describe a binding.\npublic class Binding extends AbstractDeclarable;\n// The binding destination.\npublic static enum Binding.DestinationType extends Enum<Binding.DestinationType>;\n// Basic builder class to create bindings for a more fluent API style in code based configuration.\npublic final class BindingBuilder extends Object;\n// General destination configurer.\npublic static final class BindingBuilder.DestinationConfigurer extends Object;\n// Direct exchange routing key configurer.\npublic static final class BindingBuilder.DirectExchangeRoutingKeyConfigurer extends Object;\n// Generic argument configurer.\npublic static class BindingBuilder.GenericArgumentsConfigurer extends Object;\n// Generic exchange routing key configurer.\npublic static final class BindingBuilder.GenericExchangeRoutingKeyConfigurer extends Object;\n", "des": "Provides core classes for the spring AMQP abstraction."}
{"index": 2794, "repo": "spring-amqp-3.0.6", "code": "package event\n\n// Base class for events.\npublic abstract class AmqpEvent extends org.springframework.context.ApplicationEvent;\n", "des": "Classes related to application events"}
{"index": 2795, "repo": "spring-amqp-3.0.6", "code": "package support\n\n// Provides classes for supporting message conversion.\npackage support.converter\n// Package for Spring AMQP message post processors.\npackage support.postprocessor\n// Strategy interface for mapping messaging Message headers to an outbound MessageProperties (e.g.\npublic interface AmqpHeaderMapper extends org.springframework.messaging.support.HeaderMapper<MessageProperties>;\n// Pre-defined names and prefixes to be used for setting and/or retrieving AMQP MessageProperties from/to Message Headers.\npublic abstract class AmqpHeaders extends Object;\n// A MessageHeaderAccessor implementation giving access to AMQP-specific headers.\npublic class AmqpMessageHeaderAccessor extends org.springframework.messaging.support.NativeMessageHeaderAccessor;\n// For components that support customization of the logging of certain events, users can provide an implementation of this interface to modify the existing logging behavior.\n@FunctionalInterface public interface ConditionalExceptionLogger;\n// A strategy interface to determine the consumer tag to be used when issuing a basicConsume operation.\n@FunctionalInterface public interface ConsumerTagStrategy;\n// Type safe accessor for retried message sending.\npublic final class SendRetryContextAccessor extends Object;\n// Simple implementation of AmqpHeaderMapper.\npublic class SimpleAmqpHeaderMapper extends org.springframework.messaging.support.AbstractHeaderMapper<MessageProperties> implements AmqpHeaderMapper;\n", "des": "Package for Spring AMQP support classes."}
{"index": 2796, "repo": "spring-amqp-3.0.6", "code": "package converter\n\n// Abstract Jackson2 message converter.\npublic abstract class AbstractJackson2MessageConverter extends AbstractMessageConverter implements org.springframework.beans.factory.BeanClassLoaderAware, SmartMessageConverter;\n// Abstract type mapper.\npublic abstract class AbstractJavaTypeMapper extends Object implements org.springframework.beans.factory.BeanClassLoaderAware;\n// Convenient base class for MessageConverter implementations.\npublic abstract class AbstractMessageConverter extends Object implements MessageConverter;\n// MessageConverters that potentially use Java deserialization.\npublic abstract class AllowedListDeserializingMessageConverter extends AbstractMessageConverter;\n// Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic interface ClassMapper;\n// A composite MessageConverter that delegates to an actual MessageConverter based on the contentType header.\npublic class ContentTypeDelegatingMessageConverter extends Object implements MessageConverter;\n// Maps to/from JSON using type information in the MessageProperties; the default name of the message property containing the type is \"__TypeId__\".\npublic class DefaultClassMapper extends Object implements ClassMapper, org.springframework.beans.factory.InitializingBean;\n// Jackson 2 type mapper.\npublic class DefaultJackson2JavaTypeMapper extends AbstractJavaTypeMapper implements Jackson2JavaTypeMapper;\n// Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic interface Jackson2JavaTypeMapper extends ClassMapper;\n// The precedence for type conversion - inferred from the method parameter or message headers.\npublic static enum Jackson2JavaTypeMapper.TypePrecedence extends Enum<Jackson2JavaTypeMapper.TypePrecedence>;\n// JSON converter that uses the Jackson 2 Json library.\npublic class Jackson2JsonMessageConverter extends AbstractJackson2MessageConverter;\n// XML converter that uses the Jackson 2 Xml library.\npublic class Jackson2XmlMessageConverter extends AbstractJackson2MessageConverter;\n// Spring Rabbit MessageConverter that uses a Marshaller and Unmarshaller.\npublic class MarshallingMessageConverter extends AbstractMessageConverter implements org.springframework.beans.factory.InitializingBean;\n// Exception to be thrown by message converters if they encounter a problem with converting a message or object.\npublic class MessageConversionException extends AmqpException;\n// Message converter interface.\npublic interface MessageConverter;\n", "des": "Provides classes for supporting message conversion."}
{"index": 2797, "repo": "spring-amqp-3.0.6", "code": "package postprocessor\n\n// Base class for post processors that compress the message body.\npublic abstract class AbstractCompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered;\n// Base class for post processors that decompress the message body if the MessageProperties.SPRING_AUTO_DECOMPRESS header is true or to optionally always decompress if the content encoding matches AbstractDecompressingPostProcessor.getEncoding(), or starts with AbstractDecompressingPostProcessor.getEncoding() + \":\", in which case the encoding following the colon becomes the final content encoding of the decompressed message.\npublic abstract class AbstractDecompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered;\n// Base class for post processors based on Deflater.\npublic abstract class AbstractDeflaterPostProcessor extends AbstractCompressingPostProcessor;\n// A post processor that uses a DeflaterOutputStream to compress the message body.\npublic class DeflaterPostProcessor extends AbstractDeflaterPostProcessor;\n// A MessagePostProcessor that delegates to one of its MessagePostProcessors depending on the content encoding.\npublic class DelegatingDecompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered;\n// A post processor that uses a GZIPInputStream to decompress the message body.\npublic class GUnzipPostProcessor extends AbstractDecompressingPostProcessor;\n// A post processor that uses a GZIPOutputStream to compress the message body.\npublic class GZipPostProcessor extends AbstractDeflaterPostProcessor;\n// A post processor that uses a InflaterInputStream to decompress the message body.\npublic class InflaterPostProcessor extends AbstractDecompressingPostProcessor;\n// Utilities for message post processors.\npublic final class MessagePostProcessorUtils extends Object;\n// A post processor that uses a ZipInputStream to decompress the message body.\npublic class UnzipPostProcessor extends AbstractDecompressingPostProcessor;\n// A post processor that uses a ZipOutputStream to compress the message body.\npublic class ZipPostProcessor extends AbstractDeflaterPostProcessor;\n", "des": "Package for Spring AMQP message post processors."}
{"index": 2798, "repo": "spring-amqp-3.0.6", "code": "package utils\n\n// Chained utility methods to simplify some Java repetitive code.\npublic final class JavaUtils extends Object;\n// A Builder pattern implementation for a Map.\npublic class MapBuilder<B extends MapBuilder<B,K,V>,K,V> extends Object;\n// Static utility to help with serialization.\npublic final class SerializationUtils extends Object;\n", "des": "Provides utility classes to support Spring AMQP."}
{"index": 2799, "repo": "spring-security-oauth2-core-6.1.2", "code": "package core\n\n// Support classes that model the OAuth 2.0 Request and Response messages from the Authorization Endpoint and Token Endpoint.\npackage core.endpoint\n// Core classes and interfaces providing support for OpenID Connect Core 1.0.\npackage core.oidc\n// Provides a model for an OAuth 2.0 representation of a user Principal.\npackage core.user\n// Base class for OAuth 2.0 Token implementations.\npublic abstract class AbstractOAuth2Token extends Object implements OAuth2Token, Serializable;\n// The authentication method used when sending bearer access tokens in resource requests to resource servers.\npublic final class AuthenticationMethod extends Object implements Serializable;\n// An authorization grant is a credential representing the resource owner's authorization (to access it's protected resources) to the client and used by the client to obtain an access token.\npublic final class AuthorizationGrantType extends Object implements Serializable;\n// An \"accessor\" for a set of claims that may be used for assertions.\npublic interface ClaimAccessor;\n// The authentication method used when authenticating the client with the authorization server.\npublic final class ClientAuthenticationMethod extends Object implements Serializable;\n// A domain object that wraps the attributes of an OAuth 2.0 token.\npublic final class DefaultOAuth2AuthenticatedPrincipal extends Object implements OAuth2AuthenticatedPrincipal, Serializable;\n// A composite validator\npublic final class DelegatingOAuth2TokenValidator<T extends OAuth2Token> extends Object implements OAuth2TokenValidator<T>;\n// An implementation of an AbstractOAuth2Token representing an OAuth 2.0 Access Token.\npublic class OAuth2AccessToken extends AbstractOAuth2Token;\n// Access Token Types.\npublic static final class OAuth2AccessToken.TokenType extends Object implements Serializable;\n// An AuthenticatedPrincipal that represents the principal associated with an OAuth 2.0 token.\npublic interface OAuth2AuthenticatedPrincipal extends org.springframework.security.core.AuthenticatedPrincipal;\n// This exception is thrown for all OAuth 2.0 related Authentication errors.\npublic class OAuth2AuthenticationException extends org.springframework.security.core.AuthenticationException;\n// Base exception for OAuth 2.0 Authorization errors.\npublic class OAuth2AuthorizationException extends RuntimeException;\n// An implementation of an AbstractOAuth2Token representing a device code as part of the OAuth 2.0 Device Authorization Grant.\npublic class OAuth2DeviceCode extends AbstractOAuth2Token;\n", "des": "Core classes and interfaces providing support for the OAuth 2.0 Authorization Framework."}
{"index": 2800, "repo": "spring-security-oauth2-core-6.1.2", "code": "package endpoint\n\n// A Converter that converts the provided OAuth 2.0 Access Token Response parameters to an OAuth2AccessTokenResponse.\npublic final class DefaultMapOAuth2AccessTokenResponseConverter extends Object implements org.springframework.core.convert.converter.Converter<Map<String,Object>,OAuth2AccessTokenResponse>;\n// A Converter that converts the provided OAuth2AccessTokenResponse to a Map representation of the OAuth 2.0 Access Token Response parameters.\npublic final class DefaultOAuth2AccessTokenResponseMapConverter extends Object implements org.springframework.core.convert.converter.Converter<OAuth2AccessTokenResponse,Map<String,Object>>;\n// A representation of an OAuth 2.0 Access Token Response.\npublic final class OAuth2AccessTokenResponse extends Object;\n// A builder for OAuth2AccessTokenResponse.\npublic static final class OAuth2AccessTokenResponse.Builder extends Object;\n// An \"exchange\" of an OAuth 2.0 Authorization Request and Response for the authorization code grant type.\npublic final class OAuth2AuthorizationExchange extends Object;\n// A representation of an OAuth 2.0 Authorization Request for the authorization code grant type.\npublic final class OAuth2AuthorizationRequest extends Object implements Serializable;\n// A builder for OAuth2AuthorizationRequest.\npublic static final class OAuth2AuthorizationRequest.Builder extends Object;\n// A representation of an OAuth 2.0 Authorization Response for the authorization code grant type.\npublic final class OAuth2AuthorizationResponse extends Object;\n// A builder for OAuth2AuthorizationResponse.\npublic static final class OAuth2AuthorizationResponse.Builder extends Object;\n// The response_type parameter is consumed by the authorization endpoint which is used by the authorization code grant type.\npublic final class OAuth2AuthorizationResponseType extends Object implements Serializable;\n// A representation of an OAuth 2.0 Device Authorization Response.\npublic final class OAuth2DeviceAuthorizationResponse extends Object;\n// A builder for OAuth2DeviceAuthorizationResponse.\npublic static final class OAuth2DeviceAuthorizationResponse.Builder extends Object;\n// Standard and custom (non-standard) parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint, token endpoint and token revocation endpoint.\npublic final class OAuth2ParameterNames extends Object;\n// Standard parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint and token endpoint.\npublic final class PkceParameterNames extends Object;\n", "des": "Support classes that model the OAuth 2.0 Request and Response messages from the Authorization Endpoint and Token Endpoint."}
{"index": 2801, "repo": "spring-security-oauth2-core-6.1.2", "code": "package oidc\n\n// Support classes that model the OpenID Connect Core 1.0 Request and Response messages from the Authorization Endpoint and Token Endpoint.\npackage oidc.endpoint\n// Provides a model for an OpenID Connect Core 1.0 representation of a user Principal.\npackage oidc.user\n// The Address Claim represents a physical mailing address defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token.\npublic interface AddressStandardClaim;\n// The default implementation of an Address Claim.\npublic final class DefaultAddressStandardClaim extends Object implements AddressStandardClaim;\n// A builder for DefaultAddressStandardClaim.\npublic static class DefaultAddressStandardClaim.Builder extends Object;\n// A ClaimAccessor for the \"claims\" that can be returned in the ID Token, which provides information about the authentication of an End-User by an Authorization Server.\npublic interface IdTokenClaimAccessor extends StandardClaimAccessor;\n// The names of the \"claims\" defined by the OpenID Connect Core 1.0 specification that can be returned in the ID Token.\npublic final class IdTokenClaimNames extends Object;\n// An implementation of an AbstractOAuth2Token representing an OpenID Connect Core 1.0 ID Token.\npublic class OidcIdToken extends AbstractOAuth2Token implements IdTokenClaimAccessor;\n// A builder for OidcIdTokens\npublic static final class OidcIdToken.Builder extends Object;\n// The scope values defined by the OpenID Connect Core 1.0 specification that can be used to request claims.\npublic final class OidcScopes extends Object;\n// A representation of a UserInfo Response that is returned from the OAuth 2.0 Protected Resource UserInfo Endpoint.\npublic class OidcUserInfo extends Object implements StandardClaimAccessor, Serializable;\n// A builder for OidcUserInfos\npublic static final class OidcUserInfo.Builder extends Object;\n// A ClaimAccessor for the \"Standard Claims\" that can be returned either in the UserInfo Response or the ID Token.\npublic interface StandardClaimAccessor extends ClaimAccessor;\n// The names of the \"Standard Claims\" defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token.\npublic final class StandardClaimNames extends Object;\n", "des": "Core classes and interfaces providing support for OpenID Connect Core 1.0."}
{"index": 2802, "repo": "spring-security-oauth2-core-6.1.2", "code": "package endpoint\n\n// Standard parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint and token endpoint.\npublic final class OidcParameterNames extends Object;\n", "des": "Support classes that model the OpenID Connect Core 1.0 Request and Response messages from the Authorization Endpoint and Token Endpoint."}
{"index": 2803, "repo": "spring-security-oauth2-core-6.1.2", "code": "package user\n\n// The default implementation of an OidcUser.\npublic class DefaultOidcUser extends DefaultOAuth2User implements OidcUser;\n// A representation of a user Principal that is registered with an OpenID Connect 1.0 Provider.\npublic interface OidcUser extends OAuth2User, IdTokenClaimAccessor;\n// A GrantedAuthority that may be associated to an OidcUser.\npublic class OidcUserAuthority extends OAuth2UserAuthority;\n", "des": "Provides a model for an OpenID Connect Core 1.0 representation of a user Principal."}
{"index": 2804, "repo": "spring-security-oauth2-core-6.1.2", "code": "package user\n\n// The default implementation of an OAuth2User.\npublic class DefaultOAuth2User extends Object implements OAuth2User, Serializable;\n// A representation of a user Principal that is registered with an OAuth 2.0 Provider.\npublic interface OAuth2User extends OAuth2AuthenticatedPrincipal;\n// A GrantedAuthority that may be associated to an OAuth2User.\npublic class OAuth2UserAuthority extends Object implements org.springframework.security.core.GrantedAuthority;\n", "des": "Provides a model for an OAuth 2.0 representation of a user Principal."}
{"index": 2805, "repo": "spring-integration-ip-6.1.2", "code": "package ip\n\n// Provides classes for configuration - parsers, namespace handlers, factory beans.\npackage ip.config\n// Provides TCP/UDP Component support for the Java DSL.\npackage ip.dsl\n// ApplicationEvents generated by the ip module.\npackage ip.event\n// Base package for TCP Support.\npackage ip.tcp\n// Base package for UDP support.\npackage ip.udp\n// Provides utilities for IP support.\npackage ip.util\n// Base class for inbound TCP/UDP Channel Adapters.\npublic abstract class AbstractInternetProtocolReceivingChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.scheduling.SchedulingAwareRunnable, CommonSocketOptions;\n// Base class for UDP MessageHandlers.\npublic abstract class AbstractInternetProtocolSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler implements CommonSocketOptions, org.springframework.integration.support.management.ManageableLifecycle;\n// \npublic interface CommonSocketOptions;\n// Headers for Messages mapped from IP datagram packets.\npublic final class IpHeaders extends Object;\n", "des": "Base package for IP (TCP/UDP) Support."}
{"index": 2806, "repo": "spring-integration-ip-6.1.2", "code": "package config\n\n// Utility methods and constants for IP adapter parsers.\npublic abstract class IpAdapterParserUtils extends Object;\n// Namespace handler for Spring Integration's ip namespace.\npublic class IpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n// Instantiates a TcpN(et|io)(Server|Client)ConnectionFactory, depending on type and using-nio attributes.\npublic class TcpConnectionFactoryFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractConnectionFactory> implements org.springframework.context.Lifecycle, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.ApplicationContextAware;\n// \npublic class TcpConnectionFactoryParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\n// Channel Adapter that receives TCP stream frames and maps them to Messages.\npublic class TcpInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser;\n// \npublic class TcpInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser;\n// \npublic class TcpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\n// Parser for the <outbound-gateway> element of the integration 'jms' namespace.\npublic class TcpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n// Channel Adapter that receives UDP datagram packets and maps them to Messages.\npublic class UdpInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser;\n// \npublic class UdpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 2807, "repo": "spring-integration-ip-6.1.2", "code": "package dsl\n\n// An IntegrationComponentSpec for AbstractConnectionFactorys.\npublic abstract class AbstractConnectionFactorySpec<S extends AbstractConnectionFactorySpec<S,C>,C extends AbstractConnectionFactory> extends org.springframework.integration.dsl.IntegrationComponentSpec<S,C>;\n// A MessageHandlerSpec for UDP MessageHandlers.\npublic abstract class AbstractUdpOutboundChannelAdapterSpec<S extends AbstractUdpOutboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageHandlerSpec<S,UnicastSendingMessageHandler>;\n// Factory methods for TCP.\npublic final class Tcp extends Object;\n// An AbstractConnectionFactorySpec for AbstractClientConnectionFactorys.\npublic abstract class TcpClientConnectionFactorySpec<S extends TcpClientConnectionFactorySpec<S,C>,C extends AbstractClientConnectionFactory> extends AbstractConnectionFactorySpec<S,C>;\n// A MessageProducerSpec for TcpReceivingChannelAdapters.\npublic class TcpInboundChannelAdapterSpec extends org.springframework.integration.dsl.MessageProducerSpec<TcpInboundChannelAdapterSpec,TcpReceivingChannelAdapter> implements org.springframework.integration.dsl.ComponentsRegistration;\n// A MessagingGatewaySpec for TcpInboundGateways.\npublic class TcpInboundGatewaySpec extends org.springframework.integration.dsl.MessagingGatewaySpec<TcpInboundGatewaySpec,TcpInboundGateway> implements org.springframework.integration.dsl.ComponentsRegistration;\n// TcpClientConnectionFactorySpec for TcpNetClientConnectionFactorys.\npublic class TcpNetClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNetClientConnectionFactorySpec,TcpNetClientConnectionFactory>;\n// TcpServerConnectionFactorySpec for TcpNetServerConnectionFactorys.\npublic class TcpNetServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNetServerConnectionFactorySpec,TcpNetServerConnectionFactory>;\n// TcpClientConnectionFactorySpec for TcpNioClientConnectionFactorys.\npublic class TcpNioClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNioClientConnectionFactorySpec,TcpNioClientConnectionFactory>;\n// TcpServerConnectionFactorySpec for TcpNioServerConnectionFactorys.\npublic class TcpNioServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNioServerConnectionFactorySpec,TcpNioServerConnectionFactory>;\n", "des": "Provides TCP/UDP Component support for the Java DSL."}
{"index": 2808, "repo": "spring-integration-ip-6.1.2", "code": "package event\n\n// \npublic abstract class IpIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "ApplicationEvents generated by the ip module."}
{"index": 2809, "repo": "spring-integration-ip-6.1.2", "code": "package tcp\n\n// All things related to tcp connections - client and server factories; listener and sender interfaces.\npackage tcp.connection\n// Byte array (de)serializers for putting some protocol on the wire so that incoming messages can be constructed from stream data.\npackage tcp.serializer\n// Inbound Gateway using a server connection factory - threading is controlled by the factory.\npublic class TcpInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements TcpListener, TcpSender, ClientModeCapable, org.springframework.integration.context.OrderlyShutdownCapable;\n// TCP outbound gateway that uses a client connection factory.\npublic class TcpOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements TcpSender, TcpListener, org.springframework.integration.support.management.ManageableLifecycle;\n// Tcp inbound channel adapter using a TcpConnection to receive data - if the connection factory is a server factory, this Listener owns the connections.\npublic class TcpReceivingChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements TcpListener, ClientModeCapable, org.springframework.integration.context.OrderlyShutdownCapable;\n// Tcp outbound channel adapter using a TcpConnection to send data - if the connection factory is a server factory, the TcpListener owns the connections.\npublic class TcpSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler implements TcpSender, org.springframework.integration.support.management.ManageableLifecycle, ClientModeCapable;\n", "des": "Base package for TCP Support."}
{"index": 2810, "repo": "spring-integration-ip-6.1.2", "code": "package connection\n\n// Abstract class for client connection factories; client connection factories establish outgoing connections.\npublic abstract class AbstractClientConnectionFactory extends AbstractConnectionFactory;\n// Base class for all connection factories.\npublic abstract class AbstractConnectionFactory extends org.springframework.integration.context.IntegrationObjectSupport implements ConnectionFactory, org.springframework.context.ApplicationEventPublisherAware;\n// Base class for all server connection factories.\npublic abstract class AbstractServerConnectionFactory extends AbstractConnectionFactory implements TcpServerConnectionFactory, org.springframework.scheduling.SchedulingAwareRunnable, org.springframework.integration.context.OrderlyShutdownCapable;\n// Base class for TCP Connection Support implementations.\npublic abstract class AbstractTcpConnectionSupport extends Object;\n// Connection factory that caches connections from the underlying target factory.\npublic class CachingClientConnectionFactory extends AbstractClientConnectionFactory implements org.springframework.beans.factory.DisposableBean;\n// Edpoints implementing this interface are capable of running in client-mode.\npublic interface ClientModeCapable;\n// Intended to be run on a schedule, simply gets the connection from a client connection factory each time it is run.\npublic class ClientModeConnectionManager extends Object implements Runnable;\n// A factory used to create TcpConnection objects.\npublic interface ConnectionFactory extends org.springframework.integration.support.management.ManageableLifecycle;\n// Default implementation of TcpNetConnectionSupport.\npublic class DefaultTcpNetConnectionSupport extends AbstractTcpConnectionSupport implements TcpNetConnectionSupport;\n// Implementation of TcpSocketFactorySupport for non-SSL sockets ServerSocket and Socket.\npublic class DefaultTcpNetSocketFactorySupport extends Object implements TcpSocketFactorySupport;\n// Implementation of TcpSocketFactorySupport for SSL sockets SSLServerSocket and SSLSocket.\npublic class DefaultTcpNetSSLSocketFactorySupport extends Object implements TcpSocketFactorySupport;\n// Implementation of TcpNioConnectionSupport for non-SSL NIO connections.\npublic class DefaultTcpNioConnectionSupport extends AbstractTcpConnectionSupport implements TcpNioConnectionSupport;\n// Implementation of TcpNioConnectionSupport for SSL NIO connections.\npublic class DefaultTcpNioSSLConnectionSupport extends AbstractTcpConnectionSupport implements TcpNioConnectionSupport;\n// Default implementation of TcpSocketSupport; makes no changes to sockets.\npublic class DefaultTcpSocketSupport extends Object implements TcpSocketSupport;\n", "des": "All things related to tcp connections - client and server factories; listener and sender interfaces."}
{"index": 2811, "repo": "spring-integration-ip-6.1.2", "code": "package serializer\n\n// Base class for (de)serializers that provide a mechanism to reconstruct a byte array from an arbitrary stream.\npublic abstract class AbstractByteArraySerializer extends Object implements org.springframework.core.serializer.Serializer<byte[]>, org.springframework.core.serializer.Deserializer<byte[]>, org.springframework.context.ApplicationEventPublisherAware;\n// Base class for deserializers that cannot determine the buffer size needed.\npublic abstract class AbstractPooledBufferByteArraySerializer extends AbstractByteArraySerializer;\n// Reads data in an InputStream to a byte[]; data must be terminated by \\r\\n (not included in resulting byte[]).\npublic class ByteArrayCrLfSerializer extends AbstractPooledBufferByteArraySerializer;\n// A deserializer that uses a ByteArrayOutputStream instead of a fixed buffer, allowing the buffer to grow as needed.\npublic class ByteArrayElasticRawDeserializer extends Object implements org.springframework.core.serializer.Deserializer<byte[]>;\n// Reads data in an InputStream to a byte[]; data must be preceded by a binary length (network byte order, not included in resulting byte[]).\npublic class ByteArrayLengthHeaderSerializer extends AbstractByteArraySerializer;\n// \npublic class ByteArrayLfSerializer extends ByteArraySingleTerminatorSerializer;\n// A byte array (de)serializer that does nothing with the payload; sends it raw.\npublic class ByteArrayRawSerializer extends AbstractPooledBufferByteArraySerializer;\n// Reads data in an InputStream to a byte[]; data must be terminated by a single byte (not included in resulting byte[]).\npublic class ByteArraySingleTerminatorSerializer extends AbstractPooledBufferByteArraySerializer;\n// Reads data in an InputStream to a byte[]; data must be prefixed by <stx> and terminated by <etx> (not included in resulting byte[]).\npublic class ByteArrayStxEtxSerializer extends AbstractPooledBufferByteArraySerializer;\n// Serializes a Map as JSON.\npublic class MapJsonSerializer extends Object implements org.springframework.core.serializer.Serializer<Map<?,?>>, org.springframework.core.serializer.Deserializer<Map<?,?>>;\n// Used to communicate that a stream has closed, but between logical messages.\npublic class SoftEndOfStreamException extends RuntimeException;\n// Factory class to create TCP Serializer/Deserializers used to encode/decode messages to/from a TCP stream.\npublic final class TcpCodecs extends Object;\n", "des": "Byte array (de)serializers for putting some protocol on the wire so that incoming messages can be constructed from stream data."}
{"index": 2812, "repo": "spring-integration-ip-6.1.2", "code": "package udp\n\n// Message Mapper for converting to and from UDP DatagramPackets.\npublic class DatagramPacketMessageMapper extends Object implements org.springframework.integration.mapping.InboundMessageMapper<DatagramPacket>, org.springframework.integration.mapping.OutboundMessageMapper<DatagramPacket>, org.springframework.beans.factory.BeanFactoryAware;\n// Channel adapter that joins a multicast group and receives incoming packets and sends them to an output channel.\npublic class MulticastReceivingChannelAdapter extends UnicastReceivingChannelAdapter;\n// A MessageHandler implementation that maps a Message into a UDP datagram packet and sends that to the specified multicast address (224.0.0.0 to 239.255.255.255) and port.\npublic class MulticastSendingMessageHandler extends UnicastSendingMessageHandler;\n// Configures a socket.\n@FunctionalInterface public interface SocketCustomizer;\n// IpIntegrationEvent emitted when a server begins listening.\npublic class UdpServerListeningEvent extends IpIntegrationEvent;\n// A channel adapter to receive incoming UDP packets.\npublic class UnicastReceivingChannelAdapter extends AbstractInternetProtocolReceivingChannelAdapter;\n// A MessageHandler implementation that maps a Message into a UDP datagram packet and sends that to the specified host and port.\npublic class UnicastSendingMessageHandler extends AbstractInternetProtocolSendingMessageHandler implements Runnable;\n", "des": "Base package for UDP support."}
{"index": 2813, "repo": "spring-integration-ip-6.1.2", "code": "package util\n\n// Regular Expression Utilities.\npublic final class RegexUtils extends Object;\n// Convenience class providing methods for testing IP components.\npublic final class TestingUtilities extends Object;\n", "des": "Provides utilities for IP support."}
{"index": 2814, "repo": "spring-orm-6.0.11", "code": "package orm\n\n// Package providing integration of Hibernate 5.x with Spring concepts.\npackage orm.hibernate5\n// Package providing integration of JPA (Java Persistence API) with Spring concepts.\npackage orm.jpa\n// Exception thrown on an optimistic locking violation for a mapped object.\npublic class ObjectOptimisticLockingFailureException extends org.springframework.dao.OptimisticLockingFailureException;\n// Exception thrown if a mapped object could not be retrieved via its identifier.\npublic class ObjectRetrievalFailureException extends org.springframework.dao.DataRetrievalFailureException;\n", "des": "Root package for Spring's O/R Mapping integration classes."}
{"index": 2815, "repo": "spring-orm-6.0.11", "code": "package hibernate5\n\n// Classes supporting the org.springframework.orm.hibernate5 package.\npackage hibernate5.support\n// Callback interface for Hibernate code.\n@FunctionalInterface public interface HibernateCallback<T>;\n// PersistenceExceptionTranslator capable of translating HibernateException instances to Spring's DataAccessException hierarchy.\npublic class HibernateExceptionTranslator extends Object implements org.springframework.dao.support.PersistenceExceptionTranslator;\n// Hibernate-specific subclass of UncategorizedDataAccessException, for JDBC exceptions that Hibernate wrapped.\npublic class HibernateJdbcException extends org.springframework.dao.UncategorizedDataAccessException;\n// Hibernate-specific subclass of ObjectRetrievalFailureException.\npublic class HibernateObjectRetrievalFailureException extends ObjectRetrievalFailureException;\n// Interface that specifies a common set of Hibernate operations as well as a general HibernateOperations.execute(org.springframework.orm.hibernate5.HibernateCallback<T>) method for Session-based lambda expressions.\npublic interface HibernateOperations;\n// Hibernate-specific subclass of ObjectOptimisticLockingFailureException.\npublic class HibernateOptimisticLockingFailureException extends ObjectOptimisticLockingFailureException;\n// Hibernate-specific subclass of InvalidDataAccessResourceUsageException, thrown on invalid HQL query syntax.\npublic class HibernateQueryException extends org.springframework.dao.InvalidDataAccessResourceUsageException;\n// Hibernate-specific subclass of UncategorizedDataAccessException, for Hibernate system errors that do not match any concrete org.springframework.dao exceptions.\npublic class HibernateSystemException extends org.springframework.dao.UncategorizedDataAccessException;\n// Helper class that simplifies Hibernate data access code.\npublic class HibernateTemplate extends Object implements HibernateOperations, org.springframework.beans.factory.InitializingBean;\n// PlatformTransactionManager implementation for a single Hibernate SessionFactory.\npublic class HibernateTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\n", "des": "Package providing integration of Hibernate 5.x with Spring concepts."}
{"index": 2816, "repo": "spring-orm-6.0.11", "code": "package support\n\n// Convenient superclass for Hibernate-based data access objects.\npublic abstract class HibernateDaoSupport extends org.springframework.dao.support.DaoSupport;\n// Simple AOP Alliance MethodInterceptor implementation that binds a new Hibernate Session for each method invocation, if none bound before.\npublic class OpenSessionInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.InitializingBean;\n// Servlet Filter that binds a Hibernate Session to the thread for the entire processing of the request.\npublic class OpenSessionInViewFilter extends org.springframework.web.filter.OncePerRequestFilter;\n// Spring web request interceptor that binds a Hibernate Session to the thread for the entire processing of the request.\npublic class OpenSessionInViewInterceptor extends Object implements org.springframework.web.context.request.AsyncWebRequestInterceptor;\n", "des": "Classes supporting the org.springframework.orm.hibernate5 package."}
{"index": 2817, "repo": "spring-orm-6.0.11", "code": "package jpa\n\n// Internal support for managing JPA persistence units.\npackage jpa.persistenceunit\n// Classes supporting the org.springframework.orm.jpa package.\npackage jpa.support\n// Support classes for adapting to specific JPA vendors.\npackage jpa.vendor\n// Abstract FactoryBean that creates a local JPA EntityManagerFactory instance within a Spring application context.\npublic abstract class AbstractEntityManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<EntityManagerFactory>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, EntityManagerFactoryInfo, org.springframework.dao.support.PersistenceExceptionTranslator, Serializable;\n// Default implementation of the JpaDialect interface.\npublic class DefaultJpaDialect extends Object implements JpaDialect, Serializable;\n// Base class for any class that needs to access a JPA EntityManagerFactory, usually in order to obtain a JPA EntityManager.\npublic abstract class EntityManagerFactoryAccessor extends Object implements org.springframework.beans.factory.BeanFactoryAware;\n// Metadata interface for a Spring-managed JPA EntityManagerFactory.\npublic interface EntityManagerFactoryInfo;\n// Helper class featuring methods for JPA EntityManager handling, allowing for reuse of EntityManager instances within transactions.\npublic abstract class EntityManagerFactoryUtils extends Object;\n// Resource holder wrapping a JPA EntityManager.\npublic class EntityManagerHolder extends org.springframework.transaction.support.ResourceHolderSupport;\n// Subinterface of EntityManager to be implemented by EntityManager proxies.\npublic interface EntityManagerProxy extends EntityManager;\n// Delegate for creating a variety of EntityManager proxies that follow the JPA spec's semantics for \"extended\" EntityManagers.\npublic abstract class ExtendedEntityManagerCreator extends Object;\n// SPI strategy that encapsulates certain functionality that standard JPA 3.0 does not offer, such as access to the underlying JDBC Connection.\npublic interface JpaDialect extends org.springframework.dao.support.PersistenceExceptionTranslator;\n// JPA-specific subclass of ObjectRetrievalFailureException.\npublic class JpaObjectRetrievalFailureException extends ObjectRetrievalFailureException;\n", "des": "Package providing integration of JPA (Java Persistence API) with Spring concepts."}
{"index": 2818, "repo": "spring-orm-6.0.11", "code": "package persistenceunit\n\n// Default implementation of the PersistenceUnitManager interface.\npublic class DefaultPersistenceUnitManager extends Object implements PersistenceUnitManager, org.springframework.context.ResourceLoaderAware, org.springframework.context.weaving.LoadTimeWeaverAware, org.springframework.beans.factory.InitializingBean;\n// Spring's base implementation of the JPA PersistenceUnitInfo interface, used to bootstrap an EntityManagerFactory in a container.\npublic class MutablePersistenceUnitInfo extends Object implements SmartPersistenceUnitInfo;\n// Provide the list of managed persistent types that an entity manager should consider.\npublic interface PersistenceManagedTypes;\n// Scanner of PersistenceManagedTypes.\npublic final class PersistenceManagedTypesScanner extends Object;\n// Interface that defines an abstraction for finding and managing JPA PersistenceUnitInfos.\npublic interface PersistenceUnitManager;\n// Callback interface for post-processing a JPA PersistenceUnitInfo.\npublic interface PersistenceUnitPostProcessor;\n// Extension of the standard JPA PersistenceUnitInfo interface, for advanced collaboration between Spring's LocalContainerEntityManagerFactoryBean and PersistenceUnitManager implementations.\npublic interface SmartPersistenceUnitInfo extends PersistenceUnitInfo;\n", "des": "Internal support for managing JPA persistence units."}
{"index": 2819, "repo": "spring-orm-6.0.11", "code": "package support\n\n// Servlet Filter that binds a JPA EntityManager to the thread for the entire processing of the request.\npublic class OpenEntityManagerInViewFilter extends org.springframework.web.filter.OncePerRequestFilter;\n// Spring web request interceptor that binds a JPA EntityManager to the thread for the entire processing of the request.\npublic class OpenEntityManagerInViewInterceptor extends EntityManagerFactoryAccessor implements org.springframework.web.context.request.AsyncWebRequestInterceptor;\n// BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations, for injection of the corresponding JPA resources EntityManagerFactory and EntityManager.\npublic class PersistenceAnnotationBeanPostProcessor extends Object implements org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor, org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor, org.springframework.beans.factory.aot.BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, org.springframework.beans.factory.BeanFactoryAware, Serializable;\n// FactoryBean that exposes a shared JPA EntityManager reference for a given EntityManagerFactory.\npublic class SharedEntityManagerBean extends EntityManagerFactoryAccessor implements org.springframework.beans.factory.FactoryBean<EntityManager>, org.springframework.beans.factory.InitializingBean;\n", "des": "Classes supporting the org.springframework.orm.jpa package."}
{"index": 2820, "repo": "spring-orm-6.0.11", "code": "package vendor\n\n// Abstract JpaVendorAdapter implementation that defines common properties, to be translated into vendor-specific JPA properties by concrete subclasses.\npublic abstract class AbstractJpaVendorAdapter extends Object implements JpaVendorAdapter;\n// Enumeration for common database platforms.\npublic enum Database extends Enum<Database>;\n// JpaDialect implementation for Eclipse Persistence Services (EclipseLink).\npublic class EclipseLinkJpaDialect extends DefaultJpaDialect;\n// JpaVendorAdapter implementation for Eclipse Persistence Services (EclipseLink).\npublic class EclipseLinkJpaVendorAdapter extends AbstractJpaVendorAdapter;\n// JpaDialect implementation for Hibernate.\npublic class HibernateJpaDialect extends DefaultJpaDialect;\n// JpaVendorAdapter implementation for Hibernate.\npublic class HibernateJpaVendorAdapter extends AbstractJpaVendorAdapter;\n", "des": "Support classes for adapting to specific JPA vendors."}
{"index": 2821, "repo": "groovy-xml-4.0.13", "code": "package xml\n\n// Groovy XML Dom processing classes.\npackage xml.dom\n// Helper classes for XmlSlurper.\npackage xml.slurpersupport\n// XmlBuilder related classes to support streaming XML.\npackage xml.streamingmarkupsupport\n// A helper class for creating a W3C DOM tree\npublic class DOMBuilder extends groovy.util.BuilderSupport;\n// Support class for creating XML Factories\npublic class FactorySupport extends Object;\n// A helper class for creating XML or HTML markup.\npublic class MarkupBuilder extends groovy.util.BuilderSupport;\n// \npublic static enum MarkupBuilder.CharFilter extends Enum<MarkupBuilder.CharFilter>;\n// \npublic static class MarkupBuilder.DefaultXmlEscapingFunction extends Object implements Function<Character,Optional<String>>;\n// A helper class for MarkupBuilder.\npublic class MarkupBuilderHelper extends Object;\n// A simple helper class which acts as a factory of QName instances.\npublic class Namespace extends Object;\n// A helper class for creating namespaces for GroovyMarkup\npublic class NamespaceBuilder extends Object;\n// A helper class for creating namespaced GroovyMarkup\npublic class NamespaceBuilderSupport extends groovy.util.BuilderSupport;\n// A builder for generating W3C SAX events.\npublic class SAXBuilder extends groovy.util.BuilderSupport;\n// Prints a groovy.util.Node (as used with XmlParser) including all children in XML format.\npublic class XmlNodePrinter extends Object;\n// \nprotected static class XmlNodePrinter.NamespaceContext extends Object;\n// A helper class for parsing XML into a tree of Node instances for a simple way of processing XML.\npublic class XmlParser extends Object implements ContentHandler;\n// Parse XML into a document tree that may be traversed similar to XPath expressions.\npublic class XmlSlurper extends DefaultHandler;\n// Used for pretty printing XML content and other XML related utilities.\npublic class XmlUtil extends Object;\n", "des": "Groovy markup builder classes for working with SAX and W3C DOM and Groovy markup."}
{"index": 2822, "repo": "groovy-xml-4.0.13", "code": "package dom\n\n// Category class which adds GPath style operations to Java's DOM classes.\npublic class DOMCategory extends Object;\n", "des": "Groovy XML Dom processing classes."}
{"index": 2823, "repo": "groovy-xml-4.0.13", "code": "package slurpersupport\n\n// Lazy evaluated representation of a node attribute.\npublic class Attribute extends GPathResult;\n// Lazy evaluated representation of a node's attributes.\npublic class Attributes extends NodeChildren;\n// Lazy evaluated representation of a node's attributes filtered by a Closure.\npublic class FilteredAttributes extends Attributes;\n// Lazy evaluated representation of child nodes filtered by a Closure.\npublic class FilteredNodeChildren extends NodeChildren;\n// Base class for representing lazy evaluated GPath expressions.\npublic abstract class GPathResult extends groovy.lang.GroovyObjectSupport implements groovy.lang.Writable, groovy.lang.Buildable, Iterable;\n// \npublic class NamespaceAwareHashMap extends HashMap<String,String>;\n// Lazy evaluated representation of a GPath expression returning no children.\npublic class NoChildren extends GPathResult;\n// Represents a node.\npublic class Node extends Object implements groovy.lang.Writable;\n// Lazy evaluated representation of a child node.\npublic class NodeChild extends GPathResult;\n// Lazy evaluated representation of child nodes.\npublic class NodeChildren extends GPathResult;\n// Helper class for iterating through nodes.\npublic abstract class NodeIterator extends Object implements Iterator;\n// Lazy evaluated representation of parent nodes without duplicates\npublic class NodeParents extends NodeChildren;\n// Helper base class used for lazy updates.\npublic abstract class ReplacementNode extends Object implements groovy.lang.Buildable, groovy.lang.Writable;\n", "des": "Helper classes for XmlSlurper."}
{"index": 2824, "repo": "groovy-xml-4.0.13", "code": "package streamingmarkupsupport\n\n// \npublic class BaseMarkupBuilder extends Builder;\n// \npublic abstract class Builder extends groovy.lang.GroovyObjectSupport;\n// \nprotected abstract static class Builder.Built extends groovy.lang.GroovyObjectSupport;\n// \npublic class StreamingMarkupWriter extends Writer;\n", "des": "XmlBuilder related classes to support streaming XML."}
{"index": 2825, "repo": "spring-data-r2dbc-3.1.2", "code": "package config\n\n// Base class for Spring Data R2DBC configuration containing bean declarations that must be registered for Spring Data R2DBC to work.\n@Configuration(proxyBeanMethods=false) public abstract class AbstractR2dbcConfiguration extends Object implements ApplicationContextAware;\n// Annotation to enable auditing in R2DBC via annotation configuration.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.r2dbc.config.R2dbcAuditingRegistrar.class) public @interface EnableR2dbcAuditing;\n// Simple helper to be able to wire the PersistentEntities from a R2dbcMappingContext bean available in the application context.\npublic class PersistentEntitiesFactoryBean extends Object implements FactoryBean<PersistentEntities>;\n", "des": "Configuration classes for Spring Data R2DBC."}
{"index": 2826, "repo": "spring-data-r2dbc-3.1.2", "code": "package convert\n\n// Maps a Row to an entity of type T, including entities referenced.\npublic class EntityRowMapper<T> extends Object implements BiFunction<Row,RowMetadata,T>;\n// Support class to natively write Enum values to the database.\n@WritingConverter public abstract class EnumWriteSupport<E extends Enum<E>> extends Object implements Converter<E,E>;\n// Converter for R2DBC.\npublic class MappingR2dbcConverter extends BasicRelationalConverter implements R2dbcConverter;\n// Central R2DBC specific converter interface.\npublic interface R2dbcConverter extends EntityReader<Object,Row>, EntityWriter<Object,OutboundRow>, RelationalConverter;\n// Value object to capture custom conversion.\npublic class R2dbcCustomConversions extends CustomConversions;\n", "des": "R2DBC-specific conversion and converter implementations."}
{"index": 2827, "repo": "spring-data-r2dbc-3.1.2", "code": "package core\n\n// Default ReactiveDataAccessStrategy implementation.\npublic class DefaultReactiveDataAccessStrategy extends Object implements ReactiveDataAccessStrategy;\n// Stripped down interface providing access to a fluent API that specifies a basic set of reactive R2DBC operations.\npublic interface FluentR2dbcOperations extends ReactiveSelectOperation, ReactiveInsertOperation, ReactiveUpdateOperation, ReactiveDeleteOperation;\n// Interface specifying a basic set of reactive R2DBC operations using entities.\npublic interface R2dbcEntityOperations extends FluentR2dbcOperations;\n// Implementation of R2dbcEntityOperations.\npublic class R2dbcEntityTemplate extends Object implements R2dbcEntityOperations, BeanFactoryAware, ApplicationContextAware;\n// \n@Deprecated public interface ReactiveDataAccessStrategy;\n// Interface to retrieve parameters for named parameter processing.\n@FunctionalInterface public static interface ReactiveDataAccessStrategy.NamedParameterProvider;\n// The ReactiveDeleteOperation interface allows creation and execution of DELETE operations in a fluent API style.\npublic interface ReactiveDeleteOperation;\n// Required filter.\npublic static interface ReactiveDeleteOperation.DeleteWithQuery extends ReactiveDeleteOperation.TerminatingDelete;\n// Table override (optional).\npublic static interface ReactiveDeleteOperation.DeleteWithTable extends ReactiveDeleteOperation.TerminatingDelete;\n// The ReactiveDeleteOperation.ReactiveDelete interface provides methods for constructing DELETE operations in a fluent way.\npublic static interface ReactiveDeleteOperation.ReactiveDelete extends ReactiveDeleteOperation.DeleteWithTable, ReactiveDeleteOperation.DeleteWithQuery;\n// Trigger DELETE operation by calling one of the terminating methods.\npublic static interface ReactiveDeleteOperation.TerminatingDelete;\n// The ReactiveInsertOperation interface allows creation and execution of INSERT operations in a fluent API style.\npublic interface ReactiveInsertOperation;\n// Table override (optional).\npublic static interface ReactiveInsertOperation.InsertWithTable<T> extends ReactiveInsertOperation.TerminatingInsert<T>;\n// The ReactiveInsertOperation.ReactiveInsert interface provides methods for constructing INSERT operations in a fluent way.\npublic static interface ReactiveInsertOperation.ReactiveInsert<T> extends ReactiveInsertOperation.InsertWithTable<T>;\n// Trigger INSERT execution by calling one of the terminating methods.\npublic static interface ReactiveInsertOperation.TerminatingInsert<T>;\n// The ReactiveSelectOperation interface allows creation and execution of SELECT operations in a fluent API style.\npublic interface ReactiveSelectOperation;\n", "des": "Core domain types around DatabaseClient."}
{"index": 2828, "repo": "spring-data-r2dbc-3.1.2", "code": "package dialect\n\n// Utility to bind Parameter to a BindTarget.\npublic final class BindTargetBinder extends Object;\n// Resolves a R2dbcDialect from a ConnectionFactory using DialectResolver.R2dbcDialectProvider.\npublic class DialectResolver extends Object;\n// Exception thrown when DialectResolver cannot resolve a R2dbcDialect.\npublic static class DialectResolver.NoDialectException extends NonTransientDataAccessException;\n// SPI to extend Spring's default R2DBC Dialect discovery mechanism.\npublic static interface DialectResolver.R2dbcDialectProvider;\n// R2DBC dialect for H2.\npublic class H2Dialect extends H2Dialect implements R2dbcDialect;\n// An SQL dialect for MySQL.\npublic class MySqlDialect extends MySqlDialect implements R2dbcDialect;\n// Simple singleton to convert Booleans to their Byte representation.\n@WritingConverter public static enum MySqlDialect.BooleanToByteConverter extends Enum<MySqlDialect.BooleanToByteConverter> implements Converter<Boolean,Byte>;\n// Simple singleton to convert Bytes to their Boolean representation.\n@ReadingConverter public static enum MySqlDialect.ByteToBooleanConverter extends Enum<MySqlDialect.ByteToBooleanConverter> implements Converter<Byte,Boolean>;\n// An SQL dialect for Oracle.\npublic class OracleDialect extends OracleDialect implements R2dbcDialect;\n// An SQL dialect for Postgres.\npublic class PostgresDialect extends PostgresDialect implements R2dbcDialect;\n// R2DBC-specific extension to Dialect.\npublic interface R2dbcDialect extends Dialect;\n// An SQL dialect for Microsoft SQL Server.\npublic class SqlServerDialect extends SqlServerDialect implements R2dbcDialect;\n", "des": "Dialects abstract the SQL dialect of the underlying database."}
{"index": 2829, "repo": "spring-data-r2dbc-3.1.2", "code": "package mapping\n\n// Mapping event callback infrastructure for the R2DBC row-to-object mapping subsystem.\npackage mapping.event\n// Representation of a Row to be written through a INSERT or UPDATE statement.\npublic class OutboundRow extends Object implements Map<SqlIdentifier,Parameter>, Cloneable;\n// R2DBC-specific extension to RelationalMappingContext.\npublic class R2dbcMappingContext extends RelationalMappingContext;\n// Simple constant holder for a SimpleTypeHolder enriched with R2DBC specific simple types.\npublic class R2dbcSimpleTypeHolder extends SimpleTypeHolder;\n", "des": "Domain objects for R2DBC."}
{"index": 2830, "repo": "spring-data-r2dbc-3.1.2", "code": "package event\n\n// Callback being invoked after a domain object is materialized from a row when reading results.\n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>;\n// Entity callback triggered after save of a OutboundRow.\n@FunctionalInterface public interface AfterSaveCallback<T> extends EntityCallback<T>;\n// Callback being invoked before a domain object is converted to be persisted.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>;\n// Entity callback triggered before save of a row.\n@FunctionalInterface public interface BeforeSaveCallback<T> extends EntityCallback<T>;\n// Reactive EntityCallback to populate auditing related fields on an entity about to be saved.\npublic class ReactiveAuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered;\n", "des": "Mapping event callback infrastructure for the R2DBC row-to-object mapping subsystem."}
{"index": 2831, "repo": "spring-data-r2dbc-3.1.2", "code": "package query\n\n// Value object representing Assignments with their Bindings.\npublic class BoundAssignments extends Object;\n// Value object representing a Condition with its Bindings.\npublic class BoundCondition extends Object;\n// Maps CriteriaDefinition and Sort objects considering mapping metadata and dialect-specific conversion.\npublic class QueryMapper extends Object;\n// Value object to represent a field and its meta-information.\nprotected static class QueryMapper.Field extends Object;\n// Extension of QueryMapper.Field to be backed with mapping metadata.\nprotected static class QueryMapper.MetadataBackedField extends QueryMapper.Field;\n// A subclass of QueryMapper that maps Update to update assignments.\npublic class UpdateMapper extends QueryMapper;\n", "des": "Query and update support."}
{"index": 2832, "repo": "spring-data-r2dbc-3.1.2", "code": "package repository\n\n// Support infrastructure for the configuration of R2DBC-specific repositories.\npackage repository.config\n// Query support for R2DBC repositories.\npackage repository.query\n// Support infrastructure for query derivation of R2DBC-specific repositories.\npackage repository.support\n// Indicates a query method should be considered a modifying query that returns nothing or the number of rows affected by the query.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying;\n// Annotation to provide SQL statements that will get used for executing the method.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface Query;\n// R2DBC specific Repository interface with reactive support.\n@NoRepositoryBean public interface R2dbcRepository<T,ID> extends ReactiveCrudRepository<T,ID>, ReactiveSortingRepository<T,ID>, ReactiveQueryByExampleExecutor<T>;\n", "des": "R2DBC-specific repository implementation."}
{"index": 2833, "repo": "spring-data-r2dbc-3.1.2", "code": "package config\n\n// Annotation to activate reactive relational repositories using R2DBC.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.r2dbc.repository.config.R2dbcRepositoriesRegistrar.class) public @interface EnableR2dbcRepositories;\n// Reactive RepositoryConfigurationExtension for R2DBC.\npublic class R2dbcRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport;\n", "des": "Support infrastructure for the configuration of R2DBC-specific repositories."}
{"index": 2834, "repo": "spring-data-r2dbc-3.1.2", "code": "package query\n\n// Base class for reactive RepositoryQuery implementations for R2DBC.\npublic abstract class AbstractR2dbcQuery extends Object implements RepositoryQuery;\n// Interface declaring a query that supplies SQL and can bind parameters to a DatabaseClient.GenericExecuteSpec.\npublic interface BindableQuery extends Supplier<String>;\n// An AbstractR2dbcQuery implementation based on a PartTree.\npublic class PartTreeR2dbcQuery extends AbstractR2dbcQuery;\n// Reactive specific implementation of QueryMethod.\npublic class R2dbcQueryMethod extends QueryMethod;\n// String-based StringBasedR2dbcQuery implementation.\npublic class StringBasedR2dbcQuery extends AbstractR2dbcQuery;\n", "des": "Query support for R2DBC repositories."}
{"index": 2835, "repo": "spring-data-r2dbc-3.1.2", "code": "package support\n\n// Factory to create R2dbcRepository instances.\npublic class R2dbcRepositoryFactory extends ReactiveRepositoryFactorySupport;\n// FactoryBean to create R2dbcRepository instances.\npublic class R2dbcRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID> implements ApplicationContextAware;\n// Simple ReactiveSortingRepository implementation using R2DBC through DatabaseClient.\n@Transactional(readOnly=true) public class SimpleR2dbcRepository<T,ID> extends Object implements R2dbcRepository<T,ID>;\n", "des": "Support infrastructure for query derivation of R2DBC-specific repositories."}
{"index": 2836, "repo": "spring-data-r2dbc-3.1.2", "code": "package support\n\n// Utilities for array interaction.\npublic abstract class ArrayUtils extends Object;\n", "des": "Support infrastructure for the configuration of R2DBC-specific repositories."}
{"index": 2837, "repo": "spring-integration-core-6.1.2", "code": "package acks\n\n// A general abstraction over acknowledgments.\n@FunctionalInterface public interface AcknowledgmentCallback extends SimpleAcknowledgment;\n// \npublic static enum AcknowledgmentCallback.Status extends Enum<AcknowledgmentCallback.Status>;\n// A factory for creating AcknowledgmentCallbacks.\n@FunctionalInterface public interface AcknowledgmentCallbackFactory<T>;\n// Utility methods for acting on AcknowledgmentCallback headers.\npublic final class AckUtils extends Object;\n// Opaque object for manually acknowledging.\n@FunctionalInterface public interface SimpleAcknowledgment;\n", "des": "Provides classes related to message acknowledgment."}
{"index": 2838, "repo": "spring-integration-core-6.1.2", "code": "package aggregator\n\n// Base class for MessageGroupProcessor implementations that aggregate the group of Messages into a single Message.\npublic abstract class AbstractAggregatingMessageGroupProcessor extends Object implements MessageGroupProcessor, org.springframework.beans.factory.BeanFactoryAware;\n// Abstract Message handler that holds a buffer of correlated messages in a MessageStore.\npublic abstract class AbstractCorrelatingMessageHandler extends AbstractMessageProducingHandler implements DiscardingMessageHandler, org.springframework.context.ApplicationEventPublisherAware, ManageableLifecycle;\n// \nprotected static class AbstractCorrelatingMessageHandler.SequenceAwareMessageGroup extends SimpleMessageGroup;\n// Aggregator specific implementation of AbstractCorrelatingMessageHandler.\npublic class AggregatingMessageHandler extends AbstractCorrelatingMessageHandler;\n// A message handler that suspends the thread until a message with corresponding correlation is passed into the trigger method or the timeout occurs.\npublic class BarrierMessageHandler extends AbstractReplyProducingMessageHandler implements MessageTriggerAction, DiscardingMessageHandler;\n// This Endpoint serves as a barrier for messages that should not be processed yet.\npublic class CorrelatingMessageBarrier extends AbstractMessageHandler implements MessageSource<Object>;\n// Strategy for determining how messages can be correlated.\n@FunctionalInterface public interface CorrelationStrategy;\n// The Function implementation for a default headers merging in the aggregator component.\npublic class DefaultAggregateHeadersFunction extends Object implements Function<MessageGroup,Map<String,Object>>;\n// This implementation of MessageGroupProcessor will take the messages from the MessageGroup and pass them on in a single message with a Collection as a payload.\npublic class DefaultAggregatingMessageGroupProcessor extends AbstractAggregatingMessageGroupProcessor;\n// The MessageGroupProcessor implementation with delegation to the provided delegate and optional aggregation for headers.\npublic class DelegatingMessageGroupProcessor extends Object implements MessageGroupProcessor, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle;\n// CorrelationStrategy implementation that evaluates an expression.\npublic class ExpressionEvaluatingCorrelationStrategy extends Object implements CorrelationStrategy, org.springframework.beans.factory.BeanFactoryAware;\n// A MessageGroupProcessor implementation that evaluates a SpEL expression.\npublic class ExpressionEvaluatingMessageGroupProcessor extends AbstractAggregatingMessageGroupProcessor;\n", "des": "Provides classes related to message aggregation."}
{"index": 2839, "repo": "spring-integration-core-6.1.2", "code": "package annotation\n\n// Indicates that a method is capable of aggregating messages.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(Aggregators.class) public @interface Aggregator;\n// The repeatable container for Aggregator annotations.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface Aggregators;\n// Common value constants for annotation attributes.\npublic final class AnnotationConstants extends Object;\n// Messaging Annotation to mark a Bean method for a MessageChannel to produce a BridgeHandler and Consumer Endpoint.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(BridgeFromRepeatable.class) public @interface BridgeFrom;\n// The repeatable container for BridgeFrom annotations.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface BridgeFromRepeatable;\n// Messaging Annotation to mark a Bean method for a MessageChannel to produce a BridgeHandler and Consumer Endpoint.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(BridgeToRepeatable.class) public @interface BridgeTo;\n// The repeatable container for BridgeTo annotations.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface BridgeToRepeatable;\n// Indicates that a given method is capable of determining the correlation key of a message sent as parameter.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface CorrelationStrategy;\n// Indicates that the class member has some default meaning.\n@Target({TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR}) @Retention(RUNTIME) @Documented public @interface Default;\n// When used alongside an EIP annotation (and no @Bean), specifies the bean name of the consumer bean with the handler bean being id.handler (for a consuming endpoint) or id.source for a message source (e.g.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface EndpointId;\n// Indicates that a method is capable of playing the role of a Message Filter.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(Filters.class) public @interface Filter;\n", "des": "Provides annotations for annotation-based configuration."}
{"index": 2840, "repo": "spring-integration-core-6.1.2", "code": "package aop\n\n// A MessageSourceMutator that uses a CompoundTrigger to adjust the poller - when a message is present, the compound trigger's primary trigger is used to determine the next poll.\npublic class CompoundTriggerAdvice extends Object implements MessageSourceMutator, ReceiveMessageAdvice;\n// A MethodInterceptor that publishes Messages to a channel.\npublic class MessagePublishingInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanFactoryAware;\n// A ReceiveMessageAdvice extension that can mutate a MessageSource before and/or after MessageSource.receive() is called.\n@FunctionalInterface public interface MessageSourceMutator extends ReceiveMessageAdvice;\n// An PublisherMetadataSource implementation that retrieves the channel name and expression strings from an annotation.\npublic class MethodAnnotationPublisherMetadataSource extends Object;\n// \npublic class MethodNameMappingPublisherMetadataSource extends Object;\n// An advisor that will apply the MessagePublishingInterceptor to any methods containing the provided annotations.\npublic class PublisherAnnotationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware;\n// Post-processes beans that contain the method-level @Publisher annotation.\npublic class PublisherAnnotationBeanPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.SmartInitializingSingleton;\n// An AOP advice to perform hooks before and/or after a receive() contract is called.\n@FunctionalInterface public interface ReceiveMessageAdvice extends org.aopalliance.intercept.MethodInterceptor;\n// A simple advice that polls at one rate when messages exist and another when there are no messages.\npublic class SimpleActiveIdleReceiveMessageAdvice extends Object implements ReceiveMessageAdvice;\n// Simple implementation of PublisherMetadataSource that allows for configuration of a single channel name, payload expression, and array of header key=value expressions.\npublic class SimplePublisherMetadataSource extends Object;\n", "des": "Provides classes to support message publication using AOP."}
{"index": 2841, "repo": "spring-integration-core-6.1.2", "code": "package channel\n\n// Provides classes related to channel interception.\npackage channel.interceptor\n// The AbstractSubscribableChannel base implementation for those inheritors which logic may be based on the Executor.\npublic abstract class AbstractExecutorChannel extends AbstractSubscribableChannel implements ExecutorChannelInterceptorAware;\n// Base class for MessageChannel implementations providing common properties such as the channel name.\n@IntegrationManagedResource public abstract class AbstractMessageChannel extends IntegrationObjectSupport implements org.springframework.messaging.MessageChannel, TrackableComponent, org.springframework.messaging.support.InterceptableChannel, IntegrationManagement, IntegrationPattern;\n// A convenience wrapper class for the list of ChannelInterceptors.\nprotected static class AbstractMessageChannel.ChannelInterceptorList extends Object;\n// Base class for all pollable channels.\npublic abstract class AbstractPollableChannel extends AbstractMessageChannel implements org.springframework.messaging.PollableChannel, ExecutorChannelInterceptorAware;\n// Base implementation of MessageChannel that invokes the subscribed handler(s) by delegating to a MessageDispatcher.\npublic abstract class AbstractSubscribableChannel extends AbstractMessageChannel implements org.springframework.messaging.SubscribableChannel, SubscribableChannelManagement;\n// A SubscribableChannel variant for implementations with broadcasting capabilities.\npublic interface BroadcastCapableChannel extends org.springframework.messaging.SubscribableChannel;\n// A utility class for purging Messages from one or more QueueChannels.\npublic class ChannelPurger extends Object;\n// Channel utilities.\npublic final class ChannelUtils extends Object;\n// Converts a channel to a name, retaining a reference to the channel keyed by the name.\npublic class DefaultHeaderChannelRegistry extends IntegrationObjectSupport implements HeaderChannelRegistry, ManageableLifecycle, Runnable;\n// \nprotected static record DefaultHeaderChannelRegistry.MessageChannelWrapper(org.springframework.messaging.MessageChannel channel, long expireAt) extends Record;\n// A channel that invokes a single subscriber for each sent Message.\npublic class DirectChannel extends AbstractSubscribableChannel;\n// An implementation of MessageChannel that delegates to an instance of UnicastingDispatcher which in turn delegates all dispatching invocations to an Executor.\npublic class ExecutorChannel extends AbstractExecutorChannel;\n", "des": "Provides classes representing various channel types."}
{"index": 2842, "repo": "spring-integration-core-6.1.2", "code": "package interceptor\n\n// \npublic class GlobalChannelInterceptorWrapper extends Object implements org.springframework.core.Ordered;\n// A ChannelInterceptor that delegates to a list of MessageSelectors to decide whether a Message should be accepted on the MessageChannel.\npublic class MessageSelectingInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor;\n// The ExecutorChannelInterceptor implementation responsible for an Observation propagation from one message flow's thread to another through the MessageChannels involved in the flow.\npublic class ObservationPropagationChannelInterceptor extends ThreadStatePropagationChannelInterceptor<io.micrometer.observation.Observation>;\n// The ExecutorChannelInterceptor implementation responsible for the Thread (any?) state propagation from one message flow's thread to another through the MessageChannels involved in the flow.\npublic abstract class ThreadStatePropagationChannelInterceptor<S> extends Object implements org.springframework.messaging.support.ExecutorChannelInterceptor;\n// ChannelInterceptors implementing this interface can veto global interception of a particular channel.\npublic interface VetoCapableInterceptor;\n// A ChannelInterceptor that publishes a copy of the intercepted message to a secondary target while still sending the original message to the main channel.\n@ManagedResource public class WireTap extends Object implements org.springframework.messaging.support.ChannelInterceptor, ManageableLifecycle, VetoCapableInterceptor, org.springframework.beans.factory.BeanFactoryAware;\n", "des": "Provides classes related to channel interception."}
{"index": 2843, "repo": "spring-integration-core-6.1.2", "code": "package codec\n\n// The Kryo specific Codec classes.\npackage codec.kryo\n// Interface for classes that perform both encode (serialize) and decode (deserialize) on multiple classes.\npublic interface Codec;\n// A MessageConverter that delegates to a Codec to convert.\npublic class CodecMessageConverter extends IntegrationObjectSupport implements org.springframework.messaging.converter.MessageConverter;\n// A Codec that can delegate to one out of many Codecs, each mapped to a class.\npublic class CompositeCodec extends Object implements Codec;\n", "des": "Provides base classes for the Codec abstraction."}
{"index": 2844, "repo": "spring-integration-core-6.1.2", "code": "package kryo\n\n// Base class for Codecs using Kryo.\npublic abstract class AbstractKryoCodec extends Object implements Codec;\n// Base class for KryoRegistrar implementations.\npublic abstract class AbstractKryoRegistrar extends Object implements KryoRegistrar;\n// A KryoRegistrar that delegates and validates registrations across all components.\npublic class CompositeKryoRegistrar extends AbstractKryoRegistrar;\n// A KryoRegistrar used to validateRegistration a File serializer.\npublic class FileKryoRegistrar extends AbstractKryoRegistrar;\n// A custom Kryo Serializer for serializing File payloads.\npublic class FileSerializer extends com.esotericsoftware.kryo.Serializer<File>;\n// A KryoRegistrar used to validateRegistration a list of Java classes.\npublic class KryoClassListRegistrar extends AbstractKryoRegistrar;\n// A KryoRegistrar implementation backed by a Map used to explicitly set the registration ID for each class.\npublic class KryoClassMapRegistrar extends AbstractKryoRegistrar;\n// Strategy interface used by PojoCodec to configure registrations classes consistently across Kryo instances.\npublic interface KryoRegistrar;\n// A KryoRegistrar implementation backed by a List of Registration.\npublic class KryoRegistrationRegistrar extends AbstractKryoRegistrar;\n// PojoCodec configured to encode/decode Message<?>s.\npublic class MessageCodec extends PojoCodec;\n// Registers common MessageHeader types and Serializers.\npublic class MessageKryoRegistrar extends AbstractKryoRegistrar;\n// Kryo Codec that can encode and decode arbitrary types.\npublic class PojoCodec extends AbstractKryoCodec;\n// Default registration ids for serializers provided by the framework.\npublic final class RegistrationIds extends Object;\n", "des": "The Kryo specific Codec classes."}
{"index": 2845, "repo": "spring-integration-core-6.1.2", "code": "package config\n\n// Provides classes supporting annotation-based configuration.\npackage config.annotation\n// Provides supporting XML-based configuration - parsers, namespace handlers.\npackage config.xml\n// Abstract class for integration evaluation context factory beans.\npublic abstract class AbstractEvaluationContextFactoryBean extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean;\n// Base class for Method-level annotation post-processors.\npublic abstract class AbstractMethodAnnotationPostProcessor<T extends Annotation> extends Object implements MethodAnnotationPostProcessor<T>, org.springframework.beans.factory.BeanFactoryAware;\n// \nprotected static record AbstractMethodAnnotationPostProcessor.BeanDefinitionPropertiesMapper(org.springframework.beans.factory.config.BeanDefinition beanDefinition, List<Annotation> annotations) extends Record;\n// Factory bean to create and configure a MessageHandler.\npublic abstract class AbstractSimpleMessageHandlerFactoryBean<H extends org.springframework.messaging.MessageHandler> extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.messaging.MessageHandler>, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware;\n// Base class for FactoryBeans that create standard MessageHandler instances.\npublic abstract class AbstractStandardMessageHandlerFactoryBean extends AbstractSimpleMessageHandlerFactoryBean<org.springframework.messaging.MessageHandler> implements org.springframework.beans.factory.DisposableBean;\n// Post-processor for the @Aggregator annotation.\npublic class AggregatorAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<Aggregator>;\n// FactoryBean to create an AggregatingMessageHandler.\npublic class AggregatorFactoryBean extends AbstractSimpleMessageHandlerFactoryBean<AggregatingMessageHandler>;\n// Post-processor for the @BridgeFrom annotation.\npublic class BridgeFromAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<BridgeFrom>;\n// Post-processor for the @BridgeTo annotation.\npublic class BridgeToAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<BridgeTo>;\n", "des": "Base package for configuration."}
{"index": 2846, "repo": "spring-integration-core-6.1.2", "code": "package annotation\n\n// An AnnotationMetadata implementation to expose a metadata by the provided Map of attributes.\npublic abstract class AnnotationMetadataAdapter extends Object implements org.springframework.core.type.AnnotationMetadata;\n// Strategy interface for post-processing annotated methods.\npublic interface MethodAnnotationPostProcessor<T extends Annotation>;\n", "des": "Provides classes supporting annotation-based configuration."}
{"index": 2847, "repo": "spring-integration-core-6.1.2", "code": "package xml\n\n// Base parser for Channel Adapters.\npublic abstract class AbstractChannelAdapterParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\n// Base class for channel parsers.\npublic abstract class AbstractChannelParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\n// Base class parser for elements that create Message Endpoints.\npublic abstract class AbstractConsumerEndpointParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\n// Base class for parsers that create an instance of AbstractCorrelatingMessageHandler.\npublic abstract class AbstractCorrelatingMessageHandlerParser extends AbstractConsumerEndpointParser;\n// Base class for inbound gateway parsers.\npublic abstract class AbstractInboundGatewayParser extends org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser;\n// Base class for NamespaceHandlers that registers a BeanFactoryPostProcessor for configuring default bean definitions.\npublic abstract class AbstractIntegrationNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n// Base class for outbound Channel Adapter parsers.\npublic abstract class AbstractOutboundChannelAdapterParser extends AbstractChannelAdapterParser;\n// Base class for url-based outbound gateway parsers.\npublic abstract class AbstractOutboundGatewayParser extends AbstractConsumerEndpointParser;\n// Base parser for inbound Channel Adapters that poll a source.\npublic abstract class AbstractPollingInboundChannelAdapterParser extends AbstractChannelAdapterParser;\n// Base parser for routers.\npublic abstract class AbstractRouterParser extends AbstractConsumerEndpointParser;\n// \npublic abstract class AbstractTransformerParser extends AbstractConsumerEndpointParser;\n// Parser for the aggregator element of the integration namespace.\npublic class AggregatorParser extends AbstractCorrelatingMessageHandlerParser;\n// Parser for the <annotation-config> element of the integration namespace.\npublic class AnnotationConfigParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// Parser for the <application-event-multicaster> element of the integration namespace.\npublic class ApplicationEventMulticasterParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n// Parser for <int:barrier/>.\npublic class BarrierParser extends AbstractConsumerEndpointParser;\n", "des": "Provides supporting XML-based configuration - parsers, namespace handlers."}
{"index": 2848, "repo": "spring-integration-core-6.1.2", "code": "package context\n\n// Components that implement this interface are capable of supporting a primary SpEL expression as part of their configuration.\npublic interface ExpressionCapable;\n// Utility methods for accessing common integration components from the BeanFactory.\npublic abstract class IntegrationContextUtils extends Object;\n// A base class that provides convenient access to the bean factory as well as TaskScheduler and ConversionService instances.\npublic abstract class IntegrationObjectSupport extends Object implements org.springframework.beans.factory.BeanNameAware, NamedComponent, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, ExpressionCapable;\n// Utility class to encapsulate infrastructure Integration properties constants and their default values.\npublic final class IntegrationProperties extends Object;\n// Interface that extends Ordered while also exposing the Orderable.setOrder(int) as an interface-level so that it is avaiable on AOP proxies, etc.\npublic interface Orderable extends org.springframework.core.Ordered;\n// Interface for components that wish to be considered for an orderly shutdown using management interfaces.\npublic interface OrderlyShutdownCapable;\n", "des": "Provides classes relating to application context configuration."}
{"index": 2849, "repo": "spring-integration-core-6.1.2", "code": "package core\n\n// \npublic interface AsyncMessagingOperations;\n// \npublic class AsyncMessagingTemplate extends MessagingTemplate implements AsyncMessagingOperations;\n// The component which can be used as general purpose of errors publishing.\npublic class ErrorMessagePublisher extends Object implements org.springframework.beans.factory.BeanFactoryAware;\n// A functional interface to specify MessageHandler logic with Java 8 Lambda expression:\n@FunctionalInterface public interface GenericHandler<P>;\n// Generic (lambda) strategy interface for selector.\n@FunctionalInterface public interface GenericSelector<S>;\n// Generic (lambda) strategy interface for transformer.\n@FunctionalInterface public interface GenericTransformer<S,T>;\n// Base interface for any component that is capable of sending messages to a MessageChannel.\npublic interface MessageProducer;\n// Strategy interface for message selection.\n@FunctionalInterface public interface MessageSelector extends GenericSelector<org.springframework.messaging.Message<?>>;\n// Base interface for any source of Messages that can be polled.\n@FunctionalInterface public interface MessageSource<T> extends IntegrationPattern;\n// \npublic class MessagingTemplate extends org.springframework.messaging.core.GenericMessagingTemplate;\n// Endpoints implementing this interface can be paused/resumed.\npublic interface Pausable extends ManageableLifecycle;\n", "des": "Provides core classes."}
{"index": 2850, "repo": "spring-integration-core-6.1.2", "code": "package dispatcher\n\n// Base class for MessageDispatcher implementations.\npublic abstract class AbstractDispatcher extends Object implements MessageDispatcher;\n// An Exception that encapsulates an aggregated group of Exceptions for use by dispatchers that may try multiple handler invocations within a single dispatch operation.\npublic class AggregateMessageDeliveryException extends org.springframework.messaging.MessageDeliveryException;\n// A broadcasting dispatcher implementation.\npublic class BroadcastingDispatcher extends AbstractDispatcher implements org.springframework.beans.factory.BeanFactoryAware;\n// Strategy for determining the iteration order of a MessageHandler list.\n@FunctionalInterface public interface LoadBalancingStrategy;\n// Strategy interface for dispatching messages to handlers.\npublic interface MessageDispatcher;\n// The strategy to decorate MessageHandlingRunnable tasks to be used with the Executor.\n@FunctionalInterface public interface MessageHandlingTaskDecorator;\n// An AbstractDispatcher implementation for distributing messages to dedicated threads according to the key determined by the provided function against the message to dispatch.\npublic class PartitionedDispatcher extends AbstractDispatcher;\n// Round-robin implementation of LoadBalancingStrategy.\npublic class RoundRobinLoadBalancingStrategy extends Object implements LoadBalancingStrategy;\n// Implementation of MessageDispatcher that will attempt to send a Message to at most one of its handlers.\npublic class UnicastingDispatcher extends AbstractDispatcher;\n", "des": "Provides classes related to dispatching messages."}
{"index": 2851, "repo": "spring-integration-core-6.1.2", "code": "package dsl\n\n// The context support classes for Spring Integration Java DSL.\npackage dsl.context\n// Provides various support classes used across Spring Integration Java DSL Components.\npackage dsl.support\n// A MessageHandlerSpec for AbstractMessageRouters.\npublic class AbstractRouterSpec<S extends AbstractRouterSpec<S,R>,R extends AbstractMessageRouter> extends ConsumerEndpointSpec<S,R>;\n// A CorrelationHandlerSpec for an AggregatingMessageHandler.\npublic class AggregatorSpec extends CorrelationHandlerSpec<AggregatorSpec,AggregatingMessageHandler>;\n// A MessageHandlerSpec for the BarrierMessageHandler.\npublic class BarrierSpec extends ConsumerEndpointSpec<BarrierSpec,BarrierMessageHandler>;\n// The Builder pattern implementation for the EIP-method chain.\n@IntegrationDsl public abstract class BaseIntegrationFlowDefinition<B extends BaseIntegrationFlowDefinition<B>> extends Object;\n// \npublic static final class BaseIntegrationFlowDefinition.ReplyProducerCleaner extends Object implements org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;\n// An IntegrationComponentSpec for configuring sub-flow subscribers on the provided BroadcastCapableChannel.\npublic class BroadcastPublishSubscribeSpec extends IntegrationComponentSpec<BroadcastPublishSubscribeSpec,BroadcastCapableChannel> implements ComponentsRegistration;\n// \npublic final class Channels extends Object;\n// The marker interface for the IntegrationComponentSpec implementation, when there is need to register as beans not only the target spec's components, but some additional components, e.g.\n@FunctionalInterface public interface ComponentsRegistration;\n// A EndpointSpec for consumer endpoints.\npublic abstract class ConsumerEndpointSpec<S extends ConsumerEndpointSpec<S,H>,H extends org.springframework.messaging.MessageHandler> extends EndpointSpec<S,ConsumerEndpointFactoryBean,H>;\n// A MessageHandlerSpec for an AbstractCorrelatingMessageHandler.\npublic abstract class CorrelationHandlerSpec<S extends CorrelationHandlerSpec<S,H>,H extends AbstractCorrelatingMessageHandler> extends ConsumerEndpointSpec<S,H>;\n// A ConsumerEndpointSpec for a DelayHandler.\npublic class DelayerEndpointSpec extends ConsumerEndpointSpec<DelayerEndpointSpec,DelayHandler>;\n// \npublic class DirectChannelSpec extends LoadBalancingChannelSpec<DirectChannelSpec,DirectChannel>;\n", "des": "Root package of the Spring Integration Java DSL."}
{"index": 2852, "repo": "spring-integration-core-6.1.2", "code": "package context\n\n// The Java DSL Integration infrastructure beanFactory initializer.\npublic class DslIntegrationConfigurationInitializer extends Object implements IntegrationConfigurationInitializer;\n// A BeanPostProcessor to parse IntegrationFlow beans and register their components as beans in the provided BeanFactory, if necessary.\npublic class IntegrationFlowBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.SmartInitializingSingleton;\n// A public API for dynamic (manual) registration of IntegrationFlows, not via standard bean registration phase.\npublic interface IntegrationFlowContext;\n// \npublic static interface IntegrationFlowContext.IntegrationFlowRegistration extends org.springframework.beans.factory.BeanFactoryAware;\n// A Builder pattern implementation for the options to register IntegrationFlow in the application context.\npublic static interface IntegrationFlowContext.IntegrationFlowRegistrationBuilder;\n// Standard implementation of IntegrationFlowContext.\npublic final class StandardIntegrationFlowContext extends Object implements IntegrationFlowContext, org.springframework.beans.factory.BeanFactoryAware;\n", "des": "The context support classes for Spring Integration Java DSL."}
{"index": 2853, "repo": "spring-integration-core-6.1.2", "code": "package support\n\n// An \"artificial\" MessageChannel implementation which will be unwrapped to the FixedSubscriberChannel on the bean registration phase.\npublic class FixedSubscriberChannelPrototype extends Object implements org.springframework.messaging.MessageChannel;\n// An \"artificial\" MessageChannel implementation which will be unwrapped to the MessageChannel bean on the bean registration phase.\npublic record MessageChannelReference(String name) extends Record implements org.springframework.messaging.MessageChannel;\n", "des": "Provides various support classes used across Spring Integration Java DSL Components."}
{"index": 2854, "repo": "spring-integration-core-6.1.2", "code": "package endpoint\n\n// The base class for Message Endpoint implementations.\n@IntegrationManagedResource public abstract class AbstractEndpoint extends IntegrationObjectSupport implements ManageableSmartLifecycle, org.springframework.beans.factory.DisposableBean;\n// A message source that can limit the number of remote objects it fetches.\npublic abstract class AbstractFetchLimitingMessageSource<T> extends AbstractMessageSource<T> implements MessageSourceManagement;\n// Abstract message source.\n@IntegrationManagedResource public abstract class AbstractMessageSource<T> extends AbstractExpressionEvaluator implements MessageSource<T>, IntegrationInboundManagement, NamedComponent, org.springframework.beans.factory.BeanNameAware;\n// An AbstractEndpoint extension for Polling Consumer pattern basics.\npublic abstract class AbstractPollingEndpoint extends AbstractEndpoint implements org.springframework.beans.factory.BeanClassLoaderAware;\n// Message Endpoint that connects any MessageHandler implementation to a SubscribableChannel.\npublic class EventDrivenConsumer extends AbstractEndpoint implements IntegrationConsumer;\n// \npublic class ExpressionEvaluatingMessageSource<T> extends AbstractMessageSource<T> implements ExpressionCapable;\n// A MessageProducerSupport sub-class that provides ExpressionMessageProducerSupport.payloadExpression evaluation with result as a payload for Message to send.\npublic abstract class ExpressionMessageProducerSupport extends MessageProducerSupport;\n// Message consumers implement this interface, the message handler within a consumer may or may not emit output messages.\npublic interface IntegrationConsumer extends NamedComponent;\n// The MessageSource strategy implementation to produce a Message from underlying MessageProcessorMessageSource.messageProcessor for polling endpoints.\npublic class MessageProcessorMessageSource extends AbstractMessageSource<Object>;\n// A support class for producer endpoints that provides a setter for the output channel and a convenience method for sending Messages.\npublic abstract class MessageProducerSupport extends AbstractEndpoint implements MessageProducer, TrackableComponent, org.springframework.beans.factory.SmartInitializingSingleton, IntegrationPattern, IntegrationInboundManagement;\n// A PollingOperations used to ad-hoc poll a MessageSource.\npublic class MessageSourcePollingTemplate extends Object implements PollingOperations;\n// A MessageSource implementation that invokes a no-argument method so that its return value may be sent to a channel.\npublic class MethodInvokingMessageSource extends AbstractMessageSource<Object> implements ManageableLifecycle;\n", "des": "Provides core classes related to Endpoints."}
{"index": 2855, "repo": "spring-integration-core-6.1.2", "code": "package events\n\n// Base class for all ApplicationEvents generated by the framework.\npublic abstract class IntegrationEvent extends org.springframework.context.ApplicationEvent;\n", "des": "ApplicationEvents generated by the Spring Integration framework."}
{"index": 2856, "repo": "spring-integration-core-6.1.2", "code": "package expression\n\n// SpEL MethodFilter to restrict method invocations to: Pausable or Lifecycle components get, set and shutdown methods of CustomizableThreadCreator methods with ManagedAttribute and ManagedOperation annotations This class isn't designed for target applications and typically is used from ExpressionControlBusFactoryBean.\npublic class ControlBusMethodFilter extends Object implements org.springframework.expression.MethodFilter;\n// An implementation of Expression that delegates to an ExpressionSource for resolving the actual Expression instance per-invocation at runtime.\npublic class DynamicExpression extends Object implements org.springframework.expression.Expression;\n// An immutable AbstractMap implementation that wraps a Map<String, Object>, where values must be instances of String or Expression, and evaluates an expression for the provided key from the underlying original Map.\npublic final class ExpressionEvalMap extends AbstractMap<String,Object>;\n// The ExpressionEvalMap.EvaluationCallback implementation which evaluates an expression using the provided context, root and returnType variables.\npublic static class ExpressionEvalMap.ComponentsEvaluationCallback extends Object implements ExpressionEvalMap.EvaluationCallback;\n// Implementations of this interface can be provided to build 'on demand ExpressionEvalMap.get(Object) logic' for ExpressionEvalMap.\n@FunctionalInterface public static interface ExpressionEvalMap.EvaluationCallback;\n// The builder class to instantiate ExpressionEvalMap.\npublic static final class ExpressionEvalMap.ExpressionEvalMapBuilder extends Object;\n// \npublic static interface ExpressionEvalMap.ExpressionEvalMapComponentsBuilder extends ExpressionEvalMap.ExpressionEvalMapFinalBuilder;\n// \n@FunctionalInterface public static interface ExpressionEvalMap.ExpressionEvalMapFinalBuilder;\n// Strategy interface for retrieving Expressions.\n@FunctionalInterface public interface ExpressionSource;\n// Utility class with static methods for helping with evaluation of SpEL expressions.\npublic final class ExpressionUtils extends Object;\n// An Expression that simply invokes Function.apply(Object) on its provided Function.\npublic class FunctionExpression<S> extends Object implements org.springframework.expression.Expression;\n// ExpressionSource implementation that accesses resource bundles using specified basenames.\npublic class ReloadableResourceBundleExpressionSource extends Object implements ExpressionSource, org.springframework.context.ResourceLoaderAware;\n// Utility class that keeps track of a Set of SpEL PropertyAccessors in order to register them with the \"integrationEvaluationContext\" upon initialization.\npublic class SpelPropertyAccessorRegistrar extends Object;\n", "des": "Provides classes supporting SpEL expressions."}
{"index": 2857, "repo": "spring-integration-core-6.1.2", "code": "package filter\n\n// A base class for MessageSelector implementations that delegate to a MessageProcessor.\npublic abstract class AbstractMessageProcessingSelector extends Object implements MessageSelector, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle;\n// A MessageSelector implementation that evaluates a SpEL expression.\npublic class ExpressionEvaluatingSelector extends AbstractMessageProcessingSelector;\n// Message Handler that delegates to a MessageSelector.\npublic class MessageFilter extends AbstractReplyProducingPostProcessingMessageHandler implements DiscardingMessageHandler, ManageableLifecycle;\n// A method-invoking implementation of MessageSelector.\npublic class MethodInvokingSelector extends AbstractMessageProcessingSelector;\n", "des": "Provides classes supporting the filter pattern."}
{"index": 2858, "repo": "spring-integration-core-6.1.2", "code": "package gateway\n\n// A GatewayProxyFactoryBean extension for Java configuration.\npublic class AnnotationGatewayProxyFactoryBean<T> extends GatewayProxyFactoryBean<T>;\n// The AbstractReplyProducingMessageHandler implementation for mid-flow Gateway.\npublic class GatewayMessageHandler extends AbstractReplyProducingMessageHandler implements ManageableLifecycle;\n// Represents the metadata associated with a Gateway method.\npublic class GatewayMethodMetadata extends Object;\n// Generates a proxy for the provided service interface to enable interaction with messaging components without application code being aware of them allowing for POJO-style interaction.\npublic class GatewayProxyFactoryBean<T> extends AbstractEndpoint implements TrackableComponent, org.springframework.beans.factory.FactoryBean<T>, org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanClassLoaderAware, IntegrationManagement;\n// A convenient base class for connecting application code to MessageChannels for sending, receiving, or request-reply operations.\n@IntegrationManagedResource public abstract class MessagingGatewaySupport extends AbstractEndpoint implements TrackableComponent, IntegrationInboundManagement, IntegrationPattern;\n// The MessagingTemplate extension to increase MessagingGatewaySupport.ConvertingMessagingTemplate.doConvert(Object, Map, MessagePostProcessor) visibility to get access to the request message from an observation context.\nprotected static class MessagingGatewaySupport.ConvertingMessagingTemplate extends MessagingTemplate;\n// Simple wrapper class containing a Method and an object array containing the arguments for an invocation of that method.\npublic final class MethodArgsHolder extends Object;\n// Implementations of this interface are InboundMessageMappers that map a MethodArgsHolder to a Message.\npublic interface MethodArgsMessageMapper extends InboundMessageMapper<MethodArgsHolder>;\n// Interface for a request/reply Message exchange.\n@FunctionalInterface public interface RequestReplyExchanger;\n", "des": "Provides classes supporting messaging gateways."}
{"index": 2859, "repo": "spring-integration-core-6.1.2", "code": "package graph\n\n// Represents a composite message handler.\npublic class CompositeMessageHandlerNode extends MessageHandlerNode;\n// \npublic static class CompositeMessageHandlerNode.InnerHandler extends Object;\n// Represents an endpoint that has a discard channel.\npublic class DiscardingMessageHandlerNode extends MessageHandlerNode;\n// Base class for all endpoints.\npublic abstract class EndpointNode extends IntegrationNode;\n// Represents a composite message handler that can emit error messages (pollable endpoint).\npublic class ErrorCapableCompositeMessageHandlerNode extends CompositeMessageHandlerNode implements ErrorCapableNode;\n// Represents an endpoint that has a discard channel and can emit errors (pollable endpoint).\npublic class ErrorCapableDiscardingMessageHandlerNode extends DiscardingMessageHandlerNode implements ErrorCapableNode;\n// Represents nodes that can natively handle errors.\npublic class ErrorCapableEndpointNode extends EndpointNode implements ErrorCapableNode;\n// Represents a message handler that can produce errors (pollable).\npublic class ErrorCapableMessageHandlerNode extends MessageHandlerNode implements ErrorCapableNode;\n// Nodes implementing this interface are capable of emitting errors.\npublic interface ErrorCapableNode;\n// Represents an endpoint that can route to multiple channels and can emit errors (pollable endpoint).\npublic class ErrorCapableRoutingNode extends RoutingMessageHandlerNode implements ErrorCapableNode;\n// This object can be exposed, for example, as a JSON object over HTTP.\npublic class Graph extends Object;\n// Builds the runtime object model graph.\n@ImportRuntimeHints(org.springframework.integration.graph.IntegrationGraphRuntimeHints.class) public class IntegrationGraphServer extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>;\n// Base class for all nodes.\npublic abstract class IntegrationNode extends Object;\n// Represents a link between nodes.\npublic class LinkNode extends Object;\n// \npublic static enum LinkNode.Type extends Enum<LinkNode.Type>;\n// Represents a message channel.\npublic class MessageChannelNode extends IntegrationNode implements SendTimersAware;\n// Represents an inbound gateway.\npublic class MessageGatewayNode extends ErrorCapableEndpointNode;\n", "des": "Provides classes related to the runtime object graph."}
{"index": 2860, "repo": "spring-integration-core-6.1.2", "code": "package handler\n\n// Provides classes that are used to advise MessageHandlers with cross-cutting concerns.\npackage handler.advice\n// Provides classes for message handlers support.\npackage handler.support\n// Base class for MessageHandler implementations.\npublic abstract class AbstractMessageHandler extends MessageHandlerSupport implements org.springframework.messaging.MessageHandler, reactor.core.CoreSubscriber<org.springframework.messaging.Message<?>>;\n// \npublic abstract class AbstractMessageProcessor<T> extends AbstractExpressionEvaluator implements MessageProcessor<T>;\n// The base AbstractMessageHandler implementation for the MessageProducer.\npublic abstract class AbstractMessageProducingHandler extends AbstractMessageHandler implements MessageProducer, HeaderPropagationAware;\n// Base class for ReactiveMessageHandler implementations.\npublic abstract class AbstractReactiveMessageHandler extends MessageHandlerSupport implements org.springframework.messaging.ReactiveMessageHandler;\n// Base class for MessageHandlers that are capable of producing replies.\npublic abstract class AbstractReplyProducingMessageHandler extends AbstractMessageProducingHandler implements org.springframework.beans.factory.BeanClassLoaderAware;\n// An implementation of this interface is used to wrap the AbstractReplyProducingMessageHandler.handleRequestMessage(Message) method.\npublic static interface AbstractReplyProducingMessageHandler.RequestHandler;\n// \npublic abstract class AbstractReplyProducingPostProcessingMessageHandler extends AbstractReplyProducingMessageHandler implements PostProcessingMessageHandler;\n// An \"artificial\" MessageProcessor for lazy-load of target bean by its name.\npublic class BeanNameMessageProcessor<T> extends Object implements MessageProcessor<T>, org.springframework.beans.factory.BeanFactoryAware;\n// A simple MessageHandler implementation that passes the request Message directly to the output channel without modifying it.\npublic class BridgeHandler extends AbstractReplyProducingMessageHandler;\n// Classes implementing this interface delegate to a list of handlers.\npublic interface CompositeMessageHandler extends org.springframework.messaging.MessageHandler;\n", "des": "Provides classes implementing various types of message handler."}
{"index": 2861, "repo": "spring-integration-core-6.1.2", "code": "package advice\n\n// The base HandleMessageAdvice for advices which can be applied only for the MessageHandler.handleMessage(Message).\npublic abstract class AbstractHandleMessageAdvice extends IntegrationObjectSupport implements HandleMessageAdvice;\n// Base class for MessageHandler advice classes.\npublic abstract class AbstractRequestHandlerAdvice extends IntegrationObjectSupport implements org.aopalliance.intercept.MethodInterceptor;\n// Called by subclasses in doInvoke() to proceed() the invocation.\nprotected static interface AbstractRequestHandlerAdvice.ExecutionCallback;\n// \nprotected static final class AbstractRequestHandlerAdvice.ThrowableHolderException extends RuntimeException;\n// The AbstractRequestHandlerAdvice implementation for caching AbstractReplyProducingMessageHandler.RequestHandler#handleRequestMessage(Message) results.\npublic class CacheRequestHandlerAdvice extends AbstractRequestHandlerAdvice implements org.springframework.beans.factory.SmartInitializingSingleton;\n// An AbstractRequestHandlerAdvice implementation to store and reset a value into/from some context (e.g.\npublic class ContextHolderRequestHandlerAdvice extends AbstractRequestHandlerAdvice;\n// A RecoveryCallback that sends the final throwable as an ErrorMessage after retry exhaustion.\npublic class ErrorMessageSendingRecoverer extends ErrorMessagePublisher implements org.springframework.retry.RecoveryCallback<Object>;\n// \npublic static class ErrorMessageSendingRecoverer.RetryExceptionNotAvailableException extends org.springframework.messaging.MessagingException;\n// Used to advise MessageHandlers.\npublic class ExpressionEvaluatingRequestHandlerAdvice extends AbstractRequestHandlerAdvice;\n// \npublic static class ExpressionEvaluatingRequestHandlerAdvice.MessageHandlingExpressionEvaluatingAdviceException extends org.springframework.messaging.MessagingException;\n// The marker MethodInterceptor interface extension to distinguish advices for some reason.\npublic interface HandleMessageAdvice extends org.aopalliance.intercept.MethodInterceptor;\n// A HandleMessageAdvice implementation with a plain delegation to the provided MethodInterceptor.\npublic class HandleMessageAdviceAdapter extends Object implements HandleMessageAdvice;\n// The MethodInterceptor implementation for the Idempotent Receiver E.I.\npublic class IdempotentReceiverInterceptor extends AbstractHandleMessageAdvice;\n// An AbstractRequestHandlerAdvice extension for a rate limiting to service method calls.\npublic class RateLimiterRequestHandlerAdvice extends AbstractRequestHandlerAdvice;\n", "des": "Provides classes that are used to advise MessageHandlers with cross-cutting concerns."}
{"index": 2862, "repo": "spring-integration-core-6.1.2", "code": "package support\n\n// A HandlerMethodArgumentResolver implementation for Collection, Iterator or array MethodParameter.\npublic class CollectionArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;\n// No-op resolver for method arguments of type Continuation.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;\n// An InvocableHandlerMethod extension for Spring Integration requirements.\npublic class IntegrationInvocableHandlerMethod extends org.springframework.messaging.handler.invocation.InvocableHandlerMethod;\n// Extension of the DefaultMessageHandlerMethodFactory for Spring Integration requirements.\npublic class IntegrationMessageHandlerMethodFactory extends org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory;\n// A HandlerMethodArgumentResolver implementation to resolve argument for the MethodParameter as a Map or Properties.\npublic class MapArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;\n// A helper class for processors that invoke a method on a target Object using a combination of message payload(s) and headers as arguments.\npublic class MessagingMethodInvokerHelper extends AbstractExpressionEvaluator implements ManageableLifecycle;\n// \npublic static class MessagingMethodInvokerHelper.ParametersWrapper extends Object;\n// The HandlerMethodArgumentResolver for evaluating Payload.expression() as a SpEL expression against message and converting result to expected parameter type.\npublic class PayloadExpressionArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;\n// The HandlerMethodArgumentResolver for resolving a Collection of payloads or expression against each payload.\npublic class PayloadsArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;\n", "des": "Provides classes for message handlers support."}
{"index": 2863, "repo": "spring-integration-core-6.1.2", "code": "package history\n\n// \npublic class HistoryWritingMessagePostProcessor extends Object implements org.springframework.messaging.core.MessagePostProcessor;\n// \npublic final class MessageHistory extends Object implements List<Properties>, Serializable;\n// Inner class for each Entry in the history.\npublic static class MessageHistory.Entry extends Properties;\n// \n@ManagedResource @IntegrationManagedResource public class MessageHistoryConfigurer extends Object implements ManageableSmartLifecycle, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;\n", "des": "Provides classes supporting the capture of message history."}
{"index": 2864, "repo": "spring-integration-core-6.1.2", "code": "package json\n\n// The Converter implementation for the conversion of JsonPropertyAccessor.JsonNodeWrapper to JsonNode, when the JsonPropertyAccessor.JsonNodeWrapper can be a result of the expression for JSON in case of the JsonPropertyAccessor usage.\npublic class JsonNodeWrapperToJsonNodeConverter extends Object implements org.springframework.core.convert.converter.GenericConverter;\n// Utility class to JsonPathUtils.evaluate(java.lang.Object, java.lang.String, com.jayway.jsonpath.Predicate...) a jsonPath on the provided object.\npublic final class JsonPathUtils extends Object;\n// A SpEL PropertyAccessor that knows how to read properties from JSON objects.\npublic class JsonPropertyAccessor extends Object implements org.springframework.expression.PropertyAccessor;\n// Transformer implementation that converts a JSON string payload into an instance of the provided target Class.\npublic class JsonToObjectTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware;\n// Transformer implementation that converts a payload instance into a JSON string representation.\npublic class ObjectToJsonTransformer extends AbstractTransformer;\n// \npublic static enum ObjectToJsonTransformer.ResultType extends Enum<ObjectToJsonTransformer.ResultType>;\n// Extremely simple JSON serializer.\npublic final class SimpleJsonSerializer extends Object;\n", "des": "Provides classes supporting JSON in Spring Integration."}
{"index": 2865, "repo": "spring-integration-core-6.1.2", "code": "package leader\n\n// Temporary package until s-c-c-core is released.\npackage leader.event\n// Base implementation of a Candidate.\npublic abstract class AbstractCandidate extends Object implements Candidate;\n// Interface that defines the contract for candidates to participate in a leader election.\npublic interface Candidate;\n// Interface that defines the context for candidate leadership.\n@FunctionalInterface public interface Context;\n// Simple Candidate for leadership.\npublic class DefaultCandidate extends AbstractCandidate;\n", "des": "Temporary package until s-c-c-core is released."}
{"index": 2866, "repo": "spring-integration-core-6.1.2", "code": "package event\n\n// Base ApplicationEvent class for leader based events.\npublic abstract class AbstractLeaderEvent extends org.springframework.context.ApplicationEvent;\n// Default implementation of LeaderEventPublisher.\npublic class DefaultLeaderEventPublisher extends Object implements LeaderEventPublisher, org.springframework.context.ApplicationEventPublisherAware;\n// Interface for publishing leader based application events.\npublic interface LeaderEventPublisher;\n// Generic event representing that a mutex could not be acquired during leader election.\npublic class OnFailedToAcquireMutexEvent extends AbstractLeaderEvent;\n// Generic event representing that leader has been granted.\npublic class OnGrantedEvent extends AbstractLeaderEvent;\n// Generic event representing that leader has been revoked.\npublic class OnRevokedEvent extends AbstractLeaderEvent;\n", "des": "Temporary package until s-c-c-core is released."}
{"index": 2867, "repo": "spring-integration-core-6.1.2", "code": "package mapping\n\n// Support classes for mapping.\npackage mapping.support\n// Abstract base class for RequestReplyHeaderMapper implementations.\npublic abstract class AbstractHeaderMapper<T> extends Object implements RequestReplyHeaderMapper<T>, org.springframework.beans.factory.BeanClassLoaderAware;\n// A composite AbstractHeaderMapper.HeaderMatcher that matches if one of provided AbstractHeaderMapper.HeaderMatchers matches to the headerName.\nprotected static class AbstractHeaderMapper.CompositeHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher;\n// A content-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header is contained within a list of candidates.\nprotected static class AbstractHeaderMapper.ContentBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher;\n// Strategy interface to determine if a given header name matches.\n@FunctionalInterface public static interface AbstractHeaderMapper.HeaderMatcher;\n// A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches one of the specified simple patterns.\nprotected static class AbstractHeaderMapper.PatternBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher;\n// A prefix-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header starts with a configurable prefix.\nprotected static class AbstractHeaderMapper.PrefixBasedMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher;\n// A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches the specified simple pattern.\nprotected static class AbstractHeaderMapper.SinglePatternBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher;\n// An OutboundMessageMapper and InboundMessageMapper that maps to/from byte[].\npublic interface BytesMessageMapper extends InboundMessageMapper<byte[]>, OutboundMessageMapper<byte[]>;\n// The BytesMessageMapper implementation to delegate to/from Message conversion into the provided MessageConverter.\npublic class ConvertingBytesMessageMapper extends Object implements BytesMessageMapper;\n// Generic strategy interface for mapping MessageHeaders to and from other types of objects.\npublic interface HeaderMapper<T>;\n// Strategy interface for mapping from an Object to aMessage.\n@FunctionalInterface public interface InboundMessageMapper<T>;\n// Exception that indicates an error during message mapping.\npublic class MessageMappingException extends org.springframework.messaging.MessagingException;\n", "des": "Provides classes related to mapping to/from message headers."}
{"index": 2868, "repo": "spring-integration-core-6.1.2", "code": "package support\n\n// Pre-defined names and prefixes to be used for setting and/or retrieving JSON entries from/to Message Headers and other adapter, e.g.\npublic final class JsonHeaders extends Object;\n", "des": "Support classes for mapping."}
{"index": 2869, "repo": "spring-integration-core-6.1.2", "code": "package message\n\n// A message implementation that is produced by an advice after successful message handling.\npublic class AdviceMessage<T> extends org.springframework.messaging.support.GenericMessage<T>;\n", "des": "Provides concrete Message implementations."}
{"index": 2870, "repo": "spring-integration-core-6.1.2", "code": "package metadata\n\n// Supports atomic updates to values in the store.\npublic interface ConcurrentMetadataStore extends MetadataStore;\n// ConcurrentMetadataStore with the ability of registering MetadataStoreListener callbacks, to be invoked when changes occur in the metadata store.\npublic interface ListenableMetadataStore extends ConcurrentMetadataStore;\n// Strategy interface for storing metadata from certain adapters to avoid duplicate delivery of messages, for example.\n@ManagedResource public interface MetadataStore;\n// A callback to be invoked whenever a value changes in the data store.\npublic interface MetadataStoreListener;\n// Base implementation for a MetadataStoreListener.\npublic abstract class MetadataStoreListenerAdapter extends Object implements MetadataStoreListener;\n// Properties file-based implementation of MetadataStore.\npublic class PropertiesPersistingMetadataStore extends Object implements ConcurrentMetadataStore, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, Closeable, Flushable;\n// Simple implementation of MetadataStore that uses a ConcurrentMap for the data store.\npublic class SimpleMetadataStore extends Object implements ConcurrentMetadataStore;\n", "des": "Provides classes supporting metadata stores."}
{"index": 2871, "repo": "spring-integration-core-6.1.2", "code": "package resource\n\n// Implementation of MessageSource based on ResourcePatternResolver which will attempt to resolve Resources based on the pattern specified.\npublic class ResourceRetrievingMessageSource extends AbstractMessageSource<org.springframework.core.io.Resource[]> implements org.springframework.context.ApplicationContextAware;\n", "des": "Provides classes related to messaging using Spring Resources"}
{"index": 2872, "repo": "spring-integration-core-6.1.2", "code": "package router\n\n// Base class for all Message Routers that support mapping from arbitrary String values to Message Channel names.\npublic abstract class AbstractMappingMessageRouter extends AbstractMessageRouter implements MappingMessageRouterManagement;\n// Base class for all Message Routers.\n@ManagedResource @IntegrationManagedResource public abstract class AbstractMessageRouter extends AbstractMessageHandler implements MessageRouter;\n// A Message Router that resolves the target MessageChannel for messages whose payload is a Throwable.\npublic class ErrorMessageExceptionTypeRouter extends AbstractMappingMessageRouter;\n// A Message Router implementation that evaluates the specified SpEL expression.\npublic class ExpressionEvaluatingRouter extends AbstractMappingMessageRouter;\n// A Message Router that resolves the MessageChannel from a header value.\npublic class HeaderValueRouter extends AbstractMappingMessageRouter;\n// Routers implementing this interface have a default output channel.\npublic interface MessageRouter;\n// A Message Router that invokes the specified method on the given object.\npublic class MethodInvokingRouter extends AbstractMappingMessageRouter;\n// A Message Router that resolves the MessageChannel based on the Message's payload type.\npublic class PayloadTypeRouter extends AbstractMappingMessageRouter;\n// <recipient-list-router id=\"simpleRouter\" input-channel=\"routingChannelA\"> <recipient channel=\"channel1\"/> <recipient channel=\"channel2\"/> </recipient-list-router>\npublic class RecipientListRouter extends AbstractMessageRouter implements RecipientListRouterManagement;\n// \npublic static class RecipientListRouter.Recipient extends Object;\n// Exposes adding/removing individual recipients operations for RecipientListRouter.\n@ManagedResource @IntegrationManagedResource public interface RecipientListRouterManagement;\n", "des": "Provides classes supporting the router pattern."}
{"index": 2873, "repo": "spring-integration-core-6.1.2", "code": "package routingslip\n\n// The Expression based RoutingSlipRouteStrategy implementation.\npublic class ExpressionEvaluatingRoutingSlipRouteStrategy extends Object implements RoutingSlipRouteStrategy, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\n// \npublic static class ExpressionEvaluatingRoutingSlipRouteStrategy.RequestAndReply extends Object;\n// The RoutingSlip strategy to determine the next replyChannel.\n@FunctionalInterface public interface RoutingSlipRouteStrategy;\n", "des": "Provides classes supporting the RoutingSlip pattern."}
{"index": 2874, "repo": "spring-integration-core-6.1.2", "code": "package scattergather\n\n// The MessageHandler implementation for the Scatter-Gather EIP pattern.\npublic class ScatterGatherHandler extends AbstractReplyProducingMessageHandler implements ManageableLifecycle;\n", "des": "Provides classes supporting the Scatter-Gather pattern."}
{"index": 2875, "repo": "spring-integration-core-6.1.2", "code": "package scheduling\n\n// \npublic class PollerMetadata extends Object;\n// An advice that can be added to a poller's advice chain that determines whether a poll should be skipped or not.\npublic class PollSkipAdvice extends Object implements org.aopalliance.intercept.MethodInterceptor;\n// Implementations determine whether a particular poll should be skipped.\npublic interface PollSkipStrategy;\n// A simple PollSkipStrategy to be used with a PollSkipAdvice.\n@ManagedResource public class SimplePollSkipStrategy extends Object implements PollSkipStrategy;\n", "des": "Provides classes related to task scheduling."}
{"index": 2876, "repo": "spring-integration-core-6.1.2", "code": "package selector\n\n// A message selector implementation that passes incoming messages through a chain of selectors.\npublic class MessageSelectorChain extends Object implements MessageSelector;\n// \npublic static enum MessageSelectorChain.VotingStrategy extends Enum<MessageSelectorChain.VotingStrategy>;\n// The MessageSelector implementation using a ConcurrentMetadataStore and MessageProcessor.\npublic class MetadataStoreSelector extends Object implements MessageSelector;\n// A MessageSelector implementation that checks the type of the Message payload.\npublic class PayloadTypeSelector extends Object implements MessageSelector;\n// A MessageSelector that accepts Messages that are not yet expired.\npublic class UnexpiredMessageSelector extends Object implements MessageSelector;\n", "des": "Provides classes related to message selection."}
{"index": 2877, "repo": "spring-integration-core-6.1.2", "code": "package splitter\n\n// Base class for Message-splitting handlers.\npublic abstract class AbstractMessageSplitter extends AbstractReplyProducingMessageHandler implements DiscardingMessageHandler;\n// The default Message Splitter implementation.\npublic class DefaultMessageSplitter extends AbstractMessageSplitter;\n// A Message Splitter implementation that evaluates the specified SpEL expression.\npublic class ExpressionEvaluatingSplitter extends AbstractMessageSplitter;\n// A Message Splitter implementation that invokes the specified method on the given object.\npublic class MethodInvokingSplitter extends AbstractMessageSplitter;\n", "des": "Provides classes supporting the splitter pattern."}
{"index": 2878, "repo": "spring-integration-core-6.1.2", "code": "package store\n\n// \npublic abstract class AbstractBatchingMessageGroupStore extends Object implements BasicMessageGroupStore;\n// Base class for implementations of Key/Value style MessageGroupStore and MessageStore.\npublic abstract class AbstractKeyValueMessageStore extends AbstractMessageGroupStore implements MessageStore;\n// \n@ManagedResource public abstract class AbstractMessageGroupStore extends AbstractBatchingMessageGroupStore implements MessageGroupStore, Iterable<MessageGroup>;\n// Defines a minimal message group store with basic capabilities.\npublic interface BasicMessageGroupStore;\n// A marker interface that indicates this message store has optimizations for use in a QueueChannel.\npublic interface ChannelMessageStore extends BasicMessageGroupStore;\n// A group of messages that are correlated with each other and should be processed in the same context.\npublic interface MessageGroup;\n// The MessageGroup factory strategy.\npublic interface MessageGroupFactory;\n// Value Object holding metadata about a MessageGroup in the MessageGroupStore.\npublic class MessageGroupMetadata extends Object implements Serializable;\n// A BlockingQueue that is backed by a MessageGroupStore.\npublic class MessageGroupQueue extends AbstractQueue<org.springframework.messaging.Message<?>> implements BlockingQueue<org.springframework.messaging.Message<?>>;\n// Defines additional storage operations on groups of messages linked by a group id.\npublic interface MessageGroupStore extends BasicMessageGroupStore;\n// Invoked when a MessageGroupStore expires a group.\n@FunctionalInterface public static interface MessageGroupStore.MessageGroupCallback;\n// Convenient configurable component to allow explicit timed expiry of MessageGroup instances in a MessageGroupStore.\npublic class MessageGroupStoreReaper extends Object implements Runnable, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.InitializingBean, org.springframework.context.SmartLifecycle;\n// The MessageStore specific value object to keep the Message and its metadata.\npublic class MessageHolder extends Object implements Serializable;\n// Value Object holding metadata about a Message in the MessageStore.\npublic class MessageMetadata extends Object implements Serializable;\n// Strategy interface for storing and retrieving messages.\npublic interface MessageStore;\n// Exception for problems that occur when using a MessageStore implementation.\npublic class MessageStoreException extends org.springframework.messaging.MessagingException;\n", "des": "Provides classes releated to storing messages."}
{"index": 2879, "repo": "spring-integration-core-6.1.2", "code": "package support\n\n// Provides classes supporting use of the application context.\npackage support.context\n// Provides classes supporting message conversion.\npackage support.converter\n// Provides classes supporting json.\npackage support.json\n// Provides classes related to locking resources.\npackage support.locks\n// Provides classes related to management support.\npackage support.management\n// Provides global utility support classes for the runtime system.\npackage support.utils\n// \npublic abstract class AbstractIntegrationMessageBuilder<T> extends Object;\n// A simple ErrorMessageStrategy implementations which produces a error message with original message if the AttributeAccessor has ErrorMessageUtils.INPUT_MESSAGE_CONTEXT_KEY attribute.\npublic class DefaultErrorMessageStrategy extends Object implements ErrorMessageStrategy;\n// \npublic class DefaultMessageBuilderFactory extends Object implements MessageBuilderFactory;\n// A strategy to build an ErrorMessage based on the provided Throwable and AttributeAccessor as a context.\n@FunctionalInterface public interface ErrorMessageStrategy;\n// Utilities for building error messages.\npublic final class ErrorMessageUtils extends Object;\n// Alternative IdGenerator implementations.\npublic class IdGenerators extends Object;\n// UUID.randomUUID().\npublic static class IdGenerators.JdkIdGenerator extends Object implements org.springframework.util.IdGenerator;\n// Based on the two AtomicLongs, for topBits and bottomBits, respectively.\npublic static class IdGenerators.SimpleIncrementingIdGenerator extends Object implements org.springframework.util.IdGenerator;\n// A Builder pattern implementation for the Map.\npublic class MapBuilder<B extends MapBuilder<B,K,V>,K,V> extends Object;\n// The default message builder; creates immutable GenericMessages.\npublic final class MessageBuilder<T> extends AbstractIntegrationMessageBuilder<T>;\n// \npublic interface MessageBuilderFactory;\n// The Message decoration contract.\n@FunctionalInterface public interface MessageDecorator;\n// A wrapper exception for a MessagingException used to convey the cause and original message to a MessagePublishingErrorHandler.\npublic class MessagingExceptionWrapper extends org.springframework.messaging.MessagingException;\n// An implementation of Message with a generic payload.\npublic class MutableMessage<T> extends Object implements org.springframework.messaging.Message<T>, Serializable;\n", "des": "Base core support package."}
{"index": 2880, "repo": "spring-integration-core-6.1.2", "code": "package context\n\n// \npublic interface NamedComponent;\n", "des": "Provides classes supporting use of the application context."}
{"index": 2881, "repo": "spring-integration-core-6.1.2", "code": "package converter\n\n// A Converter that delegates to a Deserializer to convert data in a byte array to an object.\npublic class AllowListDeserializingConverter extends Object implements org.springframework.core.convert.converter.Converter<byte[],Object>;\n// A CompositeMessageConverter extension with some default MessageConverters which can be overridden with the given converters or added in the end of target converters collection.\npublic class ConfigurableCompositeMessageConverter extends org.springframework.messaging.converter.CompositeMessageConverter implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\n// Default message converter for datatype channels.\npublic class DefaultDatatypeChannelMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware;\n// Converts to/from a Map with 2 keys ('headers' and 'payload').\npublic class MapMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware;\n// A StringMessageConverter extension to convert any object to string.\npublic class ObjectStringMessageConverter extends org.springframework.messaging.converter.StringMessageConverter;\n// The simple MessageConverter implementation which contract is to return Message as is for both from/to operations.\npublic class PassThruMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter;\n// \npublic class SimpleMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware;\n", "des": "Provides classes supporting message conversion."}
{"index": 2882, "repo": "spring-integration-core-6.1.2", "code": "package json\n\n// Base class for Jackson JsonObjectMapper implementations.\npublic abstract class AbstractJacksonJsonObjectMapper<N,P,J> extends Object implements JsonObjectMapper<N,P>, org.springframework.beans.factory.BeanClassLoaderAware;\n// Abstract InboundMessageMapper implementation that maps incoming JSON messages to a Message with the specified payload type.\npublic abstract class AbstractJsonInboundMessageMapper<P> extends Object implements InboundMessageMapper<String>;\n// The MessageJacksonDeserializer implementation for the AdviceMessage.\npublic class AdviceMessageJacksonDeserializer extends MessageJacksonDeserializer<AdviceMessage<?>>;\n// For outbound messages, uses a message-aware Jackson object mapper to render the message as JSON.\npublic class EmbeddedJsonHeadersMessageMapper extends Object implements BytesMessageMapper;\n// The MessageJacksonDeserializer implementation for the ErrorMessage.\npublic class ErrorMessageJacksonDeserializer extends MessageJacksonDeserializer<org.springframework.messaging.support.ErrorMessage>;\n// The MessageJacksonDeserializer implementation for the GenericMessage.\npublic class GenericMessageJacksonDeserializer extends MessageJacksonDeserializer<org.springframework.messaging.support.GenericMessage<?>>;\n// JsonInboundMessageMapper.JsonMessageParser implementation that parses JSON messages and builds a Message with the specified payload type from provided JsonInboundMessageMapper.\npublic class Jackson2JsonMessageParser extends Object;\n// Jackson 2 JSON-processor (@link https://github.com/FasterXML) JsonObjectMapper implementation.\npublic class Jackson2JsonObjectMapper extends AbstractJacksonJsonObjectMapper<com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType>;\n// Utility methods for Jackson.\npublic final class JacksonJsonUtils extends Object;\n// The utility to check if Jackson JSON processor is present in the classpath.\npublic final class JacksonPresent extends Object;\n// InboundMessageMapper implementation that maps incoming JSON messages to a Message with the specified payload type.\npublic class JsonInboundMessageMapper extends AbstractJsonInboundMessageMapper<JsonInboundMessageMapper.JsonMessageParser<?>>;\n// \npublic static interface JsonInboundMessageMapper.JsonMessageParser<P>;\n", "des": "Provides classes supporting json."}
{"index": 2883, "repo": "spring-integration-core-6.1.2", "code": "package locks\n\n// Default implementation of LockRegistry which uses Masked Hashcode algorithm to obtain locks.\npublic final class DefaultLockRegistry extends Object implements LockRegistry;\n// A LockRegistry implementing this interface supports the removal of aged locks that are not currently locked.\npublic interface ExpirableLockRegistry extends LockRegistry;\n// Strategy for maintaining a registry of shared locks.\n@FunctionalInterface public interface LockRegistry;\n// The LockRegistry implementation which has no effect.\npublic final class PassThruLockRegistry extends Object implements LockRegistry;\n// A LockRegistry implementing this interface supports the renewal of the time to live of a lock.\npublic interface RenewableLockRegistry extends LockRegistry;\n", "des": "Provides classes related to locking resources."}
{"index": 2884, "repo": "spring-integration-core-6.1.2", "code": "package management\n\n// Provides interfaces related to 5.0 metrics.\npackage management.metrics\n// Provides classes to support the use of Micrometer for metrics.\npackage management.micrometer\n// Provides classes to support of Micrometer Observation API.\npackage management.observation\n// Marker interface indicating that this IntegrationManagement component initiates message flow.\npublic interface IntegrationInboundManagement extends IntegrationManagement;\n// Clone of ManagedResource limiting beans thus annotated so that they will only be exported by the IntegrationMBeanExporter and prevented from being exported by other MBeanExporters (if present).\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface IntegrationManagedResource;\n// Base interface for Integration managed components.\npublic interface IntegrationManagement extends NamedComponent, org.springframework.beans.factory.DisposableBean;\n// Toggles to inform the management configurer to not set these properties since the user has manually configured them in a bean definition.\npublic static class IntegrationManagement.ManagementOverrides extends Object;\n// Makes Lifecycle methods manageable.\npublic interface ManageableLifecycle extends org.springframework.context.Lifecycle;\n// Extend ManageableLifecycle to make those methods manageable.\npublic interface ManageableSmartLifecycle extends org.springframework.context.SmartLifecycle, ManageableLifecycle;\n// Exposes channel mapping operations when the router is proxied.\npublic interface MappingMessageRouterManagement;\n// Message sources implementing this interface have additional properties that can be set or examined using JMX.\n@IntegrationManagedResource public interface MessageSourceManagement;\n// Metrics for subscribable channels.\npublic interface SubscribableChannelManagement;\n// \n@IntegrationManagedResource public interface TrackableComponent extends NamedComponent;\n", "des": "Provides classes related to management support."}
{"index": 2885, "repo": "spring-integration-core-6.1.2", "code": "package metrics\n\n// \npublic interface CounterFacade extends MeterFacade;\n// \npublic interface GaugeFacade extends MeterFacade;\n// Facade for Meters.\npublic interface MeterFacade;\n// A metrics facade that delegates to a concrete implementation.\npublic interface MetricsCaptor;\n// A builder for a counter.\npublic static interface MetricsCaptor.CounterBuilder;\n// A builder for a gauge.\npublic static interface MetricsCaptor.GaugeBuilder;\n// A builder for a timer.\npublic static interface MetricsCaptor.TimerBuilder;\n// \npublic interface SampleFacade;\n// \npublic interface TimerFacade extends MeterFacade;\n", "des": "Provides interfaces related to 5.0 metrics."}
{"index": 2886, "repo": "spring-integration-core-6.1.2", "code": "package micrometer\n\n// The Micrometer implementation of MetricsCaptor.\npublic class MicrometerMetricsCaptor extends Object implements MetricsCaptor;\n// \nprotected abstract static class MicrometerMetricsCaptor.AbstractMeter<M extends io.micrometer.core.instrument.Meter> extends Object implements MeterFacade;\n// \nprotected static class MicrometerMetricsCaptor.MicroCounter extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Counter> implements CounterFacade;\n// \nprotected static class MicrometerMetricsCaptor.MicroCounterBuilder extends Object implements MetricsCaptor.CounterBuilder;\n// \nprotected static class MicrometerMetricsCaptor.MicroGauge extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Gauge> implements GaugeFacade;\n// \nprotected static class MicrometerMetricsCaptor.MicroGaugeBuilder extends Object implements MetricsCaptor.GaugeBuilder;\n// \nprotected static class MicrometerMetricsCaptor.MicroTimer extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Timer> implements TimerFacade;\n// \nprotected static class MicrometerMetricsCaptor.MicroTimerBuilder extends Object implements MetricsCaptor.TimerBuilder;\n// A Configuration to add a MicrometerMetricsCaptor.\n@Configuration(proxyBeanMethods=false) public class MicrometerMetricsCaptorConfiguration extends Object;\n// An ImportSelector to conditionally add a MicrometerMetricsCaptorConfiguration bean when io.micrometer.core.instrument.MeterRegistry is present in classpath.\npublic class MicrometerMetricsCaptorImportSelector extends Object implements org.springframework.context.annotation.ImportSelector;\n", "des": "Provides classes to support the use of Micrometer for metrics."}
{"index": 2887, "repo": "spring-integration-core-6.1.2", "code": "package observation\n\n// A default MessageReceiverObservationConvention implementation.\npublic class DefaultMessageReceiverObservationConvention extends Object implements MessageReceiverObservationConvention;\n// A default MessageRequestReplyReceiverObservationConvention implementation.\npublic class DefaultMessageRequestReplyReceiverObservationConvention extends Object implements MessageRequestReplyReceiverObservationConvention;\n// A default MessageSenderObservationConvention implementation.\npublic class DefaultMessageSenderObservationConvention extends Object implements MessageSenderObservationConvention;\n// The ObservationDocumentation implementation for Spring Integration infrastructure.\npublic enum IntegrationObservation extends Enum<IntegrationObservation> implements io.micrometer.observation.docs.ObservationDocumentation;\n// Key names for message handler observations.\npublic static enum IntegrationObservation.GatewayTags extends Enum<IntegrationObservation.GatewayTags> implements io.micrometer.common.docs.KeyName;\n// Key names for message handler observations.\npublic static enum IntegrationObservation.HandlerTags extends Enum<IntegrationObservation.HandlerTags> implements io.micrometer.common.docs.KeyName;\n// Key names for message producer observations.\npublic static enum IntegrationObservation.ProducerTags extends Enum<IntegrationObservation.ProducerTags> implements io.micrometer.common.docs.KeyName;\n// The ReceiverContext extension for Message context.\npublic class MessageReceiverContext extends io.micrometer.observation.transport.ReceiverContext<org.springframework.messaging.Message<?>>;\n// A MessageReceiverContext-based ObservationConvention contract.\npublic interface MessageReceiverObservationConvention extends io.micrometer.observation.ObservationConvention<MessageReceiverContext>;\n// The RequestReplyReceiverContext extension for a Message contract with inbound gateways.\npublic class MessageRequestReplyReceiverContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<org.springframework.messaging.Message<?>,org.springframework.messaging.Message<?>>;\n// A MessageRequestReplyReceiverContext-based ObservationConvention contract.\npublic interface MessageRequestReplyReceiverObservationConvention extends io.micrometer.observation.ObservationConvention<MessageRequestReplyReceiverContext>;\n// The SenderContext extension for Message context.\npublic class MessageSenderContext extends io.micrometer.observation.transport.SenderContext<MutableMessage<?>>;\n", "des": "Provides classes to support of Micrometer Observation API."}
{"index": 2888, "repo": "spring-integration-core-6.1.2", "code": "package utils\n\n// General utility methods.\npublic final class IntegrationUtils extends Object;\n// Utility methods for pattern matching.\npublic final class PatternMatchUtils extends Object;\n", "des": "Provides global utility support classes for the runtime system."}
{"index": 2889, "repo": "spring-integration-core-6.1.2", "code": "package transaction\n\n// Default implementation of TransactionSynchronizationFactory which takes an instance of TransactionSynchronizationProcessor allowing you to create a TransactionSynchronization using {DefaultTransactionSynchronizationFactory.create(Object) method.\npublic class DefaultTransactionSynchronizationFactory extends Object implements TransactionSynchronizationFactory;\n// This implementation of TransactionSynchronizationFactory allows you to configure SpEL expressions, with their execution being coordinated (synchronized) with a transaction - see TransactionSynchronization.\npublic class ExpressionEvaluatingTransactionSynchronizationProcessor extends IntegrationObjectSupport implements TransactionSynchronizationProcessor;\n// An implementation of the ResourceHolder which holds an instance of the current Message and the synchronization resource.\npublic class IntegrationResourceHolder extends Object implements org.springframework.transaction.support.ResourceHolder;\n// The base ResourceHolderSynchronization for IntegrationResourceHolder.\npublic class IntegrationResourceHolderSynchronization extends org.springframework.transaction.support.ResourceHolderSynchronization<IntegrationResourceHolder,Object>;\n// A simple TransactionSynchronizationFactory implementation which produces an IntegrationResourceHolderSynchronization with an IntegrationResourceHolder.\npublic class PassThroughTransactionSynchronizationFactory extends Object implements TransactionSynchronizationFactory;\n// An implementation of PlatformTransactionManager that provides transaction-like semantics to MessageSources that are not inherently transactional.\npublic class PseudoTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager;\n// A TransactionInterceptor extension with HandleMessageAdvice marker.\npublic class TransactionHandleMessageAdvice extends org.springframework.transaction.interceptor.TransactionInterceptor implements HandleMessageAdvice;\n// Provides a fluent API to build a transaction interceptor.\npublic class TransactionInterceptorBuilder extends Object;\n// Strategy for implementing factories that create TransactionSynchronization.\npublic interface TransactionSynchronizationFactory;\n// The FactoryBean implementation (with Builder style) to be used from JavaConfig to populate DefaultTransactionSynchronizationFactory bean.\npublic class TransactionSynchronizationFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<DefaultTransactionSynchronizationFactory>, org.springframework.beans.factory.BeanFactoryAware;\n// Strategy for implementing transaction synchronization processors.\npublic interface TransactionSynchronizationProcessor;\n", "des": "Provides classes supporting the use of transactions and pseudo transactions in Spring Integration applications."}
{"index": 2890, "repo": "spring-integration-core-6.1.2", "code": "package transformer\n\n// Contains support classes for Transformers.\npackage transformer.support\n// Base class for Message Transformers that delegate to a MessageProcessor.\npublic abstract class AbstractMessageProcessingTransformer extends Object implements Transformer, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle;\n// A base class for Transformer implementations that modify the payload of a Message.\npublic abstract class AbstractPayloadTransformer<T,U> extends AbstractTransformer;\n// A base class for Transformer implementations.\npublic abstract class AbstractTransformer extends IntegrationObjectSupport implements Transformer;\n// Transformer that stores a Message and returns a new Message whose payload is the id of the stored Message.\npublic class ClaimCheckInTransformer extends AbstractTransformer implements IntegrationPattern;\n// Transformer that accepts a Message whose payload is a UUID and retrieves the Message associated with that id from a MessageStore if available.\npublic class ClaimCheckOutTransformer extends AbstractTransformer implements IntegrationPattern;\n// Content Enricher is a Message Transformer that can augment a message's payload with either static values or by optionally invoking a downstream message flow via its request channel and then applying values from the reply Message to the original payload.\npublic class ContentEnricher extends AbstractReplyProducingMessageHandler implements ManageableLifecycle;\n// AbstractPayloadTransformer that delegates to a codec to decode the payload from a byte[].\npublic class DecodingTransformer<T> extends AbstractTransformer;\n// AbstractPayloadTransformer that delegates to a codec to encode the payload into a byte[].\npublic class EncodingPayloadTransformer<T> extends AbstractPayloadTransformer<T,byte[]>;\n// A Message Transformer implementation that evaluates the specified SpEL expression.\npublic class ExpressionEvaluatingTransformer extends AbstractMessageProcessingTransformer;\n// A Protocol Buffer transformer to instantiate Message objects from either byte[] if content type is application/x-protobuf or from String in case of application/json content type.\npublic class FromProtobufTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware;\n// A Transformer that adds statically configured header values to a Message.\npublic class HeaderEnricher extends IntegrationObjectSupport implements Transformer, IntegrationPattern;\n// Transformer that removes Message headers.\npublic class HeaderFilter extends IntegrationObjectSupport implements Transformer, IntegrationPattern;\n// Will transform Map to an instance of Object.\npublic class MapToObjectTransformer extends AbstractPayloadTransformer<Map<?,?>,Object>;\n", "des": "Contains core-implementation of various Transformers which includes Enrichers and Filters."}
{"index": 2891, "repo": "spring-integration-core-6.1.2", "code": "package support\n\n// \npublic abstract class AbstractHeaderValueMessageProcessor<T> extends Object implements HeaderValueMessageProcessor<T>;\n// Pre-defined names and prefixes for Apache Avro related headers.\npublic final class AvroHeaders extends Object;\n// \npublic class ExpressionEvaluatingHeaderValueMessageProcessor<T> extends AbstractHeaderValueMessageProcessor<T> implements org.springframework.beans.factory.BeanFactoryAware;\n// \npublic interface HeaderValueMessageProcessor<T> extends MessageProcessor<T>;\n// \npublic class MessageProcessingHeaderValueMessageProcessor extends AbstractHeaderValueMessageProcessor<Object> implements org.springframework.beans.factory.BeanFactoryAware;\n// Pre-defined names and prefixes for Protocol Buffers related headers.\npublic final class ProtoHeaders extends Object;\n// The RoutingSlip HeaderValueMessageProcessor specific implementation.\npublic class RoutingSlipHeaderValueMessageProcessor extends AbstractHeaderValueMessageProcessor<Map<List<Object>,Integer>> implements org.springframework.beans.factory.BeanFactoryAware;\n// \npublic class StaticHeaderValueMessageProcessor<T> extends AbstractHeaderValueMessageProcessor<T>;\n", "des": "Contains support classes for Transformers."}
{"index": 2892, "repo": "spring-integration-core-6.1.2", "code": "package util\n\n// \npublic abstract class AbstractExpressionEvaluator extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\n// An implementation of CollectionFilter that remembers the elements passed in the previous invocation in order to avoid returning those elements more than once.\npublic class AcceptOnceCollectionFilter<T> extends Object implements CollectionFilter<T>;\n// A MethodFilter implementation that enables the following: matching on method name, if available exclusion of void-returning methods if 'requiresReply' is true limiting to annotated methods if at least one is present .\npublic class AnnotatedMethodFilter extends Object implements org.springframework.expression.MethodFilter;\n// \npublic class BeanFactoryTypeConverter extends Object implements org.springframework.expression.TypeConverter, org.springframework.beans.factory.BeanFactoryAware;\n// A RejectedExecutionHandler that blocks the caller until the executor has room in its queue, or a timeout occurs (in which case a RejectedExecutionException is thrown.\npublic class CallerBlocksPolicy extends Object implements RejectedExecutionHandler;\n// A Function-like interface which allows throwing Error.\n@FunctionalInterface public interface CheckedFunction<T,R>;\n// \npublic abstract class ClassUtils extends Object;\n// A CloseableIterator is intended to be used when it may hold resources (such as file or socket handles).\npublic interface CloseableIterator<E> extends Iterator<E>, AutoCloseable;\n// Base strategy for filtering out a subset of a Collection of elements.\n@FunctionalInterface public interface CollectionFilter<T>;\n// An Executor that encapsulates two underlying executors.\npublic class CompositeExecutor extends Object implements Executor;\n// A Trigger that delegates the Trigger.nextExecutionTime(TriggerContext) to one of two Triggers.\npublic class CompoundTrigger extends Object implements org.springframework.scheduling.Trigger;\n// Additional utilities for working with Kotlin Coroutines.\npublic final class CoroutinesUtils extends Object;\n// This is a dynamically changeable Trigger.\npublic class DynamicPeriodicTrigger extends Object implements org.springframework.scheduling.Trigger;\n", "des": "Provides core utility classes."}
{"index": 2893, "repo": "spring-integration-amqp-6.1.2", "code": "package channel\n\n// The base AbstractMessageChannel implementation for AMQP.\npublic abstract class AbstractAmqpChannel extends org.springframework.integration.channel.AbstractMessageChannel implements org.springframework.amqp.rabbit.connection.ConnectionListener;\n// The AbstractSubscribableAmqpChannel implementation for one-to-one subscription over AMQP queue.\npublic class PointToPointSubscribableAmqpChannel extends AbstractAmqpChannel;\n// A PollableChannel implementation that is backed by an AMQP Queue.\npublic class PollableAmqpChannel extends AbstractAmqpChannel implements org.springframework.messaging.PollableChannel, org.springframework.integration.channel.ExecutorChannelInterceptorAware;\n// The AbstractSubscribableAmqpChannel extension for pub-sub semantics based on the FanoutExchange.\npublic class PublishSubscribeAmqpChannel extends AbstractAmqpChannel implements org.springframework.integration.channel.BroadcastCapableChannel;\n", "des": "Provides classes related to AMQP-backed channels."}
{"index": 2894, "repo": "spring-integration-amqp-6.1.2", "code": "package config\n\n// If point-to-point, we send to the default exchange with the routing key equal to \"[beanName]\" and we declare that same Queue and register a listener if message-driven or poll explicitly otherwise.\npublic class AmqpChannelFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractAmqpChannel> implements org.springframework.context.SmartLifecycle, org.springframework.beans.factory.BeanNameAware;\n// Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration AMQP namespace.\npublic class AmqpChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser;\n// Parser for the AMQP 'inbound-channel-adapter' element.\npublic class AmqpInboundChannelAdapterParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n// Parser for the AMQP 'inbound-gateway' element.\npublic class AmqpInboundGatewayParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n// Namespace handler for the AMQP schema.\npublic class AmqpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n// Parser for the AMQP 'outbound-channel-adapter' element.\npublic class AmqpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\n// Parser for the AMQP 'outbound-channel-adapter' element.\npublic class AmqpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 2895, "repo": "spring-integration-amqp-6.1.2", "code": "package dsl\n\n// Base class for container specs for containers that extend AbstractMessageListenerContainer.\npublic abstract class AbstractMessageListenerContainerSpec<S extends AbstractMessageListenerContainerSpec<S,C>,C extends org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer> extends MessageListenerContainerSpec<S,C>;\n// Factory class for AMQP components.\npublic final class Amqp extends Object;\n// \npublic class AmqpAsyncOutboundGatewaySpec extends AmqpBaseOutboundEndpointSpec<AmqpAsyncOutboundGatewaySpec,AsyncAmqpOutboundGateway>;\n// The base MessageProducerSpec implementation for a AmqpInboundChannelAdapter.\npublic class AmqpBaseInboundChannelAdapterSpec<S extends AmqpBaseInboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageProducerSpec<S,AmqpInboundChannelAdapter>;\n// A base MessagingGatewaySpec implementation for AmqpInboundGateway endpoint options.\npublic class AmqpBaseInboundGatewaySpec<S extends AmqpBaseInboundGatewaySpec<S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,AmqpInboundGateway>;\n// The base MessageHandlerSpec for AbstractAmqpOutboundEndpoints.\npublic abstract class AmqpBaseOutboundEndpointSpec<S extends AmqpBaseOutboundEndpointSpec<S,E>,E extends AbstractAmqpOutboundEndpoint> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E>;\n// Spec for an inbound channel adapter with a DirectMessageListenerContainer.\npublic class AmqpInboundChannelAdapterDMLCSpec extends AmqpInboundChannelAdapterSpec<AmqpInboundChannelAdapterDMLCSpec,org.springframework.amqp.rabbit.listener.DirectMessageListenerContainer>;\n// Spec for an inbound channel adapter with a SimpleMessageListenerContainer.\npublic class AmqpInboundChannelAdapterSMLCSpec extends AmqpInboundChannelAdapterSpec<AmqpInboundChannelAdapterSMLCSpec,org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer>;\n", "des": "Provides AMQP Component support for the Java DSL."}
{"index": 2896, "repo": "spring-integration-amqp-6.1.2", "code": "package inbound\n\n// Adapter that receives Messages from an AMQP Queue, converts them into Spring Integration Messages, and sends the results to a Message Channel.\npublic class AmqpInboundChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.integration.context.OrderlyShutdownCapable;\n// Defines the payload type when the listener container is configured with consumerBatchEnabled.\npublic static enum AmqpInboundChannelAdapter.BatchMode extends Enum<AmqpInboundChannelAdapter.BatchMode>;\n// Adapter that receives Messages from an AMQP Queue, converts them into Spring Integration Messages, and sends the results to a Message Channel.\npublic class AmqpInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport;\n// A pollable MessageSource for RabbitMQ.\npublic class AmqpMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>;\n// \npublic static class AmqpMessageSource.AmqpAckCallback extends Object implements org.springframework.integration.acks.AcknowledgmentCallback;\n// \npublic static class AmqpMessageSource.AmqpAckCallbackFactory extends Object implements org.springframework.integration.acks.AcknowledgmentCallbackFactory<AmqpMessageSource.AmqpAckInfo>;\n// Information for building an AmqpAckCallback.\npublic static class AmqpMessageSource.AmqpAckInfo extends Object;\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2897, "repo": "spring-integration-amqp-6.1.2", "code": "package outbound\n\n// A base AbstractReplyProducingMessageHandler extension for AMQP message handlers.\npublic abstract class AbstractAmqpOutboundEndpoint extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle;\n// \nprotected static final class AbstractAmqpOutboundEndpoint.CorrelationDataWrapper extends org.springframework.amqp.rabbit.connection.CorrelationData;\n// Adapter that converts and sends Messages to an AMQP Exchange.\npublic class AmqpOutboundEndpoint extends AbstractAmqpOutboundEndpoint implements org.springframework.amqp.rabbit.core.RabbitTemplate.ConfirmCallback, org.springframework.amqp.rabbit.core.RabbitTemplate.ReturnsCallback;\n// An outbound gateway where the sending thread is released immediately and the reply is sent on the async template's listener container thread.\npublic class AsyncAmqpOutboundGateway extends AbstractAmqpOutboundEndpoint;\n// MessageHandler based on RabbitStreamOperations.\npublic class RabbitStreamMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler;\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 2898, "repo": "spring-integration-amqp-6.1.2", "code": "package support\n\n// A convenience interface that extends RequestReplyHeaderMapper, parameterized with MessageProperties.\npublic interface AmqpHeaderMapper extends org.springframework.integration.mapping.RequestReplyHeaderMapper<org.springframework.amqp.core.MessageProperties>;\n// An ErrorMessageStrategy extension that adds the raw AMQP message as a header to the ErrorMessage.\npublic class AmqpMessageHeaderErrorMessageStrategy extends Object implements org.springframework.integration.support.ErrorMessageStrategy;\n// An advice that causes all downstream RabbitOperations operations to be executed on the same channel, as long as there are no thread handoffs, since the channel is bound to the thread.\npublic class BoundRabbitChannelAdvice extends Object implements org.springframework.integration.handler.advice.HandleMessageAdvice;\n// Default implementation of AmqpHeaderMapper.\npublic class DefaultAmqpHeaderMapper extends org.springframework.integration.mapping.AbstractHeaderMapper<org.springframework.amqp.core.MessageProperties> implements AmqpHeaderMapper;\n// Utility methods for messaging endpoints.\npublic final class EndpointUtils extends Object;\n// A ListenerExecutionFailedException enhanced with the channel and delivery tag.\npublic class ManualAckListenerExecutionFailedException extends org.springframework.amqp.rabbit.support.ListenerExecutionFailedException;\n// Utility methods used during message mapping.\npublic final class MappingUtils extends Object;\n// An exception representing a negatively acknowledged message from a publisher confirm.\npublic class NackedAmqpMessageException extends org.springframework.messaging.MessagingException;\n// A MessagingException for a returned message.\npublic class ReturnedAmqpMessageException extends org.springframework.messaging.MessagingException;\n", "des": "Provides AMQP support classes."}
{"index": 2899, "repo": "spring-aspects-6.0.11", "code": "package aspectj\n\n// Marker interface for domain objects that need DI through aspects.\npublic interface ConfigurableObject;\n", "des": "AspectJ-based dependency injection support."}
{"index": 2900, "repo": "spring-aspects-6.0.11", "code": "package aspectj\n\n// @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven cache management.\n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJCachingConfiguration extends org.springframework.cache.annotation.AbstractCachingConfiguration;\n// @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven cache management for standard JSR-107 annotations.\n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJJCacheConfiguration extends org.springframework.cache.jcache.config.AbstractJCacheConfiguration;\n", "des": "AspectJ-based caching support."}
{"index": 2901, "repo": "spring-aspects-6.0.11", "code": "package aspectj\n\n// Signals the current application context to apply dependency injection to non-managed classes that are instantiated outside the Spring bean factory (typically classes annotated with the @Configurable annotation).\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(SpringConfiguredConfiguration.class) public @interface EnableSpringConfigured;\n// @Configuration class that registers an AnnotationBeanConfigurerAspect capable of performing dependency injection services for non-Spring managed objects annotated with @Configurable.\n@Configuration public class SpringConfiguredConfiguration extends Object;\n", "des": "AspectJ-based dependency injection support driven by the @Configurable annotation."}
{"index": 2902, "repo": "spring-aspects-6.0.11", "code": "package aspectj\n\n// @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based asynchronous method execution.\n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJAsyncConfiguration extends org.springframework.scheduling.annotation.AbstractAsyncConfiguration;\n", "des": "AspectJ-based scheduling support."}
{"index": 2903, "repo": "spring-aspects-6.0.11", "code": "package aspectj\n\n// @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven transaction management for the JTA 1.2 Transactional annotation in addition to Spring's own Transactional annotation.\n@Configuration @Role(2) public class AspectJJtaTransactionManagementConfiguration extends AspectJTransactionManagementConfiguration;\n// @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven transaction management for Spring's own Transactional annotation.\n@Configuration @Role(2) public class AspectJTransactionManagementConfiguration extends org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration;\n", "des": "AspectJ-based transaction management support."}
{"index": 2904, "repo": "spring-boot-maven-plugin-3.1.1", "code": "package maven\n\n// Abstract base class for AOT processing MOJOs.\npublic abstract class AbstractAotMojo extends AbstractDependencyFilterMojo;\n// DiagnosticListener used to collect errors.\nprotected static class AbstractAotMojo.Errors extends Object implements DiagnosticListener<JavaFileObject>;\n// A base mojo filtering the dependencies of the project.\npublic abstract class AbstractDependencyFilterMojo extends org.apache.maven.plugin.AbstractMojo;\n// ArtifactFilter to exclude test scope dependencies.\nprotected static class AbstractDependencyFilterMojo.ExcludeTestScopeArtifactFilter extends org.apache.maven.shared.artifact.filter.collection.AbstractArtifactFeatureFilter;\n// ArtifactFilter that only include runtime scopes.\nprotected static class AbstractDependencyFilterMojo.RuntimeArtifactFilter extends Object implements org.apache.maven.artifact.resolver.filter.ArtifactFilter;\n// Abstract base class for classes that work with an Packager.\npublic abstract class AbstractPackagerMojo extends AbstractDependencyFilterMojo;\n// Archive layout types.\npublic static enum AbstractPackagerMojo.LayoutType extends Enum<AbstractPackagerMojo.LayoutType>;\n// Base class to run a Spring Boot application.\npublic abstract class AbstractRunMojo extends AbstractDependencyFilterMojo;\n// Libraries backed by Maven Artifacts.\npublic class ArtifactsLibraries extends Object implements org.springframework.boot.loader.tools.Libraries;\n// Package an application into an OCI image using a buildpack, forking the lifecycle to make sure that package ran.\n@Mojo(name=\"build-image\", defaultPhase=PACKAGE, requiresProject=true, threadSafe=true, requiresDependencyResolution=COMPILE_PLUS_RUNTIME, requiresDependencyCollection=COMPILE_PLUS_RUNTIME) @Execute(phase=PACKAGE) public class BuildImageForkMojo extends BuildImageMojo;\n// Package an application into an OCI image using a buildpack.\npublic abstract class BuildImageMojo extends AbstractPackagerMojo;\n", "des": "Maven plugin for Spring Boot."}
{"index": 2905, "repo": "spring-xml-4.0.5", "code": "package xml\n\n// Provides classes that help with DOM: the Document Object Model.\npackage xml.dom\n// Provides classes that help with XML Namespace processing.\npackage xml.namespace\n// Provides classes that help with SAX: the Simple API for XML.\npackage xml.sax\n// Provides classes that help with XML transformations.\npackage xml.transform\n// Provides classes for XML validation in JAXP 1.0 and JAXP 1.3.\npackage xml.validation\n// Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen.\npackage xml.xpath\n// Provides an abstraction over XSD XML schemas.\npackage xml.xsd\n// \npublic class DocumentBuilderFactoryUtils extends Object;\n// Helper class used to find the current version of JAXP.\npublic abstract class JaxpVersion extends Object;\n// Root of the hierarchy of XML exception.\npublic abstract class XmlException extends org.springframework.core.NestedRuntimeException;\n// \npublic class XMLInputFactoryUtils extends Object;\n", "des": "Provides classes for XML handling: version detection and a base XML exception class."}
{"index": 2906, "repo": "spring-xml-4.0.5", "code": "package dom\n\n// SAX ContentHandler that transforms callback calls to DOM Nodes.\npublic class DomContentHandler extends Object implements ContentHandler;\n", "des": "Provides classes that help with DOM: the Document Object Model."}
{"index": 2907, "repo": "spring-xml-4.0.5", "code": "package namespace\n\n// PropertyEditor for javax.xml.namespace.QName, to populate a property of type QName from a String value.\npublic class QNameEditor extends PropertyEditorSupport;\n// Helper class for using QName.\npublic abstract class QNameUtils extends Object;\n// Simple javax.xml.namespace.NamespaceContext implementation.\npublic class SimpleNamespaceContext extends Object implements NamespaceContext;\n", "des": "Provides classes that help with XML Namespace processing."}
{"index": 2908, "repo": "spring-xml-4.0.5", "code": "package sax\n\n// Abstract base class for SAX XMLReader implementations.\npublic abstract class AbstractXmlReader extends Object implements XMLReader;\n// Convenient utility methods for dealing with SAX.\npublic abstract class SaxUtils extends Object;\n", "des": "Provides classes that help with SAX: the Simple API for XML."}
{"index": 2909, "repo": "spring-xml-4.0.5", "code": "package transform\n\n// Convenient subclass of SAXSource that reads from a Spring Resource.\npublic class ResourceSource extends SAXSource;\n// Convenient subclass of StreamResult that writes to a StringWriter.\npublic class StringResult extends StreamResult;\n// Convenient subclass of StreamSource that reads from a StringReader.\npublic class StringSource extends StreamSource;\n// \npublic class TransformerFactoryUtils extends Object;\n// Helper class for Transformer usage.\npublic class TransformerHelper extends Object;\n// Convenient base class for objects that use a Transformer.\npublic abstract class TransformerObjectSupport extends Object;\n// Convenient utility methods for dealing with TrAX.\npublic abstract class TraxUtils extends Object;\n// Callback interface invoked on each sort of Result.\npublic static interface TraxUtils.ResultCallback;\n// Callback interface invoked on each sort of Source.\npublic static interface TraxUtils.SourceCallback;\n", "des": "Provides classes that help with XML transformations."}
{"index": 2910, "repo": "spring-xml-4.0.5", "code": "package validation\n\n// \npublic class SchemaFactoryUtils extends Object;\n// Convenient utility methods for loading of Schema objects, performing standard handling of input streams.\npublic abstract class SchemaLoaderUtils extends Object;\n// Subinterface of ErrorHandler that allows the registered errors to be retrieved.\npublic interface ValidationErrorHandler extends ErrorHandler;\n// \npublic class XMLReaderFactoryUtils extends Object;\n// Exception thrown when a validation error occurs\npublic class XmlValidationException extends XmlException;\n// Simple processor that validates a given Source.\npublic interface XmlValidator;\n// Factory for XmlValidator objects, being aware of JAXP 1.3 Validators, and JAXP 1.0 parsing capabilities.\npublic abstract class XmlValidatorFactory extends Object;\n", "des": "Provides classes for XML validation in JAXP 1.0 and JAXP 1.3."}
{"index": 2911, "repo": "spring-xml-4.0.5", "code": "package xpath\n\n// Abstract base class for implementations of XPathOperations.\npublic abstract class AbstractXPathTemplate extends TransformerObjectSupport implements XPathOperations;\n// Implementation of XPathOperations that uses Jaxen.\npublic class JaxenXPathTemplate extends AbstractXPathTemplate;\n// Implementation of XPathOperations that uses JAXP 1.3.\npublic class Jaxp13XPathTemplate extends AbstractXPathTemplate;\n// An interface used by XPathOperations implementations for processing Node objects on a per-node basis.\npublic interface NodeCallbackHandler;\n// An interface used by XPathOperations implementations for mapping Node objects on a per-node basis.\npublic interface NodeMapper<T>;\n// Exception thrown when an error occurs during XPath processing.\npublic class XPathException extends XmlException;\n// Defines the contract for a precompiled XPath expression.\npublic interface XPathExpression;\n// Factory for compiled XPathExpressions, being aware of JAXP 1.3+ XPath functionality, and Jaxen.\npublic abstract class XPathExpressionFactory extends Object;\n// Spring FactoryBean for XPathExpression object.\npublic class XPathExpressionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<XPathExpression>, org.springframework.beans.factory.InitializingBean;\n// Interface that specifies a basic set of XPath operations, implemented by various XPathTemplates.\npublic interface XPathOperations;\n// Exception throws when a XPath expression cannot be parsed.\npublic class XPathParseException extends XPathException;\n", "des": "Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen."}
{"index": 2912, "repo": "spring-xml-4.0.5", "code": "package xsd\n\n// Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema.\npackage xsd.commons\n// The default XsdSchema implementation.\npublic class SimpleXsdSchema extends Object implements XsdSchema, org.springframework.beans.factory.InitializingBean;\n// Represents an abstraction for XSD schemas.\npublic interface XsdSchema;\n// Represents an abstraction for a collection of XSD schemas.\npublic interface XsdSchemaCollection;\n// Base class for all WSDL definition exceptions.\npublic class XsdSchemaException extends XmlException;\n", "des": "Provides an abstraction over XSD XML schemas."}
{"index": 2913, "repo": "spring-xml-4.0.5", "code": "package commons\n\n// Implementation of the XsdSchema interface that uses Apache WS-Commons XML Schema.\npublic class CommonsXsdSchema extends Object implements XsdSchema;\n// Implementation of the XsdSchemaCollection that uses Apache WS-Commons XML Schema.\npublic class CommonsXsdSchemaCollection extends Object implements XsdSchemaCollection, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware;\n// Commons XmlSchema version of the XsdSchemaException.\npublic class CommonsXsdSchemaException extends XsdSchemaException;\n", "des": "Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema."}
{"index": 2914, "repo": "groovy-4.0.13", "code": "package inspect\n\n// The Inspector provides a unified access to an object's information that can be determined by introspection.\npublic class Inspector extends Object;\n// \npublic static class Inspector.MemberComparator extends Object implements Comparator<Object>, Serializable;\n// \npublic static class Inspector.MemberComparatorWithValue extends Object implements Comparator<Object>, Serializable;\n", "des": "Classes for inspecting object properties through introspection."}
{"index": 2915, "repo": "groovy-4.0.13", "code": "package io\n\n// A buffered writer only for OutputStreamWriter that is aware of the encoding of the OutputStreamWriter.\npublic class EncodingAwareBufferedWriter extends BufferedWriter;\n// Represents particular files of interest.\npublic enum FileType extends Enum<FileType>;\n// Represents special return values for the 'preDir', 'postDir' and 'visit'/supplied Closures used with ResourceGroovyMethods.traverse(java.io.File, java.util.Map, groovy.lang.Closure) and related methods to control subsequent traversal behavior.\npublic enum FileVisitResult extends Enum<FileVisitResult>;\n// A PrintStream that outputs objects in Groovy style.\npublic class GroovyPrintStream extends PrintStream;\n// A PrintWriter that outputs objects in Groovy style.\npublic class GroovyPrintWriter extends PrintWriter;\n// The LineColumnReader is an extension to BufferedReader that keeps track of the line and column information of where the cursor is.\npublic class LineColumnReader extends BufferedReader;\n// A buffered writer that gobbles any \\r characters and replaces every \\n with a platform specific newline.\npublic class PlatformLineWriter extends Writer;\n", "des": "Classes for Groovier Input/Output."}
{"index": 2916, "repo": "groovy-4.0.13", "code": "package lang\n\n// An interface for MetaClass instances that \"adapt\" other MetaClass instances such as a proxy or delegating MetaClass.\npublic interface AdaptingMetaClass extends MetaClass;\n// Interceptor that registers the timestamp of each method call before and after invocation.\npublic class BenchmarkInterceptor extends Object implements Interceptor;\n// Represents the variable bindings of a script which can be altered from outside the script object or created outside of a script and passed into it.\npublic class Binding extends GroovyObjectSupport;\n// \npublic interface Buildable;\n// Transforms an instance-style Groovy class or interface to become a static-style conventional Groovy category.\n@Documented @Retention(SOURCE) @Target(TYPE) public @interface Category;\n// Represents any closure object in Groovy.\npublic abstract class Closure<V> extends GroovyObjectSupport implements Cloneable, Runnable, GroovyCallable<V>, Serializable;\n// An exception thrown by a closure invocation\npublic class ClosureException extends RuntimeException;\n// An interface for MetaMethods that invoke closures to implements.\npublic interface ClosureInvokingMethod;\n// Annotation to automatically delegate part of the functionality of an owner class to the annotated delegation target.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD}) public @interface Delegate;\n// This annotation can be used by API or DSL writers to document parameters which accept a closure.\n@Documented @Retention(RUNTIME) @Target({PARAMETER,METHOD}) public @interface DelegatesTo;\n// Parameter annotation used to specify the delegate for a @DelegatesTo annotated parameter of the same method.\n@Retention(RUNTIME) @Target(PARAMETER) public static @interface DelegatesTo.Target;\n// \npublic class DelegatingMetaClass extends Object implements MetaClass, MutableMetaClass, GroovyObject;\n// Use this exception to mark a method implementation as being deprecated.\npublic class DeprecationException extends RuntimeException;\n// Constructing Ranges like 0..<0\npublic class EmptyRange<T extends Comparable> extends AbstractList<T> implements Range<T>;\n// ExpandoMetaClass is a MetaClass that behaves like an Expando, allowing the addition or replacement of methods, properties and constructors on the fly.\npublic class ExpandoMetaClass extends MetaClassImpl implements GroovyObject;\n", "des": "Core Groovy language classes for implementing data structures, closures, metadata and so forth."}
{"index": 2917, "repo": "groovy-4.0.13", "code": "package security\n\n// Permission required to explicitly specify a codebase for a groovy script whose codebase cannot be determined.\npublic final class GroovyCodeSourcePermission extends BasicPermission;\n", "des": "Security-related classes"}
{"index": 2918, "repo": "groovy-4.0.13", "code": "package time\n\n// Base class for date and time durations.\npublic abstract class BaseDuration extends Object implements Comparable<BaseDuration>;\n// \npublic abstract static class BaseDuration.From extends Object;\n// DatumDependentDuration represents durations whose length in milliseconds cannot be determined without knowing the datum point.\npublic class DatumDependentDuration extends BaseDuration;\n// Duration represents time periods which have values independent of the context.\npublic class Duration extends BaseDuration;\n// Apply a number of methods to allow convenient Date/Time manipulation,such as:\npublic class TimeCategory extends Object;\n// TimeDatumDuration represents a time period which results from an arithmetic operation between a TimeDuration object and a DatumDuration object\npublic class TimeDatumDependentDuration extends DatumDependentDuration;\n// TimeDuration represents time periods expressed in units of hours, minutes, seconds and milliseconds.\npublic class TimeDuration extends Duration;\n", "des": "Classes for easily manipulating Dates and times."}
{"index": 2919, "repo": "groovy-4.0.13", "code": "package util\n\n// \npublic abstract class AbstractFactory extends Object implements Factory;\n// An iterator that allows examining the next element without consuming it.\npublic interface BufferedIterator<T> extends Iterator<T>;\n// Base class for creating arbitrary nested trees of objects or events.\npublic abstract class BuilderSupport extends GroovyObjectSupport;\n// Utility class to guess the encoding of a given text file.\npublic class CharsetToolkit extends Object;\n// A Comparator which uses a closure to compare 2 values being equal\npublic class ClosureComparator<T> extends Object implements Comparator<T>, Serializable;\n// A ConfigObject at a simple level is a Map that creates configuration entries (other ConfigObjects) when referencing them.\npublic class ConfigObject extends GroovyObjectSupport implements Writable, Map, Cloneable;\n// Script that performs method invocations and property access like Closure does.\npublic abstract class DelegatingScript extends Script;\n// Allow easy integration from Groovy into Java through convenience methods.\npublic class Eval extends Object;\n// Represents a dynamically expandable bean.\npublic class Expando extends GroovyObjectSupport;\n// \npublic interface Factory;\n// Mix of BuilderSupport and SwingBuilder's factory support.\npublic abstract class FactoryBuilderSupport extends Binding;\n// A Collections utility class\npublic class GroovyCollections extends Object;\n// Specific script engine able to reload modified scripts as well as dealing properly with dependent scripts.\npublic class GroovyScriptEngine extends Object implements ResourceConnector;\n// \npublic interface IFileNameFinder;\n// A helper class for printing indented text.\npublic class IndentPrinter extends Object;\n// A Map.Entry implementation.\npublic class MapEntry extends Object implements Map.Entry;\n// Represents an arbitrary tree node which can be used for structured metadata or any arbitrary XML-like tree.\npublic class Node extends Object implements Serializable, Cloneable;\n// A helper class for creating nested trees of Node objects for handling arbitrary data\npublic class NodeBuilder extends BuilderSupport;\n// A List implementation which is returned by queries on a Node which provides some XPath like helper methods for GPath.\npublic class NodeList extends ArrayList;\n// A helper class for creating nested trees of data\npublic class NodePrinter extends Object;\n", "des": "Various Groovy utilities for working with nodes, builders, logging, and other things."}
{"index": 2920, "repo": "groovy-4.0.13", "code": "package concurrentlinkedhashmap\n\n// A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by.\n@ThreadSafe public final class ConcurrentLinkedHashMap<K,V> extends AbstractMap<K,V> implements ConcurrentMap<K,V>, Serializable;\n// A builder that creates ConcurrentLinkedHashMap instances.\npublic static final class ConcurrentLinkedHashMap.Builder<K,V> extends Object;\n// A class that can determine the weight of an entry.\n@ThreadSafe public interface EntryWeigher<K,V>;\n// A listener registered for notification when an entry is evicted.\n@ThreadSafe public interface EvictionListener<K,V>;\n// A class that can determine the weight of a value.\n@ThreadSafe public interface Weigher<V>;\n// A common set of Weigher and EntryWeigher implementations.\npublic final class Weighers extends Object;\n", "des": "This package contains an implementation of a bounded ConcurrentMap data structure."}
{"index": 2921, "repo": "groovy-4.0.13", "code": "package groovy\n\n// Groovy AST nodes for the syntax of the language\npackage groovy.ast\n// Generates Java classes for Groovy classes using ASM.\npackage groovy.classgen\n// Compiler control classes.\npackage groovy.control\n// Internal classes for assisting with reflection.\npackage groovy.reflection\n// Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator.\npackage groovy.runtime\n// Lexer, parser and trees.\npackage groovy.syntax\n// Compiler entry points and miscellaneous development tools.\npackage groovy.tools\n// JVM version specific classes.\npackage groovy.vmplugin\n// This class represents an error that is thrown when a bug is recognized inside the runtime.\npublic class GroovyBugError extends AssertionError;\n// \npublic class GroovyException extends Exception implements GroovyExceptionInterface;\n// An interface for use by all Groovy compiler exceptions.\npublic interface GroovyExceptionInterface;\n", "des": "Groovy Language for the JVM"}
{"index": 2922, "repo": "groovy-4.0.13", "code": "package ast\n\n// AST nodes for Groovy expressions\npackage ast.expr\n// AST nodes for Groovy statements\npackage ast.stmt\n// Base class for any AST node which is capable of being annotated\npublic class AnnotatedNode extends ASTNode implements GroovydocHolder<AnnotatedNode>;\n// Represents an annotation which can be attached to interfaces, classes, methods, fields, parameters, and other places.\npublic class AnnotationNode extends ASTNode;\n// Base class for any AST node.\npublic class ASTNode extends Object implements NodeMetaDataHandler;\n// Helper class for converting AST into text.\npublic class AstToTextHelper extends Object;\n// Transforms expressions in a whole class.\npublic abstract class ClassCodeExpressionTransformer extends ClassCodeVisitorSupport implements ExpressionTransformer;\n// \npublic abstract class ClassCodeVisitorSupport extends CodeVisitorSupport implements ErrorCollecting, GroovyClassVisitor;\n// Helper for ClassNode and classes handling them.\npublic class ClassHelper extends Object;\n// Represents a class in the AST.\npublic class ClassNode extends AnnotatedNode;\n// Abstract base class for any GroovyCodeVisitor which by default just walks the code and expression tree\npublic abstract class CodeVisitorSupport extends Object implements GroovyCodeVisitor;\n// Represents the entire contents of a compilation step which consists of one or more ModuleNode instances.\npublic class CompileUnit extends Object implements NodeMetaDataHandler;\n// Represents a constructor declaration\npublic class ConstructorNode extends MethodNode;\n// \npublic class DynamicVariable extends Object implements Variable;\n// Represents the anonymous inner class for an enum constant.\npublic class EnumConstantClassNode extends InnerClassNode;\n// Represents a field (member variable)\npublic class FieldNode extends AnnotatedNode implements Variable;\n// This class is used to describe generic type signatures for ClassNodes.\npublic class GenericsType extends ASTNode;\n// Represents GenericsType name.\npublic static class GenericsType.GenericsTypeName extends Object;\n// A special visitor for working with the structure of a class.\npublic interface GroovyClassVisitor;\n// An implementation of the visitor pattern for working with ASTNodes.\npublic interface GroovyCodeVisitor;\n// \npublic class GroovyCodeVisitorAdapter extends Object implements GroovyCodeVisitor;\n// Represents an import statement.\npublic class ImportNode extends AnnotatedNode;\n", "des": "Groovy AST nodes for the syntax of the language"}
{"index": 2923, "repo": "groovy-4.0.13", "code": "package expr\n\n// Represents an annotation \"constant\" that may appear in annotation attributes (mainly used as a marker).\npublic class AnnotationConstantExpression extends ConstantExpression;\n// Represents one or more arguments being passed into a method\npublic class ArgumentListExpression extends TupleExpression;\n// Represents an array object construction.\npublic class ArrayExpression extends Expression;\n// Represents an attribute access (accessing the field of a class) such as the expression \"foo.@bar\".\npublic class AttributeExpression extends PropertyExpression;\n// Represents two expressions and an operation\npublic class BinaryExpression extends Expression;\n// \npublic class BitwiseNegationExpression extends Expression;\n// Represents a boolean expression\npublic class BooleanExpression extends Expression;\n// Represents a typecast expression.\npublic class CastExpression extends Expression;\n// Represents access to a Java/Groovy class in an expression, such as when invoking a static method or accessing a static type\npublic class ClassExpression extends Expression;\n// Represents a closure expression such as\npublic class ClosureExpression extends Expression;\n// This class represents a list of expressions used to create closures.\npublic class ClosureListExpression extends ListExpression;\n// Represents a constant expression such as null, true, false.\npublic class ConstantExpression extends Expression;\n// A constructor call.\npublic class ConstructorCallExpression extends Expression implements MethodCall;\n// Represents one or more local variables.\npublic class DeclarationExpression extends BinaryExpression;\n// Represents a short ternary expression x ?: y, which is equal to\npublic class ElvisOperatorExpression extends TernaryExpression;\n// Placeholder for an empty expression.\npublic class EmptyExpression extends Expression;\n// Represents a base class for expressions which evaluate as an object\npublic abstract class Expression extends AnnotatedNode;\n// Provides a way to transform expressions\npublic interface ExpressionTransformer;\n// Represents a field access such as the expression \"this.foo\".\npublic class FieldExpression extends Expression;\n// Represents a String expression which contains embedded values inside it such as \"hello there ${user} how are you\" which is expanded lazily\npublic class GStringExpression extends Expression;\n// Represents a lambda expression such as one of these:\npublic class LambdaExpression extends ClosureExpression;\n", "des": "AST nodes for Groovy expressions"}
{"index": 2924, "repo": "groovy-4.0.13", "code": "package stmt\n\n// Represents an assert statement.\npublic class AssertStatement extends Statement;\n// A list of statements and a scope.\npublic class BlockStatement extends Statement;\n// Represents a break statement in a switch or loop statement\npublic class BreakStatement extends Statement;\n// Represents a case statement in a switch statement\npublic class CaseStatement extends Statement;\n// Represents a catch (Exception var) { } statement\npublic class CatchStatement extends Statement;\n// Represents a continue statement in a loop statement\npublic class ContinueStatement extends Statement;\n// Represents a do { ...\npublic class DoWhileStatement extends Statement implements LoopingStatement;\n// \npublic class EmptyStatement extends Statement;\n// A simple statement such as a method call where the return value is ignored\npublic class ExpressionStatement extends Statement;\n// Represents a standard for loop in Groovy\npublic class ForStatement extends Statement implements LoopingStatement;\n// Represents an if (condition) { ...\npublic class IfStatement extends Statement;\n// This is an AST Node that provides some sort of looping mechanism.\npublic interface LoopingStatement;\n// A return statement\npublic class ReturnStatement extends Statement;\n// Base class for any statement.\npublic class Statement extends ASTNode;\n// Represents a switch (object) { case value: ...\npublic class SwitchStatement extends Statement;\n// Represents a synchronized statement\npublic class SynchronizedStatement extends Statement;\n// Represents a throw statement\npublic class ThrowStatement extends Statement;\n// Represents a try { ...\npublic class TryCatchStatement extends Statement;\n// Represents a while (condition) { ...\npublic class WhileStatement extends Statement implements LoopingStatement;\n", "des": "AST nodes for Groovy statements"}
{"index": 2925, "repo": "groovy-4.0.13", "code": "package classgen\n\n// Helper classes for ASMClassGenerator.\npackage classgen.asm\n// An Annotation visitor responsible for: reading annotation metadata (@Retention, @Target, attribute types) verify that an AnnotationNode conforms to annotation meta enhancing an AnnotationNode AST to reflect real annotation meta\npublic class AnnotationVisitor extends Object;\n// Generates Java class versions of Groovy classes using ASM.\npublic class AsmClassGenerator extends ClassGenerator;\n// Represents some custom bytecode generation by the compiler.\npublic abstract class BytecodeExpression extends Expression;\n// Helper class used by the class generator.\npublic abstract class BytecodeInstruction extends Object;\n// This class represents a sequence of BytecodeInstructions or ASTNodes.\npublic class BytecodeSequence extends Statement;\n// Checks that a class satisfies various conditions including: Incorrect class or method access modifiers No abstract methods appear in a non-abstract class Existence and correct visibility for inherited members Invalid attempts to override final members\npublic class ClassCompletionVerifier extends ClassCodeVisitorSupport;\n// Abstract base class for generator of Java class versions of Groovy AST classes\npublic abstract class ClassGenerator extends ClassCodeVisitorSupport;\n// An exception thrown by the class generator\npublic class ClassGeneratorException extends RuntimeException;\n// To generate a class that has all the fields and methods, except that fields are not initialized and methods are empty.\npublic class DummyClassGenerator extends ClassGenerator;\n// Enums have a parent constructor with two arguments from java.lang.Enum.\npublic class EnumCompletionVisitor extends ClassCodeVisitorSupport;\n// \npublic class EnumVisitor extends ClassCodeVisitorSupport;\n// A specialized Groovy AST visitor meant to perform additional verifications upon the current AST.\npublic class ExtendedVerifier extends ClassCodeVisitorSupport;\n// \npublic class FinalVariableAnalyzer extends ClassCodeVisitorSupport;\n// \npublic static interface FinalVariableAnalyzer.VariableNotFinalCallback;\n// A context shared across generations of a class and its inner classes.\npublic class GeneratorContext extends Object;\n// \npublic class InnerClassCompletionVisitor extends InnerClassVisitorHelper;\n// \npublic class InnerClassVisitor extends InnerClassVisitorHelper;\n// \npublic abstract class InnerClassVisitorHelper extends ClassCodeVisitorSupport;\n// Utility class to add return statements.\npublic class ReturnAdder extends Object;\n// \n@FunctionalInterface public static interface ReturnAdder.ReturnStatementListener;\n", "des": "Generates Java classes for Groovy classes using ASM."}
{"index": 2926, "repo": "groovy-4.0.13", "code": "package asm\n\n// \npublic class AssertionWriter extends Object;\n// Binary write operations specialised for Booleans\npublic class BinaryBooleanExpressionHelper extends BinaryIntExpressionHelper;\n// \npublic class BinaryDoubleExpressionHelper extends BinaryLongExpressionHelper;\n// \npublic class BinaryExpressionHelper extends Object;\n// This class is for internal use only! This class will dispatch to the right type adapters according to the kind of binary expression that is provided.\npublic class BinaryExpressionMultiTypeDispatcher extends BinaryExpressionHelper;\n// Base class for writing primitive typed operations\npublic abstract class BinaryExpressionWriter extends Object;\n// \npublic class BinaryFloatExpressionHelper extends BinaryExpressionWriter;\n// \npublic class BinaryIntExpressionHelper extends BinaryExpressionWriter;\n// \npublic class BinaryLongExpressionHelper extends BinaryExpressionWriter;\n// \npublic class BinaryObjectExpressionHelper extends BinaryExpressionWriter;\n// A utility class which can be used in test cases to dump generated bytecode.\npublic class BytecodeDumper extends Object implements BytecodeProcessor;\n// A helper class for bytecode generation with AsmClassGenerator.\npublic class BytecodeHelper extends Object;\n// Represents compile time variable metadata while compiling a method.\npublic class BytecodeVariable extends Object;\n// This class represents non-public API used by AsmClassGenerator.\npublic class CallSiteWriter extends Object;\n// \npublic class ClosureWriter extends Object;\n// \nprotected static class ClosureWriter.CorrectAccessedVariableVisitor extends CodeVisitorSupport;\n// \nprotected static interface ClosureWriter.UseExistingReference;\n// Manages different aspects of the code of a code block like handling labels, defining variables, and scopes.\npublic class CompileStack extends Object;\n// \npublic static class CompileStack.BlockRecorder extends Object;\n// \nprotected static class CompileStack.LabelRange extends Object;\n// This class will delegate all calls to a WriterController given in the constructor.\npublic class DelegatingController extends WriterController;\n// Helper class that takes an Expression and if visited will load it normally, storing the result in a helper variable, which then can be requested after the visit is completed.\npublic class ExpressionAsVariableSlot extends BytecodeExpression;\n// \npublic class InvocationWriter extends Object;\n// \npublic class LambdaWriter extends ClosureWriter;\n", "des": "Helper classes for ASMClassGenerator."}
{"index": 2927, "repo": "groovy-4.0.13", "code": "package control\n\n// Internal classes for Groovier Input/Output.\npackage control.io\n// Error message classes.\npackage control.messages\n// Resolves constants in annotation definitions.\npublic class AnnotationConstantsVisitor extends ClassCodeVisitorSupport;\n// Stores state information about global AST transformations applied to a compilation unit.\npublic class ASTTransformationsContext extends Object;\n// \npublic interface BytecodeProcessor;\n// This class is used as a pluggable way to resolve class names.\npublic class ClassNodeResolver extends Object;\n// Helper class to return either a SourceUnit or ClassNode.\npublic static class ClassNodeResolver.LookupResult extends Object;\n// Thrown when compilation fails from source errors.\npublic class CompilationFailedException extends GroovyRuntimeException;\n// The CompilationUnit collects all compilation data as it is generated by the compiler system.\npublic class CompilationUnit extends ProcessingUnit;\n// A callback interface you can use during the classgen phase of compilation as the compiler traverses the ClassNode tree.\n@FunctionalInterface public static interface CompilationUnit.ClassgenCallback;\n// \n@Deprecated public abstract static class CompilationUnit.GroovyClassOperation extends Object implements CompilationUnit.IGroovyClassOperation;\n// \n@FunctionalInterface public static interface CompilationUnit.IGroovyClassOperation;\n// \n@FunctionalInterface public static interface CompilationUnit.IPrimaryClassNodeOperation;\n// \n@FunctionalInterface public static interface CompilationUnit.ISourceUnitOperation;\n// \n@Deprecated public abstract static class CompilationUnit.PrimaryClassNodeOperation extends Object implements CompilationUnit.IPrimaryClassNodeOperation;\n// A callback interface you can use to get a callback after every unit of the compile process.\n@FunctionalInterface public static interface CompilationUnit.ProgressCallback;\n// \n@Deprecated public abstract static class CompilationUnit.SourceUnitOperation extends Object implements CompilationUnit.ISourceUnitOperation;\n// The phases of the GroovyCompiler.\npublic enum CompilePhase extends Enum<CompilePhase>;\n// Compilation control flags and coordination stuff.\npublic class CompilerConfiguration extends Object;\n// Thrown when configuration data is invalid.\npublic class ConfigurationException extends RuntimeException implements GroovyExceptionInterface;\n// A base class for collecting messages and errors during processing.\npublic class ErrorCollector extends Object implements Serializable;\n// Verify correct usage of generics.\npublic class GenericsVisitor extends ClassCodeVisitorSupport;\n", "des": "Compiler control classes."}
{"index": 2928, "repo": "groovy-4.0.13", "code": "package io\n\n// For ReaderSources that can choose a parent class, a base that provides common functionality.\npublic abstract class AbstractReaderSource extends Object implements ReaderSource;\n// A ReaderSource for source files.\npublic class FileReaderSource extends AbstractReaderSource;\n// A ReaderSource for source strings.\npublic class InputStreamReaderSource extends AbstractReaderSource;\n// A Writer that eats its input.\npublic class NullWriter extends Writer;\n// An interface for things that can supply (and potentially resupply) a Reader on a source stream.\npublic interface ReaderSource extends HasCleanup;\n// A ReaderSource for source strings.\npublic class StringReaderSource extends AbstractReaderSource;\n// A ReaderSource for source files hosted at a URL.\npublic class URLReaderSource extends AbstractReaderSource;\n", "des": "Internal classes for Groovier Input/Output."}
{"index": 2929, "repo": "groovy-4.0.13", "code": "package messages\n\n// A class for error messages produced by the parser system.\npublic class ExceptionMessage extends Message;\n// A base class for compilation messages.\npublic class LocatedMessage extends SimpleMessage;\n// A base class for compilation messages.\npublic abstract class Message extends Object;\n// A base class for compilation messages.\npublic class SimpleMessage extends Message;\n// A class for error messages produced by the parser system.\npublic class SyntaxErrorMessage extends Message;\n// A class for warning messages.\npublic class WarningMessage extends LocatedMessage;\n", "des": "Error message classes."}
{"index": 2930, "repo": "groovy-4.0.13", "code": "package reflection\n\n// \npublic class CacheAccessControlException extends GroovyRuntimeException;\n// \npublic class CachedClass extends Object;\n// \npublic static class CachedClass.CachedMethodComparatorByName extends Object implements Comparator<CachedMethod>;\n// \npublic static class CachedClass.CachedMethodComparatorWithString extends Object implements Comparator;\n// \npublic class CachedConstructor extends ParameterTypes;\n// \npublic class CachedField extends MetaProperty;\n// \npublic class CachedMethod extends MetaMethod implements Comparable;\n// Handle for all information we want to keep about the class\npublic class ClassInfo extends Object implements Finalizable;\n// \npublic static interface ClassInfo.ClassInfoAction;\n// \npublic class ClassLoaderForClassArtifacts extends ClassLoader;\n// \npublic abstract class GeneratedMetaMethod extends MetaMethod;\n// \npublic static class GeneratedMetaMethod.DgmMethodRecord extends Object implements Serializable;\n// \npublic static class GeneratedMetaMethod.Proxy extends GeneratedMetaMethod;\n// Abstraction for Java version dependent ClassValue implementations.\npublic interface GroovyClassValue<T>;\n// \npublic static interface GroovyClassValue.ComputeValue<T>;\n// \npublic class MixinInMetaClass extends Object;\n// \npublic class ParameterTypes extends Object;\n// \npublic class ReflectionCache extends Object;\n// This class contains utility methods to determine which class called the current class to multiple levels of depth.\npublic class ReflectionUtils extends Object;\n// Special class loader, which when running on Sun VM allows to generate accessor classes for any method\npublic class SunClassLoader extends ClassLoader;\n", "des": "Internal classes for assisting with reflection."}
{"index": 2931, "repo": "groovy-4.0.13", "code": "package runtime\n\n// Internal classes related to Groovy's metaclass implementation.\npackage runtime.metaclass\n// Classes used to execute special actions based on the type.\npackage runtime.typehandling\n// Groovy wrapper classes for primitive types.\npackage runtime.wrappers\n// \npublic abstract class AbstractComparator<T> extends Object implements Comparator<T>;\n// Utilities for handling array types\npublic class ArrayTypeUtils extends Object;\n// This is a generated class used internally during the writing of bytecode within the CallSiteWriter logic.\npublic class ArrayUtil extends Object;\n// This class contains methods special to optimizations used directly from bytecode in Groovy 1.8\npublic class BytecodeInterface8 extends Object;\n// A wrapper for Closure to support composition.\npublic final class ComposedClosure<V> extends Closure<V>;\n// This class is a general adapter to map a call to a Java interface to a given delegate.\npublic abstract class ConversionHandler extends Object implements InvocationHandler, Serializable;\n// This class is a general adapter to adapt a closure to any Java interface.\npublic class ConvertedClosure extends ConversionHandler implements Serializable;\n// This class is a general adapter to adapt a map of closures to any Java interface.\npublic class ConvertedMap extends ConversionHandler;\n// A wrapper for Closure to support currying.\npublic final class CurriedClosure<V> extends Closure<V>;\n// A default implementation of MethodKey\npublic class DefaultCachedMethodKey extends MethodKey;\n// This class defines new groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultGroovyMethods extends DefaultGroovyMethodsSupport;\n// Support methods for DefaultGroovyMethods and PluginDefaultMethods.\npublic class DefaultGroovyMethodsSupport extends Object;\n// This class defines all the new static groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultGroovyStaticMethods extends Object;\n// A default implementation of MethodKey\npublic class DefaultMethodKey extends MethodKey;\n// This class defines all the encoding/decoding groovy methods which enhance the normal JDK classes when inside the Groovy environment.\npublic class EncodingGroovyMethods extends Object;\n// Keep this constant in a separate file as it is troublesome for Antlr to parse for doc purposes.\npublic class EncodingGroovyMethodsSupport extends Object;\n", "des": "Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator."}
{"index": 2932, "repo": "groovy-4.0.13", "code": "package metaclass\n\n// A metaclass for closures generated by the Groovy compiler.\npublic final class ClosureMetaClass extends MetaClassImpl;\n// A MetaMethod that accepts a closure in the constructor which is invoked when the MetaMethod is called.\npublic class ClosureMetaMethod extends MetaMethod implements ClosureInvokingMethod;\n// This class represents a MetaMethod that is a closure that pretends to be a static method.\npublic class ClosureStaticMetaMethod extends MetaMethod implements ClosureInvokingMethod;\n// A hash table that supports mostly-concurrent reading, but exclusive writing.\npublic class ConcurrentReaderHashMap extends AbstractMap implements Cloneable, Serializable;\n// A Serializable class for barrier lock\nprotected static class ConcurrentReaderHashMap.BarrierLock extends Object implements Serializable;\n// ConcurrentReaderHashMap collision list entry.\nprotected static class ConcurrentReaderHashMap.Entry extends Object implements Map.Entry;\n// WARNING: This class is for internal use only! We use this class to store information about if a default MetaClass is used for certain primitives.\npublic class DefaultMetaClassInfo extends Object;\n// \npublic static class DefaultMetaClassInfo.ConstantMetaClassVersioning extends Object;\n// A registry of MetaClass instances which caches introspection and reflection information and allows methods to be dynamically added to existing classes at runtime\npublic class MetaClassRegistryImpl extends Object implements MetaClassRegistry;\n// \npublic class MetaMethodIndex extends Object;\n// \npublic static class MetaMethodIndex.CacheEntry extends Object;\n// \npublic static class MetaMethodIndex.Entry extends Object;\n// \npublic static interface MetaMethodIndex.EntryIterator;\n// \npublic static class MetaMethodIndex.Header extends Object;\n// Some reflection helper methods\npublic class MethodHelper extends Object;\n// Wrapper for a method for a property get or set.\npublic class MethodMetaProperty extends MetaProperty;\n// Wrapper for a method realizing the property getter.\npublic static class MethodMetaProperty.GetBeanMethodMetaProperty extends MethodMetaProperty;\n// Wrapper for a method realizing the property get.\npublic static class MethodMetaProperty.GetMethodMetaProperty extends MethodMetaProperty;\n// This exception is thrown if the runtime is unable to select a method.\npublic class MethodSelectionException extends GroovyRuntimeException;\n// \npublic class MissingMethodExceptionNoStack extends MissingMethodException;\n", "des": "Internal classes related to Groovy's metaclass implementation."}
{"index": 2933, "repo": "groovy-4.0.13", "code": "package typehandling\n\n// BigDecimal NumberMath operations\npublic final class BigDecimalMath extends NumberMath;\n// BigInteger NumberMath operations\npublic final class BigIntegerMath extends NumberMath;\n// Class providing various type conversions, coercions and boxing/unboxing operations.\npublic class DefaultTypeTransformation extends Object;\n// FloatingPoint (Double and Float) NumberMath operations\npublic final class FloatingPointMath extends NumberMath;\n// \npublic class GroovyCastException extends ClassCastException;\n// Integer NumberMath operations\npublic final class IntegerMath extends NumberMath;\n// Long NumberMath operations\npublic final class LongMath extends NumberMath;\n// Stateless objects used to perform math on the various Number subclasses.\npublic abstract class NumberMath extends Object;\n// \npublic class NumberMathModificationInfo extends Object;\n// Class providing various short paths for type conversions.\npublic class ShortTypeHandling extends Object;\n", "des": "Classes used to execute special actions based on the type."}
{"index": 2934, "repo": "groovy-4.0.13", "code": "package wrappers\n\n// \npublic class BooleanWrapper extends PojoWrapper;\n// \npublic class ByteWrapper extends PojoWrapper;\n// \npublic class CharWrapper extends PojoWrapper;\n// \npublic class DoubleWrapper extends PojoWrapper;\n// \npublic class FloatWrapper extends PojoWrapper;\n// \npublic class GroovyObjectWrapper extends Wrapper;\n// \npublic class IntWrapper extends PojoWrapper;\n// \npublic class LongWrapper extends PojoWrapper;\n// \npublic class PojoWrapper extends Wrapper;\n// \npublic class ShortWrapper extends PojoWrapper;\n// \npublic abstract class Wrapper extends Object implements GroovyObject;\n", "des": "Groovy wrapper classes for primitive types."}
{"index": 2935, "repo": "groovy-4.0.13", "code": "package syntax\n\n// A common base class of AST helper methods which can be shared across the classic and new parsers\npublic class ASTHelper extends Object;\n// An abstract base class for nodes in the concrete syntax tree that is the result of parsing.\npublic abstract class CSTNode extends Object;\n// Helper class for processing Groovy numeric literals.\npublic class Numbers extends Object;\n// \npublic class ParserException extends TokenException;\n// Encapsulates non-specific i/o exceptions.\npublic class ReadException extends GroovyException;\n// A syntax reduction, produced by the Parser.\npublic class Reduction extends CSTNode;\n// A helper class to allow parser exceptions to be thrown anywhere in the code.\npublic class RuntimeParserException extends GroovyRuntimeException;\n// Base exception indicating a syntax error.\npublic class SyntaxException extends GroovyException;\n// A CSTNode produced by the Lexer.\npublic class Token extends CSTNode;\n// \npublic class TokenException extends SyntaxException;\n// \npublic class TokenMismatchException extends TokenException;\n// Utility methods for working with Tokens.\npublic class TokenUtil extends Object;\n// Typing information for the CST system.\npublic class Types extends Object;\n", "des": "Lexer, parser and trees."}
{"index": 2936, "repo": "groovy-4.0.13", "code": "package tools\n\n// Classes related to the joint compiler.\npackage tools.javac\n// A convenience front end for getting standard compilations done.\npublic class Compiler extends Object;\n// \npublic class DgmConverter extends Object;\n// Provides services for reporting compilation errors to the user.\npublic class ErrorReporter extends Object;\n// Command-line compiler (aka.\npublic class FileSystemCompiler extends Object;\n// \npublic static class FileSystemCompiler.CompilationOptions extends Object;\n// \npublic static class FileSystemCompiler.VersionProvider extends Object implements picocli.CommandLine.IVersionProvider;\n// \npublic class GrapeUtil extends Object;\n// \npublic class GroovyClass extends Object;\n// Helper class to initialize the Groovy runtime.\npublic class GroovyStarter extends Object;\n// Class used to configure a RootLoader from a stream or by using its methods.\npublic class LoaderConfiguration extends Object;\n// This ClassLoader should be used as root of class loaders.\npublic class RootLoader extends URLClassLoader;\n// \npublic class StringHelper extends Object;\n// Various utility functions for use in the compiler.\npublic abstract class Utilities extends Object;\n", "des": "Compiler entry points and miscellaneous development tools."}
{"index": 2937, "repo": "groovy-4.0.13", "code": "package javac\n\n// Compilation Unit capable of compiling Java source files.\npublic class JavaAwareCompilationUnit extends CompilationUnit;\n// \npublic class JavaAwareResolveVisitor extends ResolveVisitor;\n// \npublic class JavacCompilerFactory extends Object implements JavaCompilerFactory;\n// \npublic class JavacJavaCompiler extends Object implements JavaCompiler;\n// \npublic interface JavaCompiler;\n// \npublic interface JavaCompilerFactory;\n// Compilation unit to only generate stubs.\npublic class JavaStubCompilationUnit extends CompilationUnit;\n// \npublic class JavaStubGenerator extends Object;\n// Represents a Java source file in memory to compile\npublic class MemJavaFileObject extends SimpleJavaFileObject;\n// Represents a Java source file in file to compile\npublic class RawJavaFileObject extends SimpleJavaFileObject;\n", "des": "Classes related to the joint compiler."}
{"index": 2938, "repo": "groovy-4.0.13", "code": "package vmplugin\n\n// Interface to access VM version based actions.\npublic interface VMPlugin;\n// Factory class to get functionality based on the VM version.\npublic class VMPluginFactory extends Object;\n", "des": "JVM version specific classes."}
{"index": 2939, "repo": "spring-security-config-6.1.2", "code": "package config\n\n// Parsing of <authentication-manager> and related elements.\npackage config.authentication\n// Parsing of the <http> namespace element.\npackage config.http\n// Security namespace support for LDAP authentication.\npackage config.ldap\n// Support for parsing of the <global-method-security> and <intercept-methods> elements.\npackage config.method\n// Contains globally used default Bean IDs for beans created by the namespace support in Spring Security 2.\npublic abstract class BeanIds extends Object;\n// Callback interface that accepts a single input argument and returns no result.\n@FunctionalInterface public interface Customizer<T>;\n// \npublic class DebugBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// Contains all the element names used by Spring Security 3 namespace support.\npublic abstract class Elements extends Object;\n// Parses elements from the \"security\" namespace (http://www.springframework.org/schema/security).\npublic final class SecurityNamespaceHandler extends Object implements org.springframework.beans.factory.xml.NamespaceHandler;\n", "des": "Support classes for the Spring Security namespace."}
{"index": 2940, "repo": "spring-security-config-6.1.2", "code": "package authentication\n\n// \npublic abstract class AbstractUserDetailsServiceBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// Registers the central ProviderManager used by the namespace configuration, and allows the configuration of an alias, allowing users to reference it in their beans and clearly see where the name is coming from.\npublic class AuthenticationManagerBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// Provider which doesn't provide any service.\npublic static final class AuthenticationManagerBeanDefinitionParser.NullAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider;\n// Factory bean for the namespace AuthenticationManager, which allows a more meaningful error message to be reported in the NoSuchBeanDefinitionException, if the user has forgotten to declare the <authentication-manager> element.\npublic class AuthenticationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authentication.AuthenticationManager>, org.springframework.beans.factory.BeanFactoryAware;\n// Wraps a UserDetailsService bean with a DaoAuthenticationProvider and registers the latter with the ProviderManager.\npublic class AuthenticationProviderBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// \npublic class JdbcUserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\n// Stateful parser for the <password-encoder> element.\npublic class PasswordEncoderParser extends Object;\n// \npublic class UserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\n", "des": "Parsing of <authentication-manager> and related elements."}
{"index": 2941, "repo": "spring-security-config-6.1.2", "code": "package http\n\n// Used as a factory bean to create config attribute values for the requires-channel attribute.\npublic final class ChannelAttributeFactory extends Object;\n// Parser for the CorsFilter.\npublic class CorsBeanDefinitionParser extends Object;\n// Parser for the CsrfFilter.\npublic class CsrfBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// \npublic class DefaultFilterChainValidator extends Object implements org.springframework.security.web.FilterChainProxy.FilterChainValidator;\n// \npublic class FilterChainBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// Sets the filter chain Map for a FilterChainProxy bean declaration.\npublic class FilterChainMapBeanDefinitionDecorator extends Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator;\n// \n@Deprecated public class FilterInvocationSecurityMetadataSourceParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// \npublic class FormLoginBeanDefinitionParser extends Object;\n// Parser for the HeadersFilter.\npublic class HeadersBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// Injects the supplied HttpFirewall bean reference into the FilterChainProxy.\npublic class HttpFirewallBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// Sets up HTTP security: filter stack and protected URLs.\npublic class HttpSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// \npublic static final class HttpSecurityBeanDefinitionParser.ChildAuthenticationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authentication.AuthenticationManager>;\n// \npublic static final class HttpSecurityBeanDefinitionParser.FilterChainDecoratorFactory extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.web.FilterChainProxy.FilterChainDecorator>;\n// \npublic static class HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor extends Object implements org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\n", "des": "Parsing of the <http> namespace element."}
{"index": 2942, "repo": "spring-security-config-6.1.2", "code": "package ldap\n\n// Creates an AuthenticationManager that can perform LDAP authentication.\npublic abstract class AbstractLdapAuthenticationManagerFactory<T extends org.springframework.security.ldap.authentication.AbstractLdapAuthenticator> extends Object;\n// Checks for the presence of a ContextSource instance.\npublic class ContextSourceSettingPostProcessor extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.core.Ordered;\n// Creates a DefaultSpringSecurityContextSource used to perform LDAP authentication and starts and in-memory LDAP server.\npublic class EmbeddedLdapServerContextSourceFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.ldap.DefaultSpringSecurityContextSource>, org.springframework.beans.factory.DisposableBean, org.springframework.context.ApplicationContextAware;\n// Creates an AuthenticationManager that can perform LDAP authentication using bind authentication.\npublic class LdapBindAuthenticationManagerFactory extends AbstractLdapAuthenticationManagerFactory<org.springframework.security.ldap.authentication.BindAuthenticator>;\n// Creates an AuthenticationManager that can perform LDAP authentication using password comparison.\npublic class LdapPasswordComparisonAuthenticationManagerFactory extends AbstractLdapAuthenticationManagerFactory<org.springframework.security.ldap.authentication.PasswordComparisonAuthenticator>;\n// Ldap authentication provider namespace configuration.\npublic class LdapProviderBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// \npublic class LdapServerBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// \npublic class LdapUserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\n", "des": "Security namespace support for LDAP authentication."}
{"index": 2943, "repo": "spring-security-config-6.1.2", "code": "package method\n\n// \n@Deprecated public class GlobalMethodSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// \npublic class InterceptMethodsBeanDefinitionDecorator extends Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator;\n// Processes the top-level \"method-security\" element.\npublic class MethodSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\n// \npublic static final class MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>, org.springframework.context.ApplicationContextAware;\n// \npublic static final class MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.access.expression.method.MethodSecurityExpressionHandler>, org.springframework.context.ApplicationContextAware;\n// \npublic static final class MethodSecurityBeanDefinitionParser.PostAuthorizeAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor>;\n// \npublic static final class MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>;\n// \npublic static final class MethodSecurityBeanDefinitionParser.SecuredAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>;\n// \n@Deprecated public class MethodSecurityMetadataSourceBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\n", "des": "Support for parsing of the <global-method-security> and <intercept-methods> elements."}
{"index": 2944, "repo": "spring-integration-xml-6.1.2", "code": "package xml\n\n// Contains parser classes for the XML namespace support.\npackage xml.config\n// Provides ResultFactory that will return Result, possibly taking into account payload instance.\npackage xml.result\n// Provides XML message routers.\npackage xml.router\n// Provides XML-centric MessageSelector implementations.\npackage xml.selector\n// Provides various SourceFactory implementations.\npackage xml.source\n// Provides implementations of AbstractMessageSplitter.\npackage xml.splitter\n// Provides Transformer and Enricher implementations.\npackage xml.transformer\n// Provides XPath supporting classes.\npackage xml.xpath\n// The validation exception which aggregate all the XML validation errors.\npublic class AggregatedXmlMessageValidationException extends RuntimeException;\n// Default implementation of XmlPayloadConverter.\npublic class DefaultXmlPayloadConverter extends Object implements XmlPayloadConverter;\n// Converter for creating XML Document, Node or Source instances from other types (e.g.\npublic interface XmlPayloadConverter;\n", "des": "Root package of the XML Module."}
{"index": 2945, "repo": "spring-integration-xml-6.1.2", "code": "package config\n\n// \npublic class IntegrationXmlNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n// \npublic class MarshallingTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\n// \npublic class UnmarshallingTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\n// \npublic class XmlPayloadValidatingFilterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n// Parser for the <xpath-expression> element.\npublic class XPathExpressionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\n// Parser for the <xpath-filter> element.\npublic class XPathFilterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n// Parser for <xpath-header-enricher> elements.\npublic class XPathHeaderEnricherParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\n// \npublic class XPathMessageSplitterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n// Parser for the <xpath-router/> element.\npublic class XPathRouterParser extends org.springframework.integration.config.xml.AbstractRouterParser;\n// Parser for the 'xpath-transformer' element.\npublic class XPathTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\n// \npublic class XsltPayloadTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\n", "des": "Contains parser classes for the XML namespace support."}
{"index": 2946, "repo": "spring-integration-xml-6.1.2", "code": "package result\n\n// \npublic class DomResultFactory extends Object implements ResultFactory;\n// Factory to create a Result possibly taking into account the provided message payload instance.\npublic interface ResultFactory;\n// \npublic class StringResultFactory extends Object implements ResultFactory;\n", "des": "Provides ResultFactory that will return Result, possibly taking into account payload instance."}
{"index": 2947, "repo": "spring-integration-xml-6.1.2", "code": "package router\n\n// Message Router that uses XPathExpression evaluation to determine channel names.\npublic class XPathRouter extends org.springframework.integration.router.AbstractMappingMessageRouter;\n", "des": "Provides XML message routers."}
{"index": 2948, "repo": "spring-integration-xml-6.1.2", "code": "package selector\n\n// Base class for XPath MessageSelector implementations.\npublic abstract class AbstractXPathMessageSelector extends Object implements org.springframework.integration.core.MessageSelector;\n// Boolean XPath testing MessageSelector.\npublic class BooleanTestXPathMessageSelector extends AbstractXPathMessageSelector;\n// XPath MessageSelector that tests if a provided String value matches a given Regular Expression.\npublic class RegexTestXPathMessageSelector extends AbstractXPathMessageSelector;\n// XPath MessageSelector that tests if a provided value supports payloads of type Document or String.\npublic class StringValueTestXPathMessageSelector extends AbstractXPathMessageSelector;\n// The XML validation-specific MessageSelector.\npublic class XmlValidatingMessageSelector extends Object implements org.springframework.integration.core.MessageSelector;\n// \npublic static enum XmlValidatingMessageSelector.SchemaType extends Enum<XmlValidatingMessageSelector.SchemaType>;\n", "des": "Provides XML-centric MessageSelector implementations."}
{"index": 2949, "repo": "spring-integration-xml-6.1.2", "code": "package source\n\n// SourceFactory implementation which supports creation of a DOMSource from a Document, File or String payload.\npublic class DomSourceFactory extends Object implements SourceFactory;\n// Factory to create a Source possibly taking into account the provided message payload instance.\npublic interface SourceFactory;\n// SourceFactory implementation which supports creation of a StringSource from a Document, File or String payload\npublic class StringSourceFactory extends Object implements SourceFactory;\n", "des": "Provides various SourceFactory implementations."}
{"index": 2950, "repo": "spring-integration-xml-6.1.2", "code": "package splitter\n\n// Message Splitter that uses an XPathExpression to split a Document, File or String payload into a NodeList.\npublic class XPathMessageSplitter extends org.springframework.integration.splitter.AbstractMessageSplitter;\n", "des": "Provides implementations of AbstractMessageSplitter."}
{"index": 2951, "repo": "spring-integration-xml-6.1.2", "code": "package transformer\n\n// Contains support classes for Transformers.\npackage transformer.support\n// Super class for XML transformers.\npublic abstract class AbstractXmlTransformer extends org.springframework.integration.transformer.AbstractTransformer;\n// An implementation of AbstractTransformer that delegates to an OXM Marshaller.\npublic class MarshallingTransformer extends AbstractXmlTransformer;\n// Creates a Document from a Result payload.\npublic class ResultToDocumentTransformer extends Object implements ResultTransformer;\n// Converts the passed Result to an instance of String.\npublic class ResultToStringTransformer extends Object implements ResultTransformer;\n// Implementations of this class allow for the transformation of Result objects to other formats.\npublic interface ResultTransformer;\n// Transforms the payload to a Source using a SourceFactory.\npublic class SourceCreatingTransformer extends org.springframework.integration.transformer.AbstractPayloadTransformer<Object,Source>;\n// An implementation of Transformer that delegates to an OXM Unmarshaller.\npublic class UnmarshallingTransformer extends org.springframework.integration.transformer.AbstractPayloadTransformer<Object,Object>;\n// Transformer implementation that evaluates XPath expressions against the message payload and inserts the result of the evaluation into a message header.\npublic class XPathHeaderEnricher extends org.springframework.integration.transformer.HeaderEnricher;\n// Transformer implementation that evaluates an XPath expression against the inbound Message payload and returns a Message whose payload is the result of that evaluation.\npublic class XPathTransformer extends org.springframework.integration.transformer.AbstractTransformer;\n// Thread safe XSLT transformer implementation which returns a transformed Source, Document, or String.\npublic class XsltPayloadTransformer extends AbstractXmlTransformer implements org.springframework.beans.factory.BeanClassLoaderAware;\n", "des": "Provides Transformer and Enricher implementations."}
{"index": 2952, "repo": "spring-integration-xml-6.1.2", "code": "package support\n\n// The xPath-specific HeaderValueMessageProcessor\npublic class XPathExpressionEvaluatingHeaderValueMessageProcessor extends Object implements org.springframework.integration.transformer.support.HeaderValueMessageProcessor<Object>, org.springframework.beans.factory.BeanFactoryAware;\n", "des": "Contains support classes for Transformers."}
{"index": 2953, "repo": "spring-integration-xml-6.1.2", "code": "package xpath\n\n// Enumeration of different types of XPath evaluation used to indicate the type of evaluation that should be carried out using a provided XPath expression.\npublic enum XPathEvaluationType extends Enum<XPathEvaluationType>;\n// Utility class for 'xpath' support.\npublic final class XPathUtils extends Object;\n", "des": "Provides XPath supporting classes."}
{"index": 2954, "repo": "spring-integration-redis-6.1.2", "code": "package channel\n\n// An AbstractMessageChannel implementation with BroadcastCapableChannel aspect to provide a pub-sub semantics to consume messages fgrom Redis topic.\npublic class SubscribableRedisChannel extends org.springframework.integration.channel.AbstractMessageChannel implements org.springframework.integration.channel.BroadcastCapableChannel, org.springframework.integration.support.management.ManageableSmartLifecycle;\n", "des": "Provides classes related to Redis-backed channels."}
{"index": 2955, "repo": "spring-integration-redis-6.1.2", "code": "package config\n\n// Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration Redis namespace.\npublic class RedisChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser;\n// \npublic class RedisInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser;\n// Namespace handler for Spring Integration's 'redis' namespace.\npublic class RedisNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n// Parser for the <outbound-channel-adapter/> component.\npublic class RedisOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\n// Parser for the <int-redis:outbound-gateway/> component.\npublic class RedisOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n// Parser for the <queue-inbound-channel-adapter> element of the 'redis' namespace.\npublic class RedisQueueInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser;\n// Parser for the <queue-inbound-gateway> element of the 'redis' namespace.\npublic class RedisQueueInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser;\n// Parser for the <int-redis:queue-outbound-channel-adapter> element.\npublic class RedisQueueOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\n// Parser for the <int-redis:queue-outbound-channel-adapter> element.\npublic class RedisQueueOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n// Parser for Redis store inbound adapters\npublic class RedisStoreInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser;\n// Parser for the <redis:store-outbound-channel-adapter> element.\npublic class RedisStoreOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2956, "repo": "spring-integration-redis-6.1.2", "code": "package event\n\n// \npublic class RedisExceptionEvent extends RedisIntegrationEvent;\n// \npublic abstract class RedisIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "Events generated by the redis module"}
{"index": 2957, "repo": "spring-integration-redis-6.1.2", "code": "package inbound\n\n// A MessageProducerSupport for reading messages from a Redis Stream and publishing them into the provided output channel.\npublic class ReactiveRedisStreamMessageProducer extends org.springframework.integration.endpoint.MessageProducerSupport;\n// \npublic class RedisInboundChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport;\n// \n@ManagedResource @IntegrationManagedResource public class RedisQueueInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanClassLoaderAware;\n// \n@ManagedResource @IntegrationManagedResource public class RedisQueueMessageDrivenEndpoint extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanClassLoaderAware;\n// Inbound channel adapter which returns a Message representing a view into a Redis store.\npublic class RedisStoreMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<org.springframework.data.redis.support.collections.RedisStore>;\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2958, "repo": "spring-integration-redis-6.1.2", "code": "package metadata\n\n// Redis implementation of ConcurrentMetadataStore.\npublic class RedisMetadataStore extends Object implements org.springframework.integration.metadata.ConcurrentMetadataStore;\n", "des": "Provides support for Redis-based MetadataStores."}
{"index": 2959, "repo": "spring-integration-redis-6.1.2", "code": "package outbound\n\n// \n@FunctionalInterface public interface ArgumentsStrategy;\n// \npublic class ExpressionArgumentsStrategy extends Object implements ArgumentsStrategy, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\n// Implementation of ReactiveMessageHandler which writes Message payload or Message itself (see ReactiveRedisStreamMessageHandler.extractPayload) into a Redis stream using Reactive Stream operations.\npublic class ReactiveRedisStreamMessageHandler extends org.springframework.integration.handler.AbstractReactiveMessageHandler;\n// The Gateway component implementation to perform Redis commands with provided arguments and to return command result.\npublic class RedisOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler;\n// \npublic class RedisPublishingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler;\n// \npublic class RedisQueueOutboundChannelAdapter extends org.springframework.integration.handler.AbstractMessageHandler;\n// \npublic class RedisQueueOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler;\n// Implementation of MessageHandler which writes Message data into a Redis store identified by a key String.\npublic class RedisStoreWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler;\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 2960, "repo": "spring-integration-redis-6.1.2", "code": "package store\n\n// Specialized Redis ChannelMessageStore that uses a list to back a QueueChannel.\npublic class RedisChannelMessageStore extends Object implements org.springframework.integration.store.ChannelMessageStore, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanClassLoaderAware;\n// Specialized Redis PriorityCapableChannelMessageStore that uses lists to back a QueueChannel.\npublic class RedisChannelPriorityMessageStore extends RedisChannelMessageStore implements org.springframework.integration.store.PriorityCapableChannelMessageStore;\n// Redis implementation of the key/value style MessageStore and MessageGroupStore\npublic class RedisMessageStore extends org.springframework.integration.store.AbstractKeyValueMessageStore implements org.springframework.beans.factory.BeanClassLoaderAware;\n", "des": "Provides classes related to the Redis message store."}
{"index": 2961, "repo": "spring-integration-redis-6.1.2", "code": "package support\n\n// Pre-defined names and prefixes to be used for for dealing with headers required by Redis components\npublic final class RedisHeaders extends Object;\n", "des": "Provides supporting classes for this module."}
{"index": 2962, "repo": "spring-integration-redis-6.1.2", "code": "package util\n\n// Implementation of ExpirableLockRegistry providing a distributed lock using Redis.\npublic final class RedisLockRegistry extends Object implements org.springframework.integration.support.locks.ExpirableLockRegistry, org.springframework.beans.factory.DisposableBean;\n// The mode in which this registry is going to work with locks.\npublic static enum RedisLockRegistry.RedisLockType extends Enum<RedisLockRegistry.RedisLockType>;\n", "des": "Provides utility classes."}
{"index": 2963, "repo": "pulsar-broker-3.0.0", "code": "package intercept\n\n// A plugin interface that allows you to intercept the client requests to the Pulsar brokers.\n@LimitedPrivate @Evolving public interface BrokerInterceptor extends AutoCloseable;\n// Metadata information about a broker interceptor.\npublic class BrokerInterceptorDefinition extends Object;\n// The collection of broker interceptor.\npublic class BrokerInterceptorDefinitions extends Object;\n// The metadata of broker interceptor.\npublic class BrokerInterceptorMetadata extends Object;\n// A collection of broker interceptor.\npublic class BrokerInterceptors extends Object implements BrokerInterceptor;\n// Util class to search and load BrokerInterceptors.\npublic class BrokerInterceptorUtils extends Object;\n// A broker interceptor with it's classloader.\npublic class BrokerInterceptorWithClassLoader extends Object implements BrokerInterceptor;\n// \npublic class ManagedLedgerInterceptorImpl extends Object implements ManagedLedgerInterceptor;\n", "des": "Pulsar broker interceptor."}
{"index": 2964, "repo": "pulsar-broker-3.0.0", "code": "package protocol\n\n// The protocol handler interface for support additional protocols on Pulsar brokers.\n@LimitedPrivate @Evolving public interface ProtocolHandler extends AutoCloseable;\n// Metadata information about a Pulsar protocol handler.\npublic class ProtocolHandlerDefinition extends Object;\n// A collection of loaded handlers.\npublic class ProtocolHandlers extends Object implements AutoCloseable;\n", "des": "Pulsar broker protocol handlers."}
{"index": 2965, "repo": "pulsar-broker-3.0.0", "code": "package storage\n\n// Storage to access ManagedLedgers.\n@Private @Unstable public interface ManagedLedgerStorage extends AutoCloseable;\n", "des": "The storage layer for Apache Pulsar."}
{"index": 2966, "repo": "pulsar-broker-3.0.0", "code": "package tools\n\n// broker-tool is used for operations on a specific broker.\npublic class BrokerTool extends Object;\n// The command to generate documents of broker-tool.\npublic class GenerateDocsCommand extends org.apache.bookkeeper.tools.framework.CliCommand<org.apache.bookkeeper.tools.framework.CliFlags,GenerateDocsCommand.GenDocFlags>;\n// The CLI flags of gen docs command.\nprotected static class GenerateDocsCommand.GenDocFlags extends org.apache.bookkeeper.tools.framework.CliFlags;\n// The command to collect the load report of a specific broker.\npublic class LoadReportCommand extends org.apache.bookkeeper.tools.framework.CliCommand<org.apache.bookkeeper.tools.framework.CliFlags,LoadReportCommand.Flags>;\n// The CLI flags of load report command.\npublic static class LoadReportCommand.Flags extends org.apache.bookkeeper.tools.framework.CliFlags;\n", "des": "Tools for broker related operations."}
{"index": 2967, "repo": "pulsar-broker-3.0.0", "code": "package buffer\n\n// The implementation of a transaction buffer.\npackage buffer.impl\n// The transaction buffer snapshot metadata.\npackage buffer.metadata\n// \npublic interface AbortedTxnProcessor;\n// A class represent a transaction buffer.\n@Beta public interface TransactionBuffer;\n// \npublic interface TransactionBufferClientStats;\n// A provider that provides TransactionBuffer.\n@Beta public interface TransactionBufferProvider;\n// A reader to read entries of a given transaction from transaction buffer.\n@Beta public interface TransactionBufferReader extends AutoCloseable;\n// The transaction Cursor maintains the index of all transactions.\npublic interface TransactionCursor;\n// A class represents an entry appended to a transaction.\n@Beta public interface TransactionEntry extends Entry, AutoCloseable;\n// The metadata for the transaction in the transaction buffer.\n@Beta public interface TransactionMeta;\n", "des": "Implementation of a transaction buffer."}
{"index": 2968, "repo": "pulsar-broker-3.0.0", "code": "package impl\n\n// A provider that provides in-memory implementations of TransactionBuffer.\npublic class InMemTransactionBufferProvider extends Object implements TransactionBufferProvider;\n// A TransactionBufferReader implementation that reads entries from InMemTransactionBuffer.\npublic class InMemTransactionBufferReader extends Object implements TransactionBufferReader;\n// \npublic class SingleSnapshotAbortedTxnProcessorImpl extends Object implements AbortedTxnProcessor;\n// \npublic class SnapshotSegmentAbortedTxnProcessorImpl extends Object implements AbortedTxnProcessor;\n// \npublic static enum SnapshotSegmentAbortedTxnProcessorImpl.PersistentWorker.OperationType extends Enum<SnapshotSegmentAbortedTxnProcessorImpl.PersistentWorker.OperationType>;\n// Transaction buffer based on normal persistent topic.\npublic class TopicTransactionBuffer extends TopicTransactionBufferState implements TransactionBuffer, io.netty.util.TimerTask;\n// \npublic static class TopicTransactionBuffer.TopicTransactionBufferRecover extends Object implements Runnable;\n// A provider that provides topic implementations of TransactionBuffer.\npublic class TopicTransactionBufferProvider extends Object implements TransactionBufferProvider;\n// \npublic interface TopicTransactionBufferRecoverCallBack;\n// The implement of topic transaction buffer state.\npublic abstract class TopicTransactionBufferState extends Object;\n// The state of the topicTransactionBuffer TopicTransactionBuffer.\npublic static enum TopicTransactionBufferState.State extends Enum<TopicTransactionBufferState.State>;\n// The implementation of TransactionBufferClient.\npublic class TransactionBufferClientImpl extends Object implements org.apache.pulsar.client.api.transaction.TransactionBufferClient;\n// \npublic final class TransactionBufferClientStatsImpl extends Object implements TransactionBufferClientStats;\n// Transaction buffer disable.\npublic class TransactionBufferDisable extends Object implements TransactionBuffer;\n// \npublic class TransactionBufferHandlerImpl extends Object implements TransactionBufferHandler;\n// \npublic static final class TransactionBufferHandlerImpl.OpRequestSend extends Object;\n// A simple implementation of TransactionEntry.\npublic class TransactionEntryImpl extends Object implements TransactionEntry;\n", "des": "The implementation of a transaction buffer."}
{"index": 2969, "repo": "pulsar-broker-3.0.0", "code": "package metadata\n\n// Abort txn metadata.\npublic class AbortTxnMetadata extends Object;\n// Transaction buffer snapshot metadata.\npublic class TransactionBufferSnapshot extends Object;\n", "des": "The transaction buffer snapshot metadata."}
{"index": 2970, "repo": "pulsar-broker-3.0.0", "code": "package exception\n\n// Exceptions thrown when encountering errors in transaction buffer.\npackage exception.buffer\n// Exceptions thrown when encountering errors in transaction buffer.\npackage exception.coordinator\n// Exceptions thrown when encountering errors in transaction buffer.\npackage exception.pendingack\n// The base exception class for the errors thrown from Transaction.\npublic abstract class TransactionException extends Exception;\n// Exception is thrown when opening a reader on a transaction that is not sealed yet.\npublic static class TransactionException.TransactionNotSealedException extends TransactionException;\n// Exception thrown if a transaction is already sealed.\npublic static class TransactionException.TransactionSealedException extends TransactionException;\n// Exceptions are thrown when operations are applied to a transaction which is not in expected txn status.\npublic static class TransactionException.TransactionStatusException extends TransactionException;\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 2971, "repo": "pulsar-broker-3.0.0", "code": "package buffer\n\n// The base exception class for the errors thrown from Transaction Buffer.\npublic abstract class TransactionBufferException extends TransactionException;\n// Exception thrown when reaching end of a transaction.\npublic static class TransactionBufferException.EndOfTransactionException extends TransactionBufferException;\n// Exception is thrown when the transaction is not found in the transaction buffer.\npublic static class TransactionBufferException.TransactionNotFoundException extends TransactionBufferException;\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 2972, "repo": "pulsar-broker-3.0.0", "code": "package coordinator\n\n// The base exception class for the errors thrown from Transaction Coordinator.\npublic abstract class TransactionCoordinatorException extends TransactionException;\n// Exceptions are thrown when txnAction is unsupported.\npublic static class TransactionCoordinatorException.UnsupportedTxnActionException extends TransactionCoordinatorException;\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 2973, "repo": "pulsar-broker-3.0.0", "code": "package pendingack\n\n// The base exception class for the errors thrown from Transaction Pending ACk.\npublic abstract class TransactionPendingAckException extends TransactionException;\n// Transaction pending ack store provider exception.\npublic static class TransactionPendingAckException.TransactionPendingAckStoreProviderException extends TransactionPendingAckException;\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 2974, "repo": "pulsar-broker-3.0.0", "code": "package pendingack\n\n// The implementation for processing pending acks in transactions.\npackage pendingack.impl\n// Handle for processing pending acks for transactions.\npublic interface PendingAckHandle;\n// \npublic interface PendingAckHandleStats;\n// Call back for pending ack reply.\npublic interface PendingAckReplyCallBack;\n// To store transaction pending ack.\npublic interface PendingAckStore;\n// Provider of transaction pending ack store.\npublic interface TransactionPendingAckStoreProvider;\n", "des": "Component for processing pending acks for transactions."}
{"index": 2975, "repo": "pulsar-broker-3.0.0", "code": "package impl\n\n// In memory implementation of PendingAckStore.\npublic class InMemoryPendingAckStore extends Object implements PendingAckStore;\n// \npublic class InMemoryPendingAckStoreProvider extends Object implements TransactionPendingAckStoreProvider;\n// MLPendingAckStore reply call back.\npublic class MLPendingAckReplyCallBack extends Object implements PendingAckReplyCallBack;\n// The implement of the pending ack store by manageLedger.\npublic class MLPendingAckStore extends Object implements PendingAckStore;\n// Provider is for MLPendingAckStore.\npublic class MLPendingAckStoreProvider extends Object implements TransactionPendingAckStoreProvider;\n// The disabled implementation of PendingAckHandle.\npublic class PendingAckHandleDisabled extends Object implements PendingAckHandle;\n// The default implementation of PendingAckHandle.\npublic class PendingAckHandleImpl extends PendingAckHandleState implements PendingAckHandle;\n// The implement of transaction pending ack store.\npublic abstract class PendingAckHandleState extends Object;\n// The state of the pending ack handle PendingAckHandleState.\npublic static enum PendingAckHandleState.State extends Enum<PendingAckHandleState.State>;\n// \npublic class PendingAckHandleStatsImpl extends Object implements PendingAckHandleStats;\n", "des": "The implementation for processing pending acks in transactions."}
{"index": 2976, "repo": "pulsar-broker-3.0.0", "code": "package recover\n\n// The transaction recover tracker implementation TransactionRecoverTracker.\npublic class TransactionRecoverTrackerImpl extends Object implements TransactionRecoverTracker;\n", "des": "Implementation of a transaction recover tracker."}
{"index": 2977, "repo": "pulsar-broker-3.0.0", "code": "package timeout\n\n// An timeout tracker factory implementation of TransactionTimeoutTrackerFactory.\npublic class TransactionTimeoutTrackerFactoryImpl extends Object implements TransactionTimeoutTrackerFactory;\n// An timer-task implementation of TransactionTimeoutTracker.\npublic class TransactionTimeoutTrackerImpl extends Object implements TransactionTimeoutTracker, io.netty.util.TimerTask;\n", "des": "Implementation of a transaction buffer."}
{"index": 2978, "repo": "pulsar-broker-3.0.0", "code": "package util\n\n// \npublic class LogIndexLagBackoff extends Object;\n", "des": "Implementation of a transaction tools."}
{"index": 2979, "repo": "pulsar-broker-3.0.0", "code": "package servlet\n\n// The additional servlet with pulsarService interface for support additional servlet to get pulsarService.\npublic interface AdditionalServletWithPulsarService extends AdditionalServlet;\n", "des": "Pulsar broker servlet plugin."}
{"index": 2980, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package resource\n\n// OAuth 2.0 Resource Server Authentications and supporting classes and interfaces.\npackage resource.authentication\n// OAuth 2.0 Introspection supporting classes and interfaces.\npackage resource.introspection\n// OAuth 2.0 Resource Server Filter's and supporting classes and interfaces.\npackage resource.web\n// \n@Deprecated public class BearerTokenAuthenticationToken extends BearerTokenAuthenticationToken;\n// A representation of a Bearer Token Error.\npublic final class BearerTokenError extends org.springframework.security.oauth2.core.OAuth2Error;\n// Standard error codes defined by the OAuth 2.0 Authorization Framework: Bearer Token Usage.\npublic final class BearerTokenErrorCodes extends Object;\n// A factory for creating BearerTokenError instances that correspond to the registered Bearer Token Error Codes.\npublic final class BearerTokenErrors extends Object;\n// An OAuth2AuthenticationException that indicates an invalid bearer token.\npublic class InvalidBearerTokenException extends org.springframework.security.oauth2.core.OAuth2AuthenticationException;\n", "des": "OAuth 2.0 Resource Server core classes and interfaces providing support."}
{"index": 2981, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package authentication\n\n// Base class for AbstractAuthenticationToken implementations that expose common attributes between different OAuth 2.0 Access Token Formats.\npublic abstract class AbstractOAuth2TokenAuthenticationToken<T extends org.springframework.security.oauth2.core.OAuth2Token> extends org.springframework.security.authentication.AbstractAuthenticationToken;\n// An Authentication token that represents a successful authentication as obtained through a bearer token.\n@Transient public class BearerTokenAuthentication extends AbstractOAuth2TokenAuthenticationToken<org.springframework.security.oauth2.core.OAuth2AccessToken>;\n// An Authentication that contains a Bearer Token.\npublic class BearerTokenAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken;\n// A Jwt to GrantedAuthority Converter that is a composite of converters.\npublic class DelegatingJwtGrantedAuthoritiesConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,Collection<org.springframework.security.core.GrantedAuthority>>;\n// \npublic class JwtAuthenticationConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,org.springframework.security.authentication.AbstractAuthenticationToken>;\n// An AuthenticationProvider implementation of the Jwt-encoded Bearer Tokens for protecting OAuth 2.0 Resource Servers.\npublic final class JwtAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider;\n// An implementation of an AbstractOAuth2TokenAuthenticationToken representing a Jwt Authentication.\n@Transient public class JwtAuthenticationToken extends AbstractOAuth2TokenAuthenticationToken<org.springframework.security.oauth2.jwt.Jwt>;\n// A Converter that takes a Jwt and converts it into a BearerTokenAuthentication.\npublic final class JwtBearerTokenAuthenticationConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,org.springframework.security.authentication.AbstractAuthenticationToken>;\n", "des": "OAuth 2.0 Resource Server Authentications and supporting classes and interfaces."}
{"index": 2982, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package introspection\n\n// An exception similar to BadCredentialsException that indicates an opaque token that is invalid in some way.\npublic class BadOpaqueTokenException extends OAuth2IntrospectionException;\n// A Nimbus implementation of OpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic class NimbusOpaqueTokenIntrospector extends Object implements OpaqueTokenIntrospector;\n// A Nimbus implementation of ReactiveOpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic class NimbusReactiveOpaqueTokenIntrospector extends Object implements ReactiveOpaqueTokenIntrospector;\n// A domain object that wraps the attributes of OAuth 2.0 Token Introspection.\npublic final class OAuth2IntrospectionAuthenticatedPrincipal extends Object implements org.springframework.security.oauth2.core.OAuth2TokenIntrospectionClaimAccessor, org.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal, Serializable;\n// Base exception for all OAuth 2.0 Introspection related errors\npublic class OAuth2IntrospectionException extends RuntimeException;\n// Convert a successful introspection result into an authentication result.\n@FunctionalInterface public interface OpaqueTokenAuthenticationConverter;\n// A contract for introspecting and verifying an OAuth 2.0 token.\n@FunctionalInterface public interface OpaqueTokenIntrospector;\n// Convert a successful introspection result into an authentication result.\n@FunctionalInterface public interface ReactiveOpaqueTokenAuthenticationConverter;\n// A contract for introspecting and verifying an OAuth 2.0 token.\n@FunctionalInterface public interface ReactiveOpaqueTokenIntrospector;\n// A Spring implementation of OpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic class SpringOpaqueTokenIntrospector extends Object implements OpaqueTokenIntrospector;\n// A Spring implementation of ReactiveOpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic class SpringReactiveOpaqueTokenIntrospector extends Object implements ReactiveOpaqueTokenIntrospector;\n", "des": "OAuth 2.0 Introspection supporting classes and interfaces."}
{"index": 2983, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package web\n\n// OAuth 2.0 Resource Server access denial classes and interfaces.\npackage web.access\n// An AuthenticationEntryPoint implementation used to commence authentication of protected resource requests using BearerTokenAuthenticationFilter.\npublic final class BearerTokenAuthenticationEntryPoint extends Object implements org.springframework.security.web.AuthenticationEntryPoint;\n// \n@Deprecated public final class BearerTokenAuthenticationFilter extends BearerTokenAuthenticationFilter;\n// A strategy for resolving Bearer Tokens from the HttpServletRequest.\n@FunctionalInterface public interface BearerTokenResolver;\n// The default BearerTokenResolver implementation based on RFC 6750.\npublic final class DefaultBearerTokenResolver extends Object implements BearerTokenResolver;\n// Generic resolver extracting pre-authenticated JWT identity from a custom header.\npublic class HeaderBearerTokenResolver extends Object implements BearerTokenResolver;\n", "des": "OAuth 2.0 Resource Server Filter's and supporting classes and interfaces."}
{"index": 2984, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package access\n\n// Translates any AccessDeniedException into an HTTP response in accordance with RFC 6750 Section 3: The WWW-Authenticate.\npublic final class BearerTokenAccessDeniedHandler extends Object implements org.springframework.security.web.access.AccessDeniedHandler;\n", "des": "OAuth 2.0 Resource Server access denial classes and interfaces."}
{"index": 2985, "repo": "spring-ldap-core-3.1.0", "code": "package annotations\n\n// Maps a Java field to an LDAP attribute.\n@Target(FIELD) @Retention(RUNTIME) public @interface Attribute;\n// The Type attribute indicates whether a field is regarded as binary based or string based by the LDAP JNDI provider.\npublic static enum Attribute.Type extends Enum<Attribute.Type>;\n// Maps a Java field to a component of an entry's distinguished name.\n@Target(FIELD) @Retention(RUNTIME) public @interface DnAttribute;\n// This annotation marks a Java class to be persisted in an LDAP directory.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface Entry;\n// This annotation marks a Java field as containing the Distinguished Name of an LDAP Entry.\n@Target(FIELD) @Retention(RUNTIME) public @interface Id;\n// This annotation identifies a field in an Entry annotated class that should not be persisted to LDAP.\n@Target(FIELD) @Retention(RUNTIME) public @interface Transient;\n", "des": "Provides a set of annotations to describe the mapping of a Java class to an LDAP entry."}
{"index": 2986, "repo": "spring-ldap-core-3.1.0", "code": "package core\n\n// Provides a single public class which implements OdmManager.\npackage core.impl\n// The ObjectDirectoryMapper keeps track of managed class metadata and is used by LdapTemplate to map to/from entity objects annotated with the annotations specified in the org.springframework.ldap.odm.annotations package.\npublic interface ObjectDirectoryMapper;\n// The root of the Spring LDAP ODM exception hierarchy.\npublic class OdmException extends NamingException;\n", "des": "Provides an OdmManager interface for interaction with an LDAP directory."}
{"index": 2987, "repo": "spring-ldap-core-3.1.0", "code": "package impl\n\n// Default implementation of ObjectDirectoryMapper.\npublic class DefaultObjectDirectoryMapper extends Object implements ObjectDirectoryMapper;\n// Thrown to indicate that an instance is not suitable for persisting in the LDAP directory.\npublic class InvalidEntryException extends OdmException;\n// Thrown to indicate an error in the annotated meta-data.\npublic class MetaDataException extends OdmException;\n// Thrown when an OdmManager method is called with a class which is not being managed by the OdmManager.\npublic class UnmanagedClassException extends OdmException;\n", "des": "Provides a single public class which implements OdmManager."}
{"index": 2988, "repo": "spring-ldap-core-3.1.0", "code": "package typeconversion\n\n// Provides an implementation of the ConverterManager interface.\npackage typeconversion.impl\n// Thrown by the conversion framework to indicate an error condition - typically a failed type conversion.\npublic final class ConverterException extends NamingException;\n// A simple interface to be implemented to provide type conversion functionality.\npublic interface ConverterManager;\n", "des": "Provides an interface to be implemented to create a type conversion framework."}
{"index": 2989, "repo": "spring-ldap-core-3.1.0", "code": "package impl\n\n// Provides some basic implementations of the Converter interface.\npackage impl.converters\n// \npublic class ConversionServiceConverterManager extends Object implements ConverterManager;\n// \npublic static final class ConversionServiceConverterManager.NameToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<Name,String>;\n// \npublic static final class ConversionServiceConverterManager.StringToNameConverter extends Object implements org.springframework.core.convert.converter.Converter<String,Name>;\n// Interface specifying the conversion between two classes\npublic interface Converter;\n// A utility class to allow ConverterManagerImpl instances to be easily configured via spring.xml.\npublic final class ConverterManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean;\n// Configuration information for a single Converter instance.\npublic static final class ConverterManagerFactoryBean.ConverterConfig extends Object;\n// An implementation of ConverterManager.\npublic final class ConverterManagerImpl extends Object implements ConverterManager;\n// \npublic class StringConverter extends Object;\n", "des": "Provides an implementation of the ConverterManager interface."}
{"index": 2990, "repo": "spring-ldap-core-3.1.0", "code": "package converters\n\n// A Converter from a String to any class which has a single argument public constructor taking a String.\npublic final class FromStringConverter extends Object implements Converter;\n// A Converter from any class to a String via the toString method.\npublic final class ToStringConverter extends Object implements Converter;\n", "des": "Provides some basic implementations of the Converter interface."}
{"index": 2991, "repo": "spring-web-6.0.11", "code": "package http\n\n// Contains an abstraction over client-side HTTP.\npackage http.client\n// Provides implementations of Encoder and Decoder for web use.\npackage http.codec\n// Provides an HttpMessageConverter abstraction to convert between Java objects and HTTP input/output messages.\npackage http.converter\n// Contains an abstraction over server-side HTTP.\npackage http.server\n// A builder for creating \"Cache-Control\" HTTP response headers.\npublic class CacheControl extends Object;\n// Representation of the Content-Disposition type and parameters as defined in RFC 6266.\npublic final class ContentDisposition extends Object;\n// A mutable builder for ContentDisposition.\npublic static interface ContentDisposition.Builder;\n// Represents an HTTP cookie as a name-value pair consistent with the content of the \"Cookie\" request header.\npublic class HttpCookie extends Object;\n// Represents an HTTP request or response entity, consisting of headers and body.\npublic class HttpEntity<T> extends Object;\n// A data structure representing HTTP request or response headers, mapping String header names to a list of String values, also offering accessors for common application-level data types.\npublic class HttpHeaders extends Object implements org.springframework.util.MultiValueMap<String,String>, Serializable;\n// Represents an HTTP input message, consisting of headers and a readable body.\npublic interface HttpInputMessage extends HttpMessage;\n// Holds the shared logger named \"org.springframework.web.HttpLogging\" for HTTP related logging when \"org.springframework.http\" is not enabled but \"org.springframework.web\" is.\npublic abstract class HttpLogging extends Object;\n// Represents the base interface for HTTP request and response messages.\npublic interface HttpMessage;\n// Represents an HTTP request method.\npublic final class HttpMethod extends Object implements Comparable<HttpMethod>, Serializable;\n// Represents an HTTP output message, consisting of headers and a writable body.\npublic interface HttpOutputMessage extends HttpMessage;\n// Represents an HTTP (byte) range for use with the HTTP \"Range\" header.\npublic abstract class HttpRange extends Object;\n// Represents an HTTP request message, consisting of a method and a URI.\npublic interface HttpRequest extends HttpMessage;\n", "des": "Contains a basic abstraction over client/server-side HTTP."}
{"index": 2992, "repo": "spring-web-6.0.11", "code": "package client\n\n// This package provides support for client HTTP Observation.\npackage client.observation\n// Abstractions for reactive HTTP client support including ClientHttpRequest and ClientHttpResponse as well as a ClientHttpConnector.\npackage client.reactive\n// This package provides generic HTTP support classes, to be used by higher-level classes like RestTemplate.\npackage client.support\n// Abstract base for ClientHttpRequest that makes sure that headers and body are not written multiple times.\npublic abstract class AbstractClientHttpRequest extends Object implements ClientHttpRequest;\n// Abstract base class for ClientHttpRequestFactory implementations that decorate another request factory.\npublic abstract class AbstractClientHttpRequestFactoryWrapper extends Object implements ClientHttpRequestFactory;\n// \n@Deprecated(since=\"6.0\") public abstract class AbstractClientHttpResponse extends Object implements ClientHttpResponse;\n// Wrapper for a ClientHttpRequestFactory that buffers all outgoing and incoming streams in memory.\npublic class BufferingClientHttpRequestFactory extends AbstractClientHttpRequestFactoryWrapper;\n// Represents a client-side HTTP request.\npublic interface ClientHttpRequest extends HttpRequest, HttpOutputMessage;\n// Represents the context of a client-side HTTP request execution.\n@FunctionalInterface public interface ClientHttpRequestExecution;\n// Factory for ClientHttpRequest objects.\n@FunctionalInterface public interface ClientHttpRequestFactory;\n// Callback interface for initializing a ClientHttpRequest prior to it being used.\n@FunctionalInterface public interface ClientHttpRequestInitializer;\n// Intercepts client-side HTTP requests.\n@FunctionalInterface public interface ClientHttpRequestInterceptor;\n// Represents a client-side HTTP response.\npublic interface ClientHttpResponse extends HttpInputMessage, Closeable;\n// ClientHttpRequestFactory implementation that uses Apache HttpComponents HttpClient to create requests.\npublic class HttpComponentsClientHttpRequestFactory extends Object implements ClientHttpRequestFactory, org.springframework.beans.factory.DisposableBean;\n// ClientHttpRequestFactory wrapper with support for ClientHttpRequestInterceptors.\npublic class InterceptingClientHttpRequestFactory extends AbstractClientHttpRequestFactoryWrapper;\n// Prepare the body of a multipart request, resulting in a MultiValueMap<String, HttpEntity>.\npublic final class MultipartBodyBuilder extends Object;\n// Builder that allows for further customization of part headers.\npublic static interface MultipartBodyBuilder.PartBuilder;\n", "des": "Contains an abstraction over client-side HTTP."}
{"index": 2993, "repo": "spring-web-6.0.11", "code": "package observation\n\n// Documented KeyValues for HTTP client observations.\npublic enum ClientHttpObservationDocumentation extends Enum<ClientHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation;\n// \npublic static enum ClientHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\n// \npublic static enum ClientHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\n// Context that holds information for metadata collection during the client HTTP exchanges observations.\npublic class ClientRequestObservationContext extends io.micrometer.observation.transport.RequestReplySenderContext<ClientHttpRequest,ClientHttpResponse>;\n// Interface for an ObservationConvention for client HTTP exchanges.\npublic interface ClientRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ClientRequestObservationContext>;\n// Default implementation for a ClientRequestObservationConvention, extracting information from the ClientRequestObservationContext.\npublic class DefaultClientRequestObservationConvention extends Object implements ClientRequestObservationConvention;\n", "des": "This package provides support for client HTTP Observation."}
{"index": 2994, "repo": "spring-web-6.0.11", "code": "package reactive\n\n// Base class for ClientHttpRequest implementations.\npublic abstract class AbstractClientHttpRequest extends Object implements ClientHttpRequest;\n// Abstraction over HTTP clients driving the underlying HTTP client to connect to the origin server and provide all necessary infrastructure to send a ClientHttpRequest and receive a ClientHttpResponse.\npublic interface ClientHttpConnector;\n// Represents a client-side reactive HTTP request.\npublic interface ClientHttpRequest extends ReactiveHttpOutputMessage;\n// Wraps another ClientHttpRequest and delegates all methods to it.\npublic class ClientHttpRequestDecorator extends Object implements ClientHttpRequest;\n// Represents a client-side reactive HTTP response.\npublic interface ClientHttpResponse extends ReactiveHttpInputMessage;\n// Wraps another ClientHttpResponse and delegates all methods to it.\npublic class ClientHttpResponseDecorator extends Object implements ClientHttpResponse;\n// ClientHttpConnector implementation for the Apache HttpComponents HttpClient 5.x.\npublic class HttpComponentsClientHttpConnector extends Object implements ClientHttpConnector, Closeable;\n// ClientHttpConnector for the Java HttpClient.\npublic class JdkClientHttpConnector extends Object implements ClientHttpConnector;\n// Factory to manage JDK HttpClient resources such as a shared Executor within the lifecycle of a Spring ApplicationContext.\npublic class JdkHttpClientResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\n// ClientHttpConnector for the Jetty Reactive Streams HttpClient.\npublic class JettyClientHttpConnector extends Object implements ClientHttpConnector;\n// Factory to manage Jetty resources, i.e.\npublic class JettyResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\n// Reactor-Netty implementation of ClientHttpConnector.\npublic class ReactorClientHttpConnector extends Object implements ClientHttpConnector;\n// Reactor Netty 2 (Netty 5) implementation of ClientHttpConnector.\npublic class ReactorNetty2ClientHttpConnector extends Object implements ClientHttpConnector;\n// Factory to manage Reactor Netty resources, i.e.\npublic class ReactorNetty2ResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\n", "des": "Abstractions for reactive HTTP client support including ClientHttpRequest and ClientHttpResponse as well as a ClientHttpConnector."}
{"index": 2995, "repo": "spring-web-6.0.11", "code": "package support\n\n// ClientHttpRequestInterceptor to apply a given HTTP Basic Authentication username/password pair, unless a custom Authorization header has already been set.\npublic class BasicAuthenticationInterceptor extends Object implements ClientHttpRequestInterceptor;\n// Base class for RestTemplate and other HTTP accessing gateway helpers, defining common properties such as the ClientHttpRequestFactory to operate on.\npublic abstract class HttpAccessor extends Object;\n// Provides a convenient implementation of the HttpRequest interface that can be overridden to adapt the request.\npublic class HttpRequestWrapper extends Object implements HttpRequest;\n// Base class for RestTemplate and other HTTP accessing gateway helpers, adding interceptor-related properties to HttpAccessor's common properties.\npublic abstract class InterceptingHttpAccessor extends HttpAccessor;\n// FactoryBean that creates a java.net.Proxy.\npublic class ProxyFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Proxy>, org.springframework.beans.factory.InitializingBean;\n", "des": "This package provides generic HTTP support classes, to be used by higher-level classes like RestTemplate."}
{"index": 2996, "repo": "spring-web-6.0.11", "code": "package codec\n\n// CBOR encoder and decoder support.\npackage codec.cbor\n// JSON encoder and decoder support.\npackage codec.json\n// Multipart support.\npackage codec.multipart\n// Provides an encoder and a decoder for Google Protocol Buffers.\npackage codec.protobuf\n// Provides implementations of ClientCodecConfigurer and ServerCodecConfigurer based on the converter implementations from org.springframework.http.codec.json and co.\npackage codec.support\n// XML encoder and decoder support.\npackage codec.xml\n// Extension of CodecConfigurer for HTTP message reader and writer options relevant on the client side.\npublic interface ClientCodecConfigurer extends CodecConfigurer;\n// CodecConfigurer.DefaultCodecs extension with extra client-side options.\npublic static interface ClientCodecConfigurer.ClientDefaultCodecs extends CodecConfigurer.DefaultCodecs;\n// Defines a common interface for configuring either client or server HTTP message readers and writers.\npublic interface CodecConfigurer;\n// Registry for custom HTTP message readers and writers.\npublic static interface CodecConfigurer.CustomCodecs;\n// Exposes the values of properties configured through CodecConfigurer.defaultCodecs() that are applied to default codecs.\npublic static interface CodecConfigurer.DefaultCodecConfig;\n// Customize or replace the HTTP message readers and writers registered by default.\npublic static interface CodecConfigurer.DefaultCodecs;\n// Registry and container for multipart HTTP message writers.\npublic static interface CodecConfigurer.MultipartCodecs;\n// HttpMessageReader that wraps and delegates to a Decoder.\npublic class DecoderHttpMessageReader<T> extends Object implements HttpMessageReader<T>;\n// HttpMessageWriter that wraps and delegates to an Encoder.\npublic class EncoderHttpMessageWriter<T> extends Object implements HttpMessageWriter<T>;\n// Implementation of an HttpMessageReader to read HTML form data, i.e.\npublic class FormHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<org.springframework.util.MultiValueMap<String,String>>;\n// HttpMessageWriter for writing a MultiValueMap<String, String> as HTML form data, i.e.\npublic class FormHttpMessageWriter extends LoggingCodecSupport implements HttpMessageWriter<org.springframework.util.MultiValueMap<String,String>>;\n", "des": "Provides implementations of Encoder and Decoder for web use."}
{"index": 2997, "repo": "spring-web-6.0.11", "code": "package cbor\n\n// Decode bytes into CBOR and convert to Object's with Jackson.\npublic class Jackson2CborDecoder extends AbstractJackson2Decoder;\n// Encode from an Object to bytes of CBOR objects using Jackson.\npublic class Jackson2CborEncoder extends AbstractJackson2Encoder;\n// Decode a byte stream into CBOR and convert to Objects with kotlinx.serialization.\npublic class KotlinSerializationCborDecoder extends KotlinSerializationBinaryDecoder<kotlinx.serialization.cbor.Cbor>;\n// Encode from an Object stream to a byte stream of CBOR objects using kotlinx.serialization.\npublic class KotlinSerializationCborEncoder extends KotlinSerializationBinaryEncoder<kotlinx.serialization.cbor.Cbor>;\n", "des": "CBOR encoder and decoder support."}
{"index": 2998, "repo": "spring-web-6.0.11", "code": "package json\n\n// Abstract base class for Jackson 2.x decoding, leveraging non-blocking parsing.\npublic abstract class AbstractJackson2Decoder extends Jackson2CodecSupport implements HttpMessageDecoder<Object>;\n// Base class providing support methods for Jackson 2.x encoding.\npublic abstract class AbstractJackson2Encoder extends Jackson2CodecSupport implements HttpMessageEncoder<Object>;\n// Base class providing support methods for Jackson 2.x encoding and decoding.\npublic abstract class Jackson2CodecSupport extends Object;\n// Decode a byte stream into JSON and convert to Object's with Jackson 2.x, leveraging non-blocking parsing.\npublic class Jackson2JsonDecoder extends AbstractJackson2Decoder;\n// Encode from an Object stream to a byte stream of JSON objects using Jackson 2.x.\npublic class Jackson2JsonEncoder extends AbstractJackson2Encoder;\n// Decode a byte stream into Smile and convert to Object's with Jackson 2.x, leveraging non-blocking parsing.\npublic class Jackson2SmileDecoder extends AbstractJackson2Decoder;\n// Encode from an Object stream to a byte stream of Smile objects using Jackson 2.x.\npublic class Jackson2SmileEncoder extends AbstractJackson2Encoder;\n// Decode a byte stream into JSON and convert to Object's with kotlinx.serialization.\npublic class KotlinSerializationJsonDecoder extends KotlinSerializationStringDecoder<kotlinx.serialization.json.Json>;\n// Encode from an Object stream to a byte stream of JSON objects using kotlinx.serialization.\npublic class KotlinSerializationJsonEncoder extends KotlinSerializationStringEncoder<kotlinx.serialization.json.Json>;\n", "des": "JSON encoder and decoder support."}
{"index": 2999, "repo": "spring-web-6.0.11", "code": "package multipart\n\n// Default HttpMessageReader for parsing \"multipart/form-data\" requests to a stream of Parts.\npublic class DefaultPartHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<Part>;\n// Specialization of Part that represents an uploaded file received in a multipart request.\npublic interface FilePart extends Part;\n// Represents an event triggered for a file upload.\npublic interface FilePartEvent extends PartEvent;\n// Specialization of Part for a form field.\npublic interface FormFieldPart extends Part;\n// Represents an event triggered for a form field.\npublic interface FormPartEvent extends PartEvent;\n// HttpMessageReader for reading \"multipart/form-data\" requests into a MultiValueMap<String, Part>.\npublic class MultipartHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<org.springframework.util.MultiValueMap<String,Part>>;\n// HttpMessageWriter for writing a MultiValueMap<String, ?> as multipart form data, i.e.\npublic class MultipartHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<org.springframework.util.MultiValueMap<String,?>>;\n// Support class for multipart HTTP message writers.\npublic class MultipartWriterSupport extends LoggingCodecSupport;\n// Representation for a part in a \"multipart/form-data\" request.\npublic interface Part;\n// Represents an event for a \"multipart/form-data\" request.\npublic interface PartEvent;\n// HttpMessageReader for parsing \"multipart/form-data\" requests to a stream of PartEvent elements.\npublic class PartEventHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<PartEvent>;\n// HttpMessageWriter for writing PartEvent objects.\npublic class PartEventHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<PartEvent>;\n// HttpMessageWriter for writing with Part.\npublic class PartHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<Part>;\n", "des": "Multipart support."}
{"index": 3000, "repo": "spring-web-6.0.11", "code": "package protobuf\n\n// Decode a byte stream into a protocol Buffer and convert to Objects with kotlinx.serialization.\npublic class KotlinSerializationProtobufDecoder extends KotlinSerializationBinaryDecoder<kotlinx.serialization.protobuf.ProtoBuf>;\n// Decode a byte stream into a Protocol Buffer and convert to Objects with kotlinx.serialization.\npublic class KotlinSerializationProtobufEncoder extends KotlinSerializationBinaryEncoder<kotlinx.serialization.protobuf.ProtoBuf>;\n// Base class providing support methods for Protobuf encoding and decoding.\npublic abstract class ProtobufCodecSupport extends Object;\n// A Decoder that reads Messages using Google Protocol Buffers.\npublic class ProtobufDecoder extends ProtobufCodecSupport implements org.springframework.core.codec.Decoder<com.google.protobuf.Message>;\n// An Encoder that writes Messages using Google Protocol Buffers.\npublic class ProtobufEncoder extends ProtobufCodecSupport implements HttpMessageEncoder<com.google.protobuf.Message>;\n// HttpMessageWriter that can write a protobuf Message and adds X-Protobuf-Schema, X-Protobuf-Message headers and a delimited=true parameter is added to the content type if a flux is serialized.\npublic class ProtobufHttpMessageWriter extends EncoderHttpMessageWriter<com.google.protobuf.Message>;\n", "des": "Provides an encoder and a decoder for Google Protocol Buffers."}
{"index": 3001, "repo": "spring-web-6.0.11", "code": "package support\n\n// Default implementation of ClientCodecConfigurer.\npublic class DefaultClientCodecConfigurer extends Object implements ClientCodecConfigurer;\n// Default implementation of ServerCodecConfigurer.\npublic class DefaultServerCodecConfigurer extends Object implements ServerCodecConfigurer;\n", "des": "Provides implementations of ClientCodecConfigurer and ServerCodecConfigurer based on the converter implementations from org.springframework.http.codec.json and co."}
{"index": 3002, "repo": "spring-web-6.0.11", "code": "package xml\n\n// Decode from a bytes stream containing XML elements to a stream of Objects (POJOs).\npublic class Jaxb2XmlDecoder extends org.springframework.core.codec.AbstractDecoder<Object>;\n// Encode from single value to a byte stream containing XML elements.\npublic class Jaxb2XmlEncoder extends org.springframework.core.codec.AbstractSingleValueEncoder<Object>;\n// Decodes a DataBuffer stream into a stream of XMLEvents.\npublic class XmlEventDecoder extends org.springframework.core.codec.AbstractDecoder<XMLEvent>;\n", "des": "XML encoder and decoder support."}
{"index": 3003, "repo": "spring-web-6.0.11", "code": "package converter\n\n// Provides an HttpMessageConverter for the CBOR data format.\npackage converter.cbor\n// Provides HttpMessageConverter implementations for handling Atom and RSS feeds.\npackage converter.feed\n// Provides HttpMessageConverter implementations for handling JSON.\npackage converter.json\n// Provides an HttpMessageConverter implementation for handling Google Protocol Buffers.\npackage converter.protobuf\n// Provides an HttpMessageConverter for the Smile data format (\"binary JSON\").\npackage converter.smile\n// Provides a comprehensive HttpMessageConverter variant for form handling.\npackage converter.support\n// Provides HttpMessageConverter implementations for handling XML.\npackage converter.xml\n// Abstract base class for most GenericHttpMessageConverter implementations.\npublic abstract class AbstractGenericHttpMessageConverter<T> extends AbstractHttpMessageConverter<T> implements GenericHttpMessageConverter<T>;\n// Abstract base class for most HttpMessageConverter implementations.\npublic abstract class AbstractHttpMessageConverter<T> extends Object implements HttpMessageConverter<T>;\n// Abstract base class for HttpMessageConverter implementations that use Kotlin serialization.\npublic abstract class AbstractKotlinSerializationHttpMessageConverter<T extends kotlinx.serialization.SerialFormat> extends AbstractGenericHttpMessageConverter<Object>;\n// Implementation of HttpMessageConverter that can read and write BufferedImages.\npublic class BufferedImageHttpMessageConverter extends Object implements HttpMessageConverter<BufferedImage>;\n// Implementation of HttpMessageConverter that can read and write byte arrays.\npublic class ByteArrayHttpMessageConverter extends AbstractHttpMessageConverter<byte[]>;\n// Implementation of HttpMessageConverter to read and write 'normal' HTML forms and also to write (but not read) multipart data (e.g.\npublic class FormHttpMessageConverter extends Object implements HttpMessageConverter<org.springframework.util.MultiValueMap<String,?>>;\n// A specialization of HttpMessageConverter that can convert an HTTP request into a target object of a specified generic type and a source object of a specified generic type into an HTTP response.\npublic interface GenericHttpMessageConverter<T> extends HttpMessageConverter<T>;\n// Thrown by HttpMessageConverter implementations when a conversion attempt fails.\npublic class HttpMessageConversionException extends org.springframework.core.NestedRuntimeException;\n// Strategy interface for converting from and to HTTP requests and responses.\npublic interface HttpMessageConverter<T>;\n", "des": "Provides an HttpMessageConverter abstraction to convert between Java objects and HTTP input/output messages."}
{"index": 3004, "repo": "spring-web-6.0.11", "code": "package cbor\n\n// Implementation of HttpMessageConverter that can read and write CBOR using kotlinx.serialization.\npublic class KotlinSerializationCborHttpMessageConverter extends KotlinSerializationBinaryHttpMessageConverter<kotlinx.serialization.cbor.Cbor>;\n// Implementation of HttpMessageConverter that can read and write the CBOR data format using the dedicated Jackson 2.x extension.\npublic class MappingJackson2CborHttpMessageConverter extends AbstractJackson2HttpMessageConverter;\n", "des": "Provides an HttpMessageConverter for the CBOR data format."}
{"index": 3005, "repo": "spring-web-6.0.11", "code": "package feed\n\n// Abstract base class for Atom and RSS Feed message converters, using the ROME tools project.\npublic abstract class AbstractWireFeedHttpMessageConverter<T extends com.rometools.rome.feed.WireFeed> extends AbstractHttpMessageConverter<T>;\n// Implementation of HttpMessageConverter that can read and write Atom feeds.\npublic class AtomFeedHttpMessageConverter extends AbstractWireFeedHttpMessageConverter<com.rometools.rome.feed.atom.Feed>;\n// Implementation of HttpMessageConverter that can read and write RSS feeds.\npublic class RssChannelHttpMessageConverter extends AbstractWireFeedHttpMessageConverter<com.rometools.rome.feed.rss.Channel>;\n", "des": "Provides HttpMessageConverter implementations for handling Atom and RSS feeds."}
{"index": 3006, "repo": "spring-web-6.0.11", "code": "package json\n\n// Abstract base class for Jackson based and content type independent HttpMessageConverter implementations.\npublic abstract class AbstractJackson2HttpMessageConverter extends AbstractGenericHttpMessageConverter<Object>;\n// Common base class for plain JSON converters, e.g.\npublic abstract class AbstractJsonHttpMessageConverter extends AbstractGenericHttpMessageConverter<Object>;\n// A simple utility class for obtaining a Google Gson 2.x GsonBuilder which Base64-encodes byte[] properties when reading and writing JSON.\npublic abstract class GsonBuilderUtils extends Object;\n// A FactoryBean for creating a Google Gson 2.x Gson instance.\npublic class GsonFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<com.google.gson.Gson>, org.springframework.beans.factory.InitializingBean;\n// Implementation of HttpMessageConverter that can read and write JSON using the Google Gson library.\npublic class GsonHttpMessageConverter extends AbstractJsonHttpMessageConverter;\n// A builder used to create ObjectMapper instances with a fluent API.\npublic class Jackson2ObjectMapperBuilder extends Object;\n// A FactoryBean for creating a Jackson 2.x ObjectMapper (default) or XmlMapper (createXmlMapper property set to true) with setters to enable or disable Jackson features from within XML configuration.\npublic class Jackson2ObjectMapperFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ObjectMapper>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean;\n// Implementation of HttpMessageConverter that can read and write JSON using the JSON Binding API.\npublic class JsonbHttpMessageConverter extends AbstractJsonHttpMessageConverter;\n// Implementation of HttpMessageConverter that can read and write JSON using kotlinx.serialization.\npublic class KotlinSerializationJsonHttpMessageConverter extends KotlinSerializationStringHttpMessageConverter<kotlinx.serialization.json.Json>;\n// Implementation of HttpMessageConverter that can read and write JSON using Jackson 2.x's ObjectMapper.\npublic class MappingJackson2HttpMessageConverter extends AbstractJackson2HttpMessageConverter;\n", "des": "Provides HttpMessageConverter implementations for handling JSON."}
{"index": 3007, "repo": "spring-web-6.0.11", "code": "package protobuf\n\n// Implementation of HttpMessageConverter that can read and write Protocol Buffers using kotlinx.serialization.\npublic class KotlinSerializationProtobufHttpMessageConverter extends KotlinSerializationBinaryHttpMessageConverter<kotlinx.serialization.protobuf.ProtoBuf>;\n// An HttpMessageConverter that reads and writes com.google.protobuf.Messages using Google Protocol Buffers.\npublic class ProtobufHttpMessageConverter extends AbstractHttpMessageConverter<com.google.protobuf.Message>;\n// Subclass of ProtobufHttpMessageConverter which enforces the use of Protobuf 3 and its official library \"com.google.protobuf:protobuf-java-util\" for JSON processing.\npublic class ProtobufJsonFormatHttpMessageConverter extends ProtobufHttpMessageConverter;\n", "des": "Provides an HttpMessageConverter implementation for handling Google Protocol Buffers."}
{"index": 3008, "repo": "spring-web-6.0.11", "code": "package smile\n\n// Implementation of HttpMessageConverter that can read and write Smile data format (\"binary JSON\") using the dedicated Jackson 2.x extension.\npublic class MappingJackson2SmileHttpMessageConverter extends AbstractJackson2HttpMessageConverter;\n", "des": "Provides an HttpMessageConverter for the Smile data format (\"binary JSON\")."}
{"index": 3009, "repo": "spring-web-6.0.11", "code": "package support\n\n// Extension of FormHttpMessageConverter, adding support for XML and JSON-based parts.\npublic class AllEncompassingFormHttpMessageConverter extends FormHttpMessageConverter;\n", "des": "Provides a comprehensive HttpMessageConverter variant for form handling."}
{"index": 3010, "repo": "spring-web-6.0.11", "code": "package xml\n\n// Abstract base class for HttpMessageConverters that use JAXB2.\npublic abstract class AbstractJaxb2HttpMessageConverter<T> extends AbstractXmlHttpMessageConverter<T>;\n// Abstract base class for HttpMessageConverters that convert from/to XML.\npublic abstract class AbstractXmlHttpMessageConverter<T> extends AbstractHttpMessageConverter<T>;\n// An HttpMessageConverter that can read XML collections using JAXB2.\npublic class Jaxb2CollectionHttpMessageConverter<T extends Collection> extends AbstractJaxb2HttpMessageConverter<T> implements GenericHttpMessageConverter<T>;\n// Implementation of HttpMessageConverter that can read and write XML using JAXB2.\npublic class Jaxb2RootElementHttpMessageConverter extends AbstractJaxb2HttpMessageConverter<Object>;\n// Implementation of HttpMessageConverter that can read and write XML using Jackson 2.x extension component for reading and writing XML encoded data.\npublic class MappingJackson2XmlHttpMessageConverter extends AbstractJackson2HttpMessageConverter;\n// Implementation of HttpMessageConverter that can read and write XML using Spring's Marshaller and Unmarshaller abstractions.\npublic class MarshallingHttpMessageConverter extends AbstractXmlHttpMessageConverter<Object>;\n// Implementation of HttpMessageConverter that can read and write Source objects.\npublic class SourceHttpMessageConverter<T extends Source> extends AbstractHttpMessageConverter<T>;\n", "des": "Provides HttpMessageConverter implementations for handling XML."}
{"index": 3011, "repo": "spring-web-6.0.11", "code": "package server\n\n// Instrumentation for observing HTTP server applications.\npackage server.observation\n// Abstractions for reactive HTTP server support including a ServerHttpRequest and ServerHttpResponse along with an HttpHandler for processing.\npackage server.reactive\n// Implementation of ServerHttpResponse that delegates all calls to a given target ServerHttpResponse.\npublic class DelegatingServerHttpResponse extends Object implements ServerHttpResponse;\n// Structured representation of a URI path parsed via PathContainer.parsePath(String) into a sequence of PathContainer.Separator and PathContainer.PathSegment elements.\npublic interface PathContainer;\n// A path element, either separator or path segment.\npublic static interface PathContainer.Element;\n// Options to customize parsing based on the type of input path.\npublic static class PathContainer.Options extends Object;\n// Path segment element.\npublic static interface PathContainer.PathSegment extends PathContainer.Element;\n// Path separator element.\npublic static interface PathContainer.Separator extends PathContainer.Element;\n// Specialization of PathContainer that subdivides the path into a RequestPath.contextPath() and the remaining RequestPath.pathWithinApplication().\npublic interface RequestPath extends PathContainer;\n// A control that can put the processing of an HTTP request in asynchronous mode during which the response remains open until explicitly closed.\npublic interface ServerHttpAsyncRequestControl;\n// Represents a server-side HTTP request.\npublic interface ServerHttpRequest extends HttpRequest, HttpInputMessage;\n// Represents a server-side HTTP response.\npublic interface ServerHttpResponse extends HttpOutputMessage, Flushable, Closeable;\n// A ServerHttpAsyncRequestControl to use on Servlet containers.\npublic class ServletServerHttpAsyncRequestControl extends Object implements ServerHttpAsyncRequestControl, AsyncListener;\n// ServerHttpRequest implementation that is based on a HttpServletRequest.\npublic class ServletServerHttpRequest extends Object implements ServerHttpRequest;\n// ServerHttpResponse implementation that is based on a HttpServletResponse.\npublic class ServletServerHttpResponse extends Object implements ServerHttpResponse;\n", "des": "Contains an abstraction over server-side HTTP."}
{"index": 3012, "repo": "spring-web-6.0.11", "code": "package observation\n\n// Default ServerRequestObservationConvention.\npublic class DefaultServerRequestObservationConvention extends Object implements ServerRequestObservationConvention;\n// Documented KeyValues for the HTTP server observations for Servlet-based web applications.\npublic enum ServerHttpObservationDocumentation extends Enum<ServerHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation;\n// \npublic static enum ServerHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\n// \npublic static enum ServerHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\n// Context that holds information for metadata collection regarding Servlet HTTP requests observations.\npublic class ServerRequestObservationContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<HttpServletRequest,HttpServletResponse>;\n// Interface for an ObservationConvention for Servlet HTTP requests.\npublic interface ServerRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ServerRequestObservationContext>;\n", "des": "Instrumentation for observing HTTP server applications."}
{"index": 3013, "repo": "spring-web-6.0.11", "code": "package reactive\n\n// Instrumentation for observing reactive HTTP server applications.\npackage reactive.observation\n// Abstract base class for Publisher implementations that bridge between event-listener read APIs and Reactive Streams.\npublic abstract class AbstractListenerReadPublisher<T> extends Object implements Publisher<T>;\n// Abstract base class for listener-based server responses.\npublic abstract class AbstractListenerServerHttpResponse extends AbstractServerHttpResponse;\n// An alternative to AbstractListenerWriteProcessor but instead writing a Publisher<Publisher<T>> with flush boundaries enforces after the completion of each nested Publisher.\npublic abstract class AbstractListenerWriteFlushProcessor<T> extends Object implements Processor<Publisher<? extends T>,Void>;\n// Abstract base class for Processor implementations that bridge between event-listener write APIs and Reactive Streams.\npublic abstract class AbstractListenerWriteProcessor<T> extends Object implements Processor<T,Void>;\n// Common base class for ServerHttpRequest implementations.\npublic abstract class AbstractServerHttpRequest extends Object implements ServerHttpRequest;\n// Base class for ServerHttpResponse implementations.\npublic abstract class AbstractServerHttpResponse extends Object implements ServerHttpResponse;\n// Given a write function that accepts a source Publisher<T> to write with and returns Publisher<Void> for the result, this operator helps to defer the invocation of the write function, until we know if the source publisher will begin publishing without an error.\npublic class ChannelSendOperator<T> extends reactor.core.publisher.Mono<Void> implements reactor.core.Scannable;\n// HttpHandler delegating requests to one of several HttpHandler's based on simple, prefix-based mappings.\npublic class ContextPathCompositeHandler extends Object implements HttpHandler;\n// Lowest level contract for reactive HTTP request handling that serves as a common denominator across different runtimes.\npublic interface HttpHandler;\n// Contract for applying a decorator to an HttpHandler.\npublic interface HttpHandlerDecoratorFactory extends Function<HttpHandler,HttpHandler>;\n// ServerHttpResponse decorator for HTTP HEAD requests.\npublic class HttpHeadResponseDecorator extends ServerHttpResponseDecorator;\n// ServletHttpHandlerAdapter extension that uses Jetty APIs for writing to the response with ByteBuffer.\npublic class JettyHttpHandlerAdapter extends ServletHttpHandlerAdapter;\n", "des": "Abstractions for reactive HTTP server support including a ServerHttpRequest and ServerHttpResponse along with an HttpHandler for processing."}
{"index": 3014, "repo": "spring-web-6.0.11", "code": "package observation\n\n// Default ServerRequestObservationConvention.\npublic class DefaultServerRequestObservationConvention extends Object implements ServerRequestObservationConvention;\n// Documented KeyValues for the HTTP server observations for reactive web applications.\npublic enum ServerHttpObservationDocumentation extends Enum<ServerHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation;\n// \npublic static enum ServerHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\n// \npublic static enum ServerHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\n// Context that holds information for metadata collection regarding reactive HTTP requests observations.\npublic class ServerRequestObservationContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<ServerHttpRequest,ServerHttpResponse>;\n// Interface for an ObservationConvention for reactive HTTP requests.\npublic interface ServerRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ServerRequestObservationContext>;\n", "des": "Instrumentation for observing reactive HTTP server applications."}
{"index": 3015, "repo": "spring-web-6.0.11", "code": "package web\n\n// This package contains classes used to determine the requested the media types in a request.\npackage web.accept\n// Provides web-specific data binding functionality.\npackage web.bind\n// Core package of the client-side web support.\npackage web.client\n// Contains a variant of the application context interface for web applications, and the ContextLoaderListener that bootstraps a root web application context.\npackage web.context\n// Support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy.\npackage web.cors\n// Provides generic filter base classes allowing for bean-style configuration.\npackage web.filter\n// Support classes for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext.\npackage web.jsf\n// Common infrastructure for handler method processing, as used by Spring MVC's org.springframework.web.servlet.mvc.method package.\npackage web.method\n// Multipart resolution framework for handling file uploads.\npackage web.multipart\n// Core interfaces and classes for Spring's generic, reactive web support.\npackage web.server\n// Miscellaneous web utility classes, such as HTML escaping and cookie handling.\npackage web.util\n// Representation of a complete RFC 7807 error response including status, headers, and an RFC 7807 formatted ProblemDetail body.\npublic interface ErrorResponse;\n// Builder for an ErrorResponse.\npublic static interface ErrorResponse.Builder;\n// RuntimeException that implements ErrorResponse to expose an HTTP status, response headers, and a body formatted as an RFC 7807 ProblemDetail.\npublic class ErrorResponseException extends org.springframework.core.NestedRuntimeException implements ErrorResponse;\n// Abstract base for exceptions related to media types.\npublic abstract class HttpMediaTypeException extends ServletException implements ErrorResponse;\n// Exception thrown when the request handler cannot generate a response that is acceptable by the client.\npublic class HttpMediaTypeNotAcceptableException extends HttpMediaTypeException;\n// Exception thrown when a client POSTs, PUTs, or PATCHes content of a type not supported by request handler.\npublic class HttpMediaTypeNotSupportedException extends HttpMediaTypeException;\n// Plain handler interface for components that process HTTP requests, analogous to a Servlet.\n@FunctionalInterface public interface HttpRequestHandler;\n", "des": "Common, generic interfaces that define minimal boundary points between Spring's web infrastructure and other framework modules."}
{"index": 3016, "repo": "spring-web-6.0.11", "code": "package accept\n\n// Base class for ContentNegotiationStrategy implementations with the steps to resolve a request to media types.\npublic abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver implements ContentNegotiationStrategy;\n// Central class to determine requested media types for a request.\npublic class ContentNegotiationManager extends Object implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver;\n// Factory to create a ContentNegotiationManager and configure it with ContentNegotiationStrategy instances.\npublic class ContentNegotiationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ContentNegotiationManager>, ServletContextAware, org.springframework.beans.factory.InitializingBean;\n// A strategy for resolving the requested media types for a request.\n@FunctionalInterface public interface ContentNegotiationStrategy;\n// A ContentNegotiationStrategy that returns a fixed content type.\npublic class FixedContentNegotiationStrategy extends Object implements ContentNegotiationStrategy;\n// A ContentNegotiationStrategy that checks the 'Accept' request header.\npublic class HeaderContentNegotiationStrategy extends Object implements ContentNegotiationStrategy;\n// An implementation of MediaTypeFileExtensionResolver that maintains lookups between file extensions and MediaTypes in both directions.\npublic class MappingMediaTypeFileExtensionResolver extends Object implements MediaTypeFileExtensionResolver;\n// Strategy to resolve a MediaType to a list of file extensions — for example, to resolve \"application/json\" to \"json\".\npublic interface MediaTypeFileExtensionResolver;\n// Strategy that resolves the requested content type from a query parameter.\npublic class ParameterContentNegotiationStrategy extends AbstractMappingContentNegotiationStrategy;\n// \n@Deprecated public class PathExtensionContentNegotiationStrategy extends AbstractMappingContentNegotiationStrategy;\n// \n@Deprecated public class ServletPathExtensionContentNegotiationStrategy extends PathExtensionContentNegotiationStrategy;\n", "des": "This package contains classes used to determine the requested the media types in a request."}
{"index": 3017, "repo": "spring-web-6.0.11", "code": "package bind\n\n// Annotations for binding requests to controllers and handler methods as well as for binding request parameters to method arguments.\npackage bind.annotation\n// Support classes for web data binding.\npackage bind.support\n// Errors wrapper that adds automatic HTML escaping to the wrapped instance, for convenient usage in HTML views.\npublic class EscapedErrors extends Object implements org.springframework.validation.Errors;\n// Exception to be thrown when validation on an argument annotated with @Valid fails.\npublic class MethodArgumentNotValidException extends org.springframework.validation.BindException implements ErrorResponse;\n// ServletRequestBindingException subclass that indicates that a matrix variable expected in the method parameters of an @RequestMapping method is not present among the matrix variables extracted from the URL.\npublic class MissingMatrixVariableException extends MissingRequestValueException;\n// ServletRequestBindingException subclass that indicates that a path variable expected in the method parameters of an @RequestMapping method is not present among the URI variables extracted from the URL.\npublic class MissingPathVariableException extends MissingRequestValueException;\n// ServletRequestBindingException subclass that indicates that a request cookie expected in the method parameters of an @RequestMapping method is not present.\npublic class MissingRequestCookieException extends MissingRequestValueException;\n// ServletRequestBindingException subclass that indicates that a request header expected in the method parameters of an @RequestMapping method is not present.\npublic class MissingRequestHeaderException extends MissingRequestValueException;\n// Base class for ServletRequestBindingException exceptions that could not bind because the request value is required but is either missing or otherwise resolves to null after conversion.\npublic class MissingRequestValueException extends ServletRequestBindingException;\n// ServletRequestBindingException subclass that indicates a missing parameter.\npublic class MissingServletRequestParameterException extends MissingRequestValueException;\n// Fatal binding exception, thrown when we want to treat binding exceptions as unrecoverable.\npublic class ServletRequestBindingException extends ServletException implements ErrorResponse;\n// Special DataBinder to perform data binding from servlet request parameters to JavaBeans, including support for multipart files.\npublic class ServletRequestDataBinder extends WebDataBinder;\n// PropertyValues implementation created from parameters in a ServletRequest.\npublic class ServletRequestParameterPropertyValues extends org.springframework.beans.MutablePropertyValues;\n// Parameter extraction methods, for an approach distinct from data binding, in which parameters of specific types are required.\npublic abstract class ServletRequestUtils extends Object;\n", "des": "Provides web-specific data binding functionality."}
{"index": 3018, "repo": "spring-web-6.0.11", "code": "package annotation\n\n// Specialization of @Component for classes that declare @ExceptionHandler, @InitBinder, or @ModelAttribute methods to be shared across multiple @Controller classes.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface ControllerAdvice;\n// Annotation to indicate that a method parameter is bound to an HTTP cookie.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface CookieValue;\n// Annotation for permitting cross-origin requests on specific handler classes and/or handler methods.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface CrossOrigin;\n// Annotation for mapping HTTP DELETE requests onto specific handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=DELETE) public @interface DeleteMapping;\n// Annotation for handling exceptions in specific handler classes and/or handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(org.springframework.web.bind.annotation.ExceptionHandlerReflectiveProcessor.class) public @interface ExceptionHandler;\n// Annotation for mapping HTTP GET requests onto specific handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=GET) public @interface GetMapping;\n// Annotation that identifies methods that initialize the WebDataBinder which will be used for populating command and form object arguments of annotated handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective public @interface InitBinder;\n// Meta annotation that indicates a web mapping annotation.\n@Target(ANNOTATION_TYPE) @Retention(RUNTIME) public @interface Mapping;\n// Annotation which indicates that a method parameter should be bound to a name-value pair within a path segment.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface MatrixVariable;\n// Annotation that binds a method parameter or method return value to a named model attribute, exposed to a web view.\n@Target({PARAMETER,METHOD}) @Retention(RUNTIME) @Documented @Reflective public @interface ModelAttribute;\n// Annotation for mapping HTTP PATCH requests onto specific handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=PATCH) public @interface PatchMapping;\n", "des": "Annotations for binding requests to controllers and handler methods as well as for binding request parameters to method arguments."}
{"index": 3019, "repo": "spring-web-6.0.11", "code": "package support\n\n// Convenient WebBindingInitializer for declarative configuration in a Spring application context.\npublic class ConfigurableWebBindingInitializer extends Object implements WebBindingInitializer;\n// Create a WebRequestDataBinder instance and initialize it with a WebBindingInitializer.\npublic class DefaultDataBinderFactory extends Object implements WebDataBinderFactory;\n// Default implementation of the SessionAttributeStore interface, storing the attributes in the WebRequest session (i.e.\npublic class DefaultSessionAttributeStore extends Object implements SessionAttributeStore;\n// Strategy interface for storing model attributes in a backend session.\npublic interface SessionAttributeStore;\n// Simple interface that can be injected into handler methods, allowing them to signal that their session processing is complete.\npublic interface SessionStatus;\n// Simple implementation of the SessionStatus interface, keeping the complete flag as an instance variable.\npublic class SimpleSessionStatus extends Object implements SessionStatus;\n// JSR-303 ConstraintValidatorFactory implementation that delegates to the current Spring WebApplicationContext for creating autowired ConstraintValidator instances.\npublic class SpringWebConstraintValidatorFactory extends Object implements ConstraintValidatorFactory;\n// SPI for resolving custom arguments for a specific handler method parameter.\n@FunctionalInterface public interface WebArgumentResolver;\n// Callback interface for initializing a WebDataBinder for performing data binding in the context of a specific web request.\npublic interface WebBindingInitializer;\n// A factory for creating a WebDataBinder instance for a named target object.\npublic interface WebDataBinderFactory;\n// ServerWebInputException subclass that indicates a data binding or validation failure.\npublic class WebExchangeBindException extends ServerWebInputException implements org.springframework.validation.BindingResult;\n// Specialized DataBinder to perform data binding from URL query parameters or form data in the request data to Java objects.\npublic class WebExchangeDataBinder extends WebDataBinder;\n// Special DataBinder to perform data binding from web request parameters to JavaBeans, including support for multipart files.\npublic class WebRequestDataBinder extends WebDataBinder;\n", "des": "Support classes for web data binding."}
{"index": 3020, "repo": "spring-web-6.0.11", "code": "package client\n\n// Classes supporting the org.springframework.web.client package.\npackage client.support\n// Spring's default implementation of the ResponseErrorHandler interface.\npublic class DefaultResponseErrorHandler extends Object implements ResponseErrorHandler;\n// Implementation of ResponseErrorHandler that uses HttpMessageConverters to convert HTTP error responses to RestClientExceptions.\npublic class ExtractingResponseErrorHandler extends DefaultResponseErrorHandler;\n// Exception thrown when an HTTP 4xx is received.\npublic class HttpClientErrorException extends HttpStatusCodeException;\n// HttpClientErrorException for status HTTP 400 Bad Request.\npublic static final class HttpClientErrorException.BadRequest extends HttpClientErrorException;\n// HttpClientErrorException for status HTTP 409 Conflict.\npublic static final class HttpClientErrorException.Conflict extends HttpClientErrorException;\n// HttpClientErrorException for status HTTP 403 Forbidden.\npublic static final class HttpClientErrorException.Forbidden extends HttpClientErrorException;\n// HttpClientErrorException for status HTTP 410 Gone.\npublic static final class HttpClientErrorException.Gone extends HttpClientErrorException;\n// HttpClientErrorException for status HTTP 405 Method Not Allowed.\npublic static final class HttpClientErrorException.MethodNotAllowed extends HttpClientErrorException;\n// HttpClientErrorException for status HTTP 406 Not Acceptable.\npublic static final class HttpClientErrorException.NotAcceptable extends HttpClientErrorException;\n// HttpClientErrorException for status HTTP 404 Not Found.\npublic static final class HttpClientErrorException.NotFound extends HttpClientErrorException;\n// HttpClientErrorException for status HTTP 429 Too Many Requests.\npublic static final class HttpClientErrorException.TooManyRequests extends HttpClientErrorException;\n// HttpClientErrorException for status HTTP 401 Unauthorized.\npublic static final class HttpClientErrorException.Unauthorized extends HttpClientErrorException;\n// HttpClientErrorException for status HTTP 422 Unprocessable Entity.\npublic static final class HttpClientErrorException.UnprocessableEntity extends HttpClientErrorException;\n// HttpClientErrorException for status HTTP 415 Unsupported Media Type.\npublic static final class HttpClientErrorException.UnsupportedMediaType extends HttpClientErrorException;\n// Response extractor that uses the given entity converters to convert the response into a type T.\npublic class HttpMessageConverterExtractor<T> extends Object implements ResponseExtractor<T>;\n// Exception thrown when an HTTP 5xx is received.\npublic class HttpServerErrorException extends HttpStatusCodeException;\n// HttpServerErrorException for HTTP status 502 Bad Gateway.\npublic static final class HttpServerErrorException.BadGateway extends HttpServerErrorException;\n// HttpServerErrorException for status HTTP 504 Gateway Timeout.\npublic static final class HttpServerErrorException.GatewayTimeout extends HttpServerErrorException;\n", "des": "Core package of the client-side web support."}
{"index": 3021, "repo": "spring-web-6.0.11", "code": "package support\n\n// Convenient superclass for application classes that need REST access.\npublic class RestGatewaySupport extends Object;\n", "des": "Classes supporting the org.springframework.web.client package."}
{"index": 3022, "repo": "spring-web-6.0.11", "code": "package context\n\n// Provides convenience annotations for web scopes.\npackage context.annotation\n// Support for generic request context holding, in particular for scoping of application objects per HTTP request or HTTP session.\npackage context.request\n// Classes supporting the org.springframework.web.context package, such as WebApplicationContext implementations and various utility classes.\npackage context.support\n// Convenient base class for WebApplicationInitializer implementations that register a ContextLoaderListener in the servlet context.\npublic abstract class AbstractContextLoaderInitializer extends Object implements WebApplicationInitializer;\n// Interface to be implemented by configurable web application contexts.\npublic interface ConfigurableWebApplicationContext extends WebApplicationContext, org.springframework.context.ConfigurableApplicationContext;\n// Specialization of ConfigurableEnvironment allowing initialization of servlet-related PropertySource objects at the earliest moment that the ServletContext and (optionally) ServletConfig become available.\npublic interface ConfigurableWebEnvironment extends org.springframework.core.env.ConfigurableEnvironment;\n// Web application listener that cleans up remaining disposable attributes in the ServletContext, i.e.\npublic class ContextCleanupListener extends Object implements ServletContextListener;\n// Performs the actual initialization work for the root application context.\npublic class ContextLoader extends Object;\n// Bootstrap listener to start up and shut down Spring's root WebApplicationContext.\npublic class ContextLoaderListener extends ContextLoader implements ServletContextListener;\n// Interface to be implemented by any object that wishes to be notified of the ServletConfig (typically determined by the WebApplicationContext) that it runs in.\npublic interface ServletConfigAware extends org.springframework.beans.factory.Aware;\n// Interface to be implemented by any object that wishes to be notified of the ServletContext (typically determined by the WebApplicationContext) that it runs in.\npublic interface ServletContextAware extends org.springframework.beans.factory.Aware;\n// Interface to provide configuration for a web application.\npublic interface WebApplicationContext extends org.springframework.context.ApplicationContext;\n", "des": "Contains a variant of the application context interface for web applications, and the ContextLoaderListener that bootstraps a root web application context."}
{"index": 3023, "repo": "spring-web-6.0.11", "code": "package annotation\n\n// @ApplicationScope is a specialization of @Scope for a component whose lifecycle is bound to the current web application.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"application\") public @interface ApplicationScope;\n// @RequestScope is a specialization of @Scope for a component whose lifecycle is bound to the current web request.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"request\") public @interface RequestScope;\n// @SessionScope is a specialization of @Scope for a component whose lifecycle is bound to the current web session.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"session\") public @interface SessionScope;\n", "des": "Provides convenience annotations for web scopes."}
{"index": 3024, "repo": "spring-web-6.0.11", "code": "package request\n\n// Support for asynchronous request processing.\npackage request.async\n// Abstract support class for RequestAttributes implementations, offering a request completion mechanism for request-specific destruction callbacks and for updating accessed session attributes.\npublic abstract class AbstractRequestAttributes extends Object implements RequestAttributes;\n// Abstract Scope implementation that reads from a particular scope in the current thread-bound RequestAttributes object.\npublic abstract class AbstractRequestAttributesScope extends Object implements org.springframework.beans.factory.config.Scope;\n// Extends WebRequestInterceptor with a callback method invoked during asynchronous request handling.\npublic interface AsyncWebRequestInterceptor extends WebRequestInterceptor;\n// Adapter that implements the Servlet HttpSessionBindingListener interface, wrapping a session destruction callback.\npublic class DestructionCallbackBindingListener extends Object implements HttpSessionBindingListener, Serializable;\n// RequestAttributes adapter for a JSF FacesContext.\npublic class FacesRequestAttributes extends Object implements RequestAttributes;\n// WebRequest adapter for a JSF FacesContext.\npublic class FacesWebRequest extends FacesRequestAttributes implements NativeWebRequest;\n// Extension of the WebRequest interface, exposing the native request and response objects in a generic fashion.\npublic interface NativeWebRequest extends WebRequest;\n// Abstraction for accessing attribute objects associated with a request.\npublic interface RequestAttributes;\n// Holder class to expose the web request in the form of a thread-bound RequestAttributes object.\npublic abstract class RequestContextHolder extends Object;\n// Servlet listener that exposes the request to the current thread, through both LocaleContextHolder and RequestContextHolder.\npublic class RequestContextListener extends Object implements ServletRequestListener;\n// Request-backed Scope implementation.\npublic class RequestScope extends AbstractRequestAttributesScope;\n// Servlet-based implementation of the RequestAttributes interface.\npublic class ServletRequestAttributes extends AbstractRequestAttributes;\n// WebRequest adapter for an HttpServletRequest.\npublic class ServletWebRequest extends ServletRequestAttributes implements NativeWebRequest;\n// Session-backed Scope implementation.\npublic class SessionScope extends AbstractRequestAttributesScope;\n// Generic interface for a web request.\npublic interface WebRequest extends RequestAttributes;\n// Interface for general web request interception.\npublic interface WebRequestInterceptor;\n", "des": "Support for generic request context holding, in particular for scoping of application objects per HTTP request or HTTP session."}
{"index": 3025, "repo": "spring-web-6.0.11", "code": "package async\n\n// Exception to be thrown when an async request times out.\npublic class AsyncRequestTimeoutException extends RuntimeException implements ErrorResponse;\n// Extends NativeWebRequest with methods for asynchronous request processing.\npublic interface AsyncWebRequest extends NativeWebRequest;\n// Intercepts concurrent request handling, where the concurrent result is obtained by executing a Callable on behalf of the application with an AsyncTaskExecutor.\npublic interface CallableProcessingInterceptor;\n// DeferredResult provides an alternative to using a Callable for asynchronous request processing.\npublic class DeferredResult<T> extends Object;\n// Handles a DeferredResult value when set.\n@FunctionalInterface public static interface DeferredResult.DeferredResultHandler;\n// Intercepts concurrent request handling, where the concurrent result is obtained by waiting for a DeferredResult to be set from a thread chosen by the application (e.g.\npublic interface DeferredResultProcessingInterceptor;\n// A Servlet implementation of AsyncWebRequest.\npublic class StandardServletAsyncWebRequest extends ServletWebRequest implements AsyncWebRequest, AsyncListener;\n// Sends a 503 (SERVICE_UNAVAILABLE) in case of a timeout if the response is not already committed.\npublic class TimeoutCallableProcessingInterceptor extends Object implements CallableProcessingInterceptor;\n// Sends a 503 (SERVICE_UNAVAILABLE) in case of a timeout if the response is not already committed.\npublic class TimeoutDeferredResultProcessingInterceptor extends Object implements DeferredResultProcessingInterceptor;\n// The central class for managing asynchronous request processing, mainly intended as an SPI and not typically used directly by application classes.\npublic final class WebAsyncManager extends Object;\n// Holder for a Callable, a timeout value, and a task executor.\npublic class WebAsyncTask<V> extends Object implements org.springframework.beans.factory.BeanFactoryAware;\n// Utility methods related to processing asynchronous web requests.\npublic abstract class WebAsyncUtils extends Object;\n", "des": "Support for asynchronous request processing."}
{"index": 3026, "repo": "spring-web-6.0.11", "code": "package support\n\n// AbstractRefreshableApplicationContext subclass which implements the ConfigurableWebApplicationContext interface for web environments.\npublic abstract class AbstractRefreshableWebApplicationContext extends org.springframework.context.support.AbstractRefreshableConfigApplicationContext implements ConfigurableWebApplicationContext, org.springframework.ui.context.ThemeSource;\n// WebApplicationContext implementation which accepts component classes as input — in particular @Configuration classes, but also plain @Component classes as well as JSR-330 compliant classes using jakarta.inject annotations.\npublic class AnnotationConfigWebApplicationContext extends AbstractRefreshableWebApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry;\n// HttpServletRequest decorator that makes all Spring beans in a given WebApplicationContext accessible as request attributes, through lazy checking once an attribute gets accessed.\npublic class ContextExposingHttpServletRequest extends HttpServletRequestWrapper;\n// Subclass of GenericApplicationContext, suitable for web environments.\npublic class GenericWebApplicationContext extends org.springframework.context.support.GenericApplicationContext implements ConfigurableWebApplicationContext, org.springframework.ui.context.ThemeSource;\n// WebApplicationContext implementation which takes its configuration from Groovy bean definition scripts and/or XML files, as understood by a GroovyBeanDefinitionReader.\npublic class GroovyWebApplicationContext extends AbstractRefreshableWebApplicationContext implements groovy.lang.GroovyObject;\n// Simple HttpServlet that delegates to an HttpRequestHandler bean defined in Spring's root web application context.\npublic class HttpRequestHandlerServlet extends HttpServlet;\n// Event raised when a request is handled within an ApplicationContext.\npublic class RequestHandledEvent extends org.springframework.context.ApplicationEvent;\n// PropertySource that reads init parameters from a ServletConfig object.\npublic class ServletConfigPropertySource extends org.springframework.core.env.EnumerablePropertySource<ServletConfig>;\n// Exporter that takes Spring-defined objects and exposes them as ServletContext attributes.\npublic class ServletContextAttributeExporter extends Object implements ServletContextAware;\n// FactoryBean that fetches a specific, existing ServletContext attribute.\npublic class ServletContextAttributeFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Object>, ServletContextAware;\n// BeanPostProcessor implementation that passes the ServletContext to beans that implement the ServletContextAware interface.\npublic class ServletContextAwareProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor;\n", "des": "Classes supporting the org.springframework.web.context package, such as WebApplicationContext implementations and various utility classes."}
{"index": 3027, "repo": "spring-web-6.0.11", "code": "package cors\n\n// Reactive support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy.\npackage cors.reactive\n// A container for CORS configuration along with methods to check against the actual origin, HTTP methods, and headers of a given request.\npublic class CorsConfiguration extends Object;\n// Interface to be implemented by classes (usually HTTP request handlers) that provides a CorsConfiguration instance based on the provided request.\npublic interface CorsConfigurationSource;\n// A strategy that takes a request and a CorsConfiguration and updates the response.\npublic interface CorsProcessor;\n// Utility class for CORS request handling based on the CORS W3C recommendation.\npublic abstract class CorsUtils extends Object;\n// The default implementation of CorsProcessor, as defined by the CORS W3C recommendation.\npublic class DefaultCorsProcessor extends Object implements CorsProcessor;\n// CorsConfigurationSource that uses URL path patterns to select the CorsConfiguration for a request.\npublic class UrlBasedCorsConfigurationSource extends Object implements CorsConfigurationSource;\n", "des": "Support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy."}
{"index": 3028, "repo": "spring-web-6.0.11", "code": "package reactive\n\n// Interface to be implemented by classes (usually HTTP request handlers) that provides a CorsConfiguration instance based on the provided reactive request.\npublic interface CorsConfigurationSource;\n// A strategy to apply CORS validation checks and updates to a ServerWebExchange, either rejecting through the response or adding CORS related headers, based on a pre-selected CorsConfiguration.\npublic interface CorsProcessor;\n// Utility class for CORS reactive request handling based on the CORS W3C recommendation.\npublic abstract class CorsUtils extends Object;\n// WebFilter that handles CORS preflight requests and intercepts CORS simple and actual requests thanks to a CorsProcessor implementation (DefaultCorsProcessor by default) in order to add the relevant CORS response headers (like Access-Control-Allow-Origin) using the provided CorsConfigurationSource (for example an UrlBasedCorsConfigurationSource instance.\npublic class CorsWebFilter extends Object implements WebFilter;\n// The default implementation of CorsProcessor, as defined by the CORS W3C recommendation.\npublic class DefaultCorsProcessor extends Object implements CorsProcessor;\n// Handler for CORS pre-flight requests.\npublic interface PreFlightRequestHandler;\n// WebFilter that handles pre-flight requests through a PreFlightRequestHandler and bypasses the rest of the chain.\npublic class PreFlightRequestWebFilter extends Object implements WebFilter;\n// CorsConfigurationSource that uses URL patterns to select the CorsConfiguration for a request.\npublic class UrlBasedCorsConfigurationSource extends Object implements CorsConfigurationSource;\n", "des": "Reactive support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy."}
{"index": 3029, "repo": "spring-web-6.0.11", "code": "package filter\n\n// WebFilter implementations for use in reactive web applications.\npackage filter.reactive\n// Base class for Filters that perform logging operations before and after a request is processed.\npublic abstract class AbstractRequestLoggingFilter extends OncePerRequestFilter;\n// Servlet Filter that allows one to specify a character encoding for requests.\npublic class CharacterEncodingFilter extends OncePerRequestFilter;\n// Simple request logging filter that writes the request URI (and optionally the query string) to the Commons Log.\npublic class CommonsRequestLoggingFilter extends AbstractRequestLoggingFilter;\n// A generic composite servlet Filter that just delegates its behavior to a chain (list) of user-supplied filters, achieving the functionality of a FilterChain, but conveniently using only Filter instances.\npublic class CompositeFilter extends Object implements Filter;\n// Filter to handle CORS pre-flight requests and intercept CORS simple and actual requests with a CorsProcessor, and to update the response, e.g.\npublic class CorsFilter extends OncePerRequestFilter;\n// Proxy for a standard Servlet Filter, delegating to a Spring-managed bean that implements the Filter interface.\npublic class DelegatingFilterProxy extends GenericFilterBean;\n// Filter that parses form data for HTTP PUT, PATCH, and DELETE requests and exposes it as Servlet request parameters.\npublic class FormContentFilter extends OncePerRequestFilter;\n// Extract values from \"Forwarded\" and \"X-Forwarded-*\" headers, wrap the request and response, and make they reflect the client-originated protocol and address in the following methods: getServerName() getServerPort() getScheme() isSecure() sendRedirect(String).\npublic class ForwardedHeaderFilter extends OncePerRequestFilter;\n// Simple base implementation of Filter which treats its config parameters (init-param entries within the filter tag in web.xml) as bean properties.\npublic abstract class GenericFilterBean extends Object implements Filter, org.springframework.beans.factory.BeanNameAware, org.springframework.context.EnvironmentAware, org.springframework.core.env.EnvironmentCapable, ServletContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\n// Filter that converts posted method parameters into HTTP methods, retrievable via HttpServletRequest.getMethod().\npublic class HiddenHttpMethodFilter extends OncePerRequestFilter;\n", "des": "Provides generic filter base classes allowing for bean-style configuration."}
{"index": 3030, "repo": "spring-web-6.0.11", "code": "package reactive\n\n// Reactive WebFilter that converts posted method parameters into HTTP methods, retrievable via HttpRequest.getMethod().\npublic class HiddenHttpMethodFilter extends Object implements WebFilter;\n// WebFilter that creates observations for HTTP exchanges.\npublic class ServerHttpObservationFilter extends Object implements WebFilter;\n// Inserts an attribute in the Reactor Context that makes the current ServerWebExchange available under the attribute name ServerWebExchangeContextFilter.EXCHANGE_CONTEXT_ATTRIBUTE.\npublic class ServerWebExchangeContextFilter extends Object implements WebFilter;\n", "des": "WebFilter implementations for use in reactive web applications."}
{"index": 3031, "repo": "spring-web-6.0.11", "code": "package jsf\n\n// ELResolvers for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext.\npackage jsf.el\n// Base class for JSF NavigationHandler implementations that want to be capable of decorating an original NavigationHandler.\npublic abstract class DecoratingNavigationHandler extends NavigationHandler;\n// JSF NavigationHandler implementation that delegates to a NavigationHandler bean obtained from the Spring root WebApplicationContext.\npublic class DelegatingNavigationHandlerProxy extends NavigationHandler;\n// JSF PhaseListener implementation that delegates to one or more Spring-managed PhaseListener beans coming from the Spring root WebApplicationContext.\npublic class DelegatingPhaseListenerMulticaster extends Object implements PhaseListener;\n// Convenience methods to retrieve Spring's root WebApplicationContext for a given JSF FacesContext.\npublic abstract class FacesContextUtils extends Object;\n", "des": "Support classes for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext."}
{"index": 3032, "repo": "spring-web-6.0.11", "code": "package el\n\n// JSF ELResolver that delegates to the Spring root WebApplicationContext, resolving name references to Spring-defined beans.\npublic class SpringBeanFacesELResolver extends ELResolver;\n// Special JSF ELResolver that exposes the Spring WebApplicationContext instance under a variable named \"webApplicationContext\".\npublic class WebApplicationContextFacesELResolver extends ELResolver;\n", "des": "ELResolvers for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext."}
{"index": 3033, "repo": "spring-web-6.0.11", "code": "package method\n\n// Support classes for annotation-based handler method processing.\npackage method.annotation\n// Generic support classes for handler method processing.\npackage method.support\n// Encapsulates information about an @ControllerAdvice Spring-managed bean without necessarily requiring it to be instantiated.\npublic class ControllerAdviceBean extends Object implements org.springframework.core.Ordered;\n// Encapsulates information about a handler method consisting of a method and a bean.\npublic class HandlerMethod extends Object;\n// A Predicate to match request handling component types if any of the following selectors match: Base packages -- for selecting handlers by their package.\npublic final class HandlerTypePredicate extends Object implements Predicate<Class<?>>;\n// A HandlerTypePredicate builder.\npublic static class HandlerTypePredicate.Builder extends Object;\n", "des": "Common infrastructure for handler method processing, as used by Spring MVC's org.springframework.web.servlet.mvc.method package."}
{"index": 3034, "repo": "spring-web-6.0.11", "code": "package annotation\n\n// A base abstract class to resolve method arguments annotated with @CookieValue.\npublic abstract class AbstractCookieValueMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver;\n// Abstract base class for resolving method arguments from a named value.\npublic abstract class AbstractNamedValueMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver;\n// Represents the information about a named value, including name, whether it's required and a default value.\nprotected static class AbstractNamedValueMethodArgumentResolver.NamedValueInfo extends Object;\n// An abstract base class adapting a WebArgumentResolver to the HandlerMethodArgumentResolver contract.\npublic abstract class AbstractWebArgumentResolverAdapter extends Object implements HandlerMethodArgumentResolver;\n// Resolves Errors method arguments.\npublic class ErrorsMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver;\n// Discovers @ExceptionHandler methods in a given class, including all of its superclasses, and helps to resolve a given Exception to the exception types supported by a given Method.\npublic class ExceptionHandlerMethodResolver extends Object;\n// Resolves method arguments annotated with @Value.\npublic class ExpressionValueMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver;\n// Adds initialization to a WebDataBinder via @InitBinder methods.\npublic class InitBinderDataBinderFactory extends DefaultDataBinderFactory;\n// Resolves Map method arguments and handles Map return values.\npublic class MapMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler;\n// A ConversionNotSupportedException raised while resolving a method argument.\npublic class MethodArgumentConversionNotSupportedException extends org.springframework.beans.ConversionNotSupportedException;\n// A TypeMismatchException raised while resolving a controller method argument.\npublic class MethodArgumentTypeMismatchException extends org.springframework.beans.TypeMismatchException;\n// Resolve @ModelAttribute annotated method arguments and handle return values from @ModelAttribute annotated methods.\npublic class ModelAttributeMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler;\n// Assist with initialization of the Model before controller method invocation and with updates to it after the invocation.\npublic final class ModelFactory extends Object;\n// Resolves Model arguments and handles Model return values.\npublic class ModelMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler;\n// Resolves Map method arguments annotated with @RequestHeader.\npublic class RequestHeaderMapMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver;\n", "des": "Support classes for annotation-based handler method processing."}
{"index": 3035, "repo": "spring-web-6.0.11", "code": "package support\n\n// A return value handler that supports async types.\npublic interface AsyncHandlerMethodReturnValueHandler extends HandlerMethodReturnValueHandler;\n// A UriComponentsContributor containing a list of other contributors to delegate to and also encapsulating a specific ConversionService to use for formatting method argument values as Strings.\npublic class CompositeUriComponentsContributor extends Object implements UriComponentsContributor;\n// Strategy interface for resolving method parameters into argument values in the context of a given request.\npublic interface HandlerMethodArgumentResolver;\n// Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.\npublic class HandlerMethodArgumentResolverComposite extends Object implements HandlerMethodArgumentResolver;\n// Strategy interface to handle the value returned from the invocation of a handler method.\npublic interface HandlerMethodReturnValueHandler;\n// Handles method return values by delegating to a list of registered HandlerMethodReturnValueHandlers.\npublic class HandlerMethodReturnValueHandlerComposite extends Object implements HandlerMethodReturnValueHandler;\n// Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\npublic class InvocableHandlerMethod extends HandlerMethod;\n// Records model and view related decisions made by HandlerMethodArgumentResolvers and HandlerMethodReturnValueHandlers during the course of invocation of a controller method.\npublic class ModelAndViewContainer extends Object;\n// Strategy for contributing to the building of a UriComponents by looking at a method parameter and an argument value and deciding what part of the target URL should be updated.\npublic interface UriComponentsContributor;\n", "des": "Generic support classes for handler method processing."}
{"index": 3036, "repo": "spring-web-6.0.11", "code": "package multipart\n\n// Support classes for the multipart resolution framework.\npackage multipart.support\n// MultipartException subclass thrown when an upload exceeds the maximum upload size allowed.\npublic class MaxUploadSizeExceededException extends MultipartException;\n// Exception thrown when multipart resolution fails.\npublic class MultipartException extends org.springframework.core.NestedRuntimeException;\n// A representation of an uploaded file received in a multipart request.\npublic interface MultipartFile extends org.springframework.core.io.InputStreamSource;\n// Provides additional methods for dealing with multipart content within a servlet request, allowing to access uploaded files.\npublic interface MultipartHttpServletRequest extends HttpServletRequest, MultipartRequest;\n// This interface defines the multipart request access operations that are exposed for actual multipart requests.\npublic interface MultipartRequest;\n// A strategy interface for multipart file upload resolution in accordance with RFC 1867.\npublic interface MultipartResolver;\n", "des": "Multipart resolution framework for handling file uploads."}
{"index": 3037, "repo": "spring-web-6.0.11", "code": "package support\n\n// Abstract base implementation of the MultipartHttpServletRequest interface.\npublic abstract class AbstractMultipartHttpServletRequest extends HttpServletRequestWrapper implements MultipartHttpServletRequest;\n// Custom PropertyEditor for converting MultipartFiles to byte arrays.\npublic class ByteArrayMultipartFileEditor extends org.springframework.beans.propertyeditors.ByteArrayPropertyEditor;\n// Default implementation of the MultipartHttpServletRequest interface.\npublic class DefaultMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest;\n// Signals the part of a \"multipart/form-data\" request, identified by name could not be found.\npublic class MissingServletRequestPartException extends ServletException implements ErrorResponse;\n// Servlet Filter that resolves multipart requests via a MultipartResolver.\npublic class MultipartFilter extends OncePerRequestFilter;\n// A common delegate for HandlerMethodArgumentResolver implementations which need to resolve MultipartFile and Part arguments.\npublic final class MultipartResolutionDelegate extends Object;\n// ServerHttpRequest implementation that accesses one part of a multipart request.\npublic class RequestPartServletServerHttpRequest extends ServletServerHttpRequest;\n// Spring MultipartHttpServletRequest adapter, wrapping a Servlet HttpServletRequest and its Part objects.\npublic class StandardMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest;\n// Standard implementation of the MultipartResolver interface, based on the Servlet Part API.\npublic class StandardServletMultipartResolver extends Object implements MultipartResolver;\n// Utility methods for standard Servlet Part handling.\npublic abstract class StandardServletPartUtils extends Object;\n// Custom PropertyEditor for converting MultipartFiles to Strings.\npublic class StringMultipartFileEditor extends PropertyEditorSupport;\n", "des": "Support classes for the multipart resolution framework."}
{"index": 3038, "repo": "spring-web-6.0.11", "code": "package server\n\n// Implementations to adapt to the underlying org.springframework.http.client.reactive reactive HTTP adapter and HttpHandler.\npackage server.adapter\n// Provides common WebHandler implementations and a WebHandlerDecorator.\npackage server.handler\n// Locale related support classes.\npackage server.i18n\n// Auxiliary interfaces and implementation classes for WebSession support.\npackage server.session\n// Exception for errors that fit response status 405 (method not allowed).\npublic class MethodNotAllowedException extends ResponseStatusException;\n// ServerWebInputException subclass that indicates a missing request value such as a request header, cookie value, query parameter, etc.\npublic class MissingRequestValueException extends ServerWebInputException;\n// Exception for errors that fit response status 406 (not acceptable).\npublic class NotAcceptableStatusException extends ResponseStatusException;\n// Subclass of ErrorResponseException that accepts a \"reason\", and by default maps that to the \"detail\" of the ProblemDetail.\npublic class ResponseStatusException extends ErrorResponseException;\n// Exception for an HttpStatus.INTERNAL_SERVER_ERROR that exposes extra information about a controller method that failed, or a controller method argument that could not be resolved.\npublic class ServerErrorException extends ResponseStatusException;\n// Contract for an HTTP request-response interaction.\npublic interface ServerWebExchange;\n// Builder for mutating an existing ServerWebExchange.\npublic static interface ServerWebExchange.Builder;\n// A convenient base class for classes that need to wrap another ServerWebExchange.\npublic class ServerWebExchangeDecorator extends Object implements ServerWebExchange;\n// Exception for errors that fit response status 400 (bad request) for use in Spring Web applications.\npublic class ServerWebInputException extends ResponseStatusException;\n// ServerWebInputException subclass that indicates an unsatisfied parameter condition, as typically expressed using an @RequestMapping annotation at the @Controller type level.\npublic class UnsatisfiedRequestParameterException extends ServerWebInputException;\n// Exception for errors that fit response status 415 (unsupported media type).\npublic class UnsupportedMediaTypeStatusException extends ResponseStatusException;\n// Contract for handling exceptions during web server exchange processing.\npublic interface WebExceptionHandler;\n// Contract for interception-style, chained processing of Web requests that may be used to implement cross-cutting, application-agnostic requirements such as security, timeouts, and others.\npublic interface WebFilter;\n", "des": "Core interfaces and classes for Spring's generic, reactive web support."}
{"index": 3039, "repo": "spring-web-6.0.11", "code": "package adapter\n\n// Base class for a WebApplicationInitializer that installs a Spring Reactive Web Application on a Servlet container.\npublic abstract class AbstractReactiveWebInitializer extends Object implements WebApplicationInitializer;\n// Default implementation of ServerWebExchange.\npublic class DefaultServerWebExchange extends Object implements ServerWebExchange;\n// Extract values from \"Forwarded\" and \"X-Forwarded-*\" headers to override the request URI (i.e.\npublic class ForwardedHeaderTransformer extends Object implements Function<ServerHttpRequest,ServerHttpRequest>;\n// Default adapter of WebHandler to the HttpHandler contract.\npublic class HttpWebHandlerAdapter extends WebHandlerDecorator implements HttpHandler;\n// This builder has two purposes:\npublic final class WebHttpHandlerBuilder extends Object;\n// BlockHoundIntegration for spring-web classes.\npublic static class WebHttpHandlerBuilder.SpringWebBlockHoundIntegration extends Object implements reactor.blockhound.integration.BlockHoundIntegration;\n", "des": "Implementations to adapt to the underlying org.springframework.http.client.reactive reactive HTTP adapter and HttpHandler."}
{"index": 3040, "repo": "spring-web-6.0.11", "code": "package handler\n\n// Default implementation of WebFilterChain.\npublic class DefaultWebFilterChain extends Object implements WebFilterChain;\n// WebHandler decorator that invokes one or more WebExceptionHandlers after the delegate WebHandler.\npublic class ExceptionHandlingWebHandler extends WebHandlerDecorator;\n// WebHandlerDecorator that invokes a chain of WebFilters before invoking the delegate WebHandler.\npublic class FilteringWebHandler extends WebHandlerDecorator;\n// Handle ResponseStatusException by setting the response status.\npublic class ResponseStatusExceptionHandler extends Object implements WebExceptionHandler;\n// WebHandler that decorates and delegates to another WebHandler.\npublic class WebHandlerDecorator extends Object implements WebHandler;\n", "des": "Provides common WebHandler implementations and a WebHandlerDecorator."}
{"index": 3041, "repo": "spring-web-6.0.11", "code": "package i18n\n\n// LocaleContextResolver implementation that looks for a match between locales in the Accept-Language header and a list of configured supported locales.\npublic class AcceptHeaderLocaleContextResolver extends Object implements LocaleContextResolver;\n// LocaleContextResolver implementation that always returns a fixed locale and optionally time zone.\npublic class FixedLocaleContextResolver extends Object implements LocaleContextResolver;\n// Interface for web-based locale context resolution strategies that allows for both locale context resolution via the request and locale context modification via the HTTP exchange.\npublic interface LocaleContextResolver;\n", "des": "Locale related support classes."}
{"index": 3042, "repo": "spring-web-6.0.11", "code": "package session\n\n// Cookie-based WebSessionIdResolver.\npublic class CookieWebSessionIdResolver extends Object implements WebSessionIdResolver;\n// Default implementation of WebSessionManager delegating to a WebSessionIdResolver for session id resolution and to a WebSessionStore.\npublic class DefaultWebSessionManager extends Object implements WebSessionManager;\n// Request and response header-based WebSessionIdResolver.\npublic class HeaderWebSessionIdResolver extends Object implements WebSessionIdResolver;\n// Simple Map-based storage for WebSession instances.\npublic class InMemoryWebSessionStore extends Object implements WebSessionStore;\n// Contract for session ID resolution strategies.\npublic interface WebSessionIdResolver;\n// Main class for access to the WebSession for an HTTP request.\npublic interface WebSessionManager;\n// Strategy for WebSession persistence.\npublic interface WebSessionStore;\n", "des": "Auxiliary interfaces and implementation classes for WebSession support."}
{"index": 3043, "repo": "spring-web-6.0.11", "code": "package annotation\n\n// Shortcut for @HttpExchange for HTTP DELETE requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"DELETE\") public @interface DeleteExchange;\n// Shortcut for @HttpExchange for HTTP GET requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"GET\") public @interface GetExchange;\n// Annotation to declare a method on an HTTP service interface as an HTTP endpoint.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(org.springframework.web.service.annotation.HttpExchangeReflectiveProcessor.class) public @interface HttpExchange;\n// Shortcut for @HttpExchange for HTTP PATCH requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"PATCH\") public @interface PatchExchange;\n// Shortcut for @HttpExchange for HTTP POST requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"POST\") public @interface PostExchange;\n// Shortcut for @HttpExchange for HTTP PUT requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"PUT\") public @interface PutExchange;\n", "des": "Annotations for declaring HTTP service request methods."}
{"index": 3044, "repo": "spring-web-6.0.11", "code": "package invoker\n\n// Base class for arguments that resolve to a named request value such as a request header, path variable, cookie, and others.\npublic abstract class AbstractNamedValueArgumentResolver extends Object implements HttpServiceArgumentResolver;\n// Info about a request value, typically extracted from a method parameter annotation.\nprotected static class AbstractNamedValueArgumentResolver.NamedValueInfo extends Object;\n// HttpServiceArgumentResolver for @CookieValue annotated arguments.\npublic class CookieValueArgumentResolver extends AbstractNamedValueArgumentResolver;\n// Contract to abstract the underlying HTTP client and decouple it from the HTTP service proxy.\npublic interface HttpClientAdapter;\n// HttpServiceArgumentResolver that resolves the target request's HTTP method from an HttpMethod argument.\npublic class HttpMethodArgumentResolver extends Object implements HttpServiceArgumentResolver;\n// Container for HTTP request values extracted from an @HttpExchange-annotated method and argument values passed to it.\npublic final class HttpRequestValues extends Object;\n// Builder for HttpRequestValues.\npublic static final class HttpRequestValues.Builder extends Object;\n// Resolve an argument from an @HttpExchange-annotated method to one or more HTTP request values.\npublic interface HttpServiceArgumentResolver;\n// Factory to create a client proxy from an HTTP service interface with @HttpExchange methods.\npublic final class HttpServiceProxyFactory extends Object;\n// Builder to create an HttpServiceProxyFactory.\npublic static final class HttpServiceProxyFactory.Builder extends Object;\n// HttpServiceArgumentResolver for @PathVariable annotated arguments.\npublic class PathVariableArgumentResolver extends AbstractNamedValueArgumentResolver;\n// HttpServiceArgumentResolver for @RequestAttribute annotated arguments.\npublic class RequestAttributeArgumentResolver extends AbstractNamedValueArgumentResolver;\n// HttpServiceArgumentResolver for @RequestBody annotated arguments.\npublic class RequestBodyArgumentResolver extends Object implements HttpServiceArgumentResolver;\n// HttpServiceArgumentResolver for @RequestHeader annotated arguments.\npublic class RequestHeaderArgumentResolver extends AbstractNamedValueArgumentResolver;\n// HttpServiceArgumentResolver for @RequestParam annotated arguments.\npublic class RequestParamArgumentResolver extends AbstractNamedValueArgumentResolver;\n// HttpServiceArgumentResolver for @RequestPart annotated arguments.\npublic class RequestPartArgumentResolver extends AbstractNamedValueArgumentResolver;\n// HttpServiceArgumentResolver that resolves the URL for the request from a URI argument.\npublic class UrlArgumentResolver extends Object implements HttpServiceArgumentResolver;\n", "des": "Support for creating a client proxy for an HTTP service annotated with HttpExchange methods."}
{"index": 3045, "repo": "spring-web-6.0.11", "code": "package util\n\n// Dedicated support for matching HTTP request paths.\npackage util.pattern\n// HttpServletRequest wrapper that caches all content read from the input stream and reader, and allows this content to be retrieved via a byte array.\npublic class ContentCachingRequestWrapper extends HttpServletRequestWrapper;\n// HttpServletResponse wrapper that caches all content written to the output stream and writer, and allows this content to be retrieved via a byte array.\npublic class ContentCachingResponseWrapper extends HttpServletResponseWrapper;\n// \n@Deprecated public class CookieGenerator extends Object;\n// UriBuilderFactory that relies on UriComponentsBuilder for the actual building of the URI.\npublic class DefaultUriBuilderFactory extends Object implements UriBuilderFactory;\n// Enum to represent multiple URI encoding strategies.\npublic static enum DefaultUriBuilderFactory.EncodingMode extends Enum<DefaultUriBuilderFactory.EncodingMode>;\n// Utility class for HTML escaping.\npublic abstract class HtmlUtils extends Object;\n// Servlet HttpSessionListener that automatically exposes the session mutex when an HttpSession gets created.\npublic class HttpSessionMutexListener extends Object implements HttpSessionListener;\n// Listener that flushes the JDK's JavaBeans Introspector cache on web app shutdown.\npublic class IntrospectorCleanupListener extends Object implements ServletContextListener;\n// Utility class for JavaScript escaping.\npublic abstract class JavaScriptUtils extends Object;\n// \n@Deprecated(since=\"6.0\") public class NestedServletException extends ServletException;\n// Helper class for resolving placeholders in texts.\npublic abstract class ServletContextPropertyUtils extends Object;\n// Utility class to assist with preparation and access to the lookup path for request mapping purposes.\npublic abstract class ServletRequestPathUtils extends Object;\n// Utility class for tag library related code, exposing functionality such as translating Strings to web scopes.\npublic abstract class TagUtils extends Object;\n// Builder-style methods to prepare and expand a URI template with variables.\npublic interface UriBuilder;\n// Factory to create UriBuilder instances with shared configuration such as a base URI, an encoding mode strategy, and others across all URI builder instances created through a factory.\npublic interface UriBuilderFactory extends UriTemplateHandler;\n// Represents an immutable collection of URI components, mapping component type to String values.\npublic abstract class UriComponents extends Object implements Serializable;\n// Defines the contract for URI Template variables.\npublic static interface UriComponents.UriTemplateVariables;\n", "des": "Miscellaneous web utility classes, such as HTML escaping and cookie handling."}
{"index": 3046, "repo": "spring-web-6.0.11", "code": "package pattern\n\n// Representation of a parsed path pattern.\npublic class PathPattern extends Object implements Comparable<PathPattern>;\n// Holder for URI variables and path parameters (matrix variables) extracted based on the pattern for a given matched path.\npublic static class PathPattern.PathMatchInfo extends Object;\n// Holder for the result of a match on the start of a pattern.\npublic static class PathPattern.PathRemainingMatchInfo extends Object;\n// Parser for URI path patterns producing PathPattern instances that can then be matched to requests.\npublic class PathPatternParser extends Object;\n// RouteMatcher built on PathPatternParser that uses PathContainer and PathPattern as parsed representations of routes and patterns.\npublic class PathPatternRouteMatcher extends Object implements org.springframework.util.RouteMatcher;\n// Exception that is thrown when there is a problem with the pattern being parsed.\npublic class PatternParseException extends IllegalArgumentException;\n// The messages that can be included in a PatternParseException when there is a parse failure.\npublic static enum PatternParseException.PatternMessage extends Enum<PatternParseException.PatternMessage>;\n", "des": "Dedicated support for matching HTTP request paths."}
{"index": 3047, "repo": "spring-ws-core-4.0.5", "code": "package ws\n\n// Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access.\npackage ws.client\n// Provides an namespace handler for the Spring Web Services namespace.\npackage ws.config\n// Contains the MessageContext interface and implementations thereof.\npackage ws.context\n// Provides MIME functionality for use the Spring Web Services framework.\npackage ws.mime\n// Provides the Plain Old XML (POX) functionality of the Spring Web Services framework.\npackage ws.pox\n// Contains classes for server-side Spring-WS support.\npackage ws.server\n// Provides the SOAP functionality of the Spring Web Services framework.\npackage ws.soap\n// Provides general helper classes for Spring Web Services.\npackage ws.support\n// Contains the TransportRequest and TransportResponse interfaces.\npackage ws.transport\n// Provides the WSDL functionality of the Spring Web Services framework.\npackage ws.wsdl\n// Sub-interface of WebServiceMessage that can contain special Fault messages.\npublic interface FaultAwareWebServiceMessage extends WebServiceMessage;\n// Exception thrown when a WebServiceMessageFactory cannot parse the XML passed on to WebServiceMessageFactory.createWebServiceMessage(java.io.InputStream).\npublic final class InvalidXmlException extends WebServiceException;\n// Exception thrown when an endpoint cannot be resolved for an incoming message request.\npublic final class NoEndpointFoundException extends WebServiceException;\n// Root of the hierarchy of Web Service exceptions.\npublic abstract class WebServiceException extends org.springframework.core.NestedRuntimeException;\n// Represents a protocol-agnostic XML message.\npublic interface WebServiceMessage;\n// Base class for all web service message exceptions.\npublic abstract class WebServiceMessageException extends WebServiceException;\n// The WebServiceMessageFactory serves as a factory for WebServiceMessages.\npublic interface WebServiceMessageFactory;\n", "des": "Provides the core functionality of the Spring Web Services framework."}
{"index": 3048, "repo": "spring-ws-core-4.0.5", "code": "package client\n\n// Core package of the Spring-WS client-side support.\npackage client.core\n// Classes supporting the org.springframework.ws.client.core package.\npackage client.support\n// Exception thrown whenever an error occurs on the client-side.\npublic abstract class WebServiceClientException extends WebServiceException;\n// Thrown by SimpleFaultMessageResolver when the response message has a fault.\npublic class WebServiceFaultException extends WebServiceClientException;\n// Exception thrown whenever an I/O error occurs on the client-side.\npublic class WebServiceIOException extends WebServiceClientException;\n// Exception thrown whenever a transformation error occurs on the client-side.\npublic class WebServiceTransformerException extends WebServiceClientException;\n// Exception thrown whenever a transport error occurs on the client-side.\npublic class WebServiceTransportException extends WebServiceIOException;\n", "des": "Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access."}
{"index": 3049, "repo": "spring-ws-core-4.0.5", "code": "package core\n\n// Convenient super class for application classes that need Web service access.\npackage core.support\n// Defines the interface for objects than can resolve fault WebServiceMessages.\npublic interface FaultMessageResolver;\n// Simple fault resolver that simply throws a WebServiceFaultException when a fault occurs.\npublic class SimpleFaultMessageResolver extends Object implements FaultMessageResolver;\n// Callback interface for extracting a result object from a Source instance.\npublic interface SourceExtractor<T>;\n// Generic callback interface for code that operates on a WebServiceMessage.\npublic interface WebServiceMessageCallback;\n// Callback interface for extracting a result object from a WebServiceMessage instance.\npublic interface WebServiceMessageExtractor<T>;\n// Specifies a basic set of Web service operations.\npublic interface WebServiceOperations;\n// The central class for client-side Web services. It provides a message-driven approach to sending and receiving WebServiceMessage instances.\npublic class WebServiceTemplate extends WebServiceAccessor implements WebServiceOperations;\n", "des": "Core package of the Spring-WS client-side support."}
{"index": 3050, "repo": "spring-ws-core-4.0.5", "code": "package support\n\n// Convenient super class for application classes that need Web service access.\npublic abstract class WebServiceGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean;\n", "des": "Convenient super class for application classes that need Web service access."}
{"index": 3051, "repo": "spring-ws-core-4.0.5", "code": "package support\n\n// Provides the DestinationProvider interface.\npackage support.destination\n// Provides the ClientInterceptor interface, and validating interceptors.\npackage support.interceptor\n// Base class for WebServiceTemplate and other WS-accessing helpers.\npublic abstract class WebServiceAccessor extends org.springframework.xml.transform.TransformerObjectSupport implements org.springframework.beans.factory.InitializingBean;\n", "des": "Classes supporting the org.springframework.ws.client.core package."}
{"index": 3052, "repo": "spring-ws-core-4.0.5", "code": "package destination\n\n// Abstract base class for DestinationProvider implementations that cache destination URI.\npublic abstract class AbstractCachingDestinationProvider extends Object implements DestinationProvider;\n// Strategy interface for providing a WebServiceTemplate destination URI at runtime.\npublic interface DestinationProvider;\n// Thrown by a DestinationProvider when it cannot provide a destination.\npublic class DestinationProvisionException extends WebServiceClientException;\n// Implementation of the DestinationProvider that resolves a destination URI from a WSDL file.\npublic class Wsdl11DestinationProvider extends AbstractCachingDestinationProvider;\n", "des": "Provides the DestinationProvider interface."}
{"index": 3053, "repo": "spring-ws-core-4.0.5", "code": "package interceptor\n\n// Abstract base class for ClientInterceptor implementations that validate part of the message using a schema.\npublic abstract class AbstractValidatingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements ClientInterceptor, org.springframework.beans.factory.InitializingBean;\n// Workflow interface that allows for customized client-side message interception.\npublic interface ClientInterceptor;\n// Default implementation of the ClientInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\npublic abstract class ClientInterceptorAdapter extends Object implements ClientInterceptor;\n// Client-side interceptor that validates the contents of WebServiceMessages using a schema.\npublic class PayloadValidatingInterceptor extends AbstractValidatingInterceptor;\n// Exception thrown whenever a validation error occurs on the client-side.\npublic class WebServiceValidationException extends WebServiceClientException;\n", "des": "Provides the ClientInterceptor interface, and validating interceptors."}
{"index": 3054, "repo": "spring-ws-core-4.0.5", "code": "package config\n\n// NamespaceHandler for the 'web-services' namespace.\npublic class WebServicesNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n", "des": "Provides an namespace handler for the Spring Web Services namespace."}
{"index": 3055, "repo": "spring-ws-core-4.0.5", "code": "package context\n\n// Abstract base class for MessageContext instances.\npublic abstract class AbstractMessageContext extends Object implements MessageContext;\n// Default implementation of MessageContext.\npublic class DefaultMessageContext extends AbstractMessageContext;\n// Context holder for message requests.\npublic interface MessageContext;\n", "des": "Contains the MessageContext interface and implementations thereof."}
{"index": 3056, "repo": "spring-ws-core-4.0.5", "code": "package mime\n\n// Abstract implementation of the MimeMessage interface.\npublic abstract class AbstractMimeMessage extends Object implements MimeMessage;\n// Represents an attachment to a MimeMessage\npublic interface Attachment;\n// Exception thrown when a MIME attachment could not be accessed.\npublic class AttachmentException extends WebServiceMessageException;\n// Represents a Web service message with MIME attachments.\npublic interface MimeMessage extends WebServiceMessage;\n", "des": "Provides MIME functionality for use the Spring Web Services framework."}
{"index": 3057, "repo": "spring-ws-core-4.0.5", "code": "package pox\n\n// Contains an implementation of the POX interfaces that is based on DOM.\npackage pox.dom\n// Defines the contract for Plain Old XML messages.\npublic interface PoxMessage extends WebServiceMessage;\n// Specific subclass of WebServiceMessageException for Plain Old XML messages.\npublic abstract class PoxMessageException extends WebServiceMessageException;\n", "des": "Provides the Plain Old XML (POX) functionality of the Spring Web Services framework."}
{"index": 3058, "repo": "spring-ws-core-4.0.5", "code": "package dom\n\n// Implementation of the PoxMessage interface that is based on a DOM Document.\npublic class DomPoxMessage extends Object implements PoxMessage;\n// Specific subclass of PoxMessageException for DOM Plain Old XML messages.\npublic class DomPoxMessageException extends PoxMessageException;\n// Implementation of the WebServiceMessageFactory interface that creates a DomPoxMessage.\npublic class DomPoxMessageFactory extends org.springframework.xml.transform.TransformerObjectSupport implements WebServiceMessageFactory;\n", "des": "Contains an implementation of the POX interfaces that is based on DOM."}
{"index": 3059, "repo": "spring-ws-core-4.0.5", "code": "package server\n\n// Provides standard endpoint, and EndpointAdapter implementations.\npackage server.endpoint\n// Interface that must be implemented for each endpoint type to handle a message request.\npublic interface EndpointAdapter;\n// Defines the interface for objects than can resolve exceptions thrown during endpoint execution.\npublic interface EndpointExceptionResolver;\n// Workflow interface that allows for customized endpoint invocation chains.\npublic interface EndpointInterceptor;\n// Endpoint invocation chain, consisting of an endpoint object and any preprocessing interceptors.\npublic class EndpointInvocationChain extends Object;\n// Defines a mapping between message requests and endpoint objects.\npublic interface EndpointMapping;\n// Central dispatcher for use within Spring-WS, dispatching Web service messages to registered endpoints.\npublic class MessageDispatcher extends Object implements WebServiceMessageReceiver, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware;\n// Extension of the EndpointInterceptor interface that adds a way to decide whether the interceptor should intercept a given message context.\npublic interface SmartEndpointInterceptor extends EndpointInterceptor;\n", "des": "Contains classes for server-side Spring-WS support."}
{"index": 3060, "repo": "spring-ws-core-4.0.5", "code": "package endpoint\n\n// Provides miscellaneous EndpointAdapter implementations.\npackage endpoint.adapter\n// JDK 1.5+ annotations for Spring-WS endpoints.\npackage endpoint.annotation\n// Provides miscellaneous endpoints EndpointInterceptor implementations.\npackage endpoint.interceptor\n// Provides miscellaneous endpoints EndpointMapping implementations.\npackage endpoint.mapping\n// Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations.\npackage endpoint.support\n// \n@Deprecated public abstract class AbstractDom4jPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\n// \n@Deprecated public abstract class AbstractDomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\n// Abstract base class for EndpointExceptionResolvers.\npublic abstract class AbstractEndpointExceptionResolver extends Object implements EndpointExceptionResolver, org.springframework.core.Ordered;\n// \n@Deprecated public abstract class AbstractJDomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\n// Abstract base class for EndpointInterceptor instances that log a part of a WebServiceMessage.\npublic abstract class AbstractLoggingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor;\n// \n@Deprecated public abstract class AbstractMarshallingPayloadEndpoint extends Object implements MessageEndpoint, org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated public abstract class AbstractSaxPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\n// \n@Deprecated public abstract class AbstractStaxEventPayloadEndpoint extends AbstractStaxPayloadEndpoint implements MessageEndpoint;\n// \n@Deprecated public abstract class AbstractStaxPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport;\n// \n@Deprecated public abstract class AbstractStaxStreamPayloadEndpoint extends AbstractStaxPayloadEndpoint implements MessageEndpoint;\n// \n@Deprecated public abstract class AbstractValidatingMarshallingPayloadEndpoint extends AbstractMarshallingPayloadEndpoint;\n// \n@Deprecated public abstract class AbstractXomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\n// Defines the basic contract for Web Services interested in the entire message payload.\npublic interface MessageEndpoint;\n", "des": "Provides standard endpoint, and EndpointAdapter implementations."}
{"index": 3061, "repo": "spring-ws-core-4.0.5", "code": "package adapter\n\n// Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof.\npackage adapter.method\n// Abstract base class for EndpointAdapter implementations that support MethodEndpoints.\npublic abstract class AbstractMethodEndpointAdapter extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointAdapter;\n// Default extension of AbstractMethodEndpointAdapter with support for pluggable argument resolvers and return value handlers.\npublic class DefaultMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean;\n// \n@Deprecated public class GenericMarshallingMethodEndpointAdapter extends MarshallingMethodEndpointAdapter;\n// \n@Deprecated public class MarshallingMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.InitializingBean;\n// Adapter to use a MessageEndpoint as the endpoint for a EndpointInvocationChain.\npublic class MessageEndpointAdapter extends Object implements EndpointAdapter;\n// \n@Deprecated public class MessageMethodEndpointAdapter extends AbstractMethodEndpointAdapter;\n// Adapter to use a PayloadEndpoint as the endpoint for a EndpointInvocationChain.\npublic class PayloadEndpointAdapter extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointAdapter;\n// \n@Deprecated public class PayloadMethodEndpointAdapter extends AbstractMethodEndpointAdapter;\n// \n@Deprecated public class XPathParamAnnotationMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.InitializingBean;\n", "des": "Provides miscellaneous EndpointAdapter implementations."}
{"index": 3062, "repo": "spring-ws-core-4.0.5", "code": "package method\n\n// Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\npackage method.dom\n// Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\npackage method.jaxb\n// Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on RequestPayload and ResponsePayload annotations.\npublic abstract class AbstractPayloadMethodProcessor extends org.springframework.xml.transform.TransformerObjectSupport implements MethodArgumentResolver, MethodReturnValueHandler;\n// Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on Sources.\npublic abstract class AbstractPayloadSourceMethodProcessor extends AbstractPayloadMethodProcessor;\n// Implementation of MethodArgumentResolver and MethodReturnValueHandler that uses Marshaller and Unmarshaller to support marshalled objects.\npublic class MarshallingPayloadMethodProcessor extends AbstractPayloadMethodProcessor;\n// Implementation of MethodArgumentResolver that supports MessageContext arguments.\npublic class MessageContextMethodArgumentResolver extends Object implements MethodArgumentResolver;\n// Strategy interface used to resolve method parameters into arguments.\npublic interface MethodArgumentResolver;\n// Strategy interface used to handle method return values.\npublic interface MethodReturnValueHandler;\n// Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports Source objects.\npublic class SourcePayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor;\n// Implementation of MethodArgumentResolver that supports StAX XMLStreamReader and XMLEventReader arguments.\npublic class StaxPayloadMethodArgumentResolver extends org.springframework.xml.transform.TransformerObjectSupport implements MethodArgumentResolver;\n// Implementation of MethodArgumentResolver that supports the @XPathParam annotation.\npublic class XPathParamMethodArgumentResolver extends Object implements MethodArgumentResolver;\n", "des": "Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof."}
{"index": 3063, "repo": "spring-ws-core-4.0.5", "code": "package dom\n\n// Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports dom4j elements.\npublic class Dom4jPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor;\n// Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports W3C DOM elements.\npublic class DomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor;\n// Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JDOM elements.\npublic class JDomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor;\n// Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports XOM elements.\npublic class XomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor;\n", "des": "Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 3064, "repo": "spring-ws-core-4.0.5", "code": "package jaxb\n\n// Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations that use JAXB2.\npublic abstract class AbstractJaxb2PayloadMethodProcessor extends AbstractPayloadMethodProcessor;\n// Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JAXBElement objects.\npublic class JaxbElementPayloadMethodProcessor extends AbstractJaxb2PayloadMethodProcessor;\n// Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports parameters annotated with @XmlRootElement or @XmlType, and return values annotated with @XmlRootElement.\npublic class XmlRootElementPayloadMethodProcessor extends AbstractJaxb2PayloadMethodProcessor;\n", "des": "Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 3065, "repo": "spring-ws-core-4.0.5", "code": "package annotation\n\n// Indicates that an annotated class is an \"Endpoint\" (e.g.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Endpoint;\n// Sets up a namespace to be used in an @Endpoint method, class, or package.\n@Documented @Retention(RUNTIME) @Target({PACKAGE,TYPE,METHOD}) public @interface Namespace;\n// Sets the namespaces to be used in an @Endpoint method, class, or package.\n@Documented @Retention(RUNTIME) @Target({PACKAGE,TYPE,METHOD}) public @interface Namespaces;\n// Marks an endpoint method as the handler for an incoming request.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Repeatable(PayloadRoots.class) public @interface PayloadRoot;\n// Marks an endpoint method as containing multiple PayloadRoots.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface PayloadRoots;\n// Annotation which indicates that a method parameter should be bound to the request payload.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface RequestPayload;\n// Annotation which indicates that a method return value should be bound to the response payload.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ResponsePayload;\n// Indicates that a method parameter should be bound to an XPath expression.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface XPathParam;\n", "des": "JDK 1.5+ annotations for Spring-WS endpoints."}
{"index": 3066, "repo": "spring-ws-core-4.0.5", "code": "package interceptor\n\n// Abstract base class for EndpointInterceptor implementations that validate part of the message using a schema.\npublic abstract class AbstractValidatingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor, org.springframework.beans.factory.InitializingBean;\n// Implementation of the SmartEndpointInterceptor interface that delegates to a delegate EndpointInterceptor.\npublic class DelegatingSmartEndpointInterceptor extends Object implements SmartEndpointInterceptor;\n// Default implementation of the EndpointInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\npublic class EndpointInterceptorAdapter extends Object implements EndpointInterceptor;\n// Simple EndpointInterceptor that logs the payload of request and response messages.\npublic class PayloadLoggingInterceptor extends AbstractLoggingInterceptor;\n// Interceptor that transforms the payload of WebServiceMessages using XSLT stylesheet.\npublic class PayloadTransformingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor, org.springframework.beans.factory.InitializingBean;\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations."}
{"index": 3067, "repo": "spring-ws-core-4.0.5", "code": "package mapping\n\n// Provides JAXB2-based EndpointMapping implementations.\npackage mapping.jaxb\n// Abstract base for EndpointMapping implementations that map classes tagged with an annotation.\npublic abstract class AbstractAnnotationMethodEndpointMapping<T> extends AbstractMethodEndpointMapping<T>;\n// Abstract base class for EndpointMapping implementations.\npublic abstract class AbstractEndpointMapping extends org.springframework.context.support.ApplicationObjectSupport implements EndpointMapping, org.springframework.core.Ordered;\n// Abstract base class for endpoint mapping that are based on a Map.\npublic abstract class AbstractMapBasedEndpointMapping extends AbstractEndpointMapping;\n// Abstract base class for MethodEndpoint mappings.\npublic abstract class AbstractMethodEndpointMapping<T> extends AbstractEndpointMapping;\n// Abstract base class for EndpointMappings that resolve qualified names as registration keys.\npublic abstract class AbstractQNameEndpointMapping extends AbstractMapBasedEndpointMapping;\n// Implementation of the EndpointMapping interface that uses the PayloadRoot annotation to map methods to request payload root elements.\npublic class PayloadRootAnnotationMethodEndpointMapping extends AbstractAnnotationMethodEndpointMapping<QName>;\n// Implementation of the EndpointMapping interface to map from the qualified name of the request payload root element.\npublic class PayloadRootQNameEndpointMapping extends AbstractQNameEndpointMapping;\n// Simple subclass of AbstractMethodEndpointMapping that maps from the local name of the request payload to methods.\npublic class SimpleMethodEndpointMapping extends AbstractMethodEndpointMapping<String> implements org.springframework.beans.factory.InitializingBean;\n// Implementation of the EndpointMapping interface to map from the full request URI or request URI path to endpoint beans.\npublic class UriEndpointMapping extends AbstractMapBasedEndpointMapping;\n// Implementation of the EndpointMapping interface that maps to endpoint using an XPath expression.\npublic class XPathPayloadEndpointMapping extends AbstractMapBasedEndpointMapping implements org.springframework.beans.factory.InitializingBean;\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations."}
{"index": 3068, "repo": "spring-ws-core-4.0.5", "code": "package jaxb\n\n// Implementation of the EndpointMapping interface that uses the JAXB2 XmlRootElement annotation to map methods to request payload root elements.\npublic class XmlRootElementEndpointMapping extends AbstractAnnotationMethodEndpointMapping<QName>;\n", "des": "Provides JAXB2-based EndpointMapping implementations."}
{"index": 3069, "repo": "spring-ws-core-4.0.5", "code": "package support\n\n// Helper class for handling @Namespace annotations.\npublic abstract class NamespaceUtils extends Object;\n// Helper class for determining the root qualified name of a Web Service payload.\npublic abstract class PayloadRootUtils extends Object;\n", "des": "Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations."}
{"index": 3070, "repo": "spring-ws-core-4.0.5", "code": "package soap\n\n// Provides WS-Addressing implementation classes.\npackage soap.addressing\n// Contains classes for SOAP-specific client-side Spring-WS support.\npackage soap.client\n// SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure.\npackage soap.saaj\n// Contains classes for SOAP-specific server-side Spring-WS support.\npackage soap.server\n// Contains interfaces specific to SOAP 1.1.\npackage soap.soap11\n// Contains interfaces specific to SOAP 1.2.\npackage soap.soap12\n// Classes supporting the org.springframework.ws.soap package.\npackage soap.support\n// Abstract implementation of the SoapMessage interface.\npublic abstract class AbstractSoapMessage extends AbstractMimeMessage implements SoapMessage;\n// Represents the Body element in a SOAP message.\npublic interface SoapBody extends SoapElement;\n// Exception thrown when a SOAP body could not be accessed.\npublic class SoapBodyException extends SoapMessageException;\n// The base interface for all elements that are contained in a SOAP message.\npublic interface SoapElement;\n// Exception thrown when a SOAP element could not be accessed.\npublic class SoapElementException extends SoapMessageException;\n// Represents the Envelope element in a SOAP message.\npublic interface SoapEnvelope extends SoapElement;\n// Exception thrown when a SOAP body could not be accessed.\npublic class SoapEnvelopeException extends SoapMessageException;\n// Represents the Fault element in the body of a SOAP message.\npublic interface SoapFault extends SoapElement;\n// Represents the detail element in a SOAP fault.\npublic interface SoapFaultDetail extends SoapElement;\n// Represents the content for an individual SOAP detail entry in a SOAP Message.\npublic interface SoapFaultDetailElement extends SoapElement;\n// Exception thrown when a SOAP fault could not be accessed.\npublic class SoapFaultException extends SoapEnvelopeException;\n// Represents the Header element in a SOAP message.\npublic interface SoapHeader extends SoapElement;\n// Represents the contents of an individual SOAP header in the a SOAP message.\npublic interface SoapHeaderElement extends SoapElement;\n// Exception thrown when a SOAP header could not be accessed.\npublic class SoapHeaderException extends SoapMessageException;\n", "des": "Provides the SOAP functionality of the Spring Web Services framework."}
{"index": 3071, "repo": "spring-ws-core-4.0.5", "code": "package addressing\n\n// Core package for WS-Addressing support.\npackage addressing.core\n// Contains various strategies for generating WS-Addressing MessageIDs.\npackage addressing.messageid\n// Contains servers-side WS-Addressing support, in the form of EndpointMappings.\npackage addressing.server\n// Contains abstractions over various versions of the WS-Addressing specification.\npackage addressing.version\n// Exception thrown in case on WS-Addressing errors.\npublic class AddressingException extends WebServiceException;\n", "des": "Provides WS-Addressing implementation classes."}
{"index": 3072, "repo": "spring-ws-core-4.0.5", "code": "package core\n\n// Represents an Endpoint Reference, as defined in the WS-Addressing specification.\npublic final class EndpointReference extends Object implements Serializable;\n// Represents a set of Message Addressing Properties, as defined in the WS-Addressing specification.\npublic final class MessageAddressingProperties extends Object implements Serializable;\n", "des": "Core package for WS-Addressing support."}
{"index": 3073, "repo": "spring-ws-core-4.0.5", "code": "package messageid\n\n// Strategy interface that encapsulates the creation and validation of WS-Addressing MessageIDs.\npublic interface MessageIdStrategy;\n// Implementation of the MessageIdStrategy interface that uses a UUID to generate a Message Id.\npublic class UuidMessageIdStrategy extends Object implements MessageIdStrategy;\n", "des": "Contains various strategies for generating WS-Addressing MessageIDs."}
{"index": 3074, "repo": "spring-ws-core-4.0.5", "code": "package server\n\n// Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations.\npublic abstract class AbstractActionEndpointMapping extends AbstractAddressingEndpointMapping;\n// Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations that map to MethodEndpoints.\npublic abstract class AbstractActionMethodEndpointMapping extends AbstractActionEndpointMapping;\n// Abstract base class for EndpointMapping implementations that handle WS-Addressing.\npublic abstract class AbstractAddressingEndpointMapping extends org.springframework.xml.transform.TransformerObjectSupport implements SoapEndpointMapping, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered;\n// Implementation of the EndpointMapping interface that uses the @Action annotation to map methods to a WS-Addressing Action header.\npublic class AnnotationActionEndpointMapping extends AbstractActionMethodEndpointMapping implements org.springframework.beans.factory.config.BeanPostProcessor;\n// Implementation of the EndpointMapping interface to map from WS-Addressing Action Message Addressing Property to endpoint beans.\npublic class SimpleActionEndpointMapping extends AbstractActionEndpointMapping;\n", "des": "Contains servers-side WS-Addressing support, in the form of EndpointMappings."}
{"index": 3075, "repo": "spring-ws-core-4.0.5", "code": "package version\n\n// Abstract base class for AddressingVersion implementations.\npublic abstract class AbstractAddressingVersion extends org.springframework.xml.transform.TransformerObjectSupport implements AddressingVersion;\n// Implements WS-Addressing 1.0 (May 2006).\npublic class Addressing10 extends AbstractAddressingVersion;\n// Implements the August 2004 edition of the WS-Addressing specification.\npublic class Addressing200408 extends AbstractAddressingVersion;\n// Defines the contract for a specific version of the WS-Addressing specification.\npublic interface AddressingVersion;\n", "des": "Contains abstractions over various versions of the WS-Addressing specification."}
{"index": 3076, "repo": "spring-ws-core-4.0.5", "code": "package client\n\n// Contains core classes for SOAP-specific client-side Spring-WS support.\npackage client.core\n// Thrown by SoapFaultMessageResolver when the response message has a fault.\npublic class SoapFaultClientException extends WebServiceFaultException;\n", "des": "Contains classes for SOAP-specific client-side Spring-WS support."}
{"index": 3077, "repo": "spring-ws-core-4.0.5", "code": "package core\n\n// WebServiceMessageCallback implementation that sets the SOAP Action header on the message.\npublic class SoapActionCallback extends Object implements WebServiceMessageCallback;\n// Simple fault resolver that simply throws a SoapFaultClientException when a fault occurs.\npublic class SoapFaultMessageResolver extends Object implements FaultMessageResolver;\n", "des": "Contains core classes for SOAP-specific client-side Spring-WS support."}
{"index": 3078, "repo": "spring-ws-core-4.0.5", "code": "package saaj\n\n// Support classes for working with the SOAP with Attachments API for Java (SAAJ).\npackage saaj.support\n// \npublic class SaajAttachmentException extends AttachmentException;\n// \npublic class SaajSoapBodyException extends SoapBodyException;\n// \npublic class SaajSoapElementException extends SoapElementException;\n// \npublic class SaajSoapEnvelopeException extends SoapEnvelopeException;\n// \npublic class SaajSoapFaultException extends SoapFaultException;\n// \npublic class SaajSoapHeaderException extends SoapHeaderException;\n// SAAJ-specific implementation of the SoapMessage interface.\npublic class SaajSoapMessage extends AbstractSoapMessage;\n// \npublic class SaajSoapMessageCreationException extends SoapMessageCreationException;\n// \npublic class SaajSoapMessageException extends SoapMessageException;\n// SAAJ-specific implementation of the WebServiceMessageFactory.\npublic class SaajSoapMessageFactory extends Object implements SoapMessageFactory, org.springframework.beans.factory.InitializingBean;\n", "des": "SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure."}
{"index": 3079, "repo": "spring-ws-core-4.0.5", "code": "package support\n\n// SAX ContentHandler that transforms callback calls to the creation of SAAJ Nodes and SOAPElements.\npublic class SaajContentHandler extends Object implements ContentHandler;\n// Collection of generic utility methods to work with SAAJ.\npublic abstract class SaajUtils extends Object;\n// SAX XMLReader that reads from a SAAJ Node.\npublic class SaajXmlReader extends org.springframework.xml.sax.AbstractXmlReader;\n", "des": "Support classes for working with the SOAP with Attachments API for Java (SAAJ)."}
{"index": 3080, "repo": "spring-ws-core-4.0.5", "code": "package server\n\n// Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP.\npackage server.endpoint\n// SOAP-specific extension of the SmartEndpointInterceptor interface.\npublic interface SmartSoapEndpointInterceptor extends SmartEndpointInterceptor, SoapEndpointInterceptor;\n// SOAP-specific extension of the EndpointInterceptor interface.\npublic interface SoapEndpointInterceptor extends EndpointInterceptor;\n// SOAP-specific subclass of the EndpointInvocationChain.\npublic class SoapEndpointInvocationChain extends EndpointInvocationChain;\n// SOAP-specific sub-interface of the EndpointMapping.\npublic interface SoapEndpointMapping extends EndpointMapping;\n// SOAP-specific subclass of the MessageDispatcher.\npublic class SoapMessageDispatcher extends MessageDispatcher;\n", "des": "Contains classes for SOAP-specific server-side Spring-WS support."}
{"index": 3081, "repo": "spring-ws-core-4.0.5", "code": "package endpoint\n\n// JDK 1.5+ annotations for Spring-WS SOAP endpoints.\npackage endpoint.annotation\n// Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes.\npackage endpoint.interceptor\n// Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes.\npackage endpoint.mapping\n// \n@Deprecated public abstract class AbstractFaultCreatingValidatingMarshallingPayloadEndpoint extends AbstractValidatingMarshallingPayloadEndpoint implements org.springframework.context.MessageSourceAware;\n// Abstract base class for SOAP-based EndpointExceptionResolver implementations that depend on SoapFaultDefinition.\npublic abstract class AbstractSoapFaultDefinitionExceptionResolver extends AbstractEndpointExceptionResolver;\n// Simple, SOAP-specific EndpointExceptionResolver implementation that stores the exception's message as the fault string.\npublic class SimpleSoapExceptionResolver extends AbstractEndpointExceptionResolver;\n// Implementation of the EndpointExceptionResolver interface that uses the SoapFault annotation to map exceptions to SOAP Faults.\npublic class SoapFaultAnnotationExceptionResolver extends AbstractSoapFaultDefinitionExceptionResolver;\n// Defines properties for a SOAP Fault.\npublic class SoapFaultDefinition extends Object;\n// PropertyEditor for SoapFaultDefinition objects.\npublic class SoapFaultDefinitionEditor extends PropertyEditorSupport;\n// Exception resolver that allows for mapping exception class names to SOAP Faults.\npublic class SoapFaultMappingExceptionResolver extends AbstractSoapFaultDefinitionExceptionResolver;\n", "des": "Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP."}
{"index": 3082, "repo": "spring-ws-core-4.0.5", "code": "package annotation\n\n// Enumeration that represents the standard SOAP Fault codes for use with the JDK 1.5+ SoapFault annotation.\npublic enum FaultCode extends Enum<FaultCode>;\n// Marks an endpoint method as the handler for an incoming request.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Repeatable(SoapActions.class) public @interface SoapAction;\n// Marks an endpoint method as containing multiple SoapActions.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface SoapActions;\n// Marks an exception class with the fault elements that should be returned whenever this exception is thrown.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface SoapFault;\n// Marks an endpoint method parameter to be resolved as a single or a list of SoapHeaderElement.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface SoapHeader;\n", "des": "JDK 1.5+ annotations for Spring-WS SOAP endpoints."}
{"index": 3083, "repo": "spring-ws-core-4.0.5", "code": "package interceptor\n\n// Subclass of AbstractValidatingInterceptor that creates a SOAP Fault whenever the request message cannot be validated.\npublic abstract class AbstractFaultCreatingValidatingInterceptor extends AbstractValidatingInterceptor;\n// Implementation of the SmartSoapEndpointInterceptor interface that delegates to a delegate SoapEndpointInterceptor.\npublic class DelegatingSmartSoapEndpointInterceptor extends DelegatingSmartEndpointInterceptor implements SmartSoapEndpointInterceptor;\n// Implementation of the SmartSoapEndpointInterceptor interface that only intercepts requests that have a specified namespace URI or local part (or both) as payload root.\npublic class PayloadRootSmartSoapEndpointInterceptor extends DelegatingSmartSoapEndpointInterceptor;\n// Interceptor that validates the contents of WebServiceMessages using a schema.\npublic class PayloadValidatingInterceptor extends AbstractFaultCreatingValidatingInterceptor;\n// Implementation of the SmartEndpointInterceptor interface that only intercepts requests that have a specified soap action.\npublic class SoapActionSmartEndpointInterceptor extends DelegatingSmartSoapEndpointInterceptor;\n// SOAP-specific EndpointInterceptor that logs the complete request and response envelope of SoapMessage messages.\npublic class SoapEnvelopeLoggingInterceptor extends AbstractLoggingInterceptor implements SoapEndpointInterceptor;\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes."}
{"index": 3084, "repo": "spring-ws-core-4.0.5", "code": "package mapping\n\n// EndpointMapping implement that adds SOAP actors or roles to a delegate endpoint.\npublic class DelegatingSoapEndpointMapping extends Object implements org.springframework.beans.factory.InitializingBean, SoapEndpointMapping;\n// Implementation of the EndpointMapping interface that uses the SoapAction annotation to map methods to the request SOAPAction header.\npublic class SoapActionAnnotationMethodEndpointMapping extends AbstractAnnotationMethodEndpointMapping<String> implements SoapEndpointMapping;\n// Implementation of the EndpointMapping interface to map from SOAPAction headers to endpoint beans.\npublic class SoapActionEndpointMapping extends AbstractMapBasedEndpointMapping implements SoapEndpointMapping;\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes."}
{"index": 3085, "repo": "spring-ws-core-4.0.5", "code": "package soap11\n\n// Subinterface of SoapBody that exposes SOAP 1.1 functionality.\npublic interface Soap11Body extends SoapBody;\n// Subinterface of SoapFault that exposes SOAP 1.1 functionality.\npublic interface Soap11Fault extends SoapFault;\n// Subinterface of SoapHeader that exposes SOAP 1.1 functionality.\npublic interface Soap11Header extends SoapHeader;\n", "des": "Contains interfaces specific to SOAP 1.1."}
{"index": 3086, "repo": "spring-ws-core-4.0.5", "code": "package soap12\n\n// Subinterface of SoapBody that exposes SOAP 1.2 functionality.\npublic interface Soap12Body extends SoapBody;\n// Subinterface of SoapFault that exposes SOAP 1.2 functionality.\npublic interface Soap12Fault extends SoapFault;\n// Subinterface of SoapHeader that exposes SOAP 1.2 functionality.\npublic interface Soap12Header extends SoapHeader;\n", "des": "Contains interfaces specific to SOAP 1.2."}
{"index": 3087, "repo": "spring-ws-core-4.0.5", "code": "package support\n\n// Contains various utility methods for handling SOAP messages.\npublic abstract class SoapUtils extends Object;\n", "des": "Classes supporting the org.springframework.ws.soap package."}
{"index": 3088, "repo": "spring-ws-core-4.0.5", "code": "package support\n\n// Helper class for for loading default implementations of an interface.\npublic class DefaultStrategiesHelper extends Object;\n// Helper class for endpoints and endpoint mappings that use marshalling.\npublic abstract class MarshallingUtils extends Object;\n// Miscellaneous utilities for web applications.\npublic abstract class WebUtils extends Object;\n", "des": "Provides general helper classes for Spring Web Services."}
{"index": 3089, "repo": "spring-ws-core-4.0.5", "code": "package transport\n\n// Abstraction for determining the current TransportInputStream and TransportOutputStream.\npackage transport.context\n// Package providing support for handling messages via HTTP.\npackage transport.http\n// Classes supporting the org.springframework.ws.transport package.\npackage transport.support\n// Abstract base class for WebServiceConnection implementations used for receiving requests.\npublic abstract class AbstractReceiverConnection extends AbstractWebServiceConnection implements HeadersAwareReceiverWebServiceConnection;\n// Abstract base class for WebServiceConnection implementations used for sending requests.\npublic abstract class AbstractSenderConnection extends AbstractWebServiceConnection implements HeadersAwareSenderWebServiceConnection;\n// Abstract base class for WebServiceConnection implementations.\npublic abstract class AbstractWebServiceConnection extends Object implements WebServiceConnection;\n// Sub-interface of WebServiceConnection that is aware of any server-side situations where an endpoint is not found.\npublic interface EndpointAwareWebServiceConnection extends WebServiceConnection;\n// Sub-interface of WebServiceConnection that is aware of any Fault messages received.\npublic interface FaultAwareWebServiceConnection extends WebServiceConnection;\n// Interface to define access to header information for certain WebServiceConnection implementations.\npublic interface HeadersAwareReceiverWebServiceConnection;\n// \npublic interface HeadersAwareSenderWebServiceConnection;\n// Declares useful transport constants.\npublic interface TransportConstants;\n// Abstract base class for exceptions related to the transport layer.\npublic abstract class TransportException extends IOException;\n// A TransportInputStream is an input stream with MIME input headers.\npublic abstract class TransportInputStream extends InputStream;\n// A TransportOutputStream is an output stream with MIME input headers.\npublic abstract class TransportOutputStream extends OutputStream;\n// Represents a point-to-point connection that a client can use for sending WebServiceMessage objects directly to a remote party.\npublic interface WebServiceConnection extends AutoCloseable;\n// Defines the methods for classes capable of receiving WebServiceMessage instances coming in on a transport.\npublic interface WebServiceMessageReceiver;\n// Defines the methods for classes capable of sending and receiving WebServiceMessage instances across a transport.\npublic interface WebServiceMessageSender;\n", "des": "Contains the TransportRequest and TransportResponse interfaces."}
{"index": 3090, "repo": "spring-ws-core-4.0.5", "code": "package context\n\n// Default implementation of the TransportContext interface.\npublic class DefaultTransportContext extends Object implements TransportContext;\n// Strategy interface for determining the current WebServiceConnection.\npublic interface TransportContext;\n// Simple holder class that associates a TransportContext instance with the current thread.\npublic abstract class TransportContextHolder extends Object;\n", "des": "Abstraction for determining the current TransportInputStream and TransportOutputStream."}
{"index": 3091, "repo": "spring-ws-core-4.0.5", "code": "package http\n\n// Abstract base class for WebServiceConnection implementations that send request over HTTP.\npublic abstract class AbstractHttpSenderConnection extends AbstractSenderConnection implements FaultAwareWebServiceConnection;\n// Abstract base class for WebServiceMessageSender implementations that use HTTP.\npublic abstract class AbstractHttpWebServiceMessageSender extends Object implements WebServiceMessageSender;\n// Implementation of the WebServiceConnection interface that is based on the Spring 3 ClientHttpRequest and ClientHttpResponse.\npublic class ClientHttpRequestConnection extends AbstractHttpSenderConnection;\n// WebServiceMessageSender implementation based on the ClientHttpRequestFactory introduced in Spring 3.\npublic class ClientHttpRequestMessageSender extends AbstractHttpWebServiceMessageSender;\n// \n@Deprecated public class CommonsHttpConnection extends AbstractHttpSenderConnection;\n// \n@Deprecated public class CommonsHttpMessageSender extends AbstractHttpWebServiceMessageSender implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\n// FactoryBean to set up a CloseableHttpClient using HttpComponents HttpClient 5.\npublic class HttpComponents5ClientFactory extends Object implements org.springframework.beans.factory.FactoryBean<org.apache.hc.client5.http.impl.classic.CloseableHttpClient>;\n// \n@FunctionalInterface public static interface HttpComponents5ClientFactory.HttpClientBuilderCustomizer;\n// \n@FunctionalInterface public static interface HttpComponents5ClientFactory.PoolingHttpClientConnectionManagerBuilderCustomizer;\n// Implementation of WebServiceConnection that is based on Apache HttpClient 5.\npublic class HttpComponents5Connection extends AbstractHttpSenderConnection;\n// WebServiceMessageSender implementation that uses Apache HttpClient to execute POST requests.\npublic class HttpComponents5MessageSender extends AbstractHttpWebServiceMessageSender implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\n// HttpClient HttpRequestInterceptor implementation that removes Content-Length and Transfer-Encoding headers from the request.\npublic static class HttpComponents5MessageSender.RemoveSoapHeadersInterceptor extends Object implements org.apache.hc.core5.http.HttpRequestInterceptor;\n// Implementation of WebServiceConnection that is based on Apache HttpClient.\npublic class HttpComponentsConnection extends AbstractHttpSenderConnection;\n", "des": "Package providing support for handling messages via HTTP."}
{"index": 3092, "repo": "spring-ws-core-4.0.5", "code": "package support\n\n// Adapts an Enumeration to follow the interface of Iterator.\npublic class EnumerationIterator<T> extends Object implements Iterator<T>;\n// Generic utility methods for working with Web service transports.\npublic abstract class TransportUtils extends Object;\n// Convenience base class for server-side transport objects.\npublic abstract class WebServiceMessageReceiverObjectSupport extends Object implements org.springframework.beans.factory.InitializingBean;\n", "des": "Classes supporting the org.springframework.ws.transport package."}
{"index": 3093, "repo": "spring-ws-core-4.0.5", "code": "package wsdl\n\n// Contains interfaces and classes specific to WSDL 1.1.\npackage wsdl.wsdl11\n// Represents an abstraction for WSDL definitions.\npublic interface WsdlDefinition;\n// Base class for all WSDL definition exceptions.\npublic class WsdlDefinitionException extends WebServiceException;\n", "des": "Provides the WSDL functionality of the Spring Web Services framework."}
{"index": 3094, "repo": "spring-ws-core-4.0.5", "code": "package wsdl11\n\n// Provides a contribution strategy for WSDL definitions.\npackage wsdl11.provider\n// Convenient implementation of Wsdl11Definition that creates a SOAP 1.1 or 1.2 binding based on naming conventions in one or more inlined XSD schemas.\npublic class DefaultWsdl11Definition extends Object implements Wsdl11Definition, org.springframework.beans.factory.InitializingBean;\n// Implementation of the Wsdl11Definition that uses a provider-based mechanism to populate a WSDL4J Definition.\npublic class ProviderBasedWsdl4jDefinition extends Wsdl4jDefinition implements org.springframework.beans.factory.InitializingBean;\n// The default Wsdl11Definition implementation.\npublic class SimpleWsdl11Definition extends Object implements Wsdl11Definition, org.springframework.beans.factory.InitializingBean;\n// Models a WSDL 1.1-specific WsdlDefinition.\npublic interface Wsdl11Definition extends WsdlDefinition;\n// Implementation of the Wsdl11Definition based on WSDL4J.\npublic class Wsdl4jDefinition extends Object implements Wsdl11Definition;\n// Subclass of WsdlDefinitionException that wraps WSDLExceptions.\npublic class Wsdl4jDefinitionException extends WsdlDefinitionException;\n", "des": "Contains interfaces and classes specific to WSDL 1.1."}
{"index": 3095, "repo": "spring-ws-core-4.0.5", "code": "package provider\n\n// Abstract base class for PortTypesProvider implementations.\npublic abstract class AbstractPortTypesProvider extends Object implements PortTypesProvider;\n// Strategy for adding Bindings to a Definition.\npublic interface BindingsProvider;\n// Default implementation of the BindingsProvider and ServicesProvider interfaces.\npublic class DefaultConcretePartProvider extends Object implements BindingsProvider, ServicesProvider;\n// Default implementation of the MessagesProvider.\npublic class DefaultMessagesProvider extends Object implements MessagesProvider;\n// Strategy for adding Imports to a Definition.\npublic interface ImportsProvider;\n// Implementation of TypesProvider that inlines a XsdSchema or XsdSchemaCollection into the WSDL.\npublic class InliningXsdSchemaTypesProvider extends org.springframework.xml.transform.TransformerObjectSupport implements TypesProvider;\n// Strategy for adding Messages to a Definition.\npublic interface MessagesProvider;\n// Strategy for adding PortTypes to a Definition.\npublic interface PortTypesProvider;\n// Strategy for adding Services to a Definition.\npublic interface ServicesProvider;\n// Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.1 specific.\npublic class Soap11Provider extends DefaultConcretePartProvider;\n// Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.2 specific.\npublic class Soap12Provider extends DefaultConcretePartProvider;\n// Implementation of the BindingsProvider and ServicesProvider interfaces that supports SOAP 1.1 and SOAP 1.2.\npublic class SoapProvider extends Object implements BindingsProvider, ServicesProvider;\n// Implementation of the MessagesProvider interface that is based on suffixes.\npublic class SuffixBasedMessagesProvider extends DefaultMessagesProvider;\n// Implementation of the PortTypesProvider interface that is based on suffixes.\npublic class SuffixBasedPortTypesProvider extends AbstractPortTypesProvider;\n// Strategy for adding Types to a Definition.\npublic interface TypesProvider;\n", "des": "Provides a contribution strategy for WSDL definitions."}
{"index": 3096, "repo": "jena-querybuilder-4.9.0", "code": "package querybuilder\n\n// Interfaces that describe various SPARQL clauses as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321.\npackage querybuilder.clauses\n// Classes that implement SPARQL clauses but do not return instances of the builder.\npackage querybuilder.handlers\n// Classes to rewrite Query algebra, expressions and other objects to handle variable replacement for the prepared statement functionality.\npackage querybuilder.rewriters\n// Base class for all QueryBuilders.\npublic abstract class AbstractQueryBuilder<T extends AbstractQueryBuilder<T>> extends Object implements Cloneable, PrologClause<T>, ValuesClause<T>;\n// Builder for SPARQL Ask Queries.\npublic class AskBuilder extends AbstractQueryBuilder<AskBuilder> implements DatasetClause<AskBuilder>, WhereClause<AskBuilder>, SolutionModifierClause<AskBuilder>;\n// Builder for SPARQL Construct Queries.\npublic class ConstructBuilder extends AbstractQueryBuilder<ConstructBuilder> implements DatasetClause<ConstructBuilder>, WhereClause<ConstructBuilder>, SolutionModifierClause<ConstructBuilder>, ConstructClause<ConstructBuilder>;\n// A collection of static methods to convert from Objects to various types used in Query and Update construction.\npublic class Converters extends Object;\n// Builder for SPARQL Describe Queries.\npublic class DescribeBuilder extends AbstractQueryBuilder<DescribeBuilder> implements DatasetClause<DescribeBuilder>, WhereClause<DescribeBuilder>, SolutionModifierClause<DescribeBuilder>, SelectClause<DescribeBuilder>;\n// Create expressions.\npublic class ExprFactory extends Object;\n// The order for the ORDER BY modifiers.\npublic enum Order extends Enum<Order>;\n// Builder for SPARQL Select Queries.\npublic class SelectBuilder extends AbstractQueryBuilder<SelectBuilder> implements DatasetClause<SelectBuilder>, WhereClause<SelectBuilder>, SolutionModifierClause<SelectBuilder>, SelectClause<SelectBuilder>;\n// Class to build update requests.\npublic class UpdateBuilder extends Object;\n// A simple implementation of WhereClause for use in building complex sub queries where a SelectBuilder or similar implementation is more than is needed.\npublic class WhereBuilder extends AbstractQueryBuilder<WhereBuilder> implements WhereClause<WhereBuilder>;\n", "des": "A utility package to simplify the building of ARQ queries in code."}
{"index": 3097, "repo": "jena-querybuilder-4.9.0", "code": "package clauses\n\n// Interface that defines the ConstructClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rConstructTemplate\npublic interface ConstructClause<T extends AbstractQueryBuilder<T>>;\n// Interface that defines the DatasetClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rDatasetClause\npublic interface DatasetClause<T extends AbstractQueryBuilder<T>>;\n// Interface that defines the PrologClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rPrologue\npublic interface PrologClause<T extends AbstractQueryBuilder<T>>;\n// Interface that defines the SelectClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rSelectClause\npublic interface SelectClause<T extends AbstractQueryBuilder<T>>;\n// Interface that defines the SolutionClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rSolutionModifier\npublic interface SolutionModifierClause<T extends AbstractQueryBuilder<T>>;\n// Interface that defines the ValueClause as per https://www.w3.org/TR/sparql11-query/#rValuesClause Conceptually this the values clause constructs a table comprising columns named by variables and rows of data for those columns.\npublic interface ValuesClause<T extends AbstractQueryBuilder<T>>;\n// Interface that defines the WhereClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rWhereClause\npublic interface WhereClause<T extends AbstractQueryBuilder<T>>;\n", "des": "Interfaces that describe various SPARQL clauses as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321."}
{"index": 3098, "repo": "jena-querybuilder-4.9.0", "code": "package handlers\n\n// Class to handle manipulation the aggregation variables in the query.\npublic class AggregationHandler extends Object implements Handler;\n// The handler for construct clauses.\npublic class ConstructHandler extends Object implements Handler;\n// Handler for a dataset.\npublic class DatasetHandler extends Object implements Handler;\n// The base interface for handlers.\npublic interface Handler;\n// A class to handle all the handlers of a query builder and keep them in sync as needed.\npublic class HandlerBlock extends Object;\n// The prolog handler\npublic class PrologHandler extends Object implements Handler;\n// A Select clause handler.\npublic class SelectHandler extends Object implements Handler;\n// The Solution Modifier handler.\npublic class SolutionModifierHandler extends Object implements Handler;\n// \npublic class ValuesHandler extends Object implements Handler;\n// The where handler.\npublic class WhereHandler extends Object implements Handler;\n", "des": "Classes that implement SPARQL clauses but do not return instances of the builder."}
{"index": 3099, "repo": "jena-querybuilder-4.9.0", "code": "package rewriters\n\n// The base class for rewriters.\npublic class AbstractRewriter<T> extends Object;\n// An element visitor that does an in-place modification of the elements to fix union-of-one and similar issues.\npublic class BuildElementVisitor extends Object implements ElementVisitor;\n// A rewriter that implements an ElementVisitor\npublic class ElementRewriter extends AbstractRewriter<Element> implements ElementVisitor;\n// A rewriter that implements an ExprVisitor\npublic class ExprRewriter extends AbstractRewriter<Expr> implements ExprVisitor;\n// A rewriter that implements PathVisitor.\npublic class PathRewriter extends AbstractRewriter<Path> implements PathVisitor;\n", "des": "Classes to rewrite Query algebra, expressions and other objects to handle variable replacement for the prepared statement functionality."}
{"index": 3100, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi\n\n// Contract representing some process that needs to occur during after transaction completion.\nInterface AfterTransactionCompletionProcess;\n// Contract representing some process that needs to occur during before transaction completion.\nInterface BeforeTransactionCompletionProcess;\n// An operation which may be scheduled for later execution.\nInterface Executable;\n", "des": "Defines SPI hooks into the ActionQueue."}
{"index": 3101, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package annotations\n\n// Consolidation of hints available to Hibernate JPA queries.\nClass QueryHints;\n// Cache concurrency strategy.\nEnum CacheConcurrencyStrategy;\n// Enumeration for the different interaction modes between the session and the Level 2 Cache.\nEnum CacheModeType;\n// Cascade types (can override default JPA cascades).\nEnum CascadeType;\n// Defines how the association should be fetched, compared to FetchType which defines when it should be fetched\nEnum FetchMode;\n// Enumeration extending javax.persistence flush modes.\nEnum FlushModeType;\n// At what time(s) will the generation occur?\nEnum GenerationTime;\n// Lazy options available for a collection.\nEnum LazyCollectionOption;\n// Lazy options available for a ToOne association.\nEnum LazyToOneOption;\n// Possible actions when the database contains a non-null fk with no matching target.\nEnum NotFoundAction;\n// Possible actions for on-delete.\nEnum OnDeleteAction;\n// Possible optimistic locking strategies.\nEnum OptimisticLockType;\n// Type of available polymorphism for a particular entity.\nEnum PolymorphismType;\n// Possible styles of checking return codes on SQL INSERT, UPDATE and DELETE queries.\nEnum ResultCheckStyle;\n// \nEnum SortType;\n// Where should Hibernate retrieve the value from? From the database, or from the current JVM?\nEnum SourceType;\n// \nAnnotation Type AccessType;\n// Defines a ToOne-style association pointing to one of several entity types depending on a local discriminator, as opposed to discriminated inheritance where the discriminator is kept as part of the entity hierarchy.\nAnnotation Type Any;\n// \nAnnotation Type AnyMetaDef;\n// \nAnnotation Type AnyMetaDefs;\n// Names a persistent property access strategy (PropertyAccessStrategy) to use.\nAnnotation Type AttributeAccessor;\n// Defines size for batch loading of collections or lazy entities.\nAnnotation Type BatchSize;\n// Add caching strategy to a root entity or a collection.\nAnnotation Type Cache;\n// Apply a cascade strategy on an association.\nAnnotation Type Cascade;\n// Arbitrary SQL CHECK constraints which can be defined at the class, property or collection level.\nAnnotation Type Check;\n// Describe an identifier column for a bag (ie an idbag).\nAnnotation Type CollectionId;\n", "des": "Package containing all the Hibernate specific annotations."}
{"index": 3102, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package boot\n\n// Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior.\npackage boot.registry\n// Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)\npackage boot.xsd\n// Delayed information about an AttributeConverter.\nInterface AttributeConverterInfo;\n// Represents the ORM model as determined from all provided mapping sources.\nInterface Metadata;\n// Contract for specifying various overrides to be used in metamodel building.\nInterface MetadataBuilder;\n// The contract for building a SessionFactory given a number of options.\nInterface SessionFactoryBuilder;\n// Models the definition of caching settings for a particular region.\nClass CacheRegionDefinition;\n// \nClass JaccPermissionDefinition;\n// Entry point into working with sources of metadata information (mapping XML, annotations).\nClass MetadataSources;\n// \nEnum CacheRegionDefinition.CacheRegionType;\n// Defines the possible values for \"hbm2ddl_auto\"\nEnum SchemaAutoTooling;\n// Enum describing how creation and dropping of temporary tables should be done in terms of transaction handling.\nEnum TempTableDdlTransactionHandling;\n// \nClass InvalidMappingException;\n// Indicates a problem parsing a mapping document.\nClass MappingException;\n// \nClass MappingNotFoundException;\n// \nClass UnsupportedOrmXsdVersionException;\n", "des": "This package contains the contracts that make up the Hibernate native bootstrapping API (building a SessionFactory)."}
{"index": 3103, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi\n\n// Describes the context for visiting the entries within an archive\nInterface ArchiveContext;\n// Contract for visiting an archive, which might be a jar, a zip, an exploded directory, etc.\nInterface ArchiveDescriptor;\n// Contract for building ArchiveDescriptor instances.\nInterface ArchiveDescriptorFactory;\n// Represent an entry in the archive.\nInterface ArchiveEntry;\n// Handler for archive entries, based on the classified type of the entry\nInterface ArchiveEntryHandler;\n// Contract for building InputStreams, especially in on-demand situations\nInterface InputStreamAccess;\n// Optional contract for ArchiveDescriptorFactory implementations to implement to be able to adjust <jar-file/> URL's defined in persistence.xml files.\nInterface JarFileEntryUrlAdjuster;\n// Base support for ArchiveDescriptor implementors.\nClass AbstractArchiveDescriptor;\n// \nClass AbstractArchiveDescriptorFactory;\n// Indicates a problem accessing or visiting the archive\nClass ArchiveException;\n", "des": "Defines the SPI for support of \"scanning\" of \"archives\"."}
{"index": 3104, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package naming\n\n// \nInterface EntityNaming;\n// Context for determining the implicit name for an ANY mapping's discriminator column.\nInterface ImplicitAnyDiscriminatorColumnNameSource;\n// Context for determining the implicit name for an ANY mapping's key column.\nInterface ImplicitAnyKeyColumnNameSource;\n// Context for determining the implicit name related to basic values.\nInterface ImplicitBasicColumnNameSource;\n// Context for determining the implicit name for a collection table.\nInterface ImplicitCollectionTableNameSource;\n// Common implicit name source traits for all constraint naming: FK, UK, index\nInterface ImplicitConstraintNameSource;\n// Context for determining the implicit name of an entity's discriminator column.\nInterface ImplicitDiscriminatorColumnNameSource;\n// Context for determining the implicit name of an entity's primary table\nInterface ImplicitEntityNameSource;\n// \nInterface ImplicitForeignKeyNameSource;\n// Context for determining the implicit name of an entity's identifier column.\nInterface ImplicitIdentifierColumnNameSource;\n// \nInterface ImplicitIndexColumnNameSource;\n// \nInterface ImplicitIndexNameSource;\n// Context for determining the implicit name of a \"join column\" (think JoinColumn).\nInterface ImplicitJoinColumnNameSource;\n// Context for determining the implicit name for a join table.\nInterface ImplicitJoinTableNameSource;\n// Context for determining the implicit name of a column used to back the key of a Map.\nInterface ImplicitMapKeyColumnNameSource;\n// Common contract for all implicit naming sources\nInterface ImplicitNameSource;\n// Pluggable strategy for applying implicit naming rules when an explicit name is not given.\nInterface ImplicitNamingStrategy;\n// Used to help determine the implicit name of columns which are part of a primary-key, well simultaneously being part of a foreign-key (join).\nInterface ImplicitPrimaryKeyJoinColumnNameSource;\n// Context for determining the implicit name of an entity's tenant identifier column.\nInterface ImplicitTenantIdColumnNameSource;\n// \nInterface ImplicitUniqueKeyNameSource;\n// Helper contract for dealing with naming strategies.\nInterface NamingStrategyHelper;\n// Pluggable strategy contract for applying physical naming rules for database object names.\nInterface PhysicalNamingStrategy;\n// Originally copied from Spring Boot as this strategy is popular there (original name is SpringPhysicalNamingStrategy).\nClass CamelCaseToUnderscoresNamingStrategy;\n// Models an identifier (name), retrieved from the database.\nClass DatabaseIdentifier;\n", "des": "Represents a proposed new approach to allowing hooks into the process of determining the name of database objects (tables, columns, constraints, etc)."}
{"index": 3105, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package registry\n\n// Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations.\npackage registry.selector\n// Provides the most basic services needed.\nInterface BootstrapServiceRegistry;\n// Contract for an initiator of services that target the standard ServiceRegistry.\nInterface StandardServiceInitiator<R extends Service>;\n// Specialization of the ServiceRegistry contract mainly for type safety.\nInterface StandardServiceRegistry;\n// Builder for BootstrapServiceRegistry instances.\nClass BootstrapServiceRegistryBuilder;\n// Builder for standard ServiceRegistry instances.\nClass StandardServiceRegistryBuilder;\n", "des": "Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior."}
{"index": 3106, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi\n\n// A service for interacting with class loaders.\nInterface ClassLoaderService;\n// \nInterface ClassLoaderService.Work<T>;\n// Indicates a problem performing class loading.\nClass ClassLoadingException;\n", "des": "The class loading service SPI."}
{"index": 3107, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package selector\n\n// Defines actual contract used for strategy selection : StrategySelector.\npackage selector.spi\n// Describes the registration of a named strategy implementation.\nInterface StrategyRegistration<T>;\n// Responsible for providing the registrations of strategy selector(s).\nInterface StrategyRegistrationProvider;\n// A simple implementation of StrategyRegistration.\nClass SimpleStrategyRegistrationImpl<T>;\n", "des": "Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations."}
{"index": 3108, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi\n\n// \nInterface StrategyCreator<T>;\n// Service which acts as a registry for named strategy implementations.\nInterface StrategySelector;\n// Indicates a problem performing the selection/resolution.\nClass StrategySelectionException;\n", "des": "Defines actual contract used for strategy selection : StrategySelector."}
{"index": 3109, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package xsd\n\n// Support for XSD handling related to Hibernate's `cfg.xml` and JPA's `persistence.xml`.\nClass ConfigXsdSupport;\n// When Hibernate loads an XSD we fully expect that to be resolved from our jar file via ClassLoader resource look-up.\nClass LocalXsdResolver;\n// Support for XSD handling related to Hibernate's `hbm.xml` and JPA's `orm.xml`.\nClass MappingXsdSupport;\n// Representation of a locally resolved XSD\nClass XsdDescriptor;\n", "des": "Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)"}
{"index": 3110, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi\n\n// interceptor implementations\npackage spi.interceptor\n// Interface to be implemented by collection trackers that hold the expected size od collections, a simplified Map<String, int>.\nInterface CollectionTracker;\n// The context for performing an enhancement.\nInterface EnhancementContext;\n// Class responsible for performing enhancement.\nInterface Enhancer;\n// Contract for controlling how lazy properties get initialized.\nInterface LazyPropertyInitializer;\n// \nInterface LazyPropertyInitializer.InterceptorImplementor;\n// \nInterface UnloadedClass;\n// \nInterface UnloadedField;\n// default implementation of EnhancementContext.\nClass DefaultEnhancementContext;\n// \nClass EnhancementContextWrapper;\n// Constants used during enhancement.\nClass EnhancerConstants;\n// An exception indicating some kind of problem performing bytecode enhancement.\nClass EnhancementException;\n", "des": "package defining bytecode code enhancement (instrumentation) support."}
{"index": 3111, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package interceptor\n\n// Logging related to bytecode enhancement interceptors\nInterface BytecodeInterceptorLogging;\n// \nInterface BytecodeLazyAttributeInterceptor;\n// \nInterface EnhancementHelper.InheritanceChecker;\n// Information about a particular bytecode lazy attribute grouping.\nInterface LazyFetchGroupMetadata;\n// \nInterface SessionAssociableInterceptor;\n// \nClass AbstractInterceptor;\n// \nClass AbstractLazyLoadInterceptor;\n// Warning this class consists of generated code.\nClass BytecodeInterceptorLogging_$logger;\n// \nClass EnhancementAsProxyLazinessInterceptor;\n// \nClass EnhancementHelper;\n// Descriptor for an attribute which is enabled for bytecode lazy fetching\nClass LazyAttributeDescriptor;\n// Interceptor that loads attributes lazily\nClass LazyAttributeLoadingInterceptor;\n// Information about all of the bytecode lazy attributes for an entity\nClass LazyAttributesMetadata;\n", "des": "interceptor implementations"}
{"index": 3112, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi\n\n// A proxy factory for \"basic proxy\" generation.\nInterface BasicProxyFactory;\n// Encapsulates bytecode enhancement information about a particular entity.\nInterface BytecodeEnhancementMetadata;\n// Contract for providers of bytecode services to Hibernate.\nInterface BytecodeProvider;\n// A persistence provider provides an instance of this interface to the PersistenceUnitInfo.addTransformer method.\nInterface ClassTransformer;\n// An interface for factories of proxy factory instances.\nInterface ProxyFactoryFactory;\n// Represents reflection optimization for a particular class.\nInterface ReflectionOptimizer;\n// Represents optimized entity property access.\nInterface ReflectionOptimizer.AccessOptimizer;\n// Represents optimized entity instantiation.\nInterface ReflectionOptimizer.InstantiationOptimizer;\n// A helper for reading byte code from various input sources.\nClass ByteCodeHelper;\n// \nClass ClassLoadingStrategyHelper;\n// A specialized ClassLoader which performs bytecode enhancement on class definitions as they are loaded into the ClassLoader scope.\nClass InstrumentedClassLoader;\n// Indicates a condition where an instrumented/enhanced class was expected, but the class was not instrumented/enhanced.\nClass NotInstrumentedException;\n", "des": "Package defining bytecode code enhancement (instrumentation) support."}
{"index": 3113, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi\n\n// Package intended for simplifying the worked needed to implement a caching provider.\npackage spi.support\n// SPI contract for Hibernate's second-level cache engine\nInterface CacheImplementor;\n// \nInterface CacheKeysFactory;\n// Defines a context object that a RegionFactory is asked to create (RegionFactory.createTransactionContext(org.hibernate.engine.spi.SharedSessionContractImplementor)}) when a Hibernate Session is created.\nInterface CacheTransactionSynchronization;\n// Specialized Region whose data is accessed directly (not requiring key/item wrapping, e.g.\nInterface DirectAccessRegion;\n// A Region for cacheable domain data - entity, collection, natural-id.\nInterface DomainDataRegion;\n// Optional Region contract defining support for extra statistic information\nInterface ExtendedStatisticsSupport;\n// \nInterface QueryCache;\n// Defines the responsibility for managing query result data caching in regards to a specific region.\nInterface QueryResultsCache;\n// Defines the contract for a cache region which will specifically be used to store query results.\nInterface QueryResultsRegion;\n// Contract for a named \"region\".\nInterface Region;\n// Contract for building second level cache regions.\nInterface RegionFactory;\n// \nInterface SecondLevelCacheLogger;\n// Wrapper for a TimestampsRegion adding handling of stale results\nInterface TimestampsCache;\n// Responsible for building the TimestampsRegionAccessFactory to use for managing query results in regards to staleness of the underlying tables (sometimes called \"query spaces\" or \"table spaces\")\nInterface TimestampsCacheFactory;\n// \nInterface TimestampsRegion;\n// \nInterface UpdateTimestampsCache;\n// \nClass AbstractCacheTransactionSynchronization;\n// \nClass AbstractRegionFactory;\n// Allows cached queries to be keyed by enabled filters.\nClass FilterKey;\n// A key that identifies a particular query with bound parameter values.\nClass QueryKey;\n// \nClass QuerySpacesHelper;\n// Warning this class consists of generated code.\nClass SecondLevelCacheLogger_$logger;\n// \nClass StandardCacheTransactionSynchronization;\n", "des": "Defines the integration aspect of Hibernate's second-level caching allowing \"caching back ends\" to be plugged in as a caching provider."}
{"index": 3114, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package support\n\n// Optional interface caching implementors can implement in their CachedDomainDataAccess impls to automatically have them destroyed when this region is destroyed\nInterface AbstractDomainDataRegion.Destructible;\n// Interface type implemented by all wrapper objects in the cache.\nInterface AbstractReadWriteAccess.Lockable;\n// Specialization of StorageAccess for domain data regions\nInterface DomainDataStorageAccess;\n// A general read/write abstraction over the specific \"cache\" object from the caching provider.\nInterface StorageAccess;\n// \nClass AbstractCachedDomainDataAccess;\n// \nClass AbstractCollectionDataAccess;\n// \nClass AbstractDomainDataRegion;\n// \nClass AbstractEntityDataAccess;\n// \nClass AbstractNaturalIdDataAccess;\n// \nClass AbstractReadWriteAccess;\n// Wrapper type representing unlocked items.\nClass AbstractReadWriteAccess.Item;\n// Wrapper type representing locked items.\nClass AbstractReadWriteAccess.SoftLockImpl;\n// \nClass AbstractRegion;\n// \nClass CacheUtils;\n// Standard support for CollectionDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass CollectionNonStrictReadWriteAccess;\n// Standard support for CollectionDataAccess using the AccessType.READ_ONLY access type.\nClass CollectionReadOnlyAccess;\n// Standard support for CollectionDataAccess using the AccessType.READ_WRITE access type.\nClass CollectionReadWriteAccess;\n// \nClass CollectionTransactionAccess;\n// Bridge between DirectAccessRegion and StorageAccess\nClass DirectAccessRegionTemplate;\n// \nClass DomainDataRegionImpl;\n// Abstract implementation of DomainDataRegion based on implementations just needing to provide a DomainDataStorageAccess reference for basic caching support - DomainDataStorageAccess acts as a simple wrapper around some generalized cache actions such as put or get.\nClass DomainDataRegionTemplate;\n// Standard support for EntityDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass EntityNonStrictReadWriteAccess;\n// Standard support for EntityDataAccess using the AccessType.READ_ONLY access type.\nClass EntityReadOnlyAccess;\n// Standard support for EntityDataAccess using the AccessType.READ_WRITE access type.\nClass EntityReadWriteAccess;\n// \nClass EntityTransactionalAccess;\n", "des": "Package intended for simplifying the worked needed to implement a caching provider."}
{"index": 3115, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package reflection\n\n// \nInterface AttributeConverterDefinitionCollector;\n// A ClassLoaderAccess implementation based on lazy access to MetadataBuildingOptions\nClass ClassLoaderAccessLazyImpl;\n// \nClass PersistentAttributeFilter;\n", "des": "Defines the capability to merge mapping information from both annotations and orm.xml sources into a unified set of metadata in the Hibernate commons-annotations model."}
{"index": 3116, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi\n\n// Hibernate \"wraps\" a java collection in an instance of PersistentCollection.\nInterface LazyInitializable;\n// Persistent collections are treated as value objects by Hibernate.\nInterface PersistentCollection;\n", "des": "SPI definitions for persistent collections"}
{"index": 3117, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package context\n\n// SPI level contracts around \"current session\" support.\npackage context.spi\n// Indicates that tenant identifiers did not match in cases where CurrentTenantIdentifierResolver.validateExistingCurrentSessions() returns true and there is a mismatch found.\nClass TenantIdentifierMismatchException;\n", "des": "Defines support for \"current session\" feature."}
{"index": 3118, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi\n\n// Defines the contract for implementations which know how to scope the notion of a current session.\nInterface CurrentSessionContext;\n// A callback registered with the SessionFactory that is responsible for resolving the current tenant identifier for use with CurrentSessionContext and SessionFactory.getCurrentSession()\nInterface CurrentTenantIdentifierResolver;\n// Base support for CurrentSessionContext implementors.\nClass AbstractCurrentSessionContext;\n", "des": "SPI level contracts around \"current session\" support."}
{"index": 3119, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package lock\n\n// A strategy abstraction for how locks are obtained in the underlying database.\nInterface LockingStrategy;\n// Base LockingStrategy implementation to support implementations based on issuing SQL SELECT statements\nClass AbstractSelectLockingStrategy;\n// An optimistic locking strategy that forces an increment of the version (after verifying that version hasn't changed).\nClass OptimisticForceIncrementLockingStrategy;\n// An optimistic locking strategy that verifies that the version hasn't changed (prior to transaction commit).\nClass OptimisticLockingStrategy;\n// A pessimistic locking strategy that increments the version immediately (obtaining an exclusive write lock).\nClass PessimisticForceIncrementLockingStrategy;\n// A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticReadSelectLockingStrategy;\n// A pessimistic locking strategy where the locks are obtained through update statements.\nClass PessimisticReadUpdateLockingStrategy;\n// A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticWriteSelectLockingStrategy;\n// A pessimistic locking strategy where the locks are obtained through update statements.\nClass PessimisticWriteUpdateLockingStrategy;\n// A locking strategy where the locks are obtained through select statements.\nClass SelectLockingStrategy;\n// A locking strategy where the locks are obtained through update statements.\nClass UpdateLockingStrategy;\n// Represents an error trying to apply a LockingStrategy to an entity\nClass LockingStrategyException;\n// Represents an error trying to apply an optimistic LockingStrategy to an entity\nClass OptimisticEntityLockException;\n// Represents an error trying to apply a pessimistic LockingStrategy to an entity\nClass PessimisticEntityLockException;\n", "des": "Support for Dialect-specific locking strategies"}
