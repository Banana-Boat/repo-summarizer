{"index": 2342, "repo": "spring-boot-3.1.1", "code": "package client;\n\npublic final class ClientHttpRequestFactories extends Object; // Utility class that can be used to create ClientHttpRequestFactory instances configured using given ClientHttpRequestFactorySettings.\npublic record ClientHttpRequestFactorySettings(Duration connectTimeout, Duration readTimeout, Boolean bufferRequestBody, SslBundle sslBundle) extends Record; // Settings that can be applied when creating a ClientHttpRequestFactory.\n@Deprecated(since=\"3.0.0\", forRemoval=true) public class ClientHttpRequestFactorySupplier extends Object implements Supplier<org.springframework.http.client.ClientHttpRequestFactory>;\npublic class RestTemplateBuilder extends Object; // Builder that can be used to configure and create a RestTemplate.\n@FunctionalInterface public interface RestTemplateCustomizer; // Callback interface that can be used to customize a RestTemplate.\n@FunctionalInterface public interface RestTemplateRequestCustomizer<T extends org.springframework.http.client.ClientHttpRequest>; // Callback interface that can be used to customize the ClientHttpRequest sent from a RestTemplate.\npublic class RootUriTemplateHandler extends Object implements org.springframework.web.util.UriTemplateHandler; // UriTemplateHandler to set the root for URI that starts with '/'.\n", "des": "Web client utilities."}
{"index": 2343, "repo": "spring-boot-3.1.1", "code": "package codec;\n\n@FunctionalInterface public interface CodecCustomizer; // Callback interface that can be used to customize codecs configuration for an HTTP client and/or server with a CodecConfigurer.\n", "des": "Support for web-based codecs."}
{"index": 2344, "repo": "spring-boot-3.1.1", "code": "package context;\n\npublic interface ConfigurableWebServerApplicationContext extends org.springframework.context.ConfigurableApplicationContext, WebServerApplicationContext; // SPI interface to be implemented by most if not all web server application contexts.\npublic class MissingWebServerFactoryBeanException extends org.springframework.beans.factory.NoSuchBeanDefinitionException; // Exception thrown when there is no WebServerFactory bean of the required type defined in a WebServerApplicationContext.\npublic class ServerPortInfoApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>, org.springframework.context.ApplicationListener<WebServerInitializedEvent>; // ApplicationContextInitializer that sets Environment properties for the ports that WebServer servers are actually listening on.\npublic interface WebServerApplicationContext extends org.springframework.context.ApplicationContext; // Interface to be implemented by application contexts that create and manage the lifecycle of an embedded WebServer.\npublic final class WebServerGracefulShutdownLifecycle extends Object implements org.springframework.context.SmartLifecycle; // SmartLifecycle to trigger WebServer graceful shutdown.\npublic abstract class WebServerInitializedEvent extends org.springframework.context.ApplicationEvent; // Event to be published when the WebServer is ready.\npublic class WebServerPortFileWriter extends Object implements org.springframework.context.ApplicationListener<WebServerInitializedEvent>; // An ApplicationListener that saves embedded server port and management port into file.\n", "des": "Web integrations with Spring's ApplicationContext."}
{"index": 2345, "repo": "spring-boot-3.1.1", "code": "package jetty;\n\npublic interface ConfigurableJettyWebServerFactory extends ConfigurableWebServerFactory; // ConfigurableWebServerFactory for Jetty-specific features.\npublic class JettyReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableJettyWebServerFactory; // ReactiveWebServerFactory that can be used to create JettyWebServers.\n@FunctionalInterface public interface JettyServerCustomizer; // Callback interface that can be used to customize a Jetty Server.\npublic class JettyServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableJettyWebServerFactory, org.springframework.context.ResourceLoaderAware; // ServletWebServerFactory that can be used to create a JettyWebServer.\npublic class JettyWebServer extends Object implements WebServer; // WebServer that can be used to control a Jetty web server.\npublic class ServletContextInitializerConfiguration extends org.eclipse.jetty.webapp.AbstractConfiguration; // Jetty Configuration that calls ServletContextInitializers.\n", "des": "Embedded reactive and servlet web server implementations backed by Jetty."}
{"index": 2346, "repo": "spring-boot-3.1.1", "code": "package netty;\n\npublic class NettyReactiveWebServerFactory extends AbstractReactiveWebServerFactory; // ReactiveWebServerFactory that can be used to create NettyWebServers.\n@FunctionalInterface public interface NettyRouteProvider extends Function<reactor.netty.http.server.HttpServerRoutes,reactor.netty.http.server.HttpServerRoutes>; // Function that can add new routes to an HttpServerRoutes instance.\n@FunctionalInterface public interface NettyServerCustomizer extends Function<reactor.netty.http.server.HttpServer,reactor.netty.http.server.HttpServer>; // Mapping function that can be used to customize a Reactor Netty server instance.\npublic class NettyWebServer extends Object implements WebServer; // WebServer that can be used to control a Reactor Netty web server.\npublic class SslServerCustomizer extends Object implements NettyServerCustomizer; // NettyServerCustomizer that configures SSL for the given Reactor Netty server instance.\n", "des": "Embedded reactive web server implementation backed by Netty."}
{"index": 2347, "repo": "spring-boot-3.1.1", "code": "package tomcat;\n\npublic interface ConfigurableTomcatWebServerFactory extends ConfigurableWebServerFactory; // ConfigurableWebServerFactory for Tomcat-specific features.\npublic class ConnectorStartFailedException extends WebServerException; // A ConnectorStartFailedException is thrown when a Tomcat Connector fails to start, for example due to a port clash or incorrect SSL configuration.\n@FunctionalInterface public interface TomcatConnectorCustomizer; // Callback interface that can be used to customize a Tomcat Connector.\n@FunctionalInterface public interface TomcatContextCustomizer; // Callback interface that can be used to customize a Tomcat Context.\npublic class TomcatEmbeddedWebappClassLoader extends org.apache.catalina.loader.ParallelWebappClassLoader; // Extension of Tomcat's ParallelWebappClassLoader that does not consider the system classloader.\n@FunctionalInterface public interface TomcatProtocolHandlerCustomizer<T extends org.apache.coyote.ProtocolHandler>; // Callback interface that can be used to customize the ProtocolHandler on the Connector.\npublic class TomcatReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableTomcatWebServerFactory; // ReactiveWebServerFactory that can be used to create a TomcatWebServer.\npublic class TomcatServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableTomcatWebServerFactory, org.springframework.context.ResourceLoaderAware; // AbstractServletWebServerFactory that can be used to create TomcatWebServers.\npublic class TomcatWebServer extends Object implements WebServer; // WebServer that can be used to control a Tomcat web server.\n", "des": "Embedded reactive and servlet web server implementations backed by Tomcat."}
{"index": 2348, "repo": "spring-boot-3.1.1", "code": "package undertow;\n\npublic interface ConfigurableUndertowWebServerFactory extends ConfigurableWebServerFactory; // ConfigurableWebServerFactory for Undertow-specific features.\n@FunctionalInterface public interface HttpHandlerFactory; // Factory used by UndertowServletWebServer to add HttpHandlers.\n@FunctionalInterface public interface UndertowBuilderCustomizer; // Callback interface that can be used to customize an Undertow Undertow.Builder.\n@FunctionalInterface public interface UndertowDeploymentInfoCustomizer; // Callback interface that can be used to customize an Undertow DeploymentInfo.\npublic class UndertowReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableUndertowWebServerFactory; // ReactiveWebServerFactory that can be used to create UndertowWebServers.\npublic class UndertowServletWebServer extends UndertowWebServer; // WebServer that can be used to control an embedded Undertow server.\npublic class UndertowServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableUndertowWebServerFactory, org.springframework.context.ResourceLoaderAware; // ServletWebServerFactory that can be used to create UndertowServletWebServers.\npublic class UndertowWebServer extends Object implements WebServer; // WebServer that can be used to control an Undertow web server.\n", "des": "Embedded reactive and servlet web server implementations backed by Undertow."}
{"index": 2349, "repo": "spring-boot-3.1.1", "code": "package error;\n\npublic final class ErrorAttributeOptions extends Object; // Options controlling the contents of ErrorAttributes.\npublic static enum ErrorAttributeOptions.Include extends Enum<ErrorAttributeOptions.Include>; // Error attributes that can be included in an error response.\n", "des": "Spring Web error handling infrastructure."}
{"index": 2350, "repo": "spring-boot-3.1.1", "code": "package context;\n\npublic class AnnotationConfigReactiveWebApplicationContext extends org.springframework.context.annotation.AnnotationConfigApplicationContext implements ConfigurableReactiveWebApplicationContext; // ConfigurableReactiveWebApplicationContext that accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class AnnotationConfigReactiveWebServerApplicationContext extends ReactiveWebServerApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // ReactiveWebServerApplicationContext that accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic interface ConfigurableReactiveWebApplicationContext extends org.springframework.context.ConfigurableApplicationContext, ReactiveWebApplicationContext; // Interface to provide configuration for a reactive web application.\npublic interface ConfigurableReactiveWebEnvironment extends org.springframework.core.env.ConfigurableEnvironment; // Specialization of ConfigurableEnvironment for reactive application contexts.\npublic class GenericReactiveWebApplicationContext extends org.springframework.context.support.GenericApplicationContext implements ConfigurableReactiveWebApplicationContext; // Subclass of GenericApplicationContext, suitable for reactive web environments.\npublic interface ReactiveWebApplicationContext extends org.springframework.context.ApplicationContext; // Interface to provide configuration for a reactive web application.\npublic class ReactiveWebServerApplicationContext extends GenericReactiveWebApplicationContext implements ConfigurableWebServerApplicationContext; // A GenericReactiveWebApplicationContext that can be used to bootstrap itself from a contained ReactiveWebServerFactory bean.\npublic class ReactiveWebServerInitializedEvent extends WebServerInitializedEvent; // Event to be published after the WebServer is ready.\npublic class StandardReactiveWebEnvironment extends org.springframework.core.env.StandardEnvironment implements ConfigurableReactiveWebEnvironment; // Environment implementation to be used by Reactive-based web applications.\n", "des": "Reactive based web integrations with Spring's ApplicationContext."}
{"index": 2351, "repo": "spring-boot-3.1.1", "code": "package error;\n\npublic class DefaultErrorAttributes extends Object implements ErrorAttributes; // Default implementation of ErrorAttributes.\npublic interface ErrorAttributes; // Provides access to error attributes which can be logged or presented to the user.\n@FunctionalInterface public interface ErrorWebExceptionHandler extends org.springframework.web.server.WebExceptionHandler; // Marker interface that indicates that a WebExceptionHandler is used to render errors.\n", "des": "Spring WebFlux error handling infrastructure."}
{"index": 2352, "repo": "spring-boot-3.1.1", "code": "package filter;\n\npublic class OrderedHiddenHttpMethodFilter extends org.springframework.web.filter.reactive.HiddenHttpMethodFilter implements OrderedWebFilter; // HiddenHttpMethodFilter that also implements Ordered.\npublic interface OrderedWebFilter extends org.springframework.web.server.WebFilter, org.springframework.core.Ordered; // An Ordered WebFilter.\n", "des": "Spring Boot specific WebFilter implementations."}
{"index": 2353, "repo": "spring-boot-3.1.1", "code": "package client;\n\n@FunctionalInterface public interface WebClientCustomizer; // Callback interface that can be used to customize a WebClient.Builder.\n", "des": "Spring WebFlux WebClient support abstractions."}
{"index": 2354, "repo": "spring-boot-3.1.1", "code": "package view;\n\npublic class MustacheView extends org.springframework.web.reactive.result.view.AbstractUrlBasedView; // Spring WebFlux View using the Mustache template engine.\npublic class MustacheViewResolver extends org.springframework.web.reactive.result.view.UrlBasedViewResolver; // Spring WebFlux ViewResolver for Mustache.\n", "des": "Additional Views for use with WebFlux."}
{"index": 2355, "repo": "spring-boot-3.1.1", "code": "package server;\n\npublic abstract class AbstractReactiveWebServerFactory extends AbstractConfigurableWebServerFactory implements ConfigurableReactiveWebServerFactory; // Abstract base class for ReactiveWebServerFactory implementations.\npublic interface ConfigurableReactiveWebServerFactory extends ConfigurableWebServerFactory, ReactiveWebServerFactory; // Configurable ReactiveWebServerFactory.\n@FunctionalInterface public interface ReactiveWebServerFactory extends WebServerFactory; // Factory interface that can be used to create a reactive WebServer.\n", "des": "Reactive web server abstractions."}
{"index": 2356, "repo": "spring-boot-3.1.1", "code": "package server;\n\npublic abstract class AbstractConfigurableWebServerFactory extends Object implements ConfigurableWebServerFactory; // Abstract base class for ConfigurableWebServerFactory implementations.\n@Deprecated(since=\"3.1.0\", forRemoval=true) public final class CertificateFileSslStoreProvider extends Object implements SslStoreProvider;\npublic class Compression extends Object; // Simple server-independent abstraction for compression configuration.\npublic interface ConfigurableWebServerFactory extends WebServerFactory, ErrorPageRegistry; // A configurable WebServerFactory.\npublic class Cookie extends Object; // Cookie properties.\npublic static enum Cookie.SameSite extends Enum<Cookie.SameSite>; // SameSite values.\npublic class ErrorPage extends Object; // Simple server-independent abstraction for error pages.\n@FunctionalInterface public interface ErrorPageRegistrar; // Interface to be implemented by types that register ErrorPages.\npublic class ErrorPageRegistrarBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware; // BeanPostProcessor that applies all ErrorPageRegistrars from the bean factory to ErrorPageRegistry beans.\n@FunctionalInterface public interface ErrorPageRegistry; // Interface for a registry that holds ErrorPages.\n@FunctionalInterface public interface GracefulShutdownCallback; // A callback for the result of a graceful shutdown request.\npublic enum GracefulShutdownResult extends Enum<GracefulShutdownResult>; // The result of a graceful shutdown request.\npublic class Http2 extends Object; // Simple server-independent abstraction for HTTP/2 configuration.\npublic sealed class MimeMappings extends Object implements Iterable<MimeMappings.Mapping>; // Simple server-independent abstraction for mime mappings.\npublic static final class MimeMappings.Mapping extends Object; // A single mime mapping.\npublic class PortInUseException extends WebServerException; // A PortInUseException is thrown when a web server fails to start due to a port already being in use.\npublic enum Shutdown extends Enum<Shutdown>; // Configuration for shutting down a WebServer.\npublic class Ssl extends Object; // Simple server-independent abstraction for SSL configuration.\npublic static enum Ssl.ClientAuth extends Enum<Ssl.ClientAuth>; // Client authentication types.\n", "des": "Support for embedded web servers."}
{"index": 2357, "repo": "spring-boot-3.1.1", "code": "package servlet;\n\npackage servlet.context; // Servlet based web integrations with Spring's WebApplicationContext.\npackage servlet.error; // Spring MVC error handling infrastructure.\npackage servlet.filter; // Spring Boot specific Filter implementations.\npackage servlet.server; // Servlet web server abstractions.\npackage servlet.support; // Support classes for Servlet-based web servers.\npackage servlet.view; // Additional Views for use with Web MVC.\npublic abstract class AbstractFilterRegistrationBean<T extends jakarta.servlet.Filter> extends DynamicRegistrationBean<jakarta.servlet.FilterRegistration.Dynamic>; // Abstract base ServletContextInitializer to register Filters in a Servlet 3.0+ container.\npublic class DelegatingFilterProxyRegistrationBean extends AbstractFilterRegistrationBean<org.springframework.web.filter.DelegatingFilterProxy> implements org.springframework.context.ApplicationContextAware; // A ServletContextInitializer to register DelegatingFilterProxys in a Servlet 3.0+ container.\npublic enum DispatcherType extends Enum<DispatcherType>; // Enumeration of filter dispatcher types, identical to DispatcherType and used in configuration as the servlet API may not be present.\npublic abstract class DynamicRegistrationBean<D extends jakarta.servlet.Registration.Dynamic> extends RegistrationBean implements org.springframework.beans.factory.BeanNameAware; // Base class for Servlet 3.0+ dynamic based registration beans.\npublic class FilterRegistrationBean<T extends jakarta.servlet.Filter> extends AbstractFilterRegistrationBean<T>; // A ServletContextInitializer to register Filters in a Servlet 3.0+ container.\npublic class MultipartConfigFactory extends Object; // Factory that can be used to create a MultipartConfigElement.\npublic abstract class RegistrationBean extends Object implements ServletContextInitializer, org.springframework.core.Ordered; // Base class for Servlet 3.0+ based registration beans.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.boot.web.servlet.ServletComponentScanRegistrar.class) public @interface ServletComponentScan; // Enables scanning for Servlet components (filters, servlets, and listeners).\n@FunctionalInterface public interface ServletContextInitializer; // Interface used to configure a Servlet 3.0+ context programmatically.\n", "des": "Classes and utilities designed to work with the jakarta.servlet specification."}
{"index": 2358, "repo": "spring-boot-3.1.1", "code": "package context;\n\npublic class AnnotationConfigServletWebApplicationContext extends org.springframework.web.context.support.GenericWebApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // GenericWebApplicationContextthat accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class AnnotationConfigServletWebServerApplicationContext extends ServletWebServerApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // ServletWebServerApplicationContext that accepts annotated classes as input - in particular @Configuration -annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.\npublic class ServletWebServerApplicationContext extends org.springframework.web.context.support.GenericWebApplicationContext implements ConfigurableWebServerApplicationContext; // A WebApplicationContext that can be used to bootstrap itself from a contained ServletWebServerFactory bean.\npublic static class ServletWebServerApplicationContext.ExistingWebApplicationScopes extends Object; // Utility class to store and restore any user defined scopes.\npublic class ServletWebServerInitializedEvent extends WebServerInitializedEvent; // Event to be published after the WebServer is ready.\npublic class WebApplicationContextServletContextAwareProcessor extends org.springframework.web.context.support.ServletContextAwareProcessor; // Variant of ServletContextAwareProcessor for use with a ConfigurableWebApplicationContext.\npublic class XmlServletWebServerApplicationContext extends ServletWebServerApplicationContext; // ServletWebServerApplicationContext which takes its configuration from XML documents, understood by an XmlBeanDefinitionReader.\n", "des": "Servlet based web integrations with Spring's WebApplicationContext."}
{"index": 2359, "repo": "spring-boot-3.1.1", "code": "package error;\n\n@Order(-2147483648) public class DefaultErrorAttributes extends Object implements ErrorAttributes, org.springframework.web.servlet.HandlerExceptionResolver, org.springframework.core.Ordered; // Default implementation of ErrorAttributes.\npublic interface ErrorAttributes; // Provides access to error attributes which can be logged or presented to the user.\npublic interface ErrorController; // Marker interface used to identify a @Controller that should be used to render errors.\n", "des": "Spring MVC error handling infrastructure."}
{"index": 2360, "repo": "spring-boot-3.1.1", "code": "package filter;\n\npublic class ApplicationContextHeaderFilter extends org.springframework.web.filter.OncePerRequestFilter; // OncePerRequestFilter to add an X-Application-Context header that contains the ApplicationContext ID.\npublic class OrderedCharacterEncodingFilter extends org.springframework.web.filter.CharacterEncodingFilter implements OrderedFilter; // CharacterEncodingFilter that also implements Ordered.\npublic interface OrderedFilter extends jakarta.servlet.Filter, org.springframework.core.Ordered; // An Ordered Filter.\npublic class OrderedFormContentFilter extends org.springframework.web.filter.FormContentFilter implements OrderedFilter; // FormContentFilter that also implements Ordered.\npublic class OrderedHiddenHttpMethodFilter extends org.springframework.web.filter.HiddenHttpMethodFilter implements OrderedFilter; // HiddenHttpMethodFilter that also implements Ordered.\npublic class OrderedRequestContextFilter extends org.springframework.web.filter.RequestContextFilter implements OrderedFilter; // RequestContextFilter that also implements Ordered.\n", "des": "Spring Boot specific Filter implementations."}
{"index": 2361, "repo": "spring-boot-3.1.1", "code": "package server;\n\npublic abstract class AbstractServletWebServerFactory extends AbstractConfigurableWebServerFactory implements ConfigurableServletWebServerFactory; // Abstract base class for ConfigurableServletWebServerFactory implementations.\npublic interface ConfigurableServletWebServerFactory extends ConfigurableWebServerFactory, ServletWebServerFactory, WebListenerRegistry; // A configurable ServletWebServerFactory.\n@FunctionalInterface public interface CookieSameSiteSupplier; // Strategy interface that can be used with ConfigurableServletWebServerFactory implementations in order to supply custom Cookie.SameSite values for specific cookies.\npublic class Encoding extends Object; // Configuration properties for server HTTP encoding.\npublic static enum Encoding.Type extends Enum<Encoding.Type>; // Type of HTTP message to consider for encoding configuration.\npublic class Jsp extends Object; // Configuration for the server's JSP servlet.\n@FunctionalInterface public interface ServletWebServerFactory extends WebServerFactory; // Factory interface that can be used to create a WebServer.\npublic class Session extends Object; // Session properties.\npublic static class Session.Cookie extends Cookie; // Session cookie properties.\npublic static enum Session.SessionTrackingMode extends Enum<Session.SessionTrackingMode>; // Available session tracking modes (mirrors SessionTrackingMode.\n", "des": "Servlet web server abstractions."}
{"index": 2362, "repo": "spring-boot-3.1.1", "code": "package support;\n\npublic class ErrorPageFilter extends Object implements jakarta.servlet.Filter, ErrorPageRegistry, org.springframework.core.Ordered; // A Servlet Filter that provides an ErrorPageRegistry for non-embedded applications (i.e.\npublic class ServletContextApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableWebApplicationContext>, org.springframework.core.Ordered; // ApplicationContextInitializer for setting the servlet context.\npublic abstract class SpringBootServletInitializer extends Object implements org.springframework.web.WebApplicationInitializer; // An opinionated WebApplicationInitializer to run a SpringApplication from a traditional WAR deployment.\n", "des": "Support classes for Servlet-based web servers."}
{"index": 2363, "repo": "spring-boot-3.1.1", "code": "package view;\n\npublic class MustacheView extends org.springframework.web.servlet.view.AbstractTemplateView; // Spring MVC View using the Mustache template engine.\npublic class MustacheViewResolver extends org.springframework.web.servlet.view.AbstractTemplateViewResolver; // Spring MVC ViewResolver for Mustache.\n", "des": "Additional Views for use with Web MVC."}
{"index": 2364, "repo": "spring-boot-3.1.1", "code": "package client;\n\npublic class HttpWebServiceMessageSenderBuilder extends Object; // WebServiceMessageSender builder that can detect a suitable HTTP library based on the classpath.\npublic class WebServiceTemplateBuilder extends Object; // Builder that can be used to configure and create a WebServiceTemplate.\n@FunctionalInterface public interface WebServiceTemplateCustomizer; // Callback interface that can be used to customize a WebServiceTemplate.\n", "des": "Web Services client utilities."}
{"index": 2365, "repo": "camel-base-4.0.0-RC1", "code": "package properties;\n\npublic abstract class AbstractLocationPropertiesSource extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.spi.LoadablePropertiesSource, LocationPropertiesSource; // Base class for LoadablePropertiesSource which can load properties from a source such as classpath or file system.\npublic class ClasspathPropertiesSource extends AbstractLocationPropertiesSource implements org.apache.camel.Ordered;\npublic class DefaultPropertiesFunctionResolver extends org.apache.camel.support.service.ServiceSupport implements PropertiesFunctionResolver, org.apache.camel.CamelContextAware, org.apache.camel.NonManagedService, org.apache.camel.StaticService; // Default PropertiesFunctionResolver.\npublic class DefaultPropertiesLookup extends Object implements PropertiesLookup; // Default PropertiesLookup which lookup properties from a Properties with all existing properties.\npublic class DefaultPropertiesParser extends Object implements PropertiesParser; // A parser to parse a string which contains property placeholders.\npublic class DefaultPropertiesSourceFactory extends Object implements org.apache.camel.spi.PropertiesSourceFactory;\npublic class EnvPropertiesFunction extends Object implements org.apache.camel.spi.PropertiesFunction; // A PropertiesFunction that lookup the property value from OS environment variables.\npublic class FilePropertiesSource extends AbstractLocationPropertiesSource implements org.apache.camel.Ordered;\npublic interface LocationPropertiesSource extends org.apache.camel.spi.PropertiesSource; // A PropertiesSource which was created from a PropertiesLocation.\n@ManagedResource(description=\"Managed PropertiesComponent\") @JdkService(\"properties-component-factory\") @Configurer(bootstrap=true) public class PropertiesComponent extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.spi.PropertiesComponent, org.apache.camel.StaticService, org.apache.camel.CamelContextAware; // The properties component allows you to use property placeholders in Camel.\npublic class PropertiesComponentConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements org.apache.camel.spi.GeneratedPropertyConfigurer, org.apache.camel.spi.PropertyConfigurerGetter; // Generated by camel build tools - do NOT edit this file!\npublic interface PropertiesFunctionResolver; // Resolver for built-in and custom PropertiesFunction.\npublic final class PropertiesLocation extends Object;\n@FunctionalInterface public interface PropertiesLookup; // Used by PropertiesParser to lookup properties by their name\n", "des": "The Properties Component for lookup of property placeholders for endpoint URI."}
{"index": 2366, "repo": "camel-base-4.0.0-RC1", "code": "package converter;\n\n@DeferredContextBinding public final class CamelBaseBulkConverterLoader extends Object implements org.apache.camel.spi.TypeConverterLoader, org.apache.camel.spi.BulkTypeConverters, org.apache.camel.CamelContextAware; // Generated by camel build tools - do NOT edit this file!\n@Converter(generateBulkLoader=true) public final class CamelConverter extends Object; // Some useful converters for Camel APIs such as to convert a Predicate or Expression to a Processor\n@Converter(generateBulkLoader=true) public final class CollectionConverter extends Object; // Some core java.util Collection based Type Converters\n@Converter(generateBulkLoader=true) public final class DateTimeConverter extends Object; // Date and time related converters.\n@Converter(generateBulkLoader=true) public final class DurationConverter extends Object; // Converters for java.time.Duration.\n@Converter(generateBulkLoader=true) public final class IOConverter extends Object; // Some core java.io based Type Converters\n@Converter(generateBulkLoader=true) public final class NIOConverter extends Object; // Some core java.nio based Type Converters\n@Converter(generateBulkLoader=true) public final class ObjectConverter extends Object; // Some core java.lang based Type Converters\n@Converter(generateBulkLoader=true) public final class ResourceConverter extends Object;\n@Converter(generateBulkLoader=true) public final class SQLConverter extends Object; // SQL Date and time related converters.\n@Converter(generateBulkLoader=true) public final class UriTypeConverter extends Object; // A TypeConverter that converts to and from URIs.\n", "des": "A set of helper classes for converting from different types of Java object to be used by the Type Conversion Support"}
{"index": 2367, "repo": "camel-base-4.0.0-RC1", "code": "package converter;\n\npublic class AnnotationTypeConverterLoader extends Object implements org.apache.camel.spi.TypeConverterLoader; // A class which will auto-discover Converter objects and methods to pre-load the TypeConverterRegistry of converters on startup.\npublic class ArrayTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A type converter which is used to convert to and from array types particularly for derived types of array component types and dealing with primitive array types.\npublic class AsyncProcessorTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A simple converter that can convert any Processor to an AsyncProcessor.\npublic abstract class BaseTypeConverterRegistry extends CoreTypeConverterRegistry; // Base implementation of a type converter registry used for type converters in Camel.\npublic class CoreTypeConverterRegistry extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.TypeConverter, org.apache.camel.spi.TypeConverterRegistry;\npublic static class CoreTypeConverterRegistry.FallbackTypeConverter extends Object; // Represents a fallback type converter\npublic class DefaultTypeConverter extends BaseTypeConverterRegistry implements org.apache.camel.spi.AnnotationScanTypeConverters; // Default implementation of a type converter registry used for type converters in Camel.\npublic class EnumTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A type converter which is used to convert from String to enum type\npublic final class FutureTypeConverter extends org.apache.camel.support.TypeConverterSupport; // Future type converter.\npublic class InstanceMethodFallbackTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which instantiates an object so that an instance method can be used as a fallback type converter\npublic class InstanceMethodTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which instantiates an object so that an instance method can be used as a type converter\npublic class StaticMethodFallbackTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which invokes a static method as a fallback type converter from a type to another type\npublic class StaticMethodTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which invokes a static method to convert from a type to another type\n", "des": "Default implementation classes the Type Conversion Strategies"}
{"index": 2368, "repo": "camel-base-4.0.0-RC1", "code": "package event;\n\npublic abstract class AbstractContextEvent extends EventObject implements org.apache.camel.spi.CamelEvent.CamelContextEvent; // Base class for CamelContext events.\npublic abstract class AbstractExchangeEvent extends EventObject implements org.apache.camel.spi.CamelEvent.ExchangeEvent; // Base class for Exchange events.\npublic abstract class AbstractRouteEvent extends EventObject implements org.apache.camel.spi.CamelEvent.RouteEvent; // Base class for CamelContext events.\npublic abstract class AbstractStepEvent extends AbstractExchangeEvent; // Base class for step events.\npublic class CamelContextInitializedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextInitializedEvent;\npublic class CamelContextInitializingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextInitializingEvent;\npublic class CamelContextReloadedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadedEvent;\npublic class CamelContextReloadFailureEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadFailureEvent;\npublic class CamelContextReloadingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadingEvent;\npublic class CamelContextResumedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumedEvent;\npublic class CamelContextResumeFailureEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumeFailureEvent;\npublic class CamelContextResumingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumingEvent;\npublic class CamelContextRoutesStartedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStartedEvent;\npublic class CamelContextRoutesStartingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStartingEvent;\npublic class CamelContextRoutesStoppedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStoppedEvent;\npublic class CamelContextRoutesStoppingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStoppingEvent;\n", "des": "Camel management events"}
{"index": 2369, "repo": "camel-base-4.0.0-RC1", "code": "package scan;\n\npublic class AnnotatedWithAnyPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for testing if a given class is annotated with any of the annotations.\npublic class AnnotatedWithPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for testing if a given class is annotated with a certain annotation.\npublic class AssignableToPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for testing if a given class is assignable to another class.\npublic class CompositePackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // CompositePackageScanFilter allows multiple PackageScanFilters to be composed into a single filter.\npublic class InvertingPackageScanFilter extends Object implements org.apache.camel.spi.PackageScanFilter; // Package scan filter for inverting the match result of a subfilter.\n", "des": "Package scan classes."}
{"index": 2370, "repo": "spring-security-crypto-6.1.2", "code": "package codec;\n\n@Deprecated public final class Base64 extends Object;\npublic final class Hex extends Object; // Hex data encoder.\npublic final class Utf8 extends Object; // UTF-8 Charset encoder/decoder.\n", "des": "Internal codec classes."}
{"index": 2371, "repo": "pulsar-client-api-3.0.0", "code": "package api;\n\npackage api.interceptor; // Pulsar interceptors.\npackage api.schema; // Schema definitions for Pulsar Client API.\npackage api.transaction; // Pulsar transaction related API.\n@LimitedPrivate @Stable public interface Authentication extends Closeable, Serializable; // Interface of authentication providers.\n@LimitedPrivate @Stable public interface AuthenticationDataProvider extends Serializable; // Interface for accessing data which are used in variety of authentication schemes on client side.\n@LimitedPrivate @Stable public final class AuthenticationFactory extends Object; // Factory class that allows to create Authentication instances for all the supported authentication methods.\n@Public @Evolving public interface AutoClusterFailoverBuilder; // AutoClusterFailoverBuilder is used to configure and create instance of ServiceUrlProvider.\npublic static enum AutoClusterFailoverBuilder.FailoverPolicy extends Enum<AutoClusterFailoverBuilder.FailoverPolicy>;\n@Public @Stable public interface BatcherBuilder extends Serializable; // Batcher builder.\n@Public @Stable public interface BatchMessageContainer; // Batch message container for individual messages being published until they are batched and sent to broker.\n@Public @Stable public class BatchReceivePolicy extends Object implements Serializable; // Configuration for message batch receive Consumer.batchReceive() Consumer.batchReceiveAsync().\npublic static class BatchReceivePolicy.Builder extends Object; // Builder of BatchReceivePolicy.\n@Public @Stable public interface ClientBuilder extends Serializable, Cloneable; // Builder interface that is used to configure and construct a PulsarClient instance.\n@Public @Stable public enum CompressionType extends Enum<CompressionType>; // The compression type that can be specified on a Producer.\n@Public @Stable public interface Consumer<T> extends Closeable, MessageAcknowledger; // An interface that abstracts behavior of Pulsar's consumer.\n@Public @Stable public interface ConsumerBuilder<T> extends Cloneable; // ConsumerBuilder is used to configure and create instances of Consumer.\n@Public @Stable public enum ConsumerCryptoFailureAction extends Enum<ConsumerCryptoFailureAction>; // The action a consumer should take when a consumer receives a message that it cannot decrypt.\n@Public @Stable public interface ConsumerEventListener extends Serializable; // Listener on the consumer state changes.\n@Public @Stable public interface ConsumerInterceptor<T> extends AutoCloseable; // A plugin interface that allows you to intercept (and possibly mutate) messages received by the consumer.\n", "des": "Pulsar Client API."}
{"index": 2372, "repo": "pulsar-client-api-3.0.0", "code": "package interceptor;\n\n@Public @Stable public interface ProducerInterceptor extends AutoCloseable; // A plugin interface that allows you to intercept (and possibly mutate) the messages received by the producer before they are published to the Pulsar brokers.\n@Private @Stable public class ProducerInterceptorWrapper extends Object implements ProducerInterceptor; // A wrapper for old style producer interceptor.\n", "des": "Pulsar interceptors."}
{"index": 2373, "repo": "pulsar-client-api-3.0.0", "code": "package schema;\n\n@Public @Stable public class Field extends Object; // A field in a record, consisting of a field name, index, and Schema for the field value.\n@Public @Stable public interface FieldSchemaBuilder<T extends FieldSchemaBuilder<T>>; // Build a field for a record.\npublic interface GenericObject; // This is an abstraction over the logical value that is store into a Message.\n@Public @Stable public interface GenericRecord extends GenericObject; // An interface represents a message with schema.\n@Public @Stable public interface GenericRecordBuilder; // Generic Record Builder to build a GenericRecord.\n@Public @Stable public interface GenericSchema<T extends GenericRecord> extends Schema<T>; // A schema that serializes and deserializes between GenericRecord and bytes.\npublic interface KeyValueSchema<K,V> extends Schema<KeyValue<K,V>>; // This interface models a Schema that is composed of two parts.\n@Public @Stable public interface RecordSchemaBuilder; // Building the schema for a GenericRecord.\n@Public @Stable public interface SchemaBuilder; // Builder to build schema.\n@Public @Stable public interface SchemaDefinition<T>; // Interface for schema definition.\n@Public @Stable public interface SchemaDefinitionBuilder<T>; // Builder to build schema definition SchemaDefinition.\n@Private @Stable public interface SchemaInfoProvider; // Schema Provider.\n@Public @Stable public interface SchemaReader<T>; // Deserialize messages from bytes.\n@Public @Stable @FunctionalInterface public interface SchemaWriter<T>; // Serialize messages into bytes.\n", "des": "Schema definitions for Pulsar Client API."}
{"index": 2374, "repo": "pulsar-client-api-3.0.0", "code": "package transaction;\n\n@Public @Evolving public interface Transaction; // The class represents a transaction within Pulsar.\npublic static enum Transaction.State extends Enum<Transaction.State>;\n@Private @Evolving public interface TransactionBufferClient; // The transaction buffer client to commit and abort transactions on topics or subscription.\n@Private @Evolving public class TransactionBufferClientException extends IOException; // Exceptions for transaction buffer client.\npublic static class TransactionBufferClientException.ReachMaxPendingOpsException extends TransactionBufferClientException; // Thrown when transaction buffer op over max pending numbers.\npublic static class TransactionBufferClientException.RequestTimeoutException extends TransactionBufferClientException; // Thrown when operation timeout.\n@Public @Evolving public interface TransactionBuilder; // The builder to build a transaction for Pulsar.\n@Private @Evolving public interface TransactionCoordinatorClient extends Closeable; // Transaction coordinator client.\npublic static enum TransactionCoordinatorClient.State extends Enum<TransactionCoordinatorClient.State>; // State of the transaction coordinator client.\n@Private @Evolving public class TransactionCoordinatorClientException extends IOException; // Exceptions for transaction coordinator client.\npublic static class TransactionCoordinatorClientException.CoordinatorClientStateException extends TransactionCoordinatorClientException; // Thrown when transaction coordinator with unexpected state.\npublic static class TransactionCoordinatorClientException.CoordinatorNotFoundException extends TransactionCoordinatorClientException; // Thrown when transaction coordinator not found in broker side.\npublic static class TransactionCoordinatorClientException.InvalidTxnStatusException extends TransactionCoordinatorClientException; // Thrown when transaction switch to a invalid status.\npublic static class TransactionCoordinatorClientException.MetaStoreHandlerNotExistsException extends TransactionCoordinatorClientException; // Thrown when transaction meta store handler not exists.\npublic static class TransactionCoordinatorClientException.MetaStoreHandlerNotReadyException extends TransactionCoordinatorClientException; // Thrown when send request to transaction meta store but the transaction meta store handler not ready.\npublic static class TransactionCoordinatorClientException.TransactionNotFoundException extends TransactionCoordinatorClientException; // Thrown when transaction not found in transaction coordinator.\n@Public @Evolving public class TxnID extends Object implements Serializable; // An identifier for representing a transaction.\n", "des": "Pulsar transaction related API."}
{"index": 2375, "repo": "pulsar-client-api-3.0.0", "code": "package internal;\n\npublic class DefaultImplementation extends Object; // This class loads the implementation for PulsarClientImplementationBinding and allows you to decouple the API from the actual implementation.\npublic class PropertiesUtils extends Object; // Internal utility methods for filtering and mapping Properties objects.\npublic interface PulsarClientImplementationBinding; // Helper class for class instantiations and it also contains methods to work with schemas.\n", "des": "Helpers which provide useful functionality for the implementation of Pulsar Client API."}
{"index": 2376, "repo": "pulsar-client-api-3.0.0", "code": "package api;\n\npublic final class AuthData extends Object; // Authentication data.\npublic class EncryptionContext extends Object; // Class representing an encryption context.\npublic static class EncryptionContext.EncryptionKey extends Object; // Encryption key with metadata.\n", "des": "Common data classes used in the Pulsar Client API."}
{"index": 2377, "repo": "pulsar-client-api-3.0.0", "code": "package classification;\n\n@Public @Stable public class InterfaceAudience extends Object; // Annotation to inform users of a package, class or method's intended audience.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.LimitedPrivate; // Intended for use only within the project(s) specified in the annotation.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.Private; // Intended for use only within the project itself.\n@Documented @Retention(RUNTIME) public static @interface InterfaceAudience.Public; // Intended for use by any project or application.\n@Public @Stable public class InterfaceStability extends Object; // Annotation to inform users of how much to rely on a particular package, class or method not changing over time.\n@Documented public static @interface InterfaceStability.Evolving; // Evolving, but can break compatibility at minor release (i.e.\n@Documented public static @interface InterfaceStability.Stable; // Can evolve while retaining compatibility for minor release boundaries.; can break compatibility only at major release (ie.\n@Documented public static @interface InterfaceStability.Unstable; // No guarantee is provided as to reliability or stability across any level of release granularity.\n", "des": "Annotations used across the whole project."}
{"index": 2378, "repo": "pulsar-client-api-3.0.0", "code": "package schema;\n\n@Public @Stable public class KeyValue<K,V> extends Object; // A simple KeyValue class.\n@FunctionalInterface public static interface KeyValue.KeyValueDecoder<K,V>; // Decoder to decode key/value bytes.\n@Public @Stable public enum KeyValueEncodingType extends Enum<KeyValueEncodingType>; // Encoding types of supported KeyValueSchema for Pulsar messages.\n@Public @Stable public interface SchemaInfo; // Information about the schema.\npublic static class SchemaInfo.SchemaInfoBuilder extends Object;\n@Public @Stable public class SchemaInfoWithVersion extends Object; // Data structure representing a schema information including its version.\n@Public @Stable public enum SchemaType extends Enum<SchemaType>; // Types of supported schema for Pulsar messages.\n", "des": "This package contains data structures for schema definitions used in the Pulsar Client API."}
{"index": 2379, "repo": "spring-batch-core-5.0.2", "code": "package core;\n\npackage core.annotation; // Annotations for java based configuration of listeners.\npackage core.configuration; // Interfaces for registration and location of job configurations.\npackage core.converter; // Support classes for implementations of the batch APIs.\npackage core.explore; // Interfaces and related classes to support meta data browsing.\npackage core.job; // Specific implementations of job concerns.\npackage core.launch; // Interfaces and simple implementations of launch concerns.\npackage core.listener; // Generic implementations of core batch listener interfaces.\npackage core.observability; // This package contains APIs related to batch observability.\npackage core.partition; // Interfaces for partitioning components.\npackage core.repository; // Interfaces and generic implementations of repository concerns.\npackage core.scope; // Implementation of Spring Batch specific bean scopes (Job and Step).\npackage core.step; // Specific implementations of step concerns.\npublic enum BatchStatus extends Enum<BatchStatus>; // Enumeration representing the status of an execution.\npublic interface ChunkListener extends StepListener; // Listener interface for the lifecycle of a chunk.\npublic class DefaultJobKeyGenerator extends Object implements JobKeyGenerator<JobParameters>; // Default implementation of the JobKeyGenerator interface.\npublic class Entity extends Object implements Serializable; // Batch Domain Entity class.\npublic class ExitStatus extends Object implements Serializable, Comparable<ExitStatus>; // Value object used to carry information about the status of a job or step execution.\npublic interface ItemProcessListener<T,S> extends StepListener; // Listener interface for the processing of an item.\npublic interface ItemReadListener<T> extends StepListener; // Listener interface around the reading of an item.\npublic interface ItemWriteListener<S> extends StepListener; // Listener interface for the writing of items.\npublic interface Job; // Batch domain object representing a job.\npublic class JobExecution extends Entity; // Batch domain object representing the execution of a job.\npublic class JobExecutionException extends Exception; // Root of exception hierarchy for checked exceptions in job and step execution.\npublic interface JobExecutionListener; // Provide callbacks at specific points in the lifecycle of a Job.\npublic class JobInstance extends Entity; // Batch domain object representing a uniquely identifiable job run.\npublic class JobInterruptedException extends JobExecutionException; // Exception to indicate the job has been interrupted.\n", "des": "Core domain context for Spring Batch covering jobs, steps, configuration and execution abstractions."}
{"index": 2380, "repo": "spring-batch-core-5.0.2", "code": "package annotation;\n\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterChunk; // Marks a method to be called after a chunk is executed. Expected signature: void afterChunk(ChunkContext context)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterChunkError; // Marks a method to be called after a chunk has failed and been marked for rollback. Expected signature: void afterFailedChunk(ChunkContext context)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterJob; // Marks a method to be called after a Job has completed.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterProcess; // Marks a method to be called after an item is passed to an ItemProcessor.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterRead; // Marks a method to be called after an item is read from an ItemReader Expected signature: void afterRead(T item)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterStep; // Marks a method to be called after a Step has completed.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterWrite; // Marks a method to be called after an item is passed to an ItemWriter.\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeChunk; // Marks a method to be called before a chunk is executed.\n@Retention(RUNTIME) @Target(METHOD) @Qualifier(\"JobExecutionListener\") public @interface BeforeJob; // Marks a method to be called before a Job is executed, which comes after a JobExecution is created and persisted but before the first Step is executed.\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeProcess; // Marks a method to be called before an item is passed to an ItemProcessor Expected signature: void beforeProcess(T item)\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeRead; // Marks a method to be called before an item is read from an ItemReader Expected signature: void beforeRead()\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeStep; // Marks a method to be called before a Step is executed, which comes after a StepExecution is created and persisted but before the first item is read.\n", "des": "Annotations for java based configuration of listeners."}
{"index": 2381, "repo": "spring-batch-core-5.0.2", "code": "package configuration;\n\npackage configuration.annotation; // Annotations and builder factories for java based configuration\npackage configuration.support; // Specific implementations of configuration concerns.\npackage configuration.xml; // Parsers for XML based configuration\npublic class BatchConfigurationException extends RuntimeException; // Represents that an error has occurred in the configuration of the base batch infrastructure (the creation of a JobRepository, for example).\npublic class DuplicateJobException extends JobExecutionException; // Checked exception that indicates a name clash when registering Job instances.\npublic interface JobFactory; // Strategy for creating a single job.\npublic interface JobLocator; // A runtime service locator interface for retrieving job configurations by name.\npublic interface JobRegistry extends ListableJobLocator; // A runtime service registry interface for registering job configurations by name.\npublic interface ListableJobLocator extends JobLocator; // A listable extension of JobLocator.\npublic interface StepRegistry; // Registry keeping track of all the Step instances defined in a Job.\n", "des": "Interfaces for registration and location of job configurations."}
{"index": 2382, "repo": "spring-batch-core-5.0.2", "code": "package annotation;\n\npublic class BatchObservabilityBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.beans.factory.config.BeanPostProcessor; // Bean post processor that configures observable batch artifacts (jobs and steps) with Micrometer's observation registry.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import({org.springframework.batch.core.configuration.annotation.BatchRegistrar.class,ScopeConfiguration.class,org.springframework.batch.core.configuration.annotation.AutomaticJobRegistrarBeanPostProcessor.class,BatchObservabilityBeanPostProcessor.class}) public @interface EnableBatchProcessing; // Enable Spring Batch features and provide a base configuration for setting up batch jobs in an @Configuration class, roughly equivalent to using the <batch:*> XML namespace.\n@Deprecated(since=\"5.0.0\", forRemoval=true) public class JobBuilderFactory extends Object;\n@Scope(value=\"job\", proxyMode=TARGET_CLASS) @Retention(RUNTIME) @Documented public @interface JobScope; // Convenient annotation for job-scoped beans that defaults the proxy mode, so that it does not have to be specified explicitly on every bean definition.\n@Deprecated(since=\"5.0.0\", forRemoval=true) public class StepBuilderFactory extends Object;\n@Scope(value=\"step\", proxyMode=TARGET_CLASS) @Retention(RUNTIME) @Documented public @interface StepScope; // Convenient annotation for step-scoped beans.\n", "des": "Annotations and builder factories for java based configuration"}
{"index": 2383, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npublic abstract class AbstractApplicationContextFactory extends Object implements ApplicationContextFactory, org.springframework.context.ApplicationContextAware; // ApplicationContextFactory implementation that takes a parent context and a path to the context to create.\npublic interface ApplicationContextFactory; // Factory for the creation of ApplicationContext instances.\npublic class ApplicationContextJobFactory extends Object implements JobFactory; // A JobFactory that creates its own ApplicationContext and pulls a bean out when asked to create a Job.\npublic class AutomaticJobRegistrar extends Object implements org.springframework.core.Ordered, org.springframework.context.SmartLifecycle, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Loads and unloads Jobs when the application context is created and destroyed.\npublic class ClasspathXmlApplicationContextsFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ApplicationContextFactory[]>, org.springframework.context.ApplicationContextAware; // A convenient factory for creating a set of ApplicationContextFactory components from a set of resources.\n@Configuration(proxyBeanMethods=false) @Import(ScopeConfiguration.class) public class DefaultBatchConfiguration extends Object implements org.springframework.context.ApplicationContextAware; // Base Configuration class that provides common JDBC-based infrastructure beans for enabling and using Spring Batch.\npublic class DefaultJobLoader extends Object implements JobLoader, org.springframework.beans.factory.InitializingBean; // Default implementation of JobLoader.\npublic class GenericApplicationContextFactory extends AbstractApplicationContextFactory; // ApplicationContextFactory implementation that takes a parent context and a path to the context to create.\npublic class GroupAwareJob extends Object implements Job; // A Job that can optionally prepend a group name to another job's name, to make it fit a naming convention for type or origin.\npublic class JobFactoryRegistrationListener extends Object; // Generic service that can bind and unbind a JobFactory in a JobRegistry.\npublic interface JobLoader;\npublic class JobRegistryBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // A BeanPostProcessor that registers Job beans with a JobRegistry.\n", "des": "Specific implementations of configuration concerns."}
{"index": 2384, "repo": "spring-batch-core-5.0.2", "code": "package xml;\n\npublic abstract class AbstractFlowParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\npublic abstract class AbstractListenerParser extends Object;\npublic abstract class AbstractStepParser extends Object; // Internal parser for the <step/> elements inside a job.\npublic class BeanDefinitionUtils extends Object;\npublic class ChunkElementParser extends Object; // Internal parser for the <chunk/> element inside a step.\npublic class CoreNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport;\npublic class CoreNamespacePostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.context.ApplicationContextAware; // Post-process jobs and steps defined using the batch namespace to inject dependencies.\npublic class CoreNamespaceUtils extends Object; // Utility methods used in parsing of the batch core namespace.\npublic class DecisionParser extends Object; // Internal parser for the <decision/> elements inside a job.\npublic class ExceptionElementParser extends Object;\npublic class FlowElementParser extends Object; // Internal parser for the <flow/> elements inside a job.\npublic class InlineFlowParser extends AbstractFlowParser;\npublic class InlineStepParser extends AbstractStepParser; // Internal parser for the <step/> elements inside a job.\npublic class JobExecutionListenerParser extends AbstractListenerParser; // Parser for a step listener element.\npublic class JobParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <job/> element in the Batch namespace.\npublic class JobParserJobFactoryBean extends Object implements org.springframework.beans.factory.SmartFactoryBean<FlowJob>; // This FactoryBean is used by the batch namespace parser to create FlowJob objects.\npublic class JobRepositoryParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <job-repository/> element in the Batch namespace.\npublic class SimpleFlowFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<SimpleFlow>, org.springframework.beans.factory.InitializingBean; // Convenience factory for SimpleFlow instances for use in the XML namespace.\n", "des": "Parsers for XML based configuration"}
{"index": 2385, "repo": "spring-batch-core-5.0.2", "code": "package converter;\n\npublic class DateToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<Date,String>; // Converter implementation from Date to String.\npublic class DefaultJobParametersConverter extends Object implements JobParametersConverter; // Converter for JobParameters instances that uses a simple naming convention for converting job parameters.\npublic class JobParametersConversionException extends RuntimeException; // Exception to report an error when converting job parameters.\npublic interface JobParametersConverter; // A factory for JobParameters instances.\npublic class JsonJobParametersConverter extends DefaultJobParametersConverter; // Converter for JobParameters instances that uses a JSON naming convention for converting job parameters.\npublic static record JsonJobParametersConverter.JobParameterDefinition(String value, String type, String identifying) extends Record;\npublic class LocalDateTimeToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalDateTime,String>; // Converter implementation from LocalDateTime to String.\npublic class LocalDateToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalDate,String>; // Converter implementation from LocalDate to String.\npublic class LocalTimeToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<LocalTime,String>; // Converter implementation from LocalTime to String.\npublic class StringToDateConverter extends Object implements org.springframework.core.convert.converter.Converter<String,Date>; // Converter implementation from String to Date.\npublic class StringToLocalDateConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalDate>; // Converter implementation from String to LocalDate.\npublic class StringToLocalDateTimeConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalDateTime>; // Converter implementation from String to LocalDateTime.\npublic class StringToLocalTimeConverter extends Object implements org.springframework.core.convert.converter.Converter<String,LocalTime>; // Converter implementation from String to LocalTime.\n", "des": "Support classes for implementations of the batch APIs."}
{"index": 2386, "repo": "spring-batch-core-5.0.2", "code": "package explore;\n\npackage explore.support; // Specific implementations of explorer concerns.\npublic interface JobExplorer; // Entry point for browsing the executions of running or historical jobs and steps.\n", "des": "Interfaces and related classes to support meta data browsing."}
{"index": 2387, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npublic abstract class AbstractJobExplorerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobExplorer>, org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobExplorer.\npublic class JobExplorerFactoryBean extends AbstractJobExplorerFactoryBean implements org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobExplorer by using JDBC DAO implementations.\npublic class SimpleJobExplorer extends Object implements JobExplorer; // Implementation of JobExplorer that uses the injected DAOs.\n", "des": "Specific implementations of explorer concerns."}
{"index": 2388, "repo": "spring-batch-core-5.0.2", "code": "package job;\n\npackage job.builder; // Job and flow level builders for java based configuration of batch jobs\npackage job.flow; // Flow related constructs including Flow interface, executors, and related exceptions\npublic abstract class AbstractJob extends Object implements Job, StepLocator, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // Abstract implementation of the Job interface.\npublic class CompositeJobParametersValidator extends Object implements JobParametersValidator, org.springframework.beans.factory.InitializingBean; // Composite JobParametersValidator that passes the job parameters through a sequence of injected JobParametersValidators\npublic class DefaultJobParametersValidator extends Object implements JobParametersValidator, org.springframework.beans.factory.InitializingBean; // Default implementation of JobParametersValidator.\npublic class SimpleJob extends AbstractJob; // Simple implementation of Job interface providing the ability to run a JobExecution.\npublic class SimpleStepHandler extends Object implements StepHandler, org.springframework.beans.factory.InitializingBean; // Implementation of StepHandler that manages repository and restart concerns.\npublic interface StepHandler; // Strategy interface for handling a Step on behalf of a Job.\n", "des": "Specific implementations of job concerns."}
{"index": 2389, "repo": "spring-batch-core-5.0.2", "code": "package builder;\n\npublic class FlowBuilder<Q> extends Object; // A builder for a flow of steps that can be executed as a job or as part of a job.\npublic static class FlowBuilder.SplitBuilder<Q> extends Object; // A builder for building a split state.\npublic static class FlowBuilder.TransitionBuilder<Q> extends Object; // A builder for transitions within a flow.\npublic static class FlowBuilder.UnterminatedFlowBuilder<Q> extends Object; // A builder for continuing a flow from a decision state.\npublic class FlowBuilderException extends RuntimeException;\npublic class FlowJobBuilder extends JobBuilderHelper<FlowJobBuilder>; // A job builder for FlowJob instances.\npublic class JobBuilder extends JobBuilderHelper<JobBuilder>; // Convenience for building jobs of various kinds.\npublic class JobBuilderException extends RuntimeException;\npublic abstract class JobBuilderHelper<B extends JobBuilderHelper<B>> extends Object; // A base class and utility for other job builders providing access to common properties like job repository.\npublic static class JobBuilderHelper.CommonJobProperties extends Object;\npublic class JobFlowBuilder extends FlowBuilder<FlowJobBuilder>;\npublic class SimpleJobBuilder extends JobBuilderHelper<SimpleJobBuilder>;\n", "des": "Job and flow level builders for java based configuration of batch jobs"}
{"index": 2390, "repo": "spring-batch-core-5.0.2", "code": "package flow;\n\npackage flow.support; // Basic implementations of flow constructs\npublic interface Flow;\npublic class FlowExecution extends Object implements Comparable<FlowExecution>;\npublic class FlowExecutionException extends Exception;\npublic class FlowExecutionStatus extends Object implements Comparable<FlowExecutionStatus>; // Represents the status of FlowExecution.\npublic interface FlowExecutor; // Context and execution strategy for FlowJob to allow it to delegate its execution step by step.\npublic interface FlowHolder; // Convenient interface for components that contain nested flows.\npublic class FlowJob extends AbstractJob; // Implementation of the Job interface that allows for complex flows of steps, rather than requiring sequential execution.\npublic class FlowStep extends AbstractStep; // A Step implementation that delegates to a Flow.\n@FunctionalInterface public interface JobExecutionDecider; // Interface allowing for programmatic access to the decision on what the status of a flow should be.\npublic class JobFlowExecutor extends Object implements FlowExecutor; // Implementation of FlowExecutor for use in components that need to execute a flow related to a JobExecution.\npublic interface State;\n", "des": "Flow related constructs including Flow interface, executors, and related exceptions"}
{"index": 2391, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npackage support.state; // States used in defining the underlying Spring Batch state machine\npublic class DefaultStateTransitionComparator extends Object implements Comparator<StateTransition>; // Sorts by decreasing specificity of pattern, based on just counting wildcards (with * taking precedence over ?).\npublic class SimpleFlow extends Object implements Flow, org.springframework.beans.factory.InitializingBean; // A Flow that branches conditionally depending on the exit status of the last State.\npublic final class StateTransition extends Object; // Value object representing a potential transition from one State to another.\n", "des": "Basic implementations of flow constructs"}
{"index": 2392, "repo": "spring-batch-core-5.0.2", "code": "package state;\n\npublic abstract class AbstractState extends Object implements State;\npublic class DecisionState extends AbstractState; // State that requires a decider to make the status decision.\npublic class EndState extends AbstractState; // State implementation for ending a job if it is in progress and continuing if just starting.\npublic interface FlowExecutionAggregator; // Strategy interface for aggregating FlowExecution instances into a single exit status.\npublic class FlowState extends AbstractState implements FlowHolder; // State that delegates to a Flow\npublic class MaxValueFlowExecutionAggregator extends Object implements FlowExecutionAggregator; // Implementation of the FlowExecutionAggregator interface that aggregates FlowExecutionStatus', using the status with the high precedence as the aggregate status.\npublic class SplitState extends AbstractState implements FlowHolder; // A State implementation that splits a Flow into multiple parallel subflows.\npublic class StepState extends AbstractState implements StepLocator, StepHolder; // State implementation that delegates to a FlowExecutor to execute the specified Step.\n", "des": "States used in defining the underlying Spring Batch state machine"}
{"index": 2393, "repo": "spring-batch-core-5.0.2", "code": "package launch;\n\npackage launch.support; // Support classes for use in bootstrap and launch implementations or configurations.\npublic class JobExecutionNotFailedException extends JobExecutionException; // Checked exception to indicate that user asked for a job execution to be resumed when actually it didn't fail.\npublic class JobExecutionNotRunningException extends JobExecutionException; // Checked exception indicating that a JobExecution that is not currently running has been requested to stop.\npublic class JobExecutionNotStoppedException extends JobExecutionException; // Checked exception to indicate that user asked for a job execution to be aborted when hasn't been stopped.\npublic class JobInstanceAlreadyExistsException extends JobExecutionException; // Checked exception to indicate that a required Job is not available.\n@FunctionalInterface public interface JobLauncher; // Simple interface for controlling jobs, including possible ad-hoc executions, based on different runtime identifiers.\npublic interface JobOperator; // Low level interface for inspecting and controlling jobs with access only to primitive and collection types.\npublic class JobParametersNotFoundException extends JobExecutionException; // Checked exception to indicate that a required JobParametersIncrementer is not available.\npublic class NoSuchJobException extends JobExecutionException; // Checked exception to indicate that a required Job is not available.\npublic class NoSuchJobExecutionException extends JobExecutionException; // Checked exception to indicate that a required JobExecution is not available.\npublic class NoSuchJobInstanceException extends JobExecutionException; // Exception that signals that the user requested an operation on a non-existent JobInstance.\n", "des": "Interfaces and simple implementations of launch concerns."}
{"index": 2394, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npublic class CommandLineJobRunner extends Object; // Basic launcher for starting jobs from the command line.\npublic class DataFieldMaxValueJobParametersIncrementer extends Object implements JobParametersIncrementer; // This incrementer uses a DataFieldMaxValueIncrementer to generate the sequence of values to use as job instance discriminator.\npublic interface ExitCodeMapper; // This interface should be implemented when an environment calling the batch framework has specific requirements regarding the operating system process return status.\npublic class JobOperatorFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobOperator>, org.springframework.beans.factory.InitializingBean; // Convenient factory bean that creates a transactional proxy around a JobOperator.\n@Deprecated(since=\"5.0\", forRemoval=true) public class JobRegistryBackgroundJobRunner extends Object;\npublic class JvmSystemExiter extends Object implements SystemExiter; // Implementation of the SystemExiter interface that calls the standards System.exit method.\npublic class RunIdIncrementer extends Object implements JobParametersIncrementer; // This incrementer increments a \"run.id\" parameter of type Long from the given job parameters.\npublic class RuntimeExceptionTranslator extends Object implements org.aopalliance.intercept.MethodInterceptor;\n@Deprecated(since=\"5.0.0\", forRemoval=true) public class SimpleJobLauncher extends Object implements JobLauncher, org.springframework.beans.factory.InitializingBean;\npublic class SimpleJobOperator extends Object implements JobOperator, org.springframework.beans.factory.InitializingBean; // Simple implementation of the JobOperator interface.\npublic class SimpleJvmExitCodeMapper extends Object implements ExitCodeMapper; // An implementation of ExitCodeMapper that can be configured through a map from batch exit codes (String) to integer results.\npublic interface SystemExiter; // Interface for exiting the JVM.\npublic class TaskExecutorJobLauncher extends SimpleJobLauncher; // Implementation of the JobLauncher interface based on a TaskExecutor.\n", "des": "Support classes for use in bootstrap and launch implementations or configurations."}
{"index": 2395, "repo": "spring-batch-core-5.0.2", "code": "package listener;\n\npublic abstract class AbstractListenerFactoryBean<T> extends Object implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.InitializingBean; // FactoryBean implementation that builds a listener based on the various lifecycle methods or annotations that are provided.\n@Deprecated public class ChunkListenerSupport extends Object implements ChunkListener;\npublic class CompositeChunkListener extends Object implements ChunkListener;\npublic class CompositeItemProcessListener<T,S> extends Object implements ItemProcessListener<T,S>;\npublic class CompositeItemReadListener<T> extends Object implements ItemReadListener<T>;\npublic class CompositeItemWriteListener<S> extends Object implements ItemWriteListener<S>;\npublic class CompositeJobExecutionListener extends Object implements JobExecutionListener;\npublic class CompositeSkipListener<T,S> extends Object implements SkipListener<T,S>;\npublic class CompositeStepExecutionListener extends Object implements StepExecutionListener;\npublic class ExecutionContextPromotionListener extends Object implements StepExecutionListener, org.springframework.beans.factory.InitializingBean; // This class can be used to automatically promote items from the Step ExecutionContext to the Job ExecutionContext at the end of a step.\npublic class ItemListenerSupport<I,O> extends Object implements ItemReadListener<I>, ItemProcessListener<I,O>, ItemWriteListener<O>; // Basic no-op implementation of the ItemReadListener, ItemProcessListener, and ItemWriteListener interfaces.\n@Deprecated public class JobExecutionListenerSupport extends Object implements JobExecutionListener;\npublic class JobListenerFactoryBean extends AbstractListenerFactoryBean<JobExecutionListener>; // This AbstractListenerFactoryBean implementation is used to create a JobExecutionListener.\npublic enum JobListenerMetaData extends Enum<JobListenerMetaData> implements ListenerMetaData; // Enumeration for JobExecutionListener meta data, which ties together the names of methods, their interfaces, annotation, and expected arguments.\npublic class JobParameterExecutionContextCopyListener extends Object implements StepExecutionListener; // This class can be used to automatically copy items from the JobParameters to the Step ExecutionContext.\npublic interface ListenerMetaData; // A common interface for listener meta data enumerations.\n", "des": "Generic implementations of core batch listener interfaces."}
{"index": 2396, "repo": "spring-batch-core-5.0.2", "code": "package observability;\n\npublic class BatchJobContext extends io.micrometer.observation.Observation.Context implements Supplier<BatchJobContext>; // Observation context for batch jobs.\npublic enum BatchJobObservation extends Enum<BatchJobObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Observation created around a Job execution.\npublic interface BatchJobObservationConvention extends io.micrometer.observation.ObservationConvention<BatchJobContext>; // ObservationConvention for BatchJobContext.\npublic final class BatchMetrics extends Object; // Central class for batch metrics.\npublic class BatchStepContext extends io.micrometer.observation.Observation.Context implements Supplier<BatchStepContext>; // Observation context for batch steps.\npublic enum BatchStepObservation extends Enum<BatchStepObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Observation created around a step execution.\npublic interface BatchStepObservationConvention extends io.micrometer.observation.ObservationConvention<BatchStepContext>; // ObservationConvention for BatchStepContext.\npublic class DefaultBatchJobObservationConvention extends Object implements BatchJobObservationConvention; // Default BatchJobObservationConvention implementation.\npublic class DefaultBatchStepObservationConvention extends Object implements BatchStepObservationConvention; // Default BatchStepObservationConvention implementation.\n", "des": "This package contains APIs related to batch observability."}
{"index": 2397, "repo": "spring-batch-core-5.0.2", "code": "package partition;\n\npackage partition.support; // Implementation of common partition components.\n@FunctionalInterface public interface PartitionHandler; // Interface defining the responsibilities of controlling the execution of a partitioned StepExecution.\npublic interface StepExecutionSplitter; // Strategy interface for generating input contexts for a partitioned step execution independent from the fabric they are going to run on.\n", "des": "Interfaces for partitioning components."}
{"index": 2398, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npublic abstract class AbstractPartitionHandler extends Object implements PartitionHandler; // Base PartitionHandler implementation providing common base features.\npublic class DefaultStepExecutionAggregator extends Object implements StepExecutionAggregator; // Convenience class for aggregating a set of StepExecution instances into a single result.\npublic class MultiResourcePartitioner extends Object implements Partitioner; // Implementation of Partitioner that locates multiple resources and associates their file names with execution context keys.\n@FunctionalInterface public interface Partitioner; // Central strategy interface for creating input parameters for a partitioned step in the form of ExecutionContext instances.\npublic interface PartitionNameProvider; // Optional interface for Partitioner implementations that need to use a custom naming scheme for partitions.\npublic class PartitionStep extends AbstractStep; // Implementation of Step which partitions the execution and spreads the load using a PartitionHandler.\npublic class RemoteStepExecutionAggregator extends Object implements StepExecutionAggregator, org.springframework.beans.factory.InitializingBean; // Convenience class for aggregating a set of StepExecution instances when the input comes from remote steps, so the data need to be refreshed from the repository.\npublic class SimplePartitioner extends Object implements Partitioner; // Simplest possible implementation of Partitioner.\npublic class SimpleStepExecutionSplitter extends Object implements StepExecutionSplitter, org.springframework.beans.factory.InitializingBean; // Generic implementation of StepExecutionSplitter that delegates to a Partitioner to generate ExecutionContext instances.\n@FunctionalInterface public interface StepExecutionAggregator; // Strategy for a aggregating step executions, usually when they are the result of partitioned or remote execution.\npublic class TaskExecutorPartitionHandler extends AbstractPartitionHandler implements StepHolder, org.springframework.beans.factory.InitializingBean; // A PartitionHandler that uses a TaskExecutor to execute the partitioned Step locally in multiple threads.\n", "des": "Implementation of common partition components."}
{"index": 2399, "repo": "spring-batch-core-5.0.2", "code": "package repository;\n\npackage repository.dao; // Specific implementations of dao concerns.\npackage repository.support; // Specific implementations of repository concerns.\npublic interface ExecutionContextSerializer extends org.springframework.core.serializer.Serializer<Map<String,Object>>, org.springframework.core.serializer.Deserializer<Map<String,Object>>; // A composite interface that combines both serialization and deserialization of an execution context into a single implementation.\npublic class JobExecutionAlreadyRunningException extends JobExecutionException;\npublic class JobInstanceAlreadyCompleteException extends JobExecutionException; // An exception indicating an illegal attempt to restart a job that was already completed successfully.\npublic interface JobRepository; // Repository responsible for persistence of batch meta-data entities.\npublic class JobRestartException extends JobExecutionException; // An exception indicating an illegal attempt to restart a job.\n", "des": "Interfaces and generic implementations of repository concerns."}
{"index": 2400, "repo": "spring-batch-core-5.0.2", "code": "package dao;\n\npublic abstract class AbstractJdbcBatchMetadataDao extends Object implements org.springframework.beans.factory.InitializingBean; // Encapsulates common functionality needed by JDBC batch metadata DAOs - provides jdbcTemplate for subclasses and handles table prefixes.\npublic class DefaultExecutionContextSerializer extends Object implements ExecutionContextSerializer; // An implementation of the ExecutionContextSerializer that produces/consumes Base64 content.\npublic interface ExecutionContextDao; // DAO interface for persisting and retrieving ExecutionContexts.\npublic class Jackson2ExecutionContextStringSerializer extends Object implements ExecutionContextSerializer; // Implementation that uses Jackson2 to provide (de)serialization.\npublic class JdbcExecutionContextDao extends AbstractJdbcBatchMetadataDao implements ExecutionContextDao; // JDBC DAO for ExecutionContext.\npublic class JdbcJobExecutionDao extends AbstractJdbcBatchMetadataDao implements JobExecutionDao, org.springframework.beans.factory.InitializingBean; // JDBC implementation of JobExecutionDao.\npublic class JdbcJobInstanceDao extends AbstractJdbcBatchMetadataDao implements JobInstanceDao, org.springframework.beans.factory.InitializingBean; // JDBC implementation of JobInstanceDao.\npublic class JdbcStepExecutionDao extends AbstractJdbcBatchMetadataDao implements StepExecutionDao, org.springframework.beans.factory.InitializingBean; // JDBC implementation of StepExecutionDao. Allows customization of the tables names used by Spring Batch for step meta data via a prefix property. Uses sequences or tables (via Spring's DataFieldMaxValueIncrementer abstraction) to create all primary keys before inserting a new row.\npublic interface JobExecutionDao; // Data Access Object for job executions.\npublic interface JobInstanceDao; // Data Access Object for job instances.\npublic class NoSuchObjectException extends RuntimeException; // This exception identifies that a batch domain object is invalid, which is generally caused by an invalid ID.\npublic interface StepExecutionDao;\n", "des": "Specific implementations of dao concerns."}
{"index": 2401, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npublic abstract class AbstractJobRepositoryFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobRepository>, org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobRepository.\npublic class JobRepositoryFactoryBean extends AbstractJobRepositoryFactoryBean implements org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobRepository using JDBC DAO implementations which persist batch metadata in database.\npublic class SimpleJobRepository extends Object implements JobRepository; // Implementation of JobRepository that stores job instances, job executions, and step executions using the injected DAOs.\n", "des": "Specific implementations of repository concerns."}
{"index": 2402, "repo": "spring-batch-core-5.0.2", "code": "package scope;\n\npackage scope.context; // Implementation of the contexts for each of the custom bean scopes in Spring Batch (Job and Step).\npublic abstract class BatchScopeSupport extends Object implements org.springframework.beans.factory.config.Scope, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.core.Ordered; // ScopeSupport.\nprotected static class BatchScopeSupport.Scopifier extends org.springframework.beans.factory.config.BeanDefinitionVisitor; // Helper class to scan a bean definition hierarchy and force the use of auto-proxy for step scoped beans.\npublic class JobScope extends BatchScopeSupport; // Scope for job context.\npublic class StepScope extends BatchScopeSupport; // Scope for step context.\n", "des": "Implementation of Spring Batch specific bean scopes (Job and Step)."}
{"index": 2403, "repo": "spring-batch-core-5.0.2", "code": "package context;\n\npublic class ChunkContext extends org.springframework.core.AttributeAccessorSupport; // Context object for weakly typed data stored for the duration of a chunk (usually a group of items processed together in a transaction).\npublic class JobContext extends SynchronizedAttributeAccessor; // A context object that can be used to interrogate the current JobExecution and some of its associated properties using expressions based on bean paths.\npublic class JobScopeManager extends Object; // Convenient aspect to wrap a single threaded job execution, where the implementation of the Job is not job scope aware (i.e.\npublic class JobSynchronizationManager extends Object; // Central convenience class for framework use in managing the job scope context.\npublic class StepContext extends SynchronizedAttributeAccessor; // A context object that can be used to interrogate the current StepExecution and some of its associated properties using expressions based on bean paths.\npublic abstract class StepContextRepeatCallback extends Object implements RepeatCallback; // Convenient base class for clients who need to do something in a repeat callback inside a Step.\npublic class StepScopeManager extends Object; // Convenient aspect to wrap a single threaded step execution, where the implementation of the Step is not step scope aware (i.e.\npublic class StepSynchronizationManager extends Object; // Central convenience class for framework use in managing the step scope context.\npublic abstract class SynchronizationManagerSupport<E,C> extends Object; // Central convenience class for framework use in managing the scope context.\n", "des": "Implementation of the contexts for each of the custom bean scopes in Spring Batch (Job and Step)."}
{"index": 2404, "repo": "spring-batch-core-5.0.2", "code": "package step;\n\npackage step.builder; // Step level builders for java based job configuration.\npackage step.factory; // Factories for step level components.\npackage step.item; // Specific implementations of step concerns for item-oriented approach.\npackage step.job; // JobStep and related components.\npackage step.skip; // Specific implementations of skip concerns for items in a step.\npackage step.tasklet; // Interfaces and generic implementations of tasklet concerns.\npublic abstract class AbstractStep extends Object implements Step, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanNameAware; // A Step implementation that provides common behavior to subclasses, including registering and calling listeners.\npublic class FatalStepExecutionException extends UnexpectedJobExecutionException;\npublic class NoSuchStepException extends RuntimeException; // Exception to signal that a step was requested that is unknown or does not exist.\npublic class NoWorkFoundStepExecutionListener extends Object implements StepExecutionListener; // Fails the step if no items have been processed ( item count is 0).\npublic interface StepHolder; // Interface for holders of a Step as a convenience for callers who need access to the underlying instance.\npublic interface StepInterruptionPolicy; // Strategy interface for an interruption policy.\npublic interface StepLocator; // Interface for locating a Step instance by name.\npublic class StepLocatorStepFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Step>; // Convenience factory for Step instances given a StepLocator.\npublic class ThreadStepInterruptionPolicy extends Object implements StepInterruptionPolicy; // Policy that checks the current thread to see if it has been interrupted.\n", "des": "Specific implementations of step concerns."}
{"index": 2405, "repo": "spring-batch-core-5.0.2", "code": "package builder;\n\npublic abstract class AbstractTaskletStepBuilder<B extends AbstractTaskletStepBuilder<B>> extends StepBuilderHelper<B>; // Base class for step builders that want to build a TaskletStep.\npublic class FaultTolerantStepBuilder<I,O> extends SimpleStepBuilder<I,O>; // A step builder for fully fault tolerant chunk-oriented item processing steps.\npublic class FlowStepBuilder extends StepBuilderHelper<FlowStepBuilder>; // A step builder for FlowStep instances.\npublic class JobStepBuilder extends StepBuilderHelper<JobStepBuilder>; // A step builder for JobStep instances.\npublic class PartitionStepBuilder extends StepBuilderHelper<PartitionStepBuilder>; // Step builder for PartitionStep instances.\npublic class SimpleStepBuilder<I,O> extends AbstractTaskletStepBuilder<SimpleStepBuilder<I,O>>; // Step builder for simple item processing (chunk oriented) steps.\npublic class StepBuilder extends StepBuilderHelper<StepBuilder>; // Convenient entry point for building all kinds of steps.\npublic class StepBuilderException extends RuntimeException; // Utility exception thrown by builders when they encounter unexpected checked exceptions.\npublic abstract class StepBuilderHelper<B extends StepBuilderHelper<B>> extends Object; // A base class and utility for other step builders providing access to common properties like job repository and listeners.\npublic static class StepBuilderHelper.CommonStepProperties extends Object;\npublic class TaskletStepBuilder extends AbstractTaskletStepBuilder<TaskletStepBuilder>; // Builder for tasklet step based on a custom tasklet (not item oriented).\n", "des": "Step level builders for java based job configuration."}
{"index": 2406, "repo": "spring-batch-core-5.0.2", "code": "package factory;\n\npublic class FaultTolerantStepFactoryBean<T,S> extends SimpleStepFactoryBean<T,S>; // Factory bean for step that provides options for configuring skip behavior.\npublic class SimpleStepFactoryBean<T,S> extends Object implements org.springframework.beans.factory.FactoryBean<Step>, org.springframework.beans.factory.BeanNameAware; // Most common configuration options for simple steps should be found here.\n", "des": "Factories for step level components."}
{"index": 2407, "repo": "spring-batch-core-5.0.2", "code": "package item;\n\npublic class BatchRetryTemplate extends Object implements org.springframework.retry.RetryOperations; // A special purpose retry template that deals specifically with multi-valued stateful retry.\npublic class ChunkMonitor extends ItemStreamSupport; // Manage the offset data between the last successful commit and updates made to an input chunk.\npublic static class ChunkMonitor.ChunkMonitorData extends Object;\npublic class ChunkOrientedTasklet<I> extends Object implements Tasklet; // A Tasklet implementing variations on read-process-write item handling.\npublic interface ChunkProcessor<I>; // Interface defined for processing Chunks.\npublic interface ChunkProvider<T>; // Interface for providing Chunks to be processed, used by the ChunkOrientedTasklet\npublic class DefaultItemFailureHandler extends ItemListenerSupport<Object,Object>; // Default implementation of the ItemListenerSupport class that writes all exceptions via commons logging.\npublic class FaultTolerantChunkProcessor<I,O> extends SimpleChunkProcessor<I,O>; // FaultTolerant implementation of the ChunkProcessor interface, that allows for skipping or retry of items that cause exceptions during writing.\npublic class FaultTolerantChunkProvider<I> extends SimpleChunkProvider<I>; // FaultTolerant implementation of the ChunkProvider interface, that allows for skipping or retry of items that cause exceptions during reading or processing.\npublic class ForceRollbackForWriteSkipException extends RuntimeException; // Fatal exception to be thrown when a rollback must be forced, typically after catching an exception that otherwise would not cause a rollback.\n@FunctionalInterface public interface KeyGenerator; // Interface for defining keys to uniquely identify items.\npublic class SimpleChunkProcessor<I,O> extends Object implements ChunkProcessor<I>, org.springframework.beans.factory.InitializingBean; // Simple implementation of the ChunkProcessor interface that handles basic item writing and processing.\npublic class SimpleChunkProvider<I> extends Object implements ChunkProvider<I>; // Simple implementation of the ChunkProvider interface that does basic chunk providing from an ItemReader.\npublic class SimpleRetryExceptionHandler extends org.springframework.retry.listener.RetryListenerSupport implements ExceptionHandler; // An ExceptionHandler that is aware of the retry context so that it can distinguish between a fatal exception and one that can be retried.\npublic class SkipOverflowException extends SkipException;\n", "des": "Specific implementations of step concerns for item-oriented approach."}
{"index": 2408, "repo": "spring-batch-core-5.0.2", "code": "package job;\n\npublic class DefaultJobParametersExtractor extends Object implements JobParametersExtractor; // Simple implementation of JobParametersExtractor which pulls parameters with named keys out of the step execution context and the job parameters of the surrounding job.\n@FunctionalInterface public interface JobParametersExtractor; // Strategy interface for translating a StepExecution into JobParameters.\npublic class JobStep extends AbstractStep; // A Step that delegates to a Job to do its work.\n", "des": "JobStep and related components."}
{"index": 2409, "repo": "spring-batch-core-5.0.2", "code": "package skip;\n\npublic class AlwaysSkipItemSkipPolicy extends Object implements SkipPolicy; // Implementation of the SkipPolicy interface that will always return that an item should be skipped.\npublic class CompositeSkipPolicy extends Object implements SkipPolicy;\npublic class ExceptionClassifierSkipPolicy extends Object implements SkipPolicy; // A SkipPolicy that depends on an exception classifier to make its decision, and then delegates to the classifier result.\npublic class LimitCheckingItemSkipPolicy extends Object implements SkipPolicy; // SkipPolicy that determines whether or not reading should continue based upon how many items have been skipped.\npublic class NeverSkipItemSkipPolicy extends Object implements SkipPolicy; // SkipPolicy implementation that always returns false, indicating that an item should not be skipped.\npublic class NonSkippableProcessException extends SkipException; // Fatal exception to be thrown when a process operation could not be skipped.\npublic class NonSkippableReadException extends SkipException; // Fatal exception to be thrown when a read operation could not be skipped.\npublic class NonSkippableWriteException extends SkipException; // Fatal exception to be thrown when a process operation could not be skipped.\npublic abstract class SkipException extends UnexpectedJobExecutionException; // Base exception indicating that the skip has failed or caused a failure.\npublic class SkipLimitExceededException extends SkipException; // Exception indicating that the skip limit for a particular Step has been exceeded.\npublic class SkipListenerFailedException extends UnexpectedJobExecutionException; // Special exception to indicate a failure in a skip listener.\n@FunctionalInterface public interface SkipPolicy; // Policy for determining whether or not some processing should be skipped.\npublic class SkipPolicyFailedException extends UnexpectedJobExecutionException; // Special exception to indicate a failure in a skip policy.\n", "des": "Specific implementations of skip concerns for items in a step."}
{"index": 2410, "repo": "spring-batch-core-5.0.2", "code": "package tasklet;\n\npublic class CallableTaskletAdapter extends Object implements Tasklet, org.springframework.beans.factory.InitializingBean; // Adapts a Callable<RepeatStatus> to the Tasklet interface.\npublic interface CommandRunner; // Strategy interface for executing commands.\npublic class ConfigurableSystemProcessExitCodeMapper extends Object implements SystemProcessExitCodeMapper; // Maps exit codes to ExitStatus according to injected map.\npublic class JvmCommandRunner extends Object implements CommandRunner; // Implementation of the CommandRunner interface that calls the standard Runtime.exec(java.lang.String) method.\npublic class MethodInvokingTaskletAdapter extends AbstractMethodInvokingDelegator<Object> implements Tasklet; // A Tasklet that wraps a method in a POJO.\npublic class SimpleSystemProcessExitCodeMapper extends Object implements SystemProcessExitCodeMapper; // Simple SystemProcessExitCodeMapper implementation that performs following mapping: 0 -> ExitStatus.FINISHED else -> ExitStatus.FAILED\npublic interface StoppableTasklet extends Tasklet; // An extension to the Tasklet interface to allow users to add logic for stopping a tasklet.\npublic class SystemCommandException extends RuntimeException; // Exception indicating failed execution of system command.\npublic class SystemCommandTasklet extends Object implements StepExecutionListener, StoppableTasklet, org.springframework.beans.factory.InitializingBean; // Tasklet that executes a system command.\npublic interface SystemProcessExitCodeMapper; // Maps the exit code of a system process to ExitStatus value returned by a system command.\n@FunctionalInterface public interface Tasklet; // Strategy for processing in a step.\npublic class TaskletStep extends AbstractStep; // Simple implementation of executing the step as a call to a Tasklet, possibly repeated, and each call surrounded by a transaction.\npublic class UncheckedTransactionException extends RuntimeException; // Convenience wrapper for a checked exception so that it can cause a rollback and be extracted afterwards.\n", "des": "Interfaces and generic implementations of tasklet concerns."}
{"index": 2411, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package autoconfigure;\n\npackage autoconfigure.amqp; // Auto-configuration for actuator AMQP concerns.\npackage autoconfigure.audit; // Auto-configuration for actuator audit concerns.\npackage autoconfigure.availability; // Auto-configuration that extends health endpoints so that they can be used as availability probes.\npackage autoconfigure.beans; // Auto-configuration for actuator Spring Bean concerns.\npackage autoconfigure.cache; // Auto-configuration for actuator cache concerns.\npackage autoconfigure.cassandra; // Auto-configuration for actuator Cassandra concerns.\npackage autoconfigure.cloudfoundry; // Auto-configuration for actuator Cloud Foundry concerns.\npackage autoconfigure.condition; // Auto-configuration for actuator condition concerns.\npackage autoconfigure.context; // Auto-configuration for actuator Spring Context concerns.\npackage autoconfigure.couchbase; // Auto-configuration for actuator Couchbase concerns.\npackage autoconfigure.elasticsearch; // Auto-configuration for actuator Elasticsearch concerns.\npackage autoconfigure.endpoint; // Core classes for actuator endpoint auto-configuration.\npackage autoconfigure.env; // Auto-configuration for actuator Spring Environment concerns.\npackage autoconfigure.flyway; // Auto-configuration for actuator Flyway concerns.\npackage autoconfigure.hazelcast; // Auto-configuration for actuator Hazelcast concerns.\npackage autoconfigure.health; // Auto-configuration for actuator health concerns.\npackage autoconfigure.influx; // Auto-configuration for actuator InfluxDB concerns.\npackage autoconfigure.info; // Auto-configuration for actuator info concerns.\npackage autoconfigure.integration; // Auto-configuration for actuator Spring Integration concerns.\npackage autoconfigure.jdbc; // Auto-configuration for actuator JDBC concerns.\npackage autoconfigure.jms; // Auto-configuration for actuator JMS concerns.\npackage autoconfigure.ldap; // Auto-configuration for actuator LDAP concerns.\npackage autoconfigure.liquibase; // Auto-configuration for actuator Liquibase concerns.\n", "des": "Classes for general actuator auto-configuration concerns."}
{"index": 2412, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package amqp;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration.class) @ConditionalOnClass(org.springframework.amqp.rabbit.core.RabbitTemplate.class) @ConditionalOnBean(org.springframework.amqp.rabbit.core.RabbitTemplate.class) @ConditionalOnEnabledHealthIndicator(\"rabbit\") public class RabbitHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.amqp.RabbitHealthIndicator,org.springframework.amqp.rabbit.core.RabbitTemplate>; // Auto-configuration for RabbitHealthIndicator.\n", "des": "Auto-configuration for actuator AMQP concerns."}
{"index": 2413, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package audit;\n\n@AutoConfiguration @ConditionalOnBean(org.springframework.boot.actuate.audit.AuditEventRepository.class) @ConditionalOnProperty(prefix=\"management.auditevents\", name=\"enabled\", matchIfMissing=true) public class AuditAutoConfiguration extends Object; // Auto-configuration for AuditEvents.\n@AutoConfiguration(after=AuditAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.audit.AuditEventsEndpoint.class) public class AuditEventsEndpointAutoConfiguration extends Object; // Auto-configuration for the AuditEventsEndpoint.\n", "des": "Auto-configuration for actuator audit concerns."}
{"index": 2414, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package availability;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration.class) public class AvailabilityHealthContributorAutoConfiguration extends Object; // Auto-configuration for AvailabilityStateHealthIndicator.\n@AutoConfiguration(after={AvailabilityHealthContributorAutoConfiguration.class,org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration.class}) @Conditional(org.springframework.boot.actuate.autoconfigure.availability.AvailabilityProbesAutoConfiguration.ProbesCondition.class) public class AvailabilityProbesAutoConfiguration extends Object; // Auto-configuration for availability probes.\n", "des": "Auto-configuration that extends health endpoints so that they can be used as availability probes."}
{"index": 2415, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package beans;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.beans.BeansEndpoint.class) public class BeansEndpointAutoConfiguration extends Object; // Auto-configuration for the BeansEndpoint.\n", "des": "Auto-configuration for actuator Spring Bean concerns."}
{"index": 2416, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cache;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.class) @ConditionalOnClass(org.springframework.cache.CacheManager.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.cache.CachesEndpoint.class) public class CachesEndpointAutoConfiguration extends Object; // Auto-configuration for CachesEndpoint.\n", "des": "Auto-configuration for actuator cache concerns."}
{"index": 2417, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cassandra;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration.class,org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration.class,CassandraReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(com.datastax.oss.driver.api.core.CqlSession.class) @ConditionalOnEnabledHealthIndicator(\"cassandra\") @Import(org.springframework.boot.actuate.autoconfigure.cassandra.CassandraHealthContributorConfigurations.CassandraDriverConfiguration.class) public class CassandraHealthContributorAutoConfiguration extends Object; // Auto-configuration for CassandraDriverHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration.class) @ConditionalOnClass({com.datastax.oss.driver.api.core.CqlSession.class,reactor.core.publisher.Flux.class}) @ConditionalOnEnabledHealthIndicator(\"cassandra\") @Import(org.springframework.boot.actuate.autoconfigure.cassandra.CassandraHealthContributorConfigurations.CassandraReactiveDriverConfiguration.class) public class CassandraReactiveHealthContributorAutoConfiguration extends Object; // Auto-configuration for CassandraDriverReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator Cassandra concerns."}
{"index": 2418, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cloudfoundry;\n\npackage cloudfoundry.reactive; // Auto-configuration for actuator Cloud Foundry concerns using WebFlux.\npackage cloudfoundry.servlet; // Auto-configuration for actuator Cloud Foundry concerns using Spring MVC.\npublic enum AccessLevel extends Enum<AccessLevel>; // The specific access level granted to the cloud foundry user that's calling the endpoints.\npublic class CloudFoundryAuthorizationException extends RuntimeException; // Authorization exceptions thrown to limit access to the endpoints.\npublic static enum CloudFoundryAuthorizationException.Reason extends Enum<CloudFoundryAuthorizationException.Reason>; // Reasons why the exception can be thrown.\n@ImportRuntimeHints(org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryWebEndpointDiscoverer.CloudFoundryWebEndpointDiscovererRuntimeHints.class) public class CloudFoundryWebEndpointDiscoverer extends org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer; // WebEndpointDiscoverer for Cloud Foundry that uses Cloud Foundry specific extensions for the HealthEndpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented @EndpointExtension(filter=org.springframework.boot.actuate.autoconfigure.cloudfoundry.CloudFoundryEndpointFilter.class) public @interface EndpointCloudFoundryExtension; // Identifies a type as being a Cloud Foundry specific extension for an @Endpoint.\npublic class SecurityResponse extends Object; // Response from the Cloud Foundry security interceptors.\npublic class Token extends Object; // The JSON web token provided with each request that originates from Cloud Foundry.\n", "des": "Auto-configuration for actuator Cloud Foundry concerns."}
{"index": 2419, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive;\n\n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) public class CloudFoundryReactiveHealthEndpointWebExtension extends Object; // Reactive @EndpointExtension for the HealthEndpoint that always exposes full health details.\n@AutoConfiguration(after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class}) @ConditionalOnProperty(prefix=\"management.cloudfoundry\", name=\"enabled\", matchIfMissing=true) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnCloudPlatform(CLOUD_FOUNDRY) public class ReactiveCloudFoundryActuatorAutoConfiguration extends Object; // Auto-configuration to expose actuator endpoints for Cloud Foundry to use in a reactive environment.\n", "des": "Auto-configuration for actuator Cloud Foundry concerns using WebFlux."}
{"index": 2420, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet;\n\n@AutoConfiguration(after={ServletManagementContextAutoConfiguration.class,HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class}) @ConditionalOnProperty(prefix=\"management.cloudfoundry\", name=\"enabled\", matchIfMissing=true) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnBean(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnCloudPlatform(CLOUD_FOUNDRY) public class CloudFoundryActuatorAutoConfiguration extends Object; // Auto-configuration to expose actuator endpoints for Cloud Foundry to use.\n@ConditionalOnClass({org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer.class,org.springframework.security.config.annotation.web.builders.WebSecurity.class}) @Configuration(proxyBeanMethods=false) public static class CloudFoundryActuatorAutoConfiguration.IgnoredCloudFoundryPathsWebSecurityConfiguration extends Object; // WebSecurityConfigurer to tell Spring Security to ignore cloudfoundry specific paths.\n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) public class CloudFoundryHealthEndpointWebExtension extends Object; // @EndpointExtension for the HealthEndpoint that always exposes full health details.\n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.info.InfoEndpoint.class) public class CloudFoundryInfoEndpointWebExtension extends Object; // @EndpointExtension for the InfoEndpoint that always exposes full git details.\n", "des": "Auto-configuration for actuator Cloud Foundry concerns using Spring MVC."}
{"index": 2421, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package condition;\n\n@Endpoint(id=\"conditions\") public class ConditionsReportEndpoint extends Object; // @Endpoint to expose the ConditionEvaluationReport.\npublic static final class ConditionsReportEndpoint.ConditionsDescriptor extends Object implements org.springframework.boot.actuate.endpoint.OperationResponseBody; // A description of an application's condition evaluation.\npublic static final class ConditionsReportEndpoint.ContextConditionsDescriptor extends Object; // A description of an application context's condition evaluation, primarily intended for serialization to JSON.\npublic static class ConditionsReportEndpoint.MessageAndConditionDescriptor extends Object; // Adapts ConditionEvaluationReport.ConditionAndOutcome to a JSON friendly structure.\npublic static class ConditionsReportEndpoint.MessageAndConditionsDescriptor extends Object; // Adapts ConditionEvaluationReport.ConditionAndOutcomes to a JSON friendly structure.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=ConditionsReportEndpoint.class) public class ConditionsReportEndpointAutoConfiguration extends Object; // Auto-configuration for the ConditionsReportEndpoint.\n", "des": "Auto-configuration for actuator condition concerns."}
{"index": 2422, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package context;\n\npackage context.properties; // Auto-configuration for actuator property concerns.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.context.ShutdownEndpoint.class) public class ShutdownEndpointAutoConfiguration extends Object; // Auto-configuration for the ShutdownEndpoint.\n", "des": "Auto-configuration for actuator Spring Context concerns."}
{"index": 2423, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package properties;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint.class) @EnableConfigurationProperties(ConfigurationPropertiesReportEndpointProperties.class) public class ConfigurationPropertiesReportEndpointAutoConfiguration extends Object; // Auto-configuration for the ConfigurationPropertiesReportEndpoint.\n@ConfigurationProperties(\"management.endpoint.configprops\") public class ConfigurationPropertiesReportEndpointProperties extends Object; // Configuration properties for ConfigurationPropertiesReportEndpoint.\n", "des": "Auto-configuration for actuator property concerns."}
{"index": 2424, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package couchbase;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.class,CouchbaseReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(com.couchbase.client.java.Cluster.class) @ConditionalOnBean(com.couchbase.client.java.Cluster.class) @ConditionalOnEnabledHealthIndicator(\"couchbase\") public class CouchbaseHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.couchbase.CouchbaseHealthIndicator,com.couchbase.client.java.Cluster>; // Auto-configuration for CouchbaseHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.class) @ConditionalOnClass({com.couchbase.client.java.Cluster.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(com.couchbase.client.java.Cluster.class) @ConditionalOnEnabledHealthIndicator(\"couchbase\") public class CouchbaseReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.couchbase.CouchbaseReactiveHealthIndicator,com.couchbase.client.java.Cluster>; // Auto-configuration for CouchbaseReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator Couchbase concerns."}
{"index": 2425, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package elasticsearch;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.elasticsearch.ReactiveElasticsearchClientAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient.class) @ConditionalOnEnabledHealthIndicator(\"elasticsearch\") public class ElasticsearchReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.elasticsearch.ElasticsearchReactiveHealthIndicator,org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient>; // Auto-configuration for ElasticsearchReactiveHealthIndicator using the ReactiveElasticsearchClient.\n", "des": "Auto-configuration for actuator Elasticsearch concerns dependent on Spring Data."}
{"index": 2426, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mongo;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration.class,org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.class,MongoReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.mongodb.core.MongoTemplate.class) @ConditionalOnBean(org.springframework.data.mongodb.core.MongoTemplate.class) @ConditionalOnEnabledHealthIndicator(\"mongo\") public class MongoHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.data.mongo.MongoHealthIndicator,org.springframework.data.mongodb.core.MongoTemplate>; // Auto-configuration for MongoHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.mongodb.core.ReactiveMongoTemplate.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.mongodb.core.ReactiveMongoTemplate.class) @ConditionalOnEnabledHealthIndicator(\"mongo\") public class MongoReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.mongo.MongoReactiveHealthIndicator,org.springframework.data.mongodb.core.ReactiveMongoTemplate>; // Auto-configuration for MongoReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator MongoDB concerns dependent on Spring Data."}
{"index": 2427, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package redis;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration.class,RedisReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.redis.connection.RedisConnectionFactory.class) @ConditionalOnBean(org.springframework.data.redis.connection.RedisConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"redis\") public class RedisHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.data.redis.RedisHealthIndicator,org.springframework.data.redis.connection.RedisConnectionFactory>; // Auto-configuration for RedisHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.redis.connection.ReactiveRedisConnectionFactory.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.redis.connection.ReactiveRedisConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"redis\") public class RedisReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.redis.RedisReactiveHealthIndicator,org.springframework.data.redis.connection.ReactiveRedisConnectionFactory>; // Auto-configuration for RedisReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator Redis concerns dependent on Spring Data."}
{"index": 2428, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package elasticsearch;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration.class) @ConditionalOnClass(org.elasticsearch.client.RestClient.class) @ConditionalOnBean(org.elasticsearch.client.RestClient.class) @ConditionalOnEnabledHealthIndicator(\"elasticsearch\") public class ElasticsearchRestHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.elasticsearch.ElasticsearchRestClientHealthIndicator,org.elasticsearch.client.RestClient>; // Auto-configuration for ElasticsearchRestClientHealthIndicator.\n", "des": "Auto-configuration for actuator Elasticsearch concerns."}
{"index": 2429, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package endpoint;\n\npackage endpoint.condition; // Actuator endpoint auto-configuration conditions.\npackage endpoint.expose; // Endpoint exposure logic used for auto-configuration and conditions.\npackage endpoint.jackson; // Actuator Jackson auto-configuration.\npackage endpoint.jmx; // Actuator JMX endpoint auto-configuration.\npackage endpoint.web; // Auto-configuration for the Actuator's web endpoints.\n@AutoConfiguration public class EndpointAutoConfiguration extends Object; // Auto-configuration for @Endpoint support.\n", "des": "Core classes for actuator endpoint auto-configuration."}
{"index": 2430, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package condition;\n\n@Retention(RUNTIME) @Target({METHOD,TYPE}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.endpoint.condition.OnAvailableEndpointCondition.class) public @interface ConditionalOnAvailableEndpoint; // @Conditional that checks whether an endpoint is available.\n", "des": "Actuator endpoint auto-configuration conditions."}
{"index": 2431, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package expose;\n\npublic enum EndpointExposure extends Enum<EndpointExposure>; // Technologies that can be used to expose an endpoint.\npublic class IncludeExcludeEndpointFilter<E extends org.springframework.boot.actuate.endpoint.ExposableEndpoint<?>> extends Object implements org.springframework.boot.actuate.endpoint.EndpointFilter<E>; // EndpointFilter that will filter endpoints based on include and exclude patterns.\n", "des": "Endpoint exposure logic used for auto-configuration and conditions."}
{"index": 2432, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jackson;\n\n@Configuration(proxyBeanMethods=false) @AutoConfigureAfter(org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration.class) public class JacksonEndpointAutoConfiguration extends Object; // Auto-configuration for Endpoint Jackson support.\n", "des": "Actuator Jackson auto-configuration."}
{"index": 2433, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jmx;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration.class,EndpointAutoConfiguration.class}) @EnableConfigurationProperties({JmxEndpointProperties.class,org.springframework.boot.autoconfigure.jmx.JmxProperties.class}) @ConditionalOnProperty(prefix=\"spring.jmx\", name=\"enabled\", havingValue=\"true\") public class JmxEndpointAutoConfiguration extends Object; // Auto-configuration for JMX @Endpoint support.\n@ConfigurationProperties(\"management.endpoints.jmx\") public class JmxEndpointProperties extends Object; // Configuration properties for JMX export of endpoints.\npublic static class JmxEndpointProperties.Exposure extends Object;\n", "des": "Actuator JMX endpoint auto-configuration."}
{"index": 2434, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package web;\n\npackage web.reactive; // Auto-configuration for exposing actuator web endpoints using WebFlux.\npackage web.servlet; // Auto-configuration for exposing actuator web endpoints using Spring MVC.\n@ConfigurationProperties(prefix=\"management.endpoints.web.cors\") public class CorsEndpointProperties extends Object; // Configuration properties for web endpoints' CORS support.\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=SERVLET) public class ServletEndpointManagementContextConfiguration extends Object; // @ManagementContextConfiguration for servlet endpoints.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public static class ServletEndpointManagementContextConfiguration.JerseyServletEndpointManagementContextConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) public static class ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration extends Object;\n@AutoConfiguration(after=EndpointAutoConfiguration.class) @ConditionalOnWebApplication @EnableConfigurationProperties(WebEndpointProperties.class) public class WebEndpointAutoConfiguration extends Object; // Auto-configuration for web @Endpoint support.\n@ConfigurationProperties(prefix=\"management.endpoints.web\") public class WebEndpointProperties extends Object; // Configuration properties for web management endpoints.\npublic static class WebEndpointProperties.Discovery extends Object;\npublic static class WebEndpointProperties.Exposure extends Object;\n", "des": "Auto-configuration for the Actuator's web endpoints."}
{"index": 2435, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive;\n\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass({org.springframework.web.reactive.DispatcherHandler.class,org.springframework.http.server.reactive.HttpHandler.class}) @ConditionalOnBean(org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier.class) @EnableConfigurationProperties(CorsEndpointProperties.class) public class WebFluxEndpointManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Reactive @Endpoint concerns.\n", "des": "Auto-configuration for exposing actuator web endpoints using WebFlux."}
{"index": 2436, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet;\n\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) @ConditionalOnBean({org.springframework.web.servlet.DispatcherServlet.class,org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier.class}) @EnableConfigurationProperties(CorsEndpointProperties.class) public class WebMvcEndpointManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Spring MVC @Endpoint concerns.\n", "des": "Auto-configuration for exposing actuator web endpoints using Spring MVC."}
{"index": 2437, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package env;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.env.EnvironmentEndpoint.class) @EnableConfigurationProperties(EnvironmentEndpointProperties.class) public class EnvironmentEndpointAutoConfiguration extends Object; // Auto-configuration for the EnvironmentEndpoint.\n@ConfigurationProperties(\"management.endpoint.env\") public class EnvironmentEndpointProperties extends Object; // Configuration properties for EnvironmentEndpoint.\n", "des": "Auto-configuration for actuator Spring Environment concerns."}
{"index": 2438, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package flyway;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.class) @ConditionalOnClass(org.flywaydb.core.Flyway.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.flyway.FlywayEndpoint.class) public class FlywayEndpointAutoConfiguration extends Object; // Auto-configuration for FlywayEndpoint.\n", "des": "Auto-configuration for actuator Flyway concerns."}
{"index": 2439, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package hazelcast;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration.class) @ConditionalOnClass(com.hazelcast.core.HazelcastInstance.class) @ConditionalOnBean(com.hazelcast.core.HazelcastInstance.class) @ConditionalOnEnabledHealthIndicator(\"hazelcast\") public class HazelcastHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.hazelcast.HazelcastHealthIndicator,com.hazelcast.core.HazelcastInstance>; // Auto-configuration for HazelcastHealthIndicator.\n", "des": "Auto-configuration for actuator Hazelcast concerns."}
{"index": 2440, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package health;\n\npublic abstract class AbstractCompositeHealthContributorConfiguration<C,I extends C,B> extends Object; // Base class for health contributor configurations that can combine source beans into a composite.\npublic abstract class CompositeHealthContributorConfiguration<I extends org.springframework.boot.actuate.health.HealthIndicator,B> extends AbstractCompositeHealthContributorConfiguration<org.springframework.boot.actuate.health.HealthContributor,I,B>; // Base class for health contributor configurations that can combine source beans into a composite.\npublic abstract class CompositeReactiveHealthContributorConfiguration<I extends org.springframework.boot.actuate.health.ReactiveHealthIndicator,B> extends AbstractCompositeHealthContributorConfiguration<org.springframework.boot.actuate.health.ReactiveHealthContributor,I,B>; // Base class for health contributor configurations that can combine source beans into a composite.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.health.OnEnabledHealthIndicatorCondition.class) public @interface ConditionalOnEnabledHealthIndicator; // @Conditional that checks whether a default health indicator is enabled.\n@AutoConfiguration public class HealthContributorAutoConfiguration extends Object; // Auto-configuration for health contributors.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) @EnableConfigurationProperties(HealthEndpointProperties.class) @Import({org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration.class,org.springframework.boot.actuate.autoconfigure.health.HealthEndpointReactiveWebExtensionConfiguration.class}) public class HealthEndpointAutoConfiguration extends Object; // Auto-configuration for HealthEndpoint.\n@ConfigurationProperties(\"management.endpoint.health\") public class HealthEndpointProperties extends HealthProperties; // Configuration properties for HealthEndpoint.\npublic static class HealthEndpointProperties.Group extends HealthProperties; // A health endpoint group.\n", "des": "Auto-configuration for actuator health concerns."}
{"index": 2441, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package influx;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration.class) @ConditionalOnClass(org.influxdb.InfluxDB.class) @ConditionalOnBean(org.influxdb.InfluxDB.class) @ConditionalOnEnabledHealthIndicator(\"influxdb\") public class InfluxDbHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.influx.InfluxDbHealthIndicator,org.influxdb.InfluxDB>; // Auto-configuration for InfluxDbHealthIndicator.\n", "des": "Auto-configuration for actuator InfluxDB concerns."}
{"index": 2442, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package info;\n\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.info.OnEnabledInfoContributorCondition.class) public @interface ConditionalOnEnabledInfoContributor; // @Conditional that checks whether an info contributor is enabled.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration.class) @EnableConfigurationProperties(InfoContributorProperties.class) public class InfoContributorAutoConfiguration extends Object; // Auto-configuration for standard InfoContributors.\npublic enum InfoContributorFallback extends Enum<InfoContributorFallback>; // Controls the fallback behavior when the primary property that controls whether an info contributor is enabled is not set.\n@ConfigurationProperties(\"management.info\") public class InfoContributorProperties extends Object; // Configuration properties for core info contributors.\npublic static class InfoContributorProperties.Git extends Object;\n@AutoConfiguration(after=InfoContributorAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.info.InfoEndpoint.class) public class InfoEndpointAutoConfiguration extends Object; // Auto-configuration for the InfoEndpoint.\n", "des": "Auto-configuration for actuator info concerns."}
{"index": 2443, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package integration;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration.class) @ConditionalOnClass(org.springframework.integration.graph.IntegrationGraphServer.class) @ConditionalOnBean(org.springframework.integration.config.IntegrationConfigurationBeanFactoryPostProcessor.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.integration.IntegrationGraphEndpoint.class) public class IntegrationGraphEndpointAutoConfiguration extends Object; // Auto-configuration for the IntegrationGraphEndpoint.\n", "des": "Auto-configuration for actuator Spring Integration concerns."}
{"index": 2444, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jdbc;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class) @ConditionalOnClass({org.springframework.jdbc.core.JdbcTemplate.class,org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.class}) @ConditionalOnBean(javax.sql.DataSource.class) @ConditionalOnEnabledHealthIndicator(\"db\") @EnableConfigurationProperties(DataSourceHealthIndicatorProperties.class) public class DataSourceHealthContributorAutoConfiguration extends Object implements org.springframework.beans.factory.InitializingBean; // Auto-configuration for DataSourceHealthIndicator.\n@ConfigurationProperties(prefix=\"management.health.db\") public class DataSourceHealthIndicatorProperties extends Object; // External configuration properties for DataSourceHealthIndicator.\n", "des": "Auto-configuration for actuator JDBC concerns."}
{"index": 2445, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jms;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration.class,org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration.class}) @ConditionalOnClass(jakarta.jms.ConnectionFactory.class) @ConditionalOnBean(jakarta.jms.ConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"jms\") public class JmsHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.jms.JmsHealthIndicator,jakarta.jms.ConnectionFactory>; // Auto-configuration for JmsHealthIndicator.\n", "des": "Auto-configuration for actuator JMS concerns."}
{"index": 2446, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package ldap;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration.class) @ConditionalOnClass(org.springframework.ldap.core.LdapOperations.class) @ConditionalOnBean(org.springframework.ldap.core.LdapOperations.class) @ConditionalOnEnabledHealthIndicator(\"ldap\") public class LdapHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.ldap.LdapHealthIndicator,org.springframework.ldap.core.LdapOperations>; // Auto-configuration for LdapHealthIndicator.\n", "des": "Auto-configuration for actuator LDAP concerns."}
{"index": 2447, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package liquibase;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration.class) @ConditionalOnClass(liquibase.integration.spring.SpringLiquibase.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.liquibase.LiquibaseEndpoint.class) public class LiquibaseEndpointAutoConfiguration extends Object; // Auto-configuration for LiquibaseEndpoint.\n", "des": "Auto-configuration for actuator Liquibase concerns."}
{"index": 2448, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package logging;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.logging.LogFileWebEndpoint.class) @EnableConfigurationProperties(LogFileWebEndpointProperties.class) public class LogFileWebEndpointAutoConfiguration extends Object; // Auto-configuration for LogFileWebEndpoint.\n@ConfigurationProperties(prefix=\"management.endpoint.logfile\") public class LogFileWebEndpointProperties extends Object; // Configuration properties for LogFileWebEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.logging.LoggersEndpoint.class) public class LoggersEndpointAutoConfiguration extends Object; // Auto-configuration for the LoggersEndpoint.\n", "des": "Auto-configuration for actuator logging concerns."}
{"index": 2449, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mail;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.class) @ConditionalOnClass(org.springframework.mail.javamail.JavaMailSenderImpl.class) @ConditionalOnBean(org.springframework.mail.javamail.JavaMailSenderImpl.class) @ConditionalOnEnabledHealthIndicator(\"mail\") public class MailHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.mail.MailHealthIndicator,org.springframework.mail.javamail.JavaMailSenderImpl>; // Auto-configuration for MailHealthIndicator.\n", "des": "Auto-configuration for actuator JavaMail concerns."}
{"index": 2450, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package management;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.management.HeapDumpWebEndpoint.class) public class HeapDumpWebEndpointAutoConfiguration extends Object; // Auto-configuration for HeapDumpWebEndpoint.\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.management.ThreadDumpEndpoint.class) public class ThreadDumpEndpointAutoConfiguration extends Object; // Auto-configuration for the ThreadDumpEndpoint.\n", "des": "Auto-configuration for actuator management concerns."}
{"index": 2451, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package metrics;\n\npackage metrics.amqp; // Auto-configuration for RabbitMQ metrics.\npackage metrics.cache; // Auto-configuration for cache metrics.\npackage metrics.data; // Auto-configuration for Spring Data actuator metrics.\npackage metrics.export; // Auto-configuration for metrics exporter.\npackage metrics.jdbc; // Auto-configuration for JPA metrics.\npackage metrics.jersey; // Auto-configuration for Jersey actuator metrics.\npackage metrics.mongo; // Auto-configuration for Mongo metrics.\npackage metrics.r2dbc; // Auto-configuration for R2DBC metrics.\npackage metrics.redis; // Auto-configuration for Redis metrics.\npackage metrics.startup; // Auto-configuration for actuator startup time metrics.\npackage metrics.task; // Auto-configuration for task execution and scheduling metrics.\npublic final class AutoTimeProperties extends Object; // Nested configuration properties for items that are automatically timed.\n@AutoConfiguration @Import({org.springframework.boot.actuate.autoconfigure.metrics.NoOpMeterRegistryConfiguration.class,org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.composite.CompositeMeterRegistry.class) public class CompositeMeterRegistryAutoConfiguration extends Object; // Auto-configuration for a CompositeMeterRegistry.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class JvmMetricsAutoConfiguration extends Object; // Auto-configuration for JVM metrics.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration.class, after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass({io.micrometer.core.instrument.binder.kafka.KafkaClientMetrics.class,org.springframework.kafka.core.ProducerFactory.class}) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class KafkaMetricsAutoConfiguration extends Object; // Auto-configuration for Kafka metrics.\n", "des": "Auto-configuration for actuator metrics and Micrometer."}
{"index": 2452, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package amqp;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({com.rabbitmq.client.ConnectionFactory.class,org.springframework.amqp.rabbit.connection.AbstractConnectionFactory.class}) @ConditionalOnBean({org.springframework.amqp.rabbit.connection.ConnectionFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class RabbitMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available connection factories.\n", "des": "Auto-configuration for RabbitMQ metrics."}
{"index": 2453, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cache;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.class}) @ConditionalOnBean(org.springframework.cache.CacheManager.class) @Import({org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMeterBinderProvidersConfiguration.class,org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsRegistrarConfiguration.class}) public class CacheMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available caches.\n", "des": "Auto-configuration for cache metrics."}
{"index": 2454, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package data;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.repository.Repository.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) @EnableConfigurationProperties(MetricsProperties.class) public class RepositoryMetricsAutoConfiguration extends Object; // Auto-configuration for Spring Data Repository metrics.\n", "des": "Auto-configuration for Spring Data actuator metrics."}
{"index": 2455, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package export;\n\npackage export.appoptics; // Support for exporting actuator metrics to AppOptics.\npackage export.atlas; // Support for exporting actuator metrics to Atlas.\npackage export.datadog; // Support for exporting actuator metrics to Datadog.\npackage export.dynatrace; // Support for exporting actuator metrics to Dynatrace.\npackage export.elastic; // Support for exporting actuator metrics to Elastic.\npackage export.ganglia; // Support for exporting actuator metrics to Ganglia.\npackage export.graphite; // Support for exporting actuator metrics to Graphite.\npackage export.humio; // Support for exporting actuator metrics to Humio.\npackage export.influx; // Support for exporting actuator metrics to InfluxDB.\npackage export.jmx; // Support for exporting actuator metrics to JMX.\npackage export.kairos; // Support for exporting actuator metrics to KairosDB.\npackage export.newrelic; // Support for exporting actuator metrics to New Relic.\npackage export.otlp; // Support for exporting actuator metrics to OTLP.\npackage export.prometheus; // Support for exporting actuator metrics to Prometheus.\npackage export.properties; // Base properties and adapters used when exporting actuator metrics.\npackage export.signalfx; // Support for exporting actuator metrics to SignalFX.\npackage export.simple; // Support for exporting actuator metrics to a simple in-memory store.\npackage export.stackdriver; // Support for exporting actuator metrics to Stackdriver.\npackage export.statsd; // Support for exporting actuator metrics to StatsD.\npackage export.wavefront; // Support for exporting actuator metrics to Wavefront.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.metrics.export.OnMetricsExportEnabledCondition.class) public @interface ConditionalOnEnabledMetricsExport; // @Conditional that checks whether a metrics exporter is enabled.\n", "des": "Auto-configuration for metrics exporter."}
{"index": 2456, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package appoptics;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.appoptics.AppOpticsMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"appoptics\") @EnableConfigurationProperties(AppOpticsProperties.class) public class AppOpticsMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to AppOptics.\n@ConfigurationProperties(prefix=\"management.appoptics.metrics.export\") public class AppOpticsProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring AppOptics metrics export.\n", "des": "Support for exporting actuator metrics to AppOptics."}
{"index": 2457, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package atlas;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.atlas.AtlasMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"atlas\") @EnableConfigurationProperties(AtlasProperties.class) public class AtlasMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Atlas.\n@ConfigurationProperties(prefix=\"management.atlas.metrics.export\") public class AtlasProperties extends Object; // @ConfigurationProperties for configuring Atlas metrics export.\n", "des": "Support for exporting actuator metrics to Atlas."}
{"index": 2458, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package datadog;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.datadog.DatadogMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"datadog\") @EnableConfigurationProperties(DatadogProperties.class) public class DatadogMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Datadog.\n@ConfigurationProperties(prefix=\"management.datadog.metrics.export\") public class DatadogProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Datadog metrics export.\n", "des": "Support for exporting actuator metrics to Datadog."}
{"index": 2459, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package dynatrace;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.dynatrace.DynatraceMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"dynatrace\") @EnableConfigurationProperties(DynatraceProperties.class) public class DynatraceMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Dynatrace.\n@ConfigurationProperties(prefix=\"management.dynatrace.metrics.export\") public class DynatraceProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Dynatrace metrics export.\npublic static class DynatraceProperties.V1 extends Object;\npublic static class DynatraceProperties.V2 extends Object;\n", "des": "Support for exporting actuator metrics to Dynatrace."}
{"index": 2460, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package elastic;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.elastic.ElasticMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"elastic\") @EnableConfigurationProperties(ElasticProperties.class) public class ElasticMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Elastic.\n@ConfigurationProperties(prefix=\"management.elastic.metrics.export\") public class ElasticProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Elastic metrics export.\n", "des": "Support for exporting actuator metrics to Elastic."}
{"index": 2461, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package ganglia;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.ganglia.GangliaMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"ganglia\") @EnableConfigurationProperties(GangliaProperties.class) public class GangliaMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Ganglia.\n@ConfigurationProperties(prefix=\"management.ganglia.metrics.export\") public class GangliaProperties extends Object; // @ConfigurationProperties for configuring Ganglia metrics export.\n", "des": "Support for exporting actuator metrics to Ganglia."}
{"index": 2462, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package graphite;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.graphite.GraphiteMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"graphite\") @EnableConfigurationProperties(GraphiteProperties.class) public class GraphiteMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Graphite.\n@ConfigurationProperties(prefix=\"management.graphite.metrics.export\") public class GraphiteProperties extends Object; // @ConfigurationProperties for configuring Graphite metrics export.\n", "des": "Support for exporting actuator metrics to Graphite."}
{"index": 2463, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package humio;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.humio.HumioMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"humio\") @EnableConfigurationProperties(HumioProperties.class) public class HumioMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Humio.\n@ConfigurationProperties(prefix=\"management.humio.metrics.export\") public class HumioProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Humio metrics export.\n", "des": "Support for exporting actuator metrics to Humio."}
{"index": 2464, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package influx;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.influx.InfluxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"influx\") @EnableConfigurationProperties(InfluxProperties.class) public class InfluxMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Influx.\n@ConfigurationProperties(prefix=\"management.influx.metrics.export\") public class InfluxProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Influx metrics export.\n", "des": "Support for exporting actuator metrics to InfluxDB."}
{"index": 2465, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jmx;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.jmx.JmxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"jmx\") @EnableConfigurationProperties(JmxProperties.class) public class JmxMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to JMX.\n@ConfigurationProperties(prefix=\"management.jmx.metrics.export\") public class JmxProperties extends Object; // @ConfigurationProperties for configuring JMX metrics export.\n", "des": "Support for exporting actuator metrics to JMX."}
{"index": 2466, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package kairos;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.kairos.KairosMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"kairos\") @EnableConfigurationProperties(KairosProperties.class) public class KairosMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to KairosDB.\n@ConfigurationProperties(prefix=\"management.kairos.metrics.export\") public class KairosProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring KairosDB metrics export.\n", "des": "Support for exporting actuator metrics to KairosDB."}
{"index": 2467, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package newrelic;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.newrelic.NewRelicMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"newrelic\") @EnableConfigurationProperties(NewRelicProperties.class) public class NewRelicMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to New Relic.\n@ConfigurationProperties(prefix=\"management.newrelic.metrics.export\") public class NewRelicProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring New Relic metrics export.\npublic class NewRelicPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<NewRelicProperties> implements io.micrometer.newrelic.NewRelicConfig; // Adapter to convert NewRelicProperties to a NewRelicConfig.\n", "des": "Support for exporting actuator metrics to New Relic."}
{"index": 2468, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package otlp;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.registry.otlp.OtlpMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"otlp\") @EnableConfigurationProperties(OtlpProperties.class) public class OtlpMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to OTLP.\n@ConfigurationProperties(prefix=\"management.otlp.metrics.export\") public class OtlpProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring OTLP metrics export.\n", "des": "Support for exporting actuator metrics to OTLP."}
{"index": 2469, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package prometheus;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.prometheus.PrometheusMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"prometheus\") @EnableConfigurationProperties(PrometheusProperties.class) public class PrometheusMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Prometheus.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(io.prometheus.client.exporter.PushGateway.class) @ConditionalOnProperty(prefix=\"management.prometheus.metrics.export.pushgateway\", name=\"enabled\") public static class PrometheusMetricsExportAutoConfiguration.PrometheusPushGatewayConfiguration extends Object; // Configuration for Prometheus Pushgateway.\n@Configuration(proxyBeanMethods=false) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.metrics.export.prometheus.PrometheusScrapeEndpoint.class) public static class PrometheusMetricsExportAutoConfiguration.PrometheusScrapeEndpointConfiguration extends Object;\n@ConfigurationProperties(prefix=\"management.prometheus.metrics.export\") public class PrometheusProperties extends Object; // @ConfigurationProperties for configuring metrics export to Prometheus.\npublic static class PrometheusProperties.Pushgateway extends Object; // Configuration options for push-based interaction with Prometheus.\n", "des": "Support for exporting actuator metrics to Prometheus."}
{"index": 2470, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package properties;\n\npublic class PropertiesConfigAdapter<T> extends Object; // Base class for properties to config adapters.\npublic abstract class PushRegistryProperties extends Object; // Base class for properties that configure a metrics registry that pushes aggregated metrics on a regular interval.\npublic abstract class PushRegistryPropertiesConfigAdapter<T extends PushRegistryProperties> extends PropertiesConfigAdapter<T> implements io.micrometer.core.instrument.push.PushRegistryConfig; // Base class for PushRegistryProperties to PushRegistryConfig adapters.\npublic abstract class StepRegistryProperties extends PushRegistryProperties; // PushRegistryProperties extensions for registries that are step-normalized.\npublic abstract class StepRegistryPropertiesConfigAdapter<T extends StepRegistryProperties> extends PushRegistryPropertiesConfigAdapter<T>; // Base class for StepRegistryProperties to StepRegistryConfig adapters.\n", "des": "Base properties and adapters used when exporting actuator metrics."}
{"index": 2471, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package signalfx;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.signalfx.SignalFxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"signalfx\") @EnableConfigurationProperties(SignalFxProperties.class) public class SignalFxMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to SignalFX.\n@ConfigurationProperties(prefix=\"management.signalfx.metrics.export\") public class SignalFxProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring metrics export to SignalFX.\npublic class SignalFxPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<SignalFxProperties> implements io.micrometer.signalfx.SignalFxConfig; // Adapter to convert SignalFxProperties to a SignalFxConfig.\n", "des": "Support for exporting actuator metrics to SignalFX."}
{"index": 2472, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package simple;\n\n@AutoConfiguration(before=CompositeMeterRegistryAutoConfiguration.class, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @EnableConfigurationProperties(SimpleProperties.class) @ConditionalOnMissingBean(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"simple\") public class SimpleMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to a SimpleMeterRegistry.\n@ConfigurationProperties(prefix=\"management.simple.metrics.export\") public class SimpleProperties extends Object; // @ConfigurationProperties for configuring metrics export to a SimpleMeterRegistry.\npublic class SimplePropertiesConfigAdapter extends PropertiesConfigAdapter<SimpleProperties> implements io.micrometer.core.instrument.simple.SimpleConfig; // Adapter to convert SimpleProperties to a SimpleConfig.\n", "des": "Support for exporting actuator metrics to a simple in-memory store."}
{"index": 2473, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package stackdriver;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.stackdriver.StackdriverMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"stackdriver\") @EnableConfigurationProperties(StackdriverProperties.class) public class StackdriverMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Stackdriver.\n@ConfigurationProperties(prefix=\"management.stackdriver.metrics.export\") public class StackdriverProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Stackdriver metrics export.\npublic class StackdriverPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<StackdriverProperties> implements io.micrometer.stackdriver.StackdriverConfig; // Adapter to convert StackdriverProperties to a StackdriverConfig.\n", "des": "Support for exporting actuator metrics to Stackdriver."}
{"index": 2474, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package statsd;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.statsd.StatsdMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"statsd\") @EnableConfigurationProperties(StatsdProperties.class) public class StatsdMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to StatsD.\n@ConfigurationProperties(prefix=\"management.statsd.metrics.export\") public class StatsdProperties extends Object; // @ConfigurationProperties for configuring StatsD metrics export.\npublic class StatsdPropertiesConfigAdapter extends PropertiesConfigAdapter<StatsdProperties> implements io.micrometer.statsd.StatsdConfig; // Adapter to convert StatsdProperties to a StatsdConfig.\n", "des": "Support for exporting actuator metrics to StatsD."}
{"index": 2475, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package wavefront;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after={MetricsAutoConfiguration.class,WavefrontAutoConfiguration.class}) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass({io.micrometer.wavefront.WavefrontMeterRegistry.class,com.wavefront.sdk.common.WavefrontSender.class}) @ConditionalOnEnabledMetricsExport(\"wavefront\") @EnableConfigurationProperties(WavefrontProperties.class) @Import(WavefrontSenderConfiguration.class) public class WavefrontMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Wavefront.\npublic class WavefrontPropertiesConfigAdapter extends PushRegistryPropertiesConfigAdapter<WavefrontProperties.Metrics.Export> implements io.micrometer.wavefront.WavefrontConfig; // Adapter to convert WavefrontProperties to a WavefrontConfig.\n", "des": "Support for exporting actuator metrics to Wavefront."}
{"index": 2476, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jdbc;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({javax.sql.DataSource.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({javax.sql.DataSource.class,io.micrometer.core.instrument.MeterRegistry.class}) public class DataSourcePoolMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available datasources.\n", "des": "Auto-configuration for JPA metrics."}
{"index": 2477, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jersey;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({org.glassfish.jersey.server.ResourceConfig.class,io.micrometer.core.instrument.binder.jersey.server.MetricsApplicationEventListener.class}) @ConditionalOnBean({io.micrometer.core.instrument.MeterRegistry.class,org.glassfish.jersey.server.ResourceConfig.class}) @EnableConfigurationProperties(MetricsProperties.class) public class JerseyServerMetricsAutoConfiguration extends Object; // Auto-configuration for Jersey server instrumentation.\n", "des": "Auto-configuration for Jersey actuator metrics."}
{"index": 2478, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mongo;\n\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration.class, after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(com.mongodb.MongoClientSettings.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class MongoMetricsAutoConfiguration extends Object; // Auto-configuration for Mongo metrics.\n", "des": "Auto-configuration for Mongo metrics."}
{"index": 2479, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jpa;\n\n@Configuration(proxyBeanMethods=false) @AutoConfigureAfter({MetricsAutoConfiguration.class,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}) @ConditionalOnClass({jakarta.persistence.EntityManagerFactory.class,org.hibernate.SessionFactory.class,org.hibernate.stat.HibernateMetrics.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({jakarta.persistence.EntityManagerFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class HibernateMetricsAutoConfiguration extends Object implements org.springframework.beans.factory.SmartInitializingSingleton; // Auto-configuration for metrics on all available Hibernate EntityManagerFactory instances that have statistics enabled.\n", "des": "Auto-configuration for JPA metrics."}
{"index": 2480, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package r2dbc;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration.class}) @ConditionalOnClass({io.r2dbc.pool.ConnectionPool.class,io.micrometer.core.instrument.MeterRegistry.class}) @ConditionalOnBean({io.r2dbc.spi.ConnectionFactory.class,io.micrometer.core.instrument.MeterRegistry.class}) public class ConnectionPoolMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available R2DBC connection factories.\n", "des": "Auto-configuration for R2DBC metrics."}
{"index": 2481, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package redis;\n\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration.class, after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass({io.lettuce.core.RedisClient.class,io.lettuce.core.metrics.MicrometerCommandLatencyRecorder.class}) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class LettuceMetricsAutoConfiguration extends Object; // Auto-configuration for Lettuce metrics.\n", "des": "Auto-configuration for Redis metrics."}
{"index": 2482, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package startup;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class StartupTimeMetricsListenerAutoConfiguration extends Object; // Auto-configuration for startup time metrics.\n", "des": "Auto-configuration for actuator startup time metrics."}
{"index": 2483, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package task;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration.class,org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.binder.jvm.ExecutorServiceMetrics.class) @ConditionalOnBean({java.util.concurrent.Executor.class,io.micrometer.core.instrument.MeterRegistry.class}) public class TaskExecutorMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available task executors and task schedulers.\n", "des": "Auto-configuration for task execution and scheduling metrics."}
{"index": 2484, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jetty;\n\n@AutoConfiguration(after=CompositeMeterRegistryAutoConfiguration.class) @ConditionalOnWebApplication @ConditionalOnClass({io.micrometer.core.instrument.binder.jetty.JettyServerThreadPoolMetrics.class,org.eclipse.jetty.server.Server.class}) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class JettyMetricsAutoConfiguration extends Object; // Auto-configuration for Jetty metrics.\n", "des": "Auto-configuration for Jetty actuator metrics."}
{"index": 2485, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package tomcat;\n\n@AutoConfiguration(after=CompositeMeterRegistryAutoConfiguration.class) @ConditionalOnWebApplication @ConditionalOnClass({io.micrometer.core.instrument.binder.tomcat.TomcatMetrics.class,org.apache.catalina.Manager.class}) public class TomcatMetricsAutoConfiguration extends Object; // Auto-configuration for TomcatMetrics.\n", "des": "Auto-configuration for Tomcat actuator metrics."}
{"index": 2486, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package neo4j;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration.class) @ConditionalOnClass(org.neo4j.driver.Driver.class) @ConditionalOnBean(org.neo4j.driver.Driver.class) @ConditionalOnEnabledHealthIndicator(\"neo4j\") @Import({org.springframework.boot.actuate.autoconfigure.neo4j.Neo4jHealthContributorConfigurations.Neo4jReactiveConfiguration.class,org.springframework.boot.actuate.autoconfigure.neo4j.Neo4jHealthContributorConfigurations.Neo4jConfiguration.class}) public class Neo4jHealthContributorAutoConfiguration extends Object; // Auto-configuration for Neo4jReactiveHealthIndicator and Neo4jHealthIndicator.\n", "des": "Auto-configuration for actuator Neo4J concerns."}
{"index": 2487, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package observation;\n\npackage observation.batch; // Auto-configuration for Spring Batch observations.\npackage observation.graphql; // Auto-configuration for Spring GraphQL observations.\n@AutoConfiguration(after={CompositeMeterRegistryAutoConfiguration.class,MicrometerTracingAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.ObservationRegistry.class) @EnableConfigurationProperties(ObservationProperties.class) public class ObservationAutoConfiguration extends Object; // Auto-configuration for the Micrometer Observation API.\n@ConfigurationProperties(\"management.observations\") public class ObservationProperties extends Object; // @ConfigurationProperties for configuring Micrometer observations.\npublic static class ObservationProperties.Http extends Object;\npublic static class ObservationProperties.Http.Client extends Object;\npublic static class ObservationProperties.Http.Client.ClientRequests extends Object;\npublic static class ObservationProperties.Http.Server extends Object;\npublic static class ObservationProperties.Http.Server.ServerRequests extends Object;\n@FunctionalInterface public interface ObservationRegistryCustomizer<T extends io.micrometer.observation.ObservationRegistry>; // Callback interface that can be used to customize auto-configured observation registries.\n", "des": "Auto-configuration for the Micrometer Observation API."}
{"index": 2488, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package batch;\n\n@AutoConfiguration(after=ObservationAutoConfiguration.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnClass({io.micrometer.observation.ObservationRegistry.class,org.springframework.batch.core.configuration.annotation.BatchObservabilityBeanPostProcessor.class}) public class BatchObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring Batch Jobs.\n", "des": "Auto-configuration for Spring Batch observations."}
{"index": 2489, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package graphql;\n\n@AutoConfiguration(after=ObservationAutoConfiguration.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.execution.GraphQlSource.class,io.micrometer.observation.Observation.class}) public class GraphQlObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring GraphQL endpoints.\n", "des": "Auto-configuration for Spring GraphQL observations."}
{"index": 2490, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package client;\n\n@AutoConfiguration(after={ObservationAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.class,org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.Observation.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @Import({org.springframework.boot.actuate.autoconfigure.observation.web.client.RestTemplateObservationConfiguration.class,org.springframework.boot.actuate.autoconfigure.observation.web.client.WebClientObservationConfiguration.class}) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class HttpClientObservationsAutoConfiguration extends Object; // Auto-configuration for HTTP client-related observations.\n", "des": "Auto-configuration for web client observation support."}
{"index": 2491, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,ObservationAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.Observation.class) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @ConditionalOnWebApplication(type=REACTIVE) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class WebFluxObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring WebFlux applications.\n", "des": "Auto-configuration for WebFlux actuator observations."}
{"index": 2492, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,ObservationAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({org.springframework.web.servlet.DispatcherServlet.class,io.micrometer.observation.Observation.class}) @ConditionalOnBean(io.micrometer.observation.ObservationRegistry.class) @EnableConfigurationProperties({MetricsProperties.class,ObservationProperties.class}) public class WebMvcObservationAutoConfiguration extends Object; // Auto-configuration for instrumentation of Spring Web MVC servlet-based request mappings.\n", "des": "Auto-configuration for Spring MVC observation support."}
{"index": 2493, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package quartz;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration.class) @ConditionalOnClass(org.quartz.Scheduler.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.quartz.QuartzEndpoint.class) @EnableConfigurationProperties(QuartzEndpointProperties.class) public class QuartzEndpointAutoConfiguration extends Object; // Auto-configuration for QuartzEndpoint.\n@ConfigurationProperties(\"management.endpoint.quartz\") public class QuartzEndpointProperties extends Object; // Configuration properties for QuartzEndpoint.\n", "des": "Auto-configuration for actuator Quartz Scheduler concerns."}
{"index": 2494, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package r2dbc;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration.class) @ConditionalOnClass(io.r2dbc.spi.ConnectionFactory.class) @ConditionalOnBean(io.r2dbc.spi.ConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"r2dbc\") public class ConnectionFactoryHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.r2dbc.ConnectionFactoryHealthIndicator,io.r2dbc.spi.ConnectionFactory>; // Auto-configuration for ConnectionFactoryHealthIndicator.\n", "des": "Auto-configuration for actuator R2DBC."}
{"index": 2495, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package scheduling;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint.class) public class ScheduledTasksEndpointAutoConfiguration extends Object; // Auto-configuration for ScheduledTasksEndpoint.\n", "des": "Auto-configuration for actuator scheduling concerns."}
{"index": 2496, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive;\n\npublic final class EndpointRequest extends Object; // Factory that can be used to create a ServerWebExchangeMatcher for actuator endpoint locations.\npublic static final class EndpointRequest.EndpointServerWebExchangeMatcher extends org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher<T>; // The ServerWebExchangeMatcher used to match against actuator endpoints.\npublic static final class EndpointRequest.LinksServerWebExchangeMatcher extends org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher<T>; // The ServerWebExchangeMatcher used to match against the links endpoint.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration.class, after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration.class}) @ConditionalOnClass({org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class,org.springframework.security.web.server.WebFilterChainProxy.class}) @ConditionalOnMissingBean({org.springframework.security.web.server.SecurityWebFilterChain.class,org.springframework.security.web.server.WebFilterChainProxy.class}) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementWebSecurityAutoConfiguration extends Object; // Auto-configuration for Reactive Spring Security when actuator is on the classpath.\n", "des": "Auto-configuration for actuator security using WebFlux."}
{"index": 2497, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet;\n\npublic final class EndpointRequest extends Object; // Factory that can be used to create a RequestMatcher for actuator endpoint locations.\npublic static final class EndpointRequest.EndpointRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<org.springframework.web.context.WebApplicationContext>; // The request matcher used to match against actuator endpoints.\npublic static final class EndpointRequest.LinksRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<org.springframework.web.context.WebApplicationContext>; // The request matcher used to match against the links endpoint.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration.class, after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration.class,org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnDefaultWebSecurity public class ManagementWebSecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security when actuator is on the classpath.\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.security.web.util.matcher.RequestMatcher.class) @ConditionalOnWebApplication(type=SERVLET) public class SecurityRequestMatchersManagementContextConfiguration extends Object; // ManagementContextConfiguration that configures the appropriate RequestMatcherProvider.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") @ConditionalOnBean(org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath.class) public static class SecurityRequestMatchersManagementContextConfiguration.JerseyRequestMatcherConfiguration extends Object;\n", "des": "Auto-configuration for actuator security using Spring MVC."}
{"index": 2498, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package session;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.class) @ConditionalOnClass(org.springframework.session.FindByIndexNameSessionRepository.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.session.SessionsEndpoint.class) public class SessionsEndpointAutoConfiguration extends Object; // Auto-configuration for SessionsEndpoint.\n", "des": "Auto-configuration for actuator Spring Sessions concerns."}
{"index": 2499, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package startup;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.startup.StartupEndpoint.class) @Conditional(org.springframework.boot.actuate.autoconfigure.startup.StartupEndpointAutoConfiguration.ApplicationStartupCondition.class) public class StartupEndpointAutoConfiguration extends Object; // Auto-configuration for the StartupEndpoint.\n", "des": "Auto-configuration for actuator ApplicationStartup concerns."}
{"index": 2500, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package system;\n\n@AutoConfiguration(before=HealthContributorAutoConfiguration.class) @ConditionalOnEnabledHealthIndicator(\"diskspace\") @EnableConfigurationProperties(DiskSpaceHealthIndicatorProperties.class) public class DiskSpaceHealthContributorAutoConfiguration extends Object; // Auto-configuration for DiskSpaceHealthIndicator.\n@ConfigurationProperties(prefix=\"management.health.diskspace\") public class DiskSpaceHealthIndicatorProperties extends Object; // External configuration properties for DiskSpaceHealthIndicator.\n", "des": "Auto-configuration for actuator system concerns."}
{"index": 2501, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package tracing;\n\npackage tracing.otlp; // Auto-configuration for tracing with OTLP.\npackage tracing.prometheus; // Auto-configuration for Prometheus Exemplars with Micrometer Tracing.\npackage tracing.wavefront; // Auto-configuration for tracing with Wavefront.\npackage tracing.zipkin; // Auto-configuration for tracing with Zipkin.\n@AutoConfiguration(before=MicrometerTracingAutoConfiguration.class) @ConditionalOnClass({brave.Tracer.class,io.micrometer.tracing.brave.bridge.BraveTracer.class}) @EnableConfigurationProperties(TracingProperties.class) @ConditionalOnEnabledTracing public class BraveAutoConfiguration extends Object; // Auto-configuration for Brave.\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @ConditionalOnProperty(prefix=\"management.tracing\", name=\"enabled\", matchIfMissing=true) public @interface ConditionalOnEnabledTracing; // @Conditional that checks whether tracing is enabled.\n@AutoConfiguration @ConditionalOnClass(io.micrometer.tracing.Tracer.class) @ConditionalOnEnabledTracing public class MicrometerTracingAutoConfiguration extends Object; // Auto-configuration for the Micrometer Tracing API.\n@AutoConfiguration(before=MicrometerTracingAutoConfiguration.class) @ConditionalOnEnabledTracing @ConditionalOnClass({io.micrometer.tracing.otel.bridge.OtelTracer.class,io.opentelemetry.sdk.trace.SdkTracerProvider.class,io.opentelemetry.api.OpenTelemetry.class}) @EnableConfigurationProperties(TracingProperties.class) public class OpenTelemetryAutoConfiguration extends Object; // Auto-configuration for OpenTelemetry.\n@FunctionalInterface public interface SdkTracerProviderBuilderCustomizer; // Callback interface that can be used to customize the SdkTracerProviderBuilder that is used to create the auto-configured SdkTracerProvider.\n@ConfigurationProperties(\"management.tracing\") public class TracingProperties extends Object; // Configuration properties for tracing.\npublic static class TracingProperties.Baggage extends Object;\npublic static class TracingProperties.Baggage.Correlation extends Object;\npublic static class TracingProperties.Brave extends Object;\npublic static class TracingProperties.Propagation extends Object;\npublic static class TracingProperties.Sampling extends Object;\n", "des": "Auto-configuration for Micrometer Tracing."}
{"index": 2502, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package otlp;\n\n@AutoConfiguration @ConditionalOnEnabledTracing @ConditionalOnClass({io.micrometer.tracing.otel.bridge.OtelTracer.class,io.opentelemetry.sdk.trace.SdkTracerProvider.class,io.opentelemetry.api.OpenTelemetry.class,io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter.class}) @EnableConfigurationProperties(OtlpProperties.class) public class OtlpAutoConfiguration extends Object; // Auto-configuration for OTLP.\n@ConfigurationProperties(\"management.otlp.tracing\") public class OtlpProperties extends Object; // Configuration properties for exporting traces using OTLP.\n", "des": "Auto-configuration for tracing with OTLP."}
{"index": 2503, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package prometheus;\n\n@AutoConfiguration(before=PrometheusMetricsExportAutoConfiguration.class, after=MicrometerTracingAutoConfiguration.class) @ConditionalOnBean(io.micrometer.tracing.Tracer.class) @ConditionalOnClass({io.micrometer.tracing.Tracer.class,io.prometheus.client.exemplars.tracer.common.SpanContextSupplier.class}) @ConditionalOnEnabledTracing public class PrometheusExemplarsAutoConfiguration extends Object; // Auto-configuration for Prometheus Exemplars with Micrometer Tracing.\n", "des": "Auto-configuration for Prometheus Exemplars with Micrometer Tracing."}
{"index": 2504, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package wavefront;\n\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class,WavefrontAutoConfiguration.class}) @ConditionalOnClass({com.wavefront.sdk.common.WavefrontSender.class,io.micrometer.tracing.reporter.wavefront.WavefrontSpanHandler.class}) @ConditionalOnEnabledTracing @EnableConfigurationProperties(WavefrontProperties.class) @Import(WavefrontSenderConfiguration.class) public class WavefrontTracingAutoConfiguration extends Object; // Auto-configuration for Wavefront tracing.\n", "des": "Auto-configuration for tracing with Wavefront."}
{"index": 2505, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package zipkin;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.class) @ConditionalOnClass(zipkin2.reporter.Sender.class) @Import({org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.SenderConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.ReporterConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.BraveConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.OpenTelemetryConfiguration.class}) @ConditionalOnEnabledTracing @EnableConfigurationProperties(ZipkinProperties.class) public class ZipkinAutoConfiguration extends Object; // Auto-configuration for Zipkin.\npublic interface ZipkinConnectionDetails extends org.springframework.boot.autoconfigure.service.connection.ConnectionDetails; // Details required to establish a connection to a Zipkin server.\n@ConfigurationProperties(\"management.zipkin.tracing\") public class ZipkinProperties extends Object; // Configuration properties for ZipkinAutoConfiguration.\n@FunctionalInterface public interface ZipkinRestTemplateBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the RestTemplateBuilder used to send spans to Zipkin.\n@FunctionalInterface public interface ZipkinWebClientBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the WebClient.Builder used to send spans to Zipkin.\n", "des": "Auto-configuration for tracing with Zipkin."}
{"index": 2506, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package wavefront;\n\n@AutoConfiguration @ConditionalOnClass({com.wavefront.sdk.common.application.ApplicationTags.class,com.wavefront.sdk.common.WavefrontSender.class}) @EnableConfigurationProperties(WavefrontProperties.class) public class WavefrontAutoConfiguration extends Object; // Auto-configuration for Wavefront common infrastructure.\n@ConfigurationProperties(prefix=\"management.wavefront\") public class WavefrontProperties extends Object; // Configuration properties to configure Wavefront.\npublic static class WavefrontProperties.Application extends Object;\npublic static class WavefrontProperties.Metrics extends Object;\npublic static class WavefrontProperties.Metrics.Export extends PushRegistryProperties;\npublic static class WavefrontProperties.Sender extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(com.wavefront.sdk.common.WavefrontSender.class) @EnableConfigurationProperties(WavefrontProperties.class) public class WavefrontSenderConfiguration extends Object; // Configuration for WavefrontSender.\n", "des": "Classes shared between Wavefront tracing and metrics."}
{"index": 2507, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package web;\n\npackage web.exchanges; // Auto-configuration for actuator HTTP exchanges.\npackage web.jersey; // Configuration for a Jersey-based management context.\npackage web.mappings; // Classes for auto-configuration of actuator web request mapping concerns.\npackage web.reactive; // Configuration for a WebFlux-based management context.\npackage web.server; // Actuator web server support.\npackage web.servlet; // Actuator Spring MVC support.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Configuration public @interface ManagementContextConfiguration; // Specialized @Configuration class that defines configuration specific for the management context.\npublic final class ManagementContextFactory extends Object; // Factory for creating a separate management context when the management web server is running on a different port to the main application.\npublic enum ManagementContextType extends Enum<ManagementContextType>; // Enumeration of management context types.\n", "des": "Core classes for auto-configuration of actuator web concerns."}
{"index": 2508, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package exchanges;\n\n@AutoConfiguration @ConditionalOnWebApplication @ConditionalOnProperty(prefix=\"management.httpexchanges.recording\", name=\"enabled\", matchIfMissing=true) @ConditionalOnBean(org.springframework.boot.actuate.web.exchanges.HttpExchangeRepository.class) @EnableConfigurationProperties(HttpExchangesProperties.class) public class HttpExchangesAutoConfiguration extends Object; // Auto-configuration to record HTTP exchanges.\n@AutoConfiguration(after=HttpExchangesAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.web.exchanges.HttpExchangesEndpoint.class) public class HttpExchangesEndpointAutoConfiguration extends Object; // Auto-configuration for the HttpExchangesEndpoint.\n@ConfigurationProperties(prefix=\"management.httpexchanges\") public class HttpExchangesProperties extends Object; // Configuration properties for recording HTTP exchanges.\npublic static class HttpExchangesProperties.Recording extends Object; // Recording properties.\n", "des": "Auto-configuration for actuator HTTP exchanges."}
{"index": 2509, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jersey;\n\n@ManagementContextConfiguration(value=CHILD, proxyBeanMethods=false) @Import(org.springframework.boot.actuate.autoconfigure.web.jersey.JerseyManagementContextConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public class JerseyChildManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Jersey infrastructure when a separate management context with a web server running on a different port is required.\n@ManagementContextConfiguration(value=SAME, proxyBeanMethods=false) @EnableConfigurationProperties(org.springframework.boot.autoconfigure.jersey.JerseyProperties.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") public class JerseySameManagementContextConfiguration extends Object; // @ManagementContextConfiguration for Jersey infrastructure when the management context is the same as the main application context.\npublic interface ManagementContextResourceConfigCustomizer; // Callback interface that can be implemented by beans wishing to customize Jersey's ResourceConfig in the management context before it is used.\n", "des": "Configuration for a Jersey-based management context."}
{"index": 2510, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mappings;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.web.mappings.MappingsEndpoint.class) public class MappingsEndpointAutoConfiguration extends Object; // Auto-configuration for MappingsEndpoint.\n", "des": "Classes for auto-configuration of actuator web request mapping concerns."}
{"index": 2511, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive;\n\n@EnableWebFlux @ManagementContextConfiguration(value=CHILD, proxyBeanMethods=false) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementChildContextConfiguration extends Object; // @ManagementContextConfiguration for reactive web infrastructure when a separate management context with a web server running on a different port is required.\n@AutoConfiguration @ConditionalOnClass(reactor.core.publisher.Flux.class) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementContextAutoConfiguration extends Object; // Auto-configuration for Reactive-specific management context concerns.\n", "des": "Configuration for a WebFlux-based management context."}
{"index": 2512, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package server;\n\n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.web.server.OnManagementPortCondition.class) public @interface ConditionalOnManagementPort; // @Conditional that matches based on the configuration of the management port.\n@AutoConfiguration @AutoConfigureOrder(2147483647) @EnableConfigurationProperties({WebEndpointProperties.class,ManagementServerProperties.class}) public class ManagementContextAutoConfiguration extends Object; // Auto-configuration for the management context.\npublic enum ManagementPortType extends Enum<ManagementPortType>; // Port types that can be used to control how the management server is started.\n@ConfigurationProperties(prefix=\"management.server\", ignoreUnknownFields=true) public class ManagementServerProperties extends Object; // Properties for the management server (e.g.\npublic abstract class ManagementWebServerFactoryCustomizer<T extends org.springframework.boot.web.server.ConfigurableWebServerFactory> extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<T>, org.springframework.core.Ordered; // WebServerFactoryCustomizer that customizes the WebServerFactory used to create the management context's web server.\n", "des": "Actuator web server support."}
{"index": 2513, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet;\n\n@Controller public class ManagementErrorEndpoint extends Object; // @Controller for handling \"/error\" path when the management servlet is in a child context.\n@FunctionalInterface public interface ManagementServletContext; // Provides information about the management servlet context for MVC controllers to use.\n@AutoConfiguration @ConditionalOnClass(jakarta.servlet.Servlet.class) @ConditionalOnWebApplication(type=SERVLET) public class ServletManagementContextAutoConfiguration extends Object; // Auto-configuration for Servlet-specific management context concerns.\n@Configuration(proxyBeanMethods=false) @ConditionalOnProperty(prefix=\"management.server\", name=\"add-application-context-header\", havingValue=\"true\") protected static class ServletManagementContextAutoConfiguration.ApplicationContextFilterConfiguration extends Object;\n", "des": "Actuator Spring MVC support."}
{"index": 2514, "repo": "spring-security-core-6.1.2", "code": "package access;\n\npackage access.annotation; // Support for JSR-250 and Spring Security @Secured annotations.\npackage access.event; // Authorization event and listener classes.\npackage access.expression; // Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations.\npackage access.hierarchicalroles; // Role hierarchy implementation.\npackage access.intercept; // Abstract level security interception classes which are responsible for enforcing the configured security constraints for a secure object.\npackage access.method; // Provides SecurityMetadataSource implementations for securing Java method invocations via different AOP libraries.\npackage access.prepost; // Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations.\npackage access.vote; // Implements a vote-based approach to authorization decisions.\n@Deprecated public interface AccessDecisionManager;\n@Deprecated public interface AccessDecisionVoter<S>;\npublic class AccessDeniedException extends RuntimeException; // Thrown if an Authentication object does not hold a required authority.\n@Deprecated public interface AfterInvocationProvider;\npublic class AuthorizationServiceException extends AccessDeniedException; // Thrown if an authorization request could not be processed due to a system problem.\npublic interface ConfigAttribute extends Serializable; // Stores a security system related configuration attribute.\npublic interface PermissionCacheOptimizer extends org.springframework.aop.framework.AopInfrastructureBean; // Allows permissions to be pre-cached when using pre or post filtering with expressions\npublic interface PermissionEvaluator extends org.springframework.aop.framework.AopInfrastructureBean; // Strategy used in expression evaluation to determine whether a user has a permission or permissions for a given domain object.\npublic class SecurityConfig extends Object implements ConfigAttribute; // Stores a ConfigAttribute as a String.\npublic interface SecurityMetadataSource extends org.springframework.aop.framework.AopInfrastructureBean; // Implemented by classes that store and can identify the ConfigAttributes that applies to a given secure object invocation.\n", "des": "Core access-control related code, including security metadata related classes, interception code, access control annotations, EL support and voter-based implementations of the central AccessDecisionManager interface."}
{"index": 2515, "repo": "spring-security-core-6.1.2", "code": "package annotation;\n\n@Deprecated public interface AnnotationMetadataExtractor<A extends Annotation>;\n@Deprecated public class Jsr250MethodSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource;\n@Deprecated public class Jsr250SecurityConfig extends SecurityConfig;\n@Deprecated public class Jsr250Voter extends Object implements AccessDecisionVoter<Object>;\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface Secured; // Java 5 annotation for describing service layer security attributes.\n@Deprecated public class SecuredAnnotationSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource;\n", "des": "Support for JSR-250 and Spring Security @Secured annotations."}
{"index": 2516, "repo": "spring-security-core-6.1.2", "code": "package event;\n\n@Deprecated public abstract class AbstractAuthorizationEvent extends org.springframework.context.ApplicationEvent;\n@Deprecated public class AuthenticationCredentialsNotFoundEvent extends AbstractAuthorizationEvent;\n@Deprecated public class AuthorizationFailureEvent extends AbstractAuthorizationEvent;\n@Deprecated public class AuthorizedEvent extends AbstractAuthorizationEvent;\n@Deprecated public class LoggerListener extends Object implements org.springframework.context.ApplicationListener<AbstractAuthorizationEvent>;\n@Deprecated public class PublicInvocationEvent extends AbstractAuthorizationEvent;\n", "des": "Authorization event and listener classes."}
{"index": 2517, "repo": "spring-security-core-6.1.2", "code": "package expression;\n\npackage expression.method; // Implementation of expression-based method security.\npublic abstract class AbstractSecurityExpressionHandler<T> extends Object implements SecurityExpressionHandler<T>, org.springframework.context.ApplicationContextAware; // Base implementation of the facade which isolates Spring Security's requirements for evaluating security expressions from the implementation of the underlying expression objects.\npublic class DenyAllPermissionEvaluator extends Object implements PermissionEvaluator; // A null PermissionEvaluator which denies all access.\npublic final class ExpressionUtils extends Object;\npublic interface SecurityExpressionHandler<T> extends org.springframework.aop.framework.AopInfrastructureBean; // Facade which isolates Spring Security's requirements for evaluating security expressions from the implementation of the underlying expression objects\npublic interface SecurityExpressionOperations; // Standard interface for expression root objects used with expression-based security.\npublic abstract class SecurityExpressionRoot extends Object implements SecurityExpressionOperations; // Base root object for use in Spring Security expression evaluations.\n", "des": "Expression handling code to support the use of Spring-EL based expressions in @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations."}
{"index": 2518, "repo": "spring-security-core-6.1.2", "code": "package method;\n\npublic class DefaultMethodSecurityExpressionHandler extends AbstractSecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation> implements MethodSecurityExpressionHandler; // The standard implementation of MethodSecurityExpressionHandler.\n@Deprecated public class ExpressionBasedAnnotationAttributeFactory extends Object implements PrePostInvocationAttributeFactory;\n@Deprecated public class ExpressionBasedPostInvocationAdvice extends Object implements PostInvocationAuthorizationAdvice;\n@Deprecated public class ExpressionBasedPreInvocationAdvice extends Object implements PreInvocationAuthorizationAdvice;\npublic interface MethodSecurityExpressionHandler extends SecurityExpressionHandler<org.aopalliance.intercept.MethodInvocation>; // Extended expression-handler facade which adds methods which are specific to securing method invocations.\npublic interface MethodSecurityExpressionOperations extends SecurityExpressionOperations; // Interface which must be implemented if you want to use filtering in method security expressions.\n", "des": "Implementation of expression-based method security."}
{"index": 2519, "repo": "spring-security-core-6.1.2", "code": "package hierarchicalroles;\n\npublic class CycleInRoleHierarchyException extends RuntimeException; // Exception that is thrown because of a cycle in the role hierarchy definition\npublic final class NullRoleHierarchy extends Object implements RoleHierarchy;\npublic interface RoleHierarchy; // The simple interface of a role hierarchy.\npublic class RoleHierarchyAuthoritiesMapper extends Object implements GrantedAuthoritiesMapper;\npublic class RoleHierarchyImpl extends Object implements RoleHierarchy; // This class defines a role hierarchy for use with various access checking components.\npublic final class RoleHierarchyUtils extends Object; // Utility methods for RoleHierarchy.\n", "des": "Role hierarchy implementation."}
{"index": 2520, "repo": "spring-security-core-6.1.2", "code": "package intercept;\n\npackage intercept.aopalliance; // Enforces security for AOP Alliance MethodInvocations, such as via Spring AOP.\npackage intercept.aspectj; // Enforces security for AspectJ JointPoints, delegating secure object callbacks to the calling aspect.\n@Deprecated public abstract class AbstractSecurityInterceptor extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware;\n@Deprecated public interface AfterInvocationManager;\n@Deprecated public class AfterInvocationProviderManager extends Object implements AfterInvocationManager, org.springframework.beans.factory.InitializingBean;\n@Deprecated public class InterceptorStatusToken extends Object;\n@Deprecated public class MethodInvocationPrivilegeEvaluator extends Object implements org.springframework.beans.factory.InitializingBean;\n@Deprecated public class RunAsImplAuthenticationProvider extends Object implements org.springframework.beans.factory.InitializingBean, AuthenticationProvider, org.springframework.context.MessageSourceAware;\n@Deprecated public interface RunAsManager;\n@Deprecated public class RunAsManagerImpl extends Object implements RunAsManager, org.springframework.beans.factory.InitializingBean;\n@Deprecated public class RunAsUserToken extends AbstractAuthenticationToken;\n", "des": "Abstract level security interception classes which are responsible for enforcing the configured security constraints for a secure object."}
{"index": 2521, "repo": "spring-security-core-6.1.2", "code": "package aopalliance;\n\n@Deprecated public class MethodSecurityInterceptor extends AbstractSecurityInterceptor implements org.aopalliance.intercept.MethodInterceptor;\n@Deprecated public class MethodSecurityMetadataSourceAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware;\n", "des": "Enforces security for AOP Alliance MethodInvocations, such as via Spring AOP."}
{"index": 2522, "repo": "spring-security-core-6.1.2", "code": "package aspectj;\n\n@Deprecated public interface AspectJCallback;\n@Deprecated public final class AspectJMethodSecurityInterceptor extends MethodSecurityInterceptor;\n@Deprecated public final class MethodInvocationAdapter extends Object implements org.aopalliance.intercept.MethodInvocation;\n", "des": "Enforces security for AspectJ JointPoints, delegating secure object callbacks to the calling aspect."}
{"index": 2523, "repo": "spring-security-core-6.1.2", "code": "package method;\n\n@Deprecated public abstract class AbstractFallbackMethodSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\n@Deprecated public abstract class AbstractMethodSecurityMetadataSource extends Object implements MethodSecurityMetadataSource;\n@Deprecated public final class DelegatingMethodSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\n@Deprecated public class MapBasedMethodSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource implements org.springframework.beans.factory.BeanClassLoaderAware;\npublic interface MethodSecurityMetadataSource extends SecurityMetadataSource;\n@Target(PARAMETER) @Retention(RUNTIME) @Documented @Deprecated public @interface P;\n", "des": "Provides SecurityMetadataSource implementations for securing Java method invocations via different AOP libraries."}
{"index": 2524, "repo": "spring-security-core-6.1.2", "code": "package prepost;\n\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PostAuthorize; // Annotation for specifying a method access-control expression which will be evaluated after a method has been invoked.\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PostFilter; // Annotation for specifying a method filtering expression which will be evaluated after a method has been invoked.\n@Deprecated public class PostInvocationAdviceProvider extends Object implements AfterInvocationProvider;\n@Deprecated public interface PostInvocationAttribute extends ConfigAttribute;\n@Deprecated public interface PostInvocationAuthorizationAdvice extends org.springframework.aop.framework.AopInfrastructureBean;\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PreAuthorize; // Annotation for specifying a method access-control expression which will be evaluated to decide whether a method invocation is allowed or not.\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PreFilter; // Annotation for specifying a method filtering expression which will be evaluated before a method has been invoked.\n@Deprecated public interface PreInvocationAttribute extends ConfigAttribute;\n@Deprecated public interface PreInvocationAuthorizationAdvice extends org.springframework.aop.framework.AopInfrastructureBean;\n@Deprecated public class PreInvocationAuthorizationAdviceVoter extends Object implements AccessDecisionVoter<org.aopalliance.intercept.MethodInvocation>;\n@Deprecated public class PrePostAdviceReactiveMethodInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor;\n@Deprecated public class PrePostAnnotationSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\npublic interface PrePostInvocationAttributeFactory extends org.springframework.aop.framework.AopInfrastructureBean;\n", "des": "Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations."}
{"index": 2525, "repo": "spring-security-core-6.1.2", "code": "package vote;\n\n@Deprecated public abstract class AbstractAccessDecisionManager extends Object implements AccessDecisionManager, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware;\n@Deprecated public abstract class AbstractAclVoter extends Object implements AccessDecisionVoter<org.aopalliance.intercept.MethodInvocation>;\n@Deprecated public class AffirmativeBased extends AbstractAccessDecisionManager;\n@Deprecated public class AuthenticatedVoter extends Object implements AccessDecisionVoter<Object>;\n@Deprecated public class ConsensusBased extends AbstractAccessDecisionManager;\n@Deprecated public class RoleHierarchyVoter extends RoleVoter;\n@Deprecated public class RoleVoter extends Object implements AccessDecisionVoter<Object>;\n@Deprecated public class UnanimousBased extends AbstractAccessDecisionManager;\n", "des": "Implements a vote-based approach to authorization decisions."}
{"index": 2526, "repo": "spring-security-core-6.1.2", "code": "package authentication;\n\npackage authentication.dao; // An AuthenticationProvider which relies upon a data access object.\npackage authentication.event; // Authentication success and failure events which can be published to the Spring application context.\npackage authentication.jaas; // An authentication provider for JAAS.\npublic abstract class AbstractAuthenticationToken extends Object implements Authentication, CredentialsContainer; // Base class for Authentication objects.\npublic abstract class AbstractUserDetailsReactiveAuthenticationManager extends Object implements ReactiveAuthenticationManager, org.springframework.context.MessageSourceAware; // A base ReactiveAuthenticationManager that allows subclasses to override and work with UserDetails objects.\npublic class AccountExpiredException extends AccountStatusException; // Thrown if an authentication request is rejected because the account has expired.\npublic abstract class AccountStatusException extends AuthenticationException; // Base class for authentication exceptions which are caused by a particular user account status (locked, disabled etc).\npublic class AccountStatusUserDetailsChecker extends Object implements UserDetailsChecker, org.springframework.context.MessageSourceAware;\npublic class AnonymousAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.context.MessageSourceAware; // An AuthenticationProvider implementation that validates AnonymousAuthenticationTokens.\npublic class AnonymousAuthenticationToken extends AbstractAuthenticationToken implements Serializable; // Represents an anonymous Authentication.\npublic class AuthenticationCredentialsNotFoundException extends AuthenticationException; // Thrown if an authentication request is rejected because there is no Authentication object in the SecurityContext.\npublic interface AuthenticationDetailsSource<C,T>; // Provides a Authentication.getDetails() object for a given web request.\npublic interface AuthenticationEventPublisher;\npublic interface AuthenticationManager; // Processes an Authentication request.\npublic interface AuthenticationManagerResolver<C>; // An interface for resolving an AuthenticationManager based on the provided context\npublic class AuthenticationObservationContext extends io.micrometer.observation.Observation.Context; // An Observation.Context used during authentications\npublic final class AuthenticationObservationConvention extends Object implements io.micrometer.observation.ObservationConvention<AuthenticationObservationContext>; // An ObservationConvention for translating authentications into KeyValues.\npublic interface AuthenticationProvider; // Indicates a class can process a specific Authentication implementation.\npublic class AuthenticationServiceException extends AuthenticationException; // Thrown if an authentication request could not be processed due to a system problem.\npublic interface AuthenticationTrustResolver; // Evaluates Authentication tokens\n", "des": "Core classes and interfaces related to user authentication, which are used throughout Spring Security."}
{"index": 2527, "repo": "spring-security-core-6.1.2", "code": "package dao;\n\npublic abstract class AbstractUserDetailsAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware; // A base AuthenticationProvider that allows subclasses to override and work with UserDetails objects.\npublic class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider; // An AuthenticationProvider implementation that retrieves user details from a UserDetailsService.\n", "des": "An AuthenticationProvider which relies upon a data access object."}
{"index": 2528, "repo": "spring-security-core-6.1.2", "code": "package event;\n\npublic abstract class AbstractAuthenticationEvent extends org.springframework.context.ApplicationEvent; // Represents an application authentication event.\npublic abstract class AbstractAuthenticationFailureEvent extends AbstractAuthenticationEvent; // Abstract application event which indicates authentication failure for some reason.\npublic class AuthenticationFailureBadCredentialsEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to invalid credentials being presented.\npublic class AuthenticationFailureCredentialsExpiredEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's credentials having expired.\npublic class AuthenticationFailureDisabledEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's account being disabled.\npublic class AuthenticationFailureExpiredEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's account having expired.\npublic class AuthenticationFailureLockedEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the user's account having been locked.\npublic class AuthenticationFailureProviderNotFoundEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to there being no registered AuthenticationProvider that can process the request.\npublic class AuthenticationFailureProxyUntrustedEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to the CAS user's ticket being generated by an untrusted proxy.\npublic class AuthenticationFailureServiceExceptionEvent extends AbstractAuthenticationFailureEvent; // Application event which indicates authentication failure due to there being a problem internal to the AuthenticationManager.\npublic class AuthenticationSuccessEvent extends AbstractAuthenticationEvent; // Application event which indicates successful authentication.\npublic class InteractiveAuthenticationSuccessEvent extends AbstractAuthenticationEvent; // Indicates an interactive authentication was successful.\npublic class LoggerListener extends Object implements org.springframework.context.ApplicationListener<AbstractAuthenticationEvent>; // Outputs authentication-related application events to Commons Logging.\npublic class LogoutSuccessEvent extends AbstractAuthenticationEvent; // Application event which indicates successful logout\n", "des": "Authentication success and failure events which can be published to the Spring application context."}
{"index": 2529, "repo": "spring-security-core-6.1.2", "code": "package jaas;\n\npackage jaas.event; // JAAS authentication events which can be published to the Spring application context by the JAAS authentication provider.\npackage jaas.memory; // An in memory JAAS implementation.\npublic abstract class AbstractJaasAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationListener<SessionDestroyedEvent>; // An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration.\npublic interface AuthorityGranter; // The AuthorityGranter interface is used to map a given principal to role names.\npublic class DefaultJaasAuthenticationProvider extends AbstractJaasAuthenticationProvider; // Creates a LoginContext using the Configuration provided to it.\npublic class DefaultLoginExceptionResolver extends Object implements LoginExceptionResolver; // This LoginExceptionResolver simply wraps the LoginException with an AuthenticationServiceException.\npublic interface JaasAuthenticationCallbackHandler; // The JaasAuthenticationCallbackHandler is similar to the javax.security.auth.callback.CallbackHandler interface in that it defines a handle method.\npublic class JaasAuthenticationProvider extends AbstractJaasAuthenticationProvider; // An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration.\npublic class JaasAuthenticationToken extends UsernamePasswordAuthenticationToken; // UsernamePasswordAuthenticationToken extension to carry the Jaas LoginContext that the user was logged into\npublic final class JaasGrantedAuthority extends Object implements GrantedAuthority; // GrantedAuthority which, in addition to the assigned role, holds the principal that an AuthorityGranter used as a reason to grant this authority.\npublic class JaasNameCallbackHandler extends Object implements JaasAuthenticationCallbackHandler; // The most basic Callbacks to be handled when using a LoginContext from JAAS, are the NameCallback and PasswordCallback.\npublic class JaasPasswordCallbackHandler extends Object implements JaasAuthenticationCallbackHandler; // The most basic Callbacks to be handled when using a LoginContext from JAAS, are the NameCallback and PasswordCallback.\npublic interface LoginExceptionResolver; // The JaasAuthenticationProvider takes an instance of LoginExceptionResolver to resolve LoginModule specific exceptions to Spring Security AuthenticationExceptions.\npublic class SecurityContextLoginModule extends Object implements LoginModule; // An implementation of LoginModule that uses a Spring Security SecurityContext to provide authentication.\n", "des": "An authentication provider for JAAS."}
{"index": 2530, "repo": "spring-security-core-6.1.2", "code": "package event;\n\npublic abstract class JaasAuthenticationEvent extends org.springframework.context.ApplicationEvent; // Parent class for events fired by the JaasAuthenticationProvider.\npublic class JaasAuthenticationFailedEvent extends JaasAuthenticationEvent; // Fired when LoginContext.login throws a LoginException, or if any other exception is thrown during that time.\npublic class JaasAuthenticationSuccessEvent extends JaasAuthenticationEvent; // Fired by the JaasAuthenticationProvider after successfully logging the user into the LoginContext, handling all callbacks, and calling all AuthorityGranters.\n", "des": "JAAS authentication events which can be published to the Spring application context by the JAAS authentication provider."}
{"index": 2531, "repo": "spring-security-core-6.1.2", "code": "package memory;\n\npublic class InMemoryConfiguration extends Configuration; // An in memory representation of a JAAS configuration.\n", "des": "An in memory JAAS implementation."}
{"index": 2532, "repo": "spring-security-core-6.1.2", "code": "package core;\n\npackage core.authority; // The default implementation of the GrantedAuthority interface.\npackage core.context; // Classes related to the establishment of a security context for the duration of a request (such as an HTTP or RMI invocation).\npackage core.session; // Session abstraction which is provided by the org.springframework.security.core.session.SessionInformation SessionInformation class.\npackage core.token; // A service for building secure random tokens.\npackage core.userdetails; // The standard interfaces for implementing user data DAOs.\npublic interface AuthenticatedPrincipal; // Representation of an authenticated Principal once an Authentication request has been successfully authenticated by the AuthenticationManager.authenticate(Authentication) method.\npublic interface Authentication extends Principal, Serializable; // Represents the token for an authentication request or for an authenticated principal once the request has been processed by the AuthenticationManager.authenticate(Authentication) method.\npublic abstract class AuthenticationException extends RuntimeException; // Abstract superclass for all exceptions related to an Authentication object being invalid for whatever reason.\npublic interface CredentialsContainer; // Indicates that the implementing object contains sensitive data, which can be erased using the eraseCredentials method.\npublic interface GrantedAuthority extends Serializable; // Represents an authority granted to an Authentication object.\npublic final class SpringSecurityCoreVersion extends Object; // Internal class used for checking version compatibility in a deployed application.\npublic class SpringSecurityMessageSource extends org.springframework.context.support.ResourceBundleMessageSource; // The default MessageSource used by Spring Security.\n@Target({TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface Transient; // A marker for Authentications that should never be stored across requests, for example a bearer token authentication\n", "des": "Core classes and interfaces related to user authentication and authorization, as well as the maintenance of a security context."}
{"index": 2533, "repo": "spring-security-core-6.1.2", "code": "package authority;\n\npackage authority.mapping; // Strategies for mapping a list of attributes (such as roles or LDAP groups) to a list of GrantedAuthoritys.\npublic final class AuthorityUtils extends Object; // Utility method for manipulating GrantedAuthority collections etc.\npublic interface GrantedAuthoritiesContainer extends Serializable; // Indicates that a object stores GrantedAuthority objects.\npublic final class SimpleGrantedAuthority extends Object implements GrantedAuthority; // Basic concrete implementation of a GrantedAuthority.\n", "des": "The default implementation of the GrantedAuthority interface."}
{"index": 2534, "repo": "spring-security-core-6.1.2", "code": "package mapping;\n\npublic interface Attributes2GrantedAuthoritiesMapper; // Interface to be implemented by classes that can map a list of security attributes (such as roles or group names) to a collection of Spring Security GrantedAuthoritys.\npublic interface GrantedAuthoritiesMapper; // Mapping interface which can be injected into the authentication layer to convert the authorities loaded from storage into those which will be used in the Authentication object.\npublic class MapBasedAttributes2GrantedAuthoritiesMapper extends Object implements Attributes2GrantedAuthoritiesMapper, MappableAttributesRetriever, org.springframework.beans.factory.InitializingBean; // This class implements the Attributes2GrantedAuthoritiesMapper and MappableAttributesRetriever interfaces based on the supplied Map.\npublic interface MappableAttributesRetriever; // Interface to be implemented by classes that can retrieve a list of mappable security attribute strings (for example the list of all available J2EE roles in a web or EJB application).\npublic class NullAuthoritiesMapper extends Object implements GrantedAuthoritiesMapper;\npublic class SimpleAttributes2GrantedAuthoritiesMapper extends Object implements Attributes2GrantedAuthoritiesMapper, org.springframework.beans.factory.InitializingBean; // This class implements the Attributes2GrantedAuthoritiesMapper interface by doing a one-to-one mapping from roles to Spring Security GrantedAuthorities.\npublic final class SimpleAuthorityMapper extends Object implements GrantedAuthoritiesMapper, org.springframework.beans.factory.InitializingBean; // Simple one-to-one GrantedAuthoritiesMapper which allows for case conversion of the authority name and the addition of a string prefix (which defaults to ROLE_ ).\npublic class SimpleMappableAttributesRetriever extends Object implements MappableAttributesRetriever; // This class implements the MappableAttributesRetriever interface by just returning a list of mappable attributes as previously set using the corresponding setter method.\n", "des": "Strategies for mapping a list of attributes (such as roles or LDAP groups) to a list of GrantedAuthoritys."}
{"index": 2535, "repo": "spring-security-core-6.1.2", "code": "package context;\n\npublic interface DeferredSecurityContext extends Supplier<SecurityContext>; // An interface that allows delayed access to a SecurityContext that may be generated.\npublic final class ListeningSecurityContextHolderStrategy extends Object implements SecurityContextHolderStrategy; // An API for notifying when the SecurityContext changes.\npublic final class ObservationSecurityContextChangedListener extends Object implements SecurityContextChangedListener; // A SecurityContextChangedListener that adds events to an existing Observation If no Observation is present when an event is fired, then the event is unrecorded.\npublic final class ReactiveSecurityContextHolder extends Object; // Allows getting and setting the Spring SecurityContext into a Context.\npublic interface SecurityContext extends Serializable; // Interface defining the minimum security information associated with the current thread of execution.\npublic class SecurityContextChangedEvent extends org.springframework.context.ApplicationEvent; // An event that represents a change in SecurityContext\n@FunctionalInterface public interface SecurityContextChangedListener; // A listener for SecurityContextChangedEvents\npublic class SecurityContextHolder extends Object; // Associates a given SecurityContext with the current execution thread.\npublic interface SecurityContextHolderStrategy; // A strategy for storing security context information against a thread.\npublic class SecurityContextImpl extends Object implements SecurityContext; // Base implementation of SecurityContext.\n@Transient public class TransientSecurityContext extends SecurityContextImpl; // A SecurityContext that is annotated with @Transient and thus should never be stored across requests.\n", "des": "Classes related to the establishment of a security context for the duration of a request (such as an HTTP or RMI invocation)."}
{"index": 2536, "repo": "spring-security-core-6.1.2", "code": "package session;\n\npublic class AbstractSessionEvent extends org.springframework.context.ApplicationEvent; // Abstract superclass for all session related events.\npublic abstract class SessionCreationEvent extends AbstractSessionEvent; // Generic session creation event which indicates that a session (potentially represented by a security context) has begun.\npublic abstract class SessionDestroyedEvent extends AbstractSessionEvent; // Generic \"session termination\" event which indicates that a session (potentially represented by a security context) has ended.\npublic abstract class SessionIdChangedEvent extends AbstractSessionEvent; // Generic \"session ID changed\" event which indicates that a session identifier (potentially represented by a security context) has changed.\npublic class SessionInformation extends Object implements Serializable; // Represents a record of a session within the Spring Security framework.\npublic interface SessionRegistry; // Maintains a registry of SessionInformation instances.\npublic class SessionRegistryImpl extends Object implements SessionRegistry, org.springframework.context.ApplicationListener<AbstractSessionEvent>; // Default implementation of SessionRegistry which listens for SessionDestroyedEvents published in the Spring application context.\n", "des": "Session abstraction which is provided by the org.springframework.security.core.session.SessionInformation SessionInformation class."}
{"index": 2537, "repo": "spring-security-core-6.1.2", "code": "package token;\n\npublic class DefaultToken extends Object implements Token; // The default implementation of Token.\npublic class KeyBasedPersistenceTokenService extends Object implements TokenService, org.springframework.beans.factory.InitializingBean; // Basic implementation of TokenService that is compatible with clusters and across machine restarts, without requiring database persistence.\npublic class SecureRandomFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<SecureRandom>; // Creates a SecureRandom instance.\npublic abstract class Sha512DigestUtils extends Object; // Provides SHA512 digest methods.\npublic interface Token; // A token issued by TokenService.\npublic interface TokenService; // Provides a mechanism to allocate and rebuild secure, randomised tokens.\n", "des": "A service for building secure random tokens."}
{"index": 2538, "repo": "spring-security-core-6.1.2", "code": "package userdetails;\n\npackage userdetails.cache; // Implementations of UserCache.\npackage userdetails.jdbc; // Exposes a JDBC-based authentication repository, implementing org.springframework.security.core.userdetails.UserDetailsService UserDetailsService.\npackage userdetails.memory; // Exposes an in-memory authentication repository.\npublic interface AuthenticationUserDetailsService<T extends Authentication>; // Interface that allows for retrieving a UserDetails object based on an Authentication object.\npublic class MapReactiveUserDetailsService extends Object implements ReactiveUserDetailsService, ReactiveUserDetailsPasswordService; // A Map based implementation of ReactiveUserDetailsService\npublic interface ReactiveUserDetailsPasswordService; // An API for changing a UserDetails password.\npublic interface ReactiveUserDetailsService; // An API for finding the UserDetails by username.\npublic class User extends Object implements UserDetails, CredentialsContainer; // Models core user information retrieved by a UserDetailsService.\npublic static final class User.UserBuilder extends Object; // Builds the user to be added.\npublic interface UserCache; // Provides a cache of UserDetails objects.\npublic interface UserDetails extends Serializable; // Provides core user information.\npublic class UserDetailsByNameServiceWrapper<T extends Authentication> extends Object implements AuthenticationUserDetailsService<T>, org.springframework.beans.factory.InitializingBean; // This implementation for AuthenticationUserDetailsService wraps a regular Spring Security UserDetailsService implementation, to retrieve a UserDetails object based on the user name contained in an Authentication object.\npublic interface UserDetailsChecker; // Called by classes which make use of a UserDetailsService to check the status of the loaded UserDetails object.\npublic interface UserDetailsPasswordService; // An API for changing a UserDetails password.\npublic interface UserDetailsService; // Core interface which loads user-specific data.\npublic class UsernameNotFoundException extends AuthenticationException; // Thrown if an UserDetailsService implementation cannot locate a User by its username.\n", "des": "The standard interfaces for implementing user data DAOs."}
{"index": 2539, "repo": "spring-security-core-6.1.2", "code": "package cache;\n\npublic class NullUserCache extends Object implements UserCache; // Does not perform any caching.\npublic class SpringCacheBasedUserCache extends Object implements UserCache; // Caches UserDetails instances in a Spring defined Cache.\n", "des": "Implementations of UserCache."}
{"index": 2540, "repo": "spring-security-core-6.1.2", "code": "package jdbc;\n\npublic class JdbcDaoImpl extends org.springframework.jdbc.core.support.JdbcDaoSupport implements UserDetailsService, org.springframework.context.MessageSourceAware; // UserDetailsService implementation which retrieves the user details (username, password, enabled flag, and authorities) from a database using JDBC queries.\n", "des": "Exposes a JDBC-based authentication repository, implementing org.springframework.security.core.userdetails.UserDetailsService UserDetailsService."}
{"index": 2541, "repo": "spring-security-core-6.1.2", "code": "package memory;\n\npublic class UserAttribute extends Object; // Used by InMemoryUserDetailsManager to temporarily store the attributes associated with a user.\npublic class UserAttributeEditor extends PropertyEditorSupport; // Property editor that creates a UserAttribute from a comma separated list of values.\n", "des": "Exposes an in-memory authentication repository."}
{"index": 2542, "repo": "spring-security-core-6.1.2", "code": "package jackson2;\n\npublic class CoreJackson2Module extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson module for spring-security-core.\npublic final class SecurityJackson2Modules extends Object; // This utility class will find all the SecurityModules in classpath.\npublic abstract class SimpleGrantedAuthorityMixin extends Object; // Jackson Mixin class helps in serialize/deserialize SimpleGrantedAuthority.\n", "des": "Mix-in classes to add Jackson serialization support."}
{"index": 2543, "repo": "spring-security-core-6.1.2", "code": "package provisioning;\n\npublic interface GroupManager; // Allows management of groups of authorities and their members.\npublic class InMemoryUserDetailsManager extends Object implements UserDetailsManager, UserDetailsPasswordService; // Non-persistent implementation of UserDetailsManager which is backed by an in-memory map.\npublic class JdbcUserDetailsManager extends JdbcDaoImpl implements UserDetailsManager, GroupManager; // Jdbc user management service, based on the same table structure as its parent class, JdbcDaoImpl.\npublic interface UserDetailsManager extends UserDetailsService; // An extension of the UserDetailsService which provides the ability to create new users and update existing ones.\n", "des": "Contains simple user and authority group account provisioning interfaces together with a a JDBC-based implementation."}
{"index": 2544, "repo": "spring-security-core-6.1.2", "code": "package util;\n\npublic final class FieldUtils extends Object; // Offers static methods for directly manipulating fields.\npublic class InMemoryResource extends org.springframework.core.io.AbstractResource; // An in memory implementation of Spring's Resource interface.\npublic final class MethodInvocationUtils extends Object; // Static utility methods for creating MethodInvocations usable within Spring Security.\npublic class SimpleMethodInvocation extends Object implements org.aopalliance.intercept.MethodInvocation; // Represents the AOP Alliance MethodInvocation.\n", "des": "General utility classes used throughout the Spring Security framework."}
{"index": 2545, "repo": "pulsar-common-3.0.0", "code": "package zstd;\n\npublic class ZStdRawCompressor extends Object; // Expose ZstdFrameCompressor which is a package protected class.\npublic class ZStdRawDecompressor extends Object; // Exposes ZstdFrameDecompressor which is package protected.\n", "des": "Helper class to access AirCompressor package private classes."}
{"index": 2546, "repo": "pulsar-common-3.0.0", "code": "package api;\n\npackage api.url; // Classes to work with URLs.\npublic interface MessageIdAdv extends MessageId; // The MessageId interface provided for advanced users.\n", "des": "Additional helper classes to the pulsar-client-api module."}
{"index": 2547, "repo": "pulsar-common-3.0.0", "code": "package url;\n\npublic class DataURLStreamHandler extends URLStreamHandler; // Extension of the URLStreamHandler class to handle all stream protocol handlers.\npublic class PulsarURLStreamHandlerFactory extends Object implements URLStreamHandlerFactory; // This class defines a factory for URL stream protocol handlers.\npublic class URL extends Object; // Wrapper around java.net.URL to improve usability.\n", "des": "Classes to work with URLs."}
{"index": 2548, "repo": "pulsar-common-3.0.0", "code": "package allocator;\n\npublic class PulsarByteBufAllocator extends Object; // Holder of a ByteBuf allocator.\n", "des": "Classes implementing pulsar allocator."}
{"index": 2549, "repo": "pulsar-common-3.0.0", "code": "package raw;\n\npublic class MessageParser extends Object; // Helper class to work with a raw Pulsar entry payload.\npublic static interface MessageParser.MessageProcessor; // Definition of an interface to process a raw Pulsar entry payload.\npublic interface RawMessage; // View of a message that exposes the internal direct-memory buffer for more efficient processing.\npublic interface RawMessageId; // Interface to uniquely identify an internal raw message.\npublic class RawMessageIdImpl extends Object implements RawMessageId;\npublic class RawMessageImpl extends Object implements RawMessage;\npublic class ReferenceCountedMessageMetadata extends io.netty.util.AbstractReferenceCounted; // Class representing a reference-counted object that requires explicit deallocation.\n", "des": "Classes implementing raw API messages."}
{"index": 2550, "repo": "pulsar-common-3.0.0", "code": "package compression;\n\npublic abstract class AirliftUtils extends Object; // Utilities.\npublic interface CompressionCodec; // Generic compression codec interface.\npublic class CompressionCodecLZ4 extends Object implements CompressionCodec; // LZ4 Compression.\npublic class CompressionCodecNone extends Object implements CompressionCodec; // No compression.\npublic class CompressionCodecProvider extends Object; // Provider of compression codecs used in Pulsar.\npublic class CompressionCodecSnappy extends Object implements CompressionCodec; // Snappy Compression.\npublic class CompressionCodecZLib extends Object implements CompressionCodec; // ZLib Compression.\npublic class CompressionCodecZstd extends Object implements CompressionCodec; // Zstandard Compression.\n", "des": "Implementation of different compression codecs."}
{"index": 2551, "repo": "pulsar-common-3.0.0", "code": "package exception;\n\npublic abstract class PulsarExceptionBase extends Exception;\n", "des": "Exception classes"}
{"index": 2552, "repo": "pulsar-common-3.0.0", "code": "package functions;\n\npublic abstract class JsonIgnorePropertiesMixIn extends Object;\npublic class UpdateOptionsImpl extends Object implements UpdateOptions; // Options while updating the sink.\npublic class Utils extends Object; // Helper class to work with configuration.\n", "des": "Classes needed for pulsar functions."}
{"index": 2553, "repo": "pulsar-common-3.0.0", "code": "package intercept;\n\npublic class AppendBrokerTimestampMetadataInterceptor extends Object implements BrokerEntryMetadataInterceptor; // A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add timestamp from broker side metadata for each entry.\npublic class AppendIndexMetadataInterceptor extends Object implements BrokerEntryMetadataInterceptor;\n@LimitedPrivate @Stable public interface BrokerEntryMetadataInterceptor; // A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add metadata for each entry from broker side.\npublic class BrokerEntryMetadataUtils<T> extends Object; // A tool class for loading BrokerEntryMetadataInterceptor classes.\npublic class InterceptException extends Exception; // Base exception for the broker interceptor.\npublic interface ManagedLedgerPayloadProcessor;\npublic static interface ManagedLedgerPayloadProcessor.Processor;\n", "des": "Classes needed for broker interceptor."}
{"index": 2554, "repo": "pulsar-common-3.0.0", "code": "package io;\n\npublic class ConfigFieldDefinition extends Object; // Information about a Pulsar connector config field.\n", "des": "Configuration classes for IO."}
{"index": 2555, "repo": "pulsar-common-3.0.0", "code": "package lookup;\n\npackage lookup.data; // Lookup data.\npublic class GetTopicsResult extends Object;\n", "des": "Lookup data."}
{"index": 2556, "repo": "pulsar-common-3.0.0", "code": "package data;\n\npublic class LookupData extends Object; // This class encapsulates lookup data.\n", "des": "Lookup data."}
{"index": 2557, "repo": "pulsar-common-3.0.0", "code": "package naming;\n\npublic class Constants extends Object; // Definition of constants.\npublic class Metadata extends Object; // Validator for metadata configuration.\npublic class NamedEntity extends Object;\npublic class NamespaceName extends Object implements ServiceUnitId; // Parser of a value from the namespace field provided in configuration.\npublic interface ServiceUnitId; // Basic interface for service unit's identification.\npublic class SystemTopicNames extends Object; // Encapsulate the parsing of the completeTopicName name.\npublic class TopicName extends Object implements ServiceUnitId; // Encapsulate the parsing of the completeTopicName name.\n", "des": "Classes to work different configuration values."}
{"index": 2558, "repo": "pulsar-common-3.0.0", "code": "package nar;\n\npublic class FileUtils extends Object; // A utility class containing a few useful static methods to do typical IO operations.\npublic class NarClassLoader extends URLClassLoader; // A ClassLoader for loading NARs (NiFi archives).\npublic class NarClassLoaderBuilder extends Object; // NarClassLoader builder class.\npublic class NarUnpacker extends Object; // Helper class to unpack NARs.\n", "des": "Classes to work with NARs."}
{"index": 2559, "repo": "pulsar-common-3.0.0", "code": "package net;\n\npublic class ServiceURI extends Object; // ServiceURI represents service uri within pulsar cluster.\n", "des": "Classes for network configuration."}
{"index": 2560, "repo": "pulsar-common-3.0.0", "code": "package policies;\n\npackage policies.data; // Definition of different data structures for policies.\npackage policies.impl; // Implementation of policies.\npackage policies.path; // Paths for pulsar policies.\npublic interface NamespaceIsolationPolicy; // Namespace isolation policy.\n", "des": "Common policies."}
{"index": 2561, "repo": "pulsar-common-3.0.0", "code": "package data;\n\npublic class AutoFailoverPolicyDataImpl extends Object implements AutoFailoverPolicyData; // The auto failover policy configuration data.\npublic static class AutoFailoverPolicyDataImpl.AutoFailoverPolicyDataImplBuilder extends Object implements AutoFailoverPolicyData.Builder;\npublic final class BrokerNamespaceIsolationDataImpl extends Object implements BrokerNamespaceIsolationData; // The namespace isolation data for a given broker.\npublic static class BrokerNamespaceIsolationDataImpl.BrokerNamespaceIsolationDataImplBuilder extends Object implements BrokerNamespaceIsolationData.Builder;\npublic final class ClusterDataImpl extends Object implements ClusterData, Cloneable; // The configuration data for a cluster.\npublic static class ClusterDataImpl.ClusterDataImplBuilder extends Object implements ClusterData.Builder;\npublic class EnsemblePlacementPolicyConfig extends Object;\npublic static class EnsemblePlacementPolicyConfig.ParseEnsemblePlacementPolicyConfigException extends Exception;\npublic final class FailureDomainImpl extends Object implements FailureDomain; // The data of a failure domain configuration in a cluster.\npublic static class FailureDomainImpl.FailureDomainImplBuilder extends Object implements FailureDomain.Builder;\npublic class FunctionInstanceStatsDataBaseImpl extends Object implements FunctionInstanceStatsDataBase; // Function instance statistics data base.\npublic class FunctionInstanceStatsDataImpl extends FunctionInstanceStatsDataBaseImpl implements FunctionInstanceStatsData; // Function instance statistics data.\npublic class FunctionInstanceStatsImpl extends Object implements FunctionInstanceStats; // Function instance statistics.\npublic class FunctionStatsImpl extends Object implements FunctionStats; // Statistics for Pulsar Function.\npublic class FunctionStatusUtil extends Object;\npublic class HierarchyTopicPolicies extends Object; // Topic policy hierarchy value container.\npublic class LocalPolicies extends Object; // Local policies.\npublic class NamespaceIsolationDataImpl extends Object implements NamespaceIsolationData; // The data of namespace isolation configuration.\npublic static class NamespaceIsolationDataImpl.NamespaceIsolationDataImplBuilder extends Object implements NamespaceIsolationData.Builder;\npublic enum NamespaceOperation extends Enum<NamespaceOperation>; // Namespace authorization operations.\npublic class OffloadPoliciesImpl extends Object implements Serializable, OffloadPolicies; // Definition of the offload policies.\npublic static class OffloadPoliciesImpl.OffloadPoliciesImplBuilder extends Object implements OffloadPolicies.Builder;\npublic class PersistentOfflineTopicStats extends Object; // This object is populated using meta data in zookeeper without actually bringing the topic online.\n", "des": "Definition of different data structures for policies."}
{"index": 2562, "repo": "pulsar-common-3.0.0", "code": "package impl;\n\npublic class NamespaceIsolationPolicies extends Object; // Namespace isolation policies.\npublic class NamespaceIsolationPolicyImpl extends Object implements NamespaceIsolationPolicy; // Implementation of the namespace isolation policy.\n", "des": "Implementation of policies."}
{"index": 2563, "repo": "pulsar-common-3.0.0", "code": "package path;\n\npublic class PolicyPath extends Object; // Policy path utilities.\n", "des": "Paths for pulsar policies."}
{"index": 2564, "repo": "pulsar-common-3.0.0", "code": "package protocol;\n\npackage protocol.schema; // Classes to work with schemas.\npublic final class ByteBufPair extends io.netty.util.AbstractReferenceCounted; // ByteBuf holder that contains 2 buffers.\n@Sharable public static class ByteBufPair.CopyingEncoder extends io.netty.channel.ChannelOutboundHandlerAdapter;\n@Sharable public static class ByteBufPair.Encoder extends io.netty.channel.ChannelOutboundHandlerAdapter;\npublic class Commands extends Object;\npublic static enum Commands.ChecksumType extends Enum<Commands.ChecksumType>; // Definition of possible checksum types.\npublic final class CommandUtils extends Object; // Helper class to work with commands.\npublic class Markers extends Object;\npublic class OptionalProxyProtocolDecoder extends io.netty.channel.ChannelInboundHandlerAdapter; // Decoder that added whether a new connection is prefixed with the ProxyProtocol.\npublic abstract class PulsarDecoder extends io.netty.channel.ChannelInboundHandlerAdapter; // Basic implementation of the channel handler to process inbound Pulsar data.\npublic abstract class PulsarHandler extends PulsarDecoder; // Implementation of the channel handler to process inbound Pulsar data.\n", "des": "Common protocol."}
{"index": 2565, "repo": "pulsar-common-3.0.0", "code": "package schema;\n\npublic class BytesSchemaVersion extends Object implements SchemaVersion, Comparable<BytesSchemaVersion>; // Bytes schema version.\npublic static interface BytesSchemaVersion.ByteArrayComparator extends Comparator<byte[]>, Serializable; // This interface helps to compare byte arrays.\npublic class DeleteSchemaResponse extends Object; // Response for schema deletion.\npublic final class EmptyVersion extends Object implements SchemaVersion; // Empty schema version.\npublic class GetAllVersionsSchemaResponse extends Object; // Response containing all schemas.\npublic class GetSchemaResponse extends Object; // Response containing information about a schema.\npublic final class LatestVersion extends Object implements SchemaVersion; // Latest schema version.\npublic class LongSchemaVersionResponse extends Object; // Response containing the schema version field.\npublic class PostSchemaResponse extends Object; // Response with the version of a schema.\npublic class ProtobufNativeSchemaData extends Object; // POJO class used for serialize to json-string for SchemaInfo.schema when SchemaType is SchemaType.PROTOBUF_NATIVE.\npublic class SchemaData extends Object; // Schema data.\npublic class SchemaHash extends Object; // Schema hash wrapper with a HashCode inner type.\npublic interface SchemaStorage; // Schema storage.\npublic interface SchemaVersion; // Schema version.\npublic class StoredSchema extends Object; // Stored schema with version.\n", "des": "Classes to work with schemas."}
{"index": 2566, "repo": "pulsar-common-3.0.0", "code": "package sasl;\n\npublic class JAASCredentialsContainer extends Object implements Closeable; // JAAS Credentials Container.\npublic class KerberosName extends Object; // This class implements parsing and handling of Kerberos principal names.\npublic static class KerberosName.BadFormatString extends IOException;\npublic static class KerberosName.NoMatchingRule extends IOException;\npublic class SaslConstants extends Object; // SASL Constants.\npublic class TGTRefreshThread extends Thread; // TGT Refresh Thread.\n", "des": "Implementation of Simple Authentication and Security Layer."}
{"index": 2567, "repo": "pulsar-common-3.0.0", "code": "package schema;\n\npublic class LongSchemaVersion extends Object implements SchemaVersion; // Long schema version.\n", "des": "Implementation of the common of the pulsar schema."}
{"index": 2568, "repo": "pulsar-common-3.0.0", "code": "package stats;\n\npublic class JvmDefaultGCMetricsLogger extends Object implements JvmGCMetricsLogger;\npublic class JvmG1GCMetricsLogger extends Object implements JvmGCMetricsLogger; // Logger for the JVM G1 GC metrics.\npublic interface JvmGCMetricsLogger; // JvmGCMetricsLogger can be implemented for each specific GC type which retrieves GC count and pause time and logs it into metrics.\npublic class JvmMetrics extends Object; // This class is responsible for providing JVM metrics.\npublic abstract class MetricsMixIn extends Object;\npublic class Rate extends Object;\n", "des": "Definition of classes responsible for statistics."}
{"index": 2569, "repo": "pulsar-common-3.0.0", "code": "package util;\n\npackage util.collections; // Set of different collections working in the concurrent environment.\npackage util.keystoretls; // Helpers to work with events from the non-blocking I/O client-server framework.\npackage util.netty; // Helpers to work with events from the non-blocking I/O client-server framework.\npublic abstract class BaseGenerateDocumentation extends Object;\nprotected static class BaseGenerateDocumentation.CategoryComparator extends Object implements Comparator<org.apache.commons.lang3.tuple.Pair<Field,org.apache.pulsar.common.util.BaseGenerateDocumentation.FieldContextWrapper>>, Serializable;\npublic interface BCLoader; // This interface declares a Bouncy Castle provider Loader.\npublic class ClassLoaderUtils extends Object; // Helper methods wrt Classloading.\npublic class CmdGenerateDocs extends Object;\npublic class Codec extends Object;\npublic class CompletableFutureCancellationHandler extends Object; // Implements cancellation and timeout support for CompletableFutures.\npublic class DateFormatter extends Object; // Date-time String formatter utility class.\npublic class DefaultSslContextBuilder extends SslContextAutoRefreshBuilder<SSLContext>;\npublic class DirectMemoryUtils extends Object;\npublic class ExceptionHandler extends Object; // Util class to place some special handling of exceptions.\npublic final class FieldParser extends Object; // Generic value converter.\npublic class FileModifiedTimeUpdater extends Object; // Class working with file's modified time.\npublic class FutureUtil extends Object; // This class is aimed at simplifying work with CompletableFuture.\n@ThreadSafe public static class FutureUtil.Sequencer<T> extends Object;\npublic class GracefulExecutorServicesShutdown extends Object; // This a builder like class for providing a fluent API for graceful shutdown Executors are added with the GracefulExecutorServicesShutdown.shutdown(ExecutorService...) method.\npublic interface Hash; // This interface declares a hash function.\npublic class KeyManagerProxy extends X509ExtendedKeyManager; // This class wraps X509ExtendedKeyManager and gives opportunity to refresh key-manager with refreshed certs without changing SslContext.\npublic class KeyStoreHolder extends Object; // Holder for the secure key store.\npublic class Murmur3_32Hash extends Object implements Hash; // Implementation of the MurmurHash3 non-cryptographic hash function.\n", "des": "Common utils."}
{"index": 2570, "repo": "pulsar-common-3.0.0", "code": "package collections;\n\npublic class BitSetRecyclable extends Object implements Cloneable, Serializable; // This this copy of BitSet.\npublic class ConcurrentBitSet extends BitSet; // Safe multithreaded version of BitSet.\npublic class ConcurrentBitSetRecyclable extends ConcurrentBitSet; // Safe multithreaded version of BitSet and leverage netty recycler.\npublic class ConcurrentLongHashMap<V> extends Object; // Map from long to an Object.\npublic static class ConcurrentLongHashMap.Builder<T> extends Object; // Builder of ConcurrentLongHashMap.\npublic static interface ConcurrentLongHashMap.EntryProcessor<V>; // Processor for one key-value entry, where the key is long.\npublic class ConcurrentLongLongPairHashMap extends Object; // Concurrent hash map where both keys and values are composed of pairs of longs.\npublic static interface ConcurrentLongLongPairHashMap.BiConsumerLongPair; // A BiConsumer Long pair.\npublic static class ConcurrentLongLongPairHashMap.Builder extends Object; // Builder of ConcurrentLongLongPairHashMap.\npublic static interface ConcurrentLongLongPairHashMap.LongLongPairFunction; // A Long pair function.\npublic static interface ConcurrentLongLongPairHashMap.LongLongPairPredicate; // A Long pair predicate.\npublic static class ConcurrentLongLongPairHashMap.LongPair extends Object implements Comparable<ConcurrentLongLongPairHashMap.LongPair>; // A pair of long values.\npublic class ConcurrentLongPairSet extends Object implements LongPairSet; // Concurrent hash set where values are composed of pairs of longs.\npublic static class ConcurrentLongPairSet.Builder extends Object; // Builder of ConcurrentLongPairSet.\npublic static interface ConcurrentLongPairSet.ConsumerLong; // Represents a function that accepts an object of the LongPair type.\npublic static class ConcurrentLongPairSet.LongPair extends Object implements Comparable<ConcurrentLongPairSet.LongPair>; // Class representing two long values.\npublic static interface ConcurrentLongPairSet.LongPairConsumer; // Represents a function that accepts two long arguments.\npublic class ConcurrentOpenHashMap<K,V> extends Object; // Concurrent hash map.\npublic static class ConcurrentOpenHashMap.Builder<K,V> extends Object; // Builder of ConcurrentOpenHashMap.\npublic class ConcurrentOpenHashSet<V> extends Object; // Concurrent hash set.\n", "des": "Set of different collections working in the concurrent environment."}
{"index": 2571, "repo": "pulsar-common-3.0.0", "code": "package keystoretls;\n\npublic class KeyStoreSSLContext extends Object; // KeyStoreSSLContext that mainly wrap a SSLContext to provide SSL context for both webservice and netty.\npublic static enum KeyStoreSSLContext.Mode extends Enum<KeyStoreSSLContext.Mode>; // Connection Mode for TLS.\npublic class NetSslContextBuilder extends SslContextAutoRefreshBuilder<SSLContext>; // Similar to `DefaultSslContextBuilder`, which build `javax.net.ssl.SSLContext` for web service.\npublic class NettySSLContextAutoRefreshBuilder extends SslContextAutoRefreshBuilder<KeyStoreSSLContext>; // SSL context builder for Netty.\npublic class SSLContextValidatorEngine extends Object; // SSLContextValidatorEngine to validate 2 SSlContext.\n@FunctionalInterface public static interface SSLContextValidatorEngine.SSLEngineProvider;\n", "des": "Helpers to work with events from the non-blocking I/O client-server framework."}
{"index": 2572, "repo": "pulsar-common-3.0.0", "code": "package netty;\n\npublic class ChannelFutures extends Object; // Static utility methods for operating on ChannelFutures.\npublic class DnsResolverUtil extends Object;\npublic class EventLoopUtil extends Object;\npublic final class NettyChannelUtil extends Object; // Contains utility methods for working with Netty Channels.\npublic class NettyFutureUtil extends Object; // Contains utility methods for working with Netty Futures.\n", "des": "Helpers to work with events from the non-blocking I/O client-server framework."}
{"index": 2573, "repo": "pulsar-common-3.0.0", "code": "package loadbalancer;\n\npublic class AdvertisedListener extends Object; // The advertisedListener for broker with brokerServiceUrl and brokerServiceUrlTls.\npublic class BrokerData extends Object; // Data class containing three components comprising all the data available for the leader broker about other brokers: - The local broker data which is written to ZooKeeper by each individual broker (LocalBrokerData).\npublic class BrokerUsage extends Object; // BrokerUsage object encapsulates the resources that are only used by broker, for now, it's connections both to outside JVM and to the local.\npublic class BundleData extends Object; // Data class comprising the short term and long term historical data for this bundle.\npublic class JvmUsage extends Object; // JvmUsage represents set of resources that are specific to JVM and are used by broker, load balancing need to know this detail.\npublic class LoadReport extends Object implements LoadManagerReport; // This class represents the overall load of the broker - it includes overall SystemResourceUsage and NamespaceUsage for all the namespaces hosted by this broker.\npublic class LoadReportDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer<LoadManagerReport>; // Deserializer for a load report.\npublic class LocalBrokerData extends Object implements LoadManagerReport; // Contains all the data that is maintained locally on each broker.\npublic class NamespaceUsage extends Object; // this class represents usages of resources used by a namespace, this is an aggregate of all the topics and queues on the namespace.\npublic class ResourceUnitRanking extends Object implements Comparable<ResourceUnitRanking>; // The class containing information about system resources, allocated quota, and loaded bundles.\npublic class SystemResourceUsage extends Object; // This class represents a object which reflects system resource usage per resource and the upper limit on the resource.\npublic static enum SystemResourceUsage.ResourceType extends Enum<SystemResourceUsage.ResourceType>; // Definition of possible resource types.\npublic class TimeAverageBrokerData extends Object; // Data class aggregating the short term and long term data across all bundles belonging to a broker.\npublic class TimeAverageMessageData extends Object; // Data class comprising the average message data over a fixed period of time.\n", "des": "Classes to define policies for the load distribution."}
{"index": 2574, "repo": "camel-api-4.0.0-RC1", "code": "package camel;\n\npackage camel.catalog; // Camel Catalog API\npackage camel.cloud; // Camel cloud\npackage camel.cluster; // Camel Cluster support\npackage camel.health; // Camel Health Check support\npackage camel.spi; // Service Provider Interfaces used by the Camel runtime which are plugin strategies.\npublic interface AfterPropertiesConfigured; // To perform optional initialization on an element after its properties has been configured.\npublic interface AggregationStrategy; // A strategy for aggregating two exchanges together into a single exchange.\npublic class AlreadyStoppedException extends RuntimeCamelException; // Exception thrown in situations when a Service has already been stopped.\npublic interface ApiEndpoint extends Endpoint; // Marks the Endpoint as an endpoint from an API based component.\npublic interface AsyncCallback extends Runnable; // The callback interface for an AsyncProcessor so that it can notify you when an Exchange is done.\npublic interface AsyncEndpoint extends Endpoint; // Marks the Endpoint as support asynchronous non-blocking routing in its consumer and producer.\npublic interface AsyncProcessor extends Processor; // An asynchronous processor which can process an Exchange in an asynchronous fashion and signal completion by invoking the AsyncCallback.\npublic interface AsyncProducer extends Producer, AsyncProcessor; // Asynchronous producer\npublic interface BatchConsumer extends Consumer; // A consumer of a batch of message exchanges from an Endpoint\n@Retention(RUNTIME) @Documented @Target({FIELD,METHOD,CONSTRUCTOR,PARAMETER}) public @interface BeanConfigInject; // Used to indicate an injection point of a configuration bean (obtained from the Registry, or a new instance is created) into a POJO.\n@Retention(RUNTIME) @Documented @Target({FIELD,METHOD,CONSTRUCTOR,PARAMETER}) public @interface BeanInject; // Used to indicate an injection point of a bean obtained from the Registry, into a POJO.\npublic enum BeanScope extends Enum<BeanScope>;\npublic interface BinaryPredicate extends Predicate; // A predicate which evaluates a binary expression.\n@Retention(RUNTIME) @Documented @Target({TYPE,FIELD,METHOD}) public @interface BindToRegistry; // Used for binding a bean to the registry.\n@Retention(RUNTIME) @Documented @Target(PARAMETER) public @interface Body; // Marks a parameter as being the body of an inbound Message\n@FunctionalInterface public interface Builder<T>;\n", "des": "The core Camel API."}
{"index": 2575, "repo": "camel-api-4.0.0-RC1", "code": "package catalog;\n\npublic class ConfigurationPropertiesValidationResult extends Object implements Serializable; // Details result of validating configuration properties (eg application.properties for camel-main).\npublic class EndpointValidationResult extends Object implements Serializable; // Details result of validating endpoint uri.\npublic interface JSonSchemaResolver; // Pluggable resolver to load JSON schema files for components, data formats, languages etc.\npublic class LanguageValidationResult extends Object implements Serializable; // Validation result of parsing a language expression or predicate\npublic interface RuntimeCamelCatalog extends StaticService, CamelContextAware; // Runtime catalog which limited API needed by components that supports ComponentVerifierExtension.\npublic interface SuggestionStrategy; // Strategy to provide suggestions for unknown endpoint options\n", "des": "Camel Catalog API"}
{"index": 2576, "repo": "camel-api-4.0.0-RC1", "code": "package cloud;\n\npublic interface DiscoverableService;\npublic interface ServiceCallConstants;\n@FunctionalInterface public interface ServiceChooser; // Allows SPIs to implement custom Service Chooser.\npublic interface ServiceChooserAware; // An interface to represent an object which wishes to be injected with a ServiceChooser\n@FunctionalInterface public interface ServiceChooserFactory extends ServiceFactory<ServiceChooser>; // A factory to create ServiceChooser\npublic interface ServiceDefinition; // Represents a Service.\npublic interface ServiceDiscovery; // Allows SPIs to implement custom Service Discovery.\npublic interface ServiceDiscoveryAware; // An interface to represent an object which wishes to be injected with a ServiceDiscovery\n@FunctionalInterface public interface ServiceDiscoveryFactory extends ServiceFactory<ServiceDiscovery>; // A factory to create ServiceDiscovery\n@FunctionalInterface public interface ServiceExpressionFactory extends ServiceFactory<Expression>; // A factory to create Expression\n@FunctionalInterface public interface ServiceFactory<T>;\n@FunctionalInterface public interface ServiceFilter; // Allows SPIs to implement custom Service Filter.\npublic interface ServiceFilterAware; // An interface to represent an object which wishes to be injected with a ServiceFilter\n@FunctionalInterface public interface ServiceFilterFactory extends ServiceFactory<ServiceFilter>; // A factory to create ServiceFilter\npublic interface ServiceHealth;\n@FunctionalInterface public interface ServiceLoadBalancer; // Represents a Load Balancer.\n@FunctionalInterface public interface ServiceLoadBalancerFactory extends ServiceFactory<ServiceLoadBalancer>; // A factory to create LoadBalancer\n@FunctionalInterface public interface ServiceLoadBalancerFunction<T>; // Represents a load balancer function to be executed by the LoadBalancer.\npublic interface ServiceRegistry extends Service, CamelContextAware, IdAware, Ordered;\n@FunctionalInterface public static interface ServiceRegistry.Selector; // A selector used to pick up a service among a list.\n", "des": "Camel cloud"}
{"index": 2577, "repo": "camel-api-4.0.0-RC1", "code": "package cluster;\n\npublic interface CamelClusterEventListener; // Marker interface for cluster events\npublic static interface CamelClusterEventListener.Leadership extends CamelClusterEventListener;\npublic static interface CamelClusterEventListener.Membership extends CamelClusterEventListener;\npublic interface CamelClusterMember extends HasId;\npublic interface CamelClusterService extends Service, CamelContextAware, IdAware, Ordered;\n@FunctionalInterface public static interface CamelClusterService.Selector;\npublic interface CamelClusterView extends Service, CamelContextAware; // Represents the View of the cluster at some given period of time.\npublic interface CamelPreemptiveClusterService extends CamelClusterService; // A CamelPreemptiveClusterService is a CamelClusterService that manages CamelPreemptiveClusterViews.\npublic interface CamelPreemptiveClusterView extends CamelClusterView; // A CamelPreemptiveClusterView is a CamelClusterView that can be externally disabled by another controller.\n", "des": "Camel Cluster support"}
{"index": 2578, "repo": "camel-api-4.0.0-RC1", "code": "package extension;\n\npublic interface ComponentExtension; // Marker interface for component extensions.\npublic interface ComponentVerifierExtension extends ComponentExtension; // Defines the interface used for validating component/endpoint parameters.\npublic static interface ComponentVerifierExtension.Result extends Serializable; // The result of a verification\npublic static enum ComponentVerifierExtension.Result.Status extends Enum<ComponentVerifierExtension.Result.Status>; // Status of the verification\npublic static enum ComponentVerifierExtension.Scope extends Enum<ComponentVerifierExtension.Scope>; // The scope defines how the parameters should be verified.\npublic static interface ComponentVerifierExtension.VerificationError extends Serializable; // This interface represents a detailed error in case when the verification fails.\npublic static interface ComponentVerifierExtension.VerificationError.Attribute extends Serializable; // Interface defining an attribute which is a key for the detailed error messages.\npublic static interface ComponentVerifierExtension.VerificationError.Code extends Serializable; // Interface defining an error code.\npublic static interface ComponentVerifierExtension.VerificationError.ExceptionAttribute extends ComponentVerifierExtension.VerificationError.Attribute; // Attributes for details about an exception that was raised\npublic static interface ComponentVerifierExtension.VerificationError.GroupAttribute extends ComponentVerifierExtension.VerificationError.Attribute; // Group related details\npublic static interface ComponentVerifierExtension.VerificationError.HttpAttribute extends ComponentVerifierExtension.VerificationError.Attribute; // HTTP related error details\npublic static interface ComponentVerifierExtension.VerificationError.StandardCode extends ComponentVerifierExtension.VerificationError.Code; // Standard set of error codes\npublic interface MetaDataExtension extends ComponentExtension;\npublic static interface MetaDataExtension.MetaData;\n", "des": "Component extension"}
{"index": 2579, "repo": "camel-api-4.0.0-RC1", "code": "package health;\n\npublic interface HasHealthChecks; // An interface to represent an object which provides HealthCheck\npublic interface HealthCheck extends HasGroup, HasId, Ordered; // Health check\npublic static enum HealthCheck.Kind extends Enum<HealthCheck.Kind>;\npublic static interface HealthCheck.Result; // Response to a health check invocation.\npublic static enum HealthCheck.State extends Enum<HealthCheck.State>;\npublic interface HealthCheckAware; // An interface to represent an object which wishes to be injected with the HealthCheck\npublic final class HealthCheckHelper extends Object; // Helper for invoking HealthCheck's.\npublic interface HealthCheckRegistry extends CamelContextAware, StaticService, IdAware; // A registry for health checks.\npublic interface HealthCheckRepository extends HasId, HasHealthChecks; // A repository for health checks.\npublic interface HealthCheckResolver extends CamelContextAware; // A pluggable strategy for resolving health checks in a loosely coupled manner\npublic final class HealthCheckResultBuilder extends Object implements Builder<HealthCheck.Result>; // A builder helper to create a HealthCheck result.\npublic interface HealthCheckResultStrategy; // A strategy that allows SPI to process HealthCheck results and enrich and manipulate the result.\npublic interface WritableHealthCheckRepository extends HealthCheckRepository; // An interface to represent an object which wishes to be injected with the HealthCheck\n", "des": "Camel Health Check support"}
{"index": 2580, "repo": "camel-api-4.0.0-RC1", "code": "package spi;\n\npackage spi.annotations; // SPI annotations for plugins\npublic interface AggregationRepository; // Access to a repository to store aggregated exchanges to support pluggable implementations.\npublic interface AnnotationBasedProcessorFactory; // Factory to create Processor for annotation based EIPs.\npublic interface AnnotationScanTypeConverters; // A TypeConverter which is capable of annotation scanning for Converter classes and add these as type converters.\n@Retention(RUNTIME) @Documented @Target(FIELD) public @interface ApiMethod; // Represents an API method as part of a parent API.\n@Retention(RUNTIME) @Documented @Target(FIELD) public @interface ApiParam; // Used for annotating a UriParam parameter that its for use by API based endpoints.\n@Retention(RUNTIME) @Documented @Target(TYPE) public @interface ApiParams; // Used to annotate a nested configuration parameter type (such as a nested Configuration object) which can then be used on a API based component, endpoint.\n@Retention(RUNTIME) @Documented @Target({TYPE,METHOD,FIELD,PARAMETER}) public @interface AsEndpointUri; // Indicates that the Camel string/expression should be used as an endpoint uri.\n@Retention(RUNTIME) @Documented @Target({TYPE,METHOD,FIELD,PARAMETER}) public @interface AsPredicate; // Indicates that the Camel language/expression should be used as predicate.\npublic interface AsyncProcessorAwaitManager extends StaticService; // A manager to handle async routing engine, when Exchanges are being handed over from one thread to another, while the callee thread is blocked waiting for the other threads to complete, before it can continue.\npublic static interface AsyncProcessorAwaitManager.AwaitThread; // Information about the thread and exchange that are inflight.\npublic static interface AsyncProcessorAwaitManager.Statistics; // Utilization statistics of this manager.\npublic interface AuthorizationPolicy extends Policy; // A marker for defining the policy to be used for applying authorization to routes.\npublic interface AutowiredLifecycleStrategy extends LifecycleStrategy; // Marker interface for LifecycleStrategy that are used for auto-wiring components, data formats and languages.\npublic interface BacklogTracer; // Backlog tracer that captures the last N messages during routing in a backlog.\npublic interface BacklogTracerEventMessage; // Represents a traced message by the BacklogTracer.\n", "des": "Service Provider Interfaces used by the Camel runtime which are plugin strategies."}
{"index": 2581, "repo": "camel-api-4.0.0-RC1", "code": "package annotations;\n\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"cloud\") public @interface CloudServiceFactory;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"component\") public @interface Component;\n@Retention(RUNTIME) @Documented @Target(TYPE) public @interface ConstantProvider; // Internal annotation to mark a class as having constant fields for the source code generator.\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"dataformat\") public @interface Dataformat;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"dev-console\") public @interface DevConsole; // Marks a class as a custom developer console.\n@Target(FIELD) @Retention(RUNTIME) public @interface DslProperty; // Internal annotation used to include fields otherwise excluded because annotate with XmlTransient.\n@Retention(RUNTIME) @Documented @Target({METHOD,FIELD}) public @interface ExternalSchemaElement; // Annotation to be used for JAXB property (field or method) annotated with @XmlAnyElement to highlight which actual elements do we expect (not to be enforced by JAXB, but by Camel itself).\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"health-check\") public @interface HealthCheck; // Marks a class as a custom health-check or health-check repository.\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"#jdk#\") public @interface JdkService;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"language\") public @interface Language;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"periodic-task\") public @interface PeriodicTask;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"properties-function\") public @interface PropertiesFunction;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"resource-resolver\") public @interface ResourceResolver;\n@Retention(RUNTIME) @Documented @Target(TYPE) @ServiceFactory(\"routes-loader\") public @interface RoutesLoader;\n", "des": "SPI annotations for plugins"}
{"index": 2582, "repo": "camel-api-4.0.0-RC1", "code": "package jsse;\n\npublic class AliasedX509ExtendedKeyManager extends X509ExtendedKeyManager; // KeyManager to select a key with desired alias while delegating processing to specified KeyManager Can be used both with server and client sockets\npublic abstract class BaseSSLContextParameters extends JsseParameters; // Represents configuration options that can be applied in the client-side or server-side context depending on what they are applied to.\nprotected static final class BaseSSLContextParameters.SSLContextDecorator extends SSLContext; // Makes a decorated SSLContext appear as a normal SSLContext.\nprotected static final class BaseSSLContextParameters.SSLContextSpiDecorator extends SSLContextSpi; // Class needed to provide decoration of an existing SSLContext.\nprotected static final class BaseSSLContextParameters.SSLServerSocketFactoryDecorator extends SSLServerSocketFactory; // A decorator that enables the application of configuration options to be applied to created sockets even after this factory has been created and turned over to client code.\nprotected static final class BaseSSLContextParameters.SSLSocketFactoryDecorator extends SSLSocketFactory; // A decorator that enables the application of configuration options to be applied to created sockets even after this factory has been created and turned over to client code.\npublic class CipherSuitesParameters extends Object; // Represents a list of TLS/SSL cipher suite names.\npublic enum ClientAuthentication extends Enum<ClientAuthentication>; // Represents the options for the client authentication settings of a server socket.\npublic class FilterParameters extends JsseParameters; // Represents a set of regular expression based filter patterns for including and excluding content of some type.\npublic static class FilterParameters.Patterns extends Object; // An immutable collection of compiled includes and excludes filter Patterns.\npublic interface GlobalSSLContextParametersSupplier extends Supplier<SSLContextParameters>; // A global Supplier of SSLContextParameters to be used in Camel registry.\npublic class JsseParameters extends Object implements CamelContextAware; // Base class that provides optional integration with core Camel capabilities.\npublic class KeyManagersParameters extends JsseParameters; // A representation of configuration options for creating and loading KeyManager instance(s).\npublic class KeyStoreParameters extends JsseParameters; // A representation of configuration options for creating and loading a KeyStore instance.\npublic class SecureRandomParameters extends JsseParameters;\npublic class SecureSocketProtocolsParameters extends Object; // Represents a list of TLS/SSL cipher suite names.\n", "des": "A collection of utility classes for configuring a JSSE SSLContext and other JSSE classes."}
{"index": 2583, "repo": "camel-api-4.0.0-RC1", "code": "package service;\n\npublic abstract class BaseService extends Object; // A useful base class which ensures that a service is only initialized once and provides some helper methods for enquiring of its status.\npublic final class ServiceHelper extends Object; // A collection of helper methods for working with Service objects.\npublic abstract class ServiceSupport extends BaseService implements StatefulService; // A useful base class which ensures that a service is only initialized once and provides some helper methods for enquiring of its status.\n", "des": "Base service classes"}
{"index": 2584, "repo": "spring-rabbit-3.0.6", "code": "package rabbit;\n\npackage rabbit.annotation; // Annotations and supporting classes for declarative Rabbit listener endpoint\npackage rabbit.aot; // Provides classes to support Spring AOT.\npackage rabbit.batch; // Provides classes for message batching.\npackage rabbit.config; // Provides classes supporting the Rabbit XML namespace.\npackage rabbit.connection; // Provides classes related to connections.\npackage rabbit.core; // Provides core classes for Spring Rabbit.\npackage rabbit.listener; // Provides classes for message listener containers.\npackage rabbit.log4j2; // Provides classes supporting Log4j 2 appenders.\npackage rabbit.logback; // Provides classes supporting Logback appenders.\npackage rabbit.retry; // Provides classes supporting retries.\npackage rabbit.support; // Provides support classes for Spring Rabbit.\npackage rabbit.transaction; // Provides classes supporting transactions in Spring Rabbit.\npublic class AsyncRabbitTemplate extends Object implements org.springframework.amqp.core.AsyncAmqpTemplate, ChannelAwareMessageListener, RabbitTemplate.ReturnsCallback, RabbitTemplate.ConfirmCallback, org.springframework.beans.factory.BeanNameAware, org.springframework.context.SmartLifecycle; // Provides asynchronous send and receive operations returning a CompletableFuture allowing the caller to obtain the reply later, using get() or a callback.\npublic class RabbitConverterFuture<C> extends RabbitFuture<C>; // A RabbitFuture with a return type of the template's generic parameter.\npublic abstract class RabbitFuture<T> extends CompletableFuture<T>; // Base class for CompletableFutures returned by AsyncRabbitTemplate.\npublic class RabbitMessageFuture extends RabbitFuture<org.springframework.amqp.core.Message>; // A RabbitFuture with a return type of Message.\npublic class TimeoutTask extends Object implements Runnable; // A Runnable used to time out a RabbitFuture.\n", "des": "Provides top-level classes for Spring Rabbit."}
{"index": 2585, "repo": "spring-rabbit-3.0.6", "code": "package annotation;\n\n@Target({}) @Retention(RUNTIME) public @interface Argument; // Represents an argument used when declaring queues etc within a QueueBinding.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(RabbitListenerConfigurationSelector.class) public @interface EnableRabbit; // Enable Rabbit listener annotated endpoints that are created under the cover by a RabbitListenerContainerFactory.\n@Target({}) @Retention(RUNTIME) public @interface Exchange; // An exchange to which to bind a RabbitListener queue.\npublic class MultiRabbitBootstrapConfiguration extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar, org.springframework.context.EnvironmentAware; // An ImportBeanDefinitionRegistrar class that registers a MultiRabbitListenerAnnotationBeanPostProcessor bean, if MultiRabbit is enabled.\npublic class MultiRabbitListenerAnnotationBeanPostProcessor extends RabbitListenerAnnotationBeanPostProcessor; // An extension of RabbitListenerAnnotationBeanPostProcessor that indicates the proper RabbitAdmin bean to be used when processing to the listeners, and also associates it to the declarables (Exchanges, Queues, and Bindings) returned.\n@Target({}) @Retention(RUNTIME) public @interface Queue; // A queue definition used within the bindings attribute of a QueueBinding.\n@Target({}) @Retention(RUNTIME) public @interface QueueBinding; // Defines a queue, the exchange it is to be bound to, and an optional binding key; used with @RabbitListener.\npublic class RabbitBootstrapConfiguration extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // An ImportBeanDefinitionRegistrar class that registers a RabbitListenerAnnotationBeanPostProcessor bean capable of processing Spring's @RabbitListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented public @interface RabbitHandler; // Annotation that marks a method to be the target of a Rabbit message listener within a class that is annotated with RabbitListener.\n@Target({TYPE,METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented @Repeatable(RabbitListeners.class) public @interface RabbitListener; // Annotation that marks a method to be the target of a Rabbit message listener on the specified RabbitListener.queues() (or RabbitListener.bindings()).\n", "des": "Annotations and supporting classes for declarative Rabbit listener endpoint"}
{"index": 2586, "repo": "spring-rabbit-3.0.6", "code": "package aot;\n\npublic class RabbitRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // RuntimeHintsRegistrar for spring-rabbit.\n", "des": "Provides classes to support Spring AOT."}
{"index": 2587, "repo": "spring-rabbit-3.0.6", "code": "package batch;\n\npublic interface BatchingStrategy; // Strategy for batching messages.\npublic class MessageBatch extends Object; // An object encapsulating a Message containing the batch of messages, the exchange, and routing key.\npublic class SimpleBatchingStrategy extends Object implements BatchingStrategy; // A simple batching strategy that supports only one exchange/routingKey; includes a batch size, a batched message size limit and a timeout.\n", "des": "Provides classes for message batching."}
{"index": 2588, "repo": "spring-rabbit-3.0.6", "code": "package config;\n\npublic abstract class AbstractExchangeParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\npublic abstract class AbstractRabbitListenerContainerFactory<C extends AbstractMessageListenerContainer> extends BaseRabbitListenerContainerFactory<C> implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware; // RabbitListenerContainerFactory for Spring's base container implementation.\npublic abstract class AbstractRetryOperationsInterceptorFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.aopalliance.aop.Advice>; // Convenient base class for interceptor factories.\npublic abstract class BaseRabbitListenerContainerFactory<C extends MessageListenerContainer> extends Object implements RabbitListenerContainerFactory<C>, org.springframework.context.ApplicationContextAware; // Base abstract class for listener container factories.\npublic class BindingFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.amqp.core.Binding>;\npublic class CompositeContainerCustomizer<C extends MessageListenerContainer> extends Object implements ContainerCustomizer<C>; // Implementation of ContainerCustomizer providing the configuration of multiple customizers at the same time.\n@FunctionalInterface public interface ContainerCustomizer<C extends MessageListenerContainer>; // Called by the container factory after the container is created and configured.\npublic class DirectExchangeParser extends AbstractExchangeParser;\npublic class DirectRabbitListenerContainerFactory extends AbstractRabbitListenerContainerFactory<DirectMessageListenerContainer>; // A RabbitListenerContainerFactory implementation to build a regular DirectMessageListenerContainer.\npublic class FanoutExchangeParser extends AbstractExchangeParser;\npublic class HeadersExchangeParser extends AbstractExchangeParser;\npublic class ListenerContainerFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractMessageListenerContainer> implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.SmartLifecycle; // A Factory bean to create a listener container.\npublic static enum ListenerContainerFactoryBean.Type extends Enum<ListenerContainerFactoryBean.Type>; // The container type.\n", "des": "Provides classes supporting the Rabbit XML namespace."}
{"index": 2589, "repo": "spring-rabbit-3.0.6", "code": "package connection;\n\npublic abstract class AbstractConnectionFactory extends Object implements ConnectionFactory, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextClosedEvent>, com.rabbitmq.client.ShutdownListener;\npublic static enum AbstractConnectionFactory.AddressShuffleMode extends Enum<AbstractConnectionFactory.AddressShuffleMode>; // The mode used to shuffle the addresses.\npublic abstract class AbstractRoutingConnectionFactory extends Object implements ConnectionFactory, RoutingConnectionFactory, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Abstract ConnectionFactory implementation that routes AbstractRoutingConnectionFactory.createConnection() calls to one of various target ConnectionFactories based on a lookup key.\npublic class AfterCompletionFailedException extends org.springframework.amqp.AmqpException; // Represents a failure to commit or rollback when performing afterCompletion after the primary transaction completes.\npublic class AutoRecoverConnectionNotCurrentlyOpenException extends org.springframework.amqp.AmqpException; // An exception thrown if the connection is an auto recover connection that is not currently open and is in the process of being recovered.\n@ManagedResource public class CachingConnectionFactory extends AbstractConnectionFactory implements org.springframework.beans.factory.InitializingBean, com.rabbitmq.client.ShutdownListener; // A ConnectionFactory implementation that (when the cache mode is CachingConnectionFactory.CacheMode.CHANNEL (default) returns the same Connection from all CachingConnectionFactory.createConnection() calls, and ignores calls to Connection.close() and caches Channel.\npublic static enum CachingConnectionFactory.CacheMode extends Enum<CachingConnectionFactory.CacheMode>; // The cache mode.\npublic static enum CachingConnectionFactory.ConfirmType extends Enum<CachingConnectionFactory.ConfirmType>; // The type of publisher confirms to use.\n@FunctionalInterface public interface ChannelListener; // A listener for new channel creation and destruction.\npublic interface ChannelProxy extends com.rabbitmq.client.Channel, org.springframework.aop.RawTargetAccess; // Subinterface of Channel to be implemented by Channel proxies.\n", "des": "Provides classes related to connections."}
{"index": 2590, "repo": "spring-rabbit-3.0.6", "code": "package core;\n\npublic class AmqpNackReceivedException extends org.springframework.amqp.AmqpException; // An exception thrown when a negative acknowledgement received after publishing a message.\npublic class BatchingRabbitTemplate extends RabbitTemplate; // A RabbitTemplate that permits batching individual messages into a larger message.\npublic class BrokerEvent extends org.springframework.amqp.event.AmqpEvent; // Represents a broker event generated by the Event Exchange Plugin (https://www.rabbitmq.com/event-exchange.html).\npublic class BrokerEventListener extends Object implements org.springframework.amqp.core.MessageListener, org.springframework.context.ApplicationEventPublisherAware, ConnectionListener, org.springframework.context.SmartLifecycle; // When the event-exchange-plugin is enabled (see https://www.rabbitmq.com/event-exchange.html), if an object of this type is declared as a bean, selected events will be published as BrokerEvents.\n@FunctionalInterface public interface ChannelCallback<T>; // Basic callback for use in RabbitTemplate.\npublic class ConsumeOkNotReceivedException extends org.springframework.amqp.AmqpException; // Thrown when a blocking receive operation is performed but the consumeOk was not received before the receive timeout.\n@FunctionalInterface public interface CorrelationDataPostProcessor; // A callback invoked immediately before publishing a message to update, replace, or create correlation data for publisher confirms.\npublic class DeclarationExceptionEvent extends RabbitAdminEvent; // Application event published when a declaration exception occurs.\npublic final class DeclareExchangeConnectionListener extends Object implements ConnectionListener; // A ConnectionListener that will declare a single exchange when the connection is established.\n@ManagedResource(description=\"Admin Tasks\") public class RabbitAdmin extends Object implements org.springframework.amqp.core.AmqpAdmin, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // RabbitMQ implementation of portable AMQP administrative operations for AMQP >= 0.9.1.\n", "des": "Provides core classes for Spring Rabbit."}
{"index": 2591, "repo": "spring-rabbit-3.0.6", "code": "package listener;\n\npackage listener.adapter; // Provides classes for adapting listeners.\npackage listener.api; // Provides Additional APIs for listeners.\npackage listener.exception; // Provides classes for listener exceptions.\npackage listener.support; // Provides support classes for listeners.\npublic abstract class AbstractMessageListenerContainer extends ObservableListenerContainer implements org.springframework.context.ApplicationEventPublisherAware;\n@FunctionalInterface public static interface AbstractMessageListenerContainer.JavaLangErrorHandler; // A handler for Error on the container thread(s).\npublic static class AbstractMessageListenerContainer.SharedConnectionNotInitializedException extends RuntimeException; // Exception that indicates that the initial setup of this container's shared Rabbit Connection failed.\nprotected static final class AbstractMessageListenerContainer.WrappedTransactionException extends RuntimeException; // A runtime exception to wrap a Throwable.\npublic abstract class AbstractRabbitListenerEndpoint extends Object implements RabbitListenerEndpoint, org.springframework.beans.factory.BeanFactoryAware; // Base model for a Rabbit listener endpoint.\npublic class AsyncConsumerRestartedEvent extends org.springframework.amqp.event.AmqpEvent; // An event that is published whenever a consumer is restarted.\npublic class AsyncConsumerStartedEvent extends org.springframework.amqp.event.AmqpEvent; // An event that is published whenever a new consumer is started.\npublic class AsyncConsumerStoppedEvent extends org.springframework.amqp.event.AmqpEvent; // An event that is published whenever a consumer is stopped (and not restarted).\npublic class BlockingQueueConsumer extends Object; // Specialized consumer encapsulating knowledge of the broker connections and having its own lifecycle (start and stop).\npublic class ConditionalRejectingErrorHandler extends Object implements org.springframework.util.ErrorHandler; // ErrorHandler that conditionally wraps the Exception in an AmqpRejectAndDontRequeueException if the configured rejection strategy determines that the message is fatal and should not be requeued.\npublic static class ConditionalRejectingErrorHandler.DefaultExceptionStrategy extends Object implements FatalExceptionStrategy; // Default implementation of FatalExceptionStrategy.\npublic class ConsumeOkEvent extends org.springframework.amqp.event.AmqpEvent; // An AmqpEvent emitted by the listener container when consumer is subscribed to the queue.\npublic class DirectMessageListenerContainer extends AbstractMessageListenerContainer; // The SimpleMessageListenerContainer is not so simple.\n", "des": "Provides classes for message listener containers."}
{"index": 2592, "repo": "spring-rabbit-3.0.6", "code": "package adapter;\n\npublic abstract class AbstractAdaptableMessageListener extends Object implements ChannelAwareMessageListener; // An abstract MessageListener adapter providing the necessary infrastructure to extract the payload of a Message.\npublic static final class AbstractAdaptableMessageListener.ReplyExpressionRoot extends Object; // Root object for reply expression evaluation.\npublic class AmqpMessageHandlerMethodFactory extends org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory; // Extension of the DefaultMessageHandlerMethodFactory for Spring AMQP requirements.\npublic class BatchMessagingMessageListenerAdapter extends MessagingMessageListenerAdapter implements ChannelAwareBatchMessageListener; // A listener adapter for batch listeners.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class DelegatingInvocableHandler extends Object; // Delegates to an InvocableHandlerMethod based on the message payload type.\npublic class HandlerAdapter extends Object; // A wrapper for either an InvocableHandlerMethod or DelegatingInvocableHandler.\npublic final class InvocationResult extends Object; // The result of a listener method invocation.\npublic class KotlinAwareInvocableHandlerMethod extends org.springframework.messaging.handler.invocation.InvocableHandlerMethod; // An InvocableHandlerMethod extension for supporting Kotlin suspend function.\npublic class MessageListenerAdapter extends AbstractAdaptableMessageListener; // Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion.\npublic class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener; // A MessageListener adapter that invokes a configurable HandlerAdapter.\npublic class ReplyFailureException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the reply of a message failed to be sent.\n@FunctionalInterface public interface ReplyingMessageListener<T,R>; // A Message Listener that returns a reply - intended for lambda use in a MessageListenerAdapter.\npublic interface ReplyPostProcessor extends BiFunction<org.springframework.amqp.core.Message,org.springframework.amqp.core.Message,org.springframework.amqp.core.Message>; // A post processor for replies.\n", "des": "Provides classes for adapting listeners."}
{"index": 2593, "repo": "spring-rabbit-3.0.6", "code": "package api;\n\npublic interface ChannelAwareBatchMessageListener extends ChannelAwareMessageListener; // Used to receive a batch of messages if the container supports it.\n@FunctionalInterface public interface ChannelAwareMessageListener extends org.springframework.amqp.core.MessageListener; // A message listener that is aware of the Channel on which the message was received.\n@FunctionalInterface public interface RabbitListenerErrorHandler; // An error handler which is called when a {code @RabbitListener} method throws an exception.\n", "des": "Provides Additional APIs for listeners."}
{"index": 2594, "repo": "spring-rabbit-3.0.6", "code": "package exception;\n\npublic class FatalListenerExecutionException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the execution of a listener method failed with an irrecoverable problem.\npublic class FatalListenerStartupException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the execution of a listener method failed on startup.\npublic class MessageRejectedWhileStoppingException extends org.springframework.amqp.AmqpException; // Exception class that indicates a rejected message on shutdown.\n", "des": "Provides classes for listener exceptions."}
{"index": 2595, "repo": "spring-rabbit-3.0.6", "code": "package support;\n\npublic final class ContainerUtils extends Object; // Utility methods for listener containers.\n", "des": "Provides support classes for listeners."}
{"index": 2596, "repo": "spring-rabbit-3.0.6", "code": "package log4j2;\n\n@Plugin(name=\"RabbitMQ\", category=\"Core\", elementType=\"appender\", printObject=true) public class AmqpAppender extends org.apache.logging.log4j.core.appender.AbstractAppender; // A Log4j 2 appender that publishes logging events to an AMQP Exchange.\nprotected static class AmqpAppender.AmqpManager extends org.apache.logging.log4j.core.appender.AbstractManager; // Manager class for the appender.\nprotected static class AmqpAppender.Builder extends Object implements org.apache.logging.log4j.core.util.Builder<AmqpAppender>;\nprotected static class AmqpAppender.Event extends Object; // Helper class to encapsulate a LoggingEvent, its MDC properties, and the number of retries.\n", "des": "Provides classes supporting Log4j 2 appenders."}
{"index": 2597, "repo": "spring-rabbit-3.0.6", "code": "package logback;\n\npublic class AmqpAppender extends ch.qos.logback.core.AppenderBase<ch.qos.logback.classic.spi.ILoggingEvent>; // A Logback appender that publishes logging events to an AMQP Exchange.\nprotected static class AmqpAppender.Event extends Object; // Small helper class to encapsulate a LoggingEvent, its MDC properties, and the number of retries.\n", "des": "Provides classes supporting Logback appenders."}
{"index": 2598, "repo": "spring-rabbit-3.0.6", "code": "package retry;\n\npublic class ImmediateRequeueMessageRecoverer extends Object implements MessageRecoverer; // The MessageRecoverer implementation to throw an ImmediateRequeueAmqpException for subsequent requeuing in the listener container.\n@FunctionalInterface public interface MessageBatchRecoverer extends MessageRecoverer; // A retry recoverer for use with a batch listener.\n@FunctionalInterface public interface MessageKeyGenerator;\n@FunctionalInterface public interface MessageRecoverer; // Implementations of this interface can handle failed messages after retries are exhausted.\n@FunctionalInterface public interface NewMessageIdentifier; // An optimization for stateful retry of message processing.\npublic class RejectAndDontRequeueRecoverer extends Object implements MessageRecoverer; // MessageRecover that causes the listener container to reject the message without requeuing.\npublic class RepublishMessageRecoverer extends Object implements MessageRecoverer; // MessageRecoverer implementation that republishes recovered messages to a specified exchange with the exception stack trace stored in the message header x-exception.\npublic class RepublishMessageRecovererWithConfirms extends RepublishMessageRecoverer; // A RepublishMessageRecoverer supporting publisher confirms and returns.\n", "des": "Provides classes supporting retries."}
{"index": 2599, "repo": "spring-rabbit-3.0.6", "code": "package support;\n\npackage support.micrometer; // Provides classes for Micrometer support.\npublic class ActiveObjectCounter<T> extends Object; // A mechanism to keep track of active objects.\npublic class ArgumentBuilder extends org.springframework.amqp.utils.MapBuilder<ArgumentBuilder,String,Object>; // A builder for argument maps.\npublic class ConsumerCancelledException extends RuntimeException; // Thrown when the broker cancels the consumer and the message queue is drained.\npublic class DefaultMessagePropertiesConverter extends Object implements MessagePropertiesConverter; // Default implementation of the MessagePropertiesConverter strategy.\npublic class Delivery extends Object; // Encapsulates an arbitrary message - simple \"bean\" holder structure.\npublic class ExpressionFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<org.springframework.expression.Expression>; // FactoryBean for creating Expression instances.\n@FunctionalInterface public interface ListenerContainerAware; // MessageListeners that also implement this interface can have configuration verified during initialization.\npublic class ListenerExecutionFailedException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the execution of a listener method failed.\npublic interface MessagePropertiesConverter; // Strategy interface for converting between Spring AMQP MessageProperties and RabbitMQ BasicProperties.\npublic final class RabbitExceptionTranslator extends Object; // Translates Rabbit Exceptions to the AmqpException class hierarchy.\npublic class ValueExpression<V> extends Object implements org.springframework.expression.Expression; // A very simple hardcoded implementation of the Expression interface that represents an immutable value.\n", "des": "Provides support classes for Spring Rabbit."}
{"index": 2600, "repo": "spring-rabbit-3.0.6", "code": "package micrometer;\n\npublic enum RabbitListenerObservation extends Enum<RabbitListenerObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring Rabbit Observation for listeners.\npublic static class RabbitListenerObservation.DefaultRabbitListenerObservationConvention extends Object implements RabbitListenerObservationConvention; // Default RabbitListenerObservationConvention for Rabbit listener key values.\npublic static enum RabbitListenerObservation.ListenerLowCardinalityTags extends Enum<RabbitListenerObservation.ListenerLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface RabbitListenerObservationConvention extends io.micrometer.observation.ObservationConvention<RabbitMessageReceiverContext>; // ObservationConvention for Rabbit listener key values.\npublic class RabbitMessageReceiverContext extends io.micrometer.observation.transport.ReceiverContext<org.springframework.amqp.core.Message>; // ReceiverContext for Messages.\npublic class RabbitMessageSenderContext extends io.micrometer.observation.transport.SenderContext<org.springframework.amqp.core.Message>; // SenderContext for Messages.\npublic enum RabbitTemplateObservation extends Enum<RabbitTemplateObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring RabbitMQ Observation for RabbitTemplate.\npublic static class RabbitTemplateObservation.DefaultRabbitTemplateObservationConvention extends Object implements RabbitTemplateObservationConvention; // Default RabbitTemplateObservationConvention for Rabbit template key values.\npublic static enum RabbitTemplateObservation.TemplateLowCardinalityTags extends Enum<RabbitTemplateObservation.TemplateLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface RabbitTemplateObservationConvention extends io.micrometer.observation.ObservationConvention<RabbitMessageSenderContext>; // ObservationConvention for Rabbit template key values.\n", "des": "Provides classes for Micrometer support."}
{"index": 2601, "repo": "spring-rabbit-3.0.6", "code": "package transaction;\n\npublic class RabbitTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single Rabbit ConnectionFactory.\n", "des": "Provides classes supporting transactions in Spring Rabbit."}
{"index": 2602, "repo": "wicket-util-10.0.0-M1", "code": "package collections;\n\npublic class ClassMetaCache<T> extends Object; // This class wraps a WeakHashMap that holds one ConcurrentHashMap per ClassLoader.\npublic class IntHashMap<V> extends Object implements Cloneable, Serializable; // This is an integer hashmap that has the exact same features and interface as a normal Map except that the key is directly an integer.\npublic static class IntHashMap.Entry<V> extends Object;\npublic class MiniMap<K,V> extends Object implements Map<K,V>, Serializable; // A fixed size map implementation.\npublic class MostRecentlyUsedMap<K,V> extends LinkedHashMap<K,V>; // Holds a map of most recently used items of a given maximum size.\npublic class MultiMap<K,V> extends HashMap<K,List<V>>; // A simple multimap\npublic abstract class ReadOnlyIterator<T> extends Object implements Iterator<T>; // Base class for read-only iterators.\npublic class ReverseListIterator<E> extends Object implements Iterator<E>, Iterable<E>; // An iterator over List which goes from the end to the start\npublic class UrlExternalFormComparator extends Object implements Comparator<URL>, Serializable; // A comparator of URL instances.\n", "des": "Useful collections."}
{"index": 2603, "repo": "wicket-util-10.0.0-M1", "code": "package convert;\n\npackage convert.converter; // Default converter implementations.\npublic class ConversionException extends RuntimeException; // Thrown for conversion exceptions.\npublic interface IConverter<C> extends IClusterable; // Converts input to output and vice versa.\npublic class MaskConverter<C> extends Object implements IConverter<C>; // A converter that takes a mask into account.\n", "des": "Conversion support."}
{"index": 2604, "repo": "wicket-util-10.0.0-M1", "code": "package converter;\n\npublic abstract class AbstractConverter<C> extends Object implements IConverter<C>; // Base class for locale aware type converters.\npublic abstract class AbstractDateConverter<D extends Date> extends AbstractConverter<D>; // A base class for all Date related converters\npublic abstract class AbstractDecimalConverter<N extends Number> extends AbstractNumberConverter<N>; // Base class for all converters of decimal numbers.\npublic abstract class AbstractIntegerConverter<I extends Number> extends AbstractNumberConverter<I>; // Base class for all converters of integer numbers.\npublic abstract class AbstractJavaTimeConverter<T extends Temporal> extends AbstractConverter<T>; // A base class for all java.time.** related converters\npublic abstract class AbstractNumberConverter<N extends Number> extends AbstractConverter<N>; // Base class for all number converters.\npublic class BigDecimalConverter extends AbstractDecimalConverter<BigDecimal>; // BigDecimal converter\npublic class BigIntegerConverter extends AbstractIntegerConverter<BigInteger>; // BigInteger converter see IConverter\npublic class BooleanConverter extends AbstractConverter<Boolean>; // Converts from Object to Boolean.\npublic class ByteConverter extends AbstractIntegerConverter<Byte>; // Converts from Object to Byte.\npublic class CalendarConverter extends Object implements IConverter<Calendar>; // Converts to Calendar.\npublic class CharacterConverter extends AbstractConverter<Character>; // Converts from Object to Character.\npublic class DateConverter extends AbstractDateConverter<Date>; // Converts from Object to Date.\npublic class DoubleConverter extends AbstractDecimalConverter<Double>; // Converts from Object to Double.\npublic class FloatConverter extends AbstractDecimalConverter<Float>; // Converts from Object to Float.\npublic class IntegerConverter extends AbstractIntegerConverter<Integer>; // Converts from Object to Integer.\npublic class LocalDateConverter extends AbstractJavaTimeConverter<LocalDate>; // Converts from Object to LocalDate.\npublic class LocalDateTimeConverter extends AbstractJavaTimeConverter<LocalDateTime>; // Converts from Object to LocalDateTime.\npublic class LocalTimeConverter extends AbstractJavaTimeConverter<LocalTime>; // Converts from Object to LocalTime.\npublic class LongConverter extends AbstractIntegerConverter<Long>; // Converts from Object to Long.\npublic class ShortConverter extends AbstractIntegerConverter<Short>; // Converts from Object to Short.\npublic class SqlDateConverter extends AbstractDateConverter<Date>; // Converts to Date.\n", "des": "Default converter implementations."}
{"index": 2605, "repo": "wicket-util-10.0.0-M1", "code": "package crypt;\n\npublic abstract class AbstractCrypt extends Object implements ICrypt; // Abstract base class for JCE based ICrypt implementations.\npublic class CharEncoding extends Object; // Character encoding names required of every implementation of the Java platform.\npublic class CipherUtils extends Object; // Utility class meant to help building Cipher.\npublic class CryptFactoryCachingDecorator extends Object implements ICryptFactory; // ICryptFactory decorator that caches the call to ICryptFactory.newCrypt()\npublic interface ICrypt; // Encryption and decryption implementations are accessed through this interface.\npublic interface ICryptFactory; // Interface used to generate crypt objects\npublic class NoCrypt extends Object implements ICrypt; // Due to legal reasons in some countries the JRE is shipped without a security provider.\npublic class NoCryptFactory extends Object implements ICryptFactory; // Crypt factory implementation for noop NoCrypt class\npublic class StringUtils extends Object; // Converts String to and from bytes using the encodings required by the Java specification.\npublic class SunJceCrypt extends AbstractCrypt; // Provide some simple means to encrypt and decrypt strings such as passwords.\npublic class TrivialCrypt extends AbstractCrypt; // THIS CLASS IS FOR TESTING PURPOSES ONLY.\n", "des": "Encryption support for forms."}
{"index": 2606, "repo": "wicket-util-10.0.0-M1", "code": "package diff;\n\npackage diff.myers; // The diff.myers package implements Gene Myers' differencing algorithm.\npublic class AddDelta extends Delta; // Holds an add-delta between to revisions of a text.\npublic class ChangeDelta extends Delta; // Holds an change-delta between to revisions of a text.\npublic class Chunk extends ToString; // Holds a information about a part of the text involved in a differencing or patching operation.\npublic class DeleteDelta extends Delta; // Holds a delete-delta between to revisions of a text.\npublic abstract class Delta extends ToString; // Holds a \"delta\" difference between to revisions of a text.\npublic class Diff extends ToString; // Implements a differencing engine that works on arrays of Object.\npublic interface DiffAlgorithm; // A simple interface for implementations of differencing algorithms.\npublic class DifferentiationFailedException extends DiffException; // Thrown whenever the differencing engine cannot produce the differences between two revisions of ta text.\npublic class DiffException extends Exception; // Base class for all exceptions emanating from this package.\npublic class PatchFailedException extends DiffException; // Thrown whenever a delta cannot be applied as a patch to a given text.\npublic class Revision extends ToString; // A Revision holds the series of deltas that describe the differences between two sequences.\npublic interface RevisionVisitor; // Definition of a Visitor interface for Revisions See \"Design Patterns\" by the Gang of Four\npublic class ToString extends Object; // This class delegates handling of the to a StringBuilder based version.\n", "des": "The diff package implements the differencing engine that JRCS uses."}
{"index": 2607, "repo": "wicket-util-10.0.0-M1", "code": "package myers;\n\npublic final class DiffNode extends PathNode; // A diffnode in a diffpath.\npublic class MyersDiff extends Object implements DiffAlgorithm; // A clean-room implementation of Eugene Myers differencing algorithm.\npublic abstract class PathNode extends Object; // A node in a diffpath.\npublic final class Snake extends PathNode; // Represents a snake in a diffpath.\n", "des": "The diff.myers package implements Gene Myers' differencing algorithm."}
{"index": 2608, "repo": "wicket-util-10.0.0-M1", "code": "package file;\n\npublic class File extends File implements IModifiable; // Simple extension of File that adds an implementation of IModifiable for files.\npublic class FileCleaner extends Object implements IFileCleaner; // Default implementation of IFileCleaner that uses Apache commons-io FileCleaningTracker to track and clean the temporary created files.\npublic class FileCleanerTrackerAdapter extends org.apache.commons.io.FileCleaningTracker; // Adapts IFileCleaner to FileCleaningTracker\npublic class Files extends Object; // File utility methods.\npublic class Folder extends File; // This folder subclass provides some type safety and extensibility for \"files\" that hold other files.\npublic static interface Folder.FileFilter; // Filter for files\npublic static interface Folder.FolderFilter; // Filter for folders\npublic class FolderDeleteStrategy extends org.apache.commons.io.FileDeleteStrategy; // A FileDeleteStrategy that can delete folders.\npublic interface IFileCleaner; // Keeps track of files awaiting deletion, and deletes them when an associated marker object is reclaimed by the garbage collector.\n@FunctionalInterface public interface IResourceFinder; // Knows how to find resources.\npublic class Path extends Object implements IResourceFinder; // An IResourceFinder that looks for its resources in a filesystem path.\npublic class WebXmlFile extends Object; // A utility class providing helper methods in dealing with web.xml\n", "des": "File utilities."}
{"index": 2609, "repo": "wicket-util-10.0.0-M1", "code": "package io;\n\npublic class BOMInputStream extends ProxyInputStream; // This class is used to wrap a stream that includes an encoded ByteOrderMark as its first bytes.\npublic class ByteArrayOutputStream extends OutputStream; // This class implements an output stream in which the data is written into a byte array.\npublic final class ByteCountingOutputStream extends OutputStream; // Output stream that counts bytes written to it (but discards them).\npublic class ByteOrderMark extends Object implements Serializable; // Byte Order Mark (BOM) representation - see BOMInputStream.\npublic class Connections extends Object; // URLConnection related utilities\npublic class DeferredFileOutputStream extends ThresholdingOutputStream; // An output stream which will retain data in memory until a specified threshold is reached, and only then commit it to disk.\npublic static interface DeferredFileOutputStream.FileFactory; // The file factory for this deferred file output stream.\npublic final class FullyBufferedReader extends Object; // This is not a reader like e.g.\npublic interface IClusterable extends Serializable; // Wicket version of Serializable.\npublic final class IOUtils extends Object; // General IO Stream manipulation.\npublic abstract class ProxyInputStream extends FilterInputStream; // A Proxy stream which acts as expected, that is it passes the method calls on to the proxied stream and doesn't change which methods are being called.\npublic final class Streams extends Object; // Utilities methods for working with input and output streams.\npublic class StringBufferWriter extends Writer;\npublic abstract class ThresholdingOutputStream extends OutputStream; // An output stream which triggers an event when a specified number of bytes of data have been written to it.\npublic final class XmlReader extends Reader; // This is a simple XmlReader.\n", "des": "Input/Output utilities."}
{"index": 2610, "repo": "wicket-util-10.0.0-M1", "code": "package listener;\n\npublic final class ChangeListenerSet<T> extends ListenerCollection<IChangeListener<T>>; // Holds a set of IChangeListeners.\n@FunctionalInterface public interface IChangeListener<T>; // Generic \"something changed\" listener interface.\npublic abstract class ListenerCollection<T> extends Object implements Serializable, Iterable<T>; // Represents a collection of listeners.\nprotected static interface ListenerCollection.INotifier<T>; // Used to notify a listener.\n", "des": "Listener/ Observer utilities."}
{"index": 2611, "repo": "wicket-util-10.0.0-M1", "code": "package metapattern;\n\npackage metapattern.parsers; // Regular Expressions meta pattern parsers.\npublic final class BooleanGroup extends Group; // A Group that captures case-sensitive boolean values \"true\" or \"false\".\npublic final class FloatingPointGroup extends Group; // A Group that captures floating point values (doubles and floats).\npublic class Group extends MetaPattern; // A Group is a piece of a regular expression (referenced by some Java field or local variable) that forms a \"capturing group\" within the larger regular expression.\npublic final class GroupAlreadyBoundException extends RuntimeException; // Thrown if an attempt is made to re-bind a Group to a second capturing group or MetaPattern.\npublic final class GroupNotBoundException extends RuntimeException; // Thrown if a group is not bound.\npublic final class IntegerGroup extends Group; // A Group that captures integer values (positive and negative whole numbers, not Java ints).\npublic class MetaPattern extends Object implements IClusterable; // Useful class for constructing readable and reusable regular expressions.\npublic final class OptionalMetaPattern extends MetaPattern; // Makes any MetaPattern optional by enclosing the pattern in an optionality expression.\n", "des": "Regular Expressions meta pattern support."}
{"index": 2612, "repo": "wicket-util-10.0.0-M1", "code": "package parsers;\n\npublic final class CommaSeparatedVariableParser extends ListParser; // Parses out strings separated by commas.\npublic final class IntegerVariableAssignmentParser extends MetaPatternParser; // Parses integer variable assignments, such as \"x = 9\" or \"x=9\".\npublic class ListParser extends MetaPatternParser; // Parses an arbitrary list format with a pattern for list entries and a pattern for list separators.\npublic abstract class MetaPatternParser extends Object; // Base class for various MetaPattern based parsers.\npublic final class TagNameParser extends MetaPatternParser; // Parses XML tag names and attribute names which may include optional namespaces like \"namespace:name\" or \"name\".\npublic final class VariableAssignmentParser extends MetaPatternParser; // Parses key value assignment statements like \"foo=bar\" but also supporting namespaces like \"wicket:foo=bar\".\npublic final class WordParser extends MetaPatternParser; // Matches a 'word' surrounded by whitespace.\n", "des": "Regular Expressions meta pattern parsers."}
{"index": 2613, "repo": "wicket-util-10.0.0-M1", "code": "package resource;\n\npublic abstract class AbstractResourceStream extends Object implements IResourceStream;\npublic abstract class AbstractResourceStreamWriter extends Object implements IResourceStreamWriter; // Base implementation of an IResourceStreamWriter so that you only have to override the IResourceStreamWriter.write(java.io.OutputStream).\npublic abstract class AbstractStringResourceStream extends AbstractResourceStream implements IStringResourceStream; // Base class for string resources.\npublic class FileResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream; // A FileResourceStream is an IResource implementation for files.\npublic class FileSystemResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream; // A FileSystemResourceStream is an IResourceStream implementation for Java NIO paths.\npublic interface IFixedLocationResourceStream; // Non-dynamic resource streams point to fixed locations, like a file or a url.\npublic interface IResourceStream extends IModifiable, IClusterable, Closeable; // Interface to a streamed resource.\npublic interface IResourceStreamWriter extends IResourceStream; // Special IResourceStream implementation that a Resource can return when it directly wants to write to an output stream instead of return the IResourceStream.getInputStream().\npublic interface IStringResourceStream extends IResourceStream; // A resource that can be converted to a String representation, possibly using an explicit Charset.\npublic final class ResourceStreamNotFoundException extends Exception; // Thrown if a required resource cannot be found.\npublic class ResourceStreamWrapper extends Object implements IResourceStream; // A IResourceStream that wraps another resource stream\npublic class ResourceUtils extends Object;\npublic static class ResourceUtils.PathLocale extends Object;\npublic class StringBufferResourceStream extends AbstractStringResourceStream; // A string resource that can be appended to.\npublic final class StringResourceStream extends AbstractStringResourceStream; // A StringResourceStream is an IResource implementation for strings.\npublic class XSLTResourceStream extends AbstractResourceStream; // IResourceStream that applies XSLT on an input IResourceStream.\npublic class ZipResourceStream extends AbstractResourceStream; // An IResourceStream that ZIPs a directory's contents on the fly\n", "des": "Base support for resources."}
{"index": 2614, "repo": "wicket-util-10.0.0-M1", "code": "package string;\n\npackage string.interpolator; // Support for String-variable interpolation.\npublic abstract class AbstractStringList extends Object implements IStringSequence, Serializable; // An abstract base class for string list implementations.\npublic final class AppendingStringBuffer extends Object implements Serializable, CharSequence; // This is a copy or combination of java.lang.StringBuffer and java.lang.String It has a special method getValue() which returns the internal char array.\npublic interface IStringIterator; // Typesafe string iterator interface\npublic interface IStringSequence; // Typesafe interface to an ordered sequence of strings.\npublic class PrependingStringBuffer extends Object; // This is a prepending stringbuffer optimized for constantly prepending strings to the front of the buffer.\npublic final class StringList extends AbstractStringList; // A typesafe, mutable list of strings supporting a variety of convenient operations as well as expected operations from List such as add(), size(), remove(), iterator(), get(int index) and toArray().\npublic final class Strings extends Object; // A variety of static String utility methods.\npublic class StringValue extends Object implements IClusterable; // Holds an immutable String value and optionally a Locale, with methods to convert to various types.\npublic final class StringValueConversionException extends ConversionException; // Thrown when a string value cannot be converted to some type.\n", "des": "String utilities."}
{"index": 2615, "repo": "wicket-util-10.0.0-M1", "code": "package interpolator;\n\npublic class MapVariableInterpolator extends VariableInterpolator; // Interpolates variables into a String from a Map.\npublic final class SystemVariableInterpolator extends MapVariableInterpolator; // Convenient way of interpolating system properties.\npublic abstract class VariableInterpolator extends Object implements IClusterable; // Base class for variable interpolators.\n", "des": "Support for String-variable interpolation."}
{"index": 2616, "repo": "wicket-util-10.0.0-M1", "code": "package thread;\n\n@FunctionalInterface public interface ICode; // Interface to an arbitrary piece of code that runs and can do logging.\npublic final class Lock extends Object; // Type-safe monitor class to be used in place of Object for readability.\npublic final class Task extends Object; // Runs a block of code periodically.\n", "des": "Threading utilities."}
{"index": 2617, "repo": "wicket-util-10.0.0-M1", "code": "package time;\n\npublic class Durations extends Object; // Utility class for Duration\npublic class Instants extends Object; // Utility class for Instant\n", "des": "Utilities for working with Time(s)."}
{"index": 2618, "repo": "wicket-util-10.0.0-M1", "code": "package value;\n\npublic final class AttributeMap extends ValueMap; // Map of values, extending ValueMap with methods for generating (HTML) markup attributes.\npublic class CopyOnWriteValueMap extends Object implements IValueMap, Serializable; // An implementation of IValueMap that makes a copy when a caller tries to change an immutable Map.\npublic class IntValue extends Object implements Comparable<IntValue>, Serializable; // A base class based on the Java int primitive for value classes that want to implement standard operations on that value without the pain of aggregating an Integer object.\npublic interface IValueMap extends Map<String,Object>; // A Map interface that holds values, parses Strings, and exposes a variety of convenience methods.\npublic class LongValue extends Object implements Comparable<LongValue>, Serializable; // A base class based on the Java long primitive for value classes that want to implement standard operations on that value without the pain of aggregating a Long object.\npublic class ValueMap extends LinkedHashMap<String,Object> implements IValueMap; // A IValueMap implementation that holds values, parses Strings, and exposes a variety of convenience methods.\n", "des": "This package provides casting utilities."}
{"index": 2619, "repo": "wicket-util-10.0.0-M1", "code": "package watch;\n\npublic interface IModifiable; // Interface to get the last time something was modified.\npublic interface IModificationWatcher; // Monitors one or more IModifiable objects, calling a IChangeListener when a given object's modification time changes.\npublic class ModificationWatcher extends Object implements IModificationWatcher; // Monitors one or more IModifiable objects, calling a IChangeListener when a given object's modification time changes.\nprotected static final class ModificationWatcher.Entry extends Object; // Container class for holding modifiable entries to watch.\n", "des": "This package provides modification watchers."}
{"index": 2620, "repo": "spring-integration-jms-6.1.2", "code": "package jms;\n\npackage jms.config; // Provides classes for configuration - parsers, namespace handlers, factory beans.\npackage jms.dsl; // Provides JMS Component support for the Java DSL.\npublic abstract class AbstractJmsChannel extends org.springframework.integration.channel.AbstractMessageChannel;\npublic class ChannelPublishingJmsMessageListener extends Object implements org.springframework.jms.listener.SessionAwareMessageListener<jakarta.jms.Message>, org.springframework.beans.factory.InitializingBean, org.springframework.integration.support.management.TrackableComponent, org.springframework.beans.factory.BeanFactoryAware; // JMS MessageListener that converts a JMS Message into a Spring Integration Message and sends that Message to a channel.\npublic class DefaultJmsHeaderMapper extends JmsHeaderMapper; // Default implementation of JmsHeaderMapper.\npublic class DynamicJmsTemplate extends org.springframework.jms.core.JmsTemplate;\npublic class JmsDestinationPollingSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A source for receiving JMS Messages with a polling listener.\npublic abstract class JmsHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<jakarta.jms.Message>; // Strategy interface for mapping integration Message headers to an outbound JMS Message (e.g.\npublic class JmsInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.integration.context.OrderlyShutdownCapable; // A wrapper around the JmsMessageDrivenEndpoint implementing MessagingGatewaySupport.\npublic class JmsMessageDrivenEndpoint extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.integration.context.OrderlyShutdownCapable; // A message-driven endpoint that receive JMS messages, converts them into Spring Integration Messages, and then sends the result to a channel.\npublic class JmsOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle, jakarta.jms.MessageListener; // An outbound Messaging Gateway for request/reply JMS.\npublic static class JmsOutboundGateway.ReplyContainerProperties extends Object;\n", "des": "Base package for JMS Support."}
{"index": 2621, "repo": "spring-integration-jms-6.1.2", "code": "package config;\n\npublic class JmsChannelFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractJmsChannel> implements org.springframework.context.SmartLifecycle, org.springframework.beans.factory.BeanNameAware;\npublic class JmsChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration JMS namespace.\npublic class JmsHeaderEnricherParser extends org.springframework.integration.config.xml.HeaderEnricherParserSupport; // Header enricher for JMS specific values.\npublic class JmsInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <inbound-channel-adapter/> element of the 'jms' namespace.\npublic class JmsMessageDrivenEndpointParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <message-driven-channel-adapter> element and the <inbound-gateway> element of the 'jms' namespace.\npublic class JmsNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's jms namespace.\npublic class JmsOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> element of the jms namespace.\npublic class JmsOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <outbound-gateway> element of the integration 'jms' namespace.\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 2622, "repo": "spring-integration-jms-6.1.2", "code": "package dsl;\n\npublic final class Jms extends Object; // Factory class for JMS components.\npublic class JmsDefaultListenerContainerSpec extends JmsListenerContainerSpec<JmsDefaultListenerContainerSpec,org.springframework.jms.listener.DefaultMessageListenerContainer>; // A DefaultMessageListenerContainer specific JmsListenerContainerSpec extension.\npublic abstract class JmsDestinationAccessorSpec<S extends JmsDestinationAccessorSpec<S,A>,A extends org.springframework.jms.support.destination.JmsDestinationAccessor> extends org.springframework.integration.dsl.IntegrationComponentSpec<S,A>; // A base IntegrationComponentSpec for JmsDestinationAccessors.\npublic class JmsInboundChannelAdapterSpec<S extends JmsInboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageSourceSpec<S,JmsDestinationPollingSource>; // A MessageSourceSpec for a JmsDestinationPollingSource.\npublic static class JmsInboundChannelAdapterSpec.JmsInboundChannelSpecTemplateAware extends JmsInboundChannelAdapterSpec<JmsInboundChannelAdapterSpec.JmsInboundChannelSpecTemplateAware> implements org.springframework.integration.dsl.ComponentsRegistration; // A JmsTemplate-based JmsInboundChannelAdapterSpec extension.\npublic class JmsInboundGatewaySpec<S extends JmsInboundGatewaySpec<S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,JmsInboundGateway>; // A MessagingGatewaySpec for a JmsInboundGateway.\npublic static class JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer> extends JmsInboundGatewaySpec<JmsInboundGatewaySpec.JmsInboundGatewayListenerContainerSpec<S,C>>; // An AbstractMessageListenerContainer-based JmsInboundGatewaySpec extension.\npublic class JmsListenerContainerSpec<S extends JmsListenerContainerSpec<S,C>,C extends org.springframework.jms.listener.AbstractMessageListenerContainer> extends JmsDestinationAccessorSpec<S,C>; // A JmsDestinationAccessorSpec for JmsListenerContainerSpecs.\npublic class JmsMessageChannelSpec<S extends JmsMessageChannelSpec<S,T>,T extends AbstractJmsChannel> extends JmsPollableMessageChannelSpec<S,T>; // A JmsMessageChannelSpec for subscribable AbstractJmsChannels.\n", "des": "Provides JMS Component support for the Java DSL."}
{"index": 2623, "repo": "wicket-request-10.0.0-M1", "code": "package request;\n\npublic class HttpHeaderCollection extends Object; // A multivalue map of headers names and header values suitable for processing http request and response headers.\n@FunctionalInterface public interface IExceptionMapper; // Maps exception to IRequestHandler.\npublic interface ILogData extends Serializable; // Base interface for log data collected by request handlers.\npublic interface ILoggableRequestHandler extends IRequestHandler; // A loggable request handler is a IRequestHandler that is capable of delivering log data.\npublic interface IRequestCycle;\n@FunctionalInterface public interface IRequestHandler; // A request handler is the base entity that is the subject of a request.\npublic interface IRequestHandlerDelegate extends IRequestHandler; // A IRequestHandler that delegates the actual work to another IRequestHandler.\npublic interface IRequestMapper; // Maps IRequestHandler(s) into Url(s) and Request(s) to IRequestHandler(s).\npublic interface IRequestParameters; // Represents request parameters.\npublic interface IUrlRenderer; // An interface that a Url can implement if it knows how to render itself as full url or relative to a base url\npublic interface IWritableRequestParameters extends IRequestParameters; // Request parameters that can be modified.\npublic abstract class Request extends Object; // Request object.\npublic abstract class RequestHandlerExecutor extends Object; // Manages executions of IRequestHandlers.\npublic static class RequestHandlerExecutor.ReplaceHandlerException extends RuntimeException; // Exception to stop current request handler and execute a new one.\npublic abstract class Response extends Object; // Abstract base class for different implementations of response writing.\npublic class Url extends Object implements Serializable; // Represents the URL to an external resource or internal resource/component.\npublic static final class Url.QueryParameter extends Object implements Serializable; // Represents a single query parameter\npublic static enum Url.StringMode extends Enum<Url.StringMode>; // Modes with which urls can be stringized\npublic class UrlRenderer extends Object; // Takes care of rendering URLs.\npublic class UrlUtils extends Object; // Various url utilities\n", "des": "Package for classes that have generic (protocol independent) support for request cycle processing."}
{"index": 2624, "repo": "shiro-web-2.0.0-alpha-2", "code": "package config;\n\npublic class IniFilterChainResolverFactory extends org.apache.shiro.ini.IniFactorySupport<FilterChainResolver>; // A Factory that creates FilterChainResolver instances based on Ini configuration.\npublic class ShiroFilterConfiguration extends Object; // Configuration for Shiro's root level servlet filter.\n@Deprecated public class WebIniSecurityManagerFactory extends org.apache.shiro.ini.IniSecurityManagerFactory;\n", "des": "Web-specific implementation extensions to the org.apache.shiro.config components."}
{"index": 2625, "repo": "shiro-web-2.0.0-alpha-2", "code": "package env;\n\npublic class DefaultWebEnvironment extends org.apache.shiro.env.DefaultEnvironment implements MutableWebEnvironment; // Default WebEnvironment implementation based on a backing Map instance.\npublic class EnvironmentLoader extends Object; // An EnvironmentLoader is responsible for loading a web application's Shiro WebEnvironment (which includes the web app's WebSecurityManager) into the ServletContext at application startup.\npublic class EnvironmentLoaderListener extends EnvironmentLoader implements javax.servlet.ServletContextListener; // Bootstrap listener to startup and shutdown the web application's Shiro WebEnvironment at ServletContext startup and shutdown respectively.\npublic class IniWebEnvironment extends ResourceBasedWebEnvironment implements org.apache.shiro.lang.util.Initializable, org.apache.shiro.lang.util.Destroyable; // WebEnvironment implementation configured by an Ini instance or Ini resource locations.\npublic interface MutableWebEnvironment extends WebEnvironment; // A WebEnvironment that supports 'write' operations operations.\npublic abstract class ResourceBasedWebEnvironment extends DefaultWebEnvironment implements org.apache.shiro.config.ResourceConfigurable; // Abstract implementation for WebEnvironments that can be initialized via resource paths (config files).\npublic interface WebEnvironment extends org.apache.shiro.env.Environment; // A web-specific Environment instance, used in web applications.\n", "des": "Web-specific Environment implementation and support."}
{"index": 2626, "repo": "shiro-web-2.0.0-alpha-2", "code": "package filter;\n\npackage filter.authc; // Servlet Filter implementations specific to controlling access based on a subject's authentication status, or those that can execute authentications (log-ins) directly.\npackage filter.authz; // Servlet Filter implementations that perform authorization (access control) checks based on the Subject's abilities (for example, role or permission checks).\npackage filter.mgt; // The filter 'mgt' (management) package contains components used in managing Filters that are available for filter chain construction, the filter chains themselves, as well as resolving filter chains based by name.\npublic abstract class AccessControlFilter extends PathMatchingFilter; // Superclass for any filter that controls access to a resource and may redirect the user to the login page if they are not authenticated.\npublic class InvalidRequestFilter extends AccessControlFilter; // A request filter that blocks malicious requests.\npublic interface PathConfigProcessor; // A PathConfigProcessor processes configuration entries on a per path (url) basis.\npublic abstract class PathMatchingFilter extends AdviceFilter implements PathConfigProcessor; // Base class for Filters that will process only specified paths and allow all others to pass through.\n", "des": "Base package supporting all Servlet Filter implementations used to control access to web pages and URL resources."}
{"index": 2627, "repo": "shiro-web-2.0.0-alpha-2", "code": "package authc;\n\npublic class AnonymousFilter extends PathMatchingFilter; // Filter that allows access to a path immediately without performing security checks of any kind.\npublic abstract class AuthenticatingFilter extends AuthenticationFilter; // An AuthenticationFilter that is capable of automatically performing an authentication attempt based on the incoming request.\npublic abstract class AuthenticationFilter extends AccessControlFilter; // Base class for all Filters that require the current user to be authenticated.\npublic class BasicHttpAuthenticationFilter extends AuthenticatingFilter; // Requires the requesting user to be authenticated for the request to continue, and if they're not, requires the user to login via the HTTP Basic protocol-specific challenge.\npublic class BearerHttpAuthenticationFilter extends AuthenticatingFilter; // Requires the requesting user to be authenticated for the request to continue, and if they're not, requires the user to login via the HTTP Bearer protocol-specific challenge.\npublic class FormAuthenticationFilter extends AuthenticatingFilter; // Requires the requesting user to be authenticated for the request to continue, and if they are not, forces the user to login via by redirecting them to the loginUrl you configure.\npublic class LogoutFilter extends AdviceFilter; // Simple Filter that, upon receiving a request, will immediately log-out the currently executing subject and then redirect them to a configured redirectUrl.\npublic class PassThruAuthenticationFilter extends AuthenticationFilter; // An authentication filter that redirects the user to the login page when they are trying to access a protected resource.\npublic class UserFilter extends AccessControlFilter; // Filter that allows access to resources if the accessor is a known user, which is defined as having a known principal.\n", "des": "Servlet Filter implementations specific to controlling access based on a subject's authentication status, or those that can execute authentications (log-ins) directly."}
{"index": 2628, "repo": "shiro-web-2.0.0-alpha-2", "code": "package authz;\n\npublic abstract class AuthorizationFilter extends AccessControlFilter; // Superclass for authorization-related filters.\npublic class HostFilter extends AuthorizationFilter; // A Filter that can allow or deny access based on the host that sent the request.\npublic class HttpMethodPermissionFilter extends PermissionsAuthorizationFilter; // A filter that translates an HTTP Request's Method (e.g.\npublic final class IpAddressMatcher extends Object; // Matches a request based on IP Address or subnet mask matching against the remote address.\npublic class IpFilter extends AuthorizationFilter; // A Filter that requires the request to be from within a specific set of IP address ranges and / or not from with a specific (denied) set.\npublic interface IpSource; // Represents a source of information for IP restrictions (see IpFilter)\npublic class PermissionsAuthorizationFilter extends AuthorizationFilter; // Filter that allows access if the current user has the permissions specified by the mapped value, or denies access if the user does not have all of the permissions specified.\npublic class PortFilter extends AuthorizationFilter; // A Filter that requires the request to be on a specific port, and if not, redirects to the same URL on that port.\npublic class RolesAuthorizationFilter extends AuthorizationFilter; // Filter that allows access if the current user has the roles specified by the mapped value, or denies access if the user does not have all of the roles specified.\npublic class SslFilter extends PortFilter; // Filter which requires a request to be over SSL.\n", "des": "Servlet Filter implementations that perform authorization (access control) checks based on the Subject's abilities (for example, role or permission checks)."}
{"index": 2629, "repo": "shiro-web-2.0.0-alpha-2", "code": "package mgt;\n\npublic enum DefaultFilter extends Enum<DefaultFilter>; // Enum representing all of the default Shiro Filter instances available to web applications.\npublic class DefaultFilterChainManager extends Object implements FilterChainManager; // Default FilterChainManager implementation maintaining a map of Filter instances (key: filter name, value: Filter) as well as a map of NamedFilterLists created from these Filters (key: filter chain name, value: NamedFilterList).\npublic interface FilterChainManager; // A FilterChainManager manages the creation and modification of Filter chains from an available pool of Filter instances.\npublic interface FilterChainResolver; // A FilterChainResolver can resolve an appropriate FilterChain to execute during a ServletRequest.\npublic interface NamedFilterList extends List<javax.servlet.Filter>; // A NamedFilterList is a List of Filter instances that is uniquely identified by a name.\npublic class PathMatchingFilterChainResolver extends Object implements FilterChainResolver; // A FilterChainResolver that resolves FilterChains based on url path matching, as determined by a configurable PathMatcher.\npublic class SimpleNamedFilterList extends Object implements NamedFilterList; // Simple NamedFilterList implementation that is supported by a backing List instance and a simple name property.\n", "des": "The filter 'mgt' (management) package contains components used in managing Filters that are available for filter chain construction, the filter chains themselves, as well as resolving filter chains based by name."}
{"index": 2630, "repo": "shiro-web-2.0.0-alpha-2", "code": "package mgt;\n\npublic class CookieRememberMeManager extends org.apache.shiro.mgt.AbstractRememberMeManager; // Remembers a Subject's identity by saving the Subject's principals to a Cookie for later retrieval.\npublic class DefaultWebSecurityManager extends org.apache.shiro.mgt.DefaultSecurityManager implements WebSecurityManager; // Default WebSecurityManager implementation used in web-based applications or any application that requires HTTP connectivity (SOAP, http remoting, etc.).\npublic class DefaultWebSessionStorageEvaluator extends org.apache.shiro.mgt.DefaultSessionStorageEvaluator; // A web-specific SessionStorageEvaluator that performs the same logic as the parent class DefaultSessionStorageEvaluator but additionally checks for a request-specific flag that may enable or disable session access.\npublic class DefaultWebSubjectFactory extends org.apache.shiro.mgt.DefaultSubjectFactory; // A SubjectFactory implementation that creates WebDelegatingSubject instances.\npublic interface WebSecurityManager extends org.apache.shiro.mgt.SecurityManager; // This interface represents a SecurityManager implementation that can used in web-enabled applications.\n", "des": "Components supporting web-specific SecurityManager implementations."}
{"index": 2631, "repo": "shiro-web-2.0.0-alpha-2", "code": "package servlet;\n\npublic abstract class AbstractFilter extends ServletContextSupport implements javax.servlet.Filter; // Base abstract Filter simplifying Filter initialization and access to init parameters.\npublic abstract class AbstractShiroFilter extends OncePerRequestFilter; // Abstract base class that provides all standard Shiro request filtering behavior and expects subclasses to implement configuration-specific logic (INI, XML, .properties, etc.).\npublic abstract class AdviceFilter extends OncePerRequestFilter; // A Servlet Filter that enables AOP-style \"around\" advice for a ServletRequest via preHandle, postHandle, and afterCompletion hooks.\npublic interface Cookie; // Interface representing HTTP cookie operations, supporting pojo-style getters and setters for all attributes which includes HttpOnly support.\npublic static enum Cookie.SameSiteOptions extends Enum<Cookie.SameSiteOptions>; // The SameSite attribute of the Set-Cookie HTTP response header allows you to declare if your cookie should be restricted to a first-party or same-site context.\n@Deprecated public interface HttpSessionContext;\n@Deprecated public class IniShiroFilter extends AbstractShiroFilter;\npublic abstract class NameableFilter extends AbstractFilter implements org.apache.shiro.lang.util.Nameable; // Allows a filter to be named via JavaBeans-compatible NameableFilter.getName()/NameableFilter.setName(String) methods.\npublic abstract class OncePerRequestFilter extends NameableFilter; // Filter base class that guarantees to be just executed once per request, on any servlet container.\npublic class ProxiedFilterChain extends Object implements javax.servlet.FilterChain; // A proxied filter chain is a FilterChain instance that proxies an original FilterChain as well as a List of other Filters that might need to execute prior to the final wrapped original chain.\npublic class ServletContextSupport extends Object; // Base implementation for any components that need to access the web application's ServletContext.\npublic class ShiroFilter extends AbstractShiroFilter; // Primary Shiro Filter for web applications configuring Shiro via Servlet <listener> in web.xml.\npublic class ShiroHttpServletRequest extends javax.servlet.http.HttpServletRequestWrapper; // A ShiroHttpServletRequest wraps the Servlet container's original ServletRequest instance, but ensures that all HttpServletRequest invocations that require Shiro's support (getRemoteUser, getSession, etc.) can be executed first by Shiro as necessary before allowing the underlying Servlet container instance's method to be invoked.\n", "des": "Shiro-specific implementations of the Servlet API (Servlet Filters, et al.)."}
{"index": 2632, "repo": "shiro-web-2.0.0-alpha-2", "code": "package session;\n\npublic class HttpServletSession extends Object implements org.apache.shiro.session.Session; // Session implementation that is backed entirely by a standard servlet container HttpSession instance.\n", "des": "Components supporting Session management in web-enabled applications."}
{"index": 2633, "repo": "shiro-web-2.0.0-alpha-2", "code": "package subject;\n\npackage subject.support; // Supporting implementations of org.apache.shiro.web.subject package interfaces.\npublic interface WebSubject extends org.apache.shiro.subject.Subject, RequestPairSource; // A WebSubject represents a Subject instance that was acquired as a result of an incoming ServletRequest.\npublic static class WebSubject.Builder extends org.apache.shiro.subject.Subject.Builder; // A WebSubject.Builder performs the same function as a Subject.Builder, but additionally ensures that the Servlet request/response pair that is triggering the Subject instance's creation is retained for use by internal Shiro components as necessary.\npublic interface WebSubjectContext extends org.apache.shiro.subject.SubjectContext, RequestPairSource; // A WebSubjectContext is a SubjectContext that additionally provides for type-safe methods to set and retrieve a ServletRequest and ServletResponse.\n", "des": "Web-specific Subject interfaces to enable Subject use in web environments."}
{"index": 2634, "repo": "shiro-web-2.0.0-alpha-2", "code": "package support;\n\npublic class DefaultWebSubjectContext extends org.apache.shiro.subject.support.DefaultSubjectContext implements WebSubjectContext; // Default WebSubjectContext implementation that provides for additional storage and retrieval of a ServletRequest and ServletResponse.\npublic class WebDelegatingSubject extends org.apache.shiro.subject.support.DelegatingSubject implements WebSubject; // Default WebSubject implementation that additional ensures the ability to retain a servlet request/response pair to be used by internal shiro components as necessary during the request execution.\n", "des": "Supporting implementations of org.apache.shiro.web.subject package interfaces."}
{"index": 2635, "repo": "shiro-web-2.0.0-alpha-2", "code": "package tags;\n\npublic class AuthenticatedTag extends SecureTag; // JSP tag that renders the tag body only if the current user has executed a successful authentication attempt during their current session.\npublic class GuestTag extends SecureTag; // JSP tag that renders the tag body if the current user is not known to the system, either because they haven't logged in yet, or because they have no 'RememberMe' identity.\npublic class HasAnyRolesTag extends RoleTag; // Displays body content if the current user has any of the roles specified.\npublic class HasPermissionTag extends PermissionTag;\npublic class HasRoleTag extends RoleTag;\npublic class LacksPermissionTag extends PermissionTag;\npublic class LacksRoleTag extends RoleTag;\npublic class NotAuthenticatedTag extends SecureTag; // JSP tag that renders the tag body only if the current user has not executed a successful authentication attempt during their current session.\npublic abstract class PermissionTag extends SecureTag;\npublic class PrincipalTag extends SecureTag; // Tag used to print out the String value of a user's default principal, or a specific principal as specified by the tag's attributes.\npublic abstract class RoleTag extends SecureTag;\npublic abstract class SecureTag extends javax.servlet.jsp.tagext.TagSupport;\npublic class UserTag extends SecureTag; // JSP tag that renders the tag body if the current user known to the system, either from a successful login attempt (not necessarily during the current session) or from 'RememberMe' services.\n", "des": "Provides the Shiro JSP Tag Library implementations."}
{"index": 2636, "repo": "spring-integration-sftp-6.1.2", "code": "package config;\n\npublic class SftpInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileInboundChannelAdapterParser; // Parser for 'sftp:inbound-channel-adapter'\npublic class SftpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Provides namespace support for using SFTP.\npublic class SftpOutboundChannelAdapterParser extends org.springframework.integration.file.config.RemoteFileOutboundChannelAdapterParser; // Parser for SFTP Outbound Channel Adapters.\npublic class SftpOutboundGatewayParser extends org.springframework.integration.file.config.AbstractRemoteFileOutboundGatewayParser;\npublic class SftpStreamingInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileStreamingInboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2637, "repo": "spring-integration-sftp-6.1.2", "code": "package dsl;\n\npublic final class Sftp extends Object; // The factory for SFTP components.\npublic class SftpInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpInboundChannelAdapterSpec,SftpInboundFileSynchronizingMessageSource>; // A RemoteFileInboundChannelAdapterSpec for an SftpInboundFileSynchronizingMessageSource.\npublic class SftpMessageHandlerSpec extends org.springframework.integration.file.dsl.FileTransferringMessageHandlerSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpMessageHandlerSpec>;\npublic class SftpOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpOutboundGatewaySpec>;\npublic class SftpStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<org.apache.sshd.sftp.client.SftpClient.DirEntry,SftpStreamingInboundChannelAdapterSpec,SftpStreamingMessageSource>;\n", "des": "Provides SFTP Components for the Java DSL."}
{"index": 2638, "repo": "spring-integration-sftp-6.1.2", "code": "package filters;\n\npublic class SftpPersistentAcceptOnceFileListFilter extends org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Persistent file list filter using the server's file timestamp to detect if we've already 'seen' this file.\npublic class SftpRegexPatternFileListFilter extends org.springframework.integration.file.filters.AbstractRegexPatternFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Implementation of AbstractRegexPatternFileListFilter for SFTP.\npublic class SftpSimplePatternFileListFilter extends org.springframework.integration.file.filters.AbstractSimplePatternFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Implementation of AbstractSimplePatternFileListFilter for SFTP.\npublic class SftpSystemMarkerFilePresentFileListFilter extends org.springframework.integration.file.filters.AbstractMarkerFilePresentFileListFilter<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // SFTP implementation of AbstractMarkerFilePresentFileListFilter.\n", "des": "Provides classes supporting SFTP file filtering."}
{"index": 2639, "repo": "spring-integration-sftp-6.1.2", "code": "package gateway;\n\npublic class SftpOutboundGateway extends org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Outbound Gateway for performing remote file operations via SFTP.\n", "des": "Provides classes supporting SFTP gateways."}
{"index": 2640, "repo": "spring-integration-sftp-6.1.2", "code": "package inbound;\n\npublic class SftpInboundFileSynchronizer extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Handles the synchronization between a remote SFTP directory and a local mount.\npublic class SftpInboundFileSynchronizingMessageSource extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // A MessageSource implementation for SFTP that delegates to an InboundFileSynchronizer.\npublic class SftpStreamingMessageSource extends org.springframework.integration.file.remote.AbstractRemoteFileStreamingMessageSource<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Message source for streaming SFTP remote file contents.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2641, "repo": "spring-integration-sftp-6.1.2", "code": "package outbound;\n\npublic class SftpMessageHandler extends org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Subclass of FileTransferringMessageHandler for SFTP.\n", "des": "Provides classes for the SFTP outbound channel adapter."}
{"index": 2642, "repo": "spring-integration-sftp-6.1.2", "code": "package server;\n\npublic abstract class ApacheMinaSftpEvent extends org.springframework.integration.file.remote.server.FileServerEvent; // ApplicationEvent generated from Apache Mina sftp events.\npublic class ApacheMinaSftpEventListener extends Object implements org.apache.sshd.sftp.server.SftpEventListener, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // A listener for SFTP events emitted by an Apache Mina sshd/sftp server.\npublic class DirectoryCreatedEvent extends ApacheMinaSftpEvent; // An event emitted when a directory is created.\npublic class FileWrittenEvent extends ApacheMinaSftpEvent; // An event that is emitted when a file is written.\npublic class PathMovedEvent extends ApacheMinaSftpEvent; // An event emitted when a path is moved.\npublic class PathRemovedEvent extends ApacheMinaSftpEvent; // An event emitted when a file or directory is removed.\npublic class SessionClosedEvent extends ApacheMinaSftpEvent; // An event emitted when a session is closed.\npublic class SessionOpenedEvent extends ApacheMinaSftpEvent; // An event emitted when a session is opened.\n", "des": "Provides classes related to SFTP servers."}
{"index": 2643, "repo": "spring-integration-sftp-6.1.2", "code": "package session;\n\npublic class DefaultSftpSessionFactory extends Object implements org.springframework.integration.file.remote.session.SessionFactory<org.apache.sshd.sftp.client.SftpClient.DirEntry>, org.springframework.integration.file.remote.session.SharedSessionCapable; // Factory for creating SftpSession instances.\npublic class ResourceKnownHostsServerKeyVerifier extends Object implements org.apache.sshd.client.keyverifier.ServerKeyVerifier; // A ServerKeyVerifier implementation for a Resource abstraction.\npublic class SftpFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // A FileInfo implementation for SFTP.\npublic class SftpRemoteFileTemplate extends org.springframework.integration.file.remote.RemoteFileTemplate<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // SFTP version of RemoteFileTemplate providing type-safe access to the underlying ChannelSftp object.\npublic class SftpSession extends Object implements org.springframework.integration.file.remote.session.Session<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Default SFTP Session implementation.\n", "des": "Provides classes supporting SFTP sessions."}
{"index": 2644, "repo": "spring-data-cassandra-4.1.2", "code": "package cassandra;\n\npackage cassandra.config; // Spring Data Cassandra factory beans and configuration.\npackage cassandra.core; // Apache Cassandra core support.\npackage cassandra.observability; // Infrastructure to provide driver observability using Micrometer.\npackage cassandra.repository; // Apache Cassandra specific repository implementation.\npackage cassandra.util; // Map and SpEL utility infrastructure.\npublic class CassandraAuthenticationException extends PermissionDeniedDataAccessException; // Spring data access exception for a Cassandra authentication failure.\npublic class CassandraConnectionFailureException extends DataAccessResourceFailureException; // Spring data access exception for Cassandra when no host is available.\npublic class CassandraInsufficientReplicasAvailableException extends TransientDataAccessException; // Spring data access exception for Cassandra when insufficient replicas are available for a given consistency level.\npublic class CassandraInternalException extends DataAccessException; // Spring data access exception for a Cassandra internal error.\npublic class CassandraInvalidConfigurationInQueryException extends InvalidDataAccessApiUsageException; // Spring data access exception for a Cassandra query that is syntactically correct but has an invalid configuration clause.\npublic class CassandraInvalidQueryException extends InvalidDataAccessApiUsageException; // Spring data access exception for a Cassandra query that's syntactically correct but invalid.\npublic class CassandraKeyspaceExistsException extends CassandraSchemaElementExistsException; // Spring data access exception for Cassandra when a keyspace being created already exists.\npublic final class CassandraManagedTypes extends Object implements ManagedTypes; // Cassandra-specific extension to ManagedTypes.\npublic class CassandraQuerySyntaxException extends InvalidDataAccessApiUsageException; // Spring data access exception for a Cassandra query syntax error.\npublic class CassandraReadTimeoutException extends QueryTimeoutException; // Cassandra-specific exception for a server-side timeout during a read query.\npublic class CassandraSchemaElementExistsException extends NonTransientDataAccessException; // Spring data access exception for when Cassandra schema element being created already exists.\n@Deprecated public static enum CassandraSchemaElementExistsException.ElementType extends Enum<CassandraSchemaElementExistsException.ElementType>;\npublic class CassandraTableExistsException extends CassandraSchemaElementExistsException; // Spring data access exception for when a Cassandra table being created already exists.\npublic class CassandraTraceRetrievalException extends TransientDataAccessException; // Spring data access exception for a Cassandra trace retrieval exception.\npublic class CassandraTruncateException extends TransientDataAccessException; // Spring data access exception for a Cassandra truncate exception.\n", "des": "Spring Data's Cassandra abstraction."}
{"index": 2645, "repo": "spring-data-cassandra-4.1.2", "code": "package config;\n\n@Configuration public abstract class AbstractCassandraConfiguration extends AbstractSessionConfiguration implements BeanClassLoaderAware; // Base class for Spring Data Cassandra configuration using JavaConfig.\n@Deprecated public abstract class AbstractCqlTemplateConfiguration extends AbstractSessionConfiguration;\npublic abstract class AbstractReactiveCassandraConfiguration extends AbstractCassandraConfiguration; // Extension to AbstractCassandraConfiguration providing Spring Data Cassandra configuration for Spring Data's Reactive Cassandra support using JavaConfig.\n@Configuration public abstract class AbstractSessionConfiguration extends Object implements BeanFactoryAware; // Spring Configuration class used to configure a Cassandra client application CqlSession connected to a Cassandra cluster.\npublic class CassandraAuditingBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // BeanDefinitionParser to register a AuditingEntityCallback to transparently set auditing information on an entity.\n@Deprecated public class CassandraCqlSessionFactoryBean extends CqlSessionFactoryBean;\npublic class CassandraCqlTemplateFactoryBean extends Object implements FactoryBean<CqlTemplate>, InitializingBean; // Factory for configuring a CqlTemplate.\npublic class CassandraEntityClassScanner extends Object; // Scans packages for Cassandra entities.\npublic class CassandraNamespaceHandler extends NamespaceHandlerSupport; // Namespace handler for spring-data-cassandra.\n@Deprecated public class CassandraSessionFactoryBean extends CqlSessionFactoryBean;\npublic class CassandraTemplateFactoryBean extends Object implements FactoryBean<CassandraTemplate>, InitializingBean; // Factory for configuring a CassandraTemplate.\npublic enum CompressionType extends Enum<CompressionType>; // Simple enumeration for the various compression types.\npublic class CqlNamespaceHandler extends NamespaceHandlerSupport; // Namespace handler for spring-cassandra.\npublic class CqlSessionFactoryBean extends Object implements FactoryBean<com.datastax.oss.driver.api.core.CqlSession>, InitializingBean, DisposableBean, PersistenceExceptionTranslator; // Factory for creating and configuring a Cassandra CqlSession, which is a thread-safe singleton.\npublic interface DefaultBeanNames extends DefaultCqlBeanNames;\npublic interface DefaultCqlBeanNames;\npublic interface DriverConfigLoaderBuilderConfigurer; // Callback interface that can be implemented by beans wishing to customize the ProgrammaticDriverConfigLoaderBuilder via a DriverConfigLoaderBuilderConfigurer whilst retaining default configuration.\n", "des": "Spring Data Cassandra factory beans and configuration."}
{"index": 2646, "repo": "spring-data-cassandra-4.1.2", "code": "package core;\n\npackage core.convert; // Spring Data Cassandra specific converter infrastructure.\npackage core.cql; // CQL core support.\npackage core.legacy; // Apache Cassandra legacy asynchronous support for easier migration.\npackage core.mapping; // Infrastructure for the Apache Cassandra row-to-object mapping subsystem.\npackage core.query; // Apache Cassandra specific query and update support.\npublic interface AsyncCassandraOperations; // Interface specifying a basic set of asynchronous Cassandra operations.\npublic class AsyncCassandraTemplate extends Object implements AsyncCassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware; // Primary implementation of AsyncCassandraOperations.\npublic static interface AsyncCassandraTemplate.AsyncPreparedStatementHandler extends AsyncPreparedStatementCreator, PreparedStatementBinder, CqlProvider; // General callback interface used to create and bind prepared CQL statements.\npublic interface CassandraAdminOperations extends CassandraOperations; // Operations for managing a Cassandra keyspace.\npublic class CassandraAdminTemplate extends CassandraTemplate implements CassandraAdminOperations; // Default implementation of CassandraAdminOperations.\npublic interface CassandraBatchOperations; // Batch operations for insert/update/delete actions on a table.\npublic interface CassandraOperations extends FluentCassandraOperations; // Interface specifying a basic set of Cassandra operations.\npublic class CassandraPersistentEntitySchemaCreator extends Object; // Schema creation support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity.\npublic class CassandraPersistentEntitySchemaDropper extends Object; // Schema drop support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity.\npublic class CassandraTemplate extends Object implements CassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware; // Primary implementation of CassandraOperations.\npublic static class CassandraTemplate.PreparedStatementHandler extends Object implements PreparedStatementCreator, PreparedStatementBinder, CqlProvider; // Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement.\npublic class DeleteOptions extends WriteOptions; // Extension to WriteOptions for use with DELETE operations.\npublic static class DeleteOptions.DeleteOptionsBuilder extends WriteOptions.WriteOptionsBuilder; // Builder for DeleteOptions.\npublic class EntityWriteResult<T> extends WriteResult; // The result of a write operation for an entity.\npublic interface ExecutableDeleteOperation; // ExecutableDeleteOperation allows creation and execution of Cassandra DELETE operations in a fluent API style.\npublic static interface ExecutableDeleteOperation.DeleteWithQuery; // Filtering (optional).\npublic static interface ExecutableDeleteOperation.DeleteWithTable; // Table override (optional).\n", "des": "Apache Cassandra core support."}
{"index": 2647, "repo": "spring-data-cassandra-4.1.2", "code": "package convert;\n\npublic abstract class AbstractCassandraConverter extends Object implements CassandraConverter, InitializingBean; // Base class for CassandraConverter implementations.\n@Deprecated public class BasicCassandraRowValueProvider extends RowValueProvider;\npublic interface CassandraColumnType extends ColumnType; // Descriptor for a Cassandra column type exposing a DataType.\npublic interface CassandraConverter extends EntityConverter<CassandraPersistentEntity<?>,CassandraPersistentProperty,Object,Object>; // Central Cassandra specific converter interface from Object to Row.\npublic class CassandraCustomConversions extends CustomConversions; // Value object to capture custom conversion.\npublic abstract class CassandraJsr310Converters extends Object; // Helper class to register JodaTime specific Converter implementations in case the library is present on the classpath.\n@WritingConverter public static enum CassandraJsr310Converters.DateToInstantConverter extends Enum<CassandraJsr310Converters.DateToInstantConverter> implements Converter<Date,Instant>; // Simple singleton to convert Dates to their Cassandra Instant representation for the CQL Timestamp type.\n@ReadingConverter public static enum CassandraJsr310Converters.InstantToDateConverter extends Enum<CassandraJsr310Converters.InstantToDateConverter> implements Converter<Instant,Date>;\n@ReadingConverter public static enum CassandraJsr310Converters.LocalTimeToMillisOfDayConverter extends Enum<CassandraJsr310Converters.LocalTimeToMillisOfDayConverter> implements Converter<LocalTime,Long>; // Simple singleton to convert LocalTimes to their Long representation.\n@ReadingConverter public static enum CassandraJsr310Converters.MillisOfDayToLocalTimeConverter extends Enum<CassandraJsr310Converters.MillisOfDayToLocalTimeConverter> implements Converter<Long,LocalTime>; // Simple singleton to convert Longs to their LocalTime representation.\npublic interface CassandraRowValueProvider extends CassandraValueProvider; // CassandraValueProvider providing values based on a Row.\n@Deprecated public class CassandraTupleValueProvider extends TupleValueProvider;\n@Deprecated public class CassandraUDTValueProvider extends UdtValueProvider;\npublic interface CassandraValueProvider extends PropertyValueProvider<CassandraPersistentProperty>; // PropertyValueProvider for CassandraPersistentProperty.\npublic interface ColumnType; // Interface to access column type information.\npublic interface ColumnTypeResolver; // Resolves ColumnType for properties, TypeInformation, and values.\n@Deprecated public class CustomConversions extends CassandraCustomConversions;\n", "des": "Spring Data Cassandra specific converter infrastructure."}
{"index": 2648, "repo": "spring-data-cassandra-4.1.2", "code": "package cql;\n\npackage cql.converter; // CQL specific converters.\npackage cql.generator; // CQL generators for Keyspace object actions.\npackage cql.keyspace; // Keyspace object action specifications such as CREATE TABLE, DROP INDEX.\npackage cql.legacy; // CQL legacy core asynchronous support for easier migration.\npackage cql.session; // Provides utility classes for simple CqlSession access and various session implementations.\npackage cql.support; // Support classes for the CQL framework.\npackage cql.util; // Utility classes for basic CQL interaction.\npublic class ArgumentPreparedStatementBinder extends Object implements PreparedStatementBinder; // Simple adapter for PreparedStatementBinder that applies a given array of arguments.\npublic interface AsyncCqlOperations; // Interface specifying a basic set of CQL asynchronously executed operations.\npublic class AsyncCqlTemplate extends CassandraAccessor implements AsyncCqlOperations; // This is the central class in the CQL core package for asynchronous Cassandra data access. It simplifies the use of CQL and helps to avoid common errors.\nprotected static class AsyncCqlTemplate.AsyncRowCallbackHandlerResultSetExtractor extends Object implements AsyncResultSetExtractor<Void>; // Adapter to enable use of a RowCallbackHandler inside a ResultSetExtractor.\n@FunctionalInterface public interface AsyncPreparedStatementCreator; // One of the two central callback interfaces used by the AsyncCqlTemplate class.\n@FunctionalInterface public interface AsyncResultSetExtractor<T>; // Callback interface used by AsyncCqlTemplate's query methods.\npublic class AsyncRowMapperResultSetExtractor<T> extends Object implements AsyncResultSetExtractor<List<T>>; // Adapter implementation of the ResultSetExtractor interface that delegates to a RowMapper which is supposed to create an object for each row.\n@FunctionalInterface public interface AsyncSessionCallback<T>; // Generic callback interface for code that operates asynchronously on a Cassandra CqlSession.\npublic class BeanPropertyRowMapper<T> extends Object implements RowMapper<T>; // RowMapper implementation that converts a Row into a new instance of the specified mapped target class.\n@Deprecated public class CachedPreparedStatementCreator extends Object implements PreparedStatementCreator;\npublic class CassandraAccessor extends Object implements InitializingBean; // CassandraAccessor provides access to a Cassandra SessionFactory and the CassandraExceptionTranslator.\npublic class CassandraExceptionTranslator extends Object implements CqlExceptionTranslator; // Simple PersistenceExceptionTranslator for Cassandra.\n", "des": "CQL core support."}
{"index": 2649, "repo": "spring-data-cassandra-4.1.2", "code": "package converter;\n\npublic abstract class AbstractResultSetConverter<T> extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,T>; // Convenient converter that can be used to convert a single-row-single-column, single-row-multi-column, or multi-row ResultSet into the given value of a given type.\npublic abstract class AbstractResultSetToBasicFixedTypeConverter<T> extends AbstractResultSetConverter<T>; // Thin wrapper that allows subclasses to delegate conversion of the given value to a DefaultConversionService.\npublic class ResultSetToArrayConverter extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,Object[]>; // Converter from ResultSet to Object array.\npublic class ResultSetToBigDecimalConverter extends AbstractResultSetToBasicFixedTypeConverter<BigDecimal>; // Converter from ResultSet to a single BigDecimal value.\npublic class ResultSetToBigIntegerConverter extends AbstractResultSetToBasicFixedTypeConverter<BigInteger>; // Converter from ResultSet to a single BigInteger value.\npublic class ResultSetToBooleanConverter extends AbstractResultSetToBasicFixedTypeConverter<Boolean>; // Converter from ResultSet to a single Boolean value.\npublic class ResultSetToByteBufferConverter extends AbstractResultSetConverter<ByteBuffer>; // Converter from ResultSet to a single ByteBuffer value.\npublic class ResultSetToDateConverter extends AbstractResultSetToBasicFixedTypeConverter<Date>; // Converter from ResultSet to a single Date value.\npublic class ResultSetToDoubleConverter extends AbstractResultSetToBasicFixedTypeConverter<Double>; // Converter from ResultSet to a single Double value.\npublic class ResultSetToFloatConverter extends AbstractResultSetToBasicFixedTypeConverter<Float>; // Converter from ResultSet to a single Float value.\npublic class ResultSetToInetAddressConverter extends AbstractResultSetToBasicFixedTypeConverter<InetAddress>; // Converter from ResultSet to a single InetAddress value.\npublic class ResultSetToIntegerConverter extends AbstractResultSetToBasicFixedTypeConverter<Integer>; // Converter from ResultSet to a single Integer value.\npublic class ResultSetToListConverter extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,List<Map<String,Object>>>; // Converter from ResultSet to Map.\npublic class ResultSetToListOfStringConverter extends AbstractResultSetConverter<List<String>>; // Converter from ResultSet to a List of String.\n", "des": "CQL specific converters."}
{"index": 2650, "repo": "spring-data-cassandra-4.1.2", "code": "package generator;\n\npublic class AddColumnCqlGenerator extends ColumnChangeCqlGenerator<AddColumnSpecification>; // CQL generator for generating an ADD clause of an ALTER TABLE statement.\npublic class AlterColumnCqlGenerator extends ColumnChangeCqlGenerator<AlterColumnSpecification>; // CQL generator for generating an ALTER column clause of an ALTER TABLE statement.\npublic class AlterKeyspaceCqlGenerator extends KeyspaceOptionsCqlGenerator<AlterKeyspaceSpecification>; // CQL generator for generating ALTER TABLE statements.\npublic class AlterTableCqlGenerator extends TableOptionsCqlGenerator<AlterTableSpecification>; // CQL generator for generating ALTER TABLE statements.\npublic class AlterUserTypeCqlGenerator extends UserTypeNameCqlGenerator<AlterUserTypeSpecification>; // CQL generator for generating ALTER TYPE statements.\npublic abstract class ColumnChangeCqlGenerator<T extends ColumnChangeSpecification> extends Object; // Base class for column change CQL generators.\npublic class CreateIndexCqlGenerator extends IndexNameCqlGenerator<CreateIndexSpecification>; // CQL generator for generating a CREATE INDEX statement.\npublic class CreateKeyspaceCqlGenerator extends KeyspaceOptionsCqlGenerator<CreateKeyspaceSpecification>; // CQL generator for generating a CREATE TABLE statement.\npublic class CreateTableCqlGenerator extends TableOptionsCqlGenerator<TableSpecification<CreateTableSpecification>>; // CQL generator for generating a CREATE TABLE statement.\npublic class CreateUserTypeCqlGenerator extends UserTypeNameCqlGenerator<CreateUserTypeSpecification>; // CQL generator for generating a CREATE TYPE statement.\npublic class DropColumnCqlGenerator extends ColumnChangeCqlGenerator<DropColumnSpecification>; // CQL generator for generating a DROP column clause of an ALTER TABLE statement.\npublic class DropIndexCqlGenerator extends IndexNameCqlGenerator<DropIndexSpecification>; // CQL generator for generating a DROP INDEX statement.\npublic class DropKeyspaceCqlGenerator extends KeyspaceNameCqlGenerator<DropKeyspaceSpecification>; // CQL generator for generating a DROP TABLE statement.\npublic class DropTableCqlGenerator extends TableNameCqlGenerator<DropTableSpecification>; // CQL generator for generating a DROP TABLE statement.\npublic class DropUserTypeCqlGenerator extends UserTypeNameCqlGenerator<DropUserTypeSpecification>; // CQL generator for generating a DROP TYPE statement.\n", "des": "CQL generators for Keyspace object actions."}
{"index": 2651, "repo": "spring-data-cassandra-4.1.2", "code": "package keyspace;\n\npublic class AddColumnSpecification extends ColumnTypeChangeSpecification; // Value object representing a specification to add a column.\npublic class AlterColumnSpecification extends ColumnTypeChangeSpecification; // Value object representing a specification to alter a column.\npublic class AlterKeyspaceSpecification extends KeyspaceOptionsSpecification<AlterKeyspaceSpecification>; // Object to configure a ALTER KEYSPACE specification.\npublic class AlterTableSpecification extends TableOptionsSpecification<AlterTableSpecification>; // Object to configure a ALTER TABLE specification.\npublic class AlterUserTypeSpecification extends UserTypeNameSpecification; // Object to configure a ALTER TYPE specification.\npublic abstract class ColumnChangeSpecification extends Object; // Base value object class for column change specifications.\npublic class ColumnSpecification extends Object; // Object to configure a CQL column specification.\npublic abstract class ColumnTypeChangeSpecification extends ColumnChangeSpecification; // Base value object class for column changes that include DataType information.\npublic class CqlStringUtils extends Object;\npublic class CreateIndexSpecification extends IndexNameSpecification<CreateIndexSpecification> implements IndexDescriptor; // Object to configure a CREATE INDEX specification.\npublic static enum CreateIndexSpecification.ColumnFunction extends Enum<CreateIndexSpecification.ColumnFunction>; // Column functions to specify indexing behavior.\npublic class CreateKeyspaceSpecification extends KeyspaceOptionsSpecification<CreateKeyspaceSpecification> implements KeyspaceDescriptor; // Object to configure a CREATE KEYSPACE specification.\npublic class CreateTableSpecification extends TableSpecification<CreateTableSpecification>; // Object to configure a CREATE TABLE specification.\npublic class CreateUserTypeSpecification extends UserTypeSpecification<CreateUserTypeSpecification>; // Object to configure a CREATE TYPE specification.\npublic class DataCenterReplication extends Object; // Value object representing replication factor for a given data center.\npublic class DefaultOption extends Object implements Option; // A default implementation of Option.\npublic class DropColumnSpecification extends ColumnChangeSpecification; // Value object representing a specification to drop a column.\npublic class DropIndexSpecification extends IndexNameSpecification<DropIndexSpecification>; // Value object representing a DROP INDEX specification.\npublic class DropKeyspaceSpecification extends KeyspaceActionSpecification; // Object to configure a DROP KEYSPACE specification.\npublic class DropTableSpecification extends TableNameSpecification; // Object to configure a DROP TABLE specification.\npublic class DropUserTypeSpecification extends UserTypeNameSpecification; // Object to configure a DROP TYPE specification.\npublic class FieldSpecification extends Object; // Base value object class to specify user type fields.\n", "des": "Keyspace object action specifications such as CREATE TABLE, DROP INDEX."}
{"index": 2652, "repo": "spring-data-cassandra-4.1.2", "code": "package legacy;\n\n@Deprecated(since=\"4.0\", forRemoval=true) public interface AsyncCqlOperations;\n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncCqlTemplate extends CassandraAccessor implements AsyncCqlOperations;\nprotected static class AsyncCqlTemplate.AsyncRowCallbackHandlerResultSetExtractor extends Object implements AsyncResultSetExtractor<Void>; // Adapter to enable use of a RowCallbackHandler inside a ResultSetExtractor.\n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncPreparedStatementCreator;\n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncResultSetExtractor<T>;\n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncRowMapperResultSetExtractor<T> extends Object implements AsyncResultSetExtractor<List<T>>;\n@Deprecated(since=\"4.0\", forRemoval=true) @FunctionalInterface public interface AsyncSessionCallback<T>;\n", "des": "CQL legacy core asynchronous support for easier migration."}
{"index": 2653, "repo": "spring-data-cassandra-4.1.2", "code": "package session;\n\npackage session.init; // Provides extensible support for initializing databases through scripts.\npackage session.lookup; // Provides a strategy for looking up SessionFactory.\npublic class DefaultBridgedReactiveSession extends Object implements ReactiveSession; // Default implementation of a ReactiveSession.\npublic class DefaultReactiveSessionFactory extends Object implements ReactiveSessionFactory; // Default implementation of ReactiveSessionFactory.\npublic class DefaultSessionFactory extends Object implements SessionFactory; // Default SessionFactory implementation.\n", "des": "Provides utility classes for simple CqlSession access and various session implementations."}
{"index": 2654, "repo": "spring-data-cassandra-4.1.2", "code": "package init;\n\npublic class CannotReadScriptException extends ScriptException; // Thrown by ScriptUtils if a CQL script cannot be read.\npublic class CompositeKeyspacePopulator extends Object implements KeyspacePopulator; // Composite KeyspacePopulator that delegates to a list of given KeyspacePopulator implementations, executing all scripts.\n@FunctionalInterface public interface KeyspacePopulator; // Strategy used to populate, initialize, or clean up a Cassandra keyspace.\npublic class ResourceKeyspacePopulator extends Object implements KeyspacePopulator; // Populates, initializes, or cleans up a keyspace using CQL scripts defined in external resources.\npublic abstract class ScriptException extends DataAccessException; // Root of the hierarchy of data access exceptions that are related to processing of CQL scripts.\npublic class ScriptParseException extends ScriptException; // Thrown by ScriptUtils if a CQL script cannot be properly parsed.\npublic class ScriptStatementFailedException extends ScriptException; // Thrown by ScriptUtils if a statement in an CQL script failed when executing it against the target database.\npublic abstract class ScriptUtils extends Object; // Generic utility methods for working with CQL scripts.\npublic class SessionFactoryInitializer extends Object implements InitializingBean, DisposableBean; // Used to set up a keyspace during initialization and clean up a keyspace during destruction.\npublic class UncategorizedScriptException extends ScriptException; // Thrown when we cannot determine anything more specific than \"something went wrong while processing a CQL script\": for example, a Exception from Cassandra that we cannot pinpoint more precisely.\n", "des": "Provides extensible support for initializing databases through scripts."}
{"index": 2655, "repo": "spring-data-cassandra-4.1.2", "code": "package lookup;\n\npublic abstract class AbstractRoutingSessionFactory extends Object implements SessionFactory, InitializingBean; // Abstract SessionFactory implementation that routes AbstractRoutingSessionFactory.getSession() calls to one of various target factories based on a lookup key.\npublic class BeanFactorySessionFactoryLookup extends Object implements SessionFactoryLookup, BeanFactoryAware; // SessionFactoryLookup implementation based on a Spring BeanFactory.\npublic class MapSessionFactoryLookup extends Object implements SessionFactoryLookup; // Simple SessionFactoryLookup implementation that relies on a map for doing lookups.\n@FunctionalInterface public interface SessionFactoryLookup; // Strategy interface for looking up SessionFactory by name.\npublic class SessionFactoryLookupFailureException extends NonTransientDataAccessException; // Exception to be thrown by a SessionFactoryLookup implementation, indicating that the specified SessionFactory could not be obtained.\npublic class SingleSessionFactoryLookup extends Object implements SessionFactoryLookup; // An implementation of SessionFactoryLookup that simply wraps a single given SessionFactory, returned for any session factory name.\n", "des": "Provides a strategy for looking up SessionFactory."}
{"index": 2656, "repo": "spring-data-cassandra-4.1.2", "code": "package support;\n\n@Deprecated public class CachedPreparedStatementCreator extends Object implements PreparedStatementCreator;\n@Deprecated public class MapPreparedStatementCache extends Object implements PreparedStatementCache;\nprotected static class MapPreparedStatementCache.CacheKey extends Object; // MapPreparedStatementCache.CacheKey for PreparedStatement caching.\n@Deprecated public interface PreparedStatementCache;\n", "des": "Support classes for the CQL framework."}
{"index": 2657, "repo": "spring-data-cassandra-4.1.2", "code": "package util;\n\n@Deprecated public class CassandraFutureAdapter<T> extends Object implements ListenableFuture<T>;\npublic class StatementBuilder<S extends com.datastax.oss.driver.api.querybuilder.BuildableQuery> extends Object; // Functional builder for Cassandra statements.\n@FunctionalInterface public static interface StatementBuilder.BindFunction<S>; // Binding function.\npublic static enum StatementBuilder.ParameterHandling extends Enum<StatementBuilder.ParameterHandling>; // Enumeration to represent how parameters are rendered.\n@FunctionalInterface public interface TermFactory; // Factory for Term objects encapsulating a binding value.\n", "des": "Utility classes for basic CQL interaction."}
{"index": 2658, "repo": "spring-data-cassandra-4.1.2", "code": "package legacy;\n\n@Deprecated(since=\"4.0\", forRemoval=true) public interface AsyncCassandraOperations;\n@Deprecated(since=\"4.0\", forRemoval=true) public class AsyncCassandraTemplate extends Object implements AsyncCassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware;\npublic static interface AsyncCassandraTemplate.AsyncPreparedStatementHandler extends AsyncPreparedStatementCreator, PreparedStatementBinder, CqlProvider; // General callback interface used to create and bind prepared CQL statements.\npublic static class AsyncCassandraTemplate.PreparedStatementHandler extends Object implements AsyncCassandraTemplate.AsyncPreparedStatementHandler; // Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement.\n", "des": "Apache Cassandra legacy asynchronous support for easier migration."}
{"index": 2659, "repo": "spring-data-cassandra-4.1.2", "code": "package mapping;\n\npackage mapping.event; // Event callback infrastructure for Cassandra mapping subsystem.\n@Deprecated public class BasicCassandraMappingContext extends CassandraMappingContext;\npublic class BasicCassandraPersistentEntity<T> extends BasicPersistentEntity<T,CassandraPersistentProperty> implements CassandraPersistentEntity<T>, ApplicationContextAware; // Cassandra specific BasicPersistentEntity implementation that adds Cassandra specific metadata.\npublic class BasicCassandraPersistentEntityMetadataVerifier extends Object implements CassandraPersistentEntityMetadataVerifier; // Default implementation for Cassandra Persistent Entity Verification.\npublic class BasicCassandraPersistentProperty extends AnnotationBasedPersistentProperty<CassandraPersistentProperty> implements CassandraPersistentProperty, ApplicationContextAware; // Cassandra specific AnnotationBasedPersistentProperty implementation.\npublic class BasicCassandraPersistentTupleEntity<T> extends BasicCassandraPersistentEntity<T>; // Cassandra Tuple-specific PersistentEntity for a mapped tuples.\npublic class BasicCassandraPersistentTupleProperty extends BasicCassandraPersistentProperty; // Cassandra Tuple specific CassandraPersistentProperty implementation.\npublic class BasicMapId extends Object implements MapId; // Simple implementation of MapId.\npublic class CachingCassandraPersistentProperty extends BasicCassandraPersistentProperty; // BasicCassandraPersistentProperty that pre-computes primary key and embedded flags.\n@Deprecated public enum CassandraColumnAnnotationComparator extends Enum<CassandraColumnAnnotationComparator> implements Comparator<Column>;\npublic class CassandraMappingContext extends AbstractMappingContext<BasicCassandraPersistentEntity<?>,CassandraPersistentProperty> implements ApplicationContextAware, BeanClassLoaderAware; // Default implementation of a MappingContext for Cassandra using CassandraPersistentEntity and CassandraPersistentProperty as primary abstractions.\npublic interface CassandraPersistentEntity<T> extends PersistentEntity<T,CassandraPersistentProperty>; // Cassandra specific PersistentEntity abstraction.\n@FunctionalInterface public interface CassandraPersistentEntityMetadataVerifier; // Interface for Cassandra Persistent Entity Mapping Verification.\npublic interface CassandraPersistentProperty extends PersistentProperty<CassandraPersistentProperty>, ApplicationContextAware; // Cassandra specific PersistentProperty extension.\npublic enum CassandraPersistentPropertyComparator extends Enum<CassandraPersistentPropertyComparator> implements Comparator<CassandraPersistentProperty>; // Comparator implementation that orders CassandraPersistentProperty instances.\npublic enum CassandraPrimaryKeyColumnAnnotationComparator extends Enum<CassandraPrimaryKeyColumnAnnotationComparator> implements Comparator<PrimaryKeyColumn>; // Comparator implementation that uses, in order, the...\n", "des": "Infrastructure for the Apache Cassandra row-to-object mapping subsystem."}
{"index": 2660, "repo": "spring-data-cassandra-4.1.2", "code": "package event;\n\npublic abstract class AbstractCassandraEventListener<E> extends Object implements ApplicationListener<CassandraMappingEvent<?>>; // Base class to implement domain specific ApplicationListeners for CassandraMappingEvent.\npublic class AbstractDeleteEvent<T> extends AbstractStatementAwareMappingEvent<com.datastax.oss.driver.api.core.cql.Statement<?>>; // Base class for delete events.\npublic abstract class AbstractStatementAwareMappingEvent<T> extends CassandraMappingEvent<T>; // Event encapsulating Cassandra CQL statement.\npublic class AfterConvertEvent<E> extends CassandraMappingEvent<E>; // Event to be triggered after converting a Row.\npublic class AfterDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event being thrown after a single or a set of rows has/have been deleted.\npublic class AfterLoadEvent<T> extends CassandraMappingEvent<com.datastax.oss.driver.api.core.cql.Row>; // Event to be triggered after loading Rows to be mapped onto a given type.\npublic class AfterSaveEvent<E> extends CassandraMappingEvent<E>; // CassandraMappingEvent triggered after save of an object.\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class BeforeDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event thrown before a row or a set of rows is deleted.\n@FunctionalInterface public interface BeforeSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered before save of a row.\npublic class BeforeSaveEvent<E> extends AbstractStatementAwareMappingEvent<E>; // CassandraMappingEvent triggered before save of an object.\npublic class CassandraMappingEvent<T> extends ApplicationEvent; // Base ApplicationEvent triggered by Spring Data Cassandra.\npublic class ReactiveAuditingEntityCallback extends Object implements ReactiveBeforeConvertCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be saved.\n", "des": "Event callback infrastructure for Cassandra mapping subsystem."}
{"index": 2661, "repo": "spring-data-cassandra-4.1.2", "code": "package query;\n\npublic class CassandraPageRequest extends PageRequest; // Cassandra-specific PageRequest implementation providing access to paging state.\npublic abstract class ColumnName extends Object; // Value object representing a column name.\npublic class Columns extends Object implements Iterable<ColumnName>; // Value object to abstract column names involved in a CQL query.\npublic static class Columns.ColumnSelector extends Object implements Columns.Selector; // Column selection.\npublic static class Columns.FunctionCall extends Object implements Columns.Selector; // Function call selector with alias support.\npublic static interface Columns.Selector; // Strategy interface to render a column selection.\npublic class Criteria extends Object implements CriteriaDefinition; // Basic class for creating queries.\npublic interface CriteriaDefinition; // Criteria definition for a ColumnName exposing a CriteriaDefinition.Predicate.\npublic static interface CriteriaDefinition.Operator; // Strategy interface to represent a CQL predicate operator.\npublic static enum CriteriaDefinition.Operators extends Enum<CriteriaDefinition.Operators> implements CriteriaDefinition.Operator; // Commonly used CQL operators.\npublic static class CriteriaDefinition.Predicate extends Object; // Represents an operator associated with its value.\n@FunctionalInterface public interface Filter extends Streamable<CriteriaDefinition>; // Filter consisting of CriteriaDefinitions to be used with SELECT, UPDATE and DELETE queries.\npublic class Query extends Object implements Filter; // Query object representing CriteriaDefinitions, Columns, Sort, paging state and QueryOptions for a CQL query.\npublic class Update extends Object; // Update object representing a set of update operations.\npublic static interface Update.AddToBuilder; // Builder to add a single element/multiple elements to a collection associated with a ColumnName.\npublic static class Update.AddToMapOp extends Update.AssignmentOp; // Add element(s) to Map operation.\npublic static class Update.AddToOp extends Update.AssignmentOp; // Add element(s) to collection operation.\npublic static enum Update.AddToOp.Mode extends Enum<Update.AddToOp.Mode>;\npublic abstract static class Update.AssignmentOp extends Object; // Abstract class for an update assignment related to a specific ColumnName.\npublic static class Update.IncrOp extends Update.AssignmentOp; // Increment operation.\npublic static interface Update.RemoveFromBuilder; // Builder to remove a single element/multiple elements from a collection associated with a ColumnName.\npublic static class Update.RemoveOp extends Update.AssignmentOp; // Remove operation.\n", "des": "Apache Cassandra specific query and update support."}
{"index": 2662, "repo": "spring-data-cassandra-4.1.2", "code": "package observability;\n\npublic class CassandraObservationContext extends io.micrometer.observation.transport.SenderContext<Object>; // A Observation.Context for CqlSession.\npublic interface CassandraObservationConvention extends io.micrometer.observation.ObservationConvention<CassandraObservationContext>; // ObservationConvention for Cassandra.\npublic interface CassandraObservationSupplier; // Returns the Cassandra Observation.\npublic final class ObservableCqlSessionFactory extends Object; // Factory to wrap a CqlSession with a CqlSessionObservationInterceptor.\npublic class ObservableCqlSessionFactoryBean extends AbstractFactoryBean<com.datastax.oss.driver.api.core.CqlSession>; // Factory bean to construct a CqlSession integrated with given ObservationRegistry.\npublic class ObservableReactiveSession extends Object implements ReactiveSession; // Instrumented ReactiveSession for observability.\npublic final class ObservableReactiveSessionFactory extends Object; // Factory to wrap a ReactiveSession with ObservableReactiveSession.\npublic class ObservableReactiveSessionFactoryBean extends AbstractFactoryBean<ReactiveSession>; // Factory bean to construct a ReactiveSession integrated with given ObservationRegistry.\npublic enum ObservationRequestTracker extends Enum<ObservationRequestTracker> implements com.datastax.oss.driver.api.core.tracker.RequestTracker; // Trace implementation of the RequestTracker.\n", "des": "Infrastructure to provide driver observability using Micrometer."}
{"index": 2663, "repo": "spring-data-cassandra-4.1.2", "code": "package repository;\n\npackage repository.cdi; // CDI support for Apache Cassandra specific repository implementation.\npackage repository.config; // Support infrastructure for the configuration of Apache Cassandra specific repositories.\npackage repository.query; // Query derivation mechanism for Apache Cassandra specific repositories.\npackage repository.support; // Support infrastructure for query derivation of Apache Cassandra specific repositories.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(allowFiltering=true) public @interface AllowFiltering; // Annotation to declare filtering for a derived query.\n@NoRepositoryBean public interface CassandraRepository<T,ID> extends ListCrudRepository<T,ID>; // Cassandra-specific extension of the CrudRepository interface that allows the specification of a type for the identity of the @Table (or @Persistable) type.\n@Documented @Target({ANNOTATION_TYPE,METHOD}) @Retention(RUNTIME) public @interface Consistency; // Annotation to declare a ConsistencyLevel for CQL queries executed through query methods.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(count=true) public @interface CountQuery; // Annotation to declare count queries directly on repository methods.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(exists=true) public @interface ExistsQuery; // Annotation to declare exists queries directly on repository methods.\n@NoRepositoryBean public interface MapIdCassandraRepository<T> extends CassandraRepository<T,MapId>; // Cassandra repository interface using MapId to represent Ids.\n@Documented @Target({ANNOTATION_TYPE,METHOD}) @Retention(RUNTIME) public @interface Query; // Annotation to declare finder queries directly on repository methods.\npublic static enum Query.Idempotency extends Enum<Query.Idempotency>; // Enumeration to define statement idempotency.\n@NoRepositoryBean public interface ReactiveCassandraRepository<T,ID> extends ReactiveCrudRepository<T,ID>; // Cassandra specific Repository interface with reactive support.\n", "des": "Apache Cassandra specific repository implementation."}
{"index": 2664, "repo": "spring-data-cassandra-4.1.2", "code": "package cdi;\n\npublic class CassandraRepositoryBean<T> extends CdiRepositoryBean<T>; // A bean which represents a Cassandra repository.\npublic class CassandraRepositoryExtension extends CdiRepositoryExtensionSupport; // A portable CDI extension which registers beans for Spring Data Cassandra repositories.\n", "des": "CDI support for Apache Cassandra specific repository implementation."}
{"index": 2665, "repo": "spring-data-cassandra-4.1.2", "code": "package config;\n\npublic class CassandraRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // ImportBeanDefinitionRegistrar to setup Cassandra repositories via EnableCassandraRepositories.\npublic class CassandraRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // RepositoryConfigurationExtension for Cassandra.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Inherited @Import(CassandraRepositoriesRegistrar.class) public @interface EnableCassandraRepositories; // Annotation to enable Cassandra repositories.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Inherited @Import(org.springframework.data.cassandra.repository.config.ReactiveCassandraRepositoriesRegistrar.class) public @interface EnableReactiveCassandraRepositories; // Annotation to activate reactive Cassandra repositories.\npublic class ReactiveCassandraRepositoryConfigurationExtension extends CassandraRepositoryConfigurationExtension; // RepositoryConfigurationExtension for Cassandra.\n", "des": "Support infrastructure for the configuration of Apache Cassandra specific repositories."}
{"index": 2666, "repo": "spring-data-cassandra-4.1.2", "code": "package query;\n\npublic abstract class AbstractCassandraQuery extends CassandraRepositoryQuerySupport; // Base class for RepositoryQuery implementations for Cassandra.\npublic abstract class AbstractReactiveCassandraQuery extends CassandraRepositoryQuerySupport; // Base class for reactive RepositoryQuery implementations for Cassandra.\npublic interface CassandraEntityInformation<T,ID> extends EntityInformation<T,ID>, CassandraEntityMetadata<T>; // Cassandra specific EntityInformation.\npublic interface CassandraEntityMetadata<T> extends EntityMetadata<T>; // Extension of EntityMetadata to additionally expose the table name an entity shall be persisted to.\npublic interface CassandraParameterAccessor extends ParameterAccessor; // Cassandra-specific ParameterAccessor exposing a Cassandra types that are supported by the driver and parameter type.\npublic class CassandraParameters extends Parameters<CassandraParameters,org.springframework.data.cassandra.repository.query.CassandraParameters.CassandraParameter>; // Custom extension of Parameters discovering additional properties of query method parameters.\npublic class CassandraParametersParameterAccessor extends ParametersParameterAccessor implements CassandraParameterAccessor; // Cassandra-specific ParameterAccessor exposing Cassandra types that are supported by the driver and parameter type.\npublic class CassandraQueryMethod extends QueryMethod; // Cassandra specific implementation of QueryMethod.\npublic abstract class CassandraRepositoryQuerySupport extends Object implements RepositoryQuery; // Base class for Cassandra RepositoryQuery implementations providing common infrastructure such as EntityInstantiators and QueryStatementCreator.\npublic class PartTreeCassandraQuery extends AbstractCassandraQuery; // RepositoryQuery implementation for Cassandra.\npublic class ReactiveCassandraQueryMethod extends CassandraQueryMethod; // Reactive specific implementation of CassandraQueryMethod.\npublic class ReactivePartTreeCassandraQuery extends AbstractReactiveCassandraQuery; // Reactive PartTree RepositoryQuery implementation for Cassandra.\npublic class ReactiveStringBasedCassandraQuery extends AbstractReactiveCassandraQuery; // String-based AbstractReactiveCassandraQuery implementation.\npublic class StringBasedCassandraQuery extends AbstractCassandraQuery; // String-based AbstractCassandraQuery implementation.\n", "des": "Query derivation mechanism for Apache Cassandra specific repositories."}
{"index": 2667, "repo": "spring-data-cassandra-4.1.2", "code": "package support;\n\npublic class CassandraRepositoryFactory extends RepositoryFactorySupport; // Factory to create CassandraRepository instances.\npublic class CassandraRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create CassandraRepository instances.\npublic class MappingCassandraEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements CassandraEntityInformation<T,ID>; // CassandraEntityInformation implementation using a CassandraPersistentEntity instance to lookup the necessary information.\npublic class ReactiveCassandraRepositoryFactory extends ReactiveRepositoryFactorySupport; // Factory to create ReactiveCassandraRepository instances.\npublic class ReactiveCassandraRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>; // FactoryBean to create ReactiveCassandraRepository instances.\npublic class SimpleCassandraRepository<T,ID> extends Object implements CassandraRepository<T,ID>; // Repository base implementation for Cassandra.\npublic class SimpleReactiveCassandraRepository<T,ID> extends Object implements ReactiveCassandraRepository<T,ID>; // Reactive repository base implementation for Cassandra.\n", "des": "Support infrastructure for query derivation of Apache Cassandra specific repositories."}
{"index": 2668, "repo": "spring-data-cassandra-4.1.2", "code": "package util;\n\npublic class MapBuilder<K,V> extends Object implements Map<K,V>; // Builder for maps, which also conveniently implements Map via delegation for convenience so you don't have to actually MapBuilder.build() it.\npublic class SpelUtils extends Object; // Evaluates a SpEL expression.\n", "des": "Map and SpEL utility infrastructure."}
{"index": 2669, "repo": "spring-data-jdbc-3.1.2", "code": "package core;\n\npackage core.convert; // JDBC-specific conversion classes.\npublic interface JdbcAggregateOperations; // Specifies operations one can perform on a database, based on an Domain Type.\npublic class JdbcAggregateTemplate extends Object implements JdbcAggregateOperations; // JdbcAggregateOperations implementation, storing aggregates in and obtaining them from a JDBC data store.\npublic class UnableToSetId extends NonTransientDataAccessException; // Signals failure to set the id property of an entity.\n", "des": "Core JDBC implementation."}
{"index": 2670, "repo": "spring-data-jdbc-3.1.2", "code": "package convert;\n\npublic class BasicJdbcConverter extends BasicRelationalConverter implements JdbcConverter, ApplicationContextAware; // RelationalConverter that uses a MappingContext to apply basic conversion of relational values to property values.\npublic class BatchJdbcOperations extends Object; // Counterpart to NamedParameterJdbcOperations containing methods for performing batch updates with generated keys.\npublic class CascadingDataAccessStrategy extends Object implements DataAccessStrategy; // Delegates each method to the DataAccessStrategys passed to the constructor in turn until the first that does not throw an exception.\npublic interface DataAccessStrategy extends RelationResolver; // Abstraction for accesses to the database that should be implementable with a single SQL statement per method and relates to a single entity as opposed to JdbcAggregateOperations which provides interactions related to complete aggregates.\npublic class DefaultDataAccessStrategy extends Object implements DataAccessStrategy; // The default DataAccessStrategy is to generate SQL statements based on metadata from the entity.\npublic class DefaultJdbcTypeFactory extends Object implements JdbcTypeFactory; // A JdbcTypeFactory that performs the conversion by utilizing JdbcOperations.execute(ConnectionCallback).\npublic class DelegatingDataAccessStrategy extends Object implements DataAccessStrategy; // Delegates all method calls to an instance set after construction.\npublic class EntityRowMapper<T> extends Object implements RowMapper<T>; // Maps a ResultSet to an entity of type T, including entities referenced.\npublic final class Identifier extends Object; // Identifier represents a composite id of an entity that may be composed of one or many parts.\n@FunctionalInterface public static interface Identifier.IdentifierConsumer; // Represents an operation that accepts identifier key parts (name, value and target type) defining a contract to consume Identifier values.\npublic class InsertStrategyFactory extends Object; // Factory which selects and builds the appropriate InsertStrategy or BatchInsertStrategy based on whether the insert is expected to generate ids.\npublic final class InsertSubject<T> extends Object; // The subject of an insert, described by the entity instance and its Identifier, where identifier contains information about data that needs to be considered for the insert but which is not part of the entity.\npublic interface JdbcArrayColumns extends ArrayColumns; // ArrayColumns that offer JDBC-specific functionality.\npublic static enum JdbcArrayColumns.DefaultSupport extends Enum<JdbcArrayColumns.DefaultSupport> implements JdbcArrayColumns; // Default ArrayColumns implementation for dialects that do not support array-typed columns.\n", "des": "JDBC-specific conversion classes."}
{"index": 2671, "repo": "spring-data-jdbc-3.1.2", "code": "package query;\n\npublic abstract class AbstractJdbcQuery extends Object implements RepositoryQuery; // Base class for queries based on a repository method.\nprotected static class AbstractJdbcQuery.ConvertingRowMapper<T> extends Object implements RowMapper<Object>; // Delegating RowMapper that reads a row into T and converts it afterwards into Object.\npublic static interface AbstractJdbcQuery.RowMapperFactory; // Factory to create a RowMapper for a given class.\npublic class JdbcQueryMethod extends QueryMethod; // QueryMethod implementation that implements a method by executing the query from a Query annotation on that method.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying; // Indicates a method should be regarded as modifying query.\npublic class PartTreeJdbcQuery extends AbstractJdbcQuery; // An AbstractJdbcQuery implementation based on a PartTree.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface Query; // Annotation to provide SQL statements that will get used for executing the method.\npublic class StringBasedJdbcQuery extends AbstractJdbcQuery; // A query to be executed based on a repository method, it's annotated SQL query and the arguments provided to the method.\n", "des": "Query derivation mechanism for JDBC specific repositories."}
{"index": 2672, "repo": "spring-r2dbc-6.0.11", "code": "package r2dbc;\n\npackage r2dbc.connection; // Provides a utility class for easy ConnectionFactory access, a ReactiveTransactionManager for a single ConnectionFactory, and various simple ConnectionFactory implementations.\npackage r2dbc.core; // Core domain types around DatabaseClient.\npublic class BadSqlGrammarException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Exception thrown when SQL specified is invalid.\npublic class UncategorizedR2dbcException extends org.springframework.dao.UncategorizedDataAccessException; // Exception thrown when we can't classify a R2dbcException into one of our generic data access exceptions.\n", "des": "The classes in this package make R2DBC easier to use and reduce the likelihood of common errors."}
{"index": 2673, "repo": "spring-r2dbc-6.0.11", "code": "package connection;\n\npackage connection.init; // Provides extensible support for initializing databases through scripts.\npackage connection.lookup; // Provides a strategy for looking up R2DBC ConnectionFactories by name.\npublic abstract class ConnectionFactoryUtils extends Object; // Helper class that provides static methods for obtaining R2DBC Connections from a ConnectionFactory.\npublic class ConnectionHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a R2DBC Connection.\npublic class DelegatingConnectionFactory extends Object implements ConnectionFactory, Wrapped<ConnectionFactory>; // R2DBC ConnectionFactory implementation that delegates all calls to a given target ConnectionFactory.\npublic class R2dbcTransactionManager extends org.springframework.transaction.reactive.AbstractReactiveTransactionManager implements org.springframework.beans.factory.InitializingBean; // ReactiveTransactionManager implementation for a single R2DBC ConnectionFactory.\npublic class SingleConnectionFactory extends DelegatingConnectionFactory implements org.springframework.beans.factory.DisposableBean; // Implementation of DelegatingConnectionFactory that wraps a single R2DBC Connection which is not closed after use.\npublic class TransactionAwareConnectionFactoryProxy extends DelegatingConnectionFactory; // Proxy for a target R2DBC ConnectionFactory, adding awareness of Spring-managed transactions.\n", "des": "Provides a utility class for easy ConnectionFactory access, a ReactiveTransactionManager for a single ConnectionFactory, and various simple ConnectionFactory implementations."}
{"index": 2674, "repo": "spring-r2dbc-6.0.11", "code": "package init;\n\npublic class CannotReadScriptException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be read.\npublic class CompositeDatabasePopulator extends Object implements DatabasePopulator; // Composite DatabasePopulator that delegates to a list of given DatabasePopulator implementations, executing all scripts.\npublic class ConnectionFactoryInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Used to set up a database during initialization and clean up a database during destruction.\n@FunctionalInterface public interface DatabasePopulator; // Strategy used to populate, initialize, or clean up a database.\npublic class ResourceDatabasePopulator extends Object implements DatabasePopulator; // Populates, initializes, or cleans up a database using SQL scripts defined in external resources.\npublic abstract class ScriptException extends org.springframework.dao.DataAccessException; // Root of the hierarchy of data access exceptions that are related to processing of SQL scripts.\npublic class ScriptParseException extends ScriptException; // Thrown by ScriptUtils if an SQL script cannot be properly parsed.\npublic class ScriptStatementFailedException extends ScriptException; // Thrown by ScriptUtils if a statement in an SQL script failed when executing it against the target database.\npublic abstract class ScriptUtils extends Object; // Generic utility methods for working with SQL scripts in conjunction with R2DBC.\npublic class UncategorizedScriptException extends ScriptException; // Thrown when we cannot determine anything more specific than \"something went wrong while processing an SQL script\": for example, an R2dbcException from R2DBC that we cannot pinpoint more precisely.\n", "des": "Provides extensible support for initializing databases through scripts."}
{"index": 2675, "repo": "spring-r2dbc-6.0.11", "code": "package lookup;\n\npublic abstract class AbstractRoutingConnectionFactory extends Object implements ConnectionFactory, org.springframework.beans.factory.InitializingBean; // Abstract ConnectionFactory implementation that routes AbstractRoutingConnectionFactory.create() calls to one of various target factories based on a lookup key.\npublic class BeanFactoryConnectionFactoryLookup extends Object implements ConnectionFactoryLookup, org.springframework.beans.factory.BeanFactoryAware; // ConnectionFactoryLookup implementation based on a Spring BeanFactory.\n@FunctionalInterface public interface ConnectionFactoryLookup; // Strategy interface for looking up ConnectionFactory by name.\npublic class ConnectionFactoryLookupFailureException extends org.springframework.dao.NonTransientDataAccessException; // Exception to be thrown by a ConnectionFactoryLookup implementation, indicating that the specified ConnectionFactory could not be obtained.\npublic class MapConnectionFactoryLookup extends Object implements ConnectionFactoryLookup; // Simple ConnectionFactoryLookup implementation that relies on a map for doing lookups.\npublic class SingleConnectionFactoryLookup extends Object implements ConnectionFactoryLookup; // An implementation of ConnectionFactoryLookup that simply wraps a single given ConnectionFactory returned for any connection factory name.\n", "des": "Provides a strategy for looking up R2DBC ConnectionFactories by name."}
{"index": 2676, "repo": "spring-r2dbc-6.0.11", "code": "package core;\n\npackage core.binding; // Classes providing an abstraction over SQL bind markers.\npublic class ColumnMapRowMapper extends Object implements BiFunction<Row,RowMetadata,Map<String,Object>>; // Mapping function implementation that creates a java.util.Map for each row, representing all columns as key-value pairs: one entry for each column, with the column name as key.\npublic interface ConnectionAccessor; // Interface declaring methods that accept callback Function to operate within the scope of a Connection.\npublic interface DatabaseClient extends ConnectionAccessor; // A non-blocking, reactive client for performing database calls with Reactive Streams back pressure.\npublic static interface DatabaseClient.Builder; // A mutable builder for creating a DatabaseClient.\npublic static interface DatabaseClient.GenericExecuteSpec; // Contract for specifying an SQL call along with options leading to the execution.\n@FunctionalInterface public interface ExecuteFunction; // Represents a function that executes a Statement for a (delayed) Result stream.\npublic interface FetchSpec<T> extends RowsFetchSpec<T>, UpdatedRowsFetchSpec; // Union type for fetching results.\n@Deprecated(since=\"6.0\") public final class Parameter extends Object;\npublic interface PreparedOperation<T> extends QueryOperation; // Extension to QueryOperation for a prepared SQL query Supplier with bound parameters.\n@FunctionalInterface public interface QueryOperation extends Supplier<String>; // Interface declaring a query operation that can be represented with a query string.\npublic interface RowsFetchSpec<T>; // Contract for fetching tabular results.\npublic interface SqlProvider; // Interface to be implemented by objects that can provide SQL strings.\n@FunctionalInterface public interface StatementFilterFunction; // Represents a function that filters an ExecuteFunction.\npublic interface UpdatedRowsFetchSpec; // Contract for fetching the number of affected rows.\n", "des": "Core domain types around DatabaseClient."}
{"index": 2677, "repo": "spring-r2dbc-6.0.11", "code": "package binding;\n\npublic class Bindings extends Object implements Iterable<Bindings.Binding>; // Value object representing value and null bindings for a Statement using BindMarkers.\npublic abstract static class Bindings.Binding extends Object; // Base class for value objects representing a value or a NULL binding.\npublic interface BindMarker; // A bind marker represents a single bindable parameter within a query.\n@FunctionalInterface public interface BindMarkers; // Bind markers represent placeholders in SQL queries for substitution for an actual parameter.\n@FunctionalInterface public interface BindMarkersFactory; // This class creates new BindMarkers instances to bind parameter to a specific Statement.\npublic final class BindMarkersFactoryResolver extends Object; // Resolves a BindMarkersFactory from a ConnectionFactory using BindMarkersFactoryResolver.BindMarkerFactoryProvider.\n@FunctionalInterface public static interface BindMarkersFactoryResolver.BindMarkerFactoryProvider; // SPI to extend Spring's default R2DBC BindMarkersFactory discovery mechanism.\npublic static class BindMarkersFactoryResolver.NoBindMarkersFactoryException extends org.springframework.dao.NonTransientDataAccessException; // Exception thrown when BindMarkersFactoryResolver cannot resolve a BindMarkersFactory.\npublic interface BindTarget; // Target to apply bindings to.\npublic class MutableBindings extends Bindings; // Mutable extension to Bindings for Value and null bindings for a Statement using BindMarkers.\n", "des": "Classes providing an abstraction over SQL bind markers."}
{"index": 2678, "repo": "spring-session-core-3.1.1", "code": "package session;\n\npublic class SpringSessionWebSessionStore<S extends Session> extends Object implements org.springframework.web.server.session.WebSessionStore; // The WebSessionStore implementation that provides the WebSession implementation backed by a Session returned by the ReactiveSessionRepository.\n", "des": "Spring Session reactive web support."}
{"index": 2679, "repo": "spring-data-jpa-3.1.2", "code": "package convert;\n\npackage convert.threeten; // Spring Data JPA specific JSR-310 converters.\npublic class QueryByExamplePredicateBuilder extends Object; // QueryByExamplePredicateBuilder creates a single CriteriaBuilder.and(Predicate...) combined Predicate for a given Example.\n", "des": "Spring Data JPA specific converter infrastructure."}
{"index": 2680, "repo": "spring-data-jpa-3.1.2", "code": "package threeten;\n\npublic class Jsr310JpaConverters extends Object; // JPA 2.1 converters to turn JSR-310 types into legacy Dates.\npublic static class Jsr310JpaConverters.InstantConverter extends Object implements jakarta.persistence.AttributeConverter<Instant,Timestamp>;\npublic static class Jsr310JpaConverters.LocalDateConverter extends Object implements jakarta.persistence.AttributeConverter<LocalDate,Date>;\npublic static class Jsr310JpaConverters.LocalDateTimeConverter extends Object implements jakarta.persistence.AttributeConverter<LocalDateTime,Date>;\npublic static class Jsr310JpaConverters.LocalTimeConverter extends Object implements jakarta.persistence.AttributeConverter<LocalTime,Date>;\npublic static class Jsr310JpaConverters.ZoneIdConverter extends Object implements jakarta.persistence.AttributeConverter<ZoneId,String>;\n", "des": "Spring Data JPA specific JSR-310 converters."}
{"index": 2681, "repo": "spring-data-jpa-3.1.2", "code": "package domain;\n\npackage domain.support; // Implementation classes for auditing with JPA.\n@MappedSuperclass public abstract class AbstractAuditable<U,PK extends Serializable> extends AbstractPersistable<PK> implements Auditable<U,PK,LocalDateTime>; // Abstract base class for auditable entities.\n@Generated(\"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\") public abstract class AbstractAuditable_ extends AbstractPersistable_;\n@MappedSuperclass public abstract class AbstractPersistable<PK extends Serializable> extends Object implements Persistable<PK>; // Abstract base class for entities.\n@Generated(\"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\") public abstract class AbstractPersistable_ extends Object;\npublic class JpaSort extends Sort; // Sort option for queries that wraps JPA meta-model Attributes for sorting.\npublic static class JpaSort.JpaOrder extends Sort.Order; // Custom Sort.Order that keeps a flag to indicate unsafe property handling, i.e. the String provided is not necessarily a property but can be an arbitrary expression piped into the query execution.\npublic static class JpaSort.Path<T,S> extends Object; // Value object to abstract a collection of Attributes.\n@Generated(\"com.querydsl.codegen.DefaultSupertypeSerializer\") public class QAbstractAuditable extends com.querydsl.core.types.dsl.EntityPathBase<AbstractAuditable<?,? extends Serializable>>; // QAbstractAuditable is a Querydsl query type for AbstractAuditable\n@Generated(\"com.querydsl.codegen.DefaultSupertypeSerializer\") public class QAbstractPersistable extends com.querydsl.core.types.dsl.EntityPathBase<AbstractPersistable<? extends Serializable>>; // QAbstractPersistable is a Querydsl query type for AbstractPersistable\npublic interface Specification<T> extends Serializable; // Specification in the sense of Domain Driven Design.\n", "des": "JPA specific support classes to implement domain classes."}
{"index": 2682, "repo": "spring-data-jpa-3.1.2", "code": "package support;\n\npublic class AuditingBeanFactoryPostProcessor extends Object implements BeanFactoryPostProcessor; // BeanFactoryPostProcessor that ensures that the AnnotationBeanConfigurerAspect aspect is up and running before the EntityManagerFactory gets created as this already instantiates entity listeners and we need to get injection into Configurable to work in them.\n@Configurable public class AuditingEntityListener extends Object; // JPA entity listener to capture auditing information on persisting and updating entities.\n", "des": "Implementation classes for auditing with JPA."}
{"index": 2683, "repo": "spring-data-jpa-3.1.2", "code": "package mapping;\n\npublic class JpaMetamodelMappingContext extends AbstractMappingContext<org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?>,JpaPersistentProperty>; // MappingContext implementation based on a Jpa Metamodel.\npublic interface JpaPersistentEntity<T> extends PersistentEntity<T,JpaPersistentProperty>; // Interface for a JPA-specific entity.\npublic interface JpaPersistentProperty extends PersistentProperty<JpaPersistentProperty>; // Interface for a JPA-specific PersistentProperty.\n", "des": "JPA specific support classes for the Spring Data mapping subsystem."}
{"index": 2684, "repo": "spring-data-jpa-3.1.2", "code": "package provider;\n\npublic abstract class HibernateUtils extends Object; // Utility functions to work with Hibernate.\npublic enum PersistenceProvider extends Enum<PersistenceProvider> implements QueryExtractor, ProxyIdAccessor, QueryComment; // Enumeration representing persistence providers to be used.\npublic interface ProxyIdAccessor; // Interface for a persistence provider specific accessor of identifiers held in proxies.\npublic interface QueryComment; // Interface to hide different implementations of query hints that insert comments into a Query.\npublic interface QueryExtractor; // Interface to hide different implementations to extract the original JPA query string from a Query.\n", "des": "JPA provider-specific utilities."}
{"index": 2685, "repo": "spring-data-jpa-3.1.2", "code": "package repository;\n\npackage repository.cdi; // CDI support for Spring Data JPA Repositories.\npackage repository.config; // Classes for JPA namespace configuration.\npackage repository.query; // Query implementation to execute queries against JPA.\npackage repository.support; // JPA repository implementations.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface EntityGraph; // Annotation to configure the JPA 2.1 EntityGraphs that should be used on repository methods.\npublic static enum EntityGraph.EntityGraphType extends Enum<EntityGraph.EntityGraphType>; // Enum for JPA 2.1 EntityGraph types.\npublic interface JpaContext; // Interface for components to provide useful information about the current JPA setup within the current ApplicationContext.\n@NoRepositoryBean public interface JpaRepository<T,ID> extends ListCrudRepository<T,ID>, ListPagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T>; // JPA specific extension of Repository.\npublic interface JpaSpecificationExecutor<T>; // Interface to allow execution of Specifications based on the JPA criteria API.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Lock; // Annotation used to specify the LockModeType to be used when executing the query.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Meta; // Annotation to assign metadata to repository operations.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying; // Indicates a query method should be considered as modifying query as that changes the way it needs to be executed.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Query; // Annotation to declare finder queries directly on repository methods.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface QueryHints; // Wrapper annotation to allow QueryHint annotations to be bound to methods.\n@FunctionalInterface public interface QueryRewriter; // Callback to rewrite a query and apply sorting and pagination settings that cannot be applied based on a regularly detectable scheme.\n", "des": "Interfaces and annotations for JPA specific repositories."}
{"index": 2686, "repo": "spring-data-jpa-3.1.2", "code": "package cdi;\n\npublic class BeanManagerQueryRewriterProvider extends Object implements QueryRewriterProvider; // A BeanManager-based QueryRewriterProvider.\npublic class JpaRepositoryExtension extends CdiRepositoryExtensionSupport; // A portable CDI extension which registers beans for Spring Data JPA repositories.\n", "des": "CDI support for Spring Data JPA Repositories."}
{"index": 2687, "repo": "spring-data-jpa-3.1.2", "code": "package config;\n\npublic class AuditingBeanDefinitionParser extends Object implements BeanDefinitionParser; // BeanDefinitionParser for the auditing element.\n@Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.jpa.repository.config.JpaAuditingRegistrar.class) public @interface EnableJpaAuditing; // Annotation to enable auditing in JPA via annotation configuration.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrar.class) public @interface EnableJpaRepositories; // Annotation to enable JPA repositories.\npublic class JpaMetamodelMappingContextFactoryBean extends AbstractFactoryBean<JpaMetamodelMappingContext> implements ApplicationContextAware; // FactoryBean to setup JpaMetamodelMappingContext instances from Spring configuration.\npublic class JpaRepositoryConfigExtension extends RepositoryConfigurationExtensionSupport; // JPA specific configuration extension parsing custom attributes from the XML namespace and EnableJpaRepositories annotation.\npublic static class JpaRepositoryConfigExtension.JpaRepositoryRegistrationAotProcessor extends RepositoryRegistrationAotProcessor; // A RepositoryRegistrationAotProcessor implementation that maintains aot repository setup but skips domain type inspection which is handled by the core framework support for PersistenceManagedTypes.\npublic class JpaRepositoryNameSpaceHandler extends NamespaceHandlerSupport; // Simple namespace handler for repositories namespace.\n", "des": "Classes for JPA namespace configuration."}
{"index": 2688, "repo": "spring-data-jpa-3.1.2", "code": "package query;\n\npublic abstract class AbstractJpaQuery extends Object implements RepositoryQuery; // Abstract base class to implement RepositoryQuerys.\npublic class BadJpqlGrammarException extends InvalidDataAccessResourceUsageException; // An exception thrown if the JPQL query is invalid.\npublic class BeanFactoryQueryRewriterProvider extends Object implements QueryRewriterProvider; // A BeanFactory-based QueryRewriterProvider.\npublic class DefaultJpaEntityMetadata<T> extends Object implements JpaEntityMetadata<T>; // Default implementation for JpaEntityMetadata.\npublic class DefaultJpaQueryMethodFactory extends Object implements JpaQueryMethodFactory; // A factory for creating JpaQueryMethod instances.\npublic class DefaultQueryEnhancer extends Object implements QueryEnhancer; // The implementation of QueryEnhancer using QueryUtils.\npublic class DelegatingQueryRewriter extends Object implements QueryRewriter; // Delegating QueryRewriter that delegates rewrite calls to a delegate provided by a Supplier.\npublic final class EscapeCharacter extends Object; // A value type encapsulating an escape character for LIKE queries and the actually usage of it in escaping Strings.\npublic class InvalidJpaQueryMethodException extends RuntimeException; // Signals that we encountered an invalid query method.\npublic class Jpa21Utils extends Object; // Utils for bridging various JPA 2.1 features.\npublic class JpaCountQueryCreator extends JpaQueryCreator; // Special JpaQueryCreator that creates a count projecting query.\npublic class JpaEntityGraph extends Object; // EntityGraph configuration for JPA 2.1 EntityGraphs.\npublic interface JpaEntityMetadata<T> extends EntityMetadata<T>; // JPA specific extension of EntityMetadata.\npublic class JpaParameters extends Parameters<JpaParameters,JpaParameters.JpaParameter>; // Custom extension of Parameters discovering additional query parameter annotations.\npublic static class JpaParameters.JpaParameter extends Parameter; // Custom Parameter implementation adding parameters of type Temporal to the special ones.\npublic class JpaParametersParameterAccessor extends ParametersParameterAccessor; // ParameterAccessor based on an Parameters instance.\npublic class JpaQueryCreator extends AbstractQueryCreator<jakarta.persistence.criteria.CriteriaQuery<? extends Object>,jakarta.persistence.criteria.Predicate>; // Query creator to create a CriteriaQuery from a PartTree.\n", "des": "Query implementation to execute queries against JPA."}
{"index": 2689, "repo": "spring-data-jpa-3.1.2", "code": "package support;\n\npublic interface CrudMethodMetadata; // Interface to abstract CrudMethodMetadata that provide the LockModeType to be used for query execution.\npublic class DefaultJpaContext extends Object implements JpaContext; // Default implementation of JpaContext.\npublic class EntityManagerBeanDefinitionRegistrarPostProcessor extends Object implements BeanFactoryPostProcessor, Ordered; // BeanFactoryPostProcessor to register a SharedEntityManagerCreator for every EntityManagerFactory bean definition found in the application context to enable autowiring EntityManager instances into constructor arguments.\npublic interface JpaEntityInformation<T,ID> extends EntityInformation<T,ID>, JpaEntityMetadata<T>; // Extension of EntityInformation to capture additional JPA specific information about entities.\npublic abstract class JpaEntityInformationSupport<T,ID> extends AbstractEntityInformation<T,ID> implements JpaEntityInformation<T,ID>; // Base class for JpaEntityInformation implementations to share common method implementations.\npublic class JpaEvaluationContextExtension extends Object implements EvaluationContextExtension; // EvaluationContextExtension to register EscapeCharacter as root object to essentially expose an expose(…) function to SpEL.\npublic static class JpaEvaluationContextExtension.JpaRootObject extends Object;\npublic class JpaMetamodelEntityInformation<T,ID> extends JpaEntityInformationSupport<T,ID>; // Implementation of EntityInformation that uses JPA Metamodel to find the domain class' id field.\npublic class JpaPersistableEntityInformation<T extends Persistable<ID>,ID> extends JpaMetamodelEntityInformation<T,ID>; // Extension of JpaMetamodelEntityInformation that consideres methods of Persistable to lookup the id.\npublic class JpaRepositoryFactory extends RepositoryFactorySupport; // JPA specific generic repository factory.\npublic class JpaRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends TransactionalRepositoryFactoryBeanSupport<T,S,ID>; // Special adapter for Springs FactoryBean interface to allow easy setup of repository factories via Spring configuration.\n@NoRepositoryBean public interface JpaRepositoryImplementation<T,ID> extends JpaRepository<T,ID>, JpaSpecificationExecutor<T>; // SPI interface to be implemented by JpaRepository implementations.\n", "des": "JPA repository implementations."}
{"index": 2690, "repo": "spring-data-jpa-3.1.2", "code": "package support;\n\npublic class ClasspathScanningPersistenceUnitPostProcessor extends Object implements PersistenceUnitPostProcessor, ResourceLoaderAware, EnvironmentAware; // PersistenceUnitPostProcessor that will scan for classes annotated with Entity or MappedSuperclass and add them to the PersistenceUnit post processed.\npublic class MergingPersistenceUnitManager extends DefaultPersistenceUnitManager; // Extends DefaultPersistenceUnitManager to merge configurations of one persistence unit residing in multiple persistence.xml files into one.\npublic final class PageableUtils extends Object; // Provide a set of utility methods to support Pageables.\n", "des": "Various helper classes useful when working with JPA."}
{"index": 2691, "repo": "spring-data-jpa-3.1.2", "code": "package util;\n\npublic final class BeanDefinitionUtils extends Object; // Utility methods to work with BeanDefinition instances from BeanFactoryPostProcessors.\npublic static class BeanDefinitionUtils.EntityManagerFactoryBeanDefinition extends Object; // Value object to represent a BeanDefinition for an EntityManagerFactory with a dedicated bean name.\npublic class JpaMetamodel extends Object; // Wrapper around the JPA Metamodel to be able to apply some fixes against bugs in provider implementations.\n", "des": "Spring Data JPA utilities."}
{"index": 2692, "repo": "spring-integration-http-6.1.2", "code": "package http;\n\npackage http.config; // Provides classes for configuration - parsers, namespace handlers.\npackage http.converter; // Provides classes supporting message conversion.\npackage http.dsl; // Provides HTTP Components support for Spring Integration Java DSL.\npackage http.inbound; // Provides classes supporting inbound endpoints.\npackage http.management; // Provides classes related to management support.\npackage http.multipart; // Provides classes supporting multipart HTTP requests.\npackage http.outbound; // Provides classes supporting outbound endpoints.\npackage http.support; // Provides classes to support Http endpoints, including header mapping.\npublic abstract class HttpHeaders extends Object;\n", "des": "Base package for Http support."}
{"index": 2693, "repo": "spring-integration-http-6.1.2", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Import(IntegrationGraphControllerRegistrar.class) public @interface EnableIntegrationGraphController; // Enables the IntegrationGraphController if org.springframework.web.servlet.DispatcherServlet or org.springframework.web.reactive.DispatcherHandler is present in the classpath.\npublic final class HttpContextUtils extends Object; // Utility class for accessing HTTP integration components from the BeanFactory.\npublic class HttpInboundEndpointParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'inbound-channel-adapter' and 'inbound-gateway' elements of the 'http' namespace.\npublic class HttpIntegrationConfigurationInitializer extends Object implements org.springframework.integration.config.IntegrationConfigurationInitializer; // The HTTP Integration infrastructure beanFactory initializer.\npublic class HttpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's http namespace.\npublic class HttpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the 'outbound-channel-adapter' element of the http namespace.\npublic class HttpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the 'outbound-gateway' element of the http namespace.\npublic class IntegrationGraphControllerParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // The BeanDefinitionParser for the <int-http:graph-controller> component.\npublic class IntegrationGraphControllerRegistrar extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // Registers the necessary beans for EnableIntegrationGraphController.\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2694, "repo": "spring-integration-http-6.1.2", "code": "package converter;\n\npublic class MultipartAwareFormHttpMessageConverter extends Object implements org.springframework.http.converter.HttpMessageConverter<org.springframework.util.MultiValueMap<String,?>>; // An HttpMessageConverter implementation that delegates to an instance of AllEncompassingFormHttpMessageConverter while adding the capability to read multipart/form-data content in an HTTP request.\npublic class SerializingHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter<Serializable>; // An HttpMessageConverter implementation for Serializable instances.\n", "des": "Provides classes supporting message conversion."}
{"index": 2695, "repo": "spring-integration-http-6.1.2", "code": "package dsl;\n\npublic abstract class BaseHttpInboundEndpointSpec<S extends BaseHttpInboundEndpointSpec<S,E>,E extends HttpRequestHandlingEndpointSupport> extends HttpInboundEndpointSupportSpec<S,E>; // A base MessagingGatewaySpec for the HttpRequestHandlingEndpointSupport implementations.\npublic abstract class BaseHttpMessageHandlerSpec<S extends BaseHttpMessageHandlerSpec<S,E>,E extends AbstractHttpRequestExecutingMessageHandler> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E> implements org.springframework.integration.dsl.ComponentsRegistration; // The base MessageHandlerSpec for AbstractHttpRequestExecutingMessageHandlers.\npublic final class Http extends Object; // The HTTP components Factory.\npublic class HttpControllerEndpointSpec extends BaseHttpInboundEndpointSpec<HttpControllerEndpointSpec,HttpRequestHandlingController>; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingController.\npublic abstract class HttpInboundEndpointSupportSpec<S extends HttpInboundEndpointSupportSpec<S,E>,E extends BaseHttpInboundEndpoint> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,E> implements org.springframework.integration.dsl.ComponentsRegistration;\npublic static final class HttpInboundEndpointSupportSpec.CrossOriginSpec extends Object; // A fluent API for the CrossOrigin.\npublic static final class HttpInboundEndpointSupportSpec.RequestMappingSpec extends Object; // A fluent API for the RequestMapping.\npublic class HttpMessageHandlerSpec extends BaseHttpMessageHandlerSpec<HttpMessageHandlerSpec,HttpRequestExecutingMessageHandler>; // The BaseHttpMessageHandlerSpec implementation for the HttpRequestExecutingMessageHandler.\npublic class HttpRequestHandlerEndpointSpec extends BaseHttpInboundEndpointSpec<HttpRequestHandlerEndpointSpec,HttpRequestHandlingMessagingGateway>; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingMessagingGateway.\n", "des": "Provides HTTP Components support for Spring Integration Java DSL."}
{"index": 2696, "repo": "spring-integration-http-6.1.2", "code": "package inbound;\n\npublic class BaseHttpInboundEndpoint extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.integration.context.OrderlyShutdownCapable; // The MessagingGatewaySupport extension for HTTP Inbound endpoints with basic properties.\npublic class CrossOrigin extends Object; // The mapping to permit cross origin requests (CORS) for HttpRequestHandlingEndpointSupport.\npublic class HttpRequestHandlingController extends HttpRequestHandlingEndpointSupport implements org.springframework.web.servlet.mvc.Controller; // Inbound HTTP endpoint that implements Spring's Controller interface to be used with a DispatcherServlet front controller.\npublic abstract class HttpRequestHandlingEndpointSupport extends BaseHttpInboundEndpoint; // Base class for HTTP request handling endpoints.\npublic class HttpRequestHandlingMessagingGateway extends HttpRequestHandlingEndpointSupport implements org.springframework.web.HttpRequestHandler; // Inbound Messaging Gateway that handles HTTP Requests.\npublic final class IntegrationRequestMappingHandlerMapping extends org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping implements org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor; // The HandlerMapping implementation that detects and registers RequestMappingInfos for HttpRequestHandlingEndpointSupport from a Spring Integration HTTP configuration of <inbound-channel-adapter/> and <inbound-gateway/> elements.\npublic class RequestMapping extends Object; // Class for mapping web requests onto specific HttpRequestHandlingEndpointSupport.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2697, "repo": "spring-integration-http-6.1.2", "code": "package management;\n\n@RestController @RequestMapping(\"${spring.integration.graph.controller.request.mapping.path:/integration}\") public class IntegrationGraphController extends Object; // The REST Controller to provide the management API over IntegrationGraphServer.\n", "des": "Provides classes related to management support."}
{"index": 2698, "repo": "spring-integration-http-6.1.2", "code": "package multipart;\n\npublic class DefaultMultipartFileReader extends Object implements MultipartFileReader<org.springframework.web.multipart.MultipartFile>; // MultipartFileReader implementation that reads the MultipartFile content directly into a new MultipartFile instance that is not restricted to the HTTP request scope.\npublic class FileCopyingMultipartFileReader extends Object implements MultipartFileReader<org.springframework.web.multipart.MultipartFile>; // MultipartFileReader implementation that copies the MultipartFile's content to a new temporary File in the specified directory.\npublic interface MultipartFileReader<T>; // Strategy for reading MultipartFile content.\npublic class MultipartHttpInputMessage extends org.springframework.http.server.ServletServerHttpRequest implements org.springframework.web.multipart.MultipartRequest;\npublic class SimpleMultipartFileReader extends Object implements MultipartFileReader<Object>; // MultipartFileReader implementation that does not maintain metadata from the original MultipartFile instance.\npublic class UploadedMultipartFile extends Object implements org.springframework.web.multipart.MultipartFile; // A MultipartFile implementation that represents an uploaded File.\n", "des": "Provides classes supporting multipart HTTP requests."}
{"index": 2699, "repo": "spring-integration-http-6.1.2", "code": "package outbound;\n\npublic abstract class AbstractHttpRequestExecutingMessageHandler extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // Base class for http outbound adapter/gateway.\npublic class HttpRequestExecutingMessageHandler extends AbstractHttpRequestExecutingMessageHandler; // A MessageHandler implementation that executes HTTP requests by delegating to a RestTemplate instance.\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 2700, "repo": "spring-integration-http-6.1.2", "code": "package support;\n\npublic class DefaultHttpHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<org.springframework.http.HttpHeaders>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Default HeaderMapper implementation for HTTP.\npublic class IntegrationWebExchangeBindException extends org.springframework.web.bind.support.WebExchangeBindException; // A WebExchangeBindException extension for validation error with a failed message context.\n", "des": "Provides classes to support Http endpoints, including header mapping."}
{"index": 2701, "repo": "spring-integration-ftp-6.1.2", "code": "package config;\n\npublic class FtpInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileInboundChannelAdapterParser; // Parser for the FTP 'inbound-channel-adapter' element.\npublic class FtpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Provides namespace support for using FTP\npublic class FtpOutboundChannelAdapterParser extends org.springframework.integration.file.config.RemoteFileOutboundChannelAdapterParser; // Parser for FTP Outbound Channel Adapters.\npublic class FtpOutboundGatewayParser extends org.springframework.integration.file.config.AbstractRemoteFileOutboundGatewayParser;\npublic class FtpStreamingInboundChannelAdapterParser extends org.springframework.integration.file.config.AbstractRemoteFileStreamingInboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2702, "repo": "spring-integration-ftp-6.1.2", "code": "package dsl;\n\npublic final class Ftp extends Object; // The factory for FTP components.\npublic class FtpInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpInboundChannelAdapterSpec,FtpInboundFileSynchronizingMessageSource>; // A RemoteFileInboundChannelAdapterSpec for an FtpInboundFileSynchronizingMessageSource.\npublic class FtpMessageHandlerSpec extends org.springframework.integration.file.dsl.FileTransferringMessageHandlerSpec<org.apache.commons.net.ftp.FTPFile,FtpMessageHandlerSpec>; // A FileTransferringMessageHandlerSpec for FTP.\npublic class FtpOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<org.apache.commons.net.ftp.FTPFile,FtpOutboundGatewaySpec>; // A RemoteFileOutboundGatewaySpec for FTP.\npublic class FtpStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpStreamingInboundChannelAdapterSpec,FtpStreamingMessageSource>; // A RemoteFileStreamingInboundChannelAdapterSpec for a FtpStreamingMessageSource.\n", "des": "Provides FTP Components for the Java DSL."}
{"index": 2703, "repo": "spring-integration-ftp-6.1.2", "code": "package filters;\n\npublic class FtpPersistentAcceptOnceFileListFilter extends org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<org.apache.commons.net.ftp.FTPFile>; // Persistent file list filter using the server's file timestamp to detect if we've already 'seen' this file.\npublic class FtpRegexPatternFileListFilter extends org.springframework.integration.file.filters.AbstractRegexPatternFileListFilter<org.apache.commons.net.ftp.FTPFile>; // Implementation of AbstractRegexPatternFileListFilter for FTP.\npublic class FtpSimplePatternFileListFilter extends org.springframework.integration.file.filters.AbstractSimplePatternFileListFilter<org.apache.commons.net.ftp.FTPFile>; // Implementation of AbstractSimplePatternFileListFilter for FTP.\npublic class FtpSystemMarkerFilePresentFileListFilter extends org.springframework.integration.file.filters.AbstractMarkerFilePresentFileListFilter<org.apache.commons.net.ftp.FTPFile>; // FTP implementation of AbstractMarkerFilePresentFileListFilter.\n", "des": "Provides classes supporting FTP file filtering."}
{"index": 2704, "repo": "spring-integration-ftp-6.1.2", "code": "package gateway;\n\npublic class FtpOutboundGateway extends org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway<org.apache.commons.net.ftp.FTPFile>; // Outbound Gateway for performing remote file operations via FTP/FTPS.\n", "des": "Provides classes supporting FTP gateways."}
{"index": 2705, "repo": "spring-integration-ftp-6.1.2", "code": "package inbound;\n\npublic class FtpInboundFileSynchronizer extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<org.apache.commons.net.ftp.FTPFile>; // An implementation of AbstractInboundFileSynchronizer for FTP.\npublic class FtpInboundFileSynchronizingMessageSource extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<org.apache.commons.net.ftp.FTPFile>; // A MessageSource implementation for FTP.\npublic class FtpStreamingMessageSource extends org.springframework.integration.file.remote.AbstractRemoteFileStreamingMessageSource<org.apache.commons.net.ftp.FTPFile>; // Message source for streaming FTP remote file contents.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2706, "repo": "spring-integration-ftp-6.1.2", "code": "package outbound;\n\npublic class FtpMessageHandler extends org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<org.apache.commons.net.ftp.FTPFile>; // The FTP specific FileTransferringMessageHandler extension.\n", "des": "Provides classes for the FTP outbound channel adapter."}
{"index": 2707, "repo": "spring-integration-ftp-6.1.2", "code": "package server;\n\npublic abstract class ApacheMinaFtpEvent extends org.springframework.integration.file.remote.server.FileServerEvent; // ApplicationEvent generated from Apache Mina ftp events.\npublic class ApacheMinaFtplet extends org.apache.ftpserver.ftplet.DefaultFtplet implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // A listener for FTP events emitted by an Apache Mina ftp server.\npublic class DirectoryCreatedEvent extends FtpRequestEvent; // An event emitted when a directory is created.\npublic class FileWrittenEvent extends FtpRequestEvent; // An event that is emitted when a file is written.\npublic abstract class FtpRequestEvent extends ApacheMinaFtpEvent; // Base class for all events having an FtpRequest.\npublic class PathMovedEvent extends FtpRequestEvent; // An event emitted when a path is moved.\npublic class PathRemovedEvent extends FtpRequestEvent; // An event emitted when a file or directory is removed.\npublic class SessionClosedEvent extends ApacheMinaFtpEvent; // An event emitted when a session is closed.\npublic class SessionOpenedEvent extends ApacheMinaFtpEvent; // An event emitted when a session is opened.\n", "des": "Provides classes related to FTP servers."}
{"index": 2708, "repo": "spring-integration-ftp-6.1.2", "code": "package session;\n\npublic abstract class AbstractFtpSessionFactory<T extends org.apache.commons.net.ftp.FTPClient> extends Object implements org.springframework.integration.file.remote.session.SessionFactory<org.apache.commons.net.ftp.FTPFile>; // Base class for FTP SessionFactory implementations.\npublic class DefaultFtpSessionFactory extends AbstractFtpSessionFactory<org.apache.commons.net.ftp.FTPClient>; // Default implementation of FTP SessionFactory.\npublic class DefaultFtpsSessionFactory extends AbstractFtpSessionFactory<org.apache.commons.net.ftp.FTPSClient>; // SessionFactory for FTPS.\npublic class FtpFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<org.apache.commons.net.ftp.FTPFile>; // A FileInfo implementation for FTP/FTPS.\npublic class FtpRemoteFileTemplate extends org.springframework.integration.file.remote.RemoteFileTemplate<org.apache.commons.net.ftp.FTPFile>; // FTP version of RemoteFileTemplate providing type-safe access to the underlying FTPClient object.\npublic static enum FtpRemoteFileTemplate.ExistsMode extends Enum<FtpRemoteFileTemplate.ExistsMode>; // The FtpRemoteFileTemplate.exists(String) operation mode.\npublic class FtpSession extends Object implements org.springframework.integration.file.remote.session.Session<org.apache.commons.net.ftp.FTPFile>; // Implementation of Session for FTP.\n", "des": "Provides classes supporting FTP sessions."}
{"index": 2709, "repo": "spring-batch-infrastructure-5.0.2", "code": "package item;\n\npackage item.adapter; // Adapters for Plain Old Java Objects.\npackage item.amqp; // AMQP related batch components.\npackage item.data; // Spring Data related readers and writers.\npackage item.database; // Infrastructure implementations of database based item readers and writers.\npackage item.file; // Infrastructure implementations of io file concerns.\npackage item.function; // Adapters for java.util.function components.\npackage item.jms; // JMS based reader/writer and related components.\npackage item.json; // Infrastructure implementations of JSON input and output.\npackage item.kafka; // Apache Kafka related readers and writers\npackage item.ldif; // This package contains the classes required for using the LdifParser in Spring LDAP.\npackage item.mail; // Java Mail based components.\npackage item.support; // Internal support package\npackage item.util; // Infrastructure utility classes.\npackage item.validator; // Infrastructure implementations of item validator concerns.\npackage item.xml; // Infrastructure implementations of xml input and output.\npublic class Chunk<W> extends Object implements Iterable<W>, Serializable; // Encapsulation of a list of items to be processed and possibly a list of failed items to be skipped.\npublic class ExecutionContext extends Object implements Serializable; // Object representing a context for an ItemStream.\npublic interface ItemCountAware; // Marker interface indicating that an item should have the item count set on it.\n@FunctionalInterface public interface ItemProcessor<I,O>; // Interface for item transformation.\n@FunctionalInterface public interface ItemReader<T>; // Strategy interface for providing the data.\npublic abstract class ItemReaderException extends RuntimeException; // A base exception class that all exceptions thrown from an ItemReader extend.\npublic interface ItemStream; // Marker interface defining a contract for periodically storing state and restoring from that state should an error occur.\npublic class ItemStreamException extends RuntimeException; // Exception representing any errors encountered while processing a stream.\npublic interface ItemStreamReader<T> extends ItemStream, ItemReader<T>; // Convenience interface that combines ItemStream and ItemReader .\npublic abstract class ItemStreamSupport extends Object implements ItemStream; // Empty method implementation of ItemStream.\n", "des": "Infrastructure interfaces and primary dependencies for item concerns."}
{"index": 2710, "repo": "spring-batch-infrastructure-5.0.2", "code": "package adapter;\n\npublic abstract class AbstractMethodInvokingDelegator<T> extends Object implements org.springframework.beans.factory.InitializingBean; // Superclass for delegating classes which dynamically call a custom method of injected object.\npublic static class AbstractMethodInvokingDelegator.InvocationTargetThrowableWrapper extends RuntimeException; // Used to wrap a Throwable (not an Exception) thrown by a reflectively-invoked delegate.\npublic class DynamicMethodInvocationException extends RuntimeException; // Indicates an error has been encountered while trying to dynamically invoke a method e.g.\npublic class HippyMethodInvoker extends org.springframework.util.MethodInvoker; // A MethodInvoker that is a bit relaxed about its arguments.\npublic class ItemProcessorAdapter<I,O> extends AbstractMethodInvokingDelegator<O> implements ItemProcessor<I,O>; // Invokes a custom method on a delegate plain old Java object which itself processes an item.\npublic class ItemReaderAdapter<T> extends AbstractMethodInvokingDelegator<T> implements ItemReader<T>; // Invokes a custom method on a delegate plain old Java object which itself provides an item.\npublic class ItemWriterAdapter<T> extends AbstractMethodInvokingDelegator<T> implements ItemWriter<T>; // Delegates item processing to a custom method - passes the item as an argument for the delegate method.\npublic class PropertyExtractingDelegatingItemWriter<T> extends AbstractMethodInvokingDelegator<T> implements ItemWriter<T>; // Delegates processing to a custom method - extracts property values from item object and uses them as arguments for the delegate method.\n", "des": "Adapters for Plain Old Java Objects."}
{"index": 2711, "repo": "spring-batch-infrastructure-5.0.2", "code": "package amqp;\n\npackage amqp.builder; // Builders for AMQP item reader and writer.\npublic class AmqpItemReader<T> extends Object implements ItemReader<T>; // AMQP ItemReader implementation using an AmqpTemplate to receive and/or convert messages.\npublic class AmqpItemWriter<T> extends Object implements ItemWriter<T>; // AMQP ItemWriter implementation using an AmqpTemplate to send messages.\n", "des": "AMQP related batch components."}
{"index": 2712, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class AmqpItemReaderBuilder<T> extends Object; // A builder implementation for the AmqpItemReader\npublic class AmqpItemWriterBuilder<T> extends Object; // A builder implementation for the AmqpItemWriter\n", "des": "Builders for AMQP item reader and writer."}
{"index": 2713, "repo": "spring-batch-infrastructure-5.0.2", "code": "package data;\n\npackage data.builder; // Builders for Spring Data item readers and writers.\npublic abstract class AbstractPaginatedDataItemReader<T> extends AbstractItemCountingItemStreamItemReader<T>; // A base class that handles basic reading logic based on the paginated semantics of Spring Data's paginated facilities.\npublic class MongoItemReader<T> extends AbstractPaginatedDataItemReader<T> implements org.springframework.beans.factory.InitializingBean; // Restartable ItemReader that reads documents from MongoDB via a paging technique.\npublic class MongoItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean; // A ItemWriter implementation that writes to a MongoDB store using an implementation of Spring Data's MongoOperations.\n@Deprecated public class Neo4jItemReader<T> extends AbstractPaginatedDataItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n@Deprecated public class Neo4jItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean;\npublic class RepositoryItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean; // A ItemReader that reads records utilizing a PagingAndSortingRepository.\npublic class RepositoryItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean; // A ItemWriter wrapper for a CrudRepository from Spring Data.\n", "des": "Spring Data related readers and writers."}
{"index": 2714, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class MongoItemReaderBuilder<T> extends Object; // A builder implementation for the MongoItemReader\npublic class MongoItemWriterBuilder<T> extends Object; // A builder implementation for the MongoItemWriter\n@Deprecated public class Neo4jItemReaderBuilder<T> extends Object;\n@Deprecated public class Neo4jItemWriterBuilder<T> extends Object;\npublic class RepositoryItemReaderBuilder<T> extends Object; // A builder implementation for the RepositoryItemReader.\npublic class RepositoryItemWriterBuilder<T> extends Object; // A builder implementation for the RepositoryItemWriter.\npublic static class RepositoryItemWriterBuilder.RepositoryMethodReference<T> extends Object; // Establishes a proxy that will capture a the Repository and the associated methodName that will be used by the writer.\n", "des": "Builders for Spring Data item readers and writers."}
{"index": 2715, "repo": "spring-batch-infrastructure-5.0.2", "code": "package database;\n\npackage database.builder; // Builders for database item readers and writers.\npackage database.orm; // Support classes for components using various ORM related technologies.\npackage database.support; // Support classes for database specific semantics.\npublic abstract class AbstractCursorItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean; // Abstract base class for any simple item reader that opens a database cursor and continually retrieves the next row in the ResultSet.\npublic abstract class AbstractPagingItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean; // Abstract ItemStreamReader for to extend when reading database records in a paging fashion.\npublic class BeanPropertyItemSqlParameterSourceProvider<T> extends Object implements ItemSqlParameterSourceProvider<T>; // A convenient implementation for providing BeanPropertySqlParameterSource when the item has JavaBean properties that correspond to names used for parameters in the SQL statement.\npublic class ExtendedConnectionDataSourceProxy extends Object implements org.springframework.jdbc.datasource.SmartDataSource, org.springframework.beans.factory.InitializingBean; // Implementation of SmartDataSource that is capable of keeping a single JDBC Connection which is NOT closed after each use even if Connection.close() is called.\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateCursorItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemReaderHelper<T> extends Object implements org.springframework.beans.factory.InitializingBean;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernatePagingItemReader<T> extends AbstractPagingItemReader<T> implements org.springframework.beans.factory.InitializingBean;\npublic interface ItemPreparedStatementSetter<T>; // A convenient strategy for SQL updates, acting effectively as the inverse of RowMapper.\n", "des": "Infrastructure implementations of database based item readers and writers."}
{"index": 2716, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateCursorItemReaderBuilder<T> extends Object;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemWriterBuilder<T> extends Object;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernatePagingItemReaderBuilder<T> extends Object;\npublic class JdbcBatchItemWriterBuilder<T> extends Object; // A builder implementation for the JdbcBatchItemWriter.\npublic class JdbcCursorItemReaderBuilder<T> extends Object; // Builder for the JdbcCursorItemReader\npublic class JdbcPagingItemReaderBuilder<T> extends Object; // This is a builder for the JdbcPagingItemReader.\npublic class JpaCursorItemReaderBuilder<T> extends Object; // Builder for JpaCursorItemReader.\npublic class JpaItemWriterBuilder<T> extends Object; // A builder for the JpaItemWriter.\npublic class JpaPagingItemReaderBuilder<T> extends Object; // Creates a fully qualified JpaPagingItemReader.\npublic class StoredProcedureItemReaderBuilder<T> extends Object; // A fluent builder API for the configuration of a StoredProcedureItemReader.\n", "des": "Builders for database item readers and writers."}
{"index": 2717, "repo": "spring-batch-infrastructure-5.0.2", "code": "package orm;\n\n@Deprecated(since=\"5.0\", forRemoval=true) public abstract class AbstractHibernateQueryProvider<T> extends Object implements HibernateQueryProvider<T>;\npublic abstract class AbstractJpaQueryProvider extends Object implements JpaQueryProvider, org.springframework.beans.factory.InitializingBean; // Abstract JPA Query Provider to serve as a base class for all JPA Query providers.\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateNativeQueryProvider<E> extends AbstractHibernateQueryProvider<E>;\n@Deprecated(since=\"5.0\", forRemoval=true) public interface HibernateQueryProvider<T>;\npublic class JpaNamedQueryProvider<E> extends AbstractJpaQueryProvider; // This query provider creates JPA named Querys.\npublic class JpaNativeQueryProvider<E> extends AbstractJpaQueryProvider; // This query provider creates JPA Querys from injected native SQL queries.\npublic interface JpaQueryProvider; // Interface defining the functionality to be provided for generating queries for use with JPA ItemReaders or other custom built artifacts.\n", "des": "Support classes for components using various ORM related technologies."}
{"index": 2718, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support;\n\npublic abstract class AbstractSqlPagingQueryProvider extends Object implements PagingQueryProvider; // Abstract SQL Paging Query Provider to serve as a base class for all provided SQL paging query providers.\npublic class ColumnMapItemPreparedStatementSetter extends Object implements ItemPreparedStatementSetter<Map<String,Object>>; // Implementation of the ItemPreparedStatementSetter interface that assumes all keys are contained within a Map with the column name as the key.\npublic interface DataFieldMaxValueIncrementerFactory; // Factory for creating DataFieldMaxValueIncrementer implementations based upon a provided string.\npublic class Db2PagingQueryProvider extends SqlWindowingPagingQueryProvider; // DB2 implementation of a PagingQueryProvider using database specific features.\npublic class DefaultDataFieldMaxValueIncrementerFactory extends Object implements DataFieldMaxValueIncrementerFactory; // Default implementation of the DataFieldMaxValueIncrementerFactory interface.\npublic class DerbyPagingQueryProvider extends SqlWindowingPagingQueryProvider; // Derby implementation of a PagingQueryProvider using standard SQL:2003 windowing functions.\npublic class H2PagingQueryProvider extends AbstractSqlPagingQueryProvider; // H2 implementation of a PagingQueryProvider using database specific features.\npublic class HanaPagingQueryProvider extends AbstractSqlPagingQueryProvider; // SAP HANA implementation of a PagingQueryProvider using database specific features.\npublic class HsqlPagingQueryProvider extends AbstractSqlPagingQueryProvider; // HSQLDB implementation of a PagingQueryProvider using database specific features.\npublic class MariaDBPagingQueryProvider extends AbstractSqlPagingQueryProvider; // MariaDB implementation of a PagingQueryProvider using database specific features.\npublic class MySqlPagingQueryProvider extends AbstractSqlPagingQueryProvider; // MySQL implementation of a PagingQueryProvider using database specific features.\npublic class OraclePagingQueryProvider extends AbstractSqlPagingQueryProvider; // Oracle implementation of a PagingQueryProvider using database specific features.\npublic class PostgresPagingQueryProvider extends AbstractSqlPagingQueryProvider; // Postgres implementation of a PagingQueryProvider using database specific features.\npublic class SqlitePagingQueryProvider extends AbstractSqlPagingQueryProvider; // SQLite implementation of a PagingQueryProvider using database specific features.\n", "des": "Support classes for database specific semantics."}
{"index": 2719, "repo": "spring-batch-infrastructure-5.0.2", "code": "package file;\n\npackage file.builder; // Builders for file item readers and writers.\npackage file.mapping; // Infrastructure implementations of io file support mapping concerns.\npackage file.separator; // Infrastructure implementations of io file support separator concerns.\npackage file.transform; // Infrastructure implementations of io file support transform concerns.\npublic interface BufferedReaderFactory; // A factory strategy for custom extensions of BufferedReader allowing customisation of the standard behaviour of the java.io variety.\npublic class DefaultBufferedReaderFactory extends Object implements BufferedReaderFactory;\npublic interface FlatFileFooterCallback; // Callback interface for writing a footer to a file.\npublic interface FlatFileHeaderCallback; // Callback interface for writing a header to a file.\npublic class FlatFileItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean; // Restartable ItemReader that reads lines from input FlatFileItemReader.setResource(Resource).\npublic class FlatFileItemWriter<T> extends AbstractFileItemWriter<T>; // This class is an item writer that writes data to a file or stream.\npublic class FlatFileParseException extends ParseException; // Exception thrown when errors are encountered parsing flat files.\npublic interface LineCallbackHandler; // Callback interface for handling a line from file.\npublic interface LineMapper<T>; // Interface for mapping lines (strings) to domain objects typically used to map lines read from a file to domain objects on a per line basis.\npublic class MultiResourceItemReader<T> extends AbstractItemStreamItemReader<T>; // Reads items from multiple resources sequentially - resource list is given by MultiResourceItemReader.setResources(Resource[]), the actual reading is delegated to MultiResourceItemReader.setDelegate(ResourceAwareItemReaderItemStream).\npublic class MultiResourceItemWriter<T> extends AbstractItemStreamItemWriter<T>; // Wraps a ResourceAwareItemWriterItemStream and creates a new output resource when the count of items written in current resource exceeds MultiResourceItemWriter.setItemCountLimitPerResource(int).\npublic class NonTransientFlatFileException extends NonTransientResourceException; // Exception thrown when errors are encountered with the underlying resource.\n", "des": "Infrastructure implementations of io file concerns."}
{"index": 2720, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class FlatFileItemReaderBuilder<T> extends Object; // A builder implementation for the FlatFileItemReader.\npublic static class FlatFileItemReaderBuilder.DelimitedBuilder<T> extends Object; // A builder for constructing a DelimitedLineTokenizer\npublic static class FlatFileItemReaderBuilder.FixedLengthBuilder<T> extends Object; // A builder for constructing a FixedLengthTokenizer\npublic class FlatFileItemWriterBuilder<T> extends Object; // A builder implementation for the FlatFileItemWriter\npublic static class FlatFileItemWriterBuilder.DelimitedBuilder<T> extends Object; // A builder for constructing a DelimitedLineAggregator\npublic static class FlatFileItemWriterBuilder.FormattedBuilder<T> extends Object; // A builder for constructing a FormatterLineAggregator.\npublic class MultiResourceItemReaderBuilder<T> extends Object; // A builder implementation for the MultiResourceItemReader.\npublic class MultiResourceItemWriterBuilder<T> extends Object; // A builder implementation for the MultiResourceItemWriter.\n", "des": "Builders for file item readers and writers."}
{"index": 2721, "repo": "spring-batch-infrastructure-5.0.2", "code": "package mapping;\n\npublic class ArrayFieldSetMapper extends Object implements FieldSetMapper<String[]>; // A basic array mapper, returning the values backing a fieldset.\npublic class BeanWrapperFieldSetMapper<T> extends DefaultPropertyEditorRegistrar implements FieldSetMapper<T>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // FieldSetMapper implementation based on bean property paths.\npublic class DefaultLineMapper<T> extends Object implements LineMapper<T>, org.springframework.beans.factory.InitializingBean; // Two-phase LineMapper implementation consisting of tokenization of the line into FieldSet followed by mapping to item.\npublic interface FieldSetMapper<T>; // Interface that is used to map data obtained from a FieldSet into an object.\npublic class JsonLineMapper extends Object implements LineMapper<Map<String,Object>>; // Interpret a line as a JSON object and parse it up to a Map.\npublic class PassThroughFieldSetMapper extends Object implements FieldSetMapper<FieldSet>; // Pass through FieldSetMapper useful for passing a FieldSet back directly rather than a mapped object.\npublic class PassThroughLineMapper extends Object implements LineMapper<String>; // Pass through LineMapper useful for passing the original String back directly rather than a mapped object.\npublic class PatternMatchingCompositeLineMapper<T> extends Object implements LineMapper<T>, org.springframework.beans.factory.InitializingBean; // A LineMapper implementation that stores a mapping of String patterns to delegate LineTokenizers as well as a mapping of String patterns to delegate FieldSetMappers.\npublic class RecordFieldSetMapper<T> extends Object implements FieldSetMapper<T>; // This is a FieldSetMapper that supports Java records mapping (requires JKD 14 or higher).\n", "des": "Infrastructure implementations of io file support mapping concerns."}
{"index": 2722, "repo": "spring-batch-infrastructure-5.0.2", "code": "package separator;\n\npublic class DefaultRecordSeparatorPolicy extends SimpleRecordSeparatorPolicy; // A RecordSeparatorPolicy that treats all lines as record endings, as long as they do not have unterminated quotes, and do not end in a continuation marker.\npublic class JsonRecordSeparatorPolicy extends SimpleRecordSeparatorPolicy; // JSON-based record separator.\npublic interface RecordSeparatorPolicy; // Policy for text file-based input sources to determine the end of a record, e.g.\npublic class SimpleRecordSeparatorPolicy extends Object implements RecordSeparatorPolicy; // Simplest possible RecordSeparatorPolicy - treats all lines as record endings.\npublic class SuffixRecordSeparatorPolicy extends DefaultRecordSeparatorPolicy; // A RecordSeparatorPolicy that looks for an exact match for a String at the end of a line (e.g.\n", "des": "Infrastructure implementations of io file support separator concerns."}
{"index": 2723, "repo": "spring-batch-infrastructure-5.0.2", "code": "package transform;\n\npublic abstract class AbstractLineTokenizer extends Object implements LineTokenizer; // Abstract class handling common concerns of various LineTokenizer implementations such as dealing with names and actual construction of FieldSet\npublic class BeanWrapperFieldExtractor<T> extends Object implements FieldExtractor<T>, org.springframework.beans.factory.InitializingBean; // This is a field extractor for a java bean.\npublic class ConversionException extends RuntimeException;\npublic class DefaultFieldSet extends Object implements FieldSet; // Default implementation of FieldSet using Java using Java primitive and standard types and utilities.\npublic class DefaultFieldSetFactory extends Object implements FieldSetFactory; // Default implementation of FieldSetFactory with no special knowledge of the FieldSet required.\npublic class DelimitedLineAggregator<T> extends ExtractorLineAggregator<T>; // A LineAggregator implementation that converts an object into a delimited list of strings.\npublic class DelimitedLineTokenizer extends AbstractLineTokenizer implements org.springframework.beans.factory.InitializingBean; // A LineTokenizer implementation that splits the input String on a configurable delimiter.\npublic abstract class ExtractorLineAggregator<T> extends Object implements LineAggregator<T>; // An abstract LineAggregator implementation that utilizes a FieldExtractor to convert the incoming object to an array of its parts.\npublic interface FieldExtractor<T>; // This class will convert an object to an array of its parts.\npublic interface FieldSet; // Interface used by flat file input sources to encapsulate concerns of converting an array of Strings to Java native types.\npublic interface FieldSetFactory; // Factory interface for creating FieldSet instances.\npublic class FixedLengthTokenizer extends AbstractLineTokenizer; // Tokenizer used to process data obtained from files with fixed-length format.\npublic class FlatFileFormatException extends RuntimeException; // Exception indicating that some type of error has occurred while attempting to parse a line of input into tokens.\npublic class FormatterLineAggregator<T> extends ExtractorLineAggregator<T>; // A LineAggregator implementation which produces a String by aggregating the provided item via the Formatter syntax.\npublic class IncorrectLineLengthException extends FlatFileFormatException; // Exception indicating that the line size expected is different from what is expected.\npublic class IncorrectTokenCountException extends FlatFileFormatException; // Exception indicating that an incorrect number of tokens have been found while parsing a file.\n", "des": "Infrastructure implementations of io file support transform concerns."}
{"index": 2724, "repo": "spring-batch-infrastructure-5.0.2", "code": "package function;\n\npublic class FunctionItemProcessor<I,O> extends Object implements ItemProcessor<I,O>; // An ItemProcessor implementation that delegates to a Function\n", "des": "Adapters for java.util.function components."}
{"index": 2725, "repo": "spring-batch-infrastructure-5.0.2", "code": "package jms;\n\npackage jms.builder; // Builders for JMS item reader and writer.\npublic class JmsItemReader<T> extends Object implements ItemReader<T>, org.springframework.beans.factory.InitializingBean; // An ItemReader for JMS using a JmsTemplate.\npublic class JmsItemWriter<T> extends Object implements ItemWriter<T>; // An ItemWriter for JMS using a JmsTemplate.\npublic class JmsMethodArgumentsKeyGenerator extends Object implements org.springframework.retry.interceptor.MethodArgumentsKeyGenerator; // A MethodArgumentsKeyGenerator for JMS\npublic class JmsMethodInvocationRecoverer<T> extends Object implements org.springframework.retry.interceptor.MethodInvocationRecoverer<T>;\npublic class JmsNewMethodArgumentsIdentifier<T> extends Object implements org.springframework.retry.interceptor.NewMethodArgumentsIdentifier; // A NewMethodArgumentsIdentifier for JMS that looks for a message in the arguments and checks its delivery status.\n", "des": "JMS based reader/writer and related components."}
{"index": 2726, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class JmsItemReaderBuilder<T> extends Object; // Creates a fully qualified JmsItemReader.\npublic class JmsItemWriterBuilder<T> extends Object; // Creates a fully qualified JmsItemWriter.\n", "des": "Builders for JMS item reader and writer."}
{"index": 2727, "repo": "spring-batch-infrastructure-5.0.2", "code": "package json;\n\npackage json.builder; // Builders for JSON item reader and writer.\npublic class GsonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T>; // A json object marshaller that uses Google Gson to marshal an object into a json representation.\npublic class GsonJsonObjectReader<T> extends Object implements JsonObjectReader<T>; // Implementation of JsonObjectReader based on Google Gson.\npublic class JacksonJsonObjectMarshaller<T> extends Object implements JsonObjectMarshaller<T>; // A json object marshaller that uses Jackson to marshal an object into a json representation.\npublic class JacksonJsonObjectReader<T> extends Object implements JsonObjectReader<T>; // Implementation of JsonObjectReader based on Jackson.\npublic class JsonFileItemWriter<T> extends AbstractFileItemWriter<T>; // Item writer that writes data in json format to an output file.\npublic class JsonItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>; // ItemStreamReader implementation that reads Json objects from a Resource having the following format:\npublic interface JsonObjectMarshaller<T>; // Strategy interface to marshal an object into a json representation.\npublic interface JsonObjectReader<T>; // Strategy interface for Json readers.\n", "des": "Infrastructure implementations of JSON input and output."}
{"index": 2728, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class JsonFileItemWriterBuilder<T> extends Object; // Builder for JsonFileItemWriter.\npublic class JsonItemReaderBuilder<T> extends Object; // A builder for JsonItemReader.\n", "des": "Builders for JSON item reader and writer."}
{"index": 2729, "repo": "spring-batch-infrastructure-5.0.2", "code": "package kafka;\n\npackage kafka.builder; // Builders for Apache Kafka item reader and writer.\npublic class KafkaItemReader<K,V> extends AbstractItemStreamItemReader<V>; // An ItemReader implementation for Apache Kafka.\npublic class KafkaItemWriter<K,T> extends KeyValueItemWriter<K,T>; // An ItemWriter implementation for Apache Kafka using a KafkaTemplate with default topic configured.\n", "des": "Apache Kafka related readers and writers"}
{"index": 2730, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class KafkaItemReaderBuilder<K,V> extends Object; // A builder implementation for the KafkaItemReader.\npublic class KafkaItemWriterBuilder<K,V> extends Object; // A builder implementation for the KafkaItemWriter\n", "des": "Builders for Apache Kafka item reader and writer."}
{"index": 2731, "repo": "spring-batch-infrastructure-5.0.2", "code": "package ldif;\n\npackage ldif.builder; // Builders for LDIF related components.\npublic class LdifReader extends AbstractItemCountingItemStreamItemReader<org.springframework.ldap.core.LdapAttributes> implements ResourceAwareItemReaderItemStream<org.springframework.ldap.core.LdapAttributes>, org.springframework.beans.factory.InitializingBean; // The LdifReader is an adaptation of the FlatFileItemReader built around an LdifParser.\npublic class MappingLdifReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean; // The MappingLdifReader is an adaptation of the FlatFileItemReader built around an LdifParser.\npublic interface RecordCallbackHandler; // This interface can be used to operate on skipped records during open in the LdifReader and the MappingLdifReader.\npublic interface RecordMapper<T>; // This interface should be implemented to map LdapAttributes objects to POJOs.\n", "des": "This package contains the classes required for using the LdifParser in Spring LDAP."}
{"index": 2732, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class LdifReaderBuilder extends Object; // Creates a fully qualified LdifReader.\npublic class MappingLdifReaderBuilder<T> extends Object; // Creates a fully qualified MappingLdifReader.\n", "des": "Builders for LDIF related components."}
{"index": 2733, "repo": "spring-batch-infrastructure-5.0.2", "code": "package mail;\n\npackage mail.builder; // Builders for JavaMail related components.\npackage mail.javamail; // JavaMail related components.\npublic class DefaultMailErrorHandler extends Object implements MailErrorHandler; // This MailErrorHandler implementation simply rethrows the exception it receives.\npublic interface MailErrorHandler; // This class is used to handle errors that occur when email messages are unable to be sent.\npublic class SimpleMailMessageItemWriter extends Object implements ItemWriter<org.springframework.mail.SimpleMailMessage>, org.springframework.beans.factory.InitializingBean; // A simple ItemWriter that can send mail messages.\n", "des": "Java Mail based components."}
{"index": 2734, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class SimpleMailMessageItemWriterBuilder extends Object; // Creates a fully qualified SimpleMailMessageItemWriter.\n", "des": "Builders for JavaMail related components."}
{"index": 2735, "repo": "spring-batch-infrastructure-5.0.2", "code": "package javamail;\n\npublic class MimeMessageItemWriter extends Object implements ItemWriter<jakarta.mail.internet.MimeMessage>; // A simple ItemWriter that can send mail messages.\n", "des": "JavaMail related components."}
{"index": 2736, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support;\n\npackage support.builder; // Builders for support classes.\npublic abstract class AbstractFileItemWriter<T> extends AbstractItemStreamItemWriter<T> implements ResourceAwareItemWriterItemStream<T>, org.springframework.beans.factory.InitializingBean; // Base class for item writers that write data to a file or stream.\npublic abstract class AbstractItemCountingItemStreamItemReader<T> extends AbstractItemStreamItemReader<T>; // Abstract superclass for ItemReaders that supports restart by storing item count in the ExecutionContext (therefore requires item ordering to be preserved between runs).\npublic abstract class AbstractItemStreamItemReader<T> extends ItemStreamSupport implements ItemStreamReader<T>; // Base class for ItemReader implementations.\npublic abstract class AbstractItemStreamItemWriter<T> extends ItemStreamSupport implements ItemStreamWriter<T>; // Base class for ItemWriter implementations.\npublic class ClassifierCompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O>; // Calls one of a collection of ItemProcessors, based on a router pattern implemented through the provided Classifier.\npublic class ClassifierCompositeItemWriter<T> extends Object implements ItemWriter<T>; // Calls one of a collection of ItemWriters for each item, based on a router pattern implemented through the provided Classifier.\npublic class CompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O>, org.springframework.beans.factory.InitializingBean; // Composite ItemProcessor that passes the item through a sequence of injected ItemTransformers (return value of previous transformation is the entry value of the next). Note the user is responsible for injecting a chain of ItemProcessors that conforms to declared input and output types.\npublic class CompositeItemStream extends Object implements ItemStream; // Simple ItemStream that delegates to a list of other streams.\npublic class CompositeItemWriter<T> extends Object implements ItemStreamWriter<T>, org.springframework.beans.factory.InitializingBean; // Calls a collection of ItemWriters in fixed-order sequence. The implementation is thread-safe if all delegates are thread-safe.\npublic class IteratorItemReader<T> extends Object implements ItemReader<T>; // An ItemReader that pulls data from a Iterator or Iterable using the constructors.\n", "des": "Internal support package"}
{"index": 2737, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class ClassifierCompositeItemProcessorBuilder<I,O> extends Object; // Creates a fully qualified ClassifierCompositeItemProcessor.\npublic class ClassifierCompositeItemWriterBuilder<T> extends Object; // Creates a fully qualified ClassifierCompositeItemWriter.\npublic class CompositeItemProcessorBuilder<I,O> extends Object; // Creates a fully qualified CompositeItemProcessorBuilder.\npublic class CompositeItemWriterBuilder<T> extends Object; // Creates a fully qualified CompositeItemWriter.\npublic class ScriptItemProcessorBuilder<I,O> extends Object; // Creates a fully qualified ScriptItemProcessor.\npublic class SingleItemPeekableItemReaderBuilder<T> extends Object; // Creates a fully qualified SingleItemPeekeableItemReader.\npublic class SynchronizedItemStreamReaderBuilder<T> extends Object; // Creates a fully qualified SynchronizedItemStreamReader.\npublic class SynchronizedItemStreamWriterBuilder<T> extends Object; // Creates a fully qualified SynchronizedItemStreamWriter.\n", "des": "Builders for support classes."}
{"index": 2738, "repo": "spring-batch-infrastructure-5.0.2", "code": "package util;\n\npublic class ExecutionContextUserSupport extends Object; // Facilitates assigning names to objects persisting data in ExecutionContext and generating keys for ExecutionContext based on the name.\npublic final class FileUtils extends Object; // Utility methods for files used in batch processing.\n", "des": "Infrastructure utility classes."}
{"index": 2739, "repo": "spring-batch-infrastructure-5.0.2", "code": "package validator;\n\npublic class BeanValidatingItemProcessor<T> extends ValidatingItemProcessor<T>; // A ValidatingItemProcessor that uses the Bean Validation API (JSR-303) to validate items.\npublic class SpringValidator<T> extends Object implements Validator<T>, org.springframework.beans.factory.InitializingBean; // Adapts the Validator interface to Validator.\npublic class ValidatingItemProcessor<T> extends Object implements ItemProcessor<T,T>, org.springframework.beans.factory.InitializingBean; // Simple implementation of ItemProcessor that validates input and returns it without modifications.\npublic class ValidationException extends ItemReaderException; // This exception should be thrown when there are validation errors.\npublic interface Validator<T>; // Interface used to validate objects.\n", "des": "Infrastructure implementations of item validator concerns."}
{"index": 2740, "repo": "spring-batch-infrastructure-5.0.2", "code": "package xml;\n\npackage xml.builder; // Builders for Stax event item reader and writer.\npackage xml.stax; // Item reader and writer based on Stax.\npublic class StaxEventItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean; // Item reader for reading XML input based on StAX.\npublic class StaxEventItemWriter<T> extends AbstractItemStreamItemWriter<T> implements ResourceAwareItemWriterItemStream<T>, org.springframework.beans.factory.InitializingBean; // An implementation of ItemWriter which uses StAX and Marshaller for serializing object to XML.\npublic interface StaxWriterCallback; // Callback interface for writing to an XML file - useful e.g.\n", "des": "Infrastructure implementations of xml input and output."}
{"index": 2741, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class StaxEventItemReaderBuilder<T> extends Object; // A fluent builder for the StaxEventItemReader\npublic class StaxEventItemWriterBuilder<T> extends Object; // A builder for the StaxEventItemWriter.\n", "des": "Builders for Stax event item reader and writer."}
{"index": 2742, "repo": "spring-batch-infrastructure-5.0.2", "code": "package stax;\n\npublic class DefaultFragmentEventReader extends Object implements FragmentEventReader; // Default implementation of FragmentEventReader\npublic interface FragmentEventReader extends XMLEventReader; // Interface for event readers which support treating XML fragments as standalone XML documents by wrapping the fragments with StartDocument and EndDocument events.\npublic class NoStartEndDocumentStreamWriter extends Object; // Delegating XMLEventWriter, which ignores start and end document events, but passes through everything else.\npublic class UnclosedElementCollectingEventWriter extends Object; // Delegating XMLEventWriter, which collects the QNames of elements that were opened but not closed.\npublic class UnopenedElementClosingEventWriter extends Object; // Delegating XMLEventWriter, which writes EndElement events that match a given collection of QNames directly to the underlying java.io.Writer instead of to the delegate XMLEventWriter.\n", "des": "Item reader and writer based on Stax."}
{"index": 2743, "repo": "spring-batch-infrastructure-5.0.2", "code": "package poller;\n\npublic class DirectPoller<S> extends Object implements Poller<S>; // A Poller that uses the callers thread to poll for a result as soon as it is asked for.\npublic interface Poller<T>; // Interface for polling a Callable instance provided by the user.\n", "des": "APIs for polling support."}
{"index": 2744, "repo": "spring-batch-infrastructure-5.0.2", "code": "package repeat;\n\npackage repeat.callback; // Infrastructure implementations of repeat callback concerns.\npackage repeat.context; // Infrastructure implementations of repeat context concerns.\npackage repeat.exception; // Infrastructure implementations of repeat exception handler concerns.\npackage repeat.interceptor; // Infrastructure implementations of repeat aop concerns.\npackage repeat.listener; // Infrastructure implementations of repeat interceptor concerns.\npackage repeat.policy; // Infrastructure implementations of repeat policy concerns.\npackage repeat.support; // Infrastructure implementations of repeat support concerns.\npublic interface CompletionPolicy; // Interface for batch completion policies, to enable batch operations to strategise normal completion conditions.\npublic interface RepeatCallback; // Callback interface for batch operations.\npublic interface RepeatContext extends org.springframework.core.AttributeAccessor; // Base interface for context which controls the state and completion / termination of a batch step.\npublic class RepeatException extends org.springframework.core.NestedRuntimeException;\npublic interface RepeatListener; // Interface for listeners to the batch process.\n@FunctionalInterface public interface RepeatOperations; // The main interface providing access to batch operations.\npublic enum RepeatStatus extends Enum<RepeatStatus>;\n", "des": "Infrastructure implementations of repeat concerns."}
{"index": 2745, "repo": "spring-batch-infrastructure-5.0.2", "code": "package callback;\n\npublic class NestedRepeatCallback extends Object implements RepeatCallback; // Callback that delegates to another callback, via a RepeatOperations instance.\n", "des": "Infrastructure implementations of repeat callback concerns."}
{"index": 2746, "repo": "spring-batch-infrastructure-5.0.2", "code": "package context;\n\npublic class RepeatContextCounter extends Object; // Helper class for policies that need to count the number of occurrences of some event (e.g.\npublic class RepeatContextSupport extends SynchronizedAttributeAccessor implements RepeatContext;\npublic class SynchronizedAttributeAccessor extends Object implements org.springframework.core.AttributeAccessor; // An AttributeAccessor that synchronizes on a mutex (not this) before modifying or accessing the underlying attributes.\n", "des": "Infrastructure implementations of repeat context concerns."}
{"index": 2747, "repo": "spring-batch-infrastructure-5.0.2", "code": "package exception;\n\npublic class CompositeExceptionHandler extends Object implements ExceptionHandler; // Composite ExceptionHandler that loops though a list of delegates.\npublic class DefaultExceptionHandler extends Object implements ExceptionHandler; // Default implementation of ExceptionHandler - just re-throws the exception it encounters.\n@FunctionalInterface public interface ExceptionHandler; // Handler to allow strategies for re-throwing exceptions.\npublic class LogOrRethrowExceptionHandler extends Object implements ExceptionHandler; // Implementation of ExceptionHandler based on an Classifier.\npublic static enum LogOrRethrowExceptionHandler.Level extends Enum<LogOrRethrowExceptionHandler.Level>; // Logging levels for the handler.\npublic class RethrowOnThresholdExceptionHandler extends Object implements ExceptionHandler; // Implementation of ExceptionHandler that rethrows when exceptions of a given type reach a threshold.\npublic class SimpleLimitExceptionHandler extends Object implements ExceptionHandler, org.springframework.beans.factory.InitializingBean; // Simple implementation of exception handler which looks for given exception types.\n", "des": "Infrastructure implementations of repeat exception handler concerns."}
{"index": 2748, "repo": "spring-batch-infrastructure-5.0.2", "code": "package interceptor;\n\npublic class RepeatOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // A MethodInterceptor that can be used to automatically repeat calls to a method on a service.\n", "des": "Infrastructure implementations of repeat aop concerns."}
{"index": 2749, "repo": "spring-batch-infrastructure-5.0.2", "code": "package listener;\n\npublic class CompositeRepeatListener extends Object implements RepeatListener; // Allows a user to register one or more RepeatListeners to be notified on batch events.\n@Deprecated public class RepeatListenerSupport extends Object implements RepeatListener;\n", "des": "Infrastructure implementations of repeat interceptor concerns."}
{"index": 2750, "repo": "spring-batch-infrastructure-5.0.2", "code": "package policy;\n\npublic class CompletionPolicySupport extends Object implements CompletionPolicy; // Very simple base class for CompletionPolicy implementations.\npublic class CompositeCompletionPolicy extends Object implements CompletionPolicy; // Composite policy that loops through a list of delegate policies and answers calls by a consensus.\npublic abstract class CountingCompletionPolicy extends DefaultResultCompletionPolicy; // Abstract base class for policies that need to count the number of occurrences of some event (e.g.\npublic class DefaultResultCompletionPolicy extends CompletionPolicySupport; // Very simple CompletionPolicy that bases its decision on the result of a batch operation.\npublic class SimpleCompletionPolicy extends DefaultResultCompletionPolicy; // Policy for terminating a batch after a fixed number of operations.\npublic class TimeoutTerminationPolicy extends CompletionPolicySupport; // Termination policy that times out after a fixed period.\n", "des": "Infrastructure implementations of repeat policy concerns."}
{"index": 2751, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support;\n\npublic interface RepeatInternalState; // Internal interface for extensions of RepeatTemplate.\npublic class RepeatInternalStateSupport extends Object implements RepeatInternalState;\npublic final class RepeatSynchronizationManager extends Object; // Global variable support for repeat clients.\npublic class RepeatTemplate extends Object implements RepeatOperations; // Simple implementation and base class for batch templates implementing RepeatOperations.\n@Deprecated(since=\"5.0\", forRemoval=true) public class ResultHolderResultQueue extends Object;\npublic class TaskExecutorRepeatTemplate extends RepeatTemplate; // Provides RepeatOperations support including interceptors that can be used to modify or monitor the behaviour at run time. This implementation is sufficient to be used to configure transactional behaviour for each item by making the RepeatCallback transactional, or for the whole batch by making the execute method transactional (but only then if the task executor is synchronous). This class is thread-safe if its collaborators are thread-safe (interceptors, terminationPolicy, callback).\n@Deprecated(since=\"5.0\", forRemoval=true) public class ThrottleLimitResultQueue<T> extends Object;\n", "des": "Infrastructure implementations of repeat support concerns."}
{"index": 2752, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support;\n\npackage support.transaction; // Infrastructure implementations of support transaction concerns.\npublic class AnnotationMethodResolver extends Object implements MethodResolver; // MethodResolver implementation that finds a single Method on the given Class that contains the specified annotation type.\npublic enum DatabaseType extends Enum<DatabaseType>; // Enum representing a database type, such as DB2 or oracle.\npublic class DefaultPropertyEditorRegistrar extends Object implements org.springframework.beans.PropertyEditorRegistrar; // A re-usable PropertyEditorRegistrar that can be used wherever one needs to register custom PropertyEditor instances with a PropertyEditorRegistry (like a bean wrapper, or a type converter).\npublic class IntArrayPropertyEditor extends PropertyEditorSupport;\npublic class LastModifiedResourceComparator extends Object implements Comparator<org.springframework.core.io.Resource>; // Comparator to sort resources by the file last modified time.\npublic interface MethodInvoker; // A strategy interface for invoking a method.\npublic class MethodInvokerUtils extends Object; // Utility methods for create MethodInvoker instances.\npublic interface MethodResolver; // Strategy interface for detecting a single Method on a Class.\npublic class PatternMatcher<S> extends Object;\npublic final class PropertiesConverter extends Object; // Utility to convert a Properties object to a String and back.\npublic class ReflectionUtils extends Object; // Provides reflection based utilities for Spring Batch that are not available via Spring Core\npublic class SimpleMethodInvoker extends Object implements MethodInvoker; // Simple implementation of the MethodInvoker interface that invokes a method on an object.\npublic class SystemPropertyInitializer extends Object implements org.springframework.beans.factory.InitializingBean; // Helper class that sets up a System property with a default value.\n", "des": "Infrastructure implementations of support concerns."}
{"index": 2753, "repo": "spring-batch-infrastructure-5.0.2", "code": "package transaction;\n\npublic class FlushFailedException extends RuntimeException; // Unchecked exception indicating that an error has occurred while trying to flush a buffer.\npublic class ResourcelessTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager;\npublic class TransactionAwareBufferedWriter extends Writer; // Wrapper for a FileChannel that delays actually writing to or closing the buffer if a transaction is active.\npublic class TransactionAwareProxyFactory<T> extends Object; // Factory for transaction aware objects (like lists, sets, maps).\n", "des": "Infrastructure implementations of support transaction concerns."}
{"index": 2754, "repo": "spring-beans-6.0.11", "code": "package beans;\n\npackage beans.factory; // The core package implementing Spring's lightweight Inversion of Control (IoC) container.\npackage beans.propertyeditors; // Properties editors used to convert from String values to object types such as java.util.Properties.\npackage beans.support; // Classes supporting the org.springframework.beans package, such as utility classes for sorting and holding lists of beans.\npublic abstract class AbstractNestablePropertyAccessor extends AbstractPropertyAccessor; // A basic ConfigurablePropertyAccessor that provides the necessary infrastructure for all typical use cases.\nprotected abstract static class AbstractNestablePropertyAccessor.PropertyHandler extends Object; // A handler for a specific property.\nprotected static class AbstractNestablePropertyAccessor.PropertyTokenHolder extends Object; // Holder class used to store property tokens.\npublic abstract class AbstractPropertyAccessor extends TypeConverterSupport implements ConfigurablePropertyAccessor; // Abstract implementation of the PropertyAccessor interface.\npublic interface BeanInfoFactory; // Strategy interface for creating BeanInfo instances for Spring beans.\npublic class BeanInstantiationException extends FatalBeanException; // Exception thrown when instantiation of a bean failed.\npublic class BeanMetadataAttribute extends Object implements BeanMetadataElement; // Holder for a key-value style attribute that is part of a bean definition.\npublic class BeanMetadataAttributeAccessor extends org.springframework.core.AttributeAccessorSupport implements BeanMetadataElement; // Extension of AttributeAccessorSupport, holding attributes as BeanMetadataAttribute objects in order to keep track of the definition source.\npublic interface BeanMetadataElement; // Interface to be implemented by bean metadata elements that carry a configuration source object.\npublic abstract class BeansException extends org.springframework.core.NestedRuntimeException; // Abstract superclass for all exceptions thrown in the beans package and subpackages.\npublic abstract class BeanUtils extends Object; // Static convenience methods for JavaBeans: for instantiating beans, checking bean property types, copying bean properties, etc.\npublic interface BeanWrapper extends ConfigurablePropertyAccessor; // The central interface of Spring's low-level JavaBeans infrastructure.\npublic class BeanWrapperImpl extends AbstractNestablePropertyAccessor implements BeanWrapper; // Default BeanWrapper implementation that should be sufficient for all typical use cases.\npublic final class CachedIntrospectionResults extends Object; // Internal class that caches JavaBeans PropertyDescriptor information for a Java class.\n", "des": "This package contains interfaces and classes for manipulating Java beans."}
{"index": 2755, "repo": "spring-beans-6.0.11", "code": "package factory;\n\npackage factory.annotation; // Support package for annotation-driven bean configuration.\npackage factory.aot; // AOT support for bean factories.\npackage factory.config; // SPI interfaces and configuration-related convenience classes for bean factories.\npackage factory.groovy; // Support package for Groovy-based bean definitions.\npackage factory.parsing; // Support infrastructure for bean definition parsing.\npackage factory.serviceloader; // Support package for the Java ServiceLoader facility.\npackage factory.support; // Classes supporting the org.springframework.beans.factory package.\npackage factory.wiring; // Mechanism to determine bean wiring metadata from a bean instance.\npackage factory.xml; // Contains an abstract XML-based BeanFactory implementation, including a standard \"spring-beans\" XSD.\npublic interface Aware; // A marker superinterface indicating that a bean is eligible to be notified by the Spring container of a particular framework object through a callback-style method.\npublic interface BeanClassLoaderAware extends Aware; // Callback that allows a bean to be aware of the bean class loader; that is, the class loader used by the present bean factory to load bean classes.\npublic class BeanCreationException extends FatalBeanException; // Exception thrown when a BeanFactory encounters an error when attempting to create a bean from a bean definition.\npublic class BeanCreationNotAllowedException extends BeanCreationException; // Exception thrown in case of a bean being requested despite bean creation currently not being allowed (for example, during the shutdown phase of a bean factory).\npublic class BeanCurrentlyInCreationException extends BeanCreationException; // Exception thrown in case of a reference to a bean that's currently in creation.\npublic class BeanDefinitionStoreException extends FatalBeanException; // Exception thrown when a BeanFactory encounters an invalid bean definition: e.g.\npublic class BeanExpressionException extends FatalBeanException; // Exception that indicates an expression evaluation attempt having failed.\npublic interface BeanFactory; // The root interface for accessing a Spring bean container.\npublic interface BeanFactoryAware extends Aware; // Interface to be implemented by beans that wish to be aware of their owning BeanFactory.\npublic abstract class BeanFactoryUtils extends Object; // Convenience methods operating on bean factories, in particular on the ListableBeanFactory interface.\n", "des": "The core package implementing Spring's lightweight Inversion of Control (IoC) container."}
{"index": 2756, "repo": "spring-beans-6.0.11", "code": "package annotation;\n\npublic interface AnnotatedBeanDefinition extends BeanDefinition; // Extended BeanDefinition interface that exposes AnnotationMetadata about its bean class - without requiring the class to be loaded yet.\npublic class AnnotatedGenericBeanDefinition extends GenericBeanDefinition implements AnnotatedBeanDefinition; // Extension of the GenericBeanDefinition class, adding support for annotation metadata exposed through the AnnotatedBeanDefinition interface.\npublic class AnnotationBeanWiringInfoResolver extends Object implements BeanWiringInfoResolver; // BeanWiringInfoResolver that uses the Configurable annotation to identify which classes need autowiring.\npublic enum Autowire extends Enum<Autowire>; // Enumeration determining autowiring status: that is, whether a bean should have its dependencies automatically injected by the Spring container using setter injection.\n@Target({CONSTRUCTOR,METHOD,PARAMETER,FIELD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Autowired; // Marks a constructor, field, setter method, or config method as to be autowired by Spring's dependency injection facilities.\npublic class AutowiredAnnotationBeanPostProcessor extends Object implements SmartInstantiationAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor, BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, BeanFactoryAware; // BeanPostProcessor implementation that autowires annotated fields, setter methods, and arbitrary config methods.\npublic abstract class BeanFactoryAnnotationUtils extends Object; // Convenience methods performing bean lookups related to Spring-specific annotations, for example Spring's @Qualifier annotation.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface Configurable; // Marks a class as being eligible for Spring-driven configuration.\npublic class CustomAutowireConfigurer extends Object implements BeanFactoryPostProcessor, BeanClassLoaderAware, org.springframework.core.Ordered; // A BeanFactoryPostProcessor implementation that allows for convenient registration of custom autowire qualifier types.\npublic class InitDestroyAnnotationBeanPostProcessor extends Object implements DestructionAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor, BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, Serializable; // BeanPostProcessor implementation that invokes annotated init and destroy methods.\npublic class InjectionMetadata extends Object; // Internal class for managing injection metadata.\npublic abstract static class InjectionMetadata.InjectedElement extends Object; // A single injected element.\n", "des": "Support package for annotation-driven bean configuration."}
{"index": 2757, "repo": "spring-beans-6.0.11", "code": "package aot;\n\npublic final class AotServices<T> extends Object implements Iterable<T>; // A collection of AOT services that can be loaded from a SpringFactoriesLoader or obtained from a ListableBeanFactory.\npublic static class AotServices.Loader extends Object; // Loader class used to actually load the services.\npublic static enum AotServices.Source extends Enum<AotServices.Source>; // Sources from which services were obtained.\n@FunctionalInterface public interface AutowiredArguments; // Resolved arguments to be autowired.\npublic class AutowiredArgumentsCodeGenerator extends Object; // Code generator to apply AutowiredArguments.\npublic final class AutowiredFieldValueResolver extends Object; // Resolver used to support the autowiring of fields.\npublic final class AutowiredMethodArgumentsResolver extends Object; // Resolver used to support the autowiring of methods.\n@FunctionalInterface public interface BeanFactoryInitializationAotContribution; // AOT contribution from a BeanFactoryInitializationAotProcessor used to initialize a bean factory.\n@FunctionalInterface public interface BeanFactoryInitializationAotProcessor; // AOT processor that makes bean factory initialization contributions by processing ConfigurableListableBeanFactory instances.\npublic interface BeanFactoryInitializationCode; // Interface that can be used to configure the code that will be generated to perform bean factory initialization.\npublic final class BeanInstanceSupplier<T> extends Object implements InstanceSupplier<T>; // Specialized InstanceSupplier that provides the factory Method used to instantiate the underlying bean instance, if any.\n@FunctionalInterface public interface BeanRegistrationAotContribution; // AOT contribution from a BeanRegistrationAotProcessor used to register a single bean definition.\n@FunctionalInterface public interface BeanRegistrationAotProcessor; // AOT processor that makes bean registration contributions by processing RegisteredBean instances.\npublic interface BeanRegistrationCode; // Interface that can be used to configure the code that will be generated to perform registration of a single bean.\npublic interface BeanRegistrationCodeFragments; // Generate the various fragments of code needed to register a bean.\npublic class BeanRegistrationCodeFragmentsDecorator extends Object implements BeanRegistrationCodeFragments; // A BeanRegistrationCodeFragments decorator implementation.\n@FunctionalInterface public interface BeanRegistrationExcludeFilter; // Filter that can be used to exclude AOT processing of a RegisteredBean.\n", "des": "AOT support for bean factories."}
{"index": 2758, "repo": "spring-beans-6.0.11", "code": "package config;\n\npublic abstract class AbstractFactoryBean<T> extends Object implements FactoryBean<T>, BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean; // Simple template superclass for FactoryBean implementations that creates a singleton or a prototype object, depending on a flag.\npublic interface AutowireCapableBeanFactory extends BeanFactory; // Extension of the BeanFactory interface to be implemented by bean factories that are capable of autowiring, provided that they want to expose this functionality for existing bean instances.\npublic final class AutowiredPropertyMarker extends Object implements Serializable; // Simple marker class for an individually autowired property value, to be added to BeanDefinition.getPropertyValues() for a specific bean property.\npublic interface BeanDefinition extends org.springframework.core.AttributeAccessor, BeanMetadataElement; // A BeanDefinition describes a bean instance, which has property values, constructor argument values, and further information supplied by concrete implementations.\n@FunctionalInterface public interface BeanDefinitionCustomizer; // Callback for customizing a given bean definition.\npublic class BeanDefinitionHolder extends Object implements BeanMetadataElement; // Holder for a BeanDefinition with name and aliases.\npublic class BeanDefinitionVisitor extends Object; // Visitor class for traversing BeanDefinition objects, in particular the property values and constructor argument values contained in them, resolving bean metadata values.\npublic class BeanExpressionContext extends Object; // Context object for evaluating an expression within a bean definition.\npublic interface BeanExpressionResolver; // Strategy interface for resolving a value by evaluating it as an expression, if applicable.\n@FunctionalInterface public interface BeanFactoryPostProcessor; // Factory hook that allows for custom modification of an application context's bean definitions, adapting the bean property values of the context's underlying bean factory.\npublic interface BeanPostProcessor; // Factory hook that allows for custom modification of new bean instances — for example, checking for marker interfaces or wrapping beans with proxies.\npublic interface BeanReference extends BeanMetadataElement; // Interface that exposes a reference to a bean name in an abstract fashion.\npublic interface ConfigurableBeanFactory extends HierarchicalBeanFactory, SingletonBeanRegistry; // Configuration interface to be implemented by most bean factories.\npublic interface ConfigurableListableBeanFactory extends ListableBeanFactory, AutowireCapableBeanFactory, ConfigurableBeanFactory; // Configuration interface to be implemented by most listable bean factories.\n", "des": "SPI interfaces and configuration-related convenience classes for bean factories."}
{"index": 2759, "repo": "spring-beans-6.0.11", "code": "package groovy;\n\npublic class GroovyBeanDefinitionReader extends AbstractBeanDefinitionReader implements groovy.lang.GroovyObject; // A Groovy-based reader for Spring bean definitions: like a Groovy builder, but more of a DSL for Spring configuration.\n", "des": "Support package for Groovy-based bean definitions."}
{"index": 2760, "repo": "spring-beans-6.0.11", "code": "package parsing;\n\npublic abstract class AbstractComponentDefinition extends Object implements ComponentDefinition; // Base implementation of ComponentDefinition that provides a basic implementation of AbstractComponentDefinition.getDescription() which delegates to ComponentDefinition.getName().\npublic class AliasDefinition extends Object implements BeanMetadataElement; // Representation of an alias that has been registered during the parsing process.\npublic class BeanComponentDefinition extends BeanDefinitionHolder implements ComponentDefinition; // ComponentDefinition based on a standard BeanDefinition, exposing the given bean definition as well as inner bean definitions and bean references for the given bean.\npublic class BeanDefinitionParsingException extends BeanDefinitionStoreException; // Exception thrown when a bean definition reader encounters an error during the parsing process.\npublic class BeanEntry extends Object implements ParseState.Entry; // ParseState entry representing a bean definition.\npublic interface ComponentDefinition extends BeanMetadataElement; // Interface that describes the logical view of a set of BeanDefinitions and BeanReferences as presented in some configuration context.\npublic class CompositeComponentDefinition extends AbstractComponentDefinition; // ComponentDefinition implementation that holds one or more nested ComponentDefinition instances, aggregating them into a named group of components.\npublic class ConstructorArgumentEntry extends Object implements ParseState.Entry; // ParseState entry representing a (possibly indexed) constructor argument.\npublic interface DefaultsDefinition extends BeanMetadataElement; // Marker interface for a defaults definition, extending BeanMetadataElement to inherit source exposure.\npublic class EmptyReaderEventListener extends Object implements ReaderEventListener; // Empty implementation of the ReaderEventListener interface, providing no-op implementations of all callback methods.\npublic class FailFastProblemReporter extends Object implements ProblemReporter; // Simple ProblemReporter implementation that exhibits fail-fast behavior when errors are encountered.\npublic class ImportDefinition extends Object implements BeanMetadataElement; // Representation of an import that has been processed during the parsing process.\npublic class Location extends Object; // Class that models an arbitrary location in a resource.\npublic class NullSourceExtractor extends Object implements SourceExtractor; // Simple implementation of SourceExtractor that returns null as the source metadata.\npublic final class ParseState extends Object; // Simple ArrayDeque-based structure for tracking the logical position during a parsing process.\npublic static interface ParseState.Entry; // Marker interface for entries into the ParseState.\npublic class PassThroughSourceExtractor extends Object implements SourceExtractor; // Simple SourceExtractor implementation that just passes the candidate source metadata object through for attachment.\n", "des": "Support infrastructure for bean definition parsing."}
{"index": 2761, "repo": "spring-beans-6.0.11", "code": "package serviceloader;\n\npublic abstract class AbstractServiceLoaderBasedFactoryBean extends AbstractFactoryBean<Object> implements BeanClassLoaderAware; // Abstract base class for FactoryBeans operating on the JDK 1.6 ServiceLoader facility.\npublic class ServiceFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware; // FactoryBean that exposes the 'primary' service for the configured service class, obtained through the JDK 1.6 ServiceLoader facility.\npublic class ServiceListFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware; // FactoryBean that exposes all services for the configured service class, represented as a List of service objects, obtained through the JDK 1.6 ServiceLoader facility.\npublic class ServiceLoaderFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware; // FactoryBean that exposes the JDK 1.6 ServiceLoader for the configured service class.\n", "des": "Support package for the Java ServiceLoader facility."}
{"index": 2762, "repo": "spring-beans-6.0.11", "code": "package support;\n\npublic abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory; // Abstract bean factory superclass that implements default bean creation, with the full capabilities specified by the RootBeanDefinition class.\npublic abstract class AbstractBeanDefinition extends BeanMetadataAttributeAccessor implements BeanDefinition, Cloneable; // Base class for concrete, full-fledged BeanDefinition classes, factoring out common properties of GenericBeanDefinition, RootBeanDefinition, and ChildBeanDefinition.\npublic abstract class AbstractBeanDefinitionReader extends Object implements BeanDefinitionReader, org.springframework.core.env.EnvironmentCapable; // Abstract base class for bean definition readers which implement the BeanDefinitionReader interface.\npublic abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory; // Abstract base class for BeanFactory implementations, providing the full capabilities of the ConfigurableBeanFactory SPI.\npublic class AutowireCandidateQualifier extends BeanMetadataAttributeAccessor; // Qualifier for resolving autowire candidates.\npublic interface AutowireCandidateResolver; // Strategy interface for determining whether a specific bean definition qualifies as an autowire candidate for a specific dependency.\npublic final class BeanDefinitionBuilder extends Object; // Programmatic means of constructing BeanDefinitions using the builder pattern.\npublic class BeanDefinitionDefaults extends Object; // A simple holder for BeanDefinition property defaults.\npublic class BeanDefinitionOverrideException extends BeanDefinitionStoreException; // Subclass of BeanDefinitionStoreException indicating an invalid override attempt: typically registering a new definition for the same bean name while DefaultListableBeanFactory.isAllowBeanDefinitionOverriding() is false.\npublic interface BeanDefinitionReader; // Simple interface for bean definition readers that specifies load methods with Resource and String location parameters.\npublic abstract class BeanDefinitionReaderUtils extends Object; // Utility methods that are useful for bean definition reader implementations.\npublic interface BeanDefinitionRegistry extends org.springframework.core.AliasRegistry; // Interface for registries that hold bean definitions, for example RootBeanDefinition and ChildBeanDefinition instances.\npublic interface BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor; // Extension to the standard BeanFactoryPostProcessor SPI, allowing for the registration of further bean definitions before regular BeanFactoryPostProcessor detection kicks in.\npublic class BeanDefinitionValidationException extends FatalBeanException; // Exception thrown when the validation of a bean definition failed.\n", "des": "Classes supporting the org.springframework.beans.factory package."}
{"index": 2763, "repo": "spring-beans-6.0.11", "code": "package wiring;\n\npublic class BeanConfigurerSupport extends Object implements BeanFactoryAware, InitializingBean, DisposableBean; // Convenient base class for bean configurers that can perform Dependency Injection on objects (however they may be created).\npublic class BeanWiringInfo extends Object; // Holder for bean wiring metadata information about a particular class.\npublic interface BeanWiringInfoResolver; // Strategy interface to be implemented by objects than can resolve bean name information, given a newly instantiated bean object.\npublic class ClassNameBeanWiringInfoResolver extends Object implements BeanWiringInfoResolver; // Simple default implementation of the BeanWiringInfoResolver interface, looking for a bean with the same name as the fully-qualified class name.\n", "des": "Mechanism to determine bean wiring metadata from a bean instance."}
{"index": 2764, "repo": "spring-beans-6.0.11", "code": "package xml;\n\npublic abstract class AbstractBeanDefinitionParser extends Object implements BeanDefinitionParser; // Abstract BeanDefinitionParser implementation providing a number of convenience methods and a template method that subclasses must override to provide the actual parsing logic.\npublic abstract class AbstractSimpleBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // Convenient base class for when there exists a one-to-one mapping between attribute names on the element that is to be parsed and the property names on the Class being configured.\npublic abstract class AbstractSingleBeanDefinitionParser extends AbstractBeanDefinitionParser; // Base class for those BeanDefinitionParser implementations that need to parse and define just a single BeanDefinition.\npublic interface BeanDefinitionDecorator; // Interface used by the DefaultBeanDefinitionDocumentReader to handle custom, nested (directly under a <bean>) tags.\npublic interface BeanDefinitionDocumentReader; // SPI for parsing an XML document that contains Spring bean definitions.\npublic interface BeanDefinitionParser; // Interface used by the DefaultBeanDefinitionDocumentReader to handle custom, top-level (directly under <beans/>) tags.\npublic class BeanDefinitionParserDelegate extends Object; // Stateful delegate class used to parse XML bean definitions.\npublic class BeansDtdResolver extends Object implements EntityResolver; // EntityResolver implementation for the Spring beans DTD, to load the DTD from the Spring class path (or JAR file).\npublic class DefaultBeanDefinitionDocumentReader extends Object implements BeanDefinitionDocumentReader; // Default implementation of the BeanDefinitionDocumentReader interface that reads bean definitions according to the \"spring-beans\" DTD and XSD format (Spring's default XML bean definition format).\npublic class DefaultDocumentLoader extends Object implements DocumentLoader; // Spring's default DocumentLoader implementation.\npublic class DefaultNamespaceHandlerResolver extends Object implements NamespaceHandlerResolver; // Default implementation of the NamespaceHandlerResolver interface.\npublic class DelegatingEntityResolver extends Object implements EntityResolver; // EntityResolver implementation that delegates to a BeansDtdResolver and a PluggableSchemaResolver for DTDs and XML schemas, respectively.\npublic class DocumentDefaultsDefinition extends Object implements DefaultsDefinition; // Simple JavaBean that holds the defaults specified at the <beans> level in a standard Spring XML bean definition document: default-lazy-init, default-autowire, etc.\npublic interface DocumentLoader; // Strategy interface for loading an XML Document.\n", "des": "Contains an abstract XML-based BeanFactory implementation, including a standard \"spring-beans\" XSD."}
{"index": 2765, "repo": "spring-beans-6.0.11", "code": "package propertyeditors;\n\npublic class ByteArrayPropertyEditor extends PropertyEditorSupport; // Editor for byte arrays.\npublic class CharacterEditor extends PropertyEditorSupport; // Editor for a Character, to populate a property of type Character or char from a String value.\npublic class CharArrayPropertyEditor extends PropertyEditorSupport; // Editor for char arrays.\npublic class CharsetEditor extends PropertyEditorSupport; // Editor for java.nio.charset.Charset, translating charset String representations into Charset objects and back.\npublic class ClassArrayEditor extends PropertyEditorSupport; // Property editor for an array of Classes, to enable the direct population of a Class[] property without having to use a String class name property as bridge.\npublic class ClassEditor extends PropertyEditorSupport; // Property editor for java.lang.Class, to enable the direct population of a Class property without recourse to having to use a String class name property as bridge.\npublic class CurrencyEditor extends PropertyEditorSupport; // Editor for java.util.Currency, translating currency codes into Currency objects.\npublic class CustomBooleanEditor extends PropertyEditorSupport; // Property editor for Boolean/boolean properties.\npublic class CustomCollectionEditor extends PropertyEditorSupport; // Property editor for Collections, converting any source Collection to a given target Collection type.\npublic class CustomDateEditor extends PropertyEditorSupport; // Property editor for java.util.Date, supporting a custom java.text.DateFormat.\npublic class CustomMapEditor extends PropertyEditorSupport; // Property editor for Maps, converting any source Map to a given target Map type.\npublic class CustomNumberEditor extends PropertyEditorSupport; // Property editor for any Number subclass such as Short, Integer, Long, BigInteger, Float, Double, BigDecimal.\npublic class FileEditor extends PropertyEditorSupport; // Editor for java.io.File, to directly populate a File property from a Spring resource location.\npublic class InputSourceEditor extends PropertyEditorSupport; // Editor for org.xml.sax.InputSource, converting from a Spring resource location String to a SAX InputSource object.\npublic class InputStreamEditor extends PropertyEditorSupport; // One-way PropertyEditor which can convert from a text String to a java.io.InputStream, interpreting the given String as a Spring resource location (e.g.\npublic class LocaleEditor extends PropertyEditorSupport; // Editor for java.util.Locale, to directly populate a Locale property.\n", "des": "Properties editors used to convert from String values to object types such as java.util.Properties."}
{"index": 2766, "repo": "spring-beans-6.0.11", "code": "package support;\n\npublic class ArgumentConvertingMethodInvoker extends org.springframework.util.MethodInvoker; // Subclass of MethodInvoker that tries to convert the given arguments for the actual target method via a TypeConverter.\npublic class MutableSortDefinition extends Object implements SortDefinition, Serializable; // Mutable implementation of the SortDefinition interface.\npublic class PagedListHolder<E> extends Object implements Serializable; // PagedListHolder is a simple state holder for handling lists of objects, separating them into pages.\npublic class PropertyComparator<T> extends Object implements Comparator<T>; // PropertyComparator performs a comparison of two beans, evaluating the specified bean property via a BeanWrapper.\npublic class ResourceEditorRegistrar extends Object implements PropertyEditorRegistrar; // PropertyEditorRegistrar implementation that populates a given PropertyEditorRegistry (typically a BeanWrapper used for bean creation within an org.springframework.context.ApplicationContext) with resource editors.\npublic interface SortDefinition; // Definition for sorting bean instances by a property.\n", "des": "Classes supporting the org.springframework.beans package, such as utility classes for sorting and holding lists of beans."}
{"index": 2767, "repo": "spring-jms-6.0.11", "code": "package jms;\n\npackage jms.annotation; // Annotations and support classes for declarative JMS listener endpoints.\npackage jms.config; // Support package for declarative messaging configuration, with Java configuration and XML schema support.\npackage jms.connection; // Provides a PlatformTransactionManager implementation for a single JMS ConnectionFactory, and a SingleConnectionFactory adapter.\npackage jms.core; // Core package of the JMS support.\npackage jms.listener; // This package contains the base message listener container facility.\npackage jms.support; // This package provides generic JMS support classes, to be used by higher-level classes like JmsTemplate.\npublic class IllegalStateException extends JmsException; // Runtime exception mirroring the JMS IllegalStateException.\npublic class InvalidClientIDException extends JmsException; // Runtime exception mirroring the JMS InvalidClientIDException.\npublic class InvalidDestinationException extends JmsException; // Runtime exception mirroring the JMS InvalidDestinationException.\npublic class InvalidSelectorException extends JmsException; // Runtime exception mirroring the JMS InvalidSelectorException.\npublic abstract class JmsException extends org.springframework.core.NestedRuntimeException; // Base class for exception thrown by the framework whenever it encounters a problem related to JMS.\npublic class JmsSecurityException extends JmsException; // Runtime exception mirroring the JMS JMSSecurityException.\npublic class MessageEOFException extends JmsException; // Runtime exception mirroring the JMS MessageEOFException.\npublic class MessageFormatException extends JmsException; // Runtime exception mirroring the JMS MessageFormatException.\npublic class MessageNotReadableException extends JmsException; // Runtime exception mirroring the JMS MessageNotReadableException.\npublic class MessageNotWriteableException extends JmsException; // Runtime exception mirroring the JMS MessageNotWriteableException.\npublic class ResourceAllocationException extends JmsException; // Runtime exception mirroring the JMS ResourceAllocationException.\npublic class TransactionInProgressException extends JmsException; // Runtime exception mirroring the JMS TransactionInProgressException.\npublic class TransactionRolledBackException extends JmsException; // Runtime exception mirroring the JMS TransactionRolledBackException.\npublic class UncategorizedJmsException extends JmsException; // JmsException to be thrown when no other matching subclass found.\n", "des": "This package contains integration classes for JMS, allowing for Spring-style JMS access."}
{"index": 2768, "repo": "spring-jms-6.0.11", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(JmsBootstrapConfiguration.class) public @interface EnableJms; // Enable JMS listener annotated endpoints that are created under the cover by a JmsListenerContainerFactory.\n@Configuration(proxyBeanMethods=false) @Role(2) public class JmsBootstrapConfiguration extends Object; // @Configuration class that registers a JmsListenerAnnotationBeanPostProcessor bean capable of processing Spring's @JmsListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(JmsListeners.class) @MessageMapping public @interface JmsListener; // Annotation that marks a method to be the target of a JMS message listener on the specified JmsListener.destination().\npublic class JmsListenerAnnotationBeanPostProcessor extends Object implements org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor, org.springframework.core.Ordered, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.SmartInitializingSingleton; // Bean post-processor that registers methods annotated with JmsListener to be invoked by a JMS message listener container created under the cover by a JmsListenerContainerFactory according to the attributes of the annotation.\n@FunctionalInterface public interface JmsListenerConfigurer; // Optional interface to be implemented by a Spring managed bean willing to customize how JMS listener endpoints are configured.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface JmsListeners; // Container annotation that aggregates several JmsListener annotations.\n", "des": "Annotations and support classes for declarative JMS listener endpoints."}
{"index": 2769, "repo": "spring-jms-6.0.11", "code": "package config;\n\npublic abstract class AbstractJmsListenerContainerFactory<C extends AbstractMessageListenerContainer> extends Object implements JmsListenerContainerFactory<C>; // Base JmsListenerContainerFactory for Spring's base container implementation.\npublic abstract class AbstractJmsListenerEndpoint extends Object implements JmsListenerEndpoint; // Base model for a JMS listener endpoint.\npublic class DefaultJcaListenerContainerFactory extends JmsActivationSpecConfig implements JmsListenerContainerFactory<JmsMessageEndpointManager>; // A JmsListenerContainerFactory implementation to build a JCA-based JmsMessageEndpointManager.\npublic class DefaultJmsListenerContainerFactory extends AbstractJmsListenerContainerFactory<DefaultMessageListenerContainer>; // A JmsListenerContainerFactory implementation to build a regular DefaultMessageListenerContainer.\npublic abstract class JmsListenerConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic interface JmsListenerContainerFactory<C extends MessageListenerContainer>; // Factory of MessageListenerContainer based on a JmsListenerEndpoint definition.\npublic interface JmsListenerEndpoint; // Model for a JMS listener endpoint.\npublic class JmsListenerEndpointRegistrar extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // Helper bean for registering JmsListenerEndpoint with a JmsListenerEndpointRegistry.\npublic class JmsListenerEndpointRegistry extends Object implements org.springframework.beans.factory.DisposableBean, org.springframework.context.SmartLifecycle, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>; // Creates the necessary MessageListenerContainer instances for the registered endpoints.\npublic class JmsNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // A NamespaceHandler for the JMS namespace.\npublic class MethodJmsListenerEndpoint extends AbstractJmsListenerEndpoint implements org.springframework.beans.factory.BeanFactoryAware; // A JmsListenerEndpoint providing the method to invoke to process an incoming message for this endpoint.\npublic class SimpleJmsListenerContainerFactory extends AbstractJmsListenerContainerFactory<SimpleMessageListenerContainer>; // A JmsListenerContainerFactory implementation to build a standard SimpleMessageListenerContainer.\npublic class SimpleJmsListenerEndpoint extends AbstractJmsListenerEndpoint; // A JmsListenerEndpoint simply providing the MessageListener to invoke to process an incoming message for this endpoint.\n", "des": "Support package for declarative messaging configuration, with Java configuration and XML schema support."}
{"index": 2770, "repo": "spring-jms-6.0.11", "code": "package connection;\n\npublic class CachingConnectionFactory extends SingleConnectionFactory; // SingleConnectionFactory subclass that adds Session caching as well as MessageProducer and MessageConsumer caching.\npublic class ChainedExceptionListener extends Object implements ExceptionListener; // Implementation of the JMS ExceptionListener interface that supports chaining, allowing the addition of multiple ExceptionListener instances in order.\npublic abstract class ConnectionFactoryUtils extends Object; // Helper class for managing a JMS ConnectionFactory, in particular for obtaining transactional JMS resources for a given ConnectionFactory.\npublic static interface ConnectionFactoryUtils.ResourceFactory; // Callback interface for resource creation.\npublic class DelegatingConnectionFactory extends Object implements SmartConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, org.springframework.beans.factory.InitializingBean; // ConnectionFactory implementation that delegates all calls to a given target ConnectionFactory, adapting specific create(Queue/Topic)Connection calls to the target ConnectionFactory if necessary (e.g.\npublic class JmsResourceHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a JMS Connection and a JMS Session.\npublic class JmsTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single JMS ConnectionFactory.\npublic interface SessionProxy extends Session; // Subinterface of Session to be implemented by Session proxies.\npublic class SingleConnectionFactory extends Object implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, ExceptionListener, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // A JMS ConnectionFactory adapter that returns the same Connection from all SingleConnectionFactory.createConnection() calls, and ignores calls to Connection.close().\npublic interface SmartConnectionFactory extends ConnectionFactory; // Extension of the jakarta.jms.ConnectionFactory interface, indicating how to release Connections obtained from it.\npublic class SynchedLocalTransactionFailedException extends JmsException; // Exception thrown when a synchronized local transaction failed to complete (after the main transaction has already completed).\npublic class TransactionAwareConnectionFactoryProxy extends Object implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory; // Proxy for a target JMS ConnectionFactory, adding awareness of Spring-managed transactions.\n", "des": "Provides a PlatformTransactionManager implementation for a single JMS ConnectionFactory, and a SingleConnectionFactory adapter."}
{"index": 2771, "repo": "spring-jms-6.0.11", "code": "package core;\n\npackage core.support; // Classes supporting the org.springframework.jms.core package.\n@FunctionalInterface public interface BrowserCallback<T>; // Callback for browsing the messages in a JMS queue.\npublic interface JmsMessageOperations extends org.springframework.messaging.core.MessageSendingOperations<Destination>, org.springframework.messaging.core.MessageReceivingOperations<Destination>, org.springframework.messaging.core.MessageRequestReplyOperations<Destination>; // A specialization of MessageSendingOperations, MessageReceivingOperations and MessageRequestReplyOperations for JMS related operations that allow to specify a destination name rather than the actual Destination.\npublic class JmsMessagingTemplate extends org.springframework.messaging.core.AbstractMessagingTemplate<Destination> implements JmsMessageOperations, org.springframework.beans.factory.InitializingBean; // An implementation of JmsMessageOperations.\npublic interface JmsOperations; // Specifies a basic set of JMS operations.\npublic class JmsTemplate extends JmsDestinationAccessor implements JmsOperations; // Helper class that simplifies synchronous JMS access code.\n@FunctionalInterface public interface MessageCreator; // Creates a JMS message given a Session.\n@FunctionalInterface public interface MessagePostProcessor; // To be used with JmsTemplate's send method that converts an object to a message.\n@FunctionalInterface public interface ProducerCallback<T>; // Callback for sending a message to a JMS destination.\n@FunctionalInterface public interface SessionCallback<T>; // Callback for executing any number of operations on a provided Session.\n", "des": "Core package of the JMS support."}
{"index": 2772, "repo": "spring-jms-6.0.11", "code": "package support;\n\npublic abstract class JmsGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean; // Convenient superclass for application classes that need JMS access.\n", "des": "Classes supporting the org.springframework.jms.core package."}
{"index": 2773, "repo": "spring-jms-6.0.11", "code": "package listener;\n\npackage listener.adapter; // Message listener adapter mechanism that delegates to target listener methods, converting messages to appropriate message content types (such as String or byte array) that get passed into listener methods.\npackage listener.endpoint; // This package provides JCA-based endpoint management for JMS message listeners.\npublic abstract class AbstractJmsListeningContainer extends JmsDestinationAccessor implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.DisposableBean, org.springframework.context.SmartLifecycle; // Common base class for all containers which need to implement listening based on a JMS Connection (either shared or freshly obtained for each attempt).\npublic static class AbstractJmsListeningContainer.SharedConnectionNotInitializedException extends RuntimeException; // Exception that indicates that the initial setup of this container's shared JMS Connection failed.\npublic abstract class AbstractMessageListenerContainer extends AbstractJmsListeningContainer implements MessageListenerContainer; // Abstract base class for Spring message listener container implementations.\npublic abstract class AbstractPollingMessageListenerContainer extends AbstractMessageListenerContainer; // Base class for listener container implementations which are based on polling.\npublic class DefaultMessageListenerContainer extends AbstractPollingMessageListenerContainer; // Message listener container variant that uses plain JMS client APIs, specifically a loop of MessageConsumer.receive() calls that also allow for transactional reception of messages (registering them with XA transactions).\npublic interface MessageListenerContainer extends org.springframework.context.SmartLifecycle; // Internal abstraction used by the framework representing a message listener container.\n@FunctionalInterface public interface SessionAwareMessageListener<M extends Message>; // Variant of the standard JMS MessageListener interface, offering not only the received Message but also the underlying JMS Session object.\npublic class SimpleMessageListenerContainer extends AbstractMessageListenerContainer implements ExceptionListener; // Message listener container that uses the plain JMS client API's MessageConsumer.setMessageListener() method to create concurrent MessageConsumers for the specified listeners.\npublic interface SubscriptionNameProvider; // Interface to be implemented by message listener objects that suggest a specific name for a durable subscription that they might be registered with.\n", "des": "This package contains the base message listener container facility."}
{"index": 2774, "repo": "spring-jms-6.0.11", "code": "package adapter;\n\npublic abstract class AbstractAdaptableMessageListener extends Object implements MessageListener, SessionAwareMessageListener<Message>; // An abstract JMS MessageListener adapter providing the necessary infrastructure to extract the payload of a JMS Message.\npublic class JmsResponse<T> extends Object; // Return type of any JMS listener method used to indicate the actual response destination alongside the response itself.\npublic class ListenerExecutionFailedException extends JmsException; // Exception to be thrown when the execution of a listener method failed.\npublic class MessageListenerAdapter extends AbstractAdaptableMessageListener implements SubscriptionNameProvider; // Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion.\npublic class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener implements SubscriptionNameProvider; // A MessageListener adapter that invokes a configurable InvocableHandlerMethod.\npublic class ReplyFailureException extends JmsException; // Exception to be thrown when the reply of a message failed to be sent.\n", "des": "Message listener adapter mechanism that delegates to target listener methods, converting messages to appropriate message content types (such as String or byte array) that get passed into listener methods."}
{"index": 2775, "repo": "spring-jms-6.0.11", "code": "package endpoint;\n\npublic class DefaultJmsActivationSpecFactory extends StandardJmsActivationSpecFactory; // Default implementation of the JmsActivationSpecFactory interface.\npublic class JmsActivationSpecConfig extends Object; // Common configuration object for activating a JMS message endpoint.\npublic interface JmsActivationSpecFactory; // Strategy interface for creating JCA 1.5 ActivationSpec objects based on a configured JmsActivationSpecConfig object.\npublic class JmsMessageEndpointFactory extends org.springframework.jca.endpoint.AbstractMessageEndpointFactory; // JMS-specific implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities for a JMS listener object (e.g.\npublic static class JmsMessageEndpointFactory.JmsResourceException extends RuntimeException; // Internal exception thrown when a ResourceException has been encountered during the endpoint invocation.\npublic class JmsMessageEndpointManager extends org.springframework.jca.endpoint.GenericMessageEndpointManager implements org.springframework.beans.factory.BeanNameAware, MessageListenerContainer; // Extension of the generic JCA 1.5 GenericMessageEndpointManager, adding JMS-specific support for ActivationSpec configuration.\npublic class StandardJmsActivationSpecFactory extends Object implements JmsActivationSpecFactory; // Standard implementation of the JmsActivationSpecFactory interface.\n", "des": "This package provides JCA-based endpoint management for JMS message listeners."}
{"index": 2776, "repo": "spring-jms-6.0.11", "code": "package support;\n\npackage support.converter; // Provides a MessageConverter abstraction to convert between Java objects and JMS messages.\npackage support.destination; // Support classes for Spring's JMS framework.\npublic abstract class JmsAccessor extends Object implements org.springframework.beans.factory.InitializingBean; // Base class for JmsTemplate and other JMS-accessing gateway helpers, defining common properties such as the JMS ConnectionFactory to operate on.\npublic interface JmsHeaderMapper extends org.springframework.messaging.support.HeaderMapper<Message>; // Strategy interface for mapping Message headers to an outbound JMS Message (e.g.\npublic interface JmsHeaders; // Pre-defined names and prefixes to be used for setting and/or retrieving JMS attributes from/to generic message headers.\npublic class JmsMessageHeaderAccessor extends org.springframework.messaging.support.NativeMessageHeaderAccessor; // A MessageHeaderAccessor implementation giving access to JMS-specific headers.\npublic abstract class JmsUtils extends Object; // Generic utility methods for working with JMS.\npublic class QosSettings extends Object; // Gather the Quality-of-Service settings that can be used when sending a message.\npublic class SimpleJmsHeaderMapper extends org.springframework.messaging.support.AbstractHeaderMapper<Message> implements JmsHeaderMapper; // Simple implementation of JmsHeaderMapper.\n", "des": "This package provides generic JMS support classes, to be used by higher-level classes like JmsTemplate."}
{"index": 2777, "repo": "spring-jms-6.0.11", "code": "package converter;\n\npublic class MappingJackson2MessageConverter extends Object implements SmartMessageConverter, org.springframework.beans.factory.BeanClassLoaderAware; // Message converter that uses Jackson 2.x to convert messages to and from JSON.\npublic class MarshallingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean; // Spring JMS MessageConverter that uses a Marshaller and Unmarshaller.\npublic class MessageConversionException extends JmsException; // Thrown by MessageConverter implementations when the conversion of an object to/from a Message fails.\npublic interface MessageConverter; // Strategy interface that specifies a converter between Java objects and JMS messages.\npublic enum MessageType extends Enum<MessageType>; // Constants that indicate a target message type to convert to: a TextMessage, a BytesMessage, a MapMessage or an ObjectMessage.\npublic class MessagingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean; // Convert a Message from the messaging abstraction to and from a Message using an underlying MessageConverter for the payload and a JmsHeaderMapper to map the JMS headers to and from standard message headers.\npublic class SimpleMessageConverter extends Object implements MessageConverter; // A simple message converter which is able to handle TextMessages, BytesMessages, MapMessages, and ObjectMessages.\npublic interface SmartMessageConverter extends MessageConverter; // An extended MessageConverter SPI with conversion hint support.\n", "des": "Provides a MessageConverter abstraction to convert between Java objects and JMS messages."}
{"index": 2778, "repo": "spring-jms-6.0.11", "code": "package destination;\n\npublic class BeanFactoryDestinationResolver extends Object implements DestinationResolver, org.springframework.beans.factory.BeanFactoryAware; // DestinationResolver implementation based on a Spring BeanFactory.\npublic interface CachingDestinationResolver extends DestinationResolver; // Extension of the DestinationResolver interface, exposing methods for clearing the cache.\npublic class DestinationResolutionException extends JmsException; // Thrown by a DestinationResolver when it cannot resolve a destination name.\n@FunctionalInterface public interface DestinationResolver; // Strategy interface for resolving JMS destinations.\npublic class DynamicDestinationResolver extends Object implements DestinationResolver; // Simple DestinationResolver implementation resolving destination names as dynamic destinations.\npublic abstract class JmsDestinationAccessor extends JmsAccessor; // Base class for JmsTemplate and other JMS-accessing gateway helpers, adding destination-related properties to JmsAccessor's common properties.\npublic class JndiDestinationResolver extends org.springframework.jndi.JndiLocatorSupport implements CachingDestinationResolver; // DestinationResolver implementation which interprets destination names as JNDI locations (with a configurable fallback strategy).\n", "des": "Support classes for Spring's JMS framework."}
{"index": 2779, "repo": "spring-security-ldap-6.1.2", "code": "package ldap;\n\npackage ldap.authentication; // The LDAP authentication provider package.\npackage ldap.ppolicy; // Implementation of password policy functionality based on the Password Policy for LDAP Directories.\npackage ldap.search; // LdapUserSearch implementations.\npackage ldap.server; // Embedded Apache Directory Server implementation, as used by the configuration namespace.\npackage ldap.userdetails; // LDAP-focused UserDetails implementations which map from a ubset of the data contained in some of the standard LDAP types (such as InetOrgPerson).\npublic class DefaultLdapUsernameToDnMapper extends Object implements LdapUsernameToDnMapper; // This implementation appends a name component to the userDnBase context using the usernameAttributeName property.\npublic class DefaultSpringSecurityContextSource extends org.springframework.ldap.core.support.LdapContextSource; // ContextSource implementation which uses Spring LDAP's LdapContextSource as a base class.\npublic interface LdapUsernameToDnMapper; // Constructs an Ldap Distinguished Name from a username.\npublic final class LdapUtils extends Object; // LDAP Utility methods.\npublic class SpringSecurityLdapTemplate extends org.springframework.ldap.core.LdapTemplate; // Extension of Spring LDAP's LdapTemplate class which adds extra functionality required by Spring Security.\n", "des": "Spring Security's LDAP module."}
{"index": 2780, "repo": "spring-security-ldap-6.1.2", "code": "package authentication;\n\npublic abstract class AbstractLdapAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider, org.springframework.context.MessageSourceAware; // Base class for the standard LdapAuthenticationProvider and the ActiveDirectoryLdapAuthenticationProvider.\npublic abstract class AbstractLdapAuthenticator extends Object implements LdapAuthenticator, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware; // Base class for the authenticator implementations.\npublic class BindAuthenticator extends AbstractLdapAuthenticator; // An authenticator which binds as a user.\npublic class LdapAuthenticationProvider extends AbstractLdapAuthenticationProvider; // An AuthenticationProvider implementation that authenticates against an LDAP server.\npublic interface LdapAuthenticator; // The strategy interface for locating and authenticating an Ldap user.\npublic final class NullLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator;\npublic final class PasswordComparisonAuthenticator extends AbstractLdapAuthenticator; // An LdapAuthenticator which compares the login password with the value stored in the directory using a remote LDAP \"compare\" operation.\npublic class SpringSecurityAuthenticationSource extends Object implements org.springframework.ldap.core.AuthenticationSource; // An AuthenticationSource to retrieve authentication information stored in Spring Security's SecurityContextHolder.\npublic class UserDetailsServiceLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator; // Simple LdapAuthoritiesPopulator which delegates to a UserDetailsService, using the name which was supplied at login as the username.\n", "des": "The LDAP authentication provider package."}
{"index": 2781, "repo": "spring-security-ldap-6.1.2", "code": "package ppolicy;\n\npublic class PasswordPolicyAwareContextSource extends DefaultSpringSecurityContextSource; // Extended version of the DefaultSpringSecurityContextSource which adds support for the use of PasswordPolicyControl to make use of user account data stored in the directory.\npublic class PasswordPolicyControl extends Object implements Control; // A Password Policy request control.\npublic final class PasswordPolicyControlExtractor extends Object; // Obtains the PasswordPolicyControl from a context for use by other classes.\npublic class PasswordPolicyControlFactory extends ControlFactory; // Transforms a control object to a PasswordPolicyResponseControl object, if appropriate.\npublic interface PasswordPolicyData;\npublic enum PasswordPolicyErrorStatus extends Enum<PasswordPolicyErrorStatus>; // Defines status codes for use with PasswordPolicyException, with error codes (for message source lookup) and default messages.\npublic class PasswordPolicyException extends RuntimeException; // Generic exception raised by the ppolicy package.\npublic class PasswordPolicyResponseControl extends PasswordPolicyControl; // Represents the response control received when a PasswordPolicyControl is used when binding to a directory.\n", "des": "Implementation of password policy functionality based on the Password Policy for LDAP Directories."}
{"index": 2782, "repo": "spring-security-ldap-6.1.2", "code": "package search;\n\npublic class FilterBasedLdapUserSearch extends Object implements LdapUserSearch; // LdapUserSearch implementation which uses an Ldap filter to locate the user.\npublic interface LdapUserSearch; // Obtains a user's information from the LDAP directory given a login name.\n", "des": "LdapUserSearch implementations."}
{"index": 2783, "repo": "spring-security-ldap-6.1.2", "code": "package server;\n\n@Deprecated public class ApacheDSContainer extends Object implements EmbeddedLdapServerContainer, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.context.Lifecycle, org.springframework.context.ApplicationContextAware;\npublic interface EmbeddedLdapServerContainer; // Provides lifecycle services for an embedded LDAP server.\npublic class UnboundIdContainer extends Object implements EmbeddedLdapServerContainer, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.context.Lifecycle, org.springframework.context.ApplicationContextAware;\n", "des": "Embedded Apache Directory Server implementation, as used by the configuration namespace."}
{"index": 2784, "repo": "spring-security-ldap-6.1.2", "code": "package userdetails;\n\npublic class DefaultLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator; // The default strategy for obtaining user role information from the directory.\npublic class InetOrgPerson extends Person; // UserDetails implementation whose properties are based on a subset of the LDAP schema for inetOrgPerson.\npublic static class InetOrgPerson.Essence extends Person.Essence;\npublic class InetOrgPersonContextMapper extends Object implements UserDetailsContextMapper;\npublic interface LdapAuthoritiesPopulator; // Obtains a list of granted authorities for an Ldap user.\npublic class LdapAuthority extends Object implements org.springframework.security.core.GrantedAuthority; // An authority that contains at least a DN and a role name for an LDAP entry but can also contain other desired attributes to be fetched during an LDAP authority search.\npublic interface LdapUserDetails extends org.springframework.security.core.userdetails.UserDetails, org.springframework.security.core.CredentialsContainer; // Captures the information for a user's LDAP entry.\npublic class LdapUserDetailsImpl extends Object implements LdapUserDetails, PasswordPolicyData; // A UserDetails implementation which is used internally by the Ldap services.\npublic static class LdapUserDetailsImpl.Essence extends Object; // Variation of essence pattern.\npublic class LdapUserDetailsManager extends Object implements org.springframework.security.provisioning.UserDetailsManager; // An Ldap implementation of UserDetailsManager.\npublic class LdapUserDetailsMapper extends Object implements UserDetailsContextMapper; // The context mapper used by the LDAP authentication provider to create an LDAP user object.\npublic class LdapUserDetailsService extends Object implements org.springframework.security.core.userdetails.UserDetailsService; // LDAP implementation of UserDetailsService based around an LdapUserSearch and an LdapAuthoritiesPopulator.\npublic class NestedLdapAuthoritiesPopulator extends DefaultLdapAuthoritiesPopulator; // A LDAP authority populator that can recursively search static nested groups.\npublic class Person extends LdapUserDetailsImpl; // UserDetails implementation whose properties are based on the LDAP schema for Person.\npublic static class Person.Essence extends LdapUserDetailsImpl.Essence;\npublic class PersonContextMapper extends Object implements UserDetailsContextMapper;\n", "des": "LDAP-focused UserDetails implementations which map from a ubset of the data contained in some of the standard LDAP types (such as InetOrgPerson)."}
{"index": 2785, "repo": "spring-expression-6.0.11", "code": "package expression;\n\npackage expression.common; // Common utility classes behind the Spring Expression Language.\npackage expression.spel; // SpEL's central implementation package.\npublic class AccessException extends Exception; // An AccessException is thrown by an accessor if it has an unexpected problem.\npublic interface BeanResolver; // A bean resolver can be registered with the evaluation context and will kick in for bean references: @myBeanName and &myBeanName expressions.\npublic interface ConstructorExecutor; // Executors are built by resolvers and can be cached by the infrastructure to repeat an operation quickly without going back to the resolvers.\n@FunctionalInterface public interface ConstructorResolver; // A constructor resolver attempts to locate a constructor and returns a ConstructorExecutor that can be used to invoke that constructor.\npublic interface EvaluationContext; // Expressions are executed in an evaluation context.\npublic class EvaluationException extends ExpressionException; // Represent an exception that occurs during expression evaluation.\npublic interface Expression; // An expression capable of evaluating itself against context objects.\npublic class ExpressionException extends RuntimeException; // Superclass for exceptions that can occur whilst processing expressions.\npublic class ExpressionInvocationTargetException extends EvaluationException; // This exception wraps (as cause) a checked exception thrown by some method that SpEL invokes.\npublic interface ExpressionParser; // Parses expression strings into compiled expressions that can be evaluated.\npublic interface MethodExecutor; // MethodExecutors are built by the resolvers and can be cached by the infrastructure to repeat an operation quickly without going back to the resolvers.\n@FunctionalInterface public interface MethodFilter; // MethodFilter instances allow SpEL users to fine tune the behaviour of the method resolution process.\npublic interface MethodResolver; // A method resolver attempts to locate a method and returns a command executor that can be used to invoke that method.\npublic enum Operation extends Enum<Operation>; // Supported operations that an OperatorOverloader can implement for any pair of operands.\npublic interface OperatorOverloader; // By default the mathematical operators Operation support simple types like numbers.\npublic class ParseException extends ExpressionException; // Represent an exception that occurs during expression parsing.\npublic interface ParserContext; // Input provided to an expression parser that can influence an expression parsing/compilation routine.\npublic interface PropertyAccessor; // A property accessor is able to read from (and possibly write to) an object's properties.\n", "des": "Core abstractions behind the Spring Expression Language."}
{"index": 2786, "repo": "spring-expression-6.0.11", "code": "package common;\n\npublic class CompositeStringExpression extends Object implements Expression; // Represents a template expression broken into pieces.\npublic abstract class ExpressionUtils extends Object; // Common utility functions that may be used by any Expression Language provider.\npublic class LiteralExpression extends Object implements Expression; // A very simple hardcoded implementation of the Expression interface that represents a string literal.\npublic abstract class TemplateAwareExpressionParser extends Object implements ExpressionParser; // An expression parser that understands templates.\npublic class TemplateParserContext extends Object implements ParserContext; // Configurable ParserContext implementation for template parsing.\n", "des": "Common utility classes behind the Spring Expression Language."}
{"index": 2787, "repo": "spring-expression-6.0.11", "code": "package spel;\n\npackage spel.ast; // SpEL's abstract syntax tree.\npackage spel.standard; // SpEL's standard parser implementation.\npackage spel.support; // SpEL's default implementations for various core abstractions.\npublic class CodeFlow extends Object implements org.springframework.asm.Opcodes; // Manages the class being generated by the compilation process.\n@FunctionalInterface public static interface CodeFlow.ClinitAdder; // Interface used to generate clinit static initializer blocks.\n@FunctionalInterface public static interface CodeFlow.FieldAdder; // Interface used to generate fields.\npublic interface CompilablePropertyAccessor extends PropertyAccessor, org.springframework.asm.Opcodes; // A compilable property accessor is able to generate bytecode that represents the access operation, facilitating compilation to bytecode of expressions that use the accessor.\npublic abstract class CompiledExpression extends Object; // Base superclass for compiled expressions.\npublic class ExpressionState extends Object; // ExpressionState is for maintaining per-expression-evaluation state: any changes to it are not seen by other expressions, but it gives a place to hold local variables and for component expressions in a compound expression to communicate state.\npublic class InternalParseException extends RuntimeException; // Wraps a real parse exception.\npublic enum SpelCompilerMode extends Enum<SpelCompilerMode>; // Captures the possible configuration settings for a compiler that can be used when evaluating expressions.\npublic class SpelEvaluationException extends EvaluationException; // Root exception for Spring EL related exceptions.\npublic enum SpelMessage extends Enum<SpelMessage>; // Contains all the messages that can be produced by the Spring Expression Language.\npublic static enum SpelMessage.Kind extends Enum<SpelMessage.Kind>; // Message kinds.\npublic interface SpelNode; // Represents a node in the AST for a parsed expression.\npublic class SpelParseException extends ParseException; // Root exception for Spring EL related exceptions.\npublic class SpelParserConfiguration extends Object; // Configuration object for the SpEL expression parser.\n", "des": "SpEL's central implementation package."}
{"index": 2788, "repo": "spring-expression-6.0.11", "code": "package ast;\n\npublic class Assign extends SpelNodeImpl; // Represents assignment.\npublic abstract class AstUtils extends Object; // Utilities methods for use in the Ast classes.\npublic class BeanReference extends SpelNodeImpl; // Represents a bean reference to a type, for example @foo or @'foo.bar'.\npublic class BooleanLiteral extends Literal; // Represents the literal values TRUE and FALSE.\npublic class CompoundExpression extends SpelNodeImpl; // Represents a DOT separated expression sequence, such as property1.property2.methodOne().\npublic class ConstructorReference extends SpelNodeImpl; // Represents the invocation of a constructor.\npublic class Elvis extends SpelNodeImpl; // Represents the elvis operator ?:.\npublic class FloatLiteral extends Literal; // Expression language AST node that represents a float literal.\npublic class FunctionReference extends SpelNodeImpl; // A function reference is of the form \"#someFunction(a,b,c)\".\npublic class Identifier extends SpelNodeImpl; // An 'identifier' SpelNode.\npublic class Indexer extends SpelNodeImpl; // An Indexer can index into some proceeding structure to access a particular piece of it.\npublic class InlineList extends SpelNodeImpl; // Represent a list in an expression, e.g.\npublic class InlineMap extends SpelNodeImpl; // Represent a map in an expression, e.g.\npublic class IntLiteral extends Literal; // Expression language AST node that represents an integer literal.\npublic abstract class Literal extends SpelNodeImpl; // Common superclass for nodes representing literals (boolean, string, number, etc).\npublic class LongLiteral extends Literal; // Expression language AST node that represents a long integer literal.\npublic class MethodReference extends SpelNodeImpl; // Expression language AST node that represents a method reference.\npublic class NullLiteral extends Literal; // Expression language AST node that represents null.\npublic class OpAnd extends Operator; // Represents the boolean AND operation.\npublic class OpDec extends Operator; // Decrement operator.\npublic class OpDivide extends Operator; // Implements division operator.\npublic class OpEQ extends Operator; // Implements the equality operator.\npublic abstract class Operator extends SpelNodeImpl; // Common supertype for operators that operate on either one or two operands.\n", "des": "SpEL's abstract syntax tree."}
{"index": 2789, "repo": "spring-expression-6.0.11", "code": "package standard;\n\npublic final class SpelCompiler extends Object implements org.springframework.asm.Opcodes; // A SpelCompiler will take a regular parsed expression and create (and load) a class containing byte code that does the same thing as that expression.\npublic class SpelExpression extends Object implements Expression; // A SpelExpression represents a parsed (valid) expression that is ready to be evaluated in a specified context.\npublic class SpelExpressionParser extends TemplateAwareExpressionParser; // SpEL parser.\n", "des": "SpEL's standard parser implementation."}
{"index": 2790, "repo": "spring-expression-6.0.11", "code": "package support;\n\npublic final class BooleanTypedValue extends TypedValue; // A TypedValue for booleans.\npublic final class DataBindingMethodResolver extends ReflectiveMethodResolver; // A MethodResolver variant for data binding purposes, using reflection to access instance methods on a given target object.\npublic final class DataBindingPropertyAccessor extends ReflectivePropertyAccessor; // A PropertyAccessor variant for data binding purposes, using reflection to access properties for reading and possibly writing.\npublic abstract class ReflectionHelper extends Object; // Utility methods used by the reflection resolver code to discover the appropriate methods/constructors and fields that should be used in expressions.\npublic class ReflectiveConstructorExecutor extends Object implements ConstructorExecutor; // A simple ConstructorExecutor implementation that runs a constructor using reflective invocation.\npublic class ReflectiveConstructorResolver extends Object implements ConstructorResolver; // A constructor resolver that uses reflection to locate the constructor that should be invoked.\npublic class ReflectiveMethodExecutor extends Object implements MethodExecutor; // MethodExecutor that works via reflection.\npublic class ReflectiveMethodResolver extends Object implements MethodResolver; // Reflection-based MethodResolver used by default in StandardEvaluationContext unless explicit method resolvers have been specified.\npublic class ReflectivePropertyAccessor extends Object implements PropertyAccessor; // A powerful PropertyAccessor that uses reflection to access properties for reading and possibly also for writing on a target instance.\npublic static class ReflectivePropertyAccessor.OptimalPropertyAccessor extends Object implements CompilablePropertyAccessor; // An optimized form of a PropertyAccessor that will use reflection but only knows how to access a particular property on a particular class.\npublic final class SimpleEvaluationContext extends Object implements EvaluationContext; // A basic implementation of EvaluationContext that focuses on a subset of essential SpEL features and customization options, targeting simple condition evaluation and in particular data binding scenarios.\npublic static class SimpleEvaluationContext.Builder extends Object; // Builder for SimpleEvaluationContext.\npublic class StandardEvaluationContext extends Object implements EvaluationContext; // A powerful and highly configurable EvaluationContext implementation.\npublic class StandardOperatorOverloader extends Object implements OperatorOverloader; // Standard implementation of OperatorOverloader.\npublic class StandardTypeComparator extends Object implements TypeComparator; // A basic TypeComparator implementation: supports comparison of Number types as well as types implementing Comparable.\npublic class StandardTypeConverter extends Object implements TypeConverter; // Default implementation of the TypeConverter interface, delegating to a core Spring ConversionService.\n", "des": "SpEL's default implementations for various core abstractions."}
{"index": 2791, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package spring;\n\npackage spring.remoting; // Support to enable Spring-based remote method invocations to carry a Shiro session ID as part of the invocation payload, allowing remote clients to perform security operations.\npackage spring.web; // Spring-specific components for use in Spring-based web applications.\npublic class LifecycleBeanPostProcessor extends Object implements org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor, org.springframework.core.PriorityOrdered; // Bean post processor for Spring that automatically calls the init() and/or destroy() methods on Shiro objects that implement the Initializable or Destroyable interfaces, respectfully.\npublic class ShiroEventBusBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // Spring BeanPostProcessor that detects, EventBusAware and classes containing @Subscribe methods.\n", "des": "Spring Application Framework support for enabling Shiro in spring applications."}
{"index": 2792, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package remoting;\n\npublic class SecureRemoteInvocationExecutor extends org.springframework.remoting.support.DefaultRemoteInvocationExecutor; // An implementation of the Spring RemoteInvocationExecutor that binds a sessionId to the incoming thread to make it available to the SecurityManager implementation during the thread execution.\npublic class SecureRemoteInvocationFactory extends org.springframework.remoting.support.DefaultRemoteInvocationFactory; // A RemoteInvocationFactory that passes the session ID to the server via a RemoteInvocation attribute.\n", "des": "Support to enable Spring-based remote method invocations to carry a Shiro session ID as part of the invocation payload, allowing remote clients to perform security operations."}
{"index": 2793, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package interceptor;\n\npublic class AopAllianceAnnotationsAuthorizingMethodInterceptor extends org.apache.shiro.authz.aop.AnnotationsAuthorizingMethodInterceptor implements org.aopalliance.intercept.MethodInterceptor; // Allows Shiro Annotations to work in any AOP Alliance specific implementation environment (for example, Spring).\npublic class AuthorizationAttributeSourceAdvisor extends org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor; // TODO - complete JavaDoc\n", "des": "Spring AOP support for enabling Shiro annotations in Spring-configured applications."}
{"index": 2794, "repo": "shiro-spring-2.0.0-alpha-2", "code": "package web;\n\npublic class ShiroFilterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.config.BeanPostProcessor; // FactoryBean to be used in Spring-based web applications for defining the master Shiro Filter.\npublic class ShiroUrlPathHelper extends org.springframework.web.util.UrlPathHelper; // A Spring UrlPathHelper that uses Shiro's path resolution logic.\n", "des": "Spring-specific components for use in Spring-based web applications."}
{"index": 2795, "repo": "spring-amqp-3.0.6", "code": "package amqp;\n\npackage amqp.core; // Provides core classes for the spring AMQP abstraction.\npackage amqp.event; // Classes related to application events\npackage amqp.support; // Package for Spring AMQP support classes.\npackage amqp.utils; // Provides utility classes to support Spring AMQP.\npublic class AmqpApplicationContextClosedException extends AmqpException; // Thrown when the connection factory has been destroyed during context close; the factory can no longer open connections.\npublic class AmqpAuthenticationException extends AmqpException; // Runtime wrapper for an authentication exception.\npublic class AmqpConnectException extends AmqpException; // RuntimeException wrapper for an ConnectException which can be commonly thrown from AMQP operations if the remote process dies or there is a network issue.\npublic class AmqpException extends RuntimeException; // Base RuntimeException for errors that occur when executing AMQP operations.\npublic class AmqpIllegalStateException extends AmqpException; // Equivalent of an IllegalStateException but within the AmqpException hierarchy.\npublic class AmqpIOException extends AmqpException; // RuntimeException wrapper for an IOException which can be commonly thrown from AMQP operations.\npublic class AmqpRejectAndDontRequeueException extends AmqpException; // Exception for listener implementations used to indicate the basic.reject will be sent with requeue=false in order to enable features such as DLQ.\npublic class AmqpRemoteException extends AmqpException; // An exception that wraps an exception thrown by the server in a request/reply scenario.\npublic class AmqpResourceNotAvailableException extends AmqpException; // The AmqpException thrown when some resource can't be accessed.\npublic class AmqpTimeoutException extends AmqpException; // Exception thrown when some time-bound operation fails to execute in the desired time.\npublic class AmqpUnsupportedEncodingException extends AmqpException; // RuntimeException for unsupported encoding in an AMQP operation.\npublic class ImmediateAcknowledgeAmqpException extends AmqpException; // Special exception for listener implementations that want to signal that the current batch of messages should be acknowledged immediately (i.e.\npublic class ImmediateRequeueAmqpException extends AmqpException; // The special AmqpException to be thrown from the listener (e.g.\npublic class UncategorizedAmqpException extends AmqpException; // A \"catch-all\" exception type within the AmqpException hierarchy when no more specific cause is known.\n", "des": "Base package for Spring AMQP."}
{"index": 2796, "repo": "spring-amqp-3.0.6", "code": "package core;\n\npublic abstract class AbstractBuilder extends Object; // Base class for builders supporting arguments.\npublic abstract class AbstractDeclarable extends Object implements Declarable; // Base class for Declarable classes.\npublic abstract class AbstractExchange extends AbstractDeclarable implements Exchange; // Common properties that describe all exchange types.\npublic enum AcknowledgeMode extends Enum<AcknowledgeMode>; // Acknowledgment modes supported by the listener container.\npublic class Address extends Object; // Represents an address for publication of an AMQP message.\npublic interface AmqpAdmin; // Specifies a basic set of portable AMQP administrative operations for AMQP > 0.9.\npublic class AmqpMessageReturnedException extends AmqpException; // Exception thrown if the request message cannot be delivered when the mandatory flag is set.\npublic class AmqpReplyTimeoutException extends AmqpException; // Async reply timeout.\npublic interface AmqpTemplate; // Specifies a basic set of AMQP operations.\npublic class AnonymousQueue extends Queue; // Represents an anonymous, non-durable, exclusive, auto-delete queue.\npublic interface AsyncAmqpTemplate; // Classes implementing this interface can perform asynchronous send and receive operations using CompletableFutures.\npublic class Base64UrlNamingStrategy extends Object implements NamingStrategy; // Generates names with the form <prefix><base64url> where 'prefix' is 'spring.gen-' by default (e.g.\npublic interface BatchMessageListener extends MessageListener; // Used to receive a batch of messages if the container supports it.\npublic class Binding extends AbstractDeclarable; // Simple container collecting information to describe a binding.\npublic static enum Binding.DestinationType extends Enum<Binding.DestinationType>; // The binding destination.\npublic final class BindingBuilder extends Object; // Basic builder class to create bindings for a more fluent API style in code based configuration.\npublic static final class BindingBuilder.DestinationConfigurer extends Object; // General destination configurer.\npublic static final class BindingBuilder.DirectExchangeRoutingKeyConfigurer extends Object; // Direct exchange routing key configurer.\npublic static class BindingBuilder.GenericArgumentsConfigurer extends Object; // Generic argument configurer.\npublic static final class BindingBuilder.GenericExchangeRoutingKeyConfigurer extends Object; // Generic exchange routing key configurer.\npublic static final class BindingBuilder.HeadersExchangeMapConfigurer extends Object; // Headers exchange configurer.\n", "des": "Provides core classes for the spring AMQP abstraction."}
{"index": 2797, "repo": "spring-amqp-3.0.6", "code": "package event;\n\npublic abstract class AmqpEvent extends org.springframework.context.ApplicationEvent; // Base class for events.\n", "des": "Classes related to application events"}
{"index": 2798, "repo": "spring-amqp-3.0.6", "code": "package support;\n\npackage support.converter; // Provides classes for supporting message conversion.\npackage support.postprocessor; // Package for Spring AMQP message post processors.\npublic interface AmqpHeaderMapper extends org.springframework.messaging.support.HeaderMapper<MessageProperties>; // Strategy interface for mapping messaging Message headers to an outbound MessageProperties (e.g.\npublic abstract class AmqpHeaders extends Object; // Pre-defined names and prefixes to be used for setting and/or retrieving AMQP MessageProperties from/to Message Headers.\npublic class AmqpMessageHeaderAccessor extends org.springframework.messaging.support.NativeMessageHeaderAccessor; // A MessageHeaderAccessor implementation giving access to AMQP-specific headers.\n@FunctionalInterface public interface ConditionalExceptionLogger; // For components that support customization of the logging of certain events, users can provide an implementation of this interface to modify the existing logging behavior.\n@FunctionalInterface public interface ConsumerTagStrategy; // A strategy interface to determine the consumer tag to be used when issuing a basicConsume operation.\npublic final class SendRetryContextAccessor extends Object; // Type safe accessor for retried message sending.\npublic class SimpleAmqpHeaderMapper extends org.springframework.messaging.support.AbstractHeaderMapper<MessageProperties> implements AmqpHeaderMapper; // Simple implementation of AmqpHeaderMapper.\n", "des": "Package for Spring AMQP support classes."}
{"index": 2799, "repo": "spring-amqp-3.0.6", "code": "package converter;\n\npublic abstract class AbstractJackson2MessageConverter extends AbstractMessageConverter implements org.springframework.beans.factory.BeanClassLoaderAware, SmartMessageConverter; // Abstract Jackson2 message converter.\npublic abstract class AbstractJavaTypeMapper extends Object implements org.springframework.beans.factory.BeanClassLoaderAware; // Abstract type mapper.\npublic abstract class AbstractMessageConverter extends Object implements MessageConverter; // Convenient base class for MessageConverter implementations.\npublic abstract class AllowedListDeserializingMessageConverter extends AbstractMessageConverter; // MessageConverters that potentially use Java deserialization.\npublic interface ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic class ContentTypeDelegatingMessageConverter extends Object implements MessageConverter; // A composite MessageConverter that delegates to an actual MessageConverter based on the contentType header.\npublic class DefaultClassMapper extends Object implements ClassMapper, org.springframework.beans.factory.InitializingBean; // Maps to/from JSON using type information in the MessageProperties; the default name of the message property containing the type is \"__TypeId__\".\npublic class DefaultJackson2JavaTypeMapper extends AbstractJavaTypeMapper implements Jackson2JavaTypeMapper; // Jackson 2 type mapper.\npublic interface Jackson2JavaTypeMapper extends ClassMapper; // Strategy for setting metadata on messages such that one can create the class that needs to be instantiated when receiving a message.\npublic static enum Jackson2JavaTypeMapper.TypePrecedence extends Enum<Jackson2JavaTypeMapper.TypePrecedence>; // The precedence for type conversion - inferred from the method parameter or message headers.\npublic class Jackson2JsonMessageConverter extends AbstractJackson2MessageConverter; // JSON converter that uses the Jackson 2 Json library.\npublic class Jackson2XmlMessageConverter extends AbstractJackson2MessageConverter; // XML converter that uses the Jackson 2 Xml library.\npublic class MarshallingMessageConverter extends AbstractMessageConverter implements org.springframework.beans.factory.InitializingBean; // Spring Rabbit MessageConverter that uses a Marshaller and Unmarshaller.\npublic class MessageConversionException extends AmqpException; // Exception to be thrown by message converters if they encounter a problem with converting a message or object.\npublic interface MessageConverter; // Message converter interface.\n", "des": "Provides classes for supporting message conversion."}
{"index": 2800, "repo": "spring-amqp-3.0.6", "code": "package postprocessor;\n\npublic abstract class AbstractCompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered; // Base class for post processors that compress the message body.\npublic abstract class AbstractDecompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered; // Base class for post processors that decompress the message body if the MessageProperties.SPRING_AUTO_DECOMPRESS header is true or to optionally always decompress if the content encoding matches AbstractDecompressingPostProcessor.getEncoding(), or starts with AbstractDecompressingPostProcessor.getEncoding() + \":\", in which case the encoding following the colon becomes the final content encoding of the decompressed message.\npublic abstract class AbstractDeflaterPostProcessor extends AbstractCompressingPostProcessor; // Base class for post processors based on Deflater.\npublic class DeflaterPostProcessor extends AbstractDeflaterPostProcessor; // A post processor that uses a DeflaterOutputStream to compress the message body.\npublic class DelegatingDecompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered; // A MessagePostProcessor that delegates to one of its MessagePostProcessors depending on the content encoding.\npublic class GUnzipPostProcessor extends AbstractDecompressingPostProcessor; // A post processor that uses a GZIPInputStream to decompress the message body.\npublic class GZipPostProcessor extends AbstractDeflaterPostProcessor; // A post processor that uses a GZIPOutputStream to compress the message body.\npublic class InflaterPostProcessor extends AbstractDecompressingPostProcessor; // A post processor that uses a InflaterInputStream to decompress the message body.\npublic final class MessagePostProcessorUtils extends Object; // Utilities for message post processors.\npublic class UnzipPostProcessor extends AbstractDecompressingPostProcessor; // A post processor that uses a ZipInputStream to decompress the message body.\npublic class ZipPostProcessor extends AbstractDeflaterPostProcessor; // A post processor that uses a ZipOutputStream to compress the message body.\n", "des": "Package for Spring AMQP message post processors."}
{"index": 2801, "repo": "spring-amqp-3.0.6", "code": "package utils;\n\npublic final class JavaUtils extends Object; // Chained utility methods to simplify some Java repetitive code.\npublic class MapBuilder<B extends MapBuilder<B,K,V>,K,V> extends Object; // A Builder pattern implementation for a Map.\npublic final class SerializationUtils extends Object; // Static utility to help with serialization.\n", "des": "Provides utility classes to support Spring AMQP."}
{"index": 2802, "repo": "spring-security-oauth2-core-6.1.2", "code": "package core;\n\npackage core.endpoint; // Support classes that model the OAuth 2.0 Request and Response messages from the Authorization Endpoint and Token Endpoint.\npackage core.oidc; // Core classes and interfaces providing support for OpenID Connect Core 1.0.\npackage core.user; // Provides a model for an OAuth 2.0 representation of a user Principal.\npublic abstract class AbstractOAuth2Token extends Object implements OAuth2Token, Serializable; // Base class for OAuth 2.0 Token implementations.\npublic final class AuthenticationMethod extends Object implements Serializable; // The authentication method used when sending bearer access tokens in resource requests to resource servers.\npublic final class AuthorizationGrantType extends Object implements Serializable; // An authorization grant is a credential representing the resource owner's authorization (to access it's protected resources) to the client and used by the client to obtain an access token.\npublic interface ClaimAccessor; // An \"accessor\" for a set of claims that may be used for assertions.\npublic final class ClientAuthenticationMethod extends Object implements Serializable; // The authentication method used when authenticating the client with the authorization server.\npublic final class DefaultOAuth2AuthenticatedPrincipal extends Object implements OAuth2AuthenticatedPrincipal, Serializable; // A domain object that wraps the attributes of an OAuth 2.0 token.\npublic final class DelegatingOAuth2TokenValidator<T extends OAuth2Token> extends Object implements OAuth2TokenValidator<T>; // A composite validator\npublic class OAuth2AccessToken extends AbstractOAuth2Token; // An implementation of an AbstractOAuth2Token representing an OAuth 2.0 Access Token.\npublic static final class OAuth2AccessToken.TokenType extends Object implements Serializable; // Access Token Types.\npublic interface OAuth2AuthenticatedPrincipal extends org.springframework.security.core.AuthenticatedPrincipal; // An AuthenticatedPrincipal that represents the principal associated with an OAuth 2.0 token.\npublic class OAuth2AuthenticationException extends org.springframework.security.core.AuthenticationException; // This exception is thrown for all OAuth 2.0 related Authentication errors.\npublic class OAuth2AuthorizationException extends RuntimeException; // Base exception for OAuth 2.0 Authorization errors.\npublic class OAuth2DeviceCode extends AbstractOAuth2Token; // An implementation of an AbstractOAuth2Token representing a device code as part of the OAuth 2.0 Device Authorization Grant.\npublic class OAuth2Error extends Object implements Serializable; // A representation of an OAuth 2.0 Error.\n", "des": "Core classes and interfaces providing support for the OAuth 2.0 Authorization Framework."}
{"index": 2803, "repo": "spring-security-oauth2-core-6.1.2", "code": "package endpoint;\n\npublic final class DefaultMapOAuth2AccessTokenResponseConverter extends Object implements org.springframework.core.convert.converter.Converter<Map<String,Object>,OAuth2AccessTokenResponse>; // A Converter that converts the provided OAuth 2.0 Access Token Response parameters to an OAuth2AccessTokenResponse.\npublic final class DefaultOAuth2AccessTokenResponseMapConverter extends Object implements org.springframework.core.convert.converter.Converter<OAuth2AccessTokenResponse,Map<String,Object>>; // A Converter that converts the provided OAuth2AccessTokenResponse to a Map representation of the OAuth 2.0 Access Token Response parameters.\npublic final class OAuth2AccessTokenResponse extends Object; // A representation of an OAuth 2.0 Access Token Response.\npublic static final class OAuth2AccessTokenResponse.Builder extends Object; // A builder for OAuth2AccessTokenResponse.\npublic final class OAuth2AuthorizationExchange extends Object; // An \"exchange\" of an OAuth 2.0 Authorization Request and Response for the authorization code grant type.\npublic final class OAuth2AuthorizationRequest extends Object implements Serializable; // A representation of an OAuth 2.0 Authorization Request for the authorization code grant type.\npublic static final class OAuth2AuthorizationRequest.Builder extends Object; // A builder for OAuth2AuthorizationRequest.\npublic final class OAuth2AuthorizationResponse extends Object; // A representation of an OAuth 2.0 Authorization Response for the authorization code grant type.\npublic static final class OAuth2AuthorizationResponse.Builder extends Object; // A builder for OAuth2AuthorizationResponse.\npublic final class OAuth2AuthorizationResponseType extends Object implements Serializable; // The response_type parameter is consumed by the authorization endpoint which is used by the authorization code grant type.\npublic final class OAuth2DeviceAuthorizationResponse extends Object; // A representation of an OAuth 2.0 Device Authorization Response.\npublic static final class OAuth2DeviceAuthorizationResponse.Builder extends Object; // A builder for OAuth2DeviceAuthorizationResponse.\npublic final class OAuth2ParameterNames extends Object; // Standard and custom (non-standard) parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint, token endpoint and token revocation endpoint.\npublic final class PkceParameterNames extends Object; // Standard parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint and token endpoint.\n", "des": "Support classes that model the OAuth 2.0 Request and Response messages from the Authorization Endpoint and Token Endpoint."}
{"index": 2804, "repo": "spring-security-oauth2-core-6.1.2", "code": "package oidc;\n\npackage oidc.endpoint; // Support classes that model the OpenID Connect Core 1.0 Request and Response messages from the Authorization Endpoint and Token Endpoint.\npackage oidc.user; // Provides a model for an OpenID Connect Core 1.0 representation of a user Principal.\npublic interface AddressStandardClaim; // The Address Claim represents a physical mailing address defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token.\npublic final class DefaultAddressStandardClaim extends Object implements AddressStandardClaim; // The default implementation of an Address Claim.\npublic static class DefaultAddressStandardClaim.Builder extends Object; // A builder for DefaultAddressStandardClaim.\npublic interface IdTokenClaimAccessor extends StandardClaimAccessor; // A ClaimAccessor for the \"claims\" that can be returned in the ID Token, which provides information about the authentication of an End-User by an Authorization Server.\npublic final class IdTokenClaimNames extends Object; // The names of the \"claims\" defined by the OpenID Connect Core 1.0 specification that can be returned in the ID Token.\npublic class OidcIdToken extends AbstractOAuth2Token implements IdTokenClaimAccessor; // An implementation of an AbstractOAuth2Token representing an OpenID Connect Core 1.0 ID Token.\npublic static final class OidcIdToken.Builder extends Object; // A builder for OidcIdTokens\npublic final class OidcScopes extends Object; // The scope values defined by the OpenID Connect Core 1.0 specification that can be used to request claims.\npublic class OidcUserInfo extends Object implements StandardClaimAccessor, Serializable; // A representation of a UserInfo Response that is returned from the OAuth 2.0 Protected Resource UserInfo Endpoint.\npublic static final class OidcUserInfo.Builder extends Object; // A builder for OidcUserInfos\npublic interface StandardClaimAccessor extends ClaimAccessor; // A ClaimAccessor for the \"Standard Claims\" that can be returned either in the UserInfo Response or the ID Token.\npublic final class StandardClaimNames extends Object; // The names of the \"Standard Claims\" defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token.\n", "des": "Core classes and interfaces providing support for OpenID Connect Core 1.0."}
{"index": 2805, "repo": "spring-security-oauth2-core-6.1.2", "code": "package endpoint;\n\npublic final class OidcParameterNames extends Object; // Standard parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint and token endpoint.\n", "des": "Support classes that model the OpenID Connect Core 1.0 Request and Response messages from the Authorization Endpoint and Token Endpoint."}
{"index": 2806, "repo": "spring-security-oauth2-core-6.1.2", "code": "package user;\n\npublic class DefaultOidcUser extends DefaultOAuth2User implements OidcUser; // The default implementation of an OidcUser.\npublic interface OidcUser extends OAuth2User, IdTokenClaimAccessor; // A representation of a user Principal that is registered with an OpenID Connect 1.0 Provider.\npublic class OidcUserAuthority extends OAuth2UserAuthority; // A GrantedAuthority that may be associated to an OidcUser.\n", "des": "Provides a model for an OpenID Connect Core 1.0 representation of a user Principal."}
{"index": 2807, "repo": "spring-security-oauth2-core-6.1.2", "code": "package user;\n\npublic class DefaultOAuth2User extends Object implements OAuth2User, Serializable; // The default implementation of an OAuth2User.\npublic interface OAuth2User extends OAuth2AuthenticatedPrincipal; // A representation of a user Principal that is registered with an OAuth 2.0 Provider.\npublic class OAuth2UserAuthority extends Object implements org.springframework.security.core.GrantedAuthority; // A GrantedAuthority that may be associated to an OAuth2User.\n", "des": "Provides a model for an OAuth 2.0 representation of a user Principal."}
{"index": 2808, "repo": "spring-integration-ip-6.1.2", "code": "package ip;\n\npackage ip.config; // Provides classes for configuration - parsers, namespace handlers, factory beans.\npackage ip.dsl; // Provides TCP/UDP Component support for the Java DSL.\npackage ip.event; // ApplicationEvents generated by the ip module.\npackage ip.tcp; // Base package for TCP Support.\npackage ip.udp; // Base package for UDP support.\npackage ip.util; // Provides utilities for IP support.\npublic abstract class AbstractInternetProtocolReceivingChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.scheduling.SchedulingAwareRunnable, CommonSocketOptions; // Base class for inbound TCP/UDP Channel Adapters.\npublic abstract class AbstractInternetProtocolSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler implements CommonSocketOptions, org.springframework.integration.support.management.ManageableLifecycle; // Base class for UDP MessageHandlers.\npublic interface CommonSocketOptions;\npublic final class IpHeaders extends Object; // Headers for Messages mapped from IP datagram packets.\n", "des": "Base package for IP (TCP/UDP) Support."}
{"index": 2809, "repo": "spring-integration-ip-6.1.2", "code": "package config;\n\npublic abstract class IpAdapterParserUtils extends Object; // Utility methods and constants for IP adapter parsers.\npublic class IpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's ip namespace.\npublic class TcpConnectionFactoryFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractConnectionFactory> implements org.springframework.context.Lifecycle, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.ApplicationContextAware; // Instantiates a TcpN(et|io)(Server|Client)ConnectionFactory, depending on type and using-nio attributes.\npublic class TcpConnectionFactoryParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\npublic class TcpInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Channel Adapter that receives TCP stream frames and maps them to Messages.\npublic class TcpInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser;\npublic class TcpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\npublic class TcpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <outbound-gateway> element of the integration 'jms' namespace.\npublic class UdpInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Channel Adapter that receives UDP datagram packets and maps them to Messages.\npublic class UdpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 2810, "repo": "spring-integration-ip-6.1.2", "code": "package dsl;\n\npublic abstract class AbstractConnectionFactorySpec<S extends AbstractConnectionFactorySpec<S,C>,C extends AbstractConnectionFactory> extends org.springframework.integration.dsl.IntegrationComponentSpec<S,C>; // An IntegrationComponentSpec for AbstractConnectionFactorys.\npublic abstract class AbstractUdpOutboundChannelAdapterSpec<S extends AbstractUdpOutboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageHandlerSpec<S,UnicastSendingMessageHandler>; // A MessageHandlerSpec for UDP MessageHandlers.\npublic final class Tcp extends Object; // Factory methods for TCP.\npublic abstract class TcpClientConnectionFactorySpec<S extends TcpClientConnectionFactorySpec<S,C>,C extends AbstractClientConnectionFactory> extends AbstractConnectionFactorySpec<S,C>; // An AbstractConnectionFactorySpec for AbstractClientConnectionFactorys.\npublic class TcpInboundChannelAdapterSpec extends org.springframework.integration.dsl.MessageProducerSpec<TcpInboundChannelAdapterSpec,TcpReceivingChannelAdapter> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageProducerSpec for TcpReceivingChannelAdapters.\npublic class TcpInboundGatewaySpec extends org.springframework.integration.dsl.MessagingGatewaySpec<TcpInboundGatewaySpec,TcpInboundGateway> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessagingGatewaySpec for TcpInboundGateways.\npublic class TcpNetClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNetClientConnectionFactorySpec,TcpNetClientConnectionFactory>; // TcpClientConnectionFactorySpec for TcpNetClientConnectionFactorys.\npublic class TcpNetServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNetServerConnectionFactorySpec,TcpNetServerConnectionFactory>; // TcpServerConnectionFactorySpec for TcpNetServerConnectionFactorys.\npublic class TcpNioClientConnectionFactorySpec extends TcpClientConnectionFactorySpec<TcpNioClientConnectionFactorySpec,TcpNioClientConnectionFactory>; // TcpClientConnectionFactorySpec for TcpNioClientConnectionFactorys.\npublic class TcpNioServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNioServerConnectionFactorySpec,TcpNioServerConnectionFactory>; // TcpServerConnectionFactorySpec for TcpNioServerConnectionFactorys.\n", "des": "Provides TCP/UDP Component support for the Java DSL."}
{"index": 2811, "repo": "spring-integration-ip-6.1.2", "code": "package event;\n\npublic abstract class IpIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "ApplicationEvents generated by the ip module."}
{"index": 2812, "repo": "spring-integration-ip-6.1.2", "code": "package tcp;\n\npackage tcp.connection; // All things related to tcp connections - client and server factories; listener and sender interfaces.\npackage tcp.serializer; // Byte array (de)serializers for putting some protocol on the wire so that incoming messages can be constructed from stream data.\npublic class TcpInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements TcpListener, TcpSender, ClientModeCapable, org.springframework.integration.context.OrderlyShutdownCapable; // Inbound Gateway using a server connection factory - threading is controlled by the factory.\npublic class TcpOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements TcpSender, TcpListener, org.springframework.integration.support.management.ManageableLifecycle; // TCP outbound gateway that uses a client connection factory.\npublic class TcpReceivingChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements TcpListener, ClientModeCapable, org.springframework.integration.context.OrderlyShutdownCapable; // Tcp inbound channel adapter using a TcpConnection to receive data - if the connection factory is a server factory, this Listener owns the connections.\npublic class TcpSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler implements TcpSender, org.springframework.integration.support.management.ManageableLifecycle, ClientModeCapable; // Tcp outbound channel adapter using a TcpConnection to send data - if the connection factory is a server factory, the TcpListener owns the connections.\n", "des": "Base package for TCP Support."}
{"index": 2813, "repo": "spring-integration-ip-6.1.2", "code": "package connection;\n\npublic abstract class AbstractClientConnectionFactory extends AbstractConnectionFactory; // Abstract class for client connection factories; client connection factories establish outgoing connections.\npublic abstract class AbstractConnectionFactory extends org.springframework.integration.context.IntegrationObjectSupport implements ConnectionFactory, org.springframework.context.ApplicationEventPublisherAware; // Base class for all connection factories.\npublic abstract class AbstractServerConnectionFactory extends AbstractConnectionFactory implements TcpServerConnectionFactory, org.springframework.scheduling.SchedulingAwareRunnable, org.springframework.integration.context.OrderlyShutdownCapable; // Base class for all server connection factories.\npublic abstract class AbstractTcpConnectionSupport extends Object; // Base class for TCP Connection Support implementations.\npublic class CachingClientConnectionFactory extends AbstractClientConnectionFactory implements org.springframework.beans.factory.DisposableBean; // Connection factory that caches connections from the underlying target factory.\npublic interface ClientModeCapable; // Edpoints implementing this interface are capable of running in client-mode.\npublic class ClientModeConnectionManager extends Object implements Runnable; // Intended to be run on a schedule, simply gets the connection from a client connection factory each time it is run.\npublic interface ConnectionFactory extends org.springframework.integration.support.management.ManageableLifecycle; // A factory used to create TcpConnection objects.\npublic class DefaultTcpNetConnectionSupport extends AbstractTcpConnectionSupport implements TcpNetConnectionSupport; // Default implementation of TcpNetConnectionSupport.\npublic class DefaultTcpNetSocketFactorySupport extends Object implements TcpSocketFactorySupport; // Implementation of TcpSocketFactorySupport for non-SSL sockets ServerSocket and Socket.\npublic class DefaultTcpNetSSLSocketFactorySupport extends Object implements TcpSocketFactorySupport; // Implementation of TcpSocketFactorySupport for SSL sockets SSLServerSocket and SSLSocket.\npublic class DefaultTcpNioConnectionSupport extends AbstractTcpConnectionSupport implements TcpNioConnectionSupport; // Implementation of TcpNioConnectionSupport for non-SSL NIO connections.\npublic class DefaultTcpNioSSLConnectionSupport extends AbstractTcpConnectionSupport implements TcpNioConnectionSupport; // Implementation of TcpNioConnectionSupport for SSL NIO connections.\npublic class DefaultTcpSocketSupport extends Object implements TcpSocketSupport; // Default implementation of TcpSocketSupport; makes no changes to sockets.\n", "des": "All things related to tcp connections - client and server factories; listener and sender interfaces."}
{"index": 2814, "repo": "spring-integration-ip-6.1.2", "code": "package serializer;\n\npublic abstract class AbstractByteArraySerializer extends Object implements org.springframework.core.serializer.Serializer<byte[]>, org.springframework.core.serializer.Deserializer<byte[]>, org.springframework.context.ApplicationEventPublisherAware; // Base class for (de)serializers that provide a mechanism to reconstruct a byte array from an arbitrary stream.\npublic abstract class AbstractPooledBufferByteArraySerializer extends AbstractByteArraySerializer; // Base class for deserializers that cannot determine the buffer size needed.\npublic class ByteArrayCrLfSerializer extends AbstractPooledBufferByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be terminated by \\r\\n (not included in resulting byte[]).\npublic class ByteArrayElasticRawDeserializer extends Object implements org.springframework.core.serializer.Deserializer<byte[]>; // A deserializer that uses a ByteArrayOutputStream instead of a fixed buffer, allowing the buffer to grow as needed.\npublic class ByteArrayLengthHeaderSerializer extends AbstractByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be preceded by a binary length (network byte order, not included in resulting byte[]).\npublic class ByteArrayLfSerializer extends ByteArraySingleTerminatorSerializer;\npublic class ByteArrayRawSerializer extends AbstractPooledBufferByteArraySerializer; // A byte array (de)serializer that does nothing with the payload; sends it raw.\npublic class ByteArraySingleTerminatorSerializer extends AbstractPooledBufferByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be terminated by a single byte (not included in resulting byte[]).\npublic class ByteArrayStxEtxSerializer extends AbstractPooledBufferByteArraySerializer; // Reads data in an InputStream to a byte[]; data must be prefixed by <stx> and terminated by <etx> (not included in resulting byte[]).\npublic class MapJsonSerializer extends Object implements org.springframework.core.serializer.Serializer<Map<?,?>>, org.springframework.core.serializer.Deserializer<Map<?,?>>; // Serializes a Map as JSON.\npublic class SoftEndOfStreamException extends RuntimeException; // Used to communicate that a stream has closed, but between logical messages.\npublic final class TcpCodecs extends Object; // Factory class to create TCP Serializer/Deserializers used to encode/decode messages to/from a TCP stream.\n", "des": "Byte array (de)serializers for putting some protocol on the wire so that incoming messages can be constructed from stream data."}
{"index": 2815, "repo": "spring-integration-ip-6.1.2", "code": "package udp;\n\npublic class DatagramPacketMessageMapper extends Object implements org.springframework.integration.mapping.InboundMessageMapper<DatagramPacket>, org.springframework.integration.mapping.OutboundMessageMapper<DatagramPacket>, org.springframework.beans.factory.BeanFactoryAware; // Message Mapper for converting to and from UDP DatagramPackets.\npublic class MulticastReceivingChannelAdapter extends UnicastReceivingChannelAdapter; // Channel adapter that joins a multicast group and receives incoming packets and sends them to an output channel.\npublic class MulticastSendingMessageHandler extends UnicastSendingMessageHandler; // A MessageHandler implementation that maps a Message into a UDP datagram packet and sends that to the specified multicast address (224.0.0.0 to 239.255.255.255) and port.\n@FunctionalInterface public interface SocketCustomizer; // Configures a socket.\npublic class UdpServerListeningEvent extends IpIntegrationEvent; // IpIntegrationEvent emitted when a server begins listening.\npublic class UnicastReceivingChannelAdapter extends AbstractInternetProtocolReceivingChannelAdapter; // A channel adapter to receive incoming UDP packets.\npublic class UnicastSendingMessageHandler extends AbstractInternetProtocolSendingMessageHandler implements Runnable; // A MessageHandler implementation that maps a Message into a UDP datagram packet and sends that to the specified host and port.\n", "des": "Base package for UDP support."}
{"index": 2816, "repo": "spring-integration-ip-6.1.2", "code": "package util;\n\npublic final class RegexUtils extends Object; // Regular Expression Utilities.\npublic final class TestingUtilities extends Object; // Convenience class providing methods for testing IP components.\n", "des": "Provides utilities for IP support."}
{"index": 2817, "repo": "spring-orm-6.0.11", "code": "package orm;\n\npackage orm.hibernate5; // Package providing integration of Hibernate 5.x with Spring concepts.\npackage orm.jpa; // Package providing integration of JPA (Java Persistence API) with Spring concepts.\npublic class ObjectOptimisticLockingFailureException extends org.springframework.dao.OptimisticLockingFailureException; // Exception thrown on an optimistic locking violation for a mapped object.\npublic class ObjectRetrievalFailureException extends org.springframework.dao.DataRetrievalFailureException; // Exception thrown if a mapped object could not be retrieved via its identifier.\n", "des": "Root package for Spring's O/R Mapping integration classes."}
{"index": 2818, "repo": "spring-orm-6.0.11", "code": "package hibernate5;\n\npackage hibernate5.support; // Classes supporting the org.springframework.orm.hibernate5 package.\n@FunctionalInterface public interface HibernateCallback<T>; // Callback interface for Hibernate code.\npublic class HibernateExceptionTranslator extends Object implements org.springframework.dao.support.PersistenceExceptionTranslator; // PersistenceExceptionTranslator capable of translating HibernateException instances to Spring's DataAccessException hierarchy.\npublic class HibernateJdbcException extends org.springframework.dao.UncategorizedDataAccessException; // Hibernate-specific subclass of UncategorizedDataAccessException, for JDBC exceptions that Hibernate wrapped.\npublic class HibernateObjectRetrievalFailureException extends ObjectRetrievalFailureException; // Hibernate-specific subclass of ObjectRetrievalFailureException.\npublic interface HibernateOperations; // Interface that specifies a common set of Hibernate operations as well as a general HibernateOperations.execute(org.springframework.orm.hibernate5.HibernateCallback<T>) method for Session-based lambda expressions.\npublic class HibernateOptimisticLockingFailureException extends ObjectOptimisticLockingFailureException; // Hibernate-specific subclass of ObjectOptimisticLockingFailureException.\npublic class HibernateQueryException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Hibernate-specific subclass of InvalidDataAccessResourceUsageException, thrown on invalid HQL query syntax.\npublic class HibernateSystemException extends org.springframework.dao.UncategorizedDataAccessException; // Hibernate-specific subclass of UncategorizedDataAccessException, for Hibernate system errors that do not match any concrete org.springframework.dao exceptions.\npublic class HibernateTemplate extends Object implements HibernateOperations, org.springframework.beans.factory.InitializingBean; // Helper class that simplifies Hibernate data access code.\npublic class HibernateTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single Hibernate SessionFactory.\n", "des": "Package providing integration of Hibernate 5.x with Spring concepts."}
{"index": 2819, "repo": "spring-orm-6.0.11", "code": "package support;\n\npublic abstract class HibernateDaoSupport extends org.springframework.dao.support.DaoSupport; // Convenient superclass for Hibernate-based data access objects.\npublic class OpenSessionInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.InitializingBean; // Simple AOP Alliance MethodInterceptor implementation that binds a new Hibernate Session for each method invocation, if none bound before.\npublic class OpenSessionInViewFilter extends org.springframework.web.filter.OncePerRequestFilter; // Servlet Filter that binds a Hibernate Session to the thread for the entire processing of the request.\npublic class OpenSessionInViewInterceptor extends Object implements org.springframework.web.context.request.AsyncWebRequestInterceptor; // Spring web request interceptor that binds a Hibernate Session to the thread for the entire processing of the request.\n", "des": "Classes supporting the org.springframework.orm.hibernate5 package."}
{"index": 2820, "repo": "spring-orm-6.0.11", "code": "package jpa;\n\npackage jpa.persistenceunit; // Internal support for managing JPA persistence units.\npackage jpa.support; // Classes supporting the org.springframework.orm.jpa package.\npackage jpa.vendor; // Support classes for adapting to specific JPA vendors.\npublic abstract class AbstractEntityManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<EntityManagerFactory>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, EntityManagerFactoryInfo, org.springframework.dao.support.PersistenceExceptionTranslator, Serializable; // Abstract FactoryBean that creates a local JPA EntityManagerFactory instance within a Spring application context.\npublic class DefaultJpaDialect extends Object implements JpaDialect, Serializable; // Default implementation of the JpaDialect interface.\npublic abstract class EntityManagerFactoryAccessor extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Base class for any class that needs to access a JPA EntityManagerFactory, usually in order to obtain a JPA EntityManager.\npublic interface EntityManagerFactoryInfo; // Metadata interface for a Spring-managed JPA EntityManagerFactory.\npublic abstract class EntityManagerFactoryUtils extends Object; // Helper class featuring methods for JPA EntityManager handling, allowing for reuse of EntityManager instances within transactions.\npublic class EntityManagerHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a JPA EntityManager.\npublic interface EntityManagerProxy extends EntityManager; // Subinterface of EntityManager to be implemented by EntityManager proxies.\npublic abstract class ExtendedEntityManagerCreator extends Object; // Delegate for creating a variety of EntityManager proxies that follow the JPA spec's semantics for \"extended\" EntityManagers.\npublic interface JpaDialect extends org.springframework.dao.support.PersistenceExceptionTranslator; // SPI strategy that encapsulates certain functionality that standard JPA 3.0 does not offer, such as access to the underlying JDBC Connection.\npublic class JpaObjectRetrievalFailureException extends ObjectRetrievalFailureException; // JPA-specific subclass of ObjectRetrievalFailureException.\n", "des": "Package providing integration of JPA (Java Persistence API) with Spring concepts."}
{"index": 2821, "repo": "spring-orm-6.0.11", "code": "package persistenceunit;\n\npublic class DefaultPersistenceUnitManager extends Object implements PersistenceUnitManager, org.springframework.context.ResourceLoaderAware, org.springframework.context.weaving.LoadTimeWeaverAware, org.springframework.beans.factory.InitializingBean; // Default implementation of the PersistenceUnitManager interface.\npublic class MutablePersistenceUnitInfo extends Object implements SmartPersistenceUnitInfo; // Spring's base implementation of the JPA PersistenceUnitInfo interface, used to bootstrap an EntityManagerFactory in a container.\npublic interface PersistenceManagedTypes; // Provide the list of managed persistent types that an entity manager should consider.\npublic final class PersistenceManagedTypesScanner extends Object; // Scanner of PersistenceManagedTypes.\npublic interface PersistenceUnitManager; // Interface that defines an abstraction for finding and managing JPA PersistenceUnitInfos.\npublic interface PersistenceUnitPostProcessor; // Callback interface for post-processing a JPA PersistenceUnitInfo.\npublic interface SmartPersistenceUnitInfo extends PersistenceUnitInfo; // Extension of the standard JPA PersistenceUnitInfo interface, for advanced collaboration between Spring's LocalContainerEntityManagerFactoryBean and PersistenceUnitManager implementations.\n", "des": "Internal support for managing JPA persistence units."}
{"index": 2822, "repo": "spring-orm-6.0.11", "code": "package support;\n\npublic class OpenEntityManagerInViewFilter extends org.springframework.web.filter.OncePerRequestFilter; // Servlet Filter that binds a JPA EntityManager to the thread for the entire processing of the request.\npublic class OpenEntityManagerInViewInterceptor extends EntityManagerFactoryAccessor implements org.springframework.web.context.request.AsyncWebRequestInterceptor; // Spring web request interceptor that binds a JPA EntityManager to the thread for the entire processing of the request.\npublic class PersistenceAnnotationBeanPostProcessor extends Object implements org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor, org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor, org.springframework.beans.factory.aot.BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, org.springframework.beans.factory.BeanFactoryAware, Serializable; // BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations, for injection of the corresponding JPA resources EntityManagerFactory and EntityManager.\npublic class SharedEntityManagerBean extends EntityManagerFactoryAccessor implements org.springframework.beans.factory.FactoryBean<EntityManager>, org.springframework.beans.factory.InitializingBean; // FactoryBean that exposes a shared JPA EntityManager reference for a given EntityManagerFactory.\n", "des": "Classes supporting the org.springframework.orm.jpa package."}
{"index": 2823, "repo": "spring-orm-6.0.11", "code": "package vendor;\n\npublic abstract class AbstractJpaVendorAdapter extends Object implements JpaVendorAdapter; // Abstract JpaVendorAdapter implementation that defines common properties, to be translated into vendor-specific JPA properties by concrete subclasses.\npublic enum Database extends Enum<Database>; // Enumeration for common database platforms.\npublic class EclipseLinkJpaDialect extends DefaultJpaDialect; // JpaDialect implementation for Eclipse Persistence Services (EclipseLink).\npublic class EclipseLinkJpaVendorAdapter extends AbstractJpaVendorAdapter; // JpaVendorAdapter implementation for Eclipse Persistence Services (EclipseLink).\npublic class HibernateJpaDialect extends DefaultJpaDialect; // JpaDialect implementation for Hibernate.\npublic class HibernateJpaVendorAdapter extends AbstractJpaVendorAdapter; // JpaVendorAdapter implementation for Hibernate.\n", "des": "Support classes for adapting to specific JPA vendors."}
{"index": 2824, "repo": "groovy-xml-4.0.13", "code": "package xml;\n\npackage xml.dom; // Groovy XML Dom processing classes.\npackage xml.slurpersupport; // Helper classes for XmlSlurper.\npackage xml.streamingmarkupsupport; // XmlBuilder related classes to support streaming XML.\npublic class DOMBuilder extends groovy.util.BuilderSupport; // A helper class for creating a W3C DOM tree\npublic class FactorySupport extends Object; // Support class for creating XML Factories\npublic class MarkupBuilder extends groovy.util.BuilderSupport; // A helper class for creating XML or HTML markup.\npublic static enum MarkupBuilder.CharFilter extends Enum<MarkupBuilder.CharFilter>;\npublic static class MarkupBuilder.DefaultXmlEscapingFunction extends Object implements Function<Character,Optional<String>>;\npublic class MarkupBuilderHelper extends Object; // A helper class for MarkupBuilder.\npublic class Namespace extends Object; // A simple helper class which acts as a factory of QName instances.\npublic class NamespaceBuilder extends Object; // A helper class for creating namespaces for GroovyMarkup\npublic class NamespaceBuilderSupport extends groovy.util.BuilderSupport; // A helper class for creating namespaced GroovyMarkup\npublic class SAXBuilder extends groovy.util.BuilderSupport; // A builder for generating W3C SAX events.\npublic class XmlNodePrinter extends Object; // Prints a groovy.util.Node (as used with XmlParser) including all children in XML format.\nprotected static class XmlNodePrinter.NamespaceContext extends Object;\npublic class XmlParser extends Object implements ContentHandler; // A helper class for parsing XML into a tree of Node instances for a simple way of processing XML.\npublic class XmlSlurper extends DefaultHandler; // Parse XML into a document tree that may be traversed similar to XPath expressions.\npublic class XmlUtil extends Object; // Used for pretty printing XML content and other XML related utilities.\n", "des": "Groovy markup builder classes for working with SAX and W3C DOM and Groovy markup."}
{"index": 2825, "repo": "groovy-xml-4.0.13", "code": "package dom;\n\npublic class DOMCategory extends Object; // Category class which adds GPath style operations to Java's DOM classes.\n", "des": "Groovy XML Dom processing classes."}
{"index": 2826, "repo": "groovy-xml-4.0.13", "code": "package slurpersupport;\n\npublic class Attribute extends GPathResult; // Lazy evaluated representation of a node attribute.\npublic class Attributes extends NodeChildren; // Lazy evaluated representation of a node's attributes.\npublic class FilteredAttributes extends Attributes; // Lazy evaluated representation of a node's attributes filtered by a Closure.\npublic class FilteredNodeChildren extends NodeChildren; // Lazy evaluated representation of child nodes filtered by a Closure.\npublic abstract class GPathResult extends groovy.lang.GroovyObjectSupport implements groovy.lang.Writable, groovy.lang.Buildable, Iterable; // Base class for representing lazy evaluated GPath expressions.\npublic class NamespaceAwareHashMap extends HashMap<String,String>;\npublic class NoChildren extends GPathResult; // Lazy evaluated representation of a GPath expression returning no children.\npublic class Node extends Object implements groovy.lang.Writable; // Represents a node.\npublic class NodeChild extends GPathResult; // Lazy evaluated representation of a child node.\npublic class NodeChildren extends GPathResult; // Lazy evaluated representation of child nodes.\npublic abstract class NodeIterator extends Object implements Iterator; // Helper class for iterating through nodes.\npublic class NodeParents extends NodeChildren; // Lazy evaluated representation of parent nodes without duplicates\npublic abstract class ReplacementNode extends Object implements groovy.lang.Buildable, groovy.lang.Writable; // Helper base class used for lazy updates.\n", "des": "Helper classes for XmlSlurper."}
{"index": 2827, "repo": "groovy-xml-4.0.13", "code": "package streamingmarkupsupport;\n\npublic class BaseMarkupBuilder extends Builder;\npublic abstract class Builder extends groovy.lang.GroovyObjectSupport;\nprotected abstract static class Builder.Built extends groovy.lang.GroovyObjectSupport;\npublic class StreamingMarkupWriter extends Writer;\n", "des": "XmlBuilder related classes to support streaming XML."}
{"index": 2828, "repo": "spring-data-r2dbc-3.1.2", "code": "package config;\n\n@Configuration(proxyBeanMethods=false) public abstract class AbstractR2dbcConfiguration extends Object implements ApplicationContextAware; // Base class for Spring Data R2DBC configuration containing bean declarations that must be registered for Spring Data R2DBC to work.\n@Inherited @Documented @Target(TYPE) @Retention(RUNTIME) @Import(org.springframework.data.r2dbc.config.R2dbcAuditingRegistrar.class) public @interface EnableR2dbcAuditing; // Annotation to enable auditing in R2DBC via annotation configuration.\npublic class PersistentEntitiesFactoryBean extends Object implements FactoryBean<PersistentEntities>; // Simple helper to be able to wire the PersistentEntities from a R2dbcMappingContext bean available in the application context.\n", "des": "Configuration classes for Spring Data R2DBC."}
{"index": 2829, "repo": "spring-data-r2dbc-3.1.2", "code": "package convert;\n\npublic class EntityRowMapper<T> extends Object implements BiFunction<Row,RowMetadata,T>; // Maps a Row to an entity of type T, including entities referenced.\n@WritingConverter public abstract class EnumWriteSupport<E extends Enum<E>> extends Object implements Converter<E,E>; // Support class to natively write Enum values to the database.\npublic class MappingR2dbcConverter extends BasicRelationalConverter implements R2dbcConverter; // Converter for R2DBC.\npublic interface R2dbcConverter extends EntityReader<Object,Row>, EntityWriter<Object,OutboundRow>, RelationalConverter; // Central R2DBC specific converter interface.\npublic class R2dbcCustomConversions extends CustomConversions; // Value object to capture custom conversion.\n", "des": "R2DBC-specific conversion and converter implementations."}
{"index": 2830, "repo": "spring-data-r2dbc-3.1.2", "code": "package core;\n\npublic class DefaultReactiveDataAccessStrategy extends Object implements ReactiveDataAccessStrategy; // Default ReactiveDataAccessStrategy implementation.\npublic interface FluentR2dbcOperations extends ReactiveSelectOperation, ReactiveInsertOperation, ReactiveUpdateOperation, ReactiveDeleteOperation; // Stripped down interface providing access to a fluent API that specifies a basic set of reactive R2DBC operations.\npublic interface R2dbcEntityOperations extends FluentR2dbcOperations; // Interface specifying a basic set of reactive R2DBC operations using entities.\npublic class R2dbcEntityTemplate extends Object implements R2dbcEntityOperations, BeanFactoryAware, ApplicationContextAware; // Implementation of R2dbcEntityOperations.\n@Deprecated public interface ReactiveDataAccessStrategy;\n@FunctionalInterface public static interface ReactiveDataAccessStrategy.NamedParameterProvider; // Interface to retrieve parameters for named parameter processing.\npublic interface ReactiveDeleteOperation; // The ReactiveDeleteOperation interface allows creation and execution of DELETE operations in a fluent API style.\npublic static interface ReactiveDeleteOperation.DeleteWithQuery extends ReactiveDeleteOperation.TerminatingDelete; // Required filter.\npublic static interface ReactiveDeleteOperation.DeleteWithTable extends ReactiveDeleteOperation.TerminatingDelete; // Table override (optional).\npublic static interface ReactiveDeleteOperation.ReactiveDelete extends ReactiveDeleteOperation.DeleteWithTable, ReactiveDeleteOperation.DeleteWithQuery; // The ReactiveDeleteOperation.ReactiveDelete interface provides methods for constructing DELETE operations in a fluent way.\npublic static interface ReactiveDeleteOperation.TerminatingDelete; // Trigger DELETE operation by calling one of the terminating methods.\npublic interface ReactiveInsertOperation; // The ReactiveInsertOperation interface allows creation and execution of INSERT operations in a fluent API style.\npublic static interface ReactiveInsertOperation.InsertWithTable<T> extends ReactiveInsertOperation.TerminatingInsert<T>; // Table override (optional).\npublic static interface ReactiveInsertOperation.ReactiveInsert<T> extends ReactiveInsertOperation.InsertWithTable<T>; // The ReactiveInsertOperation.ReactiveInsert interface provides methods for constructing INSERT operations in a fluent way.\npublic static interface ReactiveInsertOperation.TerminatingInsert<T>; // Trigger INSERT execution by calling one of the terminating methods.\npublic interface ReactiveSelectOperation; // The ReactiveSelectOperation interface allows creation and execution of SELECT operations in a fluent API style.\n", "des": "Core domain types around DatabaseClient."}
{"index": 2831, "repo": "spring-data-r2dbc-3.1.2", "code": "package dialect;\n\npublic final class BindTargetBinder extends Object; // Utility to bind Parameter to a BindTarget.\npublic class DialectResolver extends Object; // Resolves a R2dbcDialect from a ConnectionFactory using DialectResolver.R2dbcDialectProvider.\npublic static class DialectResolver.NoDialectException extends NonTransientDataAccessException; // Exception thrown when DialectResolver cannot resolve a R2dbcDialect.\npublic static interface DialectResolver.R2dbcDialectProvider; // SPI to extend Spring's default R2DBC Dialect discovery mechanism.\npublic class H2Dialect extends H2Dialect implements R2dbcDialect; // R2DBC dialect for H2.\npublic class MySqlDialect extends MySqlDialect implements R2dbcDialect; // An SQL dialect for MySQL.\n@WritingConverter public static enum MySqlDialect.BooleanToByteConverter extends Enum<MySqlDialect.BooleanToByteConverter> implements Converter<Boolean,Byte>; // Simple singleton to convert Booleans to their Byte representation.\n@ReadingConverter public static enum MySqlDialect.ByteToBooleanConverter extends Enum<MySqlDialect.ByteToBooleanConverter> implements Converter<Byte,Boolean>; // Simple singleton to convert Bytes to their Boolean representation.\npublic class OracleDialect extends OracleDialect implements R2dbcDialect; // An SQL dialect for Oracle.\npublic class PostgresDialect extends PostgresDialect implements R2dbcDialect; // An SQL dialect for Postgres.\npublic interface R2dbcDialect extends Dialect; // R2DBC-specific extension to Dialect.\npublic class SqlServerDialect extends SqlServerDialect implements R2dbcDialect; // An SQL dialect for Microsoft SQL Server.\n", "des": "Dialects abstract the SQL dialect of the underlying database."}
{"index": 2832, "repo": "spring-data-r2dbc-3.1.2", "code": "package mapping;\n\npackage mapping.event; // Mapping event callback infrastructure for the R2DBC row-to-object mapping subsystem.\npublic class OutboundRow extends Object implements Map<SqlIdentifier,Parameter>, Cloneable; // Representation of a Row to be written through a INSERT or UPDATE statement.\npublic class R2dbcMappingContext extends RelationalMappingContext; // R2DBC-specific extension to RelationalMappingContext.\npublic class R2dbcSimpleTypeHolder extends SimpleTypeHolder; // Simple constant holder for a SimpleTypeHolder enriched with R2DBC specific simple types.\n", "des": "Domain objects for R2DBC."}
{"index": 2833, "repo": "spring-data-r2dbc-3.1.2", "code": "package event;\n\n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a row when reading results.\n@FunctionalInterface public interface AfterSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered after save of a OutboundRow.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\n@FunctionalInterface public interface BeforeSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered before save of a row.\npublic class ReactiveAuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be saved.\n", "des": "Mapping event callback infrastructure for the R2DBC row-to-object mapping subsystem."}
{"index": 2834, "repo": "spring-data-r2dbc-3.1.2", "code": "package query;\n\npublic class BoundAssignments extends Object; // Value object representing Assignments with their Bindings.\npublic class BoundCondition extends Object; // Value object representing a Condition with its Bindings.\npublic class QueryMapper extends Object; // Maps CriteriaDefinition and Sort objects considering mapping metadata and dialect-specific conversion.\nprotected static class QueryMapper.Field extends Object; // Value object to represent a field and its meta-information.\nprotected static class QueryMapper.MetadataBackedField extends QueryMapper.Field; // Extension of QueryMapper.Field to be backed with mapping metadata.\npublic class UpdateMapper extends QueryMapper; // A subclass of QueryMapper that maps Update to update assignments.\n", "des": "Query and update support."}
{"index": 2835, "repo": "spring-data-r2dbc-3.1.2", "code": "package repository;\n\npackage repository.config; // Support infrastructure for the configuration of R2DBC-specific repositories.\npackage repository.query; // Query support for R2DBC repositories.\npackage repository.support; // Support infrastructure for query derivation of R2DBC-specific repositories.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying; // Indicates a query method should be considered a modifying query that returns nothing or the number of rows affected by the query.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface Query; // Annotation to provide SQL statements that will get used for executing the method.\n@NoRepositoryBean public interface R2dbcRepository<T,ID> extends ReactiveCrudRepository<T,ID>, ReactiveSortingRepository<T,ID>, ReactiveQueryByExampleExecutor<T>; // R2DBC specific Repository interface with reactive support.\n", "des": "R2DBC-specific repository implementation."}
{"index": 2836, "repo": "spring-data-r2dbc-3.1.2", "code": "package config;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(org.springframework.data.r2dbc.repository.config.R2dbcRepositoriesRegistrar.class) public @interface EnableR2dbcRepositories; // Annotation to activate reactive relational repositories using R2DBC.\npublic class R2dbcRepositoryConfigurationExtension extends RepositoryConfigurationExtensionSupport; // Reactive RepositoryConfigurationExtension for R2DBC.\n", "des": "Support infrastructure for the configuration of R2DBC-specific repositories."}
{"index": 2837, "repo": "spring-data-r2dbc-3.1.2", "code": "package query;\n\npublic abstract class AbstractR2dbcQuery extends Object implements RepositoryQuery; // Base class for reactive RepositoryQuery implementations for R2DBC.\npublic interface BindableQuery extends Supplier<String>; // Interface declaring a query that supplies SQL and can bind parameters to a DatabaseClient.GenericExecuteSpec.\npublic class PartTreeR2dbcQuery extends AbstractR2dbcQuery; // An AbstractR2dbcQuery implementation based on a PartTree.\npublic class R2dbcQueryMethod extends QueryMethod; // Reactive specific implementation of QueryMethod.\npublic class StringBasedR2dbcQuery extends AbstractR2dbcQuery; // String-based StringBasedR2dbcQuery implementation.\n", "des": "Query support for R2DBC repositories."}
{"index": 2838, "repo": "spring-data-r2dbc-3.1.2", "code": "package support;\n\npublic class R2dbcRepositoryFactory extends ReactiveRepositoryFactorySupport; // Factory to create R2dbcRepository instances.\npublic class R2dbcRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID> implements ApplicationContextAware; // FactoryBean to create R2dbcRepository instances.\n@Transactional(readOnly=true) public class SimpleR2dbcRepository<T,ID> extends Object implements R2dbcRepository<T,ID>; // Simple ReactiveSortingRepository implementation using R2DBC through DatabaseClient.\n", "des": "Support infrastructure for query derivation of R2DBC-specific repositories."}
{"index": 2839, "repo": "spring-data-r2dbc-3.1.2", "code": "package support;\n\npublic abstract class ArrayUtils extends Object; // Utilities for array interaction.\n", "des": "Support infrastructure for the configuration of R2DBC-specific repositories."}
{"index": 2840, "repo": "spring-integration-core-6.1.2", "code": "package integration;\n\npackage integration.acks; // Provides classes related to message acknowledgment.\npackage integration.aggregator; // Provides classes related to message aggregation.\npackage integration.annotation; // Provides annotations for annotation-based configuration.\npackage integration.aop; // Provides classes to support message publication using AOP.\npackage integration.channel; // Provides classes representing various channel types.\npackage integration.codec; // Provides base classes for the Codec abstraction.\npackage integration.config; // Base package for configuration.\npackage integration.context; // Provides classes relating to application context configuration.\npackage integration.core; // Provides core classes.\npackage integration.dispatcher; // Provides classes related to dispatching messages.\npackage integration.dsl; // Root package of the Spring Integration Java DSL.\npackage integration.endpoint; // Provides core classes related to Endpoints.\npackage integration.events; // ApplicationEvents generated by the Spring Integration framework.\npackage integration.expression; // Provides classes supporting SpEL expressions.\npackage integration.filter; // Provides classes supporting the filter pattern.\npackage integration.gateway; // Provides classes supporting messaging gateways.\npackage integration.graph; // Provides classes related to the runtime object graph.\npackage integration.handler; // Provides classes implementing various types of message handler.\npackage integration.history; // Provides classes supporting the capture of message history.\npackage integration.json; // Provides classes supporting JSON in Spring Integration.\npackage integration.leader; // Temporary package until s-c-c-core is released.\npackage integration.mapping; // Provides classes related to mapping to/from message headers.\npackage integration.message; // Provides concrete Message implementations.\npackage integration.metadata; // Provides classes supporting metadata stores.\npackage integration.resource; // Provides classes related to messaging using Spring Resources\npackage integration.router; // Provides classes supporting the router pattern.\npackage integration.routingslip; // Provides classes supporting the RoutingSlip pattern.\npackage integration.scattergather; // Provides classes supporting the Scatter-Gather pattern.\npackage integration.scheduling; // Provides classes related to task scheduling.\npackage integration.selector; // Provides classes related to message selection.\npackage integration.splitter; // Provides classes supporting the splitter pattern.\npackage integration.store; // Provides classes releated to storing messages.\npackage integration.support; // Base core support package.\n", "des": "Base package for Spring Integration Core."}
{"index": 2841, "repo": "spring-integration-core-6.1.2", "code": "package acks;\n\n@FunctionalInterface public interface AcknowledgmentCallback extends SimpleAcknowledgment; // A general abstraction over acknowledgments.\npublic static enum AcknowledgmentCallback.Status extends Enum<AcknowledgmentCallback.Status>;\n@FunctionalInterface public interface AcknowledgmentCallbackFactory<T>; // A factory for creating AcknowledgmentCallbacks.\npublic final class AckUtils extends Object; // Utility methods for acting on AcknowledgmentCallback headers.\n@FunctionalInterface public interface SimpleAcknowledgment; // Opaque object for manually acknowledging.\n", "des": "Provides classes related to message acknowledgment."}
{"index": 2842, "repo": "spring-integration-core-6.1.2", "code": "package aggregator;\n\npublic abstract class AbstractAggregatingMessageGroupProcessor extends Object implements MessageGroupProcessor, org.springframework.beans.factory.BeanFactoryAware; // Base class for MessageGroupProcessor implementations that aggregate the group of Messages into a single Message.\npublic abstract class AbstractCorrelatingMessageHandler extends AbstractMessageProducingHandler implements DiscardingMessageHandler, org.springframework.context.ApplicationEventPublisherAware, ManageableLifecycle; // Abstract Message handler that holds a buffer of correlated messages in a MessageStore.\nprotected static class AbstractCorrelatingMessageHandler.SequenceAwareMessageGroup extends SimpleMessageGroup;\npublic class AggregatingMessageHandler extends AbstractCorrelatingMessageHandler; // Aggregator specific implementation of AbstractCorrelatingMessageHandler.\npublic class BarrierMessageHandler extends AbstractReplyProducingMessageHandler implements MessageTriggerAction, DiscardingMessageHandler; // A message handler that suspends the thread until a message with corresponding correlation is passed into the trigger method or the timeout occurs.\npublic class CorrelatingMessageBarrier extends AbstractMessageHandler implements MessageSource<Object>; // This Endpoint serves as a barrier for messages that should not be processed yet.\n@FunctionalInterface public interface CorrelationStrategy; // Strategy for determining how messages can be correlated.\npublic class DefaultAggregateHeadersFunction extends Object implements Function<MessageGroup,Map<String,Object>>; // The Function implementation for a default headers merging in the aggregator component.\npublic class DefaultAggregatingMessageGroupProcessor extends AbstractAggregatingMessageGroupProcessor; // This implementation of MessageGroupProcessor will take the messages from the MessageGroup and pass them on in a single message with a Collection as a payload.\npublic class DelegatingMessageGroupProcessor extends Object implements MessageGroupProcessor, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle; // The MessageGroupProcessor implementation with delegation to the provided delegate and optional aggregation for headers.\npublic class ExpressionEvaluatingCorrelationStrategy extends Object implements CorrelationStrategy, org.springframework.beans.factory.BeanFactoryAware; // CorrelationStrategy implementation that evaluates an expression.\npublic class ExpressionEvaluatingMessageGroupProcessor extends AbstractAggregatingMessageGroupProcessor; // A MessageGroupProcessor implementation that evaluates a SpEL expression.\n", "des": "Provides classes related to message aggregation."}
{"index": 2843, "repo": "spring-integration-core-6.1.2", "code": "package annotation;\n\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(Aggregators.class) public @interface Aggregator; // Indicates that a method is capable of aggregating messages.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface Aggregators; // The repeatable container for Aggregator annotations.\npublic final class AnnotationConstants extends Object; // Common value constants for annotation attributes.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(BridgeFromRepeatable.class) public @interface BridgeFrom; // Messaging Annotation to mark a Bean method for a MessageChannel to produce a BridgeHandler and Consumer Endpoint.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface BridgeFromRepeatable; // The repeatable container for BridgeFrom annotations.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(BridgeToRepeatable.class) public @interface BridgeTo; // Messaging Annotation to mark a Bean method for a MessageChannel to produce a BridgeHandler and Consumer Endpoint.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) public @interface BridgeToRepeatable; // The repeatable container for BridgeTo annotations.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface CorrelationStrategy; // Indicates that a given method is capable of determining the correlation key of a message sent as parameter.\n@Target({TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR}) @Retention(RUNTIME) @Documented public @interface Default; // Indicates that the class member has some default meaning.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface EndpointId; // When used alongside an EIP annotation (and no @Bean), specifies the bean name of the consumer bean with the handler bean being id.handler (for a consuming endpoint) or id.source for a message source (e.g.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Repeatable(Filters.class) public @interface Filter; // Indicates that a method is capable of playing the role of a Message Filter.\n", "des": "Provides annotations for annotation-based configuration."}
{"index": 2844, "repo": "spring-integration-core-6.1.2", "code": "package aop;\n\npublic class CompoundTriggerAdvice extends Object implements MessageSourceMutator, ReceiveMessageAdvice; // A MessageSourceMutator that uses a CompoundTrigger to adjust the poller - when a message is present, the compound trigger's primary trigger is used to determine the next poll.\npublic class MessagePublishingInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanFactoryAware; // A MethodInterceptor that publishes Messages to a channel.\n@FunctionalInterface public interface MessageSourceMutator extends ReceiveMessageAdvice; // A ReceiveMessageAdvice extension that can mutate a MessageSource before and/or after MessageSource.receive() is called.\npublic class MethodAnnotationPublisherMetadataSource extends Object; // An PublisherMetadataSource implementation that retrieves the channel name and expression strings from an annotation.\npublic class MethodNameMappingPublisherMetadataSource extends Object;\npublic class PublisherAnnotationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware; // An advisor that will apply the MessagePublishingInterceptor to any methods containing the provided annotations.\npublic class PublisherAnnotationBeanPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.SmartInitializingSingleton; // Post-processes beans that contain the method-level @Publisher annotation.\n@FunctionalInterface public interface ReceiveMessageAdvice extends org.aopalliance.intercept.MethodInterceptor; // An AOP advice to perform hooks before and/or after a receive() contract is called.\npublic class SimpleActiveIdleReceiveMessageAdvice extends Object implements ReceiveMessageAdvice; // A simple advice that polls at one rate when messages exist and another when there are no messages.\npublic class SimplePublisherMetadataSource extends Object; // Simple implementation of PublisherMetadataSource that allows for configuration of a single channel name, payload expression, and array of header key=value expressions.\n", "des": "Provides classes to support message publication using AOP."}
{"index": 2845, "repo": "spring-integration-core-6.1.2", "code": "package channel;\n\npackage channel.interceptor; // Provides classes related to channel interception.\npublic abstract class AbstractExecutorChannel extends AbstractSubscribableChannel implements ExecutorChannelInterceptorAware; // The AbstractSubscribableChannel base implementation for those inheritors which logic may be based on the Executor.\n@IntegrationManagedResource public abstract class AbstractMessageChannel extends IntegrationObjectSupport implements org.springframework.messaging.MessageChannel, TrackableComponent, org.springframework.messaging.support.InterceptableChannel, IntegrationManagement, IntegrationPattern; // Base class for MessageChannel implementations providing common properties such as the channel name.\nprotected static class AbstractMessageChannel.ChannelInterceptorList extends Object; // A convenience wrapper class for the list of ChannelInterceptors.\npublic abstract class AbstractPollableChannel extends AbstractMessageChannel implements org.springframework.messaging.PollableChannel, ExecutorChannelInterceptorAware; // Base class for all pollable channels.\npublic abstract class AbstractSubscribableChannel extends AbstractMessageChannel implements org.springframework.messaging.SubscribableChannel, SubscribableChannelManagement; // Base implementation of MessageChannel that invokes the subscribed handler(s) by delegating to a MessageDispatcher.\npublic interface BroadcastCapableChannel extends org.springframework.messaging.SubscribableChannel; // A SubscribableChannel variant for implementations with broadcasting capabilities.\npublic class ChannelPurger extends Object; // A utility class for purging Messages from one or more QueueChannels.\npublic final class ChannelUtils extends Object; // Channel utilities.\npublic class DefaultHeaderChannelRegistry extends IntegrationObjectSupport implements HeaderChannelRegistry, ManageableLifecycle, Runnable; // Converts a channel to a name, retaining a reference to the channel keyed by the name.\nprotected static record DefaultHeaderChannelRegistry.MessageChannelWrapper(org.springframework.messaging.MessageChannel channel, long expireAt) extends Record;\npublic class DirectChannel extends AbstractSubscribableChannel; // A channel that invokes a single subscriber for each sent Message.\npublic class ExecutorChannel extends AbstractExecutorChannel; // An implementation of MessageChannel that delegates to an instance of UnicastingDispatcher which in turn delegates all dispatching invocations to an Executor.\npublic interface ExecutorChannelInterceptorAware extends org.springframework.messaging.support.InterceptableChannel; // The InterceptableChannel extension for the cases when the ExecutorChannelInterceptors may have reason (e.g.\n", "des": "Provides classes representing various channel types."}
{"index": 2846, "repo": "spring-integration-core-6.1.2", "code": "package interceptor;\n\npublic class GlobalChannelInterceptorWrapper extends Object implements org.springframework.core.Ordered;\npublic class MessageSelectingInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor; // A ChannelInterceptor that delegates to a list of MessageSelectors to decide whether a Message should be accepted on the MessageChannel.\npublic class ObservationPropagationChannelInterceptor extends ThreadStatePropagationChannelInterceptor<io.micrometer.observation.Observation>; // The ExecutorChannelInterceptor implementation responsible for an Observation propagation from one message flow's thread to another through the MessageChannels involved in the flow.\npublic abstract class ThreadStatePropagationChannelInterceptor<S> extends Object implements org.springframework.messaging.support.ExecutorChannelInterceptor; // The ExecutorChannelInterceptor implementation responsible for the Thread (any?) state propagation from one message flow's thread to another through the MessageChannels involved in the flow.\npublic interface VetoCapableInterceptor; // ChannelInterceptors implementing this interface can veto global interception of a particular channel.\n@ManagedResource public class WireTap extends Object implements org.springframework.messaging.support.ChannelInterceptor, ManageableLifecycle, VetoCapableInterceptor, org.springframework.beans.factory.BeanFactoryAware; // A ChannelInterceptor that publishes a copy of the intercepted message to a secondary target while still sending the original message to the main channel.\n", "des": "Provides classes related to channel interception."}
{"index": 2847, "repo": "spring-integration-core-6.1.2", "code": "package codec;\n\npackage codec.kryo; // The Kryo specific Codec classes.\npublic interface Codec; // Interface for classes that perform both encode (serialize) and decode (deserialize) on multiple classes.\npublic class CodecMessageConverter extends IntegrationObjectSupport implements org.springframework.messaging.converter.MessageConverter; // A MessageConverter that delegates to a Codec to convert.\npublic class CompositeCodec extends Object implements Codec; // A Codec that can delegate to one out of many Codecs, each mapped to a class.\n", "des": "Provides base classes for the Codec abstraction."}
{"index": 2848, "repo": "spring-integration-core-6.1.2", "code": "package kryo;\n\npublic abstract class AbstractKryoCodec extends Object implements Codec; // Base class for Codecs using Kryo.\npublic abstract class AbstractKryoRegistrar extends Object implements KryoRegistrar; // Base class for KryoRegistrar implementations.\npublic class CompositeKryoRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar that delegates and validates registrations across all components.\npublic class FileKryoRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar used to validateRegistration a File serializer.\npublic class FileSerializer extends com.esotericsoftware.kryo.Serializer<File>; // A custom Kryo Serializer for serializing File payloads.\npublic class KryoClassListRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar used to validateRegistration a list of Java classes.\npublic class KryoClassMapRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar implementation backed by a Map used to explicitly set the registration ID for each class.\npublic interface KryoRegistrar; // Strategy interface used by PojoCodec to configure registrations classes consistently across Kryo instances.\npublic class KryoRegistrationRegistrar extends AbstractKryoRegistrar; // A KryoRegistrar implementation backed by a List of Registration.\npublic class MessageCodec extends PojoCodec; // PojoCodec configured to encode/decode Message<?>s.\npublic class MessageKryoRegistrar extends AbstractKryoRegistrar; // Registers common MessageHeader types and Serializers.\npublic class PojoCodec extends AbstractKryoCodec; // Kryo Codec that can encode and decode arbitrary types.\npublic final class RegistrationIds extends Object; // Default registration ids for serializers provided by the framework.\n", "des": "The Kryo specific Codec classes."}
{"index": 2849, "repo": "spring-integration-core-6.1.2", "code": "package config;\n\npackage config.annotation; // Provides classes supporting annotation-based configuration.\npackage config.xml; // Provides supporting XML-based configuration - parsers, namespace handlers.\npublic abstract class AbstractEvaluationContextFactoryBean extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Abstract class for integration evaluation context factory beans.\npublic abstract class AbstractMethodAnnotationPostProcessor<T extends Annotation> extends Object implements MethodAnnotationPostProcessor<T>, org.springframework.beans.factory.BeanFactoryAware; // Base class for Method-level annotation post-processors.\nprotected static record AbstractMethodAnnotationPostProcessor.BeanDefinitionPropertiesMapper(org.springframework.beans.factory.config.BeanDefinition beanDefinition, List<Annotation> annotations) extends Record;\npublic abstract class AbstractSimpleMessageHandlerFactoryBean<H extends org.springframework.messaging.MessageHandler> extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.messaging.MessageHandler>, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationEventPublisherAware; // Factory bean to create and configure a MessageHandler.\npublic abstract class AbstractStandardMessageHandlerFactoryBean extends AbstractSimpleMessageHandlerFactoryBean<org.springframework.messaging.MessageHandler> implements org.springframework.beans.factory.DisposableBean; // Base class for FactoryBeans that create standard MessageHandler instances.\npublic class AggregatorAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<Aggregator>; // Post-processor for the @Aggregator annotation.\npublic class AggregatorFactoryBean extends AbstractSimpleMessageHandlerFactoryBean<AggregatingMessageHandler>; // FactoryBean to create an AggregatingMessageHandler.\npublic class BridgeFromAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<BridgeFrom>; // Post-processor for the @BridgeFrom annotation.\npublic class BridgeToAnnotationPostProcessor extends AbstractMethodAnnotationPostProcessor<BridgeTo>; // Post-processor for the @BridgeTo annotation.\n", "des": "Base package for configuration."}
{"index": 2850, "repo": "spring-integration-core-6.1.2", "code": "package annotation;\n\npublic abstract class AnnotationMetadataAdapter extends Object implements org.springframework.core.type.AnnotationMetadata; // An AnnotationMetadata implementation to expose a metadata by the provided Map of attributes.\npublic interface MethodAnnotationPostProcessor<T extends Annotation>; // Strategy interface for post-processing annotated methods.\n", "des": "Provides classes supporting annotation-based configuration."}
{"index": 2851, "repo": "spring-integration-core-6.1.2", "code": "package xml;\n\npublic abstract class AbstractChannelAdapterParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Base parser for Channel Adapters.\npublic abstract class AbstractChannelParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Base class for channel parsers.\npublic abstract class AbstractConsumerEndpointParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser; // Base class parser for elements that create Message Endpoints.\npublic abstract class AbstractCorrelatingMessageHandlerParser extends AbstractConsumerEndpointParser; // Base class for parsers that create an instance of AbstractCorrelatingMessageHandler.\npublic abstract class AbstractInboundGatewayParser extends org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser; // Base class for inbound gateway parsers.\npublic abstract class AbstractIntegrationNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // Base class for NamespaceHandlers that registers a BeanFactoryPostProcessor for configuring default bean definitions.\npublic abstract class AbstractOutboundChannelAdapterParser extends AbstractChannelAdapterParser; // Base class for outbound Channel Adapter parsers.\npublic abstract class AbstractOutboundGatewayParser extends AbstractConsumerEndpointParser; // Base class for url-based outbound gateway parsers.\npublic abstract class AbstractPollingInboundChannelAdapterParser extends AbstractChannelAdapterParser; // Base parser for inbound Channel Adapters that poll a source.\npublic abstract class AbstractRouterParser extends AbstractConsumerEndpointParser; // Base parser for routers.\npublic abstract class AbstractTransformerParser extends AbstractConsumerEndpointParser;\npublic class AggregatorParser extends AbstractCorrelatingMessageHandlerParser; // Parser for the aggregator element of the integration namespace.\npublic class AnnotationConfigParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the <annotation-config> element of the integration namespace.\npublic class ApplicationEventMulticasterParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <application-event-multicaster> element of the integration namespace.\npublic class BarrierParser extends AbstractConsumerEndpointParser; // Parser for <int:barrier/>.\npublic interface BeanDefinitionRegisteringParser; // Simple strategy interface for parsers that are responsible for parsing an element, creating a bean definition, and then registering the bean.\n", "des": "Provides supporting XML-based configuration - parsers, namespace handlers."}
{"index": 2852, "repo": "spring-integration-core-6.1.2", "code": "package context;\n\npublic interface ExpressionCapable; // Components that implement this interface are capable of supporting a primary SpEL expression as part of their configuration.\npublic abstract class IntegrationContextUtils extends Object; // Utility methods for accessing common integration components from the BeanFactory.\npublic abstract class IntegrationObjectSupport extends Object implements org.springframework.beans.factory.BeanNameAware, NamedComponent, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, ExpressionCapable; // A base class that provides convenient access to the bean factory as well as TaskScheduler and ConversionService instances.\npublic final class IntegrationProperties extends Object; // Utility class to encapsulate infrastructure Integration properties constants and their default values.\npublic interface Orderable extends org.springframework.core.Ordered; // Interface that extends Ordered while also exposing the Orderable.setOrder(int) as an interface-level so that it is avaiable on AOP proxies, etc.\npublic interface OrderlyShutdownCapable; // Interface for components that wish to be considered for an orderly shutdown using management interfaces.\n", "des": "Provides classes relating to application context configuration."}
{"index": 2853, "repo": "spring-integration-core-6.1.2", "code": "package core;\n\npublic interface AsyncMessagingOperations;\npublic class AsyncMessagingTemplate extends MessagingTemplate implements AsyncMessagingOperations;\npublic class ErrorMessagePublisher extends Object implements org.springframework.beans.factory.BeanFactoryAware; // The component which can be used as general purpose of errors publishing.\n@FunctionalInterface public interface GenericHandler<P>; // A functional interface to specify MessageHandler logic with Java 8 Lambda expression:\n@FunctionalInterface public interface GenericSelector<S>; // Generic (lambda) strategy interface for selector.\n@FunctionalInterface public interface GenericTransformer<S,T>; // Generic (lambda) strategy interface for transformer.\npublic interface MessageProducer; // Base interface for any component that is capable of sending messages to a MessageChannel.\n@FunctionalInterface public interface MessageSelector extends GenericSelector<org.springframework.messaging.Message<?>>; // Strategy interface for message selection.\n@FunctionalInterface public interface MessageSource<T> extends IntegrationPattern; // Base interface for any source of Messages that can be polled.\npublic class MessagingTemplate extends org.springframework.messaging.core.GenericMessagingTemplate;\npublic interface Pausable extends ManageableLifecycle; // Endpoints implementing this interface can be paused/resumed.\n", "des": "Provides core classes."}
{"index": 2854, "repo": "spring-integration-core-6.1.2", "code": "package dispatcher;\n\npublic abstract class AbstractDispatcher extends Object implements MessageDispatcher; // Base class for MessageDispatcher implementations.\npublic class AggregateMessageDeliveryException extends org.springframework.messaging.MessageDeliveryException; // An Exception that encapsulates an aggregated group of Exceptions for use by dispatchers that may try multiple handler invocations within a single dispatch operation.\npublic class BroadcastingDispatcher extends AbstractDispatcher implements org.springframework.beans.factory.BeanFactoryAware; // A broadcasting dispatcher implementation.\n@FunctionalInterface public interface LoadBalancingStrategy; // Strategy for determining the iteration order of a MessageHandler list.\npublic interface MessageDispatcher; // Strategy interface for dispatching messages to handlers.\n@FunctionalInterface public interface MessageHandlingTaskDecorator; // The strategy to decorate MessageHandlingRunnable tasks to be used with the Executor.\npublic class PartitionedDispatcher extends AbstractDispatcher; // An AbstractDispatcher implementation for distributing messages to dedicated threads according to the key determined by the provided function against the message to dispatch.\npublic class RoundRobinLoadBalancingStrategy extends Object implements LoadBalancingStrategy; // Round-robin implementation of LoadBalancingStrategy.\npublic class UnicastingDispatcher extends AbstractDispatcher; // Implementation of MessageDispatcher that will attempt to send a Message to at most one of its handlers.\n", "des": "Provides classes related to dispatching messages."}
{"index": 2855, "repo": "spring-integration-core-6.1.2", "code": "package dsl;\n\npackage dsl.context; // The context support classes for Spring Integration Java DSL.\npackage dsl.support; // Provides various support classes used across Spring Integration Java DSL Components.\npublic class AbstractRouterSpec<S extends AbstractRouterSpec<S,R>,R extends AbstractMessageRouter> extends ConsumerEndpointSpec<S,R>; // A MessageHandlerSpec for AbstractMessageRouters.\npublic class AggregatorSpec extends CorrelationHandlerSpec<AggregatorSpec,AggregatingMessageHandler>; // A CorrelationHandlerSpec for an AggregatingMessageHandler.\npublic class BarrierSpec extends ConsumerEndpointSpec<BarrierSpec,BarrierMessageHandler>; // A MessageHandlerSpec for the BarrierMessageHandler.\n@IntegrationDsl public abstract class BaseIntegrationFlowDefinition<B extends BaseIntegrationFlowDefinition<B>> extends Object; // The Builder pattern implementation for the EIP-method chain.\npublic static final class BaseIntegrationFlowDefinition.ReplyProducerCleaner extends Object implements org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;\npublic class BroadcastPublishSubscribeSpec extends IntegrationComponentSpec<BroadcastPublishSubscribeSpec,BroadcastCapableChannel> implements ComponentsRegistration; // An IntegrationComponentSpec for configuring sub-flow subscribers on the provided BroadcastCapableChannel.\npublic final class Channels extends Object;\n@FunctionalInterface public interface ComponentsRegistration; // The marker interface for the IntegrationComponentSpec implementation, when there is need to register as beans not only the target spec's components, but some additional components, e.g.\npublic abstract class ConsumerEndpointSpec<S extends ConsumerEndpointSpec<S,H>,H extends org.springframework.messaging.MessageHandler> extends EndpointSpec<S,ConsumerEndpointFactoryBean,H>; // A EndpointSpec for consumer endpoints.\npublic abstract class CorrelationHandlerSpec<S extends CorrelationHandlerSpec<S,H>,H extends AbstractCorrelatingMessageHandler> extends ConsumerEndpointSpec<S,H>; // A MessageHandlerSpec for an AbstractCorrelatingMessageHandler.\npublic class DelayerEndpointSpec extends ConsumerEndpointSpec<DelayerEndpointSpec,DelayHandler>; // A ConsumerEndpointSpec for a DelayHandler.\npublic class DirectChannelSpec extends LoadBalancingChannelSpec<DirectChannelSpec,DirectChannel>;\n", "des": "Root package of the Spring Integration Java DSL."}
{"index": 2856, "repo": "spring-integration-core-6.1.2", "code": "package context;\n\npublic class DslIntegrationConfigurationInitializer extends Object implements IntegrationConfigurationInitializer; // The Java DSL Integration infrastructure beanFactory initializer.\npublic class IntegrationFlowBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.SmartInitializingSingleton; // A BeanPostProcessor to parse IntegrationFlow beans and register their components as beans in the provided BeanFactory, if necessary.\npublic interface IntegrationFlowContext; // A public API for dynamic (manual) registration of IntegrationFlows, not via standard bean registration phase.\npublic static interface IntegrationFlowContext.IntegrationFlowRegistration extends org.springframework.beans.factory.BeanFactoryAware;\npublic static interface IntegrationFlowContext.IntegrationFlowRegistrationBuilder; // A Builder pattern implementation for the options to register IntegrationFlow in the application context.\npublic final class StandardIntegrationFlowContext extends Object implements IntegrationFlowContext, org.springframework.beans.factory.BeanFactoryAware; // Standard implementation of IntegrationFlowContext.\n", "des": "The context support classes for Spring Integration Java DSL."}
{"index": 2857, "repo": "spring-integration-core-6.1.2", "code": "package support;\n\npublic class FixedSubscriberChannelPrototype extends Object implements org.springframework.messaging.MessageChannel; // An \"artificial\" MessageChannel implementation which will be unwrapped to the FixedSubscriberChannel on the bean registration phase.\npublic record MessageChannelReference(String name) extends Record implements org.springframework.messaging.MessageChannel; // An \"artificial\" MessageChannel implementation which will be unwrapped to the MessageChannel bean on the bean registration phase.\n", "des": "Provides various support classes used across Spring Integration Java DSL Components."}
{"index": 2858, "repo": "spring-integration-core-6.1.2", "code": "package endpoint;\n\n@IntegrationManagedResource public abstract class AbstractEndpoint extends IntegrationObjectSupport implements ManageableSmartLifecycle, org.springframework.beans.factory.DisposableBean; // The base class for Message Endpoint implementations.\npublic abstract class AbstractFetchLimitingMessageSource<T> extends AbstractMessageSource<T> implements MessageSourceManagement; // A message source that can limit the number of remote objects it fetches.\n@IntegrationManagedResource public abstract class AbstractMessageSource<T> extends AbstractExpressionEvaluator implements MessageSource<T>, IntegrationInboundManagement, NamedComponent, org.springframework.beans.factory.BeanNameAware; // Abstract message source.\npublic abstract class AbstractPollingEndpoint extends AbstractEndpoint implements org.springframework.beans.factory.BeanClassLoaderAware; // An AbstractEndpoint extension for Polling Consumer pattern basics.\npublic class EventDrivenConsumer extends AbstractEndpoint implements IntegrationConsumer; // Message Endpoint that connects any MessageHandler implementation to a SubscribableChannel.\npublic class ExpressionEvaluatingMessageSource<T> extends AbstractMessageSource<T> implements ExpressionCapable;\npublic abstract class ExpressionMessageProducerSupport extends MessageProducerSupport; // A MessageProducerSupport sub-class that provides ExpressionMessageProducerSupport.payloadExpression evaluation with result as a payload for Message to send.\npublic interface IntegrationConsumer extends NamedComponent; // Message consumers implement this interface, the message handler within a consumer may or may not emit output messages.\npublic class MessageProcessorMessageSource extends AbstractMessageSource<Object>; // The MessageSource strategy implementation to produce a Message from underlying MessageProcessorMessageSource.messageProcessor for polling endpoints.\npublic abstract class MessageProducerSupport extends AbstractEndpoint implements MessageProducer, TrackableComponent, org.springframework.beans.factory.SmartInitializingSingleton, IntegrationPattern, IntegrationInboundManagement; // A support class for producer endpoints that provides a setter for the output channel and a convenience method for sending Messages.\npublic class MessageSourcePollingTemplate extends Object implements PollingOperations; // A PollingOperations used to ad-hoc poll a MessageSource.\npublic class MethodInvokingMessageSource extends AbstractMessageSource<Object> implements ManageableLifecycle; // A MessageSource implementation that invokes a no-argument method so that its return value may be sent to a channel.\npublic class PollingConsumer extends AbstractPollingEndpoint implements IntegrationConsumer; // Message Endpoint that connects any MessageHandler implementation to a PollableChannel.\n", "des": "Provides core classes related to Endpoints."}
{"index": 2859, "repo": "spring-integration-core-6.1.2", "code": "package events;\n\npublic abstract class IntegrationEvent extends org.springframework.context.ApplicationEvent; // Base class for all ApplicationEvents generated by the framework.\n", "des": "ApplicationEvents generated by the Spring Integration framework."}
{"index": 2860, "repo": "spring-integration-core-6.1.2", "code": "package expression;\n\npublic class ControlBusMethodFilter extends Object implements org.springframework.expression.MethodFilter; // SpEL MethodFilter to restrict method invocations to: Pausable or Lifecycle components get, set and shutdown methods of CustomizableThreadCreator methods with ManagedAttribute and ManagedOperation annotations This class isn't designed for target applications and typically is used from ExpressionControlBusFactoryBean.\npublic class DynamicExpression extends Object implements org.springframework.expression.Expression; // An implementation of Expression that delegates to an ExpressionSource for resolving the actual Expression instance per-invocation at runtime.\npublic final class ExpressionEvalMap extends AbstractMap<String,Object>; // An immutable AbstractMap implementation that wraps a Map<String, Object>, where values must be instances of String or Expression, and evaluates an expression for the provided key from the underlying original Map.\npublic static class ExpressionEvalMap.ComponentsEvaluationCallback extends Object implements ExpressionEvalMap.EvaluationCallback; // The ExpressionEvalMap.EvaluationCallback implementation which evaluates an expression using the provided context, root and returnType variables.\n@FunctionalInterface public static interface ExpressionEvalMap.EvaluationCallback; // Implementations of this interface can be provided to build 'on demand ExpressionEvalMap.get(Object) logic' for ExpressionEvalMap.\npublic static final class ExpressionEvalMap.ExpressionEvalMapBuilder extends Object; // The builder class to instantiate ExpressionEvalMap.\npublic static interface ExpressionEvalMap.ExpressionEvalMapComponentsBuilder extends ExpressionEvalMap.ExpressionEvalMapFinalBuilder;\n@FunctionalInterface public static interface ExpressionEvalMap.ExpressionEvalMapFinalBuilder;\n@FunctionalInterface public interface ExpressionSource; // Strategy interface for retrieving Expressions.\npublic final class ExpressionUtils extends Object; // Utility class with static methods for helping with evaluation of SpEL expressions.\npublic class FunctionExpression<S> extends Object implements org.springframework.expression.Expression; // An Expression that simply invokes Function.apply(Object) on its provided Function.\npublic class ReloadableResourceBundleExpressionSource extends Object implements ExpressionSource, org.springframework.context.ResourceLoaderAware; // ExpressionSource implementation that accesses resource bundles using specified basenames.\npublic class SpelPropertyAccessorRegistrar extends Object; // Utility class that keeps track of a Set of SpEL PropertyAccessors in order to register them with the \"integrationEvaluationContext\" upon initialization.\n", "des": "Provides classes supporting SpEL expressions."}
{"index": 2861, "repo": "spring-integration-core-6.1.2", "code": "package filter;\n\npublic abstract class AbstractMessageProcessingSelector extends Object implements MessageSelector, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle; // A base class for MessageSelector implementations that delegate to a MessageProcessor.\npublic class ExpressionEvaluatingSelector extends AbstractMessageProcessingSelector; // A MessageSelector implementation that evaluates a SpEL expression.\npublic class MessageFilter extends AbstractReplyProducingPostProcessingMessageHandler implements DiscardingMessageHandler, ManageableLifecycle; // Message Handler that delegates to a MessageSelector.\npublic class MethodInvokingSelector extends AbstractMessageProcessingSelector; // A method-invoking implementation of MessageSelector.\n", "des": "Provides classes supporting the filter pattern."}
{"index": 2862, "repo": "spring-integration-core-6.1.2", "code": "package gateway;\n\npublic class AnnotationGatewayProxyFactoryBean<T> extends GatewayProxyFactoryBean<T>; // A GatewayProxyFactoryBean extension for Java configuration.\npublic class GatewayMessageHandler extends AbstractReplyProducingMessageHandler implements ManageableLifecycle; // The AbstractReplyProducingMessageHandler implementation for mid-flow Gateway.\npublic class GatewayMethodMetadata extends Object; // Represents the metadata associated with a Gateway method.\npublic class GatewayProxyFactoryBean<T> extends AbstractEndpoint implements TrackableComponent, org.springframework.beans.factory.FactoryBean<T>, org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanClassLoaderAware, IntegrationManagement; // Generates a proxy for the provided service interface to enable interaction with messaging components without application code being aware of them allowing for POJO-style interaction.\n@IntegrationManagedResource public abstract class MessagingGatewaySupport extends AbstractEndpoint implements TrackableComponent, IntegrationInboundManagement, IntegrationPattern; // A convenient base class for connecting application code to MessageChannels for sending, receiving, or request-reply operations.\nprotected static class MessagingGatewaySupport.ConvertingMessagingTemplate extends MessagingTemplate; // The MessagingTemplate extension to increase MessagingGatewaySupport.ConvertingMessagingTemplate.doConvert(Object, Map, MessagePostProcessor) visibility to get access to the request message from an observation context.\npublic final class MethodArgsHolder extends Object; // Simple wrapper class containing a Method and an object array containing the arguments for an invocation of that method.\npublic interface MethodArgsMessageMapper extends InboundMessageMapper<MethodArgsHolder>; // Implementations of this interface are InboundMessageMappers that map a MethodArgsHolder to a Message.\n@FunctionalInterface public interface RequestReplyExchanger; // Interface for a request/reply Message exchange.\n", "des": "Provides classes supporting messaging gateways."}
{"index": 2863, "repo": "spring-integration-core-6.1.2", "code": "package graph;\n\npublic class CompositeMessageHandlerNode extends MessageHandlerNode; // Represents a composite message handler.\npublic static class CompositeMessageHandlerNode.InnerHandler extends Object;\npublic class DiscardingMessageHandlerNode extends MessageHandlerNode; // Represents an endpoint that has a discard channel.\npublic abstract class EndpointNode extends IntegrationNode; // Base class for all endpoints.\npublic class ErrorCapableCompositeMessageHandlerNode extends CompositeMessageHandlerNode implements ErrorCapableNode; // Represents a composite message handler that can emit error messages (pollable endpoint).\npublic class ErrorCapableDiscardingMessageHandlerNode extends DiscardingMessageHandlerNode implements ErrorCapableNode; // Represents an endpoint that has a discard channel and can emit errors (pollable endpoint).\npublic class ErrorCapableEndpointNode extends EndpointNode implements ErrorCapableNode; // Represents nodes that can natively handle errors.\npublic class ErrorCapableMessageHandlerNode extends MessageHandlerNode implements ErrorCapableNode; // Represents a message handler that can produce errors (pollable).\npublic interface ErrorCapableNode; // Nodes implementing this interface are capable of emitting errors.\npublic class ErrorCapableRoutingNode extends RoutingMessageHandlerNode implements ErrorCapableNode; // Represents an endpoint that can route to multiple channels and can emit errors (pollable endpoint).\npublic class Graph extends Object; // This object can be exposed, for example, as a JSON object over HTTP.\n@ImportRuntimeHints(org.springframework.integration.graph.IntegrationGraphRuntimeHints.class) public class IntegrationGraphServer extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>; // Builds the runtime object model graph.\npublic abstract class IntegrationNode extends Object; // Base class for all nodes.\npublic class LinkNode extends Object; // Represents a link between nodes.\npublic static enum LinkNode.Type extends Enum<LinkNode.Type>;\npublic class MessageChannelNode extends IntegrationNode implements SendTimersAware; // Represents a message channel.\npublic class MessageGatewayNode extends ErrorCapableEndpointNode; // Represents an inbound gateway.\npublic class MessageHandlerNode extends EndpointNode implements SendTimersAware; // Represents a message handler.\n", "des": "Provides classes related to the runtime object graph."}
{"index": 2864, "repo": "spring-integration-core-6.1.2", "code": "package handler;\n\npackage handler.advice; // Provides classes that are used to advise MessageHandlers with cross-cutting concerns.\npackage handler.support; // Provides classes for message handlers support.\npublic abstract class AbstractMessageHandler extends MessageHandlerSupport implements org.springframework.messaging.MessageHandler, reactor.core.CoreSubscriber<org.springframework.messaging.Message<?>>; // Base class for MessageHandler implementations.\npublic abstract class AbstractMessageProcessor<T> extends AbstractExpressionEvaluator implements MessageProcessor<T>;\npublic abstract class AbstractMessageProducingHandler extends AbstractMessageHandler implements MessageProducer, HeaderPropagationAware; // The base AbstractMessageHandler implementation for the MessageProducer.\npublic abstract class AbstractReactiveMessageHandler extends MessageHandlerSupport implements org.springframework.messaging.ReactiveMessageHandler; // Base class for ReactiveMessageHandler implementations.\npublic abstract class AbstractReplyProducingMessageHandler extends AbstractMessageProducingHandler implements org.springframework.beans.factory.BeanClassLoaderAware; // Base class for MessageHandlers that are capable of producing replies.\npublic static interface AbstractReplyProducingMessageHandler.RequestHandler; // An implementation of this interface is used to wrap the AbstractReplyProducingMessageHandler.handleRequestMessage(Message) method.\npublic abstract class AbstractReplyProducingPostProcessingMessageHandler extends AbstractReplyProducingMessageHandler implements PostProcessingMessageHandler;\npublic class BeanNameMessageProcessor<T> extends Object implements MessageProcessor<T>, org.springframework.beans.factory.BeanFactoryAware; // An \"artificial\" MessageProcessor for lazy-load of target bean by its name.\npublic class BridgeHandler extends AbstractReplyProducingMessageHandler; // A simple MessageHandler implementation that passes the request Message directly to the output channel without modifying it.\npublic interface CompositeMessageHandler extends org.springframework.messaging.MessageHandler; // Classes implementing this interface delegate to a list of handlers.\n@ManagedResource @IntegrationManagedResource public class DelayHandler extends AbstractReplyProducingMessageHandler implements DelayHandlerManagement, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>; // A MessageHandler that is capable of delaying the continuation of a Message flow based on the result of evaluation delayExpression on an inbound Message or a default delay value configured on this handler.\n", "des": "Provides classes implementing various types of message handler."}
{"index": 2865, "repo": "spring-integration-core-6.1.2", "code": "package advice;\n\npublic abstract class AbstractHandleMessageAdvice extends IntegrationObjectSupport implements HandleMessageAdvice; // The base HandleMessageAdvice for advices which can be applied only for the MessageHandler.handleMessage(Message).\npublic abstract class AbstractRequestHandlerAdvice extends IntegrationObjectSupport implements org.aopalliance.intercept.MethodInterceptor; // Base class for MessageHandler advice classes.\nprotected static interface AbstractRequestHandlerAdvice.ExecutionCallback; // Called by subclasses in doInvoke() to proceed() the invocation.\nprotected static final class AbstractRequestHandlerAdvice.ThrowableHolderException extends RuntimeException;\npublic class CacheRequestHandlerAdvice extends AbstractRequestHandlerAdvice implements org.springframework.beans.factory.SmartInitializingSingleton; // The AbstractRequestHandlerAdvice implementation for caching AbstractReplyProducingMessageHandler.RequestHandler#handleRequestMessage(Message) results.\npublic class ContextHolderRequestHandlerAdvice extends AbstractRequestHandlerAdvice; // An AbstractRequestHandlerAdvice implementation to store and reset a value into/from some context (e.g.\npublic class ErrorMessageSendingRecoverer extends ErrorMessagePublisher implements org.springframework.retry.RecoveryCallback<Object>; // A RecoveryCallback that sends the final throwable as an ErrorMessage after retry exhaustion.\npublic static class ErrorMessageSendingRecoverer.RetryExceptionNotAvailableException extends org.springframework.messaging.MessagingException;\npublic class ExpressionEvaluatingRequestHandlerAdvice extends AbstractRequestHandlerAdvice; // Used to advise MessageHandlers.\npublic static class ExpressionEvaluatingRequestHandlerAdvice.MessageHandlingExpressionEvaluatingAdviceException extends org.springframework.messaging.MessagingException;\npublic interface HandleMessageAdvice extends org.aopalliance.intercept.MethodInterceptor; // The marker MethodInterceptor interface extension to distinguish advices for some reason.\npublic class HandleMessageAdviceAdapter extends Object implements HandleMessageAdvice; // A HandleMessageAdvice implementation with a plain delegation to the provided MethodInterceptor.\npublic class IdempotentReceiverInterceptor extends AbstractHandleMessageAdvice; // The MethodInterceptor implementation for the Idempotent Receiver E.I.\npublic class RateLimiterRequestHandlerAdvice extends AbstractRequestHandlerAdvice; // An AbstractRequestHandlerAdvice extension for a rate limiting to service method calls.\n", "des": "Provides classes that are used to advise MessageHandlers with cross-cutting concerns."}
{"index": 2866, "repo": "spring-integration-core-6.1.2", "code": "package support;\n\npublic class CollectionArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // A HandlerMethodArgumentResolver implementation for Collection, Iterator or array MethodParameter.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class IntegrationInvocableHandlerMethod extends org.springframework.messaging.handler.invocation.InvocableHandlerMethod; // An InvocableHandlerMethod extension for Spring Integration requirements.\npublic class IntegrationMessageHandlerMethodFactory extends org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory; // Extension of the DefaultMessageHandlerMethodFactory for Spring Integration requirements.\npublic class MapArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // A HandlerMethodArgumentResolver implementation to resolve argument for the MethodParameter as a Map or Properties.\npublic class MessagingMethodInvokerHelper extends AbstractExpressionEvaluator implements ManageableLifecycle; // A helper class for processors that invoke a method on a target Object using a combination of message payload(s) and headers as arguments.\npublic static class MessagingMethodInvokerHelper.ParametersWrapper extends Object;\npublic class PayloadExpressionArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // The HandlerMethodArgumentResolver for evaluating Payload.expression() as a SpEL expression against message and converting result to expected parameter type.\npublic class PayloadsArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // The HandlerMethodArgumentResolver for resolving a Collection of payloads or expression against each payload.\n", "des": "Provides classes for message handlers support."}
{"index": 2867, "repo": "spring-integration-core-6.1.2", "code": "package history;\n\npublic class HistoryWritingMessagePostProcessor extends Object implements org.springframework.messaging.core.MessagePostProcessor;\npublic final class MessageHistory extends Object implements List<Properties>, Serializable;\npublic static class MessageHistory.Entry extends Properties; // Inner class for each Entry in the history.\n@ManagedResource @IntegrationManagedResource public class MessageHistoryConfigurer extends Object implements ManageableSmartLifecycle, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;\n", "des": "Provides classes supporting the capture of message history."}
{"index": 2868, "repo": "spring-integration-core-6.1.2", "code": "package json;\n\npublic class JsonNodeWrapperToJsonNodeConverter extends Object implements org.springframework.core.convert.converter.GenericConverter; // The Converter implementation for the conversion of JsonPropertyAccessor.JsonNodeWrapper to JsonNode, when the JsonPropertyAccessor.JsonNodeWrapper can be a result of the expression for JSON in case of the JsonPropertyAccessor usage.\npublic final class JsonPathUtils extends Object; // Utility class to JsonPathUtils.evaluate(java.lang.Object, java.lang.String, com.jayway.jsonpath.Predicate...) a jsonPath on the provided object.\npublic class JsonPropertyAccessor extends Object implements org.springframework.expression.PropertyAccessor; // A SpEL PropertyAccessor that knows how to read properties from JSON objects.\npublic class JsonToObjectTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware; // Transformer implementation that converts a JSON string payload into an instance of the provided target Class.\npublic class ObjectToJsonTransformer extends AbstractTransformer; // Transformer implementation that converts a payload instance into a JSON string representation.\npublic static enum ObjectToJsonTransformer.ResultType extends Enum<ObjectToJsonTransformer.ResultType>;\npublic final class SimpleJsonSerializer extends Object; // Extremely simple JSON serializer.\n", "des": "Provides classes supporting JSON in Spring Integration."}
{"index": 2869, "repo": "spring-integration-core-6.1.2", "code": "package leader;\n\npackage leader.event; // Temporary package until s-c-c-core is released.\npublic abstract class AbstractCandidate extends Object implements Candidate; // Base implementation of a Candidate.\npublic interface Candidate; // Interface that defines the contract for candidates to participate in a leader election.\n@FunctionalInterface public interface Context; // Interface that defines the context for candidate leadership.\npublic class DefaultCandidate extends AbstractCandidate; // Simple Candidate for leadership.\n", "des": "Temporary package until s-c-c-core is released."}
{"index": 2870, "repo": "spring-integration-core-6.1.2", "code": "package event;\n\npublic abstract class AbstractLeaderEvent extends org.springframework.context.ApplicationEvent; // Base ApplicationEvent class for leader based events.\npublic class DefaultLeaderEventPublisher extends Object implements LeaderEventPublisher, org.springframework.context.ApplicationEventPublisherAware; // Default implementation of LeaderEventPublisher.\npublic interface LeaderEventPublisher; // Interface for publishing leader based application events.\npublic class OnFailedToAcquireMutexEvent extends AbstractLeaderEvent; // Generic event representing that a mutex could not be acquired during leader election.\npublic class OnGrantedEvent extends AbstractLeaderEvent; // Generic event representing that leader has been granted.\npublic class OnRevokedEvent extends AbstractLeaderEvent; // Generic event representing that leader has been revoked.\n", "des": "Temporary package until s-c-c-core is released."}
{"index": 2871, "repo": "spring-integration-core-6.1.2", "code": "package mapping;\n\npackage mapping.support; // Support classes for mapping.\npublic abstract class AbstractHeaderMapper<T> extends Object implements RequestReplyHeaderMapper<T>, org.springframework.beans.factory.BeanClassLoaderAware; // Abstract base class for RequestReplyHeaderMapper implementations.\nprotected static class AbstractHeaderMapper.CompositeHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A composite AbstractHeaderMapper.HeaderMatcher that matches if one of provided AbstractHeaderMapper.HeaderMatchers matches to the headerName.\nprotected static class AbstractHeaderMapper.ContentBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A content-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header is contained within a list of candidates.\n@FunctionalInterface public static interface AbstractHeaderMapper.HeaderMatcher; // Strategy interface to determine if a given header name matches.\nprotected static class AbstractHeaderMapper.PatternBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches one of the specified simple patterns.\nprotected static class AbstractHeaderMapper.PrefixBasedMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A prefix-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header starts with a configurable prefix.\nprotected static class AbstractHeaderMapper.SinglePatternBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher; // A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches the specified simple pattern.\npublic interface BytesMessageMapper extends InboundMessageMapper<byte[]>, OutboundMessageMapper<byte[]>; // An OutboundMessageMapper and InboundMessageMapper that maps to/from byte[].\npublic class ConvertingBytesMessageMapper extends Object implements BytesMessageMapper; // The BytesMessageMapper implementation to delegate to/from Message conversion into the provided MessageConverter.\npublic interface HeaderMapper<T>; // Generic strategy interface for mapping MessageHeaders to and from other types of objects.\n@FunctionalInterface public interface InboundMessageMapper<T>; // Strategy interface for mapping from an Object to aMessage.\npublic class MessageMappingException extends org.springframework.messaging.MessagingException; // Exception that indicates an error during message mapping.\n@FunctionalInterface public interface OutboundMessageMapper<T>; // Strategy interface for mapping from a Message to an Object.\n", "des": "Provides classes related to mapping to/from message headers."}
{"index": 2872, "repo": "spring-integration-core-6.1.2", "code": "package support;\n\npublic final class JsonHeaders extends Object; // Pre-defined names and prefixes to be used for setting and/or retrieving JSON entries from/to Message Headers and other adapter, e.g.\n", "des": "Support classes for mapping."}
{"index": 2873, "repo": "spring-integration-core-6.1.2", "code": "package message;\n\npublic class AdviceMessage<T> extends org.springframework.messaging.support.GenericMessage<T>; // A message implementation that is produced by an advice after successful message handling.\n", "des": "Provides concrete Message implementations."}
{"index": 2874, "repo": "spring-integration-core-6.1.2", "code": "package metadata;\n\npublic interface ConcurrentMetadataStore extends MetadataStore; // Supports atomic updates to values in the store.\npublic interface ListenableMetadataStore extends ConcurrentMetadataStore; // ConcurrentMetadataStore with the ability of registering MetadataStoreListener callbacks, to be invoked when changes occur in the metadata store.\n@ManagedResource public interface MetadataStore; // Strategy interface for storing metadata from certain adapters to avoid duplicate delivery of messages, for example.\npublic interface MetadataStoreListener; // A callback to be invoked whenever a value changes in the data store.\npublic abstract class MetadataStoreListenerAdapter extends Object implements MetadataStoreListener; // Base implementation for a MetadataStoreListener.\npublic class PropertiesPersistingMetadataStore extends Object implements ConcurrentMetadataStore, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, Closeable, Flushable; // Properties file-based implementation of MetadataStore.\npublic class SimpleMetadataStore extends Object implements ConcurrentMetadataStore; // Simple implementation of MetadataStore that uses a ConcurrentMap for the data store.\n", "des": "Provides classes supporting metadata stores."}
{"index": 2875, "repo": "spring-integration-core-6.1.2", "code": "package resource;\n\npublic class ResourceRetrievingMessageSource extends AbstractMessageSource<org.springframework.core.io.Resource[]> implements org.springframework.context.ApplicationContextAware; // Implementation of MessageSource based on ResourcePatternResolver which will attempt to resolve Resources based on the pattern specified.\n", "des": "Provides classes related to messaging using Spring Resources"}
{"index": 2876, "repo": "spring-integration-core-6.1.2", "code": "package router;\n\npublic abstract class AbstractMappingMessageRouter extends AbstractMessageRouter implements MappingMessageRouterManagement; // Base class for all Message Routers that support mapping from arbitrary String values to Message Channel names.\n@ManagedResource @IntegrationManagedResource public abstract class AbstractMessageRouter extends AbstractMessageHandler implements MessageRouter; // Base class for all Message Routers.\npublic class ErrorMessageExceptionTypeRouter extends AbstractMappingMessageRouter; // A Message Router that resolves the target MessageChannel for messages whose payload is a Throwable.\npublic class ExpressionEvaluatingRouter extends AbstractMappingMessageRouter; // A Message Router implementation that evaluates the specified SpEL expression.\npublic class HeaderValueRouter extends AbstractMappingMessageRouter; // A Message Router that resolves the MessageChannel from a header value.\npublic interface MessageRouter; // Routers implementing this interface have a default output channel.\npublic class MethodInvokingRouter extends AbstractMappingMessageRouter; // A Message Router that invokes the specified method on the given object.\npublic class PayloadTypeRouter extends AbstractMappingMessageRouter; // A Message Router that resolves the MessageChannel based on the Message's payload type.\npublic class RecipientListRouter extends AbstractMessageRouter implements RecipientListRouterManagement; // <recipient-list-router id=\"simpleRouter\" input-channel=\"routingChannelA\"> <recipient channel=\"channel1\"/> <recipient channel=\"channel2\"/> </recipient-list-router>\npublic static class RecipientListRouter.Recipient extends Object;\n@ManagedResource @IntegrationManagedResource public interface RecipientListRouterManagement; // Exposes adding/removing individual recipients operations for RecipientListRouter.\n", "des": "Provides classes supporting the router pattern."}
{"index": 2877, "repo": "spring-integration-core-6.1.2", "code": "package routingslip;\n\npublic class ExpressionEvaluatingRoutingSlipRouteStrategy extends Object implements RoutingSlipRouteStrategy, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // The Expression based RoutingSlipRouteStrategy implementation.\npublic static class ExpressionEvaluatingRoutingSlipRouteStrategy.RequestAndReply extends Object;\n@FunctionalInterface public interface RoutingSlipRouteStrategy; // The RoutingSlip strategy to determine the next replyChannel.\n", "des": "Provides classes supporting the RoutingSlip pattern."}
{"index": 2878, "repo": "spring-integration-core-6.1.2", "code": "package scattergather;\n\npublic class ScatterGatherHandler extends AbstractReplyProducingMessageHandler implements ManageableLifecycle; // The MessageHandler implementation for the Scatter-Gather EIP pattern.\n", "des": "Provides classes supporting the Scatter-Gather pattern."}
{"index": 2879, "repo": "spring-integration-core-6.1.2", "code": "package scheduling;\n\npublic class PollerMetadata extends Object;\npublic class PollSkipAdvice extends Object implements org.aopalliance.intercept.MethodInterceptor; // An advice that can be added to a poller's advice chain that determines whether a poll should be skipped or not.\npublic interface PollSkipStrategy; // Implementations determine whether a particular poll should be skipped.\n@ManagedResource public class SimplePollSkipStrategy extends Object implements PollSkipStrategy; // A simple PollSkipStrategy to be used with a PollSkipAdvice.\n", "des": "Provides classes related to task scheduling."}
{"index": 2880, "repo": "spring-integration-core-6.1.2", "code": "package selector;\n\npublic class MessageSelectorChain extends Object implements MessageSelector; // A message selector implementation that passes incoming messages through a chain of selectors.\npublic static enum MessageSelectorChain.VotingStrategy extends Enum<MessageSelectorChain.VotingStrategy>;\npublic class MetadataStoreSelector extends Object implements MessageSelector; // The MessageSelector implementation using a ConcurrentMetadataStore and MessageProcessor.\npublic class PayloadTypeSelector extends Object implements MessageSelector; // A MessageSelector implementation that checks the type of the Message payload.\npublic class UnexpiredMessageSelector extends Object implements MessageSelector; // A MessageSelector that accepts Messages that are not yet expired.\n", "des": "Provides classes related to message selection."}
{"index": 2881, "repo": "spring-integration-core-6.1.2", "code": "package splitter;\n\npublic abstract class AbstractMessageSplitter extends AbstractReplyProducingMessageHandler implements DiscardingMessageHandler; // Base class for Message-splitting handlers.\npublic class DefaultMessageSplitter extends AbstractMessageSplitter; // The default Message Splitter implementation.\npublic class ExpressionEvaluatingSplitter extends AbstractMessageSplitter; // A Message Splitter implementation that evaluates the specified SpEL expression.\npublic class MethodInvokingSplitter extends AbstractMessageSplitter; // A Message Splitter implementation that invokes the specified method on the given object.\n", "des": "Provides classes supporting the splitter pattern."}
{"index": 2882, "repo": "spring-integration-core-6.1.2", "code": "package store;\n\npublic abstract class AbstractBatchingMessageGroupStore extends Object implements BasicMessageGroupStore;\npublic abstract class AbstractKeyValueMessageStore extends AbstractMessageGroupStore implements MessageStore; // Base class for implementations of Key/Value style MessageGroupStore and MessageStore.\n@ManagedResource public abstract class AbstractMessageGroupStore extends AbstractBatchingMessageGroupStore implements MessageGroupStore, Iterable<MessageGroup>;\npublic interface BasicMessageGroupStore; // Defines a minimal message group store with basic capabilities.\npublic interface ChannelMessageStore extends BasicMessageGroupStore; // A marker interface that indicates this message store has optimizations for use in a QueueChannel.\npublic interface MessageGroup; // A group of messages that are correlated with each other and should be processed in the same context.\npublic interface MessageGroupFactory; // The MessageGroup factory strategy.\npublic class MessageGroupMetadata extends Object implements Serializable; // Value Object holding metadata about a MessageGroup in the MessageGroupStore.\npublic class MessageGroupQueue extends AbstractQueue<org.springframework.messaging.Message<?>> implements BlockingQueue<org.springframework.messaging.Message<?>>; // A BlockingQueue that is backed by a MessageGroupStore.\npublic interface MessageGroupStore extends BasicMessageGroupStore; // Defines additional storage operations on groups of messages linked by a group id.\n@FunctionalInterface public static interface MessageGroupStore.MessageGroupCallback; // Invoked when a MessageGroupStore expires a group.\npublic class MessageGroupStoreReaper extends Object implements Runnable, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.InitializingBean, org.springframework.context.SmartLifecycle; // Convenient configurable component to allow explicit timed expiry of MessageGroup instances in a MessageGroupStore.\npublic class MessageHolder extends Object implements Serializable; // The MessageStore specific value object to keep the Message and its metadata.\npublic class MessageMetadata extends Object implements Serializable; // Value Object holding metadata about a Message in the MessageStore.\npublic interface MessageStore; // Strategy interface for storing and retrieving messages.\npublic class MessageStoreException extends org.springframework.messaging.MessagingException; // Exception for problems that occur when using a MessageStore implementation.\npublic interface PriorityCapableChannelMessageStore extends ChannelMessageStore; // A ChannelMessageStore that supports the notion of message priority.\n", "des": "Provides classes releated to storing messages."}
{"index": 2883, "repo": "spring-integration-core-6.1.2", "code": "package support;\n\npackage support.context; // Provides classes supporting use of the application context.\npackage support.converter; // Provides classes supporting message conversion.\npackage support.json; // Provides classes supporting json.\npackage support.locks; // Provides classes related to locking resources.\npackage support.management; // Provides classes related to management support.\npackage support.utils; // Provides global utility support classes for the runtime system.\npublic abstract class AbstractIntegrationMessageBuilder<T> extends Object;\npublic class DefaultErrorMessageStrategy extends Object implements ErrorMessageStrategy; // A simple ErrorMessageStrategy implementations which produces a error message with original message if the AttributeAccessor has ErrorMessageUtils.INPUT_MESSAGE_CONTEXT_KEY attribute.\npublic class DefaultMessageBuilderFactory extends Object implements MessageBuilderFactory;\n@FunctionalInterface public interface ErrorMessageStrategy; // A strategy to build an ErrorMessage based on the provided Throwable and AttributeAccessor as a context.\npublic final class ErrorMessageUtils extends Object; // Utilities for building error messages.\npublic class IdGenerators extends Object; // Alternative IdGenerator implementations.\npublic static class IdGenerators.JdkIdGenerator extends Object implements org.springframework.util.IdGenerator; // UUID.randomUUID().\npublic static class IdGenerators.SimpleIncrementingIdGenerator extends Object implements org.springframework.util.IdGenerator; // Based on the two AtomicLongs, for topBits and bottomBits, respectively.\npublic class MapBuilder<B extends MapBuilder<B,K,V>,K,V> extends Object; // A Builder pattern implementation for the Map.\npublic final class MessageBuilder<T> extends AbstractIntegrationMessageBuilder<T>; // The default message builder; creates immutable GenericMessages.\npublic interface MessageBuilderFactory;\n@FunctionalInterface public interface MessageDecorator; // The Message decoration contract.\npublic class MessagingExceptionWrapper extends org.springframework.messaging.MessagingException; // A wrapper exception for a MessagingException used to convey the cause and original message to a MessagePublishingErrorHandler.\npublic class MutableMessage<T> extends Object implements org.springframework.messaging.Message<T>, Serializable; // An implementation of Message with a generic payload.\npublic final class MutableMessageBuilder<T> extends AbstractIntegrationMessageBuilder<T>; // Specialized message builder that can be used within a component to avoid the overhead of having to build multiple messages for mutations within that component.\n", "des": "Base core support package."}
{"index": 2884, "repo": "spring-integration-core-6.1.2", "code": "package context;\n\npublic interface NamedComponent;\n", "des": "Provides classes supporting use of the application context."}
{"index": 2885, "repo": "spring-integration-core-6.1.2", "code": "package converter;\n\npublic class AllowListDeserializingConverter extends Object implements org.springframework.core.convert.converter.Converter<byte[],Object>; // A Converter that delegates to a Deserializer to convert data in a byte array to an object.\npublic class ConfigurableCompositeMessageConverter extends org.springframework.messaging.converter.CompositeMessageConverter implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean; // A CompositeMessageConverter extension with some default MessageConverters which can be overridden with the given converters or added in the end of target converters collection.\npublic class DefaultDatatypeChannelMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware; // Default message converter for datatype channels.\npublic class MapMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware; // Converts to/from a Map with 2 keys ('headers' and 'payload').\npublic class ObjectStringMessageConverter extends org.springframework.messaging.converter.StringMessageConverter; // A StringMessageConverter extension to convert any object to string.\npublic class PassThruMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter; // The simple MessageConverter implementation which contract is to return Message as is for both from/to operations.\npublic class SimpleMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware;\n", "des": "Provides classes supporting message conversion."}
{"index": 2886, "repo": "spring-integration-core-6.1.2", "code": "package json;\n\npublic abstract class AbstractJacksonJsonObjectMapper<N,P,J> extends Object implements JsonObjectMapper<N,P>, org.springframework.beans.factory.BeanClassLoaderAware; // Base class for Jackson JsonObjectMapper implementations.\npublic abstract class AbstractJsonInboundMessageMapper<P> extends Object implements InboundMessageMapper<String>; // Abstract InboundMessageMapper implementation that maps incoming JSON messages to a Message with the specified payload type.\npublic class AdviceMessageJacksonDeserializer extends MessageJacksonDeserializer<AdviceMessage<?>>; // The MessageJacksonDeserializer implementation for the AdviceMessage.\npublic class EmbeddedJsonHeadersMessageMapper extends Object implements BytesMessageMapper; // For outbound messages, uses a message-aware Jackson object mapper to render the message as JSON.\npublic class ErrorMessageJacksonDeserializer extends MessageJacksonDeserializer<org.springframework.messaging.support.ErrorMessage>; // The MessageJacksonDeserializer implementation for the ErrorMessage.\npublic class GenericMessageJacksonDeserializer extends MessageJacksonDeserializer<org.springframework.messaging.support.GenericMessage<?>>; // The MessageJacksonDeserializer implementation for the GenericMessage.\npublic class Jackson2JsonMessageParser extends Object; // JsonInboundMessageMapper.JsonMessageParser implementation that parses JSON messages and builds a Message with the specified payload type from provided JsonInboundMessageMapper.\npublic class Jackson2JsonObjectMapper extends AbstractJacksonJsonObjectMapper<com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType>; // Jackson 2 JSON-processor (@link https://github.com/FasterXML) JsonObjectMapper implementation.\npublic final class JacksonJsonUtils extends Object; // Utility methods for Jackson.\npublic final class JacksonPresent extends Object; // The utility to check if Jackson JSON processor is present in the classpath.\npublic class JsonInboundMessageMapper extends AbstractJsonInboundMessageMapper<JsonInboundMessageMapper.JsonMessageParser<?>>; // InboundMessageMapper implementation that maps incoming JSON messages to a Message with the specified payload type.\npublic static interface JsonInboundMessageMapper.JsonMessageParser<P>;\npublic interface JsonObjectMapper<N,P>; // Strategy interface to convert an Object to/from the JSON representation.\n", "des": "Provides classes supporting json."}
{"index": 2887, "repo": "spring-integration-core-6.1.2", "code": "package locks;\n\npublic final class DefaultLockRegistry extends Object implements LockRegistry; // Default implementation of LockRegistry which uses Masked Hashcode algorithm to obtain locks.\npublic interface ExpirableLockRegistry extends LockRegistry; // A LockRegistry implementing this interface supports the removal of aged locks that are not currently locked.\n@FunctionalInterface public interface LockRegistry; // Strategy for maintaining a registry of shared locks.\npublic final class PassThruLockRegistry extends Object implements LockRegistry; // The LockRegistry implementation which has no effect.\npublic interface RenewableLockRegistry extends LockRegistry; // A LockRegistry implementing this interface supports the renewal of the time to live of a lock.\n", "des": "Provides classes related to locking resources."}
{"index": 2888, "repo": "spring-integration-core-6.1.2", "code": "package management;\n\npackage management.metrics; // Provides interfaces related to 5.0 metrics.\npackage management.micrometer; // Provides classes to support the use of Micrometer for metrics.\npackage management.observation; // Provides classes to support of Micrometer Observation API.\npublic interface IntegrationInboundManagement extends IntegrationManagement; // Marker interface indicating that this IntegrationManagement component initiates message flow.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface IntegrationManagedResource; // Clone of ManagedResource limiting beans thus annotated so that they will only be exported by the IntegrationMBeanExporter and prevented from being exported by other MBeanExporters (if present).\npublic interface IntegrationManagement extends NamedComponent, org.springframework.beans.factory.DisposableBean; // Base interface for Integration managed components.\npublic static class IntegrationManagement.ManagementOverrides extends Object; // Toggles to inform the management configurer to not set these properties since the user has manually configured them in a bean definition.\npublic interface ManageableLifecycle extends org.springframework.context.Lifecycle; // Makes Lifecycle methods manageable.\npublic interface ManageableSmartLifecycle extends org.springframework.context.SmartLifecycle, ManageableLifecycle; // Extend ManageableLifecycle to make those methods manageable.\npublic interface MappingMessageRouterManagement; // Exposes channel mapping operations when the router is proxied.\n@IntegrationManagedResource public interface MessageSourceManagement; // Message sources implementing this interface have additional properties that can be set or examined using JMX.\npublic interface SubscribableChannelManagement; // Metrics for subscribable channels.\n@IntegrationManagedResource public interface TrackableComponent extends NamedComponent;\n", "des": "Provides classes related to management support."}
{"index": 2889, "repo": "spring-integration-core-6.1.2", "code": "package metrics;\n\npublic interface CounterFacade extends MeterFacade;\npublic interface GaugeFacade extends MeterFacade;\npublic interface MeterFacade; // Facade for Meters.\npublic interface MetricsCaptor; // A metrics facade that delegates to a concrete implementation.\npublic static interface MetricsCaptor.CounterBuilder; // A builder for a counter.\npublic static interface MetricsCaptor.GaugeBuilder; // A builder for a gauge.\npublic static interface MetricsCaptor.TimerBuilder; // A builder for a timer.\npublic interface SampleFacade;\npublic interface TimerFacade extends MeterFacade;\n", "des": "Provides interfaces related to 5.0 metrics."}
{"index": 2890, "repo": "spring-integration-core-6.1.2", "code": "package micrometer;\n\npublic class MicrometerMetricsCaptor extends Object implements MetricsCaptor; // The Micrometer implementation of MetricsCaptor.\nprotected abstract static class MicrometerMetricsCaptor.AbstractMeter<M extends io.micrometer.core.instrument.Meter> extends Object implements MeterFacade;\nprotected static class MicrometerMetricsCaptor.MicroCounter extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Counter> implements CounterFacade;\nprotected static class MicrometerMetricsCaptor.MicroCounterBuilder extends Object implements MetricsCaptor.CounterBuilder;\nprotected static class MicrometerMetricsCaptor.MicroGauge extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Gauge> implements GaugeFacade;\nprotected static class MicrometerMetricsCaptor.MicroGaugeBuilder extends Object implements MetricsCaptor.GaugeBuilder;\nprotected static class MicrometerMetricsCaptor.MicroTimer extends MicrometerMetricsCaptor.AbstractMeter<io.micrometer.core.instrument.Timer> implements TimerFacade;\nprotected static class MicrometerMetricsCaptor.MicroTimerBuilder extends Object implements MetricsCaptor.TimerBuilder;\n@Configuration(proxyBeanMethods=false) public class MicrometerMetricsCaptorConfiguration extends Object; // A Configuration to add a MicrometerMetricsCaptor.\npublic class MicrometerMetricsCaptorImportSelector extends Object implements org.springframework.context.annotation.ImportSelector; // An ImportSelector to conditionally add a MicrometerMetricsCaptorConfiguration bean when io.micrometer.core.instrument.MeterRegistry is present in classpath.\n", "des": "Provides classes to support the use of Micrometer for metrics."}
{"index": 2891, "repo": "spring-integration-core-6.1.2", "code": "package observation;\n\npublic class DefaultMessageReceiverObservationConvention extends Object implements MessageReceiverObservationConvention; // A default MessageReceiverObservationConvention implementation.\npublic class DefaultMessageRequestReplyReceiverObservationConvention extends Object implements MessageRequestReplyReceiverObservationConvention; // A default MessageRequestReplyReceiverObservationConvention implementation.\npublic class DefaultMessageSenderObservationConvention extends Object implements MessageSenderObservationConvention; // A default MessageSenderObservationConvention implementation.\npublic enum IntegrationObservation extends Enum<IntegrationObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // The ObservationDocumentation implementation for Spring Integration infrastructure.\npublic static enum IntegrationObservation.GatewayTags extends Enum<IntegrationObservation.GatewayTags> implements io.micrometer.common.docs.KeyName; // Key names for message handler observations.\npublic static enum IntegrationObservation.HandlerTags extends Enum<IntegrationObservation.HandlerTags> implements io.micrometer.common.docs.KeyName; // Key names for message handler observations.\npublic static enum IntegrationObservation.ProducerTags extends Enum<IntegrationObservation.ProducerTags> implements io.micrometer.common.docs.KeyName; // Key names for message producer observations.\npublic class MessageReceiverContext extends io.micrometer.observation.transport.ReceiverContext<org.springframework.messaging.Message<?>>; // The ReceiverContext extension for Message context.\npublic interface MessageReceiverObservationConvention extends io.micrometer.observation.ObservationConvention<MessageReceiverContext>; // A MessageReceiverContext-based ObservationConvention contract.\npublic class MessageRequestReplyReceiverContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<org.springframework.messaging.Message<?>,org.springframework.messaging.Message<?>>; // The RequestReplyReceiverContext extension for a Message contract with inbound gateways.\npublic interface MessageRequestReplyReceiverObservationConvention extends io.micrometer.observation.ObservationConvention<MessageRequestReplyReceiverContext>; // A MessageRequestReplyReceiverContext-based ObservationConvention contract.\npublic class MessageSenderContext extends io.micrometer.observation.transport.SenderContext<MutableMessage<?>>; // The SenderContext extension for Message context.\n", "des": "Provides classes to support of Micrometer Observation API."}
{"index": 2892, "repo": "spring-integration-core-6.1.2", "code": "package utils;\n\npublic final class IntegrationUtils extends Object; // General utility methods.\npublic final class PatternMatchUtils extends Object; // Utility methods for pattern matching.\n", "des": "Provides global utility support classes for the runtime system."}
{"index": 2893, "repo": "spring-integration-core-6.1.2", "code": "package transaction;\n\npublic class DefaultTransactionSynchronizationFactory extends Object implements TransactionSynchronizationFactory; // Default implementation of TransactionSynchronizationFactory which takes an instance of TransactionSynchronizationProcessor allowing you to create a TransactionSynchronization using {DefaultTransactionSynchronizationFactory.create(Object) method.\npublic class ExpressionEvaluatingTransactionSynchronizationProcessor extends IntegrationObjectSupport implements TransactionSynchronizationProcessor; // This implementation of TransactionSynchronizationFactory allows you to configure SpEL expressions, with their execution being coordinated (synchronized) with a transaction - see TransactionSynchronization.\npublic class IntegrationResourceHolder extends Object implements org.springframework.transaction.support.ResourceHolder; // An implementation of the ResourceHolder which holds an instance of the current Message and the synchronization resource.\npublic class IntegrationResourceHolderSynchronization extends org.springframework.transaction.support.ResourceHolderSynchronization<IntegrationResourceHolder,Object>; // The base ResourceHolderSynchronization for IntegrationResourceHolder.\npublic class PassThroughTransactionSynchronizationFactory extends Object implements TransactionSynchronizationFactory; // A simple TransactionSynchronizationFactory implementation which produces an IntegrationResourceHolderSynchronization with an IntegrationResourceHolder.\npublic class PseudoTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager; // An implementation of PlatformTransactionManager that provides transaction-like semantics to MessageSources that are not inherently transactional.\npublic class TransactionHandleMessageAdvice extends org.springframework.transaction.interceptor.TransactionInterceptor implements HandleMessageAdvice; // A TransactionInterceptor extension with HandleMessageAdvice marker.\npublic class TransactionInterceptorBuilder extends Object; // Provides a fluent API to build a transaction interceptor.\npublic interface TransactionSynchronizationFactory; // Strategy for implementing factories that create TransactionSynchronization.\npublic class TransactionSynchronizationFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<DefaultTransactionSynchronizationFactory>, org.springframework.beans.factory.BeanFactoryAware; // The FactoryBean implementation (with Builder style) to be used from JavaConfig to populate DefaultTransactionSynchronizationFactory bean.\npublic interface TransactionSynchronizationProcessor; // Strategy for implementing transaction synchronization processors.\n", "des": "Provides classes supporting the use of transactions and pseudo transactions in Spring Integration applications."}
{"index": 2894, "repo": "spring-integration-core-6.1.2", "code": "package transformer;\n\npackage transformer.support; // Contains support classes for Transformers.\npublic abstract class AbstractMessageProcessingTransformer extends Object implements Transformer, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle; // Base class for Message Transformers that delegate to a MessageProcessor.\npublic abstract class AbstractPayloadTransformer<T,U> extends AbstractTransformer; // A base class for Transformer implementations that modify the payload of a Message.\npublic abstract class AbstractTransformer extends IntegrationObjectSupport implements Transformer; // A base class for Transformer implementations.\npublic class ClaimCheckInTransformer extends AbstractTransformer implements IntegrationPattern; // Transformer that stores a Message and returns a new Message whose payload is the id of the stored Message.\npublic class ClaimCheckOutTransformer extends AbstractTransformer implements IntegrationPattern; // Transformer that accepts a Message whose payload is a UUID and retrieves the Message associated with that id from a MessageStore if available.\npublic class ContentEnricher extends AbstractReplyProducingMessageHandler implements ManageableLifecycle; // Content Enricher is a Message Transformer that can augment a message's payload with either static values or by optionally invoking a downstream message flow via its request channel and then applying values from the reply Message to the original payload.\npublic class DecodingTransformer<T> extends AbstractTransformer; // AbstractPayloadTransformer that delegates to a codec to decode the payload from a byte[].\npublic class EncodingPayloadTransformer<T> extends AbstractPayloadTransformer<T,byte[]>; // AbstractPayloadTransformer that delegates to a codec to encode the payload into a byte[].\npublic class ExpressionEvaluatingTransformer extends AbstractMessageProcessingTransformer; // A Message Transformer implementation that evaluates the specified SpEL expression.\npublic class FromProtobufTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware; // A Protocol Buffer transformer to instantiate Message objects from either byte[] if content type is application/x-protobuf or from String in case of application/json content type.\npublic class HeaderEnricher extends IntegrationObjectSupport implements Transformer, IntegrationPattern; // A Transformer that adds statically configured header values to a Message.\npublic class HeaderFilter extends IntegrationObjectSupport implements Transformer, IntegrationPattern; // Transformer that removes Message headers.\npublic class MapToObjectTransformer extends AbstractPayloadTransformer<Map<?,?>,Object>; // Will transform Map to an instance of Object.\n", "des": "Contains core-implementation of various Transformers which includes Enrichers and Filters."}
{"index": 2895, "repo": "spring-integration-core-6.1.2", "code": "package support;\n\npublic abstract class AbstractHeaderValueMessageProcessor<T> extends Object implements HeaderValueMessageProcessor<T>;\npublic final class AvroHeaders extends Object; // Pre-defined names and prefixes for Apache Avro related headers.\npublic class ExpressionEvaluatingHeaderValueMessageProcessor<T> extends AbstractHeaderValueMessageProcessor<T> implements org.springframework.beans.factory.BeanFactoryAware;\npublic interface HeaderValueMessageProcessor<T> extends MessageProcessor<T>;\npublic class MessageProcessingHeaderValueMessageProcessor extends AbstractHeaderValueMessageProcessor<Object> implements org.springframework.beans.factory.BeanFactoryAware;\npublic final class ProtoHeaders extends Object; // Pre-defined names and prefixes for Protocol Buffers related headers.\npublic class RoutingSlipHeaderValueMessageProcessor extends AbstractHeaderValueMessageProcessor<Map<List<Object>,Integer>> implements org.springframework.beans.factory.BeanFactoryAware; // The RoutingSlip HeaderValueMessageProcessor specific implementation.\npublic class StaticHeaderValueMessageProcessor<T> extends AbstractHeaderValueMessageProcessor<T>;\n", "des": "Contains support classes for Transformers."}
{"index": 2896, "repo": "spring-integration-core-6.1.2", "code": "package util;\n\npublic abstract class AbstractExpressionEvaluator extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\npublic class AcceptOnceCollectionFilter<T> extends Object implements CollectionFilter<T>; // An implementation of CollectionFilter that remembers the elements passed in the previous invocation in order to avoid returning those elements more than once.\npublic class AnnotatedMethodFilter extends Object implements org.springframework.expression.MethodFilter; // A MethodFilter implementation that enables the following: matching on method name, if available exclusion of void-returning methods if 'requiresReply' is true limiting to annotated methods if at least one is present .\npublic class BeanFactoryTypeConverter extends Object implements org.springframework.expression.TypeConverter, org.springframework.beans.factory.BeanFactoryAware;\npublic class CallerBlocksPolicy extends Object implements RejectedExecutionHandler; // A RejectedExecutionHandler that blocks the caller until the executor has room in its queue, or a timeout occurs (in which case a RejectedExecutionException is thrown.\n@FunctionalInterface public interface CheckedFunction<T,R>; // A Function-like interface which allows throwing Error.\npublic abstract class ClassUtils extends Object;\npublic interface CloseableIterator<E> extends Iterator<E>, AutoCloseable; // A CloseableIterator is intended to be used when it may hold resources (such as file or socket handles).\n@FunctionalInterface public interface CollectionFilter<T>; // Base strategy for filtering out a subset of a Collection of elements.\npublic class CompositeExecutor extends Object implements Executor; // An Executor that encapsulates two underlying executors.\npublic class CompoundTrigger extends Object implements org.springframework.scheduling.Trigger; // A Trigger that delegates the Trigger.nextExecutionTime(TriggerContext) to one of two Triggers.\npublic final class CoroutinesUtils extends Object; // Additional utilities for working with Kotlin Coroutines.\npublic class DynamicPeriodicTrigger extends Object implements org.springframework.scheduling.Trigger; // This is a dynamically changeable Trigger.\npublic class ErrorHandlingTaskExecutor extends Object implements org.springframework.core.task.TaskExecutor; // A TaskExecutor implementation that wraps an existing Executor instance in order to catch any exceptions.\n", "des": "Provides core utility classes."}
{"index": 2897, "repo": "spring-integration-amqp-6.1.2", "code": "package channel;\n\npublic abstract class AbstractAmqpChannel extends org.springframework.integration.channel.AbstractMessageChannel implements org.springframework.amqp.rabbit.connection.ConnectionListener; // The base AbstractMessageChannel implementation for AMQP.\npublic class PointToPointSubscribableAmqpChannel extends AbstractAmqpChannel; // The AbstractSubscribableAmqpChannel implementation for one-to-one subscription over AMQP queue.\npublic class PollableAmqpChannel extends AbstractAmqpChannel implements org.springframework.messaging.PollableChannel, org.springframework.integration.channel.ExecutorChannelInterceptorAware; // A PollableChannel implementation that is backed by an AMQP Queue.\npublic class PublishSubscribeAmqpChannel extends AbstractAmqpChannel implements org.springframework.integration.channel.BroadcastCapableChannel; // The AbstractSubscribableAmqpChannel extension for pub-sub semantics based on the FanoutExchange.\n", "des": "Provides classes related to AMQP-backed channels."}
{"index": 2898, "repo": "spring-integration-amqp-6.1.2", "code": "package config;\n\npublic class AmqpChannelFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<AbstractAmqpChannel> implements org.springframework.context.SmartLifecycle, org.springframework.beans.factory.BeanNameAware; // If point-to-point, we send to the default exchange with the routing key equal to \"[beanName]\" and we declare that same Queue and register a listener if message-driven or poll explicitly otherwise.\npublic class AmqpChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration AMQP namespace.\npublic class AmqpInboundChannelAdapterParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the AMQP 'inbound-channel-adapter' element.\npublic class AmqpInboundGatewayParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the AMQP 'inbound-gateway' element.\npublic class AmqpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for the AMQP schema.\npublic class AmqpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the AMQP 'outbound-channel-adapter' element.\npublic class AmqpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the AMQP 'outbound-channel-adapter' element.\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 2899, "repo": "spring-integration-amqp-6.1.2", "code": "package dsl;\n\npublic abstract class AbstractMessageListenerContainerSpec<S extends AbstractMessageListenerContainerSpec<S,C>,C extends org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer> extends MessageListenerContainerSpec<S,C>; // Base class for container specs for containers that extend AbstractMessageListenerContainer.\npublic final class Amqp extends Object; // Factory class for AMQP components.\npublic class AmqpAsyncOutboundGatewaySpec extends AmqpBaseOutboundEndpointSpec<AmqpAsyncOutboundGatewaySpec,AsyncAmqpOutboundGateway>;\npublic class AmqpBaseInboundChannelAdapterSpec<S extends AmqpBaseInboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageProducerSpec<S,AmqpInboundChannelAdapter>; // The base MessageProducerSpec implementation for a AmqpInboundChannelAdapter.\npublic class AmqpBaseInboundGatewaySpec<S extends AmqpBaseInboundGatewaySpec<S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,AmqpInboundGateway>; // A base MessagingGatewaySpec implementation for AmqpInboundGateway endpoint options.\npublic abstract class AmqpBaseOutboundEndpointSpec<S extends AmqpBaseOutboundEndpointSpec<S,E>,E extends AbstractAmqpOutboundEndpoint> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E>; // The base MessageHandlerSpec for AbstractAmqpOutboundEndpoints.\npublic class AmqpInboundChannelAdapterDMLCSpec extends AmqpInboundChannelAdapterSpec<AmqpInboundChannelAdapterDMLCSpec,org.springframework.amqp.rabbit.listener.DirectMessageListenerContainer>; // Spec for an inbound channel adapter with a DirectMessageListenerContainer.\npublic class AmqpInboundChannelAdapterSMLCSpec extends AmqpInboundChannelAdapterSpec<AmqpInboundChannelAdapterSMLCSpec,org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer>; // Spec for an inbound channel adapter with a SimpleMessageListenerContainer.\n", "des": "Provides AMQP Component support for the Java DSL."}
{"index": 2900, "repo": "spring-integration-amqp-6.1.2", "code": "package inbound;\n\npublic class AmqpInboundChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.integration.context.OrderlyShutdownCapable; // Adapter that receives Messages from an AMQP Queue, converts them into Spring Integration Messages, and sends the results to a Message Channel.\npublic static enum AmqpInboundChannelAdapter.BatchMode extends Enum<AmqpInboundChannelAdapter.BatchMode>; // Defines the payload type when the listener container is configured with consumerBatchEnabled.\npublic class AmqpInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport; // Adapter that receives Messages from an AMQP Queue, converts them into Spring Integration Messages, and sends the results to a Message Channel.\npublic class AmqpMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // A pollable MessageSource for RabbitMQ.\npublic static class AmqpMessageSource.AmqpAckCallback extends Object implements org.springframework.integration.acks.AcknowledgmentCallback;\npublic static class AmqpMessageSource.AmqpAckCallbackFactory extends Object implements org.springframework.integration.acks.AcknowledgmentCallbackFactory<AmqpMessageSource.AmqpAckInfo>;\npublic static class AmqpMessageSource.AmqpAckInfo extends Object; // Information for building an AmqpAckCallback.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2901, "repo": "spring-integration-amqp-6.1.2", "code": "package outbound;\n\npublic abstract class AbstractAmqpOutboundEndpoint extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements org.springframework.integration.support.management.ManageableLifecycle; // A base AbstractReplyProducingMessageHandler extension for AMQP message handlers.\nprotected static final class AbstractAmqpOutboundEndpoint.CorrelationDataWrapper extends org.springframework.amqp.rabbit.connection.CorrelationData;\npublic class AmqpOutboundEndpoint extends AbstractAmqpOutboundEndpoint implements org.springframework.amqp.rabbit.core.RabbitTemplate.ConfirmCallback, org.springframework.amqp.rabbit.core.RabbitTemplate.ReturnsCallback; // Adapter that converts and sends Messages to an AMQP Exchange.\npublic class AsyncAmqpOutboundGateway extends AbstractAmqpOutboundEndpoint; // An outbound gateway where the sending thread is released immediately and the reply is sent on the async template's listener container thread.\npublic class RabbitStreamMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // MessageHandler based on RabbitStreamOperations.\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 2902, "repo": "spring-integration-amqp-6.1.2", "code": "package support;\n\npublic interface AmqpHeaderMapper extends org.springframework.integration.mapping.RequestReplyHeaderMapper<org.springframework.amqp.core.MessageProperties>; // A convenience interface that extends RequestReplyHeaderMapper, parameterized with MessageProperties.\npublic class AmqpMessageHeaderErrorMessageStrategy extends Object implements org.springframework.integration.support.ErrorMessageStrategy; // An ErrorMessageStrategy extension that adds the raw AMQP message as a header to the ErrorMessage.\npublic class BoundRabbitChannelAdvice extends Object implements org.springframework.integration.handler.advice.HandleMessageAdvice; // An advice that causes all downstream RabbitOperations operations to be executed on the same channel, as long as there are no thread handoffs, since the channel is bound to the thread.\npublic class DefaultAmqpHeaderMapper extends org.springframework.integration.mapping.AbstractHeaderMapper<org.springframework.amqp.core.MessageProperties> implements AmqpHeaderMapper; // Default implementation of AmqpHeaderMapper.\npublic final class EndpointUtils extends Object; // Utility methods for messaging endpoints.\npublic class ManualAckListenerExecutionFailedException extends org.springframework.amqp.rabbit.support.ListenerExecutionFailedException; // A ListenerExecutionFailedException enhanced with the channel and delivery tag.\npublic final class MappingUtils extends Object; // Utility methods used during message mapping.\npublic class NackedAmqpMessageException extends org.springframework.messaging.MessagingException; // An exception representing a negatively acknowledged message from a publisher confirm.\npublic class ReturnedAmqpMessageException extends org.springframework.messaging.MessagingException; // A MessagingException for a returned message.\n", "des": "Provides AMQP support classes."}
{"index": 2903, "repo": "spring-aspects-6.0.11", "code": "package aspectj;\n\npublic interface ConfigurableObject; // Marker interface for domain objects that need DI through aspects.\n", "des": "AspectJ-based dependency injection support."}
{"index": 2904, "repo": "spring-aspects-6.0.11", "code": "package aspectj;\n\n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJCachingConfiguration extends org.springframework.cache.annotation.AbstractCachingConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven cache management.\n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJJCacheConfiguration extends org.springframework.cache.jcache.config.AbstractJCacheConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven cache management for standard JSR-107 annotations.\n", "des": "AspectJ-based caching support."}
{"index": 2905, "repo": "spring-aspects-6.0.11", "code": "package aspectj;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(SpringConfiguredConfiguration.class) public @interface EnableSpringConfigured; // Signals the current application context to apply dependency injection to non-managed classes that are instantiated outside the Spring bean factory (typically classes annotated with the @Configurable annotation).\n@Configuration public class SpringConfiguredConfiguration extends Object; // @Configuration class that registers an AnnotationBeanConfigurerAspect capable of performing dependency injection services for non-Spring managed objects annotated with @Configurable.\n", "des": "AspectJ-based dependency injection support driven by the @Configurable annotation."}
{"index": 2906, "repo": "spring-aspects-6.0.11", "code": "package aspectj;\n\n@Configuration(proxyBeanMethods=false) @Role(2) public class AspectJAsyncConfiguration extends org.springframework.scheduling.annotation.AbstractAsyncConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based asynchronous method execution.\n", "des": "AspectJ-based scheduling support."}
{"index": 2907, "repo": "spring-aspects-6.0.11", "code": "package aspectj;\n\n@Configuration @Role(2) public class AspectJJtaTransactionManagementConfiguration extends AspectJTransactionManagementConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven transaction management for the JTA 1.2 Transactional annotation in addition to Spring's own Transactional annotation.\n@Configuration @Role(2) public class AspectJTransactionManagementConfiguration extends org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration; // @Configuration class that registers the Spring infrastructure beans necessary to enable AspectJ-based annotation-driven transaction management for Spring's own Transactional annotation.\n", "des": "AspectJ-based transaction management support."}
{"index": 2908, "repo": "spring-boot-maven-plugin-3.1.1", "code": "package maven;\n\npublic abstract class AbstractAotMojo extends AbstractDependencyFilterMojo; // Abstract base class for AOT processing MOJOs.\nprotected static class AbstractAotMojo.Errors extends Object implements DiagnosticListener<JavaFileObject>; // DiagnosticListener used to collect errors.\npublic abstract class AbstractDependencyFilterMojo extends org.apache.maven.plugin.AbstractMojo; // A base mojo filtering the dependencies of the project.\nprotected static class AbstractDependencyFilterMojo.ExcludeTestScopeArtifactFilter extends org.apache.maven.shared.artifact.filter.collection.AbstractArtifactFeatureFilter; // ArtifactFilter to exclude test scope dependencies.\nprotected static class AbstractDependencyFilterMojo.RuntimeArtifactFilter extends Object implements org.apache.maven.artifact.resolver.filter.ArtifactFilter; // ArtifactFilter that only include runtime scopes.\npublic abstract class AbstractPackagerMojo extends AbstractDependencyFilterMojo; // Abstract base class for classes that work with an Packager.\npublic static enum AbstractPackagerMojo.LayoutType extends Enum<AbstractPackagerMojo.LayoutType>; // Archive layout types.\npublic abstract class AbstractRunMojo extends AbstractDependencyFilterMojo; // Base class to run a Spring Boot application.\npublic class ArtifactsLibraries extends Object implements org.springframework.boot.loader.tools.Libraries; // Libraries backed by Maven Artifacts.\n@Mojo(name=\"build-image\", defaultPhase=PACKAGE, requiresProject=true, threadSafe=true, requiresDependencyResolution=COMPILE_PLUS_RUNTIME, requiresDependencyCollection=COMPILE_PLUS_RUNTIME) @Execute(phase=PACKAGE) public class BuildImageForkMojo extends BuildImageMojo; // Package an application into an OCI image using a buildpack, forking the lifecycle to make sure that package ran.\npublic abstract class BuildImageMojo extends AbstractPackagerMojo; // Package an application into an OCI image using a buildpack.\n", "des": "Maven plugin for Spring Boot."}
{"index": 2909, "repo": "spring-xml-4.0.5", "code": "package xml;\n\npackage xml.dom; // Provides classes that help with DOM: the Document Object Model.\npackage xml.namespace; // Provides classes that help with XML Namespace processing.\npackage xml.sax; // Provides classes that help with SAX: the Simple API for XML.\npackage xml.transform; // Provides classes that help with XML transformations.\npackage xml.validation; // Provides classes for XML validation in JAXP 1.0 and JAXP 1.3.\npackage xml.xpath; // Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen.\npackage xml.xsd; // Provides an abstraction over XSD XML schemas.\npublic class DocumentBuilderFactoryUtils extends Object;\npublic abstract class JaxpVersion extends Object; // Helper class used to find the current version of JAXP.\npublic abstract class XmlException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of XML exception.\npublic class XMLInputFactoryUtils extends Object;\n", "des": "Provides classes for XML handling: version detection and a base XML exception class."}
{"index": 2910, "repo": "spring-xml-4.0.5", "code": "package dom;\n\npublic class DomContentHandler extends Object implements ContentHandler; // SAX ContentHandler that transforms callback calls to DOM Nodes.\n", "des": "Provides classes that help with DOM: the Document Object Model."}
{"index": 2911, "repo": "spring-xml-4.0.5", "code": "package namespace;\n\npublic class QNameEditor extends PropertyEditorSupport; // PropertyEditor for javax.xml.namespace.QName, to populate a property of type QName from a String value.\npublic abstract class QNameUtils extends Object; // Helper class for using QName.\npublic class SimpleNamespaceContext extends Object implements NamespaceContext; // Simple javax.xml.namespace.NamespaceContext implementation.\n", "des": "Provides classes that help with XML Namespace processing."}
{"index": 2912, "repo": "spring-xml-4.0.5", "code": "package sax;\n\npublic abstract class AbstractXmlReader extends Object implements XMLReader; // Abstract base class for SAX XMLReader implementations.\npublic abstract class SaxUtils extends Object; // Convenient utility methods for dealing with SAX.\n", "des": "Provides classes that help with SAX: the Simple API for XML."}
{"index": 2913, "repo": "spring-xml-4.0.5", "code": "package transform;\n\npublic class ResourceSource extends SAXSource; // Convenient subclass of SAXSource that reads from a Spring Resource.\npublic class StringResult extends StreamResult; // Convenient subclass of StreamResult that writes to a StringWriter.\npublic class StringSource extends StreamSource; // Convenient subclass of StreamSource that reads from a StringReader.\npublic class TransformerFactoryUtils extends Object;\npublic class TransformerHelper extends Object; // Helper class for Transformer usage.\npublic abstract class TransformerObjectSupport extends Object; // Convenient base class for objects that use a Transformer.\npublic abstract class TraxUtils extends Object; // Convenient utility methods for dealing with TrAX.\npublic static interface TraxUtils.ResultCallback; // Callback interface invoked on each sort of Result.\npublic static interface TraxUtils.SourceCallback; // Callback interface invoked on each sort of Source.\n", "des": "Provides classes that help with XML transformations."}
{"index": 2914, "repo": "spring-xml-4.0.5", "code": "package validation;\n\npublic class SchemaFactoryUtils extends Object;\npublic abstract class SchemaLoaderUtils extends Object; // Convenient utility methods for loading of Schema objects, performing standard handling of input streams.\npublic interface ValidationErrorHandler extends ErrorHandler; // Subinterface of ErrorHandler that allows the registered errors to be retrieved.\npublic class XMLReaderFactoryUtils extends Object;\npublic class XmlValidationException extends XmlException; // Exception thrown when a validation error occurs\npublic interface XmlValidator; // Simple processor that validates a given Source.\npublic abstract class XmlValidatorFactory extends Object; // Factory for XmlValidator objects, being aware of JAXP 1.3 Validators, and JAXP 1.0 parsing capabilities.\n", "des": "Provides classes for XML validation in JAXP 1.0 and JAXP 1.3."}
{"index": 2915, "repo": "spring-xml-4.0.5", "code": "package xpath;\n\npublic abstract class AbstractXPathTemplate extends TransformerObjectSupport implements XPathOperations; // Abstract base class for implementations of XPathOperations.\npublic class JaxenXPathTemplate extends AbstractXPathTemplate; // Implementation of XPathOperations that uses Jaxen.\npublic class Jaxp13XPathTemplate extends AbstractXPathTemplate; // Implementation of XPathOperations that uses JAXP 1.3.\npublic interface NodeCallbackHandler; // An interface used by XPathOperations implementations for processing Node objects on a per-node basis.\npublic interface NodeMapper<T>; // An interface used by XPathOperations implementations for mapping Node objects on a per-node basis.\npublic class XPathException extends XmlException; // Exception thrown when an error occurs during XPath processing.\npublic interface XPathExpression; // Defines the contract for a precompiled XPath expression.\npublic abstract class XPathExpressionFactory extends Object; // Factory for compiled XPathExpressions, being aware of JAXP 1.3+ XPath functionality, and Jaxen.\npublic class XPathExpressionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<XPathExpression>, org.springframework.beans.factory.InitializingBean; // Spring FactoryBean for XPathExpression object.\npublic interface XPathOperations; // Interface that specifies a basic set of XPath operations, implemented by various XPathTemplates.\npublic class XPathParseException extends XPathException; // Exception throws when a XPath expression cannot be parsed.\n", "des": "Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen."}
{"index": 2916, "repo": "spring-xml-4.0.5", "code": "package xsd;\n\npackage xsd.commons; // Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema.\npublic class SimpleXsdSchema extends Object implements XsdSchema, org.springframework.beans.factory.InitializingBean; // The default XsdSchema implementation.\npublic interface XsdSchema; // Represents an abstraction for XSD schemas.\npublic interface XsdSchemaCollection; // Represents an abstraction for a collection of XSD schemas.\npublic class XsdSchemaException extends XmlException; // Base class for all WSDL definition exceptions.\n", "des": "Provides an abstraction over XSD XML schemas."}
{"index": 2917, "repo": "spring-xml-4.0.5", "code": "package commons;\n\npublic class CommonsXsdSchema extends Object implements XsdSchema; // Implementation of the XsdSchema interface that uses Apache WS-Commons XML Schema.\npublic class CommonsXsdSchemaCollection extends Object implements XsdSchemaCollection, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // Implementation of the XsdSchemaCollection that uses Apache WS-Commons XML Schema.\npublic class CommonsXsdSchemaException extends XsdSchemaException; // Commons XmlSchema version of the XsdSchemaException.\n", "des": "Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema."}
{"index": 2918, "repo": "groovy-4.0.13", "code": "package inspect;\n\npublic class Inspector extends Object; // The Inspector provides a unified access to an object's information that can be determined by introspection.\npublic static class Inspector.MemberComparator extends Object implements Comparator<Object>, Serializable;\npublic static class Inspector.MemberComparatorWithValue extends Object implements Comparator<Object>, Serializable;\n", "des": "Classes for inspecting object properties through introspection."}
{"index": 2919, "repo": "groovy-4.0.13", "code": "package io;\n\npublic class EncodingAwareBufferedWriter extends BufferedWriter; // A buffered writer only for OutputStreamWriter that is aware of the encoding of the OutputStreamWriter.\npublic enum FileType extends Enum<FileType>; // Represents particular files of interest.\npublic enum FileVisitResult extends Enum<FileVisitResult>; // Represents special return values for the 'preDir', 'postDir' and 'visit'/supplied Closures used with ResourceGroovyMethods.traverse(java.io.File, java.util.Map, groovy.lang.Closure) and related methods to control subsequent traversal behavior.\npublic class GroovyPrintStream extends PrintStream; // A PrintStream that outputs objects in Groovy style.\npublic class GroovyPrintWriter extends PrintWriter; // A PrintWriter that outputs objects in Groovy style.\npublic class LineColumnReader extends BufferedReader; // The LineColumnReader is an extension to BufferedReader that keeps track of the line and column information of where the cursor is.\npublic class PlatformLineWriter extends Writer; // A buffered writer that gobbles any \\r characters and replaces every \\n with a platform specific newline.\n", "des": "Classes for Groovier Input/Output."}
{"index": 2920, "repo": "groovy-4.0.13", "code": "package lang;\n\npublic interface AdaptingMetaClass extends MetaClass; // An interface for MetaClass instances that \"adapt\" other MetaClass instances such as a proxy or delegating MetaClass.\npublic class BenchmarkInterceptor extends Object implements Interceptor; // Interceptor that registers the timestamp of each method call before and after invocation.\npublic class Binding extends GroovyObjectSupport; // Represents the variable bindings of a script which can be altered from outside the script object or created outside of a script and passed into it.\npublic interface Buildable;\n@Documented @Retention(SOURCE) @Target(TYPE) public @interface Category; // Transforms an instance-style Groovy class or interface to become a static-style conventional Groovy category.\npublic abstract class Closure<V> extends GroovyObjectSupport implements Cloneable, Runnable, GroovyCallable<V>, Serializable; // Represents any closure object in Groovy.\npublic class ClosureException extends RuntimeException; // An exception thrown by a closure invocation\npublic interface ClosureInvokingMethod; // An interface for MetaMethods that invoke closures to implements.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD}) public @interface Delegate; // Annotation to automatically delegate part of the functionality of an owner class to the annotated delegation target.\n@Documented @Retention(RUNTIME) @Target({PARAMETER,METHOD}) public @interface DelegatesTo; // This annotation can be used by API or DSL writers to document parameters which accept a closure.\n@Retention(RUNTIME) @Target(PARAMETER) public static @interface DelegatesTo.Target; // Parameter annotation used to specify the delegate for a @DelegatesTo annotated parameter of the same method.\npublic class DelegatingMetaClass extends Object implements MetaClass, MutableMetaClass, GroovyObject;\npublic class DeprecationException extends RuntimeException; // Use this exception to mark a method implementation as being deprecated.\npublic class EmptyRange<T extends Comparable> extends AbstractList<T> implements Range<T>; // Constructing Ranges like 0..<0\npublic class ExpandoMetaClass extends MetaClassImpl implements GroovyObject; // ExpandoMetaClass is a MetaClass that behaves like an Expando, allowing the addition or replacement of methods, properties and constructors on the fly.\n", "des": "Core Groovy language classes for implementing data structures, closures, metadata and so forth."}
{"index": 2921, "repo": "groovy-4.0.13", "code": "package security;\n\npublic final class GroovyCodeSourcePermission extends BasicPermission; // Permission required to explicitly specify a codebase for a groovy script whose codebase cannot be determined.\n", "des": "Security-related classes"}
{"index": 2922, "repo": "groovy-4.0.13", "code": "package time;\n\npublic abstract class BaseDuration extends Object implements Comparable<BaseDuration>; // Base class for date and time durations.\npublic abstract static class BaseDuration.From extends Object;\npublic class DatumDependentDuration extends BaseDuration; // DatumDependentDuration represents durations whose length in milliseconds cannot be determined without knowing the datum point.\npublic class Duration extends BaseDuration; // Duration represents time periods which have values independent of the context.\npublic class TimeCategory extends Object; // Apply a number of methods to allow convenient Date/Time manipulation,such as:\npublic class TimeDatumDependentDuration extends DatumDependentDuration; // TimeDatumDuration represents a time period which results from an arithmetic operation between a TimeDuration object and a DatumDuration object\npublic class TimeDuration extends Duration; // TimeDuration represents time periods expressed in units of hours, minutes, seconds and milliseconds.\n", "des": "Classes for easily manipulating Dates and times."}
{"index": 2923, "repo": "groovy-4.0.13", "code": "package util;\n\npublic abstract class AbstractFactory extends Object implements Factory;\npublic interface BufferedIterator<T> extends Iterator<T>; // An iterator that allows examining the next element without consuming it.\npublic abstract class BuilderSupport extends GroovyObjectSupport; // Base class for creating arbitrary nested trees of objects or events.\npublic class CharsetToolkit extends Object; // Utility class to guess the encoding of a given text file.\npublic class ClosureComparator<T> extends Object implements Comparator<T>, Serializable; // A Comparator which uses a closure to compare 2 values being equal\npublic class ConfigObject extends GroovyObjectSupport implements Writable, Map, Cloneable; // A ConfigObject at a simple level is a Map that creates configuration entries (other ConfigObjects) when referencing them.\npublic abstract class DelegatingScript extends Script; // Script that performs method invocations and property access like Closure does.\npublic class Eval extends Object; // Allow easy integration from Groovy into Java through convenience methods.\npublic class Expando extends GroovyObjectSupport; // Represents a dynamically expandable bean.\npublic interface Factory;\npublic abstract class FactoryBuilderSupport extends Binding; // Mix of BuilderSupport and SwingBuilder's factory support.\npublic class GroovyCollections extends Object; // A Collections utility class\npublic class GroovyScriptEngine extends Object implements ResourceConnector; // Specific script engine able to reload modified scripts as well as dealing properly with dependent scripts.\npublic interface IFileNameFinder;\npublic class IndentPrinter extends Object; // A helper class for printing indented text.\npublic class MapEntry extends Object implements Map.Entry; // A Map.Entry implementation.\npublic class Node extends Object implements Serializable, Cloneable; // Represents an arbitrary tree node which can be used for structured metadata or any arbitrary XML-like tree.\npublic class NodeBuilder extends BuilderSupport; // A helper class for creating nested trees of Node objects for handling arbitrary data\npublic class NodeList extends ArrayList; // A List implementation which is returned by queries on a Node which provides some XPath like helper methods for GPath.\npublic class NodePrinter extends Object; // A helper class for creating nested trees of data\npublic class ObjectGraphBuilder extends FactoryBuilderSupport; // A builder for creating object graphs. Each node defines the class to be created and the property on its parent (if any) at the same time.\n", "des": "Various Groovy utilities for working with nodes, builders, logging, and other things."}
{"index": 2924, "repo": "groovy-4.0.13", "code": "package concurrentlinkedhashmap;\n\n@ThreadSafe public final class ConcurrentLinkedHashMap<K,V> extends AbstractMap<K,V> implements ConcurrentMap<K,V>, Serializable; // A hash table supporting full concurrency of retrievals, adjustable expected concurrency for updates, and a maximum capacity to bound the map by.\npublic static final class ConcurrentLinkedHashMap.Builder<K,V> extends Object; // A builder that creates ConcurrentLinkedHashMap instances.\n@ThreadSafe public interface EntryWeigher<K,V>; // A class that can determine the weight of an entry.\n@ThreadSafe public interface EvictionListener<K,V>; // A listener registered for notification when an entry is evicted.\n@ThreadSafe public interface Weigher<V>; // A class that can determine the weight of a value.\npublic final class Weighers extends Object; // A common set of Weigher and EntryWeigher implementations.\n", "des": "This package contains an implementation of a bounded ConcurrentMap data structure."}
{"index": 2925, "repo": "groovy-4.0.13", "code": "package groovy;\n\npackage groovy.ast; // Groovy AST nodes for the syntax of the language\npackage groovy.classgen; // Generates Java classes for Groovy classes using ASM.\npackage groovy.control; // Compiler control classes.\npackage groovy.reflection; // Internal classes for assisting with reflection.\npackage groovy.runtime; // Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator.\npackage groovy.syntax; // Lexer, parser and trees.\npackage groovy.tools; // Compiler entry points and miscellaneous development tools.\npackage groovy.vmplugin; // JVM version specific classes.\npublic class GroovyBugError extends AssertionError; // This class represents an error that is thrown when a bug is recognized inside the runtime.\npublic class GroovyException extends Exception implements GroovyExceptionInterface;\npublic interface GroovyExceptionInterface; // An interface for use by all Groovy compiler exceptions.\n", "des": "Groovy Language for the JVM"}
{"index": 2926, "repo": "groovy-4.0.13", "code": "package ast;\n\npackage ast.expr; // AST nodes for Groovy expressions\npackage ast.stmt; // AST nodes for Groovy statements\npublic class AnnotatedNode extends ASTNode implements GroovydocHolder<AnnotatedNode>; // Base class for any AST node which is capable of being annotated\npublic class AnnotationNode extends ASTNode; // Represents an annotation which can be attached to interfaces, classes, methods, fields, parameters, and other places.\npublic class ASTNode extends Object implements NodeMetaDataHandler; // Base class for any AST node.\npublic class AstToTextHelper extends Object; // Helper class for converting AST into text.\npublic abstract class ClassCodeExpressionTransformer extends ClassCodeVisitorSupport implements ExpressionTransformer; // Transforms expressions in a whole class.\npublic abstract class ClassCodeVisitorSupport extends CodeVisitorSupport implements ErrorCollecting, GroovyClassVisitor;\npublic class ClassHelper extends Object; // Helper for ClassNode and classes handling them.\npublic class ClassNode extends AnnotatedNode; // Represents a class in the AST.\npublic abstract class CodeVisitorSupport extends Object implements GroovyCodeVisitor; // Abstract base class for any GroovyCodeVisitor which by default just walks the code and expression tree\npublic class CompileUnit extends Object implements NodeMetaDataHandler; // Represents the entire contents of a compilation step which consists of one or more ModuleNode instances.\npublic class ConstructorNode extends MethodNode; // Represents a constructor declaration\npublic class DynamicVariable extends Object implements Variable;\npublic class EnumConstantClassNode extends InnerClassNode; // Represents the anonymous inner class for an enum constant.\npublic class FieldNode extends AnnotatedNode implements Variable; // Represents a field (member variable)\npublic class GenericsType extends ASTNode; // This class is used to describe generic type signatures for ClassNodes.\npublic static class GenericsType.GenericsTypeName extends Object; // Represents GenericsType name.\npublic interface GroovyClassVisitor; // A special visitor for working with the structure of a class.\npublic interface GroovyCodeVisitor; // An implementation of the visitor pattern for working with ASTNodes.\npublic class GroovyCodeVisitorAdapter extends Object implements GroovyCodeVisitor;\npublic class ImportNode extends AnnotatedNode; // Represents an import statement.\npublic class InnerClassNode extends ClassNode; // Represents an inner class declaration\n", "des": "Groovy AST nodes for the syntax of the language"}
{"index": 2927, "repo": "groovy-4.0.13", "code": "package expr;\n\npublic class AnnotationConstantExpression extends ConstantExpression; // Represents an annotation \"constant\" that may appear in annotation attributes (mainly used as a marker).\npublic class ArgumentListExpression extends TupleExpression; // Represents one or more arguments being passed into a method\npublic class ArrayExpression extends Expression; // Represents an array object construction.\npublic class AttributeExpression extends PropertyExpression; // Represents an attribute access (accessing the field of a class) such as the expression \"foo.@bar\".\npublic class BinaryExpression extends Expression; // Represents two expressions and an operation\npublic class BitwiseNegationExpression extends Expression;\npublic class BooleanExpression extends Expression; // Represents a boolean expression\npublic class CastExpression extends Expression; // Represents a typecast expression.\npublic class ClassExpression extends Expression; // Represents access to a Java/Groovy class in an expression, such as when invoking a static method or accessing a static type\npublic class ClosureExpression extends Expression; // Represents a closure expression such as\npublic class ClosureListExpression extends ListExpression; // This class represents a list of expressions used to create closures.\npublic class ConstantExpression extends Expression; // Represents a constant expression such as null, true, false.\npublic class ConstructorCallExpression extends Expression implements MethodCall; // A constructor call.\npublic class DeclarationExpression extends BinaryExpression; // Represents one or more local variables.\npublic class ElvisOperatorExpression extends TernaryExpression; // Represents a short ternary expression x ?: y, which is equal to\npublic class EmptyExpression extends Expression; // Placeholder for an empty expression.\npublic abstract class Expression extends AnnotatedNode; // Represents a base class for expressions which evaluate as an object\npublic interface ExpressionTransformer; // Provides a way to transform expressions\npublic class FieldExpression extends Expression; // Represents a field access such as the expression \"this.foo\".\npublic class GStringExpression extends Expression; // Represents a String expression which contains embedded values inside it such as \"hello there ${user} how are you\" which is expanded lazily\npublic class LambdaExpression extends ClosureExpression; // Represents a lambda expression such as one of these:\npublic class ListExpression extends Expression; // Represents a list expression [1, 2, 3] which creates a mutable List\n", "des": "AST nodes for Groovy expressions"}
{"index": 2928, "repo": "groovy-4.0.13", "code": "package stmt;\n\npublic class AssertStatement extends Statement; // Represents an assert statement.\npublic class BlockStatement extends Statement; // A list of statements and a scope.\npublic class BreakStatement extends Statement; // Represents a break statement in a switch or loop statement\npublic class CaseStatement extends Statement; // Represents a case statement in a switch statement\npublic class CatchStatement extends Statement; // Represents a catch (Exception var) { } statement\npublic class ContinueStatement extends Statement; // Represents a continue statement in a loop statement\npublic class DoWhileStatement extends Statement implements LoopingStatement; // Represents a do { ...\npublic class EmptyStatement extends Statement;\npublic class ExpressionStatement extends Statement; // A simple statement such as a method call where the return value is ignored\npublic class ForStatement extends Statement implements LoopingStatement; // Represents a standard for loop in Groovy\npublic class IfStatement extends Statement; // Represents an if (condition) { ...\npublic interface LoopingStatement; // This is an AST Node that provides some sort of looping mechanism.\npublic class ReturnStatement extends Statement; // A return statement\npublic class Statement extends ASTNode; // Base class for any statement.\npublic class SwitchStatement extends Statement; // Represents a switch (object) { case value: ...\npublic class SynchronizedStatement extends Statement; // Represents a synchronized statement\npublic class ThrowStatement extends Statement; // Represents a throw statement\npublic class TryCatchStatement extends Statement; // Represents a try { ...\npublic class WhileStatement extends Statement implements LoopingStatement; // Represents a while (condition) { ...\n", "des": "AST nodes for Groovy statements"}
{"index": 2929, "repo": "groovy-4.0.13", "code": "package classgen;\n\npackage classgen.asm; // Helper classes for ASMClassGenerator.\npublic class AnnotationVisitor extends Object; // An Annotation visitor responsible for: reading annotation metadata (@Retention, @Target, attribute types) verify that an AnnotationNode conforms to annotation meta enhancing an AnnotationNode AST to reflect real annotation meta\npublic class AsmClassGenerator extends ClassGenerator; // Generates Java class versions of Groovy classes using ASM.\npublic abstract class BytecodeExpression extends Expression; // Represents some custom bytecode generation by the compiler.\npublic abstract class BytecodeInstruction extends Object; // Helper class used by the class generator.\npublic class BytecodeSequence extends Statement; // This class represents a sequence of BytecodeInstructions or ASTNodes.\npublic class ClassCompletionVerifier extends ClassCodeVisitorSupport; // Checks that a class satisfies various conditions including: Incorrect class or method access modifiers No abstract methods appear in a non-abstract class Existence and correct visibility for inherited members Invalid attempts to override final members\npublic abstract class ClassGenerator extends ClassCodeVisitorSupport; // Abstract base class for generator of Java class versions of Groovy AST classes\npublic class ClassGeneratorException extends RuntimeException; // An exception thrown by the class generator\npublic class DummyClassGenerator extends ClassGenerator; // To generate a class that has all the fields and methods, except that fields are not initialized and methods are empty.\npublic class EnumCompletionVisitor extends ClassCodeVisitorSupport; // Enums have a parent constructor with two arguments from java.lang.Enum.\npublic class EnumVisitor extends ClassCodeVisitorSupport;\npublic class ExtendedVerifier extends ClassCodeVisitorSupport; // A specialized Groovy AST visitor meant to perform additional verifications upon the current AST.\npublic class FinalVariableAnalyzer extends ClassCodeVisitorSupport;\npublic static interface FinalVariableAnalyzer.VariableNotFinalCallback;\npublic class GeneratorContext extends Object; // A context shared across generations of a class and its inner classes.\npublic class InnerClassCompletionVisitor extends InnerClassVisitorHelper;\npublic class InnerClassVisitor extends InnerClassVisitorHelper;\npublic abstract class InnerClassVisitorHelper extends ClassCodeVisitorSupport;\npublic class ReturnAdder extends Object; // Utility class to add return statements.\n@FunctionalInterface public static interface ReturnAdder.ReturnStatementListener;\npublic class VariableScopeVisitor extends ClassCodeVisitorSupport; // Initializes the variable scopes for an AST.\n", "des": "Generates Java classes for Groovy classes using ASM."}
{"index": 2930, "repo": "groovy-4.0.13", "code": "package asm;\n\npublic class AssertionWriter extends Object;\npublic class BinaryBooleanExpressionHelper extends BinaryIntExpressionHelper; // Binary write operations specialised for Booleans\npublic class BinaryDoubleExpressionHelper extends BinaryLongExpressionHelper;\npublic class BinaryExpressionHelper extends Object;\npublic class BinaryExpressionMultiTypeDispatcher extends BinaryExpressionHelper; // This class is for internal use only! This class will dispatch to the right type adapters according to the kind of binary expression that is provided.\npublic abstract class BinaryExpressionWriter extends Object; // Base class for writing primitive typed operations\npublic class BinaryFloatExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryIntExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryLongExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryObjectExpressionHelper extends BinaryExpressionWriter;\npublic class BytecodeDumper extends Object implements BytecodeProcessor; // A utility class which can be used in test cases to dump generated bytecode.\npublic class BytecodeHelper extends Object; // A helper class for bytecode generation with AsmClassGenerator.\npublic class BytecodeVariable extends Object; // Represents compile time variable metadata while compiling a method.\npublic class CallSiteWriter extends Object; // This class represents non-public API used by AsmClassGenerator.\npublic class ClosureWriter extends Object;\nprotected static class ClosureWriter.CorrectAccessedVariableVisitor extends CodeVisitorSupport;\nprotected static interface ClosureWriter.UseExistingReference;\npublic class CompileStack extends Object; // Manages different aspects of the code of a code block like handling labels, defining variables, and scopes.\npublic static class CompileStack.BlockRecorder extends Object;\nprotected static class CompileStack.LabelRange extends Object;\npublic class DelegatingController extends WriterController; // This class will delegate all calls to a WriterController given in the constructor.\npublic class ExpressionAsVariableSlot extends BytecodeExpression; // Helper class that takes an Expression and if visited will load it normally, storing the result in a helper variable, which then can be requested after the visit is completed.\npublic class InvocationWriter extends Object;\npublic class LambdaWriter extends ClosureWriter;\npublic class MethodCaller extends Object; // A helper class to invoke methods more easily in ASM\npublic class MethodCallerMultiAdapter extends Object;\npublic class MethodPointerExpressionWriter extends Object; // Generates bytecode for method pointer expressions.\n", "des": "Helper classes for ASMClassGenerator."}
{"index": 2931, "repo": "groovy-4.0.13", "code": "package control;\n\npackage control.io; // Internal classes for Groovier Input/Output.\npackage control.messages; // Error message classes.\npublic class AnnotationConstantsVisitor extends ClassCodeVisitorSupport; // Resolves constants in annotation definitions.\npublic class ASTTransformationsContext extends Object; // Stores state information about global AST transformations applied to a compilation unit.\npublic interface BytecodeProcessor;\npublic class ClassNodeResolver extends Object; // This class is used as a pluggable way to resolve class names.\npublic static class ClassNodeResolver.LookupResult extends Object; // Helper class to return either a SourceUnit or ClassNode.\npublic class CompilationFailedException extends GroovyRuntimeException; // Thrown when compilation fails from source errors.\npublic class CompilationUnit extends ProcessingUnit; // The CompilationUnit collects all compilation data as it is generated by the compiler system.\n@FunctionalInterface public static interface CompilationUnit.ClassgenCallback; // A callback interface you can use during the classgen phase of compilation as the compiler traverses the ClassNode tree.\n@Deprecated public abstract static class CompilationUnit.GroovyClassOperation extends Object implements CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IGroovyClassOperation;\n@FunctionalInterface public static interface CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ISourceUnitOperation;\n@Deprecated public abstract static class CompilationUnit.PrimaryClassNodeOperation extends Object implements CompilationUnit.IPrimaryClassNodeOperation;\n@FunctionalInterface public static interface CompilationUnit.ProgressCallback; // A callback interface you can use to get a callback after every unit of the compile process.\n@Deprecated public abstract static class CompilationUnit.SourceUnitOperation extends Object implements CompilationUnit.ISourceUnitOperation;\npublic enum CompilePhase extends Enum<CompilePhase>; // The phases of the GroovyCompiler.\npublic class CompilerConfiguration extends Object; // Compilation control flags and coordination stuff.\npublic class ConfigurationException extends RuntimeException implements GroovyExceptionInterface; // Thrown when configuration data is invalid.\npublic class ErrorCollector extends Object implements Serializable; // A base class for collecting messages and errors during processing.\npublic class GenericsVisitor extends ClassCodeVisitorSupport; // Verify correct usage of generics.\npublic interface HasCleanup; // An interface for things that need to be cleaned up after operations complete.\npublic abstract class InstanceOfVerifier extends ClassCodeVisitorSupport;\n", "des": "Compiler control classes."}
{"index": 2932, "repo": "groovy-4.0.13", "code": "package io;\n\npublic abstract class AbstractReaderSource extends Object implements ReaderSource; // For ReaderSources that can choose a parent class, a base that provides common functionality.\npublic class FileReaderSource extends AbstractReaderSource; // A ReaderSource for source files.\npublic class InputStreamReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class NullWriter extends Writer; // A Writer that eats its input.\npublic interface ReaderSource extends HasCleanup; // An interface for things that can supply (and potentially resupply) a Reader on a source stream.\npublic class StringReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class URLReaderSource extends AbstractReaderSource; // A ReaderSource for source files hosted at a URL.\n", "des": "Internal classes for Groovier Input/Output."}
{"index": 2933, "repo": "groovy-4.0.13", "code": "package messages;\n\npublic class ExceptionMessage extends Message; // A class for error messages produced by the parser system.\npublic class LocatedMessage extends SimpleMessage; // A base class for compilation messages.\npublic abstract class Message extends Object; // A base class for compilation messages.\npublic class SimpleMessage extends Message; // A base class for compilation messages.\npublic class SyntaxErrorMessage extends Message; // A class for error messages produced by the parser system.\npublic class WarningMessage extends LocatedMessage; // A class for warning messages.\n", "des": "Error message classes."}
{"index": 2934, "repo": "groovy-4.0.13", "code": "package reflection;\n\npublic class CacheAccessControlException extends GroovyRuntimeException;\npublic class CachedClass extends Object;\npublic static class CachedClass.CachedMethodComparatorByName extends Object implements Comparator<CachedMethod>;\npublic static class CachedClass.CachedMethodComparatorWithString extends Object implements Comparator;\npublic class CachedConstructor extends ParameterTypes;\npublic class CachedField extends MetaProperty;\npublic class CachedMethod extends MetaMethod implements Comparable;\npublic class ClassInfo extends Object implements Finalizable; // Handle for all information we want to keep about the class\npublic static interface ClassInfo.ClassInfoAction;\npublic class ClassLoaderForClassArtifacts extends ClassLoader;\npublic abstract class GeneratedMetaMethod extends MetaMethod;\npublic static class GeneratedMetaMethod.DgmMethodRecord extends Object implements Serializable;\npublic static class GeneratedMetaMethod.Proxy extends GeneratedMetaMethod;\npublic interface GroovyClassValue<T>; // Abstraction for Java version dependent ClassValue implementations.\npublic static interface GroovyClassValue.ComputeValue<T>;\npublic class MixinInMetaClass extends Object;\npublic class ParameterTypes extends Object;\npublic class ReflectionCache extends Object;\npublic class ReflectionUtils extends Object; // This class contains utility methods to determine which class called the current class to multiple levels of depth.\npublic class SunClassLoader extends ClassLoader; // Special class loader, which when running on Sun VM allows to generate accessor classes for any method\n", "des": "Internal classes for assisting with reflection."}
{"index": 2935, "repo": "groovy-4.0.13", "code": "package runtime;\n\npackage runtime.metaclass; // Internal classes related to Groovy's metaclass implementation.\npackage runtime.typehandling; // Classes used to execute special actions based on the type.\npackage runtime.wrappers; // Groovy wrapper classes for primitive types.\npublic abstract class AbstractComparator<T> extends Object implements Comparator<T>;\npublic class ArrayTypeUtils extends Object; // Utilities for handling array types\npublic class ArrayUtil extends Object; // This is a generated class used internally during the writing of bytecode within the CallSiteWriter logic.\npublic class BytecodeInterface8 extends Object; // This class contains methods special to optimizations used directly from bytecode in Groovy 1.8\npublic final class ComposedClosure<V> extends Closure<V>; // A wrapper for Closure to support composition.\npublic abstract class ConversionHandler extends Object implements InvocationHandler, Serializable; // This class is a general adapter to map a call to a Java interface to a given delegate.\npublic class ConvertedClosure extends ConversionHandler implements Serializable; // This class is a general adapter to adapt a closure to any Java interface.\npublic class ConvertedMap extends ConversionHandler; // This class is a general adapter to adapt a map of closures to any Java interface.\npublic final class CurriedClosure<V> extends Closure<V>; // A wrapper for Closure to support currying.\npublic class DefaultCachedMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class DefaultGroovyMethods extends DefaultGroovyMethodsSupport; // This class defines new groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultGroovyMethodsSupport extends Object; // Support methods for DefaultGroovyMethods and PluginDefaultMethods.\npublic class DefaultGroovyStaticMethods extends Object; // This class defines all the new static groovy methods which appear on normal JDK classes inside the Groovy environment.\npublic class DefaultMethodKey extends MethodKey; // A default implementation of MethodKey\npublic class EncodingGroovyMethods extends Object; // This class defines all the encoding/decoding groovy methods which enhance the normal JDK classes when inside the Groovy environment.\npublic class EncodingGroovyMethodsSupport extends Object; // Keep this constant in a separate file as it is troublesome for Antlr to parse for doc purposes.\npublic class FlushingStreamWriter extends OutputStreamWriter; // Stream writer which flushes after each write operation.\npublic class FormatHelper extends Object; // Formatting methods\n", "des": "Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator."}
{"index": 2936, "repo": "groovy-4.0.13", "code": "package metaclass;\n\npublic final class ClosureMetaClass extends MetaClassImpl; // A metaclass for closures generated by the Groovy compiler.\npublic class ClosureMetaMethod extends MetaMethod implements ClosureInvokingMethod; // A MetaMethod that accepts a closure in the constructor which is invoked when the MetaMethod is called.\npublic class ClosureStaticMetaMethod extends MetaMethod implements ClosureInvokingMethod; // This class represents a MetaMethod that is a closure that pretends to be a static method.\npublic class ConcurrentReaderHashMap extends AbstractMap implements Cloneable, Serializable; // A hash table that supports mostly-concurrent reading, but exclusive writing.\nprotected static class ConcurrentReaderHashMap.BarrierLock extends Object implements Serializable; // A Serializable class for barrier lock\nprotected static class ConcurrentReaderHashMap.Entry extends Object implements Map.Entry; // ConcurrentReaderHashMap collision list entry.\npublic class DefaultMetaClassInfo extends Object; // WARNING: This class is for internal use only! We use this class to store information about if a default MetaClass is used for certain primitives.\npublic static class DefaultMetaClassInfo.ConstantMetaClassVersioning extends Object;\npublic class MetaClassRegistryImpl extends Object implements MetaClassRegistry; // A registry of MetaClass instances which caches introspection and reflection information and allows methods to be dynamically added to existing classes at runtime\npublic class MetaMethodIndex extends Object;\npublic static class MetaMethodIndex.CacheEntry extends Object;\npublic static class MetaMethodIndex.Entry extends Object;\npublic static interface MetaMethodIndex.EntryIterator;\npublic static class MetaMethodIndex.Header extends Object;\npublic class MethodHelper extends Object; // Some reflection helper methods\npublic class MethodMetaProperty extends MetaProperty; // Wrapper for a method for a property get or set.\npublic static class MethodMetaProperty.GetBeanMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property getter.\npublic static class MethodMetaProperty.GetMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property get.\npublic class MethodSelectionException extends GroovyRuntimeException; // This exception is thrown if the runtime is unable to select a method.\npublic class MissingMethodExceptionNoStack extends MissingMethodException;\npublic class MissingMethodExecutionFailed extends MissingMethodExceptionNoStack; // A stack less exception used to indicate, that the execution of a missingMethod method failed with a MissingMethodException.\npublic class MissingPropertyExceptionNoStack extends MissingPropertyException;\n", "des": "Internal classes related to Groovy's metaclass implementation."}
{"index": 2937, "repo": "groovy-4.0.13", "code": "package typehandling;\n\npublic final class BigDecimalMath extends NumberMath; // BigDecimal NumberMath operations\npublic final class BigIntegerMath extends NumberMath; // BigInteger NumberMath operations\npublic class DefaultTypeTransformation extends Object; // Class providing various type conversions, coercions and boxing/unboxing operations.\npublic final class FloatingPointMath extends NumberMath; // FloatingPoint (Double and Float) NumberMath operations\npublic class GroovyCastException extends ClassCastException;\npublic final class IntegerMath extends NumberMath; // Integer NumberMath operations\npublic final class LongMath extends NumberMath; // Long NumberMath operations\npublic abstract class NumberMath extends Object; // Stateless objects used to perform math on the various Number subclasses.\npublic class NumberMathModificationInfo extends Object;\npublic class ShortTypeHandling extends Object; // Class providing various short paths for type conversions.\n", "des": "Classes used to execute special actions based on the type."}
{"index": 2938, "repo": "groovy-4.0.13", "code": "package wrappers;\n\npublic class BooleanWrapper extends PojoWrapper;\npublic class ByteWrapper extends PojoWrapper;\npublic class CharWrapper extends PojoWrapper;\npublic class DoubleWrapper extends PojoWrapper;\npublic class FloatWrapper extends PojoWrapper;\npublic class GroovyObjectWrapper extends Wrapper;\npublic class IntWrapper extends PojoWrapper;\npublic class LongWrapper extends PojoWrapper;\npublic class PojoWrapper extends Wrapper;\npublic class ShortWrapper extends PojoWrapper;\npublic abstract class Wrapper extends Object implements GroovyObject;\n", "des": "Groovy wrapper classes for primitive types."}
{"index": 2939, "repo": "groovy-4.0.13", "code": "package syntax;\n\npublic class ASTHelper extends Object; // A common base class of AST helper methods which can be shared across the classic and new parsers\npublic abstract class CSTNode extends Object; // An abstract base class for nodes in the concrete syntax tree that is the result of parsing.\npublic class Numbers extends Object; // Helper class for processing Groovy numeric literals.\npublic class ParserException extends TokenException;\npublic class ReadException extends GroovyException; // Encapsulates non-specific i/o exceptions.\npublic class Reduction extends CSTNode; // A syntax reduction, produced by the Parser.\npublic class RuntimeParserException extends GroovyRuntimeException; // A helper class to allow parser exceptions to be thrown anywhere in the code.\npublic class SyntaxException extends GroovyException; // Base exception indicating a syntax error.\npublic class Token extends CSTNode; // A CSTNode produced by the Lexer.\npublic class TokenException extends SyntaxException;\npublic class TokenMismatchException extends TokenException;\npublic class TokenUtil extends Object; // Utility methods for working with Tokens.\npublic class Types extends Object; // Typing information for the CST system.\n", "des": "Lexer, parser and trees."}
{"index": 2940, "repo": "groovy-4.0.13", "code": "package tools;\n\npackage tools.javac; // Classes related to the joint compiler.\npublic class Compiler extends Object; // A convenience front end for getting standard compilations done.\npublic class DgmConverter extends Object;\npublic class ErrorReporter extends Object; // Provides services for reporting compilation errors to the user.\npublic class FileSystemCompiler extends Object; // Command-line compiler (aka.\npublic static class FileSystemCompiler.CompilationOptions extends Object;\npublic static class FileSystemCompiler.VersionProvider extends Object implements picocli.CommandLine.IVersionProvider;\npublic class GrapeUtil extends Object;\npublic class GroovyClass extends Object;\npublic class GroovyStarter extends Object; // Helper class to initialize the Groovy runtime.\npublic class LoaderConfiguration extends Object; // Class used to configure a RootLoader from a stream or by using its methods.\npublic class RootLoader extends URLClassLoader; // This ClassLoader should be used as root of class loaders.\npublic class StringHelper extends Object;\npublic abstract class Utilities extends Object; // Various utility functions for use in the compiler.\n", "des": "Compiler entry points and miscellaneous development tools."}
{"index": 2941, "repo": "groovy-4.0.13", "code": "package javac;\n\npublic class JavaAwareCompilationUnit extends CompilationUnit; // Compilation Unit capable of compiling Java source files.\npublic class JavaAwareResolveVisitor extends ResolveVisitor;\npublic class JavacCompilerFactory extends Object implements JavaCompilerFactory;\npublic class JavacJavaCompiler extends Object implements JavaCompiler;\npublic interface JavaCompiler;\npublic interface JavaCompilerFactory;\npublic class JavaStubCompilationUnit extends CompilationUnit; // Compilation unit to only generate stubs.\npublic class JavaStubGenerator extends Object;\npublic class MemJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in memory to compile\npublic class RawJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in file to compile\n", "des": "Classes related to the joint compiler."}
{"index": 2942, "repo": "groovy-4.0.13", "code": "package vmplugin;\n\npublic interface VMPlugin; // Interface to access VM version based actions.\npublic class VMPluginFactory extends Object; // Factory class to get functionality based on the VM version.\n", "des": "JVM version specific classes."}
{"index": 2943, "repo": "spring-security-config-6.1.2", "code": "package config;\n\npackage config.authentication; // Parsing of <authentication-manager> and related elements.\npackage config.http; // Parsing of the <http> namespace element.\npackage config.ldap; // Security namespace support for LDAP authentication.\npackage config.method; // Support for parsing of the <global-method-security> and <intercept-methods> elements.\npublic abstract class BeanIds extends Object; // Contains globally used default Bean IDs for beans created by the namespace support in Spring Security 2.\n@FunctionalInterface public interface Customizer<T>; // Callback interface that accepts a single input argument and returns no result.\npublic class DebugBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic abstract class Elements extends Object; // Contains all the element names used by Spring Security 3 namespace support.\npublic final class SecurityNamespaceHandler extends Object implements org.springframework.beans.factory.xml.NamespaceHandler; // Parses elements from the \"security\" namespace (http://www.springframework.org/schema/security).\n", "des": "Support classes for the Spring Security namespace."}
{"index": 2944, "repo": "spring-security-config-6.1.2", "code": "package authentication;\n\npublic abstract class AbstractUserDetailsServiceBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class AuthenticationManagerBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Registers the central ProviderManager used by the namespace configuration, and allows the configuration of an alias, allowing users to reference it in their beans and clearly see where the name is coming from.\npublic static final class AuthenticationManagerBeanDefinitionParser.NullAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // Provider which doesn't provide any service.\npublic class AuthenticationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authentication.AuthenticationManager>, org.springframework.beans.factory.BeanFactoryAware; // Factory bean for the namespace AuthenticationManager, which allows a more meaningful error message to be reported in the NoSuchBeanDefinitionException, if the user has forgotten to declare the <authentication-manager> element.\npublic class AuthenticationProviderBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Wraps a UserDetailsService bean with a DaoAuthenticationProvider and registers the latter with the ProviderManager.\npublic class JdbcUserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\npublic class PasswordEncoderParser extends Object; // Stateful parser for the <password-encoder> element.\npublic class UserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\n", "des": "Parsing of <authentication-manager> and related elements."}
{"index": 2945, "repo": "spring-security-config-6.1.2", "code": "package http;\n\npublic final class ChannelAttributeFactory extends Object; // Used as a factory bean to create config attribute values for the requires-channel attribute.\npublic class CorsBeanDefinitionParser extends Object; // Parser for the CorsFilter.\npublic class CsrfBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the CsrfFilter.\npublic class DefaultFilterChainValidator extends Object implements org.springframework.security.web.FilterChainProxy.FilterChainValidator;\npublic class FilterChainBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class FilterChainMapBeanDefinitionDecorator extends Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator; // Sets the filter chain Map for a FilterChainProxy bean declaration.\n@Deprecated public class FilterInvocationSecurityMetadataSourceParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class FormLoginBeanDefinitionParser extends Object;\npublic class HeadersBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the HeadersFilter.\npublic class HttpFirewallBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Injects the supplied HttpFirewall bean reference into the FilterChainProxy.\npublic class HttpSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Sets up HTTP security: filter stack and protected URLs.\npublic static final class HttpSecurityBeanDefinitionParser.ChildAuthenticationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authentication.AuthenticationManager>;\npublic static final class HttpSecurityBeanDefinitionParser.FilterChainDecoratorFactory extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.web.FilterChainProxy.FilterChainDecorator>;\npublic static class HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor extends Object implements org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\npublic enum MatcherType extends Enum<MatcherType>; // Defines the RequestMatcher types supported by the namespace.\n", "des": "Parsing of the <http> namespace element."}
{"index": 2946, "repo": "spring-security-config-6.1.2", "code": "package ldap;\n\npublic abstract class AbstractLdapAuthenticationManagerFactory<T extends org.springframework.security.ldap.authentication.AbstractLdapAuthenticator> extends Object; // Creates an AuthenticationManager that can perform LDAP authentication.\npublic class ContextSourceSettingPostProcessor extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.core.Ordered; // Checks for the presence of a ContextSource instance.\npublic class EmbeddedLdapServerContextSourceFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.ldap.DefaultSpringSecurityContextSource>, org.springframework.beans.factory.DisposableBean, org.springframework.context.ApplicationContextAware; // Creates a DefaultSpringSecurityContextSource used to perform LDAP authentication and starts and in-memory LDAP server.\npublic class LdapBindAuthenticationManagerFactory extends AbstractLdapAuthenticationManagerFactory<org.springframework.security.ldap.authentication.BindAuthenticator>; // Creates an AuthenticationManager that can perform LDAP authentication using bind authentication.\npublic class LdapPasswordComparisonAuthenticationManagerFactory extends AbstractLdapAuthenticationManagerFactory<org.springframework.security.ldap.authentication.PasswordComparisonAuthenticator>; // Creates an AuthenticationManager that can perform LDAP authentication using password comparison.\npublic class LdapProviderBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Ldap authentication provider namespace configuration.\npublic class LdapServerBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class LdapUserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\n", "des": "Security namespace support for LDAP authentication."}
{"index": 2947, "repo": "spring-security-config-6.1.2", "code": "package method;\n\n@Deprecated public class GlobalMethodSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class InterceptMethodsBeanDefinitionDecorator extends Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator;\npublic class MethodSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Processes the top-level \"method-security\" element.\npublic static final class MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>, org.springframework.context.ApplicationContextAware;\npublic static final class MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.access.expression.method.MethodSecurityExpressionHandler>, org.springframework.context.ApplicationContextAware;\npublic static final class MethodSecurityBeanDefinitionParser.PostAuthorizeAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor>;\npublic static final class MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>;\npublic static final class MethodSecurityBeanDefinitionParser.SecuredAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>;\n@Deprecated public class MethodSecurityMetadataSourceBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\n", "des": "Support for parsing of the <global-method-security> and <intercept-methods> elements."}
{"index": 2948, "repo": "spring-integration-xml-6.1.2", "code": "package xml;\n\npackage xml.config; // Contains parser classes for the XML namespace support.\npackage xml.result; // Provides ResultFactory that will return Result, possibly taking into account payload instance.\npackage xml.router; // Provides XML message routers.\npackage xml.selector; // Provides XML-centric MessageSelector implementations.\npackage xml.source; // Provides various SourceFactory implementations.\npackage xml.splitter; // Provides implementations of AbstractMessageSplitter.\npackage xml.transformer; // Provides Transformer and Enricher implementations.\npackage xml.xpath; // Provides XPath supporting classes.\npublic class AggregatedXmlMessageValidationException extends RuntimeException; // The validation exception which aggregate all the XML validation errors.\npublic class DefaultXmlPayloadConverter extends Object implements XmlPayloadConverter; // Default implementation of XmlPayloadConverter.\npublic interface XmlPayloadConverter; // Converter for creating XML Document, Node or Source instances from other types (e.g.\n", "des": "Root package of the XML Module."}
{"index": 2949, "repo": "spring-integration-xml-6.1.2", "code": "package config;\n\npublic class IntegrationXmlNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\npublic class MarshallingTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\npublic class UnmarshallingTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\npublic class XmlPayloadValidatingFilterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\npublic class XPathExpressionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <xpath-expression> element.\npublic class XPathFilterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <xpath-filter> element.\npublic class XPathHeaderEnricherParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Parser for <xpath-header-enricher> elements.\npublic class XPathMessageSplitterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\npublic class XPathRouterParser extends org.springframework.integration.config.xml.AbstractRouterParser; // Parser for the <xpath-router/> element.\npublic class XPathTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Parser for the 'xpath-transformer' element.\npublic class XsltPayloadTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser;\n", "des": "Contains parser classes for the XML namespace support."}
{"index": 2950, "repo": "spring-integration-xml-6.1.2", "code": "package result;\n\npublic class DomResultFactory extends Object implements ResultFactory;\npublic interface ResultFactory; // Factory to create a Result possibly taking into account the provided message payload instance.\npublic class StringResultFactory extends Object implements ResultFactory;\n", "des": "Provides ResultFactory that will return Result, possibly taking into account payload instance."}
{"index": 2951, "repo": "spring-integration-xml-6.1.2", "code": "package router;\n\npublic class XPathRouter extends org.springframework.integration.router.AbstractMappingMessageRouter; // Message Router that uses XPathExpression evaluation to determine channel names.\n", "des": "Provides XML message routers."}
{"index": 2952, "repo": "spring-integration-xml-6.1.2", "code": "package selector;\n\npublic abstract class AbstractXPathMessageSelector extends Object implements org.springframework.integration.core.MessageSelector; // Base class for XPath MessageSelector implementations.\npublic class BooleanTestXPathMessageSelector extends AbstractXPathMessageSelector; // Boolean XPath testing MessageSelector.\npublic class RegexTestXPathMessageSelector extends AbstractXPathMessageSelector; // XPath MessageSelector that tests if a provided String value matches a given Regular Expression.\npublic class StringValueTestXPathMessageSelector extends AbstractXPathMessageSelector; // XPath MessageSelector that tests if a provided value supports payloads of type Document or String.\npublic class XmlValidatingMessageSelector extends Object implements org.springframework.integration.core.MessageSelector; // The XML validation-specific MessageSelector.\npublic static enum XmlValidatingMessageSelector.SchemaType extends Enum<XmlValidatingMessageSelector.SchemaType>;\n", "des": "Provides XML-centric MessageSelector implementations."}
{"index": 2953, "repo": "spring-integration-xml-6.1.2", "code": "package source;\n\npublic class DomSourceFactory extends Object implements SourceFactory; // SourceFactory implementation which supports creation of a DOMSource from a Document, File or String payload.\npublic interface SourceFactory; // Factory to create a Source possibly taking into account the provided message payload instance.\npublic class StringSourceFactory extends Object implements SourceFactory; // SourceFactory implementation which supports creation of a StringSource from a Document, File or String payload\n", "des": "Provides various SourceFactory implementations."}
{"index": 2954, "repo": "spring-integration-xml-6.1.2", "code": "package splitter;\n\npublic class XPathMessageSplitter extends org.springframework.integration.splitter.AbstractMessageSplitter; // Message Splitter that uses an XPathExpression to split a Document, File or String payload into a NodeList.\n", "des": "Provides implementations of AbstractMessageSplitter."}
{"index": 2955, "repo": "spring-integration-xml-6.1.2", "code": "package transformer;\n\npackage transformer.support; // Contains support classes for Transformers.\npublic abstract class AbstractXmlTransformer extends org.springframework.integration.transformer.AbstractTransformer; // Super class for XML transformers.\npublic class MarshallingTransformer extends AbstractXmlTransformer; // An implementation of AbstractTransformer that delegates to an OXM Marshaller.\npublic class ResultToDocumentTransformer extends Object implements ResultTransformer; // Creates a Document from a Result payload.\npublic class ResultToStringTransformer extends Object implements ResultTransformer; // Converts the passed Result to an instance of String.\npublic interface ResultTransformer; // Implementations of this class allow for the transformation of Result objects to other formats.\npublic class SourceCreatingTransformer extends org.springframework.integration.transformer.AbstractPayloadTransformer<Object,Source>; // Transforms the payload to a Source using a SourceFactory.\npublic class UnmarshallingTransformer extends org.springframework.integration.transformer.AbstractPayloadTransformer<Object,Object>; // An implementation of Transformer that delegates to an OXM Unmarshaller.\npublic class XPathHeaderEnricher extends org.springframework.integration.transformer.HeaderEnricher; // Transformer implementation that evaluates XPath expressions against the message payload and inserts the result of the evaluation into a message header.\npublic class XPathTransformer extends org.springframework.integration.transformer.AbstractTransformer; // Transformer implementation that evaluates an XPath expression against the inbound Message payload and returns a Message whose payload is the result of that evaluation.\npublic class XsltPayloadTransformer extends AbstractXmlTransformer implements org.springframework.beans.factory.BeanClassLoaderAware; // Thread safe XSLT transformer implementation which returns a transformed Source, Document, or String.\n", "des": "Provides Transformer and Enricher implementations."}
{"index": 2956, "repo": "spring-integration-xml-6.1.2", "code": "package support;\n\npublic class XPathExpressionEvaluatingHeaderValueMessageProcessor extends Object implements org.springframework.integration.transformer.support.HeaderValueMessageProcessor<Object>, org.springframework.beans.factory.BeanFactoryAware; // The xPath-specific HeaderValueMessageProcessor\n", "des": "Contains support classes for Transformers."}
{"index": 2957, "repo": "spring-integration-xml-6.1.2", "code": "package xpath;\n\npublic enum XPathEvaluationType extends Enum<XPathEvaluationType>; // Enumeration of different types of XPath evaluation used to indicate the type of evaluation that should be carried out using a provided XPath expression.\npublic final class XPathUtils extends Object; // Utility class for 'xpath' support.\n", "des": "Provides XPath supporting classes."}
{"index": 2958, "repo": "spring-integration-redis-6.1.2", "code": "package channel;\n\npublic class SubscribableRedisChannel extends org.springframework.integration.channel.AbstractMessageChannel implements org.springframework.integration.channel.BroadcastCapableChannel, org.springframework.integration.support.management.ManageableSmartLifecycle; // An AbstractMessageChannel implementation with BroadcastCapableChannel aspect to provide a pub-sub semantics to consume messages fgrom Redis topic.\n", "des": "Provides classes related to Redis-backed channels."}
{"index": 2959, "repo": "spring-integration-redis-6.1.2", "code": "package config;\n\npublic class RedisChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for the 'channel' and 'publish-subscribe-channel' elements of the Spring Integration Redis namespace.\npublic class RedisInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser;\npublic class RedisNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's 'redis' namespace.\npublic class RedisOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> component.\npublic class RedisOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <int-redis:outbound-gateway/> component.\npublic class RedisQueueInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Parser for the <queue-inbound-channel-adapter> element of the 'redis' namespace.\npublic class RedisQueueInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser; // Parser for the <queue-inbound-gateway> element of the 'redis' namespace.\npublic class RedisQueueOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <int-redis:queue-outbound-channel-adapter> element.\npublic class RedisQueueOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the <int-redis:queue-outbound-channel-adapter> element.\npublic class RedisStoreInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for Redis store inbound adapters\npublic class RedisStoreOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <redis:store-outbound-channel-adapter> element.\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2960, "repo": "spring-integration-redis-6.1.2", "code": "package event;\n\npublic class RedisExceptionEvent extends RedisIntegrationEvent;\npublic abstract class RedisIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "Events generated by the redis module"}
{"index": 2961, "repo": "spring-integration-redis-6.1.2", "code": "package inbound;\n\npublic class ReactiveRedisStreamMessageProducer extends org.springframework.integration.endpoint.MessageProducerSupport; // A MessageProducerSupport for reading messages from a Redis Stream and publishing them into the provided output channel.\npublic class RedisInboundChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport;\n@ManagedResource @IntegrationManagedResource public class RedisQueueInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanClassLoaderAware;\n@ManagedResource @IntegrationManagedResource public class RedisQueueMessageDrivenEndpoint extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanClassLoaderAware;\npublic class RedisStoreMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<org.springframework.data.redis.support.collections.RedisStore>; // Inbound channel adapter which returns a Message representing a view into a Redis store.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 2962, "repo": "spring-integration-redis-6.1.2", "code": "package metadata;\n\npublic class RedisMetadataStore extends Object implements org.springframework.integration.metadata.ConcurrentMetadataStore; // Redis implementation of ConcurrentMetadataStore.\n", "des": "Provides support for Redis-based MetadataStores."}
{"index": 2963, "repo": "spring-integration-redis-6.1.2", "code": "package outbound;\n\n@FunctionalInterface public interface ArgumentsStrategy;\npublic class ExpressionArgumentsStrategy extends Object implements ArgumentsStrategy, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\npublic class ReactiveRedisStreamMessageHandler extends org.springframework.integration.handler.AbstractReactiveMessageHandler; // Implementation of ReactiveMessageHandler which writes Message payload or Message itself (see ReactiveRedisStreamMessageHandler.extractPayload) into a Redis stream using Reactive Stream operations.\npublic class RedisOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // The Gateway component implementation to perform Redis commands with provided arguments and to return command result.\npublic class RedisPublishingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler;\npublic class RedisQueueOutboundChannelAdapter extends org.springframework.integration.handler.AbstractMessageHandler;\npublic class RedisQueueOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler;\npublic class RedisStoreWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // Implementation of MessageHandler which writes Message data into a Redis store identified by a key String.\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 2964, "repo": "spring-integration-redis-6.1.2", "code": "package store;\n\npublic class RedisChannelMessageStore extends Object implements org.springframework.integration.store.ChannelMessageStore, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanClassLoaderAware; // Specialized Redis ChannelMessageStore that uses a list to back a QueueChannel.\npublic class RedisChannelPriorityMessageStore extends RedisChannelMessageStore implements org.springframework.integration.store.PriorityCapableChannelMessageStore; // Specialized Redis PriorityCapableChannelMessageStore that uses lists to back a QueueChannel.\npublic class RedisMessageStore extends org.springframework.integration.store.AbstractKeyValueMessageStore implements org.springframework.beans.factory.BeanClassLoaderAware; // Redis implementation of the key/value style MessageStore and MessageGroupStore\n", "des": "Provides classes related to the Redis message store."}
{"index": 2965, "repo": "spring-integration-redis-6.1.2", "code": "package support;\n\npublic final class RedisHeaders extends Object; // Pre-defined names and prefixes to be used for for dealing with headers required by Redis components\n", "des": "Provides supporting classes for this module."}
{"index": 2966, "repo": "spring-integration-redis-6.1.2", "code": "package util;\n\npublic final class RedisLockRegistry extends Object implements org.springframework.integration.support.locks.ExpirableLockRegistry, org.springframework.beans.factory.DisposableBean; // Implementation of ExpirableLockRegistry providing a distributed lock using Redis.\npublic static enum RedisLockRegistry.RedisLockType extends Enum<RedisLockRegistry.RedisLockType>; // The mode in which this registry is going to work with locks.\n", "des": "Provides utility classes."}
{"index": 2967, "repo": "pulsar-broker-3.0.0", "code": "package intercept;\n\n@LimitedPrivate @Evolving public interface BrokerInterceptor extends AutoCloseable; // A plugin interface that allows you to intercept the client requests to the Pulsar brokers.\npublic class BrokerInterceptorDefinition extends Object; // Metadata information about a broker interceptor.\npublic class BrokerInterceptorDefinitions extends Object; // The collection of broker interceptor.\npublic class BrokerInterceptorMetadata extends Object; // The metadata of broker interceptor.\npublic class BrokerInterceptors extends Object implements BrokerInterceptor; // A collection of broker interceptor.\npublic class BrokerInterceptorUtils extends Object; // Util class to search and load BrokerInterceptors.\npublic class BrokerInterceptorWithClassLoader extends Object implements BrokerInterceptor; // A broker interceptor with it's classloader.\npublic class ManagedLedgerInterceptorImpl extends Object implements ManagedLedgerInterceptor;\n", "des": "Pulsar broker interceptor."}
{"index": 2968, "repo": "pulsar-broker-3.0.0", "code": "package protocol;\n\n@LimitedPrivate @Evolving public interface ProtocolHandler extends AutoCloseable; // The protocol handler interface for support additional protocols on Pulsar brokers.\npublic class ProtocolHandlerDefinition extends Object; // Metadata information about a Pulsar protocol handler.\npublic class ProtocolHandlers extends Object implements AutoCloseable; // A collection of loaded handlers.\n", "des": "Pulsar broker protocol handlers."}
{"index": 2969, "repo": "pulsar-broker-3.0.0", "code": "package storage;\n\n@Private @Unstable public interface ManagedLedgerStorage extends AutoCloseable; // Storage to access ManagedLedgers.\n", "des": "The storage layer for Apache Pulsar."}
{"index": 2970, "repo": "pulsar-broker-3.0.0", "code": "package tools;\n\npublic class BrokerTool extends Object; // broker-tool is used for operations on a specific broker.\npublic class GenerateDocsCommand extends org.apache.bookkeeper.tools.framework.CliCommand<org.apache.bookkeeper.tools.framework.CliFlags,GenerateDocsCommand.GenDocFlags>; // The command to generate documents of broker-tool.\nprotected static class GenerateDocsCommand.GenDocFlags extends org.apache.bookkeeper.tools.framework.CliFlags; // The CLI flags of gen docs command.\npublic class LoadReportCommand extends org.apache.bookkeeper.tools.framework.CliCommand<org.apache.bookkeeper.tools.framework.CliFlags,LoadReportCommand.Flags>; // The command to collect the load report of a specific broker.\npublic static class LoadReportCommand.Flags extends org.apache.bookkeeper.tools.framework.CliFlags; // The CLI flags of load report command.\n", "des": "Tools for broker related operations."}
{"index": 2971, "repo": "pulsar-broker-3.0.0", "code": "package buffer;\n\npackage buffer.impl; // The implementation of a transaction buffer.\npackage buffer.metadata; // The transaction buffer snapshot metadata.\npublic interface AbortedTxnProcessor;\n@Beta public interface TransactionBuffer; // A class represent a transaction buffer.\npublic interface TransactionBufferClientStats;\n@Beta public interface TransactionBufferProvider; // A provider that provides TransactionBuffer.\n@Beta public interface TransactionBufferReader extends AutoCloseable; // A reader to read entries of a given transaction from transaction buffer.\npublic interface TransactionCursor; // The transaction Cursor maintains the index of all transactions.\n@Beta public interface TransactionEntry extends Entry, AutoCloseable; // A class represents an entry appended to a transaction.\n@Beta public interface TransactionMeta; // The metadata for the transaction in the transaction buffer.\n", "des": "Implementation of a transaction buffer."}
{"index": 2972, "repo": "pulsar-broker-3.0.0", "code": "package impl;\n\npublic class InMemTransactionBufferProvider extends Object implements TransactionBufferProvider; // A provider that provides in-memory implementations of TransactionBuffer.\npublic class InMemTransactionBufferReader extends Object implements TransactionBufferReader; // A TransactionBufferReader implementation that reads entries from InMemTransactionBuffer.\npublic class SingleSnapshotAbortedTxnProcessorImpl extends Object implements AbortedTxnProcessor;\npublic class SnapshotSegmentAbortedTxnProcessorImpl extends Object implements AbortedTxnProcessor;\npublic static enum SnapshotSegmentAbortedTxnProcessorImpl.PersistentWorker.OperationType extends Enum<SnapshotSegmentAbortedTxnProcessorImpl.PersistentWorker.OperationType>;\npublic class TopicTransactionBuffer extends TopicTransactionBufferState implements TransactionBuffer, io.netty.util.TimerTask; // Transaction buffer based on normal persistent topic.\npublic static class TopicTransactionBuffer.TopicTransactionBufferRecover extends Object implements Runnable;\npublic class TopicTransactionBufferProvider extends Object implements TransactionBufferProvider; // A provider that provides topic implementations of TransactionBuffer.\npublic interface TopicTransactionBufferRecoverCallBack;\npublic abstract class TopicTransactionBufferState extends Object; // The implement of topic transaction buffer state.\npublic static enum TopicTransactionBufferState.State extends Enum<TopicTransactionBufferState.State>; // The state of the topicTransactionBuffer TopicTransactionBuffer.\npublic class TransactionBufferClientImpl extends Object implements org.apache.pulsar.client.api.transaction.TransactionBufferClient; // The implementation of TransactionBufferClient.\npublic final class TransactionBufferClientStatsImpl extends Object implements TransactionBufferClientStats;\npublic class TransactionBufferDisable extends Object implements TransactionBuffer; // Transaction buffer disable.\npublic class TransactionBufferHandlerImpl extends Object implements TransactionBufferHandler;\npublic static final class TransactionBufferHandlerImpl.OpRequestSend extends Object;\npublic class TransactionEntryImpl extends Object implements TransactionEntry; // A simple implementation of TransactionEntry.\n", "des": "The implementation of a transaction buffer."}
{"index": 2973, "repo": "pulsar-broker-3.0.0", "code": "package metadata;\n\npublic class AbortTxnMetadata extends Object; // Abort txn metadata.\npublic class TransactionBufferSnapshot extends Object; // Transaction buffer snapshot metadata.\n", "des": "The transaction buffer snapshot metadata."}
{"index": 2974, "repo": "pulsar-broker-3.0.0", "code": "package exception;\n\npackage exception.buffer; // Exceptions thrown when encountering errors in transaction buffer.\npackage exception.coordinator; // Exceptions thrown when encountering errors in transaction buffer.\npackage exception.pendingack; // Exceptions thrown when encountering errors in transaction buffer.\npublic abstract class TransactionException extends Exception; // The base exception class for the errors thrown from Transaction.\npublic static class TransactionException.TransactionNotSealedException extends TransactionException; // Exception is thrown when opening a reader on a transaction that is not sealed yet.\npublic static class TransactionException.TransactionSealedException extends TransactionException; // Exception thrown if a transaction is already sealed.\npublic static class TransactionException.TransactionStatusException extends TransactionException; // Exceptions are thrown when operations are applied to a transaction which is not in expected txn status.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 2975, "repo": "pulsar-broker-3.0.0", "code": "package buffer;\n\npublic abstract class TransactionBufferException extends TransactionException; // The base exception class for the errors thrown from Transaction Buffer.\npublic static class TransactionBufferException.EndOfTransactionException extends TransactionBufferException; // Exception thrown when reaching end of a transaction.\npublic static class TransactionBufferException.TransactionNotFoundException extends TransactionBufferException; // Exception is thrown when the transaction is not found in the transaction buffer.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 2976, "repo": "pulsar-broker-3.0.0", "code": "package coordinator;\n\npublic abstract class TransactionCoordinatorException extends TransactionException; // The base exception class for the errors thrown from Transaction Coordinator.\npublic static class TransactionCoordinatorException.UnsupportedTxnActionException extends TransactionCoordinatorException; // Exceptions are thrown when txnAction is unsupported.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 2977, "repo": "pulsar-broker-3.0.0", "code": "package pendingack;\n\npublic abstract class TransactionPendingAckException extends TransactionException; // The base exception class for the errors thrown from Transaction Pending ACk.\npublic static class TransactionPendingAckException.TransactionPendingAckStoreProviderException extends TransactionPendingAckException; // Transaction pending ack store provider exception.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 2978, "repo": "pulsar-broker-3.0.0", "code": "package pendingack;\n\npackage pendingack.impl; // The implementation for processing pending acks in transactions.\npublic interface PendingAckHandle; // Handle for processing pending acks for transactions.\npublic interface PendingAckHandleStats;\npublic interface PendingAckReplyCallBack; // Call back for pending ack reply.\npublic interface PendingAckStore; // To store transaction pending ack.\npublic interface TransactionPendingAckStoreProvider; // Provider of transaction pending ack store.\n", "des": "Component for processing pending acks for transactions."}
{"index": 2979, "repo": "pulsar-broker-3.0.0", "code": "package impl;\n\npublic class InMemoryPendingAckStore extends Object implements PendingAckStore; // In memory implementation of PendingAckStore.\npublic class InMemoryPendingAckStoreProvider extends Object implements TransactionPendingAckStoreProvider;\npublic class MLPendingAckReplyCallBack extends Object implements PendingAckReplyCallBack; // MLPendingAckStore reply call back.\npublic class MLPendingAckStore extends Object implements PendingAckStore; // The implement of the pending ack store by manageLedger.\npublic class MLPendingAckStoreProvider extends Object implements TransactionPendingAckStoreProvider; // Provider is for MLPendingAckStore.\npublic class PendingAckHandleDisabled extends Object implements PendingAckHandle; // The disabled implementation of PendingAckHandle.\npublic class PendingAckHandleImpl extends PendingAckHandleState implements PendingAckHandle; // The default implementation of PendingAckHandle.\npublic abstract class PendingAckHandleState extends Object; // The implement of transaction pending ack store.\npublic static enum PendingAckHandleState.State extends Enum<PendingAckHandleState.State>; // The state of the pending ack handle PendingAckHandleState.\npublic class PendingAckHandleStatsImpl extends Object implements PendingAckHandleStats;\n", "des": "The implementation for processing pending acks in transactions."}
{"index": 2980, "repo": "pulsar-broker-3.0.0", "code": "package recover;\n\npublic class TransactionRecoverTrackerImpl extends Object implements TransactionRecoverTracker; // The transaction recover tracker implementation TransactionRecoverTracker.\n", "des": "Implementation of a transaction recover tracker."}
{"index": 2981, "repo": "pulsar-broker-3.0.0", "code": "package timeout;\n\npublic class TransactionTimeoutTrackerFactoryImpl extends Object implements TransactionTimeoutTrackerFactory; // An timeout tracker factory implementation of TransactionTimeoutTrackerFactory.\npublic class TransactionTimeoutTrackerImpl extends Object implements TransactionTimeoutTracker, io.netty.util.TimerTask; // An timer-task implementation of TransactionTimeoutTracker.\n", "des": "Implementation of a transaction buffer."}
{"index": 2982, "repo": "pulsar-broker-3.0.0", "code": "package util;\n\npublic class LogIndexLagBackoff extends Object;\n", "des": "Implementation of a transaction tools."}
{"index": 2983, "repo": "pulsar-broker-3.0.0", "code": "package servlet;\n\npublic interface AdditionalServletWithPulsarService extends AdditionalServlet; // The additional servlet with pulsarService interface for support additional servlet to get pulsarService.\n", "des": "Pulsar broker servlet plugin."}
{"index": 2984, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package resource;\n\npackage resource.authentication; // OAuth 2.0 Resource Server Authentications and supporting classes and interfaces.\npackage resource.introspection; // OAuth 2.0 Introspection supporting classes and interfaces.\npackage resource.web; // OAuth 2.0 Resource Server Filter's and supporting classes and interfaces.\n@Deprecated public class BearerTokenAuthenticationToken extends BearerTokenAuthenticationToken;\npublic final class BearerTokenError extends org.springframework.security.oauth2.core.OAuth2Error; // A representation of a Bearer Token Error.\npublic final class BearerTokenErrorCodes extends Object; // Standard error codes defined by the OAuth 2.0 Authorization Framework: Bearer Token Usage.\npublic final class BearerTokenErrors extends Object; // A factory for creating BearerTokenError instances that correspond to the registered Bearer Token Error Codes.\npublic class InvalidBearerTokenException extends org.springframework.security.oauth2.core.OAuth2AuthenticationException; // An OAuth2AuthenticationException that indicates an invalid bearer token.\n", "des": "OAuth 2.0 Resource Server core classes and interfaces providing support."}
{"index": 2985, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package authentication;\n\npublic abstract class AbstractOAuth2TokenAuthenticationToken<T extends org.springframework.security.oauth2.core.OAuth2Token> extends org.springframework.security.authentication.AbstractAuthenticationToken; // Base class for AbstractAuthenticationToken implementations that expose common attributes between different OAuth 2.0 Access Token Formats.\n@Transient public class BearerTokenAuthentication extends AbstractOAuth2TokenAuthenticationToken<org.springframework.security.oauth2.core.OAuth2AccessToken>; // An Authentication token that represents a successful authentication as obtained through a bearer token.\npublic class BearerTokenAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken; // An Authentication that contains a Bearer Token.\npublic class DelegatingJwtGrantedAuthoritiesConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,Collection<org.springframework.security.core.GrantedAuthority>>; // A Jwt to GrantedAuthority Converter that is a composite of converters.\npublic class JwtAuthenticationConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,org.springframework.security.authentication.AbstractAuthenticationToken>;\npublic final class JwtAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // An AuthenticationProvider implementation of the Jwt-encoded Bearer Tokens for protecting OAuth 2.0 Resource Servers.\n@Transient public class JwtAuthenticationToken extends AbstractOAuth2TokenAuthenticationToken<org.springframework.security.oauth2.jwt.Jwt>; // An implementation of an AbstractOAuth2TokenAuthenticationToken representing a Jwt Authentication.\npublic final class JwtBearerTokenAuthenticationConverter extends Object implements org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,org.springframework.security.authentication.AbstractAuthenticationToken>; // A Converter that takes a Jwt and converts it into a BearerTokenAuthentication.\n", "des": "OAuth 2.0 Resource Server Authentications and supporting classes and interfaces."}
{"index": 2986, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package introspection;\n\npublic class BadOpaqueTokenException extends OAuth2IntrospectionException; // An exception similar to BadCredentialsException that indicates an opaque token that is invalid in some way.\npublic class NimbusOpaqueTokenIntrospector extends Object implements OpaqueTokenIntrospector; // A Nimbus implementation of OpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic class NimbusReactiveOpaqueTokenIntrospector extends Object implements ReactiveOpaqueTokenIntrospector; // A Nimbus implementation of ReactiveOpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic final class OAuth2IntrospectionAuthenticatedPrincipal extends Object implements org.springframework.security.oauth2.core.OAuth2TokenIntrospectionClaimAccessor, org.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal, Serializable; // A domain object that wraps the attributes of OAuth 2.0 Token Introspection.\npublic class OAuth2IntrospectionException extends RuntimeException; // Base exception for all OAuth 2.0 Introspection related errors\n@FunctionalInterface public interface OpaqueTokenAuthenticationConverter; // Convert a successful introspection result into an authentication result.\n@FunctionalInterface public interface OpaqueTokenIntrospector; // A contract for introspecting and verifying an OAuth 2.0 token.\n@FunctionalInterface public interface ReactiveOpaqueTokenAuthenticationConverter; // Convert a successful introspection result into an authentication result.\n@FunctionalInterface public interface ReactiveOpaqueTokenIntrospector; // A contract for introspecting and verifying an OAuth 2.0 token.\npublic class SpringOpaqueTokenIntrospector extends Object implements OpaqueTokenIntrospector; // A Spring implementation of OpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\npublic class SpringReactiveOpaqueTokenIntrospector extends Object implements ReactiveOpaqueTokenIntrospector; // A Spring implementation of ReactiveOpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.\n", "des": "OAuth 2.0 Introspection supporting classes and interfaces."}
{"index": 2987, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package web;\n\npackage web.access; // OAuth 2.0 Resource Server access denial classes and interfaces.\npublic final class BearerTokenAuthenticationEntryPoint extends Object implements org.springframework.security.web.AuthenticationEntryPoint; // An AuthenticationEntryPoint implementation used to commence authentication of protected resource requests using BearerTokenAuthenticationFilter.\n@Deprecated public final class BearerTokenAuthenticationFilter extends BearerTokenAuthenticationFilter;\n@FunctionalInterface public interface BearerTokenResolver; // A strategy for resolving Bearer Tokens from the HttpServletRequest.\npublic final class DefaultBearerTokenResolver extends Object implements BearerTokenResolver; // The default BearerTokenResolver implementation based on RFC 6750.\npublic class HeaderBearerTokenResolver extends Object implements BearerTokenResolver; // Generic resolver extracting pre-authenticated JWT identity from a custom header.\n", "des": "OAuth 2.0 Resource Server Filter's and supporting classes and interfaces."}
{"index": 2988, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "package access;\n\npublic final class BearerTokenAccessDeniedHandler extends Object implements org.springframework.security.web.access.AccessDeniedHandler; // Translates any AccessDeniedException into an HTTP response in accordance with RFC 6750 Section 3: The WWW-Authenticate.\n", "des": "OAuth 2.0 Resource Server access denial classes and interfaces."}
{"index": 2989, "repo": "spring-ldap-core-3.1.0", "code": "package annotations;\n\n@Target(FIELD) @Retention(RUNTIME) public @interface Attribute; // Maps a Java field to an LDAP attribute.\npublic static enum Attribute.Type extends Enum<Attribute.Type>; // The Type attribute indicates whether a field is regarded as binary based or string based by the LDAP JNDI provider.\n@Target(FIELD) @Retention(RUNTIME) public @interface DnAttribute; // Maps a Java field to a component of an entry's distinguished name.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface Entry; // This annotation marks a Java class to be persisted in an LDAP directory.\n@Target(FIELD) @Retention(RUNTIME) public @interface Id; // This annotation marks a Java field as containing the Distinguished Name of an LDAP Entry.\n@Target(FIELD) @Retention(RUNTIME) public @interface Transient; // This annotation identifies a field in an Entry annotated class that should not be persisted to LDAP.\n", "des": "Provides a set of annotations to describe the mapping of a Java class to an LDAP entry."}
{"index": 2990, "repo": "spring-ldap-core-3.1.0", "code": "package core;\n\npackage core.impl; // Provides a single public class which implements OdmManager.\npublic interface ObjectDirectoryMapper; // The ObjectDirectoryMapper keeps track of managed class metadata and is used by LdapTemplate to map to/from entity objects annotated with the annotations specified in the org.springframework.ldap.odm.annotations package.\npublic class OdmException extends NamingException; // The root of the Spring LDAP ODM exception hierarchy.\n", "des": "Provides an OdmManager interface for interaction with an LDAP directory."}
{"index": 2991, "repo": "spring-ldap-core-3.1.0", "code": "package impl;\n\npublic class DefaultObjectDirectoryMapper extends Object implements ObjectDirectoryMapper; // Default implementation of ObjectDirectoryMapper.\npublic class InvalidEntryException extends OdmException; // Thrown to indicate that an instance is not suitable for persisting in the LDAP directory.\npublic class MetaDataException extends OdmException; // Thrown to indicate an error in the annotated meta-data.\npublic class UnmanagedClassException extends OdmException; // Thrown when an OdmManager method is called with a class which is not being managed by the OdmManager.\n", "des": "Provides a single public class which implements OdmManager."}
{"index": 2992, "repo": "spring-ldap-core-3.1.0", "code": "package typeconversion;\n\npackage typeconversion.impl; // Provides an implementation of the ConverterManager interface.\npublic final class ConverterException extends NamingException; // Thrown by the conversion framework to indicate an error condition - typically a failed type conversion.\npublic interface ConverterManager; // A simple interface to be implemented to provide type conversion functionality.\n", "des": "Provides an interface to be implemented to create a type conversion framework."}
{"index": 2993, "repo": "spring-ldap-core-3.1.0", "code": "package impl;\n\npackage impl.converters; // Provides some basic implementations of the Converter interface.\npublic class ConversionServiceConverterManager extends Object implements ConverterManager;\npublic static final class ConversionServiceConverterManager.NameToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<Name,String>;\npublic static final class ConversionServiceConverterManager.StringToNameConverter extends Object implements org.springframework.core.convert.converter.Converter<String,Name>;\npublic interface Converter; // Interface specifying the conversion between two classes\npublic final class ConverterManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean; // A utility class to allow ConverterManagerImpl instances to be easily configured via spring.xml.\npublic static final class ConverterManagerFactoryBean.ConverterConfig extends Object; // Configuration information for a single Converter instance.\npublic final class ConverterManagerImpl extends Object implements ConverterManager; // An implementation of ConverterManager.\npublic class StringConverter extends Object;\n", "des": "Provides an implementation of the ConverterManager interface."}
{"index": 2994, "repo": "spring-ldap-core-3.1.0", "code": "package converters;\n\npublic final class FromStringConverter extends Object implements Converter; // A Converter from a String to any class which has a single argument public constructor taking a String.\npublic final class ToStringConverter extends Object implements Converter; // A Converter from any class to a String via the toString method.\n", "des": "Provides some basic implementations of the Converter interface."}
{"index": 2995, "repo": "spring-web-6.0.11", "code": "package http;\n\npackage http.client; // Contains an abstraction over client-side HTTP.\npackage http.codec; // Provides implementations of Encoder and Decoder for web use.\npackage http.converter; // Provides an HttpMessageConverter abstraction to convert between Java objects and HTTP input/output messages.\npackage http.server; // Contains an abstraction over server-side HTTP.\npublic class CacheControl extends Object; // A builder for creating \"Cache-Control\" HTTP response headers.\npublic final class ContentDisposition extends Object; // Representation of the Content-Disposition type and parameters as defined in RFC 6266.\npublic static interface ContentDisposition.Builder; // A mutable builder for ContentDisposition.\npublic class HttpCookie extends Object; // Represents an HTTP cookie as a name-value pair consistent with the content of the \"Cookie\" request header.\npublic class HttpEntity<T> extends Object; // Represents an HTTP request or response entity, consisting of headers and body.\npublic class HttpHeaders extends Object implements org.springframework.util.MultiValueMap<String,String>, Serializable; // A data structure representing HTTP request or response headers, mapping String header names to a list of String values, also offering accessors for common application-level data types.\npublic interface HttpInputMessage extends HttpMessage; // Represents an HTTP input message, consisting of headers and a readable body.\npublic abstract class HttpLogging extends Object; // Holds the shared logger named \"org.springframework.web.HttpLogging\" for HTTP related logging when \"org.springframework.http\" is not enabled but \"org.springframework.web\" is.\npublic interface HttpMessage; // Represents the base interface for HTTP request and response messages.\npublic final class HttpMethod extends Object implements Comparable<HttpMethod>, Serializable; // Represents an HTTP request method.\npublic interface HttpOutputMessage extends HttpMessage; // Represents an HTTP output message, consisting of headers and a writable body.\npublic abstract class HttpRange extends Object; // Represents an HTTP (byte) range for use with the HTTP \"Range\" header.\npublic interface HttpRequest extends HttpMessage; // Represents an HTTP request message, consisting of a method and a URI.\npublic enum HttpStatus extends Enum<HttpStatus> implements HttpStatusCode; // Enumeration of HTTP status codes.\n", "des": "Contains a basic abstraction over client/server-side HTTP."}
{"index": 2996, "repo": "spring-web-6.0.11", "code": "package client;\n\npackage client.observation; // This package provides support for client HTTP Observation.\npackage client.reactive; // Abstractions for reactive HTTP client support including ClientHttpRequest and ClientHttpResponse as well as a ClientHttpConnector.\npackage client.support; // This package provides generic HTTP support classes, to be used by higher-level classes like RestTemplate.\npublic abstract class AbstractClientHttpRequest extends Object implements ClientHttpRequest; // Abstract base for ClientHttpRequest that makes sure that headers and body are not written multiple times.\npublic abstract class AbstractClientHttpRequestFactoryWrapper extends Object implements ClientHttpRequestFactory; // Abstract base class for ClientHttpRequestFactory implementations that decorate another request factory.\n@Deprecated(since=\"6.0\") public abstract class AbstractClientHttpResponse extends Object implements ClientHttpResponse;\npublic class BufferingClientHttpRequestFactory extends AbstractClientHttpRequestFactoryWrapper; // Wrapper for a ClientHttpRequestFactory that buffers all outgoing and incoming streams in memory.\npublic interface ClientHttpRequest extends HttpRequest, HttpOutputMessage; // Represents a client-side HTTP request.\n@FunctionalInterface public interface ClientHttpRequestExecution; // Represents the context of a client-side HTTP request execution.\n@FunctionalInterface public interface ClientHttpRequestFactory; // Factory for ClientHttpRequest objects.\n@FunctionalInterface public interface ClientHttpRequestInitializer; // Callback interface for initializing a ClientHttpRequest prior to it being used.\n@FunctionalInterface public interface ClientHttpRequestInterceptor; // Intercepts client-side HTTP requests.\npublic interface ClientHttpResponse extends HttpInputMessage, Closeable; // Represents a client-side HTTP response.\npublic class HttpComponentsClientHttpRequestFactory extends Object implements ClientHttpRequestFactory, org.springframework.beans.factory.DisposableBean; // ClientHttpRequestFactory implementation that uses Apache HttpComponents HttpClient to create requests.\npublic class InterceptingClientHttpRequestFactory extends AbstractClientHttpRequestFactoryWrapper; // ClientHttpRequestFactory wrapper with support for ClientHttpRequestInterceptors.\npublic final class MultipartBodyBuilder extends Object; // Prepare the body of a multipart request, resulting in a MultiValueMap<String, HttpEntity>.\npublic static interface MultipartBodyBuilder.PartBuilder; // Builder that allows for further customization of part headers.\npublic class OkHttp3ClientHttpRequestFactory extends Object implements ClientHttpRequestFactory, org.springframework.beans.factory.DisposableBean; // ClientHttpRequestFactory implementation that uses OkHttp 3.x to create requests.\n", "des": "Contains an abstraction over client-side HTTP."}
{"index": 2997, "repo": "spring-web-6.0.11", "code": "package observation;\n\npublic enum ClientHttpObservationDocumentation extends Enum<ClientHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for HTTP client observations.\npublic static enum ClientHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ClientHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic class ClientRequestObservationContext extends io.micrometer.observation.transport.RequestReplySenderContext<ClientHttpRequest,ClientHttpResponse>; // Context that holds information for metadata collection during the client HTTP exchanges observations.\npublic interface ClientRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ClientRequestObservationContext>; // Interface for an ObservationConvention for client HTTP exchanges.\npublic class DefaultClientRequestObservationConvention extends Object implements ClientRequestObservationConvention; // Default implementation for a ClientRequestObservationConvention, extracting information from the ClientRequestObservationContext.\n", "des": "This package provides support for client HTTP Observation."}
{"index": 2998, "repo": "spring-web-6.0.11", "code": "package reactive;\n\npublic abstract class AbstractClientHttpRequest extends Object implements ClientHttpRequest; // Base class for ClientHttpRequest implementations.\npublic interface ClientHttpConnector; // Abstraction over HTTP clients driving the underlying HTTP client to connect to the origin server and provide all necessary infrastructure to send a ClientHttpRequest and receive a ClientHttpResponse.\npublic interface ClientHttpRequest extends ReactiveHttpOutputMessage; // Represents a client-side reactive HTTP request.\npublic class ClientHttpRequestDecorator extends Object implements ClientHttpRequest; // Wraps another ClientHttpRequest and delegates all methods to it.\npublic interface ClientHttpResponse extends ReactiveHttpInputMessage; // Represents a client-side reactive HTTP response.\npublic class ClientHttpResponseDecorator extends Object implements ClientHttpResponse; // Wraps another ClientHttpResponse and delegates all methods to it.\npublic class HttpComponentsClientHttpConnector extends Object implements ClientHttpConnector, Closeable; // ClientHttpConnector implementation for the Apache HttpComponents HttpClient 5.x.\npublic class JdkClientHttpConnector extends Object implements ClientHttpConnector; // ClientHttpConnector for the Java HttpClient.\npublic class JdkHttpClientResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Factory to manage JDK HttpClient resources such as a shared Executor within the lifecycle of a Spring ApplicationContext.\npublic class JettyClientHttpConnector extends Object implements ClientHttpConnector; // ClientHttpConnector for the Jetty Reactive Streams HttpClient.\npublic class JettyResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Factory to manage Jetty resources, i.e.\npublic class ReactorClientHttpConnector extends Object implements ClientHttpConnector; // Reactor-Netty implementation of ClientHttpConnector.\npublic class ReactorNetty2ClientHttpConnector extends Object implements ClientHttpConnector; // Reactor Netty 2 (Netty 5) implementation of ClientHttpConnector.\npublic class ReactorNetty2ResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Factory to manage Reactor Netty resources, i.e.\n", "des": "Abstractions for reactive HTTP client support including ClientHttpRequest and ClientHttpResponse as well as a ClientHttpConnector."}
{"index": 2999, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic class BasicAuthenticationInterceptor extends Object implements ClientHttpRequestInterceptor; // ClientHttpRequestInterceptor to apply a given HTTP Basic Authentication username/password pair, unless a custom Authorization header has already been set.\npublic abstract class HttpAccessor extends Object; // Base class for RestTemplate and other HTTP accessing gateway helpers, defining common properties such as the ClientHttpRequestFactory to operate on.\npublic class HttpRequestWrapper extends Object implements HttpRequest; // Provides a convenient implementation of the HttpRequest interface that can be overridden to adapt the request.\npublic abstract class InterceptingHttpAccessor extends HttpAccessor; // Base class for RestTemplate and other HTTP accessing gateway helpers, adding interceptor-related properties to HttpAccessor's common properties.\npublic class ProxyFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Proxy>, org.springframework.beans.factory.InitializingBean; // FactoryBean that creates a java.net.Proxy.\n", "des": "This package provides generic HTTP support classes, to be used by higher-level classes like RestTemplate."}
{"index": 3000, "repo": "spring-web-6.0.11", "code": "package codec;\n\npackage codec.cbor; // CBOR encoder and decoder support.\npackage codec.json; // JSON encoder and decoder support.\npackage codec.multipart; // Multipart support.\npackage codec.protobuf; // Provides an encoder and a decoder for Google Protocol Buffers.\npackage codec.support; // Provides implementations of ClientCodecConfigurer and ServerCodecConfigurer based on the converter implementations from org.springframework.http.codec.json and co.\npackage codec.xml; // XML encoder and decoder support.\npublic interface ClientCodecConfigurer extends CodecConfigurer; // Extension of CodecConfigurer for HTTP message reader and writer options relevant on the client side.\npublic static interface ClientCodecConfigurer.ClientDefaultCodecs extends CodecConfigurer.DefaultCodecs; // CodecConfigurer.DefaultCodecs extension with extra client-side options.\npublic interface CodecConfigurer; // Defines a common interface for configuring either client or server HTTP message readers and writers.\npublic static interface CodecConfigurer.CustomCodecs; // Registry for custom HTTP message readers and writers.\npublic static interface CodecConfigurer.DefaultCodecConfig; // Exposes the values of properties configured through CodecConfigurer.defaultCodecs() that are applied to default codecs.\npublic static interface CodecConfigurer.DefaultCodecs; // Customize or replace the HTTP message readers and writers registered by default.\npublic static interface CodecConfigurer.MultipartCodecs; // Registry and container for multipart HTTP message writers.\npublic class DecoderHttpMessageReader<T> extends Object implements HttpMessageReader<T>; // HttpMessageReader that wraps and delegates to a Decoder.\npublic class EncoderHttpMessageWriter<T> extends Object implements HttpMessageWriter<T>; // HttpMessageWriter that wraps and delegates to an Encoder.\npublic class FormHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<org.springframework.util.MultiValueMap<String,String>>; // Implementation of an HttpMessageReader to read HTML form data, i.e.\npublic class FormHttpMessageWriter extends LoggingCodecSupport implements HttpMessageWriter<org.springframework.util.MultiValueMap<String,String>>; // HttpMessageWriter for writing a MultiValueMap<String, String> as HTML form data, i.e.\n", "des": "Provides implementations of Encoder and Decoder for web use."}
{"index": 3001, "repo": "spring-web-6.0.11", "code": "package cbor;\n\npublic class Jackson2CborDecoder extends AbstractJackson2Decoder; // Decode bytes into CBOR and convert to Object's with Jackson.\npublic class Jackson2CborEncoder extends AbstractJackson2Encoder; // Encode from an Object to bytes of CBOR objects using Jackson.\npublic class KotlinSerializationCborDecoder extends KotlinSerializationBinaryDecoder<kotlinx.serialization.cbor.Cbor>; // Decode a byte stream into CBOR and convert to Objects with kotlinx.serialization.\npublic class KotlinSerializationCborEncoder extends KotlinSerializationBinaryEncoder<kotlinx.serialization.cbor.Cbor>; // Encode from an Object stream to a byte stream of CBOR objects using kotlinx.serialization.\n", "des": "CBOR encoder and decoder support."}
{"index": 3002, "repo": "spring-web-6.0.11", "code": "package json;\n\npublic abstract class AbstractJackson2Decoder extends Jackson2CodecSupport implements HttpMessageDecoder<Object>; // Abstract base class for Jackson 2.x decoding, leveraging non-blocking parsing.\npublic abstract class AbstractJackson2Encoder extends Jackson2CodecSupport implements HttpMessageEncoder<Object>; // Base class providing support methods for Jackson 2.x encoding.\npublic abstract class Jackson2CodecSupport extends Object; // Base class providing support methods for Jackson 2.x encoding and decoding.\npublic class Jackson2JsonDecoder extends AbstractJackson2Decoder; // Decode a byte stream into JSON and convert to Object's with Jackson 2.x, leveraging non-blocking parsing.\npublic class Jackson2JsonEncoder extends AbstractJackson2Encoder; // Encode from an Object stream to a byte stream of JSON objects using Jackson 2.x.\npublic class Jackson2SmileDecoder extends AbstractJackson2Decoder; // Decode a byte stream into Smile and convert to Object's with Jackson 2.x, leveraging non-blocking parsing.\npublic class Jackson2SmileEncoder extends AbstractJackson2Encoder; // Encode from an Object stream to a byte stream of Smile objects using Jackson 2.x.\npublic class KotlinSerializationJsonDecoder extends KotlinSerializationStringDecoder<kotlinx.serialization.json.Json>; // Decode a byte stream into JSON and convert to Object's with kotlinx.serialization.\npublic class KotlinSerializationJsonEncoder extends KotlinSerializationStringEncoder<kotlinx.serialization.json.Json>; // Encode from an Object stream to a byte stream of JSON objects using kotlinx.serialization.\n", "des": "JSON encoder and decoder support."}
{"index": 3003, "repo": "spring-web-6.0.11", "code": "package multipart;\n\npublic class DefaultPartHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<Part>; // Default HttpMessageReader for parsing \"multipart/form-data\" requests to a stream of Parts.\npublic interface FilePart extends Part; // Specialization of Part that represents an uploaded file received in a multipart request.\npublic interface FilePartEvent extends PartEvent; // Represents an event triggered for a file upload.\npublic interface FormFieldPart extends Part; // Specialization of Part for a form field.\npublic interface FormPartEvent extends PartEvent; // Represents an event triggered for a form field.\npublic class MultipartHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<org.springframework.util.MultiValueMap<String,Part>>; // HttpMessageReader for reading \"multipart/form-data\" requests into a MultiValueMap<String, Part>.\npublic class MultipartHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<org.springframework.util.MultiValueMap<String,?>>; // HttpMessageWriter for writing a MultiValueMap<String, ?> as multipart form data, i.e.\npublic class MultipartWriterSupport extends LoggingCodecSupport; // Support class for multipart HTTP message writers.\npublic interface Part; // Representation for a part in a \"multipart/form-data\" request.\npublic interface PartEvent; // Represents an event for a \"multipart/form-data\" request.\npublic class PartEventHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<PartEvent>; // HttpMessageReader for parsing \"multipart/form-data\" requests to a stream of PartEvent elements.\npublic class PartEventHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<PartEvent>; // HttpMessageWriter for writing PartEvent objects.\npublic class PartHttpMessageWriter extends MultipartWriterSupport implements HttpMessageWriter<Part>; // HttpMessageWriter for writing with Part.\n", "des": "Multipart support."}
{"index": 3004, "repo": "spring-web-6.0.11", "code": "package protobuf;\n\npublic class KotlinSerializationProtobufDecoder extends KotlinSerializationBinaryDecoder<kotlinx.serialization.protobuf.ProtoBuf>; // Decode a byte stream into a protocol Buffer and convert to Objects with kotlinx.serialization.\npublic class KotlinSerializationProtobufEncoder extends KotlinSerializationBinaryEncoder<kotlinx.serialization.protobuf.ProtoBuf>; // Decode a byte stream into a Protocol Buffer and convert to Objects with kotlinx.serialization.\npublic abstract class ProtobufCodecSupport extends Object; // Base class providing support methods for Protobuf encoding and decoding.\npublic class ProtobufDecoder extends ProtobufCodecSupport implements org.springframework.core.codec.Decoder<com.google.protobuf.Message>; // A Decoder that reads Messages using Google Protocol Buffers.\npublic class ProtobufEncoder extends ProtobufCodecSupport implements HttpMessageEncoder<com.google.protobuf.Message>; // An Encoder that writes Messages using Google Protocol Buffers.\npublic class ProtobufHttpMessageWriter extends EncoderHttpMessageWriter<com.google.protobuf.Message>; // HttpMessageWriter that can write a protobuf Message and adds X-Protobuf-Schema, X-Protobuf-Message headers and a delimited=true parameter is added to the content type if a flux is serialized.\n", "des": "Provides an encoder and a decoder for Google Protocol Buffers."}
{"index": 3005, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic class DefaultClientCodecConfigurer extends Object implements ClientCodecConfigurer; // Default implementation of ClientCodecConfigurer.\npublic class DefaultServerCodecConfigurer extends Object implements ServerCodecConfigurer; // Default implementation of ServerCodecConfigurer.\n", "des": "Provides implementations of ClientCodecConfigurer and ServerCodecConfigurer based on the converter implementations from org.springframework.http.codec.json and co."}
{"index": 3006, "repo": "spring-web-6.0.11", "code": "package xml;\n\npublic class Jaxb2XmlDecoder extends org.springframework.core.codec.AbstractDecoder<Object>; // Decode from a bytes stream containing XML elements to a stream of Objects (POJOs).\npublic class Jaxb2XmlEncoder extends org.springframework.core.codec.AbstractSingleValueEncoder<Object>; // Encode from single value to a byte stream containing XML elements.\npublic class XmlEventDecoder extends org.springframework.core.codec.AbstractDecoder<XMLEvent>; // Decodes a DataBuffer stream into a stream of XMLEvents.\n", "des": "XML encoder and decoder support."}
{"index": 3007, "repo": "spring-web-6.0.11", "code": "package converter;\n\npackage converter.cbor; // Provides an HttpMessageConverter for the CBOR data format.\npackage converter.feed; // Provides HttpMessageConverter implementations for handling Atom and RSS feeds.\npackage converter.json; // Provides HttpMessageConverter implementations for handling JSON.\npackage converter.protobuf; // Provides an HttpMessageConverter implementation for handling Google Protocol Buffers.\npackage converter.smile; // Provides an HttpMessageConverter for the Smile data format (\"binary JSON\").\npackage converter.support; // Provides a comprehensive HttpMessageConverter variant for form handling.\npackage converter.xml; // Provides HttpMessageConverter implementations for handling XML.\npublic abstract class AbstractGenericHttpMessageConverter<T> extends AbstractHttpMessageConverter<T> implements GenericHttpMessageConverter<T>; // Abstract base class for most GenericHttpMessageConverter implementations.\npublic abstract class AbstractHttpMessageConverter<T> extends Object implements HttpMessageConverter<T>; // Abstract base class for most HttpMessageConverter implementations.\npublic abstract class AbstractKotlinSerializationHttpMessageConverter<T extends kotlinx.serialization.SerialFormat> extends AbstractGenericHttpMessageConverter<Object>; // Abstract base class for HttpMessageConverter implementations that use Kotlin serialization.\npublic class BufferedImageHttpMessageConverter extends Object implements HttpMessageConverter<BufferedImage>; // Implementation of HttpMessageConverter that can read and write BufferedImages.\npublic class ByteArrayHttpMessageConverter extends AbstractHttpMessageConverter<byte[]>; // Implementation of HttpMessageConverter that can read and write byte arrays.\npublic class FormHttpMessageConverter extends Object implements HttpMessageConverter<org.springframework.util.MultiValueMap<String,?>>; // Implementation of HttpMessageConverter to read and write 'normal' HTML forms and also to write (but not read) multipart data (e.g.\npublic interface GenericHttpMessageConverter<T> extends HttpMessageConverter<T>; // A specialization of HttpMessageConverter that can convert an HTTP request into a target object of a specified generic type and a source object of a specified generic type into an HTTP response.\npublic class HttpMessageConversionException extends org.springframework.core.NestedRuntimeException; // Thrown by HttpMessageConverter implementations when a conversion attempt fails.\npublic interface HttpMessageConverter<T>; // Strategy interface for converting from and to HTTP requests and responses.\n", "des": "Provides an HttpMessageConverter abstraction to convert between Java objects and HTTP input/output messages."}
{"index": 3008, "repo": "spring-web-6.0.11", "code": "package cbor;\n\npublic class KotlinSerializationCborHttpMessageConverter extends KotlinSerializationBinaryHttpMessageConverter<kotlinx.serialization.cbor.Cbor>; // Implementation of HttpMessageConverter that can read and write CBOR using kotlinx.serialization.\npublic class MappingJackson2CborHttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write the CBOR data format using the dedicated Jackson 2.x extension.\n", "des": "Provides an HttpMessageConverter for the CBOR data format."}
{"index": 3009, "repo": "spring-web-6.0.11", "code": "package feed;\n\npublic abstract class AbstractWireFeedHttpMessageConverter<T extends com.rometools.rome.feed.WireFeed> extends AbstractHttpMessageConverter<T>; // Abstract base class for Atom and RSS Feed message converters, using the ROME tools project.\npublic class AtomFeedHttpMessageConverter extends AbstractWireFeedHttpMessageConverter<com.rometools.rome.feed.atom.Feed>; // Implementation of HttpMessageConverter that can read and write Atom feeds.\npublic class RssChannelHttpMessageConverter extends AbstractWireFeedHttpMessageConverter<com.rometools.rome.feed.rss.Channel>; // Implementation of HttpMessageConverter that can read and write RSS feeds.\n", "des": "Provides HttpMessageConverter implementations for handling Atom and RSS feeds."}
{"index": 3010, "repo": "spring-web-6.0.11", "code": "package json;\n\npublic abstract class AbstractJackson2HttpMessageConverter extends AbstractGenericHttpMessageConverter<Object>; // Abstract base class for Jackson based and content type independent HttpMessageConverter implementations.\npublic abstract class AbstractJsonHttpMessageConverter extends AbstractGenericHttpMessageConverter<Object>; // Common base class for plain JSON converters, e.g.\npublic abstract class GsonBuilderUtils extends Object; // A simple utility class for obtaining a Google Gson 2.x GsonBuilder which Base64-encodes byte[] properties when reading and writing JSON.\npublic class GsonFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<com.google.gson.Gson>, org.springframework.beans.factory.InitializingBean; // A FactoryBean for creating a Google Gson 2.x Gson instance.\npublic class GsonHttpMessageConverter extends AbstractJsonHttpMessageConverter; // Implementation of HttpMessageConverter that can read and write JSON using the Google Gson library.\npublic class Jackson2ObjectMapperBuilder extends Object; // A builder used to create ObjectMapper instances with a fluent API.\npublic class Jackson2ObjectMapperFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ObjectMapper>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // A FactoryBean for creating a Jackson 2.x ObjectMapper (default) or XmlMapper (createXmlMapper property set to true) with setters to enable or disable Jackson features from within XML configuration.\npublic class JsonbHttpMessageConverter extends AbstractJsonHttpMessageConverter; // Implementation of HttpMessageConverter that can read and write JSON using the JSON Binding API.\npublic class KotlinSerializationJsonHttpMessageConverter extends KotlinSerializationStringHttpMessageConverter<kotlinx.serialization.json.Json>; // Implementation of HttpMessageConverter that can read and write JSON using kotlinx.serialization.\npublic class MappingJackson2HttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write JSON using Jackson 2.x's ObjectMapper.\n", "des": "Provides HttpMessageConverter implementations for handling JSON."}
{"index": 3011, "repo": "spring-web-6.0.11", "code": "package protobuf;\n\npublic class KotlinSerializationProtobufHttpMessageConverter extends KotlinSerializationBinaryHttpMessageConverter<kotlinx.serialization.protobuf.ProtoBuf>; // Implementation of HttpMessageConverter that can read and write Protocol Buffers using kotlinx.serialization.\npublic class ProtobufHttpMessageConverter extends AbstractHttpMessageConverter<com.google.protobuf.Message>; // An HttpMessageConverter that reads and writes com.google.protobuf.Messages using Google Protocol Buffers.\npublic class ProtobufJsonFormatHttpMessageConverter extends ProtobufHttpMessageConverter; // Subclass of ProtobufHttpMessageConverter which enforces the use of Protobuf 3 and its official library \"com.google.protobuf:protobuf-java-util\" for JSON processing.\n", "des": "Provides an HttpMessageConverter implementation for handling Google Protocol Buffers."}
{"index": 3012, "repo": "spring-web-6.0.11", "code": "package smile;\n\npublic class MappingJackson2SmileHttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write Smile data format (\"binary JSON\") using the dedicated Jackson 2.x extension.\n", "des": "Provides an HttpMessageConverter for the Smile data format (\"binary JSON\")."}
{"index": 3013, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic class AllEncompassingFormHttpMessageConverter extends FormHttpMessageConverter; // Extension of FormHttpMessageConverter, adding support for XML and JSON-based parts.\n", "des": "Provides a comprehensive HttpMessageConverter variant for form handling."}
{"index": 3014, "repo": "spring-web-6.0.11", "code": "package xml;\n\npublic abstract class AbstractJaxb2HttpMessageConverter<T> extends AbstractXmlHttpMessageConverter<T>; // Abstract base class for HttpMessageConverters that use JAXB2.\npublic abstract class AbstractXmlHttpMessageConverter<T> extends AbstractHttpMessageConverter<T>; // Abstract base class for HttpMessageConverters that convert from/to XML.\npublic class Jaxb2CollectionHttpMessageConverter<T extends Collection> extends AbstractJaxb2HttpMessageConverter<T> implements GenericHttpMessageConverter<T>; // An HttpMessageConverter that can read XML collections using JAXB2.\npublic class Jaxb2RootElementHttpMessageConverter extends AbstractJaxb2HttpMessageConverter<Object>; // Implementation of HttpMessageConverter that can read and write XML using JAXB2.\npublic class MappingJackson2XmlHttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write XML using Jackson 2.x extension component for reading and writing XML encoded data.\npublic class MarshallingHttpMessageConverter extends AbstractXmlHttpMessageConverter<Object>; // Implementation of HttpMessageConverter that can read and write XML using Spring's Marshaller and Unmarshaller abstractions.\npublic class SourceHttpMessageConverter<T extends Source> extends AbstractHttpMessageConverter<T>; // Implementation of HttpMessageConverter that can read and write Source objects.\n", "des": "Provides HttpMessageConverter implementations for handling XML."}
{"index": 3015, "repo": "spring-web-6.0.11", "code": "package server;\n\npackage server.observation; // Instrumentation for observing HTTP server applications.\npackage server.reactive; // Abstractions for reactive HTTP server support including a ServerHttpRequest and ServerHttpResponse along with an HttpHandler for processing.\npublic class DelegatingServerHttpResponse extends Object implements ServerHttpResponse; // Implementation of ServerHttpResponse that delegates all calls to a given target ServerHttpResponse.\npublic interface PathContainer; // Structured representation of a URI path parsed via PathContainer.parsePath(String) into a sequence of PathContainer.Separator and PathContainer.PathSegment elements.\npublic static interface PathContainer.Element; // A path element, either separator or path segment.\npublic static class PathContainer.Options extends Object; // Options to customize parsing based on the type of input path.\npublic static interface PathContainer.PathSegment extends PathContainer.Element; // Path segment element.\npublic static interface PathContainer.Separator extends PathContainer.Element; // Path separator element.\npublic interface RequestPath extends PathContainer; // Specialization of PathContainer that subdivides the path into a RequestPath.contextPath() and the remaining RequestPath.pathWithinApplication().\npublic interface ServerHttpAsyncRequestControl; // A control that can put the processing of an HTTP request in asynchronous mode during which the response remains open until explicitly closed.\npublic interface ServerHttpRequest extends HttpRequest, HttpInputMessage; // Represents a server-side HTTP request.\npublic interface ServerHttpResponse extends HttpOutputMessage, Flushable, Closeable; // Represents a server-side HTTP response.\npublic class ServletServerHttpAsyncRequestControl extends Object implements ServerHttpAsyncRequestControl, AsyncListener; // A ServerHttpAsyncRequestControl to use on Servlet containers.\npublic class ServletServerHttpRequest extends Object implements ServerHttpRequest; // ServerHttpRequest implementation that is based on a HttpServletRequest.\npublic class ServletServerHttpResponse extends Object implements ServerHttpResponse; // ServerHttpResponse implementation that is based on a HttpServletResponse.\n", "des": "Contains an abstraction over server-side HTTP."}
{"index": 3016, "repo": "spring-web-6.0.11", "code": "package observation;\n\npublic class DefaultServerRequestObservationConvention extends Object implements ServerRequestObservationConvention; // Default ServerRequestObservationConvention.\npublic enum ServerHttpObservationDocumentation extends Enum<ServerHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for the HTTP server observations for Servlet-based web applications.\npublic static enum ServerHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ServerHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic class ServerRequestObservationContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<HttpServletRequest,HttpServletResponse>; // Context that holds information for metadata collection regarding Servlet HTTP requests observations.\npublic interface ServerRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ServerRequestObservationContext>; // Interface for an ObservationConvention for Servlet HTTP requests.\n", "des": "Instrumentation for observing HTTP server applications."}
{"index": 3017, "repo": "spring-web-6.0.11", "code": "package reactive;\n\npackage reactive.observation; // Instrumentation for observing reactive HTTP server applications.\npublic abstract class AbstractListenerReadPublisher<T> extends Object implements Publisher<T>; // Abstract base class for Publisher implementations that bridge between event-listener read APIs and Reactive Streams.\npublic abstract class AbstractListenerServerHttpResponse extends AbstractServerHttpResponse; // Abstract base class for listener-based server responses.\npublic abstract class AbstractListenerWriteFlushProcessor<T> extends Object implements Processor<Publisher<? extends T>,Void>; // An alternative to AbstractListenerWriteProcessor but instead writing a Publisher<Publisher<T>> with flush boundaries enforces after the completion of each nested Publisher.\npublic abstract class AbstractListenerWriteProcessor<T> extends Object implements Processor<T,Void>; // Abstract base class for Processor implementations that bridge between event-listener write APIs and Reactive Streams.\npublic abstract class AbstractServerHttpRequest extends Object implements ServerHttpRequest; // Common base class for ServerHttpRequest implementations.\npublic abstract class AbstractServerHttpResponse extends Object implements ServerHttpResponse; // Base class for ServerHttpResponse implementations.\npublic class ChannelSendOperator<T> extends reactor.core.publisher.Mono<Void> implements reactor.core.Scannable; // Given a write function that accepts a source Publisher<T> to write with and returns Publisher<Void> for the result, this operator helps to defer the invocation of the write function, until we know if the source publisher will begin publishing without an error.\npublic class ContextPathCompositeHandler extends Object implements HttpHandler; // HttpHandler delegating requests to one of several HttpHandler's based on simple, prefix-based mappings.\npublic interface HttpHandler; // Lowest level contract for reactive HTTP request handling that serves as a common denominator across different runtimes.\npublic interface HttpHandlerDecoratorFactory extends Function<HttpHandler,HttpHandler>; // Contract for applying a decorator to an HttpHandler.\npublic class HttpHeadResponseDecorator extends ServerHttpResponseDecorator; // ServerHttpResponse decorator for HTTP HEAD requests.\npublic class JettyHttpHandlerAdapter extends ServletHttpHandlerAdapter; // ServletHttpHandlerAdapter extension that uses Jetty APIs for writing to the response with ByteBuffer.\n", "des": "Abstractions for reactive HTTP server support including a ServerHttpRequest and ServerHttpResponse along with an HttpHandler for processing."}
{"index": 3018, "repo": "spring-web-6.0.11", "code": "package observation;\n\npublic class DefaultServerRequestObservationConvention extends Object implements ServerRequestObservationConvention; // Default ServerRequestObservationConvention.\npublic enum ServerHttpObservationDocumentation extends Enum<ServerHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for the HTTP server observations for reactive web applications.\npublic static enum ServerHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ServerHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic class ServerRequestObservationContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<ServerHttpRequest,ServerHttpResponse>; // Context that holds information for metadata collection regarding reactive HTTP requests observations.\npublic interface ServerRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ServerRequestObservationContext>; // Interface for an ObservationConvention for reactive HTTP requests.\n", "des": "Instrumentation for observing reactive HTTP server applications."}
{"index": 3019, "repo": "spring-web-6.0.11", "code": "package web;\n\npackage web.accept; // This package contains classes used to determine the requested the media types in a request.\npackage web.bind; // Provides web-specific data binding functionality.\npackage web.client; // Core package of the client-side web support.\npackage web.context; // Contains a variant of the application context interface for web applications, and the ContextLoaderListener that bootstraps a root web application context.\npackage web.cors; // Support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy.\npackage web.filter; // Provides generic filter base classes allowing for bean-style configuration.\npackage web.jsf; // Support classes for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext.\npackage web.method; // Common infrastructure for handler method processing, as used by Spring MVC's org.springframework.web.servlet.mvc.method package.\npackage web.multipart; // Multipart resolution framework for handling file uploads.\npackage web.server; // Core interfaces and classes for Spring's generic, reactive web support.\npackage web.util; // Miscellaneous web utility classes, such as HTML escaping and cookie handling.\npublic interface ErrorResponse; // Representation of a complete RFC 7807 error response including status, headers, and an RFC 7807 formatted ProblemDetail body.\npublic static interface ErrorResponse.Builder; // Builder for an ErrorResponse.\npublic class ErrorResponseException extends org.springframework.core.NestedRuntimeException implements ErrorResponse; // RuntimeException that implements ErrorResponse to expose an HTTP status, response headers, and a body formatted as an RFC 7807 ProblemDetail.\npublic abstract class HttpMediaTypeException extends ServletException implements ErrorResponse; // Abstract base for exceptions related to media types.\npublic class HttpMediaTypeNotAcceptableException extends HttpMediaTypeException; // Exception thrown when the request handler cannot generate a response that is acceptable by the client.\npublic class HttpMediaTypeNotSupportedException extends HttpMediaTypeException; // Exception thrown when a client POSTs, PUTs, or PATCHes content of a type not supported by request handler.\n@FunctionalInterface public interface HttpRequestHandler; // Plain handler interface for components that process HTTP requests, analogous to a Servlet.\npublic class HttpRequestMethodNotSupportedException extends ServletException implements ErrorResponse; // Exception thrown when a request handler does not support a specific request method.\n", "des": "Common, generic interfaces that define minimal boundary points between Spring's web infrastructure and other framework modules."}
{"index": 3020, "repo": "spring-web-6.0.11", "code": "package accept;\n\npublic abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver implements ContentNegotiationStrategy; // Base class for ContentNegotiationStrategy implementations with the steps to resolve a request to media types.\npublic class ContentNegotiationManager extends Object implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver; // Central class to determine requested media types for a request.\npublic class ContentNegotiationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ContentNegotiationManager>, ServletContextAware, org.springframework.beans.factory.InitializingBean; // Factory to create a ContentNegotiationManager and configure it with ContentNegotiationStrategy instances.\n@FunctionalInterface public interface ContentNegotiationStrategy; // A strategy for resolving the requested media types for a request.\npublic class FixedContentNegotiationStrategy extends Object implements ContentNegotiationStrategy; // A ContentNegotiationStrategy that returns a fixed content type.\npublic class HeaderContentNegotiationStrategy extends Object implements ContentNegotiationStrategy; // A ContentNegotiationStrategy that checks the 'Accept' request header.\npublic class MappingMediaTypeFileExtensionResolver extends Object implements MediaTypeFileExtensionResolver; // An implementation of MediaTypeFileExtensionResolver that maintains lookups between file extensions and MediaTypes in both directions.\npublic interface MediaTypeFileExtensionResolver; // Strategy to resolve a MediaType to a list of file extensions — for example, to resolve \"application/json\" to \"json\".\npublic class ParameterContentNegotiationStrategy extends AbstractMappingContentNegotiationStrategy; // Strategy that resolves the requested content type from a query parameter.\n@Deprecated public class PathExtensionContentNegotiationStrategy extends AbstractMappingContentNegotiationStrategy;\n@Deprecated public class ServletPathExtensionContentNegotiationStrategy extends PathExtensionContentNegotiationStrategy;\n", "des": "This package contains classes used to determine the requested the media types in a request."}
{"index": 3021, "repo": "spring-web-6.0.11", "code": "package bind;\n\npackage bind.annotation; // Annotations for binding requests to controllers and handler methods as well as for binding request parameters to method arguments.\npackage bind.support; // Support classes for web data binding.\npublic class EscapedErrors extends Object implements org.springframework.validation.Errors; // Errors wrapper that adds automatic HTML escaping to the wrapped instance, for convenient usage in HTML views.\npublic class MethodArgumentNotValidException extends org.springframework.validation.BindException implements ErrorResponse; // Exception to be thrown when validation on an argument annotated with @Valid fails.\npublic class MissingMatrixVariableException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a matrix variable expected in the method parameters of an @RequestMapping method is not present among the matrix variables extracted from the URL.\npublic class MissingPathVariableException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a path variable expected in the method parameters of an @RequestMapping method is not present among the URI variables extracted from the URL.\npublic class MissingRequestCookieException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a request cookie expected in the method parameters of an @RequestMapping method is not present.\npublic class MissingRequestHeaderException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates that a request header expected in the method parameters of an @RequestMapping method is not present.\npublic class MissingRequestValueException extends ServletRequestBindingException; // Base class for ServletRequestBindingException exceptions that could not bind because the request value is required but is either missing or otherwise resolves to null after conversion.\npublic class MissingServletRequestParameterException extends MissingRequestValueException; // ServletRequestBindingException subclass that indicates a missing parameter.\npublic class ServletRequestBindingException extends ServletException implements ErrorResponse; // Fatal binding exception, thrown when we want to treat binding exceptions as unrecoverable.\npublic class ServletRequestDataBinder extends WebDataBinder; // Special DataBinder to perform data binding from servlet request parameters to JavaBeans, including support for multipart files.\npublic class ServletRequestParameterPropertyValues extends org.springframework.beans.MutablePropertyValues; // PropertyValues implementation created from parameters in a ServletRequest.\npublic abstract class ServletRequestUtils extends Object; // Parameter extraction methods, for an approach distinct from data binding, in which parameters of specific types are required.\n", "des": "Provides web-specific data binding functionality."}
{"index": 3022, "repo": "spring-web-6.0.11", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface ControllerAdvice; // Specialization of @Component for classes that declare @ExceptionHandler, @InitBinder, or @ModelAttribute methods to be shared across multiple @Controller classes.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface CookieValue; // Annotation to indicate that a method parameter is bound to an HTTP cookie.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface CrossOrigin; // Annotation for permitting cross-origin requests on specific handler classes and/or handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=DELETE) public @interface DeleteMapping; // Annotation for mapping HTTP DELETE requests onto specific handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(org.springframework.web.bind.annotation.ExceptionHandlerReflectiveProcessor.class) public @interface ExceptionHandler; // Annotation for handling exceptions in specific handler classes and/or handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=GET) public @interface GetMapping; // Annotation for mapping HTTP GET requests onto specific handler methods.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective public @interface InitBinder; // Annotation that identifies methods that initialize the WebDataBinder which will be used for populating command and form object arguments of annotated handler methods.\n@Target(ANNOTATION_TYPE) @Retention(RUNTIME) public @interface Mapping; // Meta annotation that indicates a web mapping annotation.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface MatrixVariable; // Annotation which indicates that a method parameter should be bound to a name-value pair within a path segment.\n@Target({PARAMETER,METHOD}) @Retention(RUNTIME) @Documented @Reflective public @interface ModelAttribute; // Annotation that binds a method parameter or method return value to a named model attribute, exposed to a web view.\n@Target(METHOD) @Retention(RUNTIME) @Documented @RequestMapping(method=PATCH) public @interface PatchMapping; // Annotation for mapping HTTP PATCH requests onto specific handler methods.\n", "des": "Annotations for binding requests to controllers and handler methods as well as for binding request parameters to method arguments."}
{"index": 3023, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic class ConfigurableWebBindingInitializer extends Object implements WebBindingInitializer; // Convenient WebBindingInitializer for declarative configuration in a Spring application context.\npublic class DefaultDataBinderFactory extends Object implements WebDataBinderFactory; // Create a WebRequestDataBinder instance and initialize it with a WebBindingInitializer.\npublic class DefaultSessionAttributeStore extends Object implements SessionAttributeStore; // Default implementation of the SessionAttributeStore interface, storing the attributes in the WebRequest session (i.e.\npublic interface SessionAttributeStore; // Strategy interface for storing model attributes in a backend session.\npublic interface SessionStatus; // Simple interface that can be injected into handler methods, allowing them to signal that their session processing is complete.\npublic class SimpleSessionStatus extends Object implements SessionStatus; // Simple implementation of the SessionStatus interface, keeping the complete flag as an instance variable.\npublic class SpringWebConstraintValidatorFactory extends Object implements ConstraintValidatorFactory; // JSR-303 ConstraintValidatorFactory implementation that delegates to the current Spring WebApplicationContext for creating autowired ConstraintValidator instances.\n@FunctionalInterface public interface WebArgumentResolver; // SPI for resolving custom arguments for a specific handler method parameter.\npublic interface WebBindingInitializer; // Callback interface for initializing a WebDataBinder for performing data binding in the context of a specific web request.\npublic interface WebDataBinderFactory; // A factory for creating a WebDataBinder instance for a named target object.\npublic class WebExchangeBindException extends ServerWebInputException implements org.springframework.validation.BindingResult; // ServerWebInputException subclass that indicates a data binding or validation failure.\npublic class WebExchangeDataBinder extends WebDataBinder; // Specialized DataBinder to perform data binding from URL query parameters or form data in the request data to Java objects.\npublic class WebRequestDataBinder extends WebDataBinder; // Special DataBinder to perform data binding from web request parameters to JavaBeans, including support for multipart files.\n", "des": "Support classes for web data binding."}
{"index": 3024, "repo": "spring-web-6.0.11", "code": "package client;\n\npackage client.support; // Classes supporting the org.springframework.web.client package.\npublic class DefaultResponseErrorHandler extends Object implements ResponseErrorHandler; // Spring's default implementation of the ResponseErrorHandler interface.\npublic class ExtractingResponseErrorHandler extends DefaultResponseErrorHandler; // Implementation of ResponseErrorHandler that uses HttpMessageConverters to convert HTTP error responses to RestClientExceptions.\npublic class HttpClientErrorException extends HttpStatusCodeException; // Exception thrown when an HTTP 4xx is received.\npublic static final class HttpClientErrorException.BadRequest extends HttpClientErrorException; // HttpClientErrorException for status HTTP 400 Bad Request.\npublic static final class HttpClientErrorException.Conflict extends HttpClientErrorException; // HttpClientErrorException for status HTTP 409 Conflict.\npublic static final class HttpClientErrorException.Forbidden extends HttpClientErrorException; // HttpClientErrorException for status HTTP 403 Forbidden.\npublic static final class HttpClientErrorException.Gone extends HttpClientErrorException; // HttpClientErrorException for status HTTP 410 Gone.\npublic static final class HttpClientErrorException.MethodNotAllowed extends HttpClientErrorException; // HttpClientErrorException for status HTTP 405 Method Not Allowed.\npublic static final class HttpClientErrorException.NotAcceptable extends HttpClientErrorException; // HttpClientErrorException for status HTTP 406 Not Acceptable.\npublic static final class HttpClientErrorException.NotFound extends HttpClientErrorException; // HttpClientErrorException for status HTTP 404 Not Found.\npublic static final class HttpClientErrorException.TooManyRequests extends HttpClientErrorException; // HttpClientErrorException for status HTTP 429 Too Many Requests.\npublic static final class HttpClientErrorException.Unauthorized extends HttpClientErrorException; // HttpClientErrorException for status HTTP 401 Unauthorized.\npublic static final class HttpClientErrorException.UnprocessableEntity extends HttpClientErrorException; // HttpClientErrorException for status HTTP 422 Unprocessable Entity.\npublic static final class HttpClientErrorException.UnsupportedMediaType extends HttpClientErrorException; // HttpClientErrorException for status HTTP 415 Unsupported Media Type.\npublic class HttpMessageConverterExtractor<T> extends Object implements ResponseExtractor<T>; // Response extractor that uses the given entity converters to convert the response into a type T.\npublic class HttpServerErrorException extends HttpStatusCodeException; // Exception thrown when an HTTP 5xx is received.\npublic static final class HttpServerErrorException.BadGateway extends HttpServerErrorException; // HttpServerErrorException for HTTP status 502 Bad Gateway.\npublic static final class HttpServerErrorException.GatewayTimeout extends HttpServerErrorException; // HttpServerErrorException for status HTTP 504 Gateway Timeout.\n", "des": "Core package of the client-side web support."}
{"index": 3025, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic class RestGatewaySupport extends Object; // Convenient superclass for application classes that need REST access.\n", "des": "Classes supporting the org.springframework.web.client package."}
{"index": 3026, "repo": "spring-web-6.0.11", "code": "package context;\n\npackage context.annotation; // Provides convenience annotations for web scopes.\npackage context.request; // Support for generic request context holding, in particular for scoping of application objects per HTTP request or HTTP session.\npackage context.support; // Classes supporting the org.springframework.web.context package, such as WebApplicationContext implementations and various utility classes.\npublic abstract class AbstractContextLoaderInitializer extends Object implements WebApplicationInitializer; // Convenient base class for WebApplicationInitializer implementations that register a ContextLoaderListener in the servlet context.\npublic interface ConfigurableWebApplicationContext extends WebApplicationContext, org.springframework.context.ConfigurableApplicationContext; // Interface to be implemented by configurable web application contexts.\npublic interface ConfigurableWebEnvironment extends org.springframework.core.env.ConfigurableEnvironment; // Specialization of ConfigurableEnvironment allowing initialization of servlet-related PropertySource objects at the earliest moment that the ServletContext and (optionally) ServletConfig become available.\npublic class ContextCleanupListener extends Object implements ServletContextListener; // Web application listener that cleans up remaining disposable attributes in the ServletContext, i.e.\npublic class ContextLoader extends Object; // Performs the actual initialization work for the root application context.\npublic class ContextLoaderListener extends ContextLoader implements ServletContextListener; // Bootstrap listener to start up and shut down Spring's root WebApplicationContext.\npublic interface ServletConfigAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the ServletConfig (typically determined by the WebApplicationContext) that it runs in.\npublic interface ServletContextAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the ServletContext (typically determined by the WebApplicationContext) that it runs in.\npublic interface WebApplicationContext extends org.springframework.context.ApplicationContext; // Interface to provide configuration for a web application.\n", "des": "Contains a variant of the application context interface for web applications, and the ContextLoaderListener that bootstraps a root web application context."}
{"index": 3027, "repo": "spring-web-6.0.11", "code": "package annotation;\n\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"application\") public @interface ApplicationScope; // @ApplicationScope is a specialization of @Scope for a component whose lifecycle is bound to the current web application.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"request\") public @interface RequestScope; // @RequestScope is a specialization of @Scope for a component whose lifecycle is bound to the current web request.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"session\") public @interface SessionScope; // @SessionScope is a specialization of @Scope for a component whose lifecycle is bound to the current web session.\n", "des": "Provides convenience annotations for web scopes."}
{"index": 3028, "repo": "spring-web-6.0.11", "code": "package request;\n\npackage request.async; // Support for asynchronous request processing.\npublic abstract class AbstractRequestAttributes extends Object implements RequestAttributes; // Abstract support class for RequestAttributes implementations, offering a request completion mechanism for request-specific destruction callbacks and for updating accessed session attributes.\npublic abstract class AbstractRequestAttributesScope extends Object implements org.springframework.beans.factory.config.Scope; // Abstract Scope implementation that reads from a particular scope in the current thread-bound RequestAttributes object.\npublic interface AsyncWebRequestInterceptor extends WebRequestInterceptor; // Extends WebRequestInterceptor with a callback method invoked during asynchronous request handling.\npublic class DestructionCallbackBindingListener extends Object implements HttpSessionBindingListener, Serializable; // Adapter that implements the Servlet HttpSessionBindingListener interface, wrapping a session destruction callback.\npublic class FacesRequestAttributes extends Object implements RequestAttributes; // RequestAttributes adapter for a JSF FacesContext.\npublic class FacesWebRequest extends FacesRequestAttributes implements NativeWebRequest; // WebRequest adapter for a JSF FacesContext.\npublic interface NativeWebRequest extends WebRequest; // Extension of the WebRequest interface, exposing the native request and response objects in a generic fashion.\npublic interface RequestAttributes; // Abstraction for accessing attribute objects associated with a request.\npublic abstract class RequestContextHolder extends Object; // Holder class to expose the web request in the form of a thread-bound RequestAttributes object.\npublic class RequestContextListener extends Object implements ServletRequestListener; // Servlet listener that exposes the request to the current thread, through both LocaleContextHolder and RequestContextHolder.\npublic class RequestScope extends AbstractRequestAttributesScope; // Request-backed Scope implementation.\npublic class ServletRequestAttributes extends AbstractRequestAttributes; // Servlet-based implementation of the RequestAttributes interface.\npublic class ServletWebRequest extends ServletRequestAttributes implements NativeWebRequest; // WebRequest adapter for an HttpServletRequest.\npublic class SessionScope extends AbstractRequestAttributesScope; // Session-backed Scope implementation.\npublic interface WebRequest extends RequestAttributes; // Generic interface for a web request.\npublic interface WebRequestInterceptor; // Interface for general web request interception.\n", "des": "Support for generic request context holding, in particular for scoping of application objects per HTTP request or HTTP session."}
{"index": 3029, "repo": "spring-web-6.0.11", "code": "package async;\n\npublic class AsyncRequestTimeoutException extends RuntimeException implements ErrorResponse; // Exception to be thrown when an async request times out.\npublic interface AsyncWebRequest extends NativeWebRequest; // Extends NativeWebRequest with methods for asynchronous request processing.\npublic interface CallableProcessingInterceptor; // Intercepts concurrent request handling, where the concurrent result is obtained by executing a Callable on behalf of the application with an AsyncTaskExecutor.\npublic class DeferredResult<T> extends Object; // DeferredResult provides an alternative to using a Callable for asynchronous request processing.\n@FunctionalInterface public static interface DeferredResult.DeferredResultHandler; // Handles a DeferredResult value when set.\npublic interface DeferredResultProcessingInterceptor; // Intercepts concurrent request handling, where the concurrent result is obtained by waiting for a DeferredResult to be set from a thread chosen by the application (e.g.\npublic class StandardServletAsyncWebRequest extends ServletWebRequest implements AsyncWebRequest, AsyncListener; // A Servlet implementation of AsyncWebRequest.\npublic class TimeoutCallableProcessingInterceptor extends Object implements CallableProcessingInterceptor; // Sends a 503 (SERVICE_UNAVAILABLE) in case of a timeout if the response is not already committed.\npublic class TimeoutDeferredResultProcessingInterceptor extends Object implements DeferredResultProcessingInterceptor; // Sends a 503 (SERVICE_UNAVAILABLE) in case of a timeout if the response is not already committed.\npublic final class WebAsyncManager extends Object; // The central class for managing asynchronous request processing, mainly intended as an SPI and not typically used directly by application classes.\npublic class WebAsyncTask<V> extends Object implements org.springframework.beans.factory.BeanFactoryAware; // Holder for a Callable, a timeout value, and a task executor.\npublic abstract class WebAsyncUtils extends Object; // Utility methods related to processing asynchronous web requests.\n", "des": "Support for asynchronous request processing."}
{"index": 3030, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic abstract class AbstractRefreshableWebApplicationContext extends org.springframework.context.support.AbstractRefreshableConfigApplicationContext implements ConfigurableWebApplicationContext, org.springframework.ui.context.ThemeSource; // AbstractRefreshableApplicationContext subclass which implements the ConfigurableWebApplicationContext interface for web environments.\npublic class AnnotationConfigWebApplicationContext extends AbstractRefreshableWebApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // WebApplicationContext implementation which accepts component classes as input — in particular @Configuration classes, but also plain @Component classes as well as JSR-330 compliant classes using jakarta.inject annotations.\npublic class ContextExposingHttpServletRequest extends HttpServletRequestWrapper; // HttpServletRequest decorator that makes all Spring beans in a given WebApplicationContext accessible as request attributes, through lazy checking once an attribute gets accessed.\npublic class GenericWebApplicationContext extends org.springframework.context.support.GenericApplicationContext implements ConfigurableWebApplicationContext, org.springframework.ui.context.ThemeSource; // Subclass of GenericApplicationContext, suitable for web environments.\npublic class GroovyWebApplicationContext extends AbstractRefreshableWebApplicationContext implements groovy.lang.GroovyObject; // WebApplicationContext implementation which takes its configuration from Groovy bean definition scripts and/or XML files, as understood by a GroovyBeanDefinitionReader.\npublic class HttpRequestHandlerServlet extends HttpServlet; // Simple HttpServlet that delegates to an HttpRequestHandler bean defined in Spring's root web application context.\npublic class RequestHandledEvent extends org.springframework.context.ApplicationEvent; // Event raised when a request is handled within an ApplicationContext.\npublic class ServletConfigPropertySource extends org.springframework.core.env.EnumerablePropertySource<ServletConfig>; // PropertySource that reads init parameters from a ServletConfig object.\npublic class ServletContextAttributeExporter extends Object implements ServletContextAware; // Exporter that takes Spring-defined objects and exposes them as ServletContext attributes.\npublic class ServletContextAttributeFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Object>, ServletContextAware; // FactoryBean that fetches a specific, existing ServletContext attribute.\npublic class ServletContextAwareProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // BeanPostProcessor implementation that passes the ServletContext to beans that implement the ServletContextAware interface.\n", "des": "Classes supporting the org.springframework.web.context package, such as WebApplicationContext implementations and various utility classes."}
{"index": 3031, "repo": "spring-web-6.0.11", "code": "package cors;\n\npackage cors.reactive; // Reactive support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy.\npublic class CorsConfiguration extends Object; // A container for CORS configuration along with methods to check against the actual origin, HTTP methods, and headers of a given request.\npublic interface CorsConfigurationSource; // Interface to be implemented by classes (usually HTTP request handlers) that provides a CorsConfiguration instance based on the provided request.\npublic interface CorsProcessor; // A strategy that takes a request and a CorsConfiguration and updates the response.\npublic abstract class CorsUtils extends Object; // Utility class for CORS request handling based on the CORS W3C recommendation.\npublic class DefaultCorsProcessor extends Object implements CorsProcessor; // The default implementation of CorsProcessor, as defined by the CORS W3C recommendation.\npublic class UrlBasedCorsConfigurationSource extends Object implements CorsConfigurationSource; // CorsConfigurationSource that uses URL path patterns to select the CorsConfiguration for a request.\n", "des": "Support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy."}
{"index": 3032, "repo": "spring-web-6.0.11", "code": "package reactive;\n\npublic interface CorsConfigurationSource; // Interface to be implemented by classes (usually HTTP request handlers) that provides a CorsConfiguration instance based on the provided reactive request.\npublic interface CorsProcessor; // A strategy to apply CORS validation checks and updates to a ServerWebExchange, either rejecting through the response or adding CORS related headers, based on a pre-selected CorsConfiguration.\npublic abstract class CorsUtils extends Object; // Utility class for CORS reactive request handling based on the CORS W3C recommendation.\npublic class CorsWebFilter extends Object implements WebFilter; // WebFilter that handles CORS preflight requests and intercepts CORS simple and actual requests thanks to a CorsProcessor implementation (DefaultCorsProcessor by default) in order to add the relevant CORS response headers (like Access-Control-Allow-Origin) using the provided CorsConfigurationSource (for example an UrlBasedCorsConfigurationSource instance.\npublic class DefaultCorsProcessor extends Object implements CorsProcessor; // The default implementation of CorsProcessor, as defined by the CORS W3C recommendation.\npublic interface PreFlightRequestHandler; // Handler for CORS pre-flight requests.\npublic class PreFlightRequestWebFilter extends Object implements WebFilter; // WebFilter that handles pre-flight requests through a PreFlightRequestHandler and bypasses the rest of the chain.\npublic class UrlBasedCorsConfigurationSource extends Object implements CorsConfigurationSource; // CorsConfigurationSource that uses URL patterns to select the CorsConfiguration for a request.\n", "des": "Reactive support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy."}
{"index": 3033, "repo": "spring-web-6.0.11", "code": "package filter;\n\npackage filter.reactive; // WebFilter implementations for use in reactive web applications.\npublic abstract class AbstractRequestLoggingFilter extends OncePerRequestFilter; // Base class for Filters that perform logging operations before and after a request is processed.\npublic class CharacterEncodingFilter extends OncePerRequestFilter; // Servlet Filter that allows one to specify a character encoding for requests.\npublic class CommonsRequestLoggingFilter extends AbstractRequestLoggingFilter; // Simple request logging filter that writes the request URI (and optionally the query string) to the Commons Log.\npublic class CompositeFilter extends Object implements Filter; // A generic composite servlet Filter that just delegates its behavior to a chain (list) of user-supplied filters, achieving the functionality of a FilterChain, but conveniently using only Filter instances.\npublic class CorsFilter extends OncePerRequestFilter; // Filter to handle CORS pre-flight requests and intercept CORS simple and actual requests with a CorsProcessor, and to update the response, e.g.\npublic class DelegatingFilterProxy extends GenericFilterBean; // Proxy for a standard Servlet Filter, delegating to a Spring-managed bean that implements the Filter interface.\npublic class FormContentFilter extends OncePerRequestFilter; // Filter that parses form data for HTTP PUT, PATCH, and DELETE requests and exposes it as Servlet request parameters.\npublic class ForwardedHeaderFilter extends OncePerRequestFilter; // Extract values from \"Forwarded\" and \"X-Forwarded-*\" headers, wrap the request and response, and make they reflect the client-originated protocol and address in the following methods: getServerName() getServerPort() getScheme() isSecure() sendRedirect(String).\npublic abstract class GenericFilterBean extends Object implements Filter, org.springframework.beans.factory.BeanNameAware, org.springframework.context.EnvironmentAware, org.springframework.core.env.EnvironmentCapable, ServletContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Simple base implementation of Filter which treats its config parameters (init-param entries within the filter tag in web.xml) as bean properties.\npublic class HiddenHttpMethodFilter extends OncePerRequestFilter; // Filter that converts posted method parameters into HTTP methods, retrievable via HttpServletRequest.getMethod().\n", "des": "Provides generic filter base classes allowing for bean-style configuration."}
{"index": 3034, "repo": "spring-web-6.0.11", "code": "package reactive;\n\npublic class HiddenHttpMethodFilter extends Object implements WebFilter; // Reactive WebFilter that converts posted method parameters into HTTP methods, retrievable via HttpRequest.getMethod().\npublic class ServerHttpObservationFilter extends Object implements WebFilter; // WebFilter that creates observations for HTTP exchanges.\npublic class ServerWebExchangeContextFilter extends Object implements WebFilter; // Inserts an attribute in the Reactor Context that makes the current ServerWebExchange available under the attribute name ServerWebExchangeContextFilter.EXCHANGE_CONTEXT_ATTRIBUTE.\n", "des": "WebFilter implementations for use in reactive web applications."}
{"index": 3035, "repo": "spring-web-6.0.11", "code": "package jsf;\n\npackage jsf.el; // ELResolvers for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext.\npublic abstract class DecoratingNavigationHandler extends NavigationHandler; // Base class for JSF NavigationHandler implementations that want to be capable of decorating an original NavigationHandler.\npublic class DelegatingNavigationHandlerProxy extends NavigationHandler; // JSF NavigationHandler implementation that delegates to a NavigationHandler bean obtained from the Spring root WebApplicationContext.\npublic class DelegatingPhaseListenerMulticaster extends Object implements PhaseListener; // JSF PhaseListener implementation that delegates to one or more Spring-managed PhaseListener beans coming from the Spring root WebApplicationContext.\npublic abstract class FacesContextUtils extends Object; // Convenience methods to retrieve Spring's root WebApplicationContext for a given JSF FacesContext.\n", "des": "Support classes for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext."}
{"index": 3036, "repo": "spring-web-6.0.11", "code": "package el;\n\npublic class SpringBeanFacesELResolver extends ELResolver; // JSF ELResolver that delegates to the Spring root WebApplicationContext, resolving name references to Spring-defined beans.\npublic class WebApplicationContextFacesELResolver extends ELResolver; // Special JSF ELResolver that exposes the Spring WebApplicationContext instance under a variable named \"webApplicationContext\".\n", "des": "ELResolvers for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext."}
{"index": 3037, "repo": "spring-web-6.0.11", "code": "package method;\n\npackage method.annotation; // Support classes for annotation-based handler method processing.\npackage method.support; // Generic support classes for handler method processing.\npublic class ControllerAdviceBean extends Object implements org.springframework.core.Ordered; // Encapsulates information about an @ControllerAdvice Spring-managed bean without necessarily requiring it to be instantiated.\npublic class HandlerMethod extends Object; // Encapsulates information about a handler method consisting of a method and a bean.\npublic final class HandlerTypePredicate extends Object implements Predicate<Class<?>>; // A Predicate to match request handling component types if any of the following selectors match: Base packages -- for selecting handlers by their package.\npublic static class HandlerTypePredicate.Builder extends Object; // A HandlerTypePredicate builder.\n", "des": "Common infrastructure for handler method processing, as used by Spring MVC's org.springframework.web.servlet.mvc.method package."}
{"index": 3038, "repo": "spring-web-6.0.11", "code": "package annotation;\n\npublic abstract class AbstractCookieValueMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // A base abstract class to resolve method arguments annotated with @CookieValue.\npublic abstract class AbstractNamedValueMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Abstract base class for resolving method arguments from a named value.\nprotected static class AbstractNamedValueMethodArgumentResolver.NamedValueInfo extends Object; // Represents the information about a named value, including name, whether it's required and a default value.\npublic abstract class AbstractWebArgumentResolverAdapter extends Object implements HandlerMethodArgumentResolver; // An abstract base class adapting a WebArgumentResolver to the HandlerMethodArgumentResolver contract.\npublic class ErrorsMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolves Errors method arguments.\npublic class ExceptionHandlerMethodResolver extends Object; // Discovers @ExceptionHandler methods in a given class, including all of its superclasses, and helps to resolve a given Exception to the exception types supported by a given Method.\npublic class ExpressionValueMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver; // Resolves method arguments annotated with @Value.\npublic class InitBinderDataBinderFactory extends DefaultDataBinderFactory; // Adds initialization to a WebDataBinder via @InitBinder methods.\npublic class MapMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler; // Resolves Map method arguments and handles Map return values.\npublic class MethodArgumentConversionNotSupportedException extends org.springframework.beans.ConversionNotSupportedException; // A ConversionNotSupportedException raised while resolving a method argument.\npublic class MethodArgumentTypeMismatchException extends org.springframework.beans.TypeMismatchException; // A TypeMismatchException raised while resolving a controller method argument.\npublic class ModelAttributeMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler; // Resolve @ModelAttribute annotated method arguments and handle return values from @ModelAttribute annotated methods.\npublic final class ModelFactory extends Object; // Assist with initialization of the Model before controller method invocation and with updates to it after the invocation.\npublic class ModelMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler; // Resolves Model arguments and handles Model return values.\npublic class RequestHeaderMapMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolves Map method arguments annotated with @RequestHeader.\n", "des": "Support classes for annotation-based handler method processing."}
{"index": 3039, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic interface AsyncHandlerMethodReturnValueHandler extends HandlerMethodReturnValueHandler; // A return value handler that supports async types.\npublic class CompositeUriComponentsContributor extends Object implements UriComponentsContributor; // A UriComponentsContributor containing a list of other contributors to delegate to and also encapsulating a specific ConversionService to use for formatting method argument values as Strings.\npublic interface HandlerMethodArgumentResolver; // Strategy interface for resolving method parameters into argument values in the context of a given request.\npublic class HandlerMethodArgumentResolverComposite extends Object implements HandlerMethodArgumentResolver; // Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.\npublic interface HandlerMethodReturnValueHandler; // Strategy interface to handle the value returned from the invocation of a handler method.\npublic class HandlerMethodReturnValueHandlerComposite extends Object implements HandlerMethodReturnValueHandler; // Handles method return values by delegating to a list of registered HandlerMethodReturnValueHandlers.\npublic class InvocableHandlerMethod extends HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\npublic class ModelAndViewContainer extends Object; // Records model and view related decisions made by HandlerMethodArgumentResolvers and HandlerMethodReturnValueHandlers during the course of invocation of a controller method.\npublic interface UriComponentsContributor; // Strategy for contributing to the building of a UriComponents by looking at a method parameter and an argument value and deciding what part of the target URL should be updated.\n", "des": "Generic support classes for handler method processing."}
{"index": 3040, "repo": "spring-web-6.0.11", "code": "package multipart;\n\npackage multipart.support; // Support classes for the multipart resolution framework.\npublic class MaxUploadSizeExceededException extends MultipartException; // MultipartException subclass thrown when an upload exceeds the maximum upload size allowed.\npublic class MultipartException extends org.springframework.core.NestedRuntimeException; // Exception thrown when multipart resolution fails.\npublic interface MultipartFile extends org.springframework.core.io.InputStreamSource; // A representation of an uploaded file received in a multipart request.\npublic interface MultipartHttpServletRequest extends HttpServletRequest, MultipartRequest; // Provides additional methods for dealing with multipart content within a servlet request, allowing to access uploaded files.\npublic interface MultipartRequest; // This interface defines the multipart request access operations that are exposed for actual multipart requests.\npublic interface MultipartResolver; // A strategy interface for multipart file upload resolution in accordance with RFC 1867.\n", "des": "Multipart resolution framework for handling file uploads."}
{"index": 3041, "repo": "spring-web-6.0.11", "code": "package support;\n\npublic abstract class AbstractMultipartHttpServletRequest extends HttpServletRequestWrapper implements MultipartHttpServletRequest; // Abstract base implementation of the MultipartHttpServletRequest interface.\npublic class ByteArrayMultipartFileEditor extends org.springframework.beans.propertyeditors.ByteArrayPropertyEditor; // Custom PropertyEditor for converting MultipartFiles to byte arrays.\npublic class DefaultMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest; // Default implementation of the MultipartHttpServletRequest interface.\npublic class MissingServletRequestPartException extends ServletException implements ErrorResponse; // Signals the part of a \"multipart/form-data\" request, identified by name could not be found.\npublic class MultipartFilter extends OncePerRequestFilter; // Servlet Filter that resolves multipart requests via a MultipartResolver.\npublic final class MultipartResolutionDelegate extends Object; // A common delegate for HandlerMethodArgumentResolver implementations which need to resolve MultipartFile and Part arguments.\npublic class RequestPartServletServerHttpRequest extends ServletServerHttpRequest; // ServerHttpRequest implementation that accesses one part of a multipart request.\npublic class StandardMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest; // Spring MultipartHttpServletRequest adapter, wrapping a Servlet HttpServletRequest and its Part objects.\npublic class StandardServletMultipartResolver extends Object implements MultipartResolver; // Standard implementation of the MultipartResolver interface, based on the Servlet Part API.\npublic abstract class StandardServletPartUtils extends Object; // Utility methods for standard Servlet Part handling.\npublic class StringMultipartFileEditor extends PropertyEditorSupport; // Custom PropertyEditor for converting MultipartFiles to Strings.\n", "des": "Support classes for the multipart resolution framework."}
{"index": 3042, "repo": "spring-web-6.0.11", "code": "package server;\n\npackage server.adapter; // Implementations to adapt to the underlying org.springframework.http.client.reactive reactive HTTP adapter and HttpHandler.\npackage server.handler; // Provides common WebHandler implementations and a WebHandlerDecorator.\npackage server.i18n; // Locale related support classes.\npackage server.session; // Auxiliary interfaces and implementation classes for WebSession support.\npublic class MethodNotAllowedException extends ResponseStatusException; // Exception for errors that fit response status 405 (method not allowed).\npublic class MissingRequestValueException extends ServerWebInputException; // ServerWebInputException subclass that indicates a missing request value such as a request header, cookie value, query parameter, etc.\npublic class NotAcceptableStatusException extends ResponseStatusException; // Exception for errors that fit response status 406 (not acceptable).\npublic class ResponseStatusException extends ErrorResponseException; // Subclass of ErrorResponseException that accepts a \"reason\", and by default maps that to the \"detail\" of the ProblemDetail.\npublic class ServerErrorException extends ResponseStatusException; // Exception for an HttpStatus.INTERNAL_SERVER_ERROR that exposes extra information about a controller method that failed, or a controller method argument that could not be resolved.\npublic interface ServerWebExchange; // Contract for an HTTP request-response interaction.\npublic static interface ServerWebExchange.Builder; // Builder for mutating an existing ServerWebExchange.\npublic class ServerWebExchangeDecorator extends Object implements ServerWebExchange; // A convenient base class for classes that need to wrap another ServerWebExchange.\npublic class ServerWebInputException extends ResponseStatusException; // Exception for errors that fit response status 400 (bad request) for use in Spring Web applications.\npublic class UnsatisfiedRequestParameterException extends ServerWebInputException; // ServerWebInputException subclass that indicates an unsatisfied parameter condition, as typically expressed using an @RequestMapping annotation at the @Controller type level.\npublic class UnsupportedMediaTypeStatusException extends ResponseStatusException; // Exception for errors that fit response status 415 (unsupported media type).\npublic interface WebExceptionHandler; // Contract for handling exceptions during web server exchange processing.\npublic interface WebFilter; // Contract for interception-style, chained processing of Web requests that may be used to implement cross-cutting, application-agnostic requirements such as security, timeouts, and others.\n", "des": "Core interfaces and classes for Spring's generic, reactive web support."}
{"index": 3043, "repo": "spring-web-6.0.11", "code": "package adapter;\n\npublic abstract class AbstractReactiveWebInitializer extends Object implements WebApplicationInitializer; // Base class for a WebApplicationInitializer that installs a Spring Reactive Web Application on a Servlet container.\npublic class DefaultServerWebExchange extends Object implements ServerWebExchange; // Default implementation of ServerWebExchange.\npublic class ForwardedHeaderTransformer extends Object implements Function<ServerHttpRequest,ServerHttpRequest>; // Extract values from \"Forwarded\" and \"X-Forwarded-*\" headers to override the request URI (i.e.\npublic class HttpWebHandlerAdapter extends WebHandlerDecorator implements HttpHandler; // Default adapter of WebHandler to the HttpHandler contract.\npublic final class WebHttpHandlerBuilder extends Object; // This builder has two purposes:\npublic static class WebHttpHandlerBuilder.SpringWebBlockHoundIntegration extends Object implements reactor.blockhound.integration.BlockHoundIntegration; // BlockHoundIntegration for spring-web classes.\n", "des": "Implementations to adapt to the underlying org.springframework.http.client.reactive reactive HTTP adapter and HttpHandler."}
{"index": 3044, "repo": "spring-web-6.0.11", "code": "package handler;\n\npublic class DefaultWebFilterChain extends Object implements WebFilterChain; // Default implementation of WebFilterChain.\npublic class ExceptionHandlingWebHandler extends WebHandlerDecorator; // WebHandler decorator that invokes one or more WebExceptionHandlers after the delegate WebHandler.\npublic class FilteringWebHandler extends WebHandlerDecorator; // WebHandlerDecorator that invokes a chain of WebFilters before invoking the delegate WebHandler.\npublic class ResponseStatusExceptionHandler extends Object implements WebExceptionHandler; // Handle ResponseStatusException by setting the response status.\npublic class WebHandlerDecorator extends Object implements WebHandler; // WebHandler that decorates and delegates to another WebHandler.\n", "des": "Provides common WebHandler implementations and a WebHandlerDecorator."}
{"index": 3045, "repo": "spring-web-6.0.11", "code": "package i18n;\n\npublic class AcceptHeaderLocaleContextResolver extends Object implements LocaleContextResolver; // LocaleContextResolver implementation that looks for a match between locales in the Accept-Language header and a list of configured supported locales.\npublic class FixedLocaleContextResolver extends Object implements LocaleContextResolver; // LocaleContextResolver implementation that always returns a fixed locale and optionally time zone.\npublic interface LocaleContextResolver; // Interface for web-based locale context resolution strategies that allows for both locale context resolution via the request and locale context modification via the HTTP exchange.\n", "des": "Locale related support classes."}
{"index": 3046, "repo": "spring-web-6.0.11", "code": "package session;\n\npublic class CookieWebSessionIdResolver extends Object implements WebSessionIdResolver; // Cookie-based WebSessionIdResolver.\npublic class DefaultWebSessionManager extends Object implements WebSessionManager; // Default implementation of WebSessionManager delegating to a WebSessionIdResolver for session id resolution and to a WebSessionStore.\npublic class HeaderWebSessionIdResolver extends Object implements WebSessionIdResolver; // Request and response header-based WebSessionIdResolver.\npublic class InMemoryWebSessionStore extends Object implements WebSessionStore; // Simple Map-based storage for WebSession instances.\npublic interface WebSessionIdResolver; // Contract for session ID resolution strategies.\npublic interface WebSessionManager; // Main class for access to the WebSession for an HTTP request.\npublic interface WebSessionStore; // Strategy for WebSession persistence.\n", "des": "Auxiliary interfaces and implementation classes for WebSession support."}
{"index": 3047, "repo": "spring-web-6.0.11", "code": "package annotation;\n\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"DELETE\") public @interface DeleteExchange; // Shortcut for @HttpExchange for HTTP DELETE requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"GET\") public @interface GetExchange; // Shortcut for @HttpExchange for HTTP GET requests.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(org.springframework.web.service.annotation.HttpExchangeReflectiveProcessor.class) public @interface HttpExchange; // Annotation to declare a method on an HTTP service interface as an HTTP endpoint.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"PATCH\") public @interface PatchExchange; // Shortcut for @HttpExchange for HTTP PATCH requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"POST\") public @interface PostExchange; // Shortcut for @HttpExchange for HTTP POST requests.\n@Target(METHOD) @Retention(RUNTIME) @Documented @HttpExchange(method=\"PUT\") public @interface PutExchange; // Shortcut for @HttpExchange for HTTP PUT requests.\n", "des": "Annotations for declaring HTTP service request methods."}
{"index": 3048, "repo": "spring-web-6.0.11", "code": "package invoker;\n\npublic abstract class AbstractNamedValueArgumentResolver extends Object implements HttpServiceArgumentResolver; // Base class for arguments that resolve to a named request value such as a request header, path variable, cookie, and others.\nprotected static class AbstractNamedValueArgumentResolver.NamedValueInfo extends Object; // Info about a request value, typically extracted from a method parameter annotation.\npublic class CookieValueArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @CookieValue annotated arguments.\npublic interface HttpClientAdapter; // Contract to abstract the underlying HTTP client and decouple it from the HTTP service proxy.\npublic class HttpMethodArgumentResolver extends Object implements HttpServiceArgumentResolver; // HttpServiceArgumentResolver that resolves the target request's HTTP method from an HttpMethod argument.\npublic final class HttpRequestValues extends Object; // Container for HTTP request values extracted from an @HttpExchange-annotated method and argument values passed to it.\npublic static final class HttpRequestValues.Builder extends Object; // Builder for HttpRequestValues.\npublic interface HttpServiceArgumentResolver; // Resolve an argument from an @HttpExchange-annotated method to one or more HTTP request values.\npublic final class HttpServiceProxyFactory extends Object; // Factory to create a client proxy from an HTTP service interface with @HttpExchange methods.\npublic static final class HttpServiceProxyFactory.Builder extends Object; // Builder to create an HttpServiceProxyFactory.\npublic class PathVariableArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @PathVariable annotated arguments.\npublic class RequestAttributeArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestAttribute annotated arguments.\npublic class RequestBodyArgumentResolver extends Object implements HttpServiceArgumentResolver; // HttpServiceArgumentResolver for @RequestBody annotated arguments.\npublic class RequestHeaderArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestHeader annotated arguments.\npublic class RequestParamArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestParam annotated arguments.\npublic class RequestPartArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestPart annotated arguments.\npublic class UrlArgumentResolver extends Object implements HttpServiceArgumentResolver; // HttpServiceArgumentResolver that resolves the URL for the request from a URI argument.\n", "des": "Support for creating a client proxy for an HTTP service annotated with HttpExchange methods."}
{"index": 3049, "repo": "spring-web-6.0.11", "code": "package util;\n\npackage util.pattern; // Dedicated support for matching HTTP request paths.\npublic class ContentCachingRequestWrapper extends HttpServletRequestWrapper; // HttpServletRequest wrapper that caches all content read from the input stream and reader, and allows this content to be retrieved via a byte array.\npublic class ContentCachingResponseWrapper extends HttpServletResponseWrapper; // HttpServletResponse wrapper that caches all content written to the output stream and writer, and allows this content to be retrieved via a byte array.\n@Deprecated public class CookieGenerator extends Object;\npublic class DefaultUriBuilderFactory extends Object implements UriBuilderFactory; // UriBuilderFactory that relies on UriComponentsBuilder for the actual building of the URI.\npublic static enum DefaultUriBuilderFactory.EncodingMode extends Enum<DefaultUriBuilderFactory.EncodingMode>; // Enum to represent multiple URI encoding strategies.\npublic abstract class HtmlUtils extends Object; // Utility class for HTML escaping.\npublic class HttpSessionMutexListener extends Object implements HttpSessionListener; // Servlet HttpSessionListener that automatically exposes the session mutex when an HttpSession gets created.\npublic class IntrospectorCleanupListener extends Object implements ServletContextListener; // Listener that flushes the JDK's JavaBeans Introspector cache on web app shutdown.\npublic abstract class JavaScriptUtils extends Object; // Utility class for JavaScript escaping.\n@Deprecated(since=\"6.0\") public class NestedServletException extends ServletException;\npublic abstract class ServletContextPropertyUtils extends Object; // Helper class for resolving placeholders in texts.\npublic abstract class ServletRequestPathUtils extends Object; // Utility class to assist with preparation and access to the lookup path for request mapping purposes.\npublic abstract class TagUtils extends Object; // Utility class for tag library related code, exposing functionality such as translating Strings to web scopes.\npublic interface UriBuilder; // Builder-style methods to prepare and expand a URI template with variables.\npublic interface UriBuilderFactory extends UriTemplateHandler; // Factory to create UriBuilder instances with shared configuration such as a base URI, an encoding mode strategy, and others across all URI builder instances created through a factory.\npublic abstract class UriComponents extends Object implements Serializable; // Represents an immutable collection of URI components, mapping component type to String values.\npublic static interface UriComponents.UriTemplateVariables; // Defines the contract for URI Template variables.\npublic class UriComponentsBuilder extends Object implements UriBuilder, Cloneable; // Builder for UriComponents.\n", "des": "Miscellaneous web utility classes, such as HTML escaping and cookie handling."}
{"index": 3050, "repo": "spring-web-6.0.11", "code": "package pattern;\n\npublic class PathPattern extends Object implements Comparable<PathPattern>; // Representation of a parsed path pattern.\npublic static class PathPattern.PathMatchInfo extends Object; // Holder for URI variables and path parameters (matrix variables) extracted based on the pattern for a given matched path.\npublic static class PathPattern.PathRemainingMatchInfo extends Object; // Holder for the result of a match on the start of a pattern.\npublic class PathPatternParser extends Object; // Parser for URI path patterns producing PathPattern instances that can then be matched to requests.\npublic class PathPatternRouteMatcher extends Object implements org.springframework.util.RouteMatcher; // RouteMatcher built on PathPatternParser that uses PathContainer and PathPattern as parsed representations of routes and patterns.\npublic class PatternParseException extends IllegalArgumentException; // Exception that is thrown when there is a problem with the pattern being parsed.\npublic static enum PatternParseException.PatternMessage extends Enum<PatternParseException.PatternMessage>; // The messages that can be included in a PatternParseException when there is a parse failure.\n", "des": "Dedicated support for matching HTTP request paths."}
{"index": 3051, "repo": "spring-ws-core-4.0.5", "code": "package ws;\n\npackage ws.client; // Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access.\npackage ws.config; // Provides an namespace handler for the Spring Web Services namespace.\npackage ws.context; // Contains the MessageContext interface and implementations thereof.\npackage ws.mime; // Provides MIME functionality for use the Spring Web Services framework.\npackage ws.pox; // Provides the Plain Old XML (POX) functionality of the Spring Web Services framework.\npackage ws.server; // Contains classes for server-side Spring-WS support.\npackage ws.soap; // Provides the SOAP functionality of the Spring Web Services framework.\npackage ws.support; // Provides general helper classes for Spring Web Services.\npackage ws.transport; // Contains the TransportRequest and TransportResponse interfaces.\npackage ws.wsdl; // Provides the WSDL functionality of the Spring Web Services framework.\npublic interface FaultAwareWebServiceMessage extends WebServiceMessage; // Sub-interface of WebServiceMessage that can contain special Fault messages.\npublic final class InvalidXmlException extends WebServiceException; // Exception thrown when a WebServiceMessageFactory cannot parse the XML passed on to WebServiceMessageFactory.createWebServiceMessage(java.io.InputStream).\npublic final class NoEndpointFoundException extends WebServiceException; // Exception thrown when an endpoint cannot be resolved for an incoming message request.\npublic abstract class WebServiceException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of Web Service exceptions.\npublic interface WebServiceMessage; // Represents a protocol-agnostic XML message.\npublic abstract class WebServiceMessageException extends WebServiceException; // Base class for all web service message exceptions.\npublic interface WebServiceMessageFactory; // The WebServiceMessageFactory serves as a factory for WebServiceMessages.\n", "des": "Provides the core functionality of the Spring Web Services framework."}
{"index": 3052, "repo": "spring-ws-core-4.0.5", "code": "package client;\n\npackage client.core; // Core package of the Spring-WS client-side support.\npackage client.support; // Classes supporting the org.springframework.ws.client.core package.\npublic abstract class WebServiceClientException extends WebServiceException; // Exception thrown whenever an error occurs on the client-side.\npublic class WebServiceFaultException extends WebServiceClientException; // Thrown by SimpleFaultMessageResolver when the response message has a fault.\npublic class WebServiceIOException extends WebServiceClientException; // Exception thrown whenever an I/O error occurs on the client-side.\npublic class WebServiceTransformerException extends WebServiceClientException; // Exception thrown whenever a transformation error occurs on the client-side.\npublic class WebServiceTransportException extends WebServiceIOException; // Exception thrown whenever a transport error occurs on the client-side.\n", "des": "Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access."}
{"index": 3053, "repo": "spring-ws-core-4.0.5", "code": "package core;\n\npackage core.support; // Convenient super class for application classes that need Web service access.\npublic interface FaultMessageResolver; // Defines the interface for objects than can resolve fault WebServiceMessages.\npublic class SimpleFaultMessageResolver extends Object implements FaultMessageResolver; // Simple fault resolver that simply throws a WebServiceFaultException when a fault occurs.\npublic interface SourceExtractor<T>; // Callback interface for extracting a result object from a Source instance.\npublic interface WebServiceMessageCallback; // Generic callback interface for code that operates on a WebServiceMessage.\npublic interface WebServiceMessageExtractor<T>; // Callback interface for extracting a result object from a WebServiceMessage instance.\npublic interface WebServiceOperations; // Specifies a basic set of Web service operations.\npublic class WebServiceTemplate extends WebServiceAccessor implements WebServiceOperations; // The central class for client-side Web services. It provides a message-driven approach to sending and receiving WebServiceMessage instances.\n", "des": "Core package of the Spring-WS client-side support."}
{"index": 3054, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic abstract class WebServiceGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean; // Convenient super class for application classes that need Web service access.\n", "des": "Convenient super class for application classes that need Web service access."}
{"index": 3055, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npackage support.destination; // Provides the DestinationProvider interface.\npackage support.interceptor; // Provides the ClientInterceptor interface, and validating interceptors.\npublic abstract class WebServiceAccessor extends org.springframework.xml.transform.TransformerObjectSupport implements org.springframework.beans.factory.InitializingBean; // Base class for WebServiceTemplate and other WS-accessing helpers.\n", "des": "Classes supporting the org.springframework.ws.client.core package."}
{"index": 3056, "repo": "spring-ws-core-4.0.5", "code": "package destination;\n\npublic abstract class AbstractCachingDestinationProvider extends Object implements DestinationProvider; // Abstract base class for DestinationProvider implementations that cache destination URI.\npublic interface DestinationProvider; // Strategy interface for providing a WebServiceTemplate destination URI at runtime.\npublic class DestinationProvisionException extends WebServiceClientException; // Thrown by a DestinationProvider when it cannot provide a destination.\npublic class Wsdl11DestinationProvider extends AbstractCachingDestinationProvider; // Implementation of the DestinationProvider that resolves a destination URI from a WSDL file.\n", "des": "Provides the DestinationProvider interface."}
{"index": 3057, "repo": "spring-ws-core-4.0.5", "code": "package interceptor;\n\npublic abstract class AbstractValidatingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements ClientInterceptor, org.springframework.beans.factory.InitializingBean; // Abstract base class for ClientInterceptor implementations that validate part of the message using a schema.\npublic interface ClientInterceptor; // Workflow interface that allows for customized client-side message interception.\npublic abstract class ClientInterceptorAdapter extends Object implements ClientInterceptor; // Default implementation of the ClientInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\npublic class PayloadValidatingInterceptor extends AbstractValidatingInterceptor; // Client-side interceptor that validates the contents of WebServiceMessages using a schema.\npublic class WebServiceValidationException extends WebServiceClientException; // Exception thrown whenever a validation error occurs on the client-side.\n", "des": "Provides the ClientInterceptor interface, and validating interceptors."}
{"index": 3058, "repo": "spring-ws-core-4.0.5", "code": "package config;\n\npublic class WebServicesNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'web-services' namespace.\n", "des": "Provides an namespace handler for the Spring Web Services namespace."}
{"index": 3059, "repo": "spring-ws-core-4.0.5", "code": "package context;\n\npublic abstract class AbstractMessageContext extends Object implements MessageContext; // Abstract base class for MessageContext instances.\npublic class DefaultMessageContext extends AbstractMessageContext; // Default implementation of MessageContext.\npublic interface MessageContext; // Context holder for message requests.\n", "des": "Contains the MessageContext interface and implementations thereof."}
{"index": 3060, "repo": "spring-ws-core-4.0.5", "code": "package mime;\n\npublic abstract class AbstractMimeMessage extends Object implements MimeMessage; // Abstract implementation of the MimeMessage interface.\npublic interface Attachment; // Represents an attachment to a MimeMessage\npublic class AttachmentException extends WebServiceMessageException; // Exception thrown when a MIME attachment could not be accessed.\npublic interface MimeMessage extends WebServiceMessage; // Represents a Web service message with MIME attachments.\n", "des": "Provides MIME functionality for use the Spring Web Services framework."}
{"index": 3061, "repo": "spring-ws-core-4.0.5", "code": "package pox;\n\npackage pox.dom; // Contains an implementation of the POX interfaces that is based on DOM.\npublic interface PoxMessage extends WebServiceMessage; // Defines the contract for Plain Old XML messages.\npublic abstract class PoxMessageException extends WebServiceMessageException; // Specific subclass of WebServiceMessageException for Plain Old XML messages.\n", "des": "Provides the Plain Old XML (POX) functionality of the Spring Web Services framework."}
{"index": 3062, "repo": "spring-ws-core-4.0.5", "code": "package dom;\n\npublic class DomPoxMessage extends Object implements PoxMessage; // Implementation of the PoxMessage interface that is based on a DOM Document.\npublic class DomPoxMessageException extends PoxMessageException; // Specific subclass of PoxMessageException for DOM Plain Old XML messages.\npublic class DomPoxMessageFactory extends org.springframework.xml.transform.TransformerObjectSupport implements WebServiceMessageFactory; // Implementation of the WebServiceMessageFactory interface that creates a DomPoxMessage.\n", "des": "Contains an implementation of the POX interfaces that is based on DOM."}
{"index": 3063, "repo": "spring-ws-core-4.0.5", "code": "package server;\n\npackage server.endpoint; // Provides standard endpoint, and EndpointAdapter implementations.\npublic interface EndpointAdapter; // Interface that must be implemented for each endpoint type to handle a message request.\npublic interface EndpointExceptionResolver; // Defines the interface for objects than can resolve exceptions thrown during endpoint execution.\npublic interface EndpointInterceptor; // Workflow interface that allows for customized endpoint invocation chains.\npublic class EndpointInvocationChain extends Object; // Endpoint invocation chain, consisting of an endpoint object and any preprocessing interceptors.\npublic interface EndpointMapping; // Defines a mapping between message requests and endpoint objects.\npublic class MessageDispatcher extends Object implements WebServiceMessageReceiver, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware; // Central dispatcher for use within Spring-WS, dispatching Web service messages to registered endpoints.\npublic interface SmartEndpointInterceptor extends EndpointInterceptor; // Extension of the EndpointInterceptor interface that adds a way to decide whether the interceptor should intercept a given message context.\n", "des": "Contains classes for server-side Spring-WS support."}
{"index": 3064, "repo": "spring-ws-core-4.0.5", "code": "package endpoint;\n\npackage endpoint.adapter; // Provides miscellaneous EndpointAdapter implementations.\npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations.\npackage endpoint.support; // Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations.\n@Deprecated public abstract class AbstractDom4jPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\n@Deprecated public abstract class AbstractDomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\npublic abstract class AbstractEndpointExceptionResolver extends Object implements EndpointExceptionResolver, org.springframework.core.Ordered; // Abstract base class for EndpointExceptionResolvers.\n@Deprecated public abstract class AbstractJDomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\npublic abstract class AbstractLoggingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor; // Abstract base class for EndpointInterceptor instances that log a part of a WebServiceMessage.\n@Deprecated public abstract class AbstractMarshallingPayloadEndpoint extends Object implements MessageEndpoint, org.springframework.beans.factory.InitializingBean;\n@Deprecated public abstract class AbstractSaxPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\n@Deprecated public abstract class AbstractStaxEventPayloadEndpoint extends AbstractStaxPayloadEndpoint implements MessageEndpoint;\n@Deprecated public abstract class AbstractStaxPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport;\n@Deprecated public abstract class AbstractStaxStreamPayloadEndpoint extends AbstractStaxPayloadEndpoint implements MessageEndpoint;\n@Deprecated public abstract class AbstractValidatingMarshallingPayloadEndpoint extends AbstractMarshallingPayloadEndpoint;\n@Deprecated public abstract class AbstractXomPayloadEndpoint extends org.springframework.xml.transform.TransformerObjectSupport implements PayloadEndpoint;\npublic interface MessageEndpoint; // Defines the basic contract for Web Services interested in the entire message payload.\npublic final class MethodEndpoint extends Object; // Represents a bean method that will be invoked as part of an incoming Web service message.\n", "des": "Provides standard endpoint, and EndpointAdapter implementations."}
{"index": 3065, "repo": "spring-ws-core-4.0.5", "code": "package adapter;\n\npackage adapter.method; // Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof.\npublic abstract class AbstractMethodEndpointAdapter extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointAdapter; // Abstract base class for EndpointAdapter implementations that support MethodEndpoints.\npublic class DefaultMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Default extension of AbstractMethodEndpointAdapter with support for pluggable argument resolvers and return value handlers.\n@Deprecated public class GenericMarshallingMethodEndpointAdapter extends MarshallingMethodEndpointAdapter;\n@Deprecated public class MarshallingMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.InitializingBean;\npublic class MessageEndpointAdapter extends Object implements EndpointAdapter; // Adapter to use a MessageEndpoint as the endpoint for a EndpointInvocationChain.\n@Deprecated public class MessageMethodEndpointAdapter extends AbstractMethodEndpointAdapter;\npublic class PayloadEndpointAdapter extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointAdapter; // Adapter to use a PayloadEndpoint as the endpoint for a EndpointInvocationChain.\n@Deprecated public class PayloadMethodEndpointAdapter extends AbstractMethodEndpointAdapter;\n@Deprecated public class XPathParamAnnotationMethodEndpointAdapter extends AbstractMethodEndpointAdapter implements org.springframework.beans.factory.InitializingBean;\n", "des": "Provides miscellaneous EndpointAdapter implementations."}
{"index": 3066, "repo": "spring-ws-core-4.0.5", "code": "package method;\n\npackage method.dom; // Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\npackage method.jaxb; // Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\npublic abstract class AbstractPayloadMethodProcessor extends org.springframework.xml.transform.TransformerObjectSupport implements MethodArgumentResolver, MethodReturnValueHandler; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on RequestPayload and ResponsePayload annotations.\npublic abstract class AbstractPayloadSourceMethodProcessor extends AbstractPayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on Sources.\npublic class MarshallingPayloadMethodProcessor extends AbstractPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that uses Marshaller and Unmarshaller to support marshalled objects.\npublic class MessageContextMethodArgumentResolver extends Object implements MethodArgumentResolver; // Implementation of MethodArgumentResolver that supports MessageContext arguments.\npublic interface MethodArgumentResolver; // Strategy interface used to resolve method parameters into arguments.\npublic interface MethodReturnValueHandler; // Strategy interface used to handle method return values.\npublic class SourcePayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports Source objects.\npublic class StaxPayloadMethodArgumentResolver extends org.springframework.xml.transform.TransformerObjectSupport implements MethodArgumentResolver; // Implementation of MethodArgumentResolver that supports StAX XMLStreamReader and XMLEventReader arguments.\npublic class XPathParamMethodArgumentResolver extends Object implements MethodArgumentResolver; // Implementation of MethodArgumentResolver that supports the @XPathParam annotation.\n", "des": "Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof."}
{"index": 3067, "repo": "spring-ws-core-4.0.5", "code": "package dom;\n\npublic class Dom4jPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports dom4j elements.\npublic class DomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports W3C DOM elements.\npublic class JDomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JDOM elements.\npublic class XomPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports XOM elements.\n", "des": "Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 3068, "repo": "spring-ws-core-4.0.5", "code": "package jaxb;\n\npublic abstract class AbstractJaxb2PayloadMethodProcessor extends AbstractPayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations that use JAXB2.\npublic class JaxbElementPayloadMethodProcessor extends AbstractJaxb2PayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JAXBElement objects.\npublic class XmlRootElementPayloadMethodProcessor extends AbstractJaxb2PayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports parameters annotated with @XmlRootElement or @XmlType, and return values annotated with @XmlRootElement.\n", "des": "Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces."}
{"index": 3069, "repo": "spring-ws-core-4.0.5", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Endpoint; // Indicates that an annotated class is an \"Endpoint\" (e.g.\n@Documented @Retention(RUNTIME) @Target({PACKAGE,TYPE,METHOD}) public @interface Namespace; // Sets up a namespace to be used in an @Endpoint method, class, or package.\n@Documented @Retention(RUNTIME) @Target({PACKAGE,TYPE,METHOD}) public @interface Namespaces; // Sets the namespaces to be used in an @Endpoint method, class, or package.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Repeatable(PayloadRoots.class) public @interface PayloadRoot; // Marks an endpoint method as the handler for an incoming request.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface PayloadRoots; // Marks an endpoint method as containing multiple PayloadRoots.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface RequestPayload; // Annotation which indicates that a method parameter should be bound to the request payload.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ResponsePayload; // Annotation which indicates that a method return value should be bound to the response payload.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface XPathParam; // Indicates that a method parameter should be bound to an XPath expression.\n", "des": "JDK 1.5+ annotations for Spring-WS endpoints."}
{"index": 3070, "repo": "spring-ws-core-4.0.5", "code": "package interceptor;\n\npublic abstract class AbstractValidatingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor, org.springframework.beans.factory.InitializingBean; // Abstract base class for EndpointInterceptor implementations that validate part of the message using a schema.\npublic class DelegatingSmartEndpointInterceptor extends Object implements SmartEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that delegates to a delegate EndpointInterceptor.\npublic class EndpointInterceptorAdapter extends Object implements EndpointInterceptor; // Default implementation of the EndpointInterceptor interface, for simplified implementation of pre-only/post-only interceptors.\npublic class PayloadLoggingInterceptor extends AbstractLoggingInterceptor; // Simple EndpointInterceptor that logs the payload of request and response messages.\npublic class PayloadTransformingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor, org.springframework.beans.factory.InitializingBean; // Interceptor that transforms the payload of WebServiceMessages using XSLT stylesheet.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations."}
{"index": 3071, "repo": "spring-ws-core-4.0.5", "code": "package mapping;\n\npackage mapping.jaxb; // Provides JAXB2-based EndpointMapping implementations.\npublic abstract class AbstractAnnotationMethodEndpointMapping<T> extends AbstractMethodEndpointMapping<T>; // Abstract base for EndpointMapping implementations that map classes tagged with an annotation.\npublic abstract class AbstractEndpointMapping extends org.springframework.context.support.ApplicationObjectSupport implements EndpointMapping, org.springframework.core.Ordered; // Abstract base class for EndpointMapping implementations.\npublic abstract class AbstractMapBasedEndpointMapping extends AbstractEndpointMapping; // Abstract base class for endpoint mapping that are based on a Map.\npublic abstract class AbstractMethodEndpointMapping<T> extends AbstractEndpointMapping; // Abstract base class for MethodEndpoint mappings.\npublic abstract class AbstractQNameEndpointMapping extends AbstractMapBasedEndpointMapping; // Abstract base class for EndpointMappings that resolve qualified names as registration keys.\npublic class PayloadRootAnnotationMethodEndpointMapping extends AbstractAnnotationMethodEndpointMapping<QName>; // Implementation of the EndpointMapping interface that uses the PayloadRoot annotation to map methods to request payload root elements.\npublic class PayloadRootQNameEndpointMapping extends AbstractQNameEndpointMapping; // Implementation of the EndpointMapping interface to map from the qualified name of the request payload root element.\npublic class SimpleMethodEndpointMapping extends AbstractMethodEndpointMapping<String> implements org.springframework.beans.factory.InitializingBean; // Simple subclass of AbstractMethodEndpointMapping that maps from the local name of the request payload to methods.\npublic class UriEndpointMapping extends AbstractMapBasedEndpointMapping; // Implementation of the EndpointMapping interface to map from the full request URI or request URI path to endpoint beans.\npublic class XPathPayloadEndpointMapping extends AbstractMapBasedEndpointMapping implements org.springframework.beans.factory.InitializingBean; // Implementation of the EndpointMapping interface that maps to endpoint using an XPath expression.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations."}
{"index": 3072, "repo": "spring-ws-core-4.0.5", "code": "package jaxb;\n\npublic class XmlRootElementEndpointMapping extends AbstractAnnotationMethodEndpointMapping<QName>; // Implementation of the EndpointMapping interface that uses the JAXB2 XmlRootElement annotation to map methods to request payload root elements.\n", "des": "Provides JAXB2-based EndpointMapping implementations."}
{"index": 3073, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic abstract class NamespaceUtils extends Object; // Helper class for handling @Namespace annotations.\npublic abstract class PayloadRootUtils extends Object; // Helper class for determining the root qualified name of a Web Service payload.\n", "des": "Provides helper classes for EndpointAdapter, EndpointInteceptor, and EndpointMapping implementations."}
{"index": 3074, "repo": "spring-ws-core-4.0.5", "code": "package soap;\n\npackage soap.addressing; // Provides WS-Addressing implementation classes.\npackage soap.client; // Contains classes for SOAP-specific client-side Spring-WS support.\npackage soap.saaj; // SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure.\npackage soap.server; // Contains classes for SOAP-specific server-side Spring-WS support.\npackage soap.soap11; // Contains interfaces specific to SOAP 1.1.\npackage soap.soap12; // Contains interfaces specific to SOAP 1.2.\npackage soap.support; // Classes supporting the org.springframework.ws.soap package.\npublic abstract class AbstractSoapMessage extends AbstractMimeMessage implements SoapMessage; // Abstract implementation of the SoapMessage interface.\npublic interface SoapBody extends SoapElement; // Represents the Body element in a SOAP message.\npublic class SoapBodyException extends SoapMessageException; // Exception thrown when a SOAP body could not be accessed.\npublic interface SoapElement; // The base interface for all elements that are contained in a SOAP message.\npublic class SoapElementException extends SoapMessageException; // Exception thrown when a SOAP element could not be accessed.\npublic interface SoapEnvelope extends SoapElement; // Represents the Envelope element in a SOAP message.\npublic class SoapEnvelopeException extends SoapMessageException; // Exception thrown when a SOAP body could not be accessed.\npublic interface SoapFault extends SoapElement; // Represents the Fault element in the body of a SOAP message.\npublic interface SoapFaultDetail extends SoapElement; // Represents the detail element in a SOAP fault.\npublic interface SoapFaultDetailElement extends SoapElement; // Represents the content for an individual SOAP detail entry in a SOAP Message.\npublic class SoapFaultException extends SoapEnvelopeException; // Exception thrown when a SOAP fault could not be accessed.\npublic interface SoapHeader extends SoapElement; // Represents the Header element in a SOAP message.\npublic interface SoapHeaderElement extends SoapElement; // Represents the contents of an individual SOAP header in the a SOAP message.\npublic class SoapHeaderException extends SoapMessageException; // Exception thrown when a SOAP header could not be accessed.\npublic interface SoapMessage extends MimeMessage, FaultAwareWebServiceMessage; // Represents an abstraction for SOAP messages, providing access to a SOAP Envelope.\n", "des": "Provides the SOAP functionality of the Spring Web Services framework."}
{"index": 3075, "repo": "spring-ws-core-4.0.5", "code": "package addressing;\n\npackage addressing.core; // Core package for WS-Addressing support.\npackage addressing.messageid; // Contains various strategies for generating WS-Addressing MessageIDs.\npackage addressing.server; // Contains servers-side WS-Addressing support, in the form of EndpointMappings.\npackage addressing.version; // Contains abstractions over various versions of the WS-Addressing specification.\npublic class AddressingException extends WebServiceException; // Exception thrown in case on WS-Addressing errors.\n", "des": "Provides WS-Addressing implementation classes."}
{"index": 3076, "repo": "spring-ws-core-4.0.5", "code": "package core;\n\npublic final class EndpointReference extends Object implements Serializable; // Represents an Endpoint Reference, as defined in the WS-Addressing specification.\npublic final class MessageAddressingProperties extends Object implements Serializable; // Represents a set of Message Addressing Properties, as defined in the WS-Addressing specification.\n", "des": "Core package for WS-Addressing support."}
{"index": 3077, "repo": "spring-ws-core-4.0.5", "code": "package messageid;\n\npublic interface MessageIdStrategy; // Strategy interface that encapsulates the creation and validation of WS-Addressing MessageIDs.\npublic class UuidMessageIdStrategy extends Object implements MessageIdStrategy; // Implementation of the MessageIdStrategy interface that uses a UUID to generate a Message Id.\n", "des": "Contains various strategies for generating WS-Addressing MessageIDs."}
{"index": 3078, "repo": "spring-ws-core-4.0.5", "code": "package server;\n\npublic abstract class AbstractActionEndpointMapping extends AbstractAddressingEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations.\npublic abstract class AbstractActionMethodEndpointMapping extends AbstractActionEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations that map to MethodEndpoints.\npublic abstract class AbstractAddressingEndpointMapping extends org.springframework.xml.transform.TransformerObjectSupport implements SoapEndpointMapping, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // Abstract base class for EndpointMapping implementations that handle WS-Addressing.\npublic class AnnotationActionEndpointMapping extends AbstractActionMethodEndpointMapping implements org.springframework.beans.factory.config.BeanPostProcessor; // Implementation of the EndpointMapping interface that uses the @Action annotation to map methods to a WS-Addressing Action header.\npublic class SimpleActionEndpointMapping extends AbstractActionEndpointMapping; // Implementation of the EndpointMapping interface to map from WS-Addressing Action Message Addressing Property to endpoint beans.\n", "des": "Contains servers-side WS-Addressing support, in the form of EndpointMappings."}
{"index": 3079, "repo": "spring-ws-core-4.0.5", "code": "package version;\n\npublic abstract class AbstractAddressingVersion extends org.springframework.xml.transform.TransformerObjectSupport implements AddressingVersion; // Abstract base class for AddressingVersion implementations.\npublic class Addressing10 extends AbstractAddressingVersion; // Implements WS-Addressing 1.0 (May 2006).\npublic class Addressing200408 extends AbstractAddressingVersion; // Implements the August 2004 edition of the WS-Addressing specification.\npublic interface AddressingVersion; // Defines the contract for a specific version of the WS-Addressing specification.\n", "des": "Contains abstractions over various versions of the WS-Addressing specification."}
{"index": 3080, "repo": "spring-ws-core-4.0.5", "code": "package client;\n\npackage client.core; // Contains core classes for SOAP-specific client-side Spring-WS support.\npublic class SoapFaultClientException extends WebServiceFaultException; // Thrown by SoapFaultMessageResolver when the response message has a fault.\n", "des": "Contains classes for SOAP-specific client-side Spring-WS support."}
{"index": 3081, "repo": "spring-ws-core-4.0.5", "code": "package core;\n\npublic class SoapActionCallback extends Object implements WebServiceMessageCallback; // WebServiceMessageCallback implementation that sets the SOAP Action header on the message.\npublic class SoapFaultMessageResolver extends Object implements FaultMessageResolver; // Simple fault resolver that simply throws a SoapFaultClientException when a fault occurs.\n", "des": "Contains core classes for SOAP-specific client-side Spring-WS support."}
{"index": 3082, "repo": "spring-ws-core-4.0.5", "code": "package saaj;\n\npackage saaj.support; // Support classes for working with the SOAP with Attachments API for Java (SAAJ).\npublic class SaajAttachmentException extends AttachmentException;\npublic class SaajSoapBodyException extends SoapBodyException;\npublic class SaajSoapElementException extends SoapElementException;\npublic class SaajSoapEnvelopeException extends SoapEnvelopeException;\npublic class SaajSoapFaultException extends SoapFaultException;\npublic class SaajSoapHeaderException extends SoapHeaderException;\npublic class SaajSoapMessage extends AbstractSoapMessage; // SAAJ-specific implementation of the SoapMessage interface.\npublic class SaajSoapMessageCreationException extends SoapMessageCreationException;\npublic class SaajSoapMessageException extends SoapMessageException;\npublic class SaajSoapMessageFactory extends Object implements SoapMessageFactory, org.springframework.beans.factory.InitializingBean; // SAAJ-specific implementation of the WebServiceMessageFactory.\n", "des": "SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure."}
{"index": 3083, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic class SaajContentHandler extends Object implements ContentHandler; // SAX ContentHandler that transforms callback calls to the creation of SAAJ Nodes and SOAPElements.\npublic abstract class SaajUtils extends Object; // Collection of generic utility methods to work with SAAJ.\npublic class SaajXmlReader extends org.springframework.xml.sax.AbstractXmlReader; // SAX XMLReader that reads from a SAAJ Node.\n", "des": "Support classes for working with the SOAP with Attachments API for Java (SAAJ)."}
{"index": 3084, "repo": "spring-ws-core-4.0.5", "code": "package server;\n\npackage server.endpoint; // Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP.\npublic interface SmartSoapEndpointInterceptor extends SmartEndpointInterceptor, SoapEndpointInterceptor; // SOAP-specific extension of the SmartEndpointInterceptor interface.\npublic interface SoapEndpointInterceptor extends EndpointInterceptor; // SOAP-specific extension of the EndpointInterceptor interface.\npublic class SoapEndpointInvocationChain extends EndpointInvocationChain; // SOAP-specific subclass of the EndpointInvocationChain.\npublic interface SoapEndpointMapping extends EndpointMapping; // SOAP-specific sub-interface of the EndpointMapping.\npublic class SoapMessageDispatcher extends MessageDispatcher; // SOAP-specific subclass of the MessageDispatcher.\n", "des": "Contains classes for SOAP-specific server-side Spring-WS support."}
{"index": 3085, "repo": "spring-ws-core-4.0.5", "code": "package endpoint;\n\npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS SOAP endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes.\n@Deprecated public abstract class AbstractFaultCreatingValidatingMarshallingPayloadEndpoint extends AbstractValidatingMarshallingPayloadEndpoint implements org.springframework.context.MessageSourceAware;\npublic abstract class AbstractSoapFaultDefinitionExceptionResolver extends AbstractEndpointExceptionResolver; // Abstract base class for SOAP-based EndpointExceptionResolver implementations that depend on SoapFaultDefinition.\npublic class SimpleSoapExceptionResolver extends AbstractEndpointExceptionResolver; // Simple, SOAP-specific EndpointExceptionResolver implementation that stores the exception's message as the fault string.\npublic class SoapFaultAnnotationExceptionResolver extends AbstractSoapFaultDefinitionExceptionResolver; // Implementation of the EndpointExceptionResolver interface that uses the SoapFault annotation to map exceptions to SOAP Faults.\npublic class SoapFaultDefinition extends Object; // Defines properties for a SOAP Fault.\npublic class SoapFaultDefinitionEditor extends PropertyEditorSupport; // PropertyEditor for SoapFaultDefinition objects.\npublic class SoapFaultMappingExceptionResolver extends AbstractSoapFaultDefinitionExceptionResolver; // Exception resolver that allows for mapping exception class names to SOAP Faults.\n", "des": "Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP."}
{"index": 3086, "repo": "spring-ws-core-4.0.5", "code": "package annotation;\n\npublic enum FaultCode extends Enum<FaultCode>; // Enumeration that represents the standard SOAP Fault codes for use with the JDK 1.5+ SoapFault annotation.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Repeatable(SoapActions.class) public @interface SoapAction; // Marks an endpoint method as the handler for an incoming request.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface SoapActions; // Marks an endpoint method as containing multiple SoapActions.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface SoapFault; // Marks an exception class with the fault elements that should be returned whenever this exception is thrown.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface SoapHeader; // Marks an endpoint method parameter to be resolved as a single or a list of SoapHeaderElement.\n", "des": "JDK 1.5+ annotations for Spring-WS SOAP endpoints."}
{"index": 3087, "repo": "spring-ws-core-4.0.5", "code": "package interceptor;\n\npublic abstract class AbstractFaultCreatingValidatingInterceptor extends AbstractValidatingInterceptor; // Subclass of AbstractValidatingInterceptor that creates a SOAP Fault whenever the request message cannot be validated.\npublic class DelegatingSmartSoapEndpointInterceptor extends DelegatingSmartEndpointInterceptor implements SmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that delegates to a delegate SoapEndpointInterceptor.\npublic class PayloadRootSmartSoapEndpointInterceptor extends DelegatingSmartSoapEndpointInterceptor; // Implementation of the SmartSoapEndpointInterceptor interface that only intercepts requests that have a specified namespace URI or local part (or both) as payload root.\npublic class PayloadValidatingInterceptor extends AbstractFaultCreatingValidatingInterceptor; // Interceptor that validates the contents of WebServiceMessages using a schema.\npublic class SoapActionSmartEndpointInterceptor extends DelegatingSmartSoapEndpointInterceptor; // Implementation of the SmartEndpointInterceptor interface that only intercepts requests that have a specified soap action.\npublic class SoapEnvelopeLoggingInterceptor extends AbstractLoggingInterceptor implements SoapEndpointInterceptor; // SOAP-specific EndpointInterceptor that logs the complete request and response envelope of SoapMessage messages.\n", "des": "Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes."}
{"index": 3088, "repo": "spring-ws-core-4.0.5", "code": "package mapping;\n\npublic class DelegatingSoapEndpointMapping extends Object implements org.springframework.beans.factory.InitializingBean, SoapEndpointMapping; // EndpointMapping implement that adds SOAP actors or roles to a delegate endpoint.\npublic class SoapActionAnnotationMethodEndpointMapping extends AbstractAnnotationMethodEndpointMapping<String> implements SoapEndpointMapping; // Implementation of the EndpointMapping interface that uses the SoapAction annotation to map methods to the request SOAPAction header.\npublic class SoapActionEndpointMapping extends AbstractMapBasedEndpointMapping implements SoapEndpointMapping; // Implementation of the EndpointMapping interface to map from SOAPAction headers to endpoint beans.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes."}
{"index": 3089, "repo": "spring-ws-core-4.0.5", "code": "package soap11;\n\npublic interface Soap11Body extends SoapBody; // Subinterface of SoapBody that exposes SOAP 1.1 functionality.\npublic interface Soap11Fault extends SoapFault; // Subinterface of SoapFault that exposes SOAP 1.1 functionality.\npublic interface Soap11Header extends SoapHeader; // Subinterface of SoapHeader that exposes SOAP 1.1 functionality.\n", "des": "Contains interfaces specific to SOAP 1.1."}
{"index": 3090, "repo": "spring-ws-core-4.0.5", "code": "package soap12;\n\npublic interface Soap12Body extends SoapBody; // Subinterface of SoapBody that exposes SOAP 1.2 functionality.\npublic interface Soap12Fault extends SoapFault; // Subinterface of SoapFault that exposes SOAP 1.2 functionality.\npublic interface Soap12Header extends SoapHeader; // Subinterface of SoapHeader that exposes SOAP 1.2 functionality.\n", "des": "Contains interfaces specific to SOAP 1.2."}
{"index": 3091, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic abstract class SoapUtils extends Object; // Contains various utility methods for handling SOAP messages.\n", "des": "Classes supporting the org.springframework.ws.soap package."}
{"index": 3092, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic class DefaultStrategiesHelper extends Object; // Helper class for for loading default implementations of an interface.\npublic abstract class MarshallingUtils extends Object; // Helper class for endpoints and endpoint mappings that use marshalling.\npublic abstract class WebUtils extends Object; // Miscellaneous utilities for web applications.\n", "des": "Provides general helper classes for Spring Web Services."}
{"index": 3093, "repo": "spring-ws-core-4.0.5", "code": "package transport;\n\npackage transport.context; // Abstraction for determining the current TransportInputStream and TransportOutputStream.\npackage transport.http; // Package providing support for handling messages via HTTP.\npackage transport.support; // Classes supporting the org.springframework.ws.transport package.\npublic abstract class AbstractReceiverConnection extends AbstractWebServiceConnection implements HeadersAwareReceiverWebServiceConnection; // Abstract base class for WebServiceConnection implementations used for receiving requests.\npublic abstract class AbstractSenderConnection extends AbstractWebServiceConnection implements HeadersAwareSenderWebServiceConnection; // Abstract base class for WebServiceConnection implementations used for sending requests.\npublic abstract class AbstractWebServiceConnection extends Object implements WebServiceConnection; // Abstract base class for WebServiceConnection implementations.\npublic interface EndpointAwareWebServiceConnection extends WebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any server-side situations where an endpoint is not found.\npublic interface FaultAwareWebServiceConnection extends WebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any Fault messages received.\npublic interface HeadersAwareReceiverWebServiceConnection; // Interface to define access to header information for certain WebServiceConnection implementations.\npublic interface HeadersAwareSenderWebServiceConnection;\npublic interface TransportConstants; // Declares useful transport constants.\npublic abstract class TransportException extends IOException; // Abstract base class for exceptions related to the transport layer.\npublic abstract class TransportInputStream extends InputStream; // A TransportInputStream is an input stream with MIME input headers.\npublic abstract class TransportOutputStream extends OutputStream; // A TransportOutputStream is an output stream with MIME input headers.\npublic interface WebServiceConnection extends AutoCloseable; // Represents a point-to-point connection that a client can use for sending WebServiceMessage objects directly to a remote party.\npublic interface WebServiceMessageReceiver; // Defines the methods for classes capable of receiving WebServiceMessage instances coming in on a transport.\npublic interface WebServiceMessageSender; // Defines the methods for classes capable of sending and receiving WebServiceMessage instances across a transport.\n", "des": "Contains the TransportRequest and TransportResponse interfaces."}
{"index": 3094, "repo": "spring-ws-core-4.0.5", "code": "package context;\n\npublic class DefaultTransportContext extends Object implements TransportContext; // Default implementation of the TransportContext interface.\npublic interface TransportContext; // Strategy interface for determining the current WebServiceConnection.\npublic abstract class TransportContextHolder extends Object; // Simple holder class that associates a TransportContext instance with the current thread.\n", "des": "Abstraction for determining the current TransportInputStream and TransportOutputStream."}
{"index": 3095, "repo": "spring-ws-core-4.0.5", "code": "package http;\n\npublic abstract class AbstractHttpSenderConnection extends AbstractSenderConnection implements FaultAwareWebServiceConnection; // Abstract base class for WebServiceConnection implementations that send request over HTTP.\npublic abstract class AbstractHttpWebServiceMessageSender extends Object implements WebServiceMessageSender; // Abstract base class for WebServiceMessageSender implementations that use HTTP.\npublic class ClientHttpRequestConnection extends AbstractHttpSenderConnection; // Implementation of the WebServiceConnection interface that is based on the Spring 3 ClientHttpRequest and ClientHttpResponse.\npublic class ClientHttpRequestMessageSender extends AbstractHttpWebServiceMessageSender; // WebServiceMessageSender implementation based on the ClientHttpRequestFactory introduced in Spring 3.\n@Deprecated public class CommonsHttpConnection extends AbstractHttpSenderConnection;\n@Deprecated public class CommonsHttpMessageSender extends AbstractHttpWebServiceMessageSender implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\npublic class HttpComponents5ClientFactory extends Object implements org.springframework.beans.factory.FactoryBean<org.apache.hc.client5.http.impl.classic.CloseableHttpClient>; // FactoryBean to set up a CloseableHttpClient using HttpComponents HttpClient 5.\n@FunctionalInterface public static interface HttpComponents5ClientFactory.HttpClientBuilderCustomizer;\n@FunctionalInterface public static interface HttpComponents5ClientFactory.PoolingHttpClientConnectionManagerBuilderCustomizer;\npublic class HttpComponents5Connection extends AbstractHttpSenderConnection; // Implementation of WebServiceConnection that is based on Apache HttpClient 5.\npublic class HttpComponents5MessageSender extends AbstractHttpWebServiceMessageSender implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // WebServiceMessageSender implementation that uses Apache HttpClient to execute POST requests.\npublic static class HttpComponents5MessageSender.RemoveSoapHeadersInterceptor extends Object implements org.apache.hc.core5.http.HttpRequestInterceptor; // HttpClient HttpRequestInterceptor implementation that removes Content-Length and Transfer-Encoding headers from the request.\npublic class HttpComponentsConnection extends AbstractHttpSenderConnection; // Implementation of WebServiceConnection that is based on Apache HttpClient.\n", "des": "Package providing support for handling messages via HTTP."}
{"index": 3096, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic class EnumerationIterator<T> extends Object implements Iterator<T>; // Adapts an Enumeration to follow the interface of Iterator.\npublic abstract class TransportUtils extends Object; // Generic utility methods for working with Web service transports.\npublic abstract class WebServiceMessageReceiverObjectSupport extends Object implements org.springframework.beans.factory.InitializingBean; // Convenience base class for server-side transport objects.\n", "des": "Classes supporting the org.springframework.ws.transport package."}
{"index": 3097, "repo": "spring-ws-core-4.0.5", "code": "package wsdl;\n\npackage wsdl.wsdl11; // Contains interfaces and classes specific to WSDL 1.1.\npublic interface WsdlDefinition; // Represents an abstraction for WSDL definitions.\npublic class WsdlDefinitionException extends WebServiceException; // Base class for all WSDL definition exceptions.\n", "des": "Provides the WSDL functionality of the Spring Web Services framework."}
{"index": 3098, "repo": "spring-ws-core-4.0.5", "code": "package wsdl11;\n\npackage wsdl11.provider; // Provides a contribution strategy for WSDL definitions.\npublic class DefaultWsdl11Definition extends Object implements Wsdl11Definition, org.springframework.beans.factory.InitializingBean; // Convenient implementation of Wsdl11Definition that creates a SOAP 1.1 or 1.2 binding based on naming conventions in one or more inlined XSD schemas.\npublic class ProviderBasedWsdl4jDefinition extends Wsdl4jDefinition implements org.springframework.beans.factory.InitializingBean; // Implementation of the Wsdl11Definition that uses a provider-based mechanism to populate a WSDL4J Definition.\npublic class SimpleWsdl11Definition extends Object implements Wsdl11Definition, org.springframework.beans.factory.InitializingBean; // The default Wsdl11Definition implementation.\npublic interface Wsdl11Definition extends WsdlDefinition; // Models a WSDL 1.1-specific WsdlDefinition.\npublic class Wsdl4jDefinition extends Object implements Wsdl11Definition; // Implementation of the Wsdl11Definition based on WSDL4J.\npublic class Wsdl4jDefinitionException extends WsdlDefinitionException; // Subclass of WsdlDefinitionException that wraps WSDLExceptions.\n", "des": "Contains interfaces and classes specific to WSDL 1.1."}
{"index": 3099, "repo": "spring-ws-core-4.0.5", "code": "package provider;\n\npublic abstract class AbstractPortTypesProvider extends Object implements PortTypesProvider; // Abstract base class for PortTypesProvider implementations.\npublic interface BindingsProvider; // Strategy for adding Bindings to a Definition.\npublic class DefaultConcretePartProvider extends Object implements BindingsProvider, ServicesProvider; // Default implementation of the BindingsProvider and ServicesProvider interfaces.\npublic class DefaultMessagesProvider extends Object implements MessagesProvider; // Default implementation of the MessagesProvider.\npublic interface ImportsProvider; // Strategy for adding Imports to a Definition.\npublic class InliningXsdSchemaTypesProvider extends org.springframework.xml.transform.TransformerObjectSupport implements TypesProvider; // Implementation of TypesProvider that inlines a XsdSchema or XsdSchemaCollection into the WSDL.\npublic interface MessagesProvider; // Strategy for adding Messages to a Definition.\npublic interface PortTypesProvider; // Strategy for adding PortTypes to a Definition.\npublic interface ServicesProvider; // Strategy for adding Services to a Definition.\npublic class Soap11Provider extends DefaultConcretePartProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.1 specific.\npublic class Soap12Provider extends DefaultConcretePartProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that are SOAP 1.2 specific.\npublic class SoapProvider extends Object implements BindingsProvider, ServicesProvider; // Implementation of the BindingsProvider and ServicesProvider interfaces that supports SOAP 1.1 and SOAP 1.2.\npublic class SuffixBasedMessagesProvider extends DefaultMessagesProvider; // Implementation of the MessagesProvider interface that is based on suffixes.\npublic class SuffixBasedPortTypesProvider extends AbstractPortTypesProvider; // Implementation of the PortTypesProvider interface that is based on suffixes.\npublic interface TypesProvider; // Strategy for adding Types to a Definition.\n", "des": "Provides a contribution strategy for WSDL definitions."}
{"index": 3100, "repo": "jena-querybuilder-4.9.0", "code": "package querybuilder;\n\npackage querybuilder.clauses; // Interfaces that describe various SPARQL clauses as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321.\npackage querybuilder.handlers; // Classes that implement SPARQL clauses but do not return instances of the builder.\npackage querybuilder.rewriters; // Classes to rewrite Query algebra, expressions and other objects to handle variable replacement for the prepared statement functionality.\npublic abstract class AbstractQueryBuilder<T extends AbstractQueryBuilder<T>> extends Object implements Cloneable, PrologClause<T>, ValuesClause<T>; // Base class for all QueryBuilders.\npublic class AskBuilder extends AbstractQueryBuilder<AskBuilder> implements DatasetClause<AskBuilder>, WhereClause<AskBuilder>, SolutionModifierClause<AskBuilder>; // Builder for SPARQL Ask Queries.\npublic class ConstructBuilder extends AbstractQueryBuilder<ConstructBuilder> implements DatasetClause<ConstructBuilder>, WhereClause<ConstructBuilder>, SolutionModifierClause<ConstructBuilder>, ConstructClause<ConstructBuilder>; // Builder for SPARQL Construct Queries.\npublic class Converters extends Object; // A collection of static methods to convert from Objects to various types used in Query and Update construction.\npublic class DescribeBuilder extends AbstractQueryBuilder<DescribeBuilder> implements DatasetClause<DescribeBuilder>, WhereClause<DescribeBuilder>, SolutionModifierClause<DescribeBuilder>, SelectClause<DescribeBuilder>; // Builder for SPARQL Describe Queries.\npublic class ExprFactory extends Object; // Create expressions.\npublic enum Order extends Enum<Order>; // The order for the ORDER BY modifiers.\npublic class SelectBuilder extends AbstractQueryBuilder<SelectBuilder> implements DatasetClause<SelectBuilder>, WhereClause<SelectBuilder>, SolutionModifierClause<SelectBuilder>, SelectClause<SelectBuilder>; // Builder for SPARQL Select Queries.\npublic class UpdateBuilder extends Object; // Class to build update requests.\npublic class WhereBuilder extends AbstractQueryBuilder<WhereBuilder> implements WhereClause<WhereBuilder>; // A simple implementation of WhereClause for use in building complex sub queries where a SelectBuilder or similar implementation is more than is needed.\n", "des": "A utility package to simplify the building of ARQ queries in code."}
{"index": 3101, "repo": "jena-querybuilder-4.9.0", "code": "package clauses;\n\npublic interface ConstructClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the ConstructClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rConstructTemplate\npublic interface DatasetClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the DatasetClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rDatasetClause\npublic interface PrologClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the PrologClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rPrologue\npublic interface SelectClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the SelectClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rSelectClause\npublic interface SolutionModifierClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the SolutionClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rSolutionModifier\npublic interface ValuesClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the ValueClause as per https://www.w3.org/TR/sparql11-query/#rValuesClause Conceptually this the values clause constructs a table comprising columns named by variables and rows of data for those columns.\npublic interface WhereClause<T extends AbstractQueryBuilder<T>>; // Interface that defines the WhereClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rWhereClause\n", "des": "Interfaces that describe various SPARQL clauses as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321."}
{"index": 3102, "repo": "jena-querybuilder-4.9.0", "code": "package handlers;\n\npublic class AggregationHandler extends Object implements Handler; // Class to handle manipulation the aggregation variables in the query.\npublic class ConstructHandler extends Object implements Handler; // The handler for construct clauses.\npublic class DatasetHandler extends Object implements Handler; // Handler for a dataset.\npublic interface Handler; // The base interface for handlers.\npublic class HandlerBlock extends Object; // A class to handle all the handlers of a query builder and keep them in sync as needed.\npublic class PrologHandler extends Object implements Handler; // The prolog handler\npublic class SelectHandler extends Object implements Handler; // A Select clause handler.\npublic class SolutionModifierHandler extends Object implements Handler; // The Solution Modifier handler.\npublic class ValuesHandler extends Object implements Handler;\npublic class WhereHandler extends Object implements Handler; // The where handler.\n", "des": "Classes that implement SPARQL clauses but do not return instances of the builder."}
{"index": 3103, "repo": "jena-querybuilder-4.9.0", "code": "package rewriters;\n\npublic class AbstractRewriter<T> extends Object; // The base class for rewriters.\npublic class BuildElementVisitor extends Object implements ElementVisitor; // An element visitor that does an in-place modification of the elements to fix union-of-one and similar issues.\npublic class ElementRewriter extends AbstractRewriter<Element> implements ElementVisitor; // A rewriter that implements an ElementVisitor\npublic class ExprRewriter extends AbstractRewriter<Expr> implements ExprVisitor; // A rewriter that implements an ExprVisitor\npublic class PathRewriter extends AbstractRewriter<Path> implements PathVisitor; // A rewriter that implements PathVisitor.\n", "des": "Classes to rewrite Query algebra, expressions and other objects to handle variable replacement for the prepared statement functionality."}
{"index": 3104, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface AfterTransactionCompletionProcess; // Contract representing some process that needs to occur during after transaction completion.\nInterface BeforeTransactionCompletionProcess; // Contract representing some process that needs to occur during before transaction completion.\nInterface Executable; // An operation which may be scheduled for later execution.\n", "des": "Defines SPI hooks into the ActionQueue."}
{"index": 3105, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package annotations;\n\nClass QueryHints; // Consolidation of hints available to Hibernate JPA queries.\nEnum CacheConcurrencyStrategy; // Cache concurrency strategy.\nEnum CacheModeType; // Enumeration for the different interaction modes between the session and the Level 2 Cache.\nEnum CascadeType; // Cascade types (can override default JPA cascades).\nEnum FetchMode; // Defines how the association should be fetched, compared to FetchType which defines when it should be fetched\nEnum FlushModeType; // Enumeration extending javax.persistence flush modes.\nEnum GenerationTime; // At what time(s) will the generation occur?\nEnum LazyCollectionOption; // Lazy options available for a collection.\nEnum LazyToOneOption; // Lazy options available for a ToOne association.\nEnum NotFoundAction; // Possible actions when the database contains a non-null fk with no matching target.\nEnum OnDeleteAction; // Possible actions for on-delete.\nEnum OptimisticLockType; // Possible optimistic locking strategies.\nEnum PolymorphismType; // Type of available polymorphism for a particular entity.\nEnum ResultCheckStyle; // Possible styles of checking return codes on SQL INSERT, UPDATE and DELETE queries.\nEnum SortType;\nEnum SourceType; // Where should Hibernate retrieve the value from? From the database, or from the current JVM?\nAnnotation Type AccessType;\nAnnotation Type Any; // Defines a ToOne-style association pointing to one of several entity types depending on a local discriminator, as opposed to discriminated inheritance where the discriminator is kept as part of the entity hierarchy.\nAnnotation Type AnyMetaDef;\nAnnotation Type AnyMetaDefs;\nAnnotation Type AttributeAccessor; // Names a persistent property access strategy (PropertyAccessStrategy) to use.\nAnnotation Type BatchSize; // Defines size for batch loading of collections or lazy entities.\nAnnotation Type Cache; // Add caching strategy to a root entity or a collection.\nAnnotation Type Cascade; // Apply a cascade strategy on an association.\nAnnotation Type Check; // Arbitrary SQL CHECK constraints which can be defined at the class, property or collection level.\nAnnotation Type CollectionId; // Describe an identifier column for a bag (ie an idbag).\nAnnotation Type CollectionType;\nAnnotation Type ColumnDefault; // Identifies the DEFAULT value to apply to the associated column via DDL.\nAnnotation Type Columns; // Support an array of columns.\n", "des": "Package containing all the Hibernate specific annotations."}
{"index": 3106, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package boot;\n\npackage boot.registry; // Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior.\npackage boot.xsd; // Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)\nInterface AttributeConverterInfo; // Delayed information about an AttributeConverter.\nInterface Metadata; // Represents the ORM model as determined from all provided mapping sources.\nInterface MetadataBuilder; // Contract for specifying various overrides to be used in metamodel building.\nInterface SessionFactoryBuilder; // The contract for building a SessionFactory given a number of options.\nClass CacheRegionDefinition; // Models the definition of caching settings for a particular region.\nClass JaccPermissionDefinition;\nClass MetadataSources; // Entry point into working with sources of metadata information (mapping XML, annotations).\nEnum CacheRegionDefinition.CacheRegionType;\nEnum SchemaAutoTooling; // Defines the possible values for \"hbm2ddl_auto\"\nEnum TempTableDdlTransactionHandling; // Enum describing how creation and dropping of temporary tables should be done in terms of transaction handling.\nClass InvalidMappingException;\nClass MappingException; // Indicates a problem parsing a mapping document.\nClass MappingNotFoundException;\nClass UnsupportedOrmXsdVersionException;\n", "des": "This package contains the contracts that make up the Hibernate native bootstrapping API (building a SessionFactory)."}
{"index": 3107, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ArchiveContext; // Describes the context for visiting the entries within an archive\nInterface ArchiveDescriptor; // Contract for visiting an archive, which might be a jar, a zip, an exploded directory, etc.\nInterface ArchiveDescriptorFactory; // Contract for building ArchiveDescriptor instances.\nInterface ArchiveEntry; // Represent an entry in the archive.\nInterface ArchiveEntryHandler; // Handler for archive entries, based on the classified type of the entry\nInterface InputStreamAccess; // Contract for building InputStreams, especially in on-demand situations\nInterface JarFileEntryUrlAdjuster; // Optional contract for ArchiveDescriptorFactory implementations to implement to be able to adjust <jar-file/> URL's defined in persistence.xml files.\nClass AbstractArchiveDescriptor; // Base support for ArchiveDescriptor implementors.\nClass AbstractArchiveDescriptorFactory;\nClass ArchiveException; // Indicates a problem accessing or visiting the archive\n", "des": "Defines the SPI for support of \"scanning\" of \"archives\"."}
{"index": 3108, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package naming;\n\nInterface EntityNaming;\nInterface ImplicitAnyDiscriminatorColumnNameSource; // Context for determining the implicit name for an ANY mapping's discriminator column.\nInterface ImplicitAnyKeyColumnNameSource; // Context for determining the implicit name for an ANY mapping's key column.\nInterface ImplicitBasicColumnNameSource; // Context for determining the implicit name related to basic values.\nInterface ImplicitCollectionTableNameSource; // Context for determining the implicit name for a collection table.\nInterface ImplicitConstraintNameSource; // Common implicit name source traits for all constraint naming: FK, UK, index\nInterface ImplicitDiscriminatorColumnNameSource; // Context for determining the implicit name of an entity's discriminator column.\nInterface ImplicitEntityNameSource; // Context for determining the implicit name of an entity's primary table\nInterface ImplicitForeignKeyNameSource;\nInterface ImplicitIdentifierColumnNameSource; // Context for determining the implicit name of an entity's identifier column.\nInterface ImplicitIndexColumnNameSource;\nInterface ImplicitIndexNameSource;\nInterface ImplicitJoinColumnNameSource; // Context for determining the implicit name of a \"join column\" (think JoinColumn).\nInterface ImplicitJoinTableNameSource; // Context for determining the implicit name for a join table.\nInterface ImplicitMapKeyColumnNameSource; // Context for determining the implicit name of a column used to back the key of a Map.\nInterface ImplicitNameSource; // Common contract for all implicit naming sources\nInterface ImplicitNamingStrategy; // Pluggable strategy for applying implicit naming rules when an explicit name is not given.\nInterface ImplicitPrimaryKeyJoinColumnNameSource; // Used to help determine the implicit name of columns which are part of a primary-key, well simultaneously being part of a foreign-key (join).\nInterface ImplicitTenantIdColumnNameSource; // Context for determining the implicit name of an entity's tenant identifier column.\nInterface ImplicitUniqueKeyNameSource;\nInterface NamingStrategyHelper; // Helper contract for dealing with naming strategies.\nInterface PhysicalNamingStrategy; // Pluggable strategy contract for applying physical naming rules for database object names.\nClass CamelCaseToUnderscoresNamingStrategy; // Originally copied from Spring Boot as this strategy is popular there (original name is SpringPhysicalNamingStrategy).\nClass DatabaseIdentifier; // Models an identifier (name), retrieved from the database.\nClass Identifier; // Models an identifier (name), which may or may not be quoted.\n", "des": "Represents a proposed new approach to allowing hooks into the process of determining the name of database objects (tables, columns, constraints, etc)."}
{"index": 3109, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package registry;\n\npackage registry.selector; // Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations.\nInterface BootstrapServiceRegistry; // Provides the most basic services needed.\nInterface StandardServiceInitiator<R extends Service>; // Contract for an initiator of services that target the standard ServiceRegistry.\nInterface StandardServiceRegistry; // Specialization of the ServiceRegistry contract mainly for type safety.\nClass BootstrapServiceRegistryBuilder; // Builder for BootstrapServiceRegistry instances.\nClass StandardServiceRegistryBuilder; // Builder for standard ServiceRegistry instances.\n", "des": "Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior."}
{"index": 3110, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ClassLoaderService; // A service for interacting with class loaders.\nInterface ClassLoaderService.Work<T>;\nClass ClassLoadingException; // Indicates a problem performing class loading.\n", "des": "The class loading service SPI."}
{"index": 3111, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package selector;\n\npackage selector.spi; // Defines actual contract used for strategy selection : StrategySelector.\nInterface StrategyRegistration<T>; // Describes the registration of a named strategy implementation.\nInterface StrategyRegistrationProvider; // Responsible for providing the registrations of strategy selector(s).\nClass SimpleStrategyRegistrationImpl<T>; // A simple implementation of StrategyRegistration.\n", "des": "Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations."}
{"index": 3112, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface StrategyCreator<T>;\nInterface StrategySelector; // Service which acts as a registry for named strategy implementations.\nClass StrategySelectionException; // Indicates a problem performing the selection/resolution.\n", "des": "Defines actual contract used for strategy selection : StrategySelector."}
{"index": 3113, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package xsd;\n\nClass ConfigXsdSupport; // Support for XSD handling related to Hibernate's `cfg.xml` and JPA's `persistence.xml`.\nClass LocalXsdResolver; // When Hibernate loads an XSD we fully expect that to be resolved from our jar file via ClassLoader resource look-up.\nClass MappingXsdSupport; // Support for XSD handling related to Hibernate's `hbm.xml` and JPA's `orm.xml`.\nClass XsdDescriptor; // Representation of a locally resolved XSD\n", "des": "Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)"}
{"index": 3114, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\npackage spi.interceptor; // interceptor implementations\nInterface CollectionTracker; // Interface to be implemented by collection trackers that hold the expected size od collections, a simplified Map<String, int>.\nInterface EnhancementContext; // The context for performing an enhancement.\nInterface Enhancer; // Class responsible for performing enhancement.\nInterface LazyPropertyInitializer; // Contract for controlling how lazy properties get initialized.\nInterface LazyPropertyInitializer.InterceptorImplementor;\nInterface UnloadedClass;\nInterface UnloadedField;\nClass DefaultEnhancementContext; // default implementation of EnhancementContext.\nClass EnhancementContextWrapper;\nClass EnhancerConstants; // Constants used during enhancement.\nClass EnhancementException; // An exception indicating some kind of problem performing bytecode enhancement.\n", "des": "package defining bytecode code enhancement (instrumentation) support."}
{"index": 3115, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package interceptor;\n\nInterface BytecodeInterceptorLogging; // Logging related to bytecode enhancement interceptors\nInterface BytecodeLazyAttributeInterceptor;\nInterface EnhancementHelper.InheritanceChecker;\nInterface LazyFetchGroupMetadata; // Information about a particular bytecode lazy attribute grouping.\nInterface SessionAssociableInterceptor;\nClass AbstractInterceptor;\nClass AbstractLazyLoadInterceptor;\nClass BytecodeInterceptorLogging_$logger; // Warning this class consists of generated code.\nClass EnhancementAsProxyLazinessInterceptor;\nClass EnhancementHelper;\nClass LazyAttributeDescriptor; // Descriptor for an attribute which is enabled for bytecode lazy fetching\nClass LazyAttributeLoadingInterceptor; // Interceptor that loads attributes lazily\nClass LazyAttributesMetadata; // Information about all of the bytecode lazy attributes for an entity\n", "des": "interceptor implementations"}
{"index": 3116, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface BasicProxyFactory; // A proxy factory for \"basic proxy\" generation.\nInterface BytecodeEnhancementMetadata; // Encapsulates bytecode enhancement information about a particular entity.\nInterface BytecodeProvider; // Contract for providers of bytecode services to Hibernate.\nInterface ClassTransformer; // A persistence provider provides an instance of this interface to the PersistenceUnitInfo.addTransformer method.\nInterface ProxyFactoryFactory; // An interface for factories of proxy factory instances.\nInterface ReflectionOptimizer; // Represents reflection optimization for a particular class.\nInterface ReflectionOptimizer.AccessOptimizer; // Represents optimized entity property access.\nInterface ReflectionOptimizer.InstantiationOptimizer; // Represents optimized entity instantiation.\nClass ByteCodeHelper; // A helper for reading byte code from various input sources.\nClass ClassLoadingStrategyHelper;\nClass InstrumentedClassLoader; // A specialized ClassLoader which performs bytecode enhancement on class definitions as they are loaded into the ClassLoader scope.\nClass NotInstrumentedException; // Indicates a condition where an instrumented/enhanced class was expected, but the class was not instrumented/enhanced.\n", "des": "Package defining bytecode code enhancement (instrumentation) support."}
{"index": 3117, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\npackage spi.support; // Package intended for simplifying the worked needed to implement a caching provider.\nInterface CacheImplementor; // SPI contract for Hibernate's second-level cache engine\nInterface CacheKeysFactory;\nInterface CacheTransactionSynchronization; // Defines a context object that a RegionFactory is asked to create (RegionFactory.createTransactionContext(org.hibernate.engine.spi.SharedSessionContractImplementor)}) when a Hibernate Session is created.\nInterface DirectAccessRegion; // Specialized Region whose data is accessed directly (not requiring key/item wrapping, e.g.\nInterface DomainDataRegion; // A Region for cacheable domain data - entity, collection, natural-id.\nInterface ExtendedStatisticsSupport; // Optional Region contract defining support for extra statistic information\nInterface QueryCache;\nInterface QueryResultsCache; // Defines the responsibility for managing query result data caching in regards to a specific region.\nInterface QueryResultsRegion; // Defines the contract for a cache region which will specifically be used to store query results.\nInterface Region; // Contract for a named \"region\".\nInterface RegionFactory; // Contract for building second level cache regions.\nInterface SecondLevelCacheLogger;\nInterface TimestampsCache; // Wrapper for a TimestampsRegion adding handling of stale results\nInterface TimestampsCacheFactory; // Responsible for building the TimestampsRegionAccessFactory to use for managing query results in regards to staleness of the underlying tables (sometimes called \"query spaces\" or \"table spaces\")\nInterface TimestampsRegion;\nInterface UpdateTimestampsCache;\nClass AbstractCacheTransactionSynchronization;\nClass AbstractRegionFactory;\nClass FilterKey; // Allows cached queries to be keyed by enabled filters.\nClass QueryKey; // A key that identifies a particular query with bound parameter values.\nClass QuerySpacesHelper;\nClass SecondLevelCacheLogger_$logger; // Warning this class consists of generated code.\nClass StandardCacheTransactionSynchronization;\n", "des": "Defines the integration aspect of Hibernate's second-level caching allowing \"caching back ends\" to be plugged in as a caching provider."}
{"index": 3118, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package support;\n\nInterface AbstractDomainDataRegion.Destructible; // Optional interface caching implementors can implement in their CachedDomainDataAccess impls to automatically have them destroyed when this region is destroyed\nInterface AbstractReadWriteAccess.Lockable; // Interface type implemented by all wrapper objects in the cache.\nInterface DomainDataStorageAccess; // Specialization of StorageAccess for domain data regions\nInterface StorageAccess; // A general read/write abstraction over the specific \"cache\" object from the caching provider.\nClass AbstractCachedDomainDataAccess;\nClass AbstractCollectionDataAccess;\nClass AbstractDomainDataRegion;\nClass AbstractEntityDataAccess;\nClass AbstractNaturalIdDataAccess;\nClass AbstractReadWriteAccess;\nClass AbstractReadWriteAccess.Item; // Wrapper type representing unlocked items.\nClass AbstractReadWriteAccess.SoftLockImpl; // Wrapper type representing locked items.\nClass AbstractRegion;\nClass CacheUtils;\nClass CollectionNonStrictReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass CollectionReadOnlyAccess; // Standard support for CollectionDataAccess using the AccessType.READ_ONLY access type.\nClass CollectionReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.READ_WRITE access type.\nClass CollectionTransactionAccess;\nClass DirectAccessRegionTemplate; // Bridge between DirectAccessRegion and StorageAccess\nClass DomainDataRegionImpl;\nClass DomainDataRegionTemplate; // Abstract implementation of DomainDataRegion based on implementations just needing to provide a DomainDataStorageAccess reference for basic caching support - DomainDataStorageAccess acts as a simple wrapper around some generalized cache actions such as put or get.\nClass EntityNonStrictReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass EntityReadOnlyAccess; // Standard support for EntityDataAccess using the AccessType.READ_ONLY access type.\nClass EntityReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.READ_WRITE access type.\nClass EntityTransactionalAccess;\nClass NaturalIdNonStrictReadWriteAccess; // Standard support for NaturalIdDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass NaturalIdReadOnlyAccess; // Standard support for NaturalIdDataAccess using the AccessType.READ_ONLY access type.\n", "des": "Package intended for simplifying the worked needed to implement a caching provider."}
{"index": 3119, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package reflection;\n\nInterface AttributeConverterDefinitionCollector;\nClass ClassLoaderAccessLazyImpl; // A ClassLoaderAccess implementation based on lazy access to MetadataBuildingOptions\nClass PersistentAttributeFilter;\n", "des": "Defines the capability to merge mapping information from both annotations and orm.xml sources into a unified set of metadata in the Hibernate commons-annotations model."}
{"index": 3120, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface LazyInitializable; // Hibernate \"wraps\" a java collection in an instance of PersistentCollection.\nInterface PersistentCollection; // Persistent collections are treated as value objects by Hibernate.\n", "des": "SPI definitions for persistent collections"}
{"index": 3121, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package context;\n\npackage context.spi; // SPI level contracts around \"current session\" support.\nClass TenantIdentifierMismatchException; // Indicates that tenant identifiers did not match in cases where CurrentTenantIdentifierResolver.validateExistingCurrentSessions() returns true and there is a mismatch found.\n", "des": "Defines support for \"current session\" feature."}
