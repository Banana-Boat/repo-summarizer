{"index": 2962, "repo": "spring-integration-redis-6.1.2", "code": "package metadata;\n\npublic class RedisMetadataStore extends Object implements org.springframework.integration.metadata.ConcurrentMetadataStore; // Redis implementation of ConcurrentMetadataStore.\n", "des": "Provides support for Redis-based MetadataStores."}
{"index": 3556, "repo": "guava-32.1.1-jre", "code": "package graph;\n\nInterface Graph<N>; // An interface for graph-structured data, whose edges are anonymous entities with no identity or information of their own.\nInterface MutableGraph<N>; // A subinterface of Graph which adds mutation methods.\nInterface MutableNetwork<N,​E>; // A subinterface of Network which adds mutation methods.\nInterface MutableValueGraph<N,​V>; // A subinterface of ValueGraph which adds mutation methods.\nInterface Network<N,​E>; // An interface for graph-structured data, whose edges are unique objects.\nInterface PredecessorsFunction<N>; // A functional interface for graph-structured data.\nInterface SuccessorsFunction<N>; // A functional interface for graph-structured data.\nInterface ValueGraph<N,​V>; // An interface for graph-structured data, whose edges have associated non-unique values.\nClass AbstractGraph<N>; // This class provides a skeletal implementation of Graph.\nClass AbstractNetwork<N,​E>; // This class provides a skeletal implementation of Network.\nClass AbstractValueGraph<N,​V>; // This class provides a skeletal implementation of ValueGraph.\nClass ElementOrder<T>; // Used to represent the order of elements in a data structure that supports different options for iteration order guarantees.\nClass EndpointPair<N>; // An immutable pair representing the two endpoints of an edge in a graph.\nClass GraphBuilder<N>; // A builder for constructing instances of MutableGraph or ImmutableGraph with user-defined properties.\nClass Graphs; // Static utility methods for Graph, ValueGraph, and Network instances.\nClass ImmutableGraph<N>; // A Graph whose elements and structural relationships will never change.\nClass ImmutableGraph.Builder<N>; // A builder for creating ImmutableGraph instances, especially static final graphs.\nClass ImmutableNetwork<N,​E>; // A Network whose elements and structural relationships will never change.\nClass ImmutableNetwork.Builder<N,​E>; // A builder for creating ImmutableNetwork instances, especially static final networks.\nClass ImmutableValueGraph<N,​V>; // A ValueGraph whose elements and structural relationships will never change.\n", "des": "An API for representing graph (node and edge) data."}
{"index": 2990, "repo": "spring-ldap-core-3.1.0", "code": "package core;\n\npackage core.impl; // Provides a single public class which implements OdmManager.\npublic interface ObjectDirectoryMapper; // The ObjectDirectoryMapper keeps track of managed class metadata and is used by LdapTemplate to map to/from entity objects annotated with the annotations specified in the org.springframework.ldap.odm.annotations package.\npublic class OdmException extends NamingException; // The root of the Spring LDAP ODM exception hierarchy.\n", "des": "Provides an OdmManager interface for interaction with an LDAP directory."}
{"index": 3088, "repo": "spring-ws-core-4.0.5", "code": "package mapping;\n\npublic class DelegatingSoapEndpointMapping extends Object implements org.springframework.beans.factory.InitializingBean, SoapEndpointMapping; // EndpointMapping implement that adds SOAP actors or roles to a delegate endpoint.\npublic class SoapActionAnnotationMethodEndpointMapping extends AbstractAnnotationMethodEndpointMapping<String> implements SoapEndpointMapping; // Implementation of the EndpointMapping interface that uses the SoapAction annotation to map methods to the request SOAPAction header.\npublic class SoapActionEndpointMapping extends AbstractMapBasedEndpointMapping implements SoapEndpointMapping; // Implementation of the EndpointMapping interface to map from SOAPAction headers to endpoint beans.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes."}
{"index": 1617, "repo": "spring-data-neo4j-7.1.2", "code": "package query;\n\npublic final class BoundingBox extends Object; // This is a utility class that computes the bounding box of a polygon as a rectangle defined by the lower left and upper right point.\n@API(status=INTERNAL, since=\"6.0\") public final class CypherAdapterUtils extends Object; // Bridging between Spring Data domain Objects and Cypher constructs.\n@API(status=INTERNAL, since=\"6.1\") public final class CypherdslConditionExecutorImpl<T> extends Object implements CypherdslConditionExecutor<T>;\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(exists=true) @API(status=STABLE, since=\"6.0\") public @interface ExistsQuery; // Specialized version of Query whose values is always used as exists projection.\n@API(status=INTERNAL, since=\"6.0\") public final class Neo4jQueryLookupStrategy extends Object implements QueryLookupStrategy; // Lookup strategy for queries.\n@API(status=INTERNAL, since=\"6.0.2\") public final class Neo4jSpelSupport extends Object; // This class provides a couple of extensions to the Spring Data Neo4j SpEL support.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @API(status=STABLE, since=\"6.0\") public @interface Query; // Annotation to provide Cypher statements that will be used for executing the method.\n@API(status=INTERNAL, since=\"6.1\") public final class QuerydslNeo4jPredicateExecutor<T> extends Object implements QuerydslPredicateExecutor<T>; // Querydsl specific fragment for extending SimpleNeo4jRepository with an implementation of QuerydslPredicateExecutor.\n@API(status=INTERNAL, since=\"6.0.4\") public final class QueryFragments extends Object; // Collects the parts of a Cypher query to be handed over to the Cypher generator.\n@API(status=INTERNAL, since=\"6.0.4\") public final class QueryFragmentsAndParameters extends Object; // Combines the QueryFragments with parameters.\n@API(status=INTERNAL, since=\"6.3.3\") public final class ReactiveCypherdslConditionExecutorImpl<T> extends Object implements ReactiveCypherdslConditionExecutor<T>;\n", "des": "A set of annotations for providing custom queries to repositories."}
{"index": 639, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package amrmproxy;\n\nInterface FederationAMRMProxyPolicy; // Implementors of this interface provide logic to split the list of ResourceRequests received by the AM among various RMs.\nClass AbstractAMRMProxyPolicy; // Base abstract class for FederationAMRMProxyPolicy implementations, that provides common validation for reinitialization.\nClass BroadcastAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy that simply broadcasts each ResourceRequest to all the available sub-clusters.\nClass HomeAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy that simply sends the ResourceRequest to the home subcluster.\nClass LocalityMulticastAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy interface that carefully multicasts the requests with the following behavior:\nClass RejectAMRMProxyPolicy; // An implementation of the FederationAMRMProxyPolicy that simply rejects all requests.\n", "des": "AMRMPRoxy policies."}
{"index": 2444, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jdbc;\n\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class) @ConditionalOnClass({org.springframework.jdbc.core.JdbcTemplate.class,org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.class}) @ConditionalOnBean(javax.sql.DataSource.class) @ConditionalOnEnabledHealthIndicator(\"db\") @EnableConfigurationProperties(DataSourceHealthIndicatorProperties.class) public class DataSourceHealthContributorAutoConfiguration extends Object implements org.springframework.beans.factory.InitializingBean; // Auto-configuration for DataSourceHealthIndicator.\n@ConfigurationProperties(prefix=\"management.health.db\") public class DataSourceHealthIndicatorProperties extends Object; // External configuration properties for DataSourceHealthIndicator.\n", "des": "Auto-configuration for actuator JDBC concerns."}
{"index": 2688, "repo": "spring-data-jpa-3.1.2", "code": "package query;\n\npublic abstract class AbstractJpaQuery extends Object implements RepositoryQuery; // Abstract base class to implement RepositoryQuerys.\npublic class BadJpqlGrammarException extends InvalidDataAccessResourceUsageException; // An exception thrown if the JPQL query is invalid.\npublic class BeanFactoryQueryRewriterProvider extends Object implements QueryRewriterProvider; // A BeanFactory-based QueryRewriterProvider.\npublic class DefaultJpaEntityMetadata<T> extends Object implements JpaEntityMetadata<T>; // Default implementation for JpaEntityMetadata.\npublic class DefaultJpaQueryMethodFactory extends Object implements JpaQueryMethodFactory; // A factory for creating JpaQueryMethod instances.\npublic class DefaultQueryEnhancer extends Object implements QueryEnhancer; // The implementation of QueryEnhancer using QueryUtils.\npublic class DelegatingQueryRewriter extends Object implements QueryRewriter; // Delegating QueryRewriter that delegates rewrite calls to a delegate provided by a Supplier.\npublic final class EscapeCharacter extends Object; // A value type encapsulating an escape character for LIKE queries and the actually usage of it in escaping Strings.\npublic class InvalidJpaQueryMethodException extends RuntimeException; // Signals that we encountered an invalid query method.\npublic class Jpa21Utils extends Object; // Utils for bridging various JPA 2.1 features.\npublic class JpaCountQueryCreator extends JpaQueryCreator; // Special JpaQueryCreator that creates a count projecting query.\npublic class JpaEntityGraph extends Object; // EntityGraph configuration for JPA 2.1 EntityGraphs.\npublic interface JpaEntityMetadata<T> extends EntityMetadata<T>; // JPA specific extension of EntityMetadata.\npublic class JpaParameters extends Parameters<JpaParameters,JpaParameters.JpaParameter>; // Custom extension of Parameters discovering additional query parameter annotations.\npublic static class JpaParameters.JpaParameter extends Parameter; // Custom Parameter implementation adding parameters of type Temporal to the special ones.\npublic class JpaParametersParameterAccessor extends ParametersParameterAccessor; // ParameterAccessor based on an Parameters instance.\npublic class JpaQueryCreator extends AbstractQueryCreator<jakarta.persistence.criteria.CriteriaQuery<? extends Object>,jakarta.persistence.criteria.Predicate>; // Query creator to create a CriteriaQuery from a PartTree.\n", "des": "Query implementation to execute queries against JPA."}
{"index": 98, "repo": "ignite-core-2.15.0", "code": "package messages;\n\nClass TcpDiscoveryAbstractMessage; // Base class to implement discovery messages.\nClass TcpDiscoveryAbstractTraceableMessage; // Abstract traceable message for TCP discovery.\nClass TcpDiscoveryAuthFailedMessage; // Message telling joining node that its authentication failed on coordinator.\nClass TcpDiscoveryCheckFailedMessage; // Message telling joining node that it failed coordinator's validation check.\nClass TcpDiscoveryClientAckResponse;\nClass TcpDiscoveryClientMetricsUpdateMessage; // Metrics update message.\nClass TcpDiscoveryClientPingRequest; // Ping request.\nClass TcpDiscoveryClientPingResponse; // Ping request.\nClass TcpDiscoveryClientReconnectMessage; // Message telling that client node is reconnecting to topology.\nClass TcpDiscoveryConnectionCheckMessage; // Message used to check whether a node is still connected to the topology.\nClass TcpDiscoveryCustomEventMessage; // Wrapped for custom message.\nClass TcpDiscoveryDiscardMessage; // Message sent by coordinator when some operation handling is over.\nClass TcpDiscoveryDummyWakeupMessage;\nClass TcpDiscoveryDuplicateIdMessage; // Message telling joining node that new topology already contain different node with same ID.\nClass TcpDiscoveryHandshakeRequest; // Handshake request.\nClass TcpDiscoveryHandshakeResponse; // Handshake response.\nClass TcpDiscoveryJoinRequestMessage; // Initial message sent by a node that wants to enter topology.\nClass TcpDiscoveryLoopbackProblemMessage; // Message telling joining node that it has loopback problem (misconfiguration).\nClass TcpDiscoveryMetricsUpdateMessage; // Metrics update message.\nClass TcpDiscoveryMetricsUpdateMessage.MetricsSet;\nClass TcpDiscoveryNodeAddedMessage; // Message telling nodes that new node should be added to topology.\nClass TcpDiscoveryNodeAddFinishedMessage; // Sent by coordinator across the ring to finish node add process.\nClass TcpDiscoveryNodeFailedMessage; // Sent by node that has detected node failure to coordinator across the ring, then sent by coordinator across the ring.\nClass TcpDiscoveryNodeLeftMessage; // Sent by node that is stopping to coordinator across the ring, then sent by coordinator across the ring.\nClass TcpDiscoveryPingRequest; // Ping request.\nClass TcpDiscoveryPingResponse; // Ping response.\nClass TcpDiscoveryRingLatencyCheckMessage;\nClass TcpDiscoveryServerOnlyCustomEventMessage; // Wrapped for custom message that must not be delivered to the client nodes.\n", "des": "Contains implementation messages."}
{"index": 3283, "repo": "opencms-core-15.0", "code": "package parse;\n\nClass A_CmsConfiguredHtmlParser; // Base class for all classes that are specified for the <cms:parse parserClass=\"name\" param=\"config\" /> tag in the parserClass Attribute.\n", "des": "API classes for the <cms:parse> tag."}
{"index": 3378, "repo": "opencms-core-15.0", "code": "package content;\n\nInterface I_CmsXmlContentEditorChangeHandler; // Handles changes during the xml content editor session.\nInterface I_CmsXmlContentHandler; // Handles special XML content livetime events, and also provides XML content editor rendering hints.\nInterface I_CmsXmlContentLocation; // This class represents a location in an XML content for a specific locale.\nInterface I_CmsXmlContentValueLocation; // Interface representing an XML content location which corresponds to an actual content value.\nInterface I_CmsXmlContentValueVisitor; // Visitor interface that allows looping through all the values in a XML content document.\nInterface I_CmsXmlContentVisibilityHandler; // Handles the visibility of fields in the XML content editor.\nClass CmsChangeHandlerConfig; // A configuration bean representing a <ChangeHandler> element configured in an XSD's field settings.\nClass CmsDefaultXmlContentHandler; // Default implementation for the XML content handler, will be used by all XML contents that do not provide their own handler.\nClass CmsDefaultXmlContentHandler.VisibilityConfiguration; // Contains the visibility handler configuration for a content field path.\nClass CmsGeoMappingConfiguration; // Geo-coordinate mapping configuration for an XML content schema.\nClass CmsGeoMappingConfiguration.Entry; // A single configuration entry.\nClass CmsMappingResolutionContext; // A class which represents the context for resolving all content value mappings of an XML content.\nClass CmsNumberSuffixNameSequence; // Name generator which appends a numeric suffix to a given base string.\nClass CmsVersionTransformer; // Provides static methods for XML content version transformations.\nClass CmsVfsBundleLoaderXml; // Loads message bundles from the different locales of a single XML content.\nClass CmsVfsFileValueBean; // A bean class containing both a path and a UUID which should be stored in an XML file value.\nClass CmsXmlContent; // Implementation of a XML content object, used to access and manage structured content.\nClass CmsXmlContentErrorHandler; // Handler for issues found during XML content validation.\nClass CmsXmlContentFactory; // Provides factory methods to unmarshal (read) an XML content object.\nClass CmsXmlContentMacroVisitor; // Visitor implementation that provides macro resolving for all visited values.\nClass CmsXmlContentProperty; // Describes both VFS properties and Container Page Element settings, used by the GWT client.\nClass CmsXmlContentPropertyHelper; // Provides common methods on XML property configuration.\nClass CmsXmlContentRootLocation; // Represents the root of an XML content for a given locale.\n", "des": "Contains functions for structured content storage using XML, commonly called \"XML content\" in OpenCms."}
{"index": 3502, "repo": "poi-5.2.3", "code": "package filesystem;\n\nInterface BATManaged; // This interface defines behaviors for objects managed by the Block Allocation Table (BAT).\nInterface DirectoryEntry; // This interface defines methods specific to Directory objects managed by a Filesystem instance.\nInterface DocumentEntry; // This interface defines methods specific to Document objects managed by a Filesystem instance.\nInterface Entry; // This interface provides access to an object managed by a Filesystem instance.\nInterface POIFSWriterListener; // Interface POIFSWriterListener\nClass BlockStore; // This abstract class describes a way to read, store, chain and free a series of blocks (be they Big or Small ones)\nClass DirectoryNode; // Simple implementation of DirectoryEntry\nClass DocumentDescriptor; // Class DocumentDescriptor\nClass DocumentFactoryHelper; // A small base class for the various factories, e.g.\nClass DocumentInputStream; // This class provides methods to read a DocumentEntry managed by a POIFSFileSystem instance.\nClass DocumentNode; // Simple implementation of DocumentEntry for OPOIFS\nClass DocumentOutputStream; // This class provides methods to write a DocumentEntry managed by a POIFSFileSystem instance.\nClass EntryNode; // Abstract implementation of Entry Extending classes should override isDocument() or isDirectory(), as appropriate Extending classes must override isDeleteOK()\nClass EntryUtils;\nClass FilteringDirectoryNode; // A DirectoryEntry filter, which exposes another DirectoryEntry less certain parts.\nClass Ole10Native; // Represents an Ole10Native record which is wrapped around certain binary files being embedded in OLE2 documents.\nClass POIFSDocument; // This class manages a document in the NIO POIFS filesystem.\nClass POIFSDocumentPath; // Class POIFSDocumentPath\nClass POIFSFileSystem; // This is the main class of the POIFS system; it manages the entire life cycle of the filesystem.\nClass POIFSMiniStore; // This class handles the MiniStream (small block store) in the NIO case for POIFSFileSystem\nClass POIFSStream; // This handles reading and writing a stream within a POIFSFileSystem.\nClass POIFSWriterEvent; // Class POIFSWriterEvent\nClass TempFilePOIFSFileSystem; // An experimental POIFSFileSystem to support the encryption of large files\nEnum FileMagic; // The file magic number, i.e.\n", "des": "filesystem package maps OLE 2 Compound document files to a more familiar filesystem interface."}
{"index": 1119, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package numa;\n\nClass NumaNodeResource; // NumaNodeResource class holds the NUMA node topology with the total and used resources.\nClass NumaResourceAllocation; // NumaResourceAllocation contains Memory nodes and CPU nodes assigned to a container.\nClass NumaResourceAllocator; // NUMA Resources Allocator reads the NUMA topology and assigns NUMA nodes to the containers.\nClass NumaResourceHandlerImpl; // ResourceHandler implementation for allocating NUMA Resources to each container.\n", "des": "Package org.apache.hadoop.yarn.server.nodemanager.containermanager.linux."}
{"index": 2466, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package kairos;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.kairos.KairosMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"kairos\") @EnableConfigurationProperties(KairosProperties.class) public class KairosMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to KairosDB.\n@ConfigurationProperties(prefix=\"management.kairos.metrics.export\") public class KairosProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring KairosDB metrics export.\n", "des": "Support for exporting actuator metrics to KairosDB."}
{"index": 131, "repo": "ignite-core-2.15.0", "code": "package binary;\n\npackage binary.builder; // Contains classes specific to binary builder API.\npackage binary.streams; // Contains binary APIs implementation for streams.\nInterface BinaryFieldEx;\nInterface BinaryIdentityResolver; // Interface to compute hash codes for new binary objects and compare them for equality.\nInterface BinaryMetadataHandler; // Binary metadata handler.\nInterface BinaryObjectEx; // Extended binary object interface.\nInterface BinaryPositionReadable; // Interface allowing for positioned read.\nInterface BinaryRawReaderEx; // Extended reader interface.\nInterface BinaryRawWriterEx; // Extended writer interface.\nInterface BinaryReaderHandlesHolder; // Holder for handles.\nInterface BinaryWriteReplacer; // Interface to perform write replace.\nClass BinaryAbstractIdentityResolver; // Abstract identity resolver with common routines.\nClass BinaryArray; // Binary object representing array.\nClass BinaryArrayIdentityResolver; // Identity resolver implementation which compares raw array content of the binary object.\nClass BinaryCachingMetadataHandler; // Simple caching metadata handler.\nClass BinaryClassDescriptor; // Binary class descriptor.\nClass BinaryContext; // Binary context.\nClass BinaryContextHolder; // Binary context holder.\nClass BinaryEnumArray; // Ignite distinguishes between array of objects and array of enums.\nClass BinaryEnumCache; // Cache for enum constants.\nClass BinaryEnumObjectImpl; // Binary enum object.\nClass BinaryFieldAccessor; // Field accessor to speedup access.\nClass BinaryFieldImpl; // Implementation of binary field descriptor.\nClass BinaryFieldMetadata; // Binary field metadata.\nClass BinaryInternalMapper; // Internal binary mapper.\nClass BinaryMarshaller; // Implementation of Marshaller that lets to serialize and deserialize all objects in the binary format.\nClass BinaryMetadata; // Binary metadata which is passed over a wire.\nClass BinaryMethodWriteReplacer; // Write replacer based on method invocation.\nClass BinaryNoopMetadataHandler; // No-op metadata handler.\nClass BinaryObjectExImpl; // Internal binary object interface.\nClass BinaryObjectImpl; // Binary object implementation.\nClass BinaryObjectOffheapImpl; // Binary object implementation over offheap memory\nClass BinaryPrimitives; // Primitives writer.\nClass BinaryReaderExImpl; // Binary reader implementation.\nClass BinaryReaderHandles; // Reader handles.\nClass BinaryReaderHandlesHolderImpl; // Simple holder for handles.\nClass BinarySchema; // Schema describing binary object content.\n", "des": "Contains binary APIs internal implementation."}
{"index": 2, "repo": "connect-api-3.5.0", "code": "package policy;\n\nInterface ConnectorClientConfigOverridePolicy; // An interface for enforcing a policy on overriding of Kafka client configs via the connector configs.\nClass ConnectorClientConfigRequest;\nEnum ConnectorClientConfigRequest.ClientType;\n", "des": "Provides pluggable interfaces for policies controlling how users can configure connectors."}
{"index": 2379, "repo": "spring-batch-core-5.0.2", "code": "package core;\n\npackage core.annotation; // Annotations for java based configuration of listeners.\npackage core.configuration; // Interfaces for registration and location of job configurations.\npackage core.converter; // Support classes for implementations of the batch APIs.\npackage core.explore; // Interfaces and related classes to support meta data browsing.\npackage core.job; // Specific implementations of job concerns.\npackage core.launch; // Interfaces and simple implementations of launch concerns.\npackage core.listener; // Generic implementations of core batch listener interfaces.\npackage core.observability; // This package contains APIs related to batch observability.\npackage core.partition; // Interfaces for partitioning components.\npackage core.repository; // Interfaces and generic implementations of repository concerns.\npackage core.scope; // Implementation of Spring Batch specific bean scopes (Job and Step).\npackage core.step; // Specific implementations of step concerns.\npublic enum BatchStatus extends Enum<BatchStatus>; // Enumeration representing the status of an execution.\npublic interface ChunkListener extends StepListener; // Listener interface for the lifecycle of a chunk.\npublic class DefaultJobKeyGenerator extends Object implements JobKeyGenerator<JobParameters>; // Default implementation of the JobKeyGenerator interface.\npublic class Entity extends Object implements Serializable; // Batch Domain Entity class.\npublic class ExitStatus extends Object implements Serializable, Comparable<ExitStatus>; // Value object used to carry information about the status of a job or step execution.\npublic interface ItemProcessListener<T,S> extends StepListener; // Listener interface for the processing of an item.\npublic interface ItemReadListener<T> extends StepListener; // Listener interface around the reading of an item.\npublic interface ItemWriteListener<S> extends StepListener; // Listener interface for the writing of items.\npublic interface Job; // Batch domain object representing a job.\npublic class JobExecution extends Entity; // Batch domain object representing the execution of a job.\npublic class JobExecutionException extends Exception; // Root of exception hierarchy for checked exceptions in job and step execution.\npublic interface JobExecutionListener; // Provide callbacks at specific points in the lifecycle of a Job.\npublic class JobInstance extends Entity; // Batch domain object representing a uniquely identifiable job run.\npublic class JobInterruptedException extends JobExecutionException; // Exception to indicate the job has been interrupted.\n", "des": "Core domain context for Spring Batch covering jobs, steps, configuration and execution abstractions."}
{"index": 2692, "repo": "spring-integration-http-6.1.2", "code": "package http;\n\npackage http.config; // Provides classes for configuration - parsers, namespace handlers.\npackage http.converter; // Provides classes supporting message conversion.\npackage http.dsl; // Provides HTTP Components support for Spring Integration Java DSL.\npackage http.inbound; // Provides classes supporting inbound endpoints.\npackage http.management; // Provides classes related to management support.\npackage http.multipart; // Provides classes supporting multipart HTTP requests.\npackage http.outbound; // Provides classes supporting outbound endpoints.\npackage http.support; // Provides classes to support Http endpoints, including header mapping.\npublic abstract class HttpHeaders extends Object;\n", "des": "Base package for Http support."}
{"index": 896, "repo": "commons-jcs3-core-3.1", "code": "package engine;\n\npackage engine.behavior; // Interfaces used by the core and the auxiliary caches.\npackage engine.control; // The primary cache classes and the hub.\npackage engine.memory; // Parent package for memory type plugins.\nClass AbstractCacheEventQueue<K,V>; // An abstract base class to the different implementations\nClass CacheAdaptor<K,V>; // Used for Cache-to-Cache messaging purposes.\nClass CacheElement<K,V>; // Generic element wrapper.\nClass CacheElementSerialized<K,V>; // Either serialized value or the value should be null;\nClass CacheEventQueue<K,V>; // An event queue is used to propagate ordered cache events to one and only one target listener.\nClass CacheEventQueueFactory<K,V>; // This class hands out event Queues.\nClass CacheGroup; // The grouping functionality is on the way out.\nClass CacheInfo; // This is a static variable holder for the distribution auxiliaries that need something like a vmid.\nClass CacheListeners<K,V>; // Used to associates a set of [cache listener to cache event queue] for a cache.\nClass CacheWatchRepairable; // Intercepts the requests to the underlying ICacheObserver object so that the listeners can be recorded locally for remote connection recovery purposes.\nClass CompositeCacheAttributes; // The CompositeCacheAttributes defines the general cache region settings.\nClass ElementAttributes; // This it the element attribute descriptor class.\nClass PooledCacheEventQueue<K,V>; // An event queue is used to propagate ordered cache events to one and only one target listener.\nClass ZombieCacheService<K,V>; // Zombie adapter for any cache service.\nClass ZombieCacheServiceNonLocal<K,V>; // Zombie adapter for the non local cache services.\nClass ZombieCacheServiceNonLocal.ZombieEvent; // Base of the other events.\nClass ZombieCacheWatch; // Zombie Observer.\nEnum CacheStatus; // Cache statuses\n", "des": "Interfaces used by the core and the auxiliary caches."}
{"index": 1598, "repo": "spring-websocket-6.0.11", "code": "package standard;\n\npublic abstract class AbstractStandardUpgradeStrategy extends Object implements RequestUpgradeStrategy; // A base class for RequestUpgradeStrategy implementations that build on the standard WebSocket API for Java (JSR-356).\npublic abstract class AbstractTyrusRequestUpgradeStrategy extends AbstractStandardUpgradeStrategy; // A base class for RequestUpgradeStrategy implementations on top of JSR-356 based servers which include Tyrus as their WebSocket engine.\npublic class GlassFishRequestUpgradeStrategy extends AbstractTyrusRequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Oracle's GlassFish 4.1 and higher.\npublic class ServerEndpointExporter extends org.springframework.web.context.support.WebApplicationObjectSupport implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton; // Detects beans of type ServerEndpointConfig and registers with the standard Jakarta WebSocket runtime.\npublic class ServerEndpointRegistration extends ServerEndpointConfig.Configurator implements ServerEndpointConfig, org.springframework.beans.factory.BeanFactoryAware; // An implementation of ServerEndpointConfig for use in Spring-based applications.\npublic class ServletServerContainerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<WebSocketContainer>, org.springframework.web.context.ServletContextAware, org.springframework.beans.factory.InitializingBean; // A FactoryBean for configuring ServerContainer.\npublic class SpringConfigurator extends ServerEndpointConfig.Configurator; // A ServerEndpointConfig.Configurator for initializing ServerEndpoint-annotated classes through Spring.\npublic class StandardWebSocketUpgradeStrategy extends AbstractStandardUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for the Jakarta WebSocket API 2.1+.\npublic class TomcatRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Apache Tomcat.\npublic class UndertowRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for WildFly and its underlying Undertow web server.\npublic class WebLogicRequestUpgradeStrategy extends AbstractTyrusRequestUpgradeStrategy; // A WebSocket RequestUpgradeStrategy for Oracle's WebLogic.\npublic class WebSphereRequestUpgradeStrategy extends StandardWebSocketUpgradeStrategy; // WebSphere support for upgrading an HttpServletRequest during a WebSocket handshake.\n", "des": "Server-side classes for use with standard JSR-356 WebSocket endpoints."}
{"index": 1818, "repo": "spring-integration-mail-6.1.2", "code": "package support;\n\npublic class DefaultMailHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<jakarta.mail.internet.MimeMessage>; // Maps an inbound MimeMessage to a Map.\npublic final class MailUtils extends Object; // Utilities for handling mail messages.\n", "des": "Provides classes to support email."}
{"index": 2069, "repo": "spring-webmvc-6.0.11", "code": "package i18n;\n\npublic abstract class AbstractLocaleContextResolver extends AbstractLocaleResolver implements LocaleContextResolver; // Abstract base class for LocaleContextResolver implementations.\npublic abstract class AbstractLocaleResolver extends Object implements LocaleResolver; // Abstract base class for LocaleResolver implementations.\npublic class AcceptHeaderLocaleResolver extends AbstractLocaleResolver; // LocaleResolver implementation that looks for a match between locales in the Accept-Language header and a list of configured supported locales.\npublic class CookieLocaleResolver extends AbstractLocaleContextResolver; // LocaleResolver implementation that uses a cookie sent back to the user in case of a custom setting, with a fallback to the configured default locale, the request's Accept-Language header, or the default locale for the server.\npublic class FixedLocaleResolver extends AbstractLocaleContextResolver; // LocaleResolver implementation that always returns a fixed default locale and optionally time zone.\npublic class LocaleChangeInterceptor extends Object implements HandlerInterceptor; // Interceptor that allows for changing the current locale on every request, via a configurable request parameter (default parameter name: \"locale\").\npublic class SessionLocaleResolver extends AbstractLocaleContextResolver; // LocaleResolver implementation that uses a locale attribute in the user's session in case of a custom setting, with a fallback to the configured default locale, the request's Accept-Language header, or the default locale for the server.\n", "des": "Locale support classes for Spring's web MVC framework."}
{"index": 958, "repo": "spring-ws-3.0.10.RELEASE", "code": "package mapping;\n\npackage mapping.jaxb; // Provides JAXB2-based EndpointMapping implementations.\nClass AbstractAnnotationMethodEndpointMapping<T>; // Abstract base for EndpointMapping implementations that map classes tagged with an annotation.\nClass AbstractEndpointMapping; // Abstract base class for EndpointMapping implementations.\nClass AbstractMapBasedEndpointMapping; // Abstract base class for endpoint mapping that are based on a Map.\nClass AbstractMethodEndpointMapping<T>; // Abstract base class for MethodEndpoint mappings.\nClass AbstractQNameEndpointMapping; // Abstract base class for EndpointMappings that resolve qualified names as registration keys.\nClass PayloadRootAnnotationMethodEndpointMapping; // Implementation of the EndpointMapping interface that uses the PayloadRoot annotation to map methods to request payload root elements.\nClass PayloadRootQNameEndpointMapping; // Implementation of the EndpointMapping interface to map from the qualified name of the request payload root element.\nClass SimpleMethodEndpointMapping; // Simple subclass of AbstractMethodEndpointMapping that maps from the local name of the request payload to methods.\nClass UriEndpointMapping; // Implementation of the EndpointMapping interface to map from the full request URI or request URI path to endpoint beans.\nClass XPathPayloadEndpointMapping; // Implementation of the EndpointMapping interface that maps to endpoint using an XPath expression.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations."}
{"index": 1638, "repo": "spring-kafka-3.0.9", "code": "package micrometer;\n\npublic enum KafkaListenerObservation extends Enum<KafkaListenerObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring for Apache Kafka Observation for listeners.\npublic static class KafkaListenerObservation.DefaultKafkaListenerObservationConvention extends Object implements KafkaListenerObservationConvention; // Default KafkaListenerObservationConvention for Kafka listener key values.\npublic static enum KafkaListenerObservation.ListenerLowCardinalityTags extends Enum<KafkaListenerObservation.ListenerLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface KafkaListenerObservationConvention extends io.micrometer.observation.ObservationConvention<KafkaRecordReceiverContext>; // ObservationConvention for Kafka listener key values.\npublic class KafkaRecordReceiverContext extends io.micrometer.observation.transport.ReceiverContext<org.apache.kafka.clients.consumer.ConsumerRecord<?,?>>; // ReceiverContext for ConsumerRecords.\npublic class KafkaRecordSenderContext extends io.micrometer.observation.transport.SenderContext<org.apache.kafka.clients.producer.ProducerRecord<?,?>>; // SenderContext for ProducerRecords.\npublic enum KafkaTemplateObservation extends Enum<KafkaTemplateObservation> implements io.micrometer.observation.docs.ObservationDocumentation; // Spring for Apache Kafka Observation for KafkaTemplate.\npublic static class KafkaTemplateObservation.DefaultKafkaTemplateObservationConvention extends Object implements KafkaTemplateObservationConvention; // Default KafkaTemplateObservationConvention for Kafka template key values.\npublic static enum KafkaTemplateObservation.TemplateLowCardinalityTags extends Enum<KafkaTemplateObservation.TemplateLowCardinalityTags> implements io.micrometer.common.docs.KeyName; // Low cardinality tags.\npublic interface KafkaTemplateObservationConvention extends io.micrometer.observation.ObservationConvention<KafkaRecordSenderContext>; // ObservationConvention for Kafka template key values.\npublic final class MicrometerHolder extends Object; // A wrapper for micrometer timers when available on the class path.\n", "des": "Provides classes to support Micrometer."}
{"index": 3672, "repo": "solr-core-9.3.0", "code": "package metrics;\n\npackage metrics.reporters; // This package houses 'pluggable' metric reporters that inherit from the SolrMetricReporter class.\nInterface MetricSuppliers.NoOpMetric; // Marker interface for all no-op metrics.\nInterface SolrMetricProducer; // Used by objects that expose metrics through SolrMetricManager.\nClass AggregateMetric; // This class is used for keeping several partial named values and providing useful statistics over them.\nClass AggregateMetric.Update; // Simple class to represent current value and how many times it was set.\nClass AltBufferPoolMetricSet; // This is an alternative implementation of BufferPoolMetricSet that doesn't need an MBean server.\nClass DelegateRegistryCounter; // A counter implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass DelegateRegistryHistogram; // A meter implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass DelegateRegistryMeter; // A meter implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass DelegateRegistryTimer; // A timer implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass FilteringSolrMetricReporter; // A SolrMetricReporter that supports (prefix) filters.\nClass MetricsMap; // Dynamically constructed map of metrics, intentionally different from MetricSet where each metric had to be known in advance and registered separately in MetricRegistry.\nClass MetricSuppliers; // Helper class for constructing instances of MetricRegistry.MetricSupplier based on plugin configuration.\nClass MetricSuppliers.DefaultCounterSupplier; // Default Counter supplier.\nClass MetricSuppliers.DefaultHistogramSupplier; // Default supplier of Histogram instances, with configurable reservoir.\nClass MetricSuppliers.DefaultMeterSupplier; // Default Meter supplier.\nClass MetricSuppliers.DefaultTimerSupplier; // Default supplier of Timer instances, with configurable clock and reservoir.\nClass MetricSuppliers.NoOpCounterSupplier; // No-op implementation of Counter supplier.\nClass MetricSuppliers.NoOpGauge; // No-op implementation of Gauge.\nClass MetricSuppliers.NoOpHistogramSupplier; // No-op implementation of Histogram supplier.\n", "des": "The SolrCoreMetricManager is responsible for collecting metrics from SolrMetricProducer's and exposing metrics to SolrMetricReporter's."}
{"index": 2803, "repo": "spring-security-oauth2-core-6.1.2", "code": "package endpoint;\n\npublic final class DefaultMapOAuth2AccessTokenResponseConverter extends Object implements org.springframework.core.convert.converter.Converter<Map<String,Object>,OAuth2AccessTokenResponse>; // A Converter that converts the provided OAuth 2.0 Access Token Response parameters to an OAuth2AccessTokenResponse.\npublic final class DefaultOAuth2AccessTokenResponseMapConverter extends Object implements org.springframework.core.convert.converter.Converter<OAuth2AccessTokenResponse,Map<String,Object>>; // A Converter that converts the provided OAuth2AccessTokenResponse to a Map representation of the OAuth 2.0 Access Token Response parameters.\npublic final class OAuth2AccessTokenResponse extends Object; // A representation of an OAuth 2.0 Access Token Response.\npublic static final class OAuth2AccessTokenResponse.Builder extends Object; // A builder for OAuth2AccessTokenResponse.\npublic final class OAuth2AuthorizationExchange extends Object; // An \"exchange\" of an OAuth 2.0 Authorization Request and Response for the authorization code grant type.\npublic final class OAuth2AuthorizationRequest extends Object implements Serializable; // A representation of an OAuth 2.0 Authorization Request for the authorization code grant type.\npublic static final class OAuth2AuthorizationRequest.Builder extends Object; // A builder for OAuth2AuthorizationRequest.\npublic final class OAuth2AuthorizationResponse extends Object; // A representation of an OAuth 2.0 Authorization Response for the authorization code grant type.\npublic static final class OAuth2AuthorizationResponse.Builder extends Object; // A builder for OAuth2AuthorizationResponse.\npublic final class OAuth2AuthorizationResponseType extends Object implements Serializable; // The response_type parameter is consumed by the authorization endpoint which is used by the authorization code grant type.\npublic final class OAuth2DeviceAuthorizationResponse extends Object; // A representation of an OAuth 2.0 Device Authorization Response.\npublic static final class OAuth2DeviceAuthorizationResponse.Builder extends Object; // A builder for OAuth2DeviceAuthorizationResponse.\npublic final class OAuth2ParameterNames extends Object; // Standard and custom (non-standard) parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint, token endpoint and token revocation endpoint.\npublic final class PkceParameterNames extends Object; // Standard parameter names defined in the OAuth Parameters Registry and used by the authorization endpoint and token endpoint.\n", "des": "Support classes that model the OAuth 2.0 Request and Response messages from the Authorization Endpoint and Token Endpoint."}
{"index": 3593, "repo": "lucene-test-framework-9.7.0", "code": "package geo;\n\nClass BaseGeoPointTestCase; // Abstract class to do basic tests for a geospatial impl (high level fields and queries) NOTE: This test focuses on geospatial (distance queries, polygon queries, etc) indexing and search, not any underlying storage format or encoding: it merely supplies two hooks for the encoding so that tests can be exact.\nClass BaseXYPointTestCase; // Abstract class to do basic tests for a xy spatial impl (high level fields and queries)\nClass EarthDebugger; // Draws shapes on the earth surface and renders using the very cool http://www.webglearth.org.\nClass GeoTestUtil; // static methods for testing geo\nClass ShapeTestUtil; // generates random cartesian geometry; heavy reuse of GeoTestUtil\n", "des": "Reusable geo test utilities."}
{"index": 3550, "repo": "guava-32.1.1-jre", "code": "package annotations;\n\nAnnotation Type Beta; // Signifies that a public API (public class, method or field) is subject to incompatible changes, or even removal, in a future release.\nAnnotation Type GwtCompatible; // The presence of this annotation on a type indicates that the type may be used with the Google Web Toolkit (GWT).\nAnnotation Type GwtIncompatible; // The presence of this annotation on an API indicates that the method may not be used with the Google Web Toolkit (GWT).\nAnnotation Type J2ktIncompatible; // The presence of this annotation on an API indicates that the method may not be used with J2kt.\nAnnotation Type VisibleForTesting; // Annotates a program element that exists, or is more widely visible than otherwise necessary, only for use in test code.\n", "des": "Annotation types."}
{"index": 1706, "repo": "spring-integration-jmx-6.1.2", "code": "package config;\n\npublic class AttributePollingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(IntegrationMBeanExportConfiguration.class) public @interface EnableIntegrationMBeanExport; // Enables default exporting for Spring Integration components in an existing application, as well as well all @ManagedResource annotated beans.\n@Configuration(proxyBeanMethods=false) public class IntegrationMBeanExportConfiguration extends Object implements org.springframework.context.annotation.ImportAware, org.springframework.context.EnvironmentAware, org.springframework.beans.factory.BeanFactoryAware; // @Configuration class that registers a IntegrationMBeanExporter bean.\npublic class JmxIntegrationConfigurationInitializer extends Object implements org.springframework.integration.config.IntegrationConfigurationInitializer; // The JMX Integration infrastructure beanFactory initializer.\npublic class JmxNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's jmx namespace.\npublic class MBeanExporterParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'mbean-export' element of the integration JMX namespace.\npublic class MBeanTreePollingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser;\npublic class NotificationListeningChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser;\npublic class NotificationPublishingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\npublic class OperationInvokingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\npublic class OperationInvokingOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 967, "repo": "spring-ws-3.0.10.RELEASE", "code": "package axiom;\n\npackage axiom.support; // Support classes for working with the AXis Object Model (AXIOM).\nClass AxiomSoapMessage; // AXIOM-specific implementation of the SoapMessage interface.\nClass AxiomSoapMessageFactory; // Axiom-specific implementation of the WebServiceMessageFactory interface.\nClass AxiomAttachmentException;\nClass AxiomSoapBodyException;\nClass AxiomSoapElementException;\nClass AxiomSoapEnvelopeException;\nClass AxiomSoapFaultException;\nClass AxiomSoapHeaderException;\nClass AxiomSoapMessageCreationException;\nClass AxiomSoapMessageException;\n", "des": "AXis Object Model (AXIOM) support for Spring-WS' soap message infrastructure."}
{"index": 2021, "repo": "spring-boot-devtools-3.1.1", "code": "package payload;\n\npublic class HttpTunnelPayload extends Object; // Encapsulates a payload data sent over a HTTP tunnel.\npublic class HttpTunnelPayloadForwarder extends Object; // Utility class that forwards HttpTunnelPayload instances to a destination channel, respecting sequence order.\n", "des": "Classes to deal with payloads sent over an HTTP tunnel."}
{"index": 3362, "repo": "opencms-core-15.0", "code": "package widgets;\n\npackage widgets.serialdate; // Contains the server-side widget implementation, for the serial date widget..\nInterface I_CmsADEWidget; // Widgets to be used with the new XML content editor are required to implement this interface.\nInterface I_CmsComplexWidget; // Interface for complex widgets which are used in the Acacia editor to render whole nested contents.\nInterface I_CmsGalleryWidgetDynamicConfiguration; // Enables a dynamic configuration of values for the A_CmsGalleryWidget.\nInterface I_CmsImageWidgetDynamicConfiguration; // Enables a dynamic configuration of values for the CmsVfsImageWidget.\nInterface I_CmsWidget; // Describes an editor widget for use in the OpenCms workplace.\nInterface I_CmsWidgetDialog; // Describes a widget enabled dialog.\nInterface I_CmsWidgetParameter; // Parameter value wrapper used by the OpenCms workplace widgets.\nClass A_CmsAdeGalleryWidget; // Base class for all ADE gallery widget implementations.\nClass A_CmsCategorizedSelectWidget; // Abstract base class for categorized select widgets.\nClass A_CmsFormatterWidget; // Abstract superclass for widgets used to enable or disable formatters.\nClass A_CmsFormatterWidget.FormatterSelectComparator; // Comparator used to sort formatter beans in the order in which they should be displayed in the selection.\nClass A_CmsGalleryWidget; // Base class for all gallery widget implementations.\nClass A_CmsHtmlWidget; // Provides a widget that creates a rich input field using the matching component, for use on a widget dialog.\nClass A_CmsNativeComplexWidget; // This is an abstract class which you can inherit from to relatively easily implement complex widgets for rendering nested contents in Javascript.\nClass A_CmsSelectWidget; // Base class for select widgets.\nClass A_CmsWidget; // Base class for XML editor widgets.\nClass CmsAddFormatterWidget; // Widget used to select a formatter to add.\nClass CmsAdeDownloadGalleryWidget; // ADE download gallery widget implementations.\nClass CmsAdeImageGalleryWidget; // ADE image gallery widget implementations.\nClass CmsCalendarWidget; // Provides a DHTML calendar widget, for use on a widget dialog.\nClass CmsCategoryWidget; // Provides a widget for a category based dependent select boxes.\nClass CmsCategoryXmlContentHandler;\n", "des": "Contains the widget implementations, these are GUI elements used in editors and dialogs of the OpenCms workplace."}
{"index": 1143, "repo": "commons-math3-3.6.1", "code": "package analysis;\n\npackage analysis.differentiation; // This package holds the main interfaces and basic building block classes dealing with differentiation.\npackage analysis.function; // The function package contains function objects that wrap the methods contained in Math, as well as common mathematical functions such as the gaussian and sinc functions.\npackage analysis.integration; // Numerical integration (quadrature) algorithms for univariate real functions.\npackage analysis.interpolation; // Univariate real functions interpolation algorithms.\npackage analysis.polynomials; // Univariate real polynomials implementations, seen as differentiable univariate real functions.\npackage analysis.solvers; // Root finding algorithms, for univariate real functions.\nInterface BivariateFunction; // An interface representing a bivariate real function.\nInterface DifferentiableMultivariateFunction; // as of 3.1 replaced by MultivariateDifferentiableFunction\nInterface DifferentiableMultivariateVectorFunction; // as of 3.1 replaced by MultivariateDifferentiableVectorFunction\nInterface DifferentiableUnivariateFunction; // as of 3.1 replaced by UnivariateDifferentiableFunction\nInterface DifferentiableUnivariateMatrixFunction; // as of 3.1 replaced by UnivariateDifferentiableMatrixFunction\nInterface DifferentiableUnivariateVectorFunction; // as of 3.1 replaced by UnivariateDifferentiableVectorFunction\nInterface MultivariateFunction; // An interface representing a multivariate real function.\nInterface MultivariateMatrixFunction; // An interface representing a multivariate matrix function.\nInterface MultivariateVectorFunction; // An interface representing a multivariate vectorial function.\nInterface ParametricUnivariateFunction; // An interface representing a real function that depends on one independent variable plus some extra parameters.\nInterface RealFieldUnivariateFunction<T extends RealFieldElement<T>>; // An interface representing a univariate real function.\nInterface TrivariateFunction; // An interface representing a trivariate real function.\nInterface UnivariateFunction; // An interface representing a univariate real function.\nInterface UnivariateMatrixFunction; // An interface representing a univariate matrix function.\nInterface UnivariateVectorFunction; // An interface representing a univariate vectorial function.\nClass FunctionUtils; // Utilities for manipulating function objects.\n", "des": "Parent package for common numerical analysis procedures, including root finding, function interpolation and integration."}
{"index": 750, "repo": "artemis-odb-2.3.0", "code": "package artemis;\n\npackage artemis.annotations; // Annotations used by Artemis, both runtime and during compilation,\npackage artemis.managers; // Manager implementations.\npackage artemis.systems; // Entity systems.\npackage artemis.utils; // Helper classes.\nInterface ArtemisPlugin; // Plugin for artemis-odb.\nInterface ComponentTypeFactory.ComponentTypeListener;\nInterface EntitySubscription.SubscriptionListener; // This interfaces reports entities inserted or removed when matched against their EntitySubscription\nClass Archetype; // Provides a blueprint for new entities, offering greatly improved insertion performance for systems.\nClass ArchetypeBuilder; // Builder for basic Archetype instances.\nClass Aspect; // An Aspect is used by systems as a matcher against entities, to check if a system is interested in an entity.\nClass Aspect.Builder; // Constructs instances of Aspect.\nClass AspectSubscriptionManager; // Manages all instances of EntitySubscription.\nClass BaseComponentMapper<A extends Component>;\nClass BaseEntitySystem; // Tracks a subset of entities, but does not implement any sorting or iteration.\nClass BaseSystem; // Most basic system.\nClass Component; // Components are pure data classes with optionally some helper methods.\nClass ComponentManager; // Handles the association between entities and their components.\nClass ComponentMapper<A extends Component>; // Provide high performance component access and mutation from within a System.\nClass ComponentPool<T extends PooledComponent>;\nClass ComponentType; // Identifies components in artemis without having to use classes.\nClass ComponentTypeFactory; // Tracks all component types in a single world.\nClass Entity; // The entity convenience class.\nClass EntityEdit; // Entity mutator.\nClass EntityManager; // Manages entity instances.\nClass EntitySubscription; // Maintains the list of entities matched by an aspect.\nClass EntitySubscription.SubscriptionExtra;\nClass EntitySystem; // Tracks a subset of entities, but does not implement any sorting or iteration.\nClass EntityTransmuter; // Fastest way of changing entity component compositions.\nClass EntityTransmuterFactory; // Builder for EntityTransmuter.\nClass ImmediateComponentRemover<A extends Component>;\nClass InvocationStrategy; // Simple sequential invocation strategy.\nClass Manager; // A manager for handling entities in the world.\n", "des": "Core Artemis classes."}
{"index": 547, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "package view;\n\nClass AbstractDeviceDelegatingViewResolver; // Abstract ViewResolver implementation, providing a device aware ViewResolver wrapper that delegates to another view resolver implementation, allowing for resolution of device specific view names without the need for a dedicated mapping to be defined for each view.\nClass LiteDeviceDelegatingViewResolver; // A lightweight AbstractDeviceDelegatingViewResolver for adjusting a view based on the combination of resolved Device and specified SitePreference.\n", "des": "Device aware view resolution for Spring MVC-based web apps."}
{"index": 1937, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package http;\n\npackage http.codec; // Auto-configuration for HTTP codecs.\npublic class HttpMessageConverters extends Object implements Iterable<org.springframework.http.converter.HttpMessageConverter<?>>; // Bean used to manage the HttpMessageConverters used in a Spring Boot application.\n@AutoConfiguration(after={GsonAutoConfiguration.class,JacksonAutoConfiguration.class,JsonbAutoConfiguration.class}) @ConditionalOnClass(org.springframework.http.converter.HttpMessageConverter.class) @Conditional(org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition.class) @Import({org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration.class,org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration.class,org.springframework.boot.autoconfigure.http.JsonbHttpMessageConvertersConfiguration.class}) @ImportRuntimeHints(org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration.HttpMessageConvertersAutoConfigurationRuntimeHints.class) public class HttpMessageConvertersAutoConfiguration extends Object; // Auto-configuration for HttpMessageConverters.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.http.converter.StringHttpMessageConverter.class) protected static class HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration extends Object;\n", "des": "Auto-configuration for HTTP concerns."}
{"index": 997, "repo": "spring-ws-3.0.10.RELEASE", "code": "package context;\n\nInterface TransportContext; // Strategy interface for determining the current WebServiceConnection.\nClass DefaultTransportContext; // Default implementation of the TransportContext interface.\nClass TransportContextHolder; // Simple holder class that associates a TransportContext instance with the current thread.\n", "des": "Abstraction for determining the current TransportInputStream and TransportOutputStream."}
{"index": 119, "repo": "ignite-core-2.15.0", "code": "package dotnet;\n\nClass PlatformDotNetAffinityFunction; // AffinityFunction implementation which can be used to configure .NET affinity function in Java Spring configuration.\nClass PlatformDotNetBinaryConfiguration; // Mirror of .Net class BinaryConfiguration.cs\nClass PlatformDotNetBinaryTypeConfiguration; // Mirror of .Net class BinaryTypeConfiguration.cs\nClass PlatformDotNetCacheStoreFactory; // Wrapper for .NET cache store implementations.\nClass PlatformDotNetCacheStoreFactoryNative; // Cache store factory that wraps native factory object.\nClass PlatformDotNetConfiguration; // Mirror of .Net class IgniteConfiguration.cs\nClass PlatformDotNetLifecycleBean; // Lifecycle bean implementation which can be used to configure .Net lifecycle beans in Java Spring configuration.\n", "des": "Contains .Net platform-related classes."}
{"index": 3040, "repo": "spring-web-6.0.11", "code": "package multipart;\n\npackage multipart.support; // Support classes for the multipart resolution framework.\npublic class MaxUploadSizeExceededException extends MultipartException; // MultipartException subclass thrown when an upload exceeds the maximum upload size allowed.\npublic class MultipartException extends org.springframework.core.NestedRuntimeException; // Exception thrown when multipart resolution fails.\npublic interface MultipartFile extends org.springframework.core.io.InputStreamSource; // A representation of an uploaded file received in a multipart request.\npublic interface MultipartHttpServletRequest extends HttpServletRequest, MultipartRequest; // Provides additional methods for dealing with multipart content within a servlet request, allowing to access uploaded files.\npublic interface MultipartRequest; // This interface defines the multipart request access operations that are exposed for actual multipart requests.\npublic interface MultipartResolver; // A strategy interface for multipart file upload resolution in accordance with RFC 1867.\n", "des": "Multipart resolution framework for handling file uploads."}
{"index": 3584, "repo": "lucene-test-framework-9.7.0", "code": "package cheapbastard;\n\nClass CheapBastardCodec; // Codec that tries to use as little ram as possible because he spent all his money on beer\n", "des": "Codec that unreasonably tries to use as little RAM as possible."}
{"index": 3285, "repo": "opencms-core-15.0", "code": "package parser;\n\npackage parser.simplesearch; // Helpers to convert the list configuration XML content into a suitable bean, used by the CmsSimpleSearchConfigurationParser and the List manager app.\nInterface I_CmsSearchConfigurationParser; // The interface that must be implemented by search (form) configuration parsers.\nClass CmsJSONSearchConfigurationParser; // Search configuration parser reading JSON.\nClass CmsPlainQuerySearchConfigurationParser; // Search configuration parser reading a configuration containing a plain Solr query.\nClass CmsSimpleSearchConfigurationParser; // Search configuration parser using a list configuration file as the base configuration with additional JSON.\nClass CmsXMLSearchConfigurationParser; // Search configuration parser reading XML.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsSimpleSearchConfigurationParser.SortOption; // Sort options that are available by default.\n", "des": "API classes for the configuration parsers of the search form support provided for server-side Solr search."}
{"index": 173, "repo": "ignite-core-2.15.0", "code": "package protocols;\n\npackage protocols.tcp; // Adapters for TCP-based REST protocols.\nClass GridRestProtocolAdapter; // Abstract protocol adapter.\n", "des": "REST protocol handlers."}
{"index": 2873, "repo": "spring-integration-core-6.1.2", "code": "package message;\n\npublic class AdviceMessage<T> extends org.springframework.messaging.support.GenericMessage<T>; // A message implementation that is produced by an advice after successful message handling.\n", "des": "Provides concrete Message implementations."}
{"index": 635, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package records;\n\nInterface MasterKey;\nClass AppCollectorData;\nClass ContainerQueuingLimit; // Used to hold max wait time / queue length information to be passed back to the NodeManager.\nClass NodeHealthStatus; // NodeHealthStatus is a summary of the health status of the node.\nClass NodeStatus; // NodeStatus is a summary of the status of the node.\nClass OpportunisticContainersStatus; // OpportunisticContainersStatus captures information pertaining to the state of execution of the opportunistic containers within a node.\nEnum NodeAction; // The NodeManager is instructed to perform the given action.\n", "des": "Server records."}
{"index": 3074, "repo": "spring-ws-core-4.0.5", "code": "package soap;\n\npackage soap.addressing; // Provides WS-Addressing implementation classes.\npackage soap.client; // Contains classes for SOAP-specific client-side Spring-WS support.\npackage soap.saaj; // SOAP with Attachments API for Java (SAAJ) support for Spring-WS soap message infrastructure.\npackage soap.server; // Contains classes for SOAP-specific server-side Spring-WS support.\npackage soap.soap11; // Contains interfaces specific to SOAP 1.1.\npackage soap.soap12; // Contains interfaces specific to SOAP 1.2.\npackage soap.support; // Classes supporting the org.springframework.ws.soap package.\npublic abstract class AbstractSoapMessage extends AbstractMimeMessage implements SoapMessage; // Abstract implementation of the SoapMessage interface.\npublic interface SoapBody extends SoapElement; // Represents the Body element in a SOAP message.\npublic class SoapBodyException extends SoapMessageException; // Exception thrown when a SOAP body could not be accessed.\npublic interface SoapElement; // The base interface for all elements that are contained in a SOAP message.\npublic class SoapElementException extends SoapMessageException; // Exception thrown when a SOAP element could not be accessed.\npublic interface SoapEnvelope extends SoapElement; // Represents the Envelope element in a SOAP message.\npublic class SoapEnvelopeException extends SoapMessageException; // Exception thrown when a SOAP body could not be accessed.\npublic interface SoapFault extends SoapElement; // Represents the Fault element in the body of a SOAP message.\npublic interface SoapFaultDetail extends SoapElement; // Represents the detail element in a SOAP fault.\npublic interface SoapFaultDetailElement extends SoapElement; // Represents the content for an individual SOAP detail entry in a SOAP Message.\npublic class SoapFaultException extends SoapEnvelopeException; // Exception thrown when a SOAP fault could not be accessed.\npublic interface SoapHeader extends SoapElement; // Represents the Header element in a SOAP message.\npublic interface SoapHeaderElement extends SoapElement; // Represents the contents of an individual SOAP header in the a SOAP message.\npublic class SoapHeaderException extends SoapMessageException; // Exception thrown when a SOAP header could not be accessed.\npublic interface SoapMessage extends MimeMessage, FaultAwareWebServiceMessage; // Represents an abstraction for SOAP messages, providing access to a SOAP Envelope.\n", "des": "Provides the SOAP functionality of the Spring Web Services framework."}
{"index": 57, "repo": "ignite-core-2.15.0", "code": "package dialect;\n\nInterface JdbcDialect; // Represents a dialect of SQL implemented by a particular RDBMS.\nClass BasicJdbcDialect; // Basic implementation of dialect based on JDBC specification.\nClass DB2Dialect; // A dialect compatible with the IBM DB2 database.\nClass H2Dialect; // A dialect compatible with the H2 database.\nClass MySQLDialect; // A dialect compatible with the MySQL database.\nClass OracleDialect; // A dialect compatible with the Oracle database.\nClass SQLServerDialect; // A dialect compatible with the Microsoft SQL Server database.\n", "des": "Contains SQL dialects for different RDBMS."}
{"index": 2366, "repo": "camel-base-4.0.0-RC1", "code": "package converter;\n\n@DeferredContextBinding public final class CamelBaseBulkConverterLoader extends Object implements org.apache.camel.spi.TypeConverterLoader, org.apache.camel.spi.BulkTypeConverters, org.apache.camel.CamelContextAware; // Generated by camel build tools - do NOT edit this file!\n@Converter(generateBulkLoader=true) public final class CamelConverter extends Object; // Some useful converters for Camel APIs such as to convert a Predicate or Expression to a Processor\n@Converter(generateBulkLoader=true) public final class CollectionConverter extends Object; // Some core java.util Collection based Type Converters\n@Converter(generateBulkLoader=true) public final class DateTimeConverter extends Object; // Date and time related converters.\n@Converter(generateBulkLoader=true) public final class DurationConverter extends Object; // Converters for java.time.Duration.\n@Converter(generateBulkLoader=true) public final class IOConverter extends Object; // Some core java.io based Type Converters\n@Converter(generateBulkLoader=true) public final class NIOConverter extends Object; // Some core java.nio based Type Converters\n@Converter(generateBulkLoader=true) public final class ObjectConverter extends Object; // Some core java.lang based Type Converters\n@Converter(generateBulkLoader=true) public final class ResourceConverter extends Object;\n@Converter(generateBulkLoader=true) public final class SQLConverter extends Object; // SQL Date and time related converters.\n@Converter(generateBulkLoader=true) public final class UriTypeConverter extends Object; // A TypeConverter that converts to and from URIs.\n", "des": "A set of helper classes for converting from different types of Java object to be used by the Type Conversion Support"}
{"index": 2088, "repo": "spring-webmvc-6.0.11", "code": "package xml;\n\npublic class MappingJackson2XmlView extends AbstractJackson2View; // Spring MVC View that renders XML content by serializing the model for the current request using Jackson 2's XmlMapper.\npublic class MarshallingView extends AbstractView; // Spring-MVC View that allows for response context to be rendered as the result of marshalling by a Marshaller.\n", "des": "Support classes for providing a View implementation based on XML Marshalling."}
{"index": 344, "repo": "hadoop-hdfs-3.3.6", "code": "package diskbalancer;\n\npackage diskbalancer.command; // Commands for disk balancer command line tool.\npackage diskbalancer.connectors; // Connectors package is a set of logical connectors that connect to various data sources to read the hadoop cluster information.\npackage diskbalancer.datamodel; // Disk Balancer Data Model is the Data Model for the cluster that Disk Balancer is working against.\npackage diskbalancer.planner; // Planner takes a DiskBalancerVolumeSet, threshold and computes a series of steps that lead to an even data distribution between volumes of this DiskBalancerVolumeSet.\nEnum DiskBalancerException.Result; // Results returned by the RPC layer of DiskBalancer.\nClass DiskBalancerException; // Disk Balancer Exceptions.\n", "des": "Disk Balancer connects to a .DataNode and attempts to spread data across all volumes evenly."}
{"index": 1060, "repo": "avro-1.11.2", "code": "package generic;\n\nInterface GenericArray<T>; // Array that permits reuse of contained elements.\nInterface GenericContainer; // Contains data of other types.\nInterface GenericData.InstanceSupplier;\nInterface GenericEnumSymbol<E extends GenericEnumSymbol<E>>; // An enum symbol.\nInterface GenericFixed; // Fixed-size data.\nInterface GenericRecord; // A generic instance of a record schema.\nInterface IndexedRecord; // A record implementation that permits field access by integer index.\nClass GenericData; // Utilities for generic Java data.\nClass GenericData.Array<T>; // Default implementation of an array.\nClass GenericData.EnumSymbol; // Default implementation of GenericEnumSymbol.\nClass GenericData.Fixed; // Default implementation of GenericFixed.\nClass GenericData.Record; // Default implementation of GenericRecord.\nClass GenericDatumReader<D>; // DatumReader for generic Java objects.\nClass GenericDatumWriter<D>; // DatumWriter for generic Java objects.\nClass GenericRecordBuilder; // A RecordBuilder for generic records.\nEnum GenericData.StringType; // Used to specify the Java type for a string schema.\n", "des": "A generic representation for Avro data."}
{"index": 117, "repo": "ignite-core-2.15.0", "code": "package platform;\n\npackage platform.cpp; // Contains C++ platform-related classes.\npackage platform.dotnet; // Contains .Net platform-related classes.\nInterface PlatformJavaObjectFactory<T>; // Object factory used for advanced interop between platform and Java.\nEnum PlatformType; // Interop platform type.\nAnnotation Type PlatformServiceMethod; // Annotation for setting mapping between java interface's method and platform service's method.\n", "des": "Contains platform-related classes."}
{"index": 3828, "repo": "lucene-analysis-common-9.7.0", "code": "package snowball;\n\npackage snowball.ext; // Autogenerated snowball stemmer implementations.\nClass Among; // Internal class used by Snowball stemmers\nClass SnowballProgram; // Base class for a snowball stemmer\nClass SnowballStemmer; // Parent class of all snowball stemmers, which must implement stem\n", "des": "Snowball stemmer API"}
{"index": 478, "repo": "beam-sdks-java-core-2.49.0", "code": "package harness;\n\nInterface JvmInitializer; // A service interface for defining one-time initialization of the JVM during pipeline execution.\n", "des": "Utilities for configuring worker environment."}
{"index": 480, "repo": "beam-sdks-java-core-2.49.0", "code": "package fs;\n\nInterface MoveOptions; // An object that configures FileSystems.copy(java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, org.apache.beam.sdk.io.fs.MoveOptions...), FileSystems.rename(java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, java.util.List<org.apache.beam.sdk.io.fs.ResourceId>, org.apache.beam.sdk.io.fs.MoveOptions...), and FileSystems.delete(java.util.Collection<org.apache.beam.sdk.io.fs.ResourceId>, org.apache.beam.sdk.io.fs.MoveOptions...).\nInterface ResolveOptions; // An object that configures ResourceId.resolve(java.lang.String, org.apache.beam.sdk.io.fs.ResolveOptions).\nInterface ResourceId; // An identifier which represents a file-like resource.\nClass CreateOptions; // An abstract class that contains common configuration options for creating resources.\nClass CreateOptions.Builder<BuilderT extends CreateOptions.Builder<BuilderT>>; // An abstract builder for CreateOptions.\nClass CreateOptions.StandardCreateOptions; // A standard configuration options with builder.\nClass CreateOptions.StandardCreateOptions.Builder; // Builder for CreateOptions.StandardCreateOptions.\nClass MatchResult; // The result of FileSystem.match(java.util.List<java.lang.String>).\nClass MatchResult.Metadata; // MatchResult.Metadata of a matched file.\nClass MatchResult.Metadata.Builder; // Builder class for MatchResult.Metadata.\nClass MetadataCoder; // A Coder for MatchResult.Metadata.\nClass MetadataCoderV2; // A Coder for MatchResult.Metadata that includes MatchResult.Metadata.lastModifiedMillis().\nClass ResourceIdCoder; // A Coder for ResourceId.\nClass ResourceIdTester; // A utility to test ResourceId implementations.\nEnum EmptyMatchTreatment; // Options for allowing or disallowing filepatterns that match no resources in FileSystems.match(java.util.List<java.lang.String>).\nEnum MatchResult.Status; // Status of a MatchResult.\n", "des": "Apache Beam FileSystem interfaces and their default implementations."}
{"index": 1011, "repo": "spring-ws-3.0.10.RELEASE", "code": "package namespace;\n\nClass QNameEditor; // PropertyEditor for javax.xml.namespace.QName, to populate a property of type QName from a String value.\nClass QNameUtils; // Helper class for using QName.\nClass SimpleNamespaceContext; // Simple javax.xml.namespace.NamespaceContext implementation.\n", "des": "Provides classes that help with XML Namespace processing."}
{"index": 1709, "repo": "spring-boot-test-3.1.1", "code": "package assertj;\n\npublic class ApplicationContextAssert<C extends org.springframework.context.ApplicationContext> extends org.assertj.core.api.AbstractAssert<ApplicationContextAssert<C>,C>; // AssertJ assertions that can be applied to an ApplicationContext.\npublic static enum ApplicationContextAssert.Scope extends Enum<ApplicationContextAssert.Scope>; // The scope of an assertion.\npublic interface ApplicationContextAssertProvider<C extends org.springframework.context.ApplicationContext> extends org.springframework.context.ApplicationContext, org.assertj.core.api.AssertProvider<ApplicationContextAssert<C>>, Closeable; // An ApplicationContext that additionally supports AssertJ style assertions.\npublic interface AssertableApplicationContext extends ApplicationContextAssertProvider<org.springframework.context.ConfigurableApplicationContext>, org.springframework.context.ConfigurableApplicationContext; // An ApplicationContext that additionally supports AssertJ style assertions.\npublic interface AssertableReactiveWebApplicationContext extends ApplicationContextAssertProvider<org.springframework.boot.web.reactive.context.ConfigurableReactiveWebApplicationContext>, org.springframework.boot.web.reactive.context.ConfigurableReactiveWebApplicationContext; // A ReactiveWebApplicationContext that additionally supports AssertJ style assertions.\npublic interface AssertableWebApplicationContext extends ApplicationContextAssertProvider<org.springframework.web.context.ConfigurableWebApplicationContext>, org.springframework.web.context.ConfigurableWebApplicationContext; // A WebApplicationContext that additionally supports AssertJ style assertions.\n", "des": "AssertJ support for ApplicationContexts."}
{"index": 1940, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package info;\n\n@AutoConfiguration @EnableConfigurationProperties(ProjectInfoProperties.class) public class ProjectInfoAutoConfiguration extends Object; // Auto-configuration for various project information.\n@ConfigurationProperties(prefix=\"spring.info\") public class ProjectInfoProperties extends Object; // Configuration properties for project information.\npublic static class ProjectInfoProperties.Build extends Object; // Build specific info properties.\npublic static class ProjectInfoProperties.Git extends Object; // Git specific info properties.\n", "des": "Auto-configuration for project information."}
{"index": 452, "repo": "camel-core-3.0.0-RC1", "code": "package config;\n\nClass BatchResequencerConfig; // Configures batch-processing resequence eip.\nClass ResequencerConfig;\nClass StreamResequencerConfig; // Configures stream-processing resequence eip.\n", "des": "The JAXB POJOs for various configurations for the XML Configuration of the routing rules."}
{"index": 3437, "repo": "hibernate-core-5.6.15.Final", "code": "package reflection;\n\nInterface AttributeConverterDefinitionCollector;\nClass ClassLoaderAccessLazyImpl; // A ClassLoaderAccess implementation based on lazy access to MetadataBuildingOptions\nClass PersistentAttributeFilter;\n", "des": "Defines the capability to merge mapping information from both annotations and orm.xml sources into a unified set of metadata in the Hibernate commons-annotations model."}
{"index": 2555, "repo": "pulsar-common-3.0.0", "code": "package lookup;\n\npackage lookup.data; // Lookup data.\npublic class GetTopicsResult extends Object;\n", "des": "Lookup data."}
{"index": 1640, "repo": "jena-core-4.9.0", "code": "package datatypes;\n\npackage datatypes.xsd; // Provides datatype definitions for the XML Schema datatypes support by Jena.\npublic class BaseDatatype extends Object implements RDFDatatype; // Base level implementation of datatype from which real implementations can inherit.\npublic static class BaseDatatype.TypedValue extends Object; // Pair object used to encode both lexical form and datatype for a typed literal with unknown datatype.\npublic class DatatypeFormatException extends JenaException; // Exception thrown when a lexical form does not match the stated datatype.\npublic interface RDFDatatype; // Interface on a datatype representation.\npublic class TypeMapper extends Object; // The TypeMapper provides a global registry of known datatypes.\n", "des": "Provides the core interfaces through which datatypes are described to Jena."}
{"index": 1795, "repo": "spring-integration-file-6.1.2", "code": "package tail;\n\npublic class ApacheCommonsFileTailingMessageProducer extends FileTailingMessageProducerSupport implements org.apache.commons.io.input.TailerListener; // File tailer that delegates to the Apache Commons Tailer.\npublic abstract class FileTailingMessageProducerSupport extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware; // Base class for file tailing inbound adapters.\npublic static class FileTailingMessageProducerSupport.FileTailingEvent extends FileIntegrationEvent;\npublic static class FileTailingMessageProducerSupport.FileTailingIdleEvent extends FileTailingMessageProducerSupport.FileTailingEvent;\npublic class OSDelegatingFileTailingMessageProducer extends FileTailingMessageProducerSupport implements org.springframework.scheduling.SchedulingAwareRunnable; // A file tailing message producer that delegates to the OS tail program.\n", "des": "Classes used for tailing file system files."}
{"index": 2341, "repo": "spring-boot-3.1.1", "code": "package beanvalidation;\n\npublic class FilteredMethodValidationPostProcessor extends org.springframework.validation.beanvalidation.MethodValidationPostProcessor; // Custom MethodValidationPostProcessor that applies exclusion filters.\npublic interface MethodValidationExcludeFilter; // A filter for excluding types from method validation.\n", "des": "Utilities and classes related to bean validation."}
{"index": 2856, "repo": "spring-integration-core-6.1.2", "code": "package context;\n\npublic class DslIntegrationConfigurationInitializer extends Object implements IntegrationConfigurationInitializer; // The Java DSL Integration infrastructure beanFactory initializer.\npublic class IntegrationFlowBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.SmartInitializingSingleton; // A BeanPostProcessor to parse IntegrationFlow beans and register their components as beans in the provided BeanFactory, if necessary.\npublic interface IntegrationFlowContext; // A public API for dynamic (manual) registration of IntegrationFlows, not via standard bean registration phase.\npublic static interface IntegrationFlowContext.IntegrationFlowRegistration extends org.springframework.beans.factory.BeanFactoryAware;\npublic static interface IntegrationFlowContext.IntegrationFlowRegistrationBuilder; // A Builder pattern implementation for the options to register IntegrationFlow in the application context.\npublic final class StandardIntegrationFlowContext extends Object implements IntegrationFlowContext, org.springframework.beans.factory.BeanFactoryAware; // Standard implementation of IntegrationFlowContext.\n", "des": "The context support classes for Spring Integration Java DSL."}
{"index": 2462, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package graphite;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.graphite.GraphiteMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"graphite\") @EnableConfigurationProperties(GraphiteProperties.class) public class GraphiteMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Graphite.\n@ConfigurationProperties(prefix=\"management.graphite.metrics.export\") public class GraphiteProperties extends Object; // @ConfigurationProperties for configuring Graphite metrics export.\n", "des": "Support for exporting actuator metrics to Graphite."}
{"index": 1559, "repo": "spring-restdocs-core-3.0.0", "code": "package cli;\n\npublic abstract class CliDocumentation extends Object; // Static factory methods for documenting a RESTful API as if it were being driven using a command-line utility such as curl or HTTPie.\npublic interface CommandFormatter; // Formatter for CLI commands such as those included in CurlRequestSnippet and HttpieRequestSnippet.\npublic class CurlRequestSnippet extends TemplatedSnippet; // A Snippet that documents the curl command for a request.\npublic class HttpieRequestSnippet extends TemplatedSnippet; // A Snippet that documents the HTTPie command for a request.\n", "des": "Documenting CLI commands required to make a request to a RESTful API."}
{"index": 2726, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class JmsItemReaderBuilder<T> extends Object; // Creates a fully qualified JmsItemReader.\npublic class JmsItemWriterBuilder<T> extends Object; // Creates a fully qualified JmsItemWriter.\n", "des": "Builders for JMS item reader and writer."}
{"index": 3794, "repo": "lucene-analysis-common-9.7.0", "code": "package id;\n\nClass IndonesianAnalyzer; // Analyzer for Indonesian (Bahasa)\nClass IndonesianStemFilter; // A TokenFilter that applies IndonesianStemmer to stem Indonesian words.\nClass IndonesianStemFilterFactory; // Factory for IndonesianStemFilter.\nClass IndonesianStemmer; // Stemmer for Indonesian.\n", "des": "Analyzer for Indonesian."}
{"index": 2103, "repo": "spring-webflux-6.0.11", "code": "package annotation;\n\npublic abstract class AbstractMessageReaderArgumentResolver extends HandlerMethodArgumentResolverSupport; // Abstract base class for argument resolvers that resolve method arguments by reading the request body with an HttpMessageReader.\npublic abstract class AbstractMessageWriterResultHandler extends HandlerResultHandlerSupport; // Abstract base class for result handlers that handle return values by writing to the response with HttpMessageWriter.\npublic abstract class AbstractNamedValueArgumentResolver extends HandlerMethodArgumentResolverSupport; // Abstract base class for resolving method arguments from a named value.\nprotected static class AbstractNamedValueArgumentResolver.NamedValueInfo extends Object; // Represents the information about a named value, including name, whether it's required and a default value.\npublic abstract class AbstractNamedValueSyncArgumentResolver extends AbstractNamedValueArgumentResolver implements SyncHandlerMethodArgumentResolver; // An extension of AbstractNamedValueArgumentResolver for named value resolvers that are synchronous and yet non-blocking.\npublic class ArgumentResolverConfigurer extends Object; // Helps to configure resolvers for Controller method arguments.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class CookieValueMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver; // Resolve method arguments annotated with @CookieValue.\npublic class ErrorsMethodArgumentResolver extends HandlerMethodArgumentResolverSupport; // Resolve Errors or BindingResult method arguments.\npublic class ExpressionValueMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver; // Resolves method arguments annotated with @Value.\npublic class HttpEntityMethodArgumentResolver extends AbstractMessageReaderArgumentResolver; // Resolves method arguments of type HttpEntity or RequestEntity by reading the body of the request through a compatible HttpMessageReader.\npublic class MatrixVariableMapMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver; // Resolves arguments of type Map annotated with @MatrixVariable where the annotation does not specify a name.\npublic class MatrixVariableMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver; // Resolves arguments annotated with @MatrixVariable.\npublic class ModelAttributeMethodArgumentResolver extends HandlerMethodArgumentResolverSupport; // Resolve @ModelAttribute annotated method arguments.\npublic class ModelMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver; // Resolver for a controller method argument of type Model that can also be resolved as a Map.\n", "des": "Infrastructure for annotation-based handler method processing."}
{"index": 563, "repo": "hadoop-common-3.3.4", "code": "package annotation;\n\nEnum Metric.Type;\nAnnotation Type Metric; // Annotation interface for a single metric used to annotate a field or a method in the class.\nAnnotation Type Metrics; // Annotation interface for a group of metrics\n", "des": "Annotation interfaces for metrics instrumentation"}
{"index": 3436, "repo": "hibernate-core-5.6.15.Final", "code": "package support;\n\nInterface AbstractDomainDataRegion.Destructible; // Optional interface caching implementors can implement in their CachedDomainDataAccess impls to automatically have them destroyed when this region is destroyed\nInterface AbstractReadWriteAccess.Lockable; // Interface type implemented by all wrapper objects in the cache.\nInterface DomainDataStorageAccess; // Specialization of StorageAccess for domain data regions\nInterface StorageAccess; // A general read/write abstraction over the specific \"cache\" object from the caching provider.\nClass AbstractCachedDomainDataAccess;\nClass AbstractCollectionDataAccess;\nClass AbstractDomainDataRegion;\nClass AbstractEntityDataAccess;\nClass AbstractNaturalIdDataAccess;\nClass AbstractReadWriteAccess;\nClass AbstractReadWriteAccess.Item; // Wrapper type representing unlocked items.\nClass AbstractReadWriteAccess.SoftLockImpl; // Wrapper type representing locked items.\nClass AbstractRegion;\nClass CacheUtils;\nClass CollectionNonStrictReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass CollectionReadOnlyAccess; // Standard support for CollectionDataAccess using the AccessType.READ_ONLY access type.\nClass CollectionReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.READ_WRITE access type.\nClass CollectionTransactionAccess;\nClass DirectAccessRegionTemplate; // Bridge between DirectAccessRegion and StorageAccess\nClass DomainDataRegionImpl;\nClass DomainDataRegionTemplate; // Abstract implementation of DomainDataRegion based on implementations just needing to provide a DomainDataStorageAccess reference for basic caching support - DomainDataStorageAccess acts as a simple wrapper around some generalized cache actions such as put or get.\nClass EntityNonStrictReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass EntityReadOnlyAccess; // Standard support for EntityDataAccess using the AccessType.READ_ONLY access type.\nClass EntityReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.READ_WRITE access type.\nClass EntityTransactionalAccess;\nClass NaturalIdNonStrictReadWriteAccess; // Standard support for NaturalIdDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass NaturalIdReadOnlyAccess; // Standard support for NaturalIdDataAccess using the AccessType.READ_ONLY access type.\n", "des": "Package intended for simplifying the worked needed to implement a caching provider."}
{"index": 104, "repo": "ignite-core-2.15.0", "code": "package memory;\n\nInterface MemoryEventStorageSpiMBean; // Management bean for MemoryEventStorageSpi.\nClass MemoryEventStorageSpi; // In-memory EventStorageSpi implementation.\n", "des": "Contains default in-memory implementation for event storage SPI."}
{"index": 1577, "repo": "spring-security-oauth2-client-6.1.2", "code": "package client;\n\npackage client.authentication; // Support classes and interfaces for authenticating and authorizing a client with an OAuth 2.0 Authorization Server using a specific authorization grant flow.\npackage client.endpoint; // Classes and interfaces providing support to the client for initiating requests to the Authorization Server's Protocol Endpoints.\npackage client.registration; // Classes and interfaces that provide support for ClientRegistration.\npackage client.userinfo; // Classes and interfaces providing support to the client for initiating requests to the OAuth 2.0 Authorization Server's UserInfo Endpoint.\npackage client.web; // OAuth 2.0 Client Filter's and supporting classes and interfaces.\npublic final class AuthorizationCodeOAuth2AuthorizedClientProvider extends Object implements OAuth2AuthorizedClientProvider; // An implementation of an OAuth2AuthorizedClientProvider for the authorization_code grant.\npublic final class AuthorizationCodeReactiveOAuth2AuthorizedClientProvider extends Object implements ReactiveOAuth2AuthorizedClientProvider; // An implementation of a ReactiveOAuth2AuthorizedClientProvider for the authorization_code grant.\npublic final class AuthorizedClientServiceOAuth2AuthorizedClientManager extends Object implements OAuth2AuthorizedClientManager; // An implementation of an OAuth2AuthorizedClientManager that is capable of operating outside of the context of a HttpServletRequest, e.g.\npublic static class AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,Map<String,Object>>; // The default implementation of the contextAttributesMapper.\npublic final class AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager extends Object implements ReactiveOAuth2AuthorizedClientManager; // An implementation of a ReactiveOAuth2AuthorizedClientManager that is capable of operating outside of the context of a ServerWebExchange, e.g.\npublic static class AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager.DefaultContextAttributesMapper extends Object implements Function<OAuth2AuthorizeRequest,reactor.core.publisher.Mono<Map<String,Object>>>; // The default implementation of the contextAttributesMapper.\npublic class ClientAuthorizationException extends org.springframework.security.oauth2.core.OAuth2AuthorizationException; // This exception is thrown on the client side when an attempt to authenticate or authorize an OAuth 2.0 client fails.\npublic class ClientAuthorizationRequiredException extends ClientAuthorizationException; // This exception is thrown when an OAuth 2.0 Client is required to obtain authorization from the Resource Owner.\n", "des": "Core classes and interfaces providing support for OAuth 2.0 Client."}
{"index": 287, "repo": "pdfbox-3.0.0-beta1", "code": "package logicalstructure;\n\nClass PDAttributeObject; // An attribute object.\nClass PDDefaultAttributeObject; // A default attribute object.\nClass PDMarkedContentReference; // A marked-content reference.\nClass PDMarkInfo; // The MarkInfo provides additional information relevant to specialized uses of structured documents.\nClass PDObjectReference; // An object reference.\nClass PDParentTreeValue; // Described in the PDF specification in the ParentTree segment of the table \"Entries in the structure tree root\".\nClass PDStructureElement; // A structure element.\nClass PDStructureNode; // A node in the structure tree.\nClass PDStructureTreeRoot; // A root of a structure tree.\nClass PDUserAttributeObject; // A User attribute object.\nClass PDUserProperty; // A user property.\nClass Revisions<T>;\n", "des": "The logical structure package provides a mechanism for incorporating structural information about a document's content into a PDF file."}
{"index": 1048, "repo": "commons-io-2.13.0", "code": "package filefilter;\n\nInterface ConditionalFileFilter; // Defines operations for conditional file filters.\nInterface IOFileFilter; // An interface which brings the FileFilter, FilenameFilter, and PathFilter interfaces together.\nClass AbstractFileFilter; // Abstracts the implementation of the FileFilter (IO), FilenameFilter (IO), PathFilter (NIO) interfaces via our own IOFileFilter interface.\nClass AgeFileFilter; // Filters files based on a cutoff time, can filter either newer files or files equal to or older.\nClass AndFileFilter; // A FileFilter providing conditional AND logic across a list of file filters.\nClass CanExecuteFileFilter; // This filter accepts Files that can be executed.\nClass CanReadFileFilter; // This filter accepts Files that can be read.\nClass CanWriteFileFilter; // This filter accepts Files that can be written to.\nClass DelegateFileFilter; // This class turns a Java FileFilter or FilenameFilter into an IO FileFilter.\nClass DirectoryFileFilter; // This filter accepts Files that are directories.\nClass EmptyFileFilter; // This filter accepts files or directories that are empty.\nClass FalseFileFilter; // A file filter that always returns false.\nClass FileEqualsFileFilter; // Accepts only an exact File object match.\nClass FileFileFilter; // This filter accepts Files that are files (not directories).\nClass FileFilterUtils; // Useful utilities for working with file filters.\nClass HiddenFileFilter; // This filter accepts Files that are hidden.\nClass MagicNumberFileFilter; // File filter for matching files containing a \"magic number\".\nClass NameFileFilter; // Filters file names for a certain name.\nClass NotFileFilter; // This filter produces a logical NOT of the filters specified.\nClass OrFileFilter; // A FileFilter providing conditional OR logic across a list of file filters.\nClass PathEqualsFileFilter; // Accepts only an exact Path object match.\nClass PathVisitorFileFilter; // A file filter backed by a path visitor.\nClass PrefixFileFilter; // Filters file names for a certain prefix.\nClass RegexFileFilter; // Filters files using supplied regular expression(s).\nClass SizeFileFilter; // Filters files based on size, can filter either smaller files or files equal to or larger than a given threshold.\nClass SuffixFileFilter; // Filters files based on the suffix (what the file name ends with).\nClass SymbolicLinkFileFilter; // This filter accepts Files that are symbolic links.\n", "des": "Provides the an interface IOFileFilter that combines both FileFilter and FilenameFilter."}
{"index": 1321, "repo": "groovy-all-4.0.13", "code": "package yaml;\n\npublic class YamlBuilder extends GroovyObjectSupport implements Writable; // A builder for creating YAML payloads.\npublic class YamlRuntimeException extends GroovyRuntimeException; // Represents runtime exception occurred when parsing or building YAML\npublic class YamlSlurper extends Object; // Represents a YAML parser\n", "des": "Classes for building and parsing YAML."}
{"index": 1186, "repo": "commons-math3-3.6.1", "code": "package sampling;\n\nInterface FieldFixedStepHandler<T extends RealFieldElement<T>>; // This interface represents a handler that should be called after each successful fixed step.\nInterface FieldStepHandler<T extends RealFieldElement<T>>; // This interface represents a handler that should be called after each successful step.\nInterface FieldStepInterpolator<T extends RealFieldElement<T>>; // This interface represents an interpolator over the last step during an ODE integration.\nInterface FixedStepHandler; // This interface represents a handler that should be called after each successful fixed step.\nInterface StepHandler; // This interface represents a handler that should be called after each successful step.\nInterface StepInterpolator; // This interface represents an interpolator over the last step during an ODE integration.\nClass AbstractFieldStepInterpolator<T extends RealFieldElement<T>>; // This abstract class represents an interpolator over the last step during an ODE integration.\nClass AbstractStepInterpolator; // This abstract class represents an interpolator over the last step during an ODE integration.\nClass DummyStepHandler; // This class is a step handler that does nothing.\nClass FieldStepNormalizer<T extends RealFieldElement<T>>; // This class wraps an object implementing FieldFixedStepHandler into a FieldStepHandler.\nClass NordsieckStepInterpolator; // This class implements an interpolator for integrators using Nordsieck representation.\nClass StepNormalizer; // This class wraps an object implementing FixedStepHandler into a StepHandler.\nEnum StepNormalizerBounds; // Step normalizer bounds settings.\nEnum StepNormalizerMode; // Step normalizer modes.\n", "des": "This package provides classes to handle sampling steps during Ordinary Differential Equations integration."}
{"index": 259, "repo": "nutch-2.4", "code": "package tld;\n\nClass TLDScoringFilter; // Scoring filter to boost tlds.\n", "des": "Top Level Domain Scoring plugin."}
{"index": 2247, "repo": "spring-data-keyvalue-3.1.2", "code": "package repository;\n\npackage repository.config; // Support infrastructure for the configuration of key/value specific repositories.\npackage repository.query; // Query derivation mechanism for key/value specific repositories providing a generic SpEL based implementation.\npackage repository.support; // Support infrastructure for query derivation of key/value specific repositories.\npublic interface KeyValueRepository<T,ID> extends ListCrudRepository<T,ID>, ListPagingAndSortingRepository<T,ID>;\n", "des": "Key/value specific repository implementation."}
{"index": 1582, "repo": "spring-security-oauth2-client-6.1.2", "code": "package registration;\n\npublic final class ClientRegistration extends Object implements Serializable; // A representation of a client registration with an OAuth 2.0 or OpenID Connect 1.0 Provider.\npublic static final class ClientRegistration.Builder extends Object implements Serializable; // A builder for ClientRegistration.\npublic interface ClientRegistrationRepository; // A repository for OAuth 2.0 / OpenID Connect 1.0 ClientRegistration(s).\npublic final class ClientRegistrations extends Object; // Allows creating a ClientRegistration.Builder from an OpenID Provider Configuration or Authorization Server Metadata based on provided issuer.\npublic final class InMemoryClientRegistrationRepository extends Object implements ClientRegistrationRepository, Iterable<ClientRegistration>; // A ClientRegistrationRepository that stores ClientRegistration(s) in-memory.\npublic final class InMemoryReactiveClientRegistrationRepository extends Object implements ReactiveClientRegistrationRepository, Iterable<ClientRegistration>; // A Reactive ClientRegistrationRepository that stores ClientRegistration(s) in-memory.\npublic interface ReactiveClientRegistrationRepository; // A reactive repository for OAuth 2.0 / OpenID Connect 1.0 ClientRegistration(s).\n", "des": "Classes and interfaces that provide support for ClientRegistration."}
{"index": 1927, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package data;\n\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.data.query.QueryByExampleDataFetcher.class,org.springframework.data.repository.query.QueryByExampleExecutor.class}) @ConditionalOnBean(org.springframework.graphql.execution.GraphQlSource.class) public class GraphQlQueryByExampleAutoConfiguration extends Object; // Auto-configuration that creates a GraphQlSourceBuilderCustomizers to detect Spring Data repositories with Query By Example support and register them as DataFetchers for any queries with a matching return type.\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.data.query.QuerydslDataFetcher.class,org.springframework.data.querydsl.QuerydslPredicateExecutor.class}) @ConditionalOnBean(org.springframework.graphql.execution.GraphQlSource.class) public class GraphQlQuerydslAutoConfiguration extends Object; // Auto-configuration that creates a GraphQlSourceBuilderCustomizers to detect Spring Data repositories with Querydsl support and register them as DataFetchers for any queries with a matching return type.\n@AutoConfiguration(after=GraphQlAutoConfiguration.class) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.data.query.QueryByExampleDataFetcher.class,org.springframework.data.repository.query.ReactiveQueryByExampleExecutor.class}) @ConditionalOnBean(org.springframework.graphql.execution.GraphQlSource.class) public class GraphQlReactiveQueryByExampleAutoConfiguration extends Object; // Auto-configuration that creates a GraphQlSourceBuilderCustomizers to detect Spring Data repositories with Query By Example support and register them as DataFetchers for any queries with a matching return type.\n", "des": "Auto-configuration classes for data integrations with GraphQL."}
{"index": 2533, "repo": "spring-security-core-6.1.2", "code": "package authority;\n\npackage authority.mapping; // Strategies for mapping a list of attributes (such as roles or LDAP groups) to a list of GrantedAuthoritys.\npublic final class AuthorityUtils extends Object; // Utility method for manipulating GrantedAuthority collections etc.\npublic interface GrantedAuthoritiesContainer extends Serializable; // Indicates that a object stores GrantedAuthority objects.\npublic final class SimpleGrantedAuthority extends Object implements GrantedAuthority; // Basic concrete implementation of a GrantedAuthority.\n", "des": "The default implementation of the GrantedAuthority interface."}
{"index": 2564, "repo": "pulsar-common-3.0.0", "code": "package protocol;\n\npackage protocol.schema; // Classes to work with schemas.\npublic final class ByteBufPair extends io.netty.util.AbstractReferenceCounted; // ByteBuf holder that contains 2 buffers.\n@Sharable public static class ByteBufPair.CopyingEncoder extends io.netty.channel.ChannelOutboundHandlerAdapter;\n@Sharable public static class ByteBufPair.Encoder extends io.netty.channel.ChannelOutboundHandlerAdapter;\npublic class Commands extends Object;\npublic static enum Commands.ChecksumType extends Enum<Commands.ChecksumType>; // Definition of possible checksum types.\npublic final class CommandUtils extends Object; // Helper class to work with commands.\npublic class Markers extends Object;\npublic class OptionalProxyProtocolDecoder extends io.netty.channel.ChannelInboundHandlerAdapter; // Decoder that added whether a new connection is prefixed with the ProxyProtocol.\npublic abstract class PulsarDecoder extends io.netty.channel.ChannelInboundHandlerAdapter; // Basic implementation of the channel handler to process inbound Pulsar data.\npublic abstract class PulsarHandler extends PulsarDecoder; // Implementation of the channel handler to process inbound Pulsar data.\n", "des": "Common protocol."}
{"index": 1763, "repo": "spring-data-mongodb-4.1.2", "code": "package spel;\n\npublic class ExpressionNode extends Object implements Iterable<ExpressionNode>; // A value object for nodes in an expression.\npublic class ExpressionTransformationContextSupport<T extends ExpressionNode> extends Object; // The context for an ExpressionNode transformation.\npublic interface ExpressionTransformer<T extends ExpressionTransformationContextSupport<?>>; // SPI interface to implement components that can transform an ExpressionTransformationContextSupport into an object.\npublic class LiteralNode extends ExpressionNode; // A node representing a literal in an expression.\npublic class MethodReferenceNode extends ExpressionNode; // An ExpressionNode representing a method reference.\npublic static final class MethodReferenceNode.AggregationMethodReference extends Object;\npublic static enum MethodReferenceNode.AggregationMethodReference.ArgumentType extends Enum<MethodReferenceNode.AggregationMethodReference.ArgumentType>; // The actual argument type to use when mapping parameters to MongoDB specific format.\npublic class NotOperatorNode extends ExpressionNode;\npublic class OperatorNode extends ExpressionNode; // An ExpressionNode representing an operator.\n", "des": "Support classes to transform SpEL expressions into MongoDB expressions."}
{"index": 1583, "repo": "spring-security-oauth2-client-6.1.2", "code": "package userinfo;\n\npublic class DefaultOAuth2UserService extends Object implements OAuth2UserService<OAuth2UserRequest,org.springframework.security.oauth2.core.user.OAuth2User>; // An implementation of an OAuth2UserService that supports standard OAuth 2.0 Provider's.\npublic class DefaultReactiveOAuth2UserService extends Object implements ReactiveOAuth2UserService<OAuth2UserRequest,org.springframework.security.oauth2.core.user.OAuth2User>; // An implementation of an ReactiveOAuth2UserService that supports standard OAuth 2.0 Provider's.\npublic class DelegatingOAuth2UserService<R extends OAuth2UserRequest,U extends org.springframework.security.oauth2.core.user.OAuth2User> extends Object implements OAuth2UserService<R,U>; // An implementation of an OAuth2UserService that simply delegates to it's internal List of OAuth2UserService(s).\npublic class OAuth2UserRequest extends Object; // Represents a request the OAuth2UserService uses when initiating a request to the UserInfo Endpoint.\npublic class OAuth2UserRequestEntityConverter extends Object implements org.springframework.core.convert.converter.Converter<OAuth2UserRequest,org.springframework.http.RequestEntity<?>>; // A Converter that converts the provided OAuth2UserRequest to a RequestEntity representation of a request for the UserInfo Endpoint.\n@FunctionalInterface public interface OAuth2UserService<R extends OAuth2UserRequest,U extends org.springframework.security.oauth2.core.user.OAuth2User>; // Implementations of this interface are responsible for obtaining the user attributes of the End-User (Resource Owner) from the UserInfo Endpoint using the Access Token granted to the Client and returning an AuthenticatedPrincipal in the form of an OAuth2User.\n@FunctionalInterface public interface ReactiveOAuth2UserService<R extends OAuth2UserRequest,U extends org.springframework.security.oauth2.core.user.OAuth2User>; // Implementations of this interface are responsible for obtaining the user attributes of the End-User (Resource Owner) from the UserInfo Endpoint using the Access Token granted to the Client and returning an AuthenticatedPrincipal in the form of an OAuth2User.\n", "des": "Classes and interfaces providing support to the client for initiating requests to the OAuth 2.0 Authorization Server's UserInfo Endpoint."}
{"index": 2808, "repo": "spring-integration-ip-6.1.2", "code": "package ip;\n\npackage ip.config; // Provides classes for configuration - parsers, namespace handlers, factory beans.\npackage ip.dsl; // Provides TCP/UDP Component support for the Java DSL.\npackage ip.event; // ApplicationEvents generated by the ip module.\npackage ip.tcp; // Base package for TCP Support.\npackage ip.udp; // Base package for UDP support.\npackage ip.util; // Provides utilities for IP support.\npublic abstract class AbstractInternetProtocolReceivingChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.scheduling.SchedulingAwareRunnable, CommonSocketOptions; // Base class for inbound TCP/UDP Channel Adapters.\npublic abstract class AbstractInternetProtocolSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler implements CommonSocketOptions, org.springframework.integration.support.management.ManageableLifecycle; // Base class for UDP MessageHandlers.\npublic interface CommonSocketOptions;\npublic final class IpHeaders extends Object; // Headers for Messages mapped from IP datagram packets.\n", "des": "Base package for IP (TCP/UDP) Support."}
{"index": 2070, "repo": "spring-webmvc-6.0.11", "code": "package mvc;\n\npackage mvc.annotation; // Support package for annotation-based Servlet MVC controllers.\npackage mvc.condition; // Common MVC logic for matching incoming requests based on conditions.\npackage mvc.method; // Servlet-based infrastructure for handler method processing, building on the org.springframework.web.method package.\npackage mvc.support; // Support package for MVC controllers.\npublic abstract class AbstractController extends WebContentGenerator implements Controller; // Convenient superclass for controller implementations, using the Template Method design pattern.\npublic abstract class AbstractUrlViewController extends AbstractController; // Abstract base class for Controllers that return a view name based on the request URL.\n@FunctionalInterface public interface Controller; // Base Controller interface, representing a component that receives HttpServletRequest and HttpServletResponse instances just like a HttpServlet but is able to participate in an MVC workflow.\npublic class HttpRequestHandlerAdapter extends Object implements HandlerAdapter; // Adapter to use the plain HttpRequestHandler interface with the generic DispatcherServlet.\n@Deprecated public interface LastModified;\npublic class ParameterizableViewController extends AbstractController; // Trivial controller that always returns a pre-configured view and optionally sets the response status code.\npublic class ServletForwardingController extends AbstractController implements org.springframework.beans.factory.BeanNameAware; // Spring Controller implementation that forwards to a named servlet, i.e.\npublic class ServletWrappingController extends AbstractController implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Spring Controller implementation that wraps a servlet instance which it manages internally.\npublic class SimpleControllerHandlerAdapter extends Object implements HandlerAdapter; // Adapter to use the plain Controller workflow interface with the generic DispatcherServlet.\npublic class UrlFilenameViewController extends AbstractUrlViewController; // Simple Controller implementation that transforms the virtual path of a URL into a view name and returns that view.\npublic class WebContentInterceptor extends WebContentGenerator implements HandlerInterceptor; // Handler interceptor that checks the request for supported methods and a required session and prepares the response by applying the configured cache settings.\n", "des": "Standard controller implementations for the Servlet MVC framework that comes with Spring."}
{"index": 3628, "repo": "lucene-misc-9.7.0", "code": "package misc;\n\npackage misc.document; // Misc extensions of the Document/Field API.\npackage misc.index; // Misc index tools and index support.\npackage misc.search; // Misc search implementations.\npackage misc.store; // Misc Directory implementations.\npackage misc.util; // Memory Tracker interface which allows defining custom collector level memory trackers\nClass CollectorMemoryTracker; // Default implementation of MemoryTracker that tracks allocations and allows setting a memory limit per collector\nClass GetTermInfo; // Utility to get document frequency and total number of occurrences (sum of the tf for each doc) of a term.\nClass HighFreqTerms; // HighFreqTerms class extracts the top n most frequent terms (by document frequency) from an existing Lucene index and reports their document frequency.\nClass HighFreqTerms.DocFreqComparator; // Compares terms by docTermFreq\nClass HighFreqTerms.TotalTermFreqComparator; // Compares terms by totalTermFreq\nClass IndexMergeTool; // Merges indices specified on the command line into the index specified as the first command line argument.\nClass SweetSpotSimilarity; // A similarity with a lengthNorm that provides for a \"plateau\" of equally good lengths, and tf helper functions.\nClass TermStats; // Holder for a term along with its statistics (TermStats.docFreq and TermStats.totalTermFreq).\n", "des": "Miscellaneous Lucene utilities that don't really fit anywhere else."}
{"index": 1648, "repo": "jena-core-4.9.0", "code": "package mem;\n\npublic class ArrayBunch extends Object implements TripleBunch; // An ArrayBunch implements TripleBunch with a linear search of a short-ish array of Triples.\npublic interface BunchMap; // A pruned (and slightly stewed) version of Map, containing just those operations required by NodeToTriplesMaps.\npublic class FieldFilter extends Object; // A class that encapsulates a filter on fields on a triple.\n@Deprecated public class GraphMem extends GraphMemBase;\npublic abstract class GraphMemBase extends GraphBase; // GraphMemBase - a common base class for GraphMem and SmallGraphMem.\npublic abstract class GraphTripleStoreBase extends Object implements TripleStore;\npublic class GraphTripleStoreMem extends GraphTripleStoreBase implements TripleStore;\npublic abstract class HashCommon<Key> extends Object; // Shared stuff for our hashing implementations: does the base work for hashing and growth sizes.\npublic static interface HashCommon.NotifyEmpty; // A hashed structure may become empty as a side-effect of a .remove on one of its iterators: a container can request notification of this by passing a NotifyEmpty object in when the iterator is constructed, and its emptied method is called when the bunch becomes empty.\npublic class HashedBunchMap extends HashCommon<Object> implements BunchMap; // An implementation of BunchMap that does open-addressed hashing.\npublic class HashedTripleBunch extends HashCommon<Triple> implements TripleBunch;\npublic abstract class NodeToTriplesMapBase extends Object; // A base class for in-memory graphs\npublic class NodeToTriplesMapMem extends NodeToTriplesMapBase;\npublic abstract class ObjectIterator extends NiceIterator<Node>; // Helper class for listObjects.\npublic class SparseArraySpliterator<E> extends Object implements Spliterator<E>; // A spliterator for sparse arrays.\npublic class SparseArraySubSpliterator<E> extends Object implements Spliterator<E>; // A spliterator for sparse arrays.\npublic class StoreTripleIterator extends TrackingTripleIterator; // An iterator wrapper for NodeToTriplesMap iterators which ensures that a .remove on the base iterator is copied to the other two maps of this GraphMem.\n", "des": "Various memory-based implementations of interfaces, specifically GraphMem for memory-based Graphs."}
{"index": 3760, "repo": "lucene-facet-9.7.0", "code": "package writercache;\n\nInterface TaxonomyWriterCache; // TaxonomyWriterCache is a relatively simple interface for a cache of category->ordinal mappings, used in TaxonomyWriter implementations (such as DirectoryTaxonomyWriter).\nClass LabelToOrdinal; // Abstract class for storing Label->Ordinal mappings in a taxonomy.\nClass LruTaxonomyWriterCache; // LRU TaxonomyWriterCache - good choice for huge taxonomies.\nClass NameHashIntCacheLRU; // An LRU cache of mapping from name to int.\nClass UTF8TaxonomyWriterCache;\nEnum LruTaxonomyWriterCache.LRUType; // Determines cache type.\n", "des": "Improves indexing time by caching a map of CategoryPath to their Ordinal."}
{"index": 357, "repo": "hive-exec-4.0.0-alpha-2", "code": "package protobuf;\n\nClass ProtobufBytesWritableSerDe; // Class to convert bytes writable containing a protobuf message to hive formats.\nClass ProtobufMessageInputFormat<K,V extends com.google.protobuf.MessageLite>; // InputFormat to support reading ProtoWritable stored in a sequence file.\nClass ProtobufMessageSerDe; // Class to convert ProtoMessageWritable to hive formats.\nClass ProtobufSerDe; // SerDe to convert ProtoWritable messages to Hive formats.\n", "des": "This package contains contributed input format."}
{"index": 1157, "repo": "commons-math3-3.6.1", "code": "package filter;\n\nInterface MeasurementModel; // Defines the measurement model for the use with a KalmanFilter.\nInterface ProcessModel; // Defines the process dynamics model for the use with a KalmanFilter.\nClass DefaultMeasurementModel; // Default implementation of a MeasurementModel for the use with a KalmanFilter.\nClass DefaultProcessModel; // Default implementation of a ProcessModel for the use with a KalmanFilter.\nClass KalmanFilter; // Implementation of a Kalman filter to estimate the state xk of a discrete-time controlled process that is governed by the linear stochastic difference equation:\n", "des": "Implementations of common discrete-time linear filters."}
{"index": 1209, "repo": "commons-math3-3.6.1", "code": "package rank;\n\nInterface PSquarePercentile.PSquareMarkers; // An interface that encapsulates abstractions of the P-square algorithm markers as is explained in the original works.\nClass Max; // Returns the maximum of the available values.\nClass Median; // Returns the median of the available values.\nClass Min; // Returns the minimum of the available values.\nClass Percentile; // Provides percentile computation.\nClass PSquarePercentile; // A StorelessUnivariateStatistic estimating percentiles using the P2 Algorithm as explained by Raj Jain and Imrich Chlamtac in P2 Algorithm for Dynamic Calculation of Quantiles and Histogram Without Storing Observations.\nEnum Percentile.EstimationType; // An enum for various estimation strategies of a percentile referred in wikipedia on quantile with the names of enum matching those of types mentioned in wikipedia.\n", "des": "Summary statistics based on ranks."}
{"index": 1370, "repo": "spring-boot-actuator-3.1.1", "code": "package audit;\n\npackage audit.listener; // Actuator auditing listeners.\npublic class AuditEvent extends Object implements Serializable; // A value object representing an audit event: at a particular time, a particular user or agent carried out an action of a particular type.\npublic interface AuditEventRepository; // Repository for AuditEvents.\n@Endpoint(id=\"auditevents\") public class AuditEventsEndpoint extends Object; // @Endpoint to expose audit events.\npublic static final class AuditEventsEndpoint.AuditEventsDescriptor extends Object implements OperationResponseBody; // Description of an application's audit events.\npublic class InMemoryAuditEventRepository extends Object implements AuditEventRepository; // In-memory AuditEventRepository implementation.\n", "des": "Core actuator auditing classes."}
{"index": 2960, "repo": "spring-integration-redis-6.1.2", "code": "package event;\n\npublic class RedisExceptionEvent extends RedisIntegrationEvent;\npublic abstract class RedisIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "Events generated by the redis module"}
{"index": 1434, "repo": "spring-boot-actuator-3.1.1", "code": "package startup;\n\n@Endpoint(id=\"startup\") @ImportRuntimeHints(org.springframework.boot.actuate.startup.StartupEndpoint.StartupEndpointRuntimeHints.class) public class StartupEndpoint extends Object; // @Endpoint to expose the timeline of the application startup.\npublic static final class StartupEndpoint.StartupDescriptor extends Object implements OperationResponseBody; // Description of an application startup.\n", "des": "Actuator support for ApplicationStartup."}
{"index": 1269, "repo": "spring-core-6.0.11", "code": "package annotation;\n\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface AliasFor; // @AliasFor is an annotation that is used to declare aliases for annotation attributes.\npublic abstract class AnnotatedElementUtils extends Object; // General utility methods for finding annotations, meta-annotations, and repeatable annotations on AnnotatedElements.\npublic class AnnotationAttributes extends LinkedHashMap<String,Object>; // LinkedHashMap subclass representing annotation attribute key-value pairs as read by AnnotationUtils, AnnotatedElementUtils, and Spring's reflection- and ASM-based AnnotationMetadata implementations.\npublic class AnnotationAwareOrderComparator extends OrderComparator; // AnnotationAwareOrderComparator is an extension of OrderComparator that supports Spring's Ordered interface as well as the @Order and @Priority annotations, with an order value provided by an Ordered instance overriding a statically defined annotation value (if any).\npublic class AnnotationConfigurationException extends NestedRuntimeException; // Thrown by AnnotationUtils and synthesized annotations if an annotation is improperly configured.\n@FunctionalInterface public interface AnnotationFilter; // Callback interface that can be used to filter specific annotation types.\npublic abstract class AnnotationUtils extends Object; // General utility methods for working with annotations, handling meta-annotations, bridge methods (which the compiler generates for generic declarations) as well as super methods (for optional annotation inheritance).\npublic interface MergedAnnotation<A extends Annotation>; // A single merged annotation returned from a MergedAnnotations collection.\npublic static enum MergedAnnotation.Adapt extends Enum<MergedAnnotation.Adapt>; // Adaptations that can be applied to attribute values when creating Maps or AnnotationAttributes.\npublic abstract class MergedAnnotationCollectors extends Object; // Collector implementations that provide various reduction operations for MergedAnnotation instances.\npublic abstract class MergedAnnotationPredicates extends Object; // Predicate implementations that provide various test operations for MergedAnnotations.\npublic interface MergedAnnotations extends Iterable<MergedAnnotation<Annotation>>; // Provides access to a collection of merged annotations, usually obtained from a source such as a Class or Method.\npublic static final class MergedAnnotations.Search extends Object; // Fluent API for configuring the search algorithm used in the MergedAnnotations model and performing a search.\n", "des": "Core support package for annotations, meta-annotations, and merged annotations with attribute overrides."}
{"index": 3142, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package plan;\n\nClass AbstractBatchingEntityLoaderBuilder; // Base class for LoadPlan-based BatchingEntityLoaderBuilder implementations.\nClass AbstractLoadPlanBasedEntityLoader; // A UniqueEntityLoader implementation based on using LoadPlans\nClass BatchingEntityLoader; // The base contract for UniqueEntityLoader implementations capable of performing batch-fetch loading of entities using multiple primary key values in the SQL WHERE clause.\nClass DynamicBatchingEntityLoader; // Batching entity loader using dynamic where-clause\nClass DynamicBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances capable of dynamically building its batch-fetch SQL based on the actual number of entity ids waiting to be batch fetched.\nClass EntityLoader; // UniqueEntityLoader implementation that is the main functionality for LoadPlan-based Entity loading.\nClass EntityLoader.Builder;\nClass LegacyBatchingEntityLoaderBuilder; // LoadPlan-based implementation of the legacy batch loading strategy\nClass LegacyBatchingEntityLoaderBuilder.LegacyBatchingEntityLoader;\nClass MultiEntityLoadingSupport;\nClass PaddedBatchingEntityLoader; // Batching entity loader using padded where-clause\nClass PaddedBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances building its batch-fetch SQL based on padding - using a set number of parameters, but setting \"unneeded ones\" to null.\n", "des": "Support for entity loaders built on top of the org.hibernate.loader.plan API to apply entity-graphs"}
{"index": 1098, "repo": "hbase-server-3.0.0-alpha-4", "code": "package normalizer;\n\nInterface NormalizationPlan; // A NormalizationPlan describes some modification to region split points as identified by an instance of RegionNormalizer.\nClass RegionNormalizerFactory; // Factory to create instance of RegionNormalizer as configured.\nClass RegionNormalizerManager; // This class encapsulates the details of the RegionNormalizer subsystem.\nClass RegionNormalizerStateStore; // Store region normalizer state.\nEnum NormalizationPlan.PlanType;\n", "des": "The Region Normalizer subsystem is responsible for coaxing all the regions in a table toward a \"normal\" size, according to their storefile size."}
{"index": 3194, "repo": "tomcat-api-10.1", "code": "package tld;\n\nClass ImplicitTldRuleSet; // RulesSet for digesting implicit.tld files.\nClass TagFileXml; // Bare-bone model of a tag file loaded from a TLD.\nClass TaglibXml; // Common representation of a Tag Library Descriptor (TLD) XML file.\nClass TagXml; // Model of a tag define in a tag library descriptor.\nClass TldParser; // Parses a Tag Library Descriptor.\nClass TldResourcePath; // A TLD Resource Path as defined in JSP 7.3.2.\nClass TldRuleSet; // RulesSet for digesting TLD files.\nClass TldRuleSet.Attribute;\nClass TldRuleSet.Variable;\nClass ValidatorXml; // Model of a Tag Library Validator from the XML descriptor.\n", "des": "Package containing a Java model of the XML for a Tag Library Descriptor."}
{"index": 2261, "repo": "spring-vault-core-3.0.4", "code": "package core;\n\npackage core.env; // Spring Vault's environment abstraction consisting property source support.\npackage core.lease; // The core package implementing lease renewal and secret rotation.\npackage core.util; // Property transformer classes for Spring Vault core support.\npublic interface ReactiveVaultOperations; // Interface that specifies a basic set of Vault operations executed on a reactive infrastructure, implemented by ReactiveVaultTemplate.\npublic class ReactiveVaultTemplate extends Object implements ReactiveVaultOperations; // This class encapsulates main Vault interaction.\n@FunctionalInterface public interface RestOperationsCallback<T>; // A callback for executing arbitrary operations on RestOperations.\npublic class SecretNotFoundException extends VaultException; // An exception which is used in case that no secret is found from Vault server.\npublic interface VaultKeyValueMetadataOperations; // Interface that specifies kv metadata related operations.\npublic interface VaultKeyValueOperations extends VaultKeyValueOperationsSupport; // Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend.\npublic interface VaultKeyValueOperationsSupport; // Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend.\npublic static enum VaultKeyValueOperationsSupport.KeyValueBackend extends Enum<VaultKeyValueOperationsSupport.KeyValueBackend>; // Enumeration of supported Key/Value backend API versions.\npublic interface VaultOperations; // Interface that specifies a basic set of Vault operations, implemented by VaultTemplate.\npublic interface VaultPkiOperations; // Interface that specifies PKI backend-related operations.\npublic static enum VaultPkiOperations.Encoding extends Enum<VaultPkiOperations.Encoding>;\npublic class VaultPkiTemplate extends Object implements VaultPkiOperations; // Default implementation of VaultPkiOperations.\npublic interface VaultSysOperations; // Interface that specifies a basic set of administrative Vault operations.\npublic class VaultSysTemplate extends Object implements VaultSysOperations; // Default implementation of VaultSysOperations.\npublic class VaultTemplate extends Object implements InitializingBean, VaultOperations, DisposableBean; // This class encapsulates main Vault interaction.\npublic interface VaultTokenOperations; // Interface that specifies token-related operations.\npublic class VaultTokenTemplate extends Object implements VaultTokenOperations; // Default implementation of VaultTokenOperations.\npublic interface VaultTransformOperations; // Interface that specifies operations using the transform backend.\npublic class VaultTransformTemplate extends Object implements VaultTransformOperations; // Default implementation of VaultTransformOperations.\n", "des": "Vault core support."}
{"index": 3653, "repo": "solr-core-9.3.0", "code": "package handler;\n\npackage handler.admin; // SolrRequestHandler implementations for powering he Solr Admin UI\npackage handler.api; // V2 utilities useful for all API implementations.\npackage handler.component; // SearchComponent implementations for use in SearchHandler\npackage handler.configsets; // V2 API classes for performing CRUD operations on configsets.\npackage handler.designer; // The SchemaDesignerAPI and supporting classes.\npackage handler.export; // Solr's Export Handler Functionality\npackage handler.loader; // ContentStreamLoader implementations for use in ContentStreamHandlerBase implementations\npackage handler.tagger; // The TaggerRequestHandler and supporting classes.\nInterface AnalysisRequestHandlerBase.TokenTrackingAttribute; // This is an Attribute used to track the positions of tokens in the analysis chain.\nInterface NestedRequestHandler; // An interface for RequestHandlers need to handle all paths under its registered path\nInterface ReplicationHandler.PollListener;\nClass AnalysisRequestHandlerBase; // A base class for all analysis request handlers.\nClass AnalysisRequestHandlerBase.AnalysisContext; // Serves as the context of an analysis process.\nClass AnalysisRequestHandlerBase.ListBasedTokenStream; // TokenStream that iterates over a list of pre-existing Tokens\nClass AnalysisRequestHandlerBase.TokenTrackingAttributeImpl; // Implementation of AnalysisRequestHandlerBase.TokenTrackingAttribute.\nClass AnalyzeEvaluator;\nClass BlobHandler;\nClass CatStream;\nClass CatStream.CrawlFile;\nClass ClassifyStream; // The classify expression retrieves a model trained by the train expression and uses it to classify documents from a stream Syntax: classif(model(...), anyStream(...), field=\"body\")\nClass ClusterAPI; // All V2 APIs that have a prefix of /api/cluster/\nClass ClusterAPI.RoleInfo;\nClass ContentStreamHandlerBase; // Shares common code between various handlers that manipulate ContentStream objects.\nClass DocumentAnalysisRequestHandler; // An analysis handler that provides a breakdown of the analysis process of provided documents.\nClass DumpRequestHandler;\nClass ExportHandler;\nClass ExportHandler.ExportHandlerStreamFactory;\nClass FieldAnalysisRequestHandler; // Provides the ability to specify multiple field types and field names in the same request.\nClass GraphHandler; // Solr Request Handler for graph traversal with streaming functions that responds with GraphML markup.\nClass GraphHandler.DummyErrorStream;\nClass GraphHandler.TimerStream;\nClass HaversineMetersEvaluator;\n", "des": "Concrete implementations of SolrRequestHandler"}
{"index": 4, "repo": "connect-api-3.5.0", "code": "package errors;\n\nClass AlreadyExistsException; // Indicates the operation tried to create an entity that already exists.\nClass ConnectException; // ConnectException is the top-level exception type generated by Kafka Connect and connector implementations.\nClass DataException; // Base class for all Kafka Connect data API exceptions.\nClass IllegalWorkerStateException; // Indicates that a method has been invoked illegally or at an invalid time by a connector or task.\nClass NotFoundException; // Indicates that an operation attempted to modify or delete a connector or task that is not present on the worker.\nClass RetriableException; // An exception that indicates the operation can be reattempted.\nClass SchemaBuilderException; // Indicates an error while building a schema via SchemaBuilder\nClass SchemaProjectorException; // Indicates an error while projecting a schema via SchemaProjector\n", "des": "Provides common exception classes for Connect, used by the framework and plugins to communicate failures."}
{"index": 799, "repo": "lucene-analyzers-common-8.11.2", "code": "package pt;\n\nClass PortugueseAnalyzer; // Analyzer for Portuguese.\nClass PortugueseLightStemFilter; // A TokenFilter that applies PortugueseLightStemmer to stem Portuguese words.\nClass PortugueseLightStemFilterFactory; // Factory for PortugueseLightStemFilter.\nClass PortugueseLightStemmer; // Light Stemmer for Portuguese\nClass PortugueseMinimalStemFilter; // A TokenFilter that applies PortugueseMinimalStemmer to stem Portuguese words.\nClass PortugueseMinimalStemFilterFactory; // Factory for PortugueseMinimalStemFilter.\nClass PortugueseMinimalStemmer; // Minimal Stemmer for Portuguese\nClass PortugueseStemFilter; // A TokenFilter that applies PortugueseStemmer to stem Portuguese words.\nClass PortugueseStemFilterFactory; // Factory for PortugueseStemFilter.\nClass PortugueseStemmer; // Portuguese stemmer implementing the RSLP (Removedor de Sufixos da Lingua Portuguesa) algorithm.\nClass RSLPStemmerBase; // Base class for stemmers that use a set of RSLP-like stemming steps.\nClass RSLPStemmerBase.Rule; // A basic rule, with no exceptions.\nClass RSLPStemmerBase.RuleWithSetExceptions; // A rule with a set of whole-word exceptions.\nClass RSLPStemmerBase.RuleWithSuffixExceptions; // A rule with a set of exceptional suffixes.\nClass RSLPStemmerBase.Step; // A step containing a list of rules.\n", "des": "Analyzer for Portuguese."}
{"index": 1227, "repo": "spring-plugin-core-3.0.0", "code": "package support;\n\npublic abstract class AbstractTypeAwareSupport<T> extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.beans.factory.InitializingBean; // Abstract base class to implement types that need access to all beans of a given type from the ApplicationContext.\npublic class BeanListFactoryBean<T> extends AbstractTypeAwareSupport<T> implements org.springframework.beans.factory.FactoryBean<List<T>>; // Factory to create bean lists for a given type.\npublic class PluginRegistryFactoryBean<T extends Plugin<S>,S> extends AbstractTypeAwareSupport<T> implements org.springframework.beans.factory.FactoryBean<PluginRegistry<T,S>>; // FactoryBean to create PluginRegistry instances.\n", "des": "This package contains support classes to create bean lists or plugin registry instances out of beans implementing a certain interface."}
{"index": 1140, "repo": "hadoop-yarn-api-3.3.6", "code": "package csi;\n\nClass CsiConfigUtils; // Utility class for CSI in the API level.\n", "des": "Package that includes some CSI utility classes."}
{"index": 2823, "repo": "spring-orm-6.0.11", "code": "package vendor;\n\npublic abstract class AbstractJpaVendorAdapter extends Object implements JpaVendorAdapter; // Abstract JpaVendorAdapter implementation that defines common properties, to be translated into vendor-specific JPA properties by concrete subclasses.\npublic enum Database extends Enum<Database>; // Enumeration for common database platforms.\npublic class EclipseLinkJpaDialect extends DefaultJpaDialect; // JpaDialect implementation for Eclipse Persistence Services (EclipseLink).\npublic class EclipseLinkJpaVendorAdapter extends AbstractJpaVendorAdapter; // JpaVendorAdapter implementation for Eclipse Persistence Services (EclipseLink).\npublic class HibernateJpaDialect extends DefaultJpaDialect; // JpaDialect implementation for Hibernate.\npublic class HibernateJpaVendorAdapter extends AbstractJpaVendorAdapter; // JpaVendorAdapter implementation for Hibernate.\n", "des": "Support classes for adapting to specific JPA vendors."}
{"index": 2817, "repo": "spring-orm-6.0.11", "code": "package orm;\n\npackage orm.hibernate5; // Package providing integration of Hibernate 5.x with Spring concepts.\npackage orm.jpa; // Package providing integration of JPA (Java Persistence API) with Spring concepts.\npublic class ObjectOptimisticLockingFailureException extends org.springframework.dao.OptimisticLockingFailureException; // Exception thrown on an optimistic locking violation for a mapped object.\npublic class ObjectRetrievalFailureException extends org.springframework.dao.DataRetrievalFailureException; // Exception thrown if a mapped object could not be retrieved via its identifier.\n", "des": "Root package for Spring's O/R Mapping integration classes."}
{"index": 2400, "repo": "spring-batch-core-5.0.2", "code": "package dao;\n\npublic abstract class AbstractJdbcBatchMetadataDao extends Object implements org.springframework.beans.factory.InitializingBean; // Encapsulates common functionality needed by JDBC batch metadata DAOs - provides jdbcTemplate for subclasses and handles table prefixes.\npublic class DefaultExecutionContextSerializer extends Object implements ExecutionContextSerializer; // An implementation of the ExecutionContextSerializer that produces/consumes Base64 content.\npublic interface ExecutionContextDao; // DAO interface for persisting and retrieving ExecutionContexts.\npublic class Jackson2ExecutionContextStringSerializer extends Object implements ExecutionContextSerializer; // Implementation that uses Jackson2 to provide (de)serialization.\npublic class JdbcExecutionContextDao extends AbstractJdbcBatchMetadataDao implements ExecutionContextDao; // JDBC DAO for ExecutionContext.\npublic class JdbcJobExecutionDao extends AbstractJdbcBatchMetadataDao implements JobExecutionDao, org.springframework.beans.factory.InitializingBean; // JDBC implementation of JobExecutionDao.\npublic class JdbcJobInstanceDao extends AbstractJdbcBatchMetadataDao implements JobInstanceDao, org.springframework.beans.factory.InitializingBean; // JDBC implementation of JobInstanceDao.\npublic class JdbcStepExecutionDao extends AbstractJdbcBatchMetadataDao implements StepExecutionDao, org.springframework.beans.factory.InitializingBean; // JDBC implementation of StepExecutionDao. Allows customization of the tables names used by Spring Batch for step meta data via a prefix property. Uses sequences or tables (via Spring's DataFieldMaxValueIncrementer abstraction) to create all primary keys before inserting a new row.\npublic interface JobExecutionDao; // Data Access Object for job executions.\npublic interface JobInstanceDao; // Data Access Object for job instances.\npublic class NoSuchObjectException extends RuntimeException; // This exception identifies that a batch domain object is invalid, which is generally caused by an invalid ID.\npublic interface StepExecutionDao;\n", "des": "Specific implementations of dao concerns."}
{"index": 441, "repo": "hbase-client-3.0.0-alpha-4", "code": "package filter;\n\nClass BigDecimalComparator; // A BigDecimal comparator which numerical compares against the specified byte array\nClass BinaryComparator; // A binary comparator which lexicographically compares against the specified byte array using Bytes.compareTo(byte[], byte[]).\nClass BinaryComponentComparator; // A comparator which compares against a specified byte array, but only compares specific portion of the byte array.\nClass BinaryPrefixComparator; // A comparator which compares against a specified byte array, but only compares up to the length of this byte array.\nClass BitComparator; // A bit comparator which performs the specified bitwise operation on each of the bytes with the specified byte array.\nClass ColumnCountGetFilter; // Simple filter that returns first N columns on row only.\nClass ColumnPaginationFilter; // A filter, based on the ColumnCountGetFilter, takes two arguments: limit and offset.\nClass ColumnPrefixFilter; // This filter is used for selecting only those keys with columns that matches a particular prefix.\nClass ColumnRangeFilter; // This filter is used for selecting only those keys with columns that are between minColumn to maxColumn.\nClass ColumnValueFilter; // Different from SingleColumnValueFilter which returns an entire row when specified condition is matched, ColumnValueFilter return the matched cell only.\nClass CompareFilter; // This is a generic filter to be used to filter by comparison.\nClass DependentColumnFilter; // A filter for adding inter-column timestamp matching Only cells with a correspondingly timestamped entry in the target column will be retained Not compatible with Scan.setBatch as operations need full rows for correct filtering\nClass FamilyFilter; // This filter is used to filter based on the column family.\nClass Filter; // Interface for row and column filters directly applied within the regionserver.\nClass FilterBase; // Abstract base class to help you implement new Filters.\nClass FilterList; // Implementation of Filter that represents an ordered List of Filters which will be evaluated with a specified boolean operator FilterList.Operator.MUST_PASS_ALL (AND) or FilterList.Operator.MUST_PASS_ONE (OR).\nClass FilterListBase; // Base class for FilterList.\nClass FilterListWithAND; // FilterListWithAND represents an ordered list of filters which will be evaluated with an AND operator.\nClass FilterListWithOR; // FilterListWithOR represents an ordered list of filters which will be evaluated with an OR operator.\n", "des": "Provides row-level filters applied to HRegion scan results during calls to ResultScanner.next()."}
{"index": 2784, "repo": "spring-security-ldap-6.1.2", "code": "package userdetails;\n\npublic class DefaultLdapAuthoritiesPopulator extends Object implements LdapAuthoritiesPopulator; // The default strategy for obtaining user role information from the directory.\npublic class InetOrgPerson extends Person; // UserDetails implementation whose properties are based on a subset of the LDAP schema for inetOrgPerson.\npublic static class InetOrgPerson.Essence extends Person.Essence;\npublic class InetOrgPersonContextMapper extends Object implements UserDetailsContextMapper;\npublic interface LdapAuthoritiesPopulator; // Obtains a list of granted authorities for an Ldap user.\npublic class LdapAuthority extends Object implements org.springframework.security.core.GrantedAuthority; // An authority that contains at least a DN and a role name for an LDAP entry but can also contain other desired attributes to be fetched during an LDAP authority search.\npublic interface LdapUserDetails extends org.springframework.security.core.userdetails.UserDetails, org.springframework.security.core.CredentialsContainer; // Captures the information for a user's LDAP entry.\npublic class LdapUserDetailsImpl extends Object implements LdapUserDetails, PasswordPolicyData; // A UserDetails implementation which is used internally by the Ldap services.\npublic static class LdapUserDetailsImpl.Essence extends Object; // Variation of essence pattern.\npublic class LdapUserDetailsManager extends Object implements org.springframework.security.provisioning.UserDetailsManager; // An Ldap implementation of UserDetailsManager.\npublic class LdapUserDetailsMapper extends Object implements UserDetailsContextMapper; // The context mapper used by the LDAP authentication provider to create an LDAP user object.\npublic class LdapUserDetailsService extends Object implements org.springframework.security.core.userdetails.UserDetailsService; // LDAP implementation of UserDetailsService based around an LdapUserSearch and an LdapAuthoritiesPopulator.\npublic class NestedLdapAuthoritiesPopulator extends DefaultLdapAuthoritiesPopulator; // A LDAP authority populator that can recursively search static nested groups.\npublic class Person extends LdapUserDetailsImpl; // UserDetails implementation whose properties are based on the LDAP schema for Person.\npublic static class Person.Essence extends LdapUserDetailsImpl.Essence;\npublic class PersonContextMapper extends Object implements UserDetailsContextMapper;\n", "des": "LDAP-focused UserDetails implementations which map from a ubset of the data contained in some of the standard LDAP types (such as InetOrgPerson)."}
{"index": 2171, "repo": "wicket-spring-10.0.0-M1", "code": "package annot;\n\npublic class AnnotProxyFieldValueFactory extends Object implements org.apache.wicket.injection.IFieldValueFactory; // IFieldValueFactory that uses LazyInitProxyFactory to create proxies for Spring dependencies based on the SpringBean annotation applied to a field.\n@Retention(RUNTIME) @Target(FIELD) @Documented public @interface SpringBean; // Annotation used to tag a field as a placeholder for a spring bean.\npublic class SpringComponentInjector extends org.apache.wicket.injection.Injector implements org.apache.wicket.application.IComponentInstantiationListener, org.apache.wicket.IBehaviorInstantiationListener; // IComponentInstantiationListener that injects component and behavior properties annotated with SpringBean annotations.\n", "des": "This package contains all the classes to make your wicket components and other pojos @SpringBean annotation aware."}
{"index": 1952, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package kafka;\n\npublic class ConcurrentKafkaListenerContainerFactoryConfigurer extends Object; // Configure ConcurrentKafkaListenerContainerFactory with sensible defaults.\n@FunctionalInterface public interface DefaultKafkaConsumerFactoryCustomizer; // Callback interface for customizing DefaultKafkaConsumerFactory beans.\n@FunctionalInterface public interface DefaultKafkaProducerFactoryCustomizer; // Callback interface for customizing DefaultKafkaProducerFactory beans.\n@AutoConfiguration @ConditionalOnClass(org.springframework.kafka.core.KafkaTemplate.class) @EnableConfigurationProperties(KafkaProperties.class) @Import({org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration.class,org.springframework.boot.autoconfigure.kafka.KafkaStreamsAnnotationDrivenConfiguration.class}) public class KafkaAutoConfiguration extends Object; // Auto-configuration for Apache Kafka.\npublic interface KafkaConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Kafka service.\n@ConfigurationProperties(prefix=\"spring.kafka\") public class KafkaProperties extends Object; // Configuration properties for Spring for Apache Kafka.\npublic static class KafkaProperties.Admin extends Object;\npublic static class KafkaProperties.Cleanup extends Object;\npublic static class KafkaProperties.Consumer extends Object;\npublic static enum KafkaProperties.IsolationLevel extends Enum<KafkaProperties.IsolationLevel>;\npublic static class KafkaProperties.Jaas extends Object;\npublic static class KafkaProperties.Listener extends Object;\npublic static enum KafkaProperties.Listener.Type extends Enum<KafkaProperties.Listener.Type>;\npublic static class KafkaProperties.Producer extends Object;\npublic static class KafkaProperties.Retry extends Object;\npublic static class KafkaProperties.Retry.Topic extends Object; // Properties for non-blocking, topic-based retries.\npublic static class KafkaProperties.Security extends Object;\npublic static class KafkaProperties.Ssl extends Object;\npublic static class KafkaProperties.Streams extends Object; // High (and some medium) priority Streams properties and a general properties bucket.\npublic static class KafkaProperties.Template extends Object;\n@FunctionalInterface public interface StreamsBuilderFactoryBeanCustomizer; // Callback interface for customizing StreamsBuilderFactoryBean beans.\n", "des": "Auto-configuration for Apache Kafka."}
{"index": 1570, "repo": "spring-restdocs-core-3.0.0", "code": "package request;\n\npublic abstract class AbstractParametersSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document parameters from a request sent to a RESTful resource.\npublic class FormParametersSnippet extends AbstractParametersSnippet; // A Snippet that documents the form parameters supported by a RESTful resource.\npublic class ParameterDescriptor extends IgnorableDescriptor<ParameterDescriptor>; // A descriptor of a request or path parameter.\npublic class PathParametersSnippet extends AbstractParametersSnippet; // A Snippet that documents the path parameters supported by a RESTful resource.\npublic class QueryParametersSnippet extends AbstractParametersSnippet; // A Snippet that documents the query parameters supported by a RESTful resource.\npublic abstract class RequestDocumentation extends Object; // Static factory methods for documenting aspects of a request sent to a RESTful API.\npublic class RequestPartDescriptor extends IgnorableDescriptor<RequestPartDescriptor>; // A descriptor of a request part.\npublic class RequestPartsSnippet extends TemplatedSnippet; // A Snippet that documents the request parts supported by a RESTful resource.\n", "des": "Documenting query and path parameters of requests sent to a RESTful API."}
{"index": 2013, "repo": "spring-boot-devtools-3.1.1", "code": "package client;\n\npublic class ClassPathChangeUploader extends Object implements org.springframework.context.ApplicationListener<ClassPathChangedEvent>; // Listens and pushes any classpath updates to a remote endpoint.\npublic class HttpHeaderInterceptor extends Object implements org.springframework.http.client.ClientHttpRequestInterceptor; // ClientHttpRequestInterceptor to populate arbitrary HTTP headers with a value.\n@Configuration(proxyBeanMethods=false) @EnableConfigurationProperties(DevToolsProperties.class) public class RemoteClientConfiguration extends Object implements org.springframework.beans.factory.InitializingBean; // Configuration used to connect to remote Spring Boot applications.\n", "des": "Client support for a remotely running Spring Boot application."}
{"index": 291, "repo": "pdfbox-3.0.0-beta1", "code": "package encryption;\n\nClass AccessPermission; // This class represents the access permissions to a document.\nClass DecryptionMaterial; // This class represents data required to decrypt PDF documents.\nClass PDCryptFilterDictionary; // This class is a specialized view of the crypt filter dictionary of a PDF document.\nClass PDEncryption; // This class is a specialized view of the encryption dictionary of a PDF document.\nClass ProtectionPolicy; // This class represents the protection policy to apply to a document.\nClass PublicKeyDecryptionMaterial; // This class holds necessary information to decrypt a PDF document protected by the public key security handler.\nClass PublicKeyProtectionPolicy; // The protection policy to use to protect a document with the public key security handler.\nClass PublicKeyRecipient; // Represents a recipient in the public key protection policy.\nClass PublicKeySecurityHandler; // This class implements the public key security handler described in the PDF specification.\nClass SecurityHandler<T_POLICY extends ProtectionPolicy>; // A security handler as described in the PDF specifications.\nClass SecurityHandlerFactory; // Manages security handlers for the application.\nClass SecurityProvider; // Singleton which provides a security provider.\nClass StandardDecryptionMaterial; // Represents the necessary information to decrypt a document protected by the standard security handler (password protection).\nClass StandardProtectionPolicy; // The protection policy to add to a document for password-based protection.\nClass StandardSecurityHandler; // The standard security handler.\nClass InvalidPasswordException; // Indicates that an invalid password was supplied.\n", "des": "The encryption package will handle the PDF document security handlers and the functionality of pluggable security handlers."}
{"index": 2656, "repo": "spring-data-cassandra-4.1.2", "code": "package support;\n\n@Deprecated public class CachedPreparedStatementCreator extends Object implements PreparedStatementCreator;\n@Deprecated public class MapPreparedStatementCache extends Object implements PreparedStatementCache;\nprotected static class MapPreparedStatementCache.CacheKey extends Object; // MapPreparedStatementCache.CacheKey for PreparedStatement caching.\n@Deprecated public interface PreparedStatementCache;\n", "des": "Support classes for the CQL framework."}
{"index": 2893, "repo": "spring-integration-core-6.1.2", "code": "package transaction;\n\npublic class DefaultTransactionSynchronizationFactory extends Object implements TransactionSynchronizationFactory; // Default implementation of TransactionSynchronizationFactory which takes an instance of TransactionSynchronizationProcessor allowing you to create a TransactionSynchronization using {DefaultTransactionSynchronizationFactory.create(Object) method.\npublic class ExpressionEvaluatingTransactionSynchronizationProcessor extends IntegrationObjectSupport implements TransactionSynchronizationProcessor; // This implementation of TransactionSynchronizationFactory allows you to configure SpEL expressions, with their execution being coordinated (synchronized) with a transaction - see TransactionSynchronization.\npublic class IntegrationResourceHolder extends Object implements org.springframework.transaction.support.ResourceHolder; // An implementation of the ResourceHolder which holds an instance of the current Message and the synchronization resource.\npublic class IntegrationResourceHolderSynchronization extends org.springframework.transaction.support.ResourceHolderSynchronization<IntegrationResourceHolder,Object>; // The base ResourceHolderSynchronization for IntegrationResourceHolder.\npublic class PassThroughTransactionSynchronizationFactory extends Object implements TransactionSynchronizationFactory; // A simple TransactionSynchronizationFactory implementation which produces an IntegrationResourceHolderSynchronization with an IntegrationResourceHolder.\npublic class PseudoTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager; // An implementation of PlatformTransactionManager that provides transaction-like semantics to MessageSources that are not inherently transactional.\npublic class TransactionHandleMessageAdvice extends org.springframework.transaction.interceptor.TransactionInterceptor implements HandleMessageAdvice; // A TransactionInterceptor extension with HandleMessageAdvice marker.\npublic class TransactionInterceptorBuilder extends Object; // Provides a fluent API to build a transaction interceptor.\npublic interface TransactionSynchronizationFactory; // Strategy for implementing factories that create TransactionSynchronization.\npublic class TransactionSynchronizationFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<DefaultTransactionSynchronizationFactory>, org.springframework.beans.factory.BeanFactoryAware; // The FactoryBean implementation (with Builder style) to be used from JavaConfig to populate DefaultTransactionSynchronizationFactory bean.\npublic interface TransactionSynchronizationProcessor; // Strategy for implementing transaction synchronization processors.\n", "des": "Provides classes supporting the use of transactions and pseudo transactions in Spring Integration applications."}
{"index": 26, "repo": "commons-collections4-4.4", "code": "package properties;\n\nClass AbstractPropertiesFactory<T extends Properties>; // Subclasses create and load Properties and subclasses of Properties like SortedProperties.\nClass PropertiesFactory; // Creates and loads Properties.\nClass SortedProperties; // A drop-in replacement for Properties for sorting keys.\nClass SortedPropertiesFactory; // Creates and loads SortedProperties.\n", "des": "This package contains classes to extend or customize the behavior of Properties."}
{"index": 676, "repo": "commons-lang3-3.12.0", "code": "package translate;\n\nClass AggregateTranslator; // as of 3.6, use commons-text AggregateTranslator instead\nClass CharSequenceTranslator; // as of 3.6, use commons-text CharSequenceTranslator instead\nClass CodePointTranslator; // as of 3.6, use commons-text CharSequenceTranslator instead\nClass EntityArrays; // as of 3.6, use commons-text EntityArrays instead\nClass JavaUnicodeEscaper; // as of 3.6, use commons-text UnicodeEscaper instead\nClass LookupTranslator; // as of 3.6, use commons-text LookupTranslator instead\nClass NumericEntityEscaper; // as of 3.6, use commons-text NumericEntityEscaper instead\nClass NumericEntityUnescaper; // as of 3.6, use commons-text NumericEntityUnescaper instead\nClass OctalUnescaper; // as of 3.6, use commons-text OctalUnescaper instead\nClass UnicodeEscaper; // as of 3.6, use commons-text UnicodeEscaper instead\nClass UnicodeUnescaper; // as of 3.6, use commons-text UnicodeUnescaper instead\nClass UnicodeUnpairedSurrogateRemover; // as of 3.6, use commons-text UnicodeUnpairedSurrogateRemover instead\nEnum NumericEntityUnescaper.OPTION; // Enumerates NumericEntityUnescaper options for unescaping.\n", "des": "An API for creating text translation routines from a set of smaller building blocks."}
{"index": 3790, "repo": "lucene-analysis-common-9.7.0", "code": "package hi;\n\nClass HindiAnalyzer; // Analyzer for Hindi.\nClass HindiNormalizationFilter; // A TokenFilter that applies HindiNormalizer to normalize the orthography.\nClass HindiNormalizationFilterFactory; // Factory for HindiNormalizationFilter.\nClass HindiNormalizer; // Normalizer for Hindi.\nClass HindiStemFilter; // A TokenFilter that applies HindiStemmer to stem Hindi words.\nClass HindiStemFilterFactory; // Factory for HindiStemFilter.\nClass HindiStemmer; // Light Stemmer for Hindi.\n", "des": "Analyzer for Hindi."}
{"index": 3369, "repo": "opencms-core-15.0", "code": "package directedit;\n\nInterface I_CmsDirectEditProvider; // Provides the methods to generate the \"direct edit\" HTML fragments that are inserted in the generated pages in offline mode.\nInterface I_CmsEditHandler; // Edit handlers are optional and can be configured within the XSD-schema of a resource type.\nClass A_CmsDirectEditProvider; // Basic functions for direct edit providers.\nClass CmsAdvancedDirectEditProvider; // Provider for the OpenCms AdvancedDirectEdit.\nClass CmsDateSeriesEditHandler; // Special edit handler for contents that define multiple instances in a date series.\nClass CmsDirectEditButtonSelection; // Constants to indicate which direct edit buttons should be displayed for a direct edit resource if the user has the permissions.\nClass CmsDirectEditDefaultProvider; // Provider for the OpenCms default graphical \"direct edit\" buttons.\nClass CmsDirectEditJQueryProvider; // Provider for the OpenCms graphical \"direct edit\" buttons.\nClass CmsDirectEditJspIncludeProvider; // Direct edit provider that uses the same JSP include based logic that has been the default before the 6.2.3 release.\nClass CmsDirectEditMode; // Constants to indicate which mode to use for placement of the HTML that generates the direct edit buttons.\nClass CmsDirectEditParams; // A parameter set to start a direct edit element, for internal use only.\nClass CmsDirectEditPermissions; // Constants to indicate the direct edit permissions of a user for a VFS resource, used to describe if and how to show the direct edit buttons for the resource.\nClass CmsDirectEditResourceInfo; // Contains information about a resource that is direct edited.\nClass CmsDirectEditTextButtonProvider; // Creates HTML for simple text based direct edit buttons.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsAdvancedDirectEditProvider.SitemapDirectEditPermissions; // Direct edit permissions according to the sitemap configuration.\n", "des": "Used to control the generation of the HTML for the \"direct edit\" buttons."}
{"index": 757, "repo": "lucene-analyzers-common-8.11.2", "code": "package bn;\n\nClass BengaliAnalyzer; // Analyzer for Bengali.\nClass BengaliNormalizationFilter; // A TokenFilter that applies BengaliNormalizer to normalize the orthography.\nClass BengaliNormalizationFilterFactory; // Factory for BengaliNormalizationFilter.\nClass BengaliNormalizer; // Normalizer for Bengali.\nClass BengaliStemFilter; // A TokenFilter that applies BengaliStemmer to stem Bengali words.\nClass BengaliStemFilterFactory; // Factory for BengaliStemFilter.\nClass BengaliStemmer; // Stemmer for Bengali.\n", "des": "Analyzer for Bengali Language."}
{"index": 159, "repo": "ignite-core-2.15.0", "code": "package failure;\n\nClass FailureProcessor; // General failure processing API\n", "des": "Failure processor."}
{"index": 1121, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package runc;\n\nInterface RuncImageTagToManifestPlugin; // This class is a plugin interface for the RuncContainerRuntime to convert image tags into OCI Image Manifests.\nInterface RuncManifestToResourcesPlugin; // This class is a plugin interface for the RuncContainerRuntime that maps OCI Image Manifests into associated config and layers.\nClass HdfsManifestToResourcesPlugin; // This class is a plugin for the RuncContainerRuntime that maps runC image manifests into their associated config and layers that are located in HDFS.\nClass ImageManifest; // This class is a Java representation of the OCI Image Manifest Specification.\nClass ImageManifest.Blob; // This class is a Java representation of an OCI Image Blob.\nClass ImageTagToManifestPlugin; // This class is a plugin for the RuncContainerRuntime to convert image tags into runC image manifests.\nClass RuncContainerExecutorConfig; // This class is used by the RuncContainerRuntime to pass a JSON object to the container-executor.\nClass RuncContainerExecutorConfig.OCILayer; // This class is a Java representation of an OCI image layer.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig; // This class is a Java representation of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCIAnnotationsConfig; // This class is a Java representation of the oci annotations config section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCIHooksConfig; // This class is a Java representation of the oci hooks section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCIHooksConfig.HookType; // This class is a Java representation of the hook type section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCILinuxConfig; // This class is a Java representation of the oci linux config section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCILinuxConfig.Device; // This class is a Java representation of the device section of the OCI Runtime Specification.\nClass RuncContainerExecutorConfig.OCIRuntimeConfig.OCILinuxConfig.IDMapping; // This class is a Java representation of the idmapping section of the OCI Runtime Specification.\n", "des": "Package containing classes related to runC commands and common operations used within the @{link RuncContainerRuntime}."}
{"index": 2151, "repo": "wicket-core-10.0.0-M1", "code": "package include;\n\npublic class Include extends WebComponent implements IGenericComponent<String,Include>; // Component that includes/ renders the import result of an URL, much like JSP include.\n", "des": "Components for including content from non-Wicket sources."}
{"index": 3551, "repo": "guava-32.1.1-jre", "code": "package base;\n\nInterface FinalizableReference; // Implemented by references that have code to run after garbage collection of their referents.\nInterface Function<F extends @Nullable java.lang.Object,​T extends @Nullable java.lang.Object>; // Legacy version of java.util.function.Function.\nInterface Predicate<T extends @Nullable java.lang.Object>; // Legacy version of java.util.function.Predicate.\nInterface Supplier<T extends @Nullable java.lang.Object>; // Legacy version of java.util.function.Supplier.\nClass Ascii; // Static methods pertaining to ASCII characters (those in the range of values 0x00 through 0x7F), and to strings containing such characters.\nClass CharMatcher; // Determines a true or false value for any Java char value, just as Predicate does for any Object.\nClass Charsets; // Contains constant definitions for the six standard Charset instances, which are guaranteed to be supported by all Java platform implementations.\nClass Converter<A,​B>; // A function from A to B with an associated reverse function from B to A; used for converting back and forth between different representations of the same information.\nClass Defaults; // This class provides default values for all Java types, as defined by the JLS.\nClass Enums; // Utility methods for working with Enum instances.\nClass Equivalence<T>; // A strategy for determining whether two instances are considered equivalent, and for computing hash codes in a manner consistent with that equivalence.\nClass Equivalence.Wrapper<T extends @Nullable java.lang.Object>; // Wraps an object so that Equivalence.Wrapper.equals(Object) and Equivalence.Wrapper.hashCode() delegate to an Equivalence.\nClass FinalizablePhantomReference<T>; // Phantom reference with a finalizeReferent() method which a background thread invokes after the garbage collector reclaims the referent.\nClass FinalizableReferenceQueue; // A reference queue with an associated background thread that dequeues references and invokes FinalizableReference.finalizeReferent() on them.\nClass FinalizableSoftReference<T>; // Soft reference with a finalizeReferent() method which a background thread invokes after the garbage collector reclaims the referent.\n", "des": "Basic utility libraries and interfaces."}
{"index": 3788, "repo": "lucene-analysis-common-9.7.0", "code": "package ga;\n\nClass IrishAnalyzer; // Analyzer for Irish.\nClass IrishLowerCaseFilter; // Normalises token text to lower case, handling t-prothesis and n-eclipsis (i.e., that 'nAthair' should become 'n-athair')\nClass IrishLowerCaseFilterFactory; // Factory for IrishLowerCaseFilter.\n", "des": "Analyzer for Irish."}
{"index": 3732, "repo": "lucene-queryparser-9.7.0", "code": "package config;\n\nInterface FieldConfigListener; // This interface should be implemented by classes that wants to listen for field configuration requests.\nClass AbstractQueryConfig; // This class is the base of QueryConfigHandler and FieldConfig.\nClass ConfigurationKey<T>; // An instance of this class represents a key that is used to retrieve a value from AbstractQueryConfig.\nClass FieldConfig; // This class represents a field configuration.\nClass QueryConfigHandler; // This class can be used to hold any query configuration and no field configuration.\n", "des": "Base classes used to configure the query processing."}
{"index": 1407, "repo": "spring-boot-actuator-3.1.1", "code": "package liquibase;\n\n@Endpoint(id=\"liquibase\") public class LiquibaseEndpoint extends Object; // @Endpoint to expose liquibase info.\npublic static class LiquibaseEndpoint.ChangeSetDescriptor extends Object; // Description of a Liquibase change set.\npublic static class LiquibaseEndpoint.ContextExpressionDescriptor extends Object; // Description of a context expression in a LiquibaseEndpoint.ChangeSetDescriptor.\npublic static final class LiquibaseEndpoint.ContextLiquibaseBeansDescriptor extends Object; // Description of an application context's SpringLiquibase beans.\npublic static final class LiquibaseEndpoint.LiquibaseBeanDescriptor extends Object; // Description of a SpringLiquibase bean.\npublic static final class LiquibaseEndpoint.LiquibaseBeansDescriptor extends Object implements OperationResponseBody; // Description of an application's SpringLiquibase beans.\n", "des": "Actuator support for Liquibase."}
{"index": 925, "repo": "commons-compress-1.23.0", "code": "package pack200;\n\nClass Pack200CompressorInputStream; // An input stream that decompresses from the Pack200 format to be read as any other stream.\nClass Pack200CompressorOutputStream; // An output stream that compresses using the Pack200 format.\nClass Pack200Utils; // Utility methods for Pack200.\nEnum Pack200Strategy; // The different modes the Pack200 streams can use to wrap input and output.\n", "des": "Provides stream classes for compressing and decompressing streams using the Pack200 algorithm used to compress Java archives."}
{"index": 2193, "repo": "spring-security-web-6.1.2", "code": "package session;\n\npublic class ConcurrentSessionFilter extends org.springframework.web.filter.GenericFilterBean; // Filter required by concurrent session handling package.\npublic class DisableEncodeUrlFilter extends org.springframework.web.filter.OncePerRequestFilter; // Disables encoding URLs using the HttpServletResponse to prevent including the session id in URLs which is not considered URL because the session id can be leaked in things like HTTP access logs.\npublic class ForceEagerSessionCreationFilter extends org.springframework.web.filter.OncePerRequestFilter; // Eagerly creates HttpSession if it does not already exist.\npublic class HttpSessionCreatedEvent extends org.springframework.security.core.session.SessionCreationEvent; // Published by the HttpSessionEventPublisher when an HttpSession is created by the container\npublic class HttpSessionDestroyedEvent extends org.springframework.security.core.session.SessionDestroyedEvent; // Published by the HttpSessionEventPublisher when a HttpSession is removed from the container\npublic class HttpSessionEventPublisher extends Object implements jakarta.servlet.http.HttpSessionListener, jakarta.servlet.http.HttpSessionIdListener; // Declared in web.xml as\npublic class HttpSessionIdChangedEvent extends org.springframework.security.core.session.SessionIdChangedEvent; // Published by the HttpSessionEventPublisher when an HttpSession ID is changed.\npublic final class InvalidSessionAccessDeniedHandler extends Object implements AccessDeniedHandler; // An adapter of InvalidSessionStrategy to AccessDeniedHandler\npublic interface InvalidSessionStrategy; // Determines the behaviour of the SessionManagementFilter when an invalid session Id is submitted and detected in the SessionManagementFilter.\npublic final class RequestedUrlRedirectInvalidSessionStrategy extends Object implements InvalidSessionStrategy; // Performs a redirect to the original request URL when an invalid requested session is detected by the SessionManagementFilter.\npublic final class SessionInformationExpiredEvent extends org.springframework.context.ApplicationEvent; // An event for when a SessionInformation is expired.\npublic interface SessionInformationExpiredStrategy; // Determines the behaviour of the ConcurrentSessionFilter when an expired session is detected in the ConcurrentSessionFilter.\n", "des": "Session management filters, HttpSession events and publisher classes."}
{"index": 3723, "repo": "solr-core-9.3.0", "code": "package stats;\n\nInterface HttpClientMetricNameStrategy; // Strategy for creating metric names for HttpClient Copied from metrics-httpclient library\nInterface InstrumentedHttpListenerFactory.NameStrategy;\nClass InstrumentedHttpListenerFactory; // A HttpListenerFactory tracks metrics interesting to solr Inspired and partially copied from dropwizard httpclient library\nClass InstrumentedHttpRequestExecutor; // Sub-class of HttpRequestExecutor which tracks metrics interesting to solr Inspired and partially copied from dropwizard httpclient library\nClass InstrumentedPoolingHttpClientConnectionManager; // Sub-class of PoolingHttpClientConnectionManager which tracks metrics interesting to Solr.\nClass MetricUtils; // Metrics specific utility functions.\n", "des": "Utilities for collecting statistics"}
{"index": 1546, "repo": "spring-context-6.0.11", "code": "package bsh;\n\npublic class BshScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware; // BeanShell-based implementation of Spring's ScriptEvaluator strategy interface.\npublic class BshScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanClassLoaderAware; // ScriptFactory implementation for a BeanShell script.\npublic abstract class BshScriptUtils extends Object; // Utility methods for handling BeanShell-scripted objects.\npublic static final class BshScriptUtils.BshExecutionException extends org.springframework.core.NestedRuntimeException; // Exception to be thrown on script execution failure.\n", "des": "Package providing integration of BeanShell (and BeanShell2) into Spring's scripting infrastructure."}
{"index": 682, "repo": "jackson-databind-2.15.2", "code": "package deser;\n\npackage deser.impl; // Contains those implementation classes of deserialization part of data binding that are not considered part of public or semi-public interfaces.\npackage deser.std; // Contains public standard implementations of abstraction that Jackson uses.\nInterface ContextualDeserializer; // Add-on interface that JsonDeserializers can implement to get a callback that can be used to create contextual (context-dependent) instances of deserializer to use for handling properties of supported type.\nInterface ContextualKeyDeserializer; // Add-on interface that KeyDeserializers can implement to get a callback that can be used to create contextual instances of key deserializer to use for handling Map keys of supported type.\nInterface Deserializers; // Interface that defines API for simple extensions that can provide additional deserializers for various types.\nInterface KeyDeserializers; // Interface that defines API for simple extensions that can provide additional deserializers for deserializer Map keys of various types, from JSON property names.\nInterface NullValueProvider; // Helper interface implemented by classes that are to be used as null providers during deserialization.\nInterface ResolvableDeserializer; // Interface used to indicate deserializers that want to do post-processing after construction but before being returned to caller (and possibly cached) and used.\nInterface ValueInstantiator.Gettable;\nInterface ValueInstantiators; // Interface for providers of ValueInstantiator instances.\nClass AbstractDeserializer; // Deserializer only used for abstract types used as placeholders during polymorphic type handling deserialization.\nClass BasicDeserializerFactory; // Abstract factory base class that can provide deserializers for standard JDK classes, including collection classes and simple heuristics for \"upcasting\" common collection interface types (such as Collection).\nClass BasicDeserializerFactory.ContainerDefaultMappings; // Helper class to contain default mappings for abstract JDK Collection and Map types.\nClass BasicDeserializerFactory.CreatorCollectionState; // Helper class to contain largish number of parameters that need to be passed during Creator introspection.\nClass BeanDeserializer; // Deserializer class that can deserialize instances of arbitrary bean objects, usually from JSON Object structs,\nClass BeanDeserializerBase; // Base class for BeanDeserializer.\nClass BeanDeserializerBuilder; // Builder class used for aggregating deserialization information about a POJO, in order to build a JsonDeserializer for deserializing instances.\nClass BeanDeserializerFactory; // Concrete deserializer factory class that adds full Bean deserializer construction logic using class introspection.\n", "des": "Contains implementation classes of deserialization part of data binding."}
{"index": 2919, "repo": "groovy-4.0.13", "code": "package io;\n\npublic class EncodingAwareBufferedWriter extends BufferedWriter; // A buffered writer only for OutputStreamWriter that is aware of the encoding of the OutputStreamWriter.\npublic enum FileType extends Enum<FileType>; // Represents particular files of interest.\npublic enum FileVisitResult extends Enum<FileVisitResult>; // Represents special return values for the 'preDir', 'postDir' and 'visit'/supplied Closures used with ResourceGroovyMethods.traverse(java.io.File, java.util.Map, groovy.lang.Closure) and related methods to control subsequent traversal behavior.\npublic class GroovyPrintStream extends PrintStream; // A PrintStream that outputs objects in Groovy style.\npublic class GroovyPrintWriter extends PrintWriter; // A PrintWriter that outputs objects in Groovy style.\npublic class LineColumnReader extends BufferedReader; // The LineColumnReader is an extension to BufferedReader that keeps track of the line and column information of where the cursor is.\npublic class PlatformLineWriter extends Writer; // A buffered writer that gobbles any \\r characters and replaces every \\n with a platform specific newline.\n", "des": "Classes for Groovier Input/Output."}
{"index": 1956, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package logging;\n\npublic class ConditionEvaluationReportLoggingListener extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>; // ApplicationContextInitializer that writes the ConditionEvaluationReport to the log.\npublic class ConditionEvaluationReportMessage extends Object; // A condition evaluation report message that can logged or printed.\n", "des": "Auto-configuration for logging."}
{"index": 1328, "repo": "groovy-all-4.0.13", "code": "package expr;\n\npublic class AnnotationConstantExpression extends ConstantExpression; // Represents an annotation \"constant\" that may appear in annotation attributes (mainly used as a marker).\npublic class ArgumentListExpression extends TupleExpression; // Represents one or more arguments being passed into a method\npublic class ArrayExpression extends Expression; // Represents an array object construction.\npublic class AttributeExpression extends PropertyExpression; // Represents an attribute access (accessing the field of a class) such as the expression \"foo.@bar\".\npublic class BinaryExpression extends Expression; // Represents two expressions and an operation\npublic class BitwiseNegationExpression extends Expression;\npublic class BooleanExpression extends Expression; // Represents a boolean expression\npublic class CastExpression extends Expression; // Represents a typecast expression.\npublic class ClassExpression extends Expression; // Represents access to a Java/Groovy class in an expression, such as when invoking a static method or accessing a static type\npublic class ClosureExpression extends Expression; // Represents a closure expression such as\npublic class ClosureListExpression extends ListExpression; // This class represents a list of expressions used to create closures.\npublic class ConstantExpression extends Expression; // Represents a constant expression such as null, true, false.\npublic class ConstructorCallExpression extends Expression implements MethodCall; // A constructor call.\npublic class DeclarationExpression extends BinaryExpression; // Represents one or more local variables.\npublic class ElvisOperatorExpression extends TernaryExpression; // Represents a short ternary expression x ?: y, which is equal to\npublic class EmptyExpression extends Expression; // Placeholder for an empty expression.\npublic abstract class Expression extends AnnotatedNode; // Represents a base class for expressions which evaluate as an object\npublic interface ExpressionTransformer; // Provides a way to transform expressions\npublic class FieldExpression extends Expression; // Represents a field access such as the expression \"this.foo\".\npublic class GStringExpression extends Expression; // Represents a String expression which contains embedded values inside it such as \"hello there ${user} how are you\" which is expanded lazily\npublic class LambdaExpression extends ClosureExpression; // Represents a lambda expression such as one of these:\npublic class ListExpression extends Expression; // Represents a list expression [1, 2, 3] which creates a mutable List\n", "des": "AST nodes for Groovy expressions"}
{"index": 3162, "repo": "tika-core-2.8.0", "code": "package external;\n\nInterface ExternalParser.LineConsumer; // Consumer contract\nInterface ExternalParsersConfigReaderMetKeys; // Met Keys used by the ExternalParsersConfigReader.\nClass CompositeExternalParser; // A Composite Parser that wraps up all the available External Parsers, and provides an easy way to access them.\nClass ExternalParser; // Parser that uses an external program (like catdoc or pdf2txt) to extract text content and metadata from a given document.\nClass ExternalParsersConfigReader; // Builds up ExternalParser instances based on XML file(s) which define what to run, for what, and how to process any output metadata.\nClass ExternalParsersFactory; // Creates instances of ExternalParser based on XML configuration files.\n", "des": "External parser process."}
{"index": 3885, "repo": "solr-solrj-9.3.0", "code": "package cloud;\n\nClass DelegatingClusterStateProvider; // Base class for overriding some behavior of ClusterStateProvider\nClass ShardTerms; // Hold values of terms, this class is immutable.\nClass SocketProxy; // Kindly borrowed the idea and base implementation from the ActiveMQ project; useful for blocking traffic on a specified port.\n", "des": "Common classes for SolrCloud."}
{"index": 2426, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package mongo;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration.class,org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.class,MongoReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(org.springframework.data.mongodb.core.MongoTemplate.class) @ConditionalOnBean(org.springframework.data.mongodb.core.MongoTemplate.class) @ConditionalOnEnabledHealthIndicator(\"mongo\") public class MongoHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.data.mongo.MongoHealthIndicator,org.springframework.data.mongodb.core.MongoTemplate>; // Auto-configuration for MongoHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration.class) @ConditionalOnClass({org.springframework.data.mongodb.core.ReactiveMongoTemplate.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.springframework.data.mongodb.core.ReactiveMongoTemplate.class) @ConditionalOnEnabledHealthIndicator(\"mongo\") public class MongoReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.data.mongo.MongoReactiveHealthIndicator,org.springframework.data.mongodb.core.ReactiveMongoTemplate>; // Auto-configuration for MongoReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator MongoDB concerns dependent on Spring Data."}
{"index": 760, "repo": "lucene-analyzers-common-8.11.2", "code": "package ca;\n\nClass CatalanAnalyzer; // Analyzer for Catalan.\n", "des": "Analyzer for Catalan."}
{"index": 3576, "repo": "lucene-sandbox-9.7.0", "code": "package index;\n\nClass MergeOnFlushMergePolicy; // A simple extension to wrap MergePolicy to merge all tiny segments (or at least segments smaller than specified in MergeOnFlushMergePolicy.setSmallSegmentThresholdMB(double) into one segment on commit.\n", "des": "Experimental index-related classes"}
{"index": 488, "repo": "beam-sdks-java-core-2.49.0", "code": "package payloads;\n\nInterface PayloadSerializer;\nInterface PayloadSerializerProvider;\nClass AvroPayloadSerializerProvider; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass JsonPayloadSerializerProvider;\nClass PayloadSerializers;\n", "des": "Provides abstractions for schema-aware IOs."}
{"index": 2717, "repo": "spring-batch-infrastructure-5.0.2", "code": "package orm;\n\n@Deprecated(since=\"5.0\", forRemoval=true) public abstract class AbstractHibernateQueryProvider<T> extends Object implements HibernateQueryProvider<T>;\npublic abstract class AbstractJpaQueryProvider extends Object implements JpaQueryProvider, org.springframework.beans.factory.InitializingBean; // Abstract JPA Query Provider to serve as a base class for all JPA Query providers.\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateNativeQueryProvider<E> extends AbstractHibernateQueryProvider<E>;\n@Deprecated(since=\"5.0\", forRemoval=true) public interface HibernateQueryProvider<T>;\npublic class JpaNamedQueryProvider<E> extends AbstractJpaQueryProvider; // This query provider creates JPA named Querys.\npublic class JpaNativeQueryProvider<E> extends AbstractJpaQueryProvider; // This query provider creates JPA Querys from injected native SQL queries.\npublic interface JpaQueryProvider; // Interface defining the functionality to be provided for generating queries for use with JPA ItemReaders or other custom built artifacts.\n", "des": "Support classes for components using various ORM related technologies."}
{"index": 692, "repo": "jackson-databind-2.15.2", "code": "package module;\n\nClass SimpleAbstractTypeResolver; // Simple AbstractTypeResolver implementation, which is based on static mapping from abstract super types into sub types (concrete or abstract), but retaining generic parameterization.\nClass SimpleDeserializers; // Simple implementation Deserializers which allows registration of deserializers based on raw (type erased class).\nClass SimpleKeyDeserializers; // Simple implementation KeyDeserializers which allows registration of deserializers based on raw (type erased class).\nClass SimpleModule; // Vanilla Module implementation that allows registration of serializers and deserializers, bean serializer and deserializer modifiers, registration of subtypes and mix-ins as well as some other commonly needed aspects (addition of custom AbstractTypeResolvers, ValueInstantiators).\nClass SimpleSerializers; // Simple implementation Serializers which allows registration of serializers based on raw (type erased class).\nClass SimpleValueInstantiators;\n", "des": "Package that contains classes and interfaces to help implement custom extension Modules (which are registered using ObjectMapper.registerModule(com.fasterxml.jackson.databind.Module)."}
{"index": 145, "repo": "ignite-core-2.15.0", "code": "package indexing;\n\nClass GridIndexingManager; // Manages cache indexing.\nClass IndexesRebuildTask; // Task that rebuilds indexes.\n", "des": "Indexing manager classes."}
{"index": 1600, "repo": "spring-websocket-6.0.11", "code": "package sockjs;\n\npackage sockjs.client; // SockJS client implementation of WebSocketClient.\npackage sockjs.frame; // Support classes for creating SockJS frames including the encoding and decoding of SockJS message frames.\npackage sockjs.support; // Support classes for SockJS including an AbstractSockJsService implementation.\npackage sockjs.transport; // Server-side support for SockJS transports including TransportHandler implementations for processing incoming requests, their session counterparts for sending messages over the various transports, and DefaultSockJsService.\npublic class SockJsException extends org.springframework.core.NestedRuntimeException; // Base class for exceptions raised while processing SockJS HTTP requests.\npublic class SockJsMessageDeliveryException extends SockJsException; // An exception thrown when a message frame was successfully received over an HTTP POST and parsed but one or more of the messages it contained could not be delivered to the WebSocketHandler either because the handler failed or because the connection got closed.\npublic interface SockJsService; // The main entry point for processing HTTP requests from SockJS clients.\npublic class SockJsTransportFailureException extends SockJsException; // Indicates a serious failure that occurred in the SockJS implementation as opposed to in user code (e.g.\n", "des": "Top-level SockJS types."}
{"index": 1772, "repo": "spring-data-mongodb-4.1.2", "code": "package query;\n\npublic abstract class AbstractMongoQuery extends Object implements RepositoryQuery; // Base class for RepositoryQuery implementations for Mongo.\npublic abstract class AbstractReactiveMongoQuery extends Object implements RepositoryQuery; // Base class for reactive RepositoryQuery implementations for MongoDB.\npublic class ConvertingParameterAccessor extends Object implements MongoParameterAccessor; // Custom ParameterAccessor that uses a MongoWriter to serialize parameters into Mongo format.\npublic static interface ConvertingParameterAccessor.PotentiallyConvertingIterator extends Iterator<Object>; // Custom Iterator that adds a method to access elements in a converted manner.\npublic interface MongoEntityInformation<T,ID> extends EntityInformation<T,ID>; // Mongo specific EntityInformation.\npublic interface MongoEntityMetadata<T> extends EntityMetadata<T>; // Extension of EntityMetadata to additionally expose the collection name an entity shall be persisted to.\npublic interface MongoParameterAccessor extends ParameterAccessor; // Mongo-specific ParameterAccessor exposing a maximum distance parameter.\npublic class MongoParameters extends Parameters<MongoParameters,org.springframework.data.mongodb.repository.query.MongoParameters.MongoParameter>; // Custom extension of Parameters discovering additional\npublic class MongoParametersParameterAccessor extends ParametersParameterAccessor implements MongoParameterAccessor; // Mongo-specific ParametersParameterAccessor to allow access to the Distance parameter.\npublic class MongoQueryMethod extends QueryMethod; // Mongo specific implementation of QueryMethod.\npublic class PartTreeMongoQuery extends AbstractMongoQuery; // RepositoryQuery implementation for Mongo.\npublic class ReactiveMongoQueryMethod extends MongoQueryMethod; // Reactive specific implementation of MongoQueryMethod.\npublic class ReactivePartTreeMongoQuery extends AbstractReactiveMongoQuery; // Reactive PartTree RepositoryQuery implementation for Mongo.\npublic class ReactiveStringBasedAggregation extends AbstractReactiveMongoQuery; // A reactive RepositoryQuery to use a plain JSON String to create an aggregation pipeline to actually execute.\npublic class ReactiveStringBasedMongoQuery extends AbstractReactiveMongoQuery; // Query to use a plain JSON String to create the Query to actually execute.\npublic class StringBasedAggregation extends AbstractMongoQuery; // AbstractMongoQuery implementation to run string-based aggregations using Aggregation.\npublic class StringBasedMongoQuery extends AbstractMongoQuery; // Query to use a plain JSON String to create the Query to actually execute.\n", "des": "Query derivation mechanism for MongoDB specific repositories."}
{"index": 1429, "repo": "spring-boot-actuator-3.1.1", "code": "package quartz;\n\n@Endpoint(id=\"quartz\") public class QuartzEndpoint extends Object; // Endpoint to expose Quartz Scheduler jobs and triggers.\npublic static final class QuartzEndpoint.CalendarIntervalTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a CalendarIntervalTrigger.\npublic static final class QuartzEndpoint.CronTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a CronTrigger.\npublic static final class QuartzEndpoint.CustomTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a custom Trigger.\npublic static final class QuartzEndpoint.DailyTimeIntervalTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a DailyTimeIntervalTrigger.\npublic static class QuartzEndpoint.GroupNamesDescriptor extends Object; // Description of group names.\npublic static final class QuartzEndpoint.QuartzDescriptor extends Object implements OperationResponseBody; // Description of available job and trigger group names.\npublic static class QuartzEndpoint.QuartzGroupsDescriptor extends Object implements OperationResponseBody; // Description of each group identified by name.\npublic static final class QuartzEndpoint.QuartzJobDetailsDescriptor extends Object implements OperationResponseBody; // Description of a Quartz Job.\npublic static final class QuartzEndpoint.QuartzJobGroupSummaryDescriptor extends Object implements OperationResponseBody; // Description of the jobs in a given group.\npublic static final class QuartzEndpoint.QuartzJobSummaryDescriptor extends Object; // Description of a Quartz Job.\npublic static final class QuartzEndpoint.QuartzTriggerGroupSummaryDescriptor extends Object implements OperationResponseBody; // Description of the triggers in a given group.\npublic static final class QuartzEndpoint.QuartzTriggerGroupSummaryDescriptor.Triggers extends Object;\npublic static final class QuartzEndpoint.SimpleTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor; // Description of a SimpleTrigger.\npublic abstract static class QuartzEndpoint.TriggerDescriptor extends Object; // Base class for descriptions of a Trigger.\n@EndpointWebExtension(endpoint=QuartzEndpoint.class) @ImportRuntimeHints(org.springframework.boot.actuate.quartz.QuartzEndpointWebExtension.QuartzEndpointWebExtensionRuntimeHints.class) public class QuartzEndpointWebExtension extends Object; // @EndpointWebExtension for the QuartzEndpoint.\n", "des": "Actuator support for Quartz Scheduler."}
{"index": 1659, "repo": "jena-core-4.9.0", "code": "package builtins;\n\npublic class AddOne extends BaseBuiltin; // Bind the second argument to 1+ the first argument.\npublic class AssertDisjointPairs extends BaseBuiltin; // Assert the n^2 differtFrom pairs from a distinctMembers list\npublic abstract class BaseBuiltin extends Object implements Builtin; // Dummy implementation of the Builtin interface that specific implementations can inherit from.\npublic class Bound extends BaseBuiltin; // Predicate used to check if a variable has been bound.\npublic class CountLiteralValues extends BaseBuiltin; // CountLiteralValues(X, P, C) sets C to be the number of semantically distinct values for P on resource X.\npublic class Difference extends BaseBuiltin; // Bind the third argument to the arithmetic difference between the first and second arguments.\npublic class Drop extends BaseBuiltin; // A variant of the \"remove\" builtin that will delete matched triples from the graph but will not trigger further rule processing for the removed triples.\npublic class Equal extends BaseBuiltin; // Check that the two args are semantically equal.\npublic class GE extends BaseBuiltin; // Tests if the first argument is greater than or equal to the second.\npublic class GreaterThan extends BaseBuiltin; // Tests if the first argument is greater than the second.\npublic class Hide extends BaseBuiltin; // Register a node as to be hidden from query result iterators.\npublic class IsBNode extends BaseBuiltin; // Tests the single argument to make sure it is blank node.\npublic class IsDType extends BaseBuiltin; // Tests whether the first argument is an instance of the datatype defined by the resource in the second argument.\npublic class IsFunctor extends BaseBuiltin; // Tests the single argument to make sure it is not a Functor.\npublic class IsLiteral extends BaseBuiltin; // Tests the single argument to make sure it is a literal.\npublic class LE extends BaseBuiltin; // Tests if the first argument is less than or equal to the second.\npublic class LessThan extends BaseBuiltin; // Tests if the first argument is less than the second.\npublic class ListContains extends BaseBuiltin; // Returns true if the first argument is a list which contains the second argument.\npublic class ListEntry extends BaseBuiltin; // listEntry(?list, ?index, ?val) will bind ?val to the ?index'th entry in the RDF list ?list.\n", "des": "Implementations of the Builtin class which provides primitive operations to the rule engines."}
{"index": 2550, "repo": "pulsar-common-3.0.0", "code": "package compression;\n\npublic abstract class AirliftUtils extends Object; // Utilities.\npublic interface CompressionCodec; // Generic compression codec interface.\npublic class CompressionCodecLZ4 extends Object implements CompressionCodec; // LZ4 Compression.\npublic class CompressionCodecNone extends Object implements CompressionCodec; // No compression.\npublic class CompressionCodecProvider extends Object; // Provider of compression codecs used in Pulsar.\npublic class CompressionCodecSnappy extends Object implements CompressionCodec; // Snappy Compression.\npublic class CompressionCodecZLib extends Object implements CompressionCodec; // ZLib Compression.\npublic class CompressionCodecZstd extends Object implements CompressionCodec; // Zstandard Compression.\n", "des": "Implementation of different compression codecs."}
{"index": 3061, "repo": "spring-ws-core-4.0.5", "code": "package pox;\n\npackage pox.dom; // Contains an implementation of the POX interfaces that is based on DOM.\npublic interface PoxMessage extends WebServiceMessage; // Defines the contract for Plain Old XML messages.\npublic abstract class PoxMessageException extends WebServiceMessageException; // Specific subclass of WebServiceMessageException for Plain Old XML messages.\n", "des": "Provides the Plain Old XML (POX) functionality of the Spring Web Services framework."}
{"index": 2205, "repo": "spring-data-commons-3.1.2", "code": "package format;\n\npublic enum DistanceFormatter extends Enum<DistanceFormatter> implements Converter<String,Distance>, Formatter<Distance>; // Converter to create Distance instances from String representations.\npublic enum PointFormatter extends Enum<PointFormatter> implements Converter<String,Point>, Formatter<Point>; // Converter to parse two comma-separated doubles into a Point.\n", "des": "Formatters for geo-spatial types."}
{"index": 3684, "repo": "solr-core-9.3.0", "code": "package transform;\n\nInterface TransformerFactory.FieldRenamer; // The TransformerFactory.FieldRenamer interface should be implemented by any TransformerFactory capable of generating transformers that might rename fields, and should implement TransformerFactory.FieldRenamer.create(String, SolrParams, SolrQueryRequest, Map, Set) in place of TransformerFactory.create(String, SolrParams, SolrQueryRequest) (with the latter method overridden to throw UnsupportedOperationException).\nClass BaseEditorialTransformer;\nClass ChildDocTransformerFactory; // Attaches all descendants (child documents) to each parent document.\nClass CoreAugmenterFactory;\nClass DocIdAugmenterFactory; // Augments the document with a [docid] integer containing it's current (internal) id in the lucene index.\nClass DocTransformer; // A DocTransformer can add, remove or alter a Document before it is written out to the Response.\nClass DocTransformer.NoopFieldTransformer; // Trivial Impl that ensure that the specified field is requested as an \"extra\" field, but then does nothing during the transformation phase.\nClass DocTransformers; // Transform a document before it gets sent out\nClass ElevatedMarkerFactory; // Used to mark whether a document has been elevated or not\nClass ExcludedMarkerFactory;\nClass ExplainAugmenterFactory;\nClass GeoTransformerFactory; // This DocumentTransformer will write a Shape to the SolrDocument using the requested format.\nClass RawValueTransformerFactory;\nClass RenameFieldTransformer; // Return a field with a name that is different that what is indexed\nClass ScoreAugmenter; // Simple Augmenter that adds the score\nClass ShardAugmenterFactory;\nClass SubQueryAugmenterFactory; // This transformer executes subquery per every result document.\nClass TransformerFactory; // New instance for each request\nClass ValueAugmenterFactory;\nClass ValueSourceAugmenter; // Add values from a ValueSource (function query etc)\nEnum ExplainAugmenterFactory.Style;\nEnum ShardAugmenterFactory.Style;\n", "des": "APIs and implementations of DocTransformer for modifying documents in Solr request responses"}
{"index": 2751, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support;\n\npublic interface RepeatInternalState; // Internal interface for extensions of RepeatTemplate.\npublic class RepeatInternalStateSupport extends Object implements RepeatInternalState;\npublic final class RepeatSynchronizationManager extends Object; // Global variable support for repeat clients.\npublic class RepeatTemplate extends Object implements RepeatOperations; // Simple implementation and base class for batch templates implementing RepeatOperations.\n@Deprecated(since=\"5.0\", forRemoval=true) public class ResultHolderResultQueue extends Object;\npublic class TaskExecutorRepeatTemplate extends RepeatTemplate; // Provides RepeatOperations support including interceptors that can be used to modify or monitor the behaviour at run time. This implementation is sufficient to be used to configure transactional behaviour for each item by making the RepeatCallback transactional, or for the whole batch by making the execute method transactional (but only then if the task executor is synchronous). This class is thread-safe if its collaborators are thread-safe (interceptors, terminationPolicy, callback).\n@Deprecated(since=\"5.0\", forRemoval=true) public class ThrottleLimitResultQueue<T> extends Object;\n", "des": "Infrastructure implementations of repeat support concerns."}
{"index": 3150, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package converter;\n\nClass AttributeConverterMutabilityPlanImpl<T>; // The standard approach for defining a MutabilityPlan for converted (AttributeConverter) values is to always assume that they are immutable to make sure that dirty checking, deep copying and second-level caching all work properly no matter what.\nClass AttributeConverterSqlTypeDescriptorAdapter; // Adapter for incorporating JPA AttributeConverter handling into the SqlTypeDescriptor contract.\nClass AttributeConverterTypeAdapter<T>; // Adapts the Hibernate Type contract to incorporate JPA AttributeConverter calls.\n", "des": "Support for handling JPA AttributeConverter instances as part of the Hibernate Type system."}
{"index": 3195, "repo": "tomcat-api-10.1", "code": "package web;\n\nInterface Injectable;\nInterface NamingResources; // Defines an interface for the object that is added to the representation of a JNDI resource in web.xml to enable it to also be the implementation of that JNDI resource.\nClass ApplicationParameter; // Representation of a context initialization parameter that is configured in the server configuration file, rather than the application deployment descriptor.\nClass Constants;\nClass ContextEjb; // Representation of an EJB resource reference for a web application, as represented in a <ejb-ref> element in the deployment descriptor.\nClass ContextEnvironment; // Representation of an application environment entry, as represented in an <env-entry> element in the deployment descriptor.\nClass ContextHandler; // Representation of a handler reference for a web service, as represented in a <handler> element in the deployment descriptor.\nClass ContextLocalEjb; // Representation of a local EJB resource reference for a web application, as represented in a <ejb-local-ref> element in the deployment descriptor.\nClass ContextResource; // Representation of a resource reference for a web application, as represented in a <resource-ref> element in the deployment descriptor.\nClass ContextResourceEnvRef; // Representation of an application resource reference, as represented in an <res-env-refy> element in the deployment descriptor.\nClass ContextResourceLink; // Representation of a resource link for a web application, as represented in a <ResourceLink> element in the server configuration file.\nClass ContextService; // Representation of a web service reference for a web application, as represented in a <service-ref> element in the deployment descriptor.\nClass ContextTransaction; // Representation of an application resource reference, as represented in an <res-env-refy> element in the deployment descriptor.\nClass ErrorPage; // Representation of an error page element for a web application, as represented in a <error-page> element in the deployment descriptor.\nClass FilterDef; // Representation of a filter definition for a web application, as represented in a <filter> element in the deployment descriptor.\nClass FilterMap; // Representation of a filter mapping for a web application, as represented in a <filter-mapping> element in the deployment descriptor.\nClass FragmentJarScannerCallback; // Callback handling a web-fragment.xml descriptor.\nClass InjectionTarget;\nClass JspConfigDescriptorImpl;\n", "des": "This package contains Java objects that represent complex data structures from the web application deployment descriptor file (web.xml)."}
{"index": 374, "repo": "calcite-linq4j-1.34.0", "code": "package function;\n\nInterface BigDecimalFunction1<T0>; // Function that takes one parameter and returns a BigDecimal value.\nInterface DoubleFunction1<T0>; // Function that takes one parameter and returns a native double value.\nInterface EqualityComparer<T>; // Compares values for equality.\nInterface FloatFunction1<T0>; // Function that takes one parameter and returns a native float value.\nInterface Function<R>; // Base interface for all functions.\nInterface Function0<R>; // Function with no parameters.\nInterface Function1<T0,R>; // Function with one parameter.\nInterface Function2<T0,T1,R>; // Function with two parameters.\nInterface IntegerFunction1<T0>; // Function that takes one parameter and returns a native int value.\nInterface LongFunction1<T0>; // Function that takes one parameter and returns a native long value.\nInterface NullableBigDecimalFunction1<T0>; // Function that takes one parameter and returns a BigDecimal value that may be null.\nInterface NullableDoubleFunction1<T0>; // Function that takes one parameter and returns a Double value that may be null.\nInterface NullableFloatFunction1<T0>; // Function that takes one parameter and returns a Float value that may be null.\nInterface NullableIntegerFunction1<T0>; // Function that takes one parameter and returns an Integer value that may be null.\nInterface NullableLongFunction1<T0>; // Function that takes one parameter and returns a Long value that may be null.\nInterface Predicate1<T0>; // Function with one parameter returning a native boolean value.\nInterface Predicate2<T0,T1>; // Function with two parameters returning a native boolean value.\nClass Functions; // Utilities relating to functions.\nAnnotation Type Deterministic; // Specifies that function is deterministic (i.e.\nAnnotation Type Experimental; // Annotation that indicates that a class, interface, field or method is experimental, not part of the public API, and subject to change or removal.\nAnnotation Type Hints; // Annotation applied to a user-defined function that gives extra metadata about that function.\nAnnotation Type NonDeterministic; // Specifies that function is NOT deterministic (i.e.\nAnnotation Type Parameter; // Annotation that supplies metadata about a function parameter.\n", "des": "Contains definitions of functions and predicates."}
{"index": 3309, "repo": "opencms-core-15.0", "code": "package search;\n\npackage search.documents; // Handles indexing different sorts of document and resource type from the OpenCms VFS for the full text search.\npackage search.extractors; // Contains a generic, low-level framework for extration of plain text content out of various popular file formats.\npackage search.fields; // These classes control the mapping of the OpenCms content to the Lucene search fields.\npackage search.galleries; // Implements the search functions for the OpenCms Gallery search index, which is used by the Advanced Direct Edit (ADE) functions.\npackage search.solr; // The package contains the Solr search integration.\nInterface I_CmsIndexer; // Indexes resources for the OpenCms search.\nInterface I_CmsIndexWriter; // Abstracts the index writer implementation for the most important index manipulation operations.\nInterface I_CmsSearchDocument; // The interface for search documents.\nInterface I_CmsSearchIndex; // Interface for search indizes that should be handled by the CmsSearchManager.\nClass A_CmsSearchIndex; // Abstract base class for search indexes.\nClass CmsDependencyIndexer; // A VFS indexer that resolves locale dependent documents.\nClass CmsIndexingThread; // Implements the indexing method for a single resource as thread.\nClass CmsIndexingThreadManager; // Implements the management of indexing threads.\nClass CmsLuceneDocument; // A Lucene search document implementation.\nClass CmsLuceneIndexWriter; // Delegates indexing to a standard Lucene IndexWriter.\nClass CmsSearch; // Helper class to access the search facility within a jsp.\nClass CmsSearchAnalyzer; // An analyzer class is used by Lucene to reduce the content to be indexed with trimmed endings etc.\nClass CmsSearchCategoryCollector; // Collects category information during a search process.\nClass CmsSearchDocumentType; // A document type specifies which document factory class is used to pull the content of an OpenCms document into a Lucene index document.\nClass CmsSearchIndex; // Abstract search index implementation.\nClass CmsSearchIndexSource; // A search index source is a description of a list of Cms resources to be indexed.\nClass CmsSearchIndexUpdateData; // A collection of resources for the incremental update of a search index.\nClass CmsSearchManager; // Implements the general management and configuration of the search and indexing facilities in OpenCms.\nClass CmsSearchManager.CmsSearchForceUnlockMode; // Enumeration class for force unlock types.\n", "des": "Implements the main full text search and indexing functions available in OpenCms."}
{"index": 40, "repo": "ignite-core-2.15.0", "code": "package scheduler;\n\nInterface SchedulerFuture<R>; // Future for cron-based scheduled execution.\n", "des": "Contains Job Scheduling functionality."}
{"index": 3408, "repo": "commons-imaging-1.0-alpha3", "code": "package datareaders;\n\nClass DataReaderStrips; // Provides a data reader for TIFF file images organized by tiles.\nClass DataReaderTiled; // Provides a data reader for TIFF file images organized by tiles.\nClass ImageDataReader; // Defines the base class for the TIFF file reader classes.\n", "des": "TIFF data readers."}
{"index": 1480, "repo": "tribuo-core-4.3.1", "code": "package ensemble;\n\npublic class BaggingTrainer<T extends Output<T>> extends Object implements Trainer<T>; // A Trainer that wraps another trainer and produces a bagged ensemble.\npublic interface EnsembleCombiner<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.config.Configurable, ProtoSerializable<org.tribuo.protos.core.EnsembleCombinerProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>, Serializable; // An interface for combining predictions.\npublic class EnsembleExcuse<T extends Output<T>> extends Excuse<T>; // An Excuse which has a List of excuses for each of the ensemble members.\npublic abstract class EnsembleModel<T extends Output<T>> extends Model<T>; // A model which contains a list of other Models.\npublic final class WeightedEnsembleModel<T extends Output<T>> extends EnsembleModel<T> implements ONNXExportable; // An ensemble model that uses weights to combine the ensemble member predictions.\n", "des": "Provides an interface for model prediction combinations, two base classes for ensemble models, a base class for ensemble excuses, and a Bagging implementation."}
{"index": 3549, "repo": "opennlp-tools-2.2.0", "code": "package featuregen;\n\nInterface AdaptiveFeatureGenerator; // An interface for generating features for name entity identification and for updating document level contexts.\nInterface ArtifactToSerializerMapper;\nInterface FeatureGeneratorResourceProvider; // The FeatureGeneratorResourceProvider provides access to the resources available in the model.\nClass AdditionalContextFeatureGenerator; // The AdditionalContextFeatureGenerator generates the context from the passed in additional context.\nClass AggregatedFeatureGenerator; // The AggregatedFeatureGenerator aggregates a set of AdaptiveFeatureGenerators and calls them to generate the features.\nClass AggregatedFeatureGeneratorFactory;\nClass BigramNameFeatureGenerator;\nClass BigramNameFeatureGeneratorFactory;\nClass BrownBigramFeatureGenerator; // Generates Brown cluster features for token bigrams.\nClass BrownCluster; // Class to load a Brown cluster document: word\\tword_class\\tprob\nClass BrownCluster.BrownClusterSerializer;\nClass BrownClusterBigramFeatureGeneratorFactory; // Generates Brown clustering features for token bigrams.\nClass BrownClusterTokenClassFeatureGeneratorFactory; // Generates Brown clustering features for token classes.\nClass BrownClusterTokenFeatureGeneratorFactory; // Generates Brown clustering features for current token.\nClass BrownTokenClasses; // Obtain the paths listed in the pathLengths array from the Brown class.\nClass BrownTokenClassFeatureGenerator; // Generates BrownCluster features for current token and token class.\nClass BrownTokenFeatureGenerator; // Generates BrownCluster features for current token.\nClass CachedFeatureGenerator; // Caches features of the aggregated generators.\nClass CachedFeatureGeneratorFactory;\nClass CharacterNgramFeatureGenerator; // The CharacterNgramFeatureGenerator uses character ngrams to generate features about each token.\nClass CharacterNgramFeatureGeneratorFactory;\nClass CustomFeatureGenerator;\nClass DefinitionFeatureGeneratorFactory;\nClass DictionaryFeatureGenerator; // The DictionaryFeatureGenerator uses the DictionaryNameFinder to generated features for detected names based on the InSpanGenerator.\nClass DictionaryFeatureGeneratorFactory;\nClass DocumentBeginFeatureGenerator;\nClass DocumentBeginFeatureGeneratorFactory;\nClass FeatureGeneratorUtil; // This class provide common utilities for feature generation.\nClass GeneratorFactory; // Creates a set of feature generators based on a provided XML descriptor.\nClass GeneratorFactory.AbstractXmlFeatureGeneratorFactory;\nClass InSpanGenerator; // Generates features if the tokens are recognized by the provided TokenNameFinder.\n", "des": "This package contains classes for generating sequence features."}
{"index": 3738, "repo": "lucene-queryparser-9.7.0", "code": "package messages;\n\nInterface Message; // Message Interface for a lazy loading.\nInterface NLSException; // Interface that exceptions should implement to support lazy loading of messages.\nClass MessageImpl; // Default implementation of Message interface.\nClass NLS; // MessageBundles classes extend this class, to implement a bundle.\n", "des": "For Native Language Support (NLS), system of software internationalization."}
{"index": 2090, "repo": "spring-webflux-6.0.11", "code": "package reactive;\n\npackage reactive.accept; // RequestedContentTypeResolver strategy and implementations to resolve the requested content type for a given request.\npackage reactive.config; // Spring WebFlux configuration infrastructure.\npackage reactive.function; // Provides a foundation for both the reactive client and server subpackages.\npackage reactive.handler; // Provides HandlerMapping implementations including abstract base classes.\npackage reactive.resource; // Support classes for serving static resources.\npackage reactive.result; // Support for various programming model styles including the invocation of different types of handlers, e.g.\npackage reactive.socket; // Abstractions and support classes for reactive WebSocket interactions.\npublic class BindingContext extends Object; // Context to assist with binding request data onto Objects and provide access to a shared Model with controller-specific attributes.\npublic class DispatcherHandler extends Object implements org.springframework.web.server.WebHandler, org.springframework.web.cors.reactive.PreFlightRequestHandler, org.springframework.context.ApplicationContextAware; // Central dispatcher for HTTP request handlers/controllers.\npublic interface DispatchExceptionHandler; // Contract to map a Throwable to a HandlerResult.\npublic interface HandlerAdapter; // Contract to abstract the details of invoking a handler of a given type.\npublic interface HandlerMapping; // Interface to be implemented by objects that define a mapping between requests and handler objects.\npublic class HandlerResult extends Object; // Represent the result of the invocation of a handler or a handler method.\npublic interface HandlerResultHandler; // Process the HandlerResult, usually returned by a HandlerAdapter.\n", "des": "Top-level package for the spring-webflux module that contains DispatcherHandler, the main entry point for WebFlux server endpoint processing including key contracts used to map requests to handlers, invoke them, and process the result."}
{"index": 1714, "repo": "spring-boot-test-3.1.1", "code": "package server;\n\n@Target({FIELD,METHOD,PARAMETER,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Value(\"${local.rsocket.server.port}\") public @interface LocalRSocketServerPort; // Annotation at the field or method/constructor parameter level that injects the RSocket port that was allocated at runtime.\n", "des": "RSocket server test utilities and support classes."}
{"index": 3102, "repo": "jena-querybuilder-4.9.0", "code": "package handlers;\n\npublic class AggregationHandler extends Object implements Handler; // Class to handle manipulation the aggregation variables in the query.\npublic class ConstructHandler extends Object implements Handler; // The handler for construct clauses.\npublic class DatasetHandler extends Object implements Handler; // Handler for a dataset.\npublic interface Handler; // The base interface for handlers.\npublic class HandlerBlock extends Object; // A class to handle all the handlers of a query builder and keep them in sync as needed.\npublic class PrologHandler extends Object implements Handler; // The prolog handler\npublic class SelectHandler extends Object implements Handler; // A Select clause handler.\npublic class SolutionModifierHandler extends Object implements Handler; // The Solution Modifier handler.\npublic class ValuesHandler extends Object implements Handler;\npublic class WhereHandler extends Object implements Handler; // The where handler.\n", "des": "Classes that implement SPARQL clauses but do not return instances of the builder."}
{"index": 1508, "repo": "spring-context-6.0.11", "code": "package annotation;\n\npublic enum AdviceMode extends Enum<AdviceMode>; // Enumeration used to determine whether JDK proxy-based or AspectJ weaving-based advice should be applied.\npublic abstract class AdviceModeImportSelector<A extends Annotation> extends Object implements ImportSelector; // Convenient base class for ImportSelector implementations that select imports based on an AdviceMode value from an annotation (such as the @Enable* annotations).\npublic class AnnotatedBeanDefinitionReader extends Object; // Convenient adapter for programmatic registration of bean classes.\npublic class AnnotationBeanNameGenerator extends Object implements org.springframework.beans.factory.support.BeanNameGenerator; // BeanNameGenerator implementation for bean classes annotated with the @Component annotation or with another annotation that is itself annotated with @Component as a meta-annotation.\npublic class AnnotationConfigApplicationContext extends GenericApplicationContext implements AnnotationConfigRegistry; // Standalone application context, accepting component classes as input — in particular @Configuration-annotated classes, but also plain @Component types and JSR-330 compliant classes using jakarta.inject annotations.\npublic class AnnotationConfigBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Parser for the <context:annotation-config/> element.\npublic interface AnnotationConfigRegistry; // Common interface for annotation config application contexts, defining AnnotationConfigRegistry.register(java.lang.Class<?>...) and AnnotationConfigRegistry.scan(java.lang.String...) methods.\npublic abstract class AnnotationConfigUtils extends Object; // Utility class that allows for convenient registration of common BeanPostProcessor and BeanFactoryPostProcessor definitions for annotation-based configuration.\npublic class AnnotationScopeMetadataResolver extends Object implements ScopeMetadataResolver; // A ScopeMetadataResolver implementation that by default checks for the presence of Spring's @Scope annotation on the bean class.\npublic class AutoProxyRegistrar extends Object implements ImportBeanDefinitionRegistrar; // Registers an auto proxy creator against the current BeanDefinitionRegistry as appropriate based on an @Enable* annotation having mode and proxyTargetClass attributes set to the correct values.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Bean; // Indicates that a method produces a bean to be managed by the Spring container.\n", "des": "Annotation support for the Application Context, including JSR-250 \"common\" annotations, component-scanning, and Java-based metadata for creating Spring-managed objects."}
{"index": 869, "repo": "calcite-core-1.34.0", "code": "package sql2rel;\n\nInterface AuxiliaryConverter; // Converts an expression for a group window function (e.g.\nInterface InitializerContext; // Provides context for InitializerExpressionFactory methods.\nInterface InitializerExpressionFactory; // InitializerExpressionFactory supplies default values for INSERT, UPDATE, and NEW.\nInterface RelDecorrelator.AdjustProjectForCountAggregateRule.AdjustProjectForCountAggregateRuleConfig; // Rule configuration.\nInterface RelDecorrelator.Config; // Base configuration for rules that are non-static in a RelDecorrelator.\nInterface RelDecorrelator.RemoveCorrelationForScalarAggregateRule.RemoveCorrelationForScalarAggregateRuleConfig; // Rule configuration.\nInterface RelDecorrelator.RemoveCorrelationForScalarProjectRule.RemoveCorrelationForScalarProjectRuleConfig; // Rule configuration.\nInterface RelDecorrelator.RemoveSingleAggregateRule.RemoveSingleAggregateRuleConfig; // Rule configuration.\nInterface RelStructuredTypeFlattener.SelfFlatteningRel; // Mix-in interface for relational expressions that know how to flatten themselves.\nInterface SqlNodeToRexConverter; // Converts expressions from SqlNode to RexNode.\nInterface SqlRexContext; // Contains the context necessary for a SqlRexConvertlet to convert a SqlNode expression into a RexNode.\nInterface SqlRexConvertlet; // Thunk which converts a SqlNode expression into a RexNode expression.\nInterface SqlRexConvertletTable; // Collection of SqlRexConvertlets.\nInterface SqlToRelConverter.Config; // Interface to define the configuration for a SqlToRelConverter.\nInterface SubQueryConverter; // SubQueryConverter provides the interface for classes that convert sub-queries into equivalent expressions.\nClass AuxiliaryConverter.Impl; // Simple implementation of AuxiliaryConverter.\nClass CorrelateProjectExtractor; // A visitor for relational expressions that extracts a Project, with a \"simple\" computation over the correlated variables, from the right side of a correlation (Correlate) and places it on the left side.\nClass CorrelationReferenceFinder; // Shuttle that finds references to a given CorrelationId within a tree of RelNodes.\nClass DeduplicateCorrelateVariables; // Rewrites relations to ensure the same correlation is referenced by the same correlation variable.\nClass NullInitializerExpressionFactory; // An implementation of InitializerExpressionFactory that always supplies NULL.\n", "des": "Translates a SQL parse tree to relational expression."}
{"index": 158, "repo": "ignite-core-2.15.0", "code": "package dr;\n\nClass IgniteDrDataStreamerCacheUpdater; // Data center replication cache receiver for data streamer.\nEnum GridDrType; // Data center replication type.\n", "des": "Data center replication processor."}
{"index": 2148, "repo": "wicket-core-10.0.0-M1", "code": "package validation;\n\npublic abstract class AbstractFormValidator extends Behavior implements IFormValidator; // Base class for IFormValidators.\npublic class EqualInputValidator extends AbstractFormValidator; // Validates that the input of two form components is identical.\npublic class EqualPasswordInputValidator extends EqualInputValidator; // Validates that the input of two form components is identical.\npublic class FormComponentFeedbackBorder extends Border implements IFeedback; // A border that can be placed around a form component to indicate when the bordered child/children has a validation error.\npublic class FormComponentFeedbackIndicator extends Panel implements IFeedback; // A panel that hides or shows itself depending on whether there are feedback messages for a given message filter.\npublic class FormValidatorAdapter extends Behavior implements IFormValidator; // Adapts IFormValidator to Behavior\npublic interface IFormValidator extends org.apache.wicket.util.io.IClusterable; // Interface that represents validators that check multiple components.\n", "des": "Support for form validation."}
{"index": 2889, "repo": "spring-integration-core-6.1.2", "code": "package metrics;\n\npublic interface CounterFacade extends MeterFacade;\npublic interface GaugeFacade extends MeterFacade;\npublic interface MeterFacade; // Facade for Meters.\npublic interface MetricsCaptor; // A metrics facade that delegates to a concrete implementation.\npublic static interface MetricsCaptor.CounterBuilder; // A builder for a counter.\npublic static interface MetricsCaptor.GaugeBuilder; // A builder for a gauge.\npublic static interface MetricsCaptor.TimerBuilder; // A builder for a timer.\npublic interface SampleFacade;\npublic interface TimerFacade extends MeterFacade;\n", "des": "Provides interfaces related to 5.0 metrics."}
{"index": 2334, "repo": "spring-boot-3.1.1", "code": "package jks;\n\npublic class JksSslStoreBundle extends Object implements SslStoreBundle; // SslStoreBundle backed by a Java keystore.\npublic record JksSslStoreDetails(String type, String provider, String location, String password) extends Record; // Details for an individual trust or key store in a JksSslStoreBundle.\n", "des": "SSL trust material provider for Java KeyStores."}
{"index": 2362, "repo": "spring-boot-3.1.1", "code": "package support;\n\npublic class ErrorPageFilter extends Object implements jakarta.servlet.Filter, ErrorPageRegistry, org.springframework.core.Ordered; // A Servlet Filter that provides an ErrorPageRegistry for non-embedded applications (i.e.\npublic class ServletContextApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableWebApplicationContext>, org.springframework.core.Ordered; // ApplicationContextInitializer for setting the servlet context.\npublic abstract class SpringBootServletInitializer extends Object implements org.springframework.web.WebApplicationInitializer; // An opinionated WebApplicationInitializer to run a SpringApplication from a traditional WAR deployment.\n", "des": "Support classes for Servlet-based web servers."}
{"index": 3688, "repo": "solr-core-9.3.0", "code": "package schema;\n\nInterface DateValueFieldType; // Marker interface for Date-valued field types.\nInterface DoubleValueFieldType; // Marker interface for double-valued field types.\nInterface ExchangeRateProvider; // Interface for providing pluggable exchange rate providers to @CurrencyField\nInterface FloatValueFieldType; // Marker interface for float-valued field types.\nInterface HasImplicitIndexAnalyzer; // Marker interface for field types that have an implicit (non-user-configurable) index-time schema.\nInterface IntValueFieldType; // Marker interface for int-valued field types.\nInterface LongValueFieldType; // Marker interface for long-valued field types.\nInterface NumericValueFieldType; // Marker interface for numeric-valued field types.\nInterface PreAnalyzedField.PreAnalyzedParser; // Parse the input and return the stored part and the tokens with attributes.\nInterface SchemaAware; // An interface that can be extended to provide a callback mechanism for informing an IndexSchema instance of changes to it, dynamically performed at runtime.\nInterface SpatialQueryable; // Indicate that the implementing class is capable of generating a Query against spatial resources.\nClass AbstractEnumField; // Abstract Field type for support of string values with custom sort order.\nClass AbstractEnumField.EnumMapping; // Models all the info contained in an enums config XML file\nClass AbstractSpatialFieldType<T extends org.apache.lucene.spatial.SpatialStrategy>; // Abstract base class for Solr FieldTypes based on a Lucene 4 SpatialStrategy.\nClass AbstractSpatialPrefixTreeFieldType<T extends org.apache.lucene.spatial.prefix.PrefixTreeStrategy>;\nClass AbstractSubTypeFieldType; // An abstract base class for FieldTypes that delegate work to another FieldType.\nClass BBoxField;\nClass BinaryField;\nClass BoolField;\nClass ClassicIndexSchemaFactory;\nClass CollationField; // Field for collated sort keys.\nClass CoordinateFieldType; // A CoordinateFieldType is the base class for FieldTypes that have semantics related to items in a coordinate system.\nClass CopyField; // CopyField contains all the information of a valid copy fields in an index.\nClass CurrencyField;\nClass CurrencyFieldType; // Field type for support of monetary values.\nClass CurrencyValue; // Represents a Currency field value, which includes a long amount and ISO currency code.\n", "des": "IndexSchema and FieldType implementations for powering schema.xml"}
{"index": 2387, "repo": "spring-batch-core-5.0.2", "code": "package support;\n\npublic abstract class AbstractJobExplorerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobExplorer>, org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobExplorer.\npublic class JobExplorerFactoryBean extends AbstractJobExplorerFactoryBean implements org.springframework.beans.factory.InitializingBean; // A FactoryBean that automates the creation of a SimpleJobExplorer by using JDBC DAO implementations.\npublic class SimpleJobExplorer extends Object implements JobExplorer; // Implementation of JobExplorer that uses the injected DAOs.\n", "des": "Specific implementations of explorer concerns."}
{"index": 1158, "repo": "commons-math3-3.6.1", "code": "package fitting;\n\npackage fitting.leastsquares; // This package provides algorithms that minimize the residuals between observations and model values.\nClass AbstractCurveFitter; // Base class that contains common code for fitting parametric univariate real functions y = f(pi;x), where x is the independent variable and the pi are the parameters.\nClass AbstractCurveFitter.TheoreticalValuesFunction; // Vector function for computing function theoretical values.\nClass CurveFitter<T extends ParametricUnivariateFunction>; // As of 3.3.\nClass GaussianCurveFitter; // Fits points to a Gaussian function.\nClass GaussianCurveFitter.ParameterGuesser; // Guesses the parameters norm, mean, and sigma of a Gaussian.Parametric based on the specified observed points.\nClass GaussianFitter; // As of 3.3.\nClass GaussianFitter.ParameterGuesser; // Guesses the parameters norm, mean, and sigma of a Gaussian.Parametric based on the specified observed points.\nClass HarmonicCurveFitter; // Fits points to a harmonic oscillator function.\nClass HarmonicCurveFitter.ParameterGuesser; // This class guesses harmonic coefficients from a sample.\nClass HarmonicFitter; // As of 3.3.\nClass HarmonicFitter.ParameterGuesser; // This class guesses harmonic coefficients from a sample.\nClass PolynomialCurveFitter; // Fits points to a polynomial function.\nClass PolynomialFitter; // As of 3.3.\nClass SimpleCurveFitter; // Fits points to a user-defined function.\nClass WeightedObservedPoint; // This class is a simple container for weighted observed point in curve fitting.\nClass WeightedObservedPoints; // Simple container for weighted observed points used in curve fitting algorithms.\n", "des": "Classes to perform curve fitting."}
{"index": 1087, "repo": "graal-sdk-1.0.0-rc7", "code": "package management;\n\nClass ExecutionEvent; // An execution event object passed to an execution listener consumer.\nClass ExecutionListener; // Execution listeners allow to instrument the execution of guest languages.\n", "des": "The management package provides tools that monitor and instrument the behavior of guest language programs."}
{"index": 662, "repo": "commons-lang3-3.12.0", "code": "package lang3;\n\npackage lang3.arch; // Provides classes to work with the values of the os.arch system property.\npackage lang3.builder; // Assists in creating consistent equals(Object), toString(), hashCode(), and compareTo(Object) methods.\npackage lang3.compare; // Provides classes to work with the Comparable and Comparator interfaces.\npackage lang3.concurrent; // Provides support classes for multi-threaded programming.\npackage lang3.event; // Provides some useful event-based utilities.\npackage lang3.exception; // Provides functionality for Exceptions.\npackage lang3.function; // Provides functional interfaces to complement those in java.lang.function and utilities for working with Java 8 lambdas.\npackage lang3.math; // Extends java.math for business mathematical classes.\npackage lang3.mutable; // Provides typed mutable wrappers to primitive values and Object.\npackage lang3.reflect; // Accumulates common high-level uses of the java.lang.reflect APIs.\npackage lang3.stream; // Provides utility classes to complement those in java.util.stream.\npackage lang3.text; // Provides classes for handling and manipulating text, partly as an extension to java.text.\npackage lang3.time; // Provides classes and methods to work with dates and durations.\npackage lang3.tuple; // Tuple classes, starting with a Pair class in version 3.0.\nInterface Functions.FailableBiConsumer<O1,O2,T extends Throwable>; // Use FailableBiConsumer.\nInterface Functions.FailableBiFunction<O1,O2,R,T extends Throwable>; // Use FailableBiFunction.\nInterface Functions.FailableBiPredicate<O1,O2,T extends Throwable>; // Use FailableBiPredicate.\nInterface Functions.FailableCallable<R,T extends Throwable>; // Use FailableCallable.\nInterface Functions.FailableConsumer<O,T extends Throwable>; // Use FailableConsumer.\nInterface Functions.FailableFunction<I,R,T extends Throwable>; // Use FailableFunction.\nInterface Functions.FailablePredicate<I,T extends Throwable>; // Use FailablePredicate.\nInterface Functions.FailableRunnable<T extends Throwable>; // Use FailableRunnable.\n", "des": "Provides highly reusable static utility methods, chiefly concerned with adding value to the java.lang classes."}
{"index": 2909, "repo": "spring-xml-4.0.5", "code": "package xml;\n\npackage xml.dom; // Provides classes that help with DOM: the Document Object Model.\npackage xml.namespace; // Provides classes that help with XML Namespace processing.\npackage xml.sax; // Provides classes that help with SAX: the Simple API for XML.\npackage xml.transform; // Provides classes that help with XML transformations.\npackage xml.validation; // Provides classes for XML validation in JAXP 1.0 and JAXP 1.3.\npackage xml.xpath; // Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen.\npackage xml.xsd; // Provides an abstraction over XSD XML schemas.\npublic class DocumentBuilderFactoryUtils extends Object;\npublic abstract class JaxpVersion extends Object; // Helper class used to find the current version of JAXP.\npublic abstract class XmlException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of XML exception.\npublic class XMLInputFactoryUtils extends Object;\n", "des": "Provides classes for XML handling: version detection and a base XML exception class."}
{"index": 3465, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface Getter; // The contract for getting value for a persistent property from its container/owner\nInterface PropertyAccess; // Describes access to a particular persistent property in terms of getting and setting values.\nInterface PropertyAccessStrategy; // Describes a strategy for persistent property access (field, JavaBean-style property, etc).\nInterface PropertyAccessStrategyResolver; // Contract for resolving the PropertyAccessStrategy to use.\nInterface Setter; // The contract for setting a persistent property value into its container/owner\nClass EnhancedGetterMethodImpl;\nClass EnhancedSetterImpl; // A specialized Setter implementation for handling setting values into a bytecode-enhanced Class.\nClass GetterFieldImpl; // Field-based implementation of Getter\nClass GetterMethodImpl;\nClass SetterFieldImpl; // Field-based implementation of Setter\nClass SetterMethodImpl;\nEnum BuiltInPropertyAccessStrategies; // Describes the built-in externally-nameable PropertyAccessStrategy implementations.\nClass PropertyAccessBuildingException; // Indicates a problem while building a PropertyAccess\nClass PropertyAccessException; // Indicates a problem reading or writing value from/to a persistent property.\nClass PropertyAccessSerializationException;\n", "des": "Defines strategies for accessing the persistent properties of an entity or composite."}
{"index": 2583, "repo": "camel-api-4.0.0-RC1", "code": "package service;\n\npublic abstract class BaseService extends Object; // A useful base class which ensures that a service is only initialized once and provides some helper methods for enquiring of its status.\npublic final class ServiceHelper extends Object; // A collection of helper methods for working with Service objects.\npublic abstract class ServiceSupport extends BaseService implements StatefulService; // A useful base class which ensures that a service is only initialized once and provides some helper methods for enquiring of its status.\n", "des": "Base service classes"}
{"index": 1693, "repo": "spring-data-couchbase-5.1.2", "code": "package event;\n\npublic class AbstractCouchbaseEventListener<E> extends Object implements ApplicationListener<CouchbaseMappingEvent<?>>; // Base class to implement domain class specific ApplicationListeners.\n@FunctionalInterface public interface AfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a CouchbaseDocument when reading results.\npublic class AfterDeleteEvent<E> extends CouchbaseMappingEvent<E>;\npublic class AfterSaveEvent<E> extends CouchbaseMappingEvent<E>;\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, AfterConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\npublic class AuditingEventListener extends Object implements ApplicationListener<CouchbaseMappingEvent<Object>>; // Event listener to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class BeforeConvertEvent<E> extends CouchbaseMappingEvent<E>;\npublic class BeforeDeleteEvent<E> extends CouchbaseMappingEvent<E>;\npublic class BeforeSaveEvent<E> extends CouchbaseMappingEvent<E>;\npublic class CouchbaseMappingEvent<T> extends ApplicationEvent; // A mapping event.\npublic class LoggingEventListener extends AbstractCouchbaseEventListener<Object>; // AApplicationListener for Couchbase mapping events logging the events.\n@FunctionalInterface public interface ReactiveAfterConvertCallback<T> extends EntityCallback<T>; // Callback being invoked after a domain object is materialized from a CouchbaseDocument when reading results.\npublic class ReactiveAuditingEntityCallback extends Object implements ReactiveBeforeConvertCallback<Object>, ReactiveAfterConvertCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface ReactiveBeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class ValidatingCouchbaseEventListener extends AbstractCouchbaseEventListener<Object>; // javax.validation dependant entities validator.\n", "des": "This package contains various events that are emitted during the lifecycle of a Spring Data entity."}
{"index": 1030, "repo": "hadoop-aws-3.3.6", "code": "package impl;\n\nClass AuditContextUpdater; // Class to track/update context information to set in threads.\nClass CommitContext; // Commit context.\nClass CommitOperations; // The implementation of the various actions a committer needs.\nClass CommitOperations.MaybeIOE; // A holder for a possible IOException; the call CommitOperations.MaybeIOE.maybeRethrow() will throw any exception passed into the constructor, and be a no-op if none was.\nClass CommitUtilsWithMR; // These are commit utility methods which import classes from hadoop-mapreduce, and so only work when that module is on the classpath.\n", "des": "Internal classes which make use of mapreduce code."}
{"index": 3276, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsCoreService; // Provides general core services.\nInterface I_CmsCoreServiceAsync; // Provides general core services.\nInterface I_CmsLogService; // Handles client side logging.\nInterface I_CmsLogServiceAsync; // Handles client side logging.\nInterface I_CmsUploadService; // Handles all RPC services related to the upload dialog.\nInterface I_CmsUploadServiceAsync; // Handles all RPC services related to the upload dialog.\nInterface I_CmsVfsService; // A service interface for retrieving information about the VFS tree.\nInterface I_CmsVfsServiceAsync; // An asynchronous service interface for retrieving information about the VFS tree.\n", "des": "Shared RPC interfaces."}
{"index": 358, "repo": "hive-exec-4.0.0-alpha-2", "code": "package lockmgr;\n\nInterface HiveLockManager; // Manager for locks in Hive.\nInterface HiveTxnManager; // An interface that allows Hive to manage transactions.\nClass DbLockManager; // An implementation of HiveLockManager for use with DbTxnManager.\nClass DbTxnManager; // An implementation of HiveTxnManager that stores the transactions in the metastore database.\nClass DbTxnManager.Heartbeater; // Heartbeater thread\nClass DbTxnManager.HeartbeaterThread;\nClass EmbeddedLockManager; // shared lock manager for dedicated hive server.\nClass HiveLock;\nClass HiveLockManagerCtx;\nClass HiveLockObj;\nClass HiveLockObject;\nClass HiveLockObject.HiveLockObjectData;\nClass TxnManagerFactory; // A factory to get an instance of HiveTxnManager.\nEnum HiveLockMode;\nClass LockException; // Exception from lock manager.\n", "des": "Hive Lock Manager interfaces and some custom implmentations"}
{"index": 1408, "repo": "spring-boot-actuator-3.1.1", "code": "package logging;\n\n@WebEndpoint(id=\"logfile\") public class LogFileWebEndpoint extends Object; // Web @Endpoint that provides access to an application's log file.\n@Endpoint(id=\"loggers\") @RegisterReflectionForBinding({GroupLoggerLevelsDescriptor.class,SingleLoggerLevelsDescriptor.class}) public class LoggersEndpoint extends Object; // @Endpoint to expose a collection of LoggerConfigurations.\npublic static class LoggersEndpoint.GroupLoggerLevelsDescriptor extends LoggersEndpoint.LoggerLevelsDescriptor; // Description of levels configured for a given group logger.\npublic static class LoggersEndpoint.LoggerLevelsDescriptor extends Object implements OperationResponseBody; // Description of levels configured for a given logger.\npublic static class LoggersEndpoint.LoggersDescriptor extends Object implements OperationResponseBody; // Description of loggers.\npublic static class LoggersEndpoint.SingleLoggerLevelsDescriptor extends LoggersEndpoint.LoggerLevelsDescriptor; // Description of levels configured for a given single logger.\n", "des": "Actuator support for logging."}
{"index": 501, "repo": "beam-sdks-java-core-2.49.0", "code": "package splittabledofn;\n\nInterface GrowableOffsetRangeTracker.RangeEndEstimator; // Provides the estimated end offset of the range.\nInterface HasDefaultTracker<RestrictionT extends HasDefaultTracker<RestrictionT,TrackerT>,TrackerT extends RestrictionTracker<RestrictionT,?>>; // Interface for restrictions for which a default implementation of DoFn.NewTracker is available, depending only on the restriction itself.\nInterface HasDefaultWatermarkEstimator<WatermarkEstimatorStateT,WatermarkEstimatorT extends WatermarkEstimator<WatermarkEstimatorStateT>>; // Interface for watermark estimator state for which a default implementation of DoFn.NewWatermarkEstimator is available, depending only on the watermark estimator state itself.\nInterface ManualWatermarkEstimator<WatermarkEstimatorStateT>; // A WatermarkEstimator which is controlled manually from within a DoFn.\nInterface RestrictionTracker.HasProgress; // All RestrictionTrackers SHOULD implement this interface to improve auto-scaling and splitting performance.\nInterface TimestampObservingWatermarkEstimator<WatermarkEstimatorStateT>; // A WatermarkEstimator that observes the timestamps of all records output from a DoFn.\nInterface WatermarkEstimator<WatermarkEstimatorStateT>; // A WatermarkEstimator which is used for estimating output watermarks of a splittable DoFn.\nClass ByteKeyRangeTracker; // A RestrictionTracker for claiming ByteKeys in a ByteKeyRange in a monotonically increasing fashion.\nClass GrowableOffsetRangeTracker; // An OffsetRangeTracker for tracking a growable offset range.\nClass OffsetRangeTracker; // A RestrictionTracker for claiming offsets in an OffsetRange in a monotonically increasing fashion.\nClass RestrictionTracker<RestrictionT,PositionT>; // Manages access to the restriction and keeps track of its claimed part for a splittable DoFn.\nClass RestrictionTracker.Progress; // A representation for the amount of known completed and remaining work.\nClass RestrictionTracker.TruncateResult<RestrictionT>; // A representation of the truncate result.\nClass SplitResult<RestrictionT>; // A representation of a split result.\nClass WatermarkEstimators; // A set of WatermarkEstimators that users can use to advance the output watermark for their associated splittable DoFns.\nClass WatermarkEstimators.Manual; // Concrete implementation of a ManualWatermarkEstimator.\n", "des": "Defines utilities related to splittable DoFn."}
{"index": 3639, "repo": "solr-core-9.3.0", "code": "package cloud;\n\npackage cloud.overseer; // Classes for updating cluster state in SolrCloud mode.\nInterface ClusterSingleton; // Intended for components that should be enabled only one instance per cluster.\nInterface DistributedCollectionLockFactory;\nInterface DistributedConfigSetLockFactory;\nInterface DistributedLock; // A lock that can be used across cluster nodes.\nInterface Overseer.Message;\nInterface OverseerMessageHandler; // Interface for processing messages received by an OverseerTaskProcessor\nInterface OverseerMessageHandler.Lock;\nInterface OverseerTaskProcessor.OverseerMessageHandlerSelector; // An interface to determine which OverseerMessageHandler handles a given message.\nInterface RecoveryStrategy.RecoveryListener;\nClass ActionThrottle;\nClass ActiveReplicaWatcher; // Watch for replicas to become Replica.State.ACTIVE.\nClass CloudDescriptor; // SolrCloud metadata attached to a CoreDescriptor.\nClass CloudUtil;\nClass ConfigSetApiLockFactory; // This class implements a higher level locking abstraction for the Config Set API using lower level read and write locks.\nClass ConfigSetCmds; // This class contains methods dealing with Config Sets and called for Config Set API execution, called from the OverseerConfigSetMessageHandler or from DistributedCollectionConfigSetCommandRunner.runConfigSetCommand(org.apache.solr.response.SolrQueryResponse, org.apache.solr.common.params.ConfigSetParams.ConfigSetAction, java.util.Map<java.lang.String, java.lang.Object>, long) depending on whether Collection and Config Set APIs are Overseer based or distributed.\nClass DistributedApiAsyncTracker; // Class holding the implementation required for tracking asynchronous Collection API (or other) tasks when the Collection API is distributed.\nClass DistributedClusterStateUpdater; // Gives access to distributed cluster state update methods and allows code to inquire whether distributed state update is enabled.\nClass DistributedClusterStateUpdater.StateChangeRecorder; // Class handling the distributed updates of collection's Zookeeper files state.json based on multiple updates applied to a single collection (as is sometimes done by *Cmd classes implementing the Collection API commands).\nClass DistributedMap; // A distributed map.\nClass DistributedMultiLock; // A lock as acquired for running a single API command (Collection or Config Set or anything else in the future).\nClass ElectionContext;\nClass LeaderElector; // Leader Election process.\n", "des": "Classes for dealing with ZooKeeper when operating in SolrCloud mode."}
{"index": 2162, "repo": "wicket-core-10.0.0-M1", "code": "package request;\n\npublic class WebClientInfo extends ClientInfo; // Default client info object for web applications.\n", "des": "This package contains http (web) protocol dependent implementations of request processing strategies."}
{"index": 901, "repo": "commons-jcs3-core-3.1", "code": "package mru;\n\nClass MRUMemoryCache<K,V>; // The most recently used items move to the front of the list and get spooled to disk if the cache hub is configured to use a disk cache.\n", "des": "A memory plugin implemented using a 'most recently used' removal policy."}
{"index": 3019, "repo": "spring-web-6.0.11", "code": "package web;\n\npackage web.accept; // This package contains classes used to determine the requested the media types in a request.\npackage web.bind; // Provides web-specific data binding functionality.\npackage web.client; // Core package of the client-side web support.\npackage web.context; // Contains a variant of the application context interface for web applications, and the ContextLoaderListener that bootstraps a root web application context.\npackage web.cors; // Support for CORS (Cross-Origin Resource Sharing), based on a common CorsProcessor strategy.\npackage web.filter; // Provides generic filter base classes allowing for bean-style configuration.\npackage web.jsf; // Support classes for integrating a JSF web layer with a Spring service layer which is hosted in a Spring root WebApplicationContext.\npackage web.method; // Common infrastructure for handler method processing, as used by Spring MVC's org.springframework.web.servlet.mvc.method package.\npackage web.multipart; // Multipart resolution framework for handling file uploads.\npackage web.server; // Core interfaces and classes for Spring's generic, reactive web support.\npackage web.util; // Miscellaneous web utility classes, such as HTML escaping and cookie handling.\npublic interface ErrorResponse; // Representation of a complete RFC 7807 error response including status, headers, and an RFC 7807 formatted ProblemDetail body.\npublic static interface ErrorResponse.Builder; // Builder for an ErrorResponse.\npublic class ErrorResponseException extends org.springframework.core.NestedRuntimeException implements ErrorResponse; // RuntimeException that implements ErrorResponse to expose an HTTP status, response headers, and a body formatted as an RFC 7807 ProblemDetail.\npublic abstract class HttpMediaTypeException extends ServletException implements ErrorResponse; // Abstract base for exceptions related to media types.\npublic class HttpMediaTypeNotAcceptableException extends HttpMediaTypeException; // Exception thrown when the request handler cannot generate a response that is acceptable by the client.\npublic class HttpMediaTypeNotSupportedException extends HttpMediaTypeException; // Exception thrown when a client POSTs, PUTs, or PATCHes content of a type not supported by request handler.\n@FunctionalInterface public interface HttpRequestHandler; // Plain handler interface for components that process HTTP requests, analogous to a Servlet.\npublic class HttpRequestMethodNotSupportedException extends ServletException implements ErrorResponse; // Exception thrown when a request handler does not support a specific request method.\n", "des": "Common, generic interfaces that define minimal boundary points between Spring's web infrastructure and other framework modules."}
{"index": 1462, "repo": "spring-data-redis-3.1.2", "code": "package configuration;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(RedisRepositoriesRegistrar.class) @QueryCreatorType(RedisQueryCreator.class) public @interface EnableRedisRepositories; // Annotation to activate Redis repositories.\npublic class RedisRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // Redis specific ImportBeanDefinitionRegistrar.\npublic class RedisRepositoryConfigurationExtension extends org.springframework.data.keyvalue.repository.config.KeyValueRepositoryConfigurationExtension; // RepositoryConfigurationExtension for Redis.\n", "des": "Redis repository specific configuration and bean registration."}
{"index": 3652, "repo": "solr-core-9.3.0", "code": "package filestore;\n\nInterface PackageStore; // The interface to be implemented by any package store provider * @lucene.experimental\nInterface PackageStore.FileDetails;\nClass DistribPackageStore;\nClass PackageStore.FileEntry;\nClass PackageStoreAPI;\nClass PackageStoreAPI.MetaData;\nEnum PackageStore.FileType;\n", "des": "Implementation of Package Store."}
{"index": 1540, "repo": "spring-context-6.0.11", "code": "package scheduling;\n\npackage scheduling.annotation; // Annotation support for asynchronous method execution.\npackage scheduling.concurrent; // Scheduling convenience classes for the java.util.concurrent and jakarta.enterprise.concurrent packages, allowing to set up a ThreadPoolExecutor or ScheduledThreadPoolExecutor as a bean in a Spring context.\npackage scheduling.config; // Support package for declarative scheduling configuration, with XML schema being the primary configuration format.\npackage scheduling.support; // Generic support classes for scheduling.\npublic interface SchedulingAwareRunnable extends Runnable; // Extension of the Runnable interface, adding special callbacks for long-running operations.\npublic class SchedulingException extends org.springframework.core.NestedRuntimeException; // General exception to be thrown on scheduling failures, such as the scheduler already having shut down.\npublic interface SchedulingTaskExecutor extends org.springframework.core.task.AsyncTaskExecutor; // A TaskExecutor extension exposing scheduling characteristics that are relevant to potential task submitters.\npublic interface TaskScheduler; // Task scheduler interface that abstracts the scheduling of Runnables based on different kinds of triggers.\npublic interface Trigger; // Common interface for trigger objects that determine the next execution time of a task that they get associated with.\npublic interface TriggerContext; // Context object encapsulating last execution times and last completion time of a given task.\n", "des": "General exceptions for Spring's scheduling support, independent of any specific scheduling system."}
{"index": 2458, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package datadog;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.datadog.DatadogMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"datadog\") @EnableConfigurationProperties(DatadogProperties.class) public class DatadogMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Datadog.\n@ConfigurationProperties(prefix=\"management.datadog.metrics.export\") public class DatadogProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Datadog metrics export.\n", "des": "Support for exporting actuator metrics to Datadog."}
{"index": 3281, "repo": "opencms-core-15.0", "code": "package jsp;\n\npackage jsp.decorator; // HTML postprocessor, used to tag single words or phrases in the HTML output.\npackage jsp.parse; // API classes for the <cms:parse> tag.\npackage jsp.util; // Utility classes to be used for JSP pages.\nInterface I_CmsJspJsonContext; // Interface implemented by JSON tags.\nInterface I_CmsJspTagParamParent; // Interface for tag handlers implementing valid parent tags for <c:param>.\nInterface I_CmsResourceContainer; // Provides access to a CmsResource object that was previously loaded by a parent tag.\nInterface I_CmsXmlContentContainer; // Provides access to a I_CmsXmlDocument document that was previously loaded by a parent tag.\nClass A_CmsJspJsonTag; // Abstract superclass that handles the common behavior of the jsonarray/jsonobject/jsonvalue tags.\nClass CmsContentInfoBean; // A container to store information about a collector's result.\nClass CmsContentLoadCollectorInfo; // Bean containing the data needed to call a collector.\nClass CmsJspActionElement; // Bean to be used in JSP scriptlet code that provides direct access to the functionality offered by the OpenCms taglib.\nClass CmsJspBean; // Superclass for OpenCms JSP beans that provides convient access to OpenCms core and VFS functionality.\nClass CmsJspImageScalerTagSupport; // Abstract parent for all JSP tags dealing with image scaling, defines some common image scaler properties and corresponding getters/setters that may be used by extending classes.\nClass CmsJspLoginBean; // Provides convenient wrappers useful to create user login pages.\nClass CmsJspLoginPersistingBean; // Login bean which sets a cookie that can be used by CmsPersistentLoginAuthorizationHandler to automatically log the user back in when his session has expired.\nClass CmsJspNavBuilder; // Bean to provide a convenient way to build navigation structures based on the CmsJspNavElement.\nClass CmsJspNavBuilder.NavContext; // Navigation builder context.\nClass CmsJspNavElement; // Bean to collect navigation information from a resource in the OpenCms VFS.\nClass CmsJspResourceWrapper; // Wrapper subclass of CmsResource with some convenience methods.\nClass CmsJspScopedVarBodyTagSuport; // Parent for body tags that require support for setting scoped variables to the JSP page context.\nClass CmsJspTagAddParams; // This tag is used to dynamically add request parameters which are available during the execution of its body.\n", "des": "The implementation of the OpenCms JSP tag library, with some additional utility classes to help in JSP scriplet code and navigation building."}
{"index": 2714, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class MongoItemReaderBuilder<T> extends Object; // A builder implementation for the MongoItemReader\npublic class MongoItemWriterBuilder<T> extends Object; // A builder implementation for the MongoItemWriter\n@Deprecated public class Neo4jItemReaderBuilder<T> extends Object;\n@Deprecated public class Neo4jItemWriterBuilder<T> extends Object;\npublic class RepositoryItemReaderBuilder<T> extends Object; // A builder implementation for the RepositoryItemReader.\npublic class RepositoryItemWriterBuilder<T> extends Object; // A builder implementation for the RepositoryItemWriter.\npublic static class RepositoryItemWriterBuilder.RepositoryMethodReference<T> extends Object; // Establishes a proxy that will capture a the Repository and the associated methodName that will be used by the writer.\n", "des": "Builders for Spring Data item readers and writers."}
{"index": 78, "repo": "ignite-core-2.15.0", "code": "package noop;\n\nClass NoopIndexingSpi; // Default implementation of IndexingSpi which does not index cache.\n", "des": "Contains default no-op indexing SPI implementation."}
{"index": 2093, "repo": "spring-webflux-6.0.11", "code": "package function;\n\npackage function.client; // Provides a reactive WebClient that builds on top of the org.springframework.http.client.reactive reactive HTTP adapter layer.\npackage function.server; // Provides the types that make up Spring's functional web framework for Reactive environments.\n@FunctionalInterface public interface BodyExtractor<T,M extends org.springframework.http.ReactiveHttpInputMessage>; // A function that can extract data from a ReactiveHttpInputMessage body.\npublic static interface BodyExtractor.Context; // Defines the context used during the extraction.\npublic abstract class BodyExtractors extends Object; // Static factory methods for BodyExtractor implementations.\n@FunctionalInterface public interface BodyInserter<T,M extends org.springframework.http.ReactiveHttpOutputMessage>; // A combination of functions that can populate a ReactiveHttpOutputMessage body.\npublic static interface BodyInserter.Context; // Defines the context used during the insertion.\npublic abstract class BodyInserters extends Object; // Static factory methods for BodyInserter implementations.\npublic static interface BodyInserters.FormInserter<T> extends BodyInserter<org.springframework.util.MultiValueMap<String,T>,org.springframework.http.client.reactive.ClientHttpRequest>; // Extension of BodyInserter that allows for adding form data or multipart form data.\npublic static interface BodyInserters.MultipartInserter extends BodyInserters.FormInserter<Object>; // Extension of BodyInserters.FormInserter that allows for adding asynchronous parts.\npublic class UnsupportedMediaTypeException extends org.springframework.core.NestedRuntimeException; // Exception thrown to indicate that a Content-Type is not supported.\n", "des": "Provides a foundation for both the reactive client and server subpackages."}
{"index": 48, "repo": "ignite-core-2.15.0", "code": "package rendezvous;\n\nClass ClusterNodeAttributeAffinityBackupFilter; // Attribute-based affinity backup filter that forces each partition's primary and backup nodes to different hardware which is not expected to fail simultaneously, e.g., in AWS, to different \"availability zones\".\nClass ClusterNodeAttributeColocatedBackupFilter; // This class can be used as a RendezvousAffinityFunction.affinityBackupFilter to create cache templates in Spring that force each partition's primary and backup to be co-located on nodes with the same attribute value.\nClass RendezvousAffinityFunction; // Affinity function for partitioned cache based on Highest Random Weight algorithm.\n", "des": "Contains HRW-based cache affinity for partitioned cache."}
{"index": 2773, "repo": "spring-jms-6.0.11", "code": "package listener;\n\npackage listener.adapter; // Message listener adapter mechanism that delegates to target listener methods, converting messages to appropriate message content types (such as String or byte array) that get passed into listener methods.\npackage listener.endpoint; // This package provides JCA-based endpoint management for JMS message listeners.\npublic abstract class AbstractJmsListeningContainer extends JmsDestinationAccessor implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.DisposableBean, org.springframework.context.SmartLifecycle; // Common base class for all containers which need to implement listening based on a JMS Connection (either shared or freshly obtained for each attempt).\npublic static class AbstractJmsListeningContainer.SharedConnectionNotInitializedException extends RuntimeException; // Exception that indicates that the initial setup of this container's shared JMS Connection failed.\npublic abstract class AbstractMessageListenerContainer extends AbstractJmsListeningContainer implements MessageListenerContainer; // Abstract base class for Spring message listener container implementations.\npublic abstract class AbstractPollingMessageListenerContainer extends AbstractMessageListenerContainer; // Base class for listener container implementations which are based on polling.\npublic class DefaultMessageListenerContainer extends AbstractPollingMessageListenerContainer; // Message listener container variant that uses plain JMS client APIs, specifically a loop of MessageConsumer.receive() calls that also allow for transactional reception of messages (registering them with XA transactions).\npublic interface MessageListenerContainer extends org.springframework.context.SmartLifecycle; // Internal abstraction used by the framework representing a message listener container.\n@FunctionalInterface public interface SessionAwareMessageListener<M extends Message>; // Variant of the standard JMS MessageListener interface, offering not only the received Message but also the underlying JMS Session object.\npublic class SimpleMessageListenerContainer extends AbstractMessageListenerContainer implements ExceptionListener; // Message listener container that uses the plain JMS client API's MessageConsumer.setMessageListener() method to create concurrent MessageConsumers for the specified listeners.\npublic interface SubscriptionNameProvider; // Interface to be implemented by message listener objects that suggest a specific name for a durable subscription that they might be registered with.\n", "des": "This package contains the base message listener container facility."}
{"index": 3229, "repo": "commons-configuration2-2.9.0", "code": "package web;\n\nClass AppletConfiguration; // A configuration wrapper to read applet parameters.\nClass ServletConfiguration; // A configuration wrapper around a ServletConfig.\nClass ServletContextConfiguration; // A configuration wrapper to read the initialization parameters of a servlet context.\nClass ServletFilterConfiguration; // A configuration wrapper around a FilterConfig.\nClass ServletRequestConfiguration; // A configuration wrapper to read the parameters of a servlet request.\n", "des": "This package contains some implementations of the Configuration interface that are useful in web environments."}
{"index": 47, "repo": "ignite-core-2.15.0", "code": "package affinity;\n\npackage affinity.rendezvous; // Contains HRW-based cache affinity for partitioned cache.\nInterface Affinity<K>; // Provides affinity information to detect which node is primary and which nodes are backups for a partitioned or replicated cache.\nInterface AffinityFunction; // Cache key affinity which maps keys to nodes.\nInterface AffinityFunctionContext; // Affinity function context.\nInterface AffinityKeyMapper; // Use AffinityKeyMapped or CacheKeyConfiguration.setAffinityKeyFieldName(String) instead.\nClass AffinityKey<K>; // Optional wrapper for cache keys to provide support for custom affinity mapping.\nClass AffinityUuid; // Guaranteed unique affinity-based key.\nAnnotation Type AffinityCentralizedFunction; // Annotation marker which identifies affinity function that must be calculated on one centralized node instead of independently on each node.\nAnnotation Type AffinityKeyMapped; // Optional annotation to specify custom key-to-node affinity.\n", "des": "Contains cache node affinity implementations."}
{"index": 2332, "repo": "spring-boot-3.1.1", "code": "package dependency;\n\npublic abstract class AbstractBeansOfTypeDatabaseInitializerDetector extends Object implements DatabaseInitializerDetector; // Base class for DatabaseInitializerDetectors that detect database initializer beans by type.\npublic abstract class AbstractBeansOfTypeDependsOnDatabaseInitializationDetector extends Object implements DependsOnDatabaseInitializationDetector; // Base class for DependsOnDatabaseInitializationDetectors that detect by type beans that depend upon database initialization.\npublic class DatabaseInitializationDependencyConfigurer extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // Configures beans that depend upon SQL database initialization with dependencies upon beans that perform database initialization.\npublic interface DatabaseInitializerDetector extends org.springframework.core.Ordered; // Detects beans that initialize an SQL database.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented public @interface DependsOnDatabaseInitialization; // Indicate that a bean's creation and initialization depends upon database initialization having completed.\npublic interface DependsOnDatabaseInitializationDetector; // Detects beans that depend on database initialization.\n", "des": "Infrastructure for establishing database initialization bean dependencies."}
{"index": 1505, "repo": "spring-context-6.0.11", "code": "package interceptor;\n\npublic abstract class AbstractCacheInvoker extends Object; // A base component for invoking Cache operations and using a configurable CacheErrorHandler when an exception occurs.\npublic abstract class AbstractCacheResolver extends Object implements CacheResolver, org.springframework.beans.factory.InitializingBean; // A base CacheResolver implementation that requires the concrete implementation to provide the collection of cache name(s) based on the invocation context.\npublic abstract class AbstractFallbackCacheOperationSource extends Object implements CacheOperationSource; // Abstract implementation of CacheOperation that caches attributes for methods and implements a fallback policy: 1.\npublic interface BasicOperation; // The base interface that all cache operations must implement.\npublic class BeanFactoryCacheOperationSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor; // Advisor driven by a CacheOperationSource, used to include a cache advice bean for methods that are cacheable.\npublic class CacheableOperation extends CacheOperation; // Class describing a cache 'cacheable' operation.\npublic static class CacheableOperation.Builder extends CacheOperation.Builder; // A builder that can be used to create a CacheableOperation.\npublic abstract class CacheAspectSupport extends AbstractCacheInvoker implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton; // Base class for caching aspects, such as the CacheInterceptor or an AspectJ aspect.\nprotected static class CacheAspectSupport.CacheOperationMetadata extends Object; // Metadata of a cache operation that does not depend on a particular invocation which makes it a good candidate for caching.\npublic interface CacheErrorHandler; // A strategy for handling cache-related errors.\npublic class CacheEvictOperation extends CacheOperation; // Class describing a cache 'evict' operation.\npublic static class CacheEvictOperation.Builder extends CacheOperation.Builder; // A builder that can be used to create a CacheEvictOperation.\npublic class CacheInterceptor extends CacheAspectSupport implements org.aopalliance.intercept.MethodInterceptor, Serializable; // AOP Alliance MethodInterceptor for declarative cache management using the common Spring caching infrastructure (Cache).\npublic abstract class CacheOperation extends Object implements BasicOperation; // Base class for cache operations.\n", "des": "AOP-based solution for declarative caching demarcation."}
{"index": 596, "repo": "org.apache.karaf.main-2.4.4", "code": "package runnable;\n\nInterface ApplicationLauncher; // An ApplicationLauncher is used to launch ParameterizedRunnable objects using the main thread.\nInterface ApplicationRunnable; // A parameterized runnable that can be stopped.\nInterface ParameterizedRunnable; // Like a Runnable, an object which captures a block of code which can be passed around and executed.\nInterface StartupMonitor; // Service interface used to monitor the startup process.\n", "des": "Provides API for monitoring and running code on the main thread."}
{"index": 2835, "repo": "spring-data-r2dbc-3.1.2", "code": "package repository;\n\npackage repository.config; // Support infrastructure for the configuration of R2DBC-specific repositories.\npackage repository.query; // Query support for R2DBC repositories.\npackage repository.support; // Support infrastructure for query derivation of R2DBC-specific repositories.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Modifying; // Indicates a query method should be considered a modifying query that returns nothing or the number of rows affected by the query.\n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface Query; // Annotation to provide SQL statements that will get used for executing the method.\n@NoRepositoryBean public interface R2dbcRepository<T,ID> extends ReactiveCrudRepository<T,ID>, ReactiveSortingRepository<T,ID>, ReactiveQueryByExampleExecutor<T>; // R2DBC specific Repository interface with reactive support.\n", "des": "R2DBC-specific repository implementation."}
{"index": 3160, "repo": "tika-core-2.8.0", "code": "package mime;\n\nInterface MimeTypesReaderMetKeys; // Met Keys used by the MimeTypesReader.\nClass HexCoDec; // A set of Hex encoding and decoding utility methods.\nClass MediaType; // Internet media type.\nClass MediaTypeRegistry; // Registry of known Internet media types.\nClass MimeType; // Internet media type.\nClass MimeTypes; // This class is a MimeType repository.\nClass MimeTypesFactory; // Creates instances of MimeTypes.\nClass MimeTypesReader; // A reader for XML files compliant with the freedesktop MIME-info DTD.\nClass ProbabilisticMimeDetectionSelector; // Selector for combining different mime detection results based on probability\nClass ProbabilisticMimeDetectionSelector.Builder; // build class for probability parameters setting\nClass MimeTypeException; // A class to encapsulate MimeType related exceptions.\n", "des": "Media type information."}
{"index": 338, "repo": "kafka-clients-3.5.0", "code": "package quota;\n\nInterface ClientQuotaCallback; // Quota callback interface for brokers that enables customization of client quota computation.\nInterface ClientQuotaEntity; // The metadata for an entity for which quota is configured.\nInterface ClientQuotaEntity.ConfigEntity; // Interface representing a quota configuration entity.\nEnum ClientQuotaEntity.ConfigEntityType; // Entity type of a ClientQuotaEntity.ConfigEntity\nEnum ClientQuotaType; // Types of quotas that may be configured on brokers for client requests.\n", "des": "Provides pluggable interface for enforcing client quotas from a Kafka server."}
{"index": 3158, "repo": "tika-core-2.8.0", "code": "package io;\n\nInterface InputStreamFactory; // A factory which returns a fresh InputStream for the same resource each time.\nClass BoundedInputStream; // Very slight modification of Commons' BoundedInputStream so that we can figure out if this hit the bound or not.\nClass EndianUtils; // General Endian Related Utilties.\nClass FilenameUtils;\nClass IOUtils;\nClass LookaheadInputStream; // Stream wrapper that make it easy to read up to n bytes ahead from a stream that supports the mark feature.\nClass MappedBufferCleaner; // Copied/pasted from the Apache Lucene/Solr project.\nClass TailStream; // A specialized input stream implementation which records the last portion read from an underlying stream.\nClass TemporaryResources; // Utility class for tracking and ultimately closing or otherwise disposing a collection of temporary resources.\nClass TikaInputStream; // Input stream with extended capabilities.\nClass EndianUtils.BufferUnderrunException;\n", "des": "IO utilities."}
{"index": 1821, "repo": "pulsar-client-original-3.0.0", "code": "package auth;\n\npublic class AuthenticationBasic extends Object implements Authentication, EncodedAuthenticationParameterSupport;\npublic class AuthenticationDataBasic extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataKeyStoreTls extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataNull extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataTls extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDataToken extends Object implements AuthenticationDataProvider;\npublic class AuthenticationDisabled extends Object implements Authentication, EncodedAuthenticationParameterSupport;\npublic class AuthenticationKeyStoreTls extends Object implements Authentication, EncodedAuthenticationParameterSupport; // This plugin requires these parameters: keyStoreType, keyStorePath, and keyStorePassword.\npublic class AuthenticationTls extends Object implements Authentication, EncodedAuthenticationParameterSupport; // This plugin requires these parameters tlsCertFile: A file path for a client certificate.\npublic class AuthenticationToken extends Object implements Authentication, EncodedAuthenticationParameterSupport; // Token based authentication provider.\n", "des": "Pulsar Client authentication."}
{"index": 847, "repo": "calcite-core-1.34.0", "code": "package mutable;\n\nClass Holder; // Implementation of MutableRel whose only purpose is to have a child.\nClass MutableAggregate; // Mutable equivalent of Aggregate.\nClass MutableCalc; // Mutable equivalent of Calc.\nClass MutableCollect; // Mutable equivalent of Collect.\nClass MutableCorrelate; // Mutable equivalent of Correlate.\nClass MutableExchange; // Mutable equivalent of Exchange.\nClass MutableFilter; // Mutable equivalent of Filter.\nClass MutableIntersect; // Mutable equivalent of Intersect.\nClass MutableJoin; // Mutable equivalent of Join.\nClass MutableMatch; // Mutable equivalent of Match.\nClass MutableMinus; // Mutable equivalent of Minus.\nClass MutableProject; // Mutable equivalent of Project.\nClass MutableRel; // Mutable equivalent of RelNode.\nClass MutableRels; // Utilities for dealing with MutableRels.\nClass MutableRelVisitor; // Visitor over MutableRel.\nClass MutableSample; // Mutable equivalent of Sample.\nClass MutableScan; // Mutable equivalent of TableScan.\nClass MutableSetOp; // Mutable equivalent of SetOp.\nClass MutableSort; // Mutable equivalent of Sort.\nClass MutableTableFunctionScan; // Mutable equivalent of TableFunctionScan.\nClass MutableTableModify; // Mutable equivalent of TableModify.\nClass MutableUncollect; // Mutable equivalent of Uncollect.\nClass MutableUnion; // Mutable equivalent of Union.\nClass MutableValues; // Mutable equivalent of Values.\nClass MutableWindow; // Mutable equivalent of Window.\n", "des": "Defines mutable relational expressions."}
{"index": 553, "repo": "hadoop-common-3.3.4", "code": "package audit;\n\nClass AuditStatisticNames; // Statistic Names for Auditing.\nClass CommonAuditContext; // The common audit context is a map of common context information which can be used with any audit span.\n", "des": "Public classes for adding information to any auditing information picked up by filesystem clients."}
{"index": 2591, "repo": "spring-rabbit-3.0.6", "code": "package listener;\n\npackage listener.adapter; // Provides classes for adapting listeners.\npackage listener.api; // Provides Additional APIs for listeners.\npackage listener.exception; // Provides classes for listener exceptions.\npackage listener.support; // Provides support classes for listeners.\npublic abstract class AbstractMessageListenerContainer extends ObservableListenerContainer implements org.springframework.context.ApplicationEventPublisherAware;\n@FunctionalInterface public static interface AbstractMessageListenerContainer.JavaLangErrorHandler; // A handler for Error on the container thread(s).\npublic static class AbstractMessageListenerContainer.SharedConnectionNotInitializedException extends RuntimeException; // Exception that indicates that the initial setup of this container's shared Rabbit Connection failed.\nprotected static final class AbstractMessageListenerContainer.WrappedTransactionException extends RuntimeException; // A runtime exception to wrap a Throwable.\npublic abstract class AbstractRabbitListenerEndpoint extends Object implements RabbitListenerEndpoint, org.springframework.beans.factory.BeanFactoryAware; // Base model for a Rabbit listener endpoint.\npublic class AsyncConsumerRestartedEvent extends org.springframework.amqp.event.AmqpEvent; // An event that is published whenever a consumer is restarted.\npublic class AsyncConsumerStartedEvent extends org.springframework.amqp.event.AmqpEvent; // An event that is published whenever a new consumer is started.\npublic class AsyncConsumerStoppedEvent extends org.springframework.amqp.event.AmqpEvent; // An event that is published whenever a consumer is stopped (and not restarted).\npublic class BlockingQueueConsumer extends Object; // Specialized consumer encapsulating knowledge of the broker connections and having its own lifecycle (start and stop).\npublic class ConditionalRejectingErrorHandler extends Object implements org.springframework.util.ErrorHandler; // ErrorHandler that conditionally wraps the Exception in an AmqpRejectAndDontRequeueException if the configured rejection strategy determines that the message is fatal and should not be requeued.\npublic static class ConditionalRejectingErrorHandler.DefaultExceptionStrategy extends Object implements FatalExceptionStrategy; // Default implementation of FatalExceptionStrategy.\npublic class ConsumeOkEvent extends org.springframework.amqp.event.AmqpEvent; // An AmqpEvent emitted by the listener container when consumer is subscribed to the queue.\npublic class DirectMessageListenerContainer extends AbstractMessageListenerContainer; // The SimpleMessageListenerContainer is not so simple.\n", "des": "Provides classes for message listener containers."}
{"index": 2424, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package couchbase;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.class,CouchbaseReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(com.couchbase.client.java.Cluster.class) @ConditionalOnBean(com.couchbase.client.java.Cluster.class) @ConditionalOnEnabledHealthIndicator(\"couchbase\") public class CouchbaseHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.couchbase.CouchbaseHealthIndicator,com.couchbase.client.java.Cluster>; // Auto-configuration for CouchbaseHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration.class) @ConditionalOnClass({com.couchbase.client.java.Cluster.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(com.couchbase.client.java.Cluster.class) @ConditionalOnEnabledHealthIndicator(\"couchbase\") public class CouchbaseReactiveHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.couchbase.CouchbaseReactiveHealthIndicator,com.couchbase.client.java.Cluster>; // Auto-configuration for CouchbaseReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator Couchbase concerns."}
{"index": 2761, "repo": "spring-beans-6.0.11", "code": "package serviceloader;\n\npublic abstract class AbstractServiceLoaderBasedFactoryBean extends AbstractFactoryBean<Object> implements BeanClassLoaderAware; // Abstract base class for FactoryBeans operating on the JDK 1.6 ServiceLoader facility.\npublic class ServiceFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware; // FactoryBean that exposes the 'primary' service for the configured service class, obtained through the JDK 1.6 ServiceLoader facility.\npublic class ServiceListFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware; // FactoryBean that exposes all services for the configured service class, represented as a List of service objects, obtained through the JDK 1.6 ServiceLoader facility.\npublic class ServiceLoaderFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware; // FactoryBean that exposes the JDK 1.6 ServiceLoader for the configured service class.\n", "des": "Support package for the Java ServiceLoader facility."}
{"index": 1254, "repo": "spring-core-6.0.11", "code": "package annotation;\n\n@Target({ANNOTATION_TYPE,TYPE,CONSTRUCTOR,FIELD,METHOD}) @Retention(RUNTIME) @Documented public @interface Reflective; // Indicate that the annotated element requires reflection.\npublic interface ReflectiveProcessor; // Process an AnnotatedElement and register the necessary reflection hints for it.\npublic class ReflectiveRuntimeHintsRegistrar extends Object; // Process @Reflective annotated elements.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(RegisterReflectionForBindingProcessor.class) public @interface RegisterReflectionForBinding; // Indicates that the classes specified in the annotation attributes require some reflection hints for binding or reflection-based serialization purposes.\npublic class RegisterReflectionForBindingProcessor extends Object implements ReflectiveProcessor; // A ReflectiveProcessor implementation that registers reflection hints for data binding purpose (class, constructors, fields, properties, record components, including types transitively used on properties and record components).\npublic class SimpleReflectiveProcessor extends Object implements ReflectiveProcessor; // A simple ReflectiveProcessor implementation that registers only a reflection hint for the annotated type.\n", "des": "Annotation support for runtime hints."}
{"index": 1427, "repo": "spring-boot-actuator-3.1.1", "code": "package tomcat;\n\npublic class TomcatMetricsBinder extends Object implements org.springframework.context.ApplicationListener<org.springframework.boot.context.event.ApplicationStartedEvent>, org.springframework.beans.factory.DisposableBean; // Binds TomcatMetrics in response to the ApplicationStartedEvent.\n", "des": "Actuator support for Tomcat metrics."}
{"index": 1729, "repo": "spring-jdbc-6.0.11", "code": "package datasource;\n\npackage datasource.embedded; // Provides extensible support for creating embedded database instances.\npackage datasource.init; // Provides extensible support for initializing databases through scripts.\npackage datasource.lookup; // Provides a strategy for looking up JDBC DataSources by name.\npublic abstract class AbstractDataSource extends Object implements DataSource; // Abstract base class for Spring's DataSource implementations, taking care of the padding.\npublic abstract class AbstractDriverBasedDataSource extends AbstractDataSource; // Abstract base class for JDBC DataSource implementations that operate on a JDBC Driver.\n@FunctionalInterface public interface ConnectionHandle; // Simple interface to be implemented by handles for a JDBC Connection.\npublic class ConnectionHolder extends org.springframework.transaction.support.ResourceHolderSupport; // Resource holder wrapping a JDBC Connection.\npublic interface ConnectionProxy extends Connection; // Subinterface of Connection to be implemented by Connection proxies.\npublic class DataSourceTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single JDBC DataSource.\npublic abstract class DataSourceUtils extends Object; // Helper class that provides static methods for obtaining JDBC Connections from a DataSource.\npublic class DelegatingDataSource extends Object implements DataSource, org.springframework.beans.factory.InitializingBean; // JDBC DataSource implementation that delegates all calls to a given target DataSource.\npublic class DriverManagerDataSource extends AbstractDriverBasedDataSource; // Simple implementation of the standard JDBC DataSource interface, configuring the plain old JDBC DriverManager via bean properties, and returning a new Connection from every getConnection call.\npublic class IsolationLevelDataSourceAdapter extends UserCredentialsDataSourceAdapter; // An adapter for a target DataSource, applying the current Spring transaction's isolation level (and potentially specified user credentials) to every getConnection call.\npublic abstract class JdbcTransactionObjectSupport extends Object implements org.springframework.transaction.SavepointManager, org.springframework.transaction.support.SmartTransactionObject; // Convenient base class for JDBC-aware transaction objects.\npublic class LazyConnectionDataSourceProxy extends DelegatingDataSource; // Proxy for a target DataSource, fetching actual JDBC Connections lazily, i.e.\npublic class SimpleConnectionHandle extends Object implements ConnectionHandle; // Simple implementation of the ConnectionHandle interface, containing a given JDBC Connection.\n", "des": "Provides a utility class for easy DataSource access, a PlatformTransactionManager for a single DataSource, and various simple DataSource implementations."}
{"index": 3217, "repo": "commons-configuration2-2.9.0", "code": "package convert;\n\nInterface ConversionHandler; // An interface defining the possible data type conversions supported by the configuration framework.\nInterface ListDelimiterHandler; // Definition of an interface that controls the handling of list delimiters in configuration properties.\nInterface ValueTransformer; // Definition of an interface used by ListDelimiterHandler to perform additional transformations on behalf of a configuration when a property value is escaped.\nClass AbstractListDelimiterHandler; // An abstract base class for concrete ListDelimiterHandler implementations.\nClass DefaultConversionHandler; // A default implementation of the ConversionHandler interface.\nClass DefaultListDelimiterHandler; // The default implementation of the ListDelimiterHandler interface.\nClass DisabledListDelimiterHandler; // A specialized implementation of the ListDelimiterHandler interface which disables list splitting.\nClass LegacyListDelimiterHandler; // A specialized implementation of ListDelimiterHandler which simulates the list delimiter handling as it was used by PropertiesConfiguration in Commons Configuration 1.x.\nClass PropertyConverter; // A utility class to convert the configuration properties into any type.\n", "des": "This package contains interfaces and classes related to data type conversions."}
{"index": 2978, "repo": "pulsar-broker-3.0.0", "code": "package pendingack;\n\npackage pendingack.impl; // The implementation for processing pending acks in transactions.\npublic interface PendingAckHandle; // Handle for processing pending acks for transactions.\npublic interface PendingAckHandleStats;\npublic interface PendingAckReplyCallBack; // Call back for pending ack reply.\npublic interface PendingAckStore; // To store transaction pending ack.\npublic interface TransactionPendingAckStoreProvider; // Provider of transaction pending ack store.\n", "des": "Component for processing pending acks for transactions."}
{"index": 3134, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface JndiService; // Service providing simplified access to JNDI related features needed by Hibernate.\n", "des": "The SPI contracts for Hibernate JNDI support"}
{"index": 1290, "repo": "spring-core-6.0.11", "code": "package objenesis;\n\npublic class SpringObjenesis extends Object implements org.springframework.objenesis.Objenesis; // Spring-specific variant of ObjenesisStd / ObjenesisBase, providing a cache based on Class keys instead of class names, and allowing for selective use of the cache.\n", "des": "Spring's repackaging of Objenesis 3.2 (with SpringObjenesis entry point; for internal use only)."}
{"index": 66, "repo": "ignite-core-2.15.0", "code": "package mxbean;\n\nInterface BaselineAutoAdjustMXBean; // This interface defines JMX view on DistributedBaselineConfiguration.\nInterface ClientProcessorMXBean; // MXBean interface that provides access to ODBC\\JDBC\\Thin client connections.\nInterface ClusterMetricsMXBean; // Cluster metrics MBean.\nInterface ComputeMXBean; // Compute MXBean interface.\nInterface DataStorageMXBean; // An MX bean allowing to monitor and tune persistence.\nInterface DefragmentationMXBean; // JMX bean for defragmentation manager.\nInterface EncryptionMXBean; // Encryption features MBean.\nInterface FailureHandlingMxBean; // MBean that controls critical failure handling.\nInterface IgniteClusterMXBean; // MX Bean allows to access information about cluster ID and tag and change tag.\nInterface IgniteMBeanAware; // MBean-aware interface.\nInterface IgniteMXBean; // This interface defines JMX view on kernal.\nInterface IgnitionMXBean; // This interface defines JMX view on Ignition.\nInterface MetricsMxBean; // Metrics MXBean interface.\nInterface PerformanceStatisticsMBean; // MBean that provides access to performance statistics management.\nInterface QueryMXBean; // Query MXBean interface.\nInterface ServiceMXBean; // Service MXBean interface.\nInterface SnapshotMXBean; // Snapshot features MBean.\nInterface TransactionMetricsMxBean; // Check the JmxMetricExporterSpi with \"name=\\\"tx\\\"\" instead.\nInterface TransactionsMXBean; // Transactions MXBean interface.\nInterface WarmUpMXBean; // Warm-up MXBean interface.\nInterface WorkersControlMXBean; // MBean that provides ability to terminate worker that registered in the workers registry.\nAnnotation Type MXBeanDescription; // Provides description for MBean classes and methods.\nAnnotation Type MXBeanParameter; // Provides name and description for MBean method parameter.\nAnnotation Type MXBeanParametersDescriptions; // Use MXBeanParameter instead.\nAnnotation Type MXBeanParametersNames; // Use MXBeanParameter instead.\n", "des": "Contains annotations for Dynamic MBeans."}
{"index": 3002, "repo": "spring-web-6.0.11", "code": "package json;\n\npublic abstract class AbstractJackson2Decoder extends Jackson2CodecSupport implements HttpMessageDecoder<Object>; // Abstract base class for Jackson 2.x decoding, leveraging non-blocking parsing.\npublic abstract class AbstractJackson2Encoder extends Jackson2CodecSupport implements HttpMessageEncoder<Object>; // Base class providing support methods for Jackson 2.x encoding.\npublic abstract class Jackson2CodecSupport extends Object; // Base class providing support methods for Jackson 2.x encoding and decoding.\npublic class Jackson2JsonDecoder extends AbstractJackson2Decoder; // Decode a byte stream into JSON and convert to Object's with Jackson 2.x, leveraging non-blocking parsing.\npublic class Jackson2JsonEncoder extends AbstractJackson2Encoder; // Encode from an Object stream to a byte stream of JSON objects using Jackson 2.x.\npublic class Jackson2SmileDecoder extends AbstractJackson2Decoder; // Decode a byte stream into Smile and convert to Object's with Jackson 2.x, leveraging non-blocking parsing.\npublic class Jackson2SmileEncoder extends AbstractJackson2Encoder; // Encode from an Object stream to a byte stream of Smile objects using Jackson 2.x.\npublic class KotlinSerializationJsonDecoder extends KotlinSerializationStringDecoder<kotlinx.serialization.json.Json>; // Decode a byte stream into JSON and convert to Object's with kotlinx.serialization.\npublic class KotlinSerializationJsonEncoder extends KotlinSerializationStringEncoder<kotlinx.serialization.json.Json>; // Encode from an Object stream to a byte stream of JSON objects using kotlinx.serialization.\n", "des": "JSON encoder and decoder support."}
{"index": 3359, "repo": "opencms-core-15.0", "code": "package util;\n\npackage util.table; // Contains utility classes for dealing with Vaadin tables.\nInterface CmsLogicalCheckboxGroup.I_ChangeListener; // Listener interface.\nInterface CmsNewResourceBuilder.I_Callback; // Interface for callbacks which should be notified when this helper has created a resource.\nInterface I_CmsItemSorter; // Interface for item sorters that evaluate the sortable container properties.\nClass CmsComboNullToEmptyConverter; // Converts null values to an empty string for the input widgets.\nClass CmsComponentField<T extends com.vaadin.ui.Component>; // Container wrapping a single UI component.\nClass CmsLogicalCheckboxGroup; // Ensures that among a set of check boxes, at most one of them is checked, without imposing constraints on the location of the checkboxes in the UI.\nClass CmsNewResourceBuilder; // Helper class for creating a new resource using the New dialog.\nClass CmsNullToEmptyConverter; // Converts null values to an empty string for the input widgets.\nClass CmsStyleVariable;\nEnum CmsDisplayType; // Represents the three possible display types (small, medium, wide).\n", "des": "Utilities for Vaadin workplace code."}
{"index": 939, "repo": "spring-ws-3.0.10.RELEASE", "code": "package client;\n\npackage client.core; // Core package of the Spring-WS client-side support.\npackage client.support; // Classes supporting the org.springframework.ws.client.core package.\nClass WebServiceClientException; // Exception thrown whenever an error occurs on the client-side.\nClass WebServiceFaultException; // Thrown by SimpleFaultMessageResolver when the response message has a fault.\nClass WebServiceIOException; // Exception thrown whenever an I/O error occurs on the client-side.\nClass WebServiceTransformerException; // Exception thrown whenever a transformation error occurs on the client-side.\nClass WebServiceTransportException; // Exception thrown whenever a transport error occurs on the client-side.\n", "des": "Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access."}
{"index": 2451, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package metrics;\n\npackage metrics.amqp; // Auto-configuration for RabbitMQ metrics.\npackage metrics.cache; // Auto-configuration for cache metrics.\npackage metrics.data; // Auto-configuration for Spring Data actuator metrics.\npackage metrics.export; // Auto-configuration for metrics exporter.\npackage metrics.jdbc; // Auto-configuration for JPA metrics.\npackage metrics.jersey; // Auto-configuration for Jersey actuator metrics.\npackage metrics.mongo; // Auto-configuration for Mongo metrics.\npackage metrics.r2dbc; // Auto-configuration for R2DBC metrics.\npackage metrics.redis; // Auto-configuration for Redis metrics.\npackage metrics.startup; // Auto-configuration for actuator startup time metrics.\npackage metrics.task; // Auto-configuration for task execution and scheduling metrics.\npublic final class AutoTimeProperties extends Object; // Nested configuration properties for items that are automatically timed.\n@AutoConfiguration @Import({org.springframework.boot.actuate.autoconfigure.metrics.NoOpMeterRegistryConfiguration.class,org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.composite.CompositeMeterRegistry.class) public class CompositeMeterRegistryAutoConfiguration extends Object; // Auto-configuration for a CompositeMeterRegistry.\n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class JvmMetricsAutoConfiguration extends Object; // Auto-configuration for JVM metrics.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration.class, after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass({io.micrometer.core.instrument.binder.kafka.KafkaClientMetrics.class,org.springframework.kafka.core.ProducerFactory.class}) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class KafkaMetricsAutoConfiguration extends Object; // Auto-configuration for Kafka metrics.\n", "des": "Auto-configuration for actuator metrics and Micrometer."}
{"index": 1985, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package template;\n\npublic abstract class AbstractTemplateViewResolverProperties extends AbstractViewResolverProperties; // Base class for @ConfigurationProperties of a AbstractTemplateViewResolver.\npublic abstract class AbstractViewResolverProperties extends Object; // Base class for @ConfigurationProperties of a ViewResolver.\npublic abstract class PathBasedTemplateAvailabilityProvider extends Object implements TemplateAvailabilityProvider; // Abstract base class for TemplateAvailabilityProvider implementations that find templates from paths.\nprotected abstract static class PathBasedTemplateAvailabilityProvider.TemplateAvailabilityProperties extends Object;\n@FunctionalInterface public interface TemplateAvailabilityProvider; // Indicates the availability of view templates for a particular templating engine such as FreeMarker or Thymeleaf.\npublic class TemplateAvailabilityProviders extends Object; // Collection of TemplateAvailabilityProvider beans that can be used to check which (if any) templating engine supports a given view.\npublic class TemplateLocation extends Object; // Contains a location that templates can be loaded from.\n", "des": "Base classes for template Auto-configuration."}
{"index": 1460, "repo": "spring-data-redis-3.1.2", "code": "package adapter;\n\npublic class MessageListenerAdapter extends Object implements InitializingBean, MessageListener; // Message listener adapter that delegates the handling of messages to target listener methods via reflection, with flexible message type conversion.\npublic class RedisListenerExecutionFailedException extends InvalidDataAccessApiUsageException; // Exception thrown when the execution of a listener method failed.\n", "des": "Message listener adapter package."}
{"index": 3506, "repo": "poi-5.2.3", "code": "package formula;\n\npackage formula.ptg; // The formula package contains binary PTG structures used in Formulas\nInterface EvaluationCell; // Abstracts a cell for the purpose of formula evaluation.\nInterface EvaluationName; // Abstracts a name record for formula evaluation.\nInterface EvaluationSheet; // Abstracts a sheet for the purpose of formula evaluation.\nInterface EvaluationWorkbook; // Abstracts a workbook for the purpose of formula evaluation.\nInterface ExternSheetReferenceToken; // Should be implemented by any Ptg subclass that needs has an extern sheet index For POI internal use only\nInterface FormulaParsingWorkbook; // Abstracts a workbook for the purpose of formula parsing. For POI internal use only\nInterface FormulaRenderingWorkbook; // Abstracts a workbook for the purpose of converting formula to text.\nInterface IStabilityClassifier; // Used to help optimise cell evaluation result caching by allowing applications to specify which parts of a workbook are final. The term final is introduced here to denote immutability or 'having constant definition'.\nInterface SheetRange;\nInterface ThreeDEval; // Optional Extension to the likes of AreaEval and AreaEvalBase, which allows for looking up 3D (sheet+row+column) evaluations\nInterface TwoDEval; // Common interface of AreaEval and AreaEvalBase, for 2D (row+column) evaluations\nInterface WorkbookDependentFormula; // Should be implemented by any Ptg subclass that needs a workbook to render its formula.\nInterface WorkbookEvaluatorProvider; // Provides access to a WorkbookEvaluator, eg for use with CollaboratingWorkbooksEnvironment\nClass BaseFormulaEvaluator; // Common functionality across file formats for evaluating formula cells.\nClass CacheAreaEval; // Provides holding structure for temporary values in arrays during the evaluation process.\nClass CollaboratingWorkbooksEnvironment; // Manages a collection of WorkbookEvaluators, in order to support evaluation of formulas across spreadsheets.\nClass ConditionalFormattingEvaluator; // Evaluates Conditional Formatting constraints.\nClass DataValidationEvaluator; // Evaluates Data Validation constraints.\nClass DataValidationEvaluator.DataValidationContext; // This class organizes and encapsulates all the pieces of information related to a single data validation configuration for a single cell.\nClass EvaluationConditionalFormatRule; // Abstracted and cached version of a Conditional Format rule for use with a ConditionalFormattingEvaluator.\n", "des": "This package contains common internal POI code for manipulating formulas."}
{"index": 708, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package http;\n\nClass BaseHttpInboundEndpointSpec<S extends BaseHttpInboundEndpointSpec<S,E>,E extends org.springframework.integration.http.inbound.HttpRequestHandlingEndpointSupport>;\nClass BaseHttpInboundEndpointSpec.CrossOriginSpec; // A fluent API for the CrossOrigin.\nClass BaseHttpInboundEndpointSpec.RequestMappingSpec; // A fluent API for the RequestMapping.\nClass Http; // The HTTP components Factory.\nClass HttpControllerEndpointSpec; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingController.\nClass HttpMessageHandlerSpec; // The MessageHandlerSpec implementation for the HttpRequestExecutingMessageHandler.\nClass HttpRequestHandlerEndpointSpec; // The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingMessagingGateway.\n", "des": "Provides HTTP Components support for Spring Integration Java DSL."}
{"index": 2977, "repo": "pulsar-broker-3.0.0", "code": "package pendingack;\n\npublic abstract class TransactionPendingAckException extends TransactionException; // The base exception class for the errors thrown from Transaction Pending ACk.\npublic static class TransactionPendingAckException.TransactionPendingAckStoreProviderException extends TransactionPendingAckException; // Transaction pending ack store provider exception.\n", "des": "Exceptions thrown when encountering errors in transaction buffer."}
{"index": 2386, "repo": "spring-batch-core-5.0.2", "code": "package explore;\n\npackage explore.support; // Specific implementations of explorer concerns.\npublic interface JobExplorer; // Entry point for browsing the executions of running or historical jobs and steps.\n", "des": "Interfaces and related classes to support meta data browsing."}
{"index": 1046, "repo": "commons-io-2.13.0", "code": "package attribute;\n\nClass FileTimes; // Helps use FileTime and interoperate Date and NTFS times.\n", "des": "Provides help using java.nio.file.attribute types."}
{"index": 2282, "repo": "spring-data-elasticsearch-5.1.2", "code": "package routing;\n\npublic class DefaultRoutingResolver extends Object implements RoutingResolver; // Default implementation of the RoutingResolver interface.\npublic interface RoutingResolver;\n", "des": "classes/interfaces for specification and implementation of Elasticsearch routing."}
{"index": 483, "repo": "beam-sdks-java-core-2.49.0", "code": "package options;\n\nInterface ApplicationNameOptions; // Options that allow setting the application name.\nInterface DefaultValueFactory<T>; // An interface used with the Default.InstanceFactory annotation to specify the class that will be an instance factory to produce default values for a given getter on PipelineOptions.\nInterface ExecutorOptions; // Options for configuring the ScheduledExecutorService used throughout the Java runtime.\nInterface ExperimentalOptions; // Apache Beam provides a number of experimental features that can be enabled with this flag.\nInterface FileStagingOptions; // File staging related options.\nInterface ManualDockerEnvironmentOptions; // Pipeline options to tune DockerEnvironment.\nInterface PipelineOptions; // PipelineOptions are used to configure Pipelines.\nInterface PipelineOptionsRegistrar; // PipelineOptions creators have the ability to automatically have their PipelineOptions registered with this SDK by creating a ServiceLoader entry and a concrete implementation of this interface.\nInterface PortablePipelineOptions; // Pipeline options common to all portable runners.\nInterface RemoteEnvironmentOptions; // Options that are used to control configuration of the remote environment.\nInterface SdkHarnessOptions; // Options that are used to control configuration of the SDK harness.\nInterface SdkHarnessOptions.MaxCacheMemoryUsageMb; // Specifies the maximum amount of memory to use within the current SDK harness instance.\nInterface StreamingOptions; // Options used to configure streaming.\nInterface ValueProvider<T>; // A ValueProvider abstracts the notion of fetching a value that may or may not be currently available.\nClass DefaultPipelineOptionsRegistrar; // A PipelineOptionsRegistrar containing the PipelineOptions subclasses available by default.\nClass ExecutorOptions.ScheduledExecutorServiceFactory; // Returns the default ScheduledExecutorService to use within the Apache Beam SDK.\nClass ManualDockerEnvironmentOptions.Options; // Register the ManualDockerEnvironmentOptions.\nClass PipelineOptions.AtomicLongFactory; // DefaultValueFactory which supplies an ID that is guaranteed to be unique within the given process.\nClass PipelineOptions.DirectRunner; // A DefaultValueFactory that obtains the class of the DirectRunner if it exists on the classpath, and throws an exception otherwise.\nClass PipelineOptions.JobNameFactory; // Returns a normalized job name constructed from ApplicationNameOptions.getAppName(), the local system user name (if available), the current time, and a random integer.\n", "des": "Defines PipelineOptions for configuring pipeline execution."}
{"index": 3397, "repo": "commons-imaging-1.0-alpha3", "code": "package exif;\n\nClass ExifRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass ExifRewriter.ExifOverflowException;\n", "des": "JPEG image format Exif utilities."}
{"index": 1507, "repo": "spring-context-6.0.11", "code": "package context;\n\npackage context.annotation; // Annotation support for the Application Context, including JSR-250 \"common\" annotations, component-scanning, and Java-based metadata for creating Spring-managed objects.\npackage context.aot; // AOT support for application contexts.\npackage context.config; // Support package for advanced application context configuration, with XML schema being the primary configuration format.\npackage context.event; // Support classes for application events, like standard context events.\npackage context.expression; // Expression parsing support within a Spring application context.\npackage context.i18n; // Abstraction for determining the current Locale, plus global holder that exposes a thread-bound Locale.\npackage context.index; // Support package for reading and managing the components index.\npackage context.support; // Classes supporting the org.springframework.context package, such as abstract base classes for ApplicationContext implementations and a MessageSource implementation.\npackage context.weaving; // Load-time weaving support for a Spring application context, building on Spring's LoadTimeWeaver abstraction.\npublic interface ApplicationContext extends org.springframework.core.env.EnvironmentCapable, org.springframework.beans.factory.ListableBeanFactory, org.springframework.beans.factory.HierarchicalBeanFactory, MessageSource, ApplicationEventPublisher, org.springframework.core.io.support.ResourcePatternResolver; // Central interface to provide configuration for an application.\npublic interface ApplicationContextAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the ApplicationContext that it runs in.\npublic class ApplicationContextException extends org.springframework.beans.FatalBeanException; // Exception thrown during application context initialization.\n@FunctionalInterface public interface ApplicationContextInitializer<C extends ConfigurableApplicationContext>; // Callback interface for initializing a Spring ConfigurableApplicationContext prior to being refreshed.\npublic abstract class ApplicationEvent extends EventObject; // Class to be extended by all application events.\n@FunctionalInterface public interface ApplicationEventPublisher; // Interface that encapsulates event publication functionality.\n", "des": "This package builds on the beans package to add support for message sources and for the Observer design pattern, and the ability for application objects to obtain resources using a consistent API."}
{"index": 438, "repo": "commons-pool2-2.11.1", "code": "package proxy;\n\nClass CglibProxySource<T>; // Provides proxy objects using CGLib.\nClass JdkProxySource<T>; // Provides proxy objects using Java reflection.\nClass ProxiedKeyedObjectPool<K,V>; // Create a new keyed object pool where the pooled objects are wrapped in proxies allowing better control of pooled objects and in particular the prevention of the continued use of an object by a client after that client returns the object to the pool.\nClass ProxiedObjectPool<T>; // Create a new object pool where the pooled objects are wrapped in proxies allowing better control of pooled objects and in particular the prevention of the continued use of an object by a client after that client returns the object to the pool.\n", "des": "Object pooling proxy implementation."}
{"index": 2735, "repo": "spring-batch-infrastructure-5.0.2", "code": "package javamail;\n\npublic class MimeMessageItemWriter extends Object implements ItemWriter<jakarta.mail.internet.MimeMessage>; // A simple ItemWriter that can send mail messages.\n", "des": "JavaMail related components."}
{"index": 1289, "repo": "spring-core-6.0.11", "code": "package lang;\n\n@Target({METHOD,PARAMETER,FIELD}) @Retention(RUNTIME) @Documented @Nonnull @TypeQualifierNickname public @interface NonNull; // A common Spring annotation to declare that annotated elements cannot be null.\n@Target(PACKAGE) @Retention(RUNTIME) @Documented @Nonnull @TypeQualifierDefault({METHOD,PARAMETER}) public @interface NonNullApi; // A common Spring annotation to declare that parameters and return values are to be considered as non-nullable by default for a given package.\n@Target(PACKAGE) @Retention(RUNTIME) @Documented @Nonnull @TypeQualifierDefault(FIELD) public @interface NonNullFields; // A common Spring annotation to declare that fields are to be considered as non-nullable by default for a given package.\n@Target({METHOD,PARAMETER,FIELD}) @Retention(RUNTIME) @Documented @Nonnull(when=MAYBE) @TypeQualifierNickname public @interface Nullable; // A common Spring annotation to declare that annotated elements can be null under some circumstance.\n", "des": "Common annotations with language-level semantics: nullability as well as JDK API indications."}
{"index": 2602, "repo": "wicket-util-10.0.0-M1", "code": "package collections;\n\npublic class ClassMetaCache<T> extends Object; // This class wraps a WeakHashMap that holds one ConcurrentHashMap per ClassLoader.\npublic class IntHashMap<V> extends Object implements Cloneable, Serializable; // This is an integer hashmap that has the exact same features and interface as a normal Map except that the key is directly an integer.\npublic static class IntHashMap.Entry<V> extends Object;\npublic class MiniMap<K,V> extends Object implements Map<K,V>, Serializable; // A fixed size map implementation.\npublic class MostRecentlyUsedMap<K,V> extends LinkedHashMap<K,V>; // Holds a map of most recently used items of a given maximum size.\npublic class MultiMap<K,V> extends HashMap<K,List<V>>; // A simple multimap\npublic abstract class ReadOnlyIterator<T> extends Object implements Iterator<T>; // Base class for read-only iterators.\npublic class ReverseListIterator<E> extends Object implements Iterator<E>, Iterable<E>; // An iterator over List which goes from the end to the start\npublic class UrlExternalFormComparator extends Object implements Comparator<URL>, Serializable; // A comparator of URL instances.\n", "des": "Useful collections."}
{"index": 1435, "repo": "spring-boot-actuator-3.1.1", "code": "package system;\n\npublic class DiskSpaceHealthIndicator extends AbstractHealthIndicator; // A HealthIndicator that checks available disk space and reports a status of Status.DOWN when it drops below a configurable threshold.\n", "des": "Actuator support for system-related concerns."}
{"index": 2940, "repo": "groovy-4.0.13", "code": "package tools;\n\npackage tools.javac; // Classes related to the joint compiler.\npublic class Compiler extends Object; // A convenience front end for getting standard compilations done.\npublic class DgmConverter extends Object;\npublic class ErrorReporter extends Object; // Provides services for reporting compilation errors to the user.\npublic class FileSystemCompiler extends Object; // Command-line compiler (aka.\npublic static class FileSystemCompiler.CompilationOptions extends Object;\npublic static class FileSystemCompiler.VersionProvider extends Object implements picocli.CommandLine.IVersionProvider;\npublic class GrapeUtil extends Object;\npublic class GroovyClass extends Object;\npublic class GroovyStarter extends Object; // Helper class to initialize the Groovy runtime.\npublic class LoaderConfiguration extends Object; // Class used to configure a RootLoader from a stream or by using its methods.\npublic class RootLoader extends URLClassLoader; // This ClassLoader should be used as root of class loaders.\npublic class StringHelper extends Object;\npublic abstract class Utilities extends Object; // Various utility functions for use in the compiler.\n", "des": "Compiler entry points and miscellaneous development tools."}
{"index": 2876, "repo": "spring-integration-core-6.1.2", "code": "package router;\n\npublic abstract class AbstractMappingMessageRouter extends AbstractMessageRouter implements MappingMessageRouterManagement; // Base class for all Message Routers that support mapping from arbitrary String values to Message Channel names.\n@ManagedResource @IntegrationManagedResource public abstract class AbstractMessageRouter extends AbstractMessageHandler implements MessageRouter; // Base class for all Message Routers.\npublic class ErrorMessageExceptionTypeRouter extends AbstractMappingMessageRouter; // A Message Router that resolves the target MessageChannel for messages whose payload is a Throwable.\npublic class ExpressionEvaluatingRouter extends AbstractMappingMessageRouter; // A Message Router implementation that evaluates the specified SpEL expression.\npublic class HeaderValueRouter extends AbstractMappingMessageRouter; // A Message Router that resolves the MessageChannel from a header value.\npublic interface MessageRouter; // Routers implementing this interface have a default output channel.\npublic class MethodInvokingRouter extends AbstractMappingMessageRouter; // A Message Router that invokes the specified method on the given object.\npublic class PayloadTypeRouter extends AbstractMappingMessageRouter; // A Message Router that resolves the MessageChannel based on the Message's payload type.\npublic class RecipientListRouter extends AbstractMessageRouter implements RecipientListRouterManagement; // <recipient-list-router id=\"simpleRouter\" input-channel=\"routingChannelA\"> <recipient channel=\"channel1\"/> <recipient channel=\"channel2\"/> </recipient-list-router>\npublic static class RecipientListRouter.Recipient extends Object;\n@ManagedResource @IntegrationManagedResource public interface RecipientListRouterManagement; // Exposes adding/removing individual recipients operations for RecipientListRouter.\n", "des": "Provides classes supporting the router pattern."}
{"index": 1830, "repo": "spring-test-6.0.11", "code": "package reactive;\n\npublic class MockClientHttpRequest extends org.springframework.http.client.reactive.AbstractClientHttpRequest; // Mock implementation of ClientHttpRequest.\npublic class MockClientHttpResponse extends Object implements org.springframework.http.client.reactive.ClientHttpResponse; // Mock implementation of ClientHttpResponse.\n", "des": "Mock implementations of reactive HTTP client contracts."}
{"index": 3089, "repo": "spring-ws-core-4.0.5", "code": "package soap11;\n\npublic interface Soap11Body extends SoapBody; // Subinterface of SoapBody that exposes SOAP 1.1 functionality.\npublic interface Soap11Fault extends SoapFault; // Subinterface of SoapFault that exposes SOAP 1.1 functionality.\npublic interface Soap11Header extends SoapHeader; // Subinterface of SoapHeader that exposes SOAP 1.1 functionality.\n", "des": "Contains interfaces specific to SOAP 1.1."}
{"index": 2790, "repo": "spring-expression-6.0.11", "code": "package support;\n\npublic final class BooleanTypedValue extends TypedValue; // A TypedValue for booleans.\npublic final class DataBindingMethodResolver extends ReflectiveMethodResolver; // A MethodResolver variant for data binding purposes, using reflection to access instance methods on a given target object.\npublic final class DataBindingPropertyAccessor extends ReflectivePropertyAccessor; // A PropertyAccessor variant for data binding purposes, using reflection to access properties for reading and possibly writing.\npublic abstract class ReflectionHelper extends Object; // Utility methods used by the reflection resolver code to discover the appropriate methods/constructors and fields that should be used in expressions.\npublic class ReflectiveConstructorExecutor extends Object implements ConstructorExecutor; // A simple ConstructorExecutor implementation that runs a constructor using reflective invocation.\npublic class ReflectiveConstructorResolver extends Object implements ConstructorResolver; // A constructor resolver that uses reflection to locate the constructor that should be invoked.\npublic class ReflectiveMethodExecutor extends Object implements MethodExecutor; // MethodExecutor that works via reflection.\npublic class ReflectiveMethodResolver extends Object implements MethodResolver; // Reflection-based MethodResolver used by default in StandardEvaluationContext unless explicit method resolvers have been specified.\npublic class ReflectivePropertyAccessor extends Object implements PropertyAccessor; // A powerful PropertyAccessor that uses reflection to access properties for reading and possibly also for writing on a target instance.\npublic static class ReflectivePropertyAccessor.OptimalPropertyAccessor extends Object implements CompilablePropertyAccessor; // An optimized form of a PropertyAccessor that will use reflection but only knows how to access a particular property on a particular class.\npublic final class SimpleEvaluationContext extends Object implements EvaluationContext; // A basic implementation of EvaluationContext that focuses on a subset of essential SpEL features and customization options, targeting simple condition evaluation and in particular data binding scenarios.\npublic static class SimpleEvaluationContext.Builder extends Object; // Builder for SimpleEvaluationContext.\npublic class StandardEvaluationContext extends Object implements EvaluationContext; // A powerful and highly configurable EvaluationContext implementation.\npublic class StandardOperatorOverloader extends Object implements OperatorOverloader; // Standard implementation of OperatorOverloader.\npublic class StandardTypeComparator extends Object implements TypeComparator; // A basic TypeComparator implementation: supports comparison of Number types as well as types implementing Comparable.\npublic class StandardTypeConverter extends Object implements TypeConverter; // Default implementation of the TypeConverter interface, delegating to a core Spring ConversionService.\n", "des": "SpEL's default implementations for various core abstractions."}
{"index": 2330, "repo": "spring-boot-3.1.1", "code": "package servlet;\n\npublic abstract class ApplicationContextRequestMatcher<C> extends Object implements org.springframework.security.web.util.matcher.RequestMatcher; // ApplicationContext backed RequestMatcher.\n", "des": "Classes and utilities for Servlet-based Spring Security."}
{"index": 1814, "repo": "spring-integration-mail-6.1.2", "code": "package mail;\n\npackage mail.config; // Provides classes for configuration - parsers, namespace handlers.\npackage mail.dsl; // Provides Mail Components for the Java DSL.\npackage mail.event; // Events generated by the mail module\npackage mail.support; // Provides classes to support email.\npackage mail.transformer; // Provides classes related to transforming mail messages.\npublic abstract class AbstractMailReceiver extends org.springframework.integration.context.IntegrationObjectSupport implements MailReceiver, org.springframework.beans.factory.DisposableBean; // Base class for MailReceiver implementations.\npublic class ImapIdleChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.context.ApplicationEventPublisherAware; // An event-driven Channel Adapter that receives mail messages from a mail server that supports the IMAP \"idle\" command (see RFC 2177).\npublic class ImapMailReceiver extends AbstractMailReceiver; // A MailReceiver implementation for receiving mail messages from a mail server that supports the IMAP protocol.\npublic final class MailHeaders extends Object; // Pre-defined header names to be used for setting and/or retrieving Mail Message attributes from/to integration Message Headers.\npublic interface MailReceiver; // Strategy interface for receiving mail Messages.\npublic class MailReceivingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<Object>; // MessageSource implementation that delegates to a MailReceiver to poll a mailbox.\npublic class MailSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // A MessageHandler implementation for sending mail.\npublic abstract class MailTransportUtils extends Object; // Collection of utility methods to work with Mail transports.\npublic class Pop3MailReceiver extends AbstractMailReceiver; // A MailReceiver implementation that polls a mail server using the POP3 protocol.\n@FunctionalInterface public interface SearchTermStrategy; // Strategy to be used to generate a SearchTerm.\n", "des": "Base package for Mail support."}
{"index": 721, "repo": "commons-codec-1.16.0", "code": "package digest;\n\nClass Blake3; // Implements the Blake3 algorithm providing a hash function with extensible output (XOF), a keyed hash function (MAC, PRF), and a key derivation function (KDF).\nClass Crypt; // GNU libc crypt(3) compatible hash method.\nClass DigestUtils; // Operations to simplify common MessageDigest tasks.\nClass HmacUtils; // Simplifies common Mac tasks.\nClass Md5Crypt; // The libc crypt() \"$1$\" and Apache \"$apr1$\" MD5-based hash algorithm.\nClass MessageDigestAlgorithms; // Standard MessageDigest algorithm names from the Java Cryptography Architecture Standard Algorithm Name Documentation.\nClass MurmurHash2; // Implementation of the MurmurHash2 32-bit and 64-bit hash functions.\nClass MurmurHash3; // Implementation of the MurmurHash3 32-bit and 128-bit hash functions.\nClass MurmurHash3.IncrementalHash32; // Use IncrementalHash32x86.\nClass MurmurHash3.IncrementalHash32x86; // Generates 32-bit hash from input bytes.\nClass PureJavaCrc32; // A pure-java implementation of the CRC32 checksum that uses the same polynomial as the built-in native CRC32.\nClass PureJavaCrc32C; // A pure-java implementation of the CRC32 checksum that uses the CRC32-C polynomial, the same polynomial used by iSCSI and implemented on many Intel chipsets supporting SSE 4.2.\nClass Sha2Crypt; // SHA2-based Unix crypt implementation.\nClass UnixCrypt; // Unix crypt(3) algorithm implementation.\nClass XXHash32; // Implementation of the xxHash32 hash algorithm.\nEnum HmacAlgorithms; // Standard HmacUtils algorithm names from the Java Cryptography Architecture Standard Algorithm Name Documentation.\n", "des": "Simplifies common MessageDigest tasks and includes a libc crypt(3) compatible crypt method that supports DES, MD5, SHA-256 and SHA-512 based algorithms as well as the Apache specific \"$apr1$\" variant."}
{"index": 190, "repo": "ignite-core-2.15.0", "code": "package test;\n\nClass GridTestPrintStream; // Print stream that prints each thread group into a separate buffer.\nClass GridTestPrintStreamFactory; // Factory that allow to acquire/release Print Stream for test logging.\n", "des": "Contains common utility classes for JUnit integration."}
{"index": 1266, "repo": "spring-core-6.0.11", "code": "package impl;\n\npublic class AbstractInterceptFieldCallback extends Object implements InterceptFieldCallback;\npublic class AccessFieldTransformer extends ClassEmitterTransformer;\npublic static interface AccessFieldTransformer.Callback;\npublic class AddDelegateTransformer extends ClassEmitterTransformer;\npublic class AddInitTransformer extends ClassEmitterTransformer;\npublic class AddPropertyTransformer extends ClassEmitterTransformer;\npublic class AddStaticInitTransformer extends ClassEmitterTransformer;\npublic interface FieldProvider;\npublic class FieldProviderTransformer extends ClassEmitterTransformer;\npublic interface InterceptFieldCallback;\npublic interface InterceptFieldEnabled;\npublic interface InterceptFieldFilter;\npublic class InterceptFieldTransformer extends ClassEmitterTransformer;\npublic class UndeclaredThrowableStrategy extends DefaultGeneratorStrategy; // A GeneratorStrategy suitable for use with Enhancer which causes all undeclared exceptions thrown from within a proxied method to be wrapped in an alternative exception of your choice.\npublic class UndeclaredThrowableTransformer extends ClassEmitterTransformer;\n", "des": "Spring's repackaging of the CGLIB transform impl package (for internal use only)."}
{"index": 1144, "repo": "commons-math3-3.6.1", "code": "package differentiation;\n\nInterface MultivariateDifferentiableFunction; // Extension of MultivariateFunction representing a multivariate differentiable real function.\nInterface MultivariateDifferentiableVectorFunction; // Extension of MultivariateVectorFunction representing a multivariate differentiable vectorial function.\nInterface UnivariateDifferentiableFunction; // Interface for univariate functions derivatives.\nInterface UnivariateDifferentiableMatrixFunction; // Extension of UnivariateMatrixFunction representing a univariate differentiable matrix function.\nInterface UnivariateDifferentiableVectorFunction; // Extension of UnivariateVectorFunction representing a univariate differentiable vectorial function.\nInterface UnivariateFunctionDifferentiator; // Interface defining the function differentiation operation.\nInterface UnivariateMatrixFunctionDifferentiator; // Interface defining the function differentiation operation.\nInterface UnivariateVectorFunctionDifferentiator; // Interface defining the function differentiation operation.\nClass DerivativeStructure; // Class representing both the value and the differentials of a function.\nClass DSCompiler; // Class holding \"compiled\" computation rules for derivative structures.\nClass FiniteDifferencesDifferentiator; // Univariate functions differentiator using finite differences.\nClass GradientFunction; // Class representing the gradient of a multivariate function.\nClass JacobianFunction; // Class representing the Jacobian of a multivariate vector function.\nClass SparseGradient; // First derivative computation with large number of variables.\n", "des": "This package holds the main interfaces and basic building block classes dealing with differentiation."}
{"index": 272, "repo": "nutch-2.4", "code": "package collection;\n\nClass CollectionManager;\nClass Subcollection; // SubCollection represents a subset of index, you can define url patterns that will indicate that particular page (url) is part of SubCollection.\n", "des": "Subcollection is a subset of an index."}
{"index": 1495, "repo": "wicket-extensions-10.0.0-M1", "code": "package resource;\n\npublic class ThumbnailImageResource extends org.apache.wicket.request.resource.DynamicImageResource; // Image resource that dynamically scales the given original resource to a thumbnail.\n", "des": "Image resource extensions."}
{"index": 2263, "repo": "spring-vault-core-3.0.4", "code": "package lease;\n\npackage lease.domain; // Lease domain classes.\npackage lease.event; // Support classes for lease application events.\npublic enum LeaseEndpoints extends Enum<LeaseEndpoints>; // Version-specific endpoint implementations that use either legacy or sys/leases endpoints.\npublic class SecretLeaseContainer extends SecretLeaseEventPublisher implements InitializingBean, DisposableBean; // Event-based container to request secrets from Vault and renew the associated Lease.\npublic class SecretLeaseEventPublisher extends Object implements InitializingBean; // Publisher for SecretLeaseEvents.\npublic static enum SecretLeaseEventPublisher.LoggingErrorListener extends Enum<SecretLeaseEventPublisher.LoggingErrorListener> implements LeaseErrorListener; // Simple LeaseErrorListener implementation to log errors.\n", "des": "The core package implementing lease renewal and secret rotation."}
{"index": 1419, "repo": "spring-boot-actuator-3.1.1", "code": "package r2dbc;\n\npublic class ConnectionPoolMetrics extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder for a ConnectionPool.\n", "des": "Actuator support for R2DBC metrics."}
{"index": 2429, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package endpoint;\n\npackage endpoint.condition; // Actuator endpoint auto-configuration conditions.\npackage endpoint.expose; // Endpoint exposure logic used for auto-configuration and conditions.\npackage endpoint.jackson; // Actuator Jackson auto-configuration.\npackage endpoint.jmx; // Actuator JMX endpoint auto-configuration.\npackage endpoint.web; // Auto-configuration for the Actuator's web endpoints.\n@AutoConfiguration public class EndpointAutoConfiguration extends Object; // Auto-configuration for @Endpoint support.\n", "des": "Core classes for actuator endpoint auto-configuration."}
{"index": 2298, "repo": "spring-boot-3.1.1", "code": "package buffering;\n\npublic class BufferingApplicationStartup extends Object implements org.springframework.core.metrics.ApplicationStartup; // ApplicationStartup implementation that buffers steps and records their timestamp as well as their processing time.\npublic class StartupTimeline extends Object; // Represent the timeline of steps recorded by BufferingApplicationStartup.\npublic static class StartupTimeline.TimelineEvent extends Object; // Event on the current StartupTimeline.\n", "des": "ApplicationStartup implementation for buffering steps and measuring their processing time."}
{"index": 3717, "repo": "solr-core-9.3.0", "code": "package util;\n\npackage util.circuitbreaker; // Support for triggering exceptions on excessive resource usage\npackage util.configuration; // Common Util APIs related to Solr configuration.\npackage util.hll; // A fork of Java-HyperLogLog package tweaked not to depend on fastutil and with cleanups to make it lean and clean.\npackage util.plugin; // Common APIs related to implementing Solr plugins\npackage util.stats; // Utilities for collecting statistics\npackage util.tracing; // Tracing related utilities\npackage util.vector; // Utilities for dense vector search\nInterface ConcurrentLRUCache.EvictionListener<K,​V>;\nInterface DynamicMap; // An efficient map for storing keys as integer in range from 0..n with n can be estimated up-front.\nInterface FloatConsumer; // Represents an operation that accepts a single float-valued argument and returns no result.\nInterface IOFunction<T,​R>; // A Function that may throw an IOException\nInterface LongIterator; // A long-based iterator.\nInterface RTimer.TimerImpl;\nInterface TestInjection.Hook;\nClass AdjustableSemaphore;\nClass BoundedTreeSet<E>; // A TreeSet that ensures it never grows beyond a max size.\nClass ConcurrentLRUCache<K,​V>; // A LRU cache implementation based upon ConcurrentHashMap and other techniques to reduce contention and synchronization overhead to utilize multiple CPU cores more effectively.\nClass ConcurrentLRUCache.CacheEntry<K,​V>;\nClass ConcurrentLRUCache.Stats;\nClass CryptoKeys; // A utility class with helpers for various signature and certificate tasks\nClass CryptoKeys.RSAKeyPair;\nClass DataConfigNode; // ConfigNode impl that copies and maintains data internally from DOM\nClass DateMathParser; // A Simple Utility class for parsing \"math\" like strings relating to Dates.\nClass DistanceUnits; // Used with a spatial field type for all distance measurements.\nClass DOMConfigNode; // Read using DOM\nClass FileUtils;\nClass IdUtils; // Helper class for generating unique ID-s.\nClass IntFloatDynamicMap;\nClass IntIntDynamicMap;\nClass IntLongDynamicMap;\nClass JmxUtil; // Utility methods to find a MBeanServer.\nClass LocaleUtils;\n", "des": "Common utility classes used throughout Solr"}
{"index": 2640, "repo": "spring-integration-sftp-6.1.2", "code": "package inbound;\n\npublic class SftpInboundFileSynchronizer extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizer<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Handles the synchronization between a remote SFTP directory and a local mount.\npublic class SftpInboundFileSynchronizingMessageSource extends org.springframework.integration.file.remote.synchronizer.AbstractInboundFileSynchronizingMessageSource<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // A MessageSource implementation for SFTP that delegates to an InboundFileSynchronizer.\npublic class SftpStreamingMessageSource extends org.springframework.integration.file.remote.AbstractRemoteFileStreamingMessageSource<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Message source for streaming SFTP remote file contents.\n", "des": "Provides classes supporting inbound endpoints."}
{"index": 1839, "repo": "spring-test-6.0.11", "code": "package event;\n\npackage event.annotation; // Test execution event annotations for the Spring TestContext Framework.\npublic class AfterTestClassEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.afterTestClass(TestContext) is invoked.\npublic class AfterTestExecutionEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.afterTestExecution(TestContext) is invoked.\npublic class AfterTestMethodEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.afterTestMethod(TestContext) is invoked.\npublic interface ApplicationEvents; // ApplicationEvents encapsulates all application events that were fired during the execution of a single test method.\npublic abstract class ApplicationEventsHolder extends Object; // Holder class to expose the application events published during the execution of a test in the form of a thread-bound ApplicationEvents object.\npublic class ApplicationEventsTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener which provides support for ApplicationEvents.\npublic class BeforeTestClassEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.beforeTestClass(TestContext) is invoked.\npublic class BeforeTestExecutionEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.beforeTestExecution(TestContext) is invoked.\npublic class BeforeTestMethodEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.beforeTestMethod(TestContext) is invoked.\npublic class EventPublishingTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener that publishes test execution events to the ApplicationContext for the currently executing test.\npublic class PrepareTestInstanceEvent extends TestContextEvent; // TestContextEvent published by the EventPublishingTestExecutionListener when TestExecutionListener.prepareTestInstance(TestContext) is invoked.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface RecordApplicationEvents; // @RecordApplicationEvents is a class-level annotation that is used to instruct the Spring TestContext Framework to record all application events that are published in the ApplicationContext during the execution of a single test.\n", "des": "Test event support classes for the Spring TestContext Framework."}
{"index": 1361, "repo": "spring-tx-6.0.11", "code": "package config;\n\npublic class JtaTransactionManagerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the <tx:jta-transaction-manager/> XML configuration element.\n@Deprecated(since=\"6.0\") public class JtaTransactionManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JtaTransactionManager>, org.springframework.beans.factory.InitializingBean;\npublic abstract class TransactionManagementConfigUtils extends Object; // Configuration constants for internal sharing across subpackages.\npublic class TxNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler allowing for the configuration of declarative transaction management using either XML or using annotations.\n", "des": "Support package for declarative transaction configuration, with XML schema being the primary configuration format."}
{"index": 2800, "repo": "spring-amqp-3.0.6", "code": "package postprocessor;\n\npublic abstract class AbstractCompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered; // Base class for post processors that compress the message body.\npublic abstract class AbstractDecompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered; // Base class for post processors that decompress the message body if the MessageProperties.SPRING_AUTO_DECOMPRESS header is true or to optionally always decompress if the content encoding matches AbstractDecompressingPostProcessor.getEncoding(), or starts with AbstractDecompressingPostProcessor.getEncoding() + \":\", in which case the encoding following the colon becomes the final content encoding of the decompressed message.\npublic abstract class AbstractDeflaterPostProcessor extends AbstractCompressingPostProcessor; // Base class for post processors based on Deflater.\npublic class DeflaterPostProcessor extends AbstractDeflaterPostProcessor; // A post processor that uses a DeflaterOutputStream to compress the message body.\npublic class DelegatingDecompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered; // A MessagePostProcessor that delegates to one of its MessagePostProcessors depending on the content encoding.\npublic class GUnzipPostProcessor extends AbstractDecompressingPostProcessor; // A post processor that uses a GZIPInputStream to decompress the message body.\npublic class GZipPostProcessor extends AbstractDeflaterPostProcessor; // A post processor that uses a GZIPOutputStream to compress the message body.\npublic class InflaterPostProcessor extends AbstractDecompressingPostProcessor; // A post processor that uses a InflaterInputStream to decompress the message body.\npublic final class MessagePostProcessorUtils extends Object; // Utilities for message post processors.\npublic class UnzipPostProcessor extends AbstractDecompressingPostProcessor; // A post processor that uses a ZipInputStream to decompress the message body.\npublic class ZipPostProcessor extends AbstractDeflaterPostProcessor; // A post processor that uses a ZipOutputStream to compress the message body.\n", "des": "Package for Spring AMQP message post processors."}
{"index": 679, "repo": "jackson-databind-2.15.2", "code": "package databind;\n\npackage databind.annotation; // Annotations that directly depend on classes in databinding bundle (not just Jackson core) and cannot be included in Jackson core annotations package (because it cannot have any external dependencies).\npackage databind.cfg; // Package that contains most of configuration-related classes; exception being couple of most-commonly used configuration things (like Feature enumerations) that are at the main level (com.fasterxml.jackson.databind).\npackage databind.deser; // Contains implementation classes of deserialization part of data binding.\npackage databind.ext; // Contains extended support for \"external\" packages: things that may or may not be present in runtime environment, but that are commonly enough used so that explicit support can be added.\npackage databind.introspect; // Functionality needed for Bean introspection, required for detecting accessors and mutators for Beans, as well as locating and handling method annotations.\npackage databind.jdk14; // Contains helper class(es) needed to support some of JDK14+ features without requiring running or building using JDK 14.\npackage databind.jsonFormatVisitors; // Classes used for exposing logical structure of POJOs as Jackson sees it, and exposed via ObjectMapper.acceptJsonFormatVisitor(Class, JsonFormatVisitorWrapper) and ObjectMapper.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType, JsonFormatVisitorWrapper) methods.\npackage databind.jsonschema; // Classes needed for JSON schema support (currently just ability to generate schemas using serialization part of data mapping)\npackage databind.jsontype; // Package that contains interfaces that define how to implement functionality for dynamically resolving type during deserialization.\npackage databind.module; // Package that contains classes and interfaces to help implement custom extension Modules (which are registered using ObjectMapper.registerModule(com.fasterxml.jackson.databind.Module).\npackage databind.node; // Contains concrete JsonNode implementations Jackson uses for the Tree model.\npackage databind.ser; // Contains implementation classes of serialization part of data binding.\nInterface AnnotationIntrospector.XmlExtensions; // Add-on extension used for XML-specific configuration, needed to decouple format module functionality from pluggable introspection functionality (especially JAXB-annotation related one).\n", "des": "Basic data binding (mapping) functionality that allows for reading JSON content into Java Objects (POJOs) and JSON Trees (JsonNode), as well as writing Java Objects and trees as JSON."}
{"index": 808, "repo": "lucene-analyzers-common-8.11.2", "code": "package standard;\n\nClass ClassicAnalyzer; // Filters ClassicTokenizer with ClassicFilter, LowerCaseFilter and StopFilter, using a list of English stop words.\nClass ClassicFilter; // Normalizes tokens extracted with ClassicTokenizer.\nClass ClassicFilterFactory; // Factory for ClassicFilter.\nClass ClassicTokenizer; // A grammar-based tokenizer constructed with JFlex\nClass ClassicTokenizerFactory; // Factory for ClassicTokenizer.\nClass StandardTokenizerFactory; // Factory for StandardTokenizer.\nClass UAX29URLEmailAnalyzer; // Filters UAX29URLEmailTokenizer with LowerCaseFilter and StopFilter, using a list of English stop words.\nClass UAX29URLEmailTokenizer; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\nClass UAX29URLEmailTokenizerFactory; // Factory for UAX29URLEmailTokenizer.\nClass UAX29URLEmailTokenizerImpl; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\n", "des": "Fast, general-purpose grammar-based tokenizers."}
{"index": 2860, "repo": "spring-integration-core-6.1.2", "code": "package expression;\n\npublic class ControlBusMethodFilter extends Object implements org.springframework.expression.MethodFilter; // SpEL MethodFilter to restrict method invocations to: Pausable or Lifecycle components get, set and shutdown methods of CustomizableThreadCreator methods with ManagedAttribute and ManagedOperation annotations This class isn't designed for target applications and typically is used from ExpressionControlBusFactoryBean.\npublic class DynamicExpression extends Object implements org.springframework.expression.Expression; // An implementation of Expression that delegates to an ExpressionSource for resolving the actual Expression instance per-invocation at runtime.\npublic final class ExpressionEvalMap extends AbstractMap<String,Object>; // An immutable AbstractMap implementation that wraps a Map<String, Object>, where values must be instances of String or Expression, and evaluates an expression for the provided key from the underlying original Map.\npublic static class ExpressionEvalMap.ComponentsEvaluationCallback extends Object implements ExpressionEvalMap.EvaluationCallback; // The ExpressionEvalMap.EvaluationCallback implementation which evaluates an expression using the provided context, root and returnType variables.\n@FunctionalInterface public static interface ExpressionEvalMap.EvaluationCallback; // Implementations of this interface can be provided to build 'on demand ExpressionEvalMap.get(Object) logic' for ExpressionEvalMap.\npublic static final class ExpressionEvalMap.ExpressionEvalMapBuilder extends Object; // The builder class to instantiate ExpressionEvalMap.\npublic static interface ExpressionEvalMap.ExpressionEvalMapComponentsBuilder extends ExpressionEvalMap.ExpressionEvalMapFinalBuilder;\n@FunctionalInterface public static interface ExpressionEvalMap.ExpressionEvalMapFinalBuilder;\n@FunctionalInterface public interface ExpressionSource; // Strategy interface for retrieving Expressions.\npublic final class ExpressionUtils extends Object; // Utility class with static methods for helping with evaluation of SpEL expressions.\npublic class FunctionExpression<S> extends Object implements org.springframework.expression.Expression; // An Expression that simply invokes Function.apply(Object) on its provided Function.\npublic class ReloadableResourceBundleExpressionSource extends Object implements ExpressionSource, org.springframework.context.ResourceLoaderAware; // ExpressionSource implementation that accesses resource bundles using specified basenames.\npublic class SpelPropertyAccessorRegistrar extends Object; // Utility class that keeps track of a Set of SpEL PropertyAccessors in order to register them with the \"integrationEvaluationContext\" upon initialization.\n", "des": "Provides classes supporting SpEL expressions."}
{"index": 431, "repo": "kafka-streams-3.5.0", "code": "package kstream;\n\nInterface Aggregator<K,V,VA>; // The Aggregator interface for aggregating values of the given key.\nInterface BranchedKStream<K,V>; // Branches the records in the original stream based on the predicates supplied for the branch definitions.\nInterface CogroupedKStream<K,VOut>; // CogroupedKStream is an abstraction of multiple grouped record streams of KeyValue pairs.\nInterface EmitStrategy; // This interface controls the strategy that can be used to control how we emit results in a processor.\nInterface ForeachAction<K,V>; // The ForeachAction interface for performing an action on a key-value pair.\nInterface GlobalKTable<K,V>; // GlobalKTable is an abstraction of a changelog stream from a primary-keyed table.\nInterface Initializer<VA>; // The Initializer interface for creating an initial value in aggregations.\nInterface KeyValueMapper<K,V,VR>; // The KeyValueMapper interface for mapping a key-value pair to a new value of arbitrary type.\nInterface KGroupedStream<K,V>; // KGroupedStream is an abstraction of a grouped record stream of KeyValue pairs.\nInterface KGroupedTable<K,V>; // KGroupedTable is an abstraction of a re-grouped changelog stream from a primary-keyed table, usually on a different grouping key than the original primary key.\nInterface KStream<K,V>; // KStream is an abstraction of a record stream of KeyValue pairs, i.e., each record is an independent entity/event in the real world.\nInterface KTable<K,V>; // KTable is an abstraction of a changelog stream from a primary-keyed table.\nInterface Merger<K,V>; // The interface for merging aggregate values for SessionWindows with the given key.\nInterface Predicate<K,V>; // The Predicate interface represents a predicate (boolean-valued function) of a KeyValue pair.\nInterface Reducer<V>; // The Reducer interface for combining two values of the same type into a new value.\nInterface SessionWindowedCogroupedKStream<K,V>; // SessionWindowedCogroupKStream is an abstraction of a windowed record stream of KeyValue pairs.\n", "des": "Provides a high-level programming model (DSL) to express a (stateful) data flow computation over input streams and tables."}
{"index": 3574, "repo": "lucene-sandbox-9.7.0", "code": "package idversion;\n\nClass IDVersionPostingsFormat; // A PostingsFormat optimized for primary-key (ID) fields that also record a version (long) for each ID, delivered as a payload created by IDVersionPostingsFormat.longToBytes(long, org.apache.lucene.util.BytesRef) during indexing.\nClass IDVersionSegmentTermsEnum; // Iterates through terms in this field; this class is public so users can cast it to call IDVersionSegmentTermsEnum.seekExact(BytesRef, long) for optimistic-concurrency, and also IDVersionSegmentTermsEnum.getVersion() to get the version of the currently seek'd term.\nClass VersionBlockTreeTermsReader; // See VersionBlockTreeTermsWriter.\nClass VersionBlockTreeTermsWriter; // This is just like Lucene90BlockTreeTermsWriter, except it also stores a version per term, and adds a method to its TermsEnum implementation to seekExact only if the version is >= the specified version.\n", "des": "A primary-key postings format that associates a version (long) with each term and can provide fail-fast lookups by ID and version."}
{"index": 2819, "repo": "spring-orm-6.0.11", "code": "package support;\n\npublic abstract class HibernateDaoSupport extends org.springframework.dao.support.DaoSupport; // Convenient superclass for Hibernate-based data access objects.\npublic class OpenSessionInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.InitializingBean; // Simple AOP Alliance MethodInterceptor implementation that binds a new Hibernate Session for each method invocation, if none bound before.\npublic class OpenSessionInViewFilter extends org.springframework.web.filter.OncePerRequestFilter; // Servlet Filter that binds a Hibernate Session to the thread for the entire processing of the request.\npublic class OpenSessionInViewInterceptor extends Object implements org.springframework.web.context.request.AsyncWebRequestInterceptor; // Spring web request interceptor that binds a Hibernate Session to the thread for the entire processing of the request.\n", "des": "Classes supporting the org.springframework.orm.hibernate5 package."}
{"index": 3046, "repo": "spring-web-6.0.11", "code": "package session;\n\npublic class CookieWebSessionIdResolver extends Object implements WebSessionIdResolver; // Cookie-based WebSessionIdResolver.\npublic class DefaultWebSessionManager extends Object implements WebSessionManager; // Default implementation of WebSessionManager delegating to a WebSessionIdResolver for session id resolution and to a WebSessionStore.\npublic class HeaderWebSessionIdResolver extends Object implements WebSessionIdResolver; // Request and response header-based WebSessionIdResolver.\npublic class InMemoryWebSessionStore extends Object implements WebSessionStore; // Simple Map-based storage for WebSession instances.\npublic interface WebSessionIdResolver; // Contract for session ID resolution strategies.\npublic interface WebSessionManager; // Main class for access to the WebSession for an HTTP request.\npublic interface WebSessionStore; // Strategy for WebSession persistence.\n", "des": "Auxiliary interfaces and implementation classes for WebSession support."}
{"index": 29, "repo": "commons-collections4-4.4", "code": "package set;\n\nInterface CompositeSet.SetMutator<E>; // Define callbacks for mutation operations.\nClass AbstractNavigableSetDecorator<E>; // Decorates another NavigableSet to provide additional behaviour.\nClass AbstractSerializableSetDecorator<E>; // Serializable subclass of AbstractSetDecorator.\nClass AbstractSetDecorator<E>; // Decorates another Set to provide additional behaviour.\nClass AbstractSortedSetDecorator<E>; // Decorates another SortedSet to provide additional behaviour.\nClass CompositeSet<E>; // Decorates a set of other sets to provide a single unified view.\nClass ListOrderedSet<E>; // Decorates another Set to ensure that the order of addition is retained and used by the iterator.\nClass MapBackedSet<E,V>; // Decorates a Map to obtain Set behaviour.\nClass PredicatedNavigableSet<E>; // Decorates another NavigableSet to validate that all additions match a specified predicate.\nClass PredicatedSet<E>; // Decorates another Set to validate that all additions match a specified predicate.\nClass PredicatedSortedSet<E>; // Decorates another SortedSet to validate that all additions match a specified predicate.\nClass TransformedNavigableSet<E>; // Decorates another NavigableSet to transform objects that are added.\nClass TransformedSet<E>; // Decorates another Set to transform objects that are added.\nClass TransformedSortedSet<E>; // Decorates another SortedSet to transform objects that are added.\nClass UnmodifiableNavigableSet<E>; // Decorates another NavigableSet to ensure it can't be altered.\nClass UnmodifiableSet<E>; // Decorates another Set to ensure it can't be altered.\nClass UnmodifiableSortedSet<E>; // Decorates another SortedSet to ensure it can't be altered.\n", "des": "This package contains implementations of the Set, SortedSet and NavigableSet interfaces."}
{"index": 1230, "repo": "spring-hateoas-2.1.2", "code": "package config;\n\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import({org.springframework.hateoas.config.HypermediaConfigurationImportSelector.class,HateoasConfiguration.class,org.springframework.hateoas.config.WebStackImportSelector.class}) public @interface EnableHypermediaSupport; // Activates hypermedia support in the ApplicationContext.\npublic static enum EnableHypermediaSupport.HypermediaType extends Enum<EnableHypermediaSupport.HypermediaType>; // Hypermedia representation types supported.\n@Configuration(proxyBeanMethods=false) @EnablePluginRegistries(LinkDiscoverer.class) public class HateoasConfiguration extends Object; // Common HATEOAS specific configuration.\npublic interface HypermediaMappingInformation; // Interface for registering custom hypermedia handlers.\npublic class HypermediaRestTemplateConfigurer extends Object; // Assembles hypermedia-based message converters and applies them to an existing RestTemplate.\npublic class HypermediaWebClientConfigurer extends Object; // Assembles Jackson2JsonEncoders and Jackson2JsonDecoders needed to wire a WebClient with hypermedia support.\npublic class HypermediaWebTestClientConfigurer extends Object implements WebTestClientConfigurer; // Assembles Jackson2JsonEncoders and Jackson2JsonDecoders needed to wire a WebTestClient with hypermedia support.\npublic interface MediaTypeConfigurationProvider; // SPI used to register internal media types through spring.factories.\npublic class WebConverters extends Object; // Value type to handle registration of hypermedia related HttpMessageConverters.\n", "des": "Spring container configuration support."}
{"index": 860, "repo": "calcite-core-1.34.0", "code": "package ddl;\n\nClass SqlAttributeDefinition; // Parse tree for SqlAttributeDefinition, which is part of a SqlCreateType.\nClass SqlCheckConstraint; // Parse tree for UNIQUE, PRIMARY KEY constraints.\nClass SqlColumnDeclaration; // Parse tree for UNIQUE, PRIMARY KEY constraints.\nClass SqlCreateForeignSchema; // Parse tree for CREATE FOREIGN SCHEMA statement.\nClass SqlCreateFunction; // Parse tree for CREATE FUNCTION statement.\nClass SqlCreateMaterializedView; // Parse tree for CREATE MATERIALIZED VIEW statement.\nClass SqlCreateSchema; // Parse tree for CREATE SCHEMA statement.\nClass SqlCreateTable; // Parse tree for CREATE TABLE statement.\nClass SqlCreateType; // Parse tree for CREATE TYPE statement.\nClass SqlCreateView; // Parse tree for CREATE VIEW statement.\nClass SqlDdlNodes; // Utilities concerning SqlNode for DDL.\nClass SqlDropFunction; // Parse tree for DROP FUNCTION statement.\nClass SqlDropMaterializedView; // Parse tree for DROP MATERIALIZED VIEW statement.\nClass SqlDropObject; // Base class for parse trees of DROP TABLE, DROP VIEW, DROP MATERIALIZED VIEW and DROP TYPE statements.\nClass SqlDropSchema; // Parse tree for DROP SCHEMA statement.\nClass SqlDropTable; // Parse tree for DROP TABLE statement.\nClass SqlDropType; // Parse tree for DROP TYPE statement.\nClass SqlDropView; // Parse tree for DROP VIEW statement.\nClass SqlKeyConstraint; // Parse tree for UNIQUE, PRIMARY KEY constraints.\nEnum SqlDdlNodes.FileType; // File type for CREATE FUNCTION.\n", "des": "Parse tree for SQL DDL statements."}
{"index": 2755, "repo": "spring-beans-6.0.11", "code": "package factory;\n\npackage factory.annotation; // Support package for annotation-driven bean configuration.\npackage factory.aot; // AOT support for bean factories.\npackage factory.config; // SPI interfaces and configuration-related convenience classes for bean factories.\npackage factory.groovy; // Support package for Groovy-based bean definitions.\npackage factory.parsing; // Support infrastructure for bean definition parsing.\npackage factory.serviceloader; // Support package for the Java ServiceLoader facility.\npackage factory.support; // Classes supporting the org.springframework.beans.factory package.\npackage factory.wiring; // Mechanism to determine bean wiring metadata from a bean instance.\npackage factory.xml; // Contains an abstract XML-based BeanFactory implementation, including a standard \"spring-beans\" XSD.\npublic interface Aware; // A marker superinterface indicating that a bean is eligible to be notified by the Spring container of a particular framework object through a callback-style method.\npublic interface BeanClassLoaderAware extends Aware; // Callback that allows a bean to be aware of the bean class loader; that is, the class loader used by the present bean factory to load bean classes.\npublic class BeanCreationException extends FatalBeanException; // Exception thrown when a BeanFactory encounters an error when attempting to create a bean from a bean definition.\npublic class BeanCreationNotAllowedException extends BeanCreationException; // Exception thrown in case of a bean being requested despite bean creation currently not being allowed (for example, during the shutdown phase of a bean factory).\npublic class BeanCurrentlyInCreationException extends BeanCreationException; // Exception thrown in case of a reference to a bean that's currently in creation.\npublic class BeanDefinitionStoreException extends FatalBeanException; // Exception thrown when a BeanFactory encounters an invalid bean definition: e.g.\npublic class BeanExpressionException extends FatalBeanException; // Exception that indicates an expression evaluation attempt having failed.\npublic interface BeanFactory; // The root interface for accessing a Spring bean container.\npublic interface BeanFactoryAware extends Aware; // Interface to be implemented by beans that wish to be aware of their owning BeanFactory.\npublic abstract class BeanFactoryUtils extends Object; // Convenience methods operating on bean factories, in particular on the ListableBeanFactory interface.\n", "des": "The core package implementing Spring's lightweight Inversion of Control (IoC) container."}
{"index": 3332, "repo": "opencms-core-15.0", "code": "package edit;\n\nClass CmsEditModuleForm; // Form for editing a module.\nClass CmsExportPointWidget; // Widget used to edit a module export point.\nClass CmsModuleDependencyWidget; // Widget used to edit a module dependency.\nClass CmsModuleResourceSelectField; // A widget for selecting a module resource.\nClass CmsSiteSelectorNewValueHandler; // Helper class used when new options are automatically added to a site selector combo box.\n", "des": "Contains classes of the module manager app used to edit modules."}
{"index": 3335, "repo": "opencms-core-15.0", "code": "package scheduler;\n\nClass CmsJobBean; // Don't use CmsScheduledJobInfo directly, so we don't need to change it if we want to change how the values are rendered, and having only the fields we want displayed in the table makes it easier to understand.\nClass CmsJobEditView; // Form used to edit a scheduled job.\nClass CmsJobManagerApp; // The scheduled jobs manager app.\nClass CmsJobTable; // Table used to display scheduled jobs, together with buttons for modifying the jobs.\nClass CmsScheduledJobsAppConfig; // App configuration for the job scheduler.\nEnum CmsJobTable.TableProperty; // Property columns of table, including their Messages for header.\n", "des": "The scheduled jobs manager app classes."}
{"index": 2868, "repo": "spring-integration-core-6.1.2", "code": "package json;\n\npublic class JsonNodeWrapperToJsonNodeConverter extends Object implements org.springframework.core.convert.converter.GenericConverter; // The Converter implementation for the conversion of JsonPropertyAccessor.JsonNodeWrapper to JsonNode, when the JsonPropertyAccessor.JsonNodeWrapper can be a result of the expression for JSON in case of the JsonPropertyAccessor usage.\npublic final class JsonPathUtils extends Object; // Utility class to JsonPathUtils.evaluate(java.lang.Object, java.lang.String, com.jayway.jsonpath.Predicate...) a jsonPath on the provided object.\npublic class JsonPropertyAccessor extends Object implements org.springframework.expression.PropertyAccessor; // A SpEL PropertyAccessor that knows how to read properties from JSON objects.\npublic class JsonToObjectTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware; // Transformer implementation that converts a JSON string payload into an instance of the provided target Class.\npublic class ObjectToJsonTransformer extends AbstractTransformer; // Transformer implementation that converts a payload instance into a JSON string representation.\npublic static enum ObjectToJsonTransformer.ResultType extends Enum<ObjectToJsonTransformer.ResultType>;\npublic final class SimpleJsonSerializer extends Object; // Extremely simple JSON serializer.\n", "des": "Provides classes supporting JSON in Spring Integration."}
{"index": 938, "repo": "spring-ws-3.0.10.RELEASE", "code": "package ws;\n\npackage ws.client; // Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access.\npackage ws.config; // Provides an namespace handler for the Spring Web Services namespace.\npackage ws.context; // Contains the MessageContext interface and implementations thereof.\npackage ws.mime; // Provides MIME functionality for use the Spring Web Services framework.\npackage ws.pox; // Provides the Plain Old XML (POX) functionality of the Spring Web Services framework.\npackage ws.server; // Contains classes for server-side Spring-WS support.\npackage ws.soap; // Provides the SOAP functionality of the Spring Web Services framework.\npackage ws.support; // Provides general helper classes for Spring Web Services.\npackage ws.transport; // Contains the TransportRequest and TransportResponse interfaces.\npackage ws.wsdl; // Provides the WSDL functionality of the Spring Web Services framework.\nInterface FaultAwareWebServiceMessage; // Sub-interface of WebServiceMessage that can contain special Fault messages.\nInterface WebServiceMessage; // Represents a protocol-agnostic XML message.\nInterface WebServiceMessageFactory; // The WebServiceMessageFactory serves as a factory for WebServiceMessages.\nClass InvalidXmlException; // Exception thrown when a WebServiceMessageFactory cannot parse the XML passed on to WebServiceMessageFactory.createWebServiceMessage(java.io.InputStream).\nClass NoEndpointFoundException; // Exception thrown when an endpoint cannot be resolved for an incoming message request.\nClass WebServiceException; // Root of the hierarchy of Web Service exceptions.\nClass WebServiceMessageException; // Base class for all web service message exceptions.\n", "des": "Provides the core functionality of the Spring Web Services framework."}
{"index": 460, "repo": "camel-core-3.0.0-RC1", "code": "package cluster;\n\nInterface ClusteredRouteFilter;\nClass ClusteredRouteConfiguration;\nClass ClusteredRouteController;\nClass ClusteredRouteFilters;\nClass ClusteredRouteFilters.BlackList;\nClass ClusteredRouteFilters.IsAutoStartup;\nClass ClusteredRoutePolicy;\nClass ClusteredRoutePolicyFactory;\n", "des": "Base classes and implementation for Camel Cluster"}
{"index": 3765, "repo": "lucene-analysis-common-9.7.0", "code": "package br;\n\nClass BrazilianAnalyzer; // Analyzer for Brazilian Portuguese language.\nClass BrazilianStemFilter; // A TokenFilter that applies BrazilianStemmer.\nClass BrazilianStemFilterFactory; // Factory for BrazilianStemFilter.\nClass BrazilianStemmer; // A stemmer for Brazilian Portuguese words.\n", "des": "Analyzer for Brazilian Portuguese."}
{"index": 1244, "repo": "spring-hateoas-2.1.2", "code": "package support;\n\npublic class ClassUtils extends Object;\npublic enum WebStack extends Enum<WebStack>; // Utility to glean what web stack is currently available.\n", "des": "Support utilities for hypermedia handling."}
{"index": 2120, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package dsl;\n\npublic class SpringBootExtension extends Object; // Entry point to Spring Boot's Gradle DSL.\n", "des": "Spring Boot Gradle DSL."}
{"index": 2177, "repo": "spring-security-web-6.1.2", "code": "package authentication;\n\npackage authentication.logout; // Logout functionality based around a filter which handles a specific logout URL.\npackage authentication.preauth; // Support for \"pre-authenticated\" scenarios, where Spring Security assumes the incoming request has already been authenticated by some externally configured system.\npackage authentication.rememberme; // Support for remembering a user between different web sessions.\npackage authentication.session; // Strategy interface and implementations for handling session-related behaviour for a newly authenticated user.\npackage authentication.switchuser; // Provides HTTP-based \"switch user\" (su) capabilities.\npackage authentication.ui; // Authentication user-interface rendering code.\npackage authentication.www; // WWW-Authenticate based authentication mechanism implementations: Basic and Digest authentication.\npublic abstract class AbstractAuthenticationProcessingFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware; // Abstract processor of browser-based HTTP-based authentication requests.\npublic abstract class AbstractAuthenticationTargetUrlRequestHandler extends Object; // Base class containing the logic used by strategies which handle redirection to a URL and are passed an Authentication object as part of the contract.\npublic class AnonymousAuthenticationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.beans.factory.InitializingBean; // Detects if there is no Authentication object in the SecurityContextHolder, and populates it with one if needed.\npublic interface AuthenticationConverter; // A strategy used for converting from a HttpServletRequest to an Authentication of particular type.\npublic class AuthenticationEntryPointFailureHandler extends Object implements AuthenticationFailureHandler; // Adapts a AuthenticationEntryPoint into a AuthenticationFailureHandler\npublic interface AuthenticationFailureHandler; // Strategy used to handle a failed authentication attempt.\npublic class AuthenticationFilter extends org.springframework.web.filter.OncePerRequestFilter; // A Filter that performs authentication of a particular request.\npublic interface AuthenticationSuccessHandler; // Strategy used to handle a successful user authentication.\npublic class DelegatingAuthenticationEntryPoint extends Object implements AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean; // An AuthenticationEntryPoint which selects a concrete AuthenticationEntryPoint based on a RequestMatcher evaluation.\n", "des": "Authentication processing mechanisms, which respond to the submission of authentication credentials using various protocols (eg BASIC, CAS, form login etc)."}
{"index": 3190, "repo": "tomcat-api-10.1", "code": "package bcel;\n\npackage bcel.classfile; // This package contains the classes that describe the structure of a Java class file and a class file parser.\nClass Const; // Constants for the project, mostly defined in the JVM specification.\n", "des": "This package contains basic classes for the Byte Code Engineering Library and constants defined by the JVM specification."}
{"index": 443, "repo": "lucene-analyzers-icu-8.11.2", "code": "package icu;\n\npackage icu.segmentation; // Tokenizer that breaks text into words with the Unicode Text Segmentation algorithm.\npackage icu.tokenattributes; // Additional ICU-specific Attributes for text analysis.\nClass ICUFoldingFilter; // A TokenFilter that applies search term folding to Unicode text, applying foldings from UTR#30 Character Foldings.\nClass ICUFoldingFilterFactory; // Factory for ICUFoldingFilter.\nClass ICUNormalizer2CharFilter; // Normalize token text with ICU's Normalizer2.\nClass ICUNormalizer2CharFilterFactory; // Factory for ICUNormalizer2CharFilter\nClass ICUNormalizer2Filter; // Normalize token text with ICU's Normalizer2\nClass ICUNormalizer2FilterFactory; // Factory for ICUNormalizer2Filter\nClass ICUTransformFilter; // A TokenFilter that transforms text with ICU.\nClass ICUTransformFilterFactory; // Factory for ICUTransformFilter.\n", "des": "Analysis components based on ICU"}
{"index": 948, "repo": "spring-ws-3.0.10.RELEASE", "code": "package pox;\n\npackage pox.dom; // Contains an implementation of the POX interfaces that is based on DOM.\nInterface PoxMessage; // Defines the contract for Plain Old XML messages.\nClass PoxMessageException; // Specific subclass of WebServiceMessageException for Plain Old XML messages.\n", "des": "Provides the Plain Old XML (POX) functionality of the Spring Web Services framework."}
{"index": 2747, "repo": "spring-batch-infrastructure-5.0.2", "code": "package exception;\n\npublic class CompositeExceptionHandler extends Object implements ExceptionHandler; // Composite ExceptionHandler that loops though a list of delegates.\npublic class DefaultExceptionHandler extends Object implements ExceptionHandler; // Default implementation of ExceptionHandler - just re-throws the exception it encounters.\n@FunctionalInterface public interface ExceptionHandler; // Handler to allow strategies for re-throwing exceptions.\npublic class LogOrRethrowExceptionHandler extends Object implements ExceptionHandler; // Implementation of ExceptionHandler based on an Classifier.\npublic static enum LogOrRethrowExceptionHandler.Level extends Enum<LogOrRethrowExceptionHandler.Level>; // Logging levels for the handler.\npublic class RethrowOnThresholdExceptionHandler extends Object implements ExceptionHandler; // Implementation of ExceptionHandler that rethrows when exceptions of a given type reach a threshold.\npublic class SimpleLimitExceptionHandler extends Object implements ExceptionHandler, org.springframework.beans.factory.InitializingBean; // Simple implementation of exception handler which looks for given exception types.\n", "des": "Infrastructure implementations of repeat exception handler concerns."}
{"index": 271, "repo": "nutch-2.4", "code": "package lang;\n\nClass HTMLLanguageParser; // Adds metadata identifying language of document if found We could also run statistical analysis here but we'd miss all other formats\nClass LanguageIndexingFilter; // An IndexingFilter that adds a lang (language) field to the document.\n", "des": "Text document language identifier."}
{"index": 3411, "repo": "commons-imaging-1.0-alpha3", "code": "package floatingpoint;\n\nInterface PaletteEntry; // Defines an interface for specifying color assignments to floating point values.\nClass PaletteEntryForRange; // Provides a palette entry for colors associated with a range of values.\nClass PaletteEntryForValue; // Provides a palette entry for a color assignment to a single value.\nClass PhotometricInterpreterFloat; // Implements a custom photometric interpreter that can be supplied by applications in order to render Java images from real-valued TIFF data products.\n", "des": "Provides supplemental photometric interpreters for TIFF products based on floating-point data."}
{"index": 1793, "repo": "spring-integration-file-6.1.2", "code": "package splitter;\n\npublic class FileSplitter extends org.springframework.integration.splitter.AbstractMessageSplitter; // The AbstractMessageSplitter implementation to split the File Message payload to lines.\npublic static class FileSplitter.FileMarker extends Object implements Serializable;\npublic static enum FileSplitter.FileMarker.Mark extends Enum<FileSplitter.FileMarker.Mark>;\n", "des": "Provides implementations of AbstractMessageSplitter."}
{"index": 982, "repo": "spring-ws-3.0.10.RELEASE", "code": "package server;\n\npackage server.endpoint; // Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP.\nInterface SmartSoapEndpointInterceptor; // SOAP-specific extension of the SmartEndpointInterceptor interface.\nInterface SoapEndpointInterceptor; // SOAP-specific extension of the EndpointInterceptor interface.\nInterface SoapEndpointMapping; // SOAP-specific sub-interface of the EndpointMapping.\nClass SoapEndpointInvocationChain; // SOAP-specific subclass of the EndpointInvocationChain.\nClass SoapMessageDispatcher; // SOAP-specific subclass of the MessageDispatcher.\n", "des": "Contains classes for SOAP-specific server-side Spring-WS support."}
{"index": 208, "repo": "nutch-2.4", "code": "package elastic;\n\nInterface ElasticConstants;\nClass ElasticIndexWriter;\n", "des": "Index writer plugin for Elasticsearch."}
{"index": 1815, "repo": "spring-integration-mail-6.1.2", "code": "package config;\n\npublic class ImapIdleChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Parser for the <imap-idle-channel-adapter> element in the 'mail' namespace.\npublic class MailHeaderEnricherParser extends org.springframework.integration.config.xml.HeaderEnricherParserSupport;\npublic class MailInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <inbound-channel-adapter> element of Spring Integration's 'mail' namespace.\npublic class MailNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for the 'mail' namespace.\npublic class MailOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> element of the 'mail' namespace.\npublic class MailReceiverFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<MailReceiver>;\npublic class MailToStringTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Parser for the <mail-to-string-transformer> element.\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 2797, "repo": "spring-amqp-3.0.6", "code": "package event;\n\npublic abstract class AmqpEvent extends org.springframework.context.ApplicationEvent; // Base class for events.\n", "des": "Classes related to application events"}
{"index": 3294, "repo": "opencms-core-15.0", "code": "package loader;\n\nInterface I_CmsFileNameGenerator; // Provides methods to generate file names either for the urlName mapping or when using a \"new\" operation in the context of the direct edit interface.\nInterface I_CmsFlexCacheEnabledLoader; // Resource loaders that implement this interface are flex cache enabled.\nInterface I_CmsResourceLoader; // This interface describes a resource loader for OpenCms, a class that can load a resource from the VFS, process it's contents and deliver the result to the user.\nInterface I_CmsResourceStringDumpLoader; // Resource loaders that implement this method can easily provide the contents of a selected targe element as a String.\nInterface I_CmsTemplateContextProvider; // Interface for template context providers.\nClass CmsClientVariant; // Bean that represents a client variant of a template context.\nClass CmsDefaultFileNameGenerator; // The default class used for generating file names either for the urlName mapping or when using a \"new\" operation in the context of the direct edit interface.\nClass CmsDefaultTemplateContextProvider; // Example implementation of a template context provider for deciding between a desktop template and a mobile template.\nClass CmsDumpLoader; // Dump loader for binary or other unprocessed resource types.\nClass CmsImageLoader; // Loader for images from the OpenCms VSF with integrated image scaling and processing capabilities.\nClass CmsImageScaler; // Creates scaled images, acting as it's own parameter container.\nClass CmsJsonMessageContainer; // Simple JSON-based message container.\nClass CmsJspLoader; // The JSP loader which enables the execution of JSP in OpenCms.\nClass CmsMacroFormatterLoader; // Loader for macro formatter.\nClass CmsMimeType; // Describes a MIME type configured in OpenCms.\nClass CmsPointerLoader; // Loader for \"pointers\" to resources in the VFS or to external resources.\nClass CmsRedirectLoader; // Loader for HTML redirects.\nClass CmsResourceManager; // Collects all available resource loaders, resource types and resource collectors at startup and provides methods to access them during OpenCms runtime.\nClass CmsResourceManager.NamedTemplate; // Bean containing a template resource and the name of the template.\nClass CmsSeoFileLoader; // The SEO file loader.\nClass CmsTemplateContext; // A template context is basically a named path to a template JSP, which has both an internal name used as a key, and a user-readable, localizable name.\n", "des": "Low-level functions to manage the loading of resources from the OpenCms VFS."}
{"index": 2663, "repo": "spring-data-cassandra-4.1.2", "code": "package repository;\n\npackage repository.cdi; // CDI support for Apache Cassandra specific repository implementation.\npackage repository.config; // Support infrastructure for the configuration of Apache Cassandra specific repositories.\npackage repository.query; // Query derivation mechanism for Apache Cassandra specific repositories.\npackage repository.support; // Support infrastructure for query derivation of Apache Cassandra specific repositories.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(allowFiltering=true) public @interface AllowFiltering; // Annotation to declare filtering for a derived query.\n@NoRepositoryBean public interface CassandraRepository<T,ID> extends ListCrudRepository<T,ID>; // Cassandra-specific extension of the CrudRepository interface that allows the specification of a type for the identity of the @Table (or @Persistable) type.\n@Documented @Target({ANNOTATION_TYPE,METHOD}) @Retention(RUNTIME) public @interface Consistency; // Annotation to declare a ConsistencyLevel for CQL queries executed through query methods.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(count=true) public @interface CountQuery; // Annotation to declare count queries directly on repository methods.\n@Documented @Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Query(exists=true) public @interface ExistsQuery; // Annotation to declare exists queries directly on repository methods.\n@NoRepositoryBean public interface MapIdCassandraRepository<T> extends CassandraRepository<T,MapId>; // Cassandra repository interface using MapId to represent Ids.\n@Documented @Target({ANNOTATION_TYPE,METHOD}) @Retention(RUNTIME) public @interface Query; // Annotation to declare finder queries directly on repository methods.\npublic static enum Query.Idempotency extends Enum<Query.Idempotency>; // Enumeration to define statement idempotency.\n@NoRepositoryBean public interface ReactiveCassandraRepository<T,ID> extends ReactiveCrudRepository<T,ID>; // Cassandra specific Repository interface with reactive support.\n", "des": "Apache Cassandra specific repository implementation."}
{"index": 1019, "repo": "commons-email-1.5", "code": "package mail;\n\npackage mail.resolver; // Contains implementation classes to resolve data sources from the following locations: class path file system URL\npackage mail.util; // This package provides some utility classes.\nInterface DataSourceResolver; // Creates a DataSource based on an URL.\nClass ByteArrayDataSource; // since 1.4, use ByteArrayDataSource instead\nClass DefaultAuthenticator; // This is a very simple authentication object that can be used for any transport needing basic userName and password type authentication.\nClass Email; // The base class for all email messages.\nClass EmailAttachment; // This class models an email attachment.\nClass EmailConstants; // Constants used by Email classes.\nClass HtmlEmail; // An HTML multipart email.\nClass ImageHtmlEmail; // Small wrapper class on top of HtmlEmail which encapsulates the required logic to retrieve images that are contained in \"<img src=..\nClass MultiPartEmail; // A multipart email.\nClass SimpleEmail; // This class is used to send simple internet email messages without attachments.\nClass EmailException; // Exception thrown when a checked error occurs in commons-email.\n", "des": "Commons-Email aims to provide a API for sending email."}
{"index": 515, "repo": "commons-vfs2-2.9.0", "code": "package provider;\n\npackage provider.bzip2; // The BZIP2 File Provider\npackage provider.compressed; // The compressed file provider\npackage provider.ftp; // The FTP File Provider.\npackage provider.ftps; // The FTPS File Provider.\npackage provider.gzip; // The GZIP File Provider\npackage provider.hdfs; // The HDFS File Provider\npackage provider.http; // The HTTP File Provider\npackage provider.http4; // The HTTP4 File Provider\npackage provider.http4s; // The HTTP4S File Provider\npackage provider.http5; // The HTTP5 File Provider\npackage provider.http5s; // The HTTP5S File Provider\npackage provider.https; // The HTTPS File Provider\npackage provider.jar; // The Jar File Provider.\npackage provider.local; // The Local File Provider.\npackage provider.ram; // The RAM File Provider.\npackage provider.res; // The Resource File Provider\npackage provider.sftp; // The SFTP Provider.\npackage provider.tar; // The Tar File Provider.\npackage provider.temp; // The Temporary Filespace Provider.\npackage provider.url; // The Default File Provider, which wraps java.net.URL.\npackage provider.zip; // The Zip File Provider.\nInterface FileNameParser; // Provides methods to parse a file name into a FileName.\nInterface FileProvider; // A file provider.\nInterface FileReplicator; // Responsible for making local replicas of files.\nInterface LocalFileProvider; // A file provider which handles local files.\nInterface TemporaryFileStore; // Manages a repository of temporary local files.\nInterface VfsComponent; // This interface is used to manage the lifecycle of all VFS components.\nInterface VfsComponentContext; // Allows VFS components to access the services they need, such as the file replicator.\nClass AbstractFileName; // A default file name implementation.\nClass AbstractFileNameParser; // Provides methods to parse a file name into a FileName.\nClass AbstractFileObject<AFS extends AbstractFileSystem>; // A partial file object implementation.\nClass AbstractFileProvider; // A partial FileProvider implementation.\nClass AbstractFileSystem; // A partial FileSystem implementation.\nClass AbstractLayeredFileProvider; // A FileProvider that is layered on top of another, such as the contents of a zip or tar file.\n", "des": "The File Provider API, and utility classes."}
{"index": 1338, "repo": "groovy-all-4.0.13", "code": "package metaclass;\n\npublic final class ClosureMetaClass extends MetaClassImpl; // A metaclass for closures generated by the Groovy compiler.\npublic class ClosureMetaMethod extends MetaMethod implements ClosureInvokingMethod; // A MetaMethod that accepts a closure in the constructor which is invoked when the MetaMethod is called.\npublic class ClosureStaticMetaMethod extends MetaMethod implements ClosureInvokingMethod; // This class represents a MetaMethod that is a closure that pretends to be a static method.\npublic class ConcurrentReaderHashMap extends AbstractMap implements Cloneable, Serializable; // A hash table that supports mostly-concurrent reading, but exclusive writing.\nprotected static class ConcurrentReaderHashMap.BarrierLock extends Object implements Serializable; // A Serializable class for barrier lock\nprotected static class ConcurrentReaderHashMap.Entry extends Object implements Map.Entry; // ConcurrentReaderHashMap collision list entry.\npublic class DefaultMetaClassInfo extends Object; // WARNING: This class is for internal use only! We use this class to store information about if a default MetaClass is used for certain primitives.\npublic static class DefaultMetaClassInfo.ConstantMetaClassVersioning extends Object;\npublic class MetaClassRegistryImpl extends Object implements MetaClassRegistry; // A registry of MetaClass instances which caches introspection and reflection information and allows methods to be dynamically added to existing classes at runtime\npublic class MetaMethodIndex extends Object;\npublic static class MetaMethodIndex.CacheEntry extends Object;\npublic static class MetaMethodIndex.Entry extends Object;\npublic static interface MetaMethodIndex.EntryIterator;\npublic static class MetaMethodIndex.Header extends Object;\npublic class MethodHelper extends Object; // Some reflection helper methods\npublic class MethodMetaProperty extends MetaProperty; // Wrapper for a method for a property get or set.\npublic static class MethodMetaProperty.GetBeanMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property getter.\npublic static class MethodMetaProperty.GetMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property get.\npublic class MethodSelectionException extends GroovyRuntimeException; // This exception is thrown if the runtime is unable to select a method.\npublic class MissingMethodExceptionNoStack extends MissingMethodException;\npublic class MissingMethodExecutionFailed extends MissingMethodExceptionNoStack; // A stack less exception used to indicate, that the execution of a missingMethod method failed with a MissingMethodException.\npublic class MissingPropertyExceptionNoStack extends MissingPropertyException;\n", "des": "Internal classes related to Groovy's metaclass implementation."}
{"index": 3825, "repo": "lucene-analysis-common-9.7.0", "code": "package wikipedia;\n\nClass WikipediaTokenizer; // Extension of StandardTokenizer that is aware of Wikipedia syntax.\nClass WikipediaTokenizerFactory; // Factory for WikipediaTokenizer.\n", "des": "Tokenizer that is aware of Wikipedia syntax."}
{"index": 1621, "repo": "spring-kafka-3.0.9", "code": "package annotation;\n\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface DltHandler; // Annotation to determine the method the should process the DLT topic message.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(KafkaListenerConfigurationSelector.class) public @interface EnableKafka; // Enable Kafka listener annotated endpoints that are created under the covers by a AbstractListenerContainerFactory.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(RetryTopicConfigurationSupport.class) @EnableKafka public @interface EnableKafkaRetryTopic; // Enables the non-blocking topic-based delayed retries feature.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(KafkaStreamsDefaultConfiguration.class) public @interface EnableKafkaStreams; // Enable default Kafka Streams components.\npublic class KafkaBootstrapConfiguration extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // An ImportBeanDefinitionRegistrar class that registers a KafkaListenerAnnotationBeanPostProcessor bean capable of processing Spring's @KafkaListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented public @interface KafkaHandler; // Annotation that marks a method to be the target of a Kafka message listener within a class that is annotated with KafkaListener.\n@Target({TYPE,METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented @Repeatable(KafkaListeners.class) public @interface KafkaListener; // Annotation that marks a method to be the target of a Kafka message listener on the specified topics.\npublic class KafkaListenerAnnotationBeanPostProcessor<K,V> extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.core.Ordered, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton; // Bean post-processor that registers methods annotated with KafkaListener to be invoked by a Kafka message listener container created under the covers by a KafkaListenerContainerFactory according to the parameters of the annotation.\n", "des": "Package for kafka annotations"}
{"index": 1941, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package integration;\n\n@AutoConfiguration(after={DataSourceAutoConfiguration.class,JmxAutoConfiguration.class,TaskSchedulingAutoConfiguration.class}) @ConditionalOnClass(org.springframework.integration.config.EnableIntegration.class) @EnableConfigurationProperties({IntegrationProperties.class,JmxProperties.class}) public class IntegrationAutoConfiguration extends Object; // Auto-configuration for Spring Integration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnMissingBean(org.springframework.integration.config.IntegrationComponentScanRegistrar.class) @Import(org.springframework.boot.autoconfigure.integration.IntegrationAutoConfigurationScanRegistrar.class) protected static class IntegrationAutoConfiguration.IntegrationComponentScanConfiguration extends Object; // Integration component scan configuration.\n@Configuration(proxyBeanMethods=false) @EnableIntegration protected static class IntegrationAutoConfiguration.IntegrationConfiguration extends Object; // Basic Spring Integration configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.integration.jdbc.store.JdbcMessageStore.class) @ConditionalOnSingleCandidate(javax.sql.DataSource.class) @Conditional(org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration.OnIntegrationDatasourceInitializationCondition.class) protected static class IntegrationAutoConfiguration.IntegrationJdbcConfiguration extends Object; // Integration JDBC configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.integration.jmx.config.EnableIntegrationMBeanExport.class) @ConditionalOnMissingBean(value=org.springframework.integration.monitor.IntegrationMBeanExporter.class, search=CURRENT) @ConditionalOnBean(javax.management.MBeanServer.class) @ConditionalOnProperty(prefix=\"spring.jmx\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) protected static class IntegrationAutoConfiguration.IntegrationJmxConfiguration extends Object; // Spring Integration JMX configuration.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.integration.config.EnableIntegrationManagement.class) @ConditionalOnMissingBean(value=org.springframework.integration.config.IntegrationManagementConfigurer.class, name=\"integrationManagementConfigurer\", search=CURRENT) protected static class IntegrationAutoConfiguration.IntegrationManagementConfiguration extends Object; // Integration management configuration.\n", "des": "Auto-configuration for Spring Integration."}
{"index": 1625, "repo": "spring-kafka-3.0.9", "code": "package reactive;\n\npublic class ReactiveKafkaConsumerTemplate<K,V> extends Object; // Reactive kafka consumer operations implementation.\npublic class ReactiveKafkaProducerTemplate<K,V> extends Object implements AutoCloseable, org.springframework.beans.factory.DisposableBean; // Reactive kafka producer operations implementation.\n", "des": "Reactive component for consumer and producer."}
{"index": 3440, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface CurrentSessionContext; // Defines the contract for implementations which know how to scope the notion of a current session.\nInterface CurrentTenantIdentifierResolver; // A callback registered with the SessionFactory that is responsible for resolving the current tenant identifier for use with CurrentSessionContext and SessionFactory.getCurrentSession()\nClass AbstractCurrentSessionContext; // Base support for CurrentSessionContext implementors.\n", "des": "SPI level contracts around \"current session\" support."}
{"index": 1014, "repo": "spring-ws-3.0.10.RELEASE", "code": "package validation;\n\nInterface ValidationErrorHandler; // Subinterface of ErrorHandler that allows the registered errors to be retrieved.\nInterface XmlValidator; // Simple processor that validates a given Source.\nClass SchemaFactoryUtils;\nClass SchemaLoaderUtils; // Convenient utility methods for loading of Schema objects, performing standard handling of input streams.\nClass XMLReaderFactoryUtils;\nClass XmlValidatorFactory; // Factory for XmlValidator objects, being aware of JAXP 1.3 Validators, and JAXP 1.0 parsing capabilities.\nClass XmlValidationException; // Exception thrown when a validation error occurs\n", "des": "Provides classes for XML validation in JAXP 1.0 and JAXP 1.3."}
{"index": 2123, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package buildinfo;\n\n@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BuildInfo extends DefaultTask; // Task for generating a build-info.properties file from a Project.\npublic abstract class BuildInfoProperties extends Object implements Serializable; // The properties that are written into the build-info.properties file.\n", "des": "Support for producing build info for consumption by Spring Boot's actuator."}
{"index": 1314, "repo": "groovy-all-4.0.13", "code": "package markup;\n\npublic abstract class BaseTemplate extends Object implements Writable; // All templates compiled through MarkupTemplateEngine extend this abstract class, which provides a number of utility methods to generate markup.\npublic class DelegatingIndentWriter extends Writer; // A writer which delegates to another writer and supports an additional indenting level.\npublic class MarkupTemplateEngine extends TemplateEngine; // A template engine which leverages StreamingMarkupBuilder to generate XML/XHTML.\npublic static class MarkupTemplateEngine.CachingTemplateResolver extends MarkupTemplateEngine.DefaultTemplateResolver; // A template resolver which avoids calling ClassLoader.getResource(String) if a template path already has been queried before.\npublic static class MarkupTemplateEngine.DefaultTemplateResolver extends Object implements TemplateResolver;\npublic static class MarkupTemplateEngine.TemplateResource extends Object;\npublic class TemplateConfiguration extends Object; // Configuration options for the markup template engine.\npublic interface TemplateResolver; // Interface for template resolvers, which, given a template identifier, return a URL where the template can be loaded.\n", "des": "Contains a template engine facilitating generation of XML-like markup with optional type checking."}
{"index": 3626, "repo": "solr-test-framework-9.3.0", "code": "package processor;\n\nClass BufferingRequestProcessor;\nClass RecordingUpdateProcessorFactory; // This Factory can optionally save references to the commands it receives in BlockingQueues that tests can poll from to observe that the expected commands are executed.\nClass TrackingUpdateProcessorFactory; // This Factory is similar to RecordingUpdateProcessorFactory, but with the goal of tracking requests across multiple collections/shards/replicas in a SolrCloudTestCase.\nClass UpdateProcessorTestBase;\n", "des": "Mock classes for testing Update Processor chains."}
{"index": 32, "repo": "commons-collections4-4.4", "code": "package analyzer;\n\nClass StringKeyAnalyzer; // An KeyAnalyzer for Strings.\n", "des": "This package contains various KeyAnalyzer implementations."}
{"index": 3681, "repo": "solr-core-9.3.0", "code": "package json;\n\nClass JSONUtil;\nClass ObjectUtil;\nClass ObjectUtil.ConflictHandler;\nClass RequestUtil;\n", "des": "JSON related classes"}
{"index": 2128, "repo": "spring-context-support-6.0.11", "code": "package jcache;\n\npackage jcache.config; // Support package for declarative JSR-107 caching configuration.\npackage jcache.interceptor; // AOP-based solution for declarative caching demarcation using JSR-107 annotations.\npublic class JCacheCache extends org.springframework.cache.support.AbstractValueAdaptingCache; // Cache implementation on top of a javax.cache.Cache instance.\npublic class JCacheCacheManager extends AbstractTransactionSupportingCacheManager; // CacheManager implementation backed by a JCache javax.cache.CacheManager.\npublic class JCacheManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<javax.cache.CacheManager>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean for a JCache javax.cache.CacheManager, obtaining a pre-defined CacheManager by name through the standard JCache javax.cache.Caching class.\n", "des": "Implementation package for JSR-107 (javax.cache aka \"JCache\") based caches."}
{"index": 2019, "repo": "spring-boot-devtools-3.1.1", "code": "package system;\n\npublic final class DevToolsEnablementDeducer extends Object; // Utility to deduce if DevTools should be enabled in the current context.\n", "des": "Devtools system support classes."}
{"index": 3196, "repo": "tomcat-api-10.1", "code": "package digester;\n\nInterface Digester.GeneratedCodeLoader;\nInterface DocumentProperties; // A collection of interfaces, one per property, that enables the object being populated by the digester to signal to the digester that it supports the given property and that the digester should populate that property if available.\nInterface DocumentProperties.Charset; // The character encoding used by the source XML document.\nInterface ObjectCreationFactory; // Interface for use with FactoryCreateRule.\nInterface Rules; // Public interface defining a collection of Rule instances (and corresponding matching patterns) plus an implementation of a matching policy that selects the rules that match a particular pattern of nested elements discovered during parsing.\nInterface RuleSet; // Public interface defining a shorthand means of configuring a complete set of related Rule definitions, possibly associated with a particular namespace URI, in one operation.\nInterface SetPropertiesRule.Listener;\nClass AbstractObjectCreationFactory; // Abstract base class for ObjectCreationFactory implementations.\nClass ArrayStack<E>; // Imported copy of the ArrayStack class from Commons Collections, which was the only direct dependency from Digester.\nClass CallMethodRule; // Rule implementation that calls a method on an object on the stack (normally the top/parent object), passing arguments collected from subsequent CallParamRule rules or from the body of this element.\nClass CallParamRule; // Rule implementation that saves a parameter for use by a surrounding CallMethodRule.\nClass Digester; // A Digester processes an XML input stream by matching a series of element nesting patterns to execute Rules that have been added prior to the start of parsing.\nClass EnvironmentPropertySource; // A IntrospectionUtils.SecurePropertySource that uses environment variables to resolve expressions.\nClass FactoryCreateRule; // Rule implementation that uses an ObjectCreationFactory to create a new object which it pushes onto the object stack.\nClass ObjectCreateRule; // Rule implementation that creates a new object and pushes it onto the object stack.\nClass Rule; // Concrete implementations of this class implement actions to be taken when a corresponding nested pattern of XML elements has been matched.\nClass RulesBase; // Default implementation of the Rules interface that supports the standard rule matching behavior.\nClass ServiceBindingPropertySource; // A IntrospectionUtils.SecurePropertySource that uses Kubernetes service bindings to resolve expressions.\n", "des": "The Digester package provides for rules-based processing of arbitrary XML documents."}
{"index": 219, "repo": "nutch-2.4", "code": "package tools;\n\npackage tools.arc; // Tools to read the Arc file format.\npackage tools.proxy; // Proxy to benchmark the crawler.\nClass Benchmark;\nClass Benchmark.BenchmarkResults;\nClass DmozParser; // Utility that converts DMOZ RDF into a flat file of URLs to be injected.\nClass ResolveUrls; // A simple tool that will spin up multiple threads to resolve urls to ip addresses.\n", "des": "Miscellaneous tools."}
{"index": 2432, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package jackson;\n\n@Configuration(proxyBeanMethods=false) @AutoConfigureAfter(org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration.class) public class JacksonEndpointAutoConfiguration extends Object; // Auto-configuration for Endpoint Jackson support.\n", "des": "Actuator Jackson auto-configuration."}
{"index": 1282, "repo": "spring-core-6.0.11", "code": "package support;\n\npublic class DeserializingConverter extends Object implements Converter<byte[],Object>; // A Converter that delegates to a Deserializer to convert data in a byte array to an object.\npublic class SerializationDelegate extends Object implements Serializer<Object>, Deserializer<Object>; // A convenient delegate with pre-arranged configuration state for common serialization needs.\npublic class SerializationFailedException extends NestedRuntimeException; // Wrapper for the native IOException (or similar) when a Serializer or Deserializer failed.\npublic class SerializingConverter extends Object implements Converter<Object,byte[]>; // A Converter that delegates to a Serializer to convert an object to a byte array.\n", "des": "Support classes for Spring's serializer abstraction."}
{"index": 2882, "repo": "spring-integration-core-6.1.2", "code": "package store;\n\npublic abstract class AbstractBatchingMessageGroupStore extends Object implements BasicMessageGroupStore;\npublic abstract class AbstractKeyValueMessageStore extends AbstractMessageGroupStore implements MessageStore; // Base class for implementations of Key/Value style MessageGroupStore and MessageStore.\n@ManagedResource public abstract class AbstractMessageGroupStore extends AbstractBatchingMessageGroupStore implements MessageGroupStore, Iterable<MessageGroup>;\npublic interface BasicMessageGroupStore; // Defines a minimal message group store with basic capabilities.\npublic interface ChannelMessageStore extends BasicMessageGroupStore; // A marker interface that indicates this message store has optimizations for use in a QueueChannel.\npublic interface MessageGroup; // A group of messages that are correlated with each other and should be processed in the same context.\npublic interface MessageGroupFactory; // The MessageGroup factory strategy.\npublic class MessageGroupMetadata extends Object implements Serializable; // Value Object holding metadata about a MessageGroup in the MessageGroupStore.\npublic class MessageGroupQueue extends AbstractQueue<org.springframework.messaging.Message<?>> implements BlockingQueue<org.springframework.messaging.Message<?>>; // A BlockingQueue that is backed by a MessageGroupStore.\npublic interface MessageGroupStore extends BasicMessageGroupStore; // Defines additional storage operations on groups of messages linked by a group id.\n@FunctionalInterface public static interface MessageGroupStore.MessageGroupCallback; // Invoked when a MessageGroupStore expires a group.\npublic class MessageGroupStoreReaper extends Object implements Runnable, org.springframework.beans.factory.DisposableBean, org.springframework.beans.factory.InitializingBean, org.springframework.context.SmartLifecycle; // Convenient configurable component to allow explicit timed expiry of MessageGroup instances in a MessageGroupStore.\npublic class MessageHolder extends Object implements Serializable; // The MessageStore specific value object to keep the Message and its metadata.\npublic class MessageMetadata extends Object implements Serializable; // Value Object holding metadata about a Message in the MessageStore.\npublic interface MessageStore; // Strategy interface for storing and retrieving messages.\npublic class MessageStoreException extends org.springframework.messaging.MessagingException; // Exception for problems that occur when using a MessageStore implementation.\npublic interface PriorityCapableChannelMessageStore extends ChannelMessageStore; // A ChannelMessageStore that supports the notion of message priority.\n", "des": "Provides classes releated to storing messages."}
{"index": 2928, "repo": "groovy-4.0.13", "code": "package stmt;\n\npublic class AssertStatement extends Statement; // Represents an assert statement.\npublic class BlockStatement extends Statement; // A list of statements and a scope.\npublic class BreakStatement extends Statement; // Represents a break statement in a switch or loop statement\npublic class CaseStatement extends Statement; // Represents a case statement in a switch statement\npublic class CatchStatement extends Statement; // Represents a catch (Exception var) { } statement\npublic class ContinueStatement extends Statement; // Represents a continue statement in a loop statement\npublic class DoWhileStatement extends Statement implements LoopingStatement; // Represents a do { ...\npublic class EmptyStatement extends Statement;\npublic class ExpressionStatement extends Statement; // A simple statement such as a method call where the return value is ignored\npublic class ForStatement extends Statement implements LoopingStatement; // Represents a standard for loop in Groovy\npublic class IfStatement extends Statement; // Represents an if (condition) { ...\npublic interface LoopingStatement; // This is an AST Node that provides some sort of looping mechanism.\npublic class ReturnStatement extends Statement; // A return statement\npublic class Statement extends ASTNode; // Base class for any statement.\npublic class SwitchStatement extends Statement; // Represents a switch (object) { case value: ...\npublic class SynchronizedStatement extends Statement; // Represents a synchronized statement\npublic class ThrowStatement extends Statement; // Represents a throw statement\npublic class TryCatchStatement extends Statement; // Represents a try { ...\npublic class WhileStatement extends Statement implements LoopingStatement; // Represents a while (condition) { ...\n", "des": "AST nodes for Groovy statements"}
{"index": 3079, "repo": "spring-ws-core-4.0.5", "code": "package version;\n\npublic abstract class AbstractAddressingVersion extends org.springframework.xml.transform.TransformerObjectSupport implements AddressingVersion; // Abstract base class for AddressingVersion implementations.\npublic class Addressing10 extends AbstractAddressingVersion; // Implements WS-Addressing 1.0 (May 2006).\npublic class Addressing200408 extends AbstractAddressingVersion; // Implements the August 2004 edition of the WS-Addressing specification.\npublic interface AddressingVersion; // Defines the contract for a specific version of the WS-Addressing specification.\n", "des": "Contains abstractions over various versions of the WS-Addressing specification."}
{"index": 238, "repo": "nutch-2.4", "code": "package settings;\n\nClass SettingsPage;\n", "des": "Contains settings page classes for Web UI"}
{"index": 612, "repo": "org.apache.karaf.main-2.4.4", "code": "package log;\n\nInterface LogEntry; // Provides methods to access the information contained in an individual Log Service log entry.\nInterface LogListener; // Subscribes to LogEntry objects from the LogReaderService.\nInterface LogReaderService; // Provides methods to retrieve LogEntry objects from the log.\nInterface LogService; // Provides methods for bundles to write messages to the log.\n", "des": "Log Service Package Version 1.3."}
{"index": 2804, "repo": "spring-security-oauth2-core-6.1.2", "code": "package oidc;\n\npackage oidc.endpoint; // Support classes that model the OpenID Connect Core 1.0 Request and Response messages from the Authorization Endpoint and Token Endpoint.\npackage oidc.user; // Provides a model for an OpenID Connect Core 1.0 representation of a user Principal.\npublic interface AddressStandardClaim; // The Address Claim represents a physical mailing address defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token.\npublic final class DefaultAddressStandardClaim extends Object implements AddressStandardClaim; // The default implementation of an Address Claim.\npublic static class DefaultAddressStandardClaim.Builder extends Object; // A builder for DefaultAddressStandardClaim.\npublic interface IdTokenClaimAccessor extends StandardClaimAccessor; // A ClaimAccessor for the \"claims\" that can be returned in the ID Token, which provides information about the authentication of an End-User by an Authorization Server.\npublic final class IdTokenClaimNames extends Object; // The names of the \"claims\" defined by the OpenID Connect Core 1.0 specification that can be returned in the ID Token.\npublic class OidcIdToken extends AbstractOAuth2Token implements IdTokenClaimAccessor; // An implementation of an AbstractOAuth2Token representing an OpenID Connect Core 1.0 ID Token.\npublic static final class OidcIdToken.Builder extends Object; // A builder for OidcIdTokens\npublic final class OidcScopes extends Object; // The scope values defined by the OpenID Connect Core 1.0 specification that can be used to request claims.\npublic class OidcUserInfo extends Object implements StandardClaimAccessor, Serializable; // A representation of a UserInfo Response that is returned from the OAuth 2.0 Protected Resource UserInfo Endpoint.\npublic static final class OidcUserInfo.Builder extends Object; // A builder for OidcUserInfos\npublic interface StandardClaimAccessor extends ClaimAccessor; // A ClaimAccessor for the \"Standard Claims\" that can be returned either in the UserInfo Response or the ID Token.\npublic final class StandardClaimNames extends Object; // The names of the \"Standard Claims\" defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token.\n", "des": "Core classes and interfaces providing support for OpenID Connect Core 1.0."}
{"index": 1878, "repo": "shiro-core-2.0.0-alpha-2", "code": "package permission;\n\npublic class AllPermission extends Object implements Permission, Serializable; // An all AllPermission instance is one that always implies any other permission; that is, its implies method always returns true.\npublic class DomainPermission extends WildcardPermission; // Provides a base Permission class from which type-safe/domain-specific subclasses may extend.\npublic class InvalidPermissionStringException extends org.apache.shiro.lang.ShiroException; // Thrown by PermissionResolver.resolvePermission(String) when the String being parsed is not valid for that resolver.\npublic interface PermissionResolver; // A PermissionResolver resolves a String value and converts it into a Permission instance.\npublic interface PermissionResolverAware; // Interface implemented by a component that wishes to use any application-configured PermissionResolver that might already exist instead of potentially creating one itself.\npublic interface RolePermissionResolver; // A RolePermissionResolver resolves a String value and converts it into a Collection of Permission instances.\npublic interface RolePermissionResolverAware; // Interface implemented by a component that wishes to use any application-configured RolePermissionResolver that might already exist instead of potentially creating one itself.\npublic class WildcardPermission extends Object implements Permission, Serializable; // A WildcardPermission is a very flexible permission construct supporting multiple levels of permission matching.\npublic class WildcardPermissionResolver extends Object implements PermissionResolver; // PermissionResolver implementation that returns a new WildcardPermission based on the input string.\n", "des": "Support and default implementations for Shiro's Permission interface."}
{"index": 1372, "repo": "spring-boot-actuator-3.1.1", "code": "package availability;\n\npublic class AvailabilityStateHealthIndicator extends AbstractHealthIndicator; // A HealthIndicator that checks a specific AvailabilityState of the application.\npublic static interface AvailabilityStateHealthIndicator.StatusMappings<S extends org.springframework.boot.availability.AvailabilityState>; // Callback used to add status mappings.\npublic class LivenessStateHealthIndicator extends AvailabilityStateHealthIndicator; // A HealthIndicator that checks the LivenessState of the application.\npublic class ReadinessStateHealthIndicator extends AvailabilityStateHealthIndicator; // A HealthIndicator that checks the ReadinessState of the application.\n", "des": "Actuator support for application availability concerns."}
{"index": 2041, "repo": "spring-messaging-6.0.11", "code": "package stomp;\n\npublic class BufferingStompDecoder extends Object; // An extension of StompDecoder that buffers content remaining in the input ByteBuffer after the parent class has read all (complete) STOMP frames from it.\npublic interface ConnectionHandlingStompSession extends StompSession, StompTcpConnectionHandler<byte[]>; // A StompSession that implements TcpConnectionHandler in order to send and receive messages.\npublic class ConnectionLostException extends RuntimeException; // Raised when the connection for a STOMP session is lost rather than closed.\npublic class DefaultStompSession extends Object implements ConnectionHandlingStompSession; // Default implementation of ConnectionHandlingStompSession.\npublic class ReactorNettyTcpStompClient extends StompClientSupport; // A STOMP over TCP client, configurable with either ReactorNettyTcpClient or ReactorNetty2TcpClient.\npublic class StompBrokerRelayMessageHandler extends AbstractBrokerMessageHandler; // A MessageHandler that handles messages by forwarding them to a STOMP broker.\npublic static interface StompBrokerRelayMessageHandler.Stats; // Contract for access to session counters.\npublic abstract class StompClientSupport extends Object; // Base class for STOMP client implementations.\npublic enum StompCommand extends Enum<StompCommand>; // Represents a STOMP command.\npublic class StompConversionException extends org.springframework.core.NestedRuntimeException; // Raised after a failure to encode or decode a STOMP message.\npublic class StompDecoder extends Object; // Decodes one or more STOMP frames contained in a ByteBuffer.\npublic class StompEncoder extends Object; // An encoder for STOMP frames.\npublic interface StompFrameHandler; // Contract to handle a STOMP frame.\npublic class StompHeaderAccessor extends SimpMessageHeaderAccessor; // A MessageHeaderAccessor to use when creating a Message from a decoded STOMP frame, or when encoding a Message to a STOMP frame.\npublic class StompHeaders extends Object implements org.springframework.util.MultiValueMap<String,String>, Serializable; // Represents STOMP frame headers.\npublic class StompReactorNettyCodec extends AbstractNioBufferReactorNettyCodec<byte[]>; // Simple delegation to StompDecoder and StompEncoder.\n", "des": "Generic support for simple messaging protocols (like STOMP)."}
{"index": 3091, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic abstract class SoapUtils extends Object; // Contains various utility methods for handling SOAP messages.\n", "des": "Classes supporting the org.springframework.ws.soap package."}
{"index": 1592, "repo": "spring-websocket-6.0.11", "code": "package config;\n\npackage config.annotation; // Support for annotation-based WebSocket setup in configuration classes.\npublic class WebSocketMessageBrokerStats extends Object; // A central class for aggregating information about internal state and counters from key infrastructure components of the setup that comes with @EnableWebSocketMessageBroker for Java config and <websocket:message-broker> for XML.\npublic class WebSocketNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for Spring WebSocket configuration namespace.\n", "des": "Configuration support for WebSocket request handling."}
{"index": 3473, "repo": "tomcat-jspapi-10.1", "code": "package tagext;\n\nInterface BodyTag; // The BodyTag interface extends IterationTag by defining additional methods that let a tag handler manipulate the content of evaluating its body.\nInterface DynamicAttributes; // For a tag to declare that it accepts dynamic attributes, it must implement this interface.\nInterface IterationTag; // The IterationTag interface extends Tag by defining one additional method that controls the reevaluation of its body.\nInterface JspIdConsumer; // Interface that allows tag handlers to be provided with a unique (within the scope of the web application) ID.\nInterface JspTag; // Serves as a base class for Tag and SimpleTag.\nInterface SimpleTag; // Interface for defining Simple Tag Handlers.\nInterface Tag; // The interface of a classic tag handler that does not want to manipulate its body.\nInterface TryCatchFinally; // The auxiliary interface of a Tag, IterationTag or BodyTag tag handler that wants additional hooks for managing resources.\nClass BodyContent; // An encapsulation of the evaluation of the body of an action so it is available to a tag handler.\nClass BodyTagSupport; // A base class for defining tag handlers implementing BodyTag.\nClass FunctionInfo; // Information for a function in a Tag Library.\nClass JspFragment; // Encapsulates a portion of JSP code in an object that can be invoked as many times as needed.\nClass PageData; // Translation-time information on a JSP page.\nClass SimpleTagSupport; // A base class for defining tag handlers implementing SimpleTag.\nClass TagAdapter; // Wraps any SimpleTag and exposes it using a Tag interface.\nClass TagAttributeInfo; // Information on the attributes of a Tag, available at translation time.\nClass TagData; // The (translation-time only) attribute/value information for a tag instance.\nClass TagExtraInfo; // Optional class provided by the tag library author to describe additional translation-time information not described in the TLD.\nClass TagFileInfo; // Tag information for a tag file in a Tag Library; This class is instantiated from the Tag Library Descriptor file (TLD) and is available only at translation time.\nClass TagInfo; // Tag information for a tag in a Tag Library; This class is instantiated from the Tag Library Descriptor file (TLD) and is available only at translation time.\n", "des": "Classes and interfaces for the definition of JavaServer Pages Tag Libraries."}
{"index": 352, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "package util;\n\nClass CSVUtil; // Utility class for parsing CSV text\nClass DictionaryBuilder; // Tool to build dictionaries.\nClass ToStringUtil; // Utility class for english translations of morphological data, used only for debugging.\nEnum DictionaryBuilder.DictionaryFormat; // Format of the dictionary.\n", "des": "Kuromoji utility classes."}
{"index": 422, "repo": "mahout-mr-0.13.0", "code": "package partial;\n\nClass PartialBuilder;\nClass Step1Mapper;\nClass TreeID;\n", "des": "Partial-data mapreduce implementation of Random Decision Forests"}
{"index": 3193, "repo": "tomcat-api-10.1", "code": "package binary;\n\nClass Base64; // Provides Base64 encoding and decoding as defined by RFC 2045.\nClass BaseNCodec; // Abstract superclass for Base-N encoders and decoders.\nClass StringUtils; // Converts String to and from bytes using the encodings required by the Java specification.\n", "des": "Base64, Base32, Binary, and Hexadecimal String encoding and decoding."}
{"index": 2283, "repo": "spring-data-elasticsearch-5.1.2", "code": "package script;\n\npublic interface ReactiveScriptOperations; // This interfaces defines the operations to access the Elasticsearch script API.\npublic record Script(String id, String language, String source) extends Record;\npublic static final class Script.ScriptBuilder extends Object;\npublic interface ScriptOperations; // This interfaces defines the operations to access the Elasticsearch script API.\n", "des": "Classes and interfaces to access to script API of Elasticsearch (https://www.elastic.co/guide/en/elasticsearch/reference/8.5/script-apis.html)."}
{"index": 2003, "repo": "spring-integration-ws-6.1.2", "code": "package ws;\n\npackage ws.config; // Contains parser classes for the Web Services namespace support.\npackage ws.dsl; // Contains classes for DSL support.\npublic abstract class AbstractWebServiceInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.ws.server.endpoint.MessageEndpoint, org.springframework.integration.context.OrderlyShutdownCapable;\npublic abstract class AbstractWebServiceOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // Base class for outbound Web Service-invoking Messaging Gateways.\npublic class DefaultSoapHeaderMapper extends org.springframework.integration.mapping.AbstractHeaderMapper<org.springframework.ws.soap.SoapMessage> implements SoapHeaderMapper; // A HeaderMapper implementation for mapping to and from a SoapHeader.\npublic class MarshallingWebServiceInboundGateway extends AbstractWebServiceInboundGateway;\npublic class MarshallingWebServiceOutboundGateway extends AbstractWebServiceOutboundGateway; // An outbound Messaging Gateway for invoking Web Services that also supports marshalling and unmarshalling of the request and response messages.\n@SoapFault(faultCode=RECEIVER) public class ServiceUnavailableException extends org.springframework.ws.WebServiceException; // The WebServiceException extension to indicate that the server endpoint is temporary unavailable.\npublic class SimpleWebServiceInboundGateway extends AbstractWebServiceInboundGateway;\npublic class SimpleWebServiceOutboundGateway extends AbstractWebServiceOutboundGateway; // An outbound Messaging Gateway for invoking a Web Service.\npublic interface SoapHeaderMapper extends org.springframework.integration.mapping.RequestReplyHeaderMapper<org.springframework.ws.soap.SoapMessage>; // A convenience interface that extends RequestReplyHeaderMapper, parameterized with SoapHeader.\npublic abstract class WebServiceHeaders extends Object; // Pre-defined header names to be used when storing or retrieving Web Service properties to/from integration Message Headers.\n", "des": "Provides several inbound and outbound Web Service components."}
{"index": 2643, "repo": "spring-integration-sftp-6.1.2", "code": "package session;\n\npublic class DefaultSftpSessionFactory extends Object implements org.springframework.integration.file.remote.session.SessionFactory<org.apache.sshd.sftp.client.SftpClient.DirEntry>, org.springframework.integration.file.remote.session.SharedSessionCapable; // Factory for creating SftpSession instances.\npublic class ResourceKnownHostsServerKeyVerifier extends Object implements org.apache.sshd.client.keyverifier.ServerKeyVerifier; // A ServerKeyVerifier implementation for a Resource abstraction.\npublic class SftpFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // A FileInfo implementation for SFTP.\npublic class SftpRemoteFileTemplate extends org.springframework.integration.file.remote.RemoteFileTemplate<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // SFTP version of RemoteFileTemplate providing type-safe access to the underlying ChannelSftp object.\npublic class SftpSession extends Object implements org.springframework.integration.file.remote.session.Session<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Default SFTP Session implementation.\n", "des": "Provides classes supporting SFTP sessions."}
{"index": 253, "repo": "nutch-2.4", "code": "package validator;\n\nClass UrlValidator; // Validates URLs.\n", "des": "URL filter plugin that validates given urls."}
{"index": 3667, "repo": "solr-core-9.3.0", "code": "package container;\n\nClass ContainerRequestUtils; // Utility methods for creating and populating a ContainerRequest for use with Jersey ApplicationHandlers\nClass JettyBridgeResponseWriter; // A ResponseWriter which copies that output of JAX-RS computation over to HttpServletResponse object used by the Jetty server.\n", "des": "Adapter code used to convert the native Jetty request/response abstractions into the objects required by Jersey"}
{"index": 3682, "repo": "solr-core-9.3.0", "code": "package macro;\n\nClass MacroExpander;\n", "des": "Parameter substitution / macro expansion."}
{"index": 2647, "repo": "spring-data-cassandra-4.1.2", "code": "package convert;\n\npublic abstract class AbstractCassandraConverter extends Object implements CassandraConverter, InitializingBean; // Base class for CassandraConverter implementations.\n@Deprecated public class BasicCassandraRowValueProvider extends RowValueProvider;\npublic interface CassandraColumnType extends ColumnType; // Descriptor for a Cassandra column type exposing a DataType.\npublic interface CassandraConverter extends EntityConverter<CassandraPersistentEntity<?>,CassandraPersistentProperty,Object,Object>; // Central Cassandra specific converter interface from Object to Row.\npublic class CassandraCustomConversions extends CustomConversions; // Value object to capture custom conversion.\npublic abstract class CassandraJsr310Converters extends Object; // Helper class to register JodaTime specific Converter implementations in case the library is present on the classpath.\n@WritingConverter public static enum CassandraJsr310Converters.DateToInstantConverter extends Enum<CassandraJsr310Converters.DateToInstantConverter> implements Converter<Date,Instant>; // Simple singleton to convert Dates to their Cassandra Instant representation for the CQL Timestamp type.\n@ReadingConverter public static enum CassandraJsr310Converters.InstantToDateConverter extends Enum<CassandraJsr310Converters.InstantToDateConverter> implements Converter<Instant,Date>;\n@ReadingConverter public static enum CassandraJsr310Converters.LocalTimeToMillisOfDayConverter extends Enum<CassandraJsr310Converters.LocalTimeToMillisOfDayConverter> implements Converter<LocalTime,Long>; // Simple singleton to convert LocalTimes to their Long representation.\n@ReadingConverter public static enum CassandraJsr310Converters.MillisOfDayToLocalTimeConverter extends Enum<CassandraJsr310Converters.MillisOfDayToLocalTimeConverter> implements Converter<Long,LocalTime>; // Simple singleton to convert Longs to their LocalTime representation.\npublic interface CassandraRowValueProvider extends CassandraValueProvider; // CassandraValueProvider providing values based on a Row.\n@Deprecated public class CassandraTupleValueProvider extends TupleValueProvider;\n@Deprecated public class CassandraUDTValueProvider extends UdtValueProvider;\npublic interface CassandraValueProvider extends PropertyValueProvider<CassandraPersistentProperty>; // PropertyValueProvider for CassandraPersistentProperty.\npublic interface ColumnType; // Interface to access column type information.\npublic interface ColumnTypeResolver; // Resolves ColumnType for properties, TypeInformation, and values.\n@Deprecated public class CustomConversions extends CassandraCustomConversions;\n", "des": "Spring Data Cassandra specific converter infrastructure."}
{"index": 322, "repo": "kafka-clients-3.5.0", "code": "package provider;\n\nInterface ConfigProvider; // A provider of configuration data, which may optionally support subscriptions to configuration changes.\nClass DirectoryConfigProvider; // An implementation of ConfigProvider based on a directory of files.\nClass EnvVarConfigProvider; // An implementation of ConfigProvider based on environment variables.\nClass FileConfigProvider; // An implementation of ConfigProvider that represents a Properties file.\n", "des": "Provides a pluggable interface and some implementations for late-binding in configuration values."}
{"index": 2759, "repo": "spring-beans-6.0.11", "code": "package groovy;\n\npublic class GroovyBeanDefinitionReader extends AbstractBeanDefinitionReader implements groovy.lang.GroovyObject; // A Groovy-based reader for Spring bean definitions: like a Groovy builder, but more of a DSL for Spring configuration.\n", "des": "Support package for Groovy-based bean definitions."}
{"index": 2875, "repo": "spring-integration-core-6.1.2", "code": "package resource;\n\npublic class ResourceRetrievingMessageSource extends AbstractMessageSource<org.springframework.core.io.Resource[]> implements org.springframework.context.ApplicationContextAware; // Implementation of MessageSource based on ResourcePatternResolver which will attempt to resolve Resources based on the pattern specified.\n", "des": "Provides classes related to messaging using Spring Resources"}
{"index": 2954, "repo": "spring-integration-xml-6.1.2", "code": "package splitter;\n\npublic class XPathMessageSplitter extends org.springframework.integration.splitter.AbstractMessageSplitter; // Message Splitter that uses an XPathExpression to split a Document, File or String payload into a NodeList.\n", "des": "Provides implementations of AbstractMessageSplitter."}
{"index": 2002, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\npublic class JettyWebSocketServletWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for JettyServletWebServerFactory.\npublic class TomcatWebSocketServletWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for TomcatServletWebServerFactory.\npublic class UndertowWebSocketServletWebServerCustomizer extends Object implements org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory>, org.springframework.core.Ordered; // WebSocket customizer for UndertowServletWebServerFactory.\n@AutoConfiguration(after=JacksonAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer.class) public class WebSocketMessagingAutoConfiguration extends Object; // Auto-configuration for WebSocket-based messaging.\n@AutoConfiguration(before=ServletWebServerFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.servlet.Servlet.class,jakarta.websocket.server.ServerContainer.class}) @ConditionalOnWebApplication(type=SERVLET) public class WebSocketServletAutoConfiguration extends Object; // Auto configuration for WebSocket servlet server in embedded Tomcat, Jetty or Undertow.\n", "des": "Auto-configuration for WebSocket support in servlet web servers."}
{"index": 1027, "repo": "hadoop-aws-3.3.6", "code": "package delegation;\n\nInterface AWSPolicyProvider; // Interface for providers of AWS policy for accessing data.\nInterface DelegationOperations; // All operations used for delegation which aren't in the store context.\nInterface DelegationTokenProvider; // Interface for S3A Delegation Token access.\nClass AbstractDelegationTokenBinding; // An AbstractDelegationTokenBinding implementation is a class which handles the binding of its underlying authentication mechanism to the Hadoop Delegation token mechanism.\nClass AbstractDTService; // This is the base class for both the delegation binding code and the back end service created; allows for shared methods across both.\nClass AbstractS3ATokenIdentifier; // An S3A Delegation Token Identifier: contains the information needed to talk to S3A.\nClass DelegationConstants; // All the constants related to delegation tokens.\nClass EncryptionSecretOperations; // These support operations on EncryptionSecrets which use the AWS SDK operations.\nClass EncryptionSecrets; // Encryption options in a form which can serialized or marshalled as a hadoop Writeable.\nClass FullCredentialsTokenBinding; // Full credentials: they are simply passed as-is, rather than converted to a session.\nClass FullCredentialsTokenIdentifier; // The full credentials payload is the same of that for a session token, but a different token kind is used.\nClass RoleTokenBinding; // Role Token support requests an explicit role and automatically restricts that role to the given policy of the binding.\nClass RoleTokenIdentifier; // Role token identifier.\nClass S3ADelegationTokens; // Support for creating a DT from a filesystem.\nClass S3ADtFetcher; // A DT fetcher for S3A.\nClass SessionTokenBinding; // The session token DT binding: creates an AWS session token for the DT, extracts and serves it up afterwards.\nClass SessionTokenIdentifier; // A token identifier which contains a set of AWS session credentials, credentials which will be valid until they expire.\nEnum AWSPolicyProvider.AccessLevel; // Access levels.\nEnum S3ADelegationTokens.TokenIssuingPolicy; // How will tokens be issued on request? The S3ADelegationTokens.TokenIssuingPolicy.RequestNewToken policy does not guarantee that a tokens can be created, only that an attempt will be made to request one.\nClass DelegationTokenIOException; // General IOException for Delegation Token issues.\n", "des": "Extensible delegation token support for the S3A connector."}
{"index": 809, "repo": "lucene-analyzers-common-8.11.2", "code": "package sv;\n\nClass SwedishAnalyzer; // Analyzer for Swedish.\nClass SwedishLightStemFilter; // A TokenFilter that applies SwedishLightStemmer to stem Swedish words.\nClass SwedishLightStemFilterFactory; // Factory for SwedishLightStemFilter.\nClass SwedishLightStemmer; // Light Stemmer for Swedish.\n", "des": "Analyzer for Swedish."}
{"index": 2023, "repo": "spring-messaging-6.0.11", "code": "package messaging;\n\npackage messaging.converter; // Provides support for message conversion.\npackage messaging.core; // Defines interfaces and implementation classes for messaging templates.\npackage messaging.handler; // Basic abstractions for working with message handler methods.\npackage messaging.rsocket; // Support for the RSocket protocol.\npackage messaging.simp; // Generic support for Simple Messaging Protocols including protocols such as STOMP.\npackage messaging.support; // Provides implementations of Message along with a MessageBuilder and MessageHeaderAccessor for building and working with messages and message headers, as well as various MessageChannel implementations and channel interceptor support.\npackage messaging.tcp; // Contains abstractions and implementation classes for establishing TCP connections via TcpOperations, handling messages via TcpConnectionHandler, as well as sending messages via TcpConnection.\npublic interface Message<T>; // A generic message representation with headers and body.\n@FunctionalInterface public interface MessageChannel; // Defines methods for sending messages.\npublic class MessageDeliveryException extends MessagingException; // Exception that indicates an error occurred during message delivery.\n@FunctionalInterface public interface MessageHandler; // Simple contract for handling a Message.\npublic class MessageHandlingException extends MessagingException; // Exception that indicates an error occurred during message handling.\npublic class MessageHeaders extends Object implements Map<String,Object>, Serializable; // The headers for a Message.\npublic class MessagingException extends org.springframework.core.NestedRuntimeException; // The base exception for any failures related to messaging.\npublic interface PollableChannel extends MessageChannel; // A MessageChannel from which messages may be actively received through polling.\n@FunctionalInterface public interface ReactiveMessageHandler; // Reactive contract for handling a Message.\npublic interface SubscribableChannel extends MessageChannel; // A MessageChannel that maintains a registry of subscribers and invokes them to handle messages sent through this channel.\n", "des": "Support for working with messaging APIs and protocols."}
{"index": 807, "repo": "lucene-analyzers-common-8.11.2", "code": "package sr;\n\nClass SerbianNormalizationFilter; // Normalizes Serbian Cyrillic and Latin characters to \"bald\" Latin.\nClass SerbianNormalizationFilterFactory; // Factory for SerbianNormalizationFilter.\nClass SerbianNormalizationRegularFilter; // Normalizes Serbian Cyrillic to Latin.\n", "des": "Analyzer for Serbian."}
{"index": 1105, "repo": "fontbox-3.0.0-beta1", "code": "package ttf;\n\npackage ttf.gsub; // This package contains utility classes which extract meanigful data from the highly obfuscated GSUB table structures.\npackage ttf.model; // This package contains a more logical model for the various font tables like GSUB.\nInterface CmapLookup; // An interface that abstracts the cid <-> codepoint lookup functionality of cmap.\nInterface GlyphDescription; // Specifies access to glyph description classes, simple and composite.\nInterface TrueTypeCollection.TrueTypeFontProcessor; // Implement the callback method to call TrueTypeCollection.processAllFonts(TrueTypeFontProcessor).\nClass CFFTable; // PostScript font program (compact font format).\nClass CmapSubtable; // A \"cmap\" subtable.\nClass CmapTable; // The \"cmap\" table of a true type font.\nClass DigitalSignatureTable; // A table in a true type font.\nClass GlyfCompositeComp; // This class is based on code from Apache Batik a subproject of Apache XMLGraphics.\nClass GlyfCompositeDescript; // Glyph description for composite glyphs.\nClass GlyfDescript; // This class is based on code from Apache Batik a subproject of Apache XMLGraphics.\nClass GlyfSimpleDescript; // This class is based on code from Apache Batik a subproject of Apache XMLGraphics.\nClass GlyphData; // A glyph data record in the glyf table.\nClass GlyphSubstitutionTable; // A glyph substitution 'GSUB' table in a TrueType or OpenType font.\nClass GlyphTable; // A table in a true type font.\nClass HeaderTable; // A table in a true type font.\nClass HorizontalHeaderTable; // A table in a true type font.\nClass HorizontalMetricsTable; // A table in a true type font.\nClass IndexToLocationTable; // A table in a true type font.\nClass KerningSubtable; // A 'kern' table in a true type font.\nClass KerningTable; // A 'kern' table in a true type font.\nClass MaximumProfileTable; // A table in a true type font.\nClass NameRecord; // A name record in the name table.\nClass NamingTable; // A table in a true type font.\n", "des": "This package contains classes to parse a TTF file."}
{"index": 1843, "repo": "spring-test-6.0.11", "code": "package web;\n\n@ExtendWith(SpringExtension.class) @ContextConfiguration @WebAppConfiguration @Documented @Inherited @Retention(RUNTIME) @Target(TYPE) public @interface SpringJUnitWebConfig; // @SpringJUnitWebConfig is a composed annotation that combines @ExtendWith(SpringExtension.class) from JUnit Jupiter with @ContextConfiguration and @WebAppConfiguration from the Spring TestContext Framework.\n", "des": "Web support for integrating the Spring TestContext Framework with the JUnit Jupiter extension model in JUnit 5."}
{"index": 3246, "repo": "opencms-core-15.0", "code": "package galleries;\n\npackage galleries.shared; // Contains the shared client/server side gallery dialog classes.\nClass A_CmsTreeTabDataPreloader<T extends I_CmsGalleryTreeEntry<T>>; // Abstract class which is used to generate the data for showing an already opened tree in the gallery dialog.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAddContentRestriction; // Replacement configuration for the 'add content' dialog.\nClass CmsAddContentRestriction.TypeEntry; // Contains the replacements (and titles of the replacements) for a single type.\nClass CmsGalleryActionElement; // Gallery action used to generate the gallery dialog.\nClass CmsGalleryFilteredNavTreeBuilder; // Helper class for building a filtered sitemap tree for the gallery dialog's 'Sitemap' tab.\nClass CmsGalleryService; // Handles all RPC services related to the gallery dialog.\nClass CmsOpenGallery; // Provides methods to open gwt-based gallery dialog.\nClass CmsPreviewService; // Handles all RPC services related to the gallery preview dialog.\nClass CmsSiteSelectorOptionBuilder; // Helper class for building the options for the site selector in the gallery dialog.\nClass CmsTreeOpenState; // The tree open state of a gallery tree tab.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains server side classes for the gallery dialogs."}
{"index": 21, "repo": "commons-collections4-4.4", "code": "package keyvalue;\n\nClass AbstractKeyValue<K,V>; // Abstract pair class to assist with creating KeyValue and Map.Entry implementations.\nClass AbstractMapEntry<K,V>; // Abstract Pair class to assist with creating correct Map.Entry implementations.\nClass AbstractMapEntryDecorator<K,V>; // Provides a base decorator that allows additional functionality to be added to a Map.Entry.\nClass DefaultKeyValue<K,V>; // A mutable KeyValue pair that does not implement Map.Entry.\nClass DefaultMapEntry<K,V>; // A restricted implementation of Map.Entry that prevents the Map.Entry contract from being broken.\nClass MultiKey<K>; // A MultiKey allows multiple map keys to be merged together.\nClass TiedMapEntry<K,V>; // A Map.Entry tied to a map underneath.\nClass UnmodifiableMapEntry<K,V>; // A Map.Entry that throws UnsupportedOperationException when setValue is called.\n", "des": "This package contains implementations of collection and map related key/value classes."}
{"index": 3275, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Shared RPC interfaces.\nInterface I_CmsAutoBeanFactory; // General AutoBean factory interface.\nInterface I_CmsCodeMirrorClientConfiguration; // AutoBean interface that represents the configuration for the client-side CodeMirror editor widget.\nInterface I_CmsContentLoadCollectorInfo; // Interface defining the data used to call a content collector.\nInterface I_CmsEditableDataExtensions; // Extended attributes for editable data generated by e.g.\nInterface I_CmsEmbeddedDialogInfo; // AutoBean interface for the data needed to open an embedded Vaadin dialog from GWT.\nInterface I_CmsHasIconClasses; // Interface for elements with icons.\nInterface I_CmsListAddMetadata; // AutoBean interface for the data injected into the page by the cms:enable-list-add tag.\nInterface I_CmsUnlockData; // Parameters for the unlock service.\nInterface I_CmsUploadConstants; // An interface that holds some constants for the upload dialog.\nClass CmsAdditionalInfoBean; // Additional info bean.\nClass CmsBroadcastMessage; // Contains the broadcast message data.\nClass CmsBrokenLinkBean; // A bean which represents either the source or the target of a broken link.\nClass CmsCategoryBean; // A specific bean holding all info to be displayed in the categories tab.\nClass CmsCategoryTreeEntry; // Recursive category tree entry.\nClass CmsClientDateBean; // A bean containing a date, both as a 'long' value and a user-readable string representation.\nClass CmsClientLock; // Client side lock class.\nClass CmsClientVariantInfo; // Client-side bean which holds information about a client variant of a template context.\nClass CmsContextMenuEntryBean; // A context menu entry bean.\nClass CmsCoreData; // Runtime data bean for prefetching.\nClass CmsCoreData.UserInfo; // Bean class containing info about the current user.\nClass CmsDataViewConstants; // Constants used by the data view widget code (client/server side).\nClass CmsDataViewParamEncoder; // Encodes/decodes the configuration passed to the data view popup as a request parameter.\nClass CmsDeleteResourceBean; // A bean which represents the information for the delete dialog.\nClass CmsExternalLinkInfoBean; // Provides information about an external link.\n", "des": "Core shared stuff."}
{"index": 681, "repo": "jackson-databind-2.15.2", "code": "package cfg;\n\nInterface ConfigFeature; // Interface that actual SerializationFeature enumerations used by MapperConfig implementations must implement.\nInterface DatatypeFeature; // Interface that defines interaction with data type specific configuration features.\nClass BaseSettings; // Immutable container class used to store simple configuration settings for both serialization and deserialization.\nClass CoercionConfig;\nClass CoercionConfigs;\nClass ConfigOverride; // Configuration object that is accessed by databinding functionality to find overrides to configuration of properties, based on declared type of the property.\nClass ConfigOverrides; // Container for individual ConfigOverride values.\nClass ConstructorDetector; // Configurable handler used to select aspects of selecting constructor to use as \"Creator\" for POJOs.\nClass ContextAttributes; // Helper class used for storing and accessing per-call attributes.\nClass ContextAttributes.Impl;\nClass DatatypeFeatures; // Immutable value class that contains settings for multiple DatatypeFeature enumerations.\nClass DeserializerFactoryConfig; // Configuration settings container class for DeserializerFactory.\nClass HandlerInstantiator; // Helper class used for handling details of creating handler instances (things like JsonSerializers, JsonDeserializers, various type handlers) of specific types.\nClass MapperBuilder<M extends ObjectMapper,B extends MapperBuilder<M,B>>; // Jackson 3 will introduce fully immutable, builder-based system for constructing ObjectMappers.\nClass MapperConfig<T extends MapperConfig<T>>; // Interface that defines functionality accessible through both serialization and deserialization configuration objects; accessors to mode-independent configuration settings and such.\nClass MapperConfigBase<CFG extends ConfigFeature,T extends MapperConfigBase<CFG,T>>;\nClass MutableCoercionConfig; // Mutable version of CoercionConfig (or rather, extended API) exposed during configuration phase of ObjectMapper construction (via Builder).\nClass MutableConfigOverride; // Extension of ConfigOverride that allows changing of contained configuration settings.\nClass PackageVersion; // Automatically generated from PackageVersion.java.in during packageVersion-generate execution of maven-replacer-plugin in pom.xml.\nClass SerializerFactoryConfig; // Configuration settings container class for SerializerFactory implementations.\nEnum CoercionAction; // Set of possible actions for requested coercion from an input shape CoercionInputShape that does not directly or naturally match target type (LogicalType).\n", "des": "Package that contains most of configuration-related classes; exception being couple of most-commonly used configuration things (like Feature enumerations) that are at the main level (com.fasterxml.jackson.databind)."}
{"index": 2914, "repo": "spring-xml-4.0.5", "code": "package validation;\n\npublic class SchemaFactoryUtils extends Object;\npublic abstract class SchemaLoaderUtils extends Object; // Convenient utility methods for loading of Schema objects, performing standard handling of input streams.\npublic interface ValidationErrorHandler extends ErrorHandler; // Subinterface of ErrorHandler that allows the registered errors to be retrieved.\npublic class XMLReaderFactoryUtils extends Object;\npublic class XmlValidationException extends XmlException; // Exception thrown when a validation error occurs\npublic interface XmlValidator; // Simple processor that validates a given Source.\npublic abstract class XmlValidatorFactory extends Object; // Factory for XmlValidator objects, being aware of JAXP 1.3 Validators, and JAXP 1.0 parsing capabilities.\n", "des": "Provides classes for XML validation in JAXP 1.0 and JAXP 1.3."}
{"index": 2305, "repo": "spring-boot-3.1.1", "code": "package diagnostics;\n\npackage diagnostics.analyzer; // Internal FailureAnalyzer implementations.\npublic abstract class AbstractFailureAnalyzer<T extends Throwable> extends Object implements FailureAnalyzer; // Abstract base class for most FailureAnalyzer implementations.\npublic class FailureAnalysis extends Object; // The result of analyzing a failure.\n@FunctionalInterface public interface FailureAnalysisReporter; // Reports a FailureAnalysis to the user.\n@FunctionalInterface public interface FailureAnalyzer; // A FailureAnalyzer is used to analyze a failure and provide diagnostic information that can be displayed to the user.\npublic final class LoggingFailureAnalysisReporter extends Object implements FailureAnalysisReporter; // FailureAnalysisReporter that logs the failure analysis.\n", "des": "Support for failure analysis and reporting."}
{"index": 2941, "repo": "groovy-4.0.13", "code": "package javac;\n\npublic class JavaAwareCompilationUnit extends CompilationUnit; // Compilation Unit capable of compiling Java source files.\npublic class JavaAwareResolveVisitor extends ResolveVisitor;\npublic class JavacCompilerFactory extends Object implements JavaCompilerFactory;\npublic class JavacJavaCompiler extends Object implements JavaCompiler;\npublic interface JavaCompiler;\npublic interface JavaCompilerFactory;\npublic class JavaStubCompilationUnit extends CompilationUnit; // Compilation unit to only generate stubs.\npublic class JavaStubGenerator extends Object;\npublic class MemJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in memory to compile\npublic class RawJavaFileObject extends SimpleJavaFileObject; // Represents a Java source file in file to compile\n", "des": "Classes related to the joint compiler."}
{"index": 614, "repo": "org.apache.karaf.main-2.4.4", "code": "package permissionadmin;\n\nInterface PermissionAdmin; // The Permission Admin service allows management agents to manage the permissions of bundles.\nClass PermissionInfo; // Permission representation used by the Permission Admin service.\n", "des": "Permission Admin Package Version 1.2."}
{"index": 60, "repo": "ignite-core-2.15.0", "code": "package client;\n\nInterface ClientAddressFinder; // This interface provides a list of addresses of Ignite server nodes within a cluster.\nInterface ClientAtomicLong; // Distributed atomic long API.\nInterface ClientAutoCloseableIterator<T>; // Auto closeable iterator.\nInterface ClientCache<K,V>; // Thin client cache.\nInterface ClientCluster; // Thin client cluster facade.\nInterface ClientClusterGroup; // Thin client cluster group facade.\nInterface ClientCompute; // Thin client compute facade.\nInterface ClientDisconnectListener; // Client disconnected event listener.\nInterface ClientIgniteSet<T>; // Distributed Set.\nInterface ClientPartitionAwarenessMapper; // This function calculates the cache key to a partition mapping for each cache key.\nInterface ClientPartitionAwarenessMapperFactory; // This factory is used on the client side and only when the partition awareness thin client feature is enabled.\nInterface ClientRetryPolicy; // Client retry policy determines whether client operations that have failed due to a connection issue should be retried.\nInterface ClientRetryPolicyContext; // Retry policy context.\nInterface ClientServiceDescriptor; // Descriptor of Service.\nInterface ClientServices; // Thin client services facade.\nInterface ClientTransaction; // Thin client transaction.\nInterface ClientTransactions; // Thin client transactions facade.\nInterface IgniteClient; // Ignite thin client.\nInterface IgniteClientFuture<T>; // Thin client async operations future.\nClass ClientAtomicConfiguration; // Configuration for atomic data structures.\nClass ClientCacheConfiguration; // Cache configuration.\nClass ClientCollectionConfiguration; // Configuration for Ignite collections.\nClass ClientRetryAllPolicy; // Retry policy that always returns true.\nClass ClientRetryNonePolicy; // Retry policy that always returns false.\nClass ClientRetryReadPolicy; // Retry policy that returns true for all read-only operations that do not modify data.\nEnum ClientOperationType; // Client operation type.\nEnum SslMode; // SSL/TLS modes.\nEnum SslProtocol; // SSL Protocol.\nClass ClientAuthenticationException; // Indicates user name or password is invalid.\nClass ClientAuthorizationException; // Indicates user has no permission to perform operation.\nClass ClientConnectionException; // Indicates all the Ignite servers specified in the client configuration are no longer available.\nClass ClientException; // Common thin client unchecked exception.\n", "des": "Contains Ignite Thin Client API classes."}
{"index": 1054, "repo": "commons-io-2.13.0", "code": "package serialization;\n\nInterface ClassNameMatcher; // An object that matches a Class name to a condition.\nClass ValidatingObjectInputStream; // An ObjectInputStream that's restricted to deserialize a limited set of classes.\n", "des": "Provides a framework for controlling the deserialization of classes."}
{"index": 2863, "repo": "spring-integration-core-6.1.2", "code": "package graph;\n\npublic class CompositeMessageHandlerNode extends MessageHandlerNode; // Represents a composite message handler.\npublic static class CompositeMessageHandlerNode.InnerHandler extends Object;\npublic class DiscardingMessageHandlerNode extends MessageHandlerNode; // Represents an endpoint that has a discard channel.\npublic abstract class EndpointNode extends IntegrationNode; // Base class for all endpoints.\npublic class ErrorCapableCompositeMessageHandlerNode extends CompositeMessageHandlerNode implements ErrorCapableNode; // Represents a composite message handler that can emit error messages (pollable endpoint).\npublic class ErrorCapableDiscardingMessageHandlerNode extends DiscardingMessageHandlerNode implements ErrorCapableNode; // Represents an endpoint that has a discard channel and can emit errors (pollable endpoint).\npublic class ErrorCapableEndpointNode extends EndpointNode implements ErrorCapableNode; // Represents nodes that can natively handle errors.\npublic class ErrorCapableMessageHandlerNode extends MessageHandlerNode implements ErrorCapableNode; // Represents a message handler that can produce errors (pollable).\npublic interface ErrorCapableNode; // Nodes implementing this interface are capable of emitting errors.\npublic class ErrorCapableRoutingNode extends RoutingMessageHandlerNode implements ErrorCapableNode; // Represents an endpoint that can route to multiple channels and can emit errors (pollable endpoint).\npublic class Graph extends Object; // This object can be exposed, for example, as a JSON object over HTTP.\n@ImportRuntimeHints(org.springframework.integration.graph.IntegrationGraphRuntimeHints.class) public class IntegrationGraphServer extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>; // Builds the runtime object model graph.\npublic abstract class IntegrationNode extends Object; // Base class for all nodes.\npublic class LinkNode extends Object; // Represents a link between nodes.\npublic static enum LinkNode.Type extends Enum<LinkNode.Type>;\npublic class MessageChannelNode extends IntegrationNode implements SendTimersAware; // Represents a message channel.\npublic class MessageGatewayNode extends ErrorCapableEndpointNode; // Represents an inbound gateway.\npublic class MessageHandlerNode extends EndpointNode implements SendTimersAware; // Represents a message handler.\n", "des": "Provides classes related to the runtime object graph."}
{"index": 2473, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package stackdriver;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.stackdriver.StackdriverMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"stackdriver\") @EnableConfigurationProperties(StackdriverProperties.class) public class StackdriverMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Stackdriver.\n@ConfigurationProperties(prefix=\"management.stackdriver.metrics.export\") public class StackdriverProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Stackdriver metrics export.\npublic class StackdriverPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<StackdriverProperties> implements io.micrometer.stackdriver.StackdriverConfig; // Adapter to convert StackdriverProperties to a StackdriverConfig.\n", "des": "Support for exporting actuator metrics to Stackdriver."}
{"index": 2686, "repo": "spring-data-jpa-3.1.2", "code": "package cdi;\n\npublic class BeanManagerQueryRewriterProvider extends Object implements QueryRewriterProvider; // A BeanManager-based QueryRewriterProvider.\npublic class JpaRepositoryExtension extends CdiRepositoryExtensionSupport; // A portable CDI extension which registers beans for Spring Data JPA repositories.\n", "des": "CDI support for Spring Data JPA Repositories."}
{"index": 1232, "repo": "spring-hateoas-2.1.2", "code": "package alps;\n\npublic final class Alps extends Object; // An ALPS document.\npublic static class Alps.AlpsBuilder extends Object;\npublic class AlpsLinkDiscoverer extends JsonPathLinkDiscoverer; // LinkDiscoverer implementation to find ALPS-based links.\npublic final class Descriptor extends Object; // A value object for an ALPS descriptor.\npublic static class Descriptor.DescriptorBuilder extends Object;\npublic final class Doc extends Object; // A value object for an ALPS doc element.\npublic static class Doc.DocBuilder extends Object;\npublic final class Ext extends Object; // A value object for an ALPS ext element.\npublic static class Ext.ExtBuilder extends Object;\npublic enum Format extends Enum<Format>; // Enum for all ALPS doc formats.\npublic enum Type extends Enum<Type>; // An enum for ALPS descriptor types\n", "des": "Value objects to build ALPS metadata."}
{"index": 394, "repo": "amqp-client-5.18.0", "code": "package nio;\n\nInterface ByteBufferFactory; // Contract to create ByteBuffers.\nInterface NioQueue; // Contract to exchange frame between application threads and NIO thread.\nInterface WriteRequest;\nClass BlockingQueueNioQueue; // Bridge between NioQueue and JDK's BlockingQueue.\nClass ByteBufferOutputStream; // Bridge between the byte buffer and stream worlds.\nClass DefaultByteBufferFactory; // Default ByteBufferFactory that creates heap-based ByteBuffers.\nClass FrameBuilder; // Class to create AMQP frames from a ReadableByteChannel.\nClass FrameWriteRequest;\nClass HeaderWriteRequest;\nClass NioContext; // Context when creating resources for a NIO-based connection.\nClass NioHelper;\nClass NioLoop; // Logic of the NIO loop.\nClass NioLoopContext;\nClass NioParams; // Parameters used to configure the NIO mode of a ConnectionFactory.\nClass SelectorHolder;\nClass SocketChannelFrameHandler;\nClass SocketChannelFrameHandlerFactory;\nClass SocketChannelFrameHandlerState;\nClass SocketChannelRegistration;\nClass SslEngineByteBufferOutputStream; // Bridge between the byte buffer and stream worlds.\nClass SslEngineFrameBuilder; // Sub-class of FrameBuilder that unwraps crypted data from the network.\nClass SslEngineHelper;\n", "des": "NIO network connector."}
{"index": 2746, "repo": "spring-batch-infrastructure-5.0.2", "code": "package context;\n\npublic class RepeatContextCounter extends Object; // Helper class for policies that need to count the number of occurrences of some event (e.g.\npublic class RepeatContextSupport extends SynchronizedAttributeAccessor implements RepeatContext;\npublic class SynchronizedAttributeAccessor extends Object implements org.springframework.core.AttributeAccessor; // An AttributeAccessor that synchronizes on a mutex (not this) before modifying or accessing the underlying attributes.\n", "des": "Infrastructure implementations of repeat context concerns."}
{"index": 3598, "repo": "lucene-test-framework-9.7.0", "code": "package store;\n\nClass BaseChunkedDirectoryTestCase; // Base class for Directories that \"chunk\" the input into blocks.\nClass BaseDirectoryTestCase; // Base class for Directory implementations.\nClass BaseDirectoryWrapper; // Calls check index on close.\nClass BaseLockFactoryTestCase; // Base class for per-LockFactory tests.\nClass CorruptingIndexOutput; // Corrupts on bit of a file after close\nClass MockDirectoryWrapper; // This is a Directory Wrapper that adds methods intended to be used only by unit tests.\nClass MockDirectoryWrapper.Failure; // Objects that represent fail-able conditions.\nClass MockIndexInputWrapper; // Used by MockDirectoryWrapper to create an input stream that keeps track of when it's been closed.\nClass MockIndexOutputWrapper; // Used to create an output stream that will throw an IOException on fake disk full, track max disk space actually used, and maybe throw random IOExceptions.\nClass RawDirectoryWrapper; // Delegates all operations, even optional ones, to the wrapped directory.\nEnum MockDirectoryWrapper.Throttling; // Enum for controlling hard disk throttling.\nClass MockDirectoryWrapper.FakeIOException; // Use this when throwing fake IOException, e.g.\n", "des": "Support for testing store mechanisms."}
{"index": 1997, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\npackage servlet.error; // Auto-configuration for Spring MVC error handling.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @ConditionalOnMissingBean(parameterizedContainer=org.springframework.boot.web.servlet.FilterRegistrationBean.class) public @interface ConditionalOnMissingFilterBean; // @Conditional that only matches when no Filter beans of the specified type are contained in the BeanFactory.\npublic class DefaultJerseyApplicationPath extends Object implements JerseyApplicationPath; // Default implementation of JerseyApplicationPath that derives the path from JerseyProperties or the @ApplicationPath annotation.\n@AutoConfigureOrder(-2147483648) @AutoConfiguration(after=ServletWebServerFactoryAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) public class DispatcherServletAutoConfiguration extends Object; // Auto-configuration for the Spring DispatcherServlet.\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition.class) @ConditionalOnClass(jakarta.servlet.ServletRegistration.class) @EnableConfigurationProperties(WebMvcProperties.class) protected static class DispatcherServletAutoConfiguration.DispatcherServletConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition.class) @ConditionalOnClass(jakarta.servlet.ServletRegistration.class) @EnableConfigurationProperties(WebMvcProperties.class) @Import(DispatcherServletConfiguration.class) protected static class DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration extends Object;\n@FunctionalInterface public interface DispatcherServletPath; // Interface that can be used by auto-configurations that need path details for the default DispatcherServlet.\npublic class DispatcherServletRegistrationBean extends org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.web.servlet.DispatcherServlet> implements DispatcherServletPath; // ServletRegistrationBean for the auto-configured DispatcherServlet.\n", "des": "Auto-configuration for servlet web servers and Spring MVC."}
{"index": 2047, "repo": "spring-boot-loader-3.1.1", "code": "package archive;\n\npublic interface Archive extends Iterable<Archive.Entry>, AutoCloseable; // An archive that can be launched by the Launcher.\npublic static interface Archive.Entry; // Represents a single entry in the archive.\n@FunctionalInterface public static interface Archive.EntryFilter; // Strategy interface to filter Entries.\npublic class ExplodedArchive extends Object implements Archive; // Archive implementation backed by an exploded archive directory.\npublic class JarFileArchive extends Object implements Archive; // Archive implementation backed by a JarFile.\n", "des": "Abstraction over logical Archives be they backed by a JAR file or unpacked into a directory."}
{"index": 1730, "repo": "spring-jdbc-6.0.11", "code": "package embedded;\n\npublic interface ConnectionProperties; // ConnectionProperties serves as a simple data container that allows essential JDBC connection properties to be configured consistently, independent of the actual DataSource implementation.\npublic interface DataSourceFactory; // DataSourceFactory encapsulates the creation of a particular DataSource implementation such as a non-pooling SimpleDriverDataSource or a HikariCP pool setup in the shape of a HikariDataSource.\npublic interface EmbeddedDatabase extends DataSource; // EmbeddedDatabase serves as a handle to an embedded database instance.\npublic class EmbeddedDatabaseBuilder extends Object; // A builder that provides a convenient API for constructing an embedded database.\npublic interface EmbeddedDatabaseConfigurer; // EmbeddedDatabaseConfigurer encapsulates the configuration required to create, connect to, and shut down a specific type of embedded database such as HSQL, H2, or Derby.\npublic class EmbeddedDatabaseFactory extends Object; // Factory for creating an EmbeddedDatabase instance.\npublic class EmbeddedDatabaseFactoryBean extends EmbeddedDatabaseFactory implements org.springframework.beans.factory.FactoryBean<DataSource>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // A subclass of EmbeddedDatabaseFactory that implements FactoryBean for registration as a Spring bean.\npublic enum EmbeddedDatabaseType extends Enum<EmbeddedDatabaseType>; // A supported embedded database type.\npublic final class OutputStreamFactory extends Object; // Internal helper for exposing dummy OutputStreams to embedded databases such as Derby, preventing the creation of a log file.\n", "des": "Provides extensible support for creating embedded database instances."}
{"index": 667, "repo": "commons-lang3-3.12.0", "code": "package locks;\n\nClass LockingVisitors; // Combines the monitor and visitor pattern to work with locked objects.\nClass LockingVisitors.LockVisitor<O,L>; // Wraps a domain object and a lock for access by lambdas.\nClass LockingVisitors.ReadWriteLockVisitor<O>; // This class implements a wrapper for a locked (hidden) object, and provides the means to access it.\nClass LockingVisitors.StampedLockVisitor<O>; // This class implements a wrapper for a locked (hidden) object, and provides the means to access it.\n", "des": "Provides support classes for multi-threaded programming."}
{"index": 2210, "repo": "spring-data-commons-3.1.2", "code": "package model;\n\npublic abstract class AbstractPersistentProperty<P extends PersistentProperty<P>> extends Object implements PersistentProperty<P>; // Simple implementation of PersistentProperty.\npublic abstract class AnnotationBasedPersistentProperty<P extends PersistentProperty<P>> extends AbstractPersistentProperty<P>; // Special PersistentProperty that takes annotations at a property into account.\npublic class BasicPersistentEntity<T,P extends PersistentProperty<P>> extends Object implements MutablePersistentEntity<T,P>; // Simple value object to capture information of PersistentEntitys.\npublic enum BeanWrapperPropertyAccessorFactory extends Enum<BeanWrapperPropertyAccessorFactory> implements PersistentPropertyAccessorFactory; // PersistentPropertyAccessorFactory that uses a BeanWrapper.\npublic class CamelCaseAbbreviatingFieldNamingStrategy extends CamelCaseSplittingFieldNamingStrategy; // FieldNamingStrategy that abbreviates field names by using the very first letter of the camel case parts of the PersistentProperty's name.\npublic class CamelCaseSplittingFieldNamingStrategy extends Object implements FieldNamingStrategy; // Configurable FieldNamingStrategy that splits up camel-case property names and reconcatenates them using a configured delimiter.\npublic class ClassGeneratingPropertyAccessorFactory extends Object implements PersistentPropertyAccessorFactory; // A factory that can generate byte code to speed-up dynamic property access.\npublic class ConvertingPropertyAccessor<T> extends Object; // PersistentPropertyAccessor that potentially converts the value handed to ConvertingPropertyAccessor.setProperty(PersistentProperty, Object) to the type of the PersistentProperty using a ConversionService.\npublic class DefaultSpELExpressionEvaluator extends Object implements SpELExpressionEvaluator; // ParameterValueProvider implementation that evaluates the Parameters key against SpelExpressionParser and EvaluationContext.\npublic interface EntityInstantiator; // SPI to abstract strategies to create instances for PersistentEntitys.\npublic class EntityInstantiators extends Object; // Simple value object allowing access to EntityInstantiator instances for a given type falling back to a default one.\npublic interface FieldNamingStrategy; // SPI to determine how to name document fields in cases the field name is not manually defined.\npublic class IdPropertyIdentifierAccessor extends TargetAwareIdentifierAccessor; // Default implementation of IdentifierAccessor.\npublic class InstantiationAwarePropertyAccessor<T> extends Object implements PersistentPropertyAccessor<T>; // A PersistentPropertyAccessor that will use an entity's PersistenceCreator to create a new instance of it to apply a new value for a given PersistentProperty.\n", "des": "Core implementation of the mapping subsystem's model."}
{"index": 427, "repo": "commons-geometry-hull-1.0-beta1", "code": "package twod;\n\nInterface ConvexHullGenerator2D; // Interface for convex hull generators in the two-dimensional Euclidean space.\nClass AklToussaintHeuristic; // A simple heuristic to improve the performance of convex hull algorithms.\nClass ConvexHull2D; // This class represents a convex hull in two-dimensional Euclidean space.\nClass MonotoneChain; // Implements Andrew's monotone chain method to generate the convex hull of a finite set of points in the two-dimensional Euclidean space.\n", "des": "This package provides algorithms to generate the convex hull for a set of points in an two-dimensional Euclidean space."}
{"index": 1065, "repo": "avro-1.11.2", "code": "package specific;\n\nInterface SpecificData.SchemaConstructable; // Tag interface that indicates that a class has a one-argument constructor that accepts a Schema.\nInterface SpecificRecord; // Implemented by generated record classes.\nClass SpecificData; // Utilities for generated Java classes and interfaces.\nClass SpecificDatumReader<T>; // DatumReader for generated Java classes.\nClass SpecificDatumWriter<T>; // DatumWriter for generated Java classes.\nClass SpecificErrorBuilderBase<T extends SpecificExceptionBase>; // Abstract base class for specific ErrorBuilder implementations.\nClass SpecificFixed; // Base class for generated fixed-sized data classes.\nClass SpecificRecordBase; // Base class for generated record classes.\nClass SpecificRecordBuilderBase<T extends SpecificRecord>; // Abstract base class for specific RecordBuilder implementations.\nClass SpecificExceptionBase; // Base class for specific exceptions.\nAnnotation Type AvroGenerated; // Indicates that an annotated class is an Avro generated class.\nAnnotation Type FixedSize; // Declares the size of implementations of GenericFixed.\n", "des": "Generate specific Java classes for schemas and protocols."}
{"index": 2460, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package elastic;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.elastic.ElasticMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"elastic\") @EnableConfigurationProperties(ElasticProperties.class) public class ElasticMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Elastic.\n@ConfigurationProperties(prefix=\"management.elastic.metrics.export\") public class ElasticProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Elastic metrics export.\n", "des": "Support for exporting actuator metrics to Elastic."}
{"index": 14, "repo": "commons-collections4-4.4", "code": "package collections4;\n\npackage collections4.bag; // This package contains implementations of the Bag and SortedBag interfaces.\npackage collections4.bidimap; // This package contains implementations of the BidiMap, OrderedBidiMap and SortedBidiMap interfaces.\npackage collections4.collection; // This package contains implementations of the Collection interface.\npackage collections4.comparators; // This package contains implementations of the Comparator interface.\npackage collections4.functors; // This package contains implementations of the Closure, Predicate, Transformer and Factory interfaces.\npackage collections4.iterators; // This package contains implementations of the Iterator interface.\npackage collections4.keyvalue; // This package contains implementations of collection and map related key/value classes.\npackage collections4.list; // This package contains implementations of the List interface.\npackage collections4.map; // This package contains implementations of the Map, IterableMap, OrderedMap and SortedMap interfaces.\npackage collections4.multimap; // This package contains implementations of the MultiValuedMap interfaces.\npackage collections4.multiset; // This package contains implementations of the MultiSet interface.\npackage collections4.properties; // This package contains classes to extend or customize the behavior of Properties.\npackage collections4.queue; // This package contains implementations for the Queue interface.\npackage collections4.sequence; // This package provides classes to compare two sequences of objects.\npackage collections4.set; // This package contains implementations of the Set, SortedSet and NavigableSet interfaces.\npackage collections4.splitmap; // The \"split map\" concept is that of an object that implements the Put and Get interfaces, with differing generic types.\npackage collections4.trie; // This package contains implementations of the Trie interface.\nInterface Bag<E>; // Defines a collection that counts the number of times an object appears in the collection.\nInterface BidiMap<K,V>; // Defines a map that allows bidirectional lookup between key and values.\nInterface BoundedCollection<E>; // Defines a collection that is bounded in size.\nInterface BoundedMap<K,V>; // Defines a map that is bounded in size.\nInterface Closure<T>; // Defines a functor interface implemented by classes that do something.\nInterface Equator<T>; // An equation function, which determines equality between objects of type T.\n", "des": "This package contains the interfaces and utilities shared across all the subpackages of this component."}
{"index": 1102, "repo": "fontbox-3.0.0-beta1", "code": "package cmap;\n\nClass CMap; // This class represents a CMap file.\nClass CMapParser; // Parses a CMap stream.\nClass CodespaceRange; // This represents a single entry in the codespace range.\n", "des": "This package holds classes that are necessary to parse cmap files."}
{"index": 1001, "repo": "spring-ws-3.0.10.RELEASE", "code": "package mail;\n\npackage mail.monitor; // Provides the MonitoringStrategy interface and implementations.\npackage mail.support; // Classes supporting the org.springframework.ws.transport.mail package.\nInterface MailTransportConstants; // Declares Mail-specific transport constants.\nClass MailMessageReceiver; // Server-side component for receiving email messages using JavaMail.\nClass MailMessageSender; // WebServiceMessageSender implementation that uses Mail MimeMessages.\nClass MailReceiverConnection; // Implementation of WebServiceConnection that is used for server-side Mail access.\nClass MailSenderConnection; // Implementation of WebServiceConnection that is used for client-side Mail access.\nClass MailTransportException; // Exception that is thrown when an error occurs in the Mail transport.\n", "des": "Package providing support for handling messages via email."}
{"index": 1822, "repo": "pulsar-client-original-3.0.0", "code": "package customroute;\n\npublic class PartialRoundRobinMessageRouterImpl extends Object implements MessageRouter;\n", "des": "Pulsar Client customized routing mode."}
{"index": 747, "repo": "ignite-indexing-2.15.0", "code": "package indexing;\n\nClass IndexingQueryEngineConfiguration; // Query engine configuration for indexing-backed query engine.\n", "des": "Contains Ignite-indexing module classes and interfaces."}
{"index": 3095, "repo": "spring-ws-core-4.0.5", "code": "package http;\n\npublic abstract class AbstractHttpSenderConnection extends AbstractSenderConnection implements FaultAwareWebServiceConnection; // Abstract base class for WebServiceConnection implementations that send request over HTTP.\npublic abstract class AbstractHttpWebServiceMessageSender extends Object implements WebServiceMessageSender; // Abstract base class for WebServiceMessageSender implementations that use HTTP.\npublic class ClientHttpRequestConnection extends AbstractHttpSenderConnection; // Implementation of the WebServiceConnection interface that is based on the Spring 3 ClientHttpRequest and ClientHttpResponse.\npublic class ClientHttpRequestMessageSender extends AbstractHttpWebServiceMessageSender; // WebServiceMessageSender implementation based on the ClientHttpRequestFactory introduced in Spring 3.\n@Deprecated public class CommonsHttpConnection extends AbstractHttpSenderConnection;\n@Deprecated public class CommonsHttpMessageSender extends AbstractHttpWebServiceMessageSender implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\npublic class HttpComponents5ClientFactory extends Object implements org.springframework.beans.factory.FactoryBean<org.apache.hc.client5.http.impl.classic.CloseableHttpClient>; // FactoryBean to set up a CloseableHttpClient using HttpComponents HttpClient 5.\n@FunctionalInterface public static interface HttpComponents5ClientFactory.HttpClientBuilderCustomizer;\n@FunctionalInterface public static interface HttpComponents5ClientFactory.PoolingHttpClientConnectionManagerBuilderCustomizer;\npublic class HttpComponents5Connection extends AbstractHttpSenderConnection; // Implementation of WebServiceConnection that is based on Apache HttpClient 5.\npublic class HttpComponents5MessageSender extends AbstractHttpWebServiceMessageSender implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // WebServiceMessageSender implementation that uses Apache HttpClient to execute POST requests.\npublic static class HttpComponents5MessageSender.RemoveSoapHeadersInterceptor extends Object implements org.apache.hc.core5.http.HttpRequestInterceptor; // HttpClient HttpRequestInterceptor implementation that removes Content-Length and Transfer-Encoding headers from the request.\npublic class HttpComponentsConnection extends AbstractHttpSenderConnection; // Implementation of WebServiceConnection that is based on Apache HttpClient.\n", "des": "Package providing support for handling messages via HTTP."}
{"index": 245, "repo": "nutch-2.4", "code": "package http;\n\nClass Http;\nClass HttpResponse; // An HTTP response.\nEnum HttpResponse.Scheme;\n", "des": "Protocol plugin which supports retrieving documents via the http protocol."}
{"index": 1526, "repo": "spring-context-6.0.11", "code": "package glassfish;\n\npublic class GlassFishLoadTimeWeaver extends Object implements LoadTimeWeaver; // LoadTimeWeaver implementation for GlassFish's org.glassfish.api.deployment.InstrumentableClassLoader InstrumentableClassLoader.\n", "des": "Support for class instrumentation on GlassFish."}
{"index": 1107, "repo": "fontbox-3.0.0-beta1", "code": "package model;\n\nInterface GsubData; // Model for data from the GSUB tables\nInterface ScriptFeature; // Models a FeatureRecord\nClass MapBackedGsubData; // A Map based simple implementation of the GsubData\nClass MapBackedScriptFeature; // A Map based simple implementation of the ScriptFeature\nEnum Language; // Enumerates the languages supported for GSUB operation.\n", "des": "This package contains a more logical model for the various font tables like GSUB."}
{"index": 2262, "repo": "spring-vault-core-3.0.4", "code": "package env;\n\npublic class LeaseAwareVaultPropertySource extends EnumerablePropertySource<VaultOperations>; // PropertySource that requests renewable secrets from SecretLeaseContainer.\npublic class VaultPropertySource extends EnumerablePropertySource<VaultOperations>; // PropertySource that reads keys and values from a VaultTemplate and path.\npublic class VaultPropertySourceNotFoundException extends VaultException; // Exception throws when a VaultPropertySource could not load its properties.\n", "des": "Spring Vault's environment abstraction consisting property source support."}
{"index": 804, "repo": "lucene-analyzers-common-8.11.2", "code": "package shingle;\n\nClass FixedShingleFilter; // A FixedShingleFilter constructs shingles (token n-grams) from a token stream.\nClass FixedShingleFilterFactory; // Factory for FixedShingleFilter Parameters are: shingleSize - how many tokens should be combined into each shingle (default: 2) tokenSeparator - how tokens should be joined together in the shingle (default: space) fillerToken - what should be added in place of stop words (default: _ )\nClass ShingleAnalyzerWrapper; // A ShingleAnalyzerWrapper wraps a ShingleFilter around another Analyzer.\nClass ShingleFilter; // A ShingleFilter constructs shingles (token n-grams) from a token stream.\nClass ShingleFilterFactory; // Factory for ShingleFilter.\n", "des": "Word n-gram filters."}
{"index": 1341, "repo": "groovy-all-4.0.13", "code": "package syntax;\n\npublic class ASTHelper extends Object; // A common base class of AST helper methods which can be shared across the classic and new parsers\npublic abstract class CSTNode extends Object; // An abstract base class for nodes in the concrete syntax tree that is the result of parsing.\npublic class Numbers extends Object; // Helper class for processing Groovy numeric literals.\npublic class ParserException extends TokenException;\npublic class ReadException extends GroovyException; // Encapsulates non-specific i/o exceptions.\npublic class Reduction extends CSTNode; // A syntax reduction, produced by the Parser.\npublic class RuntimeParserException extends GroovyRuntimeException; // A helper class to allow parser exceptions to be thrown anywhere in the code.\npublic class SyntaxException extends GroovyException; // Base exception indicating a syntax error.\npublic class Token extends CSTNode; // A CSTNode produced by the Lexer.\npublic class TokenException extends SyntaxException;\npublic class TokenMismatchException extends TokenException;\npublic class TokenUtil extends Object; // Utility methods for working with Tokens.\npublic class Types extends Object; // Typing information for the CST system.\n", "des": "Lexer, parser and trees."}
{"index": 1677, "repo": "spring-oxm-6.0.11", "code": "package config;\n\npublic class OxmNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'oxm' namespace.\n", "des": "Provides an namespace handler for the Spring Object/XML namespace."}
{"index": 1413, "repo": "spring-boot-actuator-3.1.1", "code": "package annotation;\n\npublic final class TimedAnnotations extends Object; // Utility used to obtain @Timed annotations from bean methods.\n", "des": "Support classes for handler method metrics."}
{"index": 2516, "repo": "spring-security-core-6.1.2", "code": "package event;\n\n@Deprecated public abstract class AbstractAuthorizationEvent extends org.springframework.context.ApplicationEvent;\n@Deprecated public class AuthenticationCredentialsNotFoundEvent extends AbstractAuthorizationEvent;\n@Deprecated public class AuthorizationFailureEvent extends AbstractAuthorizationEvent;\n@Deprecated public class AuthorizedEvent extends AbstractAuthorizationEvent;\n@Deprecated public class LoggerListener extends Object implements org.springframework.context.ApplicationListener<AbstractAuthorizationEvent>;\n@Deprecated public class PublicInvocationEvent extends AbstractAuthorizationEvent;\n", "des": "Authorization event and listener classes."}
{"index": 1005, "repo": "spring-ws-3.0.10.RELEASE", "code": "package xmpp;\n\nInterface XmppTransportConstants; // Declares XMPP-specific transport constants.\nClass XmppMessageReceiver; // Server-side component for receiving XMPP (Jabber) messages.\nClass XmppMessageSender; // WebServiceMessageSender implementation that uses XMPP Messages.\nClass XmppReceiverConnection; // Implementation of WebServiceConnection that is used for server-side XMPP access.\nClass XmppSenderConnection; // Implementation of WebServiceConnection that is used for client-side XMPP access.\n", "des": "Package providing support for handling messages via xmpp."}
{"index": 1400, "repo": "spring-boot-actuator-3.1.1", "code": "package health;\n\npublic abstract class AbstractHealthIndicator extends Object implements HealthIndicator; // Base HealthIndicator implementations that encapsulates creation of Health instance and error handling.\npublic abstract class AbstractReactiveHealthIndicator extends Object implements ReactiveHealthIndicator; // Base ReactiveHealthIndicator implementations that encapsulates creation of Health instance and error handling.\npublic final class AdditionalHealthEndpointPath extends Object; // Value object that represents an additional path for a HealthEndpointGroup.\npublic class CompositeHealth extends HealthComponent; // A HealthComponent that is composed of other HealthComponent instances.\npublic interface CompositeHealthContributor extends HealthContributor, NamedContributors<HealthContributor>; // A HealthContributor that is composed of other HealthContributor instances.\npublic interface CompositeReactiveHealthContributor extends ReactiveHealthContributor, NamedContributors<ReactiveHealthContributor>; // A ReactiveHealthContributor that is composed of other ReactiveHealthContributor instances.\npublic interface ContributorRegistry<C> extends NamedContributors<C>; // A mutable registry of health endpoint contributors (either HealthContributor or ReactiveHealthContributor).\npublic class DefaultHealthContributorRegistry extends Object implements HealthContributorRegistry; // Default HealthContributorRegistry implementation.\npublic class DefaultReactiveHealthContributorRegistry extends Object implements ReactiveHealthContributorRegistry; // Default ReactiveHealthContributorRegistry implementation.\npublic final class Health extends HealthComponent; // Carries information about the health of a component or subsystem.\npublic static class Health.Builder extends Object; // Builder for creating immutable Health instances.\npublic abstract class HealthComponent extends Object implements OperationResponseBody; // A component that contributes data to results returned from the HealthEndpoint.\npublic interface HealthContributor; // Tagging interface for classes that contribute to health components to the results returned from the HealthEndpoint.\npublic class HealthContributorNameFactory extends Object implements Function<String,String>; // Generate a sensible health indicator name based on its bean name.\npublic interface HealthContributorRegistry extends ContributorRegistry<HealthContributor>; // ContributorRegistry for HealthContributors.\n@Endpoint(id=\"health\") public class HealthEndpoint extends Object; // @Endpoint to expose application health information.\npublic interface HealthEndpointGroup; // A logical grouping of health contributors that can be exposed by the HealthEndpoint.\npublic interface HealthEndpointGroups; // A collection of groups for use with a health endpoint.\n", "des": "Actuator health indicator and endpoints."}
{"index": 3396, "repo": "commons-imaging-1.0-alpha3", "code": "package decoder;\n\nClass JpegDecoder;\n", "des": "JPEG image format decoder."}
{"index": 2163, "repo": "wicket-core-10.0.0-M1", "code": "package servlet;\n\npublic abstract class AbstractRequestWrapperFactory extends Object; // A factory of HttpServletRequest wrappers.\npublic class ErrorAttributes extends Object; // Represents additional error attributes present in a ServletRequest when the servlet container is handling an error or a forward to an error page mapped by error-page element in web.xml.\npublic class FilterFactoryManager extends Object implements Iterable<AbstractRequestWrapperFactory>; // A very simple manager for web filter factories.\npublic class ForwardAttributes extends Object; // Represents additional attributes present in a ServletRequest when the servlet container is handling a forward to another path than the initially requested one.\npublic abstract class MultipartServletWebRequest extends ServletWebRequest implements IMultipartWebRequest; // Servlet specific WebRequest subclass for multipart content uploads.\npublic class MultipartServletWebRequestImpl extends MultipartServletWebRequest; // Servlet specific WebRequest subclass for multipart content uploads.\npublic class ResponseIOException extends WicketRuntimeException implements IWicketInternalException; // Distinct IO exceptions from the those triggered while responding a request.\npublic class SecuredRemoteAddressRequestWrapperFactory extends AbstractRequestWrapperFactory; // Sets ServletRequest.isSecure() to true if ServletRequest.getRemoteAddr() matches one of the securedRemoteAddresses of this filter.\npublic static class SecuredRemoteAddressRequestWrapperFactory.Config extends Object;\npublic class ServletWebRequest extends org.apache.wicket.request.http.WebRequest; // WebRequest subclass that wraps a HttpServletRequest object.\npublic class ServletWebResponse extends org.apache.wicket.request.http.WebResponse; // WebResponse that wraps a ServletWebResponse.\npublic class UploadInfo extends Object implements org.apache.wicket.util.io.IClusterable; // Holds information about an upload, also has useful querying methods.\npublic class WicketSessionFilter extends Object implements jakarta.servlet.Filter; // This filter can be used to make the Wicket WebSession instances available to non-wicket servlets.\npublic class XForwardedRequestWrapper extends jakarta.servlet.http.HttpServletRequestWrapper; // See XForwardedFilter\npublic class XForwardedRequestWrapperFactory extends AbstractRequestWrapperFactory; // Request wrapper factory to integrate \"X-Forwarded-For\" and \"X-Forwarded-Proto\" HTTP headers.\npublic static class XForwardedRequestWrapperFactory.Config extends Object; // Filter Config\n", "des": "Java Servlet specific implementation of Wicket http classes."}
{"index": 2991, "repo": "spring-ldap-core-3.1.0", "code": "package impl;\n\npublic class DefaultObjectDirectoryMapper extends Object implements ObjectDirectoryMapper; // Default implementation of ObjectDirectoryMapper.\npublic class InvalidEntryException extends OdmException; // Thrown to indicate that an instance is not suitable for persisting in the LDAP directory.\npublic class MetaDataException extends OdmException; // Thrown to indicate an error in the annotated meta-data.\npublic class UnmanagedClassException extends OdmException; // Thrown when an OdmManager method is called with a class which is not being managed by the OdmManager.\n", "des": "Provides a single public class which implements OdmManager."}
{"index": 1994, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package reactive;\n\npackage reactive.error; // Auto-configuration for Spring WebFlux error handling.\n@AutoConfiguration(after=WebFluxAutoConfiguration.class) @ConditionalOnClass({org.springframework.web.reactive.DispatcherHandler.class,org.springframework.http.server.reactive.HttpHandler.class}) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnMissingBean(org.springframework.http.server.reactive.HttpHandler.class) @AutoConfigureOrder(-2147483638) public class HttpHandlerAutoConfiguration extends Object; // Auto-configuration for HttpHandler.\n@Configuration(proxyBeanMethods=false) public static class HttpHandlerAutoConfiguration.AnnotationConfig extends Object;\n@AutoConfiguration @ConditionalOnClass({org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.class,org.springframework.web.reactive.config.WebFluxConfigurer.class}) @ConditionalOnWebApplication(type=REACTIVE) @EnableConfigurationProperties(ReactiveMultipartProperties.class) public class ReactiveMultipartAutoConfiguration extends Object; // Auto-configuration for multipart support in Spring WebFlux.\n@ConfigurationProperties(prefix=\"spring.webflux.multipart\") public class ReactiveMultipartProperties extends Object; // Configuration properties for configuring multipart support in Spring Webflux.\n@AutoConfigureOrder(-2147483648) @AutoConfiguration @ConditionalOnClass(org.springframework.http.ReactiveHttpInputMessage.class) @ConditionalOnWebApplication(type=REACTIVE) @EnableConfigurationProperties(ServerProperties.class) @Import({BeanPostProcessorsRegistrar.class,org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration.EmbeddedTomcat.class,org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration.EmbeddedJetty.class,org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration.EmbeddedUndertow.class,org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration.EmbeddedNetty.class}) public class ReactiveWebServerFactoryAutoConfiguration extends Object; // Auto-configuration for a reactive web server.\n", "des": "Auto-configuration for reactive web servers and Spring WebFlux."}
{"index": 2947, "repo": "spring-security-config-6.1.2", "code": "package method;\n\n@Deprecated public class GlobalMethodSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class InterceptMethodsBeanDefinitionDecorator extends Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator;\npublic class MethodSecurityBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Processes the top-level \"method-security\" element.\npublic static final class MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>, org.springframework.context.ApplicationContextAware;\npublic static final class MethodSecurityBeanDefinitionParser.MethodSecurityExpressionHandlerBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.access.expression.method.MethodSecurityExpressionHandler>, org.springframework.context.ApplicationContextAware;\npublic static final class MethodSecurityBeanDefinitionParser.PostAuthorizeAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor>;\npublic static final class MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>;\npublic static final class MethodSecurityBeanDefinitionParser.SecuredAuthorizationMethodInterceptor extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor>;\n@Deprecated public class MethodSecurityMetadataSourceBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;\n", "des": "Support for parsing of the <global-method-security> and <intercept-methods> elements."}
{"index": 993, "repo": "spring-ws-3.0.10.RELEASE", "code": "package support;\n\npackage support.creator; // Provides the generic WebServiceMessageCreator interface, and implementations.\npackage support.matcher; // Provides the generic WebServiceMessageMatcher interface, and implementations.\nClass AssertionErrors; // JUnit independent assertion class.\nClass MockStrategiesHelper; // Helper class for for loading default implementations of an interface.\nClass SourceAssertionError; // Subclass of AssertionError that also contains a Source for more context.\n", "des": "Support classes for the testing framework, used by the classes in the org.springframework.ws.test.client and org.springframework.ws.test.server packages."}
{"index": 2060, "repo": "slf4j-ext-2.0.7", "code": "package ext;\n\npublic class LoggerWrapper extends Object implements Logger; // A helper class wrapping an Logger instance preserving location information if the wrapped instance supports it.\npublic class XLogger extends LoggerWrapper implements Logger; // A utility that provides standard mechanisms for logging certain kinds of activities.\npublic static enum XLogger.Level extends Enum<XLogger.Level>;\npublic class XLoggerFactory extends Object; // This class is essentially a wrapper around an LoggerFactory producing XLogger instances.\n", "des": "Localized logging using the CAL10N API."}
{"index": 2723, "repo": "spring-batch-infrastructure-5.0.2", "code": "package transform;\n\npublic abstract class AbstractLineTokenizer extends Object implements LineTokenizer; // Abstract class handling common concerns of various LineTokenizer implementations such as dealing with names and actual construction of FieldSet\npublic class BeanWrapperFieldExtractor<T> extends Object implements FieldExtractor<T>, org.springframework.beans.factory.InitializingBean; // This is a field extractor for a java bean.\npublic class ConversionException extends RuntimeException;\npublic class DefaultFieldSet extends Object implements FieldSet; // Default implementation of FieldSet using Java using Java primitive and standard types and utilities.\npublic class DefaultFieldSetFactory extends Object implements FieldSetFactory; // Default implementation of FieldSetFactory with no special knowledge of the FieldSet required.\npublic class DelimitedLineAggregator<T> extends ExtractorLineAggregator<T>; // A LineAggregator implementation that converts an object into a delimited list of strings.\npublic class DelimitedLineTokenizer extends AbstractLineTokenizer implements org.springframework.beans.factory.InitializingBean; // A LineTokenizer implementation that splits the input String on a configurable delimiter.\npublic abstract class ExtractorLineAggregator<T> extends Object implements LineAggregator<T>; // An abstract LineAggregator implementation that utilizes a FieldExtractor to convert the incoming object to an array of its parts.\npublic interface FieldExtractor<T>; // This class will convert an object to an array of its parts.\npublic interface FieldSet; // Interface used by flat file input sources to encapsulate concerns of converting an array of Strings to Java native types.\npublic interface FieldSetFactory; // Factory interface for creating FieldSet instances.\npublic class FixedLengthTokenizer extends AbstractLineTokenizer; // Tokenizer used to process data obtained from files with fixed-length format.\npublic class FlatFileFormatException extends RuntimeException; // Exception indicating that some type of error has occurred while attempting to parse a line of input into tokens.\npublic class FormatterLineAggregator<T> extends ExtractorLineAggregator<T>; // A LineAggregator implementation which produces a String by aggregating the provided item via the Formatter syntax.\npublic class IncorrectLineLengthException extends FlatFileFormatException; // Exception indicating that the line size expected is different from what is expected.\npublic class IncorrectTokenCountException extends FlatFileFormatException; // Exception indicating that an incorrect number of tokens have been found while parsing a file.\n", "des": "Infrastructure implementations of io file support transform concerns."}
{"index": 557, "repo": "hadoop-common-3.3.4", "code": "package statistics;\n\nInterface DurationTracker; // Interface to be implemented by objects which can track duration.\nInterface DurationTrackerFactory; // Interface for a source of duration tracking.\nInterface IOStatistics; // IO Statistics.\nInterface IOStatisticsAggregator; // Interface exported by classes which support aggregation of IOStatistics.\nInterface IOStatisticsSource; // A source of IO statistics.\nClass BufferedIOStatisticsInputStream; // An extension of BufferedInputStream which implements IOStatisticsSource and forwards requests for the IOStatistics to the wrapped stream.\nClass BufferedIOStatisticsOutputStream; // An extension of BufferedOutputStream which implements IOStatisticsSource and forwards requests for the IOStatistics to the wrapped stream.\nClass DurationStatisticSummary; // Summary of duration tracking statistics as extracted from an IOStatistics instance.\nClass IOStatisticsLogging; // Utility operations convert IO Statistics sources/instances to strings, especially for robustly logging.\nClass IOStatisticsSnapshot; // Snapshot of statistics from a different source.\nClass IOStatisticsSupport; // Support for working with IOStatistics.\nClass MeanStatistic; // A mean statistic represented as the sum and the sample count; the mean is calculated on demand.\nClass StoreStatisticNames; // Common statistic names for object store operations..\nClass StreamStatisticNames; // These are common statistic names.\n", "des": "This package contains support for statistic collection and reporting."}
{"index": 2719, "repo": "spring-batch-infrastructure-5.0.2", "code": "package file;\n\npackage file.builder; // Builders for file item readers and writers.\npackage file.mapping; // Infrastructure implementations of io file support mapping concerns.\npackage file.separator; // Infrastructure implementations of io file support separator concerns.\npackage file.transform; // Infrastructure implementations of io file support transform concerns.\npublic interface BufferedReaderFactory; // A factory strategy for custom extensions of BufferedReader allowing customisation of the standard behaviour of the java.io variety.\npublic class DefaultBufferedReaderFactory extends Object implements BufferedReaderFactory;\npublic interface FlatFileFooterCallback; // Callback interface for writing a footer to a file.\npublic interface FlatFileHeaderCallback; // Callback interface for writing a header to a file.\npublic class FlatFileItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean; // Restartable ItemReader that reads lines from input FlatFileItemReader.setResource(Resource).\npublic class FlatFileItemWriter<T> extends AbstractFileItemWriter<T>; // This class is an item writer that writes data to a file or stream.\npublic class FlatFileParseException extends ParseException; // Exception thrown when errors are encountered parsing flat files.\npublic interface LineCallbackHandler; // Callback interface for handling a line from file.\npublic interface LineMapper<T>; // Interface for mapping lines (strings) to domain objects typically used to map lines read from a file to domain objects on a per line basis.\npublic class MultiResourceItemReader<T> extends AbstractItemStreamItemReader<T>; // Reads items from multiple resources sequentially - resource list is given by MultiResourceItemReader.setResources(Resource[]), the actual reading is delegated to MultiResourceItemReader.setDelegate(ResourceAwareItemReaderItemStream).\npublic class MultiResourceItemWriter<T> extends AbstractItemStreamItemWriter<T>; // Wraps a ResourceAwareItemWriterItemStream and creates a new output resource when the count of items written in current resource exceeds MultiResourceItemWriter.setItemCountLimitPerResource(int).\npublic class NonTransientFlatFileException extends NonTransientResourceException; // Exception thrown when errors are encountered with the underlying resource.\n", "des": "Infrastructure implementations of io file concerns."}
{"index": 2973, "repo": "pulsar-broker-3.0.0", "code": "package metadata;\n\npublic class AbortTxnMetadata extends Object; // Abort txn metadata.\npublic class TransactionBufferSnapshot extends Object; // Transaction buffer snapshot metadata.\n", "des": "The transaction buffer snapshot metadata."}
{"index": 589, "repo": "org.apache.karaf.main-2.4.4", "code": "package log;\n\nInterface FrameworkLog; // The FramworkLog interface.\nClass FrameworkLogEntry; // A framework log entry used to log information to a FrameworkLog\n", "des": "Provides the FrameworkLog service."}
{"index": 2815, "repo": "spring-integration-ip-6.1.2", "code": "package udp;\n\npublic class DatagramPacketMessageMapper extends Object implements org.springframework.integration.mapping.InboundMessageMapper<DatagramPacket>, org.springframework.integration.mapping.OutboundMessageMapper<DatagramPacket>, org.springframework.beans.factory.BeanFactoryAware; // Message Mapper for converting to and from UDP DatagramPackets.\npublic class MulticastReceivingChannelAdapter extends UnicastReceivingChannelAdapter; // Channel adapter that joins a multicast group and receives incoming packets and sends them to an output channel.\npublic class MulticastSendingMessageHandler extends UnicastSendingMessageHandler; // A MessageHandler implementation that maps a Message into a UDP datagram packet and sends that to the specified multicast address (224.0.0.0 to 239.255.255.255) and port.\n@FunctionalInterface public interface SocketCustomizer; // Configures a socket.\npublic class UdpServerListeningEvent extends IpIntegrationEvent; // IpIntegrationEvent emitted when a server begins listening.\npublic class UnicastReceivingChannelAdapter extends AbstractInternetProtocolReceivingChannelAdapter; // A channel adapter to receive incoming UDP packets.\npublic class UnicastSendingMessageHandler extends AbstractInternetProtocolSendingMessageHandler implements Runnable; // A MessageHandler implementation that maps a Message into a UDP datagram packet and sends that to the specified host and port.\n", "des": "Base package for UDP support."}
{"index": 1095, "repo": "hbase-server-3.0.0-alpha-4", "code": "package bucket;\n\nInterface IOEngine; // A class implementing IOEngine interface supports data services for BucketCache.\nClass BucketAllocator; // This class is used to allocate a block with specified size and free the block when evicting.\nClass BucketAllocator.Bucket;\nClass BucketCache; // BucketCache uses BucketAllocator to allocate/free blocks, and uses BucketCache#ramCache and BucketCache#backingMap in order to determine if a given element is in the cache.\nClass BucketCachePersister;\nClass BucketCacheStats; // Class that implements cache metrics for bucket cache.\nClass ByteBufferIOEngine; // IO engine that stores data in memory using an array of ByteBuffers ByteBufferArray.\nClass CachedEntryQueue; // A memory-bound queue that will grow until an element brings total size larger than maxSize.\nClass ExclusiveMemoryMmapIOEngine; // IO engine that stores data to a file on the local block device using memory mapping mechanism\nClass FileIOEngine; // IO engine that stores data to a file on the local file system.\nClass FileMmapIOEngine; // IO engine that stores data to a file on the specified file system using memory mapping mechanism\nClass PersistentIOEngine; // A class implementing PersistentIOEngine interface supports file integrity verification for BucketCache which use persistent IOEngine\nClass SharedMemoryMmapIOEngine; // IO engine that stores data in pmem devices such as DCPMM.\nClass BucketAllocatorException; // Thrown by BucketAllocator\nClass CacheFullException; // Thrown by BucketAllocator.allocateBlock(int) when cache is full for the requested size\n", "des": "Provides BucketCache, an implementation of BlockCache."}
{"index": 2310, "repo": "spring-boot-3.1.1", "code": "package jdbc;\n\npackage jdbc.init; // Support for initialization of an SQL database using a JDBC DataSource.\npackage jdbc.metadata; // Support for accessing JDBC DataSource metadata.\npublic enum DatabaseDriver extends Enum<DatabaseDriver>; // Enumeration of common database drivers.\npublic final class DataSourceBuilder<T extends DataSource> extends Object; // Convenience class for building a DataSource.\npublic final class DataSourceUnwrapper extends Object; // Unwraps a DataSource that may have been proxied or wrapped in a custom Wrapper such as DelegatingDataSource.\npublic enum EmbeddedDatabaseConnection extends Enum<EmbeddedDatabaseConnection>; // Connection details for embedded databases.\npublic enum SchemaManagement extends Enum<SchemaManagement>; // An enumeration of the available schema management options.\n@FunctionalInterface public interface SchemaManagementProvider; // Strategy interface to determine the SchemaManagement of a DataSource.\npublic class UnsupportedDataSourcePropertyException extends RuntimeException; // RuntimeException thrown from DataSourceBuilder when an unsupported property is used.\n@FunctionalInterface public interface XADataSourceWrapper; // Strategy interface used to wrap an XADataSource enrolling it with a JTA TransactionManager.\n", "des": "Support for Java Database Connectivity (JDBC)."}
{"index": 1471, "repo": "spring-boot-configuration-processor-3.1.1", "code": "package fieldvalues;\n\npackage fieldvalues.javac; // Field value parsing for the standard Java compiler.\n@FunctionalInterface public interface FieldValuesParser; // Parser which can be used to obtain the field values from an TypeElement.\n", "des": "Abstraction for field value parsing."}
{"index": 3706, "repo": "solr-core-9.3.0", "code": "package security;\n\nInterface AuditLoggerPlugin.AuditEventFormatter; // Interface for formatting the event\nInterface AuditLoggerPlugin.MuteRule;\nInterface AuthorizationPlugin; // Authorization interface that needs to be implemented to write an authorization plugin.\nInterface BasicAuthPlugin.AuthenticationProvider;\nInterface ConfigEditablePlugin; // An interface to be implemented by a Plugin whose Configuration is runtime editable\nInterface HttpClientBuilderPlugin; // Plugin interface for configuring internal HttpClients.\nInterface PermissionNameProvider; // A requestHandler should implement this interface to provide the well known permission at request time\nInterface VerifiedUserRoles; // Interface used to pass verified user roles in a Principal object.\nClass AllowListUrlChecker; // Validates URLs based on an allow list or a ClusterState in SolrCloud.\nClass AuditEvent; // Audit event that takes request and auth context as input to be able to audit log custom things.\nClass AuditLoggerPlugin; // Base class for Audit logger plugins.\nClass AuditLoggerPlugin.JSONAuditEventFormatter; // Event formatter that returns event as JSON string\nClass AuthenticationPlugin;\nClass AuthorizationContext; // Request context for Solr to be used by Authorization plugin.\nClass AuthorizationContext.CollectionRequest;\nClass AuthorizationResponse;\nClass AuthorizationUtils;\nClass AuthorizationUtils.AuthorizationFailure;\nClass BasicAuthPlugin;\nClass CertAuthPlugin; // An authentication plugin that sets principal based on the certificate subject\nClass ExternalRoleRuleBasedAuthorizationPlugin; // Rule Based Authz plugin implementation which reads user roles from the request.\nClass HttpServletAuthorizationContext; // An AuthorizationContext implementation that delegates many methods to an underlying HttpServletRequest\nClass MultiAuthPlugin; // Authentication plugin that supports multiple Authorization schemes, such as Bearer and Basic.\nClass MultiAuthRuleBasedAuthorizationPlugin; // Authorization plugin designed to work with the MultiAuthPlugin to support different AuthorizationPlugin per scheme.\nClass MultiDestinationAuditLogger; // Audit logger that chains other loggers.\nClass PKIAuthenticationPlugin;\nClass PKIAuthenticationPlugin.PKIHeaderData;\nClass PrintWriterWrapper; // Wrapper for PrintWriter that delegates to constructor arg\nClass PublicKeyAPI; // V2 API for fetching the public key of the receiving node.\nClass PublicKeyAPI.PublicKeyResponse;\nClass PublicKeyHandler;\nClass RuleBasedAuthorizationPlugin; // Original implementation of Rule Based Authz plugin which configures user/role mapping in the security.json configuration\nClass RuleBasedAuthorizationPluginBase; // Base class for rule based authorization plugins\n", "des": "Commonly used classes for Solr security framework."}
{"index": 1796, "repo": "spring-integration-file-6.1.2", "code": "package transformer;\n\npublic abstract class AbstractFilePayloadTransformer<T> extends Object implements org.springframework.integration.transformer.Transformer, org.springframework.beans.factory.BeanFactoryAware; // Base class for transformers that convert a File payload.\npublic class FileToByteArrayTransformer extends AbstractFilePayloadTransformer<byte[]>; // A payload transformer that copies a File's contents to a byte array.\npublic class FileToStringTransformer extends AbstractFilePayloadTransformer<String>; // A payload transformer that copies a File's contents to a String.\n", "des": "Provides classes supporting the transformation of file contents to messages."}
{"index": 3469, "repo": "hibernate-core-5.6.15.Final", "code": "package sql;\n\nInterface SqlTypeDescriptor; // Descriptor for the SQL/JDBC side of a value mapping.\nClass BasicBinder<J>; // Convenience base implementation of ValueBinder\nClass BasicExtractor<J>; // Convenience base implementation of ValueExtractor\nClass BigIntTypeDescriptor; // Descriptor for BIGINT handling.\nClass BinaryTypeDescriptor; // Descriptor for BINARY handling.\nClass BitTypeDescriptor; // Descriptor for BIT handling.\nClass BlobTypeDescriptor; // Descriptor for BLOB handling.\nClass BooleanTypeDescriptor; // Descriptor for BOOLEAN handling.\nClass CharTypeDescriptor; // Descriptor for CHAR handling.\nClass ClobTypeDescriptor; // Descriptor for CLOB handling.\nClass DateTypeDescriptor; // Descriptor for DATE handling.\nClass DecimalTypeDescriptor; // Descriptor for DECIMAL handling.\nClass DoubleTypeDescriptor; // Descriptor for DOUBLE handling.\nClass FloatTypeDescriptor; // Descriptor for FLOAT handling.\nClass IntegerTypeDescriptor; // Descriptor for INTEGER handling.\nClass JdbcTypeFamilyInformation; // Information pertaining to JDBC type families.\nClass JdbcTypeJavaClassMappings; // Maintains the JDBC recommended mappings for JDBC type-code to/from Java Class as defined in _Appendix B : Data Type Conversion Tables_ of the _JDBC 4.0 Specification_ Eventually, the plan is to have Dialect and DatabaseMetaData.getTypeInfo() contribute this information.\nClass LobTypeMappings;\nClass LongNVarcharTypeDescriptor; // Descriptor for LONGNVARCHAR handling.\nClass LongVarbinaryTypeDescriptor; // Descriptor for LONGVARBINARY handling.\nClass LongVarcharTypeDescriptor; // Descriptor for LONGVARCHAR handling.\nClass NationalizedTypeMappings; // Manages a mapping between nationalized and non-nationalized variants of JDBC types.\nClass NCharTypeDescriptor; // Descriptor for NCHAR handling.\nClass NClobTypeDescriptor; // Descriptor for NCLOB handling.\nClass NumericTypeDescriptor; // Descriptor for NUMERIC handling.\nClass NVarcharTypeDescriptor; // Descriptor for NVARCHAR handling.\nClass RealTypeDescriptor; // Descriptor for REAL handling.\nClass SmallIntTypeDescriptor; // Descriptor for SMALLINT handling.\nClass SqlTypeDescriptorRegistry;\nClass SqlTypeDescriptorRegistry.ObjectSqlTypeDescriptor;\nClass TimestampTypeDescriptor; // Descriptor for TIMESTAMP handling.\nClass TimeTypeDescriptor; // Descriptor for TIME handling.\n", "des": "Defines handling of the standard JDBC-defined types."}
{"index": 3265, "repo": "opencms-core-15.0", "code": "package oracle;\n\nClass CmsHistoryDriver; // Oracle implementation of the history driver methods.\nClass CmsProjectDriver; // Oracle/OCI implementation of the project driver methods.\nClass CmsSqlManager; // Oracle implementation of the SQL manager.\nClass CmsSubscriptionDriver; // Oracle implementation of the subscription driver.\nClass CmsUserDriver; // Oracle implementation of the user driver methods.\nClass CmsVfsDriver; // Oracle implementation of the VFS driver methods.\n", "des": "Oracle9+ implementation of the OpenCms database connector."}
{"index": 943, "repo": "spring-ws-3.0.10.RELEASE", "code": "package destination;\n\nInterface DestinationProvider; // Strategy interface for providing a WebServiceTemplate destination URI at runtime.\nClass AbstractCachingDestinationProvider; // Abstract base class for DestinationProvider implementations that cache destination URI.\nClass Wsdl11DestinationProvider; // Implementation of the DestinationProvider that resolves a destination URI from a WSDL file.\nClass DestinationProvisionException; // Thrown by a DestinationProvider when it cannot provide a destination.\n", "des": "Provides the DestinationProvider interface."}
{"index": 377, "repo": "zookeeper-jute-3.8.2", "code": "package compiler;\n\npackage compiler.generated; // This package contains code generated by JavaCC from the Hadoop record syntax file rcc.jj.\nClass CSharpGenerator;\nClass JBoolean;\nClass JBuffer;\nClass JByte;\nClass JDouble;\nClass JField;\nClass JFile; // Container for the Hadoop Record DDL.\nClass JFloat;\nClass JInt;\nClass JLong;\nClass JMap;\nClass JRecord;\nClass JString;\nClass JType; // Abstract Base class for all types supported by Hadoop Record I/O.\nClass JVector;\n", "des": "This package contains classes needed for code generation from the hadoop record compiler."}
{"index": 1357, "repo": "spring-tx-6.0.11", "code": "package endpoint;\n\npublic abstract class AbstractMessageEndpointFactory extends Object implements MessageEndpointFactory, org.springframework.beans.factory.BeanNameAware; // Abstract base implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities as well as ClassLoader exposure for endpoint invocations.\npublic class GenericMessageEndpointFactory extends AbstractMessageEndpointFactory; // Generic implementation of the JCA 1.7 MessageEndpointFactory interface, providing transaction management capabilities for any kind of message listener object (e.g.\npublic static class GenericMessageEndpointFactory.InternalResourceException extends RuntimeException; // Internal exception thrown when a ResourceException has been encountered during the endpoint invocation.\npublic class GenericMessageEndpointManager extends Object implements org.springframework.context.SmartLifecycle, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Generic bean that manages JCA 1.7 message endpoints within a Spring application context, activating and deactivating the endpoint as part of the application context's lifecycle.\n", "des": "This package provides a facility for generic JCA message endpoint management."}
{"index": 3462, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface NamedParameterContext; // The context for named parameters.\nInterface QueryBuildingParameters; // Provides values for all options that impact the built query.\n", "des": "Defines the SPI for obtaining values for options that impact the load query."}
{"index": 2965, "repo": "spring-integration-redis-6.1.2", "code": "package support;\n\npublic final class RedisHeaders extends Object; // Pre-defined names and prefixes to be used for for dealing with headers required by Redis components\n", "des": "Provides supporting classes for this module."}
{"index": 1857, "repo": "spring-test-6.0.11", "code": "package response;\n\npublic class DefaultResponseCreator extends Object implements ResponseCreator; // A ResponseCreator with builder-style methods for adding response details.\npublic class ExecutingResponseCreator extends Object implements ResponseCreator; // ResponseCreator that obtains the response by executing the request through a ClientHttpRequestFactory.\npublic abstract class MockRestResponseCreators extends Object; // Static factory methods to obtain a ResponseCreator with a fixed response.\n", "des": "Contains built-in ResponseCreator implementations."}
{"index": 2911, "repo": "spring-xml-4.0.5", "code": "package namespace;\n\npublic class QNameEditor extends PropertyEditorSupport; // PropertyEditor for javax.xml.namespace.QName, to populate a property of type QName from a String value.\npublic abstract class QNameUtils extends Object; // Helper class for using QName.\npublic class SimpleNamespaceContext extends Object implements NamespaceContext; // Simple javax.xml.namespace.NamespaceContext implementation.\n", "des": "Provides classes that help with XML Namespace processing."}
{"index": 2936, "repo": "groovy-4.0.13", "code": "package metaclass;\n\npublic final class ClosureMetaClass extends MetaClassImpl; // A metaclass for closures generated by the Groovy compiler.\npublic class ClosureMetaMethod extends MetaMethod implements ClosureInvokingMethod; // A MetaMethod that accepts a closure in the constructor which is invoked when the MetaMethod is called.\npublic class ClosureStaticMetaMethod extends MetaMethod implements ClosureInvokingMethod; // This class represents a MetaMethod that is a closure that pretends to be a static method.\npublic class ConcurrentReaderHashMap extends AbstractMap implements Cloneable, Serializable; // A hash table that supports mostly-concurrent reading, but exclusive writing.\nprotected static class ConcurrentReaderHashMap.BarrierLock extends Object implements Serializable; // A Serializable class for barrier lock\nprotected static class ConcurrentReaderHashMap.Entry extends Object implements Map.Entry; // ConcurrentReaderHashMap collision list entry.\npublic class DefaultMetaClassInfo extends Object; // WARNING: This class is for internal use only! We use this class to store information about if a default MetaClass is used for certain primitives.\npublic static class DefaultMetaClassInfo.ConstantMetaClassVersioning extends Object;\npublic class MetaClassRegistryImpl extends Object implements MetaClassRegistry; // A registry of MetaClass instances which caches introspection and reflection information and allows methods to be dynamically added to existing classes at runtime\npublic class MetaMethodIndex extends Object;\npublic static class MetaMethodIndex.CacheEntry extends Object;\npublic static class MetaMethodIndex.Entry extends Object;\npublic static interface MetaMethodIndex.EntryIterator;\npublic static class MetaMethodIndex.Header extends Object;\npublic class MethodHelper extends Object; // Some reflection helper methods\npublic class MethodMetaProperty extends MetaProperty; // Wrapper for a method for a property get or set.\npublic static class MethodMetaProperty.GetBeanMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property getter.\npublic static class MethodMetaProperty.GetMethodMetaProperty extends MethodMetaProperty; // Wrapper for a method realizing the property get.\npublic class MethodSelectionException extends GroovyRuntimeException; // This exception is thrown if the runtime is unable to select a method.\npublic class MissingMethodExceptionNoStack extends MissingMethodException;\npublic class MissingMethodExecutionFailed extends MissingMethodExceptionNoStack; // A stack less exception used to indicate, that the execution of a missingMethod method failed with a MissingMethodException.\npublic class MissingPropertyExceptionNoStack extends MissingPropertyException;\n", "des": "Internal classes related to Groovy's metaclass implementation."}
{"index": 3128, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface Batch; // Conceptually models a batch.\nInterface BatchBuilder; // A builder for Batch instances\nInterface BatchKey; // Unique key for batch identification.\nInterface BatchObserver; // An observer contract for batch events.\n", "des": "Defines contracts for JDBC batching support."}
{"index": 2318, "repo": "spring-boot-3.1.1", "code": "package logback;\n\npublic class ColorConverter extends ch.qos.logback.core.pattern.CompositeConverter<ch.qos.logback.classic.spi.ILoggingEvent>; // Logback CompositeConverter colors output using the AnsiOutput class.\npublic class ExtendedWhitespaceThrowableProxyConverter extends ch.qos.logback.classic.pattern.ExtendedThrowableProxyConverter; // ExtendedThrowableProxyConverter that adds some additional whitespace around the stack trace.\npublic class LogbackLoggingSystem extends AbstractLoggingSystem implements org.springframework.beans.factory.aot.BeanFactoryInitializationAotProcessor; // LoggingSystem for logback.\n@Order(2147483647) public static class LogbackLoggingSystem.Factory extends Object implements LoggingSystemFactory; // LoggingSystemFactory that returns LogbackLoggingSystem if possible.\npublic class LogbackLoggingSystemProperties extends LoggingSystemProperties; // LoggingSystemProperties for Logback.\npublic class RootLogLevelConfigurator extends ch.qos.logback.core.spi.ContextAwareBase implements ch.qos.logback.classic.spi.Configurator; // Logback Configurator, registered through META-INF/services, that sets the root log level to Level.INFO.\npublic class WhitespaceThrowableProxyConverter extends ch.qos.logback.classic.pattern.ThrowableProxyConverter; // ThrowableProxyConverter that adds some additional whitespace around the stack trace.\n", "des": "Support for the Logback logging library."}
{"index": 8, "repo": "connect-api-3.5.0", "code": "package sink;\n\nInterface ErrantRecordReporter; // Component that a SinkTask can use to report problematic records (and their corresponding problems) as it writes them through SinkTask.put(java.util.Collection).\nInterface SinkConnectorContext; // A context to allow a SinkConnector to interact with the Kafka Connect runtime.\nInterface SinkTaskContext; // Context passed to SinkTasks, allowing them to access utilities in the Kafka Connect runtime.\nClass SinkConnector; // SinkConnectors implement the Connector interface to send Kafka data to another system.\nClass SinkRecord; // SinkRecord is a ConnectRecord that has been read from Kafka and includes the kafkaOffset of the record in the Kafka topic-partition in addition to the standard fields.\nClass SinkTask; // SinkTask is a Task that takes records loaded from Kafka and sends them to another system.\n", "des": "Provides an API for implementing sink connectors which write Kafka records to external applications."}
{"index": 234, "repo": "nutch-2.4", "code": "package crawls;\n\nClass CrawlPanel;\nClass CrawlsPage; // This page is for crawls management\n", "des": "Contains crawl page classes for Web UI"}
{"index": 2844, "repo": "spring-integration-core-6.1.2", "code": "package aop;\n\npublic class CompoundTriggerAdvice extends Object implements MessageSourceMutator, ReceiveMessageAdvice; // A MessageSourceMutator that uses a CompoundTrigger to adjust the poller - when a message is present, the compound trigger's primary trigger is used to determine the next poll.\npublic class MessagePublishingInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanFactoryAware; // A MethodInterceptor that publishes Messages to a channel.\n@FunctionalInterface public interface MessageSourceMutator extends ReceiveMessageAdvice; // A ReceiveMessageAdvice extension that can mutate a MessageSource before and/or after MessageSource.receive() is called.\npublic class MethodAnnotationPublisherMetadataSource extends Object; // An PublisherMetadataSource implementation that retrieves the channel name and expression strings from an annotation.\npublic class MethodNameMappingPublisherMetadataSource extends Object;\npublic class PublisherAnnotationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware; // An advisor that will apply the MessagePublishingInterceptor to any methods containing the provided annotations.\npublic class PublisherAnnotationBeanPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.SmartInitializingSingleton; // Post-processes beans that contain the method-level @Publisher annotation.\n@FunctionalInterface public interface ReceiveMessageAdvice extends org.aopalliance.intercept.MethodInterceptor; // An AOP advice to perform hooks before and/or after a receive() contract is called.\npublic class SimpleActiveIdleReceiveMessageAdvice extends Object implements ReceiveMessageAdvice; // A simple advice that polls at one rate when messages exist and another when there are no messages.\npublic class SimplePublisherMetadataSource extends Object; // Simple implementation of PublisherMetadataSource that allows for configuration of a single channel name, payload expression, and array of header key=value expressions.\n", "des": "Provides classes to support message publication using AOP."}
{"index": 1629, "repo": "spring-kafka-3.0.9", "code": "package mock;\n\npublic class MockConsumerFactory<K,V> extends Object implements ConsumerFactory<K,V>; // Support the use of MockConsumer in tests.\npublic class MockProducerFactory<K,V> extends Object implements ProducerFactory<K,V>; // Support the use of MockProducer in tests.\n", "des": "Provides classes to support the use of MockConsumer and MockProducer."}
{"index": 1866, "repo": "spring-security-cas-6.1.2", "code": "package cas;\n\npackage cas.authentication; // An AuthenticationProvider that can process CAS service tickets and proxy tickets.\npackage cas.web; // Authenticates standard web browser users via CAS.\npublic final class SamlServiceProperties extends ServiceProperties; // Sets the appropriate parameters for CAS's implementation of SAML (which is not guaranteed to be actually SAML compliant).\npublic class ServiceProperties extends Object implements org.springframework.beans.factory.InitializingBean; // Stores properties related to this CAS service.\n", "des": "Spring Security support for Apereo's Central Authentication Service (CAS)."}
{"index": 2870, "repo": "spring-integration-core-6.1.2", "code": "package event;\n\npublic abstract class AbstractLeaderEvent extends org.springframework.context.ApplicationEvent; // Base ApplicationEvent class for leader based events.\npublic class DefaultLeaderEventPublisher extends Object implements LeaderEventPublisher, org.springframework.context.ApplicationEventPublisherAware; // Default implementation of LeaderEventPublisher.\npublic interface LeaderEventPublisher; // Interface for publishing leader based application events.\npublic class OnFailedToAcquireMutexEvent extends AbstractLeaderEvent; // Generic event representing that a mutex could not be acquired during leader election.\npublic class OnGrantedEvent extends AbstractLeaderEvent; // Generic event representing that leader has been granted.\npublic class OnRevokedEvent extends AbstractLeaderEvent; // Generic event representing that leader has been revoked.\n", "des": "Temporary package until s-c-c-core is released."}
{"index": 3161, "repo": "tika-core-2.8.0", "code": "package parser;\n\npackage parser.external; // External parser process.\nInterface DigestingParser.Digester; // Interface for digester.\nInterface DigestingParser.DigesterFactory; // This is used in AutoDetectParserConfig to (optionally) wrap the parser in a digesting parser.\nInterface DigestingParser.Encoder; // Encodes byte array from a MessageDigest to String\nInterface Parser; // Tika parser interface.\nInterface PasswordProvider; // Interface for providing a password to a Parser for handling Encrypted and Password Protected Documents.\nInterface RenderingParser;\nClass AbstractEncodingDetectorParser; // Abstract base class for parsers that use the AutoDetectReader and need to use the EncodingDetector configured by TikaConfig\nClass AbstractExternalProcessParser; // Abstract base class for parsers that call external processes.\nClass AbstractParser; // Abstract base class for new parsers.\nClass AutoDetectParser;\nClass AutoDetectParserConfig; // This config object can be used to tune how conservative we want to be when parsing data that is extremely compressible and resembles a ZIP bomb.\nClass AutoDetectParserFactory; // Factory for an AutoDetectParser\nClass CompositeParser; // Composite parser that delegates parsing tasks to a component parser based on the declared content type of the incoming document.\nClass CryptoParser; // Decrypts the incoming document stream and delegates further parsing to another parser instance.\nClass DefaultParser; // A composite parser based on all the Parser implementations available through the service provider mechanism.\nClass DelegatingParser; // Base class for parser implementations that want to delegate parts of the task of parsing an input document to another parser.\nClass DigestingParser;\nClass EmptyParser; // Dummy parser that always produces an empty XHTML document without even attempting to parse the given document stream.\nClass ErrorParser; // Dummy parser that always throws a TikaException without even attempting to parse the given document stream.\nClass NetworkParser;\nClass ParseContext; // Parse context.\nClass ParserDecorator; // Decorator base class for the Parser interface.\nClass ParseRecord; // Use this class to store exceptions, warnings and other information during the parse.\nClass ParserFactory;\nClass ParserPostProcessor; // Parser decorator that post-processes the results from a decorated parser.\nClass ParsingReader; // Reader for the text content from a given binary stream.\n", "des": "Tika parsers."}
{"index": 3780, "repo": "lucene-analysis-common-9.7.0", "code": "package email;\n\nClass UAX29URLEmailAnalyzer; // Filters UAX29URLEmailTokenizer with LowerCaseFilter and StopFilter, using a list of English stop words.\nClass UAX29URLEmailTokenizer; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\nClass UAX29URLEmailTokenizerFactory; // Factory for UAX29URLEmailTokenizer.\nClass UAX29URLEmailTokenizerImpl; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\n", "des": "Fast, general-purpose URLs and email addresses tokenizers."}
{"index": 2699, "repo": "spring-integration-http-6.1.2", "code": "package outbound;\n\npublic abstract class AbstractHttpRequestExecutingMessageHandler extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // Base class for http outbound adapter/gateway.\npublic class HttpRequestExecutingMessageHandler extends AbstractHttpRequestExecutingMessageHandler; // A MessageHandler implementation that executes HTTP requests by delegating to a RestTemplate instance.\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 3448, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface RefCursorSupport; // Contract for JDBC REF_CURSOR support.\n", "des": "Defines contracts for JDBC REF_CURSOR support."}
{"index": 3847, "repo": "lucene-core-9.7.0", "code": "package index;\n\nInterface ImpactsSource; // Source of Impacts.\nInterface IndexableField; // Represents a single field for indexing.\nInterface IndexableFieldType; // Describes the properties of a field.\nInterface IndexReader.CacheHelper; // A utility class that gives hooks in order to help build a cache based on the data that is contained in this index.\nInterface IndexReader.ClosedListener; // A listener that is called when a resource gets closed.\nInterface IndexSorter; // Handles how documents should be sorted in an index, both within a segment and between segments.\nInterface IndexSorter.ComparableProvider; // Used for sorting documents across segments\nInterface IndexSorter.DocComparator; // A comparator of doc IDs, used for sorting documents within a segment\nInterface IndexSorter.NumericDocValuesProvider; // Provide a NumericDocValues instance for a LeafReader\nInterface IndexSorter.SortedDocValuesProvider; // Provide a SortedDocValues instance for a LeafReader\nInterface IndexWriter.IndexReaderWarmer; // If DirectoryReader.open(IndexWriter) has been called (ie, this writer is in near real-time mode), then after a merge completes, this class can be invoked to warm the reader on the newly merged segment, before the merge commits.\nInterface IndexWriterEventListener; // A callback event listener for recording key events happened inside IndexWriter\nInterface MergePolicy.MergeContext; // This interface represents the current context of the merge selection process.\nInterface MergeScheduler.MergeSource; // Provides access to new merges and executes the actual merge\nInterface PointValues.IntersectVisitor; // We recurse the PointValues.PointTree, using a provided instance of this to guide the recursion.\nInterface PointValues.PointTree; // Basic operations to read the KD-tree.\nInterface QueryTimeout; // Query timeout abstraction that controls whether a query should continue or be stopped.\nInterface TwoPhaseCommit; // An interface for implementations that support 2-phase commit.\nClass AutomatonTermsEnum; // A FilteredTermsEnum that enumerates terms based upon what is accepted by a DFA.\nClass BaseCompositeReader<R extends IndexReader>; // Base class for implementing CompositeReaders based on an array of sub-readers.\n", "des": "Code to maintain and access indices."}
{"index": 855, "repo": "calcite-core-1.34.0", "code": "package schema;\n\npackage schema.impl; // Utilities to help implement Calcite's SPIs.\nInterface AggregateFunction; // Function that combines several values into a scalar result.\nInterface CustomColumnResolvingTable; // Extension to Table that specifies a custom way to resolve column names.\nInterface ExtensibleTable; // Table whose row type can be extended to include extra fields.\nInterface FilterableTable; // Table that can be scanned, optionally applying supplied filter expressions, without creating an intermediate relational expression.\nInterface Function; // Named expression that accepts parameters and returns a result.\nInterface FunctionContext; // Information about a function call that is passed to the constructor of a function instance.\nInterface FunctionParameter; // Parameter to a Function.\nInterface ImplementableAggFunction; // Function that can be translated to java code.\nInterface ImplementableFunction; // Function that can be translated to java code.\nInterface Member; // A named expression in a schema.\nInterface ModifiableTable; // A table that can be modified.\nInterface ModifiableView; // A modifiable view onto ModifiableTable.\nInterface Path; // Path from a root schema to a particular object (schema, table, function).\nInterface ProjectableFilterableTable; // Table that can be scanned, optionally applying supplied filter expressions, and projecting a given list of columns, without creating an intermediate relational expression.\nInterface QueryableTable; // Extension to Table that can translate itself to a Queryable.\nInterface ScalarFunction; // Function that returns a scalar result.\nInterface ScannableTable; // Table that can be scanned without creating an intermediate relational expression.\nInterface Schema; // A namespace for tables and functions.\nInterface SchemaFactory; // Factory for Schema objects.\nInterface SchemaPlus; // Extension to the Schema interface.\nInterface SchemaVersion; // An interface to represent a version ID that can be used to create a read-consistent view of a Schema.\nInterface SemiMutableSchema; // Schema to which materializations can be added.\nInterface Statistic; // Statistics about a Table.\nInterface StreamableTable; // Table that can be converted to a stream.\nInterface Table; // Table.\nInterface TableFactory<T extends Table>; // Factory for Table objects.\nInterface TableFunction; // Function that returns a table during execution time.\nInterface TableMacro; // Function that returns a Table.\nInterface TemporalTable; // Table that is temporal.\n", "des": "Schema SPI."}
{"index": 1835, "repo": "spring-test-6.0.11", "code": "package annotation;\n\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited @Rollback(false) public @interface Commit; // @Commit is a test annotation that is used to indicate that a test-managed transaction should be committed after the test method has completed.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface DirtiesContext; // Test annotation which indicates that the ApplicationContext associated with a test is dirty and should therefore be closed and removed from the context cache.\npublic static enum DirtiesContext.ClassMode extends Enum<DirtiesContext.ClassMode>; // Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test class.\npublic static enum DirtiesContext.HierarchyMode extends Enum<DirtiesContext.HierarchyMode>; // Defines modes which determine how the context cache is cleared when @DirtiesContext is used in a test whose context is configured as part of a hierarchy via @ContextHierarchy.\npublic static enum DirtiesContext.MethodMode extends Enum<DirtiesContext.MethodMode>; // Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test method.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface IfProfileValue; // Test annotation for use with JUnit 4 to indicate whether a test is enabled or disabled for a specific testing profile.\npublic interface ProfileValueSource; // Strategy interface for retrieving profile values for a given testing environment.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface ProfileValueSourceConfiguration; // ProfileValueSourceConfiguration is a class-level annotation for use with JUnit 4 which is used to specify what type of ProfileValueSource to use when retrieving profile values configured via @IfProfileValue.\npublic abstract class ProfileValueUtils extends Object; // General utility methods for working with profile values.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface Repeat; // Test annotation for use with JUnit 4 to indicate that a test method should be invoked repeatedly.\n", "des": "Support classes for annotation-driven tests."}
{"index": 3450, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ConnectionObserver; // An observer of logical connection events.\nInterface InvalidatableWrapper<T>; // Specialized JdbcWrapper contract for wrapped objects that can additioanlly be invalidated\nInterface JdbcCoordinator; // Coordinates JDBC-related activities.\nInterface JdbcServices; // Contract for services around JDBC operations.\nInterface JdbcWrapper<T>; // Generic contract for wrapped JDBC objects.\nInterface NonDurableConnectionObserver; // Additional optional contract for connection observers to indicate that they should be released when the physical connection is released.\nInterface ResultSetReturn; // Contract for extracting ResultSets from Statements, executing Statements, managing Statement/ResultSet resources, and logging statement calls.\nInterface ResultSetWrapper;\nInterface SchemaNameResolver; // Contract for resolving the schema of a Connection.\nInterface SqlExceptionHelper.WarningHandler; // Contract for handling warnings\nInterface StatementPreparer; // Contracting for preparing SQL statements\nClass ConnectionObserverAdapter; // A no-op adapter for ConnectionObserver.\nClass SqlExceptionHelper; // Helper for handling SQLExceptions in various manners.\nClass SqlExceptionHelper.StandardWarningHandler; // Standard SQLWarning handler for logging warnings\nClass SqlExceptionHelper.WarningHandlerLoggingSupport; // Basic support for SqlExceptionHelper.WarningHandler implementations which handle warnings\nClass SqlStatementLogger; // Centralize logging for SQL statements.\nClass TypeInfo; // Models type info extracted from DatabaseMetaData.getTypeInfo()\nEnum TypeNullability; // Describes the instrinsic nullability of a data type as reported by the JDBC driver.\nEnum TypeSearchability; // Describes the searchability of a data type as reported by the JDBC driver.\n", "des": "SPI contracts for supporting various aspects of JDBC interaction"}
{"index": 277, "repo": "pdfbox-3.0.0-beta1", "code": "package graphics;\n\nClass AppendRectangleToPath; // re Appends a rectangle to the path.\nClass BeginInlineImage; // BI Begins an inline image.\nClass ClipEvenOddRule; // W* Set clipping path using even odd rule.\nClass ClipNonZeroRule; // W Set the clipping path using non zero winding rule.\nClass CloseAndStrokePath; // s: close and stroke the path.\nClass CloseFillEvenOddAndStrokePath; // b* Close, fill and stroke the path with even-odd winding rule.\nClass CloseFillNonZeroAndStrokePath; // b Close, fill and stroke the path with non-zero winding rule.\nClass ClosePath; // h Close the path.\nClass CurveTo; // c Append curved segment to path.\nClass CurveToReplicateFinalPoint; // y Append curved segment to path with final point replicated.\nClass CurveToReplicateInitialPoint; // v Append curved segment to path with the initial point replicated.\nClass DrawObject; // Do: Draws an XObject.\nClass EndPath; // n End the path.\nClass FillEvenOddAndStrokePath; // B* Fill and then stroke the path, using the even-odd rule to determine the region to fill.\nClass FillEvenOddRule; // f* Fill path using even odd rule.\nClass FillNonZeroAndStrokePath; // B Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill.\nClass FillNonZeroRule; // f Fill path using non zero winding rule.\nClass GraphicsOperatorProcessor; // Base class for graphics operators.\nClass LegacyFillNonZeroRule; // F Fill path using non zero winding rule.\nClass LineTo; // l Append straight line segment to path.\nClass MoveTo; // m Begins a new subpath.\nClass ShadingFill; // sh Fills the clipping area with the given shading pattern.\nClass StrokePath; // S Stroke the path.\n", "des": "This package contains implementations of all of the PDF graphics operators."}
{"index": 1040, "repo": "hadoop-aws-3.3.6", "code": "package s3native;\n\nClass NativeS3FileSystem; // Replaced by the S3A client.\nClass S3xLoginHelper; // Class to aid logging in to S3 endpoints.\nClass S3xLoginHelper.Login; // Simple tuple of login details.\n", "des": "A distributed implementation of FileSystem for reading and writing files on Amazon S3."}
{"index": 463, "repo": "jackson-core-2.15.2", "code": "package core;\n\npackage core.async; // Package that contains abstractions needed to support optional non-blocking decoding (parsing) functionality.\npackage core.base; // Base classes used by concrete Parser and Generator implementations; contain functionality that is not specific to JSON or input abstraction (byte vs char).\npackage core.exc; // Package for some of JsonProcessingException subtypes contained by streaming API.\npackage core.format; // Package that contains interfaces needed for dynamic, pluggable format (auto)detection; as well as basic utility classes for simple format detection functionality.\npackage core.json; // JSON-specific parser and generator implementation classes that Jackson defines and uses.\npackage core.sym; // Internal implementation classes for efficient handling of of symbols in JSON (field names in Objects)\npackage core.type; // Contains classes needed for type introspection, mostly used by data binding functionality.\npackage core.util; // Utility classes used by Jackson Core functionality.\nInterface FormatFeature; // Marker interface that is to be implemented by data format - specific features.\nInterface FormatSchema; // Simple tag interface used to mark schema objects that are used by some JsonParser and JsonGenerator implementations to further specify structure of expected format.\nInterface JsonTokenId; // Interface defined to contain ids accessible with JsonToken.id().\nInterface PrettyPrinter; // Interface for objects that implement pretty printer functionality, such as indentation.\nInterface SerializableString; // Interface that defines how Jackson package can interact with efficient pre-serialized or lazily-serialized and reused String representations.\nInterface TreeNode; // Marker interface used to denote JSON Tree nodes, as far as the core package knows them (which is very little): mostly needed to allow ObjectCodec to have some level of interoperability.\nInterface Versioned; // Interface that those Jackson components that are explicitly versioned will implement.\nClass Base64Variant; // Class used to define specific details of which variant of Base64 encoding/decoding is to be used.\nClass Base64Variants; // Container for commonly used Base64 variants: Base64Variants.MIME Base64Variants.MIME_NO_LINEFEEDS Base64Variants.PEM Base64Variants.MODIFIED_FOR_URL See entries for full description of differences.\nClass JsonFactory; // The main factory class of Jackson package, used to configure and construct reader (aka parser, JsonParser) and writer (aka generator, JsonGenerator) instances.\n", "des": "Main public API classes of the core streaming JSON processor: most importantly JsonFactory used for constructing JSON parser (JsonParser) and generator (JsonGenerator) instances."}
{"index": 1329, "repo": "groovy-all-4.0.13", "code": "package stmt;\n\npublic class AssertStatement extends Statement; // Represents an assert statement.\npublic class BlockStatement extends Statement; // A list of statements and a scope.\npublic class BreakStatement extends Statement; // Represents a break statement in a switch or loop statement\npublic class CaseStatement extends Statement; // Represents a case statement in a switch statement\npublic class CatchStatement extends Statement; // Represents a catch (Exception var) { } statement\npublic class ContinueStatement extends Statement; // Represents a continue statement in a loop statement\npublic class DoWhileStatement extends Statement implements LoopingStatement; // Represents a do { ...\npublic class EmptyStatement extends Statement;\npublic class ExpressionStatement extends Statement; // A simple statement such as a method call where the return value is ignored\npublic class ForStatement extends Statement implements LoopingStatement; // Represents a standard for loop in Groovy\npublic class IfStatement extends Statement; // Represents an if (condition) { ...\npublic interface LoopingStatement; // This is an AST Node that provides some sort of looping mechanism.\npublic class ReturnStatement extends Statement; // A return statement\npublic class Statement extends ASTNode; // Base class for any statement.\npublic class SwitchStatement extends Statement; // Represents a switch (object) { case value: ...\npublic class SynchronizedStatement extends Statement; // Represents a synchronized statement\npublic class ThrowStatement extends Statement; // Represents a throw statement\npublic class TryCatchStatement extends Statement; // Represents a try { ...\npublic class WhileStatement extends Statement implements LoopingStatement; // Represents a while (condition) { ...\n", "des": "AST nodes for Groovy statements"}
{"index": 587, "repo": "org.apache.karaf.main-2.4.4", "code": "package console;\n\nInterface CommandInterpreter; // A command interpreter is a shell that can interpret command lines.\nInterface CommandProvider; // When an object wants to provide a number of commands to the console, it should register an object with this interface.\nClass ConsoleSession; // A console session service provides the input and output to a single console session.\n", "des": "Provides services related to the Equinox console."}
{"index": 2419, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive;\n\n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) public class CloudFoundryReactiveHealthEndpointWebExtension extends Object; // Reactive @EndpointExtension for the HealthEndpoint that always exposes full health details.\n@AutoConfiguration(after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class}) @ConditionalOnProperty(prefix=\"management.cloudfoundry\", name=\"enabled\", matchIfMissing=true) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnCloudPlatform(CLOUD_FOUNDRY) public class ReactiveCloudFoundryActuatorAutoConfiguration extends Object; // Auto-configuration to expose actuator endpoints for Cloud Foundry to use in a reactive environment.\n", "des": "Auto-configuration for actuator Cloud Foundry concerns using WebFlux."}
{"index": 3342, "repo": "opencms-core-15.0", "code": "package editablegroup;\n\nInterface CmsEditableGroup.I_EmptyHandler; // Handles state changes when the group becomes empty/not empty.\nInterface CmsEditableGroup.I_HasError; // Interface for group row components that can have errors.\nInterface CmsEditableGroup.I_RowBuilder; // Builds editable group rows by wrapping other components.\nInterface I_CmsEditableGroupActionHandler; // Server side handler interface for button presses in a multivalue widget group row's button bar.\nInterface I_CmsEditableGroupRow; // Interface for components used as editable group rows.\nClass CmsDefaultActionHandler; // Default action handler for group buttons.\nClass CmsEditableGroup; // Manages a group of widgets used as a multivalue input.\nClass CmsEditableGroup.AddButtonEmptyHandler; // Empty handler which shows or hides an 'Add' button to add new rows, depending on whether the group is empty.\nClass CmsEditableGroup.DefaultRowBuilder; // Default implementation for row builder.\nClass CmsEditableGroupButtons; // Button bar for manipulating rows in a multivalued field list.\nClass CmsEditableGroupRow; // Default implementation for row for multivalue field lists.\n", "des": "Contains components for editing a homogeneous list of Vaadin components, often used for multivalued fields in dialogs."}
{"index": 2238, "repo": "spring-security-acl-6.1.2", "code": "package domain;\n\npublic abstract class AbstractPermission extends Object implements Permission; // Provides an abstract superclass for Permission implementations.\npublic class AccessControlEntryImpl extends Object implements AccessControlEntry, AuditableAccessControlEntry; // An immutable default implementation of AccessControlEntry.\npublic interface AclAuthorizationStrategy; // Strategy used by AclImpl to determine whether a principal is permitted to call adminstrative methods on the AclImpl.\npublic class AclAuthorizationStrategyImpl extends Object implements AclAuthorizationStrategy; // Default implementation of AclAuthorizationStrategy.\npublic abstract class AclFormattingUtils extends Object; // Utility methods for displaying ACL information.\npublic class AclImpl extends Object implements Acl, MutableAcl, AuditableAcl, OwnershipAcl; // Base implementation of Acl.\npublic interface AuditLogger; // Used by AclImpl to log audit events.\npublic class BasePermission extends AbstractPermission; // A set of standard permissions.\npublic class ConsoleAuditLogger extends Object implements AuditLogger; // A basic implementation of AuditLogger.\npublic class CumulativePermission extends AbstractPermission; // Represents a Permission that is constructed at runtime from other permissions.\npublic class DefaultPermissionFactory extends Object implements PermissionFactory; // Default implementation of PermissionFactory.\npublic class DefaultPermissionGrantingStrategy extends Object implements PermissionGrantingStrategy;\npublic class GrantedAuthoritySid extends Object implements Sid; // Represents a GrantedAuthority as a Sid.\npublic class IdentityUnavailableException extends RuntimeException; // Thrown if an ACL identity could not be extracted from an object.\npublic class ObjectIdentityImpl extends Object implements ObjectIdentity; // Simple implementation of ObjectIdentity.\npublic class ObjectIdentityRetrievalStrategyImpl extends Object implements ObjectIdentityRetrievalStrategy, ObjectIdentityGenerator; // Basic implementation of ObjectIdentityRetrievalStrategy and ObjectIdentityGenerator that uses the constructors of ObjectIdentityImpl to create the ObjectIdentity.\npublic interface PermissionFactory; // Provides a simple mechanism to retrieve Permission instances from integer masks.\npublic class PrincipalSid extends Object implements Sid; // Represents an Authentication.getPrincipal() as a Sid.\npublic class SidRetrievalStrategyImpl extends Object implements SidRetrievalStrategy; // Basic implementation of SidRetrievalStrategy that creates a Sid for the principal, as well as every granted authority the principal holds.\npublic class SpringCacheBasedAclCache extends Object implements AclCache; // Simple implementation of AclCache that delegates to Cache implementation.\n", "des": "Basic implementation of access control lists (ACLs) interfaces."}
{"index": 518, "repo": "commons-vfs2-2.9.0", "code": "package ftp;\n\nInterface FtpClient; // What VFS expects from an FTP client to provide.\nClass FtpClientFactory; // Create a FtpClient instance.\nClass FtpClientFactory.ConnectionFactory<C extends org.apache.commons.net.ftp.FTPClient,B extends FtpFileSystemConfigBuilder>; // Abstract Factory, used to configure different FTPClients.\nClass FtpClientFactory.FtpConnectionFactory; // Connection Factory, used to configure the FTPClient.\nClass FTPClientWrapper; // A wrapper to the FTPClient to allow automatic reconnect on connection loss.\nClass FtpFileNameParser; // Implementation for FTP.\nClass FtpFileObject; // An FTP file.\nClass FtpFileProvider; // A provider for FTP file systems.\nClass FtpFileSystem; // An FTP file system.\nClass FtpFileSystemConfigBuilder; // The config builder for various FTP configuration options.\nEnum FtpFileType; // The FTP file types.\n", "des": "The FTP File Provider."}
{"index": 71, "repo": "ignite-core-2.15.0", "code": "package sharedfs;\n\nInterface SharedFsCheckpointSpiMBean; // Management bean that provides general administrative and configuration information about shared file system checkpoints.\nClass SharedFsCheckpointSpi; // This class defines shared file system CheckpointSpi implementation for checkpoint SPI.\n", "des": "Contains shared file system implementation for checkpoint SPI."}
{"index": 1962, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jpa;\n\n@FunctionalInterface public interface EntityManagerFactoryBuilderCustomizer; // Callback interface that can be used to customize the auto-configured EntityManagerFactoryBuilder.\npublic class EntityManagerFactoryDependsOnPostProcessor extends AbstractDependsOnBeanFactoryPostProcessor; // BeanFactoryPostProcessor that can be used to dynamically declare that all EntityManagerFactory beans should \"depend on\" one or more specific beans.\n@AutoConfiguration(after=DataSourceAutoConfiguration.class, before=TransactionAutoConfiguration.class) @ConditionalOnClass({org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.class,jakarta.persistence.EntityManager.class,org.hibernate.engine.spi.SessionImplementor.class}) @EnableConfigurationProperties(JpaProperties.class) @Import(org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.class) public class HibernateJpaAutoConfiguration extends Object; // Auto-configuration for Hibernate JPA.\n@ConfigurationProperties(\"spring.jpa.hibernate\") public class HibernateProperties extends Object; // Configuration properties for Hibernate.\npublic static class HibernateProperties.Naming extends Object;\n@FunctionalInterface public interface HibernatePropertiesCustomizer; // Callback interface that can be implemented by beans wishing to customize the Hibernate properties before it is used by an auto-configured EntityManagerFactory.\npublic class HibernateSettings extends Object; // Settings to apply when configuring Hibernate.\n@Configuration(proxyBeanMethods=false) @EnableConfigurationProperties(JpaProperties.class) public abstract class JpaBaseConfiguration extends Object; // Base Auto-configuration for JPA.\n", "des": "Auto-configuration for JPA and Spring ORM."}
{"index": 3379, "repo": "opencms-core-15.0", "code": "package page;\n\nClass CmsXmlPage; // Implementation of a page object used to access and manage xml data.\nClass CmsXmlPageFactory; // Provides factory methods to unmarshal (read) an XML page object.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains functions for unstructured content storage using XML, commonly called \"XML pages\" in OpenCms."}
{"index": 1347, "repo": "spring-integration-kafka-6.1.2", "code": "package xml;\n\npublic class KafkaChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for a channel backed by an Apache Kafka topic.\npublic class KafkaInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the inbound channel adapter.\npublic class KafkaInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser; // Inbound gateway parser.\npublic class KafkaMessageDrivenChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Parser for the message driven channel adapter.\npublic class KafkaNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // The namespace handler for the Apache Kafka namespace.\npublic class KafkaOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the outbound channel adapter.\npublic class KafkaOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the outbound gateway.\npublic final class KafkaParsingUtils extends Object; // Utilities to assist with parsing XML.\n", "des": "Provides parser classes to provide Xml namespace support for the Apache Kafka components."}
{"index": 540, "repo": "commons-geometry-core-1.0", "code": "package internal;\n\nInterface DoubleFunction1N<T>; // Represents a function that accepts a single double value and returns a result.\nInterface DoubleFunction2N<T>; // Represents a function that accepts two double values and returns a result.\nInterface DoubleFunction3N<T>; // Represents a function that accepts three double values and returns a result.\nClass HyperplaneSubsets; // Utility methods for HyperplaneSubset implementations.\nClass IteratorTransform<I,T>; // Class that wraps another iterator, converting each input iterator value into one or more output iterator values.\nClass SimpleTupleFormat; // Class for performing simple formatting and parsing of real number tuples.\nClass GeometryInternalError; // Exception thrown when something that should not happen does happen.\n", "des": "This package contains utilities intended for internal use only."}
{"index": 1436, "repo": "spring-boot-actuator-3.1.1", "code": "package exchanges;\n\npackage exchanges.reactive; // Actuator HTTP exchanges support for reactive servers.\npackage exchanges.servlet; // Actuator HTTP exchanges support for servlet servers.\npublic final class HttpExchange extends Object; // An HTTP request and response exchange.\npublic static final class HttpExchange.Principal extends Object; // Principal associated with an HTTP request-response exchange.\npublic static final class HttpExchange.Request extends Object; // The request that started the exchange.\npublic static final class HttpExchange.Response extends Object; // The response that finished the exchange.\npublic static final class HttpExchange.Session extends Object; // The session associated with the exchange.\npublic static final class HttpExchange.Started extends Object; // A started request that when finished will return a new HttpExchange instance.\npublic interface HttpExchangeRepository; // A repository for HttpExchange instances.\n@Endpoint(id=\"httpexchanges\") public class HttpExchangesEndpoint extends Object; // @Endpoint to expose HttpExchange information.\npublic static final class HttpExchangesEndpoint.HttpExchangesDescriptor extends Object implements OperationResponseBody; // Description of an application's HttpExchange entries.\npublic enum Include extends Enum<Include>; // Include options for HTTP exchanges.\npublic class InMemoryHttpExchangeRepository extends Object implements HttpExchangeRepository; // In-memory implementation of HttpExchangeRepository.\npublic interface RecordableHttpRequest; // The recordable parts of an HTTP request used when creating an HttpExchange.\npublic interface RecordableHttpResponse; // The recordable parts of an HTTP response used when creating an HttpExchange.\n", "des": "Actuator HTTP exchanges support."}
{"index": 648, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package metrics;\n\nClass FederationStateStoreClientMetrics; // Performance metrics for FederationStateStore implementations.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1651, "repo": "jena-core-4.9.0", "code": "package listeners;\n\npublic class ChangedListener extends Object implements ModelChangedListener; // Class that merely notes that a change has occurred.\npublic class NullListener extends Object implements ModelChangedListener; // A listener that ignores everything you tell it; intended as a base class or an identity element.\npublic class ObjectListener extends Object implements ModelChangedListener; // Listener that funnels all the changes into add/removed(Object) x, ie, leaves discrimination to be done on the type of object added or removed.\npublic class StatementListener extends Object implements ModelChangedListener; // A listener that filters all its listening down to the single-statement level.\n", "des": "A package defining some useful implementations of ModelChangedListener, for listening to (a) all triples added or removed, exploding composite objects, (b) all objects added or removed, as themselves, (c) notification of additions/removals, but no details, and (d) accepting but ignoring all changes, as a base-class to be extended."}
{"index": 2660, "repo": "spring-data-cassandra-4.1.2", "code": "package event;\n\npublic abstract class AbstractCassandraEventListener<E> extends Object implements ApplicationListener<CassandraMappingEvent<?>>; // Base class to implement domain specific ApplicationListeners for CassandraMappingEvent.\npublic class AbstractDeleteEvent<T> extends AbstractStatementAwareMappingEvent<com.datastax.oss.driver.api.core.cql.Statement<?>>; // Base class for delete events.\npublic abstract class AbstractStatementAwareMappingEvent<T> extends CassandraMappingEvent<T>; // Event encapsulating Cassandra CQL statement.\npublic class AfterConvertEvent<E> extends CassandraMappingEvent<E>; // Event to be triggered after converting a Row.\npublic class AfterDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event being thrown after a single or a set of rows has/have been deleted.\npublic class AfterLoadEvent<T> extends CassandraMappingEvent<com.datastax.oss.driver.api.core.cql.Row>; // Event to be triggered after loading Rows to be mapped onto a given type.\npublic class AfterSaveEvent<E> extends CassandraMappingEvent<E>; // CassandraMappingEvent triggered after save of an object.\npublic class AuditingEntityCallback extends Object implements BeforeConvertCallback<Object>, Ordered; // EntityCallback to populate auditing related fields on an entity about to be saved.\n@FunctionalInterface public interface BeforeConvertCallback<T> extends EntityCallback<T>; // Callback being invoked before a domain object is converted to be persisted.\npublic class BeforeDeleteEvent<T> extends AbstractDeleteEvent<T>; // Event thrown before a row or a set of rows is deleted.\n@FunctionalInterface public interface BeforeSaveCallback<T> extends EntityCallback<T>; // Entity callback triggered before save of a row.\npublic class BeforeSaveEvent<E> extends AbstractStatementAwareMappingEvent<E>; // CassandraMappingEvent triggered before save of an object.\npublic class CassandraMappingEvent<T> extends ApplicationEvent; // Base ApplicationEvent triggered by Spring Data Cassandra.\npublic class ReactiveAuditingEntityCallback extends Object implements ReactiveBeforeConvertCallback<Object>, Ordered; // Reactive EntityCallback to populate auditing related fields on an entity about to be saved.\n", "des": "Event callback infrastructure for Cassandra mapping subsystem."}
{"index": 298, "repo": "pdfbox-3.0.0-beta1", "code": "package pattern;\n\nClass PDAbstractPattern; // This class wraps a pattern dictionary.\nClass PDShadingPattern; // A shading pattern dictionary.\nClass PDTilingPattern; // A tiling pattern dictionary.\n", "des": "This package deals with patterns which are used instead of colors."}
{"index": 1727, "repo": "spring-jdbc-6.0.11", "code": "package simple;\n\npublic abstract class AbstractJdbcCall extends Object; // Abstract class to provide base functionality for easy stored procedure calls based on configuration options and database meta-data.\npublic abstract class AbstractJdbcInsert extends Object; // Abstract class to provide base functionality for easy inserts based on configuration options and database meta-data.\npublic class SimpleJdbcCall extends AbstractJdbcCall implements SimpleJdbcCallOperations; // A SimpleJdbcCall is a multithreaded, reusable object representing a call to a stored procedure or a stored function.\npublic interface SimpleJdbcCallOperations; // Interface specifying the API for a Simple JDBC Call implemented by SimpleJdbcCall.\npublic class SimpleJdbcInsert extends AbstractJdbcInsert implements SimpleJdbcInsertOperations; // A SimpleJdbcInsert is a multithreaded, reusable object providing easy insert capabilities for a table.\npublic interface SimpleJdbcInsertOperations; // Interface specifying the API for a Simple JDBC Insert implemented by SimpleJdbcInsert.\n", "des": "Simplification layer for table inserts and stored procedure calls."}
{"index": 1416, "repo": "spring-boot-actuator-3.1.1", "code": "package prometheus;\n\npublic class PrometheusPushGatewayManager extends Object; // Class that can be used to manage the pushing of metrics to a Prometheus PushGateway.\npublic static enum PrometheusPushGatewayManager.ShutdownOperation extends Enum<PrometheusPushGatewayManager.ShutdownOperation>; // The operation that should be performed on shutdown.\n@WebEndpoint(id=\"prometheus\") public class PrometheusScrapeEndpoint extends Object; // @Endpoint that outputs metrics in a format that can be scraped by the Prometheus server.\npublic enum TextOutputFormat extends Enum<TextOutputFormat> implements Producible<TextOutputFormat>; // A Producible enum for supported Prometheus TextFormat.\n", "des": "Actuator support for exporting metrics to Prometheus."}
{"index": 1653, "repo": "jena-core-4.9.0", "code": "package impl;\n\npublic class AltImpl extends ContainerImpl implements Alt; // An implementation of Alt.\npublic class BagImpl extends ContainerImpl implements Bag; // An implementation of Bag\npublic class ContainerImpl extends ResourceImpl implements Container; // An internal class not normally of interest to application developers.\npublic class ContNodeIteratorFactoryImpl extends Object implements NodeIteratorFactory; // An internal class, not normally of interest to application developers.\npublic class ContNodeIteratorImpl extends NiceIterator<RDFNode> implements NodeIterator; // An internal class not normally of interest to application developers.\npublic class InfModelImpl extends ModelCom implements InfModel; // Default implementation of the InfModel interface which simply wraps up an InfGraph.\npublic final class IteratorFactory extends Object; // Builds Jena Iterators and other things (RDFNode and Statement) needed in a Model.\npublic class LiteralImpl extends EnhNode implements Literal; // An implementation of Literal.\npublic class MemoryModelGetter extends Object implements ModelGetter;\npublic class ModelCom extends EnhGraph implements Model, PrefixMapping, Lock; // Common methods for model implementations.\npublic class ModelListenerAdapter extends Object implements GraphListener; // Adapter class that converts a ModelChangedListener into a GraphListener.\npublic class ModelMakerImpl extends Object implements ModelMaker; // A ModelMakerImpl implements a ModelMaker over a GraphMaker.\npublic class ModelReifier extends Object; // This class impedance-matches the reification requests of Model[Com] to the operations supplied by it's Graph's Reifier.\npublic interface NodeIteratorFactory; // An internal class not normally of interest to application developers.\npublic class NodeIteratorImpl extends WrappedIterator<RDFNode> implements NodeIterator; // A NodeIterator implementation.\npublic class NsIteratorImpl extends WrappedIterator<String> implements NsIterator; // An NsIterator implementation\npublic class NTripleReader extends Object implements RDFReaderI; // N-Triple Reader\npublic class NTripleWriter extends Object implements RDFWriterI; // Writes out an XML serialization of a model.\npublic class PropertyImpl extends ResourceImpl implements Property; // An implementation of Property.\npublic class RDFDefaultErrorHandler extends Object implements RDFErrorHandler; // The default error handler for RDF/XML I/O.\npublic class RDFListImpl extends ResourceImpl implements RDFList; // Standard implementation the list abstraction from rdf.model.\npublic class RDFReaderFImpl extends Object implements RDFReaderF;\n", "des": "This package contains implementations of the interfaces defined in the .model package, eg ModelCom for Model, ResourceImpl for Resource, and so on."}
{"index": 1114, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package pb;\n\nClass NMProtoUtils; // Utilities for converting from PB representations.\nClass ResourceLocalizationSpecPBImpl;\n", "des": "Package containing classes for working with Protobuf."}
{"index": 1204, "repo": "commons-math3-3.6.1", "code": "package stat;\n\npackage stat.clustering; // All classes and sub-packages of this package are deprecated.\npackage stat.correlation; // Correlations/Covariance computations.\npackage stat.descriptive; // Generic univariate summary statistic objects.\npackage stat.inference; // Classes providing hypothesis testing.\npackage stat.interval; // Classes providing binomial proportion confidence interval construction.\npackage stat.ranking; // Classes providing rank transformations.\npackage stat.regression; // Statistical routines involving multivariate data.\nClass Frequency; // Maintains a frequency distribution.\nClass StatUtils; // StatUtils provides static methods for computing statistics based on data stored in double[] arrays.\n", "des": "Data storage, manipulation and summary routines."}
{"index": 913, "repo": "commons-compress-1.23.0", "code": "package zip;\n\nInterface CharsetAccessor; // An interface added to allow access to the character set associated with an NioZipEncoding, without requiring a new method to be added to ZipEncoding.\nInterface ExtraFieldParsingBehavior; // Controls details of parsing ZIP extra fields.\nInterface UnixStat; // Constants from stat.h on Unix systems.\nInterface UnparseableExtraFieldBehavior; // Handles extra field data that doesn't follow the recommended pattern for extra fields with a two-byte key and a two-byte length.\nInterface ZipArchiveEntryPredicate; // A predicate to test if a #ZipArchiveEntry matches a criteria.\nInterface ZipArchiveEntryRequestSupplier; // Supplies ZipArchiveEntryRequest.\nInterface ZipExtraField; // General format of extra field data.\nClass AbstractUnicodeExtraField; // A common base class for Unicode extra information extra fields.\nClass AsiExtraField; // Adds Unix file permission and UID/GID fields as well as symbolic link handling.\nClass DefaultBackingStoreSupplier; // Implements ScatterGatherBackingStoreSupplier using a temporary folder.\nClass ExtraFieldUtils; // ZipExtraField related methods\nClass ExtraFieldUtils.UnparseableExtraField; // \"enum\" for the possible actions to take if the extra field cannot be parsed.\nClass GeneralPurposeBit; // Parser/encoder for the \"general purpose bit\" field in ZIP's local file and central directory headers.\nClass JarMarker; // If this extra field is added as the very first extra field of the archive, Solaris will consider it an executable jar file.\nClass ParallelScatterZipCreator; // Creates a ZIP in parallel by using multiple threadlocal ScatterZipOutputStream instances.\nClass PKWareExtraHeader; // Base class for all PKWare strong crypto extra headers.\nClass ResourceAlignmentExtraField; // An extra field who's sole purpose is to align and pad the local file header so that the entry's data starts at a certain position.\nClass ScatterStatistics; // Provides information about a scatter compression run.\nClass ScatterZipOutputStream; // A ZIP output stream that is optimized for multi-threaded scatter/gather construction of ZIP files.\nClass ScatterZipOutputStream.ZipEntryWriter;\nClass StreamCompressor; // Encapsulates a Deflater and crc calculator, handling multiple types of output streams.\n", "des": "Provides stream classes for reading and writing archives using the ZIP format."}
{"index": 3228, "repo": "commons-configuration2-2.9.0", "code": "package xpath;\n\nClass ConfigurationNodePointerFactory; // Implementation of the NodePointerFactory interface for configuration nodes.\nClass XPathExpressionEngine; // A specialized implementation of the ExpressionEngine interface that is able to evaluate XPATH expressions.\n", "des": "This package contains the XPathExpressionEngine class which enables XPATH support for querying configuration properties."}
{"index": 2192, "repo": "spring-security-web-6.1.2", "code": "package servletapi;\n\npublic class SecurityContextHolderAwareRequestFilter extends org.springframework.web.filter.GenericFilterBean; // A Filter which populates the ServletRequest with a request wrapper which implements the servlet API security methods.\npublic class SecurityContextHolderAwareRequestWrapper extends jakarta.servlet.http.HttpServletRequestWrapper; // A Spring Security-aware HttpServletRequestWrapper, which uses the SecurityContext-defined Authentication object to implement the servlet API security methods: SecurityContextHolderAwareRequestWrapper.getUserPrincipal() SecurityContextHolderAwareRequestWrapper.isUserInRole(String) HttpServletRequestWrapper.getRemoteUser().\n", "des": "Populates a Servlet request with a new Spring Security compliant HttpServletRequestWrapper."}
{"index": 2573, "repo": "pulsar-common-3.0.0", "code": "package loadbalancer;\n\npublic class AdvertisedListener extends Object; // The advertisedListener for broker with brokerServiceUrl and brokerServiceUrlTls.\npublic class BrokerData extends Object; // Data class containing three components comprising all the data available for the leader broker about other brokers: - The local broker data which is written to ZooKeeper by each individual broker (LocalBrokerData).\npublic class BrokerUsage extends Object; // BrokerUsage object encapsulates the resources that are only used by broker, for now, it's connections both to outside JVM and to the local.\npublic class BundleData extends Object; // Data class comprising the short term and long term historical data for this bundle.\npublic class JvmUsage extends Object; // JvmUsage represents set of resources that are specific to JVM and are used by broker, load balancing need to know this detail.\npublic class LoadReport extends Object implements LoadManagerReport; // This class represents the overall load of the broker - it includes overall SystemResourceUsage and NamespaceUsage for all the namespaces hosted by this broker.\npublic class LoadReportDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer<LoadManagerReport>; // Deserializer for a load report.\npublic class LocalBrokerData extends Object implements LoadManagerReport; // Contains all the data that is maintained locally on each broker.\npublic class NamespaceUsage extends Object; // this class represents usages of resources used by a namespace, this is an aggregate of all the topics and queues on the namespace.\npublic class ResourceUnitRanking extends Object implements Comparable<ResourceUnitRanking>; // The class containing information about system resources, allocated quota, and loaded bundles.\npublic class SystemResourceUsage extends Object; // This class represents a object which reflects system resource usage per resource and the upper limit on the resource.\npublic static enum SystemResourceUsage.ResourceType extends Enum<SystemResourceUsage.ResourceType>; // Definition of possible resource types.\npublic class TimeAverageBrokerData extends Object; // Data class aggregating the short term and long term data across all bundles belonging to a broker.\npublic class TimeAverageMessageData extends Object; // Data class comprising the average message data over a fixed period of time.\n", "des": "Classes to define policies for the load distribution."}
{"index": 187, "repo": "ignite-core-2.15.0", "code": "package nio;\n\npackage nio.ssl; // Implementation of Secure Socket Layer filter for NIO server based on SSLEngine class.\nInterface GridCommunicationClient;\nInterface GridNioFilter; // This interface defines the general element in transformation chain between the nio server and application.\nInterface GridNioFuture<R>; // NIO future.\nInterface GridNioMessageReader; // Message reader.\nInterface GridNioMessageReaderFactory; // Message reader factory.\nInterface GridNioMessageWriter; // Message writer.\nInterface GridNioMessageWriterFactory; // Message writer factory.\nInterface GridNioParser; // This interface declares a basic contract on message parsing and encoding to the underlying network layer.\nInterface GridNioServerListener<T>; // Listener passed in to the GridNioServer that will be notified on client events.\nInterface GridNioSession; // This interface represents established or closed connection between nio server and remote client.\nInterface SessionWriteRequest;\nClass GridAbstractCommunicationClient; // Implements basic lifecycle for communication clients.\nClass GridBufferedParser; // This class implements stream parser based on GridNioServerBuffer.\nClass GridConnectionBytesVerifyFilter; // Verifies that first bytes received in accepted (incoming) NIO session are equal to IgniteUtils.IGNITE_HEADER.\nClass GridDelimitedParser; // This class implements stream parser based on GridNioDelimitedBuffer.\nClass GridDirectParser; // Parser for direct messages.\nClass GridNioAsyncNotifyFilter; // Enables multithreaded notification of session opened, message received and session closed events.\nClass GridNioBackPressureControl; // Utility class that allows to ignore back-pressure control for threads that are processing messages.\nClass GridNioCodecFilter; // Filter that transforms byte buffers to user-defined objects and vice-versa with specified GridNioParser.\nClass GridNioDelimitedBuffer; // Buffer with message delimiter support.\nClass GridNioEmbeddedFuture<R>; // Future that delegates to some other future.\nClass GridNioFilterAdapter; // Class that defines the piece for application-to-network and vice-versa data conversions (protocol transformations, encryption, etc.)\nClass GridNioFilterChain<T>; // Filter chain implementation for nio server filters.\nClass GridNioFinishedFuture<R>; // Future that represents already completed result.\n", "des": "NIO server interfaces and common utility classes for NIO."}
{"index": 1973, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package servlet;\n\n@FunctionalInterface public interface JwkSetUriJwtDecoderBuilderCustomizer; // Callback interface for the customization of the NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder used to create the auto-configured JwtDecoder for a JWK set URI that has been configured directly or obtained through an issuer URI.\n@AutoConfiguration(before={SecurityAutoConfiguration.class,UserDetailsServiceAutoConfiguration.class}) @EnableConfigurationProperties(OAuth2ResourceServerProperties.class) @ConditionalOnClass(org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthenticationToken.class) @ConditionalOnWebApplication(type=SERVLET) @Import({org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.Oauth2ResourceServerConfiguration.JwtConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.Oauth2ResourceServerConfiguration.OpaqueTokenConfiguration.class}) public class OAuth2ResourceServerAutoConfiguration extends Object; // Auto-configuration for OAuth2 resource server support.\n", "des": "Auto-configuration for Spring Security's OAuth2 resource server."}
{"index": 1478, "repo": "tribuo-core-4.3.1", "code": "package dataset;\n\npublic final class DatasetView<T extends Output<T>> extends ImmutableDataset<T>; // DatasetView provides an immutable view on another Dataset that only exposes selected examples.\npublic static final class DatasetView.DatasetViewProvenance extends DatasetProvenance; // Provenance for the DatasetView.\npublic class MinimumCardinalityDataset<T extends Output<T>> extends ImmutableDataset<T>; // This class creates a pruned dataset in which low frequency features that occur less than the provided minimum cardinality have been removed.\npublic static class MinimumCardinalityDataset.MinimumCardinalityDatasetProvenance extends DatasetProvenance; // Provenance for MinimumCardinalityDataset.\npublic final class SelectedFeatureDataset<T extends Output<T>> extends ImmutableDataset<T>; // This class creates a pruned dataset which only contains the selected features.\npublic static final class SelectedFeatureDataset.SelectedFeatureDatasetProvenance extends DatasetProvenance; // Provenance for SelectedFeatureDataset.\n", "des": "Provides utility datasets which subsample or otherwise transform the wrapped dataset."}
{"index": 1081, "repo": "graal-sdk-1.0.0-rc7", "code": "package function;\n\nInterface CFunctionPointer; // Base interface for all function pointers.\nInterface CodePointer; // Pointer to executable code.\nInterface RelocatedPointer; // A pointer which is relocated when the native image is loaded at runtime.\nClass CEntryPoint.FatalExceptionHandler; // Special placeholder value for CEntryPoint.exceptionHandler() to print the caught exception and treat it as a fatal error.\nClass CEntryPointContext; // Utility methods that provide access to the current isolate.\nClass CEntryPointLiteral<T extends CFunctionPointer>; // A function pointer to an entry point method that can be, for example, handed out to C code so that C code can call back into Java code.\nEnum CEntryPoint.Builtin; // The built-in methods which can be aliased.\nEnum CFunction.Transition; // Describes the thread state transition performed when the C function is invoked.\nAnnotation Type CEntryPoint; // Annotates a method that is a VM entry point.\nAnnotation Type CEntryPoint.IsolateContext; // Designates an Isolate parameter to use as the execution context.\nAnnotation Type CEntryPoint.IsolateThreadContext; // Designates an IsolateThread parameter to use as the execution context.\nAnnotation Type CFunction; // Denotes a static native method that calls directly from Java to C, without following the JNI protocol.\nAnnotation Type CLibrary; // Denotes an external library that needs to be linked in.\nAnnotation Type CMacroInfo; // Informational only.\nAnnotation Type InvokeCFunctionPointer; // Annotation for an invocation method defined in a sub-interface of CFunctionPointer.\n", "des": "This package provides parts of the Java / C interface that are related to C functions."}
{"index": 2096, "repo": "spring-webflux-6.0.11", "code": "package server;\n\npackage server.support; // Classes supporting the org.springframework.web.reactive.function.server package.\npublic interface EntityResponse<T> extends ServerResponse; // Entity-specific subtype of ServerResponse that exposes entity data.\npublic static interface EntityResponse.Builder<T>; // Defines a builder for EntityResponse.\n@FunctionalInterface public interface HandlerFilterFunction<T extends ServerResponse,R extends ServerResponse>; // Represents a function that filters a handler function.\n@FunctionalInterface public interface HandlerFunction<T extends ServerResponse>; // Represents a function that handles a request.\npublic interface HandlerStrategies; // Defines the strategies to be used for processing HandlerFunctions.\npublic static interface HandlerStrategies.Builder; // A mutable builder for a HandlerStrategies.\npublic interface RenderingResponse extends ServerResponse; // Rendering-specific subtype of ServerResponse that exposes model and template data.\npublic static interface RenderingResponse.Builder; // Defines a builder for RenderingResponse.\n@FunctionalInterface public interface RequestPredicate; // Represents a function that evaluates on a given ServerRequest.\npublic abstract class RequestPredicates extends Object; // Implementations of RequestPredicate that implement various useful request matching operations, such as matching based on path, HTTP method, etc.\npublic static interface RequestPredicates.Visitor; // Receives notifications from the logical structure of request predicates.\n@FunctionalInterface public interface RouterFunction<T extends ServerResponse>; // Represents a function that routes to a handler function.\npublic abstract class RouterFunctions extends Object; // Central entry point to Spring's functional web framework. Exposes routing functionality, such as to create a RouterFunction using a discoverable builder-style API, to create a RouterFunction given a RequestPredicate and HandlerFunction, and to do further subrouting on an existing routing function.\npublic static interface RouterFunctions.Builder; // Represents a discoverable builder for router functions.\npublic static interface RouterFunctions.Visitor; // Receives notifications from the logical structure of router functions.\npublic interface ServerRequest; // Represents a server-side HTTP request, as handled by a HandlerFunction.\npublic static interface ServerRequest.Builder; // Defines a builder for a request.\npublic static interface ServerRequest.Headers; // Represents the headers of the HTTP request.\n", "des": "Provides the types that make up Spring's functional web framework for Reactive environments."}
{"index": 3528, "repo": "opennlp-tools-2.2.0", "code": "package languagemodel;\n\nInterface LanguageModel; // A language model can calculate the probability p (between 0 and 1) of a certain sequence of tokens, given its underlying vocabulary.\nClass NGramLanguageModel; // A LanguageModel based on a NGramModel using Stupid Backoff to get the probabilities of the ngrams.\n", "des": "Package related to language models"}
{"index": 3882, "repo": "solr-ltr-9.3.0", "code": "package rest;\n\nClass ManagedFeatureStore; // Managed resource for a storing a feature.\nClass ManagedModelStore; // Menaged resource for storing a model\n", "des": "Contains the ManagedResource that encapsulate the feature and the model stores."}
{"index": 3460, "repo": "hibernate-core-5.6.15.Final", "code": "package plan;\n\nClass AbstractBatchingEntityLoaderBuilder; // Base class for LoadPlan-based BatchingEntityLoaderBuilder implementations.\nClass AbstractLoadPlanBasedEntityLoader; // A UniqueEntityLoader implementation based on using LoadPlans\nClass BatchingEntityLoader; // The base contract for UniqueEntityLoader implementations capable of performing batch-fetch loading of entities using multiple primary key values in the SQL WHERE clause.\nClass DynamicBatchingEntityLoader; // Batching entity loader using dynamic where-clause\nClass DynamicBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances capable of dynamically building its batch-fetch SQL based on the actual number of entity ids waiting to be batch fetched.\nClass EntityLoader; // UniqueEntityLoader implementation that is the main functionality for LoadPlan-based Entity loading.\nClass EntityLoader.Builder;\nClass LegacyBatchingEntityLoaderBuilder; // LoadPlan-based implementation of the legacy batch loading strategy\nClass LegacyBatchingEntityLoaderBuilder.LegacyBatchingEntityLoader;\nClass MultiEntityLoadingSupport;\nClass PaddedBatchingEntityLoader; // Batching entity loader using padded where-clause\nClass PaddedBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances building its batch-fetch SQL based on padding - using a set number of parameters, but setting \"unneeded ones\" to null.\n", "des": "Support for entity loaders built on top of the org.hibernate.loader.plan API to apply entity-graphs"}
{"index": 3494, "repo": "poi-5.2.3", "code": "package record;\n\npackage record.aggregates; // The record aggregates are not real \"records\" but collections of records that act as a single record.\nInterface BiffHeaderInput;\nInterface CellValueRecordInterface; // The cell value record interface is implemented by all classes of type Record that contain cell values.\nInterface CFRuleBase.ComparisonOperator;\nInterface HSSFRecordTypes.RecordConstructor<T extends Record>;\nInterface Margin; // The margin interface is a parent used to define left, right, top and bottom margins.\nInterface SubRecord.SubRecordTypes.RecordConstructor<T extends SubRecord>;\nClass AbstractEscherHolderRecord; // The escher container record is used to hold escher records.\nClass ArrayRecord; // ARRAY (0x0221)\nClass AutoFilterInfoRecord; // The AutoFilterInfo record specifies the number of columns that have AutoFilter enabled and indicates the beginning of the collection of AutoFilter records.\nClass BackupRecord; // Boolean specifying whether the GUI should store a backup of the file.\nClass BlankRecord; // Represents a column in a row with no value but with styling.\nClass BOFRecord; // Somewhat of a misnomer, its used for the beginning of a set of records that have a particular purpose or subject.\nClass BookBoolRecord; // Contains a flag specifying whether the Gui should save externally linked values from other workbooks.\nClass BoolErrRecord; // Creates new BoolErrRecord.\nClass BottomMarginRecord; // Record for the bottom margin.\nClass BoundSheetRecord; // Defines a sheet within a workbook.\nClass CalcCountRecord; // Specifies the maximum times the gui should perform a formula recalculation.\nClass CalcModeRecord; // Tells the gui whether to calculate formulas automatically, manually or automatically except for tables.\nClass CellRecord; // Base class for all cell value records (implementors of CellValueRecordInterface).\nClass CFHeader12Record; // Conditional Formatting Header v12 record CFHEADER12 (0x0879), for conditional formattings introduced in Excel 2007 and newer.\nClass CFHeaderBase; // Parent of Conditional Formatting Header records, CFHeaderRecord and CFHeader12Record.\nClass CFHeaderRecord; // Conditional Formatting Header record CFHEADER (0x01B0).\n", "des": "Record package contains class representations for XLS binary strutures."}
{"index": 2690, "repo": "spring-data-jpa-3.1.2", "code": "package support;\n\npublic class ClasspathScanningPersistenceUnitPostProcessor extends Object implements PersistenceUnitPostProcessor, ResourceLoaderAware, EnvironmentAware; // PersistenceUnitPostProcessor that will scan for classes annotated with Entity or MappedSuperclass and add them to the PersistenceUnit post processed.\npublic class MergingPersistenceUnitManager extends DefaultPersistenceUnitManager; // Extends DefaultPersistenceUnitManager to merge configurations of one persistence unit residing in multiple persistence.xml files into one.\npublic final class PageableUtils extends Object; // Provide a set of utility methods to support Pageables.\n", "des": "Various helper classes useful when working with JPA."}
{"index": 3312, "repo": "opencms-core-15.0", "code": "package fields;\n\nInterface I_CmsSearchFieldConfiguration; // Interface for search field configurations used by I_CmsSearchIndex and configured in the opencms-search.xml (see CmsSearchConfiguration).\nInterface I_CmsSearchFieldMapping; // Describes a mapping of a piece of content from an OpenCms VFS resource to a field of a search index.\nClass A_CmsSearchFieldConfiguration; // Base class for a typical field configuration.\nClass CmsGeoCoordinateFieldMapping; // Class extracting the Geo coordinates from a content field.\nClass CmsLuceneField; // An individual field configuration in a Lucene search index.\nClass CmsLuceneFieldConfiguration; // Describes a configuration of fields that are used in building a search index.\nClass CmsMacroSearchFieldMapping; // Field mapping to resolve macros as for gallery names.\nClass CmsSearchField; // A abstract implementation for a search field.\nClass CmsSearchFieldConfiguration; // Abstract implementation for OpenCms search field configurations.\nClass CmsSearchFieldConfigurationOldCategories; // Describes a field configuration using the old (pre 8.0) logic for categories that depend on properties.\nClass CmsSearchFieldMapping; // Describes a mapping of a piece of content from an OpenCms VFS resource to a field of a search index.\nClass CmsSearchFieldMappingType; // Describes a possible mapping type for a piece of content used in building a search index.\n", "des": "These classes control the mapping of the OpenCms content to the Lucene search fields."}
{"index": 3830, "repo": "lucene-highlighter-9.7.0", "code": "package highlight;\n\nInterface Encoder; // Encodes original text.\nInterface Formatter; // Processes terms found in the original text, typically by applying some form of mark-up to highlight terms in HTML search results pages.\nInterface Fragmenter; // Implements the policy for breaking text into multiple fragments for consideration by the Highlighter class.\nInterface Scorer; // A Scorer is responsible for scoring a stream of tokens.\nClass DefaultEncoder; // Simple Encoder implementation that does not modify the output\nClass GradientFormatter; // Formats text with different color intensity depending on the score of the term.\nClass Highlighter; // Marks up highlighted terms found in the best sections of text, using configurable Fragmenter, Scorer, Formatter, Encoder and tokenizers.\nClass NullFragmenter; // Fragmenter implementation which does not fragment the text.\nClass OffsetLimitTokenFilter; // This TokenFilter limits the number of tokens while indexing by adding up the current offset.\nClass PositionSpan; // Utility class to record Positions Spans\nClass QueryScorer; // Scorer implementation which scores text fragments by the number of unique query terms found.\nClass QueryTermExtractor; // Utility class used to extract the terms used in a query, plus any weights.\nClass QueryTermScorer; // Scorer implementation which scores text fragments by the number of unique query terms found.\nClass SimpleFragmenter; // Fragmenter implementation which breaks text up into same-size fragments with no concerns over spotting sentence boundaries.\nClass SimpleHTMLEncoder; // Simple Encoder implementation to escape text for HTML output\nClass SimpleHTMLFormatter; // Simple Formatter implementation to highlight terms with a pre and post tag.\nClass SimpleSpanFragmenter; // Fragmenter implementation which breaks text up into same-size fragments but does not split up Spans.\nClass SpanGradientFormatter; // Formats text with different color intensity depending on the score of the term using the span tag.\nClass TermVectorLeafReader; // Wraps a Terms with a LeafReader, typically from term vectors.\nClass TextFragment; // Low-level class used to record information about a section of a document with a score.\nClass TokenGroup; // One, or several overlapping tokens, along with the score(s) and the scope of the original text.\n", "des": "Highlighting search terms."}
{"index": 695, "repo": "jackson-databind-2.15.2", "code": "package impl;\n\nClass AttributePropertyWriter; // VirtualBeanPropertyWriter implementation used for JsonAppend, to serialize properties backed-by dynamically assignable attribute values.\nClass BeanAsArraySerializer; // Specialized POJO serializer that differs from BeanSerializer in that instead of producing a JSON Object it will output a JSON Array, omitting field names, and serializing values in specified serialization order.\nClass FailingSerializer; // Special bogus \"serializer\" that will throw JsonMappingException if its FailingSerializer.serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) gets invoked.\nClass FilteredBeanPropertyWriter; // Decorated BeanPropertyWriter that will filter out properties that are not to be included in currently active JsonView.\nClass IndexedListSerializer; // This is an optimized serializer for Lists that can be efficiently traversed by index (as opposed to others, such as LinkedList that cannot}.\nClass IndexedStringListSerializer; // Efficient implement for serializing Lists that contains Strings and are random-accessible.\nClass IteratorSerializer;\nClass MapEntrySerializer;\nClass ObjectIdWriter; // Object that knows how to serialize Object Ids.\nClass PropertyBasedObjectIdGenerator;\nClass PropertySerializerMap; // Helper container used for resolving serializers for dynamic (possibly but not necessarily polymorphic) properties: properties whose type is not forced to use dynamic (declared) type and that are not final.\nClass PropertySerializerMap.SerializerAndMapResult; // Value class used for returning tuple that has both serializer that was retrieved and new map instance\nClass ReadOnlyClassToSerializerMap; // Optimized lookup table for accessing two types of serializers; typed and non-typed.\nClass SimpleBeanPropertyFilter; // Simple PropertyFilter implementation that only uses property name to determine whether to serialize property as is, or to filter it out.\nClass SimpleBeanPropertyFilter.FilterExceptFilter; // Filter implementation which defaults to filtering out unknown properties and only serializes ones explicitly listed.\nClass SimpleBeanPropertyFilter.SerializeExceptFilter; // Filter implementation which defaults to serializing all properties, except for ones explicitly listed to be filtered out.\nClass SimpleFilterProvider; // Simple FilterProvider implementation that just stores direct id-to-filter mapping.\nClass StringArraySerializer; // Standard serializer used for String[] values.\n", "des": "Contains implementation classes of serialization part of data binding."}
{"index": 854, "repo": "calcite-core-1.34.0", "code": "package runtime;\n\nInterface ArrayBindable; // Extension to Bindable that returns rows that are arrays of objects.\nInterface Bindable<T>; // Statement that can be bound to a DataContext and then executed.\nInterface CalciteResource; // Compiler-checked resources for the Calcite project.\nInterface Enumerables.Emitter<E,TResult>; // Given a match (a list of rows, and their states) produces a list of rows to be output.\nInterface FlatLists.ComparableList<T>; // List that is also comparable.\nInterface Hook.Closeable; // Removes a Hook after use.\nInterface Pattern; // Regular expression, to be compiled into an Automaton.\nInterface ResultSetEnumerable.PreparedStatementEnricher; // Consumer for decorating a PreparedStatement, that is, setting its parameters.\nInterface SpaceFillingCurve2D; // Utilities for space-filling curves.\nInterface SpaceFillingCurve2D.IndexRange; // Range.\nInterface Typed; // Adds type information to a Enumerable.\nClass ArrayComparator; // Compares arrays.\nClass ArrayEnumeratorCursor; // Implementation of Cursor on top of an Enumerator that returns an array of Object for each row.\nClass Automaton; // A nondeterministic finite-state automaton (NFA).\nClass AutomatonBuilder; // Builds a state-transition graph for deterministic finite automaton.\nClass BinarySearch; // Binary search for the implementation of RANGE BETWEEN XXX PRECEDING/FOLLOWING clause.\nClass CompressionFunctions; // A collection of functions used in compression and decompression.\nClass ConsList<E>; // List that consists of a head element and an immutable non-empty list.\nClass CoordinateTransformer; // Transforms the coordinates of a geometry.\nClass DeterministicAutomaton; // A deterministic finite automaton (DFA).\nClass Enumerables; // Utilities for processing Enumerable collections.\nClass EnumeratorCursor<T>; // Implementation of Cursor on top of an Enumerator that returns a record for each row.\nClass Feature; // SQL language feature.\nClass FlatLists; // Space-efficient, comparable, immutable lists.\nClass FlatLists.AbstractFlatList<T>; // Base class for flat lists.\nClass FlatLists.Flat1List<T>; // List that stores its one elements in the one members of the class.\n", "des": "Utilities required at runtime."}
{"index": 2511, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package reactive;\n\n@EnableWebFlux @ManagementContextConfiguration(value=CHILD, proxyBeanMethods=false) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementChildContextConfiguration extends Object; // @ManagementContextConfiguration for reactive web infrastructure when a separate management context with a web server running on a different port is required.\n@AutoConfiguration @ConditionalOnClass(reactor.core.publisher.Flux.class) @ConditionalOnWebApplication(type=REACTIVE) public class ReactiveManagementContextAutoConfiguration extends Object; // Auto-configuration for Reactive-specific management context concerns.\n", "des": "Configuration for a WebFlux-based management context."}
{"index": 2467, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package newrelic;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.newrelic.NewRelicMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"newrelic\") @EnableConfigurationProperties(NewRelicProperties.class) public class NewRelicMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to New Relic.\n@ConfigurationProperties(prefix=\"management.newrelic.metrics.export\") public class NewRelicProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring New Relic metrics export.\npublic class NewRelicPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<NewRelicProperties> implements io.micrometer.newrelic.NewRelicConfig; // Adapter to convert NewRelicProperties to a NewRelicConfig.\n", "des": "Support for exporting actuator metrics to New Relic."}
{"index": 2122, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "package aot;\n\n@DisableCachingByDefault(because=\"Cacheability can only be determined by a concrete implementation\") public abstract class AbstractAot extends JavaExec; // Specialization of JavaExec to be used as a base class for tasks that perform ahead-of-time processing.\n@CacheableTask public abstract class ProcessAot extends AbstractAot; // Custom JavaExec task for ahead-of-time processing of a Spring Boot application.\n@CacheableTask public class ProcessTestAot extends AbstractAot; // Custom JavaExec task for ahead-of-time processing of a Spring Boot application's tests.\n", "des": "Support for ahead-of-time processing of an application built with Gradle."}
{"index": 437, "repo": "commons-pool2-2.11.1", "code": "package impl;\n\nInterface CallStack; // Strategy for obtaining and printing the current call stack.\nInterface DefaultPooledObjectInfoMBean; // The interface that defines the information about pooled objects that will be exposed via JMX.\nInterface EvictionPolicy<T>; // To provide a custom eviction policy (i.e.\nInterface GenericKeyedObjectPoolMXBean<K>; // Defines the methods that will be made available via JMX.\nInterface GenericObjectPoolMXBean; // Defines the methods that will be made available via JMX.\nClass AbandonedConfig; // Configuration settings for abandoned object removal.\nClass BaseGenericObjectPool<T>; // Base class that provides common functionality for GenericObjectPool and GenericKeyedObjectPool.\nClass BaseObjectPoolConfig<T>; // Provides the implementation for the common attributes shared by the sub-classes.\nClass CallStackUtils; // Utility methods for CallStack.\nClass DefaultEvictionPolicy<T>; // Provides the default implementation of EvictionPolicy used by the pools.\nClass DefaultPooledObject<T>; // This wrapper is used to track the additional information, such as state, for the pooled objects.\nClass DefaultPooledObjectInfo; // Implementation of object that is used to provide information on pooled objects via JMX.\nClass EvictionConfig; // This class is used by pool implementations to pass configuration information to EvictionPolicy instances.\nClass GenericKeyedObjectPool<K,T>; // A configurable KeyedObjectPool implementation.\nClass GenericKeyedObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericKeyedObjectPool.\nClass GenericObjectPool<T>; // A configurable ObjectPool implementation.\nClass GenericObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericObjectPool.\nClass NoOpCallStack; // CallStack strategy using no-op implementations of all functionality.\nClass PooledSoftReference<T>; // Extension of DefaultPooledObject to wrap pooled soft references.\nClass SecurityManagerCallStack; // A CallStack strategy using a SecurityManager.\nClass SoftReferenceObjectPool<T>; // A SoftReference based ObjectPool.\nClass ThrowableCallStack; // CallStack strategy that uses the stack trace from a Throwable.\n", "des": "Object pooling API implementations."}
{"index": 2051, "repo": "spring-boot-loader-3.1.1", "code": "package util;\n\npublic abstract class SystemPropertyUtils extends Object; // Helper class for resolving placeholders in texts.\n", "des": "Utilities used by Spring Boot's JAR loading."}
{"index": 2734, "repo": "spring-batch-infrastructure-5.0.2", "code": "package builder;\n\npublic class SimpleMailMessageItemWriterBuilder extends Object; // Creates a fully qualified SimpleMailMessageItemWriter.\n", "des": "Builders for JavaMail related components."}
{"index": 1330, "repo": "groovy-all-4.0.13", "code": "package classgen;\n\npackage classgen.asm; // Helper classes for ASMClassGenerator.\npublic class AnnotationVisitor extends Object; // An Annotation visitor responsible for: reading annotation metadata (@Retention, @Target, attribute types) verify that an AnnotationNode conforms to annotation meta enhancing an AnnotationNode AST to reflect real annotation meta\npublic class AsmClassGenerator extends ClassGenerator; // Generates Java class versions of Groovy classes using ASM.\npublic abstract class BytecodeExpression extends Expression; // Represents some custom bytecode generation by the compiler.\npublic abstract class BytecodeInstruction extends Object; // Helper class used by the class generator.\npublic class BytecodeSequence extends Statement; // This class represents a sequence of BytecodeInstructions or ASTNodes.\npublic class ClassCompletionVerifier extends ClassCodeVisitorSupport; // Checks that a class satisfies various conditions including: Incorrect class or method access modifiers No abstract methods appear in a non-abstract class Existence and correct visibility for inherited members Invalid attempts to override final members\npublic abstract class ClassGenerator extends ClassCodeVisitorSupport; // Abstract base class for generator of Java class versions of Groovy AST classes\npublic class ClassGeneratorException extends RuntimeException; // An exception thrown by the class generator\npublic class DummyClassGenerator extends ClassGenerator; // To generate a class that has all the fields and methods, except that fields are not initialized and methods are empty.\npublic class EnumCompletionVisitor extends ClassCodeVisitorSupport; // Enums have a parent constructor with two arguments from java.lang.Enum.\npublic class EnumVisitor extends ClassCodeVisitorSupport;\npublic class ExtendedVerifier extends ClassCodeVisitorSupport; // A specialized Groovy AST visitor meant to perform additional verifications upon the current AST.\npublic class FinalVariableAnalyzer extends ClassCodeVisitorSupport;\npublic static interface FinalVariableAnalyzer.VariableNotFinalCallback;\npublic class GeneratorContext extends Object; // A context shared across generations of a class and its inner classes.\npublic class InnerClassCompletionVisitor extends InnerClassVisitorHelper;\npublic class InnerClassVisitor extends InnerClassVisitorHelper;\npublic abstract class InnerClassVisitorHelper extends ClassCodeVisitorSupport;\npublic class ReturnAdder extends Object; // Utility class to add return statements.\n@FunctionalInterface public static interface ReturnAdder.ReturnStatementListener;\npublic class VariableScopeVisitor extends ClassCodeVisitorSupport; // Initializes the variable scopes for an AST.\n", "des": "Generates Java classes for Groovy classes using ASM."}
{"index": 211, "repo": "nutch-2.4", "code": "package net;\n\npackage net.protocols; // Helper classes related to the Protocol interface, sea also org.apache.nutch.protocol.\nInterface URLFilter; // Interface used to limit which URLs enter Nutch.\nInterface URLNormalizer; // Interface used to convert URLs to normal form and optionally perform substitutions\nClass URLFilterChecker; // Checks one given filter or all filters.\nClass URLFilters; // Creates and caches URLFilter implementing plugins.\nClass URLNormalizerChecker; // Checks one given normalizer or all normalizers.\nClass URLNormalizers; // This class uses a \"chained filter\" pattern to run defined normalizers.\nClass URLFilterException;\n", "des": "Web-related interfaces: URL filters and normalizers."}
{"index": 3675, "repo": "solr-core-9.3.0", "code": "package solr;\n\nClass SolrReporter; // Implementation of ScheduledReporter that reports metrics from selected registries and sends them periodically as update requests to a selected Solr collection and to a configured handler.\nClass SolrReporter.Builder; // Builder for the SolrReporter class.\nClass SolrReporter.Report; // Specification of what registries and what metrics to send.\n", "des": "This package contains SolrMetricReporter implementations specific to SolrCloud reporting."}
{"index": 2408, "repo": "spring-batch-core-5.0.2", "code": "package job;\n\npublic class DefaultJobParametersExtractor extends Object implements JobParametersExtractor; // Simple implementation of JobParametersExtractor which pulls parameters with named keys out of the step execution context and the job parameters of the surrounding job.\n@FunctionalInterface public interface JobParametersExtractor; // Strategy interface for translating a StepExecution into JobParameters.\npublic class JobStep extends AbstractStep; // A Step that delegates to a Job to do its work.\n", "des": "JobStep and related components."}
{"index": 1701, "repo": "drill-common-1.21.1", "code": "package config;\n\npublic interface ConfigConstants;\npublic interface ConfigFileInfo; // Interface that defines implementation to get all the config files names for default, module specific, distribution specific and override files.\npublic interface ConfigProvider;\npublic class DrillConfig extends Object;\npublic class DrillExecConfigFileInfo extends Object implements ConfigFileInfo;\npublic final class DrillProperties extends Properties;\npublic class DrillRMConfigFileInfo extends Object implements ConfigFileInfo;\n", "des": "Internal configuration state definitions."}
{"index": 3365, "repo": "opencms-core-15.0", "code": "package workplace;\n\npackage workplace.commons; // Contains often used OpenCms Workplace dialogs, for example for file operations, user preferences and project based operations like publishing.\npackage workplace.comparison; // Utilities for comparing different versions of resources, used by both the classic workplace and the new Vaadin-based workplace.\npackage workplace.editors; // Base classes for the editors (WYSIWYG, plain text, XML content) used in the OpenCms Workplace.\npackage workplace.explorer; // Contains the functions that generate the Workplace \"Explorer\" view, also contains the \"New resource\" wizard.\npackage workplace.galleries; // Contains the various \"Galleries\" which are available in the editors and widgets of the OpenCms Workplace.\npackage workplace.list; // Generates the list views commonly used in the OpenCms Workplace \"Administration\" tools.\npackage workplace.threads; // A collection of thread classes that are used in the OpenCms Workplace, usually in connection with a report.\npackage workplace.tools; // Contains the base classes for implementing a tool in the OpenCms Workplace \"Administration\" view.\nInterface I_CmsDialogHandler; // Provides a method for selecting an individual jsp dialog.\nInterface I_CmsGroupNameTranslation; // Interface for transforming group names into a more human-readable form.\nInterface I_CmsPostUploadDialogHandler; // An interface which provides a hook which can be called after uploading files.\nInterface I_CmsRepositoryFolderHandler; // Evaluates the repository folder.\nInterface I_CmsWorkplaceMessageBundleProvider; // Implement this interface to provide message bundle names to added to the CmsWorkplaceMessages bundle.\nClass CmsAccountInfo; // Account info bean.\nClass CmsDialog; // Provides methods for building the dialog windows of OpenCms.\nClass CmsDialogSelector; // Selects the dialog which should be displayed by OpenCms depending on the configuration value.\nClass CmsLoginUserAgreement; // Provides methods to show a configurable user agreement dialog after a successful workplace login.\nClass CmsRepositoryFolderHandler; // The default upload folder handler.\nClass CmsWorkplace; // Master class for the JSP based workplace which provides default methods and session handling for all JSP workplace classes.\nClass CmsWorkplaceLoginHandler; // Resource init handler that loads the login form with the right parameters.\nClass CmsWorkplaceManager; // Manages the global OpenCms workplace settings for all users.\n", "des": "The base classes for the OpenCms Workplace (standard dialog, tab dialog, report based dialog) and the Workplace configuration classes are located here."}
{"index": 3463, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface AliasResolutionContext; // Provides aliases that are used by load queries and ResultSet processors.\nInterface CollectionReferenceAliases;\nInterface EntityReferenceAliases; // Aggregates the alias/suffix information in relation to an EntityReference todo : add a contract (interface) that can be shared by entity and collection alias info objects as lhs/rhs of a join ?\nInterface LoadQueryDetails;\nInterface LockModeResolver;\n", "des": "Defines the SPI for the load query generated for the LoadPlan and the ResultSet processor."}
{"index": 3075, "repo": "spring-ws-core-4.0.5", "code": "package addressing;\n\npackage addressing.core; // Core package for WS-Addressing support.\npackage addressing.messageid; // Contains various strategies for generating WS-Addressing MessageIDs.\npackage addressing.server; // Contains servers-side WS-Addressing support, in the form of EndpointMappings.\npackage addressing.version; // Contains abstractions over various versions of the WS-Addressing specification.\npublic class AddressingException extends WebServiceException; // Exception thrown in case on WS-Addressing errors.\n", "des": "Provides WS-Addressing implementation classes."}
{"index": 3026, "repo": "spring-web-6.0.11", "code": "package context;\n\npackage context.annotation; // Provides convenience annotations for web scopes.\npackage context.request; // Support for generic request context holding, in particular for scoping of application objects per HTTP request or HTTP session.\npackage context.support; // Classes supporting the org.springframework.web.context package, such as WebApplicationContext implementations and various utility classes.\npublic abstract class AbstractContextLoaderInitializer extends Object implements WebApplicationInitializer; // Convenient base class for WebApplicationInitializer implementations that register a ContextLoaderListener in the servlet context.\npublic interface ConfigurableWebApplicationContext extends WebApplicationContext, org.springframework.context.ConfigurableApplicationContext; // Interface to be implemented by configurable web application contexts.\npublic interface ConfigurableWebEnvironment extends org.springframework.core.env.ConfigurableEnvironment; // Specialization of ConfigurableEnvironment allowing initialization of servlet-related PropertySource objects at the earliest moment that the ServletContext and (optionally) ServletConfig become available.\npublic class ContextCleanupListener extends Object implements ServletContextListener; // Web application listener that cleans up remaining disposable attributes in the ServletContext, i.e.\npublic class ContextLoader extends Object; // Performs the actual initialization work for the root application context.\npublic class ContextLoaderListener extends ContextLoader implements ServletContextListener; // Bootstrap listener to start up and shut down Spring's root WebApplicationContext.\npublic interface ServletConfigAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the ServletConfig (typically determined by the WebApplicationContext) that it runs in.\npublic interface ServletContextAware extends org.springframework.beans.factory.Aware; // Interface to be implemented by any object that wishes to be notified of the ServletContext (typically determined by the WebApplicationContext) that it runs in.\npublic interface WebApplicationContext extends org.springframework.context.ApplicationContext; // Interface to provide configuration for a web application.\n", "des": "Contains a variant of the application context interface for web applications, and the ContextLoaderListener that bootstraps a root web application context."}
{"index": 924, "repo": "commons-compress-1.23.0", "code": "package lzw;\n\nClass LZWInputStream; // Generic LZW implementation.\n", "des": "Generic LZW implementation."}
{"index": 937, "repo": "commons-compress-1.23.0", "code": "package utils;\n\nInterface ByteUtils.ByteConsumer; // Used to consume bytes.\nInterface ByteUtils.ByteSupplier; // Used to supply bytes.\nInterface InputStreamStatistics; // This interface provides statistics on the current decompression stream.\nClass ArchiveUtils; // Generic Archive utilities\nClass BitInputStream; // Reads bits from an InputStream.\nClass BoundedArchiveInputStream; // NIO backed bounded input stream for reading a predefined amount of data from.\nClass BoundedInputStream; // A stream that limits reading from a wrapped stream to a given number of bytes.\nClass BoundedSeekableByteChannelInputStream; // InputStream that delegates requests to the underlying SeekableByteChannel, making sure that only bytes from a certain range can be read.\nClass ByteUtils; // Utility methods for reading and writing bytes.\nClass ByteUtils.InputStreamByteSupplier; // ByteUtils.ByteSupplier based on InputStream.\nClass ByteUtils.OutputStreamByteConsumer; // ByteUtils.ByteConsumer based on OutputStream.\nClass CharsetNames; // Character encoding names required of every implementation of the Java platform.\nClass Charsets; // Charsets required of every implementation of the Java platform.\nClass ChecksumCalculatingInputStream; // A stream that calculates the checksum of the data read.\nClass ChecksumVerifyingInputStream; // A stream that verifies the checksum of the data read once the stream is exhausted.\nClass CloseShieldFilterInputStream; // Re-implements FilterInputStream.close() to do nothing.\nClass CountingInputStream; // Input stream that tracks the number of bytes read.\nClass CountingOutputStream; // Stream that tracks the number of bytes read.\nClass CRC32VerifyingInputStream; // A stream that verifies the CRC of the data read once the stream is exhausted.\nClass ExactMath; // PRIVATE.\nClass FileNameUtils; // Generic file name utilities.\nClass FixedLengthBlockOutputStream; // This class supports writing to an OutputStream or WritableByteChannel in fixed length blocks.\nClass FlushShieldFilterOutputStream; // Re-implements FilterOutputStream.flush() to do nothing.\nClass IOUtils; // Utility functions\nClass Iterators; // Iterator utilities.\nClass Lists; // List utilities\nClass MultiReadOnlySeekableByteChannel; // Read-Only Implementation of SeekableByteChannel that concatenates a collection of other SeekableByteChannels.\nClass OsgiUtils; // Utilities for dealing with OSGi environments.\n", "des": "Provides utilities used internally by the compress library."}
{"index": 3466, "repo": "hibernate-core-5.6.15.Final", "code": "package transaction;\n\npackage transaction.spi; // Extended SPI contracts for the resource-level transaction capabilities of Hibernate.\nClass LocalSynchronizationException; // Wraps an exception thrown from a \"local synchronization\" (one registered in the SynchronizationRegistry).\nClass NullSynchronizationException; // Indicates an attempt to register a null synchronization.\nClass TransactionRequiredForJoinException; // Indicates a call to TransactionCoordinator.explicitJoin() that requires an active transaction where there currently is none.\n", "des": "Defines the resource-level transaction capabilities of Hibernate, which revolves around the TransactionCoordinator contract."}
{"index": 1029, "repo": "hadoop-aws-3.3.6", "code": "package files;\n\nClass PendingSet; // Persistent format for multiple pending commits.\nClass PersistentCommitData<T extends PersistentCommitData>; // Class for single/multiple commit data structures.\nClass SinglePendingCommit; // This is the serialization format for uploads yet to be committed.\nClass SuccessData; // Summary data saved into a _SUCCESS marker file.\n", "des": "Persistent data formats for the committers."}
{"index": 630, "repo": "freemarker-2.3.32", "code": "package xml;\n\nClass NodeListModel; // Use NodeModel instead.\n", "des": "Deprecated, use W3C DOM with freemarker.ext.dom instead; Exposes XML from DOM, dom4j or JDOM nodes, uniformly."}
{"index": 2071, "repo": "spring-webmvc-6.0.11", "code": "package annotation;\n\npublic interface ModelAndViewResolver; // SPI for resolving custom return values from a specific handler method.\npublic class ResponseStatusExceptionResolver extends AbstractHandlerExceptionResolver implements org.springframework.context.MessageSourceAware; // A HandlerExceptionResolver that uses the @ResponseStatus annotation to map exceptions to HTTP status codes.\n", "des": "Support package for annotation-based Servlet MVC controllers."}
{"index": 3250, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsPublishService; // The synchronous publish list interface.\nInterface I_CmsPublishServiceAsync; // The asynchronous interface to the publish service.\n", "des": "Classes to handle client-side GWT-RPC services."}
{"index": 2236, "repo": "spring-security-acl-6.1.2", "code": "package acls;\n\npackage acls.afterinvocation; // After-invocation providers for collection and array filtering.\npackage acls.domain; // Basic implementation of access control lists (ACLs) interfaces.\npackage acls.jdbc; // JDBC-based persistence of ACL information\npackage acls.model; // Interfaces and shared classes to manage access control lists (ACLs) for domain object instances.\npublic class AclEntryVoter extends org.springframework.security.access.vote.AbstractAclVoter; // Given a domain object instance passed as a method argument, ensures the principal has appropriate permission as indicated by the AclService.\npublic class AclPermissionCacheOptimizer extends Object implements org.springframework.security.access.PermissionCacheOptimizer; // Batch loads ACLs for collections of objects to allow optimised filtering.\npublic class AclPermissionEvaluator extends Object implements org.springframework.security.access.PermissionEvaluator; // Used by Spring Security's expression-based access control implementation to evaluate permissions for a particular object using the ACL module.\n", "des": "The Spring Security ACL package which implements instance-based security for domain objects."}
{"index": 3442, "repo": "hibernate-core-5.6.15.Final", "code": "package pagination;\n\nInterface LimitHandler; // Contract defining dialect-specific LIMIT clause handling.\nClass AbstractLimitHandler; // Default implementation of LimitHandler interface.\nClass CUBRIDLimitHandler; // Limit handler for CUBRID\nClass FirstLimitHandler;\nClass Informix10LimitHandler;\nClass LegacyFirstLimitHandler;\nClass LegacyLimitHandler; // Limit handler that delegates all operations to the underlying dialect.\nClass LimitHelper; // A helper for dealing with LimitHandler implementations\nClass NoopLimitHandler; // Handler not supporting query LIMIT clause.\nClass Oracle12LimitHandler; // A LimitHandler for databases which support the ANSI SQL standard syntax FETCH FIRST m ROWS ONLY and OFFSET n ROWS FETCH NEXT m ROWS ONLY.\nClass SQL2008StandardLimitHandler; // LIMIT clause handler compatible with ISO and ANSI SQL:2008 standard.\nClass SQLServer2005LimitHandler; // LIMIT clause handler compatible with SQL Server 2005 and later.\nClass SQLServer2012LimitHandler; // LIMIT clause handler compatible with SQL Server 2012 and later.\nClass SybaseASE157LimitHandler; // This limit handler is very conservative and is only triggered in simple cases involving a select or select distinct.\nClass TopLimitHandler;\n", "des": "Support for Dialect-specific pagination strategies"}
{"index": 3060, "repo": "spring-ws-core-4.0.5", "code": "package mime;\n\npublic abstract class AbstractMimeMessage extends Object implements MimeMessage; // Abstract implementation of the MimeMessage interface.\npublic interface Attachment; // Represents an attachment to a MimeMessage\npublic class AttachmentException extends WebServiceMessageException; // Exception thrown when a MIME attachment could not be accessed.\npublic interface MimeMessage extends WebServiceMessage; // Represents a Web service message with MIME attachments.\n", "des": "Provides MIME functionality for use the Spring Web Services framework."}
{"index": 3354, "repo": "opencms-core-15.0", "code": "package report;\n\nClass CmsReportDialog; // Simple dialog for displaying a report.\nClass CmsReportOverlay; // Report overlay, shows the wait spinner first and the report window later in case off longer running threads.\nClass CmsReportWidget; // A widget used to display an OpenCms report.\nClass CmsStreamReportWidget; // Widget that can be used to view a running report that is not generated specifically by an OpenCms report thread, but from the text written to the stream provided by this widget.\n", "des": "Contains the user interface components for reports."}
{"index": 41, "repo": "ignite-core-2.15.0", "code": "package spi;\n\npackage spi.checkpoint; // Contains APIs for checkpoint SPI.\npackage spi.collision; // Contains APIs for collision SPI.\npackage spi.indexing; // Contains APIs for indexing SPI.\npackage spi.loadbalancing; // Contains APIs for load balancing SPI.\npackage spi.communication; // Contains APIs for grid communication SPI.\npackage spi.deployment; // Contains APIs for deployment SPI.\npackage spi.discovery; // Contains APIs for topology manager SPI.\npackage spi.failover; // Contains APIs for failover SPI.\npackage spi.eventstorage; // Contains APIs for event storage SPI.\npackage spi.encryption; // Contains APIs for encryption SPI.\npackage spi.metric; // Contains common classes and interfaces for metric SPI implementations.\npackage spi.systemview; // Contains common classes and interfaces for system view SPI implementations.\npackage spi.tracing; // Contains common classes and interfaces for tracing SPI implementations.\nInterface IgniteSpi; // This interface defines life-cycle of SPI implementation.\nInterface IgniteSpiCloseableIterator<T>; // Closeable iterator.\nInterface IgniteSpiContext; // SPI context provides common functionality for all SPI implementations.\nInterface IgniteSpiManagementMBean; // This interface defines basic MBean for all SPI implementations.\nInterface IgniteSpiTimeoutObject; // Provides possibility to schedule delayed execution, see IgniteSpiContext.addTimeoutObject(IgniteSpiTimeoutObject).\nInterface TimeoutStrategy; // Strategy to calculate next timeout and check if total timeout reached.\nClass ExponentialBackoffTimeoutStrategy; // Strategy which incorporates retriable network operation, handling of totalTimeout logic.\nClass IgniteNodeValidationResult; // Result of joining node validation.\nClass IgniteSpiAdapter; // This class provides convenient adapter for SPI implementations.\nClass IgniteSpiMBeanAdapter; // This class provides convenient adapter for MBean implementations.\nClass IgniteSpiOperationTimeoutHelper; // Object that incorporates logic that determines a timeout value for the next network related operation and checks whether a failure detection timeout is reached or not.\nClass IgniteSpiThread; // This class provides convenient adapter for threads used by SPIs.\nClass IgniteSpiThreadFactory; // This class provides implementation of ThreadFactory factory for creating grid SPI threads.\nEnum IgnitePortProtocol; // Protocols supported by port processor.\n", "des": "Contains common classes and interfaces for SPI implementations."}
{"index": 227, "repo": "nutch-2.4", "code": "package model;\n\nClass Crawl;\nClass JobConfig;\nClass JobInfo;\nClass NutchStatus;\nEnum ConnectionStatus;\nEnum Crawl.CrawlStatus;\nEnum JobInfo.JobType;\nEnum JobInfo.State;\n", "des": "Contains model classes of client for Web UI"}
{"index": 2333, "repo": "spring-boot-3.1.1", "code": "package ssl;\n\npackage ssl.jks; // SSL trust material provider for Java KeyStores.\npackage ssl.pem; // SSL trust material provider for PEM-encoded certificates.\npublic class DefaultSslBundleRegistry extends Object implements SslBundleRegistry, SslBundles; // Default SslBundleRegistry implementation.\npublic class NoSuchSslBundleException extends RuntimeException; // Exception indicating that an SslBundle was referenced with a name that does not match any registered bundle.\npublic interface SslBundle; // A bundle of trust material that can be used to establish an SSL connection.\npublic interface SslBundleKey; // A reference to a single key obtained via SslBundle.\npublic interface SslBundleRegistry; // Interface that can be used to register an SslBundle for a given name.\npublic interface SslBundles; // A managed set of SslBundle instances that can be retrieved by name.\npublic interface SslManagerBundle; // A bundle of key and trust managers that can be used to establish an SSL connection.\npublic interface SslOptions; // Configuration options that should be applied when establishing an SSL connection.\npublic interface SslStoreBundle; // A bundle of key and trust stores that can be used to establish an SSL connection.\n", "des": "Management of trust material that can be used to establish an SSL connection."}
{"index": 15, "repo": "commons-collections4-4.4", "code": "package bag;\n\nClass AbstractBagDecorator<E>; // Decorates another Bag to provide additional behaviour.\nClass AbstractMapBag<E>; // Abstract implementation of the Bag interface to simplify the creation of subclass implementations.\nClass AbstractMapBag.MutableInteger; // Mutable integer class for storing the data.\nClass AbstractSortedBagDecorator<E>; // Decorates another SortedBag to provide additional behaviour.\nClass CollectionBag<E>; // Decorates another Bag to comply with the Collection contract.\nClass CollectionSortedBag<E>; // Decorates another SortedBag to comply with the Collection contract.\nClass HashBag<E>; // Implements Bag, using a HashMap to provide the data storage.\nClass PredicatedBag<E>; // Decorates another Bag to validate that additions match a specified predicate.\nClass PredicatedSortedBag<E>; // Decorates another SortedBag to validate that additions match a specified predicate.\nClass SynchronizedBag<E>; // Decorates another Bag to synchronize its behaviour for a multi-threaded environment.\nClass SynchronizedSortedBag<E>; // Decorates another SortedBag to synchronize its behaviour for a multi-threaded environment.\nClass TransformedBag<E>; // Decorates another Bag to transform objects that are added.\nClass TransformedSortedBag<E>; // Decorates another SortedBag to transform objects that are added.\nClass TreeBag<E>; // Implements SortedBag, using a TreeMap to provide the data storage.\nClass UnmodifiableBag<E>; // Decorates another Bag to ensure it can't be altered.\nClass UnmodifiableSortedBag<E>; // Decorates another SortedBag to ensure it can't be altered.\n", "des": "This package contains implementations of the Bag and SortedBag interfaces."}
{"index": 986, "repo": "spring-ws-3.0.10.RELEASE", "code": "package mapping;\n\nClass DelegatingSoapEndpointMapping; // EndpointMapping implement that adds SOAP actors or roles to a delegate endpoint.\nClass SoapActionAnnotationMethodEndpointMapping; // Implementation of the EndpointMapping interface that uses the SoapAction annotation to map methods to the request SOAPAction header.\nClass SoapActionEndpointMapping; // Implementation of the EndpointMapping interface to map from SOAPAction headers to endpoint beans.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes."}
{"index": 2607, "repo": "wicket-util-10.0.0-M1", "code": "package myers;\n\npublic final class DiffNode extends PathNode; // A diffnode in a diffpath.\npublic class MyersDiff extends Object implements DiffAlgorithm; // A clean-room implementation of Eugene Myers differencing algorithm.\npublic abstract class PathNode extends Object; // A node in a diffpath.\npublic final class Snake extends PathNode; // Represents a snake in a diffpath.\n", "des": "The diff.myers package implements Gene Myers' differencing algorithm."}
{"index": 912, "repo": "commons-compress-1.23.0", "code": "package tar;\n\nInterface TarConstants; // This interface contains all the definitions used in the package.\nClass TarArchiveEntry; // This class represents an entry in a Tar archive.\nClass TarArchiveInputStream; // The TarInputStream reads a UNIX tar archive as an InputStream.\nClass TarArchiveOutputStream; // The TarOutputStream writes a UNIX tar archive as an OutputStream.\nClass TarArchiveSparseEntry; // This class represents a sparse entry in a Tar archive.\nClass TarArchiveStructSparse; // This class represents struct sparse in a Tar archive.\nClass TarFile; // Provides random access to UNIX archives.\nClass TarUtils; // This class provides static utility methods to work with byte streams.\n", "des": "Provides stream classes for reading and writing archives using the TAR format."}
{"index": 256, "repo": "nutch-2.4", "code": "package regex;\n\nClass RegexURLNormalizer; // Allows users to do regex substitutions on all/any URLs that are encountered, which is useful for stripping session IDs from URLs.\n", "des": "URL normalizer with configurable rules based on regular expressions (Pattern)."}
{"index": 877, "repo": "calcite-core-1.34.0", "code": "package trace;\n\nClass CalciteLogger; // Small extension to Logger with some performance improvements.\nClass CalciteTimingTracer; // CalciteTimingTracer provides a mechanism for tracing the timing of a call sequence at nanosecond resolution.\nClass CalciteTrace; // Contains all of the tracers used within org.apache.calcite class libraries.\n", "des": "Tracing services."}
{"index": 1213, "repo": "commons-math3-3.6.1", "code": "package ranking;\n\nInterface RankingAlgorithm; // Interface representing a rank transformation.\nClass NaturalRanking; // Ranking based on the natural ordering on doubles.\nEnum NaNStrategy; // Strategies for handling NaN values in rank transformations.\nEnum TiesStrategy; // Strategies for handling tied values in rank transformations.\n", "des": "Classes providing rank transformations."}
{"index": 3746, "repo": "lucene-queryparser-9.7.0", "code": "package parser;\n\nInterface StandardSyntaxParserConstants; // Token literal values and constants.\nClass EscapeQuerySyntaxImpl; // Implementation of EscapeQuerySyntax for the standard lucene syntax.\nClass StandardSyntaxParser; // Parser for the standard Lucene syntax\nClass StandardSyntaxParserTokenManager; // Token Manager.\nClass Token; // Describes the input token stream.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "Lucene Query Parser"}
{"index": 2220, "repo": "spring-data-commons-3.1.2", "code": "package support;\n\npublic interface RevisionEntityInformation; // Information about a revision entity which is the class carrying revision information for an entity.\n", "des": "Value objects to implement core repository interfaces for historiography."}
{"index": 2048, "repo": "spring-boot-loader-3.1.1", "code": "package data;\n\npublic interface RandomAccessData; // Interface that provides read-only random access to some underlying data.\npublic class RandomAccessDataFile extends Object implements RandomAccessData; // RandomAccessData implementation backed by a RandomAccessFile.\n", "des": "Classes and interfaces to allow random access to a block of data."}
{"index": 610, "repo": "org.apache.karaf.main-2.4.4", "code": "package resource;\n\nInterface Capability; // A capability that has been declared from a Resource.\nInterface Requirement; // A requirement that has been declared from a Resource .\nInterface Resource; // A resource is the representation of a uniquely identified and typed data.\nInterface Wire; // A wire connecting a Capability to a Requirement.\nInterface Wiring; // A wiring for a resource.\nClass Namespace; // Capability and Requirement Namespaces base class.\n", "des": "Resource Package Version 1.0."}
{"index": 2617, "repo": "wicket-util-10.0.0-M1", "code": "package time;\n\npublic class Durations extends Object; // Utility class for Duration\npublic class Instants extends Object; // Utility class for Instant\n", "des": "Utilities for working with Time(s)."}
{"index": 370, "repo": "commons-geometry-euclidean-1.0", "code": "package path;\n\nClass AbstractLinePathConnector; // Abstract class for joining collections of line subsets into connected paths.\nClass AbstractLinePathConnector.ConnectableLineSubset; // Internal class used to connect line subsets together.\nClass InteriorAngleLinePathConnector; // Line subset connector that selects between multiple connection options based on the resulting interior angle.\nClass InteriorAngleLinePathConnector.Maximize; // Implementation of InteriorAngleLinePathConnector that chooses line subset connections that produce the largest interior angles.\nClass InteriorAngleLinePathConnector.Minimize; // Implementation of InteriorAngleLinePathConnector that chooses line subset connections that produce the smallest interior angles.\nClass LinePath; // Class representing a connected path of line convex subsets.\nClass LinePath.Builder; // Class used to build line paths.\n", "des": "This package provides classes for working with connected sequences of line segments and other line subsets."}
{"index": 1819, "repo": "spring-integration-mail-6.1.2", "code": "package transformer;\n\npublic abstract class AbstractMailMessageTransformer<T> extends Object implements org.springframework.integration.transformer.Transformer, org.springframework.beans.factory.BeanFactoryAware; // Base class for Transformers that convert from a JavaMail Message to a Spring Integration Message.\npublic class MailToStringTransformer extends AbstractMailMessageTransformer<String>; // Transforms a Message payload of type Message to a String.\n", "des": "Provides classes related to transforming mail messages."}
{"index": 1229, "repo": "spring-hateoas-2.1.2", "code": "package client;\n\npublic final class Hop extends Object; // Container for customizations to a single traverson \"hop\"\npublic class JsonPathLinkDiscoverer extends Object implements LinkDiscoverer; // LinkDiscoverer that uses JsonPath to find links inside a representation.\npublic interface LinkDiscoverer extends org.springframework.plugin.core.Plugin<MediaType>; // Interface to allow discovering links by relation type from some source.\npublic class LinkDiscoverers extends Object; // Value object to wrap a PluginRegistry for LinkDiscoverer so that it's easier to inject them into clients wanting to lookup a LinkDiscoverer for a given MediaTypes.\npublic class Traverson extends Object; // Component to ease traversing hypermedia APIs by following links with relation types.\npublic interface TraversonDefaults; // SPI that exposes HttpMessageConverters and LinkDiscoverers to be used by default by Traverson.\n", "des": "Client side support."}
{"index": 1665, "repo": "jena-core-4.9.0", "code": "package iterator;\n\npublic interface ClosableIterator<T> extends IteratorCloseable<T>; // An iterator which should be closed after use.\npublic interface ExtendedIterator<T> extends ClosableIterator<T>; // An ExtendedIterator is a ClosableIterator on which other operations are defined for convenience in iterator composition: composition, filtering in, filtering out, and element mapping. NOTE that the result of these operations consumes the base iterator(s); they do not make independent copies.\npublic class FilterIterator<T> extends WrappedIterator<T>; // Creates a sub-Iterator by filtering.\npublic abstract class LazyIterator<T> extends NiceIterator<T>; // An ExtendedIterator that is created lazily.\npublic class Map1Iterator<From,To> extends NiceIterator<To>; // An iterator that consumes an underlying iterator and maps its results before delivering them; supports remove if the underlying iterator does.\npublic interface MapFilter<R,S>; // Combines the actions of Map and Filter, mapping unacceptable objects to null and acceptable ones to their mapped value.\npublic class MapFilterIterator<T,X> extends NiceIterator<X> implements ExtendedIterator<X>; // A MapFilterIterator takes a MapFilter and an [Extended]Iterator and returns a new ExtendedIterator which delivers the sequence of all non-null elements MapFilter(X) for X from the base iterator.\npublic class NiceIterator<T> extends Object implements ExtendedIterator<T>; // NiceIterator is the standard base class implementing ExtendedIterator.\npublic class NullIterator<T> extends NiceIterator<T>; // An empty iterator.\npublic class RandomOrderIterator<T> extends WrappedIterator<T>; // RandomOrderIterator - Reorders the elements returned by an Iterator.\npublic class SingletonIterator<T> extends NiceIterator<T> implements ExtendedIterator<T>; // A ClosableIterator that contains only one element\npublic class UniqueFilter<T> extends Object implements Predicate<T>; // A Filter that filters out duplicate values.\npublic class WrappedIterator<T> extends NiceIterator<T>; // a WrappedIterator is an ExtendedIterator wrapping around a plain (or presented as plain) Iterator.\n", "des": "A package for defining useful iterators and iterator operations, including concatenation, mapping, filtering, empty and singleton iterators, iterator wrappers, and the ExtendedIterator class used in many places in Jena."}
{"index": 1374, "repo": "spring-boot-actuator-3.1.1", "code": "package cache;\n\n@Endpoint(id=\"caches\") public class CachesEndpoint extends Object; // @Endpoint to expose available caches.\npublic static class CachesEndpoint.CacheDescriptor extends Object implements OperationResponseBody; // Description of a Cache.\npublic static final class CachesEndpoint.CacheEntryDescriptor extends CachesEndpoint.CacheDescriptor; // Description of a Cache entry.\npublic static final class CachesEndpoint.CacheManagerDescriptor extends Object; // Description of a CacheManager.\npublic static final class CachesEndpoint.CachesDescriptor extends Object implements OperationResponseBody; // Description of the caches.\n@EndpointWebExtension(endpoint=CachesEndpoint.class) public class CachesEndpointWebExtension extends Object; // @EndpointWebExtension for the CachesEndpoint.\npublic class NonUniqueCacheException extends RuntimeException; // Exception thrown when multiple caches exist with the same name.\n", "des": "Actuator support for caches."}
{"index": 3673, "repo": "solr-core-9.3.0", "code": "package reporters;\n\npackage reporters.jmx; // This package contains components that support SolrJmxReporter.\npackage reporters.solr; // This package contains SolrMetricReporter implementations specific to SolrCloud reporting.\nInterface ReporterClientCache.ClientProvider<T>; // Provide an instance of service client.\nClass ReporterClientCache<T>; // Simple cache for reusable service clients used by some implementations of SolrMetricReporter.\nClass SolrGraphiteReporter; // Metrics reporter that wraps GraphiteReporter.\nClass SolrJmxReporter; // A SolrMetricReporter that finds (or creates) a MBeanServer from the given configuration and registers metrics to it with JMX.\nClass SolrSlf4jReporter; // Metrics reporter that wraps Slf4jReporter.\n", "des": "This package houses 'pluggable' metric reporters that inherit from the SolrMetricReporter class."}
{"index": 3405, "repo": "commons-imaging-1.0-alpha3", "code": "package rgbe;\n\nClass RgbeImageParser; // Parser for Radiance HDR images\nClass RgbeImagingParameters; // Rgbe format parameters.\n", "des": "The Radiance HDR image format."}
{"index": 1571, "repo": "spring-restdocs-core-3.0.0", "code": "package snippet;\n\npublic abstract class AbstractDescriptor<T extends AbstractDescriptor<T>> extends Object; // Base class for descriptors.\npublic abstract class Attributes extends Object; // A fluent API for building a map of attributes.\npublic static final class Attributes.Attribute extends Object; // An attribute (key-value pair).\npublic static final class Attributes.AttributeBuilder extends Object; // A simple builder for an attribute (key-value pair).\npublic abstract class IgnorableDescriptor<T extends IgnorableDescriptor<T>> extends AbstractDescriptor<T>; // Base class for descriptors for items that can be ignored.\npublic class ModelCreationException extends RuntimeException; // An exception that can be thrown by a TemplatedSnippet to indicate that a failure has occurred during model creation.\npublic interface PlaceholderResolverFactory; // A factory for creating PropertyPlaceholderHelper.PlaceholderResolver instances.\npublic class RestDocumentationContextPlaceholderResolver extends Object implements PropertyPlaceholderHelper.PlaceholderResolver; // A PropertyPlaceholderHelper.PlaceholderResolver that resolves placeholders using a RestDocumentationContext.\npublic final class RestDocumentationContextPlaceholderResolverFactory extends Object implements PlaceholderResolverFactory; // A PlaceholderResolverFactory that creates RestDocumentationContextPlaceholderResolver instances.\npublic interface Snippet; // A Snippet is used to document aspects of a call to a RESTful API.\npublic class SnippetException extends RuntimeException; // A RuntimeException thrown to indicate a problem with the generation of a documentation snippet.\npublic final class StandardWriterResolver extends Object implements WriterResolver; // Standard implementation of WriterResolver.\npublic abstract class TemplatedSnippet extends Object implements Snippet; // Base class for a Snippet that is produced using a Template and TemplateEngine.\npublic interface WriterResolver; // A WriterResolver is used to access the Writer that should be used to write a snippet for an operation that is being documented.\n", "des": "Snippet generation."}
{"index": 2417, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package cassandra;\n\n@AutoConfiguration(after={org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration.class,org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration.class,CassandraReactiveHealthContributorAutoConfiguration.class}) @ConditionalOnClass(com.datastax.oss.driver.api.core.CqlSession.class) @ConditionalOnEnabledHealthIndicator(\"cassandra\") @Import(org.springframework.boot.actuate.autoconfigure.cassandra.CassandraHealthContributorConfigurations.CassandraDriverConfiguration.class) public class CassandraHealthContributorAutoConfiguration extends Object; // Auto-configuration for CassandraDriverHealthIndicator.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration.class) @ConditionalOnClass({com.datastax.oss.driver.api.core.CqlSession.class,reactor.core.publisher.Flux.class}) @ConditionalOnEnabledHealthIndicator(\"cassandra\") @Import(org.springframework.boot.actuate.autoconfigure.cassandra.CassandraHealthContributorConfigurations.CassandraReactiveDriverConfiguration.class) public class CassandraReactiveHealthContributorAutoConfiguration extends Object; // Auto-configuration for CassandraDriverReactiveHealthIndicator.\n", "des": "Auto-configuration for actuator Cassandra concerns."}
{"index": 2423, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package properties;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint.class) @EnableConfigurationProperties(ConfigurationPropertiesReportEndpointProperties.class) public class ConfigurationPropertiesReportEndpointAutoConfiguration extends Object; // Auto-configuration for the ConfigurationPropertiesReportEndpoint.\n@ConfigurationProperties(\"management.endpoint.configprops\") public class ConfigurationPropertiesReportEndpointProperties extends Object; // Configuration properties for ConfigurationPropertiesReportEndpoint.\n", "des": "Auto-configuration for actuator property concerns."}
{"index": 2173, "repo": "spring-security-web-6.1.2", "code": "package access;\n\npackage access.channel; // Classes that ensure web requests are received over required transport channels.\npackage access.expression; // Implementation of web security expressions.\npackage access.intercept; // Enforcement of security for HTTP requests, typically by the URL requested.\npublic interface AccessDeniedHandler; // Used by ExceptionTranslationFilter to handle an AccessDeniedException.\npublic class AccessDeniedHandlerImpl extends Object implements AccessDeniedHandler; // Base implementation of AccessDeniedHandler.\npublic final class AuthorizationManagerWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware; // An implementation of WebInvocationPrivilegeEvaluator which delegates the checks to an instance of AuthorizationManager\npublic final class CompositeAccessDeniedHandler extends Object implements AccessDeniedHandler;\n@Deprecated public class DefaultWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware;\npublic final class DelegatingAccessDeniedHandler extends Object implements AccessDeniedHandler; // An AccessDeniedHandler that delegates to other AccessDeniedHandler instances based upon the type of AccessDeniedException passed into DelegatingAccessDeniedHandler.handle(HttpServletRequest, HttpServletResponse, AccessDeniedException).\npublic class ExceptionTranslationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.MessageSourceAware; // Handles any AccessDeniedException and AuthenticationException thrown within the filter chain.\npublic final class ObservationMarkingAccessDeniedHandler extends Object implements AccessDeniedHandler;\npublic final class RequestMatcherDelegatingAccessDeniedHandler extends Object implements AccessDeniedHandler; // An AccessDeniedHandler that delegates to other AccessDeniedHandler instances based upon the type of HttpServletRequest passed into RequestMatcherDelegatingAccessDeniedHandler.handle(HttpServletRequest, HttpServletResponse, AccessDeniedException).\npublic final class RequestMatcherDelegatingWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware; // A WebInvocationPrivilegeEvaluator which delegates to a list of WebInvocationPrivilegeEvaluator based on a RequestMatcher evaluation\npublic interface WebInvocationPrivilegeEvaluator; // Allows users to determine whether they have privileges for a given web URI.\n", "des": "Access-control related classes and packages."}
{"index": 34, "repo": "ignite-core-2.15.0", "code": "package ignite;\n\npackage ignite.cluster; // Contains cluster-related classes.\npackage ignite.configuration; // Contains configuration-related classes.\npackage ignite.lang; // Contains general language constructs and functional APIs for distributed computations.\npackage ignite.lifecycle; // Contains lifecycle-related classes.\npackage ignite.resources; // Contains resource injection annotations.\npackage ignite.scheduler; // Contains Job Scheduling functionality.\npackage ignite.spi; // Contains common classes and interfaces for SPI implementations.\npackage ignite.thread; // Contains threads-related utility classes.\npackage ignite.messaging; // Contains Topic-based Messaging functionality.\npackage ignite.events; // Contains Event Subscription functionality together with various events emitted by Ignite.\npackage ignite.compute; // Contains Compute Grid functionality.\npackage ignite.cache; // Contains main Data Grid APIs.\npackage ignite.transactions; // Contains transaction-related classes.\npackage ignite.services; // Contains main Managed Services APIs.\npackage ignite.client; // Contains Ignite Thin Client API classes.\npackage ignite.stream; // Contains Ignite Streamer classes.\npackage ignite.ssl; // Contains classes for working with SSL.\npackage ignite.maintenance; // Contains public interfaces for maintenance mechanism.\npackage ignite.mxbean; // Contains annotations for Dynamic MBeans.\npackage ignite.failure; // Contains Failure handling public API with standard FailureHandler implementations.\npackage ignite.plugin; // Contains plugins management API.\npackage ignite.logger; // Contains logging functionality used throughout the system.\npackage ignite.startup; // Contains Ignite runtime startup classes.\npackage ignite.marshaller; // Contains various supported marshallers.\npackage ignite.binary; // Contains Ignite Binary Objects API classes.\npackage ignite.platform; // Contains platform-related classes.\npackage ignite.internal; // Contains main implementation.\nInterface DataRegionMetrics; // Check the ReadOnlyMetricRegistry with \"name=io.dataregion.\nInterface DataRegionMetricsProvider; // This interface provides calculated metrics for data region.\nInterface Ignite; // Main entry-point for all Ignite APIs.\nInterface IgniteAtomicLong; // This interface provides a rich API for working with distributedly cached atomic long value.\n", "des": "Contains entry-point Ignite & HPC APIs."}
{"index": 1493, "repo": "wicket-extensions-10.0.0-M1", "code": "package panel;\n\npublic abstract class BreadCrumbPanel extends org.apache.wicket.markup.html.panel.Panel implements IBreadCrumbParticipant; // A panel that participates with a bread crumb model.\npublic final class BreadCrumbPanelFactory extends Object implements IBreadCrumbPanelFactory; // Simple factory that creates instances of a bread crumb panel based on the class it is constructed with.\npublic class BreadCrumbPanelLink extends BreadCrumbLink; // Bread crumb link specifically for bread crumb panels.\npublic abstract class BreadCrumbParticipantDelegate extends Object implements IBreadCrumbParticipant; // Base implementation for Panel/ Component based IBreadCrumbParticipant that decouples the implementation from the actual panel class.\n@FunctionalInterface public interface IBreadCrumbPanelFactory extends org.apache.wicket.util.io.IClusterable; // Factory interface to enabled deferred creation of a bread crumb panel while getting the proper id for creation.\n", "des": "This package contains a panel based implementation of bread crumb participants."}
{"index": 788, "repo": "lucene-analyzers-common-8.11.2", "code": "package it;\n\nClass ItalianAnalyzer; // Analyzer for Italian.\nClass ItalianLightStemFilter; // A TokenFilter that applies ItalianLightStemmer to stem Italian words.\nClass ItalianLightStemFilterFactory; // Factory for ItalianLightStemFilter.\nClass ItalianLightStemmer; // Light Stemmer for Italian.\n", "des": "Analyzer for Italian."}
{"index": 2614, "repo": "wicket-util-10.0.0-M1", "code": "package string;\n\npackage string.interpolator; // Support for String-variable interpolation.\npublic abstract class AbstractStringList extends Object implements IStringSequence, Serializable; // An abstract base class for string list implementations.\npublic final class AppendingStringBuffer extends Object implements Serializable, CharSequence; // This is a copy or combination of java.lang.StringBuffer and java.lang.String It has a special method getValue() which returns the internal char array.\npublic interface IStringIterator; // Typesafe string iterator interface\npublic interface IStringSequence; // Typesafe interface to an ordered sequence of strings.\npublic class PrependingStringBuffer extends Object; // This is a prepending stringbuffer optimized for constantly prepending strings to the front of the buffer.\npublic final class StringList extends AbstractStringList; // A typesafe, mutable list of strings supporting a variety of convenient operations as well as expected operations from List such as add(), size(), remove(), iterator(), get(int index) and toArray().\npublic final class Strings extends Object; // A variety of static String utility methods.\npublic class StringValue extends Object implements IClusterable; // Holds an immutable String value and optionally a Locale, with methods to convert to various types.\npublic final class StringValueConversionException extends ConversionException; // Thrown when a string value cannot be converted to some type.\n", "des": "String utilities."}
{"index": 124, "repo": "ignite-core-2.15.0", "code": "package jmx;\n\nClass JmxMetricExporterSpi; // Overview Ignite provides this default built-in implementation of MetricExporterSpi it exports metrics as JMX beans.\nClass MetricRegistryMBean; // MBean for exporting values of metric registry.\nClass ReadOnlyDynamicMBean; // Base class for read only DynamicMBean implementations.\n", "des": "Contains JMX based implementation of MetricExporterSpi."}
{"index": 2649, "repo": "spring-data-cassandra-4.1.2", "code": "package converter;\n\npublic abstract class AbstractResultSetConverter<T> extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,T>; // Convenient converter that can be used to convert a single-row-single-column, single-row-multi-column, or multi-row ResultSet into the given value of a given type.\npublic abstract class AbstractResultSetToBasicFixedTypeConverter<T> extends AbstractResultSetConverter<T>; // Thin wrapper that allows subclasses to delegate conversion of the given value to a DefaultConversionService.\npublic class ResultSetToArrayConverter extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,Object[]>; // Converter from ResultSet to Object array.\npublic class ResultSetToBigDecimalConverter extends AbstractResultSetToBasicFixedTypeConverter<BigDecimal>; // Converter from ResultSet to a single BigDecimal value.\npublic class ResultSetToBigIntegerConverter extends AbstractResultSetToBasicFixedTypeConverter<BigInteger>; // Converter from ResultSet to a single BigInteger value.\npublic class ResultSetToBooleanConverter extends AbstractResultSetToBasicFixedTypeConverter<Boolean>; // Converter from ResultSet to a single Boolean value.\npublic class ResultSetToByteBufferConverter extends AbstractResultSetConverter<ByteBuffer>; // Converter from ResultSet to a single ByteBuffer value.\npublic class ResultSetToDateConverter extends AbstractResultSetToBasicFixedTypeConverter<Date>; // Converter from ResultSet to a single Date value.\npublic class ResultSetToDoubleConverter extends AbstractResultSetToBasicFixedTypeConverter<Double>; // Converter from ResultSet to a single Double value.\npublic class ResultSetToFloatConverter extends AbstractResultSetToBasicFixedTypeConverter<Float>; // Converter from ResultSet to a single Float value.\npublic class ResultSetToInetAddressConverter extends AbstractResultSetToBasicFixedTypeConverter<InetAddress>; // Converter from ResultSet to a single InetAddress value.\npublic class ResultSetToIntegerConverter extends AbstractResultSetToBasicFixedTypeConverter<Integer>; // Converter from ResultSet to a single Integer value.\npublic class ResultSetToListConverter extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,List<Map<String,Object>>>; // Converter from ResultSet to Map.\npublic class ResultSetToListOfStringConverter extends AbstractResultSetConverter<List<String>>; // Converter from ResultSet to a List of String.\n", "des": "CQL specific converters."}
{"index": 2272, "repo": "spring-vault-core-3.0.4", "code": "package support;\n\npublic class VaultRepositoryFactory extends KeyValueRepositoryFactory; // RepositoryFactorySupport specific of handing Vault KeyValueRepository.\npublic class VaultRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends KeyValueRepositoryFactoryBean<T,S,ID>; // Adapter for Springs FactoryBean interface to allow easy setup of VaultRepositoryFactory via Spring configuration.\npublic class VaultRevisionMetadata extends Object implements RevisionMetadata<Integer>;\npublic class VaultRevisionRepository<T> extends Object implements RevisionRepository<T,String,Integer>; // Vault-based RevisionRepository providing revision metadata for versioned secrets.\n", "des": "Support infrastructure for query derivation of Vault specific repositories."}
{"index": 2886, "repo": "spring-integration-core-6.1.2", "code": "package json;\n\npublic abstract class AbstractJacksonJsonObjectMapper<N,P,J> extends Object implements JsonObjectMapper<N,P>, org.springframework.beans.factory.BeanClassLoaderAware; // Base class for Jackson JsonObjectMapper implementations.\npublic abstract class AbstractJsonInboundMessageMapper<P> extends Object implements InboundMessageMapper<String>; // Abstract InboundMessageMapper implementation that maps incoming JSON messages to a Message with the specified payload type.\npublic class AdviceMessageJacksonDeserializer extends MessageJacksonDeserializer<AdviceMessage<?>>; // The MessageJacksonDeserializer implementation for the AdviceMessage.\npublic class EmbeddedJsonHeadersMessageMapper extends Object implements BytesMessageMapper; // For outbound messages, uses a message-aware Jackson object mapper to render the message as JSON.\npublic class ErrorMessageJacksonDeserializer extends MessageJacksonDeserializer<org.springframework.messaging.support.ErrorMessage>; // The MessageJacksonDeserializer implementation for the ErrorMessage.\npublic class GenericMessageJacksonDeserializer extends MessageJacksonDeserializer<org.springframework.messaging.support.GenericMessage<?>>; // The MessageJacksonDeserializer implementation for the GenericMessage.\npublic class Jackson2JsonMessageParser extends Object; // JsonInboundMessageMapper.JsonMessageParser implementation that parses JSON messages and builds a Message with the specified payload type from provided JsonInboundMessageMapper.\npublic class Jackson2JsonObjectMapper extends AbstractJacksonJsonObjectMapper<com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType>; // Jackson 2 JSON-processor (@link https://github.com/FasterXML) JsonObjectMapper implementation.\npublic final class JacksonJsonUtils extends Object; // Utility methods for Jackson.\npublic final class JacksonPresent extends Object; // The utility to check if Jackson JSON processor is present in the classpath.\npublic class JsonInboundMessageMapper extends AbstractJsonInboundMessageMapper<JsonInboundMessageMapper.JsonMessageParser<?>>; // InboundMessageMapper implementation that maps incoming JSON messages to a Message with the specified payload type.\npublic static interface JsonInboundMessageMapper.JsonMessageParser<P>;\npublic interface JsonObjectMapper<N,P>; // Strategy interface to convert an Object to/from the JSON representation.\n", "des": "Provides classes supporting json."}
{"index": 3141, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface Callback; // Represents a JPA event callback (the method).\nInterface CallbackBuilder;\nInterface CallbackBuilder.CallbackRegistrar;\nInterface CallbackDefinition;\nInterface CallbackRegistrar;\nInterface CallbackRegistry; // Registry of Callbacks by entity and type\nInterface CallbackRegistryConsumer; // Contract for injecting the registry of Callbacks into event listeners.\nEnum CallbackType;\n", "des": "The SPI contracts for supporting JPA lifecycle callbacks."}
{"index": 1431, "repo": "spring-boot-actuator-3.1.1", "code": "package scheduling;\n\n@Endpoint(id=\"scheduledtasks\") @ImportRuntimeHints(org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint.ScheduledTasksEndpointRuntimeHints.class) public class ScheduledTasksEndpoint extends Object; // @Endpoint to expose information about an application's scheduled tasks.\npublic static final class ScheduledTasksEndpoint.CronTaskDescriptor extends ScheduledTasksEndpoint.TaskDescriptor; // Description of a CronTask or a TriggerTask with a CronTrigger.\npublic static final class ScheduledTasksEndpoint.CustomTriggerTaskDescriptor extends ScheduledTasksEndpoint.TaskDescriptor; // Description of a TriggerTask with a custom Trigger.\npublic static final class ScheduledTasksEndpoint.FixedDelayTaskDescriptor extends ScheduledTasksEndpoint.IntervalTaskDescriptor; // Description of a FixedDelayTask or a TriggerTask with a fixed-delay PeriodicTrigger.\npublic static final class ScheduledTasksEndpoint.FixedRateTaskDescriptor extends ScheduledTasksEndpoint.IntervalTaskDescriptor; // Description of a FixedRateTask or a TriggerTask with a fixed-rate PeriodicTrigger.\npublic static class ScheduledTasksEndpoint.IntervalTaskDescriptor extends ScheduledTasksEndpoint.TaskDescriptor; // Description of an IntervalTask.\npublic static final class ScheduledTasksEndpoint.RunnableDescriptor extends Object; // Description of a Task's Runnable.\npublic static final class ScheduledTasksEndpoint.ScheduledTasksDescriptor extends Object implements OperationResponseBody; // Description of an application's scheduled Tasks.\npublic abstract static class ScheduledTasksEndpoint.TaskDescriptor extends Object; // Base class for descriptions of a Task.\n", "des": "Actuator scheduling support."}
{"index": 3784, "repo": "lucene-analysis-common-9.7.0", "code": "package eu;\n\nClass BasqueAnalyzer; // Analyzer for Basque.\n", "des": "Analyzer for Basque."}
{"index": 1214, "repo": "commons-math3-3.6.1", "code": "package regression;\n\nInterface MultipleLinearRegression; // The multiple linear regression can be represented in matrix-notation.\nInterface UpdatingMultipleLinearRegression; // An interface for regression models allowing for dynamic updating of the data.\nClass AbstractMultipleLinearRegression; // Abstract base class for implementations of MultipleLinearRegression.\nClass GLSMultipleLinearRegression; // The GLS implementation of multiple linear regression.\nClass MillerUpdatingRegression; // This class is a concrete implementation of the UpdatingMultipleLinearRegression interface.\nClass OLSMultipleLinearRegression; // Implements ordinary least squares (OLS) to estimate the parameters of a multiple linear regression model.\nClass RegressionResults; // Results of a Multiple Linear Regression model fit.\nClass SimpleRegression; // Estimates an ordinary least squares regression model with one independent variable.\nClass ModelSpecificationException; // Exception thrown when a regression model is not correctly specified.\n", "des": "Statistical routines involving multivariate data."}
{"index": 1530, "repo": "spring-context-6.0.11", "code": "package access;\n\npublic class InvalidInvocationException extends JMRuntimeException; // Thrown when trying to invoke an operation on a proxy that is not exposed by the proxied MBean resource's management interface.\npublic class InvocationFailureException extends JmxException; // Thrown when an invocation on an MBean resource failed with an exception (either a reflection exception or an exception thrown by the target method itself).\npublic class MBeanClientInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // MethodInterceptor that routes calls to an MBean running on the supplied MBeanServerConnection.\npublic class MBeanConnectFailureException extends JmxException; // Thrown when an invocation failed because of an I/O problem on the MBeanServerConnection.\npublic class MBeanInfoRetrievalException extends JmxException; // Thrown if an exception is encountered when trying to retrieve MBean metadata.\npublic class MBeanProxyFactoryBean extends MBeanClientInterceptor implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Creates a proxy to a managed resource running either locally or remotely.\npublic class NotificationListenerRegistrar extends NotificationListenerHolder implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Registrar object that associates a specific NotificationListener with one or more MBeans in an MBeanServer (typically via a MBeanServerConnection).\n", "des": "Provides support for accessing remote MBean resources."}
{"index": 2641, "repo": "spring-integration-sftp-6.1.2", "code": "package outbound;\n\npublic class SftpMessageHandler extends org.springframework.integration.file.remote.handler.FileTransferringMessageHandler<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Subclass of FileTransferringMessageHandler for SFTP.\n", "des": "Provides classes for the SFTP outbound channel adapter."}
{"index": 3054, "repo": "spring-ws-core-4.0.5", "code": "package support;\n\npublic abstract class WebServiceGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean; // Convenient super class for application classes that need Web service access.\n", "des": "Convenient super class for application classes that need Web service access."}
{"index": 401, "repo": "commons-jexl3-3.3", "code": "package jexl3;\n\npackage jexl3.annotations; // Provides annotation for introspection services.\npackage jexl3.introspection; // Provides high-level introspective services.\npackage jexl3.scripting; // Contains the JSR-223 Scripting Engine for JEXL script.\nInterface JexlArithmetic.ArrayBuilder; // Helper interface used when creating an array literal.\nInterface JexlArithmetic.MapBuilder; // Helper interface used when creating a map literal.\nInterface JexlArithmetic.SetBuilder; // Helper interface used when creating a set literal.\nInterface JexlArithmetic.Uberspect; // The interface that uberspects JexlArithmetic classes.\nInterface JexlContext; // Manages variables which can be referenced in a JEXL expression.\nInterface JexlContext.AnnotationProcessor; // A marker interface of the JexlContext that processes annotations.\nInterface JexlContext.CancellationHandle; // A marker interface of the JexlContext sharing a cancelling flag.\nInterface JexlContext.ClassNameResolver; // A marker interface that solves a simple class name into a fully-qualified one.\nInterface JexlContext.ModuleProcessor; // A marker interface of the JexlContext that processes module definitions.\nInterface JexlContext.NamespaceFunctor; // A marker interface of the JexlContext, NamespaceFunctor allows creating an instance to delegate namespace methods calls to.\nInterface JexlContext.NamespaceResolver; // A marker interface of the JexlContext that declares how to resolve a namespace from its name; it is used by the interpreter during evaluation.\nInterface JexlContext.OptionsHandle; // A marker interface of the JexlContext that exposes runtime evaluation options.\nInterface JexlContext.PragmaProcessor; // A marker interface of the JexlContext that processes pragmas.\nInterface JexlContext.ThreadLocal; // A marker interface of the JexlContext that indicates the interpreter to put this context in the JexlEngine thread local context instance during evaluation.\nInterface JexlEngine.Options; // 3.2\nInterface JexlExpression; // Represents a single JEXL expression.\n", "des": "Provides a framework for evaluating JEXL expressions."}
{"index": 270, "repo": "nutch-2.4", "code": "package solr;\n\nInterface SolrConstants;\nClass SolrIndexWriter;\nClass SolrMappingReader;\nClass SolrUtils;\n", "des": "Index writer plugin for Apache Solr."}
{"index": 3491, "repo": "poi-5.2.3", "code": "package hssf;\n\npackage hssf.eventusermodel; // HSSF eventmodel Package provides an event-based API for reading HSSF files.\npackage hssf.model; // Provides low level API structures for reading, writing, modifying XLS files.\npackage hssf.record; // Record package contains class representations for XLS binary strutures.\npackage hssf.usermodel; // The usermodel package maps HSSF low level structures to familiar workbook/sheet model\npackage hssf.util; // The util package contains tools needed for writing HSSF files that are not necesarily \"real\" HSSF concepts.\nClass OldExcelFormatException;\n", "des": "Horrible SpreadSheet Format API's for reading/writting Excel files using pure Java."}
{"index": 3541, "repo": "opennlp-tools-2.2.0", "code": "package chunking;\n\nClass BuildContextGenerator; // Generates predictive contexts for deciding how constituents should be combined.\nClass CheckContextGenerator; // Generates predictive context for deciding when a constituent is complete.\nClass Parser; // A shift reduce style Parser implementation based on Adwait Ratnaparkhi's 1998 thesis.\nClass ParserEventStream; // Wrapper class for one of four shift-reduce parser event streams.\n", "des": "Package containing code for performing full syntactic parsing using shift/reduce-style decisions."}
{"index": 2963, "repo": "spring-integration-redis-6.1.2", "code": "package outbound;\n\n@FunctionalInterface public interface ArgumentsStrategy;\npublic class ExpressionArgumentsStrategy extends Object implements ArgumentsStrategy, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\npublic class ReactiveRedisStreamMessageHandler extends org.springframework.integration.handler.AbstractReactiveMessageHandler; // Implementation of ReactiveMessageHandler which writes Message payload or Message itself (see ReactiveRedisStreamMessageHandler.extractPayload) into a Redis stream using Reactive Stream operations.\npublic class RedisOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // The Gateway component implementation to perform Redis commands with provided arguments and to return command result.\npublic class RedisPublishingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler;\npublic class RedisQueueOutboundChannelAdapter extends org.springframework.integration.handler.AbstractMessageHandler;\npublic class RedisQueueOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler;\npublic class RedisStoreWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // Implementation of MessageHandler which writes Message data into a Redis store identified by a key String.\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 1826, "repo": "pulsar-client-original-3.0.0", "code": "package util;\n\npublic class ConsumerName extends Object;\npublic class ExecutorProvider extends Object;\npublic static class ExecutorProvider.ExtendedThreadFactory extends io.netty.util.concurrent.DefaultThreadFactory;\npublic class MathUtils extends Object;\npublic class MessageIdUtils extends Object;\npublic class NoOpLock extends Object implements Lock;\npublic class ObjectCache<T> extends Object implements Supplier<T>;\npublic class RetryMessageUtil extends Object;\npublic class RetryUtil extends Object;\npublic class ScheduledExecutorProvider extends ExecutorProvider;\n@Target({ANNOTATION_TYPE,FIELD,METHOD}) @Retention(RUNTIME) public @interface Secret;\npublic class SecretsSerializer extends com.fasterxml.jackson.databind.JsonSerializer<Object>;\npublic class TimedCompletableFuture<T> extends CompletableFuture<T>;\npublic class TypeCheckUtil extends Object;\npublic class WithSNISslEngineFactory extends org.asynchttpclient.netty.ssl.DefaultSslEngineFactory;\n", "des": "Pulsar Client Utils."}
{"index": 3883, "repo": "solr-solrj-9.3.0", "code": "package solrj;\n\npackage solrj.beans; // Annotation based mapping of client objects to Solr documents.\npackage solrj.cloud; // Common classes for SolrCloud.\npackage solrj.embedded; // SolrJ client implementations for embedded solr access.\npackage solrj.impl; // Concrete implementations of client API classes.\npackage solrj.request; // Convenience classes for dealing with various types of Solr requests.\npackage solrj.response; // Convenience classes for dealing with various types of Solr responses.\npackage solrj.routing; // Classes to handle query routing preferences\npackage solrj.util; // Utilities for Solr client applications.\nInterface FastStreamingDocsCallback;\nInterface V2RequestSupport; // A a request object is able to convert itself to V2 Request it should implement this interface\nClass ResponseParser;\nClass SolrClient; // Abstraction through which all communication with a Solr server may be routed\nClass SolrQuery; // This is an augmented SolrParams with get/set/add fields for common fields used in the Standard and Dismax request handlers\nClass SolrQuery.SortClause; // A single sort clause, encapsulating what to sort and the sort order.\nClass SolrRequest<T extends SolrResponse>;\nClass SolrResponse;\nClass StreamingResponseCallback; // A callback interface for streaming response\nEnum RoutedAliasTypes; // Types of Routed Alias supported.\nEnum SolrQuery.ORDER;\nEnum SolrRequest.METHOD;\nEnum SolrRequest.SolrClientContext;\nEnum SolrRequest.SolrRequestType;\nClass SolrServerException; // Exception to catch all types of communication / parsing issues associated with talking to SOLR\n", "des": "Primary APIs for communicating with a Solr Server from a Java client."}
{"index": 1520, "repo": "spring-context-6.0.11", "code": "package datetime;\n\npackage datetime.standard; // Integration with the JSR-310 java.time package in JDK 8.\npublic class DateFormatter extends Object implements Formatter<Date>; // A formatter for Date types.\npublic class DateFormatterRegistrar extends Object implements FormatterRegistrar; // Configures basic date formatting for use with Spring, primarily for DateTimeFormat declarations.\npublic class DateTimeFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<DateTimeFormat>; // Formats fields annotated with the DateTimeFormat annotation using a DateFormatter.\n", "des": "Formatters for java.util.Date properties."}
{"index": 853, "repo": "calcite-core-1.34.0", "code": "package rex;\n\nInterface RexAction;\nInterface RexBiVisitor<R,P>; // Visitor pattern for traversing a tree of RexNode objects and passing a payload to each.\nInterface RexExecutor; // Can reduce expressions, writing a literal for each into a list.\nInterface RexPattern;\nInterface RexSqlConvertlet; // Converts a RexNode expression into a SqlNode expression.\nInterface RexSqlConvertletTable; // Collection of RexSqlConvertlets.\nInterface RexToSqlNodeConverter; // Converts expressions from RexNode to SqlNode.\nInterface RexVisitor<R>; // Visitor pattern for traversing a tree of RexNode objects.\nClass LogicVisitor; // Visitor pattern for traversing a tree of RexNode objects.\nClass RexAnalyzer; // Analyzes an expression, figures out what are the unbound variables, assigns a variety of values to each unbound variable, and evaluates the expression.\nClass RexBiVisitorImpl<R,P>; // Default implementation of RexBiVisitor, which visits each node but does nothing while it's there.\nClass RexBuilder; // Factory for row expressions.\nClass RexCall; // An expression formed by a call to an operator with zero or more expressions as operands.\nClass RexCallBinding; // RexCallBinding implements SqlOperatorBinding by referring to an underlying collection of RexNode operands.\nClass RexChecker; // Visitor which checks the validity of a RexNode expression.\nClass RexCorrelVariable; // Reference to the current row of a correlating relational expression.\nClass RexDynamicParam; // Dynamic parameter reference in a row-expression.\nClass RexExecutable; // Result of compiling code generated from a RexNode expression.\nClass RexExecutorImpl; // Evaluates a RexNode expression.\nClass RexFieldAccess; // Access to a field of a row-expression.\nClass RexFieldCollation; // Expression combined with sort flags (DESCENDING, NULLS LAST).\nClass RexInputRef; // Variable which references a field of an input relational expression.\nClass RexInterpreter; // Evaluates RexNode expressions.\nClass RexLiteral; // Constant value in a row-expression.\nClass RexLocalRef; // Local variable.\n", "des": "Provides a language for representing row-expressions."}
{"index": 1464, "repo": "spring-data-redis-3.1.2", "code": "package query;\n\npublic class ExampleQueryMapper extends Object; // Mapper for Query-by-Example examples to an actual query.\npublic class RedisOperationChain extends Object; // Simple set of operations required to run queries against Redis.\npublic static class RedisOperationChain.NearPath extends RedisOperationChain.PathAndValue;\npublic static class RedisOperationChain.PathAndValue extends Object;\npublic class RedisQueryCreator extends AbstractQueryCreator<org.springframework.data.keyvalue.core.query.KeyValueQuery<RedisOperationChain>,RedisOperationChain>; // Redis specific query creator.\n", "des": "Redis specific query execution engine."}
{"index": 1136, "repo": "hadoop-yarn-api-3.3.6", "code": "package timeline;\n\nClass TimelineAbout;\nClass TimelineDelegationTokenResponse; // The response of delegation token related request\nClass TimelineDomain; // This class contains the information about a timeline domain, which is used to a user to host a number of timeline entities, isolating them from others'.\nClass TimelineDomains; // The class that hosts a list of timeline domains.\nClass TimelineEntities; // The class that hosts a list of timeline entities.\nClass TimelineEntity; // The class that contains the the meta information of some conceptual entity and its related events.\nClass TimelineEntityGroupId; // TimelineEntityGroupId is an abstract way for timeline service users to represent “a group of related timeline data.\nClass TimelineEvent; // The class that contains the information of an event that is related to some conceptual entity of an application.\nClass TimelineEvents; // The class that hosts a list of events, which are categorized according to their related entities.\nClass TimelineEvents.EventsOfOneEntity; // The class that hosts a list of events that are only related to one entity.\nClass TimelineHealth; // This class holds health information for ATS.\nClass TimelinePutResponse; // A class that holds a list of put errors.\nClass TimelinePutResponse.TimelinePutError; // A class that holds the error code for one entity.\nEnum TimelineHealth.TimelineHealthStatus; // Timline health status.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 894, "repo": "commons-jcs3-core-3.1", "code": "package lateral;\n\nClass LateralCache<K,V>; // Lateral distributor.\nClass LateralCacheAttributes; // This class stores attributes for all of the available lateral cache auxiliaries.\nClass LateralCacheMonitor; // Used to monitor and repair any failed connection for the lateral cache service.\nClass LateralCacheNoWait<K,V>; // Used to queue up update requests to the underlying cache.\nClass LateralCacheNoWaitFacade<K,V>; // Used to provide access to multiple services under nowait protection.\nClass LateralElementDescriptor<K,V>; // This class wraps command to other laterals.\nEnum LateralCommand; // Enumeration of the available lateral commands\n", "des": "Root package for the lateral cache family."}
{"index": 3627, "repo": "solr-test-framework-9.3.0", "code": "package util;\n\nInterface RESTfulServerProvider;\nClass BadZookeeperThreadsFilter;\nClass BaseTestHarness;\nClass DirectoryUtil;\nClass DOMUtilTestBase;\nClass EmbeddedSolrServerTestRule; // Provides an EmbeddedSolrServer for tests.\nClass ErrorLogMuter; // Helper code for \"Muting\" ERROR log messages that you expect as a result of the things you are testing, so they aren't a distraction in test logs.\nClass ExternalPaths; // Some tests need to reach outside the classpath to get certain resources (e.g.\nClass LogLevel.Configurer;\nClass LogListener; // Helper code to listen for LogEvent messages (via a Queue) that you expect as a result of the things you are testing, So you can make assertions about when a particular action should/shouldn't cause Solr to produce a particular Log message\nClass MockCoreContainer;\nClass MockCoreContainer.MockCoreDescriptor;\nClass NotSecurePseudoRandomSpi; // A mocked up instance of SecureRandom that just uses Random under the covers.\nClass QueryMatchers;\nClass RandomForceMergePolicy; // A MergePolicy with a no-arg constructor that proxies to a ForceMergePolicy wrapped instance retrieved from LuceneTestCase.newMergePolicy(java.util.Random).\nClass RandomForceMergePolicyFactory; // A MergePolicyFactory for RandomForceMergePolicy.\nClass RandomizeSSL.SSLRandomizer; // A simple data structure for encapsulating the effective values to be used when randomizing SSL in a test, based on the configured values in the RandomizeSSL annotation.\nClass RandomMergePolicy; // A MergePolicy with a no-arg constructor that proxies to an instance retrieved from LuceneTestCase.newMergePolicy(java.util.Random).\nClass RandomMergePolicyFactory; // A MergePolicyFactory for RandomMergePolicy.\nClass ReadOnlyCoresLocator;\nClass RestTestBase;\nClass RestTestHarness; // Facilitates testing Solr's REST API via a provided embedded Jetty\nClass RevertDefaultThreadHandlerRule;\nClass SolrClientTestRule; // Provides access to a SolrClient instance and a running Solr in tests.\nClass SolrTestNonSecureRandomProvider;\n", "des": "Misc utilities useful when implementing test cases."}
{"index": 3630, "repo": "lucene-misc-9.7.0", "code": "package index;\n\nInterface IndexRearranger.DocumentSelector; // Select document within a CodecReader\nClass BinaryDocValueSelector; // Select documents using binary doc values\nClass IndexRearranger; // Copy and rearrange index according to document selectors, from input dir to output dir.\nClass IndexSplitter; // Command-line tool that enables listing segments in an index, copying specific segments to another index, and deleting segments from an index.\nClass MultiPassIndexSplitter; // This tool splits input index into multiple equal parts.\nClass PKIndexSplitter; // Split an index based on a Query.\n", "des": "Misc index tools and index support."}
{"index": 3356, "repo": "opencms-core-15.0", "code": "package login;\n\nInterface I_CmsLoginTargetRpc; // Client RPC interface for opening a login target.\n", "des": "Contains the user shared classes for the Vaadin-based login dialog."}
{"index": 2894, "repo": "spring-integration-core-6.1.2", "code": "package transformer;\n\npackage transformer.support; // Contains support classes for Transformers.\npublic abstract class AbstractMessageProcessingTransformer extends Object implements Transformer, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle; // Base class for Message Transformers that delegate to a MessageProcessor.\npublic abstract class AbstractPayloadTransformer<T,U> extends AbstractTransformer; // A base class for Transformer implementations that modify the payload of a Message.\npublic abstract class AbstractTransformer extends IntegrationObjectSupport implements Transformer; // A base class for Transformer implementations.\npublic class ClaimCheckInTransformer extends AbstractTransformer implements IntegrationPattern; // Transformer that stores a Message and returns a new Message whose payload is the id of the stored Message.\npublic class ClaimCheckOutTransformer extends AbstractTransformer implements IntegrationPattern; // Transformer that accepts a Message whose payload is a UUID and retrieves the Message associated with that id from a MessageStore if available.\npublic class ContentEnricher extends AbstractReplyProducingMessageHandler implements ManageableLifecycle; // Content Enricher is a Message Transformer that can augment a message's payload with either static values or by optionally invoking a downstream message flow via its request channel and then applying values from the reply Message to the original payload.\npublic class DecodingTransformer<T> extends AbstractTransformer; // AbstractPayloadTransformer that delegates to a codec to decode the payload from a byte[].\npublic class EncodingPayloadTransformer<T> extends AbstractPayloadTransformer<T,byte[]>; // AbstractPayloadTransformer that delegates to a codec to encode the payload into a byte[].\npublic class ExpressionEvaluatingTransformer extends AbstractMessageProcessingTransformer; // A Message Transformer implementation that evaluates the specified SpEL expression.\npublic class FromProtobufTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware; // A Protocol Buffer transformer to instantiate Message objects from either byte[] if content type is application/x-protobuf or from String in case of application/json content type.\npublic class HeaderEnricher extends IntegrationObjectSupport implements Transformer, IntegrationPattern; // A Transformer that adds statically configured header values to a Message.\npublic class HeaderFilter extends IntegrationObjectSupport implements Transformer, IntegrationPattern; // Transformer that removes Message headers.\npublic class MapToObjectTransformer extends AbstractPayloadTransformer<Map<?,?>,Object>; // Will transform Map to an instance of Object.\n", "des": "Contains core-implementation of various Transformers which includes Enrichers and Filters."}
{"index": 3402, "repo": "commons-imaging-1.0-alpha3", "code": "package png;\n\nClass GammaCorrection;\nClass PhysicalScale; // Used to specify physical scale when reading or storing image information.\nClass PngConstants;\nClass PngImageInfo;\nClass PngImageParser;\nClass PngImagingParameters; // Png format parameters.\nClass PngText;\nClass PngText.Itxt;\nClass PngText.Text;\nClass PngText.Ztxt;\nEnum ChunkType; // Type of a PNG chunk.\nEnum InterlaceMethod; // Interlace methods.\nEnum PngColorType;\n", "des": "The PNG image format."}
{"index": 413, "repo": "hadoop-azure-3.3.6", "code": "package azure;\n\npackage azure.metrics; // Infrastructure for a Metrics2 source that provides information on Windows Azure Filesystem for Hadoop instances.\nInterface AzureFileSystemThreadTask; // Interface for executing the file operation by a thread.\nInterface KeyProvider; // The interface that every Azure file system key provider must implement.\nInterface SASKeyGeneratorInterface; // Iterface used by AzureNativeFileSysteStore to retrieve SAS Keys for the respective azure storage entity.\nInterface WasbAuthorizerInterface; // Interface to implement authorization support in WASB.\nClass AzureLinkedStack<E>; // A simple generic stack implementation using linked lists.\nClass AzureNativeFileSystemStore; // Core implementation of Windows Azure Filesystem for Hadoop.\nClass BlockBlobAppendStream; // Stream object that implements append for Block Blobs in WASB.\nClass CachingAuthorizer<K,V>; // Class that provides caching for Authorize and getSasUri calls\nClass LocalSASKeyGeneratorImpl; // Local SAS Key Generation implementation.\nClass NativeAzureFileSystem; // A FileSystem for reading and writing files stored on Windows Azure.\nClass NativeAzureFileSystem.FolderRenamePending; // A description of a folder rename operation, including the source and destination keys, and descriptions of the files in the source folder.\nClass NativeAzureFileSystem.Secure; // A FileSystem for reading and writing files stored on Windows Azure.\nClass RemoteSASKeyGeneratorImpl; // Class implementing a RemoteSASKeyGenerator.\nClass RemoteWasbAuthorizerImpl; // Class implementing WasbAuthorizerInterface using a remote service that implements the authorization operation.\nClass SASKeyGeneratorImpl; // Abstract base class for the SAS Key Generator implementation\nClass SecureStorageInterfaceImpl; // An implementation of the StorageInterface for SAS Key mode.\nClass SecureWasbRemoteCallHelper; // Helper class the has constants and helper methods used in WASB when integrating with a remote http cred service which uses Kerberos and delegation tokens.\nClass SelfRenewingLease; // An Azure blob lease that automatically renews itself indefinitely using a background thread.\nClass SelfThrottlingIntercept; // Introduces delays in our Azure traffic to prevent overrunning the server-side throttling limits.\nClass SendRequestIntercept; // Manages the lifetime of binding on the operation contexts to intercept send request events to Azure storage and allow concurrent OOB I/Os.\n", "des": "A distributed implementation of FileSystem for reading and writing files on Azure Block Storage."}
{"index": 3424, "repo": "hibernate-core-5.6.15.Final", "code": "package boot;\n\npackage boot.registry; // Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior.\npackage boot.xsd; // Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)\nInterface AttributeConverterInfo; // Delayed information about an AttributeConverter.\nInterface Metadata; // Represents the ORM model as determined from all provided mapping sources.\nInterface MetadataBuilder; // Contract for specifying various overrides to be used in metamodel building.\nInterface SessionFactoryBuilder; // The contract for building a SessionFactory given a number of options.\nClass CacheRegionDefinition; // Models the definition of caching settings for a particular region.\nClass JaccPermissionDefinition;\nClass MetadataSources; // Entry point into working with sources of metadata information (mapping XML, annotations).\nEnum CacheRegionDefinition.CacheRegionType;\nEnum SchemaAutoTooling; // Defines the possible values for \"hbm2ddl_auto\"\nEnum TempTableDdlTransactionHandling; // Enum describing how creation and dropping of temporary tables should be done in terms of transaction handling.\nClass InvalidMappingException;\nClass MappingException; // Indicates a problem parsing a mapping document.\nClass MappingNotFoundException;\nClass UnsupportedOrmXsdVersionException;\n", "des": "This package contains the contracts that make up the Hibernate native bootstrapping API (building a SessionFactory)."}
{"index": 118, "repo": "ignite-core-2.15.0", "code": "package cpp;\n\nClass PlatformCppConfiguration; // Platform CPP configuration.\n", "des": "Contains C++ platform-related classes."}
{"index": 831, "repo": "calcite-core-1.34.0", "code": "package materialize;\n\nInterface LatticeStatisticProvider; // Estimates row counts for a lattice and its attributes.\nInterface LatticeStatisticProvider.Factory; // Creates a LatticeStatisticProvider for a given Lattice.\nInterface MaterializationService.TableFactory; // Creates tables that represent a materialized view.\nInterface SqlStatisticProvider; // Estimates row counts for tables and columns, and whether combinations of columns form primary/unique and foreign keys.\nClass DelegatingLatticeStatisticProvider; // Implementation of LatticeStatisticProvider that delegates to an underlying provider.\nClass Lattice; // Structure that allows materialized views based upon a star schema to be recognized and recommended.\nClass Lattice.BaseColumn; // Column in a lattice.\nClass Lattice.Builder; // Lattice builder.\nClass Lattice.Column; // Column in a lattice.\nClass Lattice.DerivedColumn; // Column in a lattice that is based upon a SQL expression.\nClass Lattice.Measure; // A measure within a Lattice.\nClass Lattice.SqlWriter; // The information necessary to convert a column to SQL.\nClass Lattice.Tile; // Materialized aggregate within a lattice.\nClass Lattice.TileBuilder; // Tile builder.\nClass LatticeChildNode; // Non-root node in a Lattice.\nClass LatticeNode; // Source relation of a lattice.\nClass LatticeRootNode; // Root node in a Lattice.\nClass Lattices; // Utilities for Lattice, LatticeStatisticProvider.\nClass LatticeSuggester; // Algorithm that suggests a set of lattices.\nClass LatticeTable; // Table registered in the graph.\nClass MaterializationKey; // Unique identifier for a materialization.\nClass MaterializationService; // Manages the collection of materialized tables known to the system, and the process by which they become valid and invalid.\nClass MaterializationService.DefaultTableFactory; // Default implementation of MaterializationService.TableFactory.\nClass TileKey; // Definition of a particular combination of dimensions and measures of a lattice that is the basis of a materialization.\nClass TileSuggester; // Algorithm that suggests a set of initial tiles (materialized aggregate views) for a given lattice.\n", "des": "Management of materialized query results."}
{"index": 355, "repo": "hive-exec-4.0.0-alpha-2", "code": "package orc;\n\nInterface ExternalCache.ExternalFooterCachesByConf; // An abstraction for testing ExternalCache in OrcInputFormat.\nInterface ExternalCache.ExternalFooterCachesByConf.Cache;\nInterface OrcInputFormat.FooterCache; // Represents footer cache.\nInterface Reader; // The interface for reading ORC files.\nInterface RecordReader; // A row-by-row iterator for ORC files.\nInterface VectorizedOrcAcidRowBatchReader.DeleteEventRegistry; // An interface that can determine which rows have been deleted from a given vectorized row batch.\nInterface Writer; // The HIVE interface for writing ORC files.\nClass ExternalCache; // Metastore-based footer cache storing serialized footers.\nClass FixAcidKeyIndex; // Utility to check and fix the ACID key index of an ORC file if it has been written incorrectly due to HIVE-18817.\nClass MetastoreExternalCachesByConf; // An implementation of external cache and factory based on metastore.\nClass MetastoreExternalCachesByConf.HBaseCache;\nClass OrcFile; // Contains factory methods to read or write ORC files.\nClass OrcFile.ReaderOptions;\nClass OrcFile.WriterOptions; // Options for creating ORC file writers.\nClass OrcFileFormatProxy; // File format proxy for ORC.\nClass OrcFileKeyWrapper; // Key for OrcFileMergeMapper task.\nClass OrcFileStripeMergeInputFormat;\nClass OrcFileStripeMergeRecordReader;\nClass OrcFileValueWrapper; // Value for OrcFileMergeMapper.\nClass OrcInputFormat; // A MapReduce/Hive input format for ORC files.\nClass OrcInputFormat.ContextFactory;\nClass OrcInputFormat.FooterCacheKey;\nClass OrcInputFormat.NullKeyRecordReader; // Return a RecordReader that is compatible with the Hive 0.12 reader with NullWritable for the key instead of RecordIdentifier.\nClass OrcNewInputFormat; // An InputFormat for ORC files.\nClass OrcNewOutputFormat; // An OutputFormat that writes ORC files.\nClass OrcNewSplit; // OrcFileSplit.\nClass OrcOiBatchToRowReader; // BatchToRowReader that returns the rows readable by ORC IOs.\n", "des": "The Optimized Row Columnar (ORC) File Format."}
{"index": 1421, "repo": "spring-boot-actuator-3.1.1", "code": "package system;\n\npublic class DiskSpaceMetricsBinder extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder that binds one or more DiskSpaceMetrics.\n", "des": "Actuator support for system metrics."}
{"index": 2273, "repo": "spring-vault-core-3.0.4", "code": "package security;\n\npublic class VaultBytesEncryptor extends Object implements BytesEncryptor; // Vault-based BytesEncryptor using Vault's transit backend.\npublic class VaultBytesKeyGenerator extends Object implements BytesKeyGenerator; // Random byte generator using Vault's transit backend to generate high-quality random bytes of the configured length.\n", "des": "Integration with Spring Security."}
{"index": 1128, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "package discovery;\n\nInterface FPGADiscoveryStrategy; // Interface for an FPGA device discovery strategy.\nClass AoclOutputBasedDiscoveryStrategy; // FPGA device discovery strategy which invokes the \"aocl\" SDK command to retrieve the list of available FPGA cards.\nClass DeviceSpecParser; // Parses a string which specifies FPGA devices.\nClass ScriptBasedFPGADiscoveryStrategy; // FPGA device discovery strategy which invokes an external script.\nClass SettingsBasedFPGADiscoveryStrategy; // FPGA device discovery strategy which parses a string.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1287, "repo": "spring-core-6.0.11", "code": "package classreading;\n\npublic class CachingMetadataReaderFactory extends SimpleMetadataReaderFactory; // Caching implementation of the MetadataReaderFactory interface, caching a MetadataReader instance per Spring Resource handle (i.e.\npublic interface MetadataReader; // Simple facade for accessing class metadata, as read by an ASM ClassReader.\npublic interface MetadataReaderFactory; // Factory interface for MetadataReader instances.\npublic class SimpleMetadataReaderFactory extends Object implements MetadataReaderFactory; // Simple implementation of the MetadataReaderFactory interface, creating a new ASM ClassReader for every request.\n", "des": "Support classes for reading annotation and class-level metadata."}
{"index": 952, "repo": "spring-ws-3.0.10.RELEASE", "code": "package adapter;\n\npackage adapter.method; // Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof.\nClass AbstractMethodEndpointAdapter; // Abstract base class for EndpointAdapter implementations that support MethodEndpoints.\nClass DefaultMethodEndpointAdapter; // Default extension of AbstractMethodEndpointAdapter with support for pluggable argument resolvers and return value handlers.\nClass GenericMarshallingMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and MarshallingPayloadMethodProcessor.\nClass MarshallingMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and MarshallingPayloadMethodProcessor.\nClass MessageEndpointAdapter; // Adapter to use a MessageEndpoint as the endpoint for a EndpointInvocationChain.\nClass MessageMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and MessageContextMethodArgumentResolver.\nClass PayloadEndpointAdapter; // Adapter to use a PayloadEndpoint as the endpoint for a EndpointInvocationChain.\nClass PayloadMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and SourcePayloadMethodProcessor.\nClass XPathParamAnnotationMethodEndpointAdapter; // as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and XPathParamMethodArgumentResolver.\n", "des": "Provides miscellaneous EndpointAdapter implementations."}
{"index": 1823, "repo": "pulsar-client-original-3.0.0", "code": "package schema;\n\npackage schema.reader; // Pulsar Client schema reader.\npublic abstract class AbstractSchema<T> extends Object implements Schema<T>;\npublic abstract class AbstractStructSchema<T> extends AbstractSchema<T>; // minimal abstract StructSchema.\npublic class AutoConsumeSchema extends Object implements Schema<GenericRecord>; // Auto detect schema, returns only GenericRecord instances.\npublic class AutoProduceBytesSchema<T> extends Object implements Schema<byte[]>; // Auto detect schema.\npublic abstract class AvroBaseStructSchema<T> extends AbstractStructSchema<T>; // This is a base schema implementation for Avro Based `Struct` types.\npublic class AvroSchema<T> extends AvroBaseStructSchema<T>; // An AVRO schema implementation.\npublic static class AvroSchema.TimestampConversion extends org.apache.avro.Conversion<org.joda.time.DateTime>;\npublic class BooleanSchema extends AbstractSchema<Boolean>; // A schema for `Boolean`.\npublic class ByteBufferSchema extends AbstractSchema<ByteBuffer>; // A bytebuffer schema is effectively a `BYTES` schema.\npublic class ByteBufSchema extends AbstractSchema<io.netty.buffer.ByteBuf>; // A variant `Bytes` schema that takes ByteBuf.\npublic class ByteSchema extends AbstractSchema<Byte>; // A schema for 'Byte'.\npublic class BytesSchema extends AbstractSchema<byte[]>; // A schema for bytes array.\npublic class DateSchema extends AbstractSchema<Date>; // A schema for `java.util.Date` or `java.sql.Date`.\npublic class DoubleSchema extends AbstractSchema<Double>; // A schema for `Double`.\npublic class FloatSchema extends AbstractSchema<Float>; // A schema for `Float`.\npublic class InstantSchema extends AbstractSchema<Instant>; // A schema for `java.time.Instant`.\npublic class IntSchema extends AbstractSchema<Integer>; // A schema for `Integer`.\npublic class JSONSchema<T> extends AvroBaseStructSchema<T>; // A schema implementation to deal with json data.\npublic class KeyValueSchemaImpl<K,V> extends AbstractSchema<KeyValue<K,V>> implements KeyValueSchema<K,V>; // [Key, Value] pair schema definition.\n", "des": "Pulsar Client schema."}
{"index": 1574, "repo": "spring-cloud-task-core-3.0.3", "code": "package configuration;\n\npublic class DefaultTaskConfigurer extends Object implements TaskConfigurer; // Default implementation of the TaskConfigurer interface.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(TaskLifecycleConfiguration.class) public @interface EnableTask; // Enables the TaskLifecycleListener so that the features of Spring Cloud Task will be applied.\n@AutoConfiguration @EnableTransactionManagement @EnableConfigurationProperties(TaskProperties.class) @ConditionalOnProperty(prefix=\"spring.cloud.task.autoconfiguration\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) public class SimpleTaskAutoConfiguration extends Object; // Base Configuration class providing common structure for enabling and using Spring Task.\npublic class SingleInstanceTaskListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.context.ApplicationEvent>; // When spring.cloud.task.single-instance-enabled is set to true this listener will create a lock for the task based on the spring.cloud.task.name.\n@Order(-2147483648) @AutoConfiguration @ConditionalOnProperty(prefix=\"spring.cloud.task\", name=\"single-instance-enabled\", havingValue=\"true\") public class SingleTaskConfiguration extends Object; // Autoconfiguration of SingleInstanceTaskListener.\npublic interface TaskConfigurer; // Provides a strategy interface for providing configuration customization to the task system.\n@Configuration(proxyBeanMethods=false) public class TaskLifecycleConfiguration extends Object; // Configuration for a TaskLifecycleListener.\npublic class TaskObservationCloudKeyValues extends Object; // Provides values for the KeyValues for the task Observation when the cloud profile is active.\n@ConfigurationProperties(prefix=\"spring.cloud.task\") public class TaskProperties extends Object; // Properties available to configure the task.\npublic class TaskRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // Native Hints for Spring Cloud Task.\n", "des": "Interfaces for configuring Spring Cloud Task and a default implementations."}
{"index": 3244, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsContentService; // The content editor service interface.\nInterface I_CmsContentServiceAsync; // The content editor asynchronous service interface.\n", "des": "Contains the RPC service interfaces used by the XML content editor."}
{"index": 147, "repo": "ignite-core-2.15.0", "code": "package optimized;\n\nInterface OptimizedMarshallerIdMapper; // ID mapper.\nClass OptimizedMarshaller; // Optimized implementation of Marshaller.\nClass OptimizedObjectOutputStream; // Optimized object output stream.\nClass OptimizedObjectPooledStreamRegistry;\nClass OptimizedObjectSharedStreamRegistry;\nClass OptimizedMarshallerInaccessibleClassException;\n", "des": "Contains Optimized marshaller."}
{"index": 3895, "repo": "solr-solrj-9.3.0", "code": "package routing;\n\nInterface ReplicaListTransformer;\nInterface ReplicaListTransformerFactory;\nClass AffinityReplicaListTransformer; // Allows better caching by establishing deterministic evenly-distributed replica routing preferences according to either explicitly configured hash routing parameter, or the hash of a query parameter (configurable, usually related to the main query).\nClass AffinityReplicaListTransformerFactory; // Factory for constructing an AffinityReplicaListTransformer that reorders replica routing preferences deterministically, based on request parameters.\nClass NodePreferenceRulesComparator; // This comparator makes sure that the given replicas are sorted according to the given list of preferences.\nClass NoOpReplicaListTransformer;\nClass PreferenceRule;\nClass RequestReplicaListTransformerGenerator;\nClass ShufflingReplicaListTransformer;\n", "des": "Classes to handle query routing preferences"}
{"index": 3423, "repo": "hibernate-core-5.6.15.Final", "code": "package annotations;\n\nClass QueryHints; // Consolidation of hints available to Hibernate JPA queries.\nEnum CacheConcurrencyStrategy; // Cache concurrency strategy.\nEnum CacheModeType; // Enumeration for the different interaction modes between the session and the Level 2 Cache.\nEnum CascadeType; // Cascade types (can override default JPA cascades).\nEnum FetchMode; // Defines how the association should be fetched, compared to FetchType which defines when it should be fetched\nEnum FlushModeType; // Enumeration extending javax.persistence flush modes.\nEnum GenerationTime; // At what time(s) will the generation occur?\nEnum LazyCollectionOption; // Lazy options available for a collection.\nEnum LazyToOneOption; // Lazy options available for a ToOne association.\nEnum NotFoundAction; // Possible actions when the database contains a non-null fk with no matching target.\nEnum OnDeleteAction; // Possible actions for on-delete.\nEnum OptimisticLockType; // Possible optimistic locking strategies.\nEnum PolymorphismType; // Type of available polymorphism for a particular entity.\nEnum ResultCheckStyle; // Possible styles of checking return codes on SQL INSERT, UPDATE and DELETE queries.\nEnum SortType;\nEnum SourceType; // Where should Hibernate retrieve the value from? From the database, or from the current JVM?\nAnnotation Type AccessType;\nAnnotation Type Any; // Defines a ToOne-style association pointing to one of several entity types depending on a local discriminator, as opposed to discriminated inheritance where the discriminator is kept as part of the entity hierarchy.\nAnnotation Type AnyMetaDef;\nAnnotation Type AnyMetaDefs;\nAnnotation Type AttributeAccessor; // Names a persistent property access strategy (PropertyAccessStrategy) to use.\nAnnotation Type BatchSize; // Defines size for batch loading of collections or lazy entities.\nAnnotation Type Cache; // Add caching strategy to a root entity or a collection.\nAnnotation Type Cascade; // Apply a cascade strategy on an association.\nAnnotation Type Check; // Arbitrary SQL CHECK constraints which can be defined at the class, property or collection level.\nAnnotation Type CollectionId; // Describe an identifier column for a bag (ie an idbag).\nAnnotation Type CollectionType;\nAnnotation Type ColumnDefault; // Identifies the DEFAULT value to apply to the associated column via DDL.\nAnnotation Type Columns; // Support an array of columns.\n", "des": "Package containing all the Hibernate specific annotations."}
{"index": 2301, "repo": "spring-boot-3.1.1", "code": "package handler;\n\npublic class IgnoreErrorsBindHandler extends AbstractBindHandler; // BindHandler that can be used to ignore binding errors.\npublic class IgnoreTopLevelConverterNotFoundBindHandler extends AbstractBindHandler; // BindHandler that can be used to ignore top-level ConverterNotFoundExceptions.\npublic class NoUnboundElementsBindHandler extends AbstractBindHandler; // BindHandler to enforce that all configuration properties under the root name have been bound.\n", "des": "General BindHandler implementations."}
{"index": 1561, "repo": "spring-restdocs-core-3.0.0", "code": "package constraints;\n\npublic class Constraint extends Object; // A constraint.\npublic interface ConstraintDescriptionResolver; // Resolves a description for a Constraint.\npublic class ConstraintDescriptions extends Object; // Provides access to descriptions of a class's constraints.\npublic interface ConstraintResolver; // An abstraction for resolving a class's constraints.\npublic class ResourceBundleConstraintDescriptionResolver extends Object implements ConstraintDescriptionResolver; // A ConstraintDescriptionResolver that resolves constraint descriptions from a ResourceBundle.\npublic class ValidatorConstraintResolver extends Object implements ConstraintResolver; // A ConstraintResolver that uses a Bean Validation Validator to resolve constraints.\n", "des": "Documenting a RESTful API's constraints."}
{"index": 2574, "repo": "camel-api-4.0.0-RC1", "code": "package camel;\n\npackage camel.catalog; // Camel Catalog API\npackage camel.cloud; // Camel cloud\npackage camel.cluster; // Camel Cluster support\npackage camel.health; // Camel Health Check support\npackage camel.spi; // Service Provider Interfaces used by the Camel runtime which are plugin strategies.\npublic interface AfterPropertiesConfigured; // To perform optional initialization on an element after its properties has been configured.\npublic interface AggregationStrategy; // A strategy for aggregating two exchanges together into a single exchange.\npublic class AlreadyStoppedException extends RuntimeCamelException; // Exception thrown in situations when a Service has already been stopped.\npublic interface ApiEndpoint extends Endpoint; // Marks the Endpoint as an endpoint from an API based component.\npublic interface AsyncCallback extends Runnable; // The callback interface for an AsyncProcessor so that it can notify you when an Exchange is done.\npublic interface AsyncEndpoint extends Endpoint; // Marks the Endpoint as support asynchronous non-blocking routing in its consumer and producer.\npublic interface AsyncProcessor extends Processor; // An asynchronous processor which can process an Exchange in an asynchronous fashion and signal completion by invoking the AsyncCallback.\npublic interface AsyncProducer extends Producer, AsyncProcessor; // Asynchronous producer\npublic interface BatchConsumer extends Consumer; // A consumer of a batch of message exchanges from an Endpoint\n@Retention(RUNTIME) @Documented @Target({FIELD,METHOD,CONSTRUCTOR,PARAMETER}) public @interface BeanConfigInject; // Used to indicate an injection point of a configuration bean (obtained from the Registry, or a new instance is created) into a POJO.\n@Retention(RUNTIME) @Documented @Target({FIELD,METHOD,CONSTRUCTOR,PARAMETER}) public @interface BeanInject; // Used to indicate an injection point of a bean obtained from the Registry, into a POJO.\npublic enum BeanScope extends Enum<BeanScope>;\npublic interface BinaryPredicate extends Predicate; // A predicate which evaluates a binary expression.\n@Retention(RUNTIME) @Documented @Target({TYPE,FIELD,METHOD}) public @interface BindToRegistry; // Used for binding a bean to the registry.\n@Retention(RUNTIME) @Documented @Target(PARAMETER) public @interface Body; // Marks a parameter as being the body of an inbound Message\n@FunctionalInterface public interface Builder<T>;\n", "des": "The core Camel API."}
{"index": 3111, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package selector;\n\npackage selector.spi; // Defines actual contract used for strategy selection : StrategySelector.\nInterface StrategyRegistration<T>; // Describes the registration of a named strategy implementation.\nInterface StrategyRegistrationProvider; // Responsible for providing the registrations of strategy selector(s).\nClass SimpleStrategyRegistrationImpl<T>; // A simple implementation of StrategyRegistration.\n", "des": "Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations."}
{"index": 603, "repo": "org.apache.karaf.main-2.4.4", "code": "package resolver;\n\nInterface ResolverHook; // OSGi Framework Resolver Hook instances are obtained from the OSGi Framework Resolver Hook Factory service.\nInterface ResolverHookFactory; // OSGi Framework Resolver Hook Factory Service.\n", "des": "Framework Resolver Hooks Package Version 1.0."}
{"index": 812, "repo": "lucene-analyzers-common-8.11.2", "code": "package th;\n\nClass ThaiAnalyzer; // Analyzer for Thai language.\nClass ThaiTokenizer; // Tokenizer that use BreakIterator to tokenize Thai text.\nClass ThaiTokenizerFactory; // Factory for ThaiTokenizer.\n", "des": "Analyzer for Thai."}
{"index": 495, "repo": "beam-sdks-java-core-2.49.0", "code": "package testing;\n\nInterface FlattenWithHeterogeneousCoders; // Category tag for tests that use a Flatten where the input PCollectionList contains PCollections heterogeneous coders.\nInterface LargeKeys; // Category tags for tests which validate that a Beam runner can handle keys up to a given size.\nInterface LargeKeys.Above100KB; // Tests if a runner supports 100KB keys.\nInterface LargeKeys.Above100MB; // Tests if a runner supports 100MB keys.\nInterface LargeKeys.Above10KB; // Tests if a runner supports 10KB keys.\nInterface LargeKeys.Above10MB; // Tests if a runner supports 10MB keys.\nInterface LargeKeys.Above1MB; // Tests if a runner supports 1MB keys.\nInterface NeedsRunner; // Category tag for validation tests which utilize TestPipeline for execution and expect to be executed by a PipelineRunner.\nInterface PAssert.IterableAssert<T>; // Builder interface for assertions applicable to iterables and PCollection contents.\nInterface PAssert.SingletonAssert<T>; // Builder interface for assertions applicable to a single value.\nInterface SerializableMatcher<T>; // A Matcher that is also Serializable.\nInterface SerializableMatchers.SerializableSupplier<T>; // Supplies values of type T, and is serializable.\nInterface StreamingIT; // tests which use unbounded PCollections should be in the category UsesUnboundedPCollections.\nInterface TestPipeline.TestValueProviderOptions; // Implementation detail of TestPipeline.newProvider(T), do not use.\nInterface TestPipelineOptions; // TestPipelineOptions is a set of options for test pipelines.\nInterface TestStream.Event<T>; // An event in a TestStream.\nInterface UsesBoundedSplittableParDo; // Category tag for validation tests which utilize splittable ParDo with a DoFn.BoundedPerElement DoFn.\nInterface UsesBundleFinalizer; // Category tag for validation tests which use DoFn.BundleFinalizer.\nInterface UsesCommittedMetrics; // Category tag for validation tests which utilize Metrics.\nInterface UsesCustomWindowMerging; // Category tag for validation tests which utilize custom window merging.\nInterface UsesFailureMessage; // Category tag for tests which validate that currect failure message is provided by failed pipeline.\n", "des": "Defines utilities for unit testing Apache Beam pipelines."}
{"index": 624, "repo": "freemarker-2.3.32", "code": "package jdom;\n\nClass NodeListModel; // Use NodeModel instead.\n", "des": "Deprecated, use W3C DOM (freemarker.ext.dom) instead; Exposes JDOM XML nodes to templates."}
{"index": 1552, "repo": "spring-context-6.0.11", "code": "package context;\n\npackage context.support; // Classes supporting the org.springframework.ui.context package.\n@Deprecated(since=\"6.0\") public interface HierarchicalThemeSource extends ThemeSource;\n@Deprecated(since=\"6.0\") public interface Theme;\n@Deprecated(since=\"6.0\") public interface ThemeSource;\n", "des": "Contains classes defining the application context subinterface for UI applications."}
{"index": 2042, "repo": "spring-messaging-6.0.11", "code": "package user;\n\npublic class DefaultUserDestinationResolver extends Object implements UserDestinationResolver; // A default implementation of UserDestinationResolver that relies on a SimpUserRegistry to find active sessions for a user.\npublic interface DestinationUserNameProvider; // A Principal can also implement this contract when getName() isn't globally unique and therefore not suited for use with \"user\" destinations.\npublic class MultiServerUserRegistry extends Object implements SimpUserRegistry, org.springframework.context.event.SmartApplicationListener; // SimpUserRegistry that looks up users in a \"local\" user registry as well as a set of \"remote\" user registries.\npublic interface SimpSession; // Represents a session of connected user.\npublic interface SimpSubscription; // Represents a subscription within a user session.\n@FunctionalInterface public interface SimpSubscriptionMatcher; // A strategy for matching subscriptions.\npublic interface SimpUser; // Represents a connected user.\npublic interface SimpUserRegistry; // A registry of currently connected users.\npublic class UserDestinationMessageHandler extends Object implements MessageHandler, org.springframework.context.SmartLifecycle; // MessageHandler with support for \"user\" destinations.\n@FunctionalInterface public interface UserDestinationResolver; // A strategy for resolving a \"user\" destination by translating it to one or more actual destinations one per active user session.\npublic class UserDestinationResult extends Object; // Contains the result from parsing a \"user\" destination from a source message and translating it to target destinations (one per active user session).\npublic class UserRegistryMessageHandler extends Object implements MessageHandler, org.springframework.context.ApplicationListener<BrokerAvailabilityEvent>; // MessageHandler that handles user registry broadcasts from other application servers and periodically broadcasts the content of the local user registry.\n", "des": "Support for handling messages to \"user\" destinations (i.e."}
{"index": 2562, "repo": "pulsar-common-3.0.0", "code": "package impl;\n\npublic class NamespaceIsolationPolicies extends Object; // Namespace isolation policies.\npublic class NamespaceIsolationPolicyImpl extends Object implements NamespaceIsolationPolicy; // Implementation of the namespace isolation policy.\n", "des": "Implementation of policies."}
{"index": 3327, "repo": "opencms-core-15.0", "code": "package git;\n\nClass CmsGitActionResultPanel; // Dialog that prints the result of the execution of a git action.\nClass CmsGitAppConfiguration; // App configuration for the Git checkin tool.\nClass CmsGitCheckin; // The class provides methods to automatically export modules from OpenCms and check in the exported, unzipped modules into some git repository.\nClass CmsGitConfiguration; // Access to a single git configuration file.\nClass CmsGitToolOptionsPanel; // Main widget for the Git check-in tool.\nClass Messages; // Message bundle class.\n", "des": "This package contains the app classes for the git check in functionality."}
{"index": 3715, "repo": "solr-core-9.3.0", "code": "package update;\n\npackage update.processor; // UpdateRequestProcessorFactory APIs and implementations for use in UpdateRequestProcessorChains\nInterface SolrCoreState.IndexWriterCloser;\nInterface VersionBucket.CheckedFunction<T,​R>;\nClass AddUpdateCommand; // An UpdateCommand for adding or updating one document.\nClass CommitTracker; // Helper class for tracking autoCommit state.\nClass CommitUpdateCommand; // A commit index command encapsulated in an object.\nClass DefaultSolrCoreState;\nClass DeleteUpdateCommand;\nClass DirectUpdateHandler2; // DirectUpdateHandler2 implements an UpdateHandler where documents are added directly to the main Lucene index as opposed to adding to a separate smaller index.\nClass DocumentBuilder; // Builds a Lucene Document from a SolrInputDocument.\nClass IndexFingerprint;\nClass LoggingInfoStream; // An InfoStream implementation which passes messages on to Solr's logging.\nClass MemOutputStream;\nClass MergeIndexesCommand; // A merge indexes command encapsulated in an object.\nClass PeerSync; // This class is useful for performing peer to peer synchronization of recently indexed update commands during recovery process.\nClass PeerSync.MissedUpdatesFinder; // Helper class for doing comparison ourUpdates and other replicas's updates to find the updates that we missed\nClass PeerSync.MissedUpdatesRequest; // Result of PeerSync.MissedUpdatesFinder\nClass PeerSync.PeerSyncResult;\nClass PeerSyncWithLeader;\nClass PeerSyncWithLeader.MissedUpdatesFinder; // Helper class for doing comparison ourUpdates and other replicas's updates to find the updates that we missed\nClass RollbackUpdateCommand;\nClass SolrCmdDistributor; // Used for distributing commands from a shard leader to its replicas.\nClass SolrCmdDistributor.ForwardNode;\nClass SolrCmdDistributor.Node;\nClass SolrCmdDistributor.Req;\nClass SolrCmdDistributor.Response;\nClass SolrCmdDistributor.SolrError;\nClass SolrCmdDistributor.StdNode;\nClass SolrCoreState; // The state in this class can be easily shared between SolrCores across SolrCore reloads.\nClass SolrIndexConfig; // This config object encapsulates IndexWriter config params, defined in the <indexConfig> section of solrconfig.xml\nClass SolrIndexSplitter;\nClass SolrIndexWriter; // An IndexWriter that is configured via Solr config mechanisms.\n", "des": "APIs and classes for managing index updates"}
{"index": 3854, "repo": "lucene-core-9.7.0", "code": "package automaton;\n\nInterface AutomatonProvider; // Automaton provider for RegExp. RegExp.toAutomaton(AutomatonProvider,int)\nClass Automata; // Construction of basic automata.\nClass Automaton; // Represents an automaton and all its states and transitions.\nClass Automaton.Builder; // Records new states and transitions and then Automaton.Builder.finish() creates the Automaton.\nClass ByteRunAutomaton; // Automaton representation for matching UTF-8 byte[].\nClass CharacterRunAutomaton; // Automaton representation for matching char[].\nClass CompiledAutomaton; // Immutable class holding compiled details for a given Automaton.\nClass DaciukMihovAutomatonBuilder;\nClass FiniteStringsIterator; // Iterates all accepted strings.\nClass LevenshteinAutomata; // Class to construct DFAs that match a word within some edit distance.\nClass LimitedFiniteStringsIterator; // FiniteStringsIterator which limits the number of iterated accepted strings.\nClass MinimizationOperations; // Operations for minimizing automata.\nClass Operations; // Automata operations.\nClass RegExp; // Regular Expression extension to Automaton.\nClass RunAutomaton; // Finite-state automaton with fast run operation.\nClass StatePair; // Pair of states.\nClass Transition; // Holds one transition from an Automaton.\nClass UTF32ToUTF8; // Converts UTF-32 automata to the equivalent UTF-8 representation.\nEnum CompiledAutomaton.AUTOMATON_TYPE; // Automata are compiled into different internal forms for the most efficient execution depending upon the language they accept.\nEnum RegExp.Kind; // The type of expression represented by a RegExp node.\nClass TooComplexToDeterminizeException; // This exception is thrown when determinizing an automaton would require too much work.\n", "des": "Finite-state automaton for regular expressions."}
{"index": 2767, "repo": "spring-jms-6.0.11", "code": "package jms;\n\npackage jms.annotation; // Annotations and support classes for declarative JMS listener endpoints.\npackage jms.config; // Support package for declarative messaging configuration, with Java configuration and XML schema support.\npackage jms.connection; // Provides a PlatformTransactionManager implementation for a single JMS ConnectionFactory, and a SingleConnectionFactory adapter.\npackage jms.core; // Core package of the JMS support.\npackage jms.listener; // This package contains the base message listener container facility.\npackage jms.support; // This package provides generic JMS support classes, to be used by higher-level classes like JmsTemplate.\npublic class IllegalStateException extends JmsException; // Runtime exception mirroring the JMS IllegalStateException.\npublic class InvalidClientIDException extends JmsException; // Runtime exception mirroring the JMS InvalidClientIDException.\npublic class InvalidDestinationException extends JmsException; // Runtime exception mirroring the JMS InvalidDestinationException.\npublic class InvalidSelectorException extends JmsException; // Runtime exception mirroring the JMS InvalidSelectorException.\npublic abstract class JmsException extends org.springframework.core.NestedRuntimeException; // Base class for exception thrown by the framework whenever it encounters a problem related to JMS.\npublic class JmsSecurityException extends JmsException; // Runtime exception mirroring the JMS JMSSecurityException.\npublic class MessageEOFException extends JmsException; // Runtime exception mirroring the JMS MessageEOFException.\npublic class MessageFormatException extends JmsException; // Runtime exception mirroring the JMS MessageFormatException.\npublic class MessageNotReadableException extends JmsException; // Runtime exception mirroring the JMS MessageNotReadableException.\npublic class MessageNotWriteableException extends JmsException; // Runtime exception mirroring the JMS MessageNotWriteableException.\npublic class ResourceAllocationException extends JmsException; // Runtime exception mirroring the JMS ResourceAllocationException.\npublic class TransactionInProgressException extends JmsException; // Runtime exception mirroring the JMS TransactionInProgressException.\npublic class TransactionRolledBackException extends JmsException; // Runtime exception mirroring the JMS TransactionRolledBackException.\npublic class UncategorizedJmsException extends JmsException; // JmsException to be thrown when no other matching subclass found.\n", "des": "This package contains integration classes for JMS, allowing for Spring-style JMS access."}
{"index": 363, "repo": "commons-geometry-euclidean-1.0", "code": "package oned;\n\nClass AffineTransformMatrix1D; // Class using a matrix to represent affine transformations in 1 dimensional Euclidean space.\nClass Interval; // Class representing an interval in one dimension.\nClass OrientedPoint; // This class represents a 1D oriented hyperplane.\nClass OrientedPoints; // Class containing factory methods for constructing OrientedPoint instances.\nClass RegionBSPTree1D; // Binary space partitioning (BSP) tree representing a region in one dimensional Euclidean space.\nClass RegionBSPTree1D.RegionNode1D; // BSP tree node for one dimensional Euclidean space.\nClass Vector1D; // This class represents vectors and points in one-dimensional Euclidean space.\nClass Vector1D.Sum; // Class used to create high-accuracy sums of vectors.\nClass Vector1D.Unit; // Represent unit vectors.\n", "des": "This package provides basic 1D geometry components."}
{"index": 402, "repo": "commons-jexl3-3.3", "code": "package annotations;\n\nAnnotation Type NoJexl; // Indicates JEXL Introspection should not see this element.\n", "des": "Provides annotation for introspection services."}
{"index": 3209, "repo": "tomcat-api-10.1", "code": "package server;\n\nClass Constants; // Internal implementation constants.\nClass DefaultServerEndpointConfigurator;\nClass UpgradeUtil;\nClass UriTemplate; // Extracts path parameters from URIs used to create web socket connections using the URI template defined for the associated Endpoint.\nClass WsContextListener; // In normal usage, this ServletContextListener does not need to be explicitly configured as the WsSci performs all the necessary bootstrap and installs this listener in the ServletContext.\nClass WsFilter; // Handles the initial HTTP connection for WebSocket connections.\nClass WsFrameServer;\nClass WsHandshakeRequest; // Represents the request that this session was opened under.\nClass WsHttpUpgradeHandler; // Servlet 3.1 HTTP upgrade handler for WebSocket connections.\nClass WsRemoteEndpointImplServer; // This is the server side RemoteEndpoint implementation - i.e. what the server uses to send data to the client.\nClass WsSci; // Registers an interest in any class that is annotated with ServerEndpoint so that Endpoint can be published via the WebSocket server.\nClass WsServerContainer; // Provides a per class loader (i.e. per web application) instance of a ServerContainer.\nClass WsSessionListener;\nClass WsWriteTimeout; // Provides timeouts for asynchronous web socket writes.\n", "des": "Server-side specific implementation classes."}
{"index": 2630, "repo": "shiro-web-2.0.0-alpha-2", "code": "package mgt;\n\npublic class CookieRememberMeManager extends org.apache.shiro.mgt.AbstractRememberMeManager; // Remembers a Subject's identity by saving the Subject's principals to a Cookie for later retrieval.\npublic class DefaultWebSecurityManager extends org.apache.shiro.mgt.DefaultSecurityManager implements WebSecurityManager; // Default WebSecurityManager implementation used in web-based applications or any application that requires HTTP connectivity (SOAP, http remoting, etc.).\npublic class DefaultWebSessionStorageEvaluator extends org.apache.shiro.mgt.DefaultSessionStorageEvaluator; // A web-specific SessionStorageEvaluator that performs the same logic as the parent class DefaultSessionStorageEvaluator but additionally checks for a request-specific flag that may enable or disable session access.\npublic class DefaultWebSubjectFactory extends org.apache.shiro.mgt.DefaultSubjectFactory; // A SubjectFactory implementation that creates WebDelegatingSubject instances.\npublic interface WebSecurityManager extends org.apache.shiro.mgt.SecurityManager; // This interface represents a SecurityManager implementation that can used in web-enabled applications.\n", "des": "Components supporting web-specific SecurityManager implementations."}
{"index": 349, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "package ja;\n\npackage ja.dict; // Kuromoji dictionary implementation.\npackage ja.tokenattributes; // Additional Kuromoji-specific Attributes for text analysis.\npackage ja.util; // Kuromoji utility classes.\nClass GraphvizFormatter; // Outputs the dot (graphviz) string for the viterbi lattice.\nClass JapaneseAnalyzer; // Analyzer for Japanese that uses morphological analysis.\nClass JapaneseBaseFormFilter; // Replaces term text with the BaseFormAttribute.\nClass JapaneseBaseFormFilterFactory; // Factory for JapaneseBaseFormFilter.\nClass JapaneseIterationMarkCharFilter; // Normalizes Japanese horizontal iteration marks (odoriji) to their expanded form.\nClass JapaneseIterationMarkCharFilterFactory; // Factory for JapaneseIterationMarkCharFilter.\nClass JapaneseKatakanaStemFilter; // A TokenFilter that normalizes common katakana spelling variations ending in a long sound character by removing this character (U+30FC).\nClass JapaneseKatakanaStemFilterFactory; // Factory for JapaneseKatakanaStemFilter.\nClass JapaneseNumberFilter; // A TokenFilter that normalizes Japanese numbers (kansūji) to regular Arabic decimal numbers in half-width characters.\nClass JapaneseNumberFilter.NumberBuffer; // Buffer that holds a Japanese number string and a position index used as a parsed-to marker\nClass JapaneseNumberFilterFactory; // Factory for JapaneseNumberFilter.\nClass JapanesePartOfSpeechStopFilter; // Removes tokens that match a set of part-of-speech tags.\nClass JapanesePartOfSpeechStopFilterFactory; // Factory for JapanesePartOfSpeechStopFilter.\nClass JapaneseReadingFormFilter; // A TokenFilter that replaces the term attribute with the reading of a token in either katakana or romaji form.\nClass JapaneseReadingFormFilterFactory; // Factory for JapaneseReadingFormFilter.\nClass JapaneseTokenizer; // Tokenizer for Japanese that uses morphological analysis.\nClass JapaneseTokenizerFactory; // Factory for JapaneseTokenizer.\nClass Token; // Analyzed token with morphological data from its dictionary.\n", "des": "Analyzer for Japanese."}
{"index": 3893, "repo": "solr-solrj-9.3.0", "code": "package json;\n\nClass BucketBasedJsonFacet; // Represents the top-level response for a bucket-based JSON facet (i.e.\nClass BucketJsonFacet; // Represents an individual bucket result of a \"term\" or \"range\" facet.\nClass HeatmapJsonFacet; // Represents the result of a \"heatmap\" JSON facet.\nClass NestableJsonFacet; // Represents the response to a \"query\" JSON facet.\n", "des": "Allows parsing of JSON query/faceting API responses"}
{"index": 312, "repo": "commons-geometry-enclosing-1.0-beta1", "code": "package enclosing;\n\nInterface Encloser<P extends Point<P>>; // Interface for algorithms computing enclosing balls.\nInterface SupportBallGenerator<P extends Point<P>>; // Interface for generating balls based on support points.\nClass EnclosingBall<P extends Point<P>>; // This class represents a ball enclosing some points.\nClass WelzlEncloser<P extends Point<P>>; // Class implementing Emo Welzl's algorithm to find the smallest enclosing ball in linear time.\n", "des": "This package provides interfaces and classes related to the smallest enclosing ball problem."}
{"index": 324, "repo": "kafka-clients-3.5.0", "code": "package header;\n\nInterface Header;\nInterface Headers;\n", "des": "Provides API for application-defined metadata attached to Kafka records."}
{"index": 1864, "repo": "spring-test-6.0.11", "code": "package result;\n\npublic class ContentResultMatchers extends Object; // Factory for response content assertions.\npublic class CookieResultMatchers extends Object; // Factory for response cookie assertions.\npublic class FlashAttributeResultMatchers extends Object; // Factory for \"output\" flash attribute assertions.\npublic class HandlerResultMatchers extends Object; // Factory for assertions on the selected handler or handler method.\npublic class HeaderResultMatchers extends Object; // Factory for response header assertions.\npublic class JsonPathResultMatchers extends Object; // Factory for assertions on the response content using JsonPath expressions.\npublic abstract class MockMvcResultHandlers extends Object; // Static factory methods for ResultHandler-based result actions.\npublic abstract class MockMvcResultMatchers extends Object; // Static factory methods for ResultMatcher-based result actions.\npublic class ModelResultMatchers extends Object; // Factory for assertions on the model.\npublic class PrintingResultHandler extends Object implements ResultHandler; // Result handler that prints MvcResult details to a given output stream — for example: System.out, System.err, a custom java.io.PrintWriter, etc.\nprotected static interface PrintingResultHandler.ResultValuePrinter; // A contract for how to actually write result information.\npublic class RequestResultMatchers extends Object; // Factory for assertions on the request.\npublic class StatusResultMatchers extends Object; // Factory for assertions on the response status.\npublic class ViewResultMatchers extends Object; // Factory for assertions on the selected view.\npublic class XpathResultMatchers extends Object; // Factory for assertions on the response content using XPath expressions.\n", "des": "Contains built-in ResultMatcher and ResultHandler implementations."}
{"index": 1267, "repo": "spring-core-6.0.11", "code": "package util;\n\npublic abstract class ParallelSorter extends Object; // For the efficient sorting of multiple arrays in parallel.\npublic static class ParallelSorter.Generator extends AbstractClassGenerator;\npublic abstract class StringSwitcher extends Object; // This class implements a simple String → int mapping for a fixed set of keys.\npublic static class StringSwitcher.Generator extends AbstractClassGenerator;\n", "des": "Spring's repackaging of the CGLIB util package (for internal use only)."}
{"index": 3197, "repo": "tomcat-api-10.1", "code": "package file;\n\nInterface ConfigurationSource; // Abstracts configuration file storage.\nClass ConfigFileLoader; // This class is used to obtain InputStreams for configuration files from a given location String.\nClass ConfigurationSource.Resource; // Represents a resource: a stream to the resource associated with its URI.\nClass Matcher; // This is a utility class to match file globs.\n", "des": "This package contains utility classes for file handling."}
{"index": 3422, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface AfterTransactionCompletionProcess; // Contract representing some process that needs to occur during after transaction completion.\nInterface BeforeTransactionCompletionProcess; // Contract representing some process that needs to occur during before transaction completion.\nInterface Executable; // An operation which may be scheduled for later execution.\n", "des": "Defines SPI hooks into the ActionQueue."}
{"index": 89, "repo": "ignite-core-2.15.0", "code": "package discovery;\n\npackage discovery.isolated; // Contains implementation of special \"isolated\" mode for single-node cluster.\npackage discovery.tcp; // Contains default TCP/IP implementation for discovery SPI.\nInterface DiscoveryDataBag.GridDiscoveryData; // Facade interface representing DiscoveryDataBag object with discovery data collected in the grid.\nInterface DiscoveryDataBag.JoiningNodeDiscoveryData; // Facade interface representing DiscoveryDataBag object with discovery data from joining node.\nInterface DiscoveryMetricsProvider; // Provides metrics to discovery SPI.\nInterface DiscoverySpi; // Grid discovery SPI allows to discover remote nodes in grid.\nInterface DiscoverySpiCustomMessage; // Message to send across ring.\nInterface DiscoverySpiDataExchange; // Handler for initial data exchange between Ignite nodes.\nInterface DiscoverySpiListener; // Listener for grid node discovery events.\nInterface DiscoverySpiMBean; // Generic MBean interface to monitor DiscoverySpi subsystem.\nInterface DiscoverySpiNodeAuthenticator; // Node authenticator.\nInterface IgniteDiscoveryThread; // Marker interface for discovery thread on cluster server node.\nClass DiscoveryDataBag; // Provides interface for GridComponent to collect and exchange discovery data both on joining node and on cluster nodes.\nClass DiscoveryNotification; // Discovery notification object.\nAnnotation Type DiscoverySpiHistorySupport; // This annotation is for all implementations of DiscoverySpi that support topology snapshots history.\nAnnotation Type DiscoverySpiMutableCustomMessageSupport; // This annotation is for all implementations of DiscoverySpi that support topology mutable DiscoverySpiCustomMessages.\nAnnotation Type DiscoverySpiOrderSupport; // This annotation is for all implementations of DiscoverySpi that support proper node ordering.\n", "des": "Contains APIs for topology manager SPI."}
{"index": 992, "repo": "spring-ws-3.0.10.RELEASE", "code": "package server;\n\nInterface RequestCreator; // Creates request messages.\nInterface ResponseActions; // Allows for setting up expectation about response messages.\nInterface ResponseMatcher; // Defines the contract for matching response messages to expectations.\nInterface ResponseXPathExpectations; // Allows for setting up expectations on XPath expressions.\nClass MockWebServiceClient; // Main entry point for server-side Web service testing.\nClass RequestCreators; // Factory methods for RequestCreator classes.\nClass ResponseMatchers; // Factory methods for ResponseMatcher classes.\n", "des": "Provides a testing framework for server-side Web service testing."}
{"index": 1283, "repo": "spring-core-6.0.11", "code": "package style;\n\npublic class DefaultToStringStyler extends Object implements ToStringStyler; // Spring's default toString() styler.\npublic class DefaultValueStyler extends Object implements ValueStyler; // Converts objects to String form, generally for debugging purposes, using Spring's toString styling conventions.\npublic class SimpleValueStyler extends DefaultValueStyler; // ValueStyler that converts objects to String form — generally for debugging purposes — using simple styling conventions that mimic the toString() styling conventions for standard JDK implementations of collections, maps, and arrays.\npublic abstract class StylerUtils extends Object; // Simple utility class to allow for convenient access to value styling logic, mainly to support descriptive logging messages.\npublic class ToStringCreator extends Object; // Utility class that builds pretty-printing toString() methods with pluggable styling conventions.\npublic interface ToStringStyler; // A strategy interface for pretty-printing toString() methods.\npublic interface ValueStyler; // Strategy that encapsulates value String styling algorithms according to Spring conventions.\n", "des": "Support for styling values as Strings, with ToStringCreator as central class."}
{"index": 1446, "repo": "spring-data-redis-3.1.2", "code": "package jedis;\n\npublic interface JedisClientConfiguration; // Redis client configuration for jedis.\npublic static class JedisClientConfiguration.DefaultJedisClientConfigurationBuilder extends Object implements JedisClientConfiguration.JedisClientConfigurationBuilder, JedisClientConfiguration.JedisPoolingClientConfigurationBuilder, JedisClientConfiguration.JedisSslClientConfigurationBuilder; // Default JedisClientConfiguration.JedisClientConfigurationBuilder implementation to build an immutable JedisClientConfiguration.\npublic static interface JedisClientConfiguration.JedisClientConfigurationBuilder; // Builder for JedisClientConfiguration.\npublic static interface JedisClientConfiguration.JedisPoolingClientConfigurationBuilder; // Builder for Pooling-related JedisClientConfiguration.\npublic static interface JedisClientConfiguration.JedisSslClientConfigurationBuilder; // Builder for SSL-related JedisClientConfiguration.\npublic class JedisClusterConnection extends Object implements RedisClusterConnection; // RedisClusterConnection implementation on top of JedisCluster. Uses the native JedisCluster api where possible and falls back to direct node communication using Jedis where needed.\nprotected static interface JedisClusterConnection.JedisClusterCommandCallback<T> extends ClusterCommandExecutor.ClusterCommandCallback<redis.clients.jedis.Jedis,T>; // Jedis specific ClusterCommandExecutor.ClusterCommandCallback.\npublic static class JedisClusterConnection.JedisClusterTopologyProvider extends Object implements ClusterTopologyProvider; // Jedis specific implementation of ClusterTopologyProvider.\nprotected static interface JedisClusterConnection.JedisMultiKeyClusterCommandCallback<T> extends ClusterCommandExecutor.MultiKeyClusterCommandCallback<redis.clients.jedis.Jedis,T>; // Jedis specific ClusterCommandExecutor.MultiKeyClusterCommandCallback.\npublic class JedisConnection extends AbstractRedisConnection; // RedisConnection implementation on top of Jedis library.\npublic class JedisConnectionFactory extends Object implements InitializingBean, DisposableBean, RedisConnectionFactory; // Connection factory creating Jedis based connections.\npublic class JedisExceptionConverter extends Object implements Converter<Exception,DataAccessException>; // Converts Exceptions thrown from Jedis to DataAccessExceptions\npublic class JedisScriptReturnConverter extends Object implements Converter<Object,Object>; // Converts the value returned by Jedis script eval to the expected ReturnType\npublic class JedisSentinelConnection extends Object implements RedisSentinelConnection;\n", "des": "Connection package for Jedis library."}
{"index": 1539, "repo": "spring-context-6.0.11", "code": "package support;\n\npublic class SimpleJndiBeanFactory extends JndiLocatorSupport implements org.springframework.beans.factory.BeanFactory; // Simple JNDI-based implementation of Spring's BeanFactory interface.\n", "des": "Support classes for JNDI usage, including a JNDI-based BeanFactory implementation."}
{"index": 247, "repo": "nutch-2.4", "code": "package sftp;\n\nClass Sftp; // This class uses the Jsch package to fetch content using the Sftp protocol.\n", "des": "Protocol plugin which supports retrieving documents via the sftp protocol."}
{"index": 3210, "repo": "tomcat-servletapi-10.1", "code": "package servlet;\n\npackage servlet.http; // The jakarta.servlet.http package contains a number of classes and interfaces that describe and define the contracts between a servlet class running under the HTTP protocol and the runtime environment provided for an instance of such a class by a conforming servlet container.\nInterface AsyncContext; // Provides the context for asynchronous request handling\nInterface AsyncListener; // Listener for events associated with an AsyncContext.\nInterface Filter; // A filter is an object that performs filtering tasks on either the request to a resource (a servlet or static content), or on the response from a resource, or both.\nInterface FilterChain; // A FilterChain is an object provided by the servlet container to the developer giving a view into the invocation chain of a filtered request for a resource.\nInterface FilterConfig; // A filter configuration object used by a servlet container to pass information to a filter during initialization.\nInterface FilterRegistration; // Interface through which a Filter may be further configured.\nInterface FilterRegistration.Dynamic; // Interface through which a Filter registered via one of the addFilter methods on ServletContext may be further configured.\nInterface ReadListener; // Receives notification of read events when using non-blocking IO.\nInterface Registration; // Common interface for the registration of Filters and Servlets.\nInterface Registration.Dynamic; // Interface through which a Servlet or Filter registered via one of the addServlet or addFilter methods, respectively, on ServletContext may be further configured.\nInterface RequestDispatcher; // Defines an object that receives requests from the client and sends them to any resource (such as a servlet, HTML file, or JSP file) on the server.\nInterface Servlet; // Defines methods that all servlets must implement.\nInterface ServletConfig; // A servlet configuration object used by a servlet container to pass information to a servlet during initialization.\nInterface ServletConnection; // Provides information about the connection made to the Servlet container.\nInterface ServletContainerInitializer; // ServletContainerInitializers (SCIs) are registered via an entry in the file META-INF/services/jakarta.servlet.ServletContainerInitializer that must be included in the JAR file that contains the SCI implementation.\nInterface ServletContext; // Defines a set of methods that a servlet uses to communicate with its servlet container, for example, to get the MIME type of a file, dispatch requests, or write to a log file.\n", "des": "The jakarta.servlet package contains a number of classes and interfaces that describe and define the contracts between a servlet class and the runtime environment provided for an instance of such a class by a conforming servlet container."}
{"index": 1189, "repo": "commons-math3-3.6.1", "code": "package scalar;\n\npackage scalar.gradient; // This package provides optimization algorithms that require derivatives.\npackage scalar.noderiv; // This package provides optimization algorithms that do not require derivatives.\nClass GradientMultivariateOptimizer; // Base class for implementing optimizers for multivariate scalar differentiable functions.\nClass LeastSquaresConverter; // This class converts vectorial objective functions to scalar objective functions when the goal is to minimize them.\nClass LineSearch; // Class for finding the minimum of the objective function along a given direction.\nClass MultiStartMultivariateOptimizer; // Multi-start optimizer.\nClass MultivariateFunctionMappingAdapter; // Adapter for mapping bounded MultivariateFunction to unbounded ones.\nClass MultivariateFunctionPenaltyAdapter; // Adapter extending bounded MultivariateFunction to an unbouded domain using a penalty function.\nClass MultivariateOptimizer; // Base class for a multivariate scalar function optimizer.\nClass ObjectiveFunction; // Scalar function to be optimized.\nClass ObjectiveFunctionGradient; // Gradient of the scalar function to be optimized.\nEnum GoalType; // Goal type for an optimization problem (minimization or maximization of a scalar function.\n", "des": "Algorithms for optimizing a scalar function."}
{"index": 56, "repo": "ignite-core-2.15.0", "code": "package jdbc;\n\npackage jdbc.dialect; // Contains SQL dialects for different RDBMS.\nInterface JdbcTypeHasher; // API for implementing custom hashing logic for binary objects on server side.\nInterface JdbcTypesTransformer; // API for implementing custom mapping logic for loaded from store data.\nClass CacheAbstractJdbcStore<K,V>; // Implementation of CacheStore backed by JDBC.\nClass CacheAbstractJdbcStore.EntryMapping; // Entry mapping description.\nClass CacheJdbcBlobStore<K,V>; // CacheStore implementation backed by JDBC.\nClass CacheJdbcBlobStoreFactory<K,V>; // Factory implementation for CacheJdbcBlobStore.\nClass CacheJdbcPojoStore<K,V>; // Implementation of CacheStore backed by JDBC and POJO via reflection.\nClass CacheJdbcPojoStoreFactory<K,V>; // Factory implementation for CacheJdbcPojoStore.\nClass CacheJdbcStoreSessionListener; // Cache store session listener based on JDBC connection.\nClass JdbcType; // Description for type that could be stored into database by store.\nClass JdbcTypeDefaultHasher; // Default implementation of JdbcTypeHasher.\nClass JdbcTypeField; // Description of how field declared in database and in cache.\nClass JdbcTypesDefaultTransformer; // Default implementation of JdbcTypesTransformer.\nEnum CacheAbstractJdbcStore.TypeKind; // Type kind.\n", "des": "Contains reference JDBC-based cache store implementation."}
{"index": 3159, "repo": "tika-core-2.8.0", "code": "package metadata;\n\nInterface AccessPermissions; // Until we can find a common standard, we'll use these options.\nInterface ClimateForcast; // Met keys from NCAR CCSM files in the Climate Forecast Convention.\nInterface CreativeCommons; // A collection of Creative Commons properties names.\nInterface Database;\nInterface DublinCore; // A collection of Dublin Core metadata names.\nInterface Epub; // EPub properties collection.\nInterface ExternalProcess;\nInterface FileSystem; // A collection of metadata elements for file system level metadata\nInterface Font;\nInterface Geographic; // Geographic schema.\nInterface HTML;\nInterface HttpHeaders; // A collection of HTTP header names.\nInterface IPTC; // IPTC photo metadata schema.\nInterface MachineMetadata; // Metadata for describing machines, such as their architecture, type and endian-ness\nInterface Message; // A collection of Message related property names.\nInterface Office; // Office Document properties collection.\nInterface OfficeOpenXMLCore; // Core properties as defined in the Office Open XML specification part Two that are not in the DublinCore namespace.\nInterface OfficeOpenXMLExtended; // Extended properties as defined in the Office Open XML specification part Four.\nInterface PagedText; // XMP Paged-text schema.\nInterface PDF; // PDF properties collection.\nInterface Photoshop; // XMP Photoshop metadata schema.\nInterface QuattroPro; // QuattroPro properties collection.\nInterface Rendering;\nInterface RTFMetadata;\nInterface TIFF; // XMP Exif TIFF schema.\nInterface TikaCoreProperties; // Contains a core set of basic Tika metadata properties, which all parsers will attempt to supply (where the file format permits).\nInterface TikaMimeKeys; // A collection of Tika metadata keys used in Mime Type resolution\nInterface TikaPagedText; // Metadata properties for paged text, metadata appropriate for an individual page (useful for embedded document handlers called on individual pages).\nInterface WARC;\nInterface WordPerfect; // WordPerfect properties collection.\nInterface XMP;\nInterface XMPDM; // XMP Dynamic Media schema.\nInterface XMPIdq;\nInterface XMPMM;\nInterface XMPRights; // XMP Rights management schema.\nClass MachineMetadata.Endian;\n", "des": "Multi-valued metadata container, and set of constant metadata fields."}
{"index": 149, "repo": "ignite-core-2.15.0", "code": "package processors;\n\npackage processors.affinity; // Data affinity processor.\npackage processors.cache; // This package contain cache-related processors & persistence implementation.\npackage processors.cacheobject; // Cache object processor.\npackage processors.closure; // TODO.\npackage processors.datastreamer; // Data streamer processor.\npackage processors.dr; // Data center replication processor.\npackage processors.failure; // Failure processor.\npackage processors.job; // TODO.\npackage processors.jobmetrics; // Job metrics.\npackage processors.port; // TODO.\npackage processors.resource; // TODO.\npackage processors.rest; // REST processor.\npackage processors.schedule; // TODO.\npackage processors.segmentation; // Segmentation processor.\npackage processors.session; // Session processing package to guarantee reuse of same session object on the same node.\npackage processors.task; // TODO.\npackage processors.timeout; // TODO.\nInterface GridProcessor; // Interface for all processors.\nClass GridProcessorAdapter; // Advanced parent adapter for all processor.\n", "des": "Package with Apache Ignite internal Processors."}
{"index": 3862, "repo": "lucene-core-9.7.0", "code": "package packed;\n\nInterface PackedInts.Decoder; // A decoder for packed integers.\nInterface PackedInts.Encoder; // An encoder for packed integers.\nInterface PackedInts.ReaderIterator; // Run-once iterator interface, to decode previously saved PackedInts.\nClass AbstractPagedMutable<T extends AbstractPagedMutable<T>>; // Base implementation for PagedMutable and PagedGrowableWriter.\nClass BlockPackedReaderIterator; // Reader for sequences of longs written with BlockPackedWriter.\nClass BlockPackedWriter; // A writer for large sequences of longs.\nClass DirectMonotonicReader; // Retrieves an instance previously written by DirectMonotonicWriter.\nClass DirectMonotonicReader.Meta; // In-memory metadata that needs to be kept around for DirectMonotonicReader to read data from disk.\nClass DirectMonotonicWriter; // Write monotonically-increasing sequences of integers.\nClass DirectReader; // Retrieves an instance previously written by DirectWriter\nClass DirectWriter; // Class for writing packed integers to be directly read from Directory.\nClass GrowableWriter; // Implements PackedInts.Mutable, but grows the bit count of the underlying packed ints on-demand.\nClass MonotonicBlockPackedReader; // Provides random access to a stream written with MonotonicBlockPackedWriter.\nClass MonotonicBlockPackedWriter; // A writer for large monotonically increasing sequences of positive longs.\nClass PackedDataInput; // A DataInput wrapper to read unaligned, variable-length packed integers.\nClass PackedDataOutput; // A DataOutput wrapper to write unaligned, variable-length packed integers.\nClass PackedInts; // Simplistic compression for array of unsigned long values.\nClass PackedInts.FormatAndBits; // Simple class that holds a format and a number of bits per value.\nClass PackedInts.Mutable; // A packed integer array that can be modified.\nClass PackedInts.NullReader; // A PackedInts.Reader which has all its values equal to 0 (bitsPerValue = 0).\nClass PackedInts.Reader; // A read-only random access array of positive integers.\nClass PackedInts.Writer; // A write-once Writer.\nClass PackedLongValues; // Utility class to compress integers into a LongValues instance.\n", "des": "Packed integer arrays and streams."}
{"index": 887, "repo": "cassandra-all-4.1.2", "code": "package hadoop;\n\nClass ColumnFamilySplit;\nClass ConfigHelper;\nClass HadoopCompat; // Utility methods to allow applications to deal with inconsistencies between MapReduce Context Objects API between Hadoop 1.x and 2.x.\nClass ReporterWrapper; // A reporter that works with both mapred and mapreduce APIs.\n", "des": "This package was deprecated."}
{"index": 1958, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package mongo;\n\n@AutoConfiguration @ConditionalOnClass(com.mongodb.client.MongoClient.class) @EnableConfigurationProperties(MongoProperties.class) @ConditionalOnMissingBean(type=\"org.springframework.data.mongodb.MongoDatabaseFactory\") public class MongoAutoConfiguration extends Object; // Auto-configuration for Mongo.\npublic class MongoClientFactory extends MongoClientFactorySupport<com.mongodb.client.MongoClient>; // A factory for a blocking MongoClient.\npublic abstract class MongoClientFactorySupport<T> extends Object; // Base class for setup that is common to MongoDB client factories.\n@FunctionalInterface public interface MongoClientSettingsBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the MongoClientSettings through a MongoClientSettings.Builder whilst retaining default auto-configuration.\npublic interface MongoConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a MongoDB service.\npublic static interface MongoConnectionDetails.GridFs; // GridFS configuration.\n@ConfigurationProperties(prefix=\"spring.data.mongodb\") public class MongoProperties extends Object; // Configuration properties for Mongo.\npublic static class MongoProperties.Gridfs extends Object;\npublic static class MongoProperties.Ssl extends Object;\n@Deprecated(since=\"3.1.0\", forRemoval=true) public class MongoPropertiesClientSettingsBuilderCustomizer extends Object implements MongoClientSettingsBuilderCustomizer, org.springframework.core.Ordered;\n@AutoConfiguration @ConditionalOnClass({com.mongodb.reactivestreams.client.MongoClient.class,reactor.core.publisher.Flux.class}) @EnableConfigurationProperties(MongoProperties.class) public class MongoReactiveAutoConfiguration extends Object; // Auto-configuration for Reactive Mongo.\npublic class PropertiesMongoConnectionDetails extends Object implements MongoConnectionDetails; // Adapts MongoProperties to MongoConnectionDetails.\npublic class ReactiveMongoClientFactory extends MongoClientFactorySupport<com.mongodb.reactivestreams.client.MongoClient>; // A factory for a reactive MongoClient.\npublic class StandardMongoClientSettingsBuilderCustomizer extends Object implements MongoClientSettingsBuilderCustomizer, org.springframework.core.Ordered; // A MongoClientSettingsBuilderCustomizer that applies standard settings to a MongoClientSettings.\n", "des": "Auto-configuration for MongoDB."}
{"index": 1222, "repo": "commons-text-1.10.0", "code": "package numbers;\n\nClass DoubleFormat.Builder; // Builds configured format functions for standard double format types.\nEnum DoubleFormat; // Enum containing standard double format types with methods to produce configured formatter instances.\n", "des": "Provides algorithms for converting numbers to strings."}
{"index": 3016, "repo": "spring-web-6.0.11", "code": "package observation;\n\npublic class DefaultServerRequestObservationConvention extends Object implements ServerRequestObservationConvention; // Default ServerRequestObservationConvention.\npublic enum ServerHttpObservationDocumentation extends Enum<ServerHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for the HTTP server observations for Servlet-based web applications.\npublic static enum ServerHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ServerHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic class ServerRequestObservationContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<HttpServletRequest,HttpServletResponse>; // Context that holds information for metadata collection regarding Servlet HTTP requests observations.\npublic interface ServerRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ServerRequestObservationContext>; // Interface for an ObservationConvention for Servlet HTTP requests.\n", "des": "Instrumentation for observing HTTP server applications."}
{"index": 1568, "repo": "spring-restdocs-core-3.0.0", "code": "package preprocess;\n\npublic interface ContentModifier; // A ContentModifier modifies the content of an OperationRequest or OperationResponse during the preprocessing that is performed prior to documentation generation.\npublic class ContentModifyingOperationPreprocessor extends Object implements OperationPreprocessor; // An OperationPreprocessor that applies a ContentModifier to the content of the request or response.\npublic class HeadersModifyingOperationPreprocessor extends Object implements OperationPreprocessor; // An OperationPreprocessor that modifies a request or response by adding, setting, or removing headers.\npublic interface OperationPreprocessor; // An OperationPreprocessor processes the OperationRequest and OperationResponse of an Operation prior to it being documented.\npublic abstract class OperationPreprocessorAdapter extends Object implements OperationPreprocessor; // An implementation of OperationPreprocessor that returns the request and response as-is.\npublic interface OperationRequestPreprocessor; // An OperationRequestPreprocessor is used to modify an OperationRequest prior to it being documented.\npublic interface OperationResponsePreprocessor; // An OperationResponsePreprocessor is used to modify an OperationResponse prior to it being documented.\npublic final class Preprocessors extends Object; // Static factory methods for creating OperationPreprocessors that can be applied to an Operation's request or response before it is documented.\npublic class PrettyPrintingContentModifier extends Object implements ContentModifier; // A ContentModifier that modifies the content by pretty printing it.\npublic class UriModifyingOperationPreprocessor extends Object implements OperationPreprocessor; // An OperationPreprocessor that modifies URIs in the request and in the response by changing one or more of their host, scheme, and port.\n", "des": "Support for preprocessing an operation prior to it being documented."}
{"index": 1252, "repo": "spring-core-6.0.11", "code": "package generate;\n\npublic final class AccessControl extends Object; // Determine the access control of a Member or type signature.\npublic static enum AccessControl.Visibility extends Enum<AccessControl.Visibility>; // Access visibility types as determined by the modifiers on a Member or ResolvableType.\npublic final class ClassNameGenerator extends Object; // Generate unique class names based on a target ClassName and a feature name.\npublic class DefaultGenerationContext extends Object implements GenerationContext; // Default GenerationContext implementation.\npublic class DefaultMethodReference extends Object implements MethodReference; // Default MethodReference implementation based on a MethodSpec.\npublic class FileSystemGeneratedFiles extends Object implements GeneratedFiles; // GeneratedFiles implementation that stores generated files using a FileSystem.\npublic final class GeneratedClass extends Object; // A single generated class.\npublic class GeneratedClasses extends Object; // A managed collection of generated classes.\npublic interface GeneratedFiles; // Interface that can be used to add source, resource, or class files generated during ahead-of-time processing.\npublic static enum GeneratedFiles.Kind extends Enum<GeneratedFiles.Kind>; // The various kinds of generated files that are supported.\npublic final class GeneratedMethod extends Object; // A generated method.\npublic class GeneratedMethods extends Object; // A managed collection of generated methods.\npublic final class GeneratedTypeReference extends AbstractTypeReference; // A TypeReference for a generated type.\npublic interface GenerationContext; // Central interface used for code generation.\npublic class InMemoryGeneratedFiles extends Object implements GeneratedFiles; // GeneratedFiles implementation that keeps generated files in-memory.\npublic interface MethodReference; // A reference to a method with convenient code generation for referencing, or invoking it.\npublic static interface MethodReference.ArgumentCodeGenerator; // Strategy for generating code for arguments based on their type.\n", "des": "Support classes for components that contribute generated code equivalent to a runtime behavior."}
{"index": 3336, "repo": "opencms-core-15.0", "code": "package search;\n\nClass CmsSearchReplaceSettings; // Settings bean for the dialog.\nClass CmsSearchReplaceThread; // Searches in sources.\nClass CmsSourceSearchApp; // The source search app.\nClass CmsSourceSearchAppConfiguration; // The source search app configuration.\nClass CmsSourceSearchForm; // The source search form.\nEnum CmsSourceSearchForm.SearchType; // The available search types.\n", "des": "Contains classes of the source search app."}
{"index": 408, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package jdbc;\n\nClass JdbcUsersConnectionRepository; // UsersConnectionRepository that uses the JDBC API to persist connection data to a relational database.\n", "des": "JDBC-based ConnectionRepository implementation."}
{"index": 1859, "repo": "spring-test-6.0.11", "code": "package servlet;\n\npackage servlet.client; // Support for testing Spring MVC applications via WebTestClient with MockMvc for server request handling.\npackage servlet.htmlunit; // Server-side support for testing Spring MVC applications with MockMvc and HtmlUnit.\npackage servlet.request; // Contains built-in RequestBuilder implementations.\npackage servlet.result; // Contains built-in ResultMatcher and ResultHandler implementations.\npackage servlet.setup; // Contains built-in MockMvcBuilder implementations.\n@FunctionalInterface public interface DispatcherServletCustomizer; // Strategy interface for customizing DispatcherServlet instances that are managed by MockMvc.\npublic final class MockMvc extends Object; // Main entry point for server-side Spring MVC test support.\npublic interface MockMvcBuilder; // Builds a MockMvc instance.\npublic abstract class MockMvcBuilderSupport extends Object; // Base class for MockMvc builder implementations, providing the capability to create a MockMvc instance.\npublic interface MvcResult; // Provides access to the result of an executed request.\npublic interface RequestBuilder; // Builds a MockHttpServletRequest.\npublic interface ResultActions; // Allows applying actions, such as expectations, on the result of an executed request.\n@FunctionalInterface public interface ResultHandler; // A ResultHandler performs a generic action on the result of an executed request — for example, printing debug information.\n@FunctionalInterface public interface ResultMatcher; // A ResultMatcher matches the result of an executed request against some expectation.\npublic interface SmartRequestBuilder extends RequestBuilder; // Extended variant of a RequestBuilder that applies its org.springframework.test.web.servlet.request.RequestPostProcessors as a separate step from the RequestBuilder.buildRequest(jakarta.servlet.ServletContext) method.\n", "des": "Contains server-side support for testing Spring MVC applications."}
{"index": 3704, "repo": "solr-core-9.3.0", "code": "package similarities;\n\nClass BM25SimilarityFactory; // Factory for BM25Similarity.\nClass BooleanSimilarityFactory; // Factory for BooleanSimilarity\nClass ClassicSimilarityFactory; // Factory for ClassicSimilarity\nClass DFISimilarityFactory; // Factory for DFISimilarity\nClass DFRSimilarityFactory; // Factory for DFRSimilarity\nClass IBSimilarityFactory; // Factory for IBSimilarity\nClass LMDirichletSimilarityFactory; // Factory for LMDirichletSimilarity\nClass LMJelinekMercerSimilarityFactory; // Factory for LMJelinekMercerSimilarity\nClass SchemaSimilarityFactory; // SimilarityFactory that returns a global PerFieldSimilarityWrapper that delegates to the field type, if it's configured.\nClass SweetSpotSimilarityFactory; // Factory for SweetSpotSimilarity.\n", "des": "Factories for various built-in Lucene ranking models."}
{"index": 1633, "repo": "spring-kafka-3.0.9", "code": "package streams;\n\npackage streams.messaging; // Package for classes related to spring-messaging with Kafka Streams.\n@Deprecated public class HeaderEnricher<K,V> extends Object implements org.apache.kafka.streams.kstream.Transformer<K,V,org.apache.kafka.streams.KeyValue<K,V>>;\npublic static final class HeaderEnricher.Container<K,V> extends Object; // Container object for SpEL evaluation.\npublic class HeaderEnricherProcessor<K,V> extends org.apache.kafka.streams.processor.api.ContextualProcessor<K,V,K,V>; // Manipulate the headers.\npublic static final class HeaderEnricherProcessor.Container<K,V> extends Object; // Container object for SpEL evaluation.\npublic class KafkaStreamsMicrometerListener extends Object implements StreamsBuilderFactoryBean.Listener; // Creates a KafkaStreamsMetrics for the KafkaStreams.\npublic class RecoveringDeserializationExceptionHandler extends Object implements org.apache.kafka.streams.errors.DeserializationExceptionHandler; // A DeserializationExceptionHandler that calls a ConsumerRecordRecoverer.\n", "des": "Package for classes related to Kafka Streams."}
{"index": 1466, "repo": "spring-data-redis-3.1.2", "code": "package serializer;\n\npublic class GenericJackson2JsonRedisSerializer extends Object implements RedisSerializer<Object>; // Generic Jackson 2-based RedisSerializer that maps objects to JSON using dynamic typing.\npublic class GenericToStringSerializer<T> extends Object implements RedisSerializer<T>, BeanFactoryAware; // Generic String to byte[] (and back) serializer.\npublic class Jackson2JsonRedisSerializer<T> extends Object implements RedisSerializer<T>; // RedisSerializer that can read and write JSON using Jackson's and Jackson Databind ObjectMapper.\n@FunctionalInterface public interface JacksonObjectReader; // Defines the contract for Object Mapping readers.\n@FunctionalInterface public interface JacksonObjectWriter; // Defines the contract for Object Mapping writers.\npublic class JdkSerializationRedisSerializer extends Object implements RedisSerializer<Object>; // Java Serialization Redis serializer.\npublic class OxmSerializer extends Object implements InitializingBean, RedisSerializer<Object>; // Serializer adapter on top of Spring's O/X Mapping.\n@FunctionalInterface public interface RedisElementReader<T>; // Strategy interface that specifies a deserializer that can deserialize a binary element representation stored in Redis into an object.\n@FunctionalInterface public interface RedisElementWriter<T>; // Strategy interface that specifies a serializer that can serialize an element to its binary representation to be used as Redis protocol payload.\npublic interface RedisSerializationContext<K,V>; // Serialization context for reactive use.\npublic static interface RedisSerializationContext.RedisSerializationContextBuilder<K,V>; // Builder for RedisSerializationContext.\npublic static interface RedisSerializationContext.SerializationPair<T>; // Typed serialization tuple.\npublic interface RedisSerializer<T>; // Basic interface serialization and deserialization of Objects to byte arrays (binary data).\npublic class SerializationException extends NestedRuntimeException; // Generic exception indicating a serialization/deserialization error.\npublic abstract class SerializationUtils extends Object; // Utility class with various serialization-related methods.\npublic class StringRedisSerializer extends Object implements RedisSerializer<String>; // Simple String to byte[] (and back) serializer.\n", "des": "Serialization/Deserialization package for converting Object to (and from) binary data."}
{"index": 2046, "repo": "spring-boot-loader-3.1.1", "code": "package loader;\n\npackage loader.archive; // Abstraction over logical Archives be they backed by a JAR file or unpacked into a directory.\npackage loader.data; // Classes and interfaces to allow random access to a block of data.\npackage loader.jar; // Support for loading and manipulating JAR/WAR files.\npackage loader.jarmode; // Support for launching the JAR using jarmode.\npackage loader.util; // Utilities used by Spring Boot's JAR loading.\npublic abstract class ExecutableArchiveLauncher extends Launcher; // Base class for executable archive Launchers.\npublic class JarLauncher extends ExecutableArchiveLauncher; // Launcher for JAR based archives.\npublic class LaunchedURLClassLoader extends URLClassLoader; // ClassLoader used by the Launcher.\npublic abstract class Launcher extends Object; // Base class for launchers that can start an application with a fully configured classpath backed by one or more Archives.\npublic class MainMethodRunner extends Object; // Utility class that is used by Launchers to call a main method.\npublic class PropertiesLauncher extends Launcher; // Launcher for archives with user-configured classpath and main class through a properties file.\npublic class WarLauncher extends ExecutableArchiveLauncher; // Launcher for WAR based archives.\n", "des": "System that allows self-contained JAR/WAR archives to be launched using java -jar."}
{"index": 1619, "repo": "spring-data-neo4j-7.1.2", "code": "package types;\n\n@API(status=STABLE, since=\"6.0\") public final class CartesianPoint2d extends Object;\n@API(status=STABLE, since=\"6.0\") public final class CartesianPoint3d extends Object;\npublic final class Coordinate extends Object;\n@API(status=STABLE, since=\"6.0\") public final class GeographicPoint2d extends Object;\n@API(status=STABLE, since=\"6.0\") public final class GeographicPoint3d extends Object;\n@API(status=STABLE, since=\"6.0\") public sealed interface Neo4jPoint; // A dedicated Neo4j point, that is aware of its nature, either being geographic or cartesian.\n@API(status=STABLE, since=\"6.0\") public final class PointBuilder extends Object;\n", "des": "Additional types provided by SDN."}
{"index": 1915, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package ldap;\n\n@AutoConfiguration @ConditionalOnClass({javax.naming.ldap.LdapContext.class,org.springframework.data.ldap.repository.LdapRepository.class}) @ConditionalOnProperty(prefix=\"spring.data.ldap.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.ldap.repository.support.LdapRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesRegistrar.class) public class LdapRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's LDAP Repositories.\n", "des": "Auto-configuration for Spring Data LDAP."}
{"index": 3791, "repo": "lucene-analysis-common-9.7.0", "code": "package hu;\n\nClass HungarianAnalyzer; // Analyzer for Hungarian.\nClass HungarianLightStemFilter; // A TokenFilter that applies HungarianLightStemmer to stem Hungarian words.\nClass HungarianLightStemFilterFactory; // Factory for HungarianLightStemFilter.\nClass HungarianLightStemmer; // Light Stemmer for Hungarian.\n", "des": "Analyzer for Hungarian."}
{"index": 1532, "repo": "spring-context-6.0.11", "code": "package annotation;\n\npublic class AnnotationJmxAttributeSource extends Object implements JmxAttributeSource, org.springframework.beans.factory.BeanFactoryAware; // Implementation of the JmxAttributeSource interface that reads annotations and exposes the corresponding attributes.\npublic class AnnotationMBeanExporter extends MBeanExporter; // Convenient subclass of Spring's standard MBeanExporter, activating annotation usage for JMX exposure of Spring beans: ManagedResource, ManagedAttribute, ManagedOperation, etc.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedAttribute; // Method-level annotation that indicates to expose a given bean property as a JMX attribute, corresponding to the ManagedAttribute.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedMetric; // Method-level annotation that indicates to expose a given bean property as a JMX attribute, with added descriptor properties to indicate that it is a metric.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented @Repeatable(ManagedNotifications.class) public @interface ManagedNotification; // Type-level annotation that indicates a JMX notification emitted by a bean.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface ManagedNotifications; // Type-level annotation used as a container for one or more @ManagedNotification declarations.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedOperation; // Method-level annotation that indicates to expose a given method as a JMX operation, corresponding to the ManagedOperation attribute.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Repeatable(ManagedOperationParameters.class) public @interface ManagedOperationParameter; // Method-level annotation used to provide metadata about operation parameters, corresponding to a ManagedOperationParameter attribute.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ManagedOperationParameters; // Method-level annotation used as a container for one or more @ManagedOperationParameter declarations.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface ManagedResource; // Class-level annotation that indicates to register instances of a class with a JMX server, corresponding to the ManagedResource attribute.\n", "des": "Annotations for MBean exposure."}
{"index": 3249, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Classes to handle client-side GWT-RPC services.\nClass CmsProjectBean; // A project bean.\nClass CmsPublishData; // A bean that contains both publish options and a map of projects.\nClass CmsPublishGroup; // A publish group.\nClass CmsPublishGroupList; // A class which represents a list of publish groups to display to the user for selection.\nClass CmsPublishListToken; // A bean which can be used to reconstruct a publish list.\nClass CmsPublishOptions; // Bean encapsulating all ADE publish options.\nClass CmsPublishResource; // A publish resource.\nClass CmsPublishResourceInfo; // A publish resource additional information bean.\nClass CmsWorkflow; // A bean which represents a possible workflow, containing an identifier, a user-readable name and a list of workflow actions.\nClass CmsWorkflowAction; // Work flow action information.\nClass CmsWorkflowActionParams; // Contains the data on which a workflow action should act (usually, a list of resources).\nClass CmsWorkflowResponse; // The result of a workflow action.\nEnum CmsPublishResourceInfo.Type; // Reason value constants, when resources can not be published.\n", "des": "Classes for the publish dialog which are used by both the client and the server."}
{"index": 2022, "repo": "spring-boot-devtools-3.1.1", "code": "package server;\n\npublic class HttpTunnelServer extends Object; // A server that can be used to tunnel TCP traffic over HTTP.\nprotected static class HttpTunnelServer.HttpConnection extends Object; // Encapsulates an HTTP request/response pair.\npublic class HttpTunnelServerHandler extends Object implements Handler; // Adapts a HttpTunnelServer to a Handler.\n@FunctionalInterface public interface PortProvider; // Strategy interface to provide access to a port (which may change if an existing connection is closed).\npublic class SocketTargetServerConnection extends Object implements TargetServerConnection; // Socket based TargetServerConnection.\npublic class StaticPortProvider extends Object implements PortProvider; // PortProvider for a static port that won't change.\n@FunctionalInterface public interface TargetServerConnection; // Manages the connection to the ultimate tunnel target server.\n", "des": "Server side TCP tunnel support."}
{"index": 2074, "repo": "spring-webmvc-6.0.11", "code": "package annotation;\n\npublic abstract class AbstractMappingJacksonResponseBodyAdvice extends Object implements ResponseBodyAdvice<Object>; // A convenient base class for ResponseBodyAdvice implementations that customize the response before JSON serialization with AbstractJackson2HttpMessageConverter's concrete subclasses.\npublic abstract class AbstractMessageConverterMethodArgumentResolver extends Object implements org.springframework.web.method.support.HandlerMethodArgumentResolver; // A base class for resolving method argument values by reading from the body of a request with HttpMessageConverters.\npublic abstract class AbstractMessageConverterMethodProcessor extends AbstractMessageConverterMethodArgumentResolver implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Extends AbstractMessageConverterMethodArgumentResolver with the ability to handle method return values by writing to the response with HttpMessageConverters.\npublic class AsyncTaskMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handles return values of type WebAsyncTask.\npublic class CallableMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handles return values of type Callable.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements org.springframework.web.method.support.HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class DeferredResultMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handler for return values of type DeferredResult, ListenableFuture, and CompletionStage.\npublic class ExceptionHandlerExceptionResolver extends AbstractHandlerMethodExceptionResolver implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // An AbstractHandlerMethodExceptionResolver that resolves exceptions through @ExceptionHandler methods.\npublic class ExtendedServletRequestDataBinder extends org.springframework.web.bind.ServletRequestDataBinder; // Subclass of ServletRequestDataBinder that adds URI template variables to the values used for data binding.\npublic class HttpEntityMethodProcessor extends AbstractMessageConverterMethodProcessor; // Resolves HttpEntity and RequestEntity method argument values, as well as return values of type HttpEntity, ResponseEntity, ErrorResponse and ProblemDetail.\npublic class HttpHeadersReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler; // Handles HttpHeaders return values.\n", "des": "MVC infrastructure for annotation-based handler method processing, building on the org.springframework.web.method.annotation package."}
{"index": 911, "repo": "commons-compress-1.23.0", "code": "package sevenz;\n\nClass CLI; // Usage: archive-name [list]\nClass SevenZArchiveEntry; // An entry in a 7z archive.\nClass SevenZFile; // Reads a 7z file, using SeekableByteChannel under the covers.\nClass SevenZFileOptions; // Collects options for reading 7z archives.\nClass SevenZFileOptions.Builder; // Mutable builder for the immutable SevenZFileOptions.\nClass SevenZMethodConfiguration; // Combines a SevenZMethod with configuration options for the method.\nClass SevenZOutputFile; // Writes a 7z file.\nEnum SevenZMethod; // The (partially) supported compression/encryption methods used in 7z archives.\n", "des": "Provides classes for reading and writing archives using the 7z format."}
{"index": 3045, "repo": "spring-web-6.0.11", "code": "package i18n;\n\npublic class AcceptHeaderLocaleContextResolver extends Object implements LocaleContextResolver; // LocaleContextResolver implementation that looks for a match between locales in the Accept-Language header and a list of configured supported locales.\npublic class FixedLocaleContextResolver extends Object implements LocaleContextResolver; // LocaleContextResolver implementation that always returns a fixed locale and optionally time zone.\npublic interface LocaleContextResolver; // Interface for web-based locale context resolution strategies that allows for both locale context resolution via the request and locale context modification via the HTTP exchange.\n", "des": "Locale related support classes."}
{"index": 1893, "repo": "shiro-core-2.0.0-alpha-2", "code": "package subject;\n\npackage subject.support; // Concrete support implementations of most of the org.apache.shiro.subject interfaces.\npublic class ExecutionException extends org.apache.shiro.lang.ShiroException; // Exception wrapping any potential checked exception thrown when a Subject executes a Callable.\npublic interface MutablePrincipalCollection extends PrincipalCollection; // A PrincipalCollection that allows modification.\npublic interface PrincipalCollection extends Iterable, Serializable; // A collection of all principals associated with a corresponding Subject.\npublic interface PrincipalMap extends PrincipalCollection, Map<String,Object>; // EXPERIMENTAL - DO NOT USE YET\npublic class SimplePrincipalCollection extends Object implements MutablePrincipalCollection; // A simple implementation of the MutablePrincipalCollection interface that tracks principals internally by storing them in a LinkedHashMap.\npublic class SimplePrincipalMap extends Object implements PrincipalMap; // Default implementation of the PrincipalMap interface.\npublic interface Subject; // A Subject represents state and security operations for a single application user.\npublic static class Subject.Builder extends Object; // Builder design pattern implementation for creating Subject instances in a simplified way without requiring knowledge of Shiro's construction techniques.\npublic interface SubjectContext extends Map<String,Object>; // A SubjectContext is a 'bucket' of data presented to a SecurityManager which interprets this data to construct Subject instances.\n", "des": "Components supporting the Subject interface, the most important concept in Shiro's API."}
{"index": 2212, "repo": "spring-data-commons-3.1.2", "code": "package querydsl;\n\npackage querydsl.binding; // Base classes to implement CDI support for repositories.\npublic interface EntityPathResolver; // Strategy interface to abstract the ways to translate an plain domain class into a EntityPath.\npublic interface ListQuerydslPredicateExecutor<T> extends QuerydslPredicateExecutor<T>; // Interface to allow execution of QueryDsl Predicate instances.\npublic class QPageRequest extends AbstractPageRequest; // Basic Java Bean implementation of Pageable with support for QueryDSL.\npublic class QSort extends Sort implements Serializable; // Sort option for queries that wraps a Querydsl OrderSpecifier.\npublic interface QuerydslPredicateExecutor<T>; // Interface to allow execution of QueryDsl Predicate instances.\npublic class QuerydslRepositoryInvokerAdapter extends Object implements RepositoryInvoker; // RepositoryInvoker that is aware of a QuerydslPredicateExecutor and Predicate to be executed for all flavors of findAll(…).\npublic abstract class QuerydslUtils extends Object; // Utility class for Querydsl.\npublic interface ReactiveQuerydslPredicateExecutor<T>; // Interface to issue queries using Querydsl Predicate instances.\npublic class SimpleEntityPathResolver extends Object implements EntityPathResolver; // Simple implementation of EntityPathResolver to lookup a query class by reflection and using the static field of the same type.\n", "des": "Querydsl integration support classes."}
{"index": 3773, "repo": "lucene-analysis-common-9.7.0", "code": "package hyphenation;\n\nInterface PatternConsumer; // This interface is used to connect the XML pattern file parser to the hyphenation tree.\nClass ByteVector; // This class implements a simple byte vector with access to the underlying array.\nClass CharVector; // This class implements a simple char vector with access to the underlying array.\nClass Hyphen; // This class represents a hyphen.\nClass Hyphenation; // This class represents a hyphenated word.\nClass HyphenationTree; // This tree structure stores the hyphenation patterns in an efficient way for fast lookup.\nClass PatternParser; // A SAX document handler to read and parse hyphenation patterns from a XML file.\nClass TernaryTree; // Ternary Search Tree.\n", "des": "Hyphenation code for the CompoundWordTokenFilter."}
{"index": 42, "repo": "ignite-core-2.15.0", "code": "package thread;\n\nClass IgniteStripedThreadPoolExecutor; // An ExecutorService that executes submitted tasks using pooled grid threads.\nClass IgniteThread; // This class adds some necessary plumbing on top of the Thread class.\nClass IgniteThreadFactory; // This class provides implementation of ThreadFactory factory for creating grid threads.\nClass IgniteThreadPoolExecutor; // An ExecutorService that executes submitted tasks using pooled grid threads.\nClass OomExceptionHandler; // OOM exception handler for system threads.\nClass SameThreadExecutor;\n", "des": "Contains threads-related utility classes."}
{"index": 3852, "repo": "lucene-core-9.7.0", "code": "package store;\n\nInterface RandomAccessInput; // Random Access Index API.\nClass BaseDirectory; // Base implementation for a concrete Directory that uses a LockFactory for locking.\nClass BufferedChecksum; // Wraps another Checksum with an internal buffer to speed up checksum calculations.\nClass BufferedChecksumIndexInput; // Simple implementation of ChecksumIndexInput that wraps another input and delegates calls.\nClass BufferedIndexInput; // Base implementation class for buffered IndexInput.\nClass ByteArrayDataInput; // DataInput backed by a byte array.\nClass ByteArrayDataOutput; // DataOutput backed by a byte array.\nClass ByteBufferIndexInput; // Base IndexInput implementation that uses an array of ByteBuffers to represent a file.\nClass ByteBuffersDataInput; // A DataInput implementing RandomAccessInput and reading data from a list of ByteBuffers.\nClass ByteBuffersDataOutput; // A DataOutput storing data in a list of ByteBuffers.\nClass ByteBuffersDataOutput.ByteBufferRecycler; // An implementation of a ByteBuffer allocation and recycling policy.\nClass ByteBuffersDirectory; // A ByteBuffer-based Directory implementation that can be used to store index files on the heap.\nClass ByteBuffersIndexInput; // An IndexInput implementing RandomAccessInput and backed by a ByteBuffersDataInput.\nClass ByteBuffersIndexOutput; // An IndexOutput writing to a ByteBuffersDataOutput.\nClass ChecksumIndexInput; // Extension of IndexInput, computing checksum as it goes.\nClass DataInput; // Abstract base class for performing read operations of Lucene's low-level data types.\nClass DataOutput; // Abstract base class for performing write operations of Lucene's low-level data types.\nClass Directory; // A Directory provides an abstraction layer for storing a list of files.\nClass FileSwitchDirectory; // Expert: A Directory instance that switches files between two other Directory instances.\nClass FilterDirectory; // Directory implementation that delegates calls to another directory.\nClass FilterIndexInput; // IndexInput implementation that delegates calls to another directory.\nClass FilterIndexOutput; // IndexOutput implementation that delegates calls to another directory.\nClass FlushInfo; // A FlushInfo provides information required for a FLUSH context.\nClass FSDirectory; // Base class for Directory implementations that store index files in the file system.\nClass FSLockFactory; // Base class for file system based locking implementation.\n", "des": "Binary i/o API, used for all index data."}
{"index": 1325, "repo": "groovy-all-4.0.13", "code": "package groovy;\n\npackage groovy.ant; // Ant tasks for working with Groovy - such as groovyc for compiling Groovy source code to Java bytecode\npackage groovy.ast; // Groovy AST nodes for the syntax of the language\npackage groovy.classgen; // Generates Java classes for Groovy classes using ASM.\npackage groovy.control; // Compiler control classes.\npackage groovy.groovydoc; // GroovyDoc internal classes.\npackage groovy.reflection; // Internal classes for assisting with reflection.\npackage groovy.runtime; // Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator.\npackage groovy.syntax; // Lexer, parser and trees.\npackage groovy.tools; // Compiler entry points and miscellaneous development tools.\npackage groovy.vmplugin; // JVM version specific classes.\npublic class GroovyBugError extends AssertionError; // This class represents an error that is thrown when a bug is recognized inside the runtime.\npublic class GroovyException extends Exception implements GroovyExceptionInterface;\npublic interface GroovyExceptionInterface; // An interface for use by all Groovy compiler exceptions.\n", "des": "Groovy Language for the JVM"}
{"index": 1237, "repo": "spring-hateoas-2.1.2", "code": "package problem;\n\npublic class Problem extends Object; // Encapsulation of an RFC-7807 Problem code.\npublic static final class Problem.ExtendedProblem<T> extends Problem;\n", "des": "Value objects to build Problem representations."}
{"index": 3727, "repo": "lucene-queryparser-9.7.0", "code": "package classic;\n\nInterface QueryParserConstants; // Token literal values and constants.\nClass MultiFieldQueryParser; // A QueryParser which constructs queries to search multiple fields.\nClass QueryParser; // This class is generated by JavaCC.\nClass QueryParserBase; // This class is overridden by QueryParser in QueryParser.jj and acts to separate the majority of the Java code from the .jj grammar file.\nClass QueryParserTokenManager; // Token Manager.\nClass Token; // Describes the input token stream.\nEnum QueryParser.Operator; // The default operator for parsing queries.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "A simple query parser implemented with JavaCC."}
{"index": 1586, "repo": "spring-websocket-6.0.11", "code": "package adapter;\n\npackage adapter.jetty; // Adapter classes for the Jetty WebSocket API.\npackage adapter.standard; // Adapter classes for the standard Jakarta WebSocket API.\npublic abstract class AbstractWebSocketSession<T> extends Object implements NativeWebSocketSession; // An abstract base class for implementations of WebSocketSession.\npublic interface NativeWebSocketSession extends WebSocketSession; // A WebSocketSession that exposes the underlying, native WebSocketSession through a getter.\n", "des": "Classes adapting Spring's WebSocket API to and from WebSocket providers."}
{"index": 1817, "repo": "spring-integration-mail-6.1.2", "code": "package event;\n\npublic abstract class MailIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "Events generated by the mail module"}
{"index": 2380, "repo": "spring-batch-core-5.0.2", "code": "package annotation;\n\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterChunk; // Marks a method to be called after a chunk is executed. Expected signature: void afterChunk(ChunkContext context)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterChunkError; // Marks a method to be called after a chunk has failed and been marked for rollback. Expected signature: void afterFailedChunk(ChunkContext context)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterJob; // Marks a method to be called after a Job has completed.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterProcess; // Marks a method to be called after an item is passed to an ItemProcessor.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterRead; // Marks a method to be called after an item is read from an ItemReader Expected signature: void afterRead(T item)\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterStep; // Marks a method to be called after a Step has completed.\n@Retention(RUNTIME) @Target(METHOD) public @interface AfterWrite; // Marks a method to be called after an item is passed to an ItemWriter.\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeChunk; // Marks a method to be called before a chunk is executed.\n@Retention(RUNTIME) @Target(METHOD) @Qualifier(\"JobExecutionListener\") public @interface BeforeJob; // Marks a method to be called before a Job is executed, which comes after a JobExecution is created and persisted but before the first Step is executed.\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeProcess; // Marks a method to be called before an item is passed to an ItemProcessor Expected signature: void beforeProcess(T item)\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeRead; // Marks a method to be called before an item is read from an ItemReader Expected signature: void beforeRead()\n@Retention(RUNTIME) @Target(METHOD) public @interface BeforeStep; // Marks a method to be called before a Step is executed, which comes after a StepExecution is created and persisted but before the first item is read.\n", "des": "Annotations for java based configuration of listeners."}
{"index": 3415, "repo": "commons-imaging-1.0-alpha3", "code": "package xbm;\n\nClass XbmImageParser;\nClass XbmImagingParameters; // Xbm format parameters.\n", "des": "The X BitMap image format."}
{"index": 935, "repo": "commons-compress-1.23.0", "code": "package jar;\n\nInterface Pack200.Packer; // The interface defining the API for converting a JAR file to an output stream in the Pack200 format.\nInterface Pack200.Unpacker; // The interface defining the API for converting a packed stream in the Pack200 format to a JAR file.\nClass Pack200; // Class factory for Pack200.Packer and Pack200.Unpacker.\n", "des": "Internal package."}
{"index": 2718, "repo": "spring-batch-infrastructure-5.0.2", "code": "package support;\n\npublic abstract class AbstractSqlPagingQueryProvider extends Object implements PagingQueryProvider; // Abstract SQL Paging Query Provider to serve as a base class for all provided SQL paging query providers.\npublic class ColumnMapItemPreparedStatementSetter extends Object implements ItemPreparedStatementSetter<Map<String,Object>>; // Implementation of the ItemPreparedStatementSetter interface that assumes all keys are contained within a Map with the column name as the key.\npublic interface DataFieldMaxValueIncrementerFactory; // Factory for creating DataFieldMaxValueIncrementer implementations based upon a provided string.\npublic class Db2PagingQueryProvider extends SqlWindowingPagingQueryProvider; // DB2 implementation of a PagingQueryProvider using database specific features.\npublic class DefaultDataFieldMaxValueIncrementerFactory extends Object implements DataFieldMaxValueIncrementerFactory; // Default implementation of the DataFieldMaxValueIncrementerFactory interface.\npublic class DerbyPagingQueryProvider extends SqlWindowingPagingQueryProvider; // Derby implementation of a PagingQueryProvider using standard SQL:2003 windowing functions.\npublic class H2PagingQueryProvider extends AbstractSqlPagingQueryProvider; // H2 implementation of a PagingQueryProvider using database specific features.\npublic class HanaPagingQueryProvider extends AbstractSqlPagingQueryProvider; // SAP HANA implementation of a PagingQueryProvider using database specific features.\npublic class HsqlPagingQueryProvider extends AbstractSqlPagingQueryProvider; // HSQLDB implementation of a PagingQueryProvider using database specific features.\npublic class MariaDBPagingQueryProvider extends AbstractSqlPagingQueryProvider; // MariaDB implementation of a PagingQueryProvider using database specific features.\npublic class MySqlPagingQueryProvider extends AbstractSqlPagingQueryProvider; // MySQL implementation of a PagingQueryProvider using database specific features.\npublic class OraclePagingQueryProvider extends AbstractSqlPagingQueryProvider; // Oracle implementation of a PagingQueryProvider using database specific features.\npublic class PostgresPagingQueryProvider extends AbstractSqlPagingQueryProvider; // Postgres implementation of a PagingQueryProvider using database specific features.\npublic class SqlitePagingQueryProvider extends AbstractSqlPagingQueryProvider; // SQLite implementation of a PagingQueryProvider using database specific features.\n", "des": "Support classes for database specific semantics."}
{"index": 3548, "repo": "opennlp-tools-2.2.0", "code": "package ext;\n\nClass ExtensionLoader; // The ExtensionLoader is responsible to load extensions to the OpenNLP library.\nClass ExtensionServiceKeys;\nClass ExtensionNotLoadedException; // Exception indicates that an OpenNLP extension could not be loaded.\n", "des": "Package containing extension loading code."}
{"index": 3607, "repo": "lucene-queries-9.7.0", "code": "package mlt;\n\nClass MoreLikeThis; // Generate \"more like this\" similarity queries.\nClass MoreLikeThisQuery; // A simple wrapper for MoreLikeThis for use in scenarios where a Query object is required eg in custom QueryParser extensions.\n", "des": "Document similarity query generators."}
{"index": 3256, "repo": "opencms-core-15.0", "code": "package preferences;\n\nInterface I_CmsPreference; // Interface describing a single preference value which can possibly be edited by the user.\nClass A_CmsPreference; // Abstract superclass for preferences.\nClass CmsBuiltinPreference; // Preference subclass for built-in preferences accessed with a getter/setter pair via reflection.\nClass CmsBuiltinPreference.SelectOptions; // A bean representing a set of select options.\nClass CmsEditorPreference; // Preference subclass for preferred editors.\nClass CmsElementViewPreference; // Element view preference configuration.\nClass CmsExplorerElementViewPreference; // Explorer element view preference.\nClass CmsGalleryShowInvalidDefaultPreference; // Class for the preference which controls whether invalid elements should be shown by default in the gallery result tab.\nClass CmsHiddenBuiltinPreference; // Class for preferences that are not meant to be displayed in the preference dialog.\nClass CmsLanguagePreference; // Workplace locale preference.\nClass CmsPreferenceData; // Bean representing the configurable attributes for a preference.\nClass CmsProjectPreference; // Preference subclass for selecting the start project.\nClass CmsSitePreference; // Preference for the start site.\nClass CmsStartFolderPreference; // Preference for the start folder.\nClass CmsStartGallleryPreference; // Start gallery preference.\nClass CmsStartViewPreference; // Preference for the start site.\nClass CmsTimeWarpPreference; // Preference for the timewarp widget.\nClass CmsUserDefinedPreference; // Subclass for user-defined preferences.\nClass CmsUserSettingsStringPropertyWrapper; // Bean used to access the built-in preferences via reflection.\nClass CmsWorkplaceModePreference; // Workplace mode preference configuration.\nClass CmsWrapperPreference; // Wrapper used for built-in preferene which have also been configured in opencms-workplace.xml.\nAnnotation Type PrefMetadata; // Annotation used for declaring that a specific preference class should be used for a built-in preference.\n", "des": "Classes to build the user preferences dialog."}
{"index": 3384, "repo": "commons-imaging-1.0-alpha3", "code": "package imaging;\n\npackage imaging.color; // Color spaces and conversions between them.\npackage imaging.common; // Provides utility classes that are employed across multiple image formats and sub-packages.\npackage imaging.icc; // ICC color profile.\npackage imaging.internal; // Internal utility classes.\npackage imaging.palette; // Color quantization and palette manipulation tools.\nInterface ImageFormat; // Simple image format interface.\nClass ColorTools; // A selection of tools for evaluating and manipulating color spaces, color values, etc.\nClass FormatCompliance; // Provides information about the compliance of a specified data source (byte array, file, etc.) to an image format.\nClass ImageDump; // Used to store metadata and descriptive information extracted from image files.\nClass ImageInfo; // ImageInfo represents a collection of basic properties of an image, such as width, height, format, bit depth, etc.\nClass ImageParser<T extends ImagingParameters>; // Provides the abstract base class for all image reading and writing utilities.\nClass Imaging; // The primary application programming interface (API) to the Imaging library.\nClass ImagingConstants; // Defines constants that may be used in passing options to ImageParser read/write implementations, the utility routines implemented in the Imaging class, and throughout the Apache Commons Imaging package.\nClass ImagingParameters; // Imaging parameters.\nClass PixelDensity; // Used to specify pixel density and physical dimensions when reading or storing image information.\nEnum ImageFormats; // Enum of known image formats.\nEnum ImageInfo.ColorType;\nEnum ImageInfo.CompressionAlgorithm;\nClass ImageReadException; // A custom exception thrown when an ImageParser or other utility encounters a format-violation, non-supported element, or other condition that renders image data unaccessible.\nClass ImageWriteException; // A custom exception thrown when an ImageParser or other utility encounters a format-violation, non-supported element, or other condition that renders image data unwritable.\nClass ImagingException; // The base class for implementing custom exceptions in the Apache Commons Imaging package.\n", "des": "The main package for Apache Commons Imaging."}
{"index": 411, "repo": "spring-social-core-1.1.6.RELEASE", "code": "package oauth2;\n\nInterface OAuth2Operations; // A service interface for the OAuth2 flow.\nInterface OAuth2ServiceProvider<A>; // A ServiceProvider that uses the OAuth 2.0 protocol.\nClass AbstractOAuth2ApiBinding; // Base class for OAuth 2-based provider API bindings.\nClass AbstractOAuth2ServiceProvider<S>; // Base class for ServiceProviders that use the OAuth2 protocol.\nClass AccessGrant; // OAuth2 access token.\nClass GenericOAuth2ConnectionFactory; // Generic implementation of an OAuth2ConnectionFactory that carries no intrinsic knowledge of the API it will be creating connections against.\nClass GenericOAuth2ServiceProvider; // Generic implementation of OAuth2ServiceProvider that carries no intrinsic knowledge of the API it will be creating connections against.\nClass OAuth2Parameters; // Parameters for building an OAuth2 authorize URL.\nClass OAuth2Template; // OAuth2Operations implementation that uses REST-template to make the OAuth calls.\nEnum GrantType; // OAuth2 supports two types of authorization flow, typically referred to as \"Client-side\" and \"Server-side\".\nEnum OAuth2Version; // Enum encapsulating the differences between the various versions of the OAuth2 specification.\nEnum TokenStrategy; // Strategy enumeration where each value carries an interceptor defining how an access token is carried on API requests.\n", "des": "OAuth2 client."}
{"index": 2360, "repo": "spring-boot-3.1.1", "code": "package filter;\n\npublic class ApplicationContextHeaderFilter extends org.springframework.web.filter.OncePerRequestFilter; // OncePerRequestFilter to add an X-Application-Context header that contains the ApplicationContext ID.\npublic class OrderedCharacterEncodingFilter extends org.springframework.web.filter.CharacterEncodingFilter implements OrderedFilter; // CharacterEncodingFilter that also implements Ordered.\npublic interface OrderedFilter extends jakarta.servlet.Filter, org.springframework.core.Ordered; // An Ordered Filter.\npublic class OrderedFormContentFilter extends org.springframework.web.filter.FormContentFilter implements OrderedFilter; // FormContentFilter that also implements Ordered.\npublic class OrderedHiddenHttpMethodFilter extends org.springframework.web.filter.HiddenHttpMethodFilter implements OrderedFilter; // HiddenHttpMethodFilter that also implements Ordered.\npublic class OrderedRequestContextFilter extends org.springframework.web.filter.RequestContextFilter implements OrderedFilter; // RequestContextFilter that also implements Ordered.\n", "des": "Spring Boot specific Filter implementations."}
{"index": 1885, "repo": "shiro-core-2.0.0-alpha-2", "code": "package activedirectory;\n\npublic class ActiveDirectoryRealm extends AbstractLdapRealm; // A Realm that authenticates with an active directory LDAP server to determine the roles for a particular user.\n", "des": "Realms that acquire security data from a Microsoft Active Directory."}
{"index": 459, "repo": "camel-core-3.0.0-RC1", "code": "package impl;\n\npackage impl.cluster; // Base classes and implementation for Camel Cluster\nClass AbstractModelCamelContext; // Represents the context used to configure routes and the policies to use.\nClass DefaultCamelContext; // Represents the context used to configure routes and the policies to use.\nClass DefaultExecutorServiceManager; // Default ExecutorServiceManager.\nClass DefaultModel;\nClass DefaultModelJAXBContextFactory; // Default implementation of ModelJAXBContextFactory.\nClass JndiRegistry; // use JndiBeanRepository instead.\nClass RouteIdFactory; // Factory for generating route ids based on uris.\nClass RouteService; // Represents the runtime objects for a given RouteDefinition so that it can be stopped independently of other routes\n", "des": "Default implementation classes for Camel Core"}
{"index": 3623, "repo": "solr-test-framework-9.3.0", "code": "package component;\n\nClass DummyCustomParamSpellChecker; // A Dummy SpellChecker for testing purposes\nClass TrackingShardHandlerFactory; // A ShardHandlerFactory that extends HttpShardHandlerFactory and tracks requests made to nodes/shards such that interested parties can watch such requests and make assertions inside tests\nClass TrackingShardHandlerFactory.RequestTrackingQueue; // A queue having helper methods to select requests by shard and purpose.\nClass TrackingShardHandlerFactory.ShardRequestAndParams;\n", "des": "Class for tracking shard requests"}
{"index": 1231, "repo": "spring-hateoas-2.1.2", "code": "package mediatype;\n\npackage mediatype.alps; // Value objects to build ALPS metadata.\npackage mediatype.collectionjson; // Value objects to build Collection+JSON representations.\npackage mediatype.hal; // HAL-specific extensions, SPIs and Jackson customizations.\npackage mediatype.html; // Support for HTML media type.\npackage mediatype.problem; // Value objects to build Problem representations.\npackage mediatype.uber; // UBER media type objects.\npackage mediatype.vnderrors; // Vnd.Error media type.\npublic interface AffordanceModelFactory; // SPI for media type implementations to create a specific AffordanceModel for a ConfiguredAffordance.\npublic interface AffordanceOperations; // Operations commons to all builder APIs.\npublic class Affordances extends Object implements AffordanceOperations; // Primary API to construct Affordance instances.\npublic interface ConfigurableAffordance extends AffordanceOperations; // An affordance in creation.\npublic class ConfigurableHandlerInstantiator extends com.fasterxml.jackson.databind.cfg.HandlerInstantiator; // A HandlerInstantiator that will use instances explicitly registered with it but fall back to lookup or even create a fresh instance via the AutowireCapableBeanFactory provided on construction.\npublic interface ConfiguredAffordance; // A configure affordance for inspection by media type implementations to create AffordanceModel instances.\npublic interface InputTypeFactory; // SPI interface for components that can derive an input type from a ResolvableType.\npublic final class JacksonHelper extends Object; // Jackson utility methods.\npublic interface MessageResolver; // A simplified variant of MessageSourceAccessor to allow more direct replacement with a no-op implementation in case the target MessageSource is unavailable to avoid resolution overhead.\npublic class MessageSourceResolvableSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<MessageSourceResolvable>; // A Jackson serializer triggering message resolution via a MessageResolver for MessageSourceResolvable instances about to be serialized.\npublic class PropertyUtils extends Object;\n", "des": "Spring container configuration support."}
{"index": 2575, "repo": "camel-api-4.0.0-RC1", "code": "package catalog;\n\npublic class ConfigurationPropertiesValidationResult extends Object implements Serializable; // Details result of validating configuration properties (eg application.properties for camel-main).\npublic class EndpointValidationResult extends Object implements Serializable; // Details result of validating endpoint uri.\npublic interface JSonSchemaResolver; // Pluggable resolver to load JSON schema files for components, data formats, languages etc.\npublic class LanguageValidationResult extends Object implements Serializable; // Validation result of parsing a language expression or predicate\npublic interface RuntimeCamelCatalog extends StaticService, CamelContextAware; // Runtime catalog which limited API needed by components that supports ComponentVerifierExtension.\npublic interface SuggestionStrategy; // Strategy to provide suggestions for unknown endpoint options\n", "des": "Camel Catalog API"}
{"index": 2098, "repo": "spring-webflux-6.0.11", "code": "package handler;\n\npublic abstract class AbstractHandlerMapping extends org.springframework.context.support.ApplicationObjectSupport implements HandlerMapping, org.springframework.core.Ordered, org.springframework.beans.factory.BeanNameAware; // Abstract base class for HandlerMapping implementations.\npublic abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping; // Abstract base class for URL-mapped HandlerMapping implementations.\npublic class SimpleUrlHandlerMapping extends AbstractUrlHandlerMapping; // Implementation of the HandlerMapping interface to map from URLs to request handler beans.\npublic class WebFluxResponseStatusExceptionHandler extends org.springframework.web.server.handler.ResponseStatusExceptionHandler; // Common WebFlux exception handler that detects instances of ResponseStatusException (inherited from the base class) as well as exceptions annotated with @ResponseStatus by determining the HTTP status for them and updating the status of the response accordingly.\n", "des": "Provides HandlerMapping implementations including abstract base classes."}
{"index": 1774, "repo": "spring-data-mongodb-4.1.2", "code": "package util;\n\npackage util.json; // MongoDB driver-specific utility classes for Json conversion.\npublic class BsonUtils extends Object; // Internal API for operations on Bson elements that can be either Document or DBObject.\npublic class DBObjectUtils extends Object;\npublic class DotPath extends Object; // Value object representing a dot path.\npublic class MongoClientVersion extends Object; // MongoClientVersion holds information about the used mongo-java client and is used to distinguish between different versions.\npublic final class MongoDbErrorCodes extends Object; // MongoDbErrorCodes holds MongoDB specific error codes outlined in mongo/base/error_codes.err.\npublic abstract class RegexFlags extends Object; // Utility to translate regex flags to MongoDB regex options and vice versa.\n", "des": "MongoDB driver-specific utility classes for Bson and DBObject interaction."}
{"index": 3767, "repo": "lucene-analysis-common-9.7.0", "code": "package charfilter;\n\nClass BaseCharFilter; // Base utility class for implementing a CharFilter.\nClass HTMLStripCharFilter; // A CharFilter that wraps another Reader and attempts to strip out HTML constructs.\nClass HTMLStripCharFilterFactory; // Factory for HTMLStripCharFilter.\nClass MappingCharFilter; // Simplistic CharFilter that applies the mappings contained in a NormalizeCharMap to the character stream, and correcting the resulting changes to the offsets.\nClass MappingCharFilterFactory; // Factory for MappingCharFilter.\nClass NormalizeCharMap; // Holds a map of String input to String output, to be used with MappingCharFilter.\nClass NormalizeCharMap.Builder; // Builds an NormalizeCharMap.\n", "des": "Normalization of text before the tokenizer."}
{"index": 3394, "repo": "commons-imaging-1.0-alpha3", "code": "package ico;\n\nClass IcoImageParser;\nClass IcoImagingParameters; // Ico format parameters.\n", "des": "The ICO/CUR image formats."}
{"index": 1654, "repo": "jena-core-4.9.0", "code": "package xmlinput;\n\npublic interface ALiteral extends ANode; // A string literal property value from an RDF/XML file.\npublic interface AResource; // A URI or blank node reported to a StatementHandler.\n@Deprecated public class ARP extends Object implements ARPConfig;\npublic interface ARPConfig; // Used to set event handlers and options on ARP, SAX2Model, and SAX2RDF instances.\npublic interface ARPErrorNumbers; // Error numbers used by ARP.\npublic interface ARPEventHandler extends StatementHandler, ExtendedHandler, NamespaceHandler; // Convenience generalization of all ARP handler interfaces.\npublic class ARPHandlers extends Object; // The interface to set the various handlers on ARP.\npublic class ARPOptions extends Object implements ARPErrorNumbers; // The interface to set the various options on ARP.\npublic class DOM2Model extends SAX2Model; // Transform DOM nodes of RDF.XML into Jena Models.\npublic interface ExtendedHandler; // Extended callbacks from a reader to an RDF application.\npublic class FatalParsingErrorException extends RuntimeException; // This exception should only be seen in user code when using SAX2RDF or SAX2Model.\npublic interface NamespaceHandler; // The interface for being notified about namespace use in an RDF/XML document.\npublic class NTriple extends Object implements ARPErrorNumbers; // A command line interface into ARP.\npublic class ParseException extends SAXParseException implements ARPErrorNumbers; // An exception during the RDF processing of ARP.\npublic class RDFXMLReader extends Object implements RDFReaderI, ARPErrorNumbers; // Interface between Jena and ARP.\npublic class SAX2Model extends SAX2RDF; // Use arbitrary SAX input to Jena.\npublic class SAX2RDF extends SAX2RDFImpl implements ARPConfig; // Allows connecting an arbitrary source of SAX events with ARP.\npublic interface StatementHandler; // The callback from a reader to an RDF application.\npublic class StAX2Model extends Object; // A collection of convenient functions to parse an XML stream using ARP.\npublic class StAX2SAX extends Object; // Bridge StAX and SAX parsing.\n", "des": "A parser for RDF/XML."}
{"index": 59, "repo": "ignite-core-2.15.0", "code": "package services;\n\nInterface Service; // An instance of grid-managed service.\nInterface ServiceCallContext; // Service call context.\nInterface ServiceCallInterceptor; // Service call interceptor.\nInterface ServiceContext; // Service execution context.\nInterface ServiceDescriptor; // Service deployment descriptor.\nClass ServiceCallContextBuilder; // Service call context builder.\nClass ServiceConfiguration; // Managed service configuration.\nClass ServiceDeploymentException; // Exception indicating service deployment failure.\n", "des": "Contains main Managed Services APIs."}
{"index": 3844, "repo": "lucene-core-9.7.0", "code": "package perfield;\n\nClass PerFieldDocValuesFormat; // Enables per field docvalues support.\nClass PerFieldKnnVectorsFormat; // Enables per field numeric vector support.\nClass PerFieldKnnVectorsFormat.FieldsReader; // VectorReader that can wrap multiple delegate readers, selected by field.\nClass PerFieldPostingsFormat; // Enables per field postings support.\n", "des": "Postings format that can delegate to different formats per-field."}
{"index": 1911, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package couchbase;\n\n@AutoConfiguration(after={CouchbaseAutoConfiguration.class,ValidationAutoConfiguration.class}) @ConditionalOnClass({com.couchbase.client.java.Bucket.class,org.springframework.data.couchbase.repository.CouchbaseRepository.class}) @EnableConfigurationProperties(CouchbaseDataProperties.class) @Import({org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataConfiguration.class,org.springframework.boot.autoconfigure.data.couchbase.CouchbaseClientFactoryConfiguration.class,org.springframework.boot.autoconfigure.data.couchbase.CouchbaseClientFactoryDependentConfiguration.class}) public class CouchbaseDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Couchbase support.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(jakarta.validation.Validator.class) public static class CouchbaseDataAutoConfiguration.ValidationConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.data.couchbase\") public class CouchbaseDataProperties extends Object; // Configuration properties for Spring Data Couchbase.\n@AutoConfiguration(after=CouchbaseDataAutoConfiguration.class) @ConditionalOnClass({com.couchbase.client.java.Cluster.class,org.springframework.data.couchbase.repository.ReactiveCouchbaseRepository.class,reactor.core.publisher.Flux.class}) @Import(org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataConfiguration.class) public class CouchbaseReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Reactive Couchbase support.\n", "des": "Auto-configuration for Spring Data Couchbase."}
{"index": 1733, "repo": "spring-jdbc-6.0.11", "code": "package object;\n\npublic class BatchSqlUpdate extends SqlUpdate; // SqlUpdate subclass that performs batch update operations.\npublic class GenericSqlQuery<T> extends SqlQuery<T>; // A concrete variant of SqlQuery which can be configured with a RowMapper.\npublic class GenericStoredProcedure extends StoredProcedure; // Concrete implementation making it possible to define the RDBMS stored procedures in an application context without writing a custom Java implementation class.\npublic abstract class MappingSqlQuery<T> extends MappingSqlQueryWithParameters<T>; // Reusable query in which concrete subclasses must implement the abstract mapRow(ResultSet, int) method to convert each row of the JDBC ResultSet into an object.\npublic abstract class MappingSqlQueryWithParameters<T> extends SqlQuery<T>; // Reusable RDBMS query in which concrete subclasses must implement the abstract mapRow(ResultSet, int) method to map each row of the JDBC ResultSet into an object.\npublic abstract class RdbmsOperation extends Object implements org.springframework.beans.factory.InitializingBean; // An \"RDBMS operation\" is a multithreaded, reusable object representing a query, update, or stored procedure call.\npublic abstract class SqlCall extends RdbmsOperation; // RdbmsOperation using a JdbcTemplate and representing an SQL-based call such as a stored procedure or a stored function.\npublic class SqlFunction<T> extends MappingSqlQuery<T>; // SQL \"function\" wrapper for a query that returns a single row of results.\npublic abstract class SqlOperation extends RdbmsOperation; // Operation object representing an SQL-based operation such as a query or update, as opposed to a stored procedure.\npublic abstract class SqlQuery<T> extends SqlOperation; // Reusable operation object representing an SQL query.\npublic class SqlUpdate extends SqlOperation; // Reusable operation object representing an SQL update.\npublic abstract class StoredProcedure extends SqlCall; // Superclass for object abstractions of RDBMS stored procedures.\npublic abstract class UpdatableSqlQuery<T> extends SqlQuery<T>; // Reusable RDBMS query in which concrete subclasses must implement the abstract updateRow(ResultSet, int, context) method to update each row of the JDBC ResultSet and optionally map contents into an object.\n", "des": "The classes in this package represent RDBMS queries, updates, and stored procedures as threadsafe, reusable objects."}
{"index": 3117, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\npackage spi.support; // Package intended for simplifying the worked needed to implement a caching provider.\nInterface CacheImplementor; // SPI contract for Hibernate's second-level cache engine\nInterface CacheKeysFactory;\nInterface CacheTransactionSynchronization; // Defines a context object that a RegionFactory is asked to create (RegionFactory.createTransactionContext(org.hibernate.engine.spi.SharedSessionContractImplementor)}) when a Hibernate Session is created.\nInterface DirectAccessRegion; // Specialized Region whose data is accessed directly (not requiring key/item wrapping, e.g.\nInterface DomainDataRegion; // A Region for cacheable domain data - entity, collection, natural-id.\nInterface ExtendedStatisticsSupport; // Optional Region contract defining support for extra statistic information\nInterface QueryCache;\nInterface QueryResultsCache; // Defines the responsibility for managing query result data caching in regards to a specific region.\nInterface QueryResultsRegion; // Defines the contract for a cache region which will specifically be used to store query results.\nInterface Region; // Contract for a named \"region\".\nInterface RegionFactory; // Contract for building second level cache regions.\nInterface SecondLevelCacheLogger;\nInterface TimestampsCache; // Wrapper for a TimestampsRegion adding handling of stale results\nInterface TimestampsCacheFactory; // Responsible for building the TimestampsRegionAccessFactory to use for managing query results in regards to staleness of the underlying tables (sometimes called \"query spaces\" or \"table spaces\")\nInterface TimestampsRegion;\nInterface UpdateTimestampsCache;\nClass AbstractCacheTransactionSynchronization;\nClass AbstractRegionFactory;\nClass FilterKey; // Allows cached queries to be keyed by enabled filters.\nClass QueryKey; // A key that identifies a particular query with bound parameter values.\nClass QuerySpacesHelper;\nClass SecondLevelCacheLogger_$logger; // Warning this class consists of generated code.\nClass StandardCacheTransactionSynchronization;\n", "des": "Defines the integration aspect of Hibernate's second-level caching allowing \"caching back ends\" to be plugged in as a caching provider."}
{"index": 1781, "repo": "spring-integration-file-6.1.2", "code": "package config;\n\npublic abstract class AbstractFilePayloadTransformerParser extends org.springframework.integration.config.xml.AbstractTransformerParser; // Base class for File payload transformer parsers.\npublic abstract class AbstractRemoteFileInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Abstract base class for parsing remote file inbound channel adapters.\npublic abstract class AbstractRemoteFileOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\npublic abstract class AbstractRemoteFileStreamingInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Abstract base class for parsing remote file streaming inbound channel adapters.\npublic class FileInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <inbound-channel-adapter> element of the 'file' namespace.\npublic class FileListFilterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<FileListFilter<File>>;\npublic class FileNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's 'file' namespace.\npublic class FileOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the <outbound-channel-adapter/> element of the 'file' namespace.\npublic class FileOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the 'outbound-gateway' element of the file namespace.\npublic final class FileParserUtils extends Object;\npublic class FileReadingMessageSourceFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean<FileReadingMessageSource> implements org.springframework.beans.factory.BeanNameAware;\npublic class FileSplitterParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers, factory beans."}
{"index": 1590, "repo": "spring-websocket-6.0.11", "code": "package jetty;\n\n@Deprecated(since=\"6.0.3\", forRemoval=true) public class JettyWebSocketClient extends AbstractWebSocketClient implements org.springframework.context.Lifecycle;\n", "des": "Client-side support for the Jetty WebSocket API."}
{"index": 627, "repo": "freemarker-2.3.32", "code": "package rhino;\n\nClass RhinoFunctionModel;\nClass RhinoScriptableModel;\nClass RhinoWrapper;\n", "des": "Exposes Rhino (ECMAScript) objects to templates."}
{"index": 2185, "repo": "spring-security-web-6.1.2", "code": "package switchuser;\n\npublic class AuthenticationSwitchUserEvent extends org.springframework.security.authentication.event.AbstractAuthenticationEvent; // Application event which indicates that a user context switch.\npublic interface SwitchUserAuthorityChanger; // Allows subclasses to modify the GrantedAuthority list that will be assigned to the principal when they assume the identity of a different principal.\npublic class SwitchUserFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.context.MessageSourceAware; // Switch User processing filter responsible for user context switching.\npublic final class SwitchUserGrantedAuthority extends Object implements org.springframework.security.core.GrantedAuthority; // Custom GrantedAuthority used by SwitchUserFilter\n", "des": "Provides HTTP-based \"switch user\" (su) capabilities."}
{"index": 1768, "repo": "spring-data-mongodb-4.1.2", "code": "package repository;\n\npackage repository.aot; // Ahead-Of-Time processors for MongoDB repositories.\npackage repository.cdi; // CDI support for MongoDB specific repository implementation.\npackage repository.config; // Support infrastructure for the configuration of MongoDB specific repositories.\npackage repository.query; // Query derivation mechanism for MongoDB specific repositories.\npackage repository.support; // Support infrastructure for query derivation of MongoDB specific repositories.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Aggregation; // The Aggregation annotation can be used to annotate a Repository query method so that it runs the Aggregation.pipeline() on invocation.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(count=true) public @interface CountQuery; // Annotation to declare finder count queries directly on repository methods.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(delete=true) public @interface DeleteQuery; // Annotation to declare finder delete queries directly on repository methods.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Query(exists=true) public @interface ExistsQuery; // Annotation to declare finder exists queries directly on repository methods.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Hint; // Annotation to declare index hints for repository query, update and aggregate operations.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Meta;\n@NoRepositoryBean public interface MongoRepository<T,ID> extends ListCrudRepository<T,ID>, ListPagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T>; // Mongo specific Repository interface.\n@Documented @Retention(RUNTIME) @Target(PARAMETER) public @interface Near; // Annotation to be used for disambiguing method parameters that shall be used to trigger geo near queries.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented @Hint public @interface Query; // Annotation to declare finder queries directly on repository methods.\n", "des": "MongoDB specific repository implementation."}
{"index": 3553, "repo": "guava-32.1.1-jre", "code": "package collect;\n\nInterface BiMap<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // A bimap (or \"bidirectional map\") is a map that preserves the uniqueness of its values as well as that of its keys.\nInterface ClassToInstanceMap<B extends @Nullable java.lang.Object>; // A map, each entry of which maps a Java raw type to an instance of that type.\nInterface Interner<E>; // Provides similar behavior to String.intern() for any immutable type.\nInterface ListMultimap<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // A Multimap that can hold duplicate key-value pairs and that maintains the insertion ordering of values for a given key.\nInterface MapDifference<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // An object representing the differences between two maps.\nInterface MapDifference.ValueDifference<V extends @Nullable java.lang.Object>; // A difference between the mappings from two maps with the same key.\nInterface Maps.EntryTransformer<K extends @Nullable java.lang.Object,​V1 extends @Nullable java.lang.Object,​V2 extends @Nullable java.lang.Object>; // A transformation of the value of a key-value pair, using both key and value as inputs.\nInterface Multimap<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // A collection that maps keys to values, similar to Map, but in which each key may be associated with multiple values.\nInterface Multiset<E extends @Nullable java.lang.Object>; // A collection that supports order-independent equality, like Set, but may have duplicate elements.\nInterface Multiset.Entry<E extends @Nullable java.lang.Object>; // An unmodifiable element-count pair for a multiset.\nInterface PeekingIterator<E extends @Nullable java.lang.Object>; // An iterator that supports a one-element lookahead while iterating.\nInterface RangeMap<K extends java.lang.Comparable,​V>; // A mapping from disjoint nonempty ranges to non-null values.\n", "des": "Collection interfaces and implementations, and other utilities for collections."}
{"index": 3211, "repo": "tomcat-servletapi-10.1", "code": "package http;\n\nInterface HttpServletMapping; // Represents how the request from which this object was obtained was mapped to the associated servlet.\nInterface HttpServletRequest; // Extends the ServletRequest interface to provide request information for HTTP servlets.\nInterface HttpServletResponse; // Extends the ServletResponse interface to provide HTTP-specific functionality in sending a response.\nInterface HttpSession; // Provides a way to identify a user across more than one page request or visit to a Web site and to store information about that user.\nInterface HttpSessionActivationListener; // Objects that are bound to a session may listen to container events notifying them that sessions will be passivated and that session will be activated.\nInterface HttpSessionAttributeListener; // This listener interface can be implemented in order to get notifications of changes to the attribute lists of sessions within this web application.\nInterface HttpSessionBindingListener; // Causes an object to be notified when it is bound to or unbound from a session.\nInterface HttpSessionIdListener; // Implementations of this interface are notified when an HttpSession's ID changes.\nInterface HttpSessionListener; // Implementations of this interface are notified of changes to the list of active sessions in a web application.\nInterface HttpUpgradeHandler; // Interface between the HTTP upgrade process and the new protocol.\nInterface Part; // This class represents a part as uploaded to the server as part of a multipart/form-data request body.\nInterface PushBuilder; // Builds a push request based on the HttpServletRequest from which this builder was obtained.\nInterface WebConnection; // The interface used by an HttpUpgradeHandler to interact with an upgraded HTTP connection.\nClass Cookie; // Creates a cookie, a small amount of information sent by a servlet to a Web browser, saved by the browser, and later sent back to the server.\nClass HttpFilter; // Provides a base class that implements the Filter interface and ensures that the Request and Response are of type HttpServletRequest and HttpServletResponse respectively.\nClass HttpServlet; // Provides an abstract class to be subclassed to create an HTTP servlet suitable for a Web site.\nClass HttpServletRequestWrapper; // Provides a convenient implementation of the HttpServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet.\nClass HttpServletResponseWrapper; // Provides a convenient implementation of the HttpServletResponse interface that can be subclassed by developers wishing to adapt the response from a Servlet.\n", "des": "The jakarta.servlet.http package contains a number of classes and interfaces that describe and define the contracts between a servlet class running under the HTTP protocol and the runtime environment provided for an instance of such a class by a conforming servlet container."}
{"index": 3399, "repo": "commons-imaging-1.0-alpha3", "code": "package segments;\n\nClass App13Segment;\nClass App14Segment; // http://www.aiim.org/documents/standards/PDF-Ref/References/Adobe/5116.DCT_Filter.pdf\nClass App2Segment;\nClass AppnSegment;\nClass ComSegment;\nClass DhtSegment;\nClass DhtSegment.HuffmanTable;\nClass DqtSegment;\nClass DqtSegment.QuantizationTable;\nClass GenericSegment;\nClass JfifSegment;\nClass Segment;\nClass SofnSegment;\nClass SofnSegment.Component;\nClass SosSegment;\nClass SosSegment.Component;\nClass UnknownSegment;\n", "des": "JPEG image format segments."}
{"index": 2865, "repo": "spring-integration-core-6.1.2", "code": "package advice;\n\npublic abstract class AbstractHandleMessageAdvice extends IntegrationObjectSupport implements HandleMessageAdvice; // The base HandleMessageAdvice for advices which can be applied only for the MessageHandler.handleMessage(Message).\npublic abstract class AbstractRequestHandlerAdvice extends IntegrationObjectSupport implements org.aopalliance.intercept.MethodInterceptor; // Base class for MessageHandler advice classes.\nprotected static interface AbstractRequestHandlerAdvice.ExecutionCallback; // Called by subclasses in doInvoke() to proceed() the invocation.\nprotected static final class AbstractRequestHandlerAdvice.ThrowableHolderException extends RuntimeException;\npublic class CacheRequestHandlerAdvice extends AbstractRequestHandlerAdvice implements org.springframework.beans.factory.SmartInitializingSingleton; // The AbstractRequestHandlerAdvice implementation for caching AbstractReplyProducingMessageHandler.RequestHandler#handleRequestMessage(Message) results.\npublic class ContextHolderRequestHandlerAdvice extends AbstractRequestHandlerAdvice; // An AbstractRequestHandlerAdvice implementation to store and reset a value into/from some context (e.g.\npublic class ErrorMessageSendingRecoverer extends ErrorMessagePublisher implements org.springframework.retry.RecoveryCallback<Object>; // A RecoveryCallback that sends the final throwable as an ErrorMessage after retry exhaustion.\npublic static class ErrorMessageSendingRecoverer.RetryExceptionNotAvailableException extends org.springframework.messaging.MessagingException;\npublic class ExpressionEvaluatingRequestHandlerAdvice extends AbstractRequestHandlerAdvice; // Used to advise MessageHandlers.\npublic static class ExpressionEvaluatingRequestHandlerAdvice.MessageHandlingExpressionEvaluatingAdviceException extends org.springframework.messaging.MessagingException;\npublic interface HandleMessageAdvice extends org.aopalliance.intercept.MethodInterceptor; // The marker MethodInterceptor interface extension to distinguish advices for some reason.\npublic class HandleMessageAdviceAdapter extends Object implements HandleMessageAdvice; // A HandleMessageAdvice implementation with a plain delegation to the provided MethodInterceptor.\npublic class IdempotentReceiverInterceptor extends AbstractHandleMessageAdvice; // The MethodInterceptor implementation for the Idempotent Receiver E.I.\npublic class RateLimiterRequestHandlerAdvice extends AbstractRequestHandlerAdvice; // An AbstractRequestHandlerAdvice extension for a rate limiting to service method calls.\n", "des": "Provides classes that are used to advise MessageHandlers with cross-cutting concerns."}
{"index": 1239, "repo": "spring-hateoas-2.1.2", "code": "package vnderrors;\n\n@Deprecated public class VndErrors extends CollectionModel<VndErrors.VndError>;\n@Deprecated public static class VndErrors.VndError extends RepresentationModel<VndErrors.VndError>;\n", "des": "Vnd.Error media type."}
{"index": 3741, "repo": "lucene-queryparser-9.7.0", "code": "package standard;\n\npackage standard.builders; // Standard Lucene Query Node Builders.\npackage standard.config; // Standard Lucene Query Configuration.\npackage standard.nodes; // Standard Lucene Query Nodes.\npackage standard.parser; // Lucene Query Parser\npackage standard.processors; // Lucene Query Node Processors.\nInterface CommonQueryParserConfiguration; // Configuration options common across queryparser implementations.\nClass QueryParserUtil; // This class defines utility methods to (help) parse query strings into Query objects.\nClass StandardQueryParser; // The StandardQueryParser is a pre-assembled query parser that supports most features of the classic Lucene query parser, allows dynamic configuration of some of its features (like multi-field expansion or wildcard query restrictions) and adds support for new query types and expressions.\n", "des": "Lucene Flexible Query Parser Implementation"}
{"index": 1684, "repo": "spring-integration-mqtt-6.1.2", "code": "package event;\n\npublic class MqttConnectionFailedEvent extends MqttIntegrationEvent; // The MqttIntegrationEvent to notify about lost connection to the server.\npublic abstract class MqttIntegrationEvent extends org.springframework.integration.events.IntegrationEvent; // Base class for Mqtt Events.\npublic class MqttMessageDeliveredEvent extends MqttMessageDeliveryEvent; // An event emitted (when using aysnc) when the client indicates the message was delivered.\npublic abstract class MqttMessageDeliveryEvent extends MqttIntegrationEvent; // Base class for events related to message delivery.\npublic class MqttMessageSentEvent extends MqttMessageDeliveryEvent; // An event emitted (when using async) when the client indicates that a message has been sent.\npublic class MqttProtocolErrorEvent extends MqttIntegrationEvent; // The even representing an MQTT error occured during client interaction.\npublic class MqttSubscribedEvent extends MqttIntegrationEvent;\n", "des": "ApplicationEvents generated by the mqtt module."}
{"index": 3345, "repo": "opencms-core-15.0", "code": "package contextmenu;\n\nInterface CmsContextMenu.ContextMenuClosedListener; // ContextMenuClosedListener is used to listen for the event that the context menu is closed, either when a item is clicked or when the popup is canceled.\nInterface CmsContextMenu.ContextMenuItemClickListener; // ContextMenuItemClickListener is listener for context menu items wanting to notify listeners about item click\nInterface CmsContextMenu.ContextMenuOpenedListener; // ContextMenuOpenedListener is used to modify the content of context menu based on what was clicked.\nInterface CmsContextMenu.ContextMenuOpenedListener.ComponentListener; // ComponentListener is used when context menu is extending a component and works in mode where auto opening is disabled.\nInterface CmsContextMenu.ContextMenuOpenedListener.TableListener; // ContextMenuOpenedListener.TableListener sub interface for table related context menus.\nInterface CmsContextMenu.ContextMenuOpenedListener.TreeListener; // Tree listener interface.\nInterface I_CmsContextMenuAction; // Action to perform when a context menu item is clicked.\nInterface I_CmsContextMenuBuilder; // Builds an explorer context menu based on the set of selected resources' IDs.\nInterface I_CmsContextMenuItem; // Interface for workplace context menu items.\nInterface I_CmsContextMenuItemProvider; // Interface for classes which provide context menu items.\nInterface I_CmsHasMenuItemVisibility; // Interface used to check menu item visibility for context menus.\nInterface I_CmsSimpleContextMenuEntry<T>; // Interface for generic context menu entris.\nInterface I_CmsSimpleContextMenuEntry.I_HasCssStyles; // This interface allows special styles for certain entries.\nClass A_CmsSimpleVisibilityCheck; // Abstract superclass for menu item visibility checks.\nClass CmsBlockingLockCheck; // A wrapper context menu action which first checks whether the resources for which the action is executed have any children locked by different users.\nClass CmsContextMenu; // ContextMenu is an extension which can be attached to any Vaadin component to display a popup context menu.\nClass CmsContextMenu.ContextMenuClosedEvent; // ContextMenuClosedEvent is an event fired by the context menu when it's closed.\nClass CmsContextMenu.ContextMenuItemClickEvent; // ContextMenuItemClickEvent is an event produced by the context menu item when it is clicked.\nClass CmsContextMenu.ContextMenuOpenedOnComponentEvent; // ContextMenuOpenedOnComponentEvent is an event fired by the context menu when it's opened from a component.\n", "des": "Contains code for workplace context menu."}
{"index": 1946, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package jms;\n\npackage jms.activemq; // Auto-configuration for ActiveMQ.\npackage jms.artemis; // Auto-configuration for Artemis.\npublic final class DefaultJmsListenerContainerFactoryConfigurer extends Object; // Configure DefaultJmsListenerContainerFactory with sensible defaults.\n@AutoConfiguration @ConditionalOnClass({jakarta.jms.Message.class,org.springframework.jms.core.JmsTemplate.class}) @ConditionalOnBean(jakarta.jms.ConnectionFactory.class) @EnableConfigurationProperties(JmsProperties.class) @Import(org.springframework.boot.autoconfigure.jms.JmsAnnotationDrivenConfiguration.class) public class JmsAutoConfiguration extends Object; // Auto-configuration for Spring JMS.\n@Configuration(proxyBeanMethods=false) protected static class JmsAutoConfiguration.JmsTemplateConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.jms.core.JmsMessagingTemplate.class) @Import(JmsTemplateConfiguration.class) protected static class JmsAutoConfiguration.MessagingTemplateConfiguration extends Object;\npublic class JmsPoolConnectionFactoryFactory extends Object; // Factory to create a JmsPoolConnectionFactory from properties defined in JmsPoolConnectionFactoryProperties.\npublic class JmsPoolConnectionFactoryProperties extends Object; // Configuration properties for connection factory pooling.\n@ConfigurationProperties(prefix=\"spring.jms\") public class JmsProperties extends Object; // Configuration properties for JMS.\npublic static enum JmsProperties.AcknowledgeMode extends Enum<JmsProperties.AcknowledgeMode>; // Translate the acknowledge modes defined on the Session.\npublic static class JmsProperties.Cache extends Object;\npublic static enum JmsProperties.DeliveryMode extends Enum<JmsProperties.DeliveryMode>;\npublic static class JmsProperties.Listener extends Object;\npublic static class JmsProperties.Template extends Object;\n", "des": "Auto-configuration for JMS."}
{"index": 3069, "repo": "spring-ws-core-4.0.5", "code": "package annotation;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Endpoint; // Indicates that an annotated class is an \"Endpoint\" (e.g.\n@Documented @Retention(RUNTIME) @Target({PACKAGE,TYPE,METHOD}) public @interface Namespace; // Sets up a namespace to be used in an @Endpoint method, class, or package.\n@Documented @Retention(RUNTIME) @Target({PACKAGE,TYPE,METHOD}) public @interface Namespaces; // Sets the namespaces to be used in an @Endpoint method, class, or package.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Repeatable(PayloadRoots.class) public @interface PayloadRoot; // Marks an endpoint method as the handler for an incoming request.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface PayloadRoots; // Marks an endpoint method as containing multiple PayloadRoots.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface RequestPayload; // Annotation which indicates that a method parameter should be bound to the request payload.\n@Target(METHOD) @Retention(RUNTIME) @Documented public @interface ResponsePayload; // Annotation which indicates that a method return value should be bound to the response payload.\n@Target(PARAMETER) @Retention(RUNTIME) @Documented public @interface XPathParam; // Indicates that a method parameter should be bound to an XPath expression.\n", "des": "JDK 1.5+ annotations for Spring-WS endpoints."}
{"index": 2286, "repo": "jcl-over-slf4j-2.0.7", "code": "package impl;\n\npublic class NoOpLog extends Object implements Log, Serializable; // Trivial implementation of Log that throws away all messages.\npublic class SimpleLog extends Object implements Log, Serializable; // Simple implementation of Log that sends all enabled log messages, for all defined loggers, to System.err.\npublic class SLF4JLocationAwareLog extends Object implements Log, Serializable; // Implementation of org.apache.commons.logging.Log interface which delegates all processing to a wrapped org.slf4j.Logger instance.\npublic class SLF4JLog extends Object implements Log, Serializable; // Implementation of org.apache.commons.logging.Log interface which delegates all processing to a wrapped org.slf4j.Logger instance.\npublic class SLF4JLogFactory extends LogFactory; // Concrete subclass of LogFactory which always delegates to the org.slf4j.LoggerFactory class.\n", "des": "SLF4J based implementation of commons-logging wrapper APIs."}
{"index": 1050, "repo": "commons-io-2.13.0", "code": "package input;\n\npackage input.buffer; // Provides implementations of buffered input classes, such as CircularBufferInputStream and PeekableInputStream.\nInterface Tailer.RandomAccessResourceBridge; // Bridges access to a resource for random access, normally a file.\nInterface Tailer.Tailable; // A tailable resource like a file.\nInterface TailerListener; // Listener for events from a Tailer.\nClass AbstractCharacterFilterReader; // A filter reader that filters out characters where subclasses decide which characters to filter out.\nClass AutoCloseInputStream; // Proxy stream that closes and discards the underlying stream as soon as the end of input has been reached or when the stream is explicitly closed.\nClass AutoCloseInputStream.Builder; // Builds a new AutoCloseInputStream instance.\nClass BOMInputStream; // This class is used to wrap a stream that includes an encoded ByteOrderMark as its first bytes.\nClass BOMInputStream.Builder; // Builds a new BOMInputStream instance.\nClass BoundedInputStream; // Reads bytes up to a maximum length, if its count goes above that, it stops.\nClass BoundedReader; // A reader that imposes a limit to the number of characters that can be read from an underlying reader, returning EOF when this limit is reached, regardless of state of underlying reader.\nClass BrokenInputStream; // Always throws an IOException from all the InputStream methods where the exception is declared.\nClass BrokenReader; // Always throws an IOException from all the Reader methods where the exception is declared.\nClass BufferedFileChannelInputStream; // InputStream implementation which uses direct buffer to read a file to avoid extra copy of data between Java and native memory which happens when using BufferedInputStream.\nClass BufferedFileChannelInputStream.Builder; // Builds a new BufferedFileChannelInputStream instance.\nClass CharacterFilterReader; // A filter reader that filters out a given character represented as an int code point, handy to remove known junk characters from CSV files for example.\nClass CharacterSetFilterReader; // A filter reader that removes a given set of characters represented as int code points, handy to remove known junk characters from CSV files for example.\nClass CharSequenceInputStream; // Implements an InputStream to read from String, StringBuffer, StringBuilder or CharBuffer.\nClass CharSequenceInputStream.Builder; // Builds a new CharSequenceInputStream instance.\nClass CharSequenceReader; // Reader implementation that can read from String, StringBuffer, StringBuilder or CharBuffer.\n", "des": "Provides implementations of input classes, such as InputStream and Reader."}
{"index": 2821, "repo": "spring-orm-6.0.11", "code": "package persistenceunit;\n\npublic class DefaultPersistenceUnitManager extends Object implements PersistenceUnitManager, org.springframework.context.ResourceLoaderAware, org.springframework.context.weaving.LoadTimeWeaverAware, org.springframework.beans.factory.InitializingBean; // Default implementation of the PersistenceUnitManager interface.\npublic class MutablePersistenceUnitInfo extends Object implements SmartPersistenceUnitInfo; // Spring's base implementation of the JPA PersistenceUnitInfo interface, used to bootstrap an EntityManagerFactory in a container.\npublic interface PersistenceManagedTypes; // Provide the list of managed persistent types that an entity manager should consider.\npublic final class PersistenceManagedTypesScanner extends Object; // Scanner of PersistenceManagedTypes.\npublic interface PersistenceUnitManager; // Interface that defines an abstraction for finding and managing JPA PersistenceUnitInfos.\npublic interface PersistenceUnitPostProcessor; // Callback interface for post-processing a JPA PersistenceUnitInfo.\npublic interface SmartPersistenceUnitInfo extends PersistenceUnitInfo; // Extension of the standard JPA PersistenceUnitInfo interface, for advanced collaboration between Spring's LocalContainerEntityManagerFactoryBean and PersistenceUnitManager implementations.\n", "des": "Internal support for managing JPA persistence units."}
{"index": 1930, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package security;\n\n@AutoConfiguration(after=GraphQlWebFluxAutoConfiguration.class) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webflux.GraphQlHttpHandler.class,org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class}) @ConditionalOnBean(org.springframework.graphql.server.webflux.GraphQlHttpHandler.class) public class GraphQlWebFluxSecurityAutoConfiguration extends Object; // Auto-configuration for enabling Security support for Spring GraphQL with WebFlux.\n@AutoConfiguration(after=GraphQlWebMvcAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({graphql.GraphQL.class,org.springframework.graphql.server.webmvc.GraphQlHttpHandler.class,org.springframework.security.config.annotation.web.configuration.EnableWebSecurity.class}) @ConditionalOnBean(org.springframework.graphql.server.webmvc.GraphQlHttpHandler.class) public class GraphQlWebMvcSecurityAutoConfiguration extends Object; // Auto-configuration for enabling Security support for Spring GraphQL with MVC.\n", "des": "Auto-configuration classes for Security support in Spring GraphQL."}
{"index": 2277, "repo": "spring-data-elasticsearch-5.1.2", "code": "package cluster;\n\npublic class ClusterHealth extends Object; // Information about the cluster health.\npublic static final class ClusterHealth.ClusterHealthBuilder extends Object;\npublic interface ClusterOperations; // Elasticsearch operations on cluster level.\npublic interface ReactiveClusterOperations; // Reactive Elasticsearch operations on cluster level.\n", "des": "Interfaces and classes related to Elasticsearch cluster information and management."}
{"index": 3613, "repo": "lucene-suggest-9.7.0", "code": "package document;\n\nClass Completion50PostingsFormat; // CompletionPostingsFormat for org.apache.lucene.backward_codecs.lucene50.Lucene50PostingsFormat.\nClass Completion84PostingsFormat; // CompletionPostingsFormat for org.apache.lucene.backward_codecs.lucene84.Lucene84PostingsFormat.\nClass Completion90PostingsFormat; // CompletionPostingsFormat for Lucene90PostingsFormat\nClass CompletionAnalyzer; // Wraps an Analyzer to provide additional completion-only tuning (e.g.\nClass CompletionPostingsFormat; // A PostingsFormat which supports document suggestion based on indexed SuggestFields.\nClass CompletionQuery; // Abstract Query that match documents containing terms with a specified prefix filtered by BitsProducer.\nClass CompletionScorer; // Expert: Responsible for executing the query against an appropriate suggester and collecting the results via a collector.\nClass CompletionsTermsReader; // Holder for suggester and field-level info for a suggest field\nClass CompletionTerms; // Wrapped Terms used by SuggestField and ContextSuggestField to access corresponding suggester and their attributes\nClass CompletionTokenStream; // A ConcatenateGraphFilter but we can set the payload and provide access to config options.\nClass CompletionWeight; // Expert: the Weight for CompletionQuery, used to score and explain these queries.\nClass ContextQuery; // A CompletionQuery that matches documents specified by a wrapped CompletionQuery supporting boosting and/or filtering by specified contexts.\nClass ContextSuggestField; // SuggestField which additionally takes in a set of contexts.\nClass FuzzyCompletionQuery; // A CompletionQuery that match documents containing terms within an edit distance of the specified prefix.\nClass NRTSuggester; // NRTSuggester executes Top N search on a weighted FST specified by a CompletionScorer\nClass PrefixCompletionQuery; // A CompletionQuery which takes an Analyzer to analyze the prefix of the query term.\nClass RegexCompletionQuery; // A CompletionQuery which takes a regular expression as the prefix of the query term.\nClass SuggestField; // Field that indexes a string value and a weight as a weighted completion against a named suggester.\nClass SuggestIndexSearcher; // Adds document suggest capabilities to IndexSearcher.\n", "des": "Support for document suggestion"}
{"index": 2834, "repo": "spring-data-r2dbc-3.1.2", "code": "package query;\n\npublic class BoundAssignments extends Object; // Value object representing Assignments with their Bindings.\npublic class BoundCondition extends Object; // Value object representing a Condition with its Bindings.\npublic class QueryMapper extends Object; // Maps CriteriaDefinition and Sort objects considering mapping metadata and dialect-specific conversion.\nprotected static class QueryMapper.Field extends Object; // Value object to represent a field and its meta-information.\nprotected static class QueryMapper.MetadataBackedField extends QueryMapper.Field; // Extension of QueryMapper.Field to be backed with mapping metadata.\npublic class UpdateMapper extends QueryMapper; // A subclass of QueryMapper that maps Update to update assignments.\n", "des": "Query and update support."}
{"index": 1207, "repo": "commons-math3-3.6.1", "code": "package descriptive;\n\npackage descriptive.moment; // Summary statistics based on moments.\npackage descriptive.rank; // Summary statistics based on ranks.\npackage descriptive.summary; // Other summary statistics.\nInterface StatisticalMultivariateSummary; // Reporting interface for basic multivariate statistics.\nInterface StatisticalSummary; // Reporting interface for basic univariate statistics.\nInterface StorelessUnivariateStatistic; // Extends the definition of UnivariateStatistic with StorelessUnivariateStatistic.increment(double) and StorelessUnivariateStatistic.incrementAll(double[]) methods for adding values and updating internal state.\nInterface UnivariateStatistic; // Base interface implemented by all statistics.\nInterface WeightedEvaluation; // Weighted evaluation for statistics.\nClass AbstractStorelessUnivariateStatistic; // Abstract implementation of the StorelessUnivariateStatistic interface.\nClass AbstractUnivariateStatistic; // Abstract base class for all implementations of the UnivariateStatistic interface.\nClass AggregateSummaryStatistics; // An aggregator for SummaryStatistics from several data sets or data set partitions.\nClass DescriptiveStatistics; // Maintains a dataset of values of a single variable and computes descriptive statistics based on stored data.\nClass MultivariateSummaryStatistics; // Computes summary statistics for a stream of n-tuples added using the addValue method.\nClass StatisticalSummaryValues; // Value object representing the results of a univariate statistical summary.\nClass SummaryStatistics; // Computes summary statistics for a stream of data values added using the addValue method.\nClass SynchronizedDescriptiveStatistics; // Implementation of DescriptiveStatistics that is safe to use in a multithreaded environment.\nClass SynchronizedMultivariateSummaryStatistics; // Implementation of MultivariateSummaryStatistics that is safe to use in a multithreaded environment.\nClass SynchronizedSummaryStatistics; // Implementation of SummaryStatistics that is safe to use in a multithreaded environment.\n", "des": "Generic univariate summary statistic objects."}
{"index": 927, "repo": "commons-compress-1.23.0", "code": "package xz;\n\nClass XZCompressorInputStream; // XZ decompressor.\nClass XZCompressorOutputStream; // XZ compressor.\nClass XZUtils; // Utility code for the xz compression format.\n", "des": "Provides stream classes for compressing and decompressing streams using the XZ algorithm."}
{"index": 166, "repo": "ignite-core-2.15.0", "code": "package handlers;\n\npackage handlers.auth; // REST authentication command.\npackage handlers.cache; // REST in-memory data grid commands.\npackage handlers.redis; // Contains Redis protocol commands.\npackage handlers.top; // REST topology commands.\npackage handlers.user; // REST user commands.\npackage handlers.version; // REST version command.\nInterface GridRestCommandHandler; // Command handler.\nClass GridRestCommandHandlerAdapter; // Abstract command handler.\n", "des": "REST commands handlers."}
{"index": 3648, "repo": "solr-core-9.3.0", "code": "package core;\n\npackage core.backup; // Core classes for Solr's Backup/Restore functionality\npackage core.snapshots; // Core classes for Solr's persistent snapshots functionality\nInterface BlobRepository.Decoder<T>;\nInterface CachingDirectoryFactory.CloseListener;\nInterface CloseHook; // Used to request notification when the core is closed.\nInterface ConfigSetService.ConfigResource;\nInterface CoresLocator; // Manage the discovery and persistence of core definitions across Solr restarts\nInterface Diagnostics.Callable;\nInterface ShutdownAwareDirectory; // CachingDirectoryFactory will call this method rather than Directory.close() on shutdown if a Directory implements this interface.\nInterface SolrCore.RawWriter;\nInterface SolrEventListener;\nInterface SolrInfoBean; // Interface for getting various ui friendly strings for use by objects which are 'pluggable' to make server administration easier.\nClass AbstractSolrEventListener;\nClass BlobRepository; // The purpose of this class is to store the Jars loaded in memory and to keep only one copy of the Jar in a single node.\nClass BlobRepository.BlobContent<T>;\nClass BlobRepository.BlobContentRef<T>;\nClass ByteBuffersDirectoryFactory; // Factory to instantiate ByteBuffersDirectory\nClass CachingDirectoryFactory; // A DirectoryFactory impl base class for caching Directory instances per path.\nClass CachingDirectoryFactory.CacheValue;\nClass CancellableQueryTracker; // Tracks metadata for active queries and provides methods for access\nClass CloudConfig;\nClass CloudConfig.CloudConfigBuilder;\nClass ClusterSingletons; // Helper class to manage the initial registration of ClusterSingleton plugins and to track the changes in loaded plugins in ContainerPluginsRegistry.\nClass CodecFactory; // Factory for plugging in a custom Codec\nClass ConfigOverlay; // This class encapsulates the config overlay json file.\nClass ConfigSet; // Stores a core's configuration in the form of a SolrConfig and IndexSchema.\nClass ConfigSetProperties; // Utility methods for reading configSet properties.\nClass ConfigSetService; // Service class used by the CoreContainer to load ConfigSets for use in SolrCore creation.\nClass CoreContainer;\nClass CoreContainer.CoreLoadFailure;\nClass CoreDescriptor; // Metadata about a SolrCore.\nClass CorePropertiesLocator; // Persists CoreDescriptors as properties files\n", "des": "Core classes implementing Solr internals and the management of SolrCores"}
{"index": 3318, "repo": "opencms-core-15.0", "code": "package xmlsitemap;\n\nClass CmsDetailPageDuplicateEliminatingSitemapGenerator; // Sitemap generator class which tries to eliminate duplicate detail pages for the same content and locale.\nClass CmsPathIncludeExcludeSet; // A helper class used for calculating which paths need to be included or excluded from the XML sitemap generation.\nClass CmsUpdateXmlSitemapCacheJob; // Scheduled job for updating the XML sitemap cache.\nClass CmsXmlSeoConfiguration; // Configuration bean which represents the options which are configurable from a 'seo-file' resource.\nClass CmsXmlSitemapActionElement; // Action element class for displaying the XML sitemap from a JSP.\nClass CmsXmlSitemapCache; // Cache for XML sitemaps.\nClass CmsXmlSitemapGenerator; // Class for generating XML sitemaps for SEO purposes, as described in http://www.sitemaps.org/protocol.html.\nClass CmsXmlSitemapUrlBean; // A bean which represents an entry in an XML sitemap for SEO purposes.\n", "des": "Contains classes related to XML sitemap generation."}
{"index": 3884, "repo": "solr-solrj-9.3.0", "code": "package beans;\n\nClass DocumentObjectBinder; // A class to map objects to and from solr documents.\nClass BindingException;\nAnnotation Type Field; // This class can be used to annotate a field or a setter an any class and SolrJ would help you convert to SolrInputDocument and from SolrDocument\n", "des": "Annotation based mapping of client objects to Solr documents."}
{"index": 592, "repo": "org.apache.karaf.main-2.4.4", "code": "package debug;\n\nInterface DebugOptions; // Used to get debug options settings and creating a new DebugTrace instance for a bundle to use for dynamic tracing.\nInterface DebugOptionsListener; // A debug options listener is notified whenever one of its plug-in option-path entries is changed.\nInterface DebugTrace; // A DebugTrace is used to record debug trace statements, based on the current option settings in a corresponding DebugOptions class.\n", "des": "Provides the DebugOptions service."}
{"index": 2497, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package servlet;\n\npublic final class EndpointRequest extends Object; // Factory that can be used to create a RequestMatcher for actuator endpoint locations.\npublic static final class EndpointRequest.EndpointRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<org.springframework.web.context.WebApplicationContext>; // The request matcher used to match against actuator endpoints.\npublic static final class EndpointRequest.LinksRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<org.springframework.web.context.WebApplicationContext>; // The request matcher used to match against the links endpoint.\n@AutoConfiguration(before=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration.class, after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class,WebEndpointAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration.class,org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnDefaultWebSecurity public class ManagementWebSecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security when actuator is on the classpath.\n@ManagementContextConfiguration(proxyBeanMethods=false) @ConditionalOnClass(org.springframework.security.web.util.matcher.RequestMatcher.class) @ConditionalOnWebApplication(type=SERVLET) public class SecurityRequestMatchersManagementContextConfiguration extends Object; // ManagementContextConfiguration that configures the appropriate RequestMatcherProvider.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(org.glassfish.jersey.server.ResourceConfig.class) @ConditionalOnMissingClass(\"org.springframework.web.servlet.DispatcherServlet\") @ConditionalOnBean(org.springframework.boot.autoconfigure.web.servlet.JerseyApplicationPath.class) public static class SecurityRequestMatchersManagementContextConfiguration.JerseyRequestMatcherConfiguration extends Object;\n", "des": "Auto-configuration for actuator security using Spring MVC."}
{"index": 555, "repo": "hadoop-common-3.3.4", "code": "package protocolPB;\n\nClass PBHelper; // Utility methods aiding conversion of fs data structures.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 945, "repo": "spring-ws-3.0.10.RELEASE", "code": "package config;\n\nClass WebServicesNamespaceHandler; // NamespaceHandler for the 'web-services' namespace.\n", "des": "Provides an namespace handler for the Spring Web Services namespace."}
{"index": 1367, "repo": "wicket-devutils-10.0.0-M1", "code": "package inspector;\n\npublic final class ApplicationView extends DevUtilsPanel; // A Wicket panel that shows interesting information about a given Wicket session.\npublic final class EnhancedPageView extends org.apache.wicket.markup.html.panel.GenericPanel<org.apache.wicket.Page>; // Enhanced PageView which displays all Components and Behaviors of a Page in a TableTree representation.\npublic final class InspectorPage extends DevUtilsPage; // A page that shows interesting attributes of the Wicket environment, including the current session and the component tree for the current page.\npublic class LiveSessionsPage extends DevUtilsPage;\npublic class RenderPerformanceListener extends Object implements org.apache.wicket.application.IComponentInstantiationListener; // A listener that adds a special Behavior that measures the time needed by a component to render itself.\npublic class RequestsPage extends DevUtilsPage;\npublic class SessionSizeModel extends Object implements org.apache.wicket.model.IModel<org.apache.wicket.util.lang.Bytes>; // Calculates\npublic final class SessionView extends DevUtilsPanel; // A Wicket panel that shows interesting information about a given Wicket session.\n", "des": "Classes that make debugging Wicket HTML applications easier."}
{"index": 396, "repo": "amqp-client-5.18.0", "code": "package json;\n\nInterface JSONSerializable; // Use a third-party JSON library, e.g.\nClass JSONReader; // Use a third-party JSON library, e.g.\nClass JSONUtil; // Utility methods for working with JSON objects in Java.\nClass JSONWriter; // Use a third-party JSON library, e.g.\n", "des": "JSON reader/writer and utility classes."}
{"index": 537, "repo": "commons-vfs2-2.9.0", "code": "package tasks;\n\nClass AbstractSyncTask; // An abstract file synchronization task.\nClass AbstractSyncTask.SourceInfo; // Information about a source file.\nClass CopyTask; // An Ant task that copies matching files.\nClass DeleteTask; // An Ant task that deletes matching files.\nClass MkdirTask; // An Ant task that creates a directory.\nClass MoveTask; // An Ant task that moves matching files.\nClass ShowFileTask; // An Ant task that writes the details of a file to Ant's log.\nClass SyncTask; // A task that synchronises the destination folder to look exactly like the source folder (or folders).\nClass VfsTask; // Base class for the VFS Ant tasks.\n", "des": "The VFS Ant Tasks."}
{"index": 759, "repo": "lucene-analyzers-common-8.11.2", "code": "package br;\n\nClass BrazilianAnalyzer; // Analyzer for Brazilian Portuguese language.\nClass BrazilianStemFilter; // A TokenFilter that applies BrazilianStemmer.\nClass BrazilianStemFilterFactory; // Factory for BrazilianStemFilter.\nClass BrazilianStemmer; // A stemmer for Brazilian Portuguese words.\n", "des": "Analyzer for Brazilian Portuguese."}
{"index": 2558, "repo": "pulsar-common-3.0.0", "code": "package nar;\n\npublic class FileUtils extends Object; // A utility class containing a few useful static methods to do typical IO operations.\npublic class NarClassLoader extends URLClassLoader; // A ClassLoader for loading NARs (NiFi archives).\npublic class NarClassLoaderBuilder extends Object; // NarClassLoader builder class.\npublic class NarUnpacker extends Object; // Helper class to unpack NARs.\n", "des": "Classes to work with NARs."}
{"index": 1785, "repo": "spring-integration-file-6.1.2", "code": "package locking;\n\npublic abstract class AbstractFileLockerFilter extends AbstractFileListFilter<File> implements FileLocker; // Convenience base class for implementing FileLockers that check a lock before accepting a file.\npublic class NioFileLocker extends AbstractFileLockerFilter; // File locking strategy that uses java.nio.\n", "des": "Provides classes supporting file locking."}
{"index": 899, "repo": "commons-jcs3-core-3.1", "code": "package memory;\n\npackage memory.lru; // The primary memory plugin using a 'least recently used' removal policy.\npackage memory.mru; // A memory plugin implemented using a 'most recently used' removal policy.\npackage memory.soft; // A memory plugin implemented using soft references.\nClass AbstractDoubleLinkedListMemoryCache<K,V>; // This class contains methods that are common to memory caches using the double linked list, such as the LRU, MRU, FIFO, and LIFO caches.\nClass AbstractMemoryCache<K,V>; // This base includes some common code for memory caches.\n", "des": "Parent package for memory type plugins."}
{"index": 3143, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ExpandingCollectionQuerySpace; // Describes a collection query space that allows adding joins with other query spaces; used while building a CollectionQuerySpace.\nInterface ExpandingCompositeQuerySpace; // Describes a composite query space that allows adding joins with other query spaces; used while building a CompositeQuerySpace.\nInterface ExpandingEntityIdentifierDescription; // Describes an entity identifier description that allows adding fetches; used while building a EntityIdentifierDescription.\nInterface ExpandingEntityQuerySpace; // Describes an entity query space that allows adding joins with other query spaces; used while building an EntityQuerySpace.\nInterface ExpandingFetchSource; // Describes the internal contract for things which can contain fetches.\nInterface ExpandingQuerySpace; // Describes a query space that allows adding joins with other query spaces; used while building a QuerySpace.\nInterface ExpandingQuerySpaces; // Models a collection of QuerySpace references and exposes the ability to create an ExpandingQuerySpace for \"returns\" and fetches; used when building a load plan.\nInterface LoadPlanBuildingAssociationVisitationStrategy; // Specialized AssociationVisitationStrategy implementation for building LoadPlan instances.\nInterface LoadPlanBuildingContext; // Provides access to context needed in building a LoadPlan.\nClass LoadPlanTreePrinter; // Prints a LoadPlan graph and its QuerySpaces graph as tree structures.\nClass MetamodelDrivenLoadPlanBuilder; // A metadata-driven builder of LoadPlans.\nClass QuerySpaceTreePrinter; // Prints a QuerySpaces graph as a tree structure.\nClass ReturnGraphTreePrinter; // Prints a Return graph as a tree structure.\nClass TreePrinterHelper; // A singleton helper class for printing tree structures using indentation.\n", "des": "Defines the SPI for building a metamodel-driven LoadPlan"}
{"index": 504, "repo": "beam-sdks-java-core-2.49.0", "code": "package common;\n\nInterface Reiterable<T>; // An Iterable that returns Reiterator iterators.\nInterface Reiterator<T>; // An Iterator with the ability to copy its iteration state.\nClass ElementByteSizeObservableIterable<V,InputT extends ElementByteSizeObservableIterator<V>>; // An abstract class used for iterables that notify observers about size in bytes of their elements, as they are being iterated over.\nClass ElementByteSizeObservableIterator<V>; // An abstract class used for iterators that notify observers about size in bytes of their elements, as they are being iterated over.\nClass ElementByteSizeObserver; // An observer that gets notified when additional bytes are read and/or used.\nClass ReflectHelpers; // Utilities for working with with Classes and Methods.\nClass ReflectHelpers.ObjectsClassComparator; // A Comparator that uses the object's class' canonical name to compare them.\n", "des": "Defines utilities shared by multiple PipelineRunner implementations."}
{"index": 3631, "repo": "lucene-misc-9.7.0", "code": "package search;\n\nClass DiversifiedTopDocsCollector; // A TopDocsCollector that controls diversity in results by ensuring no more than maxHitsPerKey results from a common source are collected in the final results.\nClass DiversifiedTopDocsCollector.ScoreDocKey; // An extension to ScoreDoc that includes a key used for grouping purposes\nClass DocValuesStats<T>; // Holds statistics for a DocValues field.\nClass DocValuesStats.DoubleDocValuesStats; // Holds DocValues statistics for a numeric field storing double values.\nClass DocValuesStats.LongDocValuesStats; // Holds DocValues statistics for a numeric field storing long values.\nClass DocValuesStats.NumericDocValuesStats<T extends Number>; // Holds statistics for a numeric DocValues field.\nClass DocValuesStats.SortedDocValuesStats; // Holds statistics for a sorted DocValues field.\nClass DocValuesStats.SortedDoubleDocValuesStats; // Holds DocValues statistics for a sorted-numeric field storing double values.\nClass DocValuesStats.SortedLongDocValuesStats; // Holds DocValues statistics for a sorted-numeric field storing long values.\nClass DocValuesStats.SortedNumericDocValuesStats<T extends Number>; // Holds statistics for a sorted-numeric DocValues field.\nClass DocValuesStats.SortedSetDocValuesStats; // Holds statistics for a sorted-set DocValues field.\nClass DocValuesStatsCollector; // A Collector which computes statistics for a DocValues field.\nClass MemoryAccountingBitsetCollector; // Bitset collector which supports memory tracking\n", "des": "Misc search implementations."}
{"index": 2347, "repo": "spring-boot-3.1.1", "code": "package tomcat;\n\npublic interface ConfigurableTomcatWebServerFactory extends ConfigurableWebServerFactory; // ConfigurableWebServerFactory for Tomcat-specific features.\npublic class ConnectorStartFailedException extends WebServerException; // A ConnectorStartFailedException is thrown when a Tomcat Connector fails to start, for example due to a port clash or incorrect SSL configuration.\n@FunctionalInterface public interface TomcatConnectorCustomizer; // Callback interface that can be used to customize a Tomcat Connector.\n@FunctionalInterface public interface TomcatContextCustomizer; // Callback interface that can be used to customize a Tomcat Context.\npublic class TomcatEmbeddedWebappClassLoader extends org.apache.catalina.loader.ParallelWebappClassLoader; // Extension of Tomcat's ParallelWebappClassLoader that does not consider the system classloader.\n@FunctionalInterface public interface TomcatProtocolHandlerCustomizer<T extends org.apache.coyote.ProtocolHandler>; // Callback interface that can be used to customize the ProtocolHandler on the Connector.\npublic class TomcatReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableTomcatWebServerFactory; // ReactiveWebServerFactory that can be used to create a TomcatWebServer.\npublic class TomcatServletWebServerFactory extends AbstractServletWebServerFactory implements ConfigurableTomcatWebServerFactory, org.springframework.context.ResourceLoaderAware; // AbstractServletWebServerFactory that can be used to create TomcatWebServers.\npublic class TomcatWebServer extends Object implements WebServer; // WebServer that can be used to control a Tomcat web server.\n", "des": "Embedded reactive and servlet web server implementations backed by Tomcat."}
{"index": 3734, "repo": "lucene-queryparser-9.7.0", "code": "package nodes;\n\nInterface FieldableNode; // A query node implements FieldableNode interface to indicate that its children and itself are associated to a specific field.\nInterface FieldValuePairQueryNode<T>; // This interface should be implemented by QueryNode that holds a field and an arbitrary value.\nInterface QueryNode; // A QueryNode is a interface implemented by all nodes on a QueryNode tree.\nInterface RangeQueryNode<T extends FieldValuePairQueryNode<?>>; // This interface should be implemented by a QueryNode that represents some kind of range query.\nInterface TextableQueryNode; // Interface for a node that has text as a CharSequence\nInterface ValueQueryNode<T>; // This interface should be implemented by QueryNode that holds an arbitrary value.\nClass AndQueryNode; // A AndQueryNode represents an AND boolean operation performed on a list of nodes.\nClass AnyQueryNode; // A AnyQueryNode represents an ANY operator performed on a list of nodes.\nClass BooleanQueryNode; // A BooleanQueryNode represents a list of elements which do not have an explicit boolean operator defined between them.\nClass BoostQueryNode; // A BoostQueryNode boosts the QueryNode tree which is under this node.\nClass DeletedQueryNode; // A DeletedQueryNode represents a node that was deleted from the query node tree.\nClass FieldQueryNode; // A FieldQueryNode represents a element that contains field/text tuple\nClass FuzzyQueryNode; // A FuzzyQueryNode represents a element that contains field/text/similarity tuple\nClass GroupQueryNode; // A GroupQueryNode represents a location where the original user typed real parenthesis on the query string.\nClass MatchAllDocsQueryNode; // A MatchAllDocsQueryNode indicates that a query node tree or subtree will match all documents if executed in the index.\nClass MatchNoDocsQueryNode; // A MatchNoDocsQueryNode indicates that a query node tree or subtree will not match any documents if executed in the index.\nClass ModifierQueryNode; // A ModifierQueryNode indicates the modifier value (+,-,?,NONE) for each term on the query string.\nClass NoTokenFoundQueryNode; // A NoTokenFoundQueryNode is used if a term is convert into no tokens by the tokenizer/lemmatizer/analyzer (null).\n", "des": "Query nodes commonly used by query parser implementations."}
{"index": 561, "repo": "hadoop-common-3.3.4", "code": "package avro;\n\nInterface AvroReflectSerializable; // Tag interface for Avro 'reflect' serializable classes.\nClass AvroRecord;\nClass AvroRecord.Builder; // RecordBuilder for AvroRecord instances.\nClass AvroReflectSerialization; // Serialization for Avro Reflect classes.\nClass AvroSerialization<T>; // Base class for providing serialization to Avro types.\nClass AvroSpecificSerialization; // Serialization for Avro Specific classes.\n", "des": "This package provides Avro serialization in Hadoop."}
{"index": 2431, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package expose;\n\npublic enum EndpointExposure extends Enum<EndpointExposure>; // Technologies that can be used to expose an endpoint.\npublic class IncludeExcludeEndpointFilter<E extends org.springframework.boot.actuate.endpoint.ExposableEndpoint<?>> extends Object implements org.springframework.boot.actuate.endpoint.EndpointFilter<E>; // EndpointFilter that will filter endpoints based on include and exclude patterns.\n", "des": "Endpoint exposure logic used for auto-configuration and conditions."}
{"index": 1206, "repo": "commons-math3-3.6.1", "code": "package correlation;\n\nClass Covariance; // Computes covariances for pairs of arrays or columns of a matrix.\nClass KendallsCorrelation; // Implementation of Kendall's Tau-b rank correlation.\nClass PearsonsCorrelation; // Computes Pearson's product-moment correlation coefficients for pairs of arrays or columns of a matrix.\nClass SpearmansCorrelation; // Spearman's rank correlation.\nClass StorelessCovariance; // Covariance implementation that does not require input data to be stored in memory.\n", "des": "Correlations/Covariance computations."}
{"index": 714, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "package sftp;\n\nClass Sftp;\nClass SftpInboundChannelAdapterSpec; // A RemoteFileInboundChannelAdapterSpec for a SftpInboundFileSynchronizingMessageSource.\nClass SftpMessageHandlerSpec;\nClass SftpOutboundGatewaySpec;\n", "des": "Provides SFTP Components support for Spring Integration Java DSL."}
{"index": 2306, "repo": "spring-boot-3.1.1", "code": "package analyzer;\n\npublic abstract class AbstractInjectionFailureAnalyzer<T extends Throwable> extends AbstractFailureAnalyzer<T>; // Abstract base class for a FailureAnalyzer that handles some kind of injection failure.\npublic class BeanNotOfRequiredTypeFailureAnalyzer extends AbstractFailureAnalyzer<org.springframework.beans.factory.BeanNotOfRequiredTypeException>; // An AbstractFailureAnalyzer that performs analysis of failures caused by a BeanNotOfRequiredTypeException.\n", "des": "Internal FailureAnalyzer implementations."}
{"index": 797, "repo": "lucene-analyzers-common-8.11.2", "code": "package pattern;\n\nClass PatternCaptureGroupFilterFactory; // Factory for PatternCaptureGroupTokenFilter.\nClass PatternCaptureGroupTokenFilter; // CaptureGroup uses Java regexes to emit multiple tokens - one for each capture group in one or more patterns.\nClass PatternReplaceCharFilter; // CharFilter that uses a regular expression for the target of replace string.\nClass PatternReplaceCharFilterFactory; // Factory for PatternReplaceCharFilter.\nClass PatternReplaceFilter; // A TokenFilter which applies a Pattern to each token in the stream, replacing match occurrences with the specified replacement string.\nClass PatternReplaceFilterFactory; // Factory for PatternReplaceFilter.\nClass PatternTokenizer; // This tokenizer uses regex pattern matching to construct distinct tokens for the input stream.\nClass PatternTokenizerFactory; // Factory for PatternTokenizer.\nClass PatternTypingFilter; // Set a type attribute to a parameterized value when tokens are matched by any of a several regex patterns.\nClass PatternTypingFilter.PatternTypingRule; // Value holding class for pattern typing rules.\nClass PatternTypingFilterFactory; // Provides a filter that will analyze tokens with the analyzer from an arbitrary field type.\nClass SimplePatternSplitTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternSplitTokenizerFactory; // Factory for SimplePatternSplitTokenizer, for producing tokens by splitting according to the provided regexp.\nClass SimplePatternTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternTokenizerFactory; // Factory for SimplePatternTokenizer, for matching tokens based on the provided regexp.\n", "des": "Set of components for pattern-based (regex) analysis."}
{"index": 2972, "repo": "pulsar-broker-3.0.0", "code": "package impl;\n\npublic class InMemTransactionBufferProvider extends Object implements TransactionBufferProvider; // A provider that provides in-memory implementations of TransactionBuffer.\npublic class InMemTransactionBufferReader extends Object implements TransactionBufferReader; // A TransactionBufferReader implementation that reads entries from InMemTransactionBuffer.\npublic class SingleSnapshotAbortedTxnProcessorImpl extends Object implements AbortedTxnProcessor;\npublic class SnapshotSegmentAbortedTxnProcessorImpl extends Object implements AbortedTxnProcessor;\npublic static enum SnapshotSegmentAbortedTxnProcessorImpl.PersistentWorker.OperationType extends Enum<SnapshotSegmentAbortedTxnProcessorImpl.PersistentWorker.OperationType>;\npublic class TopicTransactionBuffer extends TopicTransactionBufferState implements TransactionBuffer, io.netty.util.TimerTask; // Transaction buffer based on normal persistent topic.\npublic static class TopicTransactionBuffer.TopicTransactionBufferRecover extends Object implements Runnable;\npublic class TopicTransactionBufferProvider extends Object implements TransactionBufferProvider; // A provider that provides topic implementations of TransactionBuffer.\npublic interface TopicTransactionBufferRecoverCallBack;\npublic abstract class TopicTransactionBufferState extends Object; // The implement of topic transaction buffer state.\npublic static enum TopicTransactionBufferState.State extends Enum<TopicTransactionBufferState.State>; // The state of the topicTransactionBuffer TopicTransactionBuffer.\npublic class TransactionBufferClientImpl extends Object implements org.apache.pulsar.client.api.transaction.TransactionBufferClient; // The implementation of TransactionBufferClient.\npublic final class TransactionBufferClientStatsImpl extends Object implements TransactionBufferClientStats;\npublic class TransactionBufferDisable extends Object implements TransactionBuffer; // Transaction buffer disable.\npublic class TransactionBufferHandlerImpl extends Object implements TransactionBufferHandler;\npublic static final class TransactionBufferHandlerImpl.OpRequestSend extends Object;\npublic class TransactionEntryImpl extends Object implements TransactionEntry; // A simple implementation of TransactionEntry.\n", "des": "The implementation of a transaction buffer."}
{"index": 1234, "repo": "spring-hateoas-2.1.2", "code": "package hal;\n\npackage hal.forms; // HAL-FORMS extension media type.\npublic abstract class CollectionModelMixin<T> extends CollectionModel<T>; // Custom mixin to to render collection content as _embedded.\npublic interface CurieProvider; // API to provide HAL curie information for links.\npublic class DefaultCurieProvider extends Object implements CurieProvider; // Default implementation of CurieProvider rendering a single configurable UriTemplate based curie.\nprotected static class DefaultCurieProvider.Curie extends Link; // Value object to get the curie Link rendered in JSON.\npublic class HalConfiguration extends Object; // HAL specific configuration.\npublic static enum HalConfiguration.RenderSingleLinks extends Enum<HalConfiguration.RenderSingleLinks>; // Configuration option how to render single links of a given LinkRelation.\npublic class HalLinkDiscoverer extends JsonPathLinkDiscoverer; // LinkDiscoverer implementation based on HAL link structure.\npublic class HalLinkRelation extends Object implements LinkRelation, MessageSourceResolvable; // Value object for HAL based LinkRelation, i.e. a relation that can be curied.\npublic static interface HalLinkRelation.HalLinkRelationBuilder; // Simple builder interface to easily create multiple HalLinkRelations for a single curie.\n@Configuration(proxyBeanMethods=false) public class HalMediaTypeConfiguration extends Object implements HypermediaMappingInformation; // Spring configuration to set up HAL support.\npublic class HalModelBuilder extends Object; // Builder API to create complex HAL representations exposing a HAL idiomatic API.\npublic static interface HalModelBuilder.PreviewBuilder;\npublic class Jackson2HalModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson 2 module implementation to render Link and RepresentationModel instances in HAL compatible JSON.\npublic static class Jackson2HalModule.EmbeddedMapper extends Object; // Helper to easily map embedded resources and find out whether they were curied.\npublic static class Jackson2HalModule.HalHandlerInstantiator extends ConfigurableHandlerInstantiator; // HandlerInstantiator to create HAL-specific serializers, deserializers etc.\n", "des": "HAL-specific extensions, SPIs and Jackson customizations."}
{"index": 2190, "repo": "spring-security-web-6.1.2", "code": "package jackson2;\n\npublic class WebJackson2Module extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson module for spring-security-web.\npublic class WebServletJackson2Module extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson module for spring-security-web related to servlet.\n", "des": "Mix-in classes to provide Jackson serialization support."}
{"index": 1812, "repo": "spring-aop-6.0.11", "code": "package target;\n\npackage target.dynamic; // Support for dynamic, refreshable TargetSource implementations for use with Spring AOP.\npublic abstract class AbstractBeanFactoryBasedTargetSource extends Object implements TargetSource, org.springframework.beans.factory.BeanFactoryAware, Serializable; // Base class for TargetSource implementations that are based on a Spring BeanFactory, delegating to Spring-managed bean instances.\npublic abstract class AbstractLazyCreationTargetSource extends Object implements TargetSource; // TargetSource implementation that will lazily create a user-managed object.\npublic abstract class AbstractPoolingTargetSource extends AbstractPrototypeBasedTargetSource implements PoolingConfig, org.springframework.beans.factory.DisposableBean; // Abstract base class for pooling TargetSource implementations which maintain a pool of target instances, acquiring and releasing a target object from the pool for each method invocation.\npublic abstract class AbstractPrototypeBasedTargetSource extends AbstractBeanFactoryBasedTargetSource; // Base class for dynamic TargetSource implementations that create new prototype bean instances to support a pooling or new-instance-per-invocation strategy.\npublic class CommonsPool2TargetSource extends AbstractPoolingTargetSource implements org.apache.commons.pool2.PooledObjectFactory<Object>; // TargetSource implementation that holds objects in a configurable Apache Commons2 Pool.\npublic final class EmptyTargetSource extends Object implements TargetSource, Serializable; // Canonical TargetSource when there is no target (or just the target class known), and behavior is supplied by interfaces and advisors only.\npublic class HotSwappableTargetSource extends Object implements TargetSource, Serializable; // TargetSource implementation that caches a local target object, but allows the target to be swapped while the application is running.\npublic class LazyInitTargetSource extends AbstractBeanFactoryBasedTargetSource; // TargetSource that lazily accesses a singleton bean from a BeanFactory.\npublic interface PoolingConfig; // Config interface for a pooling target source.\npublic class PrototypeTargetSource extends AbstractPrototypeBasedTargetSource; // TargetSource implementation that creates a new instance of the target bean for each request, destroying each instance on release (after each request).\npublic class SimpleBeanTargetSource extends AbstractBeanFactoryBasedTargetSource; // Simple TargetSource implementation, freshly obtaining the specified target bean from its containing Spring BeanFactory.\n", "des": "Various TargetSource implementations for use with Spring AOP."}
{"index": 2557, "repo": "pulsar-common-3.0.0", "code": "package naming;\n\npublic class Constants extends Object; // Definition of constants.\npublic class Metadata extends Object; // Validator for metadata configuration.\npublic class NamedEntity extends Object;\npublic class NamespaceName extends Object implements ServiceUnitId; // Parser of a value from the namespace field provided in configuration.\npublic interface ServiceUnitId; // Basic interface for service unit's identification.\npublic class SystemTopicNames extends Object; // Encapsulate the parsing of the completeTopicName name.\npublic class TopicName extends Object implements ServiceUnitId; // Encapsulate the parsing of the completeTopicName name.\n", "des": "Classes to work different configuration values."}
{"index": 928, "repo": "commons-compress-1.23.0", "code": "package z;\n\nClass ZCompressorInputStream; // Input stream that decompresses .Z files.\n", "des": "Provides stream classes for decompressing streams using the \"compress\" algorithm used to write .Z files."}
{"index": 1602, "repo": "spring-websocket-6.0.11", "code": "package frame;\n\npublic abstract class AbstractSockJsMessageCodec extends Object implements SockJsMessageCodec; // A base class for SockJS message codec that provides an implementation of AbstractSockJsMessageCodec.encode(String[]).\npublic class DefaultSockJsFrameFormat extends Object implements SockJsFrameFormat; // A default implementation of SockJsFrameFormat that relies on String.format(String, Object...)..\npublic class Jackson2SockJsMessageCodec extends AbstractSockJsMessageCodec; // A Jackson 2.x codec for encoding and decoding SockJS messages.\npublic class SockJsFrame extends Object; // Represents a SockJS frame.\npublic interface SockJsFrameFormat; // Applies a transport-specific format to the content of a SockJS frame resulting in a content that can be written out.\npublic enum SockJsFrameType extends Enum<SockJsFrameType>; // SockJS frame types.\npublic interface SockJsMessageCodec; // Encode and decode messages to and from a SockJS message frame, essentially an array of JSON-encoded messages.\n", "des": "Support classes for creating SockJS frames including the encoding and decoding of SockJS message frames."}
{"index": 1473, "repo": "spring-boot-configuration-processor-3.1.1", "code": "package metadata;\n\npublic class ConfigurationMetadata extends Object; // Configuration meta-data.\npublic class InvalidConfigurationMetadataException extends RuntimeException; // Thrown to indicate that some meta-data is invalid.\npublic class ItemDeprecation extends Object; // Describe an item deprecation.\npublic class ItemHint extends Object implements Comparable<ItemHint>; // Provide hints on an ItemMetadata.\npublic static class ItemHint.ValueHint extends Object; // A hint for a value.\npublic static class ItemHint.ValueProvider extends Object; // A value provider.\npublic final class ItemMetadata extends Object implements Comparable<ItemMetadata>; // A group or property meta-data item from some ConfigurationMetadata.\npublic static enum ItemMetadata.ItemType extends Enum<ItemMetadata.ItemType>; // The item type.\npublic class JsonMarshaller extends Object; // Marshaller to write ConfigurationMetadata as JSON.\n", "des": "The configuration properties meta-data model and JSON writing support."}
{"index": 2297, "repo": "spring-boot-3.1.1", "code": "package logging;\n\npublic class LoggingApplicationListener extends Object implements org.springframework.context.event.GenericApplicationListener; // An ApplicationListener that configures the LoggingSystem.\n", "des": "Logging integration with Spring's Application Context."}
{"index": 1039, "repo": "hadoop-aws-3.3.6", "code": "package tools;\n\nInterface MarkerToolOperations; // Operations which must be offered by the store for MarkerTool.\nClass MarkerTool; // Audit an S3 bucket for directory markers.\nClass MarkerTool.MarkerPurgeSummary; // Result of a call of MarkerTool.purgeMarkers(DirMarkerTracker, int); included in MarkerTool.ScanResult so must share visibility.\nClass MarkerTool.ScanArgs; // Arguments for the scan.\nClass MarkerTool.ScanArgsBuilder; // Builder of the scan arguments.\nClass MarkerTool.ScanResult; // Result of the scan operation.\nClass MarkerToolOperationsImpl; // Implement the marker tool operations by forwarding to the OperationCallbacks instance provided in the constructor.\n", "des": "S3A Command line tools independent of S3Guard."}
{"index": 520, "repo": "commons-vfs2-2.9.0", "code": "package gzip;\n\nClass GzipFileObject; // A Gzip file.\nClass GzipFileProvider; // Provides access to the content of Gzip files.\nClass GzipFileSystem; // A compressed file system using the Gzip method.\n", "des": "The GZIP File Provider"}
{"index": 2469, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package prometheus;\n\n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.prometheus.PrometheusMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"prometheus\") @EnableConfigurationProperties(PrometheusProperties.class) public class PrometheusMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Prometheus.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(io.prometheus.client.exporter.PushGateway.class) @ConditionalOnProperty(prefix=\"management.prometheus.metrics.export.pushgateway\", name=\"enabled\") public static class PrometheusMetricsExportAutoConfiguration.PrometheusPushGatewayConfiguration extends Object; // Configuration for Prometheus Pushgateway.\n@Configuration(proxyBeanMethods=false) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.metrics.export.prometheus.PrometheusScrapeEndpoint.class) public static class PrometheusMetricsExportAutoConfiguration.PrometheusScrapeEndpointConfiguration extends Object;\n@ConfigurationProperties(prefix=\"management.prometheus.metrics.export\") public class PrometheusProperties extends Object; // @ConfigurationProperties for configuring metrics export to Prometheus.\npublic static class PrometheusProperties.Pushgateway extends Object; // Configuration options for push-based interaction with Prometheus.\n", "des": "Support for exporting actuator metrics to Prometheus."}
{"index": 2604, "repo": "wicket-util-10.0.0-M1", "code": "package converter;\n\npublic abstract class AbstractConverter<C> extends Object implements IConverter<C>; // Base class for locale aware type converters.\npublic abstract class AbstractDateConverter<D extends Date> extends AbstractConverter<D>; // A base class for all Date related converters\npublic abstract class AbstractDecimalConverter<N extends Number> extends AbstractNumberConverter<N>; // Base class for all converters of decimal numbers.\npublic abstract class AbstractIntegerConverter<I extends Number> extends AbstractNumberConverter<I>; // Base class for all converters of integer numbers.\npublic abstract class AbstractJavaTimeConverter<T extends Temporal> extends AbstractConverter<T>; // A base class for all java.time.** related converters\npublic abstract class AbstractNumberConverter<N extends Number> extends AbstractConverter<N>; // Base class for all number converters.\npublic class BigDecimalConverter extends AbstractDecimalConverter<BigDecimal>; // BigDecimal converter\npublic class BigIntegerConverter extends AbstractIntegerConverter<BigInteger>; // BigInteger converter see IConverter\npublic class BooleanConverter extends AbstractConverter<Boolean>; // Converts from Object to Boolean.\npublic class ByteConverter extends AbstractIntegerConverter<Byte>; // Converts from Object to Byte.\npublic class CalendarConverter extends Object implements IConverter<Calendar>; // Converts to Calendar.\npublic class CharacterConverter extends AbstractConverter<Character>; // Converts from Object to Character.\npublic class DateConverter extends AbstractDateConverter<Date>; // Converts from Object to Date.\npublic class DoubleConverter extends AbstractDecimalConverter<Double>; // Converts from Object to Double.\npublic class FloatConverter extends AbstractDecimalConverter<Float>; // Converts from Object to Float.\npublic class IntegerConverter extends AbstractIntegerConverter<Integer>; // Converts from Object to Integer.\npublic class LocalDateConverter extends AbstractJavaTimeConverter<LocalDate>; // Converts from Object to LocalDate.\npublic class LocalDateTimeConverter extends AbstractJavaTimeConverter<LocalDateTime>; // Converts from Object to LocalDateTime.\npublic class LocalTimeConverter extends AbstractJavaTimeConverter<LocalTime>; // Converts from Object to LocalTime.\npublic class LongConverter extends AbstractIntegerConverter<Long>; // Converts from Object to Long.\npublic class ShortConverter extends AbstractIntegerConverter<Short>; // Converts from Object to Short.\npublic class SqlDateConverter extends AbstractDateConverter<Date>; // Converts to Date.\n", "des": "Default converter implementations."}
{"index": 64, "repo": "ignite-core-2.15.0", "code": "package ssl;\n\nClass SslContextFactory; // SSL context factory that provides SSL context configuration with specified key and trust stores.\nClass SSLContextWrapper; // Wrapper for SSLContext that extend source context with custom SSL parameters.\n", "des": "Contains classes for working with SSL."}
{"index": 1086, "repo": "graal-sdk-1.0.0-rc7", "code": "package io;\n\nInterface ByteSequence; // A ByteSequence is a readable sequence of byte values.\nInterface FileSystem; // Service-provider for Truffle files.\n", "des": "Input/Output support for the Graal-SDK polyglot API."}
{"index": 181, "repo": "ignite-core-2.15.0", "code": "package suggestions;\n\nClass GridPerformanceSuggestions; // Grid performance suggestions.\nClass JvmConfigurationSuggestions; // Java Virtual Machine configuration suggestions.\nClass OsConfigurationSuggestions; // Operation System configuration suggestions.\n", "des": "Contains classes for configurations suggestions."}
{"index": 1802, "repo": "spring-aop-6.0.11", "code": "package autoproxy;\n\npublic class AspectJAwareAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator; // AbstractAdvisorAutoProxyCreator subclass that exposes AspectJ's invocation context and understands AspectJ's rules for advice precedence when multiple pieces of advice come from the same aspect.\n", "des": "Base classes enabling auto-proxying based on AspectJ."}
{"index": 111, "repo": "ignite-core-2.15.0", "code": "package java;\n\nClass JavaLogger; // Logger to use with Java logging.\nClass JavaLoggerFileHandler; // File logging handler which skips all the messages until node ID is set.\nClass JavaLoggerFormatter; // Formatter for JUL logger.\n", "des": "Contains Java logging implementation for logging."}
{"index": 3048, "repo": "spring-web-6.0.11", "code": "package invoker;\n\npublic abstract class AbstractNamedValueArgumentResolver extends Object implements HttpServiceArgumentResolver; // Base class for arguments that resolve to a named request value such as a request header, path variable, cookie, and others.\nprotected static class AbstractNamedValueArgumentResolver.NamedValueInfo extends Object; // Info about a request value, typically extracted from a method parameter annotation.\npublic class CookieValueArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @CookieValue annotated arguments.\npublic interface HttpClientAdapter; // Contract to abstract the underlying HTTP client and decouple it from the HTTP service proxy.\npublic class HttpMethodArgumentResolver extends Object implements HttpServiceArgumentResolver; // HttpServiceArgumentResolver that resolves the target request's HTTP method from an HttpMethod argument.\npublic final class HttpRequestValues extends Object; // Container for HTTP request values extracted from an @HttpExchange-annotated method and argument values passed to it.\npublic static final class HttpRequestValues.Builder extends Object; // Builder for HttpRequestValues.\npublic interface HttpServiceArgumentResolver; // Resolve an argument from an @HttpExchange-annotated method to one or more HTTP request values.\npublic final class HttpServiceProxyFactory extends Object; // Factory to create a client proxy from an HTTP service interface with @HttpExchange methods.\npublic static final class HttpServiceProxyFactory.Builder extends Object; // Builder to create an HttpServiceProxyFactory.\npublic class PathVariableArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @PathVariable annotated arguments.\npublic class RequestAttributeArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestAttribute annotated arguments.\npublic class RequestBodyArgumentResolver extends Object implements HttpServiceArgumentResolver; // HttpServiceArgumentResolver for @RequestBody annotated arguments.\npublic class RequestHeaderArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestHeader annotated arguments.\npublic class RequestParamArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestParam annotated arguments.\npublic class RequestPartArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestPart annotated arguments.\npublic class UrlArgumentResolver extends Object implements HttpServiceArgumentResolver; // HttpServiceArgumentResolver that resolves the URL for the request from a URI argument.\n", "des": "Support for creating a client proxy for an HTTP service annotated with HttpExchange methods."}
{"index": 2058, "repo": "slf4j-ext-2.0.7", "code": "package agent;\n\npublic class AgentOptions extends Object; // All recognized options in the string passed to the java agent.\npublic class AgentPremain extends Object; // Entry point for slf4j-ext when used as a Java agent.\n", "des": "\"-javaagent\" routines for SLF4J."}
{"index": 2905, "repo": "spring-aspects-6.0.11", "code": "package aspectj;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(SpringConfiguredConfiguration.class) public @interface EnableSpringConfigured; // Signals the current application context to apply dependency injection to non-managed classes that are instantiated outside the Spring bean factory (typically classes annotated with the @Configurable annotation).\n@Configuration public class SpringConfiguredConfiguration extends Object; // @Configuration class that registers an AnnotationBeanConfigurerAspect capable of performing dependency injection services for non-Spring managed objects annotated with @Configurable.\n", "des": "AspectJ-based dependency injection support driven by the @Configurable annotation."}
{"index": 1865, "repo": "spring-test-6.0.11", "code": "package setup;\n\npublic abstract class AbstractMockMvcBuilder<B extends AbstractMockMvcBuilder<B>> extends MockMvcBuilderSupport implements ConfigurableMockMvcBuilder<B>; // Abstract implementation of MockMvcBuilder with common methods for configuring filters, default request properties, global expectations and global result actions.\npublic interface ConfigurableMockMvcBuilder<B extends ConfigurableMockMvcBuilder<B>> extends MockMvcBuilder; // Defines common methods for building a MockMvc.\npublic class DefaultMockMvcBuilder extends AbstractMockMvcBuilder<DefaultMockMvcBuilder>; // A concrete implementation of AbstractMockMvcBuilder that provides the WebApplicationContext supplied to it as a constructor argument.\npublic final class MockMvcBuilders extends Object; // The main class to import in order to access all available MockMvcBuilders.\npublic interface MockMvcConfigurer; // Contract for customizing a ConfigurableMockMvcBuilder in some specific way, e.g.\npublic abstract class MockMvcConfigurerAdapter extends Object implements MockMvcConfigurer; // An empty method implementation of MockMvcConfigurer.\npublic class SharedHttpSessionConfigurer extends Object implements MockMvcConfigurer; // MockMvcConfigurer that stores and re-uses the HTTP session across multiple requests performed through the same MockMvc instance.\npublic class StandaloneMockMvcBuilder extends AbstractMockMvcBuilder<StandaloneMockMvcBuilder>; // A MockMvcBuilder that accepts @Controller registrations thus allowing full control over the instantiation and initialization of controllers and their dependencies similar to plain unit tests, and also making it possible to test one controller at a time.\n", "des": "Contains built-in MockMvcBuilder implementations."}
{"index": 120, "repo": "ignite-core-2.15.0", "code": "package encryption;\n\npackage encryption.keystore; // Contains encryption SPI implementation based on standard jdk keystore.\npackage encryption.noop; // Contains no-op encryption SPI implementation.\nInterface EncryptionSpi; // SPI provides encryption features for an Ignite.\n", "des": "Contains APIs for encryption SPI."}
{"index": 2866, "repo": "spring-integration-core-6.1.2", "code": "package support;\n\npublic class CollectionArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // A HandlerMethodArgumentResolver implementation for Collection, Iterator or array MethodParameter.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class IntegrationInvocableHandlerMethod extends org.springframework.messaging.handler.invocation.InvocableHandlerMethod; // An InvocableHandlerMethod extension for Spring Integration requirements.\npublic class IntegrationMessageHandlerMethodFactory extends org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory; // Extension of the DefaultMessageHandlerMethodFactory for Spring Integration requirements.\npublic class MapArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // A HandlerMethodArgumentResolver implementation to resolve argument for the MethodParameter as a Map or Properties.\npublic class MessagingMethodInvokerHelper extends AbstractExpressionEvaluator implements ManageableLifecycle; // A helper class for processors that invoke a method on a target Object using a combination of message payload(s) and headers as arguments.\npublic static class MessagingMethodInvokerHelper.ParametersWrapper extends Object;\npublic class PayloadExpressionArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // The HandlerMethodArgumentResolver for evaluating Payload.expression() as a SpEL expression against message and converting result to expected parameter type.\npublic class PayloadsArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // The HandlerMethodArgumentResolver for resolving a Collection of payloads or expression against each payload.\n", "des": "Provides classes for message handlers support."}
{"index": 336, "repo": "kafka-clients-3.5.0", "code": "package authorizer;\n\nInterface AuthorizableRequestContext; // Request context interface that provides data from request header as well as connection and authentication information to plugins.\nInterface Authorizer; // Pluggable authorizer interface for Kafka brokers.\nInterface AuthorizerServerInfo; // Runtime broker configuration metadata provided to authorizers during start up.\nClass AclCreateResult;\nClass AclDeleteResult;\nClass AclDeleteResult.AclBindingDeleteResult; // Delete result for each ACL binding that matched a delete filter.\nClass Action;\nEnum AuthorizationResult;\n", "des": "Provides pluggable interface for performing authorization on a Kafka server."}
{"index": 282, "repo": "pdfbox-3.0.0-beta1", "code": "package pdmodel;\n\npackage pdmodel.common; // High level PD classes that are used throughout several packages are placed in the PDModel common package.\npackage pdmodel.encryption; // The encryption package will handle the PDF document security handlers and the functionality of pluggable security handlers.\npackage pdmodel.fdf; // The fdf package will handle all of the logic used for FDF objects inside of the PDF/FDF document.\npackage pdmodel.font; // Classes to deal with font functionality in a PDF Document.\npackage pdmodel.graphics; // The PDModel graphics package deals with graphics states, operations, and parameters within the PDF document.\nInterface ResourceCache; // A document-wide cache for page resources.\nClass DefaultResourceCache; // A resource cached based on SoftReference, retains resources until memory pressure causes them to be garbage collected.\nClass PDAppearanceContentStream; // Provides the ability to write to an appearance content stream.\nClass PDDestinationNameTreeNode; // This class holds all of the name trees that are available at the document level.\nClass PDDocument; // This is the in-memory representation of the PDF document.\nClass PDDocumentCatalog; // The Document Catalog of a PDF.\nClass PDDocumentInformation; // This is the document metadata.\nClass PDDocumentNameDestinationDictionary; // This encapsulates the \"dictionary of names and corresponding destinations\" for the /Dests entry in the document catalog.\nClass PDDocumentNameDictionary; // This class holds all of the name trees that are available at the document level.\nClass PDEmbeddedFilesNameTreeNode; // This class holds all of the name trees that are available at the document level.\nClass PDFormContentStream;\nClass PDJavascriptNameTreeNode; // This class holds all of the name trees that are available at the document level.\nClass PDPage; // A page in a PDF document.\nClass PDPageContentStream; // Provides the ability to write to a page content stream.\nClass PDPageTree; // The page tree, which defines the ordering of pages in the document in an efficient manner.\nClass PDPatternContentStream;\nClass PDResources; // A set of resources available at the page/pages/stream level.\nClass PDStructureElementNameTreeNode; // todo: JavaDoc\nEnum PageLayout; // A name object specifying the page layout shall be used when the document is opened.\n", "des": "The PDModel package represents a high level API for creating and manipulating PDF documents."}
{"index": 837, "repo": "calcite-core-1.34.0", "code": "package prepare;\n\nInterface Prepare.CatalogReader; // Interface by which validator and planner can read table metadata.\nInterface Prepare.PreparedResult; // Result of a call to Prepare.prepareSql(org.apache.calcite.sql.SqlNode, java.lang.Class, org.apache.calcite.sql.validate.SqlValidator, boolean).\nInterface Prepare.PreparingTable; // Definition of a table, for the purposes of the validator and planner.\nClass CalciteCatalogReader; // Implementation of Prepare.CatalogReader and also SqlOperatorTable based on tables and functions defined schemas.\nClass CalcitePrepareImpl; // Shit just got real.\nClass CalcitePrepareImpl.CalcitePreparingStmt; // Holds state for the process of preparing a SQL statement.\nClass CalciteSqlValidator; // Validator.\nClass PlannerImpl; // Implementation of Planner.\nClass Prepare; // Abstract base for classes that implement the process of preparing and executing SQL expressions.\nClass Prepare.AbstractPreparingTable; // Abstract implementation of Prepare.PreparingTable with an implementation for Prepare.AbstractPreparingTable.columnHasDefaultValue(org.apache.calcite.rel.type.RelDataType, int, org.apache.calcite.sql2rel.InitializerContext).\nClass Prepare.Materialization; // Describes that a given SQL query is materialized by a given table.\nClass Prepare.PreparedExplain; // PreparedExplanation is a PreparedResult for an EXPLAIN PLAN statement.\nClass Prepare.PreparedResultImpl; // Abstract implementation of Prepare.PreparedResult.\nClass RelOptTableImpl; // Implementation of RelOptTable.\n", "des": "Preparation of queries (parsing, planning and implementation)."}
{"index": 3478, "repo": "hilt-android-2.47", "code": "package migration;\n\nClass CustomInjection; // Utility methods for injecting the application when using CustomInject.\nClass OptionalInjectCheck; // Utility methods for validating if an AndroidEntryPoint-annotated class that is also annotated with OptionalInject was injected by Hilt.\nAnnotation Type CustomInject; // When used on a HiltAndroidApp-annotated application, this causes the application to no longer inject itself in onCreate and instead allows it to be injected at some other time.\nAnnotation Type OptionalInject; // When placed on an AndroidEntryPoint-annotated activity / fragment / view / etc, allows injection to occur optionally based on whether or not the application is using Hilt.\n", "des": "This package contains Android APIs to help migrating a codebase to Hilt."}
{"index": 3004, "repo": "spring-web-6.0.11", "code": "package protobuf;\n\npublic class KotlinSerializationProtobufDecoder extends KotlinSerializationBinaryDecoder<kotlinx.serialization.protobuf.ProtoBuf>; // Decode a byte stream into a protocol Buffer and convert to Objects with kotlinx.serialization.\npublic class KotlinSerializationProtobufEncoder extends KotlinSerializationBinaryEncoder<kotlinx.serialization.protobuf.ProtoBuf>; // Decode a byte stream into a Protocol Buffer and convert to Objects with kotlinx.serialization.\npublic abstract class ProtobufCodecSupport extends Object; // Base class providing support methods for Protobuf encoding and decoding.\npublic class ProtobufDecoder extends ProtobufCodecSupport implements org.springframework.core.codec.Decoder<com.google.protobuf.Message>; // A Decoder that reads Messages using Google Protocol Buffers.\npublic class ProtobufEncoder extends ProtobufCodecSupport implements HttpMessageEncoder<com.google.protobuf.Message>; // An Encoder that writes Messages using Google Protocol Buffers.\npublic class ProtobufHttpMessageWriter extends EncoderHttpMessageWriter<com.google.protobuf.Message>; // HttpMessageWriter that can write a protobuf Message and adds X-Protobuf-Schema, X-Protobuf-Message headers and a delimited=true parameter is added to the content type if a flux is serialized.\n", "des": "Provides an encoder and a decoder for Google Protocol Buffers."}
{"index": 1521, "repo": "spring-context-6.0.11", "code": "package standard;\n\npublic class DateTimeContext extends Object; // A context that holds user-specific java.time (JSR-310) settings such as the user's Chronology (calendar system) and time zone.\npublic final class DateTimeContextHolder extends Object; // A holder for a thread-local user DateTimeContext.\npublic class DateTimeFormatterFactory extends Object; // Factory that creates a JSR-310 DateTimeFormatter.\npublic class DateTimeFormatterFactoryBean extends DateTimeFormatterFactory implements org.springframework.beans.factory.FactoryBean<DateTimeFormatter>, org.springframework.beans.factory.InitializingBean; // FactoryBean that creates a JSR-310 DateTimeFormatter.\npublic class DateTimeFormatterRegistrar extends Object implements FormatterRegistrar; // Configures the JSR-310 java.time formatting system for use with Spring.\npublic class InstantFormatter extends Object implements Formatter<Instant>; // Formatter implementation for a JSR-310 Instant, following JSR-310's parsing rules for an Instant (that is, not using a configurable DateTimeFormatter): accepting the default ISO_INSTANT format as well as RFC_1123_DATE_TIME (which is commonly used for HTTP date header values), as of Spring 4.3.\npublic class Jsr310DateTimeFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<DateTimeFormat>; // Formats fields annotated with the DateTimeFormat annotation using the JSR-310 java.time package in JDK 8.\npublic final class TemporalAccessorParser extends Object implements Parser<TemporalAccessor>; // Parser implementation for a JSR-310 TemporalAccessor, using a DateTimeFormatter (the contextual one, if available).\npublic final class TemporalAccessorPrinter extends Object implements Printer<TemporalAccessor>; // Printer implementation for a JSR-310 TemporalAccessor, using a DateTimeFormatter) (the contextual one, if available).\n", "des": "Integration with the JSR-310 java.time package in JDK 8."}
{"index": 3443, "repo": "hibernate-core-5.6.15.Final", "code": "package unique;\n\nInterface UniqueDelegate; // Dialect-level delegate in charge of applying \"uniqueness\" to a column.\nClass DB2UniqueDelegate; // DB2 does not allow unique constraints on nullable columns.\nClass DefaultUniqueDelegate; // The default UniqueDelegate implementation for most dialects.\nClass InformixUniqueDelegate; // Informix requires the constraint name to come last on the alter table.\nClass MySQLUniqueDelegate;\n", "des": "Support for Dialect-specific unique constraint definition"}
{"index": 904, "repo": "commons-compress-1.23.0", "code": "package archivers;\n\npackage archivers.ar; // Provides stream classes for reading and writing archives using the AR format.\npackage archivers.arj; // Provides stream classes for reading archives using the ARJ format.\npackage archivers.cpio; // Provides stream classes for reading and writing archives using the CPIO format.\npackage archivers.dump; // This package provides stream classes for reading archives using the Unix DUMP format.\npackage archivers.examples; // Contains example code that is not guaranteed to provide a stable API across releases of Commons Compress.\npackage archivers.jar; // Provides stream classes for reading and writing archives using the ZIP format with some extensions for the special case of JAR archives.\npackage archivers.sevenz; // Provides classes for reading and writing archives using the 7z format.\npackage archivers.tar; // Provides stream classes for reading and writing archives using the TAR format.\npackage archivers.zip; // Provides stream classes for reading and writing archives using the ZIP format.\nInterface ArchiveEntry; // Represents an entry of an archive.\nInterface ArchiveStreamProvider; // Creates Archive ArchiveInputStreams and ArchiveOutputStreams.\nInterface EntryStreamOffsets; // Provides information about ArchiveEntry stream offsets.\nClass ArchiveInputStream; // Archive input streams MUST override the InputStream.read(byte[], int, int) - or ArchiveInputStream.read() - method so that reading from the stream generates EOF for the end of data in each entry as well as at the end of the file proper.\nClass ArchiveOutputStream; // Archive output stream implementations are expected to override the OutputStream.write(byte[], int, int) method to improve performance.\nClass ArchiveStreamFactory; // Factory to create Archive[In|Out]putStreams from names or the first bytes of the InputStream.\nClass Lister; // Simple command line application that lists the contents of an archive.\nClass ArchiveException; // Archiver related Exception\nClass StreamingNotSupportedException; // Exception thrown by ArchiveStreamFactory if a format is requested/detected that doesn't support streaming.\n", "des": "Provides a unified API and factories for dealing with archives in different formats."}
{"index": 637, "repo": "hadoop-yarn-server-common-3.3.6", "code": "package failover;\n\nClass FederationProxyProviderUtil; // Utility class that creates proxy for specified protocols when federation is enabled.\nClass FederationRMFailoverProxyProvider<T>; // A FailoverProxyProvider implementation that uses the FederationStateStore to determine the ResourceManager to connect to.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 2075, "repo": "spring-webmvc-6.0.11", "code": "package support;\n\npublic class DefaultHandlerExceptionResolver extends AbstractHandlerExceptionResolver; // The default implementation of the HandlerExceptionResolver interface, resolving standard Spring MVC exceptions and translating them to corresponding HTTP status codes.\npublic interface RedirectAttributes extends org.springframework.ui.Model; // A specialization of the Model interface that controllers can use to select attributes for a redirect scenario.\npublic class RedirectAttributesModelMap extends org.springframework.ui.ModelMap implements RedirectAttributes; // A ModelMap implementation of RedirectAttributes that formats values as Strings using a DataBinder.\n", "des": "Support package for MVC controllers."}
{"index": 1769, "repo": "spring-data-mongodb-4.1.2", "code": "package aot;\n\npublic class AotMongoRepositoryPostProcessor extends RepositoryRegistrationAotProcessor;\n", "des": "Ahead-Of-Time processors for MongoDB repositories."}
{"index": 2499, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "package startup;\n\n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.startup.StartupEndpoint.class) @Conditional(org.springframework.boot.actuate.autoconfigure.startup.StartupEndpointAutoConfiguration.ApplicationStartupCondition.class) public class StartupEndpointAutoConfiguration extends Object; // Auto-configuration for the StartupEndpoint.\n", "des": "Auto-configuration for actuator ApplicationStartup concerns."}
{"index": 554, "repo": "hadoop-common-3.3.4", "code": "package http;\n\nClass HttpFileSystem; // A Filesystem that reads from HTTP endpoint.\nClass HttpsFileSystem; // A Filesystem that reads from HTTPS endpoint.\n", "des": "Filesystem implementations that allow Hadoop to read directly from HTTP / HTTPS endpoints."}
{"index": 1499, "repo": "wicket-extensions-10.0.0-M1", "code": "package encoding;\n\npublic final class CharSetMap extends Object; // This class maintains a set of mappers defining mappings between locales and the corresponding charsets.\npublic class CharSetUtil extends Object; // Utility class.\n", "des": "Encoding extensions."}
{"index": 688, "repo": "jackson-databind-2.15.2", "code": "package jsonFormatVisitors;\n\nInterface JsonAnyFormatVisitor;\nInterface JsonArrayFormatVisitor;\nInterface JsonBooleanFormatVisitor;\nInterface JsonFormatVisitable; // Interface JsonSerializer implements to allow for visiting type hierarchy.\nInterface JsonFormatVisitorWithSerializerProvider;\nInterface JsonFormatVisitorWrapper; // Interface for visitor callbacks, when type in question can be any of legal JSON types.\nInterface JsonIntegerFormatVisitor;\nInterface JsonMapFormatVisitor;\nInterface JsonNullFormatVisitor;\nInterface JsonNumberFormatVisitor;\nInterface JsonObjectFormatVisitor; // Visitor called when properties of a type that maps to JSON Object are being visited: this usually means POJOs, but sometimes other types use it too (like EnumMap).\nInterface JsonStringFormatVisitor;\nInterface JsonValueFormatVisitor;\nClass JsonAnyFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonArrayFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonBooleanFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonFormatVisitorWrapper.Base; // Empty \"no-op\" implementation of JsonFormatVisitorWrapper, suitable for sub-classing.\nClass JsonIntegerFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonMapFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonNullFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\n", "des": "Classes used for exposing logical structure of POJOs as Jackson sees it, and exposed via ObjectMapper.acceptJsonFormatVisitor(Class, JsonFormatVisitorWrapper) and ObjectMapper.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType, JsonFormatVisitorWrapper) methods."}
{"index": 1922, "repo": "spring-boot-autoconfigure-3.1.1", "code": "package domain;\n\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(org.springframework.boot.autoconfigure.domain.EntityScanPackages.Registrar.class) public @interface EntityScan; // Configures the base packages used by auto-configuration when scanning for entity classes.\npublic class EntityScanner extends Object; // An entity scanner that searches the classpath from an @EntityScan specified packages.\npublic class EntityScanPackages extends Object; // Class for storing @EntityScan specified packages for reference later (e.g.\n", "des": "General purpose domain annotations and classes."}
{"index": 3507, "repo": "poi-5.2.3", "code": "package ptg;\n\nInterface AreaI; // Common interface for AreaPtg and Area3DPtg, and their child classes.\nInterface Pxg; // An XSSF only special kind of Ptg, which stores the sheet / book reference in string form.\nInterface Pxg3D; // An XSSF only special kind of Ptg, which stores a range of sheet / book references in string form.\nClass AbstractFunctionPtg; // This class provides the base functionality for Excel sheet functions There are two kinds of function Ptgs - tFunc and tFuncVar Therefore, this class will have ONLY two subclasses\nClass AddPtg; // Addition operator PTG the \"+\" binomial operator.\nClass Area2DPtgBase; // Common superclass of 2-D area refs\nClass Area3DPtg; // Area 3D Ptg - 3D reference (Sheet + Area)\nClass Area3DPxg; // XSSF Area 3D Reference (Sheet + Area)\nClass AreaErrPtg; // AreaErr - handles deleted cell area references.\nClass AreaI.OffsetArea;\nClass AreaNPtg; // Specifies a rectangular area of cells A1:A4 for instance.\nClass AreaPtg; // Specifies a rectangular area of cells A1:A4 for instance.\nClass AreaPtgBase; // Specifies a rectangular area of cells A1:A4 for instance.\nClass ArrayPtg; // ArrayPtg - handles arrays The ArrayPtg is a little weird, the size of the Ptg when parsing initially only includes the Ptg sid and the reserved bytes.\nClass AttrPtg; // \"Special Attributes\"\nClass AttrPtg.SpaceType;\nClass BoolPtg; // Boolean (boolean) Stores a (java) boolean value in a formula.\nClass ConcatPtg;\nClass ControlPtg;\nClass Deleted3DPxg; // An XSSF only representation of a reference to a deleted area\nClass DeletedArea3DPtg; // Deleted Area 3D Ptg - 3D referecnce (Sheet + Area)\nClass DeletedRef3DPtg; // Deleted Reference 3D Ptg\nClass DividePtg; // This PTG implements the standard binomial divide \"/\"\nClass EqualPtg;\n", "des": "The formula package contains binary PTG structures used in Formulas"}
{"index": 3596, "repo": "lucene-test-framework-9.7.0", "code": "package search;\n\npackage search.similarities; // Support for testing similarities.\nClass AssertingIndexSearcher; // Helper class that adds some extra checks to ensure correct usage of IndexSearcher and Weight.\nClass AssertingMatches; // An implementation of Matches with additional consistency checks.\nClass AssertingQuery; // Assertion-enabled query.\nClass AssertingScorable; // Wraps another Scorable and asserts that scores are reasonable and only called when positioned\nClass AssertingScorer; // Wraps a Scorer with additional checks\nClass BaseExplanationTestCase; // Tests primitive queries (ie: that rewrite to themselves) to insure they match the expected set of docs, and that the score of each match is equal to the value of the scores explanation.\nClass BaseRangeFieldQueryTestCase; // Abstract class to do basic tests for a RangeField query.\nClass BaseRangeFieldQueryTestCase.Range; // base class for range verification\nClass BlockScoreQueryWrapper; // Query wrapper that reduces the size of max-score blocks to more easily detect problems with the max-score logic.\nClass BulkScorerWrapperScorer; // A BulkScorer-backed scorer.\nClass CheckHits; // Utility class for asserting expected hits in tests.\nClass CheckHits.ExplanationAsserter; // Asserts that the score explanation for every document matching a query corresponds with the true score.\nClass CheckHits.ExplanationAssertingSearcher; // an IndexSearcher that implicitly checks hte explanation of every match whenever it executes a search.\nClass CheckHits.MatchesAsserter; // Asserts that the Matches from a query is non-null whenever the document its created for is a hit.\nClass CheckHits.SetCollector; // Just collects document ids into a set.\nClass DummyTotalHitCountCollector; // A dummy version of TotalHitCountCollector that doesn't shortcut using Weight.count(org.apache.lucene.index.LeafReaderContext).\nClass FixedBitSetCollector; // Collector that accumulates matching docs in a FixedBitSet\nClass MatchesTestBase; // Base class for tests checking the Weight.matches(LeafReaderContext, int) implementations\nClass MatchesTestBase.TermMatch; // Encapsulates a term position, start and end offset\nClass QueryUtils; // Utility class for sanity-checking queries.\n", "des": "Support for testing search components."}
{"index": 3777, "repo": "lucene-analysis-common-9.7.0", "code": "package da;\n\nClass DanishAnalyzer; // Analyzer for Danish.\n", "des": "Analyzer for Danish."}
{"index": 1551, "repo": "spring-context-6.0.11", "code": "package ui;\n\npackage ui.context; // Contains classes defining the application context subinterface for UI applications.\npublic class ConcurrentModel extends ConcurrentHashMap<String,Object> implements Model; // Implementation of the Model interface based on a ConcurrentHashMap for use in concurrent scenarios.\npublic class ExtendedModelMap extends ModelMap implements Model; // Subclass of ModelMap that implements the Model interface.\npublic interface Model; // Interface that defines a holder for model attributes.\npublic class ModelMap extends LinkedHashMap<String,Object>; // Implementation of Map for use when building model data for use with UI tools.\n", "des": "Generic support for UI layer concepts."}
{"index": 761, "repo": "lucene-analyzers-common-8.11.2", "code": "package charfilter;\n\nClass BaseCharFilter; // Base utility class for implementing a CharFilter.\nClass HTMLStripCharFilter; // A CharFilter that wraps another Reader and attempts to strip out HTML constructs.\nClass HTMLStripCharFilterFactory; // Factory for HTMLStripCharFilter.\nClass MappingCharFilter; // Simplistic CharFilter that applies the mappings contained in a NormalizeCharMap to the character stream, and correcting the resulting changes to the offsets.\nClass MappingCharFilterFactory; // Factory for MappingCharFilter.\nClass NormalizeCharMap; // Holds a map of String input to String output, to be used with MappingCharFilter.\nClass NormalizeCharMap.Builder; // Builds an NormalizeCharMap.\n", "des": "Normalization of text before the tokenizer."}
{"index": 1497, "repo": "wicket-extensions-10.0.0-M1", "code": "package tabs;\n\npublic abstract class AbstractTab extends Object implements ITab; // Convenience class that takes care of common ITab functionality\npublic interface ITab extends org.apache.wicket.util.io.IClusterable; // Interface used to represent a single tab in a TabbedPanel\npublic class PanelCachingTab extends Object implements ITab; // A simple decorator that will cache the panel returned from the first call to getPanel()\npublic class TabbedPanel<T extends ITab> extends org.apache.wicket.markup.html.panel.Panel; // TabbedPanel component represents a panel with tabs that are used to switch between different content panels inside the TabbedPanel panel.\n", "des": "Package for working with tab panels."}
{"index": 1092, "repo": "hbase-server-3.0.0-alpha-4", "code": "package constraint;\n\nInterface Constraint; // Apply a Constraint (in traditional database terminology) to a Table.\nClass BaseConstraint; // Base class to use when actually implementing a Constraint.\nClass ConstraintProcessor; // Processes multiple Constraints on a given table.\nClass Constraints; // Utilities for adding/removing constraints from a table.\nClass ConstraintException; // Exception that a user defined constraint throws on failure of a Put.\n", "des": "Restrict the domain of a data attribute, often times to fulfill business rules/requirements."}
{"index": 2313, "repo": "spring-boot-3.1.1", "code": "package jms;\n\n@FunctionalInterface public interface XAConnectionFactoryWrapper; // Strategy interface used to wrap a JMS XAConnectionFactory enrolling it with a JTA TransactionManager.\n", "des": "Support for Java Message Service (JMS)."}
{"index": 1628, "repo": "spring-kafka-3.0.9", "code": "package adapter;\n\npublic abstract class AbstractDelegatingMessageListenerAdapter<T> extends Object implements ConsumerSeekAware, DelegatingMessageListener<T>; // Top level class for all listener adapters.\npublic abstract class AbstractFilteringMessageListener<K,V,T> extends AbstractDelegatingMessageListenerAdapter<T>; // An abstract message listener adapter that implements record filter logic via a RecordFilterStrategy.\npublic abstract class AbstractRetryingMessageListenerAdapter<K,V,T> extends AbstractDelegatingMessageListenerAdapter<T>; // Base class for retrying message listener adapters.\npublic final class AdapterUtils extends Object; // Utilities for listener adapters.\npublic class BatchMessagingMessageListenerAdapter<K,V> extends MessagingMessageListenerAdapter<K,V> implements BatchAcknowledgingConsumerAwareMessageListener<K,V>; // A MessageListener adapter that invokes a configurable HandlerAdapter; used when the factory is configured for the listener to receive batches of messages.\n@FunctionalInterface public interface BatchToRecordAdapter<K,V>; // An adapter that adapts a batch listener to a record listener method.\n@FunctionalInterface public static interface BatchToRecordAdapter.Callback<K,V>; // A callback for each message.\npublic class ConsumerRecordMetadata extends Object; // Used to provide a listener method argument when the user supplies such a parameter.\npublic class ConvertingMessageListener<V> extends Object implements DelegatingMessageListener<MessageListener>, AcknowledgingConsumerAwareMessageListener<Object,Object>; // A AcknowledgingConsumerAwareMessageListener adapter that implements converting received ConsumerRecord using specified MessageConverter and then passes result to specified MessageListener.\npublic class DefaultBatchToRecordAdapter<K,V> extends Object implements BatchToRecordAdapter<K,V>; // The default BatchToRecordAdapter implementation; if the supplied recoverer throws an exception, the batch will be aborted; otherwise the next record will be processed.\npublic class DelegatingInvocableHandler extends Object; // Delegates to an InvocableHandlerMethod based on the message payload type.\npublic class FilteringBatchMessageListenerAdapter<K,V> extends AbstractFilteringMessageListener<K,V,BatchMessageListener<K,V>> implements BatchAcknowledgingConsumerAwareMessageListener<K,V>; // A BatchMessageListener adapter that implements filter logic via a RecordFilterStrategy.\n", "des": "Provides classes for adapting listeners."}
{"index": 1224, "repo": "commons-text-1.10.0", "code": "package translate;\n\nClass AggregateTranslator; // Executes a sequence of translators one after the other.\nClass CharSequenceTranslator; // An API for translating text.\nClass CodePointTranslator; // Helper subclass to CharSequenceTranslator to allow for translations that will replace up to one character at a time.\nClass CsvTranslators; // This class holds inner classes for escaping/unescaping Comma Separated Values.\nClass CsvTranslators.CsvEscaper; // Translator for escaping Comma Separated Values.\nClass CsvTranslators.CsvUnescaper; // Translator for unescaping escaped Comma Separated Value entries.\nClass EntityArrays; // Class holding various entity data for HTML and XML - generally for use with the LookupTranslator.\nClass JavaUnicodeEscaper; // Translates code points to their Unicode escaped value suitable for Java source.\nClass LookupTranslator; // Translates a value using a lookup table.\nClass NumericEntityEscaper; // Translates code points to their XML numeric entity escaped value.\nClass NumericEntityUnescaper; // Translates XML numeric entities of the form &#[xX]?\\d+;? to the specific code point.\nClass OctalUnescaper; // Translate escaped octal Strings back to their octal values.\nClass UnicodeEscaper; // Translates code points to their Unicode escaped value.\nClass UnicodeUnescaper; // Translates escaped Unicode values of the form \\\\u+\\d\\d\\d\\d back to Unicode.\nClass UnicodeUnpairedSurrogateRemover; // Helper subclass to CharSequenceTranslator to remove unpaired surrogates.\nEnum NumericEntityUnescaper.OPTION; // Enumerates NumericEntityUnescaper options for unescaping.\n", "des": "An API for creating text translation routines from a set of smaller building blocks."}
{"index": 3051, "repo": "spring-ws-core-4.0.5", "code": "package ws;\n\npackage ws.client; // Contains classes for client-side Spring-WS support, allowing for Spring-style Web service access.\npackage ws.config; // Provides an namespace handler for the Spring Web Services namespace.\npackage ws.context; // Contains the MessageContext interface and implementations thereof.\npackage ws.mime; // Provides MIME functionality for use the Spring Web Services framework.\npackage ws.pox; // Provides the Plain Old XML (POX) functionality of the Spring Web Services framework.\npackage ws.server; // Contains classes for server-side Spring-WS support.\npackage ws.soap; // Provides the SOAP functionality of the Spring Web Services framework.\npackage ws.support; // Provides general helper classes for Spring Web Services.\npackage ws.transport; // Contains the TransportRequest and TransportResponse interfaces.\npackage ws.wsdl; // Provides the WSDL functionality of the Spring Web Services framework.\npublic interface FaultAwareWebServiceMessage extends WebServiceMessage; // Sub-interface of WebServiceMessage that can contain special Fault messages.\npublic final class InvalidXmlException extends WebServiceException; // Exception thrown when a WebServiceMessageFactory cannot parse the XML passed on to WebServiceMessageFactory.createWebServiceMessage(java.io.InputStream).\npublic final class NoEndpointFoundException extends WebServiceException; // Exception thrown when an endpoint cannot be resolved for an incoming message request.\npublic abstract class WebServiceException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of Web Service exceptions.\npublic interface WebServiceMessage; // Represents a protocol-agnostic XML message.\npublic abstract class WebServiceMessageException extends WebServiceException; // Base class for all web service message exceptions.\npublic interface WebServiceMessageFactory; // The WebServiceMessageFactory serves as a factory for WebServiceMessages.\n", "des": "Provides the core functionality of the Spring Web Services framework."}
{"index": 723, "repo": "commons-codec-1.16.0", "code": "package bm;\n\nInterface Rule.PhonemeExpr;\nInterface Rule.RPattern; // A minimal wrapper around the functionality of Pattern that we use, to allow for alternate implementations.\nClass BeiderMorseEncoder; // Encodes strings into their Beider-Morse phonetic encoding.\nClass Lang; // Language guessing utility.\nClass Languages; // Language codes.\nClass Languages.LanguageSet; // A set of languages.\nClass Languages.SomeLanguages; // Some languages, explicitly enumerated.\nClass PhoneticEngine; // Converts words into potential phonetic representations.\nClass Rule; // A phoneme rule.\nClass Rule.Phoneme;\nClass Rule.PhonemeList;\nEnum NameType; // Supported types of names.\nEnum RuleType; // Types of rule.\n", "des": "Implementation details of the Beider-Morse codec."}
